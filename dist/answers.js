var ANSWERS = (function (noConflict, _objectSpread2, _inheritsLoose, _wrapNativeSuper, _createClass, _assertThisInitialized) {
  'use strict';

  _objectSpread2 = _objectSpread2 && _objectSpread2.hasOwnProperty('default') ? _objectSpread2['default'] : _objectSpread2;
  _inheritsLoose = _inheritsLoose && _inheritsLoose.hasOwnProperty('default') ? _inheritsLoose['default'] : _inheritsLoose;
  _wrapNativeSuper = _wrapNativeSuper && _wrapNativeSuper.hasOwnProperty('default') ? _wrapNativeSuper['default'] : _wrapNativeSuper;
  _createClass = _createClass && _createClass.hasOwnProperty('default') ? _createClass['default'] : _createClass;
  _assertThisInitialized = _assertThisInitialized && _assertThisInitialized.hasOwnProperty('default') ? _assertThisInitialized['default'] : _assertThisInitialized;

  var support = {
    searchParams: 'URLSearchParams' in self,
    iterable: 'Symbol' in self && 'iterator' in Symbol,
    blob:
      'FileReader' in self &&
      'Blob' in self &&
      (function() {
        try {
          new Blob();
          return true
        } catch (e) {
          return false
        }
      })(),
    formData: 'FormData' in self,
    arrayBuffer: 'ArrayBuffer' in self
  };

  function isDataView(obj) {
    return obj && DataView.prototype.isPrototypeOf(obj)
  }

  if (support.arrayBuffer) {
    var viewClasses = [
      '[object Int8Array]',
      '[object Uint8Array]',
      '[object Uint8ClampedArray]',
      '[object Int16Array]',
      '[object Uint16Array]',
      '[object Int32Array]',
      '[object Uint32Array]',
      '[object Float32Array]',
      '[object Float64Array]'
    ];

    var isArrayBufferView =
      ArrayBuffer.isView ||
      function(obj) {
        return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1
      };
  }

  function normalizeName(name) {
    if (typeof name !== 'string') {
      name = String(name);
    }
    if (/[^a-z0-9\-#$%&'*+.^_`|~]/i.test(name)) {
      throw new TypeError('Invalid character in header field name')
    }
    return name.toLowerCase()
  }

  function normalizeValue(value) {
    if (typeof value !== 'string') {
      value = String(value);
    }
    return value
  }

  // Build a destructive iterator for the value list
  function iteratorFor(items) {
    var iterator = {
      next: function() {
        var value = items.shift();
        return {done: value === undefined, value: value}
      }
    };

    if (support.iterable) {
      iterator[Symbol.iterator] = function() {
        return iterator
      };
    }

    return iterator
  }

  function Headers(headers) {
    this.map = {};

    if (headers instanceof Headers) {
      headers.forEach(function(value, name) {
        this.append(name, value);
      }, this);
    } else if (Array.isArray(headers)) {
      headers.forEach(function(header) {
        this.append(header[0], header[1]);
      }, this);
    } else if (headers) {
      Object.getOwnPropertyNames(headers).forEach(function(name) {
        this.append(name, headers[name]);
      }, this);
    }
  }

  Headers.prototype.append = function(name, value) {
    name = normalizeName(name);
    value = normalizeValue(value);
    var oldValue = this.map[name];
    this.map[name] = oldValue ? oldValue + ', ' + value : value;
  };

  Headers.prototype['delete'] = function(name) {
    delete this.map[normalizeName(name)];
  };

  Headers.prototype.get = function(name) {
    name = normalizeName(name);
    return this.has(name) ? this.map[name] : null
  };

  Headers.prototype.has = function(name) {
    return this.map.hasOwnProperty(normalizeName(name))
  };

  Headers.prototype.set = function(name, value) {
    this.map[normalizeName(name)] = normalizeValue(value);
  };

  Headers.prototype.forEach = function(callback, thisArg) {
    for (var name in this.map) {
      if (this.map.hasOwnProperty(name)) {
        callback.call(thisArg, this.map[name], name, this);
      }
    }
  };

  Headers.prototype.keys = function() {
    var items = [];
    this.forEach(function(value, name) {
      items.push(name);
    });
    return iteratorFor(items)
  };

  Headers.prototype.values = function() {
    var items = [];
    this.forEach(function(value) {
      items.push(value);
    });
    return iteratorFor(items)
  };

  Headers.prototype.entries = function() {
    var items = [];
    this.forEach(function(value, name) {
      items.push([name, value]);
    });
    return iteratorFor(items)
  };

  if (support.iterable) {
    Headers.prototype[Symbol.iterator] = Headers.prototype.entries;
  }

  function consumed(body) {
    if (body.bodyUsed) {
      return Promise.reject(new TypeError('Already read'))
    }
    body.bodyUsed = true;
  }

  function fileReaderReady(reader) {
    return new Promise(function(resolve, reject) {
      reader.onload = function() {
        resolve(reader.result);
      };
      reader.onerror = function() {
        reject(reader.error);
      };
    })
  }

  function readBlobAsArrayBuffer(blob) {
    var reader = new FileReader();
    var promise = fileReaderReady(reader);
    reader.readAsArrayBuffer(blob);
    return promise
  }

  function readBlobAsText(blob) {
    var reader = new FileReader();
    var promise = fileReaderReady(reader);
    reader.readAsText(blob);
    return promise
  }

  function readArrayBufferAsText(buf) {
    var view = new Uint8Array(buf);
    var chars = new Array(view.length);

    for (var i = 0; i < view.length; i++) {
      chars[i] = String.fromCharCode(view[i]);
    }
    return chars.join('')
  }

  function bufferClone(buf) {
    if (buf.slice) {
      return buf.slice(0)
    } else {
      var view = new Uint8Array(buf.byteLength);
      view.set(new Uint8Array(buf));
      return view.buffer
    }
  }

  function Body() {
    this.bodyUsed = false;

    this._initBody = function(body) {
      this._bodyInit = body;
      if (!body) {
        this._bodyText = '';
      } else if (typeof body === 'string') {
        this._bodyText = body;
      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
        this._bodyBlob = body;
      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
        this._bodyFormData = body;
      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
        this._bodyText = body.toString();
      } else if (support.arrayBuffer && support.blob && isDataView(body)) {
        this._bodyArrayBuffer = bufferClone(body.buffer);
        // IE 10-11 can't handle a DataView body.
        this._bodyInit = new Blob([this._bodyArrayBuffer]);
      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
        this._bodyArrayBuffer = bufferClone(body);
      } else {
        this._bodyText = body = Object.prototype.toString.call(body);
      }

      if (!this.headers.get('content-type')) {
        if (typeof body === 'string') {
          this.headers.set('content-type', 'text/plain;charset=UTF-8');
        } else if (this._bodyBlob && this._bodyBlob.type) {
          this.headers.set('content-type', this._bodyBlob.type);
        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
        }
      }
    };

    if (support.blob) {
      this.blob = function() {
        var rejected = consumed(this);
        if (rejected) {
          return rejected
        }

        if (this._bodyBlob) {
          return Promise.resolve(this._bodyBlob)
        } else if (this._bodyArrayBuffer) {
          return Promise.resolve(new Blob([this._bodyArrayBuffer]))
        } else if (this._bodyFormData) {
          throw new Error('could not read FormData body as blob')
        } else {
          return Promise.resolve(new Blob([this._bodyText]))
        }
      };

      this.arrayBuffer = function() {
        if (this._bodyArrayBuffer) {
          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)
        } else {
          return this.blob().then(readBlobAsArrayBuffer)
        }
      };
    }

    this.text = function() {
      var rejected = consumed(this);
      if (rejected) {
        return rejected
      }

      if (this._bodyBlob) {
        return readBlobAsText(this._bodyBlob)
      } else if (this._bodyArrayBuffer) {
        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))
      } else if (this._bodyFormData) {
        throw new Error('could not read FormData body as text')
      } else {
        return Promise.resolve(this._bodyText)
      }
    };

    if (support.formData) {
      this.formData = function() {
        return this.text().then(decode)
      };
    }

    this.json = function() {
      return this.text().then(JSON.parse)
    };

    return this
  }

  // HTTP methods whose capitalization should be normalized
  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];

  function normalizeMethod(method) {
    var upcased = method.toUpperCase();
    return methods.indexOf(upcased) > -1 ? upcased : method
  }

  function Request(input, options) {
    options = options || {};
    var body = options.body;

    if (input instanceof Request) {
      if (input.bodyUsed) {
        throw new TypeError('Already read')
      }
      this.url = input.url;
      this.credentials = input.credentials;
      if (!options.headers) {
        this.headers = new Headers(input.headers);
      }
      this.method = input.method;
      this.mode = input.mode;
      this.signal = input.signal;
      if (!body && input._bodyInit != null) {
        body = input._bodyInit;
        input.bodyUsed = true;
      }
    } else {
      this.url = String(input);
    }

    this.credentials = options.credentials || this.credentials || 'same-origin';
    if (options.headers || !this.headers) {
      this.headers = new Headers(options.headers);
    }
    this.method = normalizeMethod(options.method || this.method || 'GET');
    this.mode = options.mode || this.mode || null;
    this.signal = options.signal || this.signal;
    this.referrer = null;

    if ((this.method === 'GET' || this.method === 'HEAD') && body) {
      throw new TypeError('Body not allowed for GET or HEAD requests')
    }
    this._initBody(body);
  }

  Request.prototype.clone = function() {
    return new Request(this, {body: this._bodyInit})
  };

  function decode(body) {
    var form = new FormData();
    body
      .trim()
      .split('&')
      .forEach(function(bytes) {
        if (bytes) {
          var split = bytes.split('=');
          var name = split.shift().replace(/\+/g, ' ');
          var value = split.join('=').replace(/\+/g, ' ');
          form.append(decodeURIComponent(name), decodeURIComponent(value));
        }
      });
    return form
  }

  function parseHeaders(rawHeaders) {
    var headers = new Headers();
    // Replace instances of \r\n and \n followed by at least one space or horizontal tab with a space
    // https://tools.ietf.org/html/rfc7230#section-3.2
    var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, ' ');
    preProcessedHeaders.split(/\r?\n/).forEach(function(line) {
      var parts = line.split(':');
      var key = parts.shift().trim();
      if (key) {
        var value = parts.join(':').trim();
        headers.append(key, value);
      }
    });
    return headers
  }

  Body.call(Request.prototype);

  function Response(bodyInit, options) {
    if (!options) {
      options = {};
    }

    this.type = 'default';
    this.status = options.status === undefined ? 200 : options.status;
    this.ok = this.status >= 200 && this.status < 300;
    this.statusText = 'statusText' in options ? options.statusText : 'OK';
    this.headers = new Headers(options.headers);
    this.url = options.url || '';
    this._initBody(bodyInit);
  }

  Body.call(Response.prototype);

  Response.prototype.clone = function() {
    return new Response(this._bodyInit, {
      status: this.status,
      statusText: this.statusText,
      headers: new Headers(this.headers),
      url: this.url
    })
  };

  Response.error = function() {
    var response = new Response(null, {status: 0, statusText: ''});
    response.type = 'error';
    return response
  };

  var redirectStatuses = [301, 302, 303, 307, 308];

  Response.redirect = function(url, status) {
    if (redirectStatuses.indexOf(status) === -1) {
      throw new RangeError('Invalid status code')
    }

    return new Response(null, {status: status, headers: {location: url}})
  };

  var DOMException = self.DOMException;
  try {
    new DOMException();
  } catch (err) {
    DOMException = function(message, name) {
      this.message = message;
      this.name = name;
      var error = Error(message);
      this.stack = error.stack;
    };
    DOMException.prototype = Object.create(Error.prototype);
    DOMException.prototype.constructor = DOMException;
  }

  function fetch$1(input, init) {
    return new Promise(function(resolve, reject) {
      var request = new Request(input, init);

      if (request.signal && request.signal.aborted) {
        return reject(new DOMException('Aborted', 'AbortError'))
      }

      var xhr = new XMLHttpRequest();

      function abortXhr() {
        xhr.abort();
      }

      xhr.onload = function() {
        var options = {
          status: xhr.status,
          statusText: xhr.statusText,
          headers: parseHeaders(xhr.getAllResponseHeaders() || '')
        };
        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');
        var body = 'response' in xhr ? xhr.response : xhr.responseText;
        resolve(new Response(body, options));
      };

      xhr.onerror = function() {
        reject(new TypeError('Network request failed'));
      };

      xhr.ontimeout = function() {
        reject(new TypeError('Network request failed'));
      };

      xhr.onabort = function() {
        reject(new DOMException('Aborted', 'AbortError'));
      };

      xhr.open(request.method, request.url, true);

      if (request.credentials === 'include') {
        xhr.withCredentials = true;
      } else if (request.credentials === 'omit') {
        xhr.withCredentials = false;
      }

      if ('responseType' in xhr && support.blob) {
        xhr.responseType = 'blob';
      }

      request.headers.forEach(function(value, name) {
        xhr.setRequestHeader(name, value);
      });

      if (request.signal) {
        request.signal.addEventListener('abort', abortXhr);

        xhr.onreadystatechange = function() {
          // DONE (success or failure)
          if (xhr.readyState === 4) {
            request.signal.removeEventListener('abort', abortXhr);
          }
        };
      }

      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);
    })
  }

  fetch$1.polyfill = true;

  if (!self.fetch) {
    self.fetch = fetch$1;
    self.Headers = Headers;
    self.Request = Request;
    self.Response = Response;
  }

  /** @module SearchStates */

  /**
   * SearchStates is an ENUM for the various stages of searching,
   * used to show different templates
   * @enum {string}
   */
  var SearchStates = {
    PRE_SEARCH: 'pre-search',
    SEARCH_LOADING: 'search-loading',
    SEARCH_COMPLETE: 'search-complete'
  };

  /** @module Result */
  var Result = function Result(data) {
    if (data === void 0) {
      data = {};
    }

    /**
     * The raw profile data
     * @type {Object}
     * @private
     */
    this._raw = data.raw || null;
    /**
     * The formatted profile data
     * @type {Object}
     * @private
     */

    this._formatted = data.formatted;
    /**
     * The highlighted profile data with highlights applied to applicable fields
     * @type {Object}
     * @private
     */

    this._highlighted = data.highlighted;
    /**
     * The index number of the result
     * @type {Number}
     */

    this.ordinal = data.ordinal || null;
    /**
     * The title of the result card
     * @type {string|null}
     */

    this.title = data.title || null;
    /**
     * The body of the details section of the result card, can contain HTML
     * @type {string| null}
     */

    this.details = data.details || null;
    /**
     * The destination link for the title of the result card
     * @type {string|null}
     */

    this.link = data.link || null;
    /**
     * The Entity ID, or other unique identifier, used for to power interactivity
     * @type {string|null}
     */

    this.id = data.id || null;
    /**
     * The subtitle on the result card
     * @type {string|null}
     */

    this.subtitle = data.subtitle || null;
    /**
     * The class modifier, usually derived from the vertical configuration ID
     * Used to apply different styling to different result card types
     * @type {string|null}
     */

    this.modifier = data.modifier || null;
    /**
     * A large date, of the format { month: 'Jan', day: '01' }
     * @type {Object|null}
     */

    this.bigDate = data.bigDate || null;
    /**
     * An image profile object, expected to have a url property
     * @type {Object|null}
     */

    this.image = data.image || null;
    /**
     * An array of calls to action, of the format:
     * { icon: '', url: '', text: '', eventType: '', eventOptions: {}}
     * @type {Array}
     */

    this.callsToAction = data.callsToAction || [];
    /**
     * Determines if an accordian result should be collapsed by default
     * @type {boolean}
     */

    this.collapsed = data.collapsed === undefined ? true : data.collapsed;
  };

  /** @module HighlightedValue */

  /**
   * Model representing a highlighted value.
   */
  var HighlightedValue =
  /*#__PURE__*/
  function () {
    function HighlightedValue(data) {
      if (data === void 0) {
        data = {};
      }

      this.value = data.value || data.shortValue || '';
      this.matchedSubstrings = data.matchedSubstrings || [];
    }
    /**
     * get highlighted value string
     * @returns {string}
     */


    var _proto = HighlightedValue.prototype;

    _proto.get = function get() {
      this._sortMatchedSubstrings();

      return this.buildHighlightedValue(this.value, this.matchedSubstrings);
    }
    /**
     * get inverted highlighted value string
     * @returns {string}
     */
    ;

    _proto.getInverted = function getInverted() {
      this._sortMatchedSubstrings();

      var invertedSubstrings = this._getInvertedSubstrings(this.matchedSubstrings, this.value.length);

      return this.buildHighlightedValue(this.value, invertedSubstrings);
    }
    /**
     * introduces highlighting to input data according to highlighting specifiers
     *
     * @param {Object} val input object to apply highlighting to
     *
     *  example object :
     *  {
     *    name: 'ATM',
     *    featuredMessage: {
     *      description: 'Save time & bank on your terms at over 1,800 ATMs'
     *    }
     *  }
     *
     * @param {Object} highlightedSubstrings highlighting specifiers to apply to input object
     *
     *  example object :
     *  {
     *    name: {
     *      matchedSubstrings: [{
     *        length: 3,
     *        offset: 0
     *      }],
     *      value: 'ATM'
     *    },
     *    featuredMessage: {
     *      description: {
     *        matchedSubstrings: [{
     *          length: 4,
     *          offset: 45
     *        }],
     *        value: 'Save time & bank on your terms at over 1,800 ATMs'
     *      }
     *    }
     *  }
     *
     * @returns {string} copy of input value with highlighting applied
     *
     *  example object :
     *  {
     *    name: '<strong>ATM</strong>',
     *    featuredMessage: {
     *      description: 'Save time & bank on your terms at over 1,800 <strong>ATMs</strong>'
     *    }
     *  }
     *
     */
    ;

    _proto.buildHighlightedValue = function buildHighlightedValue(val, highlightedSubstrings) {
      var highlightedValue = '';
      var nextStart = 0;

      if (highlightedSubstrings.length === 0) {
        return val;
      }

      for (var j = 0; j < highlightedSubstrings.length; j++) {
        var start = Number(highlightedSubstrings[j].offset);
        var end = start + highlightedSubstrings[j].length;
        highlightedValue += [val.slice(nextStart, start), '<strong>', val.slice(start, end), '</strong>'].join('');

        if (j === highlightedSubstrings.length - 1 && end < val.length) {
          highlightedValue += val.slice(end);
        }

        nextStart = end;
      }

      return highlightedValue;
    };

    _proto._sortMatchedSubstrings = function _sortMatchedSubstrings() {
      this.matchedSubstrings.sort(function (a, b) {
        if (a.offset < b.offset) {
          return -1;
        }

        if (a.offset > b.offset) {
          return 1;
        }

        return 0;
      });
    };

    _proto._getInvertedSubstrings = function _getInvertedSubstrings(matchedSubstrings, valueLength) {
      var invertedSubstrings = [];

      for (var i = 0; i < matchedSubstrings.length; i++) {
        var substring = matchedSubstrings[i];
        var nextOffset = substring.offset + substring.length;

        if (i === 0 && substring.offset !== 0) {
          invertedSubstrings.push({
            offset: 0,
            length: substring.offset
          });
        }

        if (valueLength > nextOffset) {
          invertedSubstrings.push({
            offset: nextOffset,
            length: i < matchedSubstrings.length - 1 ? matchedSubstrings[i + 1].offset - nextOffset : valueLength - nextOffset
          });
        }
      }

      return invertedSubstrings;
    };

    return HighlightedValue;
  }();

  /** @module Errors */

  /**
   * AnswersBaseError is an extension of the base Error object.
   * This is the object that is used to when reporting to the server.
   * @extends Error
   *
   * Error codes fall into one of four categories:
   * 1XX errors: Basic errors
   * 2XX errors: UI errors
   * 3XX errors: Endpoint errors
   * 4XX errors: Core errors
   */
  var AnswersBaseError =
  /*#__PURE__*/
  function (_Error) {
    _inheritsLoose(AnswersBaseError, _Error);

    function AnswersBaseError(errorCode, message, boundary, causedBy) {
      var _this;

      if (boundary === void 0) {
        boundary = 'unknown';
      }

      _this = _Error.call(this, message) || this;
      _this.errorCode = errorCode;
      _this.errorMessage = message;
      _this.boundary = boundary;
      _this.reported = false;

      if (causedBy) {
        _this.causedBy = causedBy instanceof AnswersBaseError ? causedBy : AnswersBaseError.from(causedBy);
        _this.stack = _this.stack + "\nCaused By: " + _this.causedBy.stack;
      }

      return _this;
    }

    var _proto = AnswersBaseError.prototype;

    _proto.toJson = function toJson() {
      return JSON.stringify(this);
    };

    _proto.toString = function toString() {
      var string = this.errorMessage + " (" + this.boundary + ")";

      if (this.causedBy) {
        string += "\n  Caused By: " + this.causedBy.toString();
      }

      return string;
    };

    AnswersBaseError.from = function from(builtinError, boundary) {
      var error = new AnswersBasicError(builtinError.message, boundary);
      error.stack = builtinError.stack;
      return error;
    };

    return AnswersBaseError;
  }(_wrapNativeSuper(Error));
  /**
   * AnswersBasicError is a wrapper around all the built-in errors
   * e.g. undefined variables, incorrect syntax, types, missing methods, etc.
   * @extends AnswersBaseError
   */

  var AnswersBasicError =
  /*#__PURE__*/
  function (_AnswersBaseError) {
    _inheritsLoose(AnswersBasicError, _AnswersBaseError);

    function AnswersBasicError(message, boundary, causedBy) {
      return _AnswersBaseError.call(this, 100, message, boundary, causedBy) || this;
    }

    return AnswersBasicError;
  }(AnswersBaseError);
  /**
   * AnswersUiError used for things like DOM errors.
   * @extends AnswersBaseError
   */

  var AnswersConfigError =
  /*#__PURE__*/
  function (_AnswersBaseError2) {
    _inheritsLoose(AnswersConfigError, _AnswersBaseError2);

    function AnswersConfigError(message, boundary, causedBy) {
      return _AnswersBaseError2.call(this, 101, message, boundary, causedBy) || this;
    }

    return AnswersConfigError;
  }(AnswersBaseError);
  /**
   * AnswersComponentError is used for Component oriented errors
   * e.g. failure to render, or catching unknowns.
   * @extends AnswersBaseError
   */

  var AnswersComponentError =
  /*#__PURE__*/
  function (_AnswersBaseError4) {
    _inheritsLoose(AnswersComponentError, _AnswersBaseError4);

    function AnswersComponentError(message, component, causedBy) {
      return _AnswersBaseError4.call(this, 201, message, component, causedBy) || this;
    }

    return AnswersComponentError;
  }(AnswersBaseError);
  /**
   * AnswersEndpointError represents all network related errors.
   * @extends AnswersBaseError
   */

  var AnswersEndpointError =
  /*#__PURE__*/
  function (_AnswersBaseError5) {
    _inheritsLoose(AnswersEndpointError, _AnswersBaseError5);

    function AnswersEndpointError(message, boundary, causedBy) {
      return _AnswersBaseError5.call(this, 300, message, boundary, causedBy) || this;
    }

    return AnswersEndpointError;
  }(AnswersBaseError);
  /**
   * AnswersCoreError represents errors for precondition failures in the core library
   * @extends AnswersBaseError
   */

  var AnswersCoreError =
  /*#__PURE__*/
  function (_AnswersBaseError6) {
    _inheritsLoose(AnswersCoreError, _AnswersBaseError6);

    function AnswersCoreError(message, boundary, causedBy) {
      return _AnswersBaseError6.call(this, 400, message, boundary, causedBy) || this;
    }

    return AnswersCoreError;
  }(AnswersBaseError);
  /**
   * AnswersStorageError represents storage related errors
   * @extends AnswersBaseError
   */

  var AnswersStorageError =
  /*#__PURE__*/
  function (_AnswersBaseError7) {
    _inheritsLoose(AnswersStorageError, _AnswersBaseError7);

    function AnswersStorageError(message, storageKey, data, causedBy) {
      var _this2;

      _this2 = _AnswersBaseError7.call(this, 401, message, 'Storage', causedBy) || this;
      _this2.storageKey = storageKey;
      _this2.data = data;
      return _this2;
    }

    return AnswersStorageError;
  }(AnswersBaseError);
  /**
   * AnswersAnalyticsError is used for errors when reporting analytics
   * @extends AnswersBaseError
   */

  var AnswersAnalyticsError =
  /*#__PURE__*/
  function (_AnswersBaseError8) {
    _inheritsLoose(AnswersAnalyticsError, _AnswersBaseError8);

    function AnswersAnalyticsError(message, event, causedBy) {
      var _this3;

      _this3 = _AnswersBaseError8.call(this, 402, message, 'Analytics', causedBy) || this;
      _this3.event = event;
      return _this3;
    }

    return AnswersAnalyticsError;
  }(AnswersBaseError);

  /** @module ResultFactory */

  var ResultFactory =
  /*#__PURE__*/
  function () {
    function ResultFactory() {}

    /**
     * Converts an API result object into a Result view model.
     * Includes default mappings of GoogleCustomSearchEngine results to
     * the fields exposed by the template.
     * @param resultsData  {Array} expected format: { data: { ... }, highlightedFields: { ... }}
     * @param {Object.<string, function>} formatters The formatters to apply to the result
     * @param {string} verticalId The vertical of these results
     * @param {string} source Backend source of these results
     * @returns {Result[]}
     */
    ResultFactory.from = function from(resultsData, formatters, verticalId, source) {
      var results = [];

      for (var i = 0; i < resultsData.length; i++) {
        var data = resultsData[i].data || resultsData[i];

        switch (source) {
          case 'GOOGLE_CSE':
            results.push(ResultFactory.fromGoogleCustomSearchEngine(data));
            break;

          case 'BING_CSE':
            results.push(ResultFactory.fromBingCustomSearchEngine(data));
            break;

          case 'ZENDESK':
            results.push(ResultFactory.fromZendeskSearchEngine(data));
            break;

          case 'ALGOLIA':
            results.push(ResultFactory.fromAlgoliaSearchEngine(data));
            break;

          case 'KNOWLEDGE_MANAGER':
            var highlightedFields = resultsData[i].highlightedFields || {};
            results.push(ResultFactory.fromKnowledgeManager(data, formatters, verticalId, highlightedFields, i));
            break;

          default:
            results.push(ResultFactory.fromGeneric(data, i));
        }
      }

      return results;
    }
    /**
     * Applies field formatters to Knowledge Manager Entity Profile Data
     *
     * @param {Object} entityProfileData Entity Profile Data
     * @param {Object} formatters Developer specified Field Formatters
     * @param {string} verticalId Identifier for Vertical
     * @param {Object} highlightedEntityProfileData Subset of Entity Profile Data with highlighting applied
     * @returns {Object} Subset of Entity Profile Data Fields with field formatters applied
     */
    ;

    ResultFactory.computeFormattedData = function computeFormattedData(entityProfileData, formatters, verticalId, highlightedEntityProfileData) {
      // if no field formatters specified, nothing to format
      if (Object.keys(formatters).length === 0) {
        return {};
      }

      var formattedData = {};
      Object.entries(entityProfileData).forEach(function (_ref) {
        var fieldName = _ref[0],
            fieldVal = _ref[1];

        // check if a field formatter exists for the current entity profile field
        if (formatters[fieldName] === undefined) {
          return;
        } // verify the field formatter provided is a formatter function as expected


        if (typeof formatters[fieldName] !== 'function') {
          throw new AnswersCoreError('Field formatter is not of expected type function', 'ResultFactory');
        } // if highlighted version of field value is available, make it available to field formatter


        var highlightedFieldVal = null;

        if (highlightedEntityProfileData && highlightedEntityProfileData[fieldName]) {
          highlightedFieldVal = highlightedEntityProfileData[fieldName];
        } // call formatter function associated with the field name
        // the input object defines the interface that field formatter functions work with


        formattedData[fieldName] = formatters[fieldName]({
          entityProfileData: entityProfileData,
          entityFieldValue: fieldVal,
          highlightedEntityFieldValue: highlightedFieldVal,
          verticalId: verticalId,
          isDirectAnswer: false
        });
      });
      return formattedData;
    }
    /**
     * Applies highlighting to substrings within Knowledge Manager Entity Field Values
     * according to highlighting specifiers returned from the Knowledge Manager Search Backend
     *
     * @param {Object} entityProfileData Entity Profile Data
     * @param {Object} highlightedFields KM specified highlighting instructions to highlight certain Fields
     * @returns {Object} Subset of Entity Profile Data Fields with highlighting applied
     */
    ;

    ResultFactory.computeHighlightedData = function computeHighlightedData(entityProfileData, highlightedFields) {
      // if no highlighted fields specified, nothing to highlight
      if (Object.keys(highlightedFields).length === 0) {
        return {};
      }

      var highlightedData = {}; // iterate through entity fields that have highlighting instructions

      Object.entries(highlightedFields).forEach(function (_ref2) {
        var highlightedFieldName = _ref2[0];

        // verify that the highlighted field name corresponds to an existing entity profile field
        if (entityProfileData[highlightedFieldName] === undefined) {
          throw new AnswersCoreError('Highlighted Field Name does not exist in Entity Profile', 'ResultFactory');
        }

        var highlightedField = highlightedFields[highlightedFieldName]; // check for nested fields

        if (typeof highlightedField === 'object' && Object.keys(highlightedField).length > 0 && highlightedField['matchedSubstrings'] === undefined) {
          // recurse to children fields
          highlightedData[highlightedFieldName] = ResultFactory.computeHighlightedData(entityProfileData[highlightedFieldName], highlightedFields[highlightedFieldName]);
        } else {
          var highlightedDataValue = new HighlightedValue(entityProfileData).buildHighlightedValue(highlightedField.value, highlightedField.matchedSubstrings);
          highlightedData[highlightedFieldName] = highlightedDataValue;
        }
      });
      return highlightedData;
    }
    /**
     * Converts an API result object into a generic result view model.
     * @param {Object} data
     * @param {number} index
     * @returns {Result}
     */
    ;

    ResultFactory.fromGeneric = function fromGeneric(data, index) {
      return new Result({
        raw: data,
        title: data.name,
        details: this.truncate(data.description),
        link: data.website,
        id: data.id,
        ordinal: index + 1
      });
    }
    /**
     * Converts an API result object into a Knowledge Manager result view model.
     * @param {Object} data
     * @param {Object} formatters
     * @param {string} verticalId
     * @param {Object} highlightedFields
     * @param {number} index
     * @returns {Result}
     */
    ;

    ResultFactory.fromKnowledgeManager = function fromKnowledgeManager(data, formatters, verticalId, highlightedFields, index) {
      // compute highlighted entity profile data
      var highlightedEntityProfileData = ResultFactory.computeHighlightedData(data, highlightedFields); // compute formatted entity profile data

      var formattedEntityProfileData = ResultFactory.computeFormattedData(data, formatters, verticalId, highlightedEntityProfileData); // set result details checking the following in order of priority : formatted, highlighted, raw

      var resultDetails = null;

      if (formattedEntityProfileData.description !== undefined) {
        resultDetails = formattedEntityProfileData.description;
      } else if (highlightedEntityProfileData.description !== undefined) {
        resultDetails = this.truncate(highlightedEntityProfileData.description);
      } else {
        resultDetails = this.truncate(data.description);
      }

      return new Result({
        raw: data,
        formatted: formattedEntityProfileData,
        highlighted: highlightedEntityProfileData,
        title: formattedEntityProfileData.name || data.name,
        details: resultDetails,
        link: data.website,
        id: data.id,
        ordinal: index + 1
      });
    }
    /**
     * Converts an API result object into a result view model.
     * Maps view model fields based on the API data for a Google Custom Search Engine object.
     * @param {Object} data
     * @returns {Result}
     */
    ;

    ResultFactory.fromGoogleCustomSearchEngine = function fromGoogleCustomSearchEngine(data) {
      return new Result({
        raw: data,
        title: data.htmlTitle.replace(/(<([^>]+)>)/ig, ''),
        details: data.htmlSnippet,
        link: data.link
      });
    }
    /**
     * Converts an API result object into a result view model.
     * Maps view model fields based on the API data for a Bing Custom Search Engine object.
     * @param {Object} data
     * @returns {Result}
     */
    ;

    ResultFactory.fromBingCustomSearchEngine = function fromBingCustomSearchEngine(data) {
      return new Result({
        raw: data,
        title: data.name,
        details: data.snippet,
        link: data.url
      });
    }
    /**
     * Converts an API result object into a result view model.
     * Maps view model fields based on the API data for a Zendesk Search Engine object.
     * @param {Object} data
     * @returns {Result}
     */
    ;

    ResultFactory.fromZendeskSearchEngine = function fromZendeskSearchEngine(data) {
      return new Result({
        raw: data,
        title: data.title,
        details: data.snippet,
        link: data.html_url
      });
    }
    /**
     * Converts an API result object into a result view model.
     * Maps view model fields based on the API data for a Algolia Search Engine object.
     * Details field is set to objectID since response has only one general field objectID.
     * @param {Object} data
     * @returns {Result}
     */
    ;

    ResultFactory.fromAlgoliaSearchEngine = function fromAlgoliaSearchEngine(data) {
      return new Result({
        raw: data,
        details: data.objectID,
        id: data.objectID
      });
    }
    /**
     * Truncates strings to 250 characters, attempting to preserve whole words
     * @param str {string} the string to truncate
     * @param limit {Number} the maximum character length to return
     * @param trailing {string} a trailing string to denote truncation, e.g. '...'
     * @param sep {string} the word separator
     * @returns {string}
     */
    ;

    ResultFactory.truncate = function truncate(str, limit, trailing, sep) {
      if (limit === void 0) {
        limit = 250;
      }

      if (trailing === void 0) {
        trailing = '...';
      }

      if (sep === void 0) {
        sep = ' ';
      }

      if (!str || str.length <= limit) {
        return str;
      } // TODO (bmcginnis): split punctuation too so we don't end up with "foo,..."


      var words = str.split(sep);
      var max = limit - trailing.length;
      var truncated = '';

      for (var i = 0; i < words.length; i++) {
        var word = words[i];

        if (truncated.length + word.length > max || i !== 0 && truncated.length + word.length + sep.length > max) {
          truncated += trailing;
          break;
        }

        truncated += i === 0 ? word : sep + word;
      }

      return truncated;
    };

    return ResultFactory;
  }();

  /** @module Section */

  var Section =
  /*#__PURE__*/
  function () {
    function Section(data, url, formatters) {
      this.searchState = SearchStates.SEARCH_COMPLETE;
      this.verticalConfigId = data.verticalConfigId || null;
      this.resultsCount = data.resultsCount || 0;
      this.encodedState = data.encodedState || '';
      this.appliedQueryFilters = AppliedQueryFilter.from(data.appliedQueryFilters);
      this.facets = data.facets || null;
      this.results = ResultFactory.from(data.results, formatters, this.verticalConfigId, data.source);
      this.map = Section.parseMap(data.results);
      this.verticalURL = url || null;
    }

    Section.parseMap = function parseMap(results) {
      var mapMarkers = [];
      var centerCoordinates = {};

      for (var j = 0; j < results.length; j++) {
        // TODO(billy) Remove legacy fallback from all data format
        var result = results[j].data || results[j];

        if (result && result.yextDisplayCoordinate) {
          if (!centerCoordinates.latitude) {
            centerCoordinates = {
              latitude: result.yextDisplayCoordinate.latitude,
              longitude: result.yextDisplayCoordinate.longitude
            };
          }

          mapMarkers.push({
            item: result,
            label: mapMarkers.length + 1,
            latitude: result.yextDisplayCoordinate.latitude,
            longitude: result.yextDisplayCoordinate.longitude
          });
        }
      }

      return {
        'mapCenter': centerCoordinates,
        'mapMarkers': mapMarkers
      };
    }
    /**
     * Create a section from the provided data
     * @param {Object|Array} modules The result modules
     * @param {Object} urls The tab urls
     * @param {Object.<string, function>} formatters Field formatters for results
     */
    ;

    Section.from = function from(modules, urls, formatters) {
      var sections = [];

      if (!modules) {
        return sections;
      }

      if (!Array.isArray(modules)) {
        return new Section(modules, null, formatters);
      } // Our sections should contain a property of mapMarker objects


      for (var i = 0; i < modules.length; i++) {
        sections.push(new Section(modules[i], urls[modules[i].verticalConfigId], formatters));
      }

      return sections;
    };

    return Section;
  }();

  var AppliedQueryFilter =
  /*#__PURE__*/
  function () {
    // Support legacy model and new model until fully migrated.
    // TODO(billy) Remove the left expression during assignment when migrated.
    function AppliedQueryFilter(appliedQueryFilter) {
      this.key = appliedQueryFilter.key || appliedQueryFilter.displayKey;
      this.value = appliedQueryFilter.value || appliedQueryFilter.displayValue;
    }

    AppliedQueryFilter.from = function from(appliedQueryFilters) {
      var filters = [];

      for (var i = 0; i < appliedQueryFilters.length; i++) {
        filters.push(new AppliedQueryFilter(appliedQueryFilters[i]));
      }

      return filters;
    };

    return AppliedQueryFilter;
  }();

  /** @module UniversalResults */

  var UniversalResults =
  /*#__PURE__*/
  function () {
    function UniversalResults(data) {
      this.queryId = data.queryId || null;
      this.sections = data.sections || [];
      /**
       * The current state of the search, used to render different templates before, during,
       * and after loading
       * @type {string}
       */

      this.searchState = data.searchState || SearchStates.SEARCH_COMPLETE;
    }
    /**
     * Create universal results from server data
     * @param {Object} response The server response
     * @param {Object} urls The tab urls
     * @param {Object.<string, function>} formatters The field formatters to use
     */


    UniversalResults.from = function from(response, urls, formatters) {
      return new UniversalResults({
        queryId: response.queryId,
        sections: Section.from(response.modules, urls, formatters)
      });
    }
    /**
     * Construct a UnivervalResults object representing loading results
     * @return {UniversalResults}
     */
    ;

    UniversalResults.searchLoading = function searchLoading() {
      return new UniversalResults({
        searchState: SearchStates.SEARCH_LOADING
      });
    };

    return UniversalResults;
  }();

  /** @module DirectAnswer */
  var DirectAnswer =
  /*#__PURE__*/
  function () {
    function DirectAnswer(directAnswer) {
      if (directAnswer === void 0) {
        directAnswer = {};
      }

      Object.assign(this, directAnswer);
      Object.freeze(this);
    }
    /**
     * Create a DirectAnswer model from the given server data and formatters
     * @param {Object} response The server direct answer
     * @param {Object.<string, function>} formatters The formatters to apply to this direct answer
     */


    DirectAnswer.from = function from(response, formatters) {
      var data = _objectSpread2({}, response);

      var answer = data.answer,
          relatedItem = data.relatedItem;

      if (answer && formatters[answer.fieldApiName]) {
        answer.value = formatters[answer.fieldApiName](answer.value, relatedItem.data.fieldValues, relatedItem.verticalConfigId, true);
      }

      return new DirectAnswer(data);
    };

    return DirectAnswer;
  }();

  /** @module Navigation */
  var Navigation =
  /*#__PURE__*/
  function () {
    function Navigation(tabOrder) {
      this.tabOrder = tabOrder || [];
      Object.freeze(this);
    }

    Navigation.from = function from(modules) {
      var nav = [];

      if (!modules || !Array.isArray(modules)) {
        return nav;
      }

      for (var i = 0; i < modules.length; i++) {
        nav.push(modules[i].verticalConfigId);
      }

      return new Navigation(nav);
    };

    return Navigation;
  }();

  var VerticalResults =
  /*#__PURE__*/
  function () {
    function VerticalResults(data) {
      if (data === void 0) {
        data = {};
      }

      Object.assign(this, {
        searchState: SearchStates.SEARCH_COMPLETE
      }, data);
      Object.freeze(this);
    }
    /**
     * Append the provided results to the current results
     * @param {VerticalResults} results the results to append to the current results
     */


    var _proto = VerticalResults.prototype;

    _proto.append = function append(results) {
      var merged = _objectSpread2({}, this);

      merged.results = this.results.concat(results.results);
      merged.map.mapMarkers = this.map.mapMarkers.concat(results.map.mapMarkers);
      return new VerticalResults(merged);
    }
    /**
     * Create vertical results from server data
     * @param {Object} response The server response
     * @param {Object.<string, function>} formatters The field formatters to use
     */
    ;

    VerticalResults.from = function from(response, formatters) {
      return new VerticalResults(Section.from(response, null, formatters));
    }
    /**
     * Construct a VerticalResults object representing loading results
     * @return {VerticalResults}
     */
    ;

    VerticalResults.searchLoading = function searchLoading() {
      return new VerticalResults({
        searchState: SearchStates.SEARCH_LOADING
      });
    };

    VerticalResults.areDuplicateNamesAllowed = function areDuplicateNamesAllowed() {
      return true;
    };

    return VerticalResults;
  }();

  /** @module SpellCheck */
  /**
   * SpellCheck is the core state model
   * to power the SpellCheck component
   */

  var SpellCheck =
  /*#__PURE__*/
  function () {
    function SpellCheck(data) {
      /**
       * The original query
       * @type {string}
       */
      this.query = data.query || null;
      /**
       * The corrected query
       * @type {string}
       */

      this.correctedQuery = data.correctedQuery || null;
      /**
       * The corrected query with highlighted tags
       * @type {string}
       */

      this.correctedQueryDisplay = data.correctedQueryDisplay || null;
      /**
       * The spell check type
       * @type {string}
       */

      this.type = data.type || null;
      /**
       * Should show spell check or not
       * @type {boolean}
       */

      this.shouldShow = this.correctedQuery !== null;
    }
    /**
     * Create a spell check model from the provided data
     * @param {Object} response The spell check response
     */


    SpellCheck.from = function from(response) {
      if (!response) {
        return {};
      }

      return new SpellCheck({
        query: response.originalQuery,
        correctedQuery: response.correctedQuery,
        correctedQueryDisplay: new HighlightedValue(response.correctedQuery).get(),
        type: response.type
      });
    };

    return SpellCheck;
  }();

  /** @module StorageKeys */

  /**
   * StorageKeys is an ENUM are considered the root context
   * for how data is stored and scoped in the storage.
   *
   * @enum {string}
   */
  var StorageKeys = {
    NAVIGATION: 'navigation',
    UNIVERSAL_RESULTS: 'universal-results',
    VERTICAL_RESULTS: 'vertical-results',
    AUTOCOMPLETE: 'autocomplete',
    DIRECT_ANSWER: 'direct-answer',
    FILTER: 'filter',
    QUERY: 'query',
    QUERY_ID: 'query-id',
    FACET_FILTER: 'facet-filter',
    DYNAMIC_FILTERS: 'dynamic-filters',
    PARAMS: 'params',
    GEOLOCATION: 'geolocation',
    INTENTS: 'intents',
    QUESTION_SUBMISSION: 'question-submission',
    SEARCH_CONFIG: 'search-config',
    SEARCH_OFFSET: 'search-offset',
    SPELL_CHECK: 'spell-check',
    LOCATION_BIAS: 'location-bias',
    SESSIONS_OPT_IN: 'sessions-opt-in',
    NAVIGATION_CONFIG: 'navigation-config',
    LOCALE: 'locale',
    SORT_BYS: 'sort-bys'
  };

  /** @module DynamicFilters */

  /**
   * Model representing a set of dynamic filters
   */
  var DynamicFilters =
  /*#__PURE__*/
  function () {
    function DynamicFilters(data) {
      /**
       * The list of filters this model holds
       * @type {{label: string, fieldId: string, options: object[]}}
       */
      this.filters = data.filters || [];
      Object.freeze(this);
    }
    /**
     * Organize 'facets' from the api response into dynamic filters
     * @param {Object} response dynamic filter response from the api
     * @returns {DynamicFilters}
     */


    DynamicFilters.from = function from(response) {
      var facets = response.facets;
      var dynamicFilters = facets.map(function (f) {
        return {
          label: f['displayName'],
          fieldId: f['fieldId'],
          options: f.options.map(function (o) {
            return {
              label: o['displayName'],
              countLabel: o['count'],
              selected: o['selected'],
              filter: o['filter']
            };
          })
        };
      });
      return new DynamicFilters({
        filters: dynamicFilters
      });
    };

    return DynamicFilters;
  }();

  /** @module SearchIntents */
  var SearchIntents =
  /*#__PURE__*/
  function () {
    function SearchIntents(intents) {
      /**
       * The intent to find results based on the user's location
       * @type {boolean}
       */
      this.nearMe = intents.nearMe;
      Object.freeze(this);
    }
    /**
     * Create SearchIntents from server response
     * @param {Object} response The server response intents
     * @returns {SearchIntents}
     */


    SearchIntents.from = function from(response) {
      var intents = response || [];
      return new SearchIntents({
        nearMe: intents.includes('NEAR_ME')
      });
    };

    return SearchIntents;
  }();

  /** @module LocationBias */

  /**
   * LocationBias is the core state model
   * to power the LocationBias component
   */
  var LocationBias =
  /*#__PURE__*/
  function () {
    function LocationBias(data) {
      /**
       * The location bias accuracy which are IP, DEVICE and UNKNWON
       * @type {string}
       */
      this.accuracy = data.accuracy || null;
      /**
       * The latitude used for location bias
       * @type {number}
       */

      this.latitude = data.latitude || null;
      /**
       * The longitude used for location bias
       * @type {number}
       */

      this.longitude = data.longitude || null;
      /**
       * The location display name
       * @type {string}
       */

      this.locationDisplayName = data.locationDisplayName || null;
    }
    /**
     * Create a location bias model from the provided data
     * @param {Object} response The location bias response
     */


    LocationBias.from = function from(response) {
      if (!response) {
        return new LocationBias({
          accuracy: 'UNKNOWN'
        });
      }

      return new LocationBias({
        accuracy: response.accuracy,
        latitude: response.latitude,
        longitude: response.longitude,
        locationDisplayName: response.locationDisplayName
      });
    };

    return LocationBias;
  }();

  /** @module SearchDataTransformer */
  /**
   * A Data Transformer that takes the response object from a Search request
   * And transforms in to a front-end oriented data structure that our
   * component library and core storage understand.
   */

  var SearchDataTransformer =
  /*#__PURE__*/
  function () {
    function SearchDataTransformer() {}

    SearchDataTransformer.transform = function transform(data, urls, formatters) {
      var _ref;

      if (urls === void 0) {
        urls = {};
      }

      var response = data.response;
      return _ref = {}, _ref[StorageKeys.QUERY_ID] = response.queryId, _ref[StorageKeys.NAVIGATION] = Navigation.from(response.modules), _ref[StorageKeys.DIRECT_ANSWER] = DirectAnswer.from(response.directAnswer, formatters), _ref[StorageKeys.UNIVERSAL_RESULTS] = UniversalResults.from(response, urls, formatters), _ref[StorageKeys.INTENTS] = SearchIntents.from(response.searchIntents), _ref[StorageKeys.SPELL_CHECK] = SpellCheck.from(response.spellCheck), _ref[StorageKeys.LOCATION_BIAS] = LocationBias.from(response.locationBias), _ref;
    };

    SearchDataTransformer.transformVertical = function transformVertical(data, formatters) {
      var _ref2;

      return _ref2 = {}, _ref2[StorageKeys.QUERY_ID] = data.response.queryId, _ref2[StorageKeys.NAVIGATION] = new Navigation(), _ref2[StorageKeys.VERTICAL_RESULTS] = VerticalResults.from(data.response, formatters), _ref2[StorageKeys.DYNAMIC_FILTERS] = DynamicFilters.from(data.response), _ref2[StorageKeys.INTENTS] = SearchIntents.from(data.response.searchIntents), _ref2[StorageKeys.SPELL_CHECK] = SpellCheck.from(data.response.spellCheck), _ref2[StorageKeys.LOCATION_BIAS] = LocationBias.from(data.response.locationBias), _ref2;
    };

    return SearchDataTransformer;
  }();

  /** @module QuestionSubmission */

  /**
   * QuestionSubmission is the core state model
   * to power the QuestionSubmission component
   */
  var QuestionSubmission =
  /*#__PURE__*/
  function () {
    function QuestionSubmission(question, errors) {
      if (question === void 0) {
        question = {};
      }

      /**
       * The author of the question
       * @type {string}
       */
      this.name = question.name || null;
      /**
       * The email address of the question
       * @type {string}
       */

      this.email = question.email || null;
      /**
       * True if the privacy policy was approved
       * @type {boolean}
       */

      this.privacyPolicy = question.privacyPolicy || null;
      /**
       * The question to be sent to the server
       * @type {string}
       */

      this.questionText = question.questionText || null;
      /**
       * Alternative question meta information
       * @type {string}
       */

      this.questionDescription = question.questionDescription || null;
      /**
       * Whether the form is expanded or not. Defaults to true.
       */

      this.questionExpanded = typeof question.expanded !== 'boolean' || question.expanded;
      /**
       * Contains any errors about the question submission
       * @type {object}
       */

      this.errors = errors || null;
      /**
       * Whether the form has been submitted or not. Defaults to false.
       */

      this.questionSubmitted = question.submitted || false;
      Object.freeze(this);
    }

    QuestionSubmission.submitted = function submitted() {
      return {
        questionSubmitted: true,
        questionExpanded: true
      };
    };

    QuestionSubmission.errors = function errors(question, _errors) {
      return QuestionSubmission(question, _errors);
    };

    return QuestionSubmission;
  }();

  /** @module Filter */

  /**
   * Represents an api filter and provides static methods for easily constructing Filters.
   * See https://developer.yext.com/docs/api-reference/#operation/listEntities for structure details
   */
  var Filter =
  /*#__PURE__*/
  function () {
    function Filter(data) {
      if (data === void 0) {
        data = {};
      }

      Object.assign(this, data);
      Object.freeze(this);
    }
    /**
     * Parse a JSON format filter returned from the server into a Filter
     * @param {*} responseFilter A filter in JSON format returned from the backend
     * @returns {Filter}
     */


    Filter.fromResponse = function fromResponse(responseFilter) {
      return new Filter(JSON.parse(responseFilter));
    }
    /**
     * Return a new Filter representing the OR of all provided filters
     * @param  {...Filter} filters The filters to OR together
     * @returns {Filter}
     */
    ;

    Filter.or = function or() {
      for (var _len = arguments.length, filters = new Array(_len), _key = 0; _key < _len; _key++) {
        filters[_key] = arguments[_key];
      }

      return new Filter({
        '$or': filters
      });
    }
    /**
     * Return a new Filter representing the AND of all provided filters
     * @param  {...Filter} filters The filters to AND together
     * @returns {Filter}
     */
    ;

    Filter.and = function and() {
      for (var _len2 = arguments.length, filters = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        filters[_key2] = arguments[_key2];
      }

      return new Filter({
        '$and': filters
      });
    }
    /**
     * OR filters with the same keys, then AND the resulting groups
     * @param  {...Filter} filters The filters to group
     * @returns {Filter}
     */
    ;

    Filter.group = function group() {
      var groups = {};

      for (var _len3 = arguments.length, filters = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        filters[_key3] = arguments[_key3];
      }

      for (var _i = 0, _filters = filters; _i < _filters.length; _i++) {
        var filter = _filters[_i];
        var key = Object.keys(filter)[0];

        if (!groups[key]) {
          groups[key] = [];
        }

        groups[key].push(filter);
      }

      var groupFilters = [];

      for (var _i2 = 0, _Object$keys = Object.keys(groups); _i2 < _Object$keys.length; _i2++) {
        var field = _Object$keys[_i2];
        groupFilters.push(groups[field].length > 1 ? Filter.or.apply(Filter, groups[field]) : groups[field][0]);
      }

      return groupFilters.length > 1 ? Filter.and.apply(Filter, groupFilters) : groupFilters[0];
    }
    /**
     * Create a new "equal to" filter for a field
     * @param {string} field The subject field of the filter
     * @param {*} value The value the field should be equal to
     * @returns {Filter}
     */
    ;

    Filter.equal = function equal(field, value) {
      return Filter._fromMatcher(field, '$eq', value);
    }
    /**
     * Create a new "less than" filter for a field
     * @param {string} field The subject field of the filter
     * @param {*} value The value the field should be less than
     * @returns {Filter}
     */
    ;

    Filter.lessThan = function lessThan(field, value) {
      return Filter._fromMatcher(field, '$lt', value);
    }
    /**
     * Create a new "less than or equal to" filter for a field
     * @param {string} field The subject field of the filter
     * @param {*} value The value the field should be less than or equal to
     * @returns {Filter}
     */
    ;

    Filter.lessThanEqual = function lessThanEqual(field, value) {
      return Filter._fromMatcher(field, '$le', value);
    }
    /**
     * Create a new "greater than" filter for a field
     * @param {string} field The subject field of the filter
     * @param {*} value The value the field should be greater than
     * @returns {Filter}
     */
    ;

    Filter.greaterThan = function greaterThan(field, value) {
      return Filter._fromMatcher(field, '$gt', value);
    }
    /**
     * Create a new "greater than or equal to" filter for a field
     * @param {string} field The subject field of the filter
     * @param {*} value The value the field should be greater than or equal to
     * @returns {Filter}
     */
    ;

    Filter.greaterThanEqual = function greaterThanEqual(field, value) {
      return Filter._fromMatcher(field, '$ge', value);
    }
    /**
     * Create a new inclusive range filter
     * @param {string} field The subject field of the filter
     * @param {*} min The minimum value
     * @param {*} max The maximum value
     * @returns {Filter}
     */
    ;

    Filter.inclusiveRange = function inclusiveRange(field, min, max) {
      var _ref;

      return new Filter((_ref = {}, _ref[field] = {
        '$ge': min,
        '$le': max
      }, _ref));
    }
    /**
     * Create a new exclusive range filter
     * @param {string} field The subject field of the filter
     * @param {*} min The minimum value
     * @param {*} max The maximum value
     * @returns {Filter}
     */
    ;

    Filter.exclusiveRange = function exclusiveRange(field, min, max) {
      var _ref2;

      return new Filter((_ref2 = {}, _ref2[field] = {
        '$gt': min,
        '$lt': max
      }, _ref2));
    }
    /**
     * Create a new position filter
     * @param {number} lat The latitude of the position
     * @param {number} lng The longitude of the position
     * @param {number} radius The search radius (in meters)
     */
    ;

    Filter.position = function position(lat, lng, radius) {
      return Filter._fromMatcher('builtin.location', '$near', {
        lat: lat,
        lng: lng,
        radius: radius
      });
    }
    /**
     * Create a new filter with the given matcher
     * @private
     * @param {string} field The subject field of the filter
     * @param {string} matcher The matcher for the filer
     * @param {*} value The value for the filter
     * @returns {Filter}
     */
    ;

    Filter._fromMatcher = function _fromMatcher(field, matcher, value) {
      var _field, _ref3;

      return new Filter((_ref3 = {}, _ref3[field] = (_field = {}, _field[matcher] = value, _field), _ref3));
    };

    return Filter;
  }();

  /** @typedef {import('./services/searchservice').default} SearchService */

  /** @typedef {import('./services/autocompleteservice').default} AutoCompleteService */

  /** @typedef {import('./services/questionanswerservice').default} QuestionAnswerService */

  /**
   * Core is the main application container for all of the network and storage
   * related behaviors of the application.
   */

  var Core =
  /*#__PURE__*/
  function () {
    function Core(config) {
      if (config === void 0) {
        config = {};
      }

      /**
       * A reference to the client API Key used for all requests
       * @type {string}
       * @private
       */
      this._apiKey = config.apiKey;
      /**
       * A reference to the client Answers Key used for all requests
       * @type {string}
       * @private
       */

      this._experienceKey = config.experienceKey;
      /**
       * The answers config version to use for all requests
       * @type {string}
       * @private
       */

      this._experienceVersion = config.experienceVersion;
      /**
       * A reference to the client locale used for all requests. If not specified, defaults to "en" (for
       * backwards compatibility).
       * @type {string}
       * @private
       */

      this._locale = config.locale;
      /**
       * A map of field formatters used to format results, if present
       * @type {Object.<string, function>}
       * @private
       */

      this._fieldFormatters = config.fieldFormatters || {};
      /**
       * A reference to the core data storage that powers the UI
       * @type {GlobalStorage}
       * @private
       */

      this.globalStorage = config.globalStorage;
      /**
       * A reference to the core persistent storage
       * @type {PersistentStorage}
       * @private
       */

      this.persistentStorage = config.persistentStorage;
      /**
       * An abstraction containing the integration with the RESTful search API
       * For both vertical and universal search
       * @type {SearchService}
       * @private
       */

      this._searcher = config.searchService;
      /**
       * An abstraction containing the integration with the RESTful autocomplete API
       * For filter search, vertical autocomplete, and universal autocomplete
       * @type {AutoCompleteService}
       * @private
       */

      this._autoComplete = config.autoCompleteService;
      /**
       * An abstraction for interacting with the Q&A rest interface
       * @type {QuestionAnswerService}
       * @private
       */

      this._questionAnswer = config.questionAnswerService;
    }
    /**
     * Search in the context of a vertical
     * @param {string} verticalKey vertical ID for the search
     * @param {object} query The query details
     * @param {string} query.input The input to search for
     * @param {string} query.filter The filter to use in the search
     * @param {string} query.facetFilter The facet filter to use in the search
     * @param {number} query.limit The max number of results to include, max of 50
     * @param {number} query.offset The results offset, for fetching more results of the same query
     * @param {string} query.id The query ID to use. If paging within a query, the same ID should be used
     * @param {boolean} query.append If true, adds the results of this query to the end of the current results, defaults false
     */


    var _proto = Core.prototype;

    _proto.verticalSearch = function verticalSearch(verticalKey, query) {
      var _this = this;

      if (!query.append) {
        this.globalStorage.set(StorageKeys.VERTICAL_RESULTS, VerticalResults.searchLoading());
        this.globalStorage.set(StorageKeys.SPELL_CHECK, {});
        this.globalStorage.set(StorageKeys.LOCATION_BIAS, {});
      }

      return this._searcher.verticalSearch(verticalKey, _objectSpread2({
        limit: this.globalStorage.getState(StorageKeys.SEARCH_CONFIG).limit,
        geolocation: this.globalStorage.getState(StorageKeys.GEOLOCATION)
      }, query, {
        isDynamicFiltersEnabled: this._isDynamicFiltersEnabled,
        skipSpellCheck: this.globalStorage.getState('skipSpellCheck'),
        queryTrigger: this.globalStorage.getState('queryTrigger'),
        sessionTrackingEnabled: this.globalStorage.getState(StorageKeys.SESSIONS_OPT_IN),
        sortBys: this.globalStorage.getState(StorageKeys.SORT_BYS)
      })).then(function (response) {
        return SearchDataTransformer.transformVertical(response, _this._fieldFormatters);
      }).then(function (data) {
        _this.globalStorage.set(StorageKeys.QUERY_ID, data[StorageKeys.QUERY_ID]);

        _this.globalStorage.set(StorageKeys.NAVIGATION, data[StorageKeys.NAVIGATION]);

        _this.globalStorage.set(StorageKeys.INTENTS, data[StorageKeys.INTENTS]);

        if (query.append) {
          var mergedResults = _this.globalStorage.getState(StorageKeys.VERTICAL_RESULTS).append(data[StorageKeys.VERTICAL_RESULTS]);

          _this.globalStorage.set(StorageKeys.VERTICAL_RESULTS, mergedResults);
        } else {
          _this.globalStorage.set(StorageKeys.VERTICAL_RESULTS, data[StorageKeys.VERTICAL_RESULTS]);
        }

        if (data[StorageKeys.DYNAMIC_FILTERS]) {
          _this.globalStorage.set(StorageKeys.DYNAMIC_FILTERS, data[StorageKeys.DYNAMIC_FILTERS]);
        }

        if (data[StorageKeys.SPELL_CHECK]) {
          _this.globalStorage.set(StorageKeys.SPELL_CHECK, data[StorageKeys.SPELL_CHECK]);
        }

        if (data[StorageKeys.LOCATION_BIAS]) {
          _this.globalStorage.set(StorageKeys.LOCATION_BIAS, data[StorageKeys.LOCATION_BIAS]);
        }

        _this.globalStorage["delete"]('skipSpellCheck');

        _this.globalStorage["delete"]('queryTrigger');
      });
    }
    /**
     * Page within the results of the last query
     * @param {string} verticalKey The vertical key to use in the search
     * @param {number} offset The offset to use in the search
     */
    ;

    _proto.verticalPage = function verticalPage(verticalKey, offset) {
      var allFilters = this.globalStorage.getAll(StorageKeys.FILTER);
      var totalFilter = allFilters.length > 1 ? Filter.and.apply(Filter, allFilters) : allFilters[0];
      var facetFilter = this.globalStorage.getAll(StorageKeys.FACET_FILTER)[0];
      this.verticalSearch(verticalKey, {
        input: this.globalStorage.getState(StorageKeys.QUERY),
        id: this.globalStorage.getState(StorageKeys.QUERY_ID),
        filter: JSON.stringify(totalFilter),
        facetFilter: JSON.stringify(facetFilter),
        offset: offset
      });
    };

    _proto.search = function search(queryString, urls) {
      var _this2 = this;

      this.globalStorage.set(StorageKeys.DIRECT_ANSWER, {});
      this.globalStorage.set(StorageKeys.UNIVERSAL_RESULTS, UniversalResults.searchLoading());
      this.globalStorage.set(StorageKeys.QUESTION_SUBMISSION, {});
      this.globalStorage.set(StorageKeys.SPELL_CHECK, {});
      this.globalStorage.set(StorageKeys.LOCATION_BIAS, {});
      return this._searcher.universalSearch(queryString, {
        geolocation: this.globalStorage.getState(StorageKeys.GEOLOCATION),
        skipSpellCheck: this.globalStorage.getState('skipSpellCheck'),
        queryTrigger: this.globalStorage.getState('queryTrigger'),
        sessionTrackingEnabled: this.globalStorage.getState(StorageKeys.SESSIONS_OPT_IN)
      }).then(function (response) {
        return SearchDataTransformer.transform(response, urls, _this2._fieldFormatters);
      }).then(function (data) {
        _this2.globalStorage.set(StorageKeys.QUERY_ID, data[StorageKeys.QUERY_ID]);

        _this2.globalStorage.set(StorageKeys.NAVIGATION, data[StorageKeys.NAVIGATION]);

        _this2.globalStorage.set(StorageKeys.DIRECT_ANSWER, data[StorageKeys.DIRECT_ANSWER]);

        _this2.globalStorage.set(StorageKeys.UNIVERSAL_RESULTS, data[StorageKeys.UNIVERSAL_RESULTS], urls);

        _this2.globalStorage.set(StorageKeys.INTENTS, data[StorageKeys.INTENTS]);

        _this2.globalStorage.set(StorageKeys.SPELL_CHECK, data[StorageKeys.SPELL_CHECK]);

        _this2.globalStorage.set(StorageKeys.LOCATION_BIAS, data[StorageKeys.LOCATION_BIAS]);

        _this2.globalStorage["delete"]('skipSpellCheck');

        _this2.globalStorage["delete"]('queryTrigger');
      });
    }
    /**
     * Given an input, query for a list of similar results and set into storage
     *
     * @param {string} input     the string to autocomplete
     * @param {string} namespace the namespace to use for the storage key
     */
    ;

    _proto.autoCompleteUniversal = function autoCompleteUniversal(input, namespace) {
      var _this3 = this;

      return this._autoComplete.queryUniversal(input).then(function (data) {
        _this3.globalStorage.set(StorageKeys.AUTOCOMPLETE + "." + namespace, data);

        return data;
      });
    }
    /**
     * Given an input, query for a list of similar results in the provided vertical
     * and set into storage
     *
     * @param {string} input       the string to autocomplete
     * @param {string} namespace the namespace to use for the storage key
     * @param {string} verticalKey the vertical key for the experience
     */
    ;

    _proto.autoCompleteVertical = function autoCompleteVertical(input, namespace, verticalKey) {
      var _this4 = this;

      return this._autoComplete.queryVertical(input, verticalKey).then(function (data) {
        _this4.globalStorage.set(StorageKeys.AUTOCOMPLETE + "." + namespace, data);

        return data;
      });
    }
    /**
     * Given an input, provide a list of suitable filters for autocompletion
     *
     * @param {string} input  the string to search for filters with
     * @param {object} config  the config to serach for filters with
     * @param {string} config.namespace  the namespace to use for the storage key
     * @param {string} config.verticalKey the vertical key for the config
     * @param {object} config.searchParameters  the search parameters for the config v2
     */
    ;

    _proto.autoCompleteFilter = function autoCompleteFilter(input, config) {
      var _this5 = this;

      return this._autoComplete.queryFilter(input, config).then(function (data) {
        _this5.globalStorage.set(StorageKeys.AUTOCOMPLETE + "." + config.namespace, data);
      });
    }
    /**
     * Submits a question to the server and updates the underlying question model
     * @param {object} question The question object to submit to the server
     * @param {number} question.entityId The entity to associate with the question (required)
     * @param {string} question.lanuage The language of the question
     * @param {string} question.site The "publisher" of the (e.g. 'FIRST_PARTY')
     * @param {string} question.name The name of the author
     * @param {string} question.email The email address of the author
     * @param {string} question.questionText The question
     * @param {string} question.questionDescription Additional information about the question
     */
    ;

    _proto.submitQuestion = function submitQuestion(question) {
      var _this6 = this;

      return this._questionAnswer.submitQuestion(question).then(function (data) {
        _this6.globalStorage.set(StorageKeys.QUESTION_SUBMISSION, QuestionSubmission.submitted());
      });
    }
    /**
     * Stores the given sortBy into storage, to be used for the next search
     * @param {Object} sortByOptions
     */
    ;

    _proto.setSortBys = function setSortBys() {
      for (var _len = arguments.length, sortByOptions = new Array(_len), _key = 0; _key < _len; _key++) {
        sortByOptions[_key] = arguments[_key];
      }

      var sortBys = sortByOptions.map(function (option) {
        return {
          type: option.type,
          field: option.field,
          direction: option.direction
        };
      });
      this.globalStorage.set(StorageKeys.SORT_BYS, JSON.stringify(sortBys));
    }
    /**
     * Clears the sortBys key in global storage.
     */
    ;

    _proto.clearSortBys = function clearSortBys() {
      this.globalStorage["delete"](StorageKeys.SORT_BYS);
    }
    /**
     * Stores the given query into storage, to be used for the next search
     * @param {string} query the query to store
     */
    ;

    _proto.setQuery = function setQuery(query) {
      this.globalStorage.set(StorageKeys.QUERY, query);
    }
    /**
     * Stores the provided query ID, to be used in analytics
     * @param {string} queryId The query id to store
     */
    ;

    _proto.setQueryId = function setQueryId(queryId) {
      this.globalStorage.set(StorageKeys.QUERY_ID, queryId);
    }
    /**
     * Stores the given filter into storage, to be used for the next search
     *
     * @param {string} namespace the namespace to use for the storage key
     * @param {Filter} filter    the filter to set
     */
    ;

    _proto.setFilter = function setFilter(namespace, filter) {
      this.globalStorage.set(StorageKeys.FILTER + "." + namespace, filter);
    };

    _proto.setFacetFilter = function setFacetFilter(namespace, filter) {
      this.globalStorage.set(StorageKeys.FACET_FILTER + "." + namespace, filter);
    };

    _proto.enableDynamicFilters = function enableDynamicFilters() {
      this._isDynamicFiltersEnabled = true;
    };

    _proto.on = function on(evt, moduleId, cb) {
      return this.globalStorage.on(evt, moduleId, cb);
    };

    return Core;
  }();

  /** @module DOM */

  /* global HTMLElement, HTMLDocument, Window, Event */
  var document$1 = window.document;
  /**
   * Static interface for interacting with the DOM API.
   * @namespace
   */

  var DOM =
  /*#__PURE__*/
  function () {
    function DOM() {}

    DOM.setup = function setup(d, p) {
      document$1 = d;
    }
    /**
     * create a HTMLElement from and HTML string
     * @param {string} html The HTML to parse to a DOM node.
     * @return {HTMLElement}
     */
    ;

    DOM.create = function create(html) {
      if ('createRange' in document$1) {
        // prefer this implementation as it has wider browser support
        // and it's better performing.
        // see https://davidwalsh.name/convert-html-stings-dom-nodes
        var container = document$1.createElement('div');
        var frag = document$1.createRange().createContextualFragment(html);
        container.appendChild(frag);
        return container;
      } // fallback to this because of a bug in jsdom that causes tests to fail
      // see: https://github.com/jsdom/jsdom/issues/399


      return new DOMParser().parseFromString(html, 'text/html').body;
    }
    /**
     * query the DOM for a given css selector
     * @param {HTMLElement} parent Optional context to use for a search. Defaults to document if not provided.
     * @param {string} selector the CSS selector to query for
     *
     * @returns {HTMLElement} the FIRST node it finds, if any
     */
    ;

    DOM.query = function query(parent, selector) {
      // Facade, shifting the selector to the parent argument if only one
      // argument is provided
      if (selector === undefined) {
        selector = parent;
        parent = document$1;
      }

      if (selector instanceof HTMLElement || selector instanceof Window || selector instanceof HTMLDocument) {
        return selector;
      }

      return parent.querySelector(selector);
    }
    /**
     * query the DOM for a given css selector
     * @param {HTMLElement} parent Optional context to use for a search. Defaults to document if not provided.
     * @param {string} selector the CSS selector to query for
     *
     * @returns {Array} the FIRST node it finds, if any
     */
    ;

    DOM.queryAll = function queryAll(parent, selector) {
      // Facade, shifting the selector to the parent argument if only one
      // argument is provided
      if (selector === undefined) {
        selector = parent;
        parent = document$1;
      } // handle the case where client code is using a pointer to a dom node and it's null, e.g. this._container


      if (parent == null) {
        parent = document$1;
      }

      if (selector instanceof HTMLElement || selector instanceof HTMLDocument || selector instanceof Window) {
        return [selector];
      }

      return Array.from(parent.querySelectorAll(selector));
    };

    DOM.onReady = function onReady(cb) {
      if (document$1.readyState === 'complete' || document$1.readyState === 'loaded' || document$1.readyState === 'interactive') {
        cb();
        return;
      }

      DOM.on(document$1, 'DOMContentLoaded', cb);
    }
    /**
     * createEle will create a {HTMLElement} and apply the properties attributes through an object provided.
     * @param {string} el The element `tag` name to construct
     * @param {Object} opts_data Optional attributes to apply to the new HTMLElement
     */
    ;

    DOM.createEl = function createEl(el, opts_data) {
      if (opts_data === void 0) {
        opts_data = {};
      }

      var node = document$1.createElement(el);
      var props = Object.keys(opts_data);

      for (var i = 0; i < props.length; i++) {
        if (props[i] === 'class') {
          DOM.addClass(node, opts_data[props[i]]);
          continue;
        }

        node[props[i]] = opts_data[props[i]];
      }

      return node;
    };

    DOM.append = function append(parent, node) {
      if (node === undefined) {
        node = parent;
        parent = document$1;
      }

      if (typeof parent === 'string') {
        parent = DOM.query(parent);
      } // Support HTML injection as well as HTMLElement appends


      if (typeof node === 'string') {
        parent.insertAdjacentHTML('afterBegin', node);
      } else {
        parent.appendChild(node);
      }
    };

    DOM.addClass = function addClass(node, className) {
      if (!node) {
        return;
      }

      var classes = className.split(',');
      var len = classes.length;

      for (var i = 0; i < len; i++) {
        node.classList.add(classes[i]);
      }
    };

    DOM.empty = function empty(parent) {
      parent.innerHTML = '';
    };

    DOM.css = function css(selector, styles) {
      var node = DOM.query(selector);

      for (var prop in styles) {
        node.style[prop] = styles[prop];
      }
    };

    DOM.attr = function attr(selector, _attr, val) {
      DOM.query(selector).setAttribute(_attr, val);
    };

    DOM.attributes = function attributes(selector, attrs) {
      var _this = this;

      Object.entries(attrs).forEach(function (_ref) {
        var attr = _ref[0],
            val = _ref[1];
        return _this.attr(selector, attr, val);
      });
    };

    DOM.trigger = function trigger(selector, event, settings) {
      var e = new Event(event, Object.assign({
        'bubbles': true,
        'cancelable': true
      }, settings || {}));
      DOM.query(selector).dispatchEvent(e);
    };

    DOM.on = function on(selector, evt, handler) {
      DOM.query(selector).addEventListener(evt, handler);
    };

    DOM.once = function once(selector, evt, handler) {
      DOM.query(selector).addEventListener(evt, handler, {
        once: true
      });
    };

    DOM.off = function off(selector, evt, handler) {
      DOM.query(selector).removeEventListener(evt, handler);
    };

    DOM.delegate = function delegate(ctxt, selector, evt, handler) {
      var el = DOM.query(ctxt);
      el.addEventListener(evt, function (event) {
        var target = event.target;

        while (!target.isEqualNode(el)) {
          if (target.matches(selector)) {
            handler(event, target);
            break;
          }

          target = target.parentNode;
        }
      });
    };

    return DOM;
  }();

  /** @module SearchParams */

  /* global window */

  /**
   * SearchParams is a class to get the search params in a URL.
   * It is a replacement for URL.searchParams and URLSearchParams for browsers like IE11
   */
  var SearchParams =
  /*#__PURE__*/
  function () {
    function SearchParams(url) {
      /**
       * Mapping of all query parameters in the given url, query param -> value
       * Only used if URLSearchParams does not exist in the window
       * @type {Object}
       * @private
       */
      this._params = {};

      if (window && window.URLSearchParams) {
        return new URLSearchParams(url);
      } else {
        this._params = this.parse(url);
      }
    }
    /**
     * parse creates a mapping of all query params in a given url
     * The query param values are decoded before being put in the map
     * Three types of input are supported
     *   (1) full URL e.g. http://www.yext.com/?q=hello
     *   (2) params with ? e.g. ?q=hello
     *   (1) params without ? e.g. q=hello
     * @param {string} url The url
     * @returns {Object} mapping from query param -> value where value is '' if no value is provided
     */


    var _proto = SearchParams.prototype;

    _proto.parse = function parse(url) {
      var params = {};
      var search = url;

      if (search === '') {
        return params;
      } // Normalize all url inputs to string of query params separated by &


      if (url.indexOf('?') > -1) {
        search = url.slice(url.indexOf('?') + 1);
      }

      var encodedParams = search.split('&');

      for (var i = 0; i < encodedParams.length; i++) {
        var keyVal = encodedParams[i].split('=');

        if (keyVal.length > 1) {
          params[keyVal[0]] = SearchParams.decode(keyVal[1]);
        } else {
          params[keyVal[0]] = '';
        }
      }

      return params;
    }
    /**
     * get returns the value of the given query param
     * @param {string} query the query param key to get the value of
     * @return {string} param value, null otherwise
     */
    ;

    _proto.get = function get(query) {
      if (typeof this._params[String(query)] === 'undefined') {
        return null;
      }

      return this._params[query];
    }
    /**
     * set changes the value of a given query param
     * @param {string} name the query param key
     * @param {string} value the value of the query param update with
     */
    ;

    _proto.set = function set(name, value) {
      this._params[String(name)] = String(value);
    }
    /**
     * has checks to see if the given query param key exists in the params object
     * @param {string} query the query param to check
     * @return {boolean} true if the query param is in the params object, false o/w
     */
    ;

    _proto.has = function has(query) {
      return query in this._params;
    }
    /**
     * delete removes the given query param and its associated value from the params object
     * @param {string} name the query param key
     */
    ;

    _proto["delete"] = function _delete(name) {
      delete this._params[String(name)];
    }
    /**
     * toString returns a url with all the query params in the params object (without a ?)
     * @return {string}
     */
    ;

    _proto.toString = function toString() {
      var string = [];

      for (var key in this._params) {
        string.push(key + "=" + SearchParams.encode(this._params[key]));
      }

      return string.join('&');
    };

    _proto.entries = function entries() {
      var entries = [];

      for (var key in this._params) {
        entries.push([key, this._params[key]]);
      }

      return entries;
    }
    /**
     * decode returns the decoded representation of the given string
     * @param {string} string the string to decode
     * @return {string}
     */
    ;

    SearchParams.decode = function decode(string) {
      return decodeURIComponent(string.replace(/[ +]/g, '%20'));
    }
    /**
     * decode returns the encoded representation of the given string (e.g. + -> %2B)
     * @param {string} string the string to encode
     * @return {string}
     */
    ;

    SearchParams.encode = function encode(string) {
      var replace = {
        '!': '%21',
        "'": '%27',
        '(': '%28',
        ')': '%29',
        '%20': '+'
      };
      return encodeURIComponent(string).replace(/[!'()]|%20/g, function (match) {
        return replace[match];
      });
    };

    return SearchParams;
  }();

  /** @module Renderer */

  /**
   * Renderer is an abstract class that all Renderers should extend and implement
   */
  var Renderer =
  /*#__PURE__*/
  function () {
    function Renderer() {}

    var _proto = Renderer.prototype;

    /**
     * render is a core method for all renderers.
     * All implementations should override this class
     * @param {string} template
     * @param {object} data
     */
    _proto.render = function render(template, data) {
      return template;
    };

    _proto.registerHelper = function registerHelper(name, cb) {};

    _proto.compile = function compile(template) {};

    return Renderer;
  }();

  /**
   * HandlebarsRenderer is a wrapper around the nativate handlebars renderer.
   * @extends Renderer
   */

  var HandlebarsRenderer =
  /*#__PURE__*/
  function (_Renderer) {
    _inheritsLoose(HandlebarsRenderer, _Renderer);

    function HandlebarsRenderer(templates, opts) {
      var _this;

      if (templates === void 0) {
        templates = {};
      }

      if (opts === void 0) {
        opts = {};
      }

      _this = _Renderer.call(this) || this;
      /**
       * A local reference to the handlebars compiler
       * @type {Handlebars}
       * @private
       */

      _this._handlebars = templates._hb || null;
      /**
       * A local reference to the pre-compiled handlebars templates
       * @type {Handlebars}
       * @private
       */

      _this._templates = templates || {};
      return _this;
    }

    var _proto = HandlebarsRenderer.prototype;

    _proto.init = function init(templates) {
      // Assign the handlebars compiler and templates based on
      // information provided from external dep (in default case, it comes from external server request)
      this._handlebars = templates._hb;
      this._templates = templates; // TODO(billy) Once we re-write templates using the new helpers library
      // we probably don't need these custom helpers anymore

      this._registerCustomHelpers();
    }
    /**
     * registerHelper is a public interface for external dependencies to
     * register their own custom helpers to our internal Handlebars Compiler
     */
    ;

    _proto.registerHelper = function registerHelper(name, cb) {
      this._handlebars.registerHelper(name, cb);
    }
    /**
     * compile a handlebars template so that it can be rendered,
     * using the {Handlebars} compiler
     * @param {string} template The template string to compile
     */
    ;

    _proto.compile = function compile(template) {
      if (typeof template !== 'string') {
        return '';
      }

      return this._handlebars.compile(template);
    }
    /**
     * render will render a template with data
     * @param {Object} config Provide either a templateName or a pre-compiled template
     * @param {Object} data The data to provide to the template
     */
    ;

    _proto.render = function render(config, data) {
      // If a custom template is provided, use it,
      // otherwise fall back to the template name
      // TODO(billy) This interface should probably be less ugly
      if (config.template !== null) {
        return config.template(data);
      }

      try {
        return this._templates[config.templateName](data);
      } catch (e) {
        throw new Error('Can not find/render template: ' + config.templateName, e);
      }
    };

    _proto._registerCustomHelpers = function _registerCustomHelpers() {
      this.registerHelper('ifeq', function (arg1, arg2, options) {
        return arg1 === arg2 ? options.fn(this) : options.inverse(this);
      });
      this.registerHelper('ifnoteq', function (arg1, arg2, options) {
        return arg1 !== arg2 ? options.fn(this) : options.inverse(this);
      });
      this.registerHelper('formatPhoneNumber', function (phoneNumberString) {
        var cleaned = ('' + phoneNumberString).replace(/\D/g, '');
        var match = cleaned.match(/^(1|)?(\d{3})(\d{3})(\d{4})$/);

        if (match) {
          var intlCode = match[1] ? '+1 ' : '';
          return [intlCode, '(', match[2], ') ', match[3], '-', match[4]].join('');
        }

        return null;
      });
      this.registerHelper('assign', function (name, value, options) {
        var args = arguments;
        options = args[args.length - 1];

        if (!options.data.root) {
          options.data.root = {};
        }

        var v = '';

        for (var i = 1; i < args.length - 1; i++) {
          v = v + args[i];
        }

        options.data.root[name] = v;
      });
      this.registerHelper('json', function (name, value, options) {
        return name === undefined ? '' : JSON.stringify(name);
      });
    };

    return HandlebarsRenderer;
  }(Renderer);

  /** @module */
  // E.g. Mustache, SOY, HandleBars, React, etc.

  var Renderers = {
    SOY: Renderer,
    Handlebars: HandlebarsRenderer
  };

  /** @module */

  /** The current lib version, reported with errors and analytics */
  var LIB_VERSION = 'v0.12.1';
  /** The identifier of the production environment */

  var PRODUCTION = 'production';
  /** The identifier of the sandbox environment */

  var SANDBOX = 'sandbox';
  /** The default url for compiled component templates */

  var COMPILED_TEMPLATES_URL = "https://assets.sitescdn.net/answers/" + LIB_VERSION + "/answerstemplates.compiled.min.js";

  /** @module TemplateLoader */
  /**
   * TemplateLoader exposes an interface for loading templates asynchronously
   * from the server and registers them with the proper renderer.
   * It also allows you to assign them synchronously.
   */

  var TemplateLoader =
  /*#__PURE__*/
  function () {
    function TemplateLoader(config) {
      if (!TemplateLoader.setInstance(this)) {
        return TemplateLoader.getInstance();
      }
      /**
       * The template url to fetch compiled templates from
       * @type {string}
       * @private
       */


      this._templateUrl = config.templateUrl || COMPILED_TEMPLATES_URL;
      this._templates = {};

      this._onLoaded = function () {};

      this._init();
    }

    TemplateLoader.setInstance = function setInstance(instance) {
      if (!this.instance) {
        this.instance = instance;
        return true;
      }

      return false;
    };

    TemplateLoader.getInstance = function getInstance() {
      return this.instance;
    };

    var _proto = TemplateLoader.prototype;

    _proto._init = function _init() {
      this.fetchTemplates();
    };

    _proto.fetchTemplates = function fetchTemplates() {
      var _this = this;

      // If we already have templates loaded, do nothing
      var node = DOM.query('#yext-answers-templates');

      if (node) {
        return;
      } // Inject a script to fetch the compiled templates,
      // wrapping it a Promise for cleanliness


      new Promise(function (resolve, reject) {
        var script = DOM.createEl('script', {
          id: 'yext-answers-templates',
          onload: resolve,
          onerror: reject,
          async: true,
          src: _this._templateUrl
        });
        DOM.append('body', script);
      }).then(function (response) {
        // TODO(billy) Implmenet error handling here (e.g. request could fail)
        console.log('Templates loaded successfully!');
      });
      return this;
    }
    /**
     * register the templates internally so that they can be later consumed
     * (e.g. by components and renderers) with convienience.
     *
     * `fetchTemplates` will automatically call this, providing the compiled templates from the server.
     */
    ;

    _proto.register = function register(templates) {
      this._templates = templates; // Notify our consumers that the templates are here :)

      this._onLoaded(this._templates);

      return this;
    };

    _proto.onLoaded = function onLoaded(cb) {
      this._onLoaded = cb;
      return this;
    };

    _proto.get = function get(templateName) {
      return this._templates[templateName];
    }
    /**
     * @return The internal template collection
     */
    ;

    _proto.getTemplates = function getTemplates() {
      return this._templates;
    };

    return TemplateLoader;
  }();

  /** @module */

  /** @module EventEmitter */

  /**
   * EventEmitter is a base class for any object that wants to expose
   * a pub/sub interface, for emitting messages and providing listeners.
   */
  var EventEmitter =
  /*#__PURE__*/
  function () {
    function EventEmitter() {
      /**
       * The subscribers of messages
       * @type {object[]}
       * @private
       */
      this._listeners = {};
    }
    /**
     * on is the public interface for subscribing events that are emitted.
     * @param {string} evt the event name to listen to
     * @param {function} cb The callback to invoke when the {evt} is emitted
     * @param {boolean} once Optional value which will only handle the message once
     */


    var _proto = EventEmitter.prototype;

    _proto.on = function on(evt, cb, once) {
      if (typeof cb !== 'function') {
        throw new Error('callback handler should be of type {function}');
      }

      if (this._listeners[evt] === undefined) {
        this._listeners[evt] = [];
      }

      this._listeners[evt].push({
        event: evt,
        cb: cb,
        once: once || false
      });

      return this;
    }
    /**
     * once is the public interface for subscribing events that are emitted.
     * The handler will only be triggered once.
     *
     * @param {string} evt the event name to listen to
     * @param {function} cb The callback to invoke when the {evt} is emitted
     * @param {boolean} once Optional value which will only handle the message once
     */
    ;

    _proto.once = function once(evt, cb) {
      return this.on(evt, cb, true);
    }
    /**
     * off is the public interface for unsubscribing from an event
     * @param {string} evt the event name to unsubscribe from
     */
    ;

    _proto.off = function off(evt) {
      delete this._listeners[evt];
      return this;
    }
    /**
     * emit is the public interface for broadcasting messages/events
     * @param {string} evt the event name to publish from
     * @param {Object} data the data to send along to the subscribers
     */
    ;

    _proto.emit = function emit(evt, data) {
      var listeners = this._listeners[evt];

      if (listeners === undefined) {
        return;
      } // Invoke each of all the listener handlers and remove the ones that should fire only once.


      var keep = [];

      for (var i = 0; i < listeners.length; i++) {
        listeners[i].cb(data);

        if (listeners[i].once === true) {
          continue;
        } // Instead of having a 'dirty' array with deleted or 'undefined' entries,
        // we just create a brand new array without the listeners that were removed


        keep.push(listeners[i]);
      } // Update our old list of listeners to the newly created array


      this._listeners[evt] = keep;
      return this;
    };

    return EventEmitter;
  }();

  /**
   * State contains the data for the component
   * and exposes an {EventEmitter} interface so that external
   * dependencies can listen/hook subscribe to messages/updates.
   * @extends EventEmitter
   */

  var State =
  /*#__PURE__*/
  function (_EventEmitter) {
    _inheritsLoose(State, _EventEmitter);

    function State(data) {
      var _this;

      _this = _EventEmitter.call(this) || this;
      /**
       * The initial state of the component
       * @type {Object}
       * @private
       */

      _this._state = data || {};
      return _this;
    }
    /**
     * Set the initial state of the component.
     * NOTE(billy): Does not fire an update message
     */


    var _proto = State.prototype;

    _proto.init = function init(prop, optVal) {
      this._set(prop, optVal);
    }
    /**
     * setter for the state
     * @param prop {string|Object} The property to set
     * @param optVal Optional, if prop is a {string}, it will assign the value to that property
     */
    ;

    _proto.set = function set(prop, optVal) {
      this._set(prop, optVal);

      this.emit('update');
    }
    /**
     * setter for the state enables you to update a single property, or complete state
     * depending on the arguments provided.
     * @param prop {string|Object} The property to set
     * @param optVal If prop is a {string}, provide its value
     * @private
     */
    ;

    _proto._set = function _set(prop, optVal) {
      if (optVal === undefined) {
        this._state = prop;
      } else {
        this._state[prop] = optVal;
      }
    };

    _proto.update = function update(data) {
      this._state = data;
      this.emit('update');
    }
    /**
     * Retrieve a properties value from the state
     * If no property provided, return the full state
     * @param {string} optProp optional property to retrieve
     */
    ;

    _proto.get = function get(optProp) {
      if (optProp === undefined) {
        return this._state;
      }

      return this._state[optProp];
    };

    _proto.has = function has(prop) {
      return this._state[prop] !== undefined;
    };

    _proto.asJSON = function asJSON() {
      return this._state;
    };

    return State;
  }(EventEmitter);

  /** @module HttpRequester */

  /* global fetch */

  /**
   * Types of HTTP requests
   */
  var Methods = {
    GET: 'get',
    POST: 'post',
    PUT: 'put',
    DELETE: 'delete'
  };
  /**
   * HttpRequester is a wrapper around the native implementation of AJAX
   * related matters. It's used to make all types of network requests
   * and exposes a promise interface.
   */

  var HttpRequester =
  /*#__PURE__*/
  function () {
    function HttpRequester() {}

    var _proto = HttpRequester.prototype;

    /**
     * Create a GET HTTP request
     * @param {string} url The url to make a request to
     * @param {Object} data The data to provide (gets encoded into the URL)
     * @param {Object} opts Configuration options to use for the request
     */
    _proto.get = function get(url, data, opts) {
      return this.request(Methods.GET, this.encodeParams(url, data), opts);
    }
    /**
     * Create a POST HTTP request
     * @param {string} url The url to make a request to
     * @param {Object} urlParams The params to encode into the URL
     * @param {Object} jsonBody The request body (json) to provide with the POST request
     * @param {Object} requestConfig Configuration options to use for the request
     */
    ;

    _proto.post = function post(url, urlParams, jsonBody, requestConfig) {
      return this.request(Methods.POST, this.encodeParams(url, urlParams), Object.assign({}, {
        body: JSON.stringify(jsonBody),
        credentials: undefined
      }, requestConfig));
    };

    _proto.request = function request(method, url, opts) {
      var reqArgs = Object.assign({}, {
        'method': method,
        'credentials': 'include'
      }, opts);
      return fetch(url, reqArgs);
    }
    /**
     * Send a beacon to the provided url which will send a non-blocking request
     * to the server that is guaranteed to send before page load. No response is returned,
     * so beacons are primarily used for analytics reporting.
     * @param {string} url The url to send the beacon to
     * @param {object} data The data payload to send in the beacon
     * @return {boolean} true if the request is successfully queued
     */
    ;

    _proto.beacon = function beacon(url, data) {
      return navigator.sendBeacon(url, JSON.stringify(data));
    };

    _proto.encodeParams = function encodeParams(url, params) {
      if (typeof params !== 'object') {
        return;
      }

      var hasParam = url.indexOf('?') > -1;
      var searchQuery = '';

      for (var key in params) {
        if (!hasParam) {
          hasParam = true;
          searchQuery += '?';
        } else {
          searchQuery += '&';
        }

        searchQuery += key + '=' + encodeURIComponent(params[key]);
      }

      return url + searchQuery;
    };

    return HttpRequester;
  }();

  /**
   * Returns the base url for the live api backend in the desired environment.
   * @param {string} env The desired environment.
   */

  function getLiveApiUrl(env) {
    if (env === void 0) {
      env = PRODUCTION;
    }

    return env === SANDBOX ? 'https://liveapi-sandbox.yext.com' : 'https://liveapi.yext.com';
  }
  /**
   * Returns the base url for the knowledge api backend in the desired environment.
   * @param {string} env The desired environment.
   */

  function getKnowledgeApiUrl(env) {
    if (env === void 0) {
      env = PRODUCTION;
    }

    return env === SANDBOX ? 'https://api-sandbox.yext.com' : 'https://api.yext.com';
  }
  /**
   * Returns the base url for the analytics backend in the desired environment.
   * @param {string} env The desired environment.
   * @param {boolean} conversionTrackingEnabled If conversion tracking has been opted into.
   */

  function getAnalyticsUrl(env, conversionTrackingEnabled) {
    if (env === void 0) {
      env = PRODUCTION;
    }

    if (conversionTrackingEnabled === void 0) {
      conversionTrackingEnabled = false;
    }

    if (conversionTrackingEnabled) {
      return env === SANDBOX ? 'https://sandbox-realtimeanalytics.yext.com' : 'https://realtimeanalytics.yext.com';
    }

    return env === SANDBOX ? 'https://sandbox-answers.yext-pixel.com' : 'https://answers.yext-pixel.com';
  }

  /** @module ApiRequest */
  /**
   * ApiRequest is the base class for all API requests.
   * It defines all of the core properties required to make a request
   */

  var ApiRequest =
  /*#__PURE__*/
  function () {
    // TODO (tmeyer): Create an ApiService interface and pass an implementation to the current
    // consumers of ApiRequest as a dependency.
    function ApiRequest(opts, globalStorage) {
      if (opts === void 0) {
        opts = {};
      }

      /**
       * An abstraction used for making network request and handling errors
       * @type {HttpRequester}
       * @private
       */
      this._requester = new HttpRequester();
      /**
       * The environment the request should be made to
       * @type {string}
       * @private
       */

      this._environment = opts.environment || PRODUCTION;
      /**
       * The baseUrl to use for making a request
       * @type {string}
       * @private
       */

      this._baseUrl = opts.baseUrl || getLiveApiUrl(this._environment);
      /**
       * The endpoint to use in the url (appended to the {baseUrl})
       * @type {string}
       * @private
       */

      this._endpoint = opts.endpoint || null;
      /**
       * The API Key to use for the request
       * @type {string}
       * @private
       */

      this._apiKey = opts.apiKey || null;
      /**
       * The version of the API to make a request to
       * @type {string}
       * @private
       */

      this._version = opts.version || 20190101;
      /**
       * Additional data params that are sent along with the request
       * @type {string}
       * @private
       */

      this._params = opts.params || {};

      if (!globalStorage) {
        throw new AnswersBasicError('Must include global storage', 'ApiRequest');
      }
      /**
       * @type {GlobalStorage}
       * @private
       */


      this._globalStorage = globalStorage;
    }
    /**
     * get creates a new `GET` request to the server using the configuration of the request class
     * @returns {Promise<Response>}
     */


    var _proto = ApiRequest.prototype;

    _proto.get = function get() {
      return this._requester.get(this._baseUrl + this._endpoint, Object.assign({}, this.baseParams(), this.sanitizeParams(this._params)));
    }
    /**
     * @param {Object} opts
     * @returns {Promise<Response>}
     */
    ;

    _proto.post = function post(opts) {
      return this._requester.post(this._baseUrl + this._endpoint, this.baseParams()
      /* urlParams */
      , this.sanitizeParams(this._params)
      /* jsonBody */
      , opts
      /* requestConfig */
      );
    }
    /**
     * @returns {Object}
     * @private
     */
    ;

    _proto.baseParams = function baseParams() {
      var baseParams = {
        'v': this._version,
        'api_key': this._apiKey,
        'jsLibVersion': LIB_VERSION,
        'sessionTrackingEnabled': this._globalStorage.getState(StorageKeys.SESSIONS_OPT_IN)
      };
      var urlParams = new SearchParams(window.location.search.substring(1));

      if (urlParams.has('beta')) {
        baseParams['beta'] = urlParams.get('beta');
      }

      return baseParams;
    };

    _proto.sanitizeParams = function sanitizeParams(params) {
      if (params === void 0) {
        params = {};
      }

      // Remove any paramaters whos value is `undefined`.
      //
      // NOTE(billy) Probably better to be explicit about how to handle this at the request building level,
      // but I can't see any cases where we'd ever want to send 'undefined' as a value to the server.
      // So it's probably fine to 'clean' the params object here
      Object.keys(params).forEach(function (key) {
        if (params[key] === undefined || params[key] === null) {
          delete params[key];
        }
      });
      return params;
    };

    return ApiRequest;
  }();

  /** @module SearchApi */
  /**
   * SearchApi is the API for doing various types of search
   * over the network (e.g. vertical or universal)
   *
   * @implements {SearchService}
   */

  var SearchApi =
  /*#__PURE__*/
  function () {
    function SearchApi(config) {
      if (config === void 0) {
        config = {};
      }

      /**
       * A local reference to the API Key to use for the request
       * @type {string}
       * @private
       */
      if (!config.apiKey) {
        throw new AnswersBasicError('Api Key is required', 'Search');
      }

      this._apiKey = config.apiKey;
      /**
       * A local reference to the Answers Key to use for the request
       * @type {string}
       * @private
       */

      if (!config.experienceKey) {
        throw new AnswersBasicError('Answers Key is required', 'Search');
      }

      this._experienceKey = config.experienceKey;
      /**
       * The answers config version to use for all requests
       * @type {string}
       * @private
       */

      this._experienceVersion = config.experienceVersion;
      /**
       * The version of the API to make a request to
       * @type {string}
       * @private
       */

      this._version = config.version || 20190101 || 20190301;
      /**
       * A local reference to the locale to use for the request
       * @type {string}
       * @private
       */

      if (!config.locale) {
        throw new AnswersBasicError('Locale is required', 'Search');
      }

      this._locale = config.locale;
      /**
       * The environment of the Answers experience
       * @type {string}
       * @private
       */

      this._environment = config.environment;
    }
    /** @inheritdoc */


    var _proto = SearchApi.prototype;

    _proto.verticalSearch = function verticalSearch(verticalKey, _ref) {
      var input = _ref.input,
          filter = _ref.filter,
          facetFilter = _ref.facetFilter,
          limit = _ref.limit,
          offset = _ref.offset,
          id = _ref.id,
          geolocation = _ref.geolocation,
          isDynamicFiltersEnabled = _ref.isDynamicFiltersEnabled,
          skipSpellCheck = _ref.skipSpellCheck,
          queryTrigger = _ref.queryTrigger,
          sessionTrackingEnabled = _ref.sessionTrackingEnabled,
          sortBys = _ref.sortBys;

      if (limit > 50) {
        throw new AnswersCoreError('Provided search limit unsupported', 'SearchApi');
      }

      var requestConfig = {
        endpoint: '/v2/accounts/me/answers/vertical/query',
        apiKey: this._apiKey,
        version: this._version,
        environment: this._environment,
        params: {
          'input': input,
          'experienceKey': this._experienceKey,
          'version': this._experienceVersion,
          'filters': filter,
          'facetFilters': facetFilter,
          'verticalKey': verticalKey,
          'limit': limit,
          'offset': offset,
          'location': geolocation ? geolocation.lat + "," + geolocation.lng : null,
          'radius': geolocation ? geolocation.radius : null,
          'queryId': id,
          'retrieveFacets': isDynamicFiltersEnabled,
          'locale': this._locale,
          'skipSpellCheck': skipSpellCheck,
          'queryTrigger': queryTrigger,
          'sessionTrackingEnabled': sessionTrackingEnabled,
          'sortBys': sortBys
        }
      };
      var request = new ApiRequest(requestConfig, {
        getState: function getState() {
          return sessionTrackingEnabled;
        }
      });
      return request.get().then(function (response) {
        return response.json();
      });
    }
    /** @inheritdoc */
    ;

    _proto.universalSearch = function universalSearch(queryString, params) {
      var requestConfig = {
        endpoint: '/v2/accounts/me/answers/query',
        apiKey: this._apiKey,
        version: this._version,
        environment: this._environment,
        params: {
          'input': queryString,
          'experienceKey': this._experienceKey,
          'location': params.geolocation ? params.geolocation.lat + "," + params.geolocation.lng : null,
          'radius': params.geolocation ? params.geolocation.radius : null,
          'version': this._experienceVersion,
          'locale': this._locale,
          'skipSpellCheck': params.skipSpellCheck,
          'queryTrigger': params.queryTrigger
        }
      };
      var request = new ApiRequest(requestConfig, {
        getState: function getState() {
          return params.sessionTrackingEnabled;
        }
      });
      return request.get().then(function (response) {
        return response.json();
      });
    };

    return SearchApi;
  }();

  /**
   * Model for the analytics event type
   */
  var AnalyticsEvent =
  /*#__PURE__*/
  function () {
    function AnalyticsEvent(type, label) {
      /**
       * The type of event to report
       * @type {string}
       */
      this.eventType = type.toUpperCase();
      /**
       * An optional label to be provided for the event
       * @type {string}
       */

      if (label) {
        this.label = label;
      }
    }
    /**
     * Adds the provided options to the event
     * @param {object} options Additional options for the event
     */


    var _proto = AnalyticsEvent.prototype;

    _proto.addOptions = function addOptions(options) {
      Object.assign(this, options);
      return this;
    }
    /**
     * Return the event in the api format, typically for reporting to the api
     */
    ;

    _proto.toApiEvent = function toApiEvent() {
      return Object.assign({}, this);
    };

    return AnalyticsEvent;
  }();

  /** @typedef {import('../services/analyticsreporterservice').default} AnalyticsReporterService */

  /**
   * Class for reporting analytics events to the server via HTTP
   *
   * @implements {AnalyticsReporterService}
   */

  var AnalyticsReporter =
  /*#__PURE__*/
  function () {
    function AnalyticsReporter(core, experienceKey, experienceVersion, businessId, globalOptions, environment) {
      var _this = this;

      if (globalOptions === void 0) {
        globalOptions = {};
      }

      if (environment === void 0) {
        environment = PRODUCTION;
      }

      /**
       * The internal business identifier used for reporting
       * @type {number}
       */
      this._businessId = businessId;
      /**
       * Options to include with every analytic event reported to the server
       * @type {object}
       * @private
       */

      this._globalOptions = Object.assign({}, globalOptions, {
        experienceKey: experienceKey
      });
      /**
       * The environment of the Answers experience
       * @type {string}
       * @private
       */

      this._environment = environment;
      /**
       * Base URL for the analytics API
       * @type {string}
       * @private
       */

      this._baseUrl = getAnalyticsUrl(this._environment);
      /**
       * Boolean indicating if opted in or out of conversion tracking
       * @type {boolean}
       * @private
       */

      this._conversionTrackingEnabled = false;

      if (experienceVersion) {
        this._globalOptions.experienceVersion = experienceVersion;
      } // listen to query id updates


      core.globalStorage.on('update', StorageKeys.QUERY_ID, function (id) {
        return _this.setQueryId(id);
      });
    }

    var _proto = AnalyticsReporter.prototype;

    _proto.setQueryId = function setQueryId(queryId) {
      this._globalOptions.queryId = queryId;
    }
    /** @inheritdoc */
    ;

    _proto.report = function report(event) {
      var cookieData = {};

      if (this._conversionTrackingEnabled && typeof ytag === 'function') {
        ytag('optin', true);
        cookieData = ytag('yfpc', null);
      } else if (this._conversionTrackingEnabled) {
        throw new AnswersAnalyticsError('Tried to enable conversion tracking without including ytag');
      }

      if (!(event instanceof AnalyticsEvent)) {
        throw new AnswersAnalyticsError('Tried to send invalid analytics event', event);
      }

      event.addOptions(this._globalOptions);
      return new HttpRequester().beacon(this._baseUrl + "/realtimeanalytics/data/answers/" + this._businessId, _objectSpread2({
        data: event.toApiEvent()
      }, cookieData));
    }
    /** @inheritdoc */
    ;

    _proto.setConversionTrackingEnabled = function setConversionTrackingEnabled(isEnabled) {
      this._conversionTrackingEnabled = isEnabled;
      this._baseUrl = getAnalyticsUrl(this._environment, isEnabled);
    };

    return AnalyticsReporter;
  }();

  /** @typedef {import('../services/analyticsreporterservice').default} AnalyticsReporterService */

  /**
   * @implements {AnalyticsReporterService}
   */
  var NoopAnalyticsReporter =
  /*#__PURE__*/
  function () {
    function NoopAnalyticsReporter() {}

    var _proto = NoopAnalyticsReporter.prototype;

    /** @inheritdoc */
    _proto.report = function report(event) {
      return true;
    }
    /** @inheritdoc */
    ;

    _proto.setConversionTrackingEnabled = function setConversionTrackingEnabled(isEnabled) {};

    return NoopAnalyticsReporter;
  }();

  /**
   * ModuleData is used as a generic model for Storage.
   * Typically an instance of ModuleData powers a single component.

   * A data model that exposes an event emitter interface.
   * @extends EventEmitter
   */

  var ModuleData =
  /*#__PURE__*/
  function (_EventEmitter) {
    _inheritsLoose(ModuleData, _EventEmitter);

    function ModuleData(id, data) {
      var _this;

      if (data === void 0) {
        data = {};
      }

      _this = _EventEmitter.call(this) || this;
      _this._id = id;
      _this._history = [];
      _this._data = data;

      _this.set(data);

      return _this;
    }
    /**
     * replaces the currently held data with the given data
     * @param {*} data the data to replace the current data
     */


    var _proto = ModuleData.prototype;

    _proto.set = function set(data) {
      this.capturePrevious();

      if (typeof data !== 'object' || Array.isArray(data) || Object.keys(data).length !== Object.keys(this._data).length) {
        this._data = data;
        this.emit('update', this._data);
        return;
      } // check for shallow equality


      for (var _i = 0, _Object$keys = Object.keys(data); _i < _Object$keys.length; _i++) {
        var key = _Object$keys[_i];

        if (this._data[key] !== data[key]) {
          this._data = data;
          this.emit('update', this._data);
          return;
        }
      }
    };

    _proto.capturePrevious = function capturePrevious() {
      if (this._history === undefined) {
        this._history = [];
      }

      if (this._history.length + 1 > 5) {
        this._history.shift();
      } // If data is ever undefined, we default to empty object


      this._history.push(JSON.stringify(this._data || {}));
    };

    _proto.undo = function undo() {
      var previous = {};

      if (this._previous.length > 0) {
        previous = JSON.parse(this._previous.pop());
      }

      this._data.set(previous);
    };

    _proto.raw = function raw() {
      return this._data;
    };

    return ModuleData;
  }(EventEmitter);

  /** @module GlobalStorage */
  /**
   * Storage is a container around application state.
   * It exposes an interface for CRUD operations as well as listening
   * for stateful changes.
   */

  var GlobalStorage =
  /*#__PURE__*/
  function () {
    function GlobalStorage() {
      this._moduleDataContainer = {};
      this._futureListeners = {};
    }
    /**
     * Set the data in storage with the given key to the provided data,
     * completely overwriting any existing data.
     * @param {string} key the storage key to set
     * @param {*} data the data to set
     */


    var _proto = GlobalStorage.prototype;

    _proto.set = function set(key, data) {
      this._initDataContainer(key, data);

      this._moduleDataContainer[key].set(data);
    }
    /**
     * Add all key/value pairs in the provided map to the storage
     * @param {*} data The key/value pairs to set in the storage
     */
    ;

    _proto.setAll = function setAll(data) {
      for (var _i = 0, _Object$entries = Object.entries(data); _i < _Object$entries.length; _i++) {
        var _Object$entries$_i = _Object$entries[_i],
            key = _Object$entries$_i[0],
            val = _Object$entries$_i[1];

        if (key === StorageKeys.QUERY) {
          continue;
        }

        this.set(key, val);
      } // Update query last since it triggers a search
      // TODO: move listeners up so all of storage can be updated at the same time


      if (data[StorageKeys.QUERY]) {
        this.set(StorageKeys.QUERY, data[StorageKeys.QUERY]);
      }
    };

    _proto._initDataContainer = function _initDataContainer(key, data) {
      if (key === undefined || key === null || typeof key !== 'string') {
        throw new AnswersStorageError('Invalid storage key provided', key, data);
      }

      if (data === undefined || data === null) {
        throw new AnswersStorageError('No data provided', key, data);
      }

      if (this._moduleDataContainer[key] === undefined) {
        this._moduleDataContainer[key] = new ModuleData(key);

        this._applyFutureListeners(key);
      }
    };

    _proto.getState = function getState(moduleId) {
      if (this._moduleDataContainer[moduleId]) {
        return this._moduleDataContainer[moduleId].raw();
      }

      return null;
    };

    _proto.getAll = function getAll(key) {
      var data = [];

      for (var _i2 = 0, _Object$keys = Object.keys(this._moduleDataContainer); _i2 < _Object$keys.length; _i2++) {
        var dataKey = _Object$keys[_i2];

        if (dataKey.startsWith(key) && this._moduleDataContainer[dataKey].raw() !== null) {
          data.push(this._moduleDataContainer[dataKey].raw());
        }
      }

      return data;
    }
    /**
     * Remove the data in storage with the given key to the provided data,
     * @param {string} key the storage key to delete
     */
    ;

    _proto["delete"] = function _delete(key) {
      // Note: Do we need to clean up listeners here?
      delete this._moduleDataContainer[key];
    };

    _proto.on = function on(evt, moduleId, cb) {
      var moduleData = this._moduleDataContainer[moduleId];

      if (moduleData === undefined) {
        if (this._futureListeners[moduleId] === undefined) {
          this._futureListeners[moduleId] = [];
        }

        this._futureListeners[moduleId].push({
          event: evt,
          cb: cb
        });

        return;
      }

      this._moduleDataContainer[moduleId].on(evt, cb);

      return this;
    };

    _proto.off = function off(evt, moduleId, cb) {
      var moduleData = this._moduleDataContainer[moduleId];

      if (moduleData === undefined) {
        if (this._futureListeners[moduleId] !== undefined) {
          this._futureListeners[moduleId].pop();
        }

        return this;
      }

      this._moduleDataContainer[moduleId].off(evt, cb);

      return this;
    };

    _proto._applyFutureListeners = function _applyFutureListeners(moduleId) {
      var futures = this._futureListeners[moduleId];

      if (!futures) {
        return;
      }

      for (var i = 0; i < futures.length; i++) {
        var future = futures[i];
        this.on(future.event, moduleId, future.cb);
      }

      delete this._futureListeners[moduleId];
    };

    return GlobalStorage;
  }();

  /** @module */

  /**
   * Component is an abstraction that encapsulates state, behavior,
   * and view for a particular chunk of functionality on the page.
   *
   * The API exposes event life cycle hooks for when things are rendered,
   * mounted, created, etc.
   */

  var Component =
  /*#__PURE__*/
  function () {
    function Component(config, systemConfig) {
      if (config === void 0) {
        config = {};
      }

      if (systemConfig === void 0) {
        systemConfig = {};
      }

      this.moduleId = null;
      /**
       * Unique name of this component instance
       * Used to distinguish between other components of the same type
       * @type {String}
       */

      this.name = config.name || this.constructor.type;
      /**
       * Cache the options so that we can propogate properly to child components
       * @type {Object}
       */

      this._config = config;
      /**
       * An identifier used to classify the type of component.
       * The component manager uses this information in order to persist and organize components
       * @type {string|ComponentType}
       */

      this._type = this.constructor.name;
      /**
       * A local reference to the parent component, if exists
       * @type {Component}
       */

      this._parentContainer = config.parentContainer || null;
      /**
       * A container for all the child components
       * @type {Component[]}
       */

      this._children = [];
      /**
       * The state (data) of the component to be provided to the template for rendering
       * @type {object}
       */

      this._state = new State(config.state);
      /**
       * TODO(billy) This should be 'services'
       */

      this.core = systemConfig.core || null;
      /**
       * A local reference to the component manager, which contains all of the component classes
       * eligible to be created
       * @type {ComponentManager}
       */

      this.componentManager = systemConfig.componentManager || null;
      /**
       * A local reference to the analytics reporter, used to report events for this component
       * @type {AnalyticsReporter}
       */

      this.analyticsReporter = systemConfig.analyticsReporter || null;
      /**
       * Options to include with all analytic events sent by this component
       * @type {object}
       * @private
       */

      this._analyticsOptions = config.analyticsOptions || {};
      /**
       * A reference to the DOM node that the component will be appended to when mounted/rendered.
       * @type {HTMLElement}
       */

      if (this._parentContainer === null) {
        if (typeof config.container === 'string') {
          this._container = DOM.query(config.container) || null;

          if (this._container === null) {
            throw new Error('Cannot find container DOM node: ' + config.container);
          }
        }
      } else {
        this._container = DOM.query(this._parentContainer, config.container); // If we have a parent, and the container is missing from the DOM,
        // we construct the container and append it to the parent

        if (this._container === null) {
          this._container = DOM.createEl('div', {
            "class": config.container.substring(1, config.container.length)
          });
          DOM.append(this._parentContainer, this._container);
        }
      }
      /**
       * A custom class to be applied to {this._container} node
       * @type {string}
       */


      this._className = config["class"] || 'component';
      /**
       * A custom render function to be used instead of using the default renderer
       * @type {Renderer}
       */

      this._render = config.render || null;
      /**
       * A local reference to the default {Renderer} that will be used for rendering the template
       * @type {Renderer}
       */

      this._renderer = systemConfig.renderer || Renderers.Handlebars;
      /**
       * The template string to use for rendering the component
       * If this is left empty, we lookup the template the base templates using the templateName
       * @type {string}
       */

      this._template = config.template ? this._renderer.compile(config.template) : null;
      /**
       * The templateName to use for rendering the component.
       * This is only used if _template is empty.
       * @type {string}
       */

      this._templateName = config.templateName || this.constructor.defaultTemplateName(config);
      /**
       * An internal state indicating whether or not the component has been mounted to the DOM
       * @type {boolean}
       */

      this._isMounted = false;
      /**
       * A local reference to the callback, thats used to transform the internal data
       * models of the components, before it gets applied to the component state.
       * By default, no transformation happens.
       * @type {function}
       */

      this.transformData = config.transformData || this.transformData || function () {};
      /**
       * The a local reference to the callback that will be invoked when a component is created.
       * @type {function}
       */


      this.onCreate = config.onCreateOverride || this.onCreate || function () {};

      this.onCreate = this.onCreate.bind(this);
      /**
       * The a local reference to the callback that will be invoked when a component is Mounted.
       * @type {function}
       */

      this.onMount = config.onMountOverride || this.onMount || function () {};

      this.onMount = this.onMount.bind(this);
      /**
       * The a local reference to the callback that will be invoked when a components state is updated.
       * @type {function}
       */

      this.onUpdate = config.onUpdateOverride || this.onUpdate || function () {};

      this.onUpdate = this.onUpdate.bind(this);
      /**
       * A user provided onCreate callback
       * @type {function}
       */

      this.userOnCreate = config.onCreate || function () {};
      /**
       * A user provided onMount callback
       * @type {function}
       */


      this.userOnMount = config.onMount || function () {};
      /**
       * A user provided onUpdate callback
       * @type {function}
       */


      this.userOnUpdate = config.onUpdate || function () {};
    }
    /**
     * The template to render
     * @returns {string}
     * @override
     */


    Component.defaultTemplateName = function defaultTemplateName(config) {
      return 'default';
    };

    Component.areDuplicateNamesAllowed = function areDuplicateNamesAllowed() {
      return false;
    };

    var _proto = Component.prototype;

    _proto.init = function init(opts) {
      var _this = this;

      try {
        this.setState(opts.data || opts.state || {});
        this.onCreate();
        this.userOnCreate();
      } catch (e) {
        throw new AnswersComponentError('Error initializing component', this.constructor.type, e);
      }

      this._state.on('update', function () {
        try {
          _this.onUpdate();

          _this.userOnUpdate();

          _this.unMount();

          _this.mount();
        } catch (e) {
          throw new AnswersComponentError('Error updating component', _this.constructor.type, e);
        }
      });

      DOM.addClass(this._container, this._className);
      return this;
    };

    _proto.setState = function setState(data) {
      var newState = Object.assign({}, {
        _config: this._config
      }, data);

      this._state.set(newState);

      return this;
    };

    _proto.getState = function getState(prop) {
      return this._state.get(prop);
    };

    _proto.hasState = function hasState(prop) {
      return this._state.has(prop);
    };

    _proto.transformData = function transformData(data) {
      return data;
    };

    _proto.addChild = function addChild(data, type, opts) {
      var childComponent = this.componentManager.create(type, Object.assign({
        name: data.name,
        parentContainer: this._container,
        data: data
      }, opts || {}, {
        _parentOpts: this._config
      }));

      this._children.push(childComponent);

      return childComponent;
    }
    /**
     * Unmount and remove this component and its children from the list
     * of active components
     */
    ;

    _proto.remove = function remove() {
      this._children.forEach(function (c) {
        return c.remove();
      });

      this.componentManager.remove(this);
    }
    /**
     * Set the render method to be used for rendering the component
     * @param {Function} render
     * @return {string}
     */
    ;

    _proto.setRender = function setRender(render) {
      this._render = render;
      return this;
    }
    /**
     * Set the renderer for the component
     * @param {RendererType} renderer
     */
    ;

    _proto.setRenderer = function setRenderer(renderer) {
      this._renderer = Renderers[renderer];
      return this;
    }
    /**
     * Sets the template for the component to use when rendering
     * @param {string} template
     */
    ;

    _proto.setTemplate = function setTemplate(template) {
      this._template = this._renderer.compile(template);
    };

    _proto.unMount = function unMount() {
      if (!this._container) {
        return this;
      }

      this._children.forEach(function (child) {
        child.unMount();
      });

      DOM.empty(this._container);

      this._children.forEach(function (c) {
        return c.remove();
      });

      this._children = [];
      this.onUnMount();
    };

    _proto.mount = function mount(container) {
      var _this2 = this;

      if (container) {
        this._container = container;
      }

      if (!this._container) {
        return this;
      }

      if (this.beforeMount() === false) {
        return this;
      }

      DOM.append(this._container, this.render(this._state.asJSON())); // Process the DOM to determine if we should create
      // in-memory sub-components for rendering

      var domComponents = DOM.queryAll(this._container, '[data-component]:not([data-is-component-mounted])');
      var data = this.transformData(JSON.parse(JSON.stringify(this._state.get())));
      domComponents.forEach(function (c) {
        return _this2._createSubcomponent(c, data);
      });

      this._children.forEach(function (child) {
        child.mount();
      }); // Attach analytics hooks as necessary


      if (this.analyticsReporter) {
        var domHooks = DOM.queryAll(this._container, '[data-eventtype]:not([data-is-analytics-attached])');
        domHooks.forEach(this._createAnalyticsHook.bind(this));
      }

      this._isMounted = true;
      this.onMount(this);
      this.userOnMount(this);
      return this;
    }
    /**
     * render the template using the {Renderer} with the current state and template of the component
     * @returns {string}
     */
    ;

    _proto.render = function render(data) {
      if (data === void 0) {
        data = this._state.get();
      }

      this.beforeRender(); // Temporary fix for passing immutable data to transformData().

      data = this.transformData(JSON.parse(JSON.stringify(data)));
      var html = ''; // Use either the custom render function or the internal renderer
      // dependant on the component configuration

      if (typeof this._render === 'function') {
        html = this._render(data);

        if (typeof html !== 'string') {
          throw new Error('Render method must return HTML as type {string}');
        }
      } else {
        // Render the existing templates as a string
        html = this._renderer.render({
          template: this._template,
          templateName: this._templateName
        }, data);
      } // We create an HTML Document fragment with the rendered string
      // So that we can query it for processing of sub components


      var el = DOM.create(html);
      this.afterRender();
      return el.innerHTML;
    };

    _proto._createSubcomponent = function _createSubcomponent(domComponent, data) {
      var _this3 = this;

      domComponent.dataset.isComponentMounted = true;
      var dataset = domComponent.dataset;
      var type = dataset.component;
      var prop = dataset.prop;
      var opts = dataset.opts ? JSON.parse(dataset.opts) : {};
      var childData = data[prop] || {};
      opts = _objectSpread2({}, opts, {
        container: domComponent
      }); // TODO(billy) Right now, if we provide an array as the data prop,
      // the behavior is to create many components for each item in the array.
      // THAT interface SHOULD change to use a different property that defines
      // whether to array data should be used for a single component or
      // to create many components for each item.
      // Overloading and having this side effect is unintuitive and WRONG

      if (!Array.isArray(childData)) {
        // Rendering a sub component should be within the context,
        // of the node that we processed it from
        this.addChild(childData, type, opts);
        return;
      }

      childData.reverse();
      childData.forEach(function (data) {
        _this3.addChild(data, type, opts);
      });
    };

    _proto._createAnalyticsHook = function _createAnalyticsHook(domComponent) {
      var _this4 = this;

      domComponent.dataset.isAnalyticsAttached = true;
      var dataset = domComponent.dataset;
      var type = dataset.eventtype;
      var label = dataset.eventlabel;
      var options = dataset.eventoptions ? JSON.parse(dataset.eventoptions) : {};
      DOM.on(domComponent, 'click', function (e) {
        var event = new AnalyticsEvent(type, label);
        event.addOptions(_this4._analyticsOptions);
        event.addOptions(options);

        _this4.analyticsReporter.report(event);
      });
    }
    /**
     * onCreate is triggered when the component is constructed
     * @param {function} the callback to invoke upon emit
     */
    ;

    _proto.onCreate = function onCreate(cb) {}
    /**
     * onUpdate is triggered when the state of the component changes
     * @param {function} the callback to invoke upon emit
     */
    ;

    _proto.onUpdate = function onUpdate(cb) {}
    /**
     * beforeRender event is triggered before the component is rendered
     * @param {function} the callback to invoke upon emit
     */
    ;

    _proto.beforeRender = function beforeRender(cb) {}
    /**
     * afterRender event is triggered after the component is rendered
     * @param {function} the callback to invoke upon emit
     */
    ;

    _proto.afterRender = function afterRender(cb) {}
    /**
     * onMount is triggered when the component is appended to the DOM
     * @param {function} the callback to invoke upon emit
     */
    ;

    _proto.onMount = function onMount(cb) {}
    /**
     * onUnMount is triggered when the component is removed from the DOM
     * @param {function} the callback to invoke upon emit
     */
    ;

    _proto.onUnMount = function onUnMount(cb) {}
    /**
     * beforeMount is triggered before the component is mounted to the DOM
     * @param {function} the callback to invoke upon emit
     */
    ;

    _proto.beforeMount = function beforeMount(cb) {}
    /**
     * onDestroy is triggered when the component is destroyed
     * @param {function} the callback to invoke upon emit
     */
    ;

    _proto.onDestroy = function onDestroy(cb) {};

    _createClass(Component, null, [{
      key: "type",
      get: function get() {
        return 'Component';
      }
    }]);

    return Component;
  }();

  /** @module ErrorReporter */
  /** @typedef {import('../services/errorreporterservice').default} ErrorReporterService */

  /**
   * ErrorReporter is used for reporting errors to the console and API
   *
   * @implements {ErrorReporterService}
   */

  var ErrorReporter =
  /*#__PURE__*/
  function () {
    function ErrorReporter(config, globalStorage) {
      var _this = this;

      /**
       * The apiKey to use for reporting
       * @type {string}
       */
      this.apiKey = config.apiKey;
      /**
       * The experienceKey to use when reporting
       * @type {string}
       */

      this.experienceKey = config.experienceKey;
      /**
       * The answers config version used for api requests
       * @type {string|number}
       */

      this.experienceVersion = config.experienceVersion || 'config1.0';
      /**
       * If true, print entire error objects to the console for inspection
       * @type {boolean}
       */

      this.printVerbose = config.printVerbose;
      /**
       * If true, report the error the server for logging and monitoring
       * @type {boolean}
       */

      this.sendToServer = config.sendToServer;
      /**
       * The global storage instance of the experience
       * @type {GlobalStorage}
       */

      if (this.sendToServer && !globalStorage) {
        throw new AnswersBasicError('Must include globalStorage to send errors to server', 'ErrorReporter');
      }

      this.globalStorage = globalStorage;
      /**
       * The environment of the Answers experience
       * @type {string}
       * @private
       */

      this.environment = config.environment; // Attach reporting listeners to window

      window.addEventListener('error', function (e) {
        return _this.report(e.error);
      });
      window.addEventListener('unhandledrejection', function (e) {
        return _this.report(e.error);
      });
    }
    /**
     * report pretty prints the error to the console, optionally
     * prints the entire error if `printVerbose` is true, and sends the
     * error to the server to be logged if `sendToServer` is true
     * @param {AnswersBaseError} err The error to be reported
     * @returns {AnswersBaseError} The reported error
     */


    var _proto = ErrorReporter.prototype;

    _proto.report = function report(err) {
      if (!(err instanceof AnswersBaseError) || err.reported) {
        return;
      }

      err.reported = true;
      this.printError(err);

      if (this.sendToServer) {
        var requestConfig = {
          endpoint: '/v2/accounts/me/answers/errors',
          apiKey: this.apiKey,
          version: 20190301,
          environment: this.environment,
          params: {
            'libVersion': LIB_VERSION,
            'experienceVersion': this.experienceVersion,
            'experienceKey': this.experienceKey,
            'error': err.toJson()
          }
        };
        var request = new ApiRequest(requestConfig, this.globalStorage); // TODO(amullings): We should probably change this endpoint to POST,
        // ideally using the beacon API. Stack traces will likely easily hit URL
        // length limits.

        request.get()["catch"](console.err);
      }

      return err;
    }
    /**
     * prints the given error to the browser console
     * @param {AnswersBaseError} err The error to be printed
     */
    ;

    _proto.printError = function printError(err) {
      if (this.printVerbose) {
        console.error("error: " + err.errorMessage + "\ncode: " + err.errorCode + "\nboundary: " + err.boundary + "\nstack: " + err.stack);
      } else {
        console.error(err.toString());
      }
    };

    return ErrorReporter;
  }();

  /** @typedef {import('../services/errorreporterservice').default} ErrorReporterService */

  /**
   * @implements {ErrorReporterService}
   */
  var ConsoleErrorReporter =
  /*#__PURE__*/
  function () {
    function ConsoleErrorReporter() {}

    var _proto = ConsoleErrorReporter.prototype;

    /** @inheritdoc */
    _proto.report = function report(err) {
      console.error(err.toString());
    };

    return ConsoleErrorReporter;
  }();

  /** @module PersistentStorage */

  var PersistentStorage =
  /*#__PURE__*/
  function () {
    function PersistentStorage(config) {
      var _this = this;

      if (config === void 0) {
        config = {};
      }

      /**
       * The current params model
       * @type {SearchParams}
       */
      this._params = new SearchParams(window.location.search.substring(1));
      /**
       * The current history edit timer, if any
       * @type {number}
       */

      this._historyTimer = null;
      /**
       * The list of listeners to every storage update
       * @type {function[]}
       */

      this._updateListener = config.updateListener || function () {};
      /**
       * The list of listeners to storage resets
       * @type {function[]}
       */


      this._resetListener = config.resetListener || function () {};

      window.onpopstate = function () {
        _this._params = new SearchParams(window.location.search.substring(1));

        _this._callListener(_this._updateListener);

        _this._callListener(_this._resetListener);
      };
    }
    /**
     * Insert the given key/value pair into storage
     * @param {string} key The key to insert the data in
     * @param {*} data The data to insert
     * @param {boolean} replace history instead of pushing new state
     */


    var _proto = PersistentStorage.prototype;

    _proto.set = function set(key, data, replaceHistory) {
      if (replaceHistory === void 0) {
        replaceHistory = false;
      }

      if (typeof key !== 'string') {
        throw new AnswersStorageError('Storage data key must be a string', key, data);
      }

      var newData = data;

      if (typeof data !== 'string') {
        newData = JSON.stringify(data);
      }

      this._params.set(key, newData);

      this._updateHistory(replaceHistory);
    }
    /**
     * Delete the given key from storage
     * @param {string} key The key to delete
     * @param {boolean} replace history instead of pushing new state
     */
    ;

    _proto["delete"] = function _delete(key, replaceHistory) {
      if (replaceHistory === void 0) {
        replaceHistory = false;
      }

      this._params["delete"](key);

      this._updateHistory(replaceHistory);
    };

    _proto._updateHistory = function _updateHistory(replaceHistory) {
      var _this2 = this;

      if (replaceHistory === void 0) {
        replaceHistory = false;
      }

      if (this._historyTimer) {
        clearTimeout(this._historyTimer);
      } // batch update calls across components to avoid updating the url too much


      this._historyTimer = setTimeout(function () {
        _this2._historyTimer = null;

        if (replaceHistory) {
          window.history.replaceState(null, null, "?" + _this2._params.toString());
        } else {
          window.history.pushState(null, null, "?" + _this2._params.toString());
        }

        _this2._callListener(_this2._updateListener);
      });
    }
    /**
     * Invoke the given list of callbacks with the current storage data
     * @param {function[]} listeners The callbacks to invoke
     * @private
     */
    ;

    _proto._callListener = function _callListener(listener) {
      listener(this.getAll(), this._params.toString());
    }
    /**
     * Get all the key/value pairs in storage
     */
    ;

    _proto.getAll = function getAll() {
      var allParams = {};

      for (var _iterator = this._params.entries(), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
        var _ref;

        if (_isArray) {
          if (_i >= _iterator.length) break;
          _ref = _iterator[_i++];
        } else {
          _i = _iterator.next();
          if (_i.done) break;
          _ref = _i.value;
        }

        var _ref2 = _ref,
            key = _ref2[0],
            val = _ref2[1];
        allParams[key] = val;
      }

      return allParams;
    };

    return PersistentStorage;
  }();

  /** @module SearchConfig */

  var SearchConfig =
  /*#__PURE__*/
  function () {
    function SearchConfig(config) {
      if (config === void 0) {
        config = {};
      }

      /**
       * The max results per search.
       * Also defines the number of results per page, if pagination is enabled
       * @type {number}
       */
      this.limit = config.limit || 20;
      /**
       * The vertical key to use for all searches
       * @type {string}
       */

      this.verticalKey = config.verticalKey || null;
      /**
       * A default search to use on initialization for vertical searchers, when the user has't provided a query
       * @type {string}
       */

      this.defaultInitialSearch = config.defaultInitialSearch;
      this.validate();
      Object.freeze(this);
    }

    var _proto = SearchConfig.prototype;

    _proto.validate = function validate() {
      if (typeof this.limit !== 'number' || this.limit < 1 || this.limit > 50) {
        throw new AnswersConfigError('Search Limit must be between 1 and 50', 'SearchConfig');
      }
    };

    return SearchConfig;
  }();

  /** @module AutoCompleteData */

  var AutoCompleteData =
  /*#__PURE__*/
  function () {
    function AutoCompleteData(data) {
      if (data === void 0) {
        data = {};
      }

      this.sections = data.sections || [];
      this.queryId = data.queryId || '';
      this.inputIntents = data.inputIntents || [];
      Object.freeze(this);
    }

    AutoCompleteData.from = function from(response) {
      var sections;

      if (response.sections) {
        sections = response.sections.map(function (s) {
          return {
            label: s.label,
            results: s.results.map(function (r) {
              return new AutoCompleteResult(r);
            })
          };
        });
      } else {
        sections = [{
          results: response.results.map(function (r) {
            return new AutoCompleteResult(r);
          })
        }];
      }

      var inputIntents = response.input ? response.input.queryIntents : [];
      return new AutoCompleteData({
        sections: sections,
        queryId: response.queryId,
        inputIntents: inputIntents
      });
    };

    return AutoCompleteData;
  }();
  var AutoCompleteResult = function AutoCompleteResult(data) {
    if (data === void 0) {
      data = {};
    }

    this.filter = data.filter || {};
    this.highlightedValue = new HighlightedValue(data).getInverted();
    this.key = data.key || '';
    this.matchedSubstrings = data.matchedSubstrings || [];
    this.value = data.value || '';
    this.shortValue = data.shortValue || this.value;
    this.intents = data.queryIntents || [];
    Object.freeze(this);
  };

  /** @module AutoCompleteDataTransformer */
  /**
   * A Data Transformer that takes the response object from a AutoComplete request
   * And transforms in to a front-end oriented data structure that our
   * component library and core storage understand.
   *
   * TODO(billy) Create our own front-end data models
   */

  var AutoCompleteDataTransformer =
  /*#__PURE__*/
  function () {
    function AutoCompleteDataTransformer() {}

    AutoCompleteDataTransformer.clean = function clean(moduleId, data) {
      var _ref;

      if (data.sections && data.sections.length === 0) {
        delete data.sections;
      }

      if (data.sections && data.sections.length === 1 && data.sections[0].results.length === 0) {
        delete data.sections;
      }

      return _ref = {}, _ref[moduleId] = data, _ref;
    };

    AutoCompleteDataTransformer.universal = function universal(response) {
      return AutoCompleteData.from(response);
    };

    AutoCompleteDataTransformer.filter = function filter(response) {
      return AutoCompleteData.from(response);
    };

    AutoCompleteDataTransformer.vertical = function vertical(response) {
      return AutoCompleteData.from(response);
    };

    return AutoCompleteDataTransformer;
  }();

  /** @module AutoCompleteApi */
  /** @typedef {import('./autocompleteservice').default} AutoCompleteService */

  /**
   * AutoCompleteApi exposes an interface for network related matters
   * for all the autocomplete endpoints.
   *
   * @implements {AutoCompleteService}
   */

  var AutoCompleteApi =
  /*#__PURE__*/
  function () {
    function AutoCompleteApi(config, globalStorage) {
      if (config === void 0) {
        config = {};
      }

      /**
       * The API Key to use for the request
       * @type {string}
       * @private
       */
      if (!config.apiKey) {
        throw new AnswersBasicError('Api Key is required', 'AutoComplete');
      }

      this._apiKey = config.apiKey;
      /**
       * The Answers Key to use for the request
       * @type {string}
       * @private
       */

      if (!config.experienceKey) {
        throw new AnswersBasicError('Answers Key is required', 'AutoComplete');
      }

      this._experienceKey = config.experienceKey;
      /**
       * The version of the API to make a request to
       * @type {string}
       * @private
       */

      this._version = config.version || 20190101 || 20190301;
      /**
       * The answers config version to use for all requests
       * @type {string}
       * @private
       */

      this._experienceVersion = config.experienceVersion;
      /**
       * The locale to use for the request
       * @type {string}
       * @private
       */

      if (!config.locale) {
        throw new AnswersBasicError('Locale is required', 'AutoComplete');
      }

      this._locale = config.locale;
      /**
       * The global storage instance of the experience
       * @type {GlobalStorage}
       * @private
       */

      if (!globalStorage) {
        throw new AnswersBasicError('Global storage is required', 'AutoComplete');
      }

      this._globalStorage = globalStorage;
      /**
       * The environment of the Answers experience
       * @type {string}
       * @private
       */

      this._environment = config.environment;
    }
    /** @inheritdoc */


    var _proto = AutoCompleteApi.prototype;

    _proto.queryFilter = function queryFilter(input, config) {
      var requestConfig = {
        endpoint: '/v2/accounts/me/answers/filtersearch',
        apiKey: this._apiKey,
        version: this._version,
        environment: this._environment,
        params: {
          'input': input,
          'experienceKey': this._experienceKey,
          'version': this._experienceVersion,
          'verticalKey': config.verticalKey,
          'locale': this._locale,
          'search_parameters': JSON.stringify(config.searchParameters)
        }
      };
      var request = new ApiRequest(requestConfig, this._globalStorage);
      return request.get().then(function (response) {
        return response.json();
      }).then(function (response) {
        return AutoCompleteDataTransformer.filter(response.response);
      })["catch"](function (error) {
        throw new AnswersEndpointError('Filter search request failed', 'AutoComplete', error);
      });
    }
    /** @inheritdoc */
    ;

    _proto.queryVertical = function queryVertical(input, verticalKey) {
      var requestConfig = {
        endpoint: '/v2/accounts/me/answers/vertical/autocomplete',
        apiKey: this._apiKey,
        version: this._version,
        environment: this._environment,
        params: {
          'input': input,
          'experienceKey': this._experienceKey,
          'version': this._experienceVersion,
          'verticalKey': verticalKey,
          'locale': this._locale
        }
      };
      var request = new ApiRequest(requestConfig, this._globalStorage);
      return request.get().then(function (response) {
        return response.json();
      }).then(function (response) {
        return AutoCompleteDataTransformer.vertical(response.response);
      })["catch"](function (error) {
        throw new AnswersEndpointError('Vertical search request failed', 'AutoComplete', error);
      });
    }
    /** @inheritdoc */
    ;

    _proto.queryUniversal = function queryUniversal(queryString) {
      var requestConfig = {
        endpoint: '/v2/accounts/me/answers/autocomplete',
        apiKey: this._apiKey,
        version: this._version,
        environment: this._environment,
        params: {
          'input': queryString,
          'experienceKey': this._experienceKey,
          'version': this._experienceVersion,
          'locale': this._locale
        }
      };
      var request = new ApiRequest(requestConfig, this._globalStorage);
      return request.get(queryString).then(function (response) {
        return response.json();
      }).then(function (response) {
        return AutoCompleteDataTransformer.universal(response.response);
      })["catch"](function (error) {
        throw new AnswersEndpointError('Universal search request failed', 'AutoComplete', error);
      });
    };

    return AutoCompleteApi;
  }();

  /** @typedef {import('../services/autocompleteservice').default} AutoCompleteService */

  var universalOptions = ['what is yext', 'who is the ceo of yext'];
  var verticalOptions = ['near me', 'in new york', 'available now'];
  /**
   * MockAutoCompleteService serves autocomplete queries with mock data
   *
   * @implements {AutoCompleteService}
   */

  var MockAutoCompleteService =
  /*#__PURE__*/
  function () {
    function MockAutoCompleteService() {}

    var _proto = MockAutoCompleteService.prototype;

    /** @inheritdoc */
    _proto.queryFilter = function queryFilter(input, config) {
      // TODO(amullings): Simulate filter search, with sections
      return emptyResults();
    }
    /** @inheritdoc */
    ;

    _proto.queryVertical = function queryVertical(input, verticalKey) {
      return filterOptions(input, verticalOptions.map(function (opt) {
        return verticalKey + " " + opt;
      }).concat(universalOptions));
    }
    /** @inheritdoc */
    ;

    _proto.queryUniversal = function queryUniversal(input) {
      return filterOptions(input, universalOptions);
    };

    return MockAutoCompleteService;
  }();

  function filterOptions(input, options) {
    if (input.length === 0) {
      return emptyResults();
    }

    var lowercase = input.toLowerCase();
    var results = options.filter(function (opt) {
      return opt.includes(lowercase);
    }).map(function (opt) {
      return new AutoCompleteResult({
        value: opt,
        matchedSubstrings: [{
          offset: opt.indexOf(lowercase),
          length: lowercase.length
        }]
      });
    });
    return Promise.resolve(new AutoCompleteData({
      sections: [{
        results: results
      }],
      queryId: randomString()
    }));
  }
  /**
   * @returns {Promise<AutoCompleteData>}
   */


  function emptyResults() {
    return Promise.resolve(new AutoCompleteData({
      sections: [{}],
      queryId: randomString()
    }));
  }
  /**
   * @returns {string}
   */


  function randomString() {
    return Math.random().toString(36).substring(2);
  }

  /** @module QuestionAnswerApi */
  /** @typedef {import('./questionanswerservice').default} QuestionAnswerService */

  /**
   * QuestionAnswerApi submits questions via the Q&A REST API
   *
   * @implements {QuestionAnswerService}
   */

  var QuestionAnswerApi =
  /*#__PURE__*/
  function () {
    function QuestionAnswerApi(config, globalStorage) {
      if (config === void 0) {
        config = {};
      }

      /**
       * The API Key to use for the request
       * @type {string}
       * @private
       */
      if (!config.apiKey) {
        throw new AnswersBasicError('Api Key is required', 'QuestionAnswerApi');
      }

      this._apiKey = config.apiKey;
      /**
       * The global storage instance of the experience
       * @type {GlobalStorage}
       * @private
       */

      if (!globalStorage) {
        throw new AnswersBasicError('Global storage is required', 'QuestionAnswerApi');
      }

      this._globalStorage = globalStorage;
      /**
       * The environment of the Answers experience
       * @type {string}
       * @private
       */

      this._environment = config.environment || PRODUCTION;
    }
    /** @inheritdoc */


    var _proto = QuestionAnswerApi.prototype;

    _proto.submitQuestion = function submitQuestion(question) {
      var requestConfig = {
        baseUrl: getKnowledgeApiUrl(this._environment),
        endpoint: '/v2/accounts/me/createQuestion',
        apiKey: this._apiKey,
        params: {
          'entityId': question.entityId,
          'site': question.site,
          'name': question.name,
          'email': question.email,
          'questionText': question.questionText,
          'questionDescription': question.questionDescription,
          'questionLanguage': question.questionLanguage
        }
      };
      var request = new ApiRequest(requestConfig, this._globalStorage);
      return request.post({
        mode: 'cors',
        headers: {
          'Content-Type': 'application/json'
        }
      }).then(function (response) {
        return response.json();
      })["catch"](function (error) {
        throw new AnswersEndpointError('Question submit failed', 'QuestionAnswerApi', error);
      });
    };

    return QuestionAnswerApi;
  }();

  /** @module MockQuestionAnswerService */

  /** @typedef {import('../services/questionanswerservice').default} QuestionAnswerService */

  /**
   * @implements {QuestionAnswerService}
   */
  var MockQuestionAnswerService =
  /*#__PURE__*/
  function () {
    function MockQuestionAnswerService() {}

    var _proto = MockQuestionAnswerService.prototype;

    /** @inheritdoc */
    _proto.submitQuestion = function submitQuestion(question) {
      // TODO(amullings): Make actual response object once we're using it for
      // something
      return Promise.resolve({});
    };

    return MockQuestionAnswerService;
  }();

  /* global fetch */

  /** @typedef {import('../models/section').default} Section */

  /** @typedef {import('../services/searchservice').default} SearchService */

  /**
   * @typedef {Object} ResultData
   * @property {Object} data
   * @property {string } htmlTitle
   */

  /**
   * @callback ResultsModifier
   * @param {ResultData[]} results
   * @returns {ResultData[]}
   */

  /**
   * @callback MockDataConsumer
   * @param {Section[]} sections
   * @returns {Promise<Object>}
   */
  var ARBITRARY_BUSINESS_ID = 919871;
  /**
   * @implements {SearchService}
   */

  var MockSearchService =
  /*#__PURE__*/
  function () {
    function MockSearchService() {
      /**
       * @type {Promise<string>}
       * @private
       */
      this._getMockDataJson = fetch('https://assets.sitescdn.net/answers/testdata/search/mockdata_v1.json').then(function (resp) {
        return resp.text();
      })["catch"](console.error);
    }
    /** @inheritdoc */


    var _proto = MockSearchService.prototype;

    _proto.verticalSearch = function verticalSearch(verticalKey, _ref) {
      var input = _ref.input,
          filter = _ref.filter,
          facetFilter = _ref.facetFilter,
          limit = _ref.limit,
          offset = _ref.offset,
          id = _ref.id,
          geolocation = _ref.geolocation,
          isDynamicFiltersEnabled = _ref.isDynamicFiltersEnabled,
          skipSpellCheck = _ref.skipSpellCheck,
          queryTrigger = _ref.queryTrigger;
      return this.useMockData(function (sections) {
        if (input === '') {
          return delayedResponse(constructVerticalResponse({
            results: [],
            appliedQueryFilters: []
          }));
        } // Either find a section with matching ID, or pick one at random


        var section = sections.find(function (verticalModule) {
          return verticalKey === verticalModule['verticalConfigId'];
        });

        if (section == null) {
          section = sections[Math.floor(Math.random() * sections.length)];
        }

        modifyResults(section, getResultsFilterer(input));

        if (offset != null && limit != null) {
          modifyResults(section, function limit(results) {
            return results.slice(offset, offset + limit);
          });
        }

        var resp = constructVerticalResponse(section);
        return delayedResponse(resp);
      });
    }
    /** @inheritdoc */
    ;

    _proto.universalSearch = function universalSearch(queryString, params) {
      return this.useMockData(function (sections) {
        if (queryString === '') {
          return delayedResponse(constructUniversalResponse([]));
        }

        sections.forEach(function (section) {
          modifyResults(section, getResultsFilterer(queryString));
        });
        sections = sections.filter(function (section) {
          return section.results.length > 0;
        });
        var resp = constructUniversalResponse(sections);
        return delayedResponse(resp);
      });
    }
    /**
     * @param {MockDataConsumer} consumer
     * @returns {Promise<Object>}
     * @private
     */
    ;

    _proto.useMockData = function useMockData(consumer) {
      return this._getMockDataJson.then(JSON.parse).then(consumer);
    };

    return MockSearchService;
  }();

  function getResultsFilterer(queryString) {
    return function (results) {
      return results.filter(function (result) {
        if (result.htmlTitle && result.htmlTitle.toLowerCase().includes(queryString)) {
          return true;
        }

        for (var prop in result.data) {
          var val = result.data[prop];

          if (typeof val === 'string' && val.toLowerCase().includes(queryString)) {
            return true;
          }
        }

        return false;
      });
    };
  }
  /**
   * @param {Section} section
   * @param {ResultsModifier} modifyFn
   */


  function modifyResults(section, modifyFn) {
    section.results = modifyFn(section.results);
  }
  /**
   * @param {Section[]} sections A list of mock section data
   * @returns {Object} A mock AnswersApi response
   */


  function constructUniversalResponse(sections) {
    // TODO(amullings): spellcheck, geo, filters
    // TODO(amullings): Fake encodedState once the SDK uses it
    sections = sections.map(fillSectionFields);
    return {
      meta: {
        uuid: uuidV4(),
        errors: []
      },
      response: {
        businessId: ARBITRARY_BUSINESS_ID,
        modules: sections,
        failedVerticals: [],
        queryId: uuidV4(),
        searchIntents: []
      }
    };
  }
  /**
   * @param {Section} section A mock section data
   * @returns {Object} A mock AnswersApi response
   */


  function constructVerticalResponse(section) {
    // TODO(amullings): spellcheck, geo, filters
    // TODO(amullings): Fake encodedState once the SDK uses it
    section = fillSectionFields(section);
    return {
      meta: {
        uuid: uuidV4(),
        errors: []
      },
      response: Object.assign(section, {
        businessId: ARBITRARY_BUSINESS_ID,
        queryId: uuidV4(),
        searchIntents: []
      })
    };
  }
  /**
   * @param {Section}
   * @returns {Section}
   */


  function fillSectionFields(section) {
    return {
      verticalConfigId: section.verticalConfigId,
      resultsCount: section.results.length,
      encodedState: '',
      results: section.results,
      appliedQueryFilters: section.appliedQueryFilters,
      queryDurationMillis: randomInt(50, 1000),
      facets: section.facets,
      source: section.source
    };
  }
  /**
   * @param {Object} resp
   * @returns {Promise<Object>}
   */


  function delayedResponse(resp) {
    return new Promise(function (resolve) {
      setTimeout(function () {
        resolve(resp);
      }, randomInt(250, 1000));
    });
  }
  /**
   * Code-golf-y but legit basic UUID v4 implementation. Not cryptographically secure.
   * From https://gist.github.com/jed/982883
   * @returns {string} A v4-compliant UUID
   */


  function uuidV4() {
    return function b(a) {
      return a ? (a ^ Math.random() * 16 >> a / 4).toString(16) : ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, b);
    }();
  }
  /**
   * @param {number} min inclusive
   * @param {number} max exclusive
   * @returns {number} A random integer in the specified range
   */


  function randomInt(min, max) {
    return Math.floor(Math.random() * (max - min) + min);
  }

  /**
   * The debounce duration for resize events
   * @type {number}
   */

  var RESIZE_DEBOUNCE = 100;
  /**
   * The breakpoint for mobile
   * @type {number}
   */

  var MOBILE_BREAKPOINT = 767;
  /**
   * Enum options for mobile overflow beahvior
   * @type {Object.<string, string>}
   */

  var MOBILE_OVERFLOW_BEHAVIOR_OPTION = {
    COLLAPSE: 'COLLAPSE',
    INNERSCROLL: 'INNERSCROLL'
  };
  /**
   * The Tab is a model that is used to power the Navigation tabs in the view.
   * It's initialized through the configuration provided to the component.
   */

  var Tab =
  /*#__PURE__*/
  function () {
    function Tab(config) {
      /**
       * The name of the tab that is exposed for the link
       * @type {string}
       */
      this.label = config.label;

      if (typeof this.label !== 'string') {
        throw new AnswersComponentError('label is a required configuration option for tab.', 'NavigationComponent');
      }
      /**
       * The complete URL, including the params
       * @type {string}
       */


      this.url = config.url;

      if (typeof this.url !== 'string') {
        throw new AnswersComponentError('url is a required configuration option for tab.', 'NavigationComponent');
      }
      /**
       * The serverside vertical config id that this is referenced to.
       * By providing this, enables dynamic sorting based on results.
       * @type {string}
       */


      this.configId = config.configId || null;
      /**
       * The base URL used for constructing the URL with params
       * @type {string}
       */

      this.baseUrl = config.url;
      /**
       * Determines whether to show this tab first in the order
       * @type {boolean}
       */

      this.isFirst = config.isFirst || false;
      /**
       * Determines whether or not to apply a special class to the
       * markup to determine if it's an active tab
       * @type {boolean}
       */

      this.isActive = config.isActive || false;
    }
    /**
     * from will construct a map of configId to {Tab} from
     * a configuration file
     * @param {object} tabsConfig the configuration to use
     */


    Tab.from = function from(tabsConfig) {
      var tabs = {}; // Parse the options and build out our tabs and

      for (var i = 0; i < tabsConfig.length; i++) {
        var tab = tabsConfig[i]; // For tabs without config ids, map their URL to the configID
        // to avoid duplication of renders

        if (tab.configId === null && tabs[tab.configId] === undefined) {
          tab.configId = tab.url;
        }

        tabs[tab.configId] = new Tab(tab);
      }

      return tabs;
    };

    return Tab;
  }();
  /**
   * NavigationComponent exposes an interface for building a dynamic
   * navigation that is powered by universal search updates.
   * @extends Component
   */

  var NavigationComponent =
  /*#__PURE__*/
  function (_Component) {
    _inheritsLoose(NavigationComponent, _Component);

    function NavigationComponent(config, systemConfig) {
      var _this;

      if (config === void 0) {
        config = {};
      }

      if (systemConfig === void 0) {
        systemConfig = {};
      }

      _this = _Component.call(this, config, systemConfig) || this;
      /**
       * The label to show on the dropdown menu button when overflow
       * @type {string}
       */

      _this.overflowLabel = config.overflowLabel || 'More';
      /**
       * The optional icon to show on the dropdown menu button when overflow
       * @type {string}
       */

      _this.overflowIcon = config.overflowIcon || 'kabob';
      /**
       * The data storage key
       * @type {string}
       */

      _this.moduleId = StorageKeys.NAVIGATION;
      /**
       * Tabs config from global navigation config
       * @type {Array.<object>}
       * @private
       */

      _this._tabsConfig = _this.core.globalStorage.getState(StorageKeys.NAVIGATION_CONFIG).tabsConfig;
      /**
       * Unordered map of each tab, keyed by VS configId
       * @type {Object.<String, Object>}
       * @private
       */

      _this._tabs = Tab.from(_this._tabsConfig);
      /**
       * The order of the tabs, parsed from configuration or URL.
       * This gets updated based on the server results
       * @type {Array.<String>} The list of VS configIds
       * @private
       */

      _this._tabOrder = _this.getDefaultTabOrder(_this._tabsConfig, _this.getUrlParams());
      /**
       * Breakpoints at which navigation items move to the "more" dropdown
       * @type {number[]}
       * @private
       */

      _this._navBreakpoints = [];
      /**
       *  The mobile overflow behavior config
       *  @type {string}
       */

      _this._mobileOverflowBehavior = config.mobileOverflowBehavior || MOBILE_OVERFLOW_BEHAVIOR_OPTION.COLLAPSE;
      /**
       *  The ARIA label
       *  @type {string}
       */

      _this._ariaLabel = config.ariaLabel || 'Search Page Navigation';
      _this.checkOutsideClick = _this.checkOutsideClick.bind(_assertThisInitialized(_this));
      _this.checkMobileOverflowBehavior = _this.checkMobileOverflowBehavior.bind(_assertThisInitialized(_this));
      return _this;
    }

    /**
     * The template to render
     * @returns {string}
     * @override
     */
    NavigationComponent.defaultTemplateName = function defaultTemplateName(config) {
      return 'navigation/navigation';
    };

    var _proto = NavigationComponent.prototype;

    _proto.onCreate = function onCreate() {
      // TODO: Re-rendering and re-mounting the component every tim e the window changes size
      // is not great.
      DOM.on(window, 'resize', this.checkMobileOverflowBehavior);
    };

    _proto.onDestroy = function onDestroy() {
      DOM.off(window, 'resize', this.checkMobileOverflowBehavior);
    };

    _proto.onMount = function onMount() {
      if (this.shouldCollapse()) {
        this._navBreakpoints = [];
        this.bindOverflowHandlers();
        this.refitNav();
        DOM.on(DOM.query(this._container, '.yxt-Nav-more'), 'click', this.toggleMoreDropdown.bind(this));
      }
    };

    _proto.onUnMount = function onUnMount() {
      this.unbindOverflowHandlers();
    };

    _proto.bindOverflowHandlers = function bindOverflowHandlers() {
      DOM.on(window, 'click', this.checkOutsideClick);
    };

    _proto.unbindOverflowHandlers = function unbindOverflowHandlers() {
      DOM.off(window, 'click', this.checkOutsideClick);
    };

    _proto.refitNav = function refitNav() {
      var container = DOM.query(this._container, '.yxt-Nav-container');
      var moreButton = DOM.query(this._container, '.yxt-Nav-more');
      var mainLinks = DOM.query(this._container, '.yxt-Nav-expanded');
      var collapsedLinks = DOM.query(this._container, '.yxt-Nav-modal');
      var navWidth = moreButton.classList.contains('yxt-Nav-item--more') ? container.offsetWidth : container.offsetWidth - moreButton.offsetWidth;
      var numBreakpoints = this._navBreakpoints.length; // sum child widths instead of using parent's width to avoid
      // browser inconsistencies

      var mainLinksWidth = 0;

      for (var _iterator = mainLinks.children, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
        var _ref;

        if (_isArray) {
          if (_i >= _iterator.length) break;
          _ref = _iterator[_i++];
        } else {
          _i = _iterator.next();
          if (_i.done) break;
          _ref = _i.value;
        }

        var el = _ref;
        mainLinksWidth += el.offsetWidth;
      }

      if (mainLinksWidth > navWidth) {
        this._navBreakpoints.push(mainLinksWidth);

        var lastLink = mainLinks.children.item(mainLinks.children.length - 1);

        if (lastLink === null) {
          return;
        }

        collapsedLinks.prepend(lastLink);

        if (moreButton.classList.contains('yxt-Nav-item--more')) {
          moreButton.classList.remove('yxt-Nav-item--more');
        }
      } else {
        if (numBreakpoints && navWidth > this._navBreakpoints[numBreakpoints - 1]) {
          var firstLink = collapsedLinks.children.item(0);

          if (firstLink === null) {
            return;
          }

          mainLinks.append(firstLink);

          this._navBreakpoints.pop();

          numBreakpoints--;
        }

        if (collapsedLinks.children.length === 0) {
          moreButton.classList.add('yxt-Nav-item--more');
        }
      }

      this.closeMoreDropdown();

      if (mainLinksWidth > navWidth || numBreakpoints > 0 && navWidth > this._navBreakpoints[numBreakpoints - 1]) {
        this.refitNav();
      }
    };

    _proto.closeMoreDropdown = function closeMoreDropdown() {
      var collapsed = DOM.query(this._container, '.yxt-Nav-modal');
      collapsed.classList.remove('is-active');
      var moreButton = DOM.query(this._container, '.yxt-Nav-more');
      moreButton.setAttribute('aria-expanded', false);
    };

    _proto.openMoreDropdown = function openMoreDropdown() {
      var collapsed = DOM.query(this._container, '.yxt-Nav-modal');
      collapsed.classList.add('is-active');
      var moreButton = DOM.query(this._container, '.yxt-Nav-more');
      moreButton.setAttribute('aria-expanded', true);
    };

    _proto.toggleMoreDropdown = function toggleMoreDropdown() {
      var collapsed = DOM.query(this._container, '.yxt-Nav-modal');
      collapsed.classList.toggle('is-active');
      var moreButton = DOM.query(this._container, '.yxt-Nav-more');
      moreButton.setAttribute('aria-expanded', collapsed.classList.contains('is-active'));
    };

    _proto.checkOutsideClick = function checkOutsideClick(e) {
      if (e.target.closest('.yxt-Nav-container')) {
        return;
      }

      this.closeMoreDropdown();
    };

    _proto.checkMobileOverflowBehavior = function checkMobileOverflowBehavior() {
      if (this._checkMobileOverflowBehaviorTimer) {
        clearTimeout(this._checkMobileOverflowBehaviorTimer);
      }

      this._checkMobileOverflowBehaviorTimer = setTimeout(this.setState.bind(this), RESIZE_DEBOUNCE);
    }
    /**
     * Since the server data only provides a list of
     * VS configIds, we need to compute and transform
     * the data into the proper format for rendering.
     *
     * @override
     */
    ;

    _proto.setState = function setState(data) {
      if (data === void 0) {
        data = {};
      }

      if (data.tabOrder !== undefined) {
        this._tabOrder = this.mergeTabOrder(data.tabOrder, this._tabOrder);
      } // Since the tab ordering can change based on the server data
      // we need to update each tabs URL to include the order as part of their params.
      // This helps with persisting state across verticals.


      var tabs = [];

      for (var i = 0; i < this._tabOrder.length; i++) {
        var tab = this._tabs[this._tabOrder[i]];

        if (tab !== undefined) {
          tab.url = this.generateTabUrl(tab.baseUrl, this.getUrlParams());
          tabs.push(tab);
        }
      }

      return _Component.prototype.setState.call(this, {
        tabs: tabs,
        overflowLabel: this.overflowLabel,
        overflowIcon: this.overflowIcon,
        showCollapse: this.shouldCollapse(),
        ariaLabel: this._ariaLabel
      });
    };

    _proto.getUrlParams = function getUrlParams() {
      return new SearchParams(window.location.search.substring(1));
    };

    _proto.shouldCollapse = function shouldCollapse() {
      switch (this._mobileOverflowBehavior) {
        case MOBILE_OVERFLOW_BEHAVIOR_OPTION.COLLAPSE:
          return true;

        case MOBILE_OVERFLOW_BEHAVIOR_OPTION.INNERSCROLL:
          var container = DOM.query(this._container, '.yxt-Nav-container') || this._container;

          var navWidth = container.offsetWidth;
          return navWidth > MOBILE_BREAKPOINT;
      }
    }
    /**
     * getDefaultTabOrder will compute the initial tab ordering based
     * on a combination of the configuration provided directly to the component
     * and the url params.
     * @param {Object[]} tabsConfig
     * @param {SearchParams}
     */
    ;

    _proto.getDefaultTabOrder = function getDefaultTabOrder(tabsConfig, urlParams) {
      var tabOrder = []; // Use the ordering from the URL as the primary configuration
      // And then merge it with the local configuration, if provided.

      if (urlParams && urlParams.has('tabOrder')) {
        tabOrder = urlParams.get('tabOrder').split(',');
      }

      for (var i = 0; i < tabsConfig.length; i++) {
        var tab = tabsConfig[i]; // Some tabs don't have configId, so we map it from URL

        if (tab.configId === undefined) {
          tab.configId = tab.url;
        } // Avoid duplicates if config was provided from URL


        if (tabOrder.includes(tab.configId)) {
          continue;
        } // isFirst should always be the first element in the list


        if (tab.isFirst) {
          tabOrder.unshift(tab.configId);
        } else {
          tabOrder.push(tab.configId);
        }
      }

      return tabOrder;
    }
    /**
     * mergeTabOrder merges two arrays into one
     * by appending additional tabs to the end of the original array
     * @param {string[]} tabOrder Tab order provided by the server
     * @param {string[]} otherTabOrder Tab order provided by configuration
     * @return {string[]}
     */
    ;

    _proto.mergeTabOrder = function mergeTabOrder(tabOrder, otherTabOrder) {
      for (var i = 0; i < otherTabOrder.length; i++) {
        var tabConfig = otherTabOrder[i];

        if (tabOrder.includes(tabConfig)) {
          continue;
        } // isFirst should be an override to dynamic tab ordering.


        if (this._tabs[tabConfig] && this._tabs[tabConfig].isFirst) {
          tabOrder.unshift(tabConfig);
        } else {
          tabOrder.push(tabConfig);
        }
      }

      return tabOrder;
    };

    _proto.generateTabUrl = function generateTabUrl(baseUrl, params) {
      if (params === void 0) {
        params = new URLSearchParams();
      }

      // We want to persist the params from the existing URL to the new
      // URLS we create.
      params.set('tabOrder', this._tabOrder);
      return baseUrl + '?' + params.toString();
    };

    _createClass(NavigationComponent, null, [{
      key: "type",
      get: function get() {
        return 'Navigation';
      }
    }]);

    return NavigationComponent;
  }(Component);

  /**
   * SearchComponent exposes an interface in order to create
   * a UI Search experience for vertical and universal search.
   *
   * @extends Component
   */

  var SearchComponent =
  /*#__PURE__*/
  function (_Component) {
    _inheritsLoose(SearchComponent, _Component);

    function SearchComponent(config, systemConfig) {
      var _this;

      if (config === void 0) {
        config = {};
      }

      if (systemConfig === void 0) {
        systemConfig = {};
      }

      _this = _Component.call(this, config, systemConfig) || this;
      /**
       * The optional vertical key for vertical search configuration
       * If not provided, auto-complete and search will be based on universal
       * @type {string}
       */

      _this._verticalKey = config.verticalKey || null;
      /**
       * Query submission is based on a form as context.
       * Optionally provided, otherwise defaults to native form node within container
       * @type {string} CSS selector
       */

      _this._formEl = config.formSelector || 'form';
      /**
       * The input element used for searching and wires up the keyboard interaction
       * Optionally provided.
       * @type {string} CSS selector
       */

      _this._inputEl = config.inputEl || '.js-yext-query';
      /**
       * The title used, provided to the template as a data point
       * Optionally provided. If not provided, no title will be included.
       * @type {string}
       */

      _this.title = config.title;
      /**
       * The label text is used for labeling the input box, also provided to template.
       * Optionally provided
       * @type {string}
       */

      _this.labelText = config.labelText || 'Conduct a search';
      /**
       * The submit text is used for labeling the submit button, also provided to the template.
       * @type {string}
       */

      _this.submitText = config.submitText || 'Submit';
      /**
       * The clear text is used for labeling the clear button, also provided to the template.
       * @type {string}
       */

      _this.clearText = config.clearText || 'Clear';
      /**
       * The submit icon is an icon for the submit button, if provided it will be displayed and the
       * submit text will be used for screen readers.
       * @type {string|null}
       */

      _this.submitIcon = config.submitIcon || null;
      /**
       * The query text to show as the first item for auto complete.
       * Optionally provided
       * @type {string}
       */

      _this.promptHeader = config.promptHeader || null;
      /**
       * Auto focuses the input box if set to true.
       * Optionally provided, defaults to false.
       * @type {boolean}
       */

      _this.autoFocus = config.autoFocus === true;
      /**
       * If true, show an "x" that allows the user to clear the current
       * query
       * @type {boolean}
       */

      _this.clearButton = config.clearButton === undefined ? true : config.clearButton;
      /**
       * When autofocusing on load, optionally open the autocomplete
       * (preset prompts)
       * @type {boolean}
       */

      _this.autocompleteOnLoad = config.autocompleteOnLoad || false;
      /**
       * submitURL will force the search query submission to get
       * redirected to the URL provided.
       * Optional, defaults to null.
       *
       * If no redirectUrl provided, we keep the page as a single page app.
       *
       * @type {boolean}
       */

      _this.redirectUrl = config.redirectUrl || null;
      /**
       * true if there is another search bar present on the page.
       * Twins only update the query, and do not search
       */

      _this._isTwin = config.isTwin;
      /**
       * The query string to use for the input box, provided to template for rendering.
       * Optionally provided
       * @type {string|null}
       */

      _this.query = config.query || _this.core.globalStorage.getState(StorageKeys.QUERY);

      _this.core.globalStorage.on('update', StorageKeys.QUERY, function (q) {
        _this.query = q;

        _this.setState();

        _this.debouncedSearch(q);
      });
      /**
       * The minimum time allowed in milliseconds between searches to prevent
       * many duplicate searches back-to-back
       * @type {number}
       * @private
       */


      _this._searchCooldown = config.searchCooldown || 300;
      /**
       * When true and "near me" intent is expressed, prompt the user for their geolocation
       * @type {boolean}
       * @private
       */

      _this._promptForLocation = config.promptForLocation === undefined ? true : Boolean(config.promptForLocation);
      /**
       * Controls showing and hiding the search clear button
       */

      _this._showClearButton = _this.clearButton && _this.query;
      /**
       * For vertical search bars, whether or not to allow empty searches.
       * @type {boolean}
       * @private
       */

      _this._allowEmptySearch = !!config.allowEmptySearch;
      /**
       * The name of the child AutoComplete component.
       * @type {string}
       * @private
       */

      _this._autoCompleteName = _this.name + ".autocomplete";
      return _this;
    }

    /**
     * The template to render
     * @returns {string}
     * @override
     */
    SearchComponent.defaultTemplateName = function defaultTemplateName() {
      return 'search/search';
    };

    var _proto = SearchComponent.prototype;

    _proto.onCreate = function onCreate() {
      if (this.query != null && !this.redirectUrl) {
        this.core.setQuery(this.query);
      }
    };

    _proto.onMount = function onMount() {
      // NOTE(amullings): If autocompleteOnLoad is false, we focus the input
      // element before loading the autocomplete component so that its focus
      // handler won't be triggered
      if (this.autoFocus === true && !this.query && !this.autocompleteOnLoad) {
        this.focusInputElement();
      } // Wire up our search handling and auto complete


      this.initSearch(this._formEl);
      this.initAutoComplete(this._inputEl);

      if (this.clearButton) {
        this.initClearButton();
      }

      if (this.autoFocus === true && !this.query && this.autocompleteOnLoad) {
        this.focusInputElement();
      }
    };

    _proto.remove = function remove() {
      this._autocomplete.remove();

      _Component.prototype.remove.call(this);
    };

    _proto.initClearButton = function initClearButton() {
      var _this2 = this;

      var button = DOM.query(this._container, '.js-yxt-SearchBar-clear');
      this._showClearButton = this._showClearButton || this.query;
      button.classList.toggle('yxt-SearchBar--hidden', !this._showClearButton);
      DOM.on(button, 'click', function () {
        _this2.query = '';
        _this2._showClearButton = false;
        button.classList.add('yxt-SearchBar--hidden');

        _this2.setState({});

        _this2.core.persistentStorage.set(StorageKeys.QUERY, _this2.query);

        _this2.core.persistentStorage["delete"](StorageKeys.SEARCH_OFFSET);

        _this2.core.globalStorage["delete"](StorageKeys.SEARCH_OFFSET);

        _this2.core.setQuery(_this2.query); // Focus the input element after clearing the query, regardless of whether
        // or not the autoFocus option is enabled.
        // NOTE(amullings): This depends heavily on the fact that the re-renders
        // triggered by setState and core.setQuery happen synchronously; if this
        // stops being the case at some point, we'll need an alternative solution


        _this2.focusInputElement();
      });
      var input = DOM.query(this._container, this._inputEl);
      DOM.on(input, 'input', function (e) {
        var input = e.target.value;

        if (!_this2._showClearButton && input.length > 0) {
          _this2._showClearButton = true;
          button.classList.remove('yxt-SearchBar--hidden');
        } else if (_this2._showClearButton && input.length === 0) {
          _this2._showClearButton = false;
          button.classList.add('yxt-SearchBar--hidden');
        }
      });
    }
    /**
     * A helper method to use for wiring up searching on form submission
     * @param {string} formSelector CSS selector to bind our submit handling to
     */
    ;

    _proto.initSearch = function initSearch(formSelector) {
      var _this3 = this;

      this._formEl = formSelector;

      this._container.classList.add('yxt-SearchBar-wrapper');

      var form = DOM.query(this._container, formSelector);

      if (!form) {
        throw new Error('Could not initialize SearchBar; Can not find {HTMLElement} `', this._formEl, '`.');
      }

      DOM.on(form, 'submit', function (e) {
        e.preventDefault();
        var inputEl = form.querySelector(_this3._inputEl);
        var query = inputEl.value;
        var params = new SearchParams(window.location.search.substring(1));
        params.set('query', query); // If we have a redirectUrl, we want the form to be
        // serialized and submitted.

        if (typeof _this3.redirectUrl === 'string') {
          window.location.href = _this3.redirectUrl + '?' + params.toString();
          return false;
        }

        inputEl.blur();

        _this3.core.persistentStorage.set(StorageKeys.QUERY, query);

        _this3.core.persistentStorage["delete"](StorageKeys.SEARCH_OFFSET);

        _this3.core.globalStorage["delete"](StorageKeys.SEARCH_OFFSET);

        _this3.core.setQuery(query);

        _this3.debouncedSearch(query);

        return false;
      });
    }
    /**
     * A helper method to wire up our auto complete on an input selector
     * @param {string} inputSelector CSS selector to bind our auto complete component to
     */
    ;

    _proto.initAutoComplete = function initAutoComplete(inputSelector) {
      var _this4 = this;

      this._inputEl = inputSelector;

      if (this._autocomplete) {
        this._autocomplete.remove();
      }

      this._autocomplete = this.componentManager.create('AutoComplete', {
        parentContainer: this._container,
        name: this._autoCompleteName,
        container: '.yxt-SearchBar-autocomplete',
        autoFocus: this.autoFocus && !this.autocompleteOnLoad,
        verticalKey: this._verticalKey,
        promptHeader: this.promptHeader,
        originalQuery: this.query,
        inputEl: inputSelector,
        onSubmit: function onSubmit() {
          DOM.trigger(DOM.query(_this4._container, _this4._formEl), 'submit');
        },
        onChange: function onChange() {
          DOM.trigger(DOM.query(_this4._container, inputSelector), 'input');
        }
      });
    }
    /**
     * Performs a debounced query using the provided string input. Specifically, a new search is not
     * performed if we recently searched, if there's no query for universal search, or if this
     * is a twin searchbar.
     * @param {string} query The string to query against.
     * @returns {Promise} A promise that will perform the query and update globalStorage accordingly.
     */
    ;

    _proto.debouncedSearch = function debouncedSearch(query) {
      var _this5 = this;

      if (this._throttled || !query && !this._verticalKey || !query && this._verticalKey && !this._allowEmptySearch || this._isTwin) {
        return;
      }

      this._throttled = true;
      setTimeout(function () {
        _this5._throttled = false;
      }, this._searchCooldown); // If _promptForLocation is enabled, we will compute the query's intent and, from there,
      // determine if it's necessary to prompt the user for their location information. It will
      // be unnecessary if the query does not have near me intent or we already have their location
      // stored.

      if (this._promptForLocation) {
        this.fetchQueryIntents(query).then(function (queryIntents) {
          return queryIntents.includes('NEAR_ME');
        }).then(function (queryHasNearMeIntent) {
          if (queryHasNearMeIntent && !_this5.core.globalStorage.getState(StorageKeys.GEOLOCATION)) {
            return new Promise(function (resolve, reject) {
              return navigator.geolocation.getCurrentPosition(function (position) {
                _this5.core.globalStorage.set(StorageKeys.GEOLOCATION, {
                  lat: position.coords.latitude,
                  lng: position.coords.longitude,
                  radius: position.coords.accuracy
                });

                resolve(_this5.search(query));
              }, function () {
                return resolve(_this5.search(query));
              });
            });
          } else {
            return _this5.search(query);
          }
        });
      } else {
        return this.search(query);
      }
    }
    /**
     * Performs a query using the provided string input.
     * @param {string} query The string to query against.
     * @returns {Promise} A promise that will perform the query and update globalStorage accordingly.
     */
    ;

    _proto.search = function search(query) {
      if (this._verticalKey) {
        var allFilters = this.core.globalStorage.getAll(StorageKeys.FILTER);
        var totalFilter = allFilters.length > 1 ? Filter.and.apply(Filter, allFilters) : allFilters[0];
        return this.core.verticalSearch(this._verticalKey, {
          input: query,
          filter: JSON.stringify(totalFilter),
          offset: this.core.globalStorage.getState(StorageKeys.SEARCH_OFFSET) || 0
        });
      } else {
        // NOTE(billy) Temporary hack for DEMO
        // Remove me after the demo
        var nav = this.componentManager.getActiveComponent('Navigation');

        if (nav) {
          var tabs = nav.getState('tabs');
          var urls = {};

          if (tabs && Array.isArray(tabs)) {
            for (var i = 0; i < tabs.length; i++) {
              var params = new SearchParams(tabs[i].url.split('?')[1]);
              params.set('query', query);
              var url = tabs[i].baseUrl;

              if (params.toString().length > 0) {
                url += '?' + params.toString();
              }

              urls[tabs[i].configId] = url;
            }
          }

          return this.core.search(query, urls);
        }

        return this.core.search(query);
      }
    }
    /**
     * A helper method that computes the intents of the provided query. If the query was entered
     * manually into the search bar or selected via autocomplete, its intents will have been stored
     * already in globalStorage. Otherwise, a new API call will have to be issued to determine
     * intent.
     * @param {string} query The query whose intent is needed.
     * @returns {Promise} A promise containing the intents of the query.
     */
    ;

    _proto.fetchQueryIntents = function fetchQueryIntents(query) {
      var autocompleteData = this.core.globalStorage.getState(StorageKeys.AUTOCOMPLETE + "." + this._autoCompleteName);

      if (!autocompleteData) {
        var autocompleteRequest = this._verticalKey ? this.core.autoCompleteVertical(query, this._autoCompleteName, this._verticalKey) : this.core.autoCompleteUniversal(query, this._autoCompleteName);
        return autocompleteRequest.then(function (data) {
          return data.inputIntents;
        });
      } else {
        // There are two alternatives to consider here. The user could have selected the query
        // as an autocomplete option or manually input it themselves. If the former, use the intents
        // of the corresponding autocomplete option. If the latter, use the inputIntents of the
        // autocompleteData.
        var results = autocompleteData.sections.flatMap(function (section) {
          return section.results;
        });
        var matchingResult = results.find(function (result) {
          return result.value === query;
        });
        var queryIntents = matchingResult ? matchingResult.intents : autocompleteData.inputIntents;
        return Promise.resolve(queryIntents);
      }
    }
    /**
     * A helper method that constructs the meta information needed by the SEARCH_CLEAR_BUTTON
     * analytics event.
     */
    ;

    _proto.eventOptions = function eventOptions() {
      var queryId = this.core.globalStorage.getState(StorageKeys.QUERY_ID);
      var options = Object.assign({}, queryId && {
        queryId: queryId
      }, this._verticalKey && {
        verticalKey: this._verticalKey
      });
      return JSON.stringify(options);
    };

    _proto.setState = function setState(data) {
      return _Component.prototype.setState.call(this, Object.assign({
        title: this.title,
        labelText: this.labelText,
        submitIcon: this.submitIcon,
        submitText: this.submitText,
        clearText: this.clearText,
        showClearButton: this._showClearButton,
        query: this.query || '',
        eventOptions: this.eventOptions()
      }, data));
    };

    _proto.focusInputElement = function focusInputElement() {
      DOM.query(this._container, this._inputEl).focus();
    };

    _createClass(SearchComponent, null, [{
      key: "type",
      get: function get() {
        return 'SearchBar';
      }
    }]);

    return SearchComponent;
  }(Component);

  /** @module SearchParamsParser */
  function buildSearchParameters(searchParameterConfigs) {
    var searchParameters = {
      sectioned: false,
      fields: []
    };

    if (searchParameterConfigs === undefined) {
      return searchParameters;
    }

    if (searchParameterConfigs.sectioned) {
      searchParameters.sectioned = searchParameterConfigs.sectioned;
    }

    searchParameters.fields = buildFields(searchParameterConfigs.fields);
    return searchParameters;
  }

  function buildFields(fieldConfigs) {
    if (fieldConfigs === undefined) {
      return [];
    }

    return fieldConfigs.map(function (fc) {
      return _objectSpread2({
        fetchEntities: false
      }, fc);
    });
  }

  /**
   * FilterSearchComponent is used for autocomplete using the FilterSearch backend.
   * It'll allow you to pick pre-set filters that are setup on the backend within
   * a vertical search context.
   *
   * @extends Component
   */

  var FilterSearchComponent =
  /*#__PURE__*/
  function (_Component) {
    _inheritsLoose(FilterSearchComponent, _Component);

    function FilterSearchComponent(config, systemConfig) {
      var _this;

      if (config === void 0) {
        config = {};
      }

      if (systemConfig === void 0) {
        systemConfig = {};
      }

      _this = _Component.call(this, config, systemConfig) || this;
      /**
       * The vertical key for vertical search configuration
       * @type {string}
       */

      _this._verticalKey = config.verticalKey || null;
      /**
       * If true, store the filter value but do not search on change
       * @type {boolean}
       * @private
       */

      _this._storeOnChange = config.storeOnChange || false;
      /**
       * Query submission is based on a form as context.
       * Optionally provided, otherwise defaults to native form node within container
       * @type {string} CSS selector
       */

      _this._formEl = config.formSelector || 'form';
      /**
       * The input element used for searching and wires up the keyboard interaction
       * Optionally provided.
       * @type {string} CSS selector
       */

      _this._inputEl = config.inputEl || '.js-yext-query';
      /**
       * The title used, provided to the template as a data point
       * Optionally provided.
       * @type {string}
       */

      _this.title = config.title;
      /**
       * The search text used for labeling the input box, also provided to template.
       * Optionally provided
       * @type {string}
       */

      _this.searchText = config.searchText || 'What are you interested in?';
      /**
       * The query text to show as the first item for auto complete.
       * Optionally provided
       * @type {string}
       */

      _this.promptHeader = config.promptHeader || null;
      /**
       * Auto focuses the input box if set to true.
       * Optionally provided, defaults to false.
       * @type {boolean}
       */

      _this.autoFocus = config.autoFocus === true;
      /**
       * submitURL will force the search query submission to get
       * redirected to the URL provided.
       * Optional, defaults to null.
       *
       * If no redirectUrl provided, we keep the page as a single page app.
       *
       * @type {boolean}
       */

      _this.redirectUrl = config.redirectUrl || null;
      /**
       * The query string to use for the input box, provided to template for rendering.
       * Optionally provided
       * @type {string}
       */

      _this.query = config.query || _this.core.globalStorage.getState(StorageKeys.QUERY + "." + _this.name) || '';

      _this.core.globalStorage.on('update', StorageKeys.QUERY + "." + _this.name, function (q) {
        _this.query = q;

        _this.search();
      });
      /**
       * The filter string to use for the provided query
       * Optionally provided
       * @type {string}
       */


      _this.filter = config.filter || _this.core.globalStorage.getState(StorageKeys.FILTER + "." + _this.name) || '';

      if (typeof _this.filter === 'string') {
        try {
          _this.filter = JSON.parse(_this.filter);
        } catch (e) {}
      }

      _this.searchParameters = buildSearchParameters(config.searchParameters);

      _this.core.globalStorage.on('update', StorageKeys.FILTER + "." + _this.name, function (f) {
        _this.filter = f;
      });

      return _this;
    }

    /**
     * The template to render
     * @returns {string}
     * @override
     */
    FilterSearchComponent.defaultTemplateName = function defaultTemplateName() {
      return 'search/filtersearch';
    };

    var _proto = FilterSearchComponent.prototype;

    _proto.onCreate = function onCreate() {
      if (this.query && this.filter) {
        this.search();
      }
    };

    _proto.onMount = function onMount() {
      // Wire up our search handling and auto complete
      this.initAutoComplete(this._inputEl);

      if (this.autoFocus === true && this.query.length === 0) {
        DOM.query(this._container, this._inputEl).focus();
      }
    }
    /**
     * A helper method to wire up our auto complete on an input selector
     * @param {string} inputSelector CSS selector to bind our auto complete component to
     */
    ;

    _proto.initAutoComplete = function initAutoComplete(inputSelector) {
      var _this2 = this;

      this._inputEl = inputSelector;
      this.componentManager.create('AutoComplete', {
        parentContainer: this._container,
        name: this.name + ".autocomplete",
        isFilterSearch: true,
        container: '.yxt-SearchBar-autocomplete',
        promptHeader: this.promptHeader,
        originalQuery: this.query,
        originalFilter: this.filter,
        inputEl: inputSelector,
        verticalKey: this._verticalKey,
        searchParameters: this.searchParameters,
        onSubmit: function onSubmit(query, filter) {
          var params = new SearchParams(window.location.search.substring(1));
          params.set(_this2.name + ".query", query);
          params.set(_this2.name + ".filter", filter); // If we have a redirectUrl, we want the params to be
          // serialized and submitted.

          if (typeof _this2.redirectUrl === 'string') {
            window.location.href = _this2.redirectUrl + '?' + params.toString();
            return false;
          } // save the filter to storage for the next search


          _this2.query = query;
          _this2.filter = Filter.fromResponse(filter);

          _this2.core.persistentStorage.set(StorageKeys.QUERY + "." + _this2.name, _this2.query);

          _this2.core.persistentStorage.set(StorageKeys.FILTER + "." + _this2.name, _this2.filter);

          _this2.core.setFilter(_this2.name, _this2.filter);

          _this2.search();
        }
      });
    }
    /**
     * Perform the vertical search with all saved filters and query,
     * optionally redirecting based on config
     */
    ;

    _proto.search = function search() {
      if (this._storeOnChange) {
        return;
      }

      var filters = this.core.globalStorage.getAll(StorageKeys.FILTER);
      var totalFilter = filters[0];

      if (filters.length > 1) {
        totalFilter = Filter.and.apply(Filter, filters);
      }

      var searchQuery = this.core.globalStorage.getState(StorageKeys.QUERY) || '';
      var facetFilter = this.core.globalStorage.getAll(StorageKeys.FACET_FILTER)[0];
      this.core.persistentStorage["delete"](StorageKeys.SEARCH_OFFSET);
      this.core.globalStorage["delete"](StorageKeys.SEARCH_OFFSET);
      this.core.verticalSearch(this._verticalKey, {
        input: searchQuery,
        filter: JSON.stringify(totalFilter),
        facetFilter: JSON.stringify(facetFilter)
      });
    };

    _proto.setState = function setState(data) {
      return _Component.prototype.setState.call(this, Object.assign({
        title: this.title,
        searchText: this.searchText,
        query: this.query,
        filter: this.filter
      }, data));
    };

    _createClass(FilterSearchComponent, null, [{
      key: "type",
      get: function get() {
        return 'FilterSearch';
      }
    }]);

    return FilterSearchComponent;
  }(Component);

  var Keys = {
    BACKSPACE: 8,
    TAB: 9,
    ENTER: 13,
    SHIFT: 16,
    CTRL: 17,
    ALT: 18,
    ESCAPE: 27,
    LEFT: 37,
    RIGHT: 39,
    UP: 38,
    DELETE: 46,
    DOWN: 40,
    LEFT_OS_KEY: 91,
    RIGHT_OS_KEY: 92,
    SELECT_KEY: 93
  };

  var AutoCompleteComponent =
  /*#__PURE__*/
  function (_Component) {
    _inheritsLoose(AutoCompleteComponent, _Component);

    function AutoCompleteComponent(opts, systemOpts) {
      var _this;

      if (opts === void 0) {
        opts = {};
      }

      if (systemOpts === void 0) {
        systemOpts = {};
      }

      _this = _Component.call(this, opts, systemOpts) || this;
      /**
       * Whether autocomplete is simple or filter
       * @type {boolean}
       */

      _this.isFilterSearch = opts.isFilterSearch || false;
      /**
       * The `verticalKey` of the vertical search to use for auto-complete
       * @type {string}
       */

      _this._verticalKey = opts.verticalKey || null;
      /**
       * A reference to the input el selector for auto complete
       * @type {string}
       */

      _this._inputEl = opts.inputEl || '.js-yext-query';
      /**
       * A selector for the autocomplete elementes
       * @type {string}
       */

      _this._autocompleteEls = opts.autoCompleteEls || '.js-yext-autocomplete-option';
      /**
       * An internal reference for the data-storage to listen for updates from the server
       * @type {string}
       */

      _this.moduleId = StorageKeys.AUTOCOMPLETE + "." + _this.name;
      /**
       * An internal reference to the input value when typing.
       * We use this for resetting the state of the input value when other interactions (e.g. result navigation)
       * change based on interactions. For instance, hitting escape should reset the value to the original typed query.
       * @type {string}
       */

      _this._originalQuery = opts.originalQuery || '';
      /**
       * Used for keyboard navigation through results.
       * An internal reference to the current section we're navigating in.
       * @type {number}
       */

      _this._sectionIndex = 0;
      /**
       * Used for keyboard navigation through results.
       * An internal reference to the current result index we're navigating on.
       * @type {number}
       */

      _this._resultIndex = -1;
      /**
       * The query text to show as the first item for auto complete.
       * Optionally provided
       * @type {string}
       */

      _this.promptHeader = opts.promptHeader || null;
      /**
       * Whether the input is autocomatically focused or not
       * @type {boolean}
       */

      _this._autoFocus = opts.autoFocus || false;
      /**
       * Callback invoked when the `Enter` key is pressed on auto complete.
       */

      _this._onSubmit = opts.onSubmit || function () {};
      /**
       * Callback invoked when keys are used to navigate through the auto complete. Note that this is
       * not called when either the `Enter` key is pressed or the mouse is used to select an
       * autocomplete option.
       */


      _this._onChange = opts.onChange || function () {};

      _this._searchParameters = opts.searchParameters || null;
      return _this;
    }
    /**
     * The aliased used by the component manager for creation.
     */


    /**
     * The template to render
     * @returns {string}
     * @override
     */
    AutoCompleteComponent.defaultTemplateName = function defaultTemplateName(config) {
      return 'search/autocomplete';
    }
    /**
     * setState is overridden so that we can provide additional meta data
     * to the template (e.g. the sectionIndex and resultIndex), since
     * those are client-interaction specific values and aren't returned from the server.
     */
    ;

    var _proto = AutoCompleteComponent.prototype;

    _proto.setState = function setState(data) {
      if (!this.isQueryInputFocused()) {
        this._sectionIndex = 0;
        this._resultIndex = -1;
        data = {};
      }

      _Component.prototype.setState.call(this, Object.assign({}, data, {
        hasResults: this.hasResults(data),
        sectionIndex: this._sectionIndex,
        resultIndex: this._resultIndex,
        promptHeader: this._originalQuery.length === 0 ? this.promptHeader : null
      }));
    };

    _proto.isQueryInputFocused = function isQueryInputFocused() {
      return document.activeElement && document.activeElement.className.includes(this._inputEl.substring(1));
    }
    /**
     * updateState is a helper to apply the current state with new client-state.
     */
    ;

    _proto.updateState = function updateState() {
      this.setState(this._state.get());
    }
    /**
     * onCreate is triggered when the component is constructed from the framework.
     * Once we're initalized, we wire up all of our user interactions
     */
    ;

    _proto.onCreate = function onCreate() {
      var _this2 = this;

      // Use the context of the parent component to find the input node.
      var queryInput = DOM.query(this._parentContainer, this._inputEl);

      if (!queryInput) {
        throw new Error('Could not initialize AutoComplete. Can not find {HTMLElement} `', this._inputEl, '`.');
      } // Disable the native autocomplete, autocorrect & spellcheck


      DOM.attributes(queryInput, {
        autocomplete: 'off',
        autocorrect: 'off',
        spellcheck: 'false'
      }); // The user exits the input, so we want to reset the state and close
      // the auto complete
      // TODO(jdelerme): Close logic to be moved to parent

      DOM.on(document, 'click', function (e) {
        if (e.target.matches('.js-yxt-AutoComplete-wrapper *') || e.target.matches(_this2._inputEl)) {
          return;
        }

        _this2.close();
      }); // When a user focuses the input, we should populate the autocomplete based
      // on the current value

      DOM.on(queryInput, 'focus', function () {
        _this2.reset();

        _this2.autoComplete(queryInput.value);
      }); // Allow the user to navigate between the results using the keyboard

      DOM.on(queryInput, 'keydown', function (e) {
        _this2.handleNavigateResults(e.keyCode, e);

        _this2.handleSubmitResult(e.keyCode, queryInput.value, e);
      });

      if (this._autoFocus) {
        DOM.once(queryInput, 'click', function () {
          _this2.autoComplete(queryInput.value);
        });
      } // Allow the user to select a result with the mouse


      DOM.delegate(this._container, '.js-yext-autocomplete-option', 'click', function (evt, target) {
        var data = target.dataset;
        var val = data["short"];

        _this2.updateQuery(val);

        _this2._onSubmit(val, data.filter);

        _this2.close();
      }); // When the user is typing in the input, process the auto complete.

      DOM.on(queryInput, 'keyup', function (e) {
        _this2.handleTyping(e.keyCode, queryInput.value, e);
      });
    }
    /**
     * close will hide the auto complete results and reset the state.
     */
    ;

    _proto.close = function close() {
      this.setState({});
      this.reset();
    }
    /**
     * resets the client state to their original values and triggers
     * a template-rerender via updateState
     */
    ;

    _proto.reset = function reset() {
      this._sectionIndex = 0;
      this._resultIndex = -1;
      this.updateState();
    }
    /**
     * Helper method to update the input text
     * @param {string} optValue Option value provided.
     * If no value provided, we'll try to find it based on the selection indexes.
     */
    ;

    _proto.updateQuery = function updateQuery(optValue) {
      // Only want to update the query string if theres a value.
      // If one is provided, great.
      // Otherwise, lets try to find it from the current selection in the results.
      if (optValue === undefined) {
        var sections = this._state.get('sections');

        var results = sections[this._sectionIndex].results;
        optValue = results[this._resultIndex].shortValue;
      }

      var queryEl = DOM.query(this._parentContainer, this._inputEl);
      queryEl.value = optValue;
    };

    _proto.handleTyping = function handleTyping(key, value, e) {
      var ignoredKeys = [Keys.DOWN, Keys.UP, Keys.CTRL, Keys.ALT, Keys.SHIFT, Keys.LEFT, Keys.RIGHT, Keys.LEFT_OS_KEY, Keys.RIGHT_OS_KEY, Keys.ENTER, Keys.TAB, Keys.SELECT_KEY];

      if (ignoredKeys.indexOf(key) > -1) {
        return;
      } // User escapes out of auto complete, so we reset it to the original input


      if (key === Keys.ESCAPE) {
        this.updateQuery(this._originalQuery);
        this.close();
        return;
      } // Update the original value based on the user input


      this._originalQuery = value;
      this.reset();
      this.autoComplete(value);
    };

    _proto.autoComplete = function autoComplete(input) {
      if (this.isFilterSearch) {
        this.core.autoCompleteFilter(input, {
          namespace: this.name,
          verticalKey: this._verticalKey,
          searchParameters: this._searchParameters
        });
      } else if (this._verticalKey) {
        this.core.autoCompleteVertical(input, this.name, this._verticalKey);
      } else {
        this.core.autoCompleteUniversal(input, this.name);
      }
    }
    /**
     * returns true if we have results in any section
     * @returns boolean
     */
    ;

    _proto.hasResults = function hasResults(data) {
      if (!data) {
        return false;
      }

      var sections = data['sections'];

      if (!sections) {
        return false;
      }

      for (var i = 0; i < sections.length; i++) {
        var _data = sections[i];

        if (!_data) {
          continue;
        }

        var results = _data.results;

        if (!results) {
          continue;
        }

        if (results.length > 0) {
          return true;
        }
      }

      return false;
    };

    _proto.handleNavigateResults = function handleNavigateResults(key, e) {
      var sections = this._state.get('sections');

      if (sections === undefined || sections.length <= 0) {
        return;
      } // Tabbing out or enter should close the auto complete.


      if (key === Keys.TAB) {
        this.close();
        return;
      }

      var results = sections[this._sectionIndex].results;

      if (key === Keys.UP) {
        e.preventDefault();

        if (this._resultIndex <= 0) {
          if (this._sectionIndex > 0) {
            this._sectionIndex--;
            this._resultIndex = sections[this._sectionIndex].results.length - 1;
          } else {
            this.updateQuery(this._originalQuery);
            this.reset();
            return;
          }

          this.updateQuery();
          this.updateState();
          return;
        }

        this._resultIndex--;
        this.updateState();
        this.updateQuery();
        return;
      }

      if (key === Keys.DOWN) {
        e.preventDefault();

        if (this._resultIndex >= results.length - 1) {
          if (this._sectionIndex < sections.length - 1) {
            this._sectionIndex++;
            this._resultIndex = 0;
          }

          this.updateQuery();
          this.updateState();
          return;
        }

        this._resultIndex++;
        this.updateQuery();
        this.updateState();
      }
    };

    _proto.handleSubmitResult = function handleSubmitResult(key, value, e) {
      var sections = this._state.get('sections');

      if (sections === undefined || sections.length <= 0) {
        if (this.isFilterSearch) {
          this.autoComplete(value);
        }

        return;
      } // submit the search on enter


      if (key === Keys.ENTER) {
        e.preventDefault();

        if (this.isFilterSearch && this._resultIndex === -1) {
          return;
        }

        var filter = '';

        if (this._sectionIndex >= 0 && this._resultIndex >= 0) {
          filter = JSON.stringify(sections[this._sectionIndex].results[this._resultIndex].filter);
        }

        this.updateQuery(value);
        this._originalQuery = value;

        this._onSubmit(value, filter);

        this.close();
      } else {
        this._onChange();
      }
    };

    _createClass(AutoCompleteComponent, null, [{
      key: "type",
      get: function get() {
        return 'AutoComplete';
      }
    }]);

    return AutoCompleteComponent;
  }(Component);

  /**
   * SpellCheckComponent will support displaying suggestion, autocorrect and combined(maybe in the future)
   * provided from spelling correction.
   *
   * @extends Component
   */

  var SpellCheckComponent =
  /*#__PURE__*/
  function (_Component) {
    _inheritsLoose(SpellCheckComponent, _Component);

    function SpellCheckComponent(config, systemConfig) {
      var _this;

      if (config === void 0) {
        config = {};
      }

      if (systemConfig === void 0) {
        systemConfig = {};
      }

      _this = _Component.call(this, config, systemConfig) || this;
      _this.moduleId = StorageKeys.SPELL_CHECK;
      return _this;
    }

    SpellCheckComponent.defaultTemplateName = function defaultTemplateName() {
      return 'search/spellcheck';
    };

    var _proto = SpellCheckComponent.prototype;

    _proto.onCreate = function onCreate() {
      this.core.persistentStorage["delete"]('skipSpellCheck', true);
      this.core.persistentStorage["delete"]('queryTrigger', true);
    };

    _proto.setState = function setState(data, val) {
      return _Component.prototype.setState.call(this, Object.assign({}, data, {
        shouldShow: data.correctedQuery !== undefined,
        correctedQueryUrl: this._buildRedirectQueryUrl(data.correctedQuery, data.type),
        helpText: this._getHelpText(data.type)
      }, val));
    };

    _proto._buildRedirectQueryUrl = function _buildRedirectQueryUrl(query, type) {
      if (query === undefined) {
        return '';
      }

      var params = new SearchParams(window.location.search.substring(1));
      params.set('query', query.value);
      params.set('skipSpellCheck', true);
      params.set('queryTrigger', type.toLowerCase());
      return '?' + params.toString();
    };

    _proto._getHelpText = function _getHelpText(type) {
      switch (type) {
        case 'SUGGEST':
          return 'Did you mean:';

        default:
          return '';
      }
    };

    _createClass(SpellCheckComponent, null, [{
      key: "type",
      get: function get() {
        return 'SpellCheck';
      }
    }]);

    return SpellCheckComponent;
  }(Component);

  /**
   * LocationBiasComponent will show the user where is used for location bias and allow user to
   * improve accuracy with HTML5 geolocation.
   *
   * @extends Component
   */

  var LocationBiasComponent =
  /*#__PURE__*/
  function (_Component) {
    _inheritsLoose(LocationBiasComponent, _Component);

    function LocationBiasComponent(config, systemConfig) {
      var _this;

      if (config === void 0) {
        config = {};
      }

      if (systemConfig === void 0) {
        systemConfig = {};
      }

      _this = _Component.call(this, config, systemConfig) || this;
      /**
       * Recieve updates from storage based on this index
       * @type {StorageKey}
       */

      _this.moduleId = StorageKeys.LOCATION_BIAS;
      /**
       * The optional vertical key for vertical search configuration
       * If not provided, when location updated,
       * a universal search will be triggered.
       * @type {string}
       */
      // TODO: Remove config.verticalKey

      _this._verticalKey = config.verticalKey || _this.core.globalStorage.getState(StorageKeys.SEARCH_CONFIG).verticalKey || null;
      /**
       * The element used for updating location
       * Optionally provided.
       * @type {string} CSS selector
       */

      _this._updateLocationEl = config.updateLocationEl || '.js-locationBias-update-location';
      _this._locationDisplayName = '';
      _this._accuracy = '';
      _this._allowUpdate = true;
      return _this;
    }

    LocationBiasComponent.defaultTemplateName = function defaultTemplateName() {
      return 'search/locationbias';
    };

    var _proto = LocationBiasComponent.prototype;

    _proto.onMount = function onMount() {
      var _this2 = this;

      if (!this._allowUpdate) {
        return;
      }

      this._disableLocationUpdateIfGeolocationDenied();

      DOM.on(this._updateLocationEl, 'click', function (e) {
        if ('geolocation' in navigator) {
          navigator.geolocation.getCurrentPosition(function (position) {
            _this2.core.globalStorage.set(StorageKeys.GEOLOCATION, {
              lat: position.coords.latitude,
              lng: position.coords.longitude,
              radius: position.coords.accuracy
            });

            _this2._doSearch();
          }, function (err) {
            if (err.code === 1) {
              _this2._disableLocationUpdate();
            }
          });
        } // TODO: Should we throw error or warning here if no geolocation?

      });
    };

    _proto.setState = function setState(data, val) {
      this._locationDisplayName = data.locationDisplayName;
      this._accuracy = data.accuracy;
      return _Component.prototype.setState.call(this, Object.assign({}, data, {
        locationDisplayName: this._getLocationDisplayName(data),
        accuracyText: this._getAccuracyHelpText(data.accuracy),
        isPreciseLocation: data.accuracy === 'DEVICE' && this._allowUpdate,
        isUnknownLocation: data.accuracy === 'UNKNOWN',
        shouldShow: data.accuracy !== undefined,
        allowUpdate: this._allowUpdate
      }, val));
    };

    _proto._getLocationDisplayName = function _getLocationDisplayName(data) {
      if (data.accuracy === 'UNKNOWN') {
        return 'Unknown Location';
      }

      return data.locationDisplayName;
    };

    _proto._getAccuracyHelpText = function _getAccuracyHelpText(accuracy) {
      switch (accuracy) {
        case 'IP':
          return 'based on your internet address';

        case 'DEVICE':
          return 'based on your device';

        default:
          return '';
      }
    };

    _proto._doSearch = function _doSearch() {
      var query = this.core.globalStorage.getState(StorageKeys.QUERY);

      if (this._verticalKey) {
        var allFilters = this.core.globalStorage.getAll(StorageKeys.FILTER);
        var totalFilter = allFilters.length > 1 ? Filter.and.apply(Filter, allFilters) : allFilters[0];
        var facetFilter = this.core.globalStorage.getAll(StorageKeys.FACET_FILTER)[0];
        this.core.verticalSearch(this._verticalKey, {
          input: query,
          filter: JSON.stringify(totalFilter),
          offset: this.core.globalStorage.getState(StorageKeys.SEARCH_OFFSET) || 0,
          facetFilter: JSON.stringify(facetFilter)
        });
      } else {
        this.core.search(query);
      }
    };

    _proto._disableLocationUpdateIfGeolocationDenied = function _disableLocationUpdateIfGeolocationDenied() {
      var _this3 = this;

      if ('permissions' in navigator) {
        navigator.permissions.query({
          name: 'geolocation'
        }).then(function (result) {
          if (result.state === 'denied') {
            _this3._disableLocationUpdate();
          }
        });
      }
    };

    _proto._disableLocationUpdate = function _disableLocationUpdate() {
      this.core.globalStorage["delete"](StorageKeys.GEOLOCATION);
      this._allowUpdate = false;
      this.setState({
        locationDisplayName: this._locationDisplayName,
        accuracy: this._accuracy
      });
    };

    _createClass(LocationBiasComponent, null, [{
      key: "type",
      get: function get() {
        return 'LocationBias';
      }
    }]);

    return LocationBiasComponent;
  }(Component);

  /** @module Facet */

  /**
   * Model representing a facet filter with the format of
   * {
   *   "field_name": [ Filters... ],
   *   ...
   * }
   *
   * @see {@link Filter}
   */
  var Facet =
  /*#__PURE__*/
  function () {
    function Facet(data) {
      if (data === void 0) {
        data = {};
      }

      Object.assign(this, data);
      Object.freeze(this);
    }
    /**
     * Create a facet filter from a list of Filters
     * @param  {...Filter} filters The filters to use in this facet
     * @returns {Facet}
     */


    Facet.fromFilters = function fromFilters(availableFieldIds) {
      var groups = {};
      availableFieldIds.forEach(function (fieldId) {
        groups[fieldId] = [];
      });

      for (var _len = arguments.length, filters = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        filters[_key - 1] = arguments[_key];
      }

      var flatFilters = filters.flatMap(function (f) {
        return f.$or || f;
      });
      flatFilters.forEach(function (f) {
        var key = Object.keys(f)[0];

        if (!groups[key]) {
          groups[key] = [];
        }

        groups[key].push(f);
      });
      return new Facet(groups);
    };

    return Facet;
  }();

  var FilterBoxConfig =
  /*#__PURE__*/
  function () {
    function FilterBoxConfig(config) {
      /**
       * The title to display above the controls
       * @type {string}
       */
      this.title = config.title || 'Filters';
      /**
       * If true, display the number of results next to each facet
       * @type {boolean}
       */

      this.showCount = config.showCount === undefined ? true : config.showCount;
      /**
       * If true, trigger a search on each change to a filter
       * @type {boolean}
       */

      this.searchOnChange = config.searchOnChange || false;
      /**
       * If true, show a button to reset for each facet group
       * @type {boolean}
       */

      this.resetFilter = config.resetFacet || false;
      /**
       * The label to show for the reset button
       * @type {string}
       */

      this.resetFilterLabel = config.resetFacetLabel || 'reset';
      /**
       * If true, show a "reset all" button to reset all facets
       * @type {boolean}
       */

      this.resetFilters = config.resetFacets === undefined ? true : config.resetFacets;
      /**
       * The label to show for the "reset all" button
       * @type {string}
       */

      this.resetFiltersLabel = config.resetFacetsLabel || 'reset all';
      /**
       * The max number of facets to show before displaying "show more"/"show less"
       * @type {number}
       */

      this.showMoreLimit = config.showMoreLimit || 5;
      /**
       * The label to show for displaying more facets
       * @type {string}
       */

      this.showMoreLabel = config.showMoreLabel || 'show more';
      /**
       * The label to show for displaying less facets
       * @type {string}
       */

      this.showLessLabel = config.showLessLabel || 'show less';
      /**
       * If true, enable hiding excess facets in each group with a "show more"/"show less" button
       * @type {boolean}
       */

      this.showMore = config.showMore === undefined ? true : config.showMore;
      /**
       * If true, allow expanding and collapsing each group of facets
       * @type {boolean}
       */

      this.expand = config.expand === undefined ? true : config.expand;
      /**
       * If true, display the number of currently applied filters when collapsed
       * @type {boolean}
       */

      this.showNumberApplied = config.showNumberApplied === undefined ? true : config.showNumberApplied;
      /**
       * Text to display on the apply button
       * @type {string}
       */

      this.applyLabel = config.applyLabel || 'apply';
      /**
       * The selector of the apply button
       * @type {string}
       */

      this.applyButtonSelector = config.applyButtonSelector || '.js-yext-filterbox-apply';
      /**
       * The list of filters to display and control, ignoring empty sections
       * @type {object[]}
       */

      this.filterConfigs = config.filters.filter(function (f) {
        return f.options.length !== 0;
      });
      /**
       * Whether or not this filterbox contains facets. This affects the
       * the way the filters are used in the search
       * @type {boolean}
       */

      this.isDynamic = config.isDynamic || false;
      this.validate();
    }

    var _proto = FilterBoxConfig.prototype;

    _proto.validate = function validate() {};

    return FilterBoxConfig;
  }();
  /**
   * Renders a set of filters, and searches with them when applied.
   * Multiple FilterBox components will AND together but will not share state.
   * @extends Component
   */


  var FilterBoxComponent =
  /*#__PURE__*/
  function (_Component) {
    _inheritsLoose(FilterBoxComponent, _Component);

    function FilterBoxComponent(config, systemConfig) {
      var _this;

      if (config === void 0) {
        config = {};
      }

      if (systemConfig === void 0) {
        systemConfig = {};
      }

      _this = _Component.call(this, config, systemConfig) || this;
      _this.config = new FilterBoxConfig(config);

      if (!config.filters || !(config.filters instanceof Array)) {
        throw new AnswersComponentError('FilterBox requires filters to be provided as an array', 'FilterBox');
      }
      /**
       * The vertical key for the search
       * @type {string}
       * @private
       */


      _this._verticalKey = config.verticalKey || null;
      /**
       * The components created for each filter config
       * @type {Component[]}
       * @private
       */

      _this._filterComponents = [];
      /**
       * The current state of the filter components in the box
       * @type {Filter}
       * @private
       */

      _this._filters = [];

      if (!_this.config.showCount) {
        _this.config.filterConfigs.forEach(function (config) {
          config.options.forEach(function (option) {
            option.countLabel = null;
          });
        });
      }

      return _this;
    }

    FilterBoxComponent.defaultTemplateName = function defaultTemplateName() {
      return 'filters/filterbox';
    };

    var _proto2 = FilterBoxComponent.prototype;

    _proto2.setState = function setState(data) {
      _Component.prototype.setState.call(this, Object.assign({}, data, this.config, {
        showReset: this.config.resetFilters,
        resetLabel: this.config.resetFiltersLabel,
        showApplyButton: !this.config.searchOnChange
      }));
    };

    _proto2.onMount = function onMount() {
      var _this2 = this;

      if (this._filterComponents.length) {
        this._filterComponents.forEach(function (c) {
          return c.remove();
        });

        this._filterComponents = [];
        this._filters = [];
      } // Initialize filters from configs


      var _loop = function _loop(i) {
        var config = _this2.config.filterConfigs[i];

        var component = _this2.componentManager.create(config.type, Object.assign({}, config, _this2.config, {
          parentContainer: _this2._container,
          name: _this2.name + ".filter" + i,
          storeOnChange: false,
          container: ".js-yext-filterbox-filter" + i,
          showReset: _this2.config.resetFilter,
          resetLabel: _this2.config.resetFilterLabel,
          showExpand: _this2.config.expand,
          onChange: function onChange(filter) {
            _this2.onFilterChange(i, filter);
          }
        }));

        component.mount();

        _this2._filterComponents.push(component);

        _this2._filters[i] = component.getFilter();

        _this2._saveFiltersToStorage();
      };

      for (var i = 0; i < this.config.filterConfigs.length; i++) {
        _loop(i);
      } // Initialize apply button


      if (!this.config.searchOnChange) {
        var button = DOM.query(this._container, this.config.applyButtonSelector);

        if (button) {
          DOM.on(button, 'click', function () {
            _this2._saveFiltersToStorage();

            _this2._search();
          });
        }
      } // Initialize reset button


      if (this.config.resetFilters) {
        DOM.on(DOM.query(this._container, '.js-yxt-FilterBox-reset'), 'click', this.resetFilters.bind(this));
      }
    };

    _proto2.resetFilters = function resetFilters() {
      this._filterComponents.forEach(function (filter) {
        return filter.clearOptions();
      });
    }
    /**
     * Handle changes to child filter components
     * @param {number} index The index of the changed filter
     * @param {Filter} filter The new filter
     */
    ;

    _proto2.onFilterChange = function onFilterChange(index, filter) {
      this._filters[index] = filter;

      if (this.config.searchOnChange) {
        this._saveFiltersToStorage();

        this._search();
      }
    }
    /**
     * Remove all filter components along with this component
     */
    ;

    _proto2.remove = function remove() {
      this._filterComponents.forEach(function (c) {
        return c.remove();
      });

      _Component.prototype.remove.call(this);
    }
    /**
     * Save current filters to storage to be used in the next search
     * @private
     */
    ;

    _proto2._saveFiltersToStorage = function _saveFiltersToStorage() {
      var validFilters = this._filters.filter(function (f) {
        return f !== undefined && f !== null && Object.keys(f).length > 0;
      });

      if (this.config.isDynamic) {
        var availableFieldIds = this.config.filterConfigs.map(function (config) {
          return config.fieldId;
        });
        var combinedFilter = Facet.fromFilters.apply(Facet, [availableFieldIds].concat(validFilters));
        this.core.setFacetFilter(this.name, combinedFilter || {});
      } else {
        var _combinedFilter = validFilters.length > 1 ? Filter.and.apply(Filter, validFilters) : validFilters[0];

        this.core.setFilter(this.name, _combinedFilter || {});
      }
    }
    /**
     * Trigger a search with all filters in storage
     */
    ;

    _proto2._search = function _search() {
      var allFilters = this.core.globalStorage.getAll(StorageKeys.FILTER);
      var totalFilter = allFilters.length > 1 ? Filter.and.apply(Filter, allFilters) : allFilters[0];
      var query = this.core.globalStorage.getState(StorageKeys.QUERY);
      var facetFilter = this.core.globalStorage.getAll(StorageKeys.FACET_FILTER)[0];
      this.core.persistentStorage["delete"](StorageKeys.SEARCH_OFFSET);
      this.core.globalStorage["delete"](StorageKeys.SEARCH_OFFSET);
      this.core.verticalSearch(this._verticalKey, {
        input: query,
        filter: JSON.stringify(totalFilter),
        facetFilter: JSON.stringify(facetFilter)
      });
    };

    _createClass(FilterBoxComponent, null, [{
      key: "type",
      get: function get() {
        return 'FilterBox';
      }
    }]);

    return FilterBoxComponent;
  }(Component);

  /**
   * The currently supported controls
   * @type {string[]}
   */

  var SUPPORTED_CONTROLS = ['singleoption', 'multioption'];

  var FilterOptionsConfig =
  /*#__PURE__*/
  function () {
    function FilterOptionsConfig(config) {
      /**
       * The type of control to display
       * @type {string}
       */
      this.control = config.control;
      /**
       * The list of filter options to display with checked status
       * @type {object[]}
       */

      this.options = config.options;
      /**
       * The label to be used in the legend
       * @type {string}
       */

      this.label = config.label || 'Filters';
      /**
       * The callback function to call when changed
       * @type {function}
       */

      this.onChange = config.onChange || function () {};
      /**
       * If true, stores the filter to storage on each change
       * @type {boolean}
       */


      this.storeOnChange = config.storeOnChange || false;
      /**
       * If true, show a button to reset the current filter selection
       * @type {boolean}
       */

      this.showReset = config.showReset && this.options.length > 0;
      /**
       * The label to show for the reset button
       * @type {string}
       */

      this.resetLabel = config.resetLabel || 'reset';
      /**
       * The max number of facets to show before displaying "show more"/"show less"
       * @type {number}
       */

      this.showMoreLimit = config.showMoreLimit || 5;
      /**
       * The label to show for displaying more facets
       * @type {string}
       */

      this.showMoreLabel = config.showMoreLabel || 'show more';
      /**
       * The label to show for displaying less facets
       * @type {string}
       */

      this.showLessLabel = config.showLessLabel || 'show less';
      /**
       * If true, enable hiding excess facets with a "show more"/"show less" button
       * @type {boolean}
       */

      this.showMore = config.showMore === undefined ? true : config.showMore;
      this.showMore = this.showMore && this.options.length > this.showMoreLimit;
      /**
       * If true, allow expanding and collapsing the group of facets
       * @type {boolean}
       */

      this.showExpand = config.showExpand === undefined ? true : config.showExpand;
      /**
       * If true, display the number of currently applied filters when collapsed
       * @type {boolean}
       */

      this.showNumberApplied = config.showNumberApplied === undefined ? true : config.showNumberApplied;
      /**
       * The selector used for options in the template
       * @type {string}
       */

      this.optionSelector = config.optionSelector || '.js-yext-filter-option';
      this.validate();

      if (typeof config.previousOptions === 'string') {
        try {
          config.previousOptions = JSON.parse(config.previousOptions);
        } catch (e) {
          config.previousOptions = [];
        }
      }

      var selectedOptions = config.previousOptions || [];
      this.options = this.setDefaultSelectedValues(this.options, selectedOptions);
    }

    var _proto = FilterOptionsConfig.prototype;

    _proto.setDefaultSelectedValues = function setDefaultSelectedValues(options, selectedOptions) {
      return options.map(function (o) {
        return _objectSpread2({}, o, {
          selected: selectedOptions.length ? selectedOptions.includes(o.label) : o.selected
        });
      });
    };

    _proto.getSelectedCount = function getSelectedCount() {
      return this.options.reduce(function (numSelected, option) {
        return option.selected ? numSelected + 1 : numSelected;
      }, 0);
    };

    _proto.validate = function validate() {
      if (!this.control || !SUPPORTED_CONTROLS.includes(this.control)) {
        throw new AnswersComponentError('FilterOptions requires a valid "control" to be provided', 'FilterOptions');
      }

      if (!this.options) {
        throw new AnswersComponentError('FilterOptions component requires options to be provided', 'FilterOptions');
      }
    };

    return FilterOptionsConfig;
  }();
  /**
   * Renders a set of options, each one representing a filter in a search.
   */


  var FilterOptionsComponent =
  /*#__PURE__*/
  function (_Component) {
    _inheritsLoose(FilterOptionsComponent, _Component);

    function FilterOptionsComponent(config, systemConfig) {
      var _this;

      if (config === void 0) {
        config = {};
      }

      if (systemConfig === void 0) {
        systemConfig = {};
      }

      _this = _Component.call(this, config, systemConfig) || this;

      var previousOptions = _this.core.globalStorage.getState(_this.name);

      _this.core.globalStorage["delete"](_this.name);
      /**
       * The component config
       * @type {FilterOptionsConfig}
       */


      _this.config = new FilterOptionsConfig(_objectSpread2({
        previousOptions: previousOptions
      }, config));

      var selectedCount = _this.config.getSelectedCount();
      /**
       * True if the option list is expanded and visible
       * @type {boolean}
       */


      _this.expanded = _this.config.showExpand ? selectedCount > 0 : true;
      /**
       * True if all options are shown, false if some are hidden based on config
       * @type {boolean}
       */

      _this.allShown = false;
      return _this;
    }

    /**
     * The template to render, based on the control
     * @returns {string}
     * @override
     */
    FilterOptionsComponent.defaultTemplateName = function defaultTemplateName(config) {
      return "controls/filteroptions";
    };

    var _proto2 = FilterOptionsComponent.prototype;

    _proto2.setState = function setState(data) {
      var options = this.config.options;

      if (this.config.showMore && !this.allShown) {
        options = this.config.options.slice(0, this.config.showMoreLimit);
      }

      var selectedCount = this.config.getSelectedCount();

      _Component.prototype.setState.call(this, Object.assign({}, data, _objectSpread2({
        name: this.name.toLowerCase()
      }, this.config, {
        showReset: this.config.showReset && selectedCount > 0,
        expanded: this.expanded,
        allShown: this.allShown,
        selectedCount: selectedCount,
        isSingleOption: this.config.control === 'singleoption',
        options: options
      })));
    };

    _proto2.onMount = function onMount() {
      var _this2 = this;

      DOM.delegate(DOM.query(this._container, ".yxt-FilterOptions-options"), this.config.optionSelector, 'click', function (event) {
        _this2._updateOption(parseInt(event.target.dataset.index), event.target.checked);
      });
      var selectedCount = this.config.getSelectedCount(); // reset button

      if (this.config.showReset && selectedCount > 0) {
        DOM.on(DOM.query(this._container, '.yxt-FilterOptions-reset'), 'click', this.clearOptions.bind(this));
      } // show more/less button


      if (this.config.showMore) {
        DOM.on(DOM.query(this._container, '.yxt-FilterOptions-showToggle'), 'click', function () {
          _this2.allShown = !_this2.allShown;

          _this2.setState();
        });
      } // expand button


      if (this.config.showExpand) {
        var legend = DOM.query(this._container, '.yxt-FilterOptions-clickableLegend');
        DOM.on(legend, 'mousedown', function (click) {
          if (click.button === 0) {
            _this2.expanded = !_this2.expanded;

            _this2.setState();
          }
        });
        DOM.on(legend, 'keydown', function (key) {
          if (key.key === ' ' || key.key === 'Enter') {
            key.preventDefault();
            _this2.expanded = !_this2.expanded;

            _this2.setState();
          }
        });
      }
    };

    _proto2.clearOptions = function clearOptions() {
      this.config.options = this.config.options.map(function (o) {
        return Object.assign({}, o, {
          selected: false
        });
      });
      this.updateListeners();
      this.setState();
    };

    _proto2.updateListeners = function updateListeners() {
      var filter = this._buildFilter();

      if (this.config.storeOnChange) {
        this.core.setFilter(this.name, filter);
      }

      this.config.onChange(filter);
    };

    _proto2._updateOption = function _updateOption(index, selected) {
      if (this.config.control === 'singleoption') {
        this.config.options = this.config.options.map(function (o) {
          return Object.assign({}, o, {
            selected: false
          });
        });
      }

      this.config.options[index] = Object.assign({}, this.config.options[index], {
        selected: selected
      });
      this.updateListeners();
      this.setState();
    };

    _proto2.getFilter = function getFilter() {
      return this._buildFilter();
    }
    /**
     * Clear all options
     */
    ;

    _proto2.clear = function clear() {
      var elements = DOM.queryAll(this._container, this.config.optionSelector);
      elements.forEach(function (e) {
        return e.setAttribute('checked', 'false');
      });

      this._applyFilter();
    }
    /**
     * Build and return the Filter that represents the current state
     * @returns {Filter}
     * @private
     */
    ;

    _proto2._buildFilter = function _buildFilter() {
      var filters = this.config.options.filter(function (o) {
        return o.selected;
      }).map(function (o) {
        return o.filter ? o.filter : Filter.equal(o.field, o.value);
      });
      this.core.persistentStorage.set(this.name, this.config.options.filter(function (o) {
        return o.selected;
      }).map(function (o) {
        return o.label;
      }));
      return filters.length > 0 ? Filter.group.apply(Filter, filters) : {};
    };

    _createClass(FilterOptionsComponent, null, [{
      key: "type",
      get: function get() {
        return 'FilterOptions';
      }
    }]);

    return FilterOptionsComponent;
  }(Component);

  var RangeFilterComponent =
  /*#__PURE__*/
  function (_Component) {
    _inheritsLoose(RangeFilterComponent, _Component);

    function RangeFilterComponent(config, systemConfig) {
      var _this;

      if (config === void 0) {
        config = {};
      }

      if (systemConfig === void 0) {
        systemConfig = {};
      }

      _this = _Component.call(this, config, systemConfig) || this;
      /**
       * The field to filter on
       * @type {string}
       * @private
       */

      _this._field = config.field;
      /**
       * The callback function to call when the filter value changes
       * @type {function}
       * @private
       */

      _this._onChange = config.onChange || function () {};
      /**
       * If true, stores the filter to storage on each change
       * @type {boolean}
       * @private
       */


      _this._storeOnChange = config.storeOnChange === undefined ? true : config.storeOnChange;

      var minVal = _this.core.globalStorage.getState(_this.name + ".min");

      if (typeof minVal === 'string') {
        try {
          minVal = Number.parseInt(minVal);
        } catch (e) {}
      }

      var maxVal = _this.core.globalStorage.getState(_this.name + ".max");

      if (typeof minVal === 'string') {
        try {
          maxVal = Number.parseInt(maxVal);
        } catch (e) {}
      }
      /**
       * The current range represented
       * @type {object}
       * @private
       */


      _this._range = {
        min: minVal || config.initialMin || 0,
        max: maxVal || config.initialMax || 10
      };
      /**
       * The title to display for the range control
       * @type {string}
       * @private
       */

      _this._title = config.title;
      /**
       * The optional label to display for the min input
       * @type {string}
       * @private
       */

      _this._minLabel = config.minLabel || null;
      /**
       * The optional label to display for the max input
       * @type {string}
       * @private
       */

      _this._maxLabel = config.maxLabel || null;
      /**
       * The template to render
       * @type {string}
       * @private
       */

      _this._templateName = "controls/range";
      return _this;
    }

    var _proto = RangeFilterComponent.prototype;

    _proto.setState = function setState(data) {
      _Component.prototype.setState.call(this, Object.assign({}, data, {
        name: this.name,
        title: this._title,
        minLabel: this._minLabel,
        maxLabel: this._maxLabel,
        minValue: this._range.min,
        maxValue: this._range.max
      }));
    };

    _proto.onCreate = function onCreate() {
      var _this2 = this;

      DOM.delegate(this._container, '.js-yext-range', 'change', function (event) {
        _this2._updateRange(event.target.dataset.key, Number.parseInt(event.target.value));
      });
    };

    _proto.setMin = function setMin(value) {
      this._updateRange('min', value);
    };

    _proto.setMax = function setMax(value) {
      this._updateRange('max', value);
    };

    _proto.getFilter = function getFilter() {
      return this._buildFilter();
    }
    /**
     * Update the current range state
     * @param {string} key The range key to update
     * @param {number} value The new value for the key
     */
    ;

    _proto._updateRange = function _updateRange(key, value) {
      var _Object$assign;

      this._range = Object.assign({}, this._range, (_Object$assign = {}, _Object$assign[key] = value, _Object$assign));
      this.setState();

      var filter = this._buildFilter();

      if (this._storeOnChange) {
        this.core.setFilter(this.name, filter);
      }

      this.core.persistentStorage.set(this.name + ".min", this._range.min);
      this.core.persistentStorage.set(this.name + ".max", this._range.max);

      this._onChange(filter);
    }
    /**
     * Build the filter representation of the current state
     * @returns {Filter}
     */
    ;

    _proto._buildFilter = function _buildFilter() {
      return Filter.inclusiveRange(this._field, this._range.min, this._range.max);
    };

    _createClass(RangeFilterComponent, null, [{
      key: "type",
      get: function get() {
        return 'RangeFilter';
      }
    }]);

    return RangeFilterComponent;
  }(Component);

  /**
   * A filter for a range of dates
   */

  var DateRangeFilterComponent =
  /*#__PURE__*/
  function (_Component) {
    _inheritsLoose(DateRangeFilterComponent, _Component);

    function DateRangeFilterComponent(config, systemConfig) {
      var _this;

      if (config === void 0) {
        config = {};
      }

      if (systemConfig === void 0) {
        systemConfig = {};
      }

      _this = _Component.call(this, config, systemConfig) || this;
      /**
       * The api field this filter controls
       * @type {string}
       * @private
       */

      _this._field = config.field;
      /**
       * The title to display for the date range
       * @type {string}
       * @private
       */

      _this._title = config.title;
      /**
       * The optional label to show for the min date input
       * @type {string}
       * @private
       */

      _this._minLabel = config.minLabel || null;
      /**
       * The optional label to show for the max date input
       * @type {string}
       * @private
       */

      _this._maxLabel = config.maxLabel || null;
      /**
       * The callback used when a date is changed
       * @type {function}
       * @private
       */

      _this._onChange = config.onChange || function () {};
      /**
       * If true, stores the filter to storage on each change
       * @type {boolean}
       * @private
       */


      _this._storeOnChange = config.storeOnChange === undefined ? true : config.storeOnChange;
      /**
       * If true, this filter represents an exclusive range, rather than an inclusive one
       * @type {boolean}
       * @private
       */

      _this._isExclusive = config.isExclusive;
      /**
       * The template for this component
       * @private
       */

      _this._templateName = "controls/date";
      var today = new Date();
      var todayString = today.getFullYear() + "-" + ("" + (today.getMonth() + 1)).padStart(2, '0') + "-" + ("" + today.getDate()).padStart(2, '0');

      var minDate = _this.core.globalStorage.getState(_this.name + ".min");

      var maxDate = _this.core.globalStorage.getState(_this.name + ".max");
      /**
       * The current date range
       * @private
       */


      _this._date = {
        min: minDate || config.initialMin || todayString,
        max: maxDate || config.initialMax || todayString
      };
      return _this;
    }

    var _proto = DateRangeFilterComponent.prototype;

    _proto.setState = function setState(data) {
      _Component.prototype.setState.call(this, Object.assign({}, data, {
        name: this.name,
        title: this._title,
        minLabel: this._minLabel,
        maxLabel: this._maxLabel,
        dateMin: this._date.min,
        dateMax: this._date.max
      }));
    };

    _proto.onCreate = function onCreate() {
      var _this2 = this;

      DOM.delegate(this._container, '.js-yext-date', 'change', function (event) {
        _this2._updateRange(event.target.dataset.key, event.target.value);
      });
    }
    /**
     * Set the min date to the one provided
     * @param {string} date Date to set in yyyy-mm-dd string format
     */
    ;

    _proto.setMin = function setMin(date) {
      this._updateRange('min', date);
    }
    /**
     * Set the max date to the one provided
     * @param {string} date Date to set in yyyy-mm-dd string format
     */
    ;

    _proto.setMax = function setMax(date) {
      this._updateRange('max', date);
    };

    _proto.getFilter = function getFilter() {
      return this._buildFilter();
    }
    /**
     * Updates the current state of the date range
     * @param {string} key The key for the date value
     * @param {string} value The string date value
     * @private
     */
    ;

    _proto._updateRange = function _updateRange(key, value) {
      var _Object$assign;

      this._date = Object.assign({}, this._date, (_Object$assign = {}, _Object$assign[key] = value, _Object$assign));
      this.setState();

      var filter = this._buildFilter();

      if (this._storeOnChange) {
        this.core.setFilter(this.name, filter);
      }

      this.core.persistentStorage.set(this.name + ".min", this._date.min);
      this.core.persistentStorage.set(this.name + ".max", this._date.max);

      this._onChange(filter);
    }
    /**
     * Construct an api filter with the current date state
     * @private
     */
    ;

    _proto._buildFilter = function _buildFilter() {
      if (this._date.min === '' || this._date.max === '') {
        return {};
      }

      return this._isExclusive ? Filter.exclusiveRange(this._field, this._date.min, this._date.max) : Filter.inclusiveRange(this._field, this._date.min, this._date.max);
    };

    _createClass(DateRangeFilterComponent, null, [{
      key: "type",
      get: function get() {
        return 'DateRangeFilter';
      }
    }]);

    return DateRangeFilterComponent;
  }(Component);

  var FacetsConfig =
  /*#__PURE__*/
  function () {
    function FacetsConfig(config) {
      /**
       * The title to display above the controls
       * @type {string}
       */
      this.title = config.title || 'Filters';
      /**
       * If true, display the number of results next to each facet
       * @type {boolean}
       */

      this.showCount = config.showCount === undefined ? true : config.showCount;
      /**
       * If true, trigger a search on each change to a filter
       * @type {boolean}
       */

      this.searchOnChange = config.searchOnChange || false;
      /**
       * If true, show a button to reset for each facet group
       * @type {boolean}
       */

      this.resetFacet = config.resetFacet || false;
      /**
       * The label to show for the reset button
       * @type {string}
       */

      this.resetFacetLabel = config.resetFacetLabel || 'reset';
      /**
       * If true, show a "reset all" button to reset all facets
       * @type {boolean}
       */

      this.resetFacets = config.resetFacets === undefined ? true : config.resetFacets;
      /**
       * The label to show for the "reset all" button
       * @type {string}
       */

      this.resetFacetsLabel = config.resetFacetsLabel || 'reset all';
      /**
       * The max number of facets to show before displaying "show more"/"show less"
       * @type {number}
       */

      this.showMoreLimit = config.showMoreLimit || 5;
      /**
       * The label to show for displaying more facets
       * @type {string}
       */

      this.showMoreLabel = config.showMoreLabel || 'show more';
      /**
       * The label to show for displaying less facets
       * @type {string}
       */

      this.showLessLabel = config.showLessLabel || 'show less';
      /**
       * If true, enable hiding excess facets in each group with a "show more"/"show less" button
       * @type {boolean}
       */

      this.showMore = config.showMore === undefined ? true : config.showMore;
      /**
       * If true, allow expanding and collapsing each group of facets
       * @type {boolean}
       */

      this.expand = config.expand === undefined ? true : config.expand;
      /**
       * If true, display the number of currently applied filters when collapsed
       * @type {boolean}
       */

      this.showNumberApplied = config.showNumberApplied === undefined ? true : config.showNumberApplied;
      /**
       * Text to display on the apply button
       * @type {string}
       */

      this.applyLabel = config.applyLabel || 'apply';
      /**
       * The controls to use for each field. Each type of filter has a default
       * $eq : multioption (checkbox)
       * @type {Object}
       */

      this.fieldControls = config.fieldControls || {};
      /**
       * The selector of the apply button
       * @type {string}
       * @private
       */

      this.applyButtonSelector = config.applyButtonSelector || null;
      this.validate();
    }

    var _proto = FacetsConfig.prototype;

    _proto.validate = function validate() {};

    return FacetsConfig;
  }();
  /**
   * Displays a set of dynamic filters returned from the backend
   * @extends Component
   */


  var FacetsComponent =
  /*#__PURE__*/
  function (_Component) {
    _inheritsLoose(FacetsComponent, _Component);

    function FacetsComponent(config, systemConfig) {
      var _this;

      if (config === void 0) {
        config = {};
      }

      if (systemConfig === void 0) {
        systemConfig = {};
      }

      _this = _Component.call(this, config, systemConfig) || this;
      _this.config = new FacetsConfig(config);
      /**
       * The vertical key for the search
       * @type {string}
       * @private
       */

      _this._verticalKey = config.verticalKey; // config.verticalKey || null;

      /**
       * The selector of the apply button
       * @type {string}
       * @private
       */

      _this._applyButtonSelector = config.applyButtonSelector || null;
      /**
       * An internal reference for the data storage to listen for updates from the server
       * @type {string}
       */

      _this.moduleId = StorageKeys.DYNAMIC_FILTERS;
      /**
       * The filter box that displays the dynamic filters
       * @type {FilterBoxComponent}
       * @private
       */

      _this._filterbox = null;
      return _this;
    }

    /**
     * The template to render
     * @returns {string}
     * @override
     */
    FacetsComponent.defaultTemplateName = function defaultTemplateName() {
      return 'filters/facets';
    };

    var _proto2 = FacetsComponent.prototype;

    _proto2.remove = function remove() {
      if (this._filterbox) {
        this._filterbox.remove();
      }

      _Component.prototype.remove.call(this);
    };

    _proto2.onMount = function onMount() {
      var _this2 = this;

      this.core.enableDynamicFilters();

      if (this._filterbox) {
        this._filterbox.remove();
      }

      var _this$_state$get = this._state.get(),
          filters = _this$_state$get.filters;

      if (!filters) {
        return;
      }

      filters = filters.map(function (f) {
        return Object.assign({}, f, {
          type: 'FilterOptions',
          control: _this2.config.fieldControls[f.fieldId] || 'multioption'
        });
      });
      this._filterbox = this.componentManager.create('FilterBox', Object.assign({}, this.config, {
        parentContainer: this._container,
        name: this.name + ".filterbox",
        container: '.js-yxt-Facets',
        verticalKey: this._verticalKey,
        resetFilter: this.config.resetFacet,
        resetFilters: this.config.resetFacets,
        resetFilterLabel: this.config.resetFacetLabel,
        resetFiltersLabel: this.config.resetFacetsLabel,
        isDynamic: true,
        filters: filters
      }));

      this._filterbox.mount();
    };

    _createClass(FacetsComponent, null, [{
      key: "type",
      get: function get() {
        return 'Facets';
      }
    }]);

    return FacetsComponent;
  }(Component);

  var METERS_PER_MILE = 1609.344;
  var DEFAULT_CONFIG = {
    /**
     * The radius, in miles, around the user's location to find results.
     * If location accuracy is low, a larger radius may be used automatically
     * @type {number}
     */
    radius: 50,

    /**
     * The vertical key to use
     * @type {string}
     */
    verticalKey: null,

    /**
     * If true, submits a search when the value is changed
     * @type {boolean}
     */
    searchOnChange: false,

    /**
     * The title to display
     * @type {string}
     */
    title: 'Location',

    /**
     * The label to display
     * @type {string}
     */
    label: 'Location',

    /**
     * The icon url to show in the geo button
     * @type {string}
     */
    geoButtonIcon: '',

    /**
     * The text to show in the geo button
     * @type {string}
     */
    geoButtonText: 'Use My Location',

    /**
     * The text to show when geolocation is enabled
     * @type {string}
     */
    enabledText: 'Current Location',

    /**
     * The text to show when loading the user's location
     * @type {string}
     */
    loadingText: 'Finding Your Location...',

    /**
     * The text to show if the user's location cannot be found
     * @type {string}
     */
    errorText: 'Could Not Find Your Location',

    /**
     * The CSS selector of the toggle button
     * @type {string}
     */
    buttonSelector: '.js-yxt-GeoLocationFilter-button',

    /**
     * The CSS selector of the query input
     * @type {string}
     */
    inputSelector: '.js-yxt-GeoLocationFilter-input'
  };
  /**
   * Renders a button that when clicked adds a static filter representing the user's location
   * @extends Component
   */

  var GeoLocationComponent =
  /*#__PURE__*/
  function (_Component) {
    _inheritsLoose(GeoLocationComponent, _Component);

    function GeoLocationComponent(config, systemConfig) {
      var _this;

      if (config === void 0) {
        config = {};
      }

      if (systemConfig === void 0) {
        systemConfig = {};
      }

      _this = _Component.call(this, _objectSpread2({}, DEFAULT_CONFIG, {}, config), systemConfig) || this;
      /**
       * The query string to use for the input box, provided to template for rendering.
       * @type {string}
       */

      _this.query = _this.core.globalStorage.getState(StorageKeys.QUERY + "." + _this.name) || '';

      _this.core.globalStorage.on('update', StorageKeys.QUERY + "." + _this.name, function (q) {
        _this.query = q;

        _this.setState();
      });
      /**
       * The filter to use for the current query
       * @type {Filter}
       */


      _this.filter = _this.core.globalStorage.getState(StorageKeys.FILTER + "." + _this.name) || {};

      if (typeof _this.filter === 'string') {
        try {
          _this.filter = JSON.parse(_this.filter);
        } catch (e) {}
      }

      _this.core.globalStorage.on('update', StorageKeys.FILTER + "." + _this.name, function (f) {
        _this.filter = f;
      });

      _this.searchParameters = buildSearchParameters(config.searchParameters);
      return _this;
    }

    GeoLocationComponent.defaultTemplateName = function defaultTemplateName() {
      return 'controls/geolocation';
    };

    var _proto = GeoLocationComponent.prototype;

    _proto.setState = function setState(data) {
      var placeholder = '';

      if (this._enabled) {
        placeholder = this._config.enabledText;
      }

      if (data.geoLoading) {
        placeholder = this._config.loadingText;
      }

      if (data.geoError) {
        placeholder = this._config.errorText;
      }

      _Component.prototype.setState.call(this, _objectSpread2({}, data, {
        title: this._config.title,
        geoEnabled: this._enabled,
        query: this.query,
        labelText: this._config.label,
        enabledText: this._config.enabledText,
        loadingText: this._config.loadingText,
        errorText: this._config.errorText,
        geoButtonIcon: this._config.geoButtonIcon,
        geoValue: this._enabled || data.geoLoading || data.geoError ? '' : this.query,
        geoPlaceholder: placeholder,
        geoButtonText: this._config.geoButtonText
      }));
    };

    _proto.onMount = function onMount() {
      var _this2 = this;

      if (this._autocomplete) {
        this._autocomplete.remove();
      }

      this._initAutoComplete(this._config.inputSelector);

      DOM.on(this._config.buttonSelector, 'click', function () {
        return _this2._toggleGeoFilter();
      });
    }
    /**
     * A helper method to wire up our auto complete on an input selector
     * @param {string} inputSelector CSS selector to bind our auto complete component to
     * @private
     */
    ;

    _proto._initAutoComplete = function _initAutoComplete(inputSelector) {
      var _this3 = this;

      if (this._autocomplete) {
        this._autocomplete.remove();
      }

      this._autocomplete = this.componentManager.create('AutoComplete', {
        parentContainer: this._container,
        name: this.name + ".autocomplete",
        isFilterSearch: true,
        container: '.js-yxt-GeoLocationFilter-autocomplete',
        originalQuery: this.query,
        originalFilter: this.filter,
        inputEl: inputSelector,
        verticalKey: this._config.verticalKey,
        searchParameters: this.searchParameters,
        onSubmit: function onSubmit(query, filter) {
          _this3.query = query;
          _this3.filter = Filter.fromResponse(filter);

          _this3._saveDataToStorage(query, _this3.filter);

          _this3._enabled = false;
        }
      });
    }
    /**
     * Toggles the static filter representing the user's location
     * @private
     */
    ;

    _proto._toggleGeoFilter = function _toggleGeoFilter() {
      var _this4 = this;

      if (!navigator.geolocation) {
        this.setState({
          geoError: true
        });
        return;
      }

      if (!this._enabled) {
        this.setState({
          geoLoading: true
        });
        navigator.geolocation.getCurrentPosition(function (position) {
          var filter = _this4._buildFilter(position);

          _this4._saveDataToStorage('', filter, position);

          _this4._enabled = true;

          _this4.setState({});

          _this4.core.persistentStorage["delete"](StorageKeys.QUERY + "." + _this4.name);

          _this4.core.persistentStorage["delete"](StorageKeys.FILTER + "." + _this4.name);
        }, function () {
          return _this4.setState({
            geoError: true
          });
        });
      }
    }
    /**
     * Saves the provided filter under this component's name
     * @param {string} query The query to save
     * @param {Filter} filter The filter to save
     * @param {Object} position The position to save
     * @private
     */
    ;

    _proto._saveDataToStorage = function _saveDataToStorage(query, filter, position) {
      this.core.persistentStorage.set(StorageKeys.QUERY + "." + this.name, query);
      this.core.persistentStorage.set(StorageKeys.FILTER + "." + this.name, filter);
      this.core.setFilter(this.name, filter);

      if (position) {
        this.core.globalStorage.set(StorageKeys.GEOLOCATION, {
          lat: position.coords.latitude,
          lng: position.coords.longitude,
          radius: position.coords.accuracy
        });
      }

      if (this._config.searchOnChange) {
        var filters = this.core.globalStorage.getAll(StorageKeys.FILTER);
        var totalFilter = filters[0];

        if (filters.length > 1) {
          totalFilter = Filter.and.apply(Filter, filters);
        }

        var searchQuery = this.core.globalStorage.getState(StorageKeys.QUERY) || '';
        var facetFilter = this.core.globalStorage.getAll(StorageKeys.FACET_FILTER)[0];
        this.core.persistentStorage["delete"](StorageKeys.SEARCH_OFFSET);
        this.core.globalStorage["delete"](StorageKeys.SEARCH_OFFSET);
        this.core.verticalSearch(this._config.verticalKey, {
          input: searchQuery,
          filter: JSON.stringify(totalFilter),
          facetFilter: JSON.stringify(facetFilter)
        });
      }
    }
    /**
     * Given a position, construct a Filter object
     * @param {Postition} position The position
     * @returns {Filter}
     * @private
     */
    ;

    _proto._buildFilter = function _buildFilter(position) {
      var _position$coords = position.coords,
          latitude = _position$coords.latitude,
          longitude = _position$coords.longitude,
          accuracy = _position$coords.accuracy;
      var radius = Math.max(accuracy, this._config.radius * METERS_PER_MILE);
      return Filter.position(latitude, longitude, radius);
    };

    _createClass(GeoLocationComponent, null, [{
      key: "type",
      get: function get() {
        return 'GeoLocationFilter';
      }
    }]);

    return GeoLocationComponent;
  }(Component);

  /**
   * Renders configuration options for sorting Vertical Results.
   * TODO: how to deal with multiple instances of this component (and filters in general),
   * ideally "identical" filters/sorts would be synced up.
   */

  var SortOptionsComponent =
  /*#__PURE__*/
  function (_Component) {
    _inheritsLoose(SortOptionsComponent, _Component);

    function SortOptionsComponent(config, systemConfig) {
      var _this;

      if (config === void 0) {
        config = {};
      }

      if (systemConfig === void 0) {
        systemConfig = {};
      }

      _this = _Component.call(this, assignDefaults(config), systemConfig) || this;
      _this.options = _this._config.options;
      _this.selectedOptionIndex = parseInt(_this.core.globalStorage.getState(_this.name)) || 0;
      _this.options[_this.selectedOptionIndex].isSelected = true;
      _this.hideExcessOptions = _this._config.showMore && _this.selectedOptionIndex <= _this._config.showMoreLimit;
      _this.showReset = _this._config.showReset && _this.selectedOptionIndex !== 0;
      return _this;
    }

    var _proto = SortOptionsComponent.prototype;

    _proto.setState = function setState(data) {
      var options = this.options;

      if (this.hideExcessOptions) {
        options = this.options.slice(0, this._config.showMoreLimit);
      }

      _Component.prototype.setState.call(this, Object.assign({}, data, {
        options: options,
        hideExcessOptions: this.hideExcessOptions,
        name: this.name,
        showReset: this.showReset
      }));
    };

    _proto.onMount = function onMount() {
      var _this2 = this;

      // Handle radio button selections
      DOM.on(DOM.query(this._container, '.yxt-SortOptions-fieldSet'), 'change', function (evt) {
        return _this2.handleOptionSelection(parseInt(evt.target.value));
      }); // Register more/less button

      if (this._config.showMore) {
        DOM.on(DOM.query(this._container, '.yxt-SortOptions-showToggle'), 'click', function () {
          _this2.hideExcessOptions = !_this2.hideExcessOptions;

          _this2.setState();
        });
      } // Register show reset button


      if (this.showReset) {
        DOM.on(DOM.query(this._container, '.yxt-SortOptions-reset'), 'click', function () {
          return _this2.handleOptionSelection(0);
        });
      } // Register apply button


      if (!this._config.searchOnChange) {
        DOM.on(DOM.query(this._container, '.yxt-SortOptions-apply'), 'click', function () {
          return _this2._sortResults();
        });
      }
    };

    _proto.handleOptionSelection = function handleOptionSelection(optionIndex) {
      this._updateSelectedOption(optionIndex);

      if (this._config.searchOnChange) {
        this._sortResults();
      }
    };

    _proto._updateSelectedOption = function _updateSelectedOption(optionIndex) {
      this.options[this.selectedOptionIndex].isSelected = false;
      this.options[optionIndex].isSelected = true;
      this.selectedOptionIndex = optionIndex;
      this.showReset = this._config.showReset && optionIndex !== 0;
      this.setState();
    };

    _proto._sortResults = function _sortResults() {
      var optionIndex = this.selectedOptionIndex;
      var option = this.options[optionIndex]; // searchOnChange really means sort on change here, just that the sort is done through a search,
      // This was done to have a consistent option name between filters.

      this.core.persistentStorage.set(this.name, optionIndex);

      if (this._config.storeOnChange && optionIndex === 0) {
        this.core.clearSortBys();
      } else if (this._config.storeOnChange) {
        this.core.setSortBys(option);
      }

      this._search();

      this._config.onChange(option);

      this.setState();
    }
    /**
     * Trigger a search with all filters in storage
     */
    ;

    _proto._search = function _search() {
      var allFilters = this.core.globalStorage.getAll(StorageKeys.FILTER);
      var totalFilter = allFilters.length > 1 ? Filter.and.apply(Filter, allFilters) : allFilters[0];
      var input = this.core.globalStorage.getState(StorageKeys.QUERY) || '';
      var facetFilter = this.core.globalStorage.getAll(StorageKeys.FACET_FILTER)[0];
      this.core.persistentStorage["delete"](StorageKeys.SEARCH_OFFSET);
      this.core.globalStorage["delete"](StorageKeys.SEARCH_OFFSET);
      this.core.verticalSearch(this._config.verticalKey, {
        input: input,
        filter: JSON.stringify(totalFilter),
        facetFilter: JSON.stringify(facetFilter)
      });
    };

    SortOptionsComponent.defaultTemplateName = function defaultTemplateName() {
      return 'controls/sortoptions';
    };

    _createClass(SortOptionsComponent, null, [{
      key: "type",
      get: function get() {
        return 'SortOptions';
      }
    }]);

    return SortOptionsComponent;
  }(Component);

  function assignDefaults(config) {
    var updatedConfig = Object.assign({}, config); // Optional, The label used for the “default” sort (aka the sort specified by the experience config").

    updatedConfig.defaultSortLabel = config.defaultSortLabel || 'Best Match'; // Array of search options, where an option has type, label, and if is type FIELD also a label and direction

    if (!config.options) {
      throw new AnswersBasicError('config.options are required', 'SortOptions');
    }

    var OPTION_TYPES = ['FIELD', 'RELEVANCE', 'ENTITY_DISTANCE'];

    if (!Array.isArray(config.options)) {
      throw new AnswersBasicError('options must be an array of objects', 'SortOptions');
    }

    updatedConfig.options = config.options.map(function (option) {
      if (!option.label || !option.type) {
        throw new AnswersBasicError("option.label and option.type are required option " + option, 'SortOptions');
      }

      var newOption = {
        isSelected: false
      };
      newOption.label = option.label;
      newOption.type = option.type;
      var isField = OPTION_TYPES.indexOf(newOption.type) === 0;

      if (isField && option.field && option.direction) {
        newOption.field = option.field;
        newOption.direction = option.direction;
      } else if (isField) {
        throw new AnswersBasicError("option.field and option.direction are required for option: " + option, 'SortOptions');
      }

      return newOption;
    }); // Add default option to the front of the options array

    updatedConfig.options.unshift({
      label: updatedConfig.defaultSortLabel,
      isSelected: false
    }); // Optional, the selector used for options in the template

    updatedConfig.optionSelector = config.optionSelector || 'yxt-SortOptions-optionSelector'; // Optional, if true, triggers a search on each change to a filter,
    // if false the component also renders an apply button, defaults to false

    updatedConfig.searchOnChange = config.searchOnChange === undefined ? true : config.searchOnChange; // Optional, show a reset button. Clicking it will always return the user to the default sorting option.

    updatedConfig.showReset = config.showReset || false; // Optional, the label to use for the reset button

    updatedConfig.resetLabel = config.resetLabel || 'reset'; // Optional, the max number of filter options to show before collapsing extras

    updatedConfig.showMoreLimit = config.showMoreLimit || 5; // Optional, allow collapsing excess sort options after a limit

    updatedConfig.showMore = config.showMore === undefined ? true : config.showMore;
    updatedConfig.showMore = updatedConfig.showMore && updatedConfig.options.length > updatedConfig.showMoreLimit; // Optional, the label to show for displaying more options

    updatedConfig.showMoreLabel = config.showMoreLabel || 'Show more'; // Optional, the label to show for displaying less options

    updatedConfig.showLessLabel = config.showLessLabel || 'Show less'; // Optional, the callback function to call when changed

    updatedConfig.onChange = config.onChange || function () {}; // Optional, Top title for the sorting component


    updatedConfig.label = config.label || 'Sorting'; // Optional, when true component does not update globalStorage
    // possibly delegating that to a higher-order/composite component

    updatedConfig.storeOnChange = config.storeOnChange === undefined ? true : config.storeOnChange;
    updatedConfig.applyLabel = config.applyLabel || 'Apply';
    updatedConfig.verticalKey = config.verticalKey || this.core.globalStorage.getState(StorageKeys.SEARCH_CONFIG).verticalKey;

    if (!updatedConfig.verticalKey) {
      throw new AnswersBasicError('vertical key is required', 'SortOptions');
    } // note: showExpand and showNumberApplied explicitly not included, on the grounds that
    // sorting should always be exposed to the user if added.


    return updatedConfig;
  }

  /**
   * EventTypes are explicit strings defined
   * for what the server expects for analytics.
   *
   * @enum
   */

  var EventTypes = {
    THUMBS_UP: 'THUMBS_UP',
    THUMBS_DOWN: 'THUMBS_DOWN'
  };

  var DirectAnswerComponent =
  /*#__PURE__*/
  function (_Component) {
    _inheritsLoose(DirectAnswerComponent, _Component);

    function DirectAnswerComponent(config, systemConfig) {
      var _this;

      if (config === void 0) {
        config = {};
      }

      if (systemConfig === void 0) {
        systemConfig = {};
      }

      _this = _Component.call(this, config, systemConfig) || this;
      /**
       * Recieve updates from storage based on this index
       * @type {StorageKey}
       */

      _this.moduleId = StorageKeys.DIRECT_ANSWER;
      /**
       * The form used for submitting the feedback
       * @type {string}
       */

      _this._formEl = config.formEl || '.js-directAnswer-feedback-form';
      /**
       * The `thumbs up` css selector to bind ui interaction to for reporting
       * @type {string}
       */

      _this._thumbsUpSelector = config.thumbsUpSelector || '.js-directAnswer-thumbUp';
      /**
       * The `thumbs down` css selector to bind ui interaction to for reporting
       * @type {string}
       */

      _this._thumbsDownSelector = config.thumbsDownSelector || '.js-directAnswer-thumbDown';
      /**
       * The display text for the View Details click to action link
       * @type {string}
       */

      _this._viewDetailsText = config.viewDetailsText || 'View Details';
      return _this;
    }

    /**
     * The template to render
     * @returns {string}
     * @override
     */
    DirectAnswerComponent.defaultTemplateName = function defaultTemplateName(config) {
      return 'results/directanswer';
    }
    /**
     * beforeMount, only display the direct answer component if it has data
     */
    ;

    var _proto = DirectAnswerComponent.prototype;

    _proto.beforeMount = function beforeMount() {
      if (!this.hasState('answer')) {
        return false;
      }

      return true;
    }
    /**
     * When the DOM is constructed,
     * we want to wire up the behavior for interacting with the quality feedback reporting (thumbsup/down)
     */
    ;

    _proto.onMount = function onMount() {
      var _this2 = this;

      // Avoid bindings if the feedback has previously been submitted
      if (this.getState('feedbackSubmitted') === true) {
        return this;
      } // For WCAG compliance, the feedback should be a submittable form


      DOM.on(this._formEl, 'submit', function (e) {
        var formEl = e.target;
        var checkedValue = DOM.query(formEl, 'input:checked').value === 'true';

        _this2.reportQuality(checkedValue);

        _this2.updateState({
          'feedbackSubmitted': true
        });
      }); // Is this actually necessary? I guess it's only necessary if the
      // submit button is hidden.

      DOM.on(this._thumbsUpSelector, 'click', function () {
        DOM.trigger(_this2._formEl, 'submit');
      });
      DOM.on(this._thumbsDownSelector, 'click', function () {
        DOM.trigger(_this2._formEl, 'submit');
      });
    }
    /**
     * updateState enables for partial updates (the delta between the old and new)
     * @type {object} The new state to apply to the old
     */
    ;

    _proto.updateState = function updateState(state) {
      if (state === void 0) {
        state = {};
      }

      var newState = Object.assign({}, this.getState(), state);
      this.setState(newState);
    };

    _proto.setState = function setState(data) {
      return _Component.prototype.setState.call(this, Object.assign({}, data, {
        eventOptions: this.eventOptions(data),
        viewDetailsText: this._viewDetailsText
      }));
    };

    _proto.eventOptions = function eventOptions(data) {
      if (!data || Object.keys(data).length === 0) {
        return data;
      }

      return JSON.stringify({
        verticalConfigId: data.relatedItem.verticalConfigId,
        searcher: 'UNIVERSAL',
        entityId: data.relatedItem.data.id,
        ctaLabel: this._viewDetailsText.toUpperCase().replace(' ', '_')
      });
    }
    /**
     * reportQuality will send the quality feedback to analytics
     * @param {boolean} isGood true if the answer is what you were looking for
     */
    ;

    _proto.reportQuality = function reportQuality(isGood) {
      var eventType = isGood === true ? EventTypes.THUMBS_UP : EventTypes.THUMBS_DOWN;
      var event = new AnalyticsEvent(eventType).addOptions({
        'directAnswer': true
      });
      this.analyticsReporter.report(event);
    };

    _createClass(DirectAnswerComponent, null, [{
      key: "type",
      get: function get() {
        return 'DirectAnswer';
      }
    }]);

    return DirectAnswerComponent;
  }(Component);

  var ResultsItemComponent =
  /*#__PURE__*/
  function (_Component) {
    _inheritsLoose(ResultsItemComponent, _Component);

    function ResultsItemComponent(opts, systemConfig) {
      var _this;

      if (opts === void 0) {
        opts = {};
      }

      if (systemConfig === void 0) {
        systemConfig = {};
      }

      _this = _Component.call(this, opts, systemConfig) || this;
      /**
       * verticalConfigId used for analytics and passed to children
       * @type {string}
       * @private
       */

      _this._verticalConfigId = opts.verticalConfigId;
      /**
       * isUniversal is used for analytics and passed to children and is set to
       * true if this component is added by the UniversalResultsComponent
       * @type {boolean}
       * @private
       */

      _this._isUniversal = opts.isUniversal || false;
      return _this;
    }

    /**
     * The template to render
     * @returns {string}
     * @override
     */
    ResultsItemComponent.defaultTemplateName = function defaultTemplateName(config) {
      return 'results/resultsitem';
    };

    ResultsItemComponent.areDuplicateNamesAllowed = function areDuplicateNamesAllowed() {
      return true;
    }
    /**
     * helper to construct the eventOptions object for the title link
     * @param entityId The ID of the result item, if present
     * @param url The url of the result item, if present
     * @returns {string}
     */
    ;

    var _proto = ResultsItemComponent.prototype;

    _proto.eventOptions = function eventOptions(entityId, url) {
      var options = {
        verticalConfigId: this._verticalConfigId,
        searcher: this._isUniversal ? 'UNIVERSAL' : 'VERTICAL'
      };

      if (entityId) {
        options.entityId = entityId;
      } else {
        options.url = url;
      }

      return JSON.stringify(options);
    }
    /**
     * passes eventOptions to the viewModel
     * @override
     * @param data
     * @returns {ResultsItemComponent}
     */
    ;

    _proto.setState = function setState(data) {
      return _Component.prototype.setState.call(this, Object.assign(data, {
        eventOptions: this.eventOptions(data.id, data.link)
      }));
    };

    _createClass(ResultsItemComponent, null, [{
      key: "type",
      get: function get() {
        return 'ResultsItemComponent';
      }
    }]);

    return ResultsItemComponent;
  }(Component);

  var LocationResultsItemComponent =
  /*#__PURE__*/
  function (_ResultsItemComponent) {
    _inheritsLoose(LocationResultsItemComponent, _ResultsItemComponent);

    function LocationResultsItemComponent(opts, systemConfig) {
      if (opts === void 0) {
        opts = {};
      }

      if (systemConfig === void 0) {
        systemConfig = {};
      }

      return _ResultsItemComponent.call(this, opts, systemConfig) || this;
    }

    /**
     * The template to render
     * @returns {string}
     * @override
     */
    LocationResultsItemComponent.defaultTemplateName = function defaultTemplateName(config) {
      return 'results/locationresultsitem';
    };

    LocationResultsItemComponent.areDuplicateNamesAllowed = function areDuplicateNamesAllowed() {
      return true;
    };

    _createClass(LocationResultsItemComponent, null, [{
      key: "type",
      get: function get() {
        return 'LocationResultsItemComponent';
      }
    }]);

    return LocationResultsItemComponent;
  }(ResultsItemComponent);

  var EventResultsItemComponent =
  /*#__PURE__*/
  function (_ResultsItemComponent) {
    _inheritsLoose(EventResultsItemComponent, _ResultsItemComponent);

    function EventResultsItemComponent(opts, systemConfig) {
      if (opts === void 0) {
        opts = {};
      }

      if (systemConfig === void 0) {
        systemConfig = {};
      }

      return _ResultsItemComponent.call(this, opts, systemConfig) || this;
    }

    /**
     * The template to render
     * @returns {string}
     * @override
     */
    EventResultsItemComponent.defaultTemplateName = function defaultTemplateName(config) {
      return 'results/eventresultsitem';
    };

    EventResultsItemComponent.areDuplicateNamesAllowed = function areDuplicateNamesAllowed() {
      return true;
    };

    _createClass(EventResultsItemComponent, null, [{
      key: "type",
      get: function get() {
        return 'EventResultsItemComponent';
      }
    }]);

    return EventResultsItemComponent;
  }(ResultsItemComponent);

  var PeopleResultsItemComponent =
  /*#__PURE__*/
  function (_ResultsItemComponent) {
    _inheritsLoose(PeopleResultsItemComponent, _ResultsItemComponent);

    function PeopleResultsItemComponent(opts, systemOpts) {
      if (opts === void 0) {
        opts = {};
      }

      if (systemOpts === void 0) {
        systemOpts = {};
      }

      return _ResultsItemComponent.call(this, opts, systemOpts) || this;
    }

    /**
     * The template to render
     * @returns {string}
     * @override
     */
    PeopleResultsItemComponent.defaultTemplateName = function defaultTemplateName(config) {
      return 'results/peopleresultsitem';
    };

    PeopleResultsItemComponent.areDuplicateNamesAllowed = function areDuplicateNamesAllowed() {
      return true;
    };

    _createClass(PeopleResultsItemComponent, null, [{
      key: "type",
      get: function get() {
        return 'PeopleResultsItemComponent';
      }
    }]);

    return PeopleResultsItemComponent;
  }(ResultsItemComponent);

  /** @module MapProvider */

  /**
   * A MapProvider is an interface that represents that should be implemented
   * in order to integrate with a Third Party Map provider for
   * interactive maps. MapProviders are used by the MapComponent.
   *
   * Implementations should extend this interface.
   */
  var MapProvider =
  /*#__PURE__*/
  function () {
    function MapProvider(config) {
      if (config === void 0) {
        config = {};
      }

      /**
       * The API Key used for interacting with the map provider
       * @type {string}
       */
      this._apiKey = config.apiKey;
      /**
       * The zoom level of the map, defaults to 14
       * @type {number}
       */

      this._zoom = config.zoom || 14;
      /**
       * The default coordinates to display if there are no results returned
       * Only used if showEmptyMap is set to true
       * @type {Object}
       */

      this._defaultPosition = config.defaultPosition || {
        lat: 37.0902,
        lng: -95.7129
      };
      /**
       * Determines if an empty map should be shown when there are no results
       * @type {boolean}
       */

      this._showEmptyMap = config.showEmptyMap || false;
      /**
       * A reference to the underlying map instance, created by the external lib.
       * @type {number}
       */

      this._map = null;
      /**
       * Temporary boolean tracking whether or not the external JS library is loaded (see TODO below)
       * @type {boolean}
       */

      this._isLoaded = false;
      /**
       * Callback to invoke when a pin is clicked. The clicked item(s) are passed to the callback
       * @type {function}
       */

      this._onPinClick = config.onPinClick || null;
      /**
       * Callback to invoke once the Javascript is loaded
       * @type {function}
       */

      this._onLoaded = config.onLoaded || function () {};
      /**
       * The custom configuration override to use for the map markers
       * @type {Object|Function}
       */


      this._pinConfig = typeof config.pin === 'function' ? config.pin : Object.assign(MapProvider.DEFAULT_PIN_CONFIG, config.pin);
      /**
       * Determines whether or not to collapse pins at the same lat/lng
       * @type {boolean}
       */

      this._collapsePins = config.collapsePins || false;
    }
    /**
     * The default configuration to use for the map markers
     * @type {Object}
     * TODO(billy) Create a configuration model
     */


    var _proto = MapProvider.prototype;

    _proto.onLoaded = function onLoaded(cb) {
      if (typeof cb !== 'function') {
        return;
      }

      this._onLoaded = cb;

      if (this.isLoaded()) {
        this._onLoaded();
      }
    };

    _proto.isLoaded = function isLoaded() {
      return this._isLoaded;
    };

    _proto.loadJS = function loadJS() {
      throw new Error('Unimplemented Method: loadJS');
    };

    _proto.init = function init(mapData) {
      // TODO(billy) This should be based off a promise that gets created from loadJS
      throw new Error('Unimplemented Method: init');
    }
    /**
     * Given a list of markers, combine markers with the same lat/lng into a single marker
     * @param {object[]} markers The markers to collapse
     */
    ;

    _proto._collapseMarkers = function _collapseMarkers(markers) {
      var locationToItem = {};
      markers.forEach(function (m) {
        locationToItem["" + m.latitude + m.longitude] ? locationToItem["" + m.latitude + m.longitude].push(m) : locationToItem["" + m.latitude + m.longitude] = [m];
      });
      var collapsedMarkers = [];

      for (var _i = 0, _Object$entries = Object.entries(locationToItem); _i < _Object$entries.length; _i++) {
        var _Object$entries$_i = _Object$entries[_i],
            _markers = _Object$entries$_i[1];

        if (_markers.length > 1) {
          var collapsedMarker = {
            item: _markers.map(function (m) {
              return m.item;
            }),
            label: _markers.length,
            latitude: _markers[0].latitude,
            longitude: _markers[0].longitude
          };
          collapsedMarkers.push(collapsedMarker);
        } else {
          collapsedMarkers.push(_markers[0]);
        }
      }

      return collapsedMarkers;
    };

    _createClass(MapProvider, null, [{
      key: "DEFAULT_PIN_CONFIG",
      get: function get() {
        return {
          icon: {
            anchor: null,
            // e.g. { x: 1, y: 1 }
            svg: null,
            url: null,
            scaledSize: null // e.g. { w: 20, h: 20 }

          },
          labelType: 'numeric'
        };
      }
    }]);

    return MapProvider;
  }();

  /* global google */

  /**
   * GoogleMapProvider is an implementation of a MapProvider
   * that handles the integration with the third party API to expose maps.
   * @extends MapProvider
   */

  var GoogleMapProvider =
  /*#__PURE__*/
  function (_MapProvider) {
    _inheritsLoose(GoogleMapProvider, _MapProvider);

    function GoogleMapProvider(opts) {
      var _this;

      _this = _MapProvider.call(this, opts) || this; // normalize because google's zoom is effectively 1 unit of difference away from mapbox zoom

      _this._zoomOffset = 1;
      _this._zoom += _this._zoomOffset;
      _this._clientId = opts.clientId;
      _this._signature = opts.signature;

      if (!_this.hasValidClientCredentials() && !_this._apiKey) {
        throw new Error('GoogleMapsProvider: Missing `apiKey` or {`clientId`, `signature`}');
      }

      return _this;
    }

    var _proto = GoogleMapProvider.prototype;

    _proto.loadJS = function loadJS(onLoad) {
      var _this2 = this;

      if (DOM.query('#yext-map-js')) {
        this._isLoaded = true;

        if (typeof onLoad === 'function') {
          onLoad();
        }

        return;
      }

      var script = DOM.createEl('script', {
        id: 'yext-map-js',
        onload: function onload() {
          _this2._isLoaded = true;

          _this2._onLoaded();
        },
        async: true,
        src: "https://maps.googleapis.com/maps/api/js?" + this.generateCredentials()
      });
      DOM.append('body', script);
    };

    _proto.generateCredentials = function generateCredentials() {
      if (this.hasValidClientCredentials()) {
        return "client=" + this._clientId;
      } else {
        return "key=" + this._apiKey;
      }
    };

    _proto.hasValidClientCredentials = function hasValidClientCredentials() {
      return this._clientId;
    };

    _proto.init = function init(el, mapData) {
      var _this3 = this;

      if ((!mapData || mapData.mapMarkers.length <= 0) && !this._showEmptyMap) {
        this._map = null;
        return this;
      } // NOTE(billy) This timeout is a hack for dealing with async nature.
      // Only here for demo purposes, so we'll fix later.


      setTimeout(function () {
        var container = DOM.query(el);
        _this3.map = new google.maps.Map(container, {
          zoom: _this3._zoom,
          center: _this3.getCenterMarker(mapData)
        }); // Apply our search data to our GoogleMap

        if (mapData && mapData.mapMarkers.length) {
          (function () {
            var collapsedMarkers = _this3._collapsePins ? _this3._collapseMarkers(mapData.mapMarkers) : mapData.mapMarkers;
            var googleMapMarkerConfigs = GoogleMapMarkerConfig.from(collapsedMarkers, _this3._pinConfig, _this3.map);
            var bounds = new google.maps.LatLngBounds();

            var _loop = function _loop(i) {
              var marker = new google.maps.Marker(googleMapMarkerConfigs[i]);

              if (_this3._onPinClick) {
                marker.addListener('click', function () {
                  return _this3._onPinClick(collapsedMarkers[i].item);
                });
              }

              bounds.extend(marker.position);
            };

            for (var i = 0; i < googleMapMarkerConfigs.length; i++) {
              _loop(i);
            }

            if (googleMapMarkerConfigs.length >= 2) {
              _this3.map.fitBounds(bounds);
            }
          })();
        }
      }, 100);
    };

    _proto.getCenterMarker = function getCenterMarker(mapData) {
      return mapData && mapData.mapCenter && mapData.mapCenter.longitude && mapData.mapCenter.latitude ? {
        lng: mapData.mapCenter.longitude,
        lat: mapData.mapCenter.latitude
      } : {
        lng: this._defaultPosition.lng,
        lat: this._defaultPosition.lat
      };
    };

    return GoogleMapProvider;
  }(MapProvider); // TODO(billy) Move to own class
  var GoogleMapMarkerConfig =
  /*#__PURE__*/
  function () {
    function GoogleMapMarkerConfig(opts) {
      /**
       * A reference to the google map, that the marker is appended to
       * @type {GoogleMap}
       */
      this.map = opts.map || undefined;
      /**
       * The coordinates of the marker (lat/lng)
       * @type {Object}
       */

      this.position = opts.position || {
        lat: undefined,
        lng: undefined
      };
      /**
       * The properties/settings of the icon used for the marker
       * e.g. {
       *        anchor: { x: 0, y: 0 }
       *        url: 'path/to/url.jpg'
       *        scaledSize: { w: 0, h: 0 }
       *       }
       *
       * @type {object}
       */

      this.icon = opts.icon || undefined;
      /**
       * The label of the marker to use
       * @type {string}
       */

      this.label = opts.label || undefined;
    }
    /**
     * Serializes an array of marker configs
     * @param {GoogleMapMarkerConfig[]} googleMapMarkerConfigs
     * @returns {string[]}
     */


    GoogleMapMarkerConfig.serialize = function serialize(googleMapMarkerConfigs) {
      var serializedMarkers = [];
      googleMapMarkerConfigs.forEach(function (marker) {
        serializedMarkers.push("markers=label:" + marker.label + "|" + marker.position.lat + "," + marker.position.lng);
      });
      return serializedMarkers.join('&');
    }
    /**
     * Converts the storage data model of markers into GoogleAPIMarker
     * @param {object[]} markers The data of the marker
     * @param {(Object|function)} pinConfig The configuration to apply to the marker
     * @param {GoogleMap} map reference to the google map to apply the marker to
     * @returns {GoogleMapMarkerConfig[]}
     */
    ;

    GoogleMapMarkerConfig.from = function from(markers, pinConfig, map) {
      var googleMapMarkerConfigs = [];

      if (!Array.isArray(markers)) {
        markers = [markers];
      }

      markers.forEach(function (marker) {
        // Support configuration as a function
        var pinConfigObj = pinConfig;

        if (typeof pinConfig === 'function') {
          pinConfigObj = pinConfig(marker.item, MapProvider.DEFAULT_PIN_CONFIG, marker);
        } // Transform our Configuration Object into the expected
        // Google API format.


        var icon = {};

        if (pinConfigObj.anchor) {
          icon.anchor = google.maps.Point(pinConfigObj.anchor.x, pinConfigObj.anchor.y);
        }

        if (pinConfigObj.scaledSize) {
          icon.scaledSize = new google.maps.Size(pinConfigObj.scaledSize.w, pinConfigObj.scaledSize.h);
        }

        if (pinConfigObj.url) {
          icon.url = pinConfigObj.url;
        }

        if (pinConfigObj.svg) {
          icon.url = "data:image/svg+xml;charset=utf-8, " + encodeURIComponent(pinConfigObj.svg);
        }

        var label;

        if (pinConfigObj.label) {
          label = pinConfigObj.label;
        } else {
          label = marker.label.toString();
        } // NOTE(billy) Google maps doesn't handle empty icon objects nicely
        // Make google maps happy if no settings for icon are provided;


        if (Object.keys(icon).length === 0) {
          icon = undefined;
        }

        googleMapMarkerConfigs.push(new GoogleMapMarkerConfig({
          map: map,
          position: {
            lat: marker.latitude,
            lng: marker.longitude
          },
          icon: icon,
          label: label
        }));
      });
      return googleMapMarkerConfigs;
    };

    return GoogleMapMarkerConfig;
  }();

  /* global mapboxgl */

  /**
   * MapBoxMapProvider is an implementation of a MapProvider
   * that handles the integration with the third party API to expose maps.
   * @extends MapProvider
   */

  var MapBoxMapProvider =
  /*#__PURE__*/
  function (_MapProvider) {
    _inheritsLoose(MapBoxMapProvider, _MapProvider);

    function MapBoxMapProvider() {
      return _MapProvider.apply(this, arguments) || this;
    }

    var _proto = MapBoxMapProvider.prototype;

    /**
     * Load the external JS Library
     * @param {function} onLoad An optional callback to invoke once the JS is loaded.
     */
    _proto.loadJS = function loadJS(onLoad) {
      var _this = this;

      var script = DOM.createEl('script', {
        id: 'yext-map-js',
        onload: function onload() {
          _this._isLoaded = true;
          mapboxgl.accessToken = _this._apiKey;

          if (typeof onLoad === 'function') {
            onLoad();
          }

          if (typeof _this._onLoaded === 'function') {
            _this._onLoaded();
          }
        },
        async: true,
        src: 'https://api.mapbox.com/mapbox-gl-js/v0.44.1/mapbox-gl.js'
      });
      var css = DOM.createEl('link', {
        id: 'yext-map-css',
        rel: 'stylesheet',
        href: 'https://api.mapbox.com/mapbox-gl-js/v0.44.1/mapbox-gl.css'
      });
      DOM.append('body', css);
      DOM.append('body', script);
    };

    _proto.init = function init(el, mapData) {
      var _this2 = this;

      if ((!mapData || mapData.mapMarkers.length <= 0) && !this._showEmptyMap) {
        this._map = null;
        return this;
      }

      var container = DOM.query(el);
      this._map = new mapboxgl.Map({
        container: container,
        zoom: this._zoom,
        style: 'mapbox://styles/mapbox/streets-v9',
        center: this.getCenterMarker(mapData)
      });

      if (mapData && mapData.mapMarkers.length) {
        (function () {
          var collapsedMarkers = _this2._collapsePins ? _this2._collapseMarkers(mapData.mapMarkers) : mapData.mapMarkers;
          var mapboxMapMarkerConfigs = MapBoxMarkerConfig.from(collapsedMarkers, _this2._pinConfig, _this2._map);
          var bounds = new mapboxgl.LngLatBounds();

          var _loop = function _loop(i) {
            var wrapper = mapboxMapMarkerConfigs[i].wrapper;
            var coords = new mapboxgl.LngLat(mapboxMapMarkerConfigs[i].position.longitude, mapboxMapMarkerConfigs[i].position.latitude);
            var marker = new mapboxgl.Marker(wrapper).setLngLat(coords);
            bounds.extend(marker.getLngLat());
            marker.addTo(_this2._map);

            if (_this2._onPinClick) {
              marker.getElement().addEventListener('click', function () {
                return _this2._onPinClick(collapsedMarkers[i].item);
              });
            }
          };

          for (var i = 0; i < mapboxMapMarkerConfigs.length; i++) {
            _loop(i);
          }

          if (mapboxMapMarkerConfigs.length >= 2) {
            _this2._map.fitBounds(bounds, {
              padding: 50
            });
          }
        })();
      }
    };

    _proto.getCenterMarker = function getCenterMarker(mapData) {
      return mapData && mapData.mapCenter && mapData.mapCenter.longitude && mapData.mapCenter.latitude ? [mapData.mapCenter.longitude, mapData.mapCenter.latitude] : {
        lng: this._defaultPosition.lng,
        lat: this._defaultPosition.lat
      };
    };

    return MapBoxMapProvider;
  }(MapProvider);
  var MapBoxMarkerConfig =
  /*#__PURE__*/
  function () {
    function MapBoxMarkerConfig(opts) {
      /**
       * A reference to the mapbox map, that the marker is appended to
       * @type {MapBox}
       */
      this.map = opts.map || undefined;
      /**
       * The coordinates of the marker (lat/lng)
       * @type {Object}
       */

      this.position = opts.position || {
        latitude: undefined,
        longitude: undefined
      };
      /**
       * The html element to be used as the map marker
       * @type {object}
       */

      this.wrapper = opts.wrapper || undefined;
      /**
       * The label of the marker to use
       * @type {string}
       */

      this.label = opts.label || undefined;
      /**
       * The url of the pin for the static map
       * @type {string}
       */

      this.staticMapPin = opts.staticMapPin || undefined;
    }
    /**
     * Serializes an array of marker configs
     * @param {MapBoxMarkerConfig[]} mapboxMapMarkerConfigs
     * @returns {string[]}
     */


    MapBoxMarkerConfig.serialize = function serialize(mapboxMapMarkerConfigs) {
      var serializedMarkers = [];
      mapboxMapMarkerConfigs.forEach(function (marker) {
        if (marker.staticMapPin) {
          serializedMarkers.push("url-" + marker.staticMapPin + "(" + marker.position.longitude + "," + marker.position.latitude + ")");
        } else {
          serializedMarkers.push("pin-s-" + marker.label + "(" + marker.position.longitude + "," + marker.position.latitude + ")");
        }
      });
      return serializedMarkers.join(',');
    }
    /**
     * Converts the storage data model of markers into MapBoxMarkerConfig
     * @param {MapBox} A reference to the mapbox map to apply the marker to
     * @param {object[]} markers The data of the marker
     * @param {Object} pinConfig The configuration to apply to the marker
     * @returns {MapBoxMarkerConfig[]}
     */
    ;

    MapBoxMarkerConfig.from = function from(markers, pinConfig, map) {
      var mapboxMapMarkerConfigs = [];

      if (!Array.isArray(markers)) {
        markers = [markers];
      }

      markers.forEach(function (marker) {
        // Support configuration as a function
        var pinConfigObj = pinConfig;

        if (typeof pinConfig === 'function') {
          pinConfigObj = pinConfig(marker.item, MapProvider.DEFAULT_PIN_CONFIG, marker);
        }

        var wrapper = pinConfigObj.wrapper ? pinConfigObj.wrapper : null;
        var staticMapPin = pinConfigObj.staticMapPin ? pinConfigObj.staticMapPin : null;
        mapboxMapMarkerConfigs.push(new MapBoxMarkerConfig({
          map: map,
          position: {
            latitude: marker.latitude,
            longitude: marker.longitude
          },
          wrapper: wrapper,
          label: marker.label,
          staticMapPin: staticMapPin
        }));
      });
      return mapboxMapMarkerConfigs;
    };

    return MapBoxMarkerConfig;
  }();

  var ProviderTypes = {
    'google': GoogleMapProvider,
    'mapbox': MapBoxMapProvider
  };

  var MapComponent =
  /*#__PURE__*/
  function (_Component) {
    _inheritsLoose(MapComponent, _Component);

    function MapComponent(opts, systemOpts) {
      var _this;

      if (opts === void 0) {
        opts = {};
      }

      if (systemOpts === void 0) {
        systemOpts = {};
      }

      _this = _Component.call(this, opts, systemOpts) || this;
      /**
       * Bind this component to listen to the storage based on this key
       */

      _this.moduleId = StorageKeys.VERTICAL_RESULTS;
      /**
       * An aliased used to determine the type of map provider to use
       * @type {string}
       */

      _this._mapProvider = opts.mapProvider;

      if (!_this._mapProvider || !(_this._mapProvider.toLowerCase() in ProviderTypes)) {
        throw new Error('MapComponent: Invalid Map Provider; must be `google` or `mapBox`');
      }
      /**
       * A reference to an instance of the {MapProvider} that's constructed
       * @type {MapProvider}
       */


      _this._map = null;
      return _this;
    }

    /**
     * The template to render
     * @returns {string}
     * @override
     */
    MapComponent.defaultTemplateName = function defaultTemplateName(config) {
      return 'results/map';
    } // TODO(billy) Make ProviderTypes a factory class
    ;

    var _proto = MapComponent.prototype;

    _proto.getProviderInstance = function getProviderInstance(type) {
      return new ProviderTypes[type.toLowerCase()](this._config);
    };

    _proto.onCreate = function onCreate() {
      this._map = this.getProviderInstance(this._mapProvider);

      this._map.loadJS();
    };

    _proto.onMount = function onMount() {
      var _this2 = this;

      this._map.onLoaded(function () {
        _this2._map.init(_this2._container, _this2.getState('map'));
      });
    };

    _proto.setState = function setState(data, val) {
      if (Object.keys(data).length === 0) {
        return this;
      }

      return _Component.prototype.setState.call(this, data, val);
    };

    _createClass(MapComponent, null, [{
      key: "type",
      get: function get() {
        return 'Map';
      }
    }]);

    return MapComponent;
  }(Component);

  var ResultType = {
    EVENT: 'event',
    LOCATION: 'location',
    PEOPLE: 'people'
  };

  var ResultsComponent =
  /*#__PURE__*/
  function (_Component) {
    _inheritsLoose(ResultsComponent, _Component);

    function ResultsComponent(config, systemConfig) {
      var _this$_itemConfig;

      var _this;

      if (config === void 0) {
        config = {};
      }

      if (systemConfig === void 0) {
        systemConfig = {};
      }

      _this = _Component.call(this, config, systemConfig) || this;
      /**
       * verticalConfigId used for analytics and passed to children
       * @type {string}
       * @private
       */

      _this._verticalConfigId = config.verticalConfigId;
      /**
       * isUniversal is set to true if this component is added by the UniversalResultsComponent
       * @type {boolean}
       * @private
       */

      _this._isUniversal = config.isUniversal || false;
      _this.moduleId = StorageKeys.VERTICAL_RESULTS;
      _this._itemConfig = (_this$_itemConfig = {
        global: {
          render: null,
          template: null
        }
      }, _this$_itemConfig[EventResultsItemComponent.type] = {
        render: null,
        template: null
      }, _this$_itemConfig[LocationResultsItemComponent.type] = {
        render: null,
        template: null
      }, _this$_itemConfig[PeopleResultsItemComponent.type] = {
        render: null,
        template: null
      }, _this$_itemConfig);

      if (config.renderItem === undefined && config._parentOpts !== undefined) {
        config.renderItem = config._parentOpts.renderItem;
      }

      if (config.itemTemplate === undefined && config._parentOpts !== undefined) {
        config.itemTemplate = config._parentOpts.itemTemplate;
      }

      _this.configureItem({
        render: config.renderItem,
        template: config.itemTemplate
      });
      /**
       * The url to the universal page for the no results page to link back to with current query
       * @type {string|null}
       */


      _this._universalUrl = config.universalUrl;
      return _this;
    }

    var _proto = ResultsComponent.prototype;

    _proto.mount = function mount() {
      if (Object.keys(this.getState()).length > 0) {
        _Component.prototype.mount.call(this);
      }

      return this;
    };

    _proto.setState = function setState(data, val) {
      var results = data.results || [];
      var searchState = data.searchState || SearchStates.PRE_SEARCH;
      return _Component.prototype.setState.call(this, Object.assign({
        results: []
      }, data, {
        isPreSearch: searchState === SearchStates.PRE_SEARCH,
        isSearchLoading: searchState === SearchStates.SEARCH_LOADING,
        isSearchComplete: searchState === SearchStates.SEARCH_COMPLETE,
        includeMap: this._config.includeMap,
        mapConfig: this._config.mapConfig,
        eventOptions: this.eventOptions(),
        universalUrl: this._universalUrl ? this._universalUrl + window.location.search : '',
        showNoResults: results.length === 0,
        query: this.core.globalStorage.getState(StorageKeys.QUERY)
      }), val);
    }
    /**
     * helper to construct the eventOptions object for the view all link
     * @returns {string}
     */
    ;

    _proto.eventOptions = function eventOptions() {
      return JSON.stringify({
        verticalConfigId: this._verticalConfigId
      });
    };

    /**
     * The template to render
     * @returns {string}
     * @override
     */
    ResultsComponent.defaultTemplateName = function defaultTemplateName(config) {
      return 'results/results';
    };

    _proto.configureItem = function configureItem(config) {
      if (typeof config.render === 'function') {
        this._itemConfig.global.render = config.render;
      } else {
        for (var key in config.render) {
          this.setItemRender(key, config.render[key]);
        }
      }

      if (typeof config.template === 'string') {
        this._itemConfig.global.template = config.template;
      } else {
        for (var _key in config.template) {
          this.setItemTemplate(_key, config.template[_key]);
        }
      }
    };

    _proto.setItemTemplate = function setItemTemplate(type, template) {
      var clazz = this.getItemComponent(type);
      this._itemConfig[clazz.type].template = template;
    };

    _proto.setItemRender = function setItemRender(type, render) {
      var clazz = this.getItemComponent(type);
      this._itemConfig[clazz.type].render = render;
    };

    _proto.getItemComponent = function getItemComponent(type) {
      var comp = ResultsItemComponent;

      switch (type) {
        case ResultType.EVENT:
          comp = EventResultsItemComponent;
          break;

        case ResultType.LOCATION:
          comp = LocationResultsItemComponent;
          break;

        case ResultType.PEOPLE:
          comp = PeopleResultsItemComponent;
          break;
      }

      return comp;
    };

    _proto.addChild = function addChild(data, type, opts) {
      // TODO(billy) Refactor the way configuration and data flows
      // through top level components to child components.
      if (type === ResultsItemComponent.type) {
        var clazz = this.getItemComponent(data.type);

        if (clazz) {
          type = clazz.type;
        }
      } else if (type === MapComponent.type) {
        data = {
          map: data
        };
        var newOpts = Object.assign({}, this._config.mapConfig, opts);
        return _Component.prototype.addChild.call(this, data, type, newOpts);
      } // Apply the proper item renders to the the components
      // have just been constructed. Prioritize global over individual items.


      var comp = _Component.prototype.addChild.call(this, data, type, Object.assign(opts, {
        verticalConfigId: this._verticalConfigId,
        isUniversal: this._isUniversal
      }));

      var globalConfig = this._itemConfig.global;
      var itemConfig = this._itemConfig[comp.type];
      var hasGlobalRender = typeof globalConfig.render === 'function';
      var hasGlobalTemplate = typeof globalConfig.template === 'string';

      if (hasGlobalRender) {
        comp.setRender(globalConfig.render);
      }

      if (hasGlobalTemplate) {
        comp.setTemplate(globalConfig.template);
      }

      if (!itemConfig) {
        return comp;
      }

      if (!hasGlobalRender && itemConfig.render) {
        comp.setRender(itemConfig.render);
      } // Apply template specific situation


      if (!hasGlobalTemplate && itemConfig.template) {
        comp.setTemplate(itemConfig.template);
      }

      return comp;
    };

    _createClass(ResultsComponent, null, [{
      key: "duplicatesAllowed",
      get: function get() {
        return true;
      }
    }, {
      key: "type",
      get: function get() {
        return 'VerticalResults';
      }
    }]);

    return ResultsComponent;
  }(Component);

  var AccordionResultsComponent =
  /*#__PURE__*/
  function (_ResultsComponent) {
    _inheritsLoose(AccordionResultsComponent, _ResultsComponent);

    function AccordionResultsComponent(config, systemConfig) {
      var _this;

      if (config === void 0) {
        config = {};
      }

      if (systemConfig === void 0) {
        systemConfig = {};
      }

      _this = _ResultsComponent.call(this, config, systemConfig) || this;
      /**
       * base selector to use when finding DOM targets
       * @type {string}
       */

      _this._selectorBase = config.selectorBase || '.js-yxt-AccordionResult';
      /**
       * collapsed state class
       * @type {string}
       */

      _this.collapsedClass = config.collapsedClass || 'is-collapsed';
      /**
       * vertical config id is required for analytics
       * @type {string|null}
       */

      _this.verticalConfigId = config.verticalConfigId || config._parentOpts.verticalConfigId || null;
      return _this;
    }
    /**
     * the component type
     * @returns {string}
     * @override
     */


    /**
     * The template to render
     * @returns {string}
     * @override
     */
    AccordionResultsComponent.defaultTemplateName = function defaultTemplateName(config) {
      return 'results/resultsaccordion';
    }
    /**
     * overrides onMount to add bindings to change the height on click
     * @returns {AccordionResultsComponent}
     * @override
     */
    ;

    var _proto = AccordionResultsComponent.prototype;

    _proto.onMount = function onMount() {
      var _this2 = this;

      _ResultsComponent.prototype.onMount.call(this); // NOTE(amullings): This is a hack, since currently components with siblings
      // have no way of referring to their own element. We have to grab the first
      // element since sections get added in reverse.


      var selfEl = this._container.firstElementChild;
      var accordionEls = DOM.queryAll(selfEl, this._selectorBase);
      accordionEls.forEach(function (accordionEl) {
        var toggleEl = DOM.query(accordionEl, _this2.toggleSelector());
        var contentEl = DOM.query(accordionEl, _this2.bodySelector());

        _this2.changeHeight(contentEl, accordionEl);

        toggleEl.addEventListener('click', function () {
          _this2.handleClick(accordionEl, toggleEl, contentEl);
        });
      });
      return this;
    };

    _proto.setState = function setState(data) {
      return _ResultsComponent.prototype.setState.call(this, Object.assign({}, data, {
        modifier: this.verticalConfigId
      }));
    }
    /**
     * click handler for the accordion toggle button
     * @param wrapperEl {HTMLElement} the toggle container
     * @param toggleEl {HTMLElement} the button
     * @param contentEl {HTMLElement} the toggle target
     */
    ;

    _proto.handleClick = function handleClick(wrapperEl, toggleEl, contentEl) {
      var event = new AnalyticsEvent(this.isCollapsed(wrapperEl) ? 'ROW_EXPAND' : 'ROW_COLLAPSE').addOptions({
        verticalConfigId: this.verticalConfigId,
        entityId: toggleEl.dataset.entityId
      });
      wrapperEl.classList.toggle(this.collapsedClass);
      this.changeHeight(contentEl, wrapperEl);
      toggleEl.setAttribute('aria-expanded', this.isCollapsed(wrapperEl) ? 'false' : 'true');
      this.analyticsReporter.report(event);
    }
    /**
     * returns true if the element is currently collapsed
     * @param wrapperEl {HTMLElement} the toggle container
     * @returns {boolean}
     */
    ;

    _proto.isCollapsed = function isCollapsed(wrapperEl) {
      if (!wrapperEl) {
        return false;
      }

      return wrapperEl.classList.contains(this.collapsedClass);
    }
    /**
     * toggles the height between 0 and the content height for smooth animation
     * @param targetEl {HTMLElement}
     * @param wrapperEl {HTMLElement}
     */
    ;

    _proto.changeHeight = function changeHeight(targetEl, wrapperEl) {
      targetEl.style.height = (this.isCollapsed(wrapperEl) ? 0 : targetEl.scrollHeight) + "px";
    }
    /**
     * helper for composing child element selectors
     * @param child {string}
     * @returns {string}
     */
    ;

    _proto.buildSelector = function buildSelector(child) {
      return "" + this._selectorBase + child;
    }
    /**
     * helper for the toggle button selector
     * @returns {string}
     */
    ;

    _proto.toggleSelector = function toggleSelector() {
      return this.buildSelector('-toggle');
    }
    /**
     * helper for the content element selector
     * @returns {string}
     */
    ;

    _proto.bodySelector = function bodySelector() {
      return this.buildSelector('-body');
    };

    _createClass(AccordionResultsComponent, null, [{
      key: "type",
      get: function get() {
        return 'AccordionResults';
      }
    }]);

    return AccordionResultsComponent;
  }(ResultsComponent);

  var UniversalResultsComponent =
  /*#__PURE__*/
  function (_Component) {
    _inheritsLoose(UniversalResultsComponent, _Component);

    function UniversalResultsComponent(opts, systemOpts) {
      var _this;

      if (opts === void 0) {
        opts = {};
      }

      if (systemOpts === void 0) {
        systemOpts = {};
      }

      _this = _Component.call(this, opts, systemOpts) || this;
      _this.moduleId = StorageKeys.UNIVERSAL_RESULTS;
      _this._limit = opts.limit || 10;
      return _this;
    }

    /**
     * The template to render
     * @returns {string}
     * @override
     */
    UniversalResultsComponent.defaultTemplateName = function defaultTemplateName(config) {
      return 'results/universalresults';
    };

    UniversalResultsComponent.areDuplicateNamesAllowed = function areDuplicateNamesAllowed() {
      return true;
    };

    var _proto = UniversalResultsComponent.prototype;

    _proto.init = function init(opts) {
      _Component.prototype.init.call(this, opts);

      return this;
    };

    _proto.setState = function setState(data, val) {
      var sections = data.sections || [];
      var searchState = data.searchState || SearchStates.PRE_SEARCH;
      return _Component.prototype.setState.call(this, Object.assign({
        sections: []
      }, data, {
        isPreSearch: searchState === SearchStates.PRE_SEARCH,
        isSearchLoading: searchState === SearchStates.SEARCH_LOADING,
        isSearchComplete: searchState === SearchStates.SEARCH_COMPLETE,
        showNoResults: sections.length === 0,
        query: this.core.globalStorage.getState(StorageKeys.QUERY)
      }), val);
    };

    _proto.addChild = function addChild(data, type, opts) {
      if (data === void 0) {
        data = {};
      }

      var childOpts = _objectSpread2({}, opts, {}, this.getChildConfig([data['verticalConfigId']]));

      if (childOpts.useAccordion === true) {
        return _Component.prototype.addChild.call(this, data, AccordionResultsComponent.type, childOpts);
      }

      return _Component.prototype.addChild.call(this, data, type, childOpts);
    };

    _proto.getChildConfig = function getChildConfig(configId) {
      var defaultConfig = {
        verticalConfigId: configId,
        isUniversal: true
      };
      var config = this._config.config;

      if (config === undefined) {
        return defaultConfig;
      }

      return Object.assign(defaultConfig, this._config['config'][configId] || this._config['config']);
    };

    _createClass(UniversalResultsComponent, null, [{
      key: "type",
      get: function get() {
        return 'UniversalResults';
      }
    }]);

    return UniversalResultsComponent;
  }(Component);

  var PaginationComponent =
  /*#__PURE__*/
  function (_Component) {
    _inheritsLoose(PaginationComponent, _Component);

    function PaginationComponent(config, systemConfig) {
      var _this;

      if (config === void 0) {
        config = {};
      }

      if (systemConfig === void 0) {
        systemConfig = {};
      }

      _this = _Component.call(this, config, systemConfig) || this;
      /**
       * The vertical key to use for searches
       * @type {string}
       * @private
       */

      _this._verticalKey = _this.core.globalStorage.getState(StorageKeys.SEARCH_CONFIG).verticalKey;

      if (typeof _this._verticalKey !== 'string') {
        throw new AnswersComponentError('verticalKey not provided, but necessary for pagination', 'PaginationComponent');
      }
      /**
       * If true, displays the first page button
       * @type {boolean}
       * @private
       */


      _this._firstPageButtonEnabled = config.showFirst === undefined ? true : config.showFirst;
      /**
       * If true, displays the last page button
       * @type {boolean}
       * @private
       */

      _this._lastPageButtonEnabled = config.showLast === undefined ? true : config.showLast;
      /**
       * Options to include with all analytic events sent by this component
       * @type {object}
       * @private
       */

      _this._analyticsOptions = {
        verticalKey: _this._verticalKey
      };
      /**
       * Label for a page of results.
       * @type {string}
       * @private
       */

      _this._pageLabel = config.pageLabel || 'Page';
      var offset = _this.core.globalStorage.getState(StorageKeys.SEARCH_OFFSET) || 0;

      _this.core.globalStorage.set(StorageKeys.SEARCH_OFFSET, Number(offset));

      _this.core.globalStorage.on('update', StorageKeys.SEARCH_OFFSET, function (offset) {
        if (typeof offset === 'number') {
          return;
        }

        _this.core.globalStorage.set(StorageKeys.SEARCH_OFFSET, Number(offset));
      });

      _this.core.globalStorage.on('update', StorageKeys.VERTICAL_RESULTS, function (results) {
        if (results.searchState === SearchStates.SEARCH_COMPLETE) {
          _this.setState();
        }
      });

      return _this;
    }

    PaginationComponent.defaultTemplateName = function defaultTemplateName() {
      return 'results/pagination';
    };

    var _proto = PaginationComponent.prototype;

    _proto.onMount = function onMount() {
      var _this2 = this;

      var results = this.core.globalStorage.getState(StorageKeys.VERTICAL_RESULTS) || {};
      var limit = this.core.globalStorage.getState(StorageKeys.SEARCH_CONFIG).limit;
      var showControls = results.searchState === 'search-complete' && results.resultsCount > limit;
      var offset = this.core.globalStorage.getState(StorageKeys.SEARCH_OFFSET) || 0;

      if (!showControls) {
        return;
      }

      var previousPageButton = DOM.query(this._container, '.js-yxt-Pagination-previous');
      var nextPageButton = DOM.query(this._container, '.js-yxt-Pagination-next');
      var maxPage = Math.trunc((results.resultsCount - 1) / limit);
      DOM.on(previousPageButton, 'click', function () {
        return _this2.updatePage(offset - limit);
      });
      DOM.on(nextPageButton, 'click', function () {
        return _this2.updatePage(offset + limit);
      });

      if (this._firstPageButtonEnabled) {
        var firstPageButton = DOM.query(this._container, '.js-yxt-Pagination-first');
        DOM.on(firstPageButton, 'click', function () {
          return _this2.updatePage(0);
        });
      }

      if (this._lastPageButtonEnabled) {
        var lastPageButton = DOM.query(this._container, '.js-yxt-Pagination-last');
        DOM.on(lastPageButton, 'click', function () {
          return _this2.updatePage(maxPage * limit);
        });
      }
    };

    _proto.updatePage = function updatePage(offset) {
      this.scrollToTop();
      this.core.globalStorage.set(StorageKeys.SEARCH_OFFSET, offset);
      this.core.persistentStorage.set(StorageKeys.SEARCH_OFFSET, offset);
      this.core.verticalPage(this._verticalKey, offset);
    };

    _proto.scrollToTop = function scrollToTop() {
      document.documentElement.scrollTop = 0; // Safari

      document.body.scrollTop = 0;
    };

    _proto.setState = function setState(data) {
      var results = this.core.globalStorage.getState(StorageKeys.VERTICAL_RESULTS) || {};
      var offset = this.core.globalStorage.getState(StorageKeys.SEARCH_OFFSET) || 0;
      var limit = this.core.globalStorage.getState(StorageKeys.SEARCH_CONFIG).limit;
      var pageNumber = offset / limit;
      var showControls = results.searchState === 'search-complete' && results.resultsCount > limit;
      var isMoreResults = results.resultsCount > offset + limit;
      var maxPage = Math.trunc((results.resultsCount - 1) / limit);
      return _Component.prototype.setState.call(this, _objectSpread2({
        showControls: showControls,
        firstPageButtonEnabled: this._firstPageButtonEnabled,
        lastPageButtonEnabled: this._lastPageButtonEnabled,
        pageNumber: pageNumber + 1,
        pageLabel: this._pageLabel,
        showFirstPageButton: pageNumber > 1,
        showPreviousPageButton: pageNumber > 0,
        showNextPageButton: isMoreResults,
        showLastPageButton: pageNumber < maxPage - 1
      }, data));
    };

    _createClass(PaginationComponent, null, [{
      key: "type",
      get: function get() {
        return 'Pagination';
      }
    }]);

    return PaginationComponent;
  }(Component);

  /**
   * Configurable options for the component
   * @type {Object}
   */

  var DEFAULT_CONFIG$1 = {
    /**
     * The entity identifier that the question is associated with.
     * This is typically an organization object
     * @type {number}
     */
    'entityId': null,

    /**
     * The main CSS selector used to reference the form for the component.
     * @type {string} CSS selector
     */
    'formSelector': 'form',

    /**
     * An optional label to use for the e-mail address input
     * @type {string}
     */
    'emailLabel': 'Email',

    /**
     * An optional label to use for the name input
     * @type {string}
     */
    'nameLabel': 'Name',

    /**
     * An optional label to use for the question
     * @type {string}
     */
    'questionLabel': 'Question',

    /**
     * An optional label to use for the Privacy Policy
     * @type {string}
     */
    'privacyPolicyText': 'By submitting my email address, I consent to being contacted via email at the address provided.',

    /**
     * The label to use for the Submit button
     * @type {string}
     */
    'buttonLabel': 'Submit',

    /**
     * The title to display in the title bar
     * @type {string}
     */
    'sectionTitle': 'Ask a Question',

    /**
     * The description to display in the title bar
     * @type {string}
     */
    'teaser': 'Can’t find what you\'re looking for? Ask a question below.',

    /**
     * The name of the icon to use in the title bar
     * @type {string}
     */
    'sectionTitleIconName': 'support',

    /**
     * The text to display in the feedback form ahead of the Question input
     * @type {string}
     */
    'description': 'Enter your question and contact information, and we\'ll get back to you with a response shortly.',

    /**
     * The placeholder text for required inputs
     * @type {string}
     */
    'requiredInputPlaceholder': '(required)',

    /**
     * The placeholder text for the question text area
     * @type {string}
     */
    'questionInputPlaceholder': 'Enter your question here',

    /**
     * The confirmation text to display after successfully submitting feedback
     * @type {string}
     */
    'questionSubmissionConfirmationText': 'Thank you for your question!',

    /**
     * The default privacy policy url label
     * @type {string}
    */
    'privacyPolicyUrlLabel': 'Learn more here.',

    /**
     * The default privacy policy url
     * @type {string}
     */
    'privacyPolicyUrl': '',

    /**
     * The default privacy policy error text, shown when the user does not agree
     * @type {string}
     */
    'privacyPolicyErrorText': '* You must agree to the privacy policy to submit a question.',

    /**
     * The default email format error text, shown when the user submits an invalid email
     * @type {string}
     */
    'emailFormatErrorText': '* Please enter a valid email address.',

    /**
     * The default network error text, shown when there is an issue with the QA Submission
     * request.
     * @type {string}
     */
    'networkErrorText': 'We\'re sorry, an error occurred.',

    /**
     * Whether or not this component is expanded by default.
     * @type {boolean}
     */
    'expanded': true
  };
  /**
   * QuestionSubmissionComponent is a component that creates a form
   * thats displayed whenever a query is run. It enables the user
   * to submit questions that they cant find the answer for.
   */

  var QuestionSubmissionComponent =
  /*#__PURE__*/
  function (_Component) {
    _inheritsLoose(QuestionSubmissionComponent, _Component);

    function QuestionSubmissionComponent(config, systemConfig) {
      var _this;

      if (config === void 0) {
        config = {};
      }

      if (systemConfig === void 0) {
        systemConfig = {};
      }

      _this = _Component.call(this, Object.assign({}, DEFAULT_CONFIG$1, config), systemConfig) || this;
      /**
       * Reference to the storage model
       * @type {string}
       */

      _this.moduleId = StorageKeys.QUESTION_SUBMISSION;
      /**
       * Reference to the locale as set in the global config
       * @type {string}
       */

      _this.locale = _this.core.globalStorage.getState(StorageKeys.LOCALE);
      /**
       * NOTE(billy) if this is a pattern we want to follow for configuration
       * we should bake it into the core class.
       */

      _this.validateConfig();
      /**
       * The QuestionSubmission component should be rendered only once a search has completed. If the
       * search results are still loading, the component should not be displayed.
       */


      var onResultsUpdate = function onResultsUpdate(results) {
        if (results.searchState !== SearchStates.SEARCH_LOADING) {
          var questionText = _this.core.globalStorage.getState(StorageKeys.QUERY);

          _this.setState(new QuestionSubmission({
            questionText: questionText,
            expanded: _this._config.expanded
          }));
        } else {
          _this.unMount();
        }
      };

      _this.core.globalStorage.on('update', StorageKeys.VERTICAL_RESULTS, onResultsUpdate);

      _this.core.globalStorage.on('update', StorageKeys.UNIVERSAL_RESULTS, onResultsUpdate);

      return _this;
    }
    /**
     * The template to render
     * @returns {string}
     * @override
     */


    QuestionSubmissionComponent.defaultTemplateName = function defaultTemplateName(config) {
      return 'questions/questionsubmission';
    }
    /**
     * The public interface alias for the component
     * @returns {string}
     * @override
     */
    ;

    var _proto = QuestionSubmissionComponent.prototype;

    /**
     * validationConfig contains a bunch of rules
     * that are used to validate aginst configuration provided by the user
     */
    _proto.validateConfig = function validateConfig() {
      if (this._config.entityId === null || this._config.entityId === undefined) {
        throw new AnswersComponentError('`entityId` is a required configuration option for Question Submission', 'QuestionSubmission');
      }
    };

    _proto.beforeMount = function beforeMount() {
      // Avoid mounting the component if theres no data
      // Note, 1 because `config` is always part of the state.
      return Object.keys(this.getState()).length > 1;
    };

    _proto.onMount = function onMount() {
      var triggerEl = DOM.query(this._container, '.js-content-visibility-toggle');

      if (triggerEl !== null) {
        this.bindFormToggle(triggerEl);
      }

      var formEl = DOM.query(this._container, this._config.formSelector);

      if (formEl === null) {
        return;
      }

      this.bindFormFocus(formEl);
      this.bindFormSubmit(formEl);
    }
    /**
     * bindFormFocus will wire up the DOM focus event to serverside reporting
     * @param {HTMLElement} formEl
     */
    ;

    _proto.bindFormFocus = function bindFormFocus(formEl) {
      var _this2 = this;

      if (this.analyticsReporter === null) {
        return;
      }

      var questionText = DOM.query(formEl, '.js-question-text');
      DOM.on(questionText, 'focus', function () {
        _this2.analyticsReporter.report(_this2.getAnalyticsEvent('QUESTION_FOCUS'));
      });
    }
    /**
     * bindFormSubmit handles submitting the question to the server,
     * and submits an event to serverside reporting
     * @param {HTMLElement} formEl
     */
    ;

    _proto.bindFormSubmit = function bindFormSubmit(formEl) {
      var _this3 = this;

      DOM.on(formEl, 'submit', function (e) {
        e.preventDefault();

        _this3.analyticsReporter.report(_this3.getAnalyticsEvent('QUESTION_SUBMIT')); // TODO(billy) we probably want to disable the form from being submitted twice


        var errors = _this3.validate(formEl);

        var formData = _this3.parse(formEl);

        if (Object.keys(errors).length) {
          return _this3.setState(new QuestionSubmission(formData, errors));
        }

        _this3.core.submitQuestion({
          'entityId': _this3._config.entityId,
          'questionLanguage': _this3.locale,
          'site': 'FIRSTPARTY',
          'name': formData.name,
          'email': formData.email,
          'questionText': formData.questionText,
          'questionDescription': formData.questionDescription
        })["catch"](function (error) {
          _this3.setState(new QuestionSubmission(formData, {
            'network': 'We\'re sorry, an error occurred.'
          }));

          throw error;
        });
      });
    }
    /**
     * bindFormToggle handles expanding and mimimizing the component's form.
     * @param {HTMLElement} triggerEl
     */
    ;

    _proto.bindFormToggle = function bindFormToggle(triggerEl) {
      var _this4 = this;

      DOM.on(triggerEl, 'click', function (e) {
        var formData = _this4.getState();

        _this4.setState(new QuestionSubmission(_objectSpread2({}, formData, {
          'expanded': !formData.questionExpanded,
          'submitted': formData.questionSubmitted
        }), formData.errors));
      });
    }
    /**
     * Takes the form, and builds a object that represents the input names
     * and text fields.
     * @param {HTMLElement} formEl
     * @returns {object}
     */
    ;

    _proto.parse = function parse(formEl) {
      var inputFields = DOM.queryAll(formEl, '.js-question-field');

      if (!inputFields || inputFields.length === 0) {
        return {};
      }

      var obj = {};

      for (var i = 0; i < inputFields.length; i++) {
        var val = inputFields[i].value;

        if (inputFields[i].type === 'checkbox') {
          val = inputFields[i].checked;
        }

        obj[inputFields[i].name] = val;
      }

      return obj;
    }
    /**
     * Validates the fields for correct formatting
     * @param {HTMLElement} formEl
     * @returns {Object} errors object if any errors found
     */
    ;

    _proto.validate = function validate(formEl) {
      var errors = {};
      var fields = DOM.queryAll(formEl, '.js-question-field');

      for (var i = 0; i < fields.length; i++) {
        if (!fields[i].checkValidity()) {
          if (i === 0) {
            // set focus state on first error
            fields[i].focus();
          }

          switch (fields[i].name) {
            case 'email':
              errors['emailError'] = true;

              if (!fields[i].validity.valueMissing) {
                errors['emailErrorText'] = this._config.emailFormatErrorText;
              }

              break;

            case 'name':
              errors['nameError'] = true;
              break;

            case 'privacyPolicy':
              errors['privacyPolicyErrorText'] = this._config.privacyPolicyErrorText;
              errors['privacyPolicyError'] = true;
              break;

            case 'questionText':
              errors['questionTextError'] = true;
              break;
          }
        }
      }

      return errors;
    }
    /**
     * Returns an options object describing the context of a reportable event
     */
    ;

    _proto.getAnalyticsEvent = function getAnalyticsEvent(eventType) {
      var analyticsEvent = new AnalyticsEvent(eventType);
      analyticsEvent.addOptions({
        verticalConfigId: this._verticalKey,
        searcher: this._verticalKey ? 'VERTICAL' : 'UNIVERSAL'
      });
      return analyticsEvent;
    };

    _createClass(QuestionSubmissionComponent, null, [{
      key: "type",
      get: function get() {
        return 'QASubmission';
      }
    }]);

    return QuestionSubmissionComponent;
  }(Component);

  var SVGIcon =
  /*#__PURE__*/
  function () {
    /**
     * @param config
     * @param config.name
     * @param config.path
     * @param config.complexContents
     * @param config.viewBox
     * @constructor
     */
    function SVGIcon(config) {
      /**
       * the name of the icon
       */
      this.name = config.name;
      /**
       * an svg path definition
       */

      this.path = config.path;
      /**
       * if not using a path, a the markup for a complex SVG
       */

      this.complexContents = config.complexContents;
      /**
       * the view box definition, defaults to 24x24
       * @type {string}
       */

      this.viewBox = config.viewBox || '0 0 24 24';
      /**
       * actual contents used
       */

      this.contents = this.pathDefinition();
    }

    var _proto = SVGIcon.prototype;

    _proto.pathDefinition = function pathDefinition() {
      if (this.complexContents) {
        return this.complexContents;
      }

      return "<path d=\"" + this.path + "\"></path>";
    }
    /**
     * returns the svg markup
     */
    ;

    _proto.markup = function markup() {
      return "<svg viewBox=\"" + this.viewBox + "\" xmlns=\"http://www.w3.org/2000/svg\">" + this.contents + "</svg>";
    };

    return SVGIcon;
  }();

  var thumbIcon = new SVGIcon({
    name: 'thumb',
    viewBox: '0 0 24 22',
    path: 'M15.273 1H5.455c-.906 0-1.68.55-2.008 1.342L.153 10.097A2.19 2.19 0 000 10.9v2.2c0 1.21.982 2.2 2.182 2.2h6.883L8.03 20.327l-.033.352c0 .451.186.869.48 1.166L9.633 23l7.178-7.249a2.16 2.16 0 00.644-1.551v-11c0-1.21-.982-2.2-2.182-2.2zm0 13.2l-4.735 4.774L11.75 13.1H2.182v-2.2l3.273-7.7h9.818v11zM19.636 1H24v13.2h-4.364V1z'
  });

  var receiptIcon = new SVGIcon({
    name: 'receipt',
    path: 'M14.606 9.5c-.671-.515-1.591-.833-2.606-.833 1.015 0 1.935.318 2.606.833zm-7.985 0H1.655A1.66 1.66 0 010 7.833V3.667C0 2.747.741 2 1.655 2h20.69A1.66 1.66 0 0124 3.667v4.166A1.66 1.66 0 0122.345 9.5h-4.966V22H6.621V9.5h2.773H6.62zm10.758-1.667h4.966V3.667H1.655v4.166h4.966v-2.5h10.758v2.5z'
  });

  var pantheonIcon = new SVGIcon({
    name: 'pantheon',
    path: 'M9.947 16.598h.252V9.412h-.252a.432.432 0 01-.23-.065c-.07-.043-.106-.093-.106-.15L9.15 7.82v-.15c0-.044.028-.08.084-.109a.691.691 0 01.105-.086.254.254 0 01.146-.043H13.6c.056 0 .104.015.146.043.042.03.091.058.147.086a.271.271 0 01.063.108c.014.043.007.093-.02.15l-.42 1.378a.374.374 0 01-.147.15.37.37 0 01-.19.065h-.251v7.186h.252a.37.37 0 01.189.065c.07.043.119.093.147.15l.42 1.378c.027.028.034.071.02.129a.275.275 0 01-.063.129 1.364 1.364 0 00-.147.086.254.254 0 01-.146.043H9.485a.254.254 0 01-.146-.043.691.691 0 01-.105-.086c-.056-.029-.084-.072-.084-.13v-.128l.461-1.377c0-.058.035-.108.105-.151a.432.432 0 01.231-.065zm5.792 0h.252V9.412h-.252a.432.432 0 01-.23-.065.374.374 0 01-.148-.15l-.42-1.377c-.027-.029-.034-.072-.02-.13a.275.275 0 01.063-.129c.056-.028.105-.057.146-.086a.254.254 0 01.147-.043h4.114c.055 0 .104.015.146.043a.691.691 0 01.105.086c.056.03.084.072.084.13v.129l-.42 1.377a.374.374 0 01-.146.15.432.432 0 01-.231.065h-.21v7.186h.21a.43.43 0 01.23.065c.07.043.12.093.148.15l.42 1.378v.15c0 .043-.029.08-.085.108a.691.691 0 01-.105.086.254.254 0 01-.146.043h-4.114a.254.254 0 01-.147-.043 1.364 1.364 0 00-.146-.086.271.271 0 01-.063-.108c-.014-.043-.007-.093.02-.15l.42-1.377a.374.374 0 01.147-.151.432.432 0 01.231-.065zm-11.794-.086h.252V9.498h-.252a.334.334 0 01-.21-.065.386.386 0 01-.126-.193l-.42-1.377a.248.248 0 01-.02-.172.854.854 0 01.063-.173c.028-.057.07-.1.126-.129a.365.365 0 01.168-.043h4.07c.057 0 .113.015.169.043a.278.278 0 01.126.13.854.854 0 01.062.172.248.248 0 01-.02.172l-.42 1.377a.386.386 0 01-.126.193.334.334 0 01-.21.065h-.21v7.014h.21c.084 0 .154.029.21.086a.673.673 0 01.126.172l.42 1.378a.248.248 0 01.02.172.854.854 0 01-.062.172.278.278 0 01-.126.129.365.365 0 01-.168.043H3.526a.365.365 0 01-.168-.043.278.278 0 01-.126-.13.854.854 0 01-.063-.171.248.248 0 01.02-.172l.42-1.378a.673.673 0 01.126-.172.281.281 0 01.21-.086zM1.763 6.658a.717.717 0 01-.504-.194.644.644 0 01-.21-.495v-.43a.73.73 0 01.105-.387.68.68 0 01.273-.259C4.309 3.402 6.54 2.276 8.121 1.515 9.702.755 10.493.361 10.493.332c.531-.258.972-.366 1.322-.323.35.043.734.165 1.154.366l8.31 4.518c.14.058.245.144.315.259a.73.73 0 01.105.387v.43c0 .201-.07.366-.21.495a.717.717 0 01-.504.194H1.763zm-.714 13.34a.54.54 0 01.168-.387.516.516 0 01.378-.172h19.642c.168 0 .308.057.42.172a.541.541 0 01.168.387v.818a.522.522 0 01-.168.408.605.605 0 01-.42.151H1.595a.551.551 0 01-.378-.15.522.522 0 01-.168-.41v-.817zm21.405 2.022c.14 0 .266.058.378.173a.592.592 0 01.168.43v.818a.541.541 0 01-.168.387.516.516 0 01-.378.172L.546 23.957a.516.516 0 01-.378-.172.541.541 0 01-.168-.387v-.818a.59.59 0 01.168-.43.516.516 0 01.378-.173l21.908.043z'
  });

  var micIcon = new SVGIcon({
    name: 'mic',
    path: 'M12 15c1.66 0 2.99-1.34 2.99-3L15 6c0-1.66-1.34-3-3-3S9 4.34 9 6v6c0 1.66 1.34 3 3 3zm5.3-3c0 3-2.54 5.1-5.3 5.1S6.7 15 6.7 12H5c0 3.41 2.72 6.23 6 6.72V22h2v-3.28c3.28-.48 6-3.3 6-6.72h-1.7z'
  });

  var directionsIcon = new SVGIcon({
    name: 'directions',
    path: 'M23.649 11.154L12.846.35a1.195 1.195 0 00-1.692 0L.35 11.154a1.195 1.195 0 000 1.692L11.154 23.65a1.195 1.195 0 001.692 0L23.65 12.846c.468-.456.468-1.212 0-1.692zm-9.254 3.853v-3.001H9.593v3.6h-2.4v-4.8c0-.66.54-1.2 1.2-1.2h6.002V6.604l4.2 4.2-4.2 4.202z'
  });

  var calendarIcon = new SVGIcon({
    name: 'calendar',
    path: 'M18.111 13.2H12v6h6.111v-6zM16.89 0v2.4H7.11V0H4.667v2.4H3.444c-1.356 0-2.432 1.08-2.432 2.4L1 21.6C1 22.92 2.088 24 3.444 24h17.112C21.9 24 23 22.92 23 21.6V4.8c0-1.32-1.1-2.4-2.444-2.4h-1.223V0H16.89zm3.667 21.6H3.444V8.4h17.112v13.2z'
  });

  var calloutIcon = new SVGIcon({
    name: 'callout',
    path: 'M21.99 4c0-1.1-.89-2-1.99-2H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h14l4 4-.01-18z'
  });

  var infoIcon = new SVGIcon({
    name: 'info',
    path: 'M12 8.4A1.2 1.2 0 1012 6a1.2 1.2 0 000 2.4zM12 0c6.624 0 12 5.376 12 12s-5.376 12-12 12S0 18.624 0 12 5.376 0 12 0zm0 18c.66 0 1.2-.54 1.2-1.2V12c0-.66-.54-1.2-1.2-1.2-.66 0-1.2.54-1.2 1.2v4.8c0 .66.54 1.2 1.2 1.2z'
  });

  var briefcaseIcon = new SVGIcon({
    name: 'briefcase',
    path: 'M20 7h-4V5c0-1.11-.89-2-2-2h-4c-1.11 0-2 .89-2 2v2H4c-1.11 0-1.99.89-1.99 2L2 20c0 1.11.89 2 2 2h16c1.11 0 2-.89 2-2V9c0-1.11-.89-2-2-2zm-6 0h-4V5h4v2z'
  });

  var kabobIcon = new SVGIcon({
    name: 'kabob',
    viewBox: '0 0 3 11',
    complexContents: "<circle cx=\"1.5\" cy=\"1.5\" r=\"1.5\"/><circle cx=\"1.5\" cy=\"5.5\" r=\"1.5\"/><circle cx=\"1.5\" cy=\"9.5\" r=\"1.5\"/>"
  });

  var personIcon = new SVGIcon({
    name: 'person',
    viewBox: '0 0 18 18',
    path: 'M9 9c2.486 0 4.5-2.014 4.5-4.5S11.486 0 9 0a4.499 4.499 0 00-4.5 4.5C4.5 6.986 6.514 9 9 9zm0 2.25c-3.004 0-9 1.508-9 4.5v1.125C0 17.494.506 18 1.125 18h15.75c.619 0 1.125-.506 1.125-1.125V15.75c0-2.992-5.996-4.5-9-4.5z'
  });

  var magnifyingGlassIcon = new SVGIcon({
    name: 'magnifying_glass',
    path: 'M16.124 13.051a5.154 5.154 0 110-10.308 5.154 5.154 0 010 10.308M16.114 0a7.886 7.886 0 00-6.46 12.407L0 22.06 1.94 24l9.653-9.653A7.886 7.886 0 1016.113 0'
  });

  var officeIcon = new SVGIcon({
    name: 'office',
    path: 'M12 7V3H2v18h20V7H12zM6 19H4v-2h2v2zm0-4H4v-2h2v2zm0-4H4V9h2v2zm0-4H4V5h2v2zm4 12H8v-2h2v2zm0-4H8v-2h2v2zm0-4H8V9h2v2zm0-4H8V5h2v2zm10 12h-8v-2h2v-2h-2v-2h2v-2h-2V9h8v10zm-2-8h-2v2h2v-2zm0 4h-2v2h2v-2z'
  });

  var linkIcon = new SVGIcon({
    name: 'link',
    path: 'M2.28 12A3.723 3.723 0 016 8.28h4.8V6H6c-3.312 0-6 2.688-6 6s2.688 6 6 6h4.8v-2.28H6A3.723 3.723 0 012.28 12zm4.92 1.2h9.6v-2.4H7.2v2.4zM18 6h-4.8v2.28H18A3.723 3.723 0 0121.72 12 3.723 3.723 0 0118 15.72h-4.8V18H18c3.312 0 6-2.688 6-6s-2.688-6-6-6z'
  });

  var windowIcon = new SVGIcon({
    name: 'window',
    path: 'M3 13h8V3H3v10zm0 8h8v-6H3v6zm10 0h8V11h-8v10zm0-18v6h8V3h-8z'
  });

  var phoneIcon = new SVGIcon({
    name: 'phone',
    path: 'M4.827 10.387a20.198 20.198 0 008.786 8.786l2.934-2.933c.36-.36.893-.48 1.36-.32a15.21 15.21 0 004.76.76c.733 0 1.333.6 1.333 1.333v4.654C24 23.4 23.4 24 22.667 24 10.147 24 0 13.853 0 1.333 0 .6.6 0 1.333 0H6c.733 0 1.333.6 1.333 1.333 0 1.667.267 3.267.76 4.76.147.467.04.987-.333 1.36l-2.933 2.934z'
  });

  var tagIcon = new SVGIcon({
    name: 'tag',
    viewBox: '0 0 18 18',
    path: 'M17.469 8.622l-8.1-8.1A1.789 1.789 0 008.1 0H1.8C.81 0 0 .81 0 1.8v6.3c0 .495.198.945.531 1.278l8.1 8.1c.324.324.774.522 1.269.522a1.76 1.76 0 001.269-.531l6.3-6.3A1.76 1.76 0 0018 9.9c0-.495-.207-.954-.531-1.278zM3.15 4.5c-.747 0-1.35-.603-1.35-1.35 0-.747.603-1.35 1.35-1.35.747 0 1.35.603 1.35 1.35 0 .747-.603 1.35-1.35 1.35z'
  });

  var documentIcon = new SVGIcon({
    name: 'document',
    path: 'M4 6H2v14c0 1.1.9 2 2 2h14v-2H4V6zm16-4H8c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm-1 9H9V9h10v2zm-4 4H9v-2h6v2zm4-8H9V5h10v2z'
  });

  var chevronIcon = new SVGIcon({
    name: 'chevron',
    viewBox: '0 0 7 9',
    complexContents: "<g fill-rule=\"evenodd\" transform=\"translate(-1 -8)\"><path d=\"m2.6417004 8-1.1417004 1.0575 3.70850202 3.4425-3.70850202 3.4425 1.1417004 1.0575 4.8582996-4.5z\"/></g>"
  });

  var supportIcon = new SVGIcon({
    name: 'support',
    path: 'M12,0 C5.376,0 0,5.376 0,12 C0,18.624 5.376,24 12,24 C18.624,24 24,18.624 24,12 C24,5.376 18.624,0 12,0 Z M13,19 L11,19 L11,17 L13,17 L13,19 Z M15.07,11.25 L14.17,12.17 C13.45,12.9 13,13.5 13,15 L11,15 L11,14.5 C11,13.4 11.45,12.4 12.17,11.67 L13.41,10.41 C13.78,10.05 14,9.55 14,9 C14,7.9 13.1,7 12,7 C10.9,7 10,7.9 10,9 L8,9 C8,6.79 9.79,5 12,5 C14.21,5 16,6.79 16,9 C16,9.88 15.64,10.68 15.07,11.25 Z'
  });

  var yextIcon = new SVGIcon({
    name: 'yext',
    viewBox: '0 0 30 30',
    path: 'M25.517 28.142v.095h-.204v.905h-.066v-.905h-.197v-.095h.467zm.667 0h.066v1h-.066v-.825l-.24.595h-.013l-.24-.595v.825h-.066v-1h.066l.247.61.246-.61zM15 28.8c7.622 0 13.8-6.178 13.8-13.8 0-7.622-6.178-13.8-13.8-13.8C7.378 1.2 1.2 7.378 1.2 15c0 7.622 6.178 13.8 13.8 13.8zM15 0c8.284 0 15 6.716 15 15 0 8.284-6.716 15-15 15-8.284 0-15-6.716-15-15C0 6.716 6.716 0 15 0zm.45 16.65v-1.2h6.6v1.2h-2.7v5.4h-1.2v-5.4h-2.7zm-1.599-1.35l.849.849-2.601 2.601 2.601 2.601-.849.849-2.601-2.601L8.649 22.2l-.849-.849 2.601-2.601L7.8 16.149l.849-.849 2.601 2.601 2.601-2.601zM18.675 9a2.175 2.175 0 00-1.847 3.323l2.995-2.995A2.163 2.163 0 0018.675 9zm0 5.55a3.375 3.375 0 112.833-5.209l-3.789 3.788a2.175 2.175 0 003.13-1.954h1.201a3.375 3.375 0 01-3.375 3.375zm-7.425-3.734L13.78 7.8l.92.771-2.85 3.397v2.582h-1.2v-2.582L7.8 8.57l.92-.771 2.53 3.016z'
  });

  var pinIcon = new SVGIcon({
    name: 'pin',
    viewBox: '0 0 13 18',
    path: 'm9.375 0c-3.52446429 0-6.375 2.817-6.375 6.3 0 4.725 6.375 11.7 6.375 11.7s6.375-6.975 6.375-11.7c0-3.483-2.8505357-6.3-6.375-6.3zm.00000018 8.55000007c-1.25678576 0-2.27678579-1.008-2.27678579-2.25s1.02000003-2.25 2.27678579-2.25c1.25678572 0 2.27678582 1.008 2.27678582 2.25s-1.0200001 2.25-2.27678582 2.25z'
  });

  var gearIcon = new SVGIcon({
    name: 'gear',
    path: 'M12 10c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm7-7H5a2 2 0 00-2 2v14a2 2 0 002 2h14a2 2 0 002-2V5a2 2 0 00-2-2zm-1.75 9c0 .23-.02.46-.05.68l1.48 1.16c.13.11.17.3.08.45l-1.4 2.42c-.09.15-.27.21-.43.15l-1.74-.7c-.36.28-.76.51-1.18.69l-.26 1.85c-.03.17-.18.3-.35.3h-2.8c-.17 0-.32-.13-.35-.29l-.26-1.85c-.43-.18-.82-.41-1.18-.69l-1.74.7c-.16.06-.34 0-.43-.15l-1.4-2.42a.353.353 0 01.08-.45l1.48-1.16c-.03-.23-.05-.46-.05-.69 0-.23.02-.46.05-.68l-1.48-1.16a.353.353 0 01-.08-.45l1.4-2.42c.09-.15.27-.21.43-.15l1.74.7c.36-.28.76-.51 1.18-.69l.26-1.85c.03-.17.18-.3.35-.3h2.8c.17 0 .32.13.35.29l.26 1.85c.43.18.82.41 1.18.69l1.74-.7c.16-.06.34 0 .43.15l1.4 2.42c.09.15.05.34-.08.45l-1.48 1.16c.03.23.05.46.05.69z'
  });

  var lightBulbIcon = new SVGIcon({
    name: 'light_bulb',
    viewBox: '0 0 32 35',
    path: 'M11.585 31.056l8.38-.493v-.986l-8.38.493zM11.585 33.028L15.775 35l4.19-1.972V31.55l-8.38.493v.986zm6.926-.407l-2.736 1.29-2.13-1.004 4.866-.286zM15.775 7.394c-4.63 0-8.38 3.205-8.38 8.38 0 5.177 4.19 6.902 4.19 12.818v.493l8.38-.493c0-5.916 4.19-8.188 4.19-12.817a8.38 8.38 0 00-8.38-8.38zm5.617 13.48c-1.025 1.837-2.174 3.892-2.381 6.786l-6.44.38c-.129-3.01-1.29-5.021-2.32-6.808-.493-.8-.928-1.636-1.299-2.5h13.556c-.325.708-.704 1.403-1.116 2.142zm1.479-3.128H8.627a7.793 7.793 0 01-.247-1.971c0-4.353 3.042-7.395 7.395-7.395a7.394 7.394 0 017.394 7.395 6.739 6.739 0 01-.3 1.971h.002zM26.62 15.282h4.93v1h-4.93zM23.094 7.756l2.091-2.091.698.697-2.092 2.092zM15.282 0h1v4.93h-1zM5.666 6.362l.697-.697 2.091 2.091-.697.697zM0 15.282h4.93v1H0z'
  });

  var starIcon = new SVGIcon({
    name: 'receipt',
    viewBox: '0 0 18 18',
    path: 'M8.991 0C4.023 0 0 4.032 0 9s4.023 9 8.991 9C13.968 18 18 13.968 18 9s-4.032-9-9.009-9zm3.816 14.4L9 12.105 5.193 14.4l1.008-4.329-3.357-2.907 4.428-.378L9 2.7l1.728 4.077 4.428.378-3.357 2.907z'
  });

  var close = new SVGIcon({
    name: 'close',
    complexContents: "\n    <path d=\"M7 8l9.716 9.716m0-9.716L7 17.716\" \n          stroke=\"currentColor\" \n          stroke-width=\"2\"/>\n  "
  });

  var elements = new SVGIcon({
    name: 'elements',
    path: 'M13,15 L13,17 L21,17 L21,19 L13,19 L13,21 L11,21 L11,15 L13,15 Z M9,17 L9,19 L3,19 L3,17 L9,17 Z M9,15 L7,15 L7,13 L3,13 L3,11 L7,11 L7,9 L9,9 L9,15 Z M21,11 L21,13 L11,13 L11,11 L21,11 Z M17,3 L17,5 L21,5 L21,7 L17,7 L17,9 L15,9 L15,3 L17,3 Z M13,5 L13,7 L3,7 L3,5 L13,5 Z'
  });

  var iconsArray = [thumbIcon, receiptIcon, pantheonIcon, micIcon, directionsIcon, calendarIcon, calloutIcon, infoIcon, briefcaseIcon, kabobIcon, personIcon, magnifyingGlassIcon, officeIcon, linkIcon, windowIcon, phoneIcon, tagIcon, documentIcon, chevronIcon, supportIcon, yextIcon, pinIcon, gearIcon, lightBulbIcon, elements, close];
  var Icons = {};
  iconsArray.forEach(function (icon) {
    Icons[icon.name] = icon.markup();
  });
  Icons["default"] = starIcon.markup();

  var IconComponent =
  /*#__PURE__*/
  function (_Component) {
    _inheritsLoose(IconComponent, _Component);

    /**
     * IconComponent
     * @param opts
     * @param opts.iconName {string}
     * @param opts.customIcon {string}
     * @param opts.iconUrl {string}
     */
    function IconComponent(opts, systemOpts) {
      var _this;

      if (opts === void 0) {
        opts = {};
      }

      if (systemOpts === void 0) {
        systemOpts = {};
      }

      _this = _Component.call(this, opts, systemOpts) || this;
      /**
       * name of an icon from the default icon set
       * @type {string}
       */

      _this.iconName = opts.iconName || 'default';
      /**
       * the markup for a fully custom icon
       * @type {*|null}
       */

      _this.customIcon = opts.customIcon || null;
      /**
       * the url to a custom image icon
       * @type {null}
       */

      _this.iconUrl = opts.iconUrl || null;
      return _this;
    }
    /**
     * getter for the image pasted to handlebars
     * @returns {string}
     */


    /**
     * The template to render
     * @returns {string}
     * @override
     */
    IconComponent.defaultTemplateName = function defaultTemplateName(config) {
      return 'icons/icon';
    }
    /**
     * allowing duplicates
     * @returns {boolean}
     * @override
     */
    ;

    IconComponent.areDuplicateNamesAllowed = function areDuplicateNamesAllowed() {
      return true;
    }
    /**
     * overrides default functionality to provide name and markup
     * @param data
     * @returns {IconComponent}
     */
    ;

    var _proto = IconComponent.prototype;

    _proto.setState = function setState(data) {
      return _Component.prototype.setState.call(this, Object.assign(data, {
        image: this.image,
        name: this.iconName ? this.iconName : 'custom'
      }));
    };

    _createClass(IconComponent, [{
      key: "image",
      get: function get() {
        if (this.customIcon) {
          return this.customIcon;
        }

        if (this.iconUrl) {
          return "<img src=\"" + this.iconUrl + "\" alt=\"\" class=\"Icon-image\">";
        }

        if (Icons[this.iconName]) {
          return Icons[this.iconName];
        }

        return Icons["default"];
      }
    }], [{
      key: "type",
      get: function get() {
        return 'IconComponent';
      }
    }]);

    return IconComponent;
  }(Component);

  /** @module */
  var COMPONENT_CLASS_LIST = [// Core Component
  Component, // Navigation Components
  NavigationComponent, // Search Components
  SearchComponent, FilterSearchComponent, AutoCompleteComponent, SpellCheckComponent, LocationBiasComponent, // Filter Components
  FilterBoxComponent, FilterOptionsComponent, RangeFilterComponent, DateRangeFilterComponent, FacetsComponent, GeoLocationComponent, SortOptionsComponent, // Results Components
  DirectAnswerComponent, UniversalResultsComponent, ResultsComponent, PaginationComponent, ResultsItemComponent, AccordionResultsComponent, LocationResultsItemComponent, EventResultsItemComponent, PeopleResultsItemComponent, MapComponent, // Questions Components
  QuestionSubmissionComponent, // Helper Components
  IconComponent];
  /**
   * The component registry is a map that contains
   * all available component classes used for creation or extension.
   * Each component class has a unique type, which is used as the key for the registry
   * @type {Object.<string, Component>}
   */

  var COMPONENT_REGISTRY = COMPONENT_CLASS_LIST.reduce(function (registry, clazz) {
    registry[clazz.type] = clazz;
    return registry;
  }, {});

  /**
   * ComponentManager is a Singletone that contains both an internal registry of
   * eligible components to be created, as well as keeps track of the current
   * instantiated and active components.
   *
   * ALL components should be constructed using the {ComponentManager} via its `create` method.
   */

  var ComponentManager =
  /*#__PURE__*/
  function () {
    function ComponentManager() {
      /**
       * The active components is an internal container to keep track
       * of all of the components that have been constructed
       */
      this._activeComponents = [];
      /**
       * A local reference to the core library dependency
       *
       * The Core contains both the storage AND services that are needed for performing operations
       * like search and auto complete.
       *
       * The storage is the source of truth for the state of ALL components.
       * Whenever the storage is updated, the state gets pushed down to the necessary components.
       * @type {Core}
       */

      this._core = null;
      /**
       * The primary renderer to use for all components
       * @type {HandlebarsRenderer}
       */

      this._renderer = null;
      /**
       * A local reference to the analytics reporter dependency
       */

      this._analyticsReporter = null;
    }

    ComponentManager.getInstance = function getInstance() {
      if (!this.instance) {
        this.instance = new ComponentManager();
      }

      return this.instance;
    };

    var _proto = ComponentManager.prototype;

    _proto.setRenderer = function setRenderer(renderer) {
      this._renderer = renderer;
      return this;
    };

    _proto.setCore = function setCore(core) {
      this._core = core;
      return this;
    };

    _proto.setAnalyticsReporter = function setAnalyticsReporter(reporter) {
      this._analyticsReporter = reporter;
      return this;
    }
    /**
     * registers a component to be eligible for creation and override.
     * @param {Component} The Component Class to register
     */
    ;

    _proto.register = function register(componentClazz) {
      COMPONENT_REGISTRY[componentClazz.type] = componentClazz;
      return this;
    }
    /**
     * create is the entry point for constructing any and all components.
     * It will instantiate a new instance of the component, and both apply
     * initial state from the storage and bind it to the storage for updates.
     * @param {string} componentType The component type to create
     * @param {Object} opts The options to pipe to the construction of the component
     */
    ;

    _proto.create = function create(componentType, opts) {
      // Every component needs local access to the component manager
      // because sometimes components have subcomponents that need to be
      // constructed during creation
      var systemOpts = {
        core: this._core,
        renderer: this._renderer,
        analyticsReporter: this._analyticsReporter,
        componentManager: this
      };
      var componentClass = COMPONENT_REGISTRY[componentType];

      if (!componentClass.areDuplicateNamesAllowed() && this._activeComponents.some(function (c) {
        return c.name === opts.name;
      })) {
        throw new AnswersComponentError("Another component with name " + opts.name + " already exists", componentType);
      }

      var config = _objectSpread2({
        isTwin: this._activeComponents.some(function (component) {
          return component.constructor.type === componentType;
        })
      }, opts); // Instantiate our new component and keep track of it


      var component = new COMPONENT_REGISTRY[componentType](config, systemOpts).init(config);

      this._activeComponents.push(component); // If there is a global storage to power state, apply the state
      // from the storage to the component, and then bind the component
      // state to the storage via its updates


      if (this._core && this._core.globalStorage !== null) {
        if (component.moduleId === undefined || component.moduleId === null) {
          return component;
        }

        this._core.globalStorage.on('update', component.moduleId, function (data) {
          component.setState(data);
        });
      }

      return component;
    }
    /**
     * Remove the provided component from the list of active components and remove
     * the associated storage event listener
     * @param {Component} component The component to remove
     */
    ;

    _proto.remove = function remove(component) {
      this._core.globalStorage.off('update', component.moduleId);

      var index = this._activeComponents.findIndex(function (c) {
        return c.name === component.name;
      });

      this._activeComponents.splice(index, 1);
    }
    /**
     * Remove the component with the given name
     * @param {string} name The name of the compnent to remove
     */
    ;

    _proto.removeByName = function removeByName(name) {
      var component = this._activeComponents.find(function (c) {
        return c.name === name;
      });

      component.remove();
      DOM.empty(component._container);
    };

    _proto.getActiveComponent = function getActiveComponent(type) {
      return this._activeComponents.find(function (c) {
        return c.constructor.type === type;
      });
    };

    return ComponentManager;
  }();

  /** @module NavigationConfig */
  var TabConfig =
  /*#__PURE__*/
  function () {
    function TabConfig(config) {
      if (config === void 0) {
        config = {};
      }

      /**
       * The name of the tab that is exposed for the link
       * @type {string}
       */
      this.label = config.label || null;
      /**
       * The complete URL, including the params
       * @type {string}
       */

      this.url = config.url || null;
      /**
       * The serverside vertical config id that this is referenced to.
       * By providing this, enables dynamic sorting based on results.
       * @type {string}
       */

      this.configId = config.configId || null;
      /**
       * Determines whether to show this tab first in the order
       * @type {boolean}
       */

      this.isFirst = config.isFirst || false;
      /**
       * Determines whether or not to apply a special class to the
       * markup to determine if it's an active tab
       * @type {boolean}
       */

      this.isActive = config.isActive || false;
    }

    var _proto = TabConfig.prototype;

    _proto.validate = function validate() {};

    TabConfig.from = function from(tabs) {
      var tabConfigs = [];

      if (tabs === undefined) {
        return tabConfigs;
      }

      for (var i = 0; i < tabs.length; i++) {
        var tab = tabs[i];
        tabConfigs.push(new TabConfig(tab));
      }

      return tabConfigs;
    };

    return TabConfig;
  }();

  var NavigationConfig = function NavigationConfig(config) {
    if (config === void 0) {
      config = {};
    }

    this.tabsConfig = TabConfig.from(config.tabs);
  };

  /* eslint-env browser */

  /* global ActiveXObject */

  if (!Element.prototype.matches) {
    // Element.matches polyfill from MDN
    Element.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;
  } // Event constructor polyfill


  (function () {
    if (typeof window.CustomEvent === 'function') {
      return false;
    }

    function CustomEvent(event, params) {
      params = params || {
        bubbles: false,
        cancelable: false,
        detail: null
      };
      var evt = document.createEvent('CustomEvent');
      evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);
      return evt;
    }

    window.CustomEvent = CustomEvent;
    window.Event = CustomEvent;
  })(); // Element.closest polyfill
  // https://developer.mozilla.org/en-US/docs/Web/API/Element/closest#Polyfill


  (function () {
    if (!Element.prototype.matches) {
      Element.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;
    }

    if (!Element.prototype.closest) {
      Element.prototype.closest = function (s) {
        var el = this;

        do {
          if (el.matches(s)) return el;
          el = el.parentElement || el.parentNode;
        } while (el !== null && el.nodeType === 1);

        return null;
      };
    }
  })(); // ParentNode.prepend polyfill
  // https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/prepend#Polyfill


  (function () {
    (function (arr) {
      arr.forEach(function (item) {
        if (item.hasOwnProperty('prepend')) {
          return;
        }

        Object.defineProperty(item, 'prepend', {
          configurable: true,
          enumerable: true,
          writable: true,
          value: function prepend() {
            var argArr = Array.prototype.slice.call(arguments);
            var docFrag = document.createDocumentFragment();
            argArr.forEach(function (argItem) {
              var isNode = argItem instanceof Node;
              docFrag.appendChild(isNode ? argItem : document.createTextNode(String(argItem)));
            });
            this.insertBefore(docFrag, this.firstChild);
          }
        });
      });
    })([Element.prototype, Document.prototype, DocumentFragment.prototype]);
  })(); // Navigator.sendBeacon polyfill
  // Combination of the compact Financial Times polyfill:
  // https://github.com/Financial-Times/polyfill-library/blob/master/polyfills/navigator/sendBeacon/polyfill.js
  // with the async-by-default behavior of Miguel Mota's polyfill:
  // https://github.com/miguelmota/Navigator.sendBeacon/blob/master/sendbeacon.js


  (function () {
    if (window.navigator && window.navigator.sendBeacon) {
      return;
    }

    if (!('navigator' in window)) window.navigator = {};

    window.navigator.sendBeacon = function sendBeacon(url, data) {
      var event = window.event && window.event.type;
      var sync = event === 'unload' || event === 'beforeunload';
      var xhr = 'XMLHttpRequest' in window ? new XMLHttpRequest() : new ActiveXObject('Microsoft.XMLHTTP');
      xhr.open('POST', url, !sync);
      xhr.setRequestHeader('Accept', '*/*');

      if (typeof data === 'string') {
        xhr.setRequestHeader('Content-Type', 'text/plain;charset=UTF-8');
      } else if (Object.prototype.toString.call(data) === '[object Blob]') {
        if (data.type) {
          xhr.setRequestHeader('Content-Type', data.type);
        }
      }

      xhr.send(data);
      return true;
    };
  })();
  /** @typedef {import('./core/services/searchservice').default} SearchService */

  /** @typedef {import('./core/services/autocompleteservice').default} AutoCompleteService */

  /** @typedef {import('./core/services/questionanswerservice').default} QuestionAnswerService */

  /** @typedef {import('./core/services/errorreporterservice').default} ErrorReporterService */

  /** @typedef {import('./core/services/analyticsreporterservice').default} AnalyticsReporterService */

  /**
   * @typedef Services
   * @property {SearchService} searchService
   * @property {AutoCompleteService} autoCompleteService
   * @property {QuestionAnswerService} questionAnswerService
   * @property {ErrorReporterService} errorReporterService
   */

  var DEFAULTS = {
    locale: 'en'
  };
  /**
   * The main Answers interface
   */

  var Answers =
  /*#__PURE__*/
  function () {
    function Answers() {
      if (!Answers.setInstance(this)) {
        return Answers.getInstance();
      }
      /**
       * A reference to the Component base class for custom
       * components to extend
       */


      this.Component = Component;
      /**
       * A reference to the AnalyticsEvent base class for reporting
       * custom analytics
       */

      this.AnalyticsEvent = AnalyticsEvent;
      /**
       * A reference of the renderer to use for the components
       * This is provided during initialization.
       * @type {Renderer}
       */

      this.renderer = new Renderers.Handlebars();
      /**
       * A local reference to the component manager
       * @type {ComponentManager}
       */

      this.components = ComponentManager.getInstance();
      /**
       * A local reference to the core api
       * @type {Core}
       */

      this.core = null;
      /**
       * A callback function to invoke once the library is ready.
       * Typically fired after templates are fetched from server for rendering.
       */

      this._onReady = function () {};
      /**
       * @type {boolean}
       * @private
       */


      this._eligibleForAnalytics = false;
      /**
       * @type {Services}
       * @private
       */

      this._services = null;
      /**
       * @type {AnalyticsReporterService}
       * @private
       */

      this._analyticsReporterService = null;
    }

    Answers.setInstance = function setInstance(instance) {
      if (!this.instance) {
        this.instance = instance;
        return true;
      }

      return false;
    };

    Answers.getInstance = function getInstance() {
      return this.instance;
    };

    var _proto = Answers.prototype;

    _proto.init = function init(config) {
      var _this = this;

      var parsedConfig = this.parseConfig(config);
      this.validateConfig(parsedConfig);
      parsedConfig.search = new SearchConfig(parsedConfig.search);
      parsedConfig.navigation = new NavigationConfig(parsedConfig.navigation);
      var globalStorage = new GlobalStorage();
      var persistentStorage = new PersistentStorage({
        updateListener: parsedConfig.onStateChange,
        resetListener: function resetListener(data) {
          return globalStorage.setAll(data);
        }
      });
      globalStorage.setAll(persistentStorage.getAll());
      globalStorage.set(StorageKeys.SEARCH_CONFIG, parsedConfig.search);
      globalStorage.set(StorageKeys.NAVIGATION_CONFIG, parsedConfig.navigation);
      globalStorage.set(StorageKeys.LOCALE, parsedConfig.locale);
      globalStorage.set(StorageKeys.SESSIONS_OPT_IN, parsedConfig.sessionTrackingEnabled);
      this._services = parsedConfig.mock ? getMockServices() : getServices(parsedConfig, globalStorage);
      this.core = new Core({
        apiKey: parsedConfig.apiKey,
        globalStorage: globalStorage,
        persistentStorage: persistentStorage,
        experienceKey: parsedConfig.experienceKey,
        fieldFormatters: parsedConfig.fieldFormatters,
        experienceVersion: parsedConfig.experienceVersion,
        locale: parsedConfig.locale,
        searchService: this._services.searchService,
        autoCompleteService: this._services.autoCompleteService,
        questionAnswerService: this._services.questionAnswerService
      });

      if (parsedConfig.onStateChange && typeof parsedConfig.onStateChange === 'function') {
        parsedConfig.onStateChange(persistentStorage.getAll(), window.location.search.substr(1));
      }

      this.components.setCore(this.core).setRenderer(this.renderer);
      this._eligibleForAnalytics = parsedConfig.businessId != null;

      if (this._eligibleForAnalytics) {
        // TODO(amullings): Initialize with other services
        var reporter = parsedConfig.mock ? new NoopAnalyticsReporter() : new AnalyticsReporter(this.core, parsedConfig.experienceKey, parsedConfig.experienceVersion, parsedConfig.businessId, parsedConfig.analyticsOptions, parsedConfig.environment);
        this._analyticsReporterService = reporter;
        this.components.setAnalyticsReporter(reporter);
        initScrollListener(reporter);
      }

      this._setDefaultInitialSearch(parsedConfig.search);

      this._onReady = parsedConfig.onReady || function () {};

      if (parsedConfig.useTemplates === false || parsedConfig.templateBundle) {
        if (parsedConfig.templateBundle) {
          this.renderer.init(parsedConfig.templateBundle);
        }

        this._onReady();

        return this;
      } // Templates are currently downloaded separately from the CORE and UI bundle.
      // Future enhancement is to ship the components with templates in a separate bundle.


      this.templates = new TemplateLoader({
        templateUrl: parsedConfig.templateUrl
      }).onLoaded(function (templates) {
        _this.renderer.init(templates);

        _this._onReady();
      });
      return this;
    };

    _proto.domReady = function domReady(cb) {
      DOM.onReady(cb);
    };

    _proto.onReady = function onReady(cb) {
      this._onReady = cb;
      return this;
    }
    /**
     * Parses the config provided by the user. In the parsed config, any options not supplied by the
     * user are given default values.
     * @param {Object} config The user supplied config.
     */
    ;

    _proto.parseConfig = function parseConfig(config) {
      var parsedConfig = Object.assign({}, DEFAULTS, config);
      var sessionTrackingEnabled = true;

      if (typeof config.sessionTrackingEnabled === 'boolean') {
        sessionTrackingEnabled = config.sessionTrackingEnabled;
      }

      parsedConfig.sessionTrackingEnabled = sessionTrackingEnabled;
      var sandboxPrefix = SANDBOX + "-";
      parsedConfig.apiKey.includes(sandboxPrefix) ? parsedConfig.environment = SANDBOX : parsedConfig.environment = PRODUCTION;
      parsedConfig.apiKey = parsedConfig.apiKey.replace(sandboxPrefix, '');
      return parsedConfig;
    }
    /**
     * Validates the Answers config object to ensure things like api key and experience key are
     * properly set.
     * @param {Object} config The Answers config.
     */
    ;

    _proto.validateConfig = function validateConfig(config) {
      // TODO (tmeyer): Extract this method into it's own class. Investigate the use of JSON schema
      // to validate these configs.
      if (typeof config.apiKey !== 'string') {
        throw new Error('Missing required `apiKey`. Type must be {string}');
      }

      if (typeof config.experienceKey !== 'string') {
        throw new Error('Missing required `experienceKey`. Type must be {string}');
      }
    }
    /**
     * Register a custom component type so it can be created via
     * addComponent and used as a child component
     * @param {Component} componentClass
     */
    ;

    _proto.registerComponentType = function registerComponentType(componentClass) {
      this.components.register(componentClass);
    };

    _proto.addComponent = function addComponent(type, opts) {
      if (typeof opts === 'string') {
        opts = {
          container: opts
        };
      }

      try {
        this.components.create(type, opts).mount();
      } catch (e) {
        throw new AnswersComponentError('Failed to add component', type, e);
      }

      return this;
    }
    /**
     * Remove the component - and all of its children - with the given name
     * @param {string} name The name of the component to remove
     */
    ;

    _proto.removeComponent = function removeComponent(name) {
      this.components.removeByName(name);
    };

    _proto.createComponent = function createComponent(opts) {
      return this.components.create('Component', opts).mount();
    };

    _proto.registerHelper = function registerHelper(name, cb) {
      this.renderer.registerHelper(name, cb);
      return this;
    }
    /**
     * Opt in or out of convertion tracking analytics
     * @param {boolean} optIn
     */
    ;

    _proto.setConversionsOptIn = function setConversionsOptIn(optIn) {
      if (this._eligibleForAnalytics) {
        this._analyticsReporterService.setConversionTrackingEnabled(optIn);
      }
    }
    /**
     * Opt in or out of session cookies
     * @param {boolean} optIn
     */
    ;

    _proto.setSessionsOptIn = function setSessionsOptIn(optIn) {
      this.core.globalStorage.set(StorageKeys.SESSIONS_OPT_IN, optIn);
    }
    /**
     * Sets a search query on initialization for vertical searchers that have a
     * defaultInitialSearch provided, if the user hasn't already provided their
     * own via URL param.
     * @param {SearchConfig} searchConfig
     * @private
     */
    ;

    _proto._setDefaultInitialSearch = function _setDefaultInitialSearch(searchConfig) {
      if (searchConfig.defaultInitialSearch == null || !searchConfig.verticalKey) {
        return;
      }

      var prepopulatedQuery = this.core.globalStorage.getState(StorageKeys.QUERY);

      if (prepopulatedQuery != null) {
        return;
      }

      this.core.globalStorage.set('queryTrigger', 'initialize');
      this.core.setQuery(searchConfig.defaultInitialSearch);
    };

    return Answers;
  }();
  /**
   * @param {Object} config
   * @param {GlobalStorage} globalStorage
   * @returns {Services}
   */


  function getServices(config, globalStorage) {
    return {
      searchService: new SearchApi({
        apiKey: config.apiKey,
        experienceKey: config.experienceKey,
        experienceVersion: config.experienceVersion,
        locale: config.locale,
        environment: config.environment
      }),
      autoCompleteService: new AutoCompleteApi({
        apiKey: config.apiKey,
        experienceKey: config.experienceKey,
        experienceVersion: config.experienceVersion,
        locale: config.locale,
        environment: config.environment
      }, globalStorage),
      questionAnswerService: new QuestionAnswerApi({
        apiKey: config.apiKey,
        environment: config.environment
      }, globalStorage),
      errorReporterService: new ErrorReporter({
        apiKey: config.apiKey,
        experienceKey: config.experienceKey,
        experienceVersion: config.experienceVersion,
        printVerbose: config.debug,
        sendToServer: !config.suppressErrorReports,
        environment: config.environment
      }, globalStorage)
    };
  }
  /**
   * @returns {Services}
   */


  function getMockServices() {
    return {
      searchService: new MockSearchService(),
      autoCompleteService: new MockAutoCompleteService(),
      questionAnswerService: new MockQuestionAnswerService(),
      errorReporterService: new ConsoleErrorReporter()
    };
  }
  /**
   * Initialize the scroll event listener to send analytics events
   * when the user scrolls to the bottom. Debounces scroll events so
   * they are processed after the user stops scrolling
   */


  function initScrollListener(reporter) {
    var DEBOUNCE_TIME = 100;
    var timeout = null;

    var sendEvent = function sendEvent() {
      if (window.innerHeight + window.pageYOffset >= document.body.scrollHeight) {
        var event = new AnalyticsEvent('SCROLL_TO_BOTTOM_OF_PAGE');
        reporter.report(event);
      }
    };

    document.addEventListener('scroll', function () {
      clearTimeout(timeout);
      timeout = setTimeout(sendEvent, DEBOUNCE_TIME);
    });
  }

  var ANSWERS = new Answers();

  return ANSWERS;

}(null, _objectSpread2, _inheritsLoose, _wrapNativeSuper, _createClass, _assertThisInitialized));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,