var ANSWERS = (function () {
	'use strict';

	var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	function createCommonjsModule(fn, module) {
		return module = { exports: {} }, fn(module, module.exports), module.exports;
	}

	var check = function (it) {
	  return it && it.Math == Math && it;
	};

	// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
	var global_1 =
	  // eslint-disable-next-line no-undef
	  check(typeof globalThis == 'object' && globalThis) ||
	  check(typeof window == 'object' && window) ||
	  check(typeof self == 'object' && self) ||
	  check(typeof commonjsGlobal == 'object' && commonjsGlobal) ||
	  // eslint-disable-next-line no-new-func
	  Function('return this')();

	var fails = function (exec) {
	  try {
	    return !!exec();
	  } catch (error) {
	    return true;
	  }
	};

	// Thank's IE8 for his funny defineProperty
	var descriptors = !fails(function () {
	  return Object.defineProperty({}, 1, { get: function () { return 7; } })[1] != 7;
	});

	var nativePropertyIsEnumerable = {}.propertyIsEnumerable;
	var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

	// Nashorn ~ JDK8 bug
	var NASHORN_BUG = getOwnPropertyDescriptor && !nativePropertyIsEnumerable.call({ 1: 2 }, 1);

	// `Object.prototype.propertyIsEnumerable` method implementation
	// https://tc39.github.io/ecma262/#sec-object.prototype.propertyisenumerable
	var f = NASHORN_BUG ? function propertyIsEnumerable(V) {
	  var descriptor = getOwnPropertyDescriptor(this, V);
	  return !!descriptor && descriptor.enumerable;
	} : nativePropertyIsEnumerable;

	var objectPropertyIsEnumerable = {
		f: f
	};

	var createPropertyDescriptor = function (bitmap, value) {
	  return {
	    enumerable: !(bitmap & 1),
	    configurable: !(bitmap & 2),
	    writable: !(bitmap & 4),
	    value: value
	  };
	};

	var toString = {}.toString;

	var classofRaw = function (it) {
	  return toString.call(it).slice(8, -1);
	};

	var split = ''.split;

	// fallback for non-array-like ES3 and non-enumerable old V8 strings
	var indexedObject = fails(function () {
	  // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346
	  // eslint-disable-next-line no-prototype-builtins
	  return !Object('z').propertyIsEnumerable(0);
	}) ? function (it) {
	  return classofRaw(it) == 'String' ? split.call(it, '') : Object(it);
	} : Object;

	// `RequireObjectCoercible` abstract operation
	// https://tc39.github.io/ecma262/#sec-requireobjectcoercible
	var requireObjectCoercible = function (it) {
	  if (it == undefined) throw TypeError("Can't call method on " + it);
	  return it;
	};

	// toObject with fallback for non-array-like ES3 strings



	var toIndexedObject = function (it) {
	  return indexedObject(requireObjectCoercible(it));
	};

	var isObject = function (it) {
	  return typeof it === 'object' ? it !== null : typeof it === 'function';
	};

	// `ToPrimitive` abstract operation
	// https://tc39.github.io/ecma262/#sec-toprimitive
	// instead of the ES6 spec version, we didn't implement @@toPrimitive case
	// and the second argument - flag - preferred type is a string
	var toPrimitive = function (input, PREFERRED_STRING) {
	  if (!isObject(input)) return input;
	  var fn, val;
	  if (PREFERRED_STRING && typeof (fn = input.toString) == 'function' && !isObject(val = fn.call(input))) return val;
	  if (typeof (fn = input.valueOf) == 'function' && !isObject(val = fn.call(input))) return val;
	  if (!PREFERRED_STRING && typeof (fn = input.toString) == 'function' && !isObject(val = fn.call(input))) return val;
	  throw TypeError("Can't convert object to primitive value");
	};

	var hasOwnProperty = {}.hasOwnProperty;

	var has = function (it, key) {
	  return hasOwnProperty.call(it, key);
	};

	var document$1 = global_1.document;
	// typeof document.createElement is 'object' in old IE
	var EXISTS = isObject(document$1) && isObject(document$1.createElement);

	var documentCreateElement = function (it) {
	  return EXISTS ? document$1.createElement(it) : {};
	};

	// Thank's IE8 for his funny defineProperty
	var ie8DomDefine = !descriptors && !fails(function () {
	  return Object.defineProperty(documentCreateElement('div'), 'a', {
	    get: function () { return 7; }
	  }).a != 7;
	});

	var nativeGetOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

	// `Object.getOwnPropertyDescriptor` method
	// https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptor
	var f$1 = descriptors ? nativeGetOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P) {
	  O = toIndexedObject(O);
	  P = toPrimitive(P, true);
	  if (ie8DomDefine) try {
	    return nativeGetOwnPropertyDescriptor(O, P);
	  } catch (error) { /* empty */ }
	  if (has(O, P)) return createPropertyDescriptor(!objectPropertyIsEnumerable.f.call(O, P), O[P]);
	};

	var objectGetOwnPropertyDescriptor = {
		f: f$1
	};

	var replacement = /#|\.prototype\./;

	var isForced = function (feature, detection) {
	  var value = data[normalize(feature)];
	  return value == POLYFILL ? true
	    : value == NATIVE ? false
	    : typeof detection == 'function' ? fails(detection)
	    : !!detection;
	};

	var normalize = isForced.normalize = function (string) {
	  return String(string).replace(replacement, '.').toLowerCase();
	};

	var data = isForced.data = {};
	var NATIVE = isForced.NATIVE = 'N';
	var POLYFILL = isForced.POLYFILL = 'P';

	var isForced_1 = isForced;

	var path = {};

	var aFunction = function (it) {
	  if (typeof it != 'function') {
	    throw TypeError(String(it) + ' is not a function');
	  } return it;
	};

	// optional / simple context binding
	var functionBindContext = function (fn, that, length) {
	  aFunction(fn);
	  if (that === undefined) return fn;
	  switch (length) {
	    case 0: return function () {
	      return fn.call(that);
	    };
	    case 1: return function (a) {
	      return fn.call(that, a);
	    };
	    case 2: return function (a, b) {
	      return fn.call(that, a, b);
	    };
	    case 3: return function (a, b, c) {
	      return fn.call(that, a, b, c);
	    };
	  }
	  return function (/* ...args */) {
	    return fn.apply(that, arguments);
	  };
	};

	var anObject = function (it) {
	  if (!isObject(it)) {
	    throw TypeError(String(it) + ' is not an object');
	  } return it;
	};

	var nativeDefineProperty = Object.defineProperty;

	// `Object.defineProperty` method
	// https://tc39.github.io/ecma262/#sec-object.defineproperty
	var f$2 = descriptors ? nativeDefineProperty : function defineProperty(O, P, Attributes) {
	  anObject(O);
	  P = toPrimitive(P, true);
	  anObject(Attributes);
	  if (ie8DomDefine) try {
	    return nativeDefineProperty(O, P, Attributes);
	  } catch (error) { /* empty */ }
	  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported');
	  if ('value' in Attributes) O[P] = Attributes.value;
	  return O;
	};

	var objectDefineProperty = {
		f: f$2
	};

	var createNonEnumerableProperty = descriptors ? function (object, key, value) {
	  return objectDefineProperty.f(object, key, createPropertyDescriptor(1, value));
	} : function (object, key, value) {
	  object[key] = value;
	  return object;
	};

	var getOwnPropertyDescriptor$1 = objectGetOwnPropertyDescriptor.f;






	var wrapConstructor = function (NativeConstructor) {
	  var Wrapper = function (a, b, c) {
	    if (this instanceof NativeConstructor) {
	      switch (arguments.length) {
	        case 0: return new NativeConstructor();
	        case 1: return new NativeConstructor(a);
	        case 2: return new NativeConstructor(a, b);
	      } return new NativeConstructor(a, b, c);
	    } return NativeConstructor.apply(this, arguments);
	  };
	  Wrapper.prototype = NativeConstructor.prototype;
	  return Wrapper;
	};

	/*
	  options.target      - name of the target object
	  options.global      - target is the global object
	  options.stat        - export as static methods of target
	  options.proto       - export as prototype methods of target
	  options.real        - real prototype method for the `pure` version
	  options.forced      - export even if the native feature is available
	  options.bind        - bind methods to the target, required for the `pure` version
	  options.wrap        - wrap constructors to preventing global pollution, required for the `pure` version
	  options.unsafe      - use the simple assignment of property instead of delete + defineProperty
	  options.sham        - add a flag to not completely full polyfills
	  options.enumerable  - export as enumerable property
	  options.noTargetGet - prevent calling a getter on target
	*/
	var _export = function (options, source) {
	  var TARGET = options.target;
	  var GLOBAL = options.global;
	  var STATIC = options.stat;
	  var PROTO = options.proto;

	  var nativeSource = GLOBAL ? global_1 : STATIC ? global_1[TARGET] : (global_1[TARGET] || {}).prototype;

	  var target = GLOBAL ? path : path[TARGET] || (path[TARGET] = {});
	  var targetPrototype = target.prototype;

	  var FORCED, USE_NATIVE, VIRTUAL_PROTOTYPE;
	  var key, sourceProperty, targetProperty, nativeProperty, resultProperty, descriptor;

	  for (key in source) {
	    FORCED = isForced_1(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced);
	    // contains in native
	    USE_NATIVE = !FORCED && nativeSource && has(nativeSource, key);

	    targetProperty = target[key];

	    if (USE_NATIVE) if (options.noTargetGet) {
	      descriptor = getOwnPropertyDescriptor$1(nativeSource, key);
	      nativeProperty = descriptor && descriptor.value;
	    } else nativeProperty = nativeSource[key];

	    // export native or implementation
	    sourceProperty = (USE_NATIVE && nativeProperty) ? nativeProperty : source[key];

	    if (USE_NATIVE && typeof targetProperty === typeof sourceProperty) continue;

	    // bind timers to global for call from export context
	    if (options.bind && USE_NATIVE) resultProperty = functionBindContext(sourceProperty, global_1);
	    // wrap global constructors for prevent changs in this version
	    else if (options.wrap && USE_NATIVE) resultProperty = wrapConstructor(sourceProperty);
	    // make static versions for prototype methods
	    else if (PROTO && typeof sourceProperty == 'function') resultProperty = functionBindContext(Function.call, sourceProperty);
	    // default case
	    else resultProperty = sourceProperty;

	    // add a flag to not completely full polyfills
	    if (options.sham || (sourceProperty && sourceProperty.sham) || (targetProperty && targetProperty.sham)) {
	      createNonEnumerableProperty(resultProperty, 'sham', true);
	    }

	    target[key] = resultProperty;

	    if (PROTO) {
	      VIRTUAL_PROTOTYPE = TARGET + 'Prototype';
	      if (!has(path, VIRTUAL_PROTOTYPE)) {
	        createNonEnumerableProperty(path, VIRTUAL_PROTOTYPE, {});
	      }
	      // export virtual prototype methods
	      path[VIRTUAL_PROTOTYPE][key] = sourceProperty;
	      // export real prototype methods
	      if (options.real && targetPrototype && !targetPrototype[key]) {
	        createNonEnumerableProperty(targetPrototype, key, sourceProperty);
	      }
	    }
	  }
	};

	var aFunction$1 = function (variable) {
	  return typeof variable == 'function' ? variable : undefined;
	};

	var getBuiltIn = function (namespace, method) {
	  return arguments.length < 2 ? aFunction$1(path[namespace]) || aFunction$1(global_1[namespace])
	    : path[namespace] && path[namespace][method] || global_1[namespace] && global_1[namespace][method];
	};

	var engineUserAgent = getBuiltIn('navigator', 'userAgent') || '';

	var slice = [].slice;
	var MSIE = /MSIE .\./.test(engineUserAgent); // <- dirty ie9- check

	var wrap = function (scheduler) {
	  return function (handler, timeout /* , ...arguments */) {
	    var boundArgs = arguments.length > 2;
	    var args = boundArgs ? slice.call(arguments, 2) : undefined;
	    return scheduler(boundArgs ? function () {
	      // eslint-disable-next-line no-new-func
	      (typeof handler == 'function' ? handler : Function(handler)).apply(this, args);
	    } : handler, timeout);
	  };
	};

	// ie9- setTimeout & setInterval additional parameters fix
	// https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#timers
	_export({ global: true, bind: true, forced: MSIE }, {
	  // `setTimeout` method
	  // https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-settimeout
	  setTimeout: wrap(global_1.setTimeout),
	  // `setInterval` method
	  // https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-setinterval
	  setInterval: wrap(global_1.setInterval)
	});

	var setTimeout$1 = path.setTimeout;

	var setTimeout$2 = setTimeout$1;

	var ceil = Math.ceil;
	var floor = Math.floor;

	// `ToInteger` abstract operation
	// https://tc39.github.io/ecma262/#sec-tointeger
	var toInteger = function (argument) {
	  return isNaN(argument = +argument) ? 0 : (argument > 0 ? floor : ceil)(argument);
	};

	var min = Math.min;

	// `ToLength` abstract operation
	// https://tc39.github.io/ecma262/#sec-tolength
	var toLength = function (argument) {
	  return argument > 0 ? min(toInteger(argument), 0x1FFFFFFFFFFFFF) : 0; // 2 ** 53 - 1 == 9007199254740991
	};

	var max = Math.max;
	var min$1 = Math.min;

	// Helper for a popular repeating case of the spec:
	// Let integer be ? ToInteger(index).
	// If integer < 0, let result be max((length + integer), 0); else let result be min(integer, length).
	var toAbsoluteIndex = function (index, length) {
	  var integer = toInteger(index);
	  return integer < 0 ? max(integer + length, 0) : min$1(integer, length);
	};

	// `Array.prototype.{ indexOf, includes }` methods implementation
	var createMethod = function (IS_INCLUDES) {
	  return function ($this, el, fromIndex) {
	    var O = toIndexedObject($this);
	    var length = toLength(O.length);
	    var index = toAbsoluteIndex(fromIndex, length);
	    var value;
	    // Array#includes uses SameValueZero equality algorithm
	    // eslint-disable-next-line no-self-compare
	    if (IS_INCLUDES && el != el) while (length > index) {
	      value = O[index++];
	      // eslint-disable-next-line no-self-compare
	      if (value != value) return true;
	    // Array#indexOf ignores holes, Array#includes - not
	    } else for (;length > index; index++) {
	      if ((IS_INCLUDES || index in O) && O[index] === el) return IS_INCLUDES || index || 0;
	    } return !IS_INCLUDES && -1;
	  };
	};

	var arrayIncludes = {
	  // `Array.prototype.includes` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.includes
	  includes: createMethod(true),
	  // `Array.prototype.indexOf` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.indexof
	  indexOf: createMethod(false)
	};

	var defineProperty = Object.defineProperty;
	var cache = {};

	var thrower = function (it) { throw it; };

	var arrayMethodUsesToLength = function (METHOD_NAME, options) {
	  if (has(cache, METHOD_NAME)) return cache[METHOD_NAME];
	  if (!options) options = {};
	  var method = [][METHOD_NAME];
	  var ACCESSORS = has(options, 'ACCESSORS') ? options.ACCESSORS : false;
	  var argument0 = has(options, 0) ? options[0] : thrower;
	  var argument1 = has(options, 1) ? options[1] : undefined;

	  return cache[METHOD_NAME] = !!method && !fails(function () {
	    if (ACCESSORS && !descriptors) return true;
	    var O = { length: -1 };

	    if (ACCESSORS) defineProperty(O, 1, { enumerable: true, get: thrower });
	    else O[1] = 1;

	    method.call(O, argument0, argument1);
	  });
	};

	var $includes = arrayIncludes.includes;



	var USES_TO_LENGTH = arrayMethodUsesToLength('indexOf', { ACCESSORS: true, 1: 0 });

	// `Array.prototype.includes` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.includes
	_export({ target: 'Array', proto: true, forced: !USES_TO_LENGTH }, {
	  includes: function includes(el /* , fromIndex = 0 */) {
	    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	var entryVirtual = function (CONSTRUCTOR) {
	  return path[CONSTRUCTOR + 'Prototype'];
	};

	var includes = entryVirtual('Array').includes;

	var isPure = true;

	var setGlobal = function (key, value) {
	  try {
	    createNonEnumerableProperty(global_1, key, value);
	  } catch (error) {
	    global_1[key] = value;
	  } return value;
	};

	var SHARED = '__core-js_shared__';
	var store = global_1[SHARED] || setGlobal(SHARED, {});

	var sharedStore = store;

	var shared = createCommonjsModule(function (module) {
	(module.exports = function (key, value) {
	  return sharedStore[key] || (sharedStore[key] = value !== undefined ? value : {});
	})('versions', []).push({
	  version: '3.6.4',
	  mode: 'pure',
	  copyright: '© 2020 Denis Pushkarev (zloirock.ru)'
	});
	});

	var id = 0;
	var postfix = Math.random();

	var uid = function (key) {
	  return 'Symbol(' + String(key === undefined ? '' : key) + ')_' + (++id + postfix).toString(36);
	};

	var nativeSymbol = !!Object.getOwnPropertySymbols && !fails(function () {
	  // Chrome 38 Symbol has incorrect toString conversion
	  // eslint-disable-next-line no-undef
	  return !String(Symbol());
	});

	var useSymbolAsUid = nativeSymbol
	  // eslint-disable-next-line no-undef
	  && !Symbol.sham
	  // eslint-disable-next-line no-undef
	  && typeof Symbol.iterator == 'symbol';

	var WellKnownSymbolsStore = shared('wks');
	var Symbol$1 = global_1.Symbol;
	var createWellKnownSymbol = useSymbolAsUid ? Symbol$1 : Symbol$1 && Symbol$1.withoutSetter || uid;

	var wellKnownSymbol = function (name) {
	  if (!has(WellKnownSymbolsStore, name)) {
	    if (nativeSymbol && has(Symbol$1, name)) WellKnownSymbolsStore[name] = Symbol$1[name];
	    else WellKnownSymbolsStore[name] = createWellKnownSymbol('Symbol.' + name);
	  } return WellKnownSymbolsStore[name];
	};

	var MATCH = wellKnownSymbol('match');

	// `IsRegExp` abstract operation
	// https://tc39.github.io/ecma262/#sec-isregexp
	var isRegexp = function (it) {
	  var isRegExp;
	  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : classofRaw(it) == 'RegExp');
	};

	var notARegexp = function (it) {
	  if (isRegexp(it)) {
	    throw TypeError("The method doesn't accept regular expressions");
	  } return it;
	};

	var MATCH$1 = wellKnownSymbol('match');

	var correctIsRegexpLogic = function (METHOD_NAME) {
	  var regexp = /./;
	  try {
	    '/./'[METHOD_NAME](regexp);
	  } catch (e) {
	    try {
	      regexp[MATCH$1] = false;
	      return '/./'[METHOD_NAME](regexp);
	    } catch (f) { /* empty */ }
	  } return false;
	};

	// `String.prototype.includes` method
	// https://tc39.github.io/ecma262/#sec-string.prototype.includes
	_export({ target: 'String', proto: true, forced: !correctIsRegexpLogic('includes') }, {
	  includes: function includes(searchString /* , position = 0 */) {
	    return !!~String(requireObjectCoercible(this))
	      .indexOf(notARegexp(searchString), arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	var includes$1 = entryVirtual('String').includes;

	var ArrayPrototype = Array.prototype;
	var StringPrototype = String.prototype;

	var includes$2 = function (it) {
	  var own = it.includes;
	  if (it === ArrayPrototype || (it instanceof Array && own === ArrayPrototype.includes)) return includes;
	  if (typeof it === 'string' || it === StringPrototype || (it instanceof String && own === StringPrototype.includes)) {
	    return includes$1;
	  } return own;
	};

	var includes$3 = includes$2;

	var includes$4 = includes$3;

	var hiddenKeys = {};

	var indexOf = arrayIncludes.indexOf;


	var objectKeysInternal = function (object, names) {
	  var O = toIndexedObject(object);
	  var i = 0;
	  var result = [];
	  var key;
	  for (key in O) !has(hiddenKeys, key) && has(O, key) && result.push(key);
	  // Don't enum bug & hidden keys
	  while (names.length > i) if (has(O, key = names[i++])) {
	    ~indexOf(result, key) || result.push(key);
	  }
	  return result;
	};

	// IE8- don't enum bug keys
	var enumBugKeys = [
	  'constructor',
	  'hasOwnProperty',
	  'isPrototypeOf',
	  'propertyIsEnumerable',
	  'toLocaleString',
	  'toString',
	  'valueOf'
	];

	// `Object.keys` method
	// https://tc39.github.io/ecma262/#sec-object.keys
	var objectKeys = Object.keys || function keys(O) {
	  return objectKeysInternal(O, enumBugKeys);
	};

	var f$3 = Object.getOwnPropertySymbols;

	var objectGetOwnPropertySymbols = {
		f: f$3
	};

	// `ToObject` abstract operation
	// https://tc39.github.io/ecma262/#sec-toobject
	var toObject = function (argument) {
	  return Object(requireObjectCoercible(argument));
	};

	var nativeAssign = Object.assign;
	var defineProperty$1 = Object.defineProperty;

	// `Object.assign` method
	// https://tc39.github.io/ecma262/#sec-object.assign
	var objectAssign = !nativeAssign || fails(function () {
	  // should have correct order of operations (Edge bug)
	  if (descriptors && nativeAssign({ b: 1 }, nativeAssign(defineProperty$1({}, 'a', {
	    enumerable: true,
	    get: function () {
	      defineProperty$1(this, 'b', {
	        value: 3,
	        enumerable: false
	      });
	    }
	  }), { b: 2 })).b !== 1) return true;
	  // should work with symbols and should have deterministic property order (V8 bug)
	  var A = {};
	  var B = {};
	  // eslint-disable-next-line no-undef
	  var symbol = Symbol();
	  var alphabet = 'abcdefghijklmnopqrst';
	  A[symbol] = 7;
	  alphabet.split('').forEach(function (chr) { B[chr] = chr; });
	  return nativeAssign({}, A)[symbol] != 7 || objectKeys(nativeAssign({}, B)).join('') != alphabet;
	}) ? function assign(target, source) { // eslint-disable-line no-unused-vars
	  var T = toObject(target);
	  var argumentsLength = arguments.length;
	  var index = 1;
	  var getOwnPropertySymbols = objectGetOwnPropertySymbols.f;
	  var propertyIsEnumerable = objectPropertyIsEnumerable.f;
	  while (argumentsLength > index) {
	    var S = indexedObject(arguments[index++]);
	    var keys = getOwnPropertySymbols ? objectKeys(S).concat(getOwnPropertySymbols(S)) : objectKeys(S);
	    var length = keys.length;
	    var j = 0;
	    var key;
	    while (length > j) {
	      key = keys[j++];
	      if (!descriptors || propertyIsEnumerable.call(S, key)) T[key] = S[key];
	    }
	  } return T;
	} : nativeAssign;

	// `Object.assign` method
	// https://tc39.github.io/ecma262/#sec-object.assign
	_export({ target: 'Object', stat: true, forced: Object.assign !== objectAssign }, {
	  assign: objectAssign
	});

	var assign = path.Object.assign;

	var assign$1 = assign;

	var assign$2 = assign$1;

	var check$1 = function (it) {
	  return it && it.Math == Math && it;
	};

	// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
	var global_1$1 =
	  // eslint-disable-next-line no-undef
	  check$1(typeof globalThis == 'object' && globalThis) ||
	  check$1(typeof window == 'object' && window) ||
	  check$1(typeof self == 'object' && self) ||
	  check$1(typeof commonjsGlobal == 'object' && commonjsGlobal) ||
	  // eslint-disable-next-line no-new-func
	  Function('return this')();

	var fails$1 = function (exec) {
	  try {
	    return !!exec();
	  } catch (error) {
	    return true;
	  }
	};

	// Thank's IE8 for his funny defineProperty
	var descriptors$1 = !fails$1(function () {
	  return Object.defineProperty({}, 1, { get: function () { return 7; } })[1] != 7;
	});

	var nativePropertyIsEnumerable$1 = {}.propertyIsEnumerable;
	var getOwnPropertyDescriptor$2 = Object.getOwnPropertyDescriptor;

	// Nashorn ~ JDK8 bug
	var NASHORN_BUG$1 = getOwnPropertyDescriptor$2 && !nativePropertyIsEnumerable$1.call({ 1: 2 }, 1);

	// `Object.prototype.propertyIsEnumerable` method implementation
	// https://tc39.github.io/ecma262/#sec-object.prototype.propertyisenumerable
	var f$4 = NASHORN_BUG$1 ? function propertyIsEnumerable(V) {
	  var descriptor = getOwnPropertyDescriptor$2(this, V);
	  return !!descriptor && descriptor.enumerable;
	} : nativePropertyIsEnumerable$1;

	var objectPropertyIsEnumerable$1 = {
		f: f$4
	};

	var createPropertyDescriptor$1 = function (bitmap, value) {
	  return {
	    enumerable: !(bitmap & 1),
	    configurable: !(bitmap & 2),
	    writable: !(bitmap & 4),
	    value: value
	  };
	};

	var toString$1 = {}.toString;

	var classofRaw$1 = function (it) {
	  return toString$1.call(it).slice(8, -1);
	};

	var split$1 = ''.split;

	// fallback for non-array-like ES3 and non-enumerable old V8 strings
	var indexedObject$1 = fails$1(function () {
	  // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346
	  // eslint-disable-next-line no-prototype-builtins
	  return !Object('z').propertyIsEnumerable(0);
	}) ? function (it) {
	  return classofRaw$1(it) == 'String' ? split$1.call(it, '') : Object(it);
	} : Object;

	// `RequireObjectCoercible` abstract operation
	// https://tc39.github.io/ecma262/#sec-requireobjectcoercible
	var requireObjectCoercible$1 = function (it) {
	  if (it == undefined) throw TypeError("Can't call method on " + it);
	  return it;
	};

	// toObject with fallback for non-array-like ES3 strings



	var toIndexedObject$1 = function (it) {
	  return indexedObject$1(requireObjectCoercible$1(it));
	};

	var isObject$1 = function (it) {
	  return typeof it === 'object' ? it !== null : typeof it === 'function';
	};

	// `ToPrimitive` abstract operation
	// https://tc39.github.io/ecma262/#sec-toprimitive
	// instead of the ES6 spec version, we didn't implement @@toPrimitive case
	// and the second argument - flag - preferred type is a string
	var toPrimitive$1 = function (input, PREFERRED_STRING) {
	  if (!isObject$1(input)) return input;
	  var fn, val;
	  if (PREFERRED_STRING && typeof (fn = input.toString) == 'function' && !isObject$1(val = fn.call(input))) return val;
	  if (typeof (fn = input.valueOf) == 'function' && !isObject$1(val = fn.call(input))) return val;
	  if (!PREFERRED_STRING && typeof (fn = input.toString) == 'function' && !isObject$1(val = fn.call(input))) return val;
	  throw TypeError("Can't convert object to primitive value");
	};

	var hasOwnProperty$1 = {}.hasOwnProperty;

	var has$1 = function (it, key) {
	  return hasOwnProperty$1.call(it, key);
	};

	var document$2 = global_1$1.document;
	// typeof document.createElement is 'object' in old IE
	var EXISTS$1 = isObject$1(document$2) && isObject$1(document$2.createElement);

	var documentCreateElement$1 = function (it) {
	  return EXISTS$1 ? document$2.createElement(it) : {};
	};

	// Thank's IE8 for his funny defineProperty
	var ie8DomDefine$1 = !descriptors$1 && !fails$1(function () {
	  return Object.defineProperty(documentCreateElement$1('div'), 'a', {
	    get: function () { return 7; }
	  }).a != 7;
	});

	var nativeGetOwnPropertyDescriptor$1 = Object.getOwnPropertyDescriptor;

	// `Object.getOwnPropertyDescriptor` method
	// https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptor
	var f$5 = descriptors$1 ? nativeGetOwnPropertyDescriptor$1 : function getOwnPropertyDescriptor(O, P) {
	  O = toIndexedObject$1(O);
	  P = toPrimitive$1(P, true);
	  if (ie8DomDefine$1) try {
	    return nativeGetOwnPropertyDescriptor$1(O, P);
	  } catch (error) { /* empty */ }
	  if (has$1(O, P)) return createPropertyDescriptor$1(!objectPropertyIsEnumerable$1.f.call(O, P), O[P]);
	};

	var objectGetOwnPropertyDescriptor$1 = {
		f: f$5
	};

	var anObject$1 = function (it) {
	  if (!isObject$1(it)) {
	    throw TypeError(String(it) + ' is not an object');
	  } return it;
	};

	var nativeDefineProperty$1 = Object.defineProperty;

	// `Object.defineProperty` method
	// https://tc39.github.io/ecma262/#sec-object.defineproperty
	var f$6 = descriptors$1 ? nativeDefineProperty$1 : function defineProperty(O, P, Attributes) {
	  anObject$1(O);
	  P = toPrimitive$1(P, true);
	  anObject$1(Attributes);
	  if (ie8DomDefine$1) try {
	    return nativeDefineProperty$1(O, P, Attributes);
	  } catch (error) { /* empty */ }
	  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported');
	  if ('value' in Attributes) O[P] = Attributes.value;
	  return O;
	};

	var objectDefineProperty$1 = {
		f: f$6
	};

	var createNonEnumerableProperty$1 = descriptors$1 ? function (object, key, value) {
	  return objectDefineProperty$1.f(object, key, createPropertyDescriptor$1(1, value));
	} : function (object, key, value) {
	  object[key] = value;
	  return object;
	};

	var setGlobal$1 = function (key, value) {
	  try {
	    createNonEnumerableProperty$1(global_1$1, key, value);
	  } catch (error) {
	    global_1$1[key] = value;
	  } return value;
	};

	var SHARED$1 = '__core-js_shared__';
	var store$1 = global_1$1[SHARED$1] || setGlobal$1(SHARED$1, {});

	var sharedStore$1 = store$1;

	var functionToString = Function.toString;

	// this helper broken in `3.4.1-3.4.4`, so we can't use `shared` helper
	if (typeof sharedStore$1.inspectSource != 'function') {
	  sharedStore$1.inspectSource = function (it) {
	    return functionToString.call(it);
	  };
	}

	var inspectSource = sharedStore$1.inspectSource;

	var WeakMap = global_1$1.WeakMap;

	var nativeWeakMap = typeof WeakMap === 'function' && /native code/.test(inspectSource(WeakMap));

	var isPure$1 = false;

	var shared$1 = createCommonjsModule(function (module) {
	(module.exports = function (key, value) {
	  return sharedStore$1[key] || (sharedStore$1[key] = value !== undefined ? value : {});
	})('versions', []).push({
	  version: '3.6.4',
	  mode: 'global',
	  copyright: '© 2020 Denis Pushkarev (zloirock.ru)'
	});
	});

	var id$1 = 0;
	var postfix$1 = Math.random();

	var uid$1 = function (key) {
	  return 'Symbol(' + String(key === undefined ? '' : key) + ')_' + (++id$1 + postfix$1).toString(36);
	};

	var keys = shared$1('keys');

	var sharedKey = function (key) {
	  return keys[key] || (keys[key] = uid$1(key));
	};

	var hiddenKeys$1 = {};

	var WeakMap$1 = global_1$1.WeakMap;
	var set, get, has$2;

	var enforce = function (it) {
	  return has$2(it) ? get(it) : set(it, {});
	};

	var getterFor = function (TYPE) {
	  return function (it) {
	    var state;
	    if (!isObject$1(it) || (state = get(it)).type !== TYPE) {
	      throw TypeError('Incompatible receiver, ' + TYPE + ' required');
	    } return state;
	  };
	};

	if (nativeWeakMap) {
	  var store$2 = new WeakMap$1();
	  var wmget = store$2.get;
	  var wmhas = store$2.has;
	  var wmset = store$2.set;
	  set = function (it, metadata) {
	    wmset.call(store$2, it, metadata);
	    return metadata;
	  };
	  get = function (it) {
	    return wmget.call(store$2, it) || {};
	  };
	  has$2 = function (it) {
	    return wmhas.call(store$2, it);
	  };
	} else {
	  var STATE = sharedKey('state');
	  hiddenKeys$1[STATE] = true;
	  set = function (it, metadata) {
	    createNonEnumerableProperty$1(it, STATE, metadata);
	    return metadata;
	  };
	  get = function (it) {
	    return has$1(it, STATE) ? it[STATE] : {};
	  };
	  has$2 = function (it) {
	    return has$1(it, STATE);
	  };
	}

	var internalState = {
	  set: set,
	  get: get,
	  has: has$2,
	  enforce: enforce,
	  getterFor: getterFor
	};

	var redefine = createCommonjsModule(function (module) {
	var getInternalState = internalState.get;
	var enforceInternalState = internalState.enforce;
	var TEMPLATE = String(String).split('String');

	(module.exports = function (O, key, value, options) {
	  var unsafe = options ? !!options.unsafe : false;
	  var simple = options ? !!options.enumerable : false;
	  var noTargetGet = options ? !!options.noTargetGet : false;
	  if (typeof value == 'function') {
	    if (typeof key == 'string' && !has$1(value, 'name')) createNonEnumerableProperty$1(value, 'name', key);
	    enforceInternalState(value).source = TEMPLATE.join(typeof key == 'string' ? key : '');
	  }
	  if (O === global_1$1) {
	    if (simple) O[key] = value;
	    else setGlobal$1(key, value);
	    return;
	  } else if (!unsafe) {
	    delete O[key];
	  } else if (!noTargetGet && O[key]) {
	    simple = true;
	  }
	  if (simple) O[key] = value;
	  else createNonEnumerableProperty$1(O, key, value);
	// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
	})(Function.prototype, 'toString', function toString() {
	  return typeof this == 'function' && getInternalState(this).source || inspectSource(this);
	});
	});

	var path$1 = global_1$1;

	var aFunction$2 = function (variable) {
	  return typeof variable == 'function' ? variable : undefined;
	};

	var getBuiltIn$1 = function (namespace, method) {
	  return arguments.length < 2 ? aFunction$2(path$1[namespace]) || aFunction$2(global_1$1[namespace])
	    : path$1[namespace] && path$1[namespace][method] || global_1$1[namespace] && global_1$1[namespace][method];
	};

	var ceil$1 = Math.ceil;
	var floor$1 = Math.floor;

	// `ToInteger` abstract operation
	// https://tc39.github.io/ecma262/#sec-tointeger
	var toInteger$1 = function (argument) {
	  return isNaN(argument = +argument) ? 0 : (argument > 0 ? floor$1 : ceil$1)(argument);
	};

	var min$2 = Math.min;

	// `ToLength` abstract operation
	// https://tc39.github.io/ecma262/#sec-tolength
	var toLength$1 = function (argument) {
	  return argument > 0 ? min$2(toInteger$1(argument), 0x1FFFFFFFFFFFFF) : 0; // 2 ** 53 - 1 == 9007199254740991
	};

	var max$1 = Math.max;
	var min$3 = Math.min;

	// Helper for a popular repeating case of the spec:
	// Let integer be ? ToInteger(index).
	// If integer < 0, let result be max((length + integer), 0); else let result be min(integer, length).
	var toAbsoluteIndex$1 = function (index, length) {
	  var integer = toInteger$1(index);
	  return integer < 0 ? max$1(integer + length, 0) : min$3(integer, length);
	};

	// `Array.prototype.{ indexOf, includes }` methods implementation
	var createMethod$1 = function (IS_INCLUDES) {
	  return function ($this, el, fromIndex) {
	    var O = toIndexedObject$1($this);
	    var length = toLength$1(O.length);
	    var index = toAbsoluteIndex$1(fromIndex, length);
	    var value;
	    // Array#includes uses SameValueZero equality algorithm
	    // eslint-disable-next-line no-self-compare
	    if (IS_INCLUDES && el != el) while (length > index) {
	      value = O[index++];
	      // eslint-disable-next-line no-self-compare
	      if (value != value) return true;
	    // Array#indexOf ignores holes, Array#includes - not
	    } else for (;length > index; index++) {
	      if ((IS_INCLUDES || index in O) && O[index] === el) return IS_INCLUDES || index || 0;
	    } return !IS_INCLUDES && -1;
	  };
	};

	var arrayIncludes$1 = {
	  // `Array.prototype.includes` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.includes
	  includes: createMethod$1(true),
	  // `Array.prototype.indexOf` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.indexof
	  indexOf: createMethod$1(false)
	};

	var indexOf$1 = arrayIncludes$1.indexOf;


	var objectKeysInternal$1 = function (object, names) {
	  var O = toIndexedObject$1(object);
	  var i = 0;
	  var result = [];
	  var key;
	  for (key in O) !has$1(hiddenKeys$1, key) && has$1(O, key) && result.push(key);
	  // Don't enum bug & hidden keys
	  while (names.length > i) if (has$1(O, key = names[i++])) {
	    ~indexOf$1(result, key) || result.push(key);
	  }
	  return result;
	};

	// IE8- don't enum bug keys
	var enumBugKeys$1 = [
	  'constructor',
	  'hasOwnProperty',
	  'isPrototypeOf',
	  'propertyIsEnumerable',
	  'toLocaleString',
	  'toString',
	  'valueOf'
	];

	var hiddenKeys$2 = enumBugKeys$1.concat('length', 'prototype');

	// `Object.getOwnPropertyNames` method
	// https://tc39.github.io/ecma262/#sec-object.getownpropertynames
	var f$7 = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
	  return objectKeysInternal$1(O, hiddenKeys$2);
	};

	var objectGetOwnPropertyNames = {
		f: f$7
	};

	var f$8 = Object.getOwnPropertySymbols;

	var objectGetOwnPropertySymbols$1 = {
		f: f$8
	};

	// all object keys, includes non-enumerable and symbols
	var ownKeys = getBuiltIn$1('Reflect', 'ownKeys') || function ownKeys(it) {
	  var keys = objectGetOwnPropertyNames.f(anObject$1(it));
	  var getOwnPropertySymbols = objectGetOwnPropertySymbols$1.f;
	  return getOwnPropertySymbols ? keys.concat(getOwnPropertySymbols(it)) : keys;
	};

	var copyConstructorProperties = function (target, source) {
	  var keys = ownKeys(source);
	  var defineProperty = objectDefineProperty$1.f;
	  var getOwnPropertyDescriptor = objectGetOwnPropertyDescriptor$1.f;
	  for (var i = 0; i < keys.length; i++) {
	    var key = keys[i];
	    if (!has$1(target, key)) defineProperty(target, key, getOwnPropertyDescriptor(source, key));
	  }
	};

	var replacement$1 = /#|\.prototype\./;

	var isForced$1 = function (feature, detection) {
	  var value = data$1[normalize$1(feature)];
	  return value == POLYFILL$1 ? true
	    : value == NATIVE$1 ? false
	    : typeof detection == 'function' ? fails$1(detection)
	    : !!detection;
	};

	var normalize$1 = isForced$1.normalize = function (string) {
	  return String(string).replace(replacement$1, '.').toLowerCase();
	};

	var data$1 = isForced$1.data = {};
	var NATIVE$1 = isForced$1.NATIVE = 'N';
	var POLYFILL$1 = isForced$1.POLYFILL = 'P';

	var isForced_1$1 = isForced$1;

	var getOwnPropertyDescriptor$3 = objectGetOwnPropertyDescriptor$1.f;






	/*
	  options.target      - name of the target object
	  options.global      - target is the global object
	  options.stat        - export as static methods of target
	  options.proto       - export as prototype methods of target
	  options.real        - real prototype method for the `pure` version
	  options.forced      - export even if the native feature is available
	  options.bind        - bind methods to the target, required for the `pure` version
	  options.wrap        - wrap constructors to preventing global pollution, required for the `pure` version
	  options.unsafe      - use the simple assignment of property instead of delete + defineProperty
	  options.sham        - add a flag to not completely full polyfills
	  options.enumerable  - export as enumerable property
	  options.noTargetGet - prevent calling a getter on target
	*/
	var _export$1 = function (options, source) {
	  var TARGET = options.target;
	  var GLOBAL = options.global;
	  var STATIC = options.stat;
	  var FORCED, target, key, targetProperty, sourceProperty, descriptor;
	  if (GLOBAL) {
	    target = global_1$1;
	  } else if (STATIC) {
	    target = global_1$1[TARGET] || setGlobal$1(TARGET, {});
	  } else {
	    target = (global_1$1[TARGET] || {}).prototype;
	  }
	  if (target) for (key in source) {
	    sourceProperty = source[key];
	    if (options.noTargetGet) {
	      descriptor = getOwnPropertyDescriptor$3(target, key);
	      targetProperty = descriptor && descriptor.value;
	    } else targetProperty = target[key];
	    FORCED = isForced_1$1(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced);
	    // contained in target
	    if (!FORCED && targetProperty !== undefined) {
	      if (typeof sourceProperty === typeof targetProperty) continue;
	      copyConstructorProperties(sourceProperty, targetProperty);
	    }
	    // add a flag to not completely full polyfills
	    if (options.sham || (targetProperty && targetProperty.sham)) {
	      createNonEnumerableProperty$1(sourceProperty, 'sham', true);
	    }
	    // extend global
	    redefine(target, key, sourceProperty, options);
	  }
	};

	var nativeSymbol$1 = !!Object.getOwnPropertySymbols && !fails$1(function () {
	  // Chrome 38 Symbol has incorrect toString conversion
	  // eslint-disable-next-line no-undef
	  return !String(Symbol());
	});

	var useSymbolAsUid$1 = nativeSymbol$1
	  // eslint-disable-next-line no-undef
	  && !Symbol.sham
	  // eslint-disable-next-line no-undef
	  && typeof Symbol.iterator == 'symbol';

	// `IsArray` abstract operation
	// https://tc39.github.io/ecma262/#sec-isarray
	var isArray = Array.isArray || function isArray(arg) {
	  return classofRaw$1(arg) == 'Array';
	};

	// `ToObject` abstract operation
	// https://tc39.github.io/ecma262/#sec-toobject
	var toObject$1 = function (argument) {
	  return Object(requireObjectCoercible$1(argument));
	};

	// `Object.keys` method
	// https://tc39.github.io/ecma262/#sec-object.keys
	var objectKeys$1 = Object.keys || function keys(O) {
	  return objectKeysInternal$1(O, enumBugKeys$1);
	};

	// `Object.defineProperties` method
	// https://tc39.github.io/ecma262/#sec-object.defineproperties
	var objectDefineProperties = descriptors$1 ? Object.defineProperties : function defineProperties(O, Properties) {
	  anObject$1(O);
	  var keys = objectKeys$1(Properties);
	  var length = keys.length;
	  var index = 0;
	  var key;
	  while (length > index) objectDefineProperty$1.f(O, key = keys[index++], Properties[key]);
	  return O;
	};

	var html = getBuiltIn$1('document', 'documentElement');

	var GT = '>';
	var LT = '<';
	var PROTOTYPE = 'prototype';
	var SCRIPT = 'script';
	var IE_PROTO = sharedKey('IE_PROTO');

	var EmptyConstructor = function () { /* empty */ };

	var scriptTag = function (content) {
	  return LT + SCRIPT + GT + content + LT + '/' + SCRIPT + GT;
	};

	// Create object with fake `null` prototype: use ActiveX Object with cleared prototype
	var NullProtoObjectViaActiveX = function (activeXDocument) {
	  activeXDocument.write(scriptTag(''));
	  activeXDocument.close();
	  var temp = activeXDocument.parentWindow.Object;
	  activeXDocument = null; // avoid memory leak
	  return temp;
	};

	// Create object with fake `null` prototype: use iframe Object with cleared prototype
	var NullProtoObjectViaIFrame = function () {
	  // Thrash, waste and sodomy: IE GC bug
	  var iframe = documentCreateElement$1('iframe');
	  var JS = 'java' + SCRIPT + ':';
	  var iframeDocument;
	  iframe.style.display = 'none';
	  html.appendChild(iframe);
	  // https://github.com/zloirock/core-js/issues/475
	  iframe.src = String(JS);
	  iframeDocument = iframe.contentWindow.document;
	  iframeDocument.open();
	  iframeDocument.write(scriptTag('document.F=Object'));
	  iframeDocument.close();
	  return iframeDocument.F;
	};

	// Check for document.domain and active x support
	// No need to use active x approach when document.domain is not set
	// see https://github.com/es-shims/es5-shim/issues/150
	// variation of https://github.com/kitcambridge/es5-shim/commit/4f738ac066346
	// avoid IE GC bug
	var activeXDocument;
	var NullProtoObject = function () {
	  try {
	    /* global ActiveXObject */
	    activeXDocument = document.domain && new ActiveXObject('htmlfile');
	  } catch (error) { /* ignore */ }
	  NullProtoObject = activeXDocument ? NullProtoObjectViaActiveX(activeXDocument) : NullProtoObjectViaIFrame();
	  var length = enumBugKeys$1.length;
	  while (length--) delete NullProtoObject[PROTOTYPE][enumBugKeys$1[length]];
	  return NullProtoObject();
	};

	hiddenKeys$1[IE_PROTO] = true;

	// `Object.create` method
	// https://tc39.github.io/ecma262/#sec-object.create
	var objectCreate = Object.create || function create(O, Properties) {
	  var result;
	  if (O !== null) {
	    EmptyConstructor[PROTOTYPE] = anObject$1(O);
	    result = new EmptyConstructor();
	    EmptyConstructor[PROTOTYPE] = null;
	    // add "__proto__" for Object.getPrototypeOf polyfill
	    result[IE_PROTO] = O;
	  } else result = NullProtoObject();
	  return Properties === undefined ? result : objectDefineProperties(result, Properties);
	};

	var nativeGetOwnPropertyNames = objectGetOwnPropertyNames.f;

	var toString$2 = {}.toString;

	var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
	  ? Object.getOwnPropertyNames(window) : [];

	var getWindowNames = function (it) {
	  try {
	    return nativeGetOwnPropertyNames(it);
	  } catch (error) {
	    return windowNames.slice();
	  }
	};

	// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
	var f$9 = function getOwnPropertyNames(it) {
	  return windowNames && toString$2.call(it) == '[object Window]'
	    ? getWindowNames(it)
	    : nativeGetOwnPropertyNames(toIndexedObject$1(it));
	};

	var objectGetOwnPropertyNamesExternal = {
		f: f$9
	};

	var WellKnownSymbolsStore$1 = shared$1('wks');
	var Symbol$2 = global_1$1.Symbol;
	var createWellKnownSymbol$1 = useSymbolAsUid$1 ? Symbol$2 : Symbol$2 && Symbol$2.withoutSetter || uid$1;

	var wellKnownSymbol$1 = function (name) {
	  if (!has$1(WellKnownSymbolsStore$1, name)) {
	    if (nativeSymbol$1 && has$1(Symbol$2, name)) WellKnownSymbolsStore$1[name] = Symbol$2[name];
	    else WellKnownSymbolsStore$1[name] = createWellKnownSymbol$1('Symbol.' + name);
	  } return WellKnownSymbolsStore$1[name];
	};

	var f$a = wellKnownSymbol$1;

	var wellKnownSymbolWrapped = {
		f: f$a
	};

	var defineProperty$2 = objectDefineProperty$1.f;

	var defineWellKnownSymbol = function (NAME) {
	  var Symbol = path$1.Symbol || (path$1.Symbol = {});
	  if (!has$1(Symbol, NAME)) defineProperty$2(Symbol, NAME, {
	    value: wellKnownSymbolWrapped.f(NAME)
	  });
	};

	var defineProperty$3 = objectDefineProperty$1.f;



	var TO_STRING_TAG = wellKnownSymbol$1('toStringTag');

	var setToStringTag = function (it, TAG, STATIC) {
	  if (it && !has$1(it = STATIC ? it : it.prototype, TO_STRING_TAG)) {
	    defineProperty$3(it, TO_STRING_TAG, { configurable: true, value: TAG });
	  }
	};

	var aFunction$3 = function (it) {
	  if (typeof it != 'function') {
	    throw TypeError(String(it) + ' is not a function');
	  } return it;
	};

	// optional / simple context binding
	var functionBindContext$1 = function (fn, that, length) {
	  aFunction$3(fn);
	  if (that === undefined) return fn;
	  switch (length) {
	    case 0: return function () {
	      return fn.call(that);
	    };
	    case 1: return function (a) {
	      return fn.call(that, a);
	    };
	    case 2: return function (a, b) {
	      return fn.call(that, a, b);
	    };
	    case 3: return function (a, b, c) {
	      return fn.call(that, a, b, c);
	    };
	  }
	  return function (/* ...args */) {
	    return fn.apply(that, arguments);
	  };
	};

	var SPECIES = wellKnownSymbol$1('species');

	// `ArraySpeciesCreate` abstract operation
	// https://tc39.github.io/ecma262/#sec-arrayspeciescreate
	var arraySpeciesCreate = function (originalArray, length) {
	  var C;
	  if (isArray(originalArray)) {
	    C = originalArray.constructor;
	    // cross-realm fallback
	    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;
	    else if (isObject$1(C)) {
	      C = C[SPECIES];
	      if (C === null) C = undefined;
	    }
	  } return new (C === undefined ? Array : C)(length === 0 ? 0 : length);
	};

	var push = [].push;

	// `Array.prototype.{ forEach, map, filter, some, every, find, findIndex }` methods implementation
	var createMethod$2 = function (TYPE) {
	  var IS_MAP = TYPE == 1;
	  var IS_FILTER = TYPE == 2;
	  var IS_SOME = TYPE == 3;
	  var IS_EVERY = TYPE == 4;
	  var IS_FIND_INDEX = TYPE == 6;
	  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
	  return function ($this, callbackfn, that, specificCreate) {
	    var O = toObject$1($this);
	    var self = indexedObject$1(O);
	    var boundFunction = functionBindContext$1(callbackfn, that, 3);
	    var length = toLength$1(self.length);
	    var index = 0;
	    var create = specificCreate || arraySpeciesCreate;
	    var target = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;
	    var value, result;
	    for (;length > index; index++) if (NO_HOLES || index in self) {
	      value = self[index];
	      result = boundFunction(value, index, O);
	      if (TYPE) {
	        if (IS_MAP) target[index] = result; // map
	        else if (result) switch (TYPE) {
	          case 3: return true;              // some
	          case 5: return value;             // find
	          case 6: return index;             // findIndex
	          case 2: push.call(target, value); // filter
	        } else if (IS_EVERY) return false;  // every
	      }
	    }
	    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : target;
	  };
	};

	var arrayIteration = {
	  // `Array.prototype.forEach` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.foreach
	  forEach: createMethod$2(0),
	  // `Array.prototype.map` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.map
	  map: createMethod$2(1),
	  // `Array.prototype.filter` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.filter
	  filter: createMethod$2(2),
	  // `Array.prototype.some` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.some
	  some: createMethod$2(3),
	  // `Array.prototype.every` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.every
	  every: createMethod$2(4),
	  // `Array.prototype.find` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.find
	  find: createMethod$2(5),
	  // `Array.prototype.findIndex` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.findIndex
	  findIndex: createMethod$2(6)
	};

	var $forEach = arrayIteration.forEach;

	var HIDDEN = sharedKey('hidden');
	var SYMBOL = 'Symbol';
	var PROTOTYPE$1 = 'prototype';
	var TO_PRIMITIVE = wellKnownSymbol$1('toPrimitive');
	var setInternalState = internalState.set;
	var getInternalState = internalState.getterFor(SYMBOL);
	var ObjectPrototype = Object[PROTOTYPE$1];
	var $Symbol = global_1$1.Symbol;
	var $stringify = getBuiltIn$1('JSON', 'stringify');
	var nativeGetOwnPropertyDescriptor$2 = objectGetOwnPropertyDescriptor$1.f;
	var nativeDefineProperty$2 = objectDefineProperty$1.f;
	var nativeGetOwnPropertyNames$1 = objectGetOwnPropertyNamesExternal.f;
	var nativePropertyIsEnumerable$2 = objectPropertyIsEnumerable$1.f;
	var AllSymbols = shared$1('symbols');
	var ObjectPrototypeSymbols = shared$1('op-symbols');
	var StringToSymbolRegistry = shared$1('string-to-symbol-registry');
	var SymbolToStringRegistry = shared$1('symbol-to-string-registry');
	var WellKnownSymbolsStore$2 = shared$1('wks');
	var QObject = global_1$1.QObject;
	// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
	var USE_SETTER = !QObject || !QObject[PROTOTYPE$1] || !QObject[PROTOTYPE$1].findChild;

	// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
	var setSymbolDescriptor = descriptors$1 && fails$1(function () {
	  return objectCreate(nativeDefineProperty$2({}, 'a', {
	    get: function () { return nativeDefineProperty$2(this, 'a', { value: 7 }).a; }
	  })).a != 7;
	}) ? function (O, P, Attributes) {
	  var ObjectPrototypeDescriptor = nativeGetOwnPropertyDescriptor$2(ObjectPrototype, P);
	  if (ObjectPrototypeDescriptor) delete ObjectPrototype[P];
	  nativeDefineProperty$2(O, P, Attributes);
	  if (ObjectPrototypeDescriptor && O !== ObjectPrototype) {
	    nativeDefineProperty$2(ObjectPrototype, P, ObjectPrototypeDescriptor);
	  }
	} : nativeDefineProperty$2;

	var wrap$1 = function (tag, description) {
	  var symbol = AllSymbols[tag] = objectCreate($Symbol[PROTOTYPE$1]);
	  setInternalState(symbol, {
	    type: SYMBOL,
	    tag: tag,
	    description: description
	  });
	  if (!descriptors$1) symbol.description = description;
	  return symbol;
	};

	var isSymbol = useSymbolAsUid$1 ? function (it) {
	  return typeof it == 'symbol';
	} : function (it) {
	  return Object(it) instanceof $Symbol;
	};

	var $defineProperty = function defineProperty(O, P, Attributes) {
	  if (O === ObjectPrototype) $defineProperty(ObjectPrototypeSymbols, P, Attributes);
	  anObject$1(O);
	  var key = toPrimitive$1(P, true);
	  anObject$1(Attributes);
	  if (has$1(AllSymbols, key)) {
	    if (!Attributes.enumerable) {
	      if (!has$1(O, HIDDEN)) nativeDefineProperty$2(O, HIDDEN, createPropertyDescriptor$1(1, {}));
	      O[HIDDEN][key] = true;
	    } else {
	      if (has$1(O, HIDDEN) && O[HIDDEN][key]) O[HIDDEN][key] = false;
	      Attributes = objectCreate(Attributes, { enumerable: createPropertyDescriptor$1(0, false) });
	    } return setSymbolDescriptor(O, key, Attributes);
	  } return nativeDefineProperty$2(O, key, Attributes);
	};

	var $defineProperties = function defineProperties(O, Properties) {
	  anObject$1(O);
	  var properties = toIndexedObject$1(Properties);
	  var keys = objectKeys$1(properties).concat($getOwnPropertySymbols(properties));
	  $forEach(keys, function (key) {
	    if (!descriptors$1 || $propertyIsEnumerable.call(properties, key)) $defineProperty(O, key, properties[key]);
	  });
	  return O;
	};

	var $create = function create(O, Properties) {
	  return Properties === undefined ? objectCreate(O) : $defineProperties(objectCreate(O), Properties);
	};

	var $propertyIsEnumerable = function propertyIsEnumerable(V) {
	  var P = toPrimitive$1(V, true);
	  var enumerable = nativePropertyIsEnumerable$2.call(this, P);
	  if (this === ObjectPrototype && has$1(AllSymbols, P) && !has$1(ObjectPrototypeSymbols, P)) return false;
	  return enumerable || !has$1(this, P) || !has$1(AllSymbols, P) || has$1(this, HIDDEN) && this[HIDDEN][P] ? enumerable : true;
	};

	var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(O, P) {
	  var it = toIndexedObject$1(O);
	  var key = toPrimitive$1(P, true);
	  if (it === ObjectPrototype && has$1(AllSymbols, key) && !has$1(ObjectPrototypeSymbols, key)) return;
	  var descriptor = nativeGetOwnPropertyDescriptor$2(it, key);
	  if (descriptor && has$1(AllSymbols, key) && !(has$1(it, HIDDEN) && it[HIDDEN][key])) {
	    descriptor.enumerable = true;
	  }
	  return descriptor;
	};

	var $getOwnPropertyNames = function getOwnPropertyNames(O) {
	  var names = nativeGetOwnPropertyNames$1(toIndexedObject$1(O));
	  var result = [];
	  $forEach(names, function (key) {
	    if (!has$1(AllSymbols, key) && !has$1(hiddenKeys$1, key)) result.push(key);
	  });
	  return result;
	};

	var $getOwnPropertySymbols = function getOwnPropertySymbols(O) {
	  var IS_OBJECT_PROTOTYPE = O === ObjectPrototype;
	  var names = nativeGetOwnPropertyNames$1(IS_OBJECT_PROTOTYPE ? ObjectPrototypeSymbols : toIndexedObject$1(O));
	  var result = [];
	  $forEach(names, function (key) {
	    if (has$1(AllSymbols, key) && (!IS_OBJECT_PROTOTYPE || has$1(ObjectPrototype, key))) {
	      result.push(AllSymbols[key]);
	    }
	  });
	  return result;
	};

	// `Symbol` constructor
	// https://tc39.github.io/ecma262/#sec-symbol-constructor
	if (!nativeSymbol$1) {
	  $Symbol = function Symbol() {
	    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor');
	    var description = !arguments.length || arguments[0] === undefined ? undefined : String(arguments[0]);
	    var tag = uid$1(description);
	    var setter = function (value) {
	      if (this === ObjectPrototype) setter.call(ObjectPrototypeSymbols, value);
	      if (has$1(this, HIDDEN) && has$1(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
	      setSymbolDescriptor(this, tag, createPropertyDescriptor$1(1, value));
	    };
	    if (descriptors$1 && USE_SETTER) setSymbolDescriptor(ObjectPrototype, tag, { configurable: true, set: setter });
	    return wrap$1(tag, description);
	  };

	  redefine($Symbol[PROTOTYPE$1], 'toString', function toString() {
	    return getInternalState(this).tag;
	  });

	  redefine($Symbol, 'withoutSetter', function (description) {
	    return wrap$1(uid$1(description), description);
	  });

	  objectPropertyIsEnumerable$1.f = $propertyIsEnumerable;
	  objectDefineProperty$1.f = $defineProperty;
	  objectGetOwnPropertyDescriptor$1.f = $getOwnPropertyDescriptor;
	  objectGetOwnPropertyNames.f = objectGetOwnPropertyNamesExternal.f = $getOwnPropertyNames;
	  objectGetOwnPropertySymbols$1.f = $getOwnPropertySymbols;

	  wellKnownSymbolWrapped.f = function (name) {
	    return wrap$1(wellKnownSymbol$1(name), name);
	  };

	  if (descriptors$1) {
	    // https://github.com/tc39/proposal-Symbol-description
	    nativeDefineProperty$2($Symbol[PROTOTYPE$1], 'description', {
	      configurable: true,
	      get: function description() {
	        return getInternalState(this).description;
	      }
	    });
	    if (!isPure$1) {
	      redefine(ObjectPrototype, 'propertyIsEnumerable', $propertyIsEnumerable, { unsafe: true });
	    }
	  }
	}

	_export$1({ global: true, wrap: true, forced: !nativeSymbol$1, sham: !nativeSymbol$1 }, {
	  Symbol: $Symbol
	});

	$forEach(objectKeys$1(WellKnownSymbolsStore$2), function (name) {
	  defineWellKnownSymbol(name);
	});

	_export$1({ target: SYMBOL, stat: true, forced: !nativeSymbol$1 }, {
	  // `Symbol.for` method
	  // https://tc39.github.io/ecma262/#sec-symbol.for
	  'for': function (key) {
	    var string = String(key);
	    if (has$1(StringToSymbolRegistry, string)) return StringToSymbolRegistry[string];
	    var symbol = $Symbol(string);
	    StringToSymbolRegistry[string] = symbol;
	    SymbolToStringRegistry[symbol] = string;
	    return symbol;
	  },
	  // `Symbol.keyFor` method
	  // https://tc39.github.io/ecma262/#sec-symbol.keyfor
	  keyFor: function keyFor(sym) {
	    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol');
	    if (has$1(SymbolToStringRegistry, sym)) return SymbolToStringRegistry[sym];
	  },
	  useSetter: function () { USE_SETTER = true; },
	  useSimple: function () { USE_SETTER = false; }
	});

	_export$1({ target: 'Object', stat: true, forced: !nativeSymbol$1, sham: !descriptors$1 }, {
	  // `Object.create` method
	  // https://tc39.github.io/ecma262/#sec-object.create
	  create: $create,
	  // `Object.defineProperty` method
	  // https://tc39.github.io/ecma262/#sec-object.defineproperty
	  defineProperty: $defineProperty,
	  // `Object.defineProperties` method
	  // https://tc39.github.io/ecma262/#sec-object.defineproperties
	  defineProperties: $defineProperties,
	  // `Object.getOwnPropertyDescriptor` method
	  // https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptors
	  getOwnPropertyDescriptor: $getOwnPropertyDescriptor
	});

	_export$1({ target: 'Object', stat: true, forced: !nativeSymbol$1 }, {
	  // `Object.getOwnPropertyNames` method
	  // https://tc39.github.io/ecma262/#sec-object.getownpropertynames
	  getOwnPropertyNames: $getOwnPropertyNames,
	  // `Object.getOwnPropertySymbols` method
	  // https://tc39.github.io/ecma262/#sec-object.getownpropertysymbols
	  getOwnPropertySymbols: $getOwnPropertySymbols
	});

	// Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives
	// https://bugs.chromium.org/p/v8/issues/detail?id=3443
	_export$1({ target: 'Object', stat: true, forced: fails$1(function () { objectGetOwnPropertySymbols$1.f(1); }) }, {
	  getOwnPropertySymbols: function getOwnPropertySymbols(it) {
	    return objectGetOwnPropertySymbols$1.f(toObject$1(it));
	  }
	});

	// `JSON.stringify` method behavior with symbols
	// https://tc39.github.io/ecma262/#sec-json.stringify
	if ($stringify) {
	  var FORCED_JSON_STRINGIFY = !nativeSymbol$1 || fails$1(function () {
	    var symbol = $Symbol();
	    // MS Edge converts symbol values to JSON as {}
	    return $stringify([symbol]) != '[null]'
	      // WebKit converts symbol values to JSON as null
	      || $stringify({ a: symbol }) != '{}'
	      // V8 throws on boxed symbols
	      || $stringify(Object(symbol)) != '{}';
	  });

	  _export$1({ target: 'JSON', stat: true, forced: FORCED_JSON_STRINGIFY }, {
	    // eslint-disable-next-line no-unused-vars
	    stringify: function stringify(it, replacer, space) {
	      var args = [it];
	      var index = 1;
	      var $replacer;
	      while (arguments.length > index) args.push(arguments[index++]);
	      $replacer = replacer;
	      if (!isObject$1(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
	      if (!isArray(replacer)) replacer = function (key, value) {
	        if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
	        if (!isSymbol(value)) return value;
	      };
	      args[1] = replacer;
	      return $stringify.apply(null, args);
	    }
	  });
	}

	// `Symbol.prototype[@@toPrimitive]` method
	// https://tc39.github.io/ecma262/#sec-symbol.prototype-@@toprimitive
	if (!$Symbol[PROTOTYPE$1][TO_PRIMITIVE]) {
	  createNonEnumerableProperty$1($Symbol[PROTOTYPE$1], TO_PRIMITIVE, $Symbol[PROTOTYPE$1].valueOf);
	}
	// `Symbol.prototype[@@toStringTag]` property
	// https://tc39.github.io/ecma262/#sec-symbol.prototype-@@tostringtag
	setToStringTag($Symbol, SYMBOL);

	hiddenKeys$1[HIDDEN] = true;

	// `Symbol.asyncIterator` well-known symbol
	// https://tc39.github.io/ecma262/#sec-symbol.asynciterator
	defineWellKnownSymbol('asyncIterator');

	var defineProperty$4 = objectDefineProperty$1.f;


	var NativeSymbol = global_1$1.Symbol;

	if (descriptors$1 && typeof NativeSymbol == 'function' && (!('description' in NativeSymbol.prototype) ||
	  // Safari 12 bug
	  NativeSymbol().description !== undefined
	)) {
	  var EmptyStringDescriptionStore = {};
	  // wrap Symbol constructor for correct work with undefined description
	  var SymbolWrapper = function Symbol() {
	    var description = arguments.length < 1 || arguments[0] === undefined ? undefined : String(arguments[0]);
	    var result = this instanceof SymbolWrapper
	      ? new NativeSymbol(description)
	      // in Edge 13, String(Symbol(undefined)) === 'Symbol(undefined)'
	      : description === undefined ? NativeSymbol() : NativeSymbol(description);
	    if (description === '') EmptyStringDescriptionStore[result] = true;
	    return result;
	  };
	  copyConstructorProperties(SymbolWrapper, NativeSymbol);
	  var symbolPrototype = SymbolWrapper.prototype = NativeSymbol.prototype;
	  symbolPrototype.constructor = SymbolWrapper;

	  var symbolToString = symbolPrototype.toString;
	  var native = String(NativeSymbol('test')) == 'Symbol(test)';
	  var regexp = /^Symbol\((.*)\)[^)]+$/;
	  defineProperty$4(symbolPrototype, 'description', {
	    configurable: true,
	    get: function description() {
	      var symbol = isObject$1(this) ? this.valueOf() : this;
	      var string = symbolToString.call(symbol);
	      if (has$1(EmptyStringDescriptionStore, symbol)) return '';
	      var desc = native ? string.slice(7, -1) : string.replace(regexp, '$1');
	      return desc === '' ? undefined : desc;
	    }
	  });

	  _export$1({ global: true, forced: true }, {
	    Symbol: SymbolWrapper
	  });
	}

	// `Symbol.hasInstance` well-known symbol
	// https://tc39.github.io/ecma262/#sec-symbol.hasinstance
	defineWellKnownSymbol('hasInstance');

	// `Symbol.isConcatSpreadable` well-known symbol
	// https://tc39.github.io/ecma262/#sec-symbol.isconcatspreadable
	defineWellKnownSymbol('isConcatSpreadable');

	// `Symbol.iterator` well-known symbol
	// https://tc39.github.io/ecma262/#sec-symbol.iterator
	defineWellKnownSymbol('iterator');

	// `Symbol.match` well-known symbol
	// https://tc39.github.io/ecma262/#sec-symbol.match
	defineWellKnownSymbol('match');

	// `Symbol.matchAll` well-known symbol
	defineWellKnownSymbol('matchAll');

	// `Symbol.replace` well-known symbol
	// https://tc39.github.io/ecma262/#sec-symbol.replace
	defineWellKnownSymbol('replace');

	// `Symbol.search` well-known symbol
	// https://tc39.github.io/ecma262/#sec-symbol.search
	defineWellKnownSymbol('search');

	// `Symbol.species` well-known symbol
	// https://tc39.github.io/ecma262/#sec-symbol.species
	defineWellKnownSymbol('species');

	// `Symbol.split` well-known symbol
	// https://tc39.github.io/ecma262/#sec-symbol.split
	defineWellKnownSymbol('split');

	// `Symbol.toPrimitive` well-known symbol
	// https://tc39.github.io/ecma262/#sec-symbol.toprimitive
	defineWellKnownSymbol('toPrimitive');

	// `Symbol.toStringTag` well-known symbol
	// https://tc39.github.io/ecma262/#sec-symbol.tostringtag
	defineWellKnownSymbol('toStringTag');

	// `Symbol.unscopables` well-known symbol
	// https://tc39.github.io/ecma262/#sec-symbol.unscopables
	defineWellKnownSymbol('unscopables');

	var nativeAssign$1 = Object.assign;
	var defineProperty$5 = Object.defineProperty;

	// `Object.assign` method
	// https://tc39.github.io/ecma262/#sec-object.assign
	var objectAssign$1 = !nativeAssign$1 || fails$1(function () {
	  // should have correct order of operations (Edge bug)
	  if (descriptors$1 && nativeAssign$1({ b: 1 }, nativeAssign$1(defineProperty$5({}, 'a', {
	    enumerable: true,
	    get: function () {
	      defineProperty$5(this, 'b', {
	        value: 3,
	        enumerable: false
	      });
	    }
	  }), { b: 2 })).b !== 1) return true;
	  // should work with symbols and should have deterministic property order (V8 bug)
	  var A = {};
	  var B = {};
	  // eslint-disable-next-line no-undef
	  var symbol = Symbol();
	  var alphabet = 'abcdefghijklmnopqrst';
	  A[symbol] = 7;
	  alphabet.split('').forEach(function (chr) { B[chr] = chr; });
	  return nativeAssign$1({}, A)[symbol] != 7 || objectKeys$1(nativeAssign$1({}, B)).join('') != alphabet;
	}) ? function assign(target, source) { // eslint-disable-line no-unused-vars
	  var T = toObject$1(target);
	  var argumentsLength = arguments.length;
	  var index = 1;
	  var getOwnPropertySymbols = objectGetOwnPropertySymbols$1.f;
	  var propertyIsEnumerable = objectPropertyIsEnumerable$1.f;
	  while (argumentsLength > index) {
	    var S = indexedObject$1(arguments[index++]);
	    var keys = getOwnPropertySymbols ? objectKeys$1(S).concat(getOwnPropertySymbols(S)) : objectKeys$1(S);
	    var length = keys.length;
	    var j = 0;
	    var key;
	    while (length > j) {
	      key = keys[j++];
	      if (!descriptors$1 || propertyIsEnumerable.call(S, key)) T[key] = S[key];
	    }
	  } return T;
	} : nativeAssign$1;

	// `Object.assign` method
	// https://tc39.github.io/ecma262/#sec-object.assign
	_export$1({ target: 'Object', stat: true, forced: Object.assign !== objectAssign$1 }, {
	  assign: objectAssign$1
	});

	// `Object.create` method
	// https://tc39.github.io/ecma262/#sec-object.create
	_export$1({ target: 'Object', stat: true, sham: !descriptors$1 }, {
	  create: objectCreate
	});

	// `Object.defineProperty` method
	// https://tc39.github.io/ecma262/#sec-object.defineproperty
	_export$1({ target: 'Object', stat: true, forced: !descriptors$1, sham: !descriptors$1 }, {
	  defineProperty: objectDefineProperty$1.f
	});

	// `Object.defineProperties` method
	// https://tc39.github.io/ecma262/#sec-object.defineproperties
	_export$1({ target: 'Object', stat: true, forced: !descriptors$1, sham: !descriptors$1 }, {
	  defineProperties: objectDefineProperties
	});

	var propertyIsEnumerable = objectPropertyIsEnumerable$1.f;

	// `Object.{ entries, values }` methods implementation
	var createMethod$3 = function (TO_ENTRIES) {
	  return function (it) {
	    var O = toIndexedObject$1(it);
	    var keys = objectKeys$1(O);
	    var length = keys.length;
	    var i = 0;
	    var result = [];
	    var key;
	    while (length > i) {
	      key = keys[i++];
	      if (!descriptors$1 || propertyIsEnumerable.call(O, key)) {
	        result.push(TO_ENTRIES ? [key, O[key]] : O[key]);
	      }
	    }
	    return result;
	  };
	};

	var objectToArray = {
	  // `Object.entries` method
	  // https://tc39.github.io/ecma262/#sec-object.entries
	  entries: createMethod$3(true),
	  // `Object.values` method
	  // https://tc39.github.io/ecma262/#sec-object.values
	  values: createMethod$3(false)
	};

	var $entries = objectToArray.entries;

	// `Object.entries` method
	// https://tc39.github.io/ecma262/#sec-object.entries
	_export$1({ target: 'Object', stat: true }, {
	  entries: function entries(O) {
	    return $entries(O);
	  }
	});

	var freezing = !fails$1(function () {
	  return Object.isExtensible(Object.preventExtensions({}));
	});

	var internalMetadata = createCommonjsModule(function (module) {
	var defineProperty = objectDefineProperty$1.f;



	var METADATA = uid$1('meta');
	var id = 0;

	var isExtensible = Object.isExtensible || function () {
	  return true;
	};

	var setMetadata = function (it) {
	  defineProperty(it, METADATA, { value: {
	    objectID: 'O' + ++id, // object ID
	    weakData: {}          // weak collections IDs
	  } });
	};

	var fastKey = function (it, create) {
	  // return a primitive with prefix
	  if (!isObject$1(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
	  if (!has$1(it, METADATA)) {
	    // can't set metadata to uncaught frozen object
	    if (!isExtensible(it)) return 'F';
	    // not necessary to add metadata
	    if (!create) return 'E';
	    // add missing metadata
	    setMetadata(it);
	  // return object ID
	  } return it[METADATA].objectID;
	};

	var getWeakData = function (it, create) {
	  if (!has$1(it, METADATA)) {
	    // can't set metadata to uncaught frozen object
	    if (!isExtensible(it)) return true;
	    // not necessary to add metadata
	    if (!create) return false;
	    // add missing metadata
	    setMetadata(it);
	  // return the store of weak collections IDs
	  } return it[METADATA].weakData;
	};

	// add metadata on freeze-family methods calling
	var onFreeze = function (it) {
	  if (freezing && meta.REQUIRED && isExtensible(it) && !has$1(it, METADATA)) setMetadata(it);
	  return it;
	};

	var meta = module.exports = {
	  REQUIRED: false,
	  fastKey: fastKey,
	  getWeakData: getWeakData,
	  onFreeze: onFreeze
	};

	hiddenKeys$1[METADATA] = true;
	});
	var internalMetadata_1 = internalMetadata.REQUIRED;
	var internalMetadata_2 = internalMetadata.fastKey;
	var internalMetadata_3 = internalMetadata.getWeakData;
	var internalMetadata_4 = internalMetadata.onFreeze;

	var onFreeze = internalMetadata.onFreeze;

	var nativeFreeze = Object.freeze;
	var FAILS_ON_PRIMITIVES = fails$1(function () { nativeFreeze(1); });

	// `Object.freeze` method
	// https://tc39.github.io/ecma262/#sec-object.freeze
	_export$1({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES, sham: !freezing }, {
	  freeze: function freeze(it) {
	    return nativeFreeze && isObject$1(it) ? nativeFreeze(onFreeze(it)) : it;
	  }
	});

	var iterators = {};

	var ITERATOR = wellKnownSymbol$1('iterator');
	var ArrayPrototype$1 = Array.prototype;

	// check on default Array iterator
	var isArrayIteratorMethod = function (it) {
	  return it !== undefined && (iterators.Array === it || ArrayPrototype$1[ITERATOR] === it);
	};

	var TO_STRING_TAG$1 = wellKnownSymbol$1('toStringTag');
	var test = {};

	test[TO_STRING_TAG$1] = 'z';

	var toStringTagSupport = String(test) === '[object z]';

	var TO_STRING_TAG$2 = wellKnownSymbol$1('toStringTag');
	// ES3 wrong here
	var CORRECT_ARGUMENTS = classofRaw$1(function () { return arguments; }()) == 'Arguments';

	// fallback for IE11 Script Access Denied error
	var tryGet = function (it, key) {
	  try {
	    return it[key];
	  } catch (error) { /* empty */ }
	};

	// getting tag from ES6+ `Object.prototype.toString`
	var classof = toStringTagSupport ? classofRaw$1 : function (it) {
	  var O, tag, result;
	  return it === undefined ? 'Undefined' : it === null ? 'Null'
	    // @@toStringTag case
	    : typeof (tag = tryGet(O = Object(it), TO_STRING_TAG$2)) == 'string' ? tag
	    // builtinTag case
	    : CORRECT_ARGUMENTS ? classofRaw$1(O)
	    // ES3 arguments fallback
	    : (result = classofRaw$1(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : result;
	};

	var ITERATOR$1 = wellKnownSymbol$1('iterator');

	var getIteratorMethod = function (it) {
	  if (it != undefined) return it[ITERATOR$1]
	    || it['@@iterator']
	    || iterators[classof(it)];
	};

	// call something on iterator step with safe closing on error
	var callWithSafeIterationClosing = function (iterator, fn, value, ENTRIES) {
	  try {
	    return ENTRIES ? fn(anObject$1(value)[0], value[1]) : fn(value);
	  // 7.4.6 IteratorClose(iterator, completion)
	  } catch (error) {
	    var returnMethod = iterator['return'];
	    if (returnMethod !== undefined) anObject$1(returnMethod.call(iterator));
	    throw error;
	  }
	};

	var iterate_1 = createCommonjsModule(function (module) {
	var Result = function (stopped, result) {
	  this.stopped = stopped;
	  this.result = result;
	};

	var iterate = module.exports = function (iterable, fn, that, AS_ENTRIES, IS_ITERATOR) {
	  var boundFunction = functionBindContext$1(fn, that, AS_ENTRIES ? 2 : 1);
	  var iterator, iterFn, index, length, result, next, step;

	  if (IS_ITERATOR) {
	    iterator = iterable;
	  } else {
	    iterFn = getIteratorMethod(iterable);
	    if (typeof iterFn != 'function') throw TypeError('Target is not iterable');
	    // optimisation for array iterators
	    if (isArrayIteratorMethod(iterFn)) {
	      for (index = 0, length = toLength$1(iterable.length); length > index; index++) {
	        result = AS_ENTRIES
	          ? boundFunction(anObject$1(step = iterable[index])[0], step[1])
	          : boundFunction(iterable[index]);
	        if (result && result instanceof Result) return result;
	      } return new Result(false);
	    }
	    iterator = iterFn.call(iterable);
	  }

	  next = iterator.next;
	  while (!(step = next.call(iterator)).done) {
	    result = callWithSafeIterationClosing(iterator, boundFunction, step.value, AS_ENTRIES);
	    if (typeof result == 'object' && result && result instanceof Result) return result;
	  } return new Result(false);
	};

	iterate.stop = function (result) {
	  return new Result(true, result);
	};
	});

	var createProperty = function (object, key, value) {
	  var propertyKey = toPrimitive$1(key);
	  if (propertyKey in object) objectDefineProperty$1.f(object, propertyKey, createPropertyDescriptor$1(0, value));
	  else object[propertyKey] = value;
	};

	// `Object.fromEntries` method
	// https://github.com/tc39/proposal-object-from-entries
	_export$1({ target: 'Object', stat: true }, {
	  fromEntries: function fromEntries(iterable) {
	    var obj = {};
	    iterate_1(iterable, function (k, v) {
	      createProperty(obj, k, v);
	    }, undefined, true);
	    return obj;
	  }
	});

	var nativeGetOwnPropertyDescriptor$3 = objectGetOwnPropertyDescriptor$1.f;


	var FAILS_ON_PRIMITIVES$1 = fails$1(function () { nativeGetOwnPropertyDescriptor$3(1); });
	var FORCED = !descriptors$1 || FAILS_ON_PRIMITIVES$1;

	// `Object.getOwnPropertyDescriptor` method
	// https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptor
	_export$1({ target: 'Object', stat: true, forced: FORCED, sham: !descriptors$1 }, {
	  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(it, key) {
	    return nativeGetOwnPropertyDescriptor$3(toIndexedObject$1(it), key);
	  }
	});

	// `Object.getOwnPropertyDescriptors` method
	// https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptors
	_export$1({ target: 'Object', stat: true, sham: !descriptors$1 }, {
	  getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {
	    var O = toIndexedObject$1(object);
	    var getOwnPropertyDescriptor = objectGetOwnPropertyDescriptor$1.f;
	    var keys = ownKeys(O);
	    var result = {};
	    var index = 0;
	    var key, descriptor;
	    while (keys.length > index) {
	      descriptor = getOwnPropertyDescriptor(O, key = keys[index++]);
	      if (descriptor !== undefined) createProperty(result, key, descriptor);
	    }
	    return result;
	  }
	});

	var nativeGetOwnPropertyNames$2 = objectGetOwnPropertyNamesExternal.f;

	var FAILS_ON_PRIMITIVES$2 = fails$1(function () { return !Object.getOwnPropertyNames(1); });

	// `Object.getOwnPropertyNames` method
	// https://tc39.github.io/ecma262/#sec-object.getownpropertynames
	_export$1({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES$2 }, {
	  getOwnPropertyNames: nativeGetOwnPropertyNames$2
	});

	var correctPrototypeGetter = !fails$1(function () {
	  function F() { /* empty */ }
	  F.prototype.constructor = null;
	  return Object.getPrototypeOf(new F()) !== F.prototype;
	});

	var IE_PROTO$1 = sharedKey('IE_PROTO');
	var ObjectPrototype$1 = Object.prototype;

	// `Object.getPrototypeOf` method
	// https://tc39.github.io/ecma262/#sec-object.getprototypeof
	var objectGetPrototypeOf = correctPrototypeGetter ? Object.getPrototypeOf : function (O) {
	  O = toObject$1(O);
	  if (has$1(O, IE_PROTO$1)) return O[IE_PROTO$1];
	  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
	    return O.constructor.prototype;
	  } return O instanceof Object ? ObjectPrototype$1 : null;
	};

	var FAILS_ON_PRIMITIVES$3 = fails$1(function () { objectGetPrototypeOf(1); });

	// `Object.getPrototypeOf` method
	// https://tc39.github.io/ecma262/#sec-object.getprototypeof
	_export$1({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES$3, sham: !correctPrototypeGetter }, {
	  getPrototypeOf: function getPrototypeOf(it) {
	    return objectGetPrototypeOf(toObject$1(it));
	  }
	});

	// `SameValue` abstract operation
	// https://tc39.github.io/ecma262/#sec-samevalue
	var sameValue = Object.is || function is(x, y) {
	  // eslint-disable-next-line no-self-compare
	  return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
	};

	// `Object.is` method
	// https://tc39.github.io/ecma262/#sec-object.is
	_export$1({ target: 'Object', stat: true }, {
	  is: sameValue
	});

	var nativeIsExtensible = Object.isExtensible;
	var FAILS_ON_PRIMITIVES$4 = fails$1(function () { });

	// `Object.isExtensible` method
	// https://tc39.github.io/ecma262/#sec-object.isextensible
	_export$1({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES$4 }, {
	  isExtensible: function isExtensible(it) {
	    return isObject$1(it) ? nativeIsExtensible ? nativeIsExtensible(it) : true : false;
	  }
	});

	var nativeIsFrozen = Object.isFrozen;
	var FAILS_ON_PRIMITIVES$5 = fails$1(function () { });

	// `Object.isFrozen` method
	// https://tc39.github.io/ecma262/#sec-object.isfrozen
	_export$1({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES$5 }, {
	  isFrozen: function isFrozen(it) {
	    return isObject$1(it) ? nativeIsFrozen ? nativeIsFrozen(it) : false : true;
	  }
	});

	var nativeIsSealed = Object.isSealed;
	var FAILS_ON_PRIMITIVES$6 = fails$1(function () { });

	// `Object.isSealed` method
	// https://tc39.github.io/ecma262/#sec-object.issealed
	_export$1({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES$6 }, {
	  isSealed: function isSealed(it) {
	    return isObject$1(it) ? nativeIsSealed ? nativeIsSealed(it) : false : true;
	  }
	});

	var FAILS_ON_PRIMITIVES$7 = fails$1(function () { objectKeys$1(1); });

	// `Object.keys` method
	// https://tc39.github.io/ecma262/#sec-object.keys
	_export$1({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES$7 }, {
	  keys: function keys(it) {
	    return objectKeys$1(toObject$1(it));
	  }
	});

	var onFreeze$1 = internalMetadata.onFreeze;



	var nativePreventExtensions = Object.preventExtensions;
	var FAILS_ON_PRIMITIVES$8 = fails$1(function () { nativePreventExtensions(1); });

	// `Object.preventExtensions` method
	// https://tc39.github.io/ecma262/#sec-object.preventextensions
	_export$1({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES$8, sham: !freezing }, {
	  preventExtensions: function preventExtensions(it) {
	    return nativePreventExtensions && isObject$1(it) ? nativePreventExtensions(onFreeze$1(it)) : it;
	  }
	});

	var onFreeze$2 = internalMetadata.onFreeze;



	var nativeSeal = Object.seal;
	var FAILS_ON_PRIMITIVES$9 = fails$1(function () { nativeSeal(1); });

	// `Object.seal` method
	// https://tc39.github.io/ecma262/#sec-object.seal
	_export$1({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES$9, sham: !freezing }, {
	  seal: function seal(it) {
	    return nativeSeal && isObject$1(it) ? nativeSeal(onFreeze$2(it)) : it;
	  }
	});

	var aPossiblePrototype = function (it) {
	  if (!isObject$1(it) && it !== null) {
	    throw TypeError("Can't set " + String(it) + ' as a prototype');
	  } return it;
	};

	// `Object.setPrototypeOf` method
	// https://tc39.github.io/ecma262/#sec-object.setprototypeof
	// Works with __proto__ only. Old v8 can't work with null proto objects.
	/* eslint-disable no-proto */
	var objectSetPrototypeOf = Object.setPrototypeOf || ('__proto__' in {} ? function () {
	  var CORRECT_SETTER = false;
	  var test = {};
	  var setter;
	  try {
	    setter = Object.getOwnPropertyDescriptor(Object.prototype, '__proto__').set;
	    setter.call(test, []);
	    CORRECT_SETTER = test instanceof Array;
	  } catch (error) { /* empty */ }
	  return function setPrototypeOf(O, proto) {
	    anObject$1(O);
	    aPossiblePrototype(proto);
	    if (CORRECT_SETTER) setter.call(O, proto);
	    else O.__proto__ = proto;
	    return O;
	  };
	}() : undefined);

	// `Object.setPrototypeOf` method
	// https://tc39.github.io/ecma262/#sec-object.setprototypeof
	_export$1({ target: 'Object', stat: true }, {
	  setPrototypeOf: objectSetPrototypeOf
	});

	var $values = objectToArray.values;

	// `Object.values` method
	// https://tc39.github.io/ecma262/#sec-object.values
	_export$1({ target: 'Object', stat: true }, {
	  values: function values(O) {
	    return $values(O);
	  }
	});

	// `Object.prototype.toString` method implementation
	// https://tc39.github.io/ecma262/#sec-object.prototype.tostring
	var objectToString = toStringTagSupport ? {}.toString : function toString() {
	  return '[object ' + classof(this) + ']';
	};

	// `Object.prototype.toString` method
	// https://tc39.github.io/ecma262/#sec-object.prototype.tostring
	if (!toStringTagSupport) {
	  redefine(Object.prototype, 'toString', objectToString, { unsafe: true });
	}

	// Forced replacement object prototype accessors methods
	var objectPrototypeAccessorsForced = isPure$1 || !fails$1(function () {
	  var key = Math.random();
	  // In FF throws only define methods
	  // eslint-disable-next-line no-undef, no-useless-call
	  __defineSetter__.call(null, key, function () { /* empty */ });
	  delete global_1$1[key];
	});

	// `Object.prototype.__defineGetter__` method
	// https://tc39.github.io/ecma262/#sec-object.prototype.__defineGetter__
	if (descriptors$1) {
	  _export$1({ target: 'Object', proto: true, forced: objectPrototypeAccessorsForced }, {
	    __defineGetter__: function __defineGetter__(P, getter) {
	      objectDefineProperty$1.f(toObject$1(this), P, { get: aFunction$3(getter), enumerable: true, configurable: true });
	    }
	  });
	}

	// `Object.prototype.__defineSetter__` method
	// https://tc39.github.io/ecma262/#sec-object.prototype.__defineSetter__
	if (descriptors$1) {
	  _export$1({ target: 'Object', proto: true, forced: objectPrototypeAccessorsForced }, {
	    __defineSetter__: function __defineSetter__(P, setter) {
	      objectDefineProperty$1.f(toObject$1(this), P, { set: aFunction$3(setter), enumerable: true, configurable: true });
	    }
	  });
	}

	var getOwnPropertyDescriptor$4 = objectGetOwnPropertyDescriptor$1.f;

	// `Object.prototype.__lookupGetter__` method
	// https://tc39.github.io/ecma262/#sec-object.prototype.__lookupGetter__
	if (descriptors$1) {
	  _export$1({ target: 'Object', proto: true, forced: objectPrototypeAccessorsForced }, {
	    __lookupGetter__: function __lookupGetter__(P) {
	      var O = toObject$1(this);
	      var key = toPrimitive$1(P, true);
	      var desc;
	      do {
	        if (desc = getOwnPropertyDescriptor$4(O, key)) return desc.get;
	      } while (O = objectGetPrototypeOf(O));
	    }
	  });
	}

	var getOwnPropertyDescriptor$5 = objectGetOwnPropertyDescriptor$1.f;

	// `Object.prototype.__lookupSetter__` method
	// https://tc39.github.io/ecma262/#sec-object.prototype.__lookupSetter__
	if (descriptors$1) {
	  _export$1({ target: 'Object', proto: true, forced: objectPrototypeAccessorsForced }, {
	    __lookupSetter__: function __lookupSetter__(P) {
	      var O = toObject$1(this);
	      var key = toPrimitive$1(P, true);
	      var desc;
	      do {
	        if (desc = getOwnPropertyDescriptor$5(O, key)) return desc.set;
	      } while (O = objectGetPrototypeOf(O));
	    }
	  });
	}

	var slice$1 = [].slice;
	var factories = {};

	var construct = function (C, argsLength, args) {
	  if (!(argsLength in factories)) {
	    for (var list = [], i = 0; i < argsLength; i++) list[i] = 'a[' + i + ']';
	    // eslint-disable-next-line no-new-func
	    factories[argsLength] = Function('C,a', 'return new C(' + list.join(',') + ')');
	  } return factories[argsLength](C, args);
	};

	// `Function.prototype.bind` method implementation
	// https://tc39.github.io/ecma262/#sec-function.prototype.bind
	var functionBind = Function.bind || function bind(that /* , ...args */) {
	  var fn = aFunction$3(this);
	  var partArgs = slice$1.call(arguments, 1);
	  var boundFunction = function bound(/* args... */) {
	    var args = partArgs.concat(slice$1.call(arguments));
	    return this instanceof boundFunction ? construct(fn, args.length, args) : fn.apply(that, args);
	  };
	  if (isObject$1(fn.prototype)) boundFunction.prototype = fn.prototype;
	  return boundFunction;
	};

	// `Function.prototype.bind` method
	// https://tc39.github.io/ecma262/#sec-function.prototype.bind
	_export$1({ target: 'Function', proto: true }, {
	  bind: functionBind
	});

	var defineProperty$6 = objectDefineProperty$1.f;

	var FunctionPrototype = Function.prototype;
	var FunctionPrototypeToString = FunctionPrototype.toString;
	var nameRE = /^\s*function ([^ (]*)/;
	var NAME = 'name';

	// Function instances `.name` property
	// https://tc39.github.io/ecma262/#sec-function-instances-name
	if (descriptors$1 && !(NAME in FunctionPrototype)) {
	  defineProperty$6(FunctionPrototype, NAME, {
	    configurable: true,
	    get: function () {
	      try {
	        return FunctionPrototypeToString.call(this).match(nameRE)[1];
	      } catch (error) {
	        return '';
	      }
	    }
	  });
	}

	var HAS_INSTANCE = wellKnownSymbol$1('hasInstance');
	var FunctionPrototype$1 = Function.prototype;

	// `Function.prototype[@@hasInstance]` method
	// https://tc39.github.io/ecma262/#sec-function.prototype-@@hasinstance
	if (!(HAS_INSTANCE in FunctionPrototype$1)) {
	  objectDefineProperty$1.f(FunctionPrototype$1, HAS_INSTANCE, { value: function (O) {
	    if (typeof this != 'function' || !isObject$1(O)) return false;
	    if (!isObject$1(this.prototype)) return O instanceof this;
	    // for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:
	    while (O = objectGetPrototypeOf(O)) if (this.prototype === O) return true;
	    return false;
	  } });
	}

	// `globalThis` object
	// https://github.com/tc39/proposal-global
	_export$1({ global: true }, {
	  globalThis: global_1$1
	});

	// `Array.from` method implementation
	// https://tc39.github.io/ecma262/#sec-array.from
	var arrayFrom = function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {
	  var O = toObject$1(arrayLike);
	  var C = typeof this == 'function' ? this : Array;
	  var argumentsLength = arguments.length;
	  var mapfn = argumentsLength > 1 ? arguments[1] : undefined;
	  var mapping = mapfn !== undefined;
	  var iteratorMethod = getIteratorMethod(O);
	  var index = 0;
	  var length, result, step, iterator, next, value;
	  if (mapping) mapfn = functionBindContext$1(mapfn, argumentsLength > 2 ? arguments[2] : undefined, 2);
	  // if the target is not iterable or it's an array with the default iterator - use a simple case
	  if (iteratorMethod != undefined && !(C == Array && isArrayIteratorMethod(iteratorMethod))) {
	    iterator = iteratorMethod.call(O);
	    next = iterator.next;
	    result = new C();
	    for (;!(step = next.call(iterator)).done; index++) {
	      value = mapping ? callWithSafeIterationClosing(iterator, mapfn, [step.value, index], true) : step.value;
	      createProperty(result, index, value);
	    }
	  } else {
	    length = toLength$1(O.length);
	    result = new C(length);
	    for (;length > index; index++) {
	      value = mapping ? mapfn(O[index], index) : O[index];
	      createProperty(result, index, value);
	    }
	  }
	  result.length = index;
	  return result;
	};

	var ITERATOR$2 = wellKnownSymbol$1('iterator');
	var SAFE_CLOSING = false;

	try {
	  var called = 0;
	  var iteratorWithReturn = {
	    next: function () {
	      return { done: !!called++ };
	    },
	    'return': function () {
	      SAFE_CLOSING = true;
	    }
	  };
	  iteratorWithReturn[ITERATOR$2] = function () {
	    return this;
	  };
	} catch (error) { /* empty */ }

	var checkCorrectnessOfIteration = function (exec, SKIP_CLOSING) {
	  if (!SKIP_CLOSING && !SAFE_CLOSING) return false;
	  var ITERATION_SUPPORT = false;
	  try {
	    var object = {};
	    object[ITERATOR$2] = function () {
	      return {
	        next: function () {
	          return { done: ITERATION_SUPPORT = true };
	        }
	      };
	    };
	    exec(object);
	  } catch (error) { /* empty */ }
	  return ITERATION_SUPPORT;
	};

	var INCORRECT_ITERATION = !checkCorrectnessOfIteration(function (iterable) {
	});

	// `Array.from` method
	// https://tc39.github.io/ecma262/#sec-array.from
	_export$1({ target: 'Array', stat: true, forced: INCORRECT_ITERATION }, {
	  from: arrayFrom
	});

	// `Array.isArray` method
	// https://tc39.github.io/ecma262/#sec-array.isarray
	_export$1({ target: 'Array', stat: true }, {
	  isArray: isArray
	});

	var ISNT_GENERIC = fails$1(function () {
	  function F() { /* empty */ }
	  return !(Array.of.call(F) instanceof F);
	});

	// `Array.of` method
	// https://tc39.github.io/ecma262/#sec-array.of
	// WebKit Array.of isn't generic
	_export$1({ target: 'Array', stat: true, forced: ISNT_GENERIC }, {
	  of: function of(/* ...args */) {
	    var index = 0;
	    var argumentsLength = arguments.length;
	    var result = new (typeof this == 'function' ? this : Array)(argumentsLength);
	    while (argumentsLength > index) createProperty(result, index, arguments[index++]);
	    result.length = argumentsLength;
	    return result;
	  }
	});

	var engineUserAgent$1 = getBuiltIn$1('navigator', 'userAgent') || '';

	var process = global_1$1.process;
	var versions = process && process.versions;
	var v8 = versions && versions.v8;
	var match, version;

	if (v8) {
	  match = v8.split('.');
	  version = match[0] + match[1];
	} else if (engineUserAgent$1) {
	  match = engineUserAgent$1.match(/Edge\/(\d+)/);
	  if (!match || match[1] >= 74) {
	    match = engineUserAgent$1.match(/Chrome\/(\d+)/);
	    if (match) version = match[1];
	  }
	}

	var engineV8Version = version && +version;

	var SPECIES$1 = wellKnownSymbol$1('species');

	var arrayMethodHasSpeciesSupport = function (METHOD_NAME) {
	  // We can't use this feature detection in V8 since it causes
	  // deoptimization and serious performance degradation
	  // https://github.com/zloirock/core-js/issues/677
	  return engineV8Version >= 51 || !fails$1(function () {
	    var array = [];
	    var constructor = array.constructor = {};
	    constructor[SPECIES$1] = function () {
	      return { foo: 1 };
	    };
	    return array[METHOD_NAME](Boolean).foo !== 1;
	  });
	};

	var IS_CONCAT_SPREADABLE = wellKnownSymbol$1('isConcatSpreadable');
	var MAX_SAFE_INTEGER = 0x1FFFFFFFFFFFFF;
	var MAXIMUM_ALLOWED_INDEX_EXCEEDED = 'Maximum allowed index exceeded';

	// We can't use this feature detection in V8 since it causes
	// deoptimization and serious performance degradation
	// https://github.com/zloirock/core-js/issues/679
	var IS_CONCAT_SPREADABLE_SUPPORT = engineV8Version >= 51 || !fails$1(function () {
	  var array = [];
	  array[IS_CONCAT_SPREADABLE] = false;
	  return array.concat()[0] !== array;
	});

	var SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('concat');

	var isConcatSpreadable = function (O) {
	  if (!isObject$1(O)) return false;
	  var spreadable = O[IS_CONCAT_SPREADABLE];
	  return spreadable !== undefined ? !!spreadable : isArray(O);
	};

	var FORCED$1 = !IS_CONCAT_SPREADABLE_SUPPORT || !SPECIES_SUPPORT;

	// `Array.prototype.concat` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.concat
	// with adding support of @@isConcatSpreadable and @@species
	_export$1({ target: 'Array', proto: true, forced: FORCED$1 }, {
	  concat: function concat(arg) { // eslint-disable-line no-unused-vars
	    var O = toObject$1(this);
	    var A = arraySpeciesCreate(O, 0);
	    var n = 0;
	    var i, k, length, len, E;
	    for (i = -1, length = arguments.length; i < length; i++) {
	      E = i === -1 ? O : arguments[i];
	      if (isConcatSpreadable(E)) {
	        len = toLength$1(E.length);
	        if (n + len > MAX_SAFE_INTEGER) throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);
	        for (k = 0; k < len; k++, n++) if (k in E) createProperty(A, n, E[k]);
	      } else {
	        if (n >= MAX_SAFE_INTEGER) throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);
	        createProperty(A, n++, E);
	      }
	    }
	    A.length = n;
	    return A;
	  }
	});

	var min$4 = Math.min;

	// `Array.prototype.copyWithin` method implementation
	// https://tc39.github.io/ecma262/#sec-array.prototype.copywithin
	var arrayCopyWithin = [].copyWithin || function copyWithin(target /* = 0 */, start /* = 0, end = @length */) {
	  var O = toObject$1(this);
	  var len = toLength$1(O.length);
	  var to = toAbsoluteIndex$1(target, len);
	  var from = toAbsoluteIndex$1(start, len);
	  var end = arguments.length > 2 ? arguments[2] : undefined;
	  var count = min$4((end === undefined ? len : toAbsoluteIndex$1(end, len)) - from, len - to);
	  var inc = 1;
	  if (from < to && to < from + count) {
	    inc = -1;
	    from += count - 1;
	    to += count - 1;
	  }
	  while (count-- > 0) {
	    if (from in O) O[to] = O[from];
	    else delete O[to];
	    to += inc;
	    from += inc;
	  } return O;
	};

	var UNSCOPABLES = wellKnownSymbol$1('unscopables');
	var ArrayPrototype$2 = Array.prototype;

	// Array.prototype[@@unscopables]
	// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
	if (ArrayPrototype$2[UNSCOPABLES] == undefined) {
	  objectDefineProperty$1.f(ArrayPrototype$2, UNSCOPABLES, {
	    configurable: true,
	    value: objectCreate(null)
	  });
	}

	// add a key to Array.prototype[@@unscopables]
	var addToUnscopables = function (key) {
	  ArrayPrototype$2[UNSCOPABLES][key] = true;
	};

	// `Array.prototype.copyWithin` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.copywithin
	_export$1({ target: 'Array', proto: true }, {
	  copyWithin: arrayCopyWithin
	});

	// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
	addToUnscopables('copyWithin');

	var arrayMethodIsStrict = function (METHOD_NAME, argument) {
	  var method = [][METHOD_NAME];
	  return !!method && fails$1(function () {
	    // eslint-disable-next-line no-useless-call,no-throw-literal
	    method.call(null, argument || function () { throw 1; }, 1);
	  });
	};

	var defineProperty$7 = Object.defineProperty;
	var cache$1 = {};

	var thrower$1 = function (it) { throw it; };

	var arrayMethodUsesToLength$1 = function (METHOD_NAME, options) {
	  if (has$1(cache$1, METHOD_NAME)) return cache$1[METHOD_NAME];
	  if (!options) options = {};
	  var method = [][METHOD_NAME];
	  var ACCESSORS = has$1(options, 'ACCESSORS') ? options.ACCESSORS : false;
	  var argument0 = has$1(options, 0) ? options[0] : thrower$1;
	  var argument1 = has$1(options, 1) ? options[1] : undefined;

	  return cache$1[METHOD_NAME] = !!method && !fails$1(function () {
	    if (ACCESSORS && !descriptors$1) return true;
	    var O = { length: -1 };

	    if (ACCESSORS) defineProperty$7(O, 1, { enumerable: true, get: thrower$1 });
	    else O[1] = 1;

	    method.call(O, argument0, argument1);
	  });
	};

	var $every = arrayIteration.every;



	var STRICT_METHOD = arrayMethodIsStrict('every');
	var USES_TO_LENGTH$1 = arrayMethodUsesToLength$1('every');

	// `Array.prototype.every` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.every
	_export$1({ target: 'Array', proto: true, forced: !STRICT_METHOD || !USES_TO_LENGTH$1 }, {
	  every: function every(callbackfn /* , thisArg */) {
	    return $every(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	// `Array.prototype.fill` method implementation
	// https://tc39.github.io/ecma262/#sec-array.prototype.fill
	var arrayFill = function fill(value /* , start = 0, end = @length */) {
	  var O = toObject$1(this);
	  var length = toLength$1(O.length);
	  var argumentsLength = arguments.length;
	  var index = toAbsoluteIndex$1(argumentsLength > 1 ? arguments[1] : undefined, length);
	  var end = argumentsLength > 2 ? arguments[2] : undefined;
	  var endPos = end === undefined ? length : toAbsoluteIndex$1(end, length);
	  while (endPos > index) O[index++] = value;
	  return O;
	};

	// `Array.prototype.fill` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.fill
	_export$1({ target: 'Array', proto: true }, {
	  fill: arrayFill
	});

	// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
	addToUnscopables('fill');

	var $filter = arrayIteration.filter;



	var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('filter');
	// Edge 14- issue
	var USES_TO_LENGTH$2 = arrayMethodUsesToLength$1('filter');

	// `Array.prototype.filter` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.filter
	// with adding support of @@species
	_export$1({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT || !USES_TO_LENGTH$2 }, {
	  filter: function filter(callbackfn /* , thisArg */) {
	    return $filter(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	var $find = arrayIteration.find;



	var FIND = 'find';
	var SKIPS_HOLES = true;

	var USES_TO_LENGTH$3 = arrayMethodUsesToLength$1(FIND);

	// Shouldn't skip holes
	if (FIND in []) Array(1)[FIND](function () { SKIPS_HOLES = false; });

	// `Array.prototype.find` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.find
	_export$1({ target: 'Array', proto: true, forced: SKIPS_HOLES || !USES_TO_LENGTH$3 }, {
	  find: function find(callbackfn /* , that = undefined */) {
	    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
	addToUnscopables(FIND);

	var $findIndex = arrayIteration.findIndex;



	var FIND_INDEX = 'findIndex';
	var SKIPS_HOLES$1 = true;

	var USES_TO_LENGTH$4 = arrayMethodUsesToLength$1(FIND_INDEX);

	// Shouldn't skip holes
	if (FIND_INDEX in []) Array(1)[FIND_INDEX](function () { SKIPS_HOLES$1 = false; });

	// `Array.prototype.findIndex` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.findindex
	_export$1({ target: 'Array', proto: true, forced: SKIPS_HOLES$1 || !USES_TO_LENGTH$4 }, {
	  findIndex: function findIndex(callbackfn /* , that = undefined */) {
	    return $findIndex(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
	addToUnscopables(FIND_INDEX);

	// `FlattenIntoArray` abstract operation
	// https://tc39.github.io/proposal-flatMap/#sec-FlattenIntoArray
	var flattenIntoArray = function (target, original, source, sourceLen, start, depth, mapper, thisArg) {
	  var targetIndex = start;
	  var sourceIndex = 0;
	  var mapFn = mapper ? functionBindContext$1(mapper, thisArg, 3) : false;
	  var element;

	  while (sourceIndex < sourceLen) {
	    if (sourceIndex in source) {
	      element = mapFn ? mapFn(source[sourceIndex], sourceIndex, original) : source[sourceIndex];

	      if (depth > 0 && isArray(element)) {
	        targetIndex = flattenIntoArray(target, original, element, toLength$1(element.length), targetIndex, depth - 1) - 1;
	      } else {
	        if (targetIndex >= 0x1FFFFFFFFFFFFF) throw TypeError('Exceed the acceptable array length');
	        target[targetIndex] = element;
	      }

	      targetIndex++;
	    }
	    sourceIndex++;
	  }
	  return targetIndex;
	};

	var flattenIntoArray_1 = flattenIntoArray;

	// `Array.prototype.flat` method
	// https://github.com/tc39/proposal-flatMap
	_export$1({ target: 'Array', proto: true }, {
	  flat: function flat(/* depthArg = 1 */) {
	    var depthArg = arguments.length ? arguments[0] : undefined;
	    var O = toObject$1(this);
	    var sourceLen = toLength$1(O.length);
	    var A = arraySpeciesCreate(O, 0);
	    A.length = flattenIntoArray_1(A, O, O, sourceLen, 0, depthArg === undefined ? 1 : toInteger$1(depthArg));
	    return A;
	  }
	});

	// `Array.prototype.flatMap` method
	// https://github.com/tc39/proposal-flatMap
	_export$1({ target: 'Array', proto: true }, {
	  flatMap: function flatMap(callbackfn /* , thisArg */) {
	    var O = toObject$1(this);
	    var sourceLen = toLength$1(O.length);
	    var A;
	    aFunction$3(callbackfn);
	    A = arraySpeciesCreate(O, 0);
	    A.length = flattenIntoArray_1(A, O, O, sourceLen, 0, 1, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	    return A;
	  }
	});

	var $forEach$1 = arrayIteration.forEach;



	var STRICT_METHOD$1 = arrayMethodIsStrict('forEach');
	var USES_TO_LENGTH$5 = arrayMethodUsesToLength$1('forEach');

	// `Array.prototype.forEach` method implementation
	// https://tc39.github.io/ecma262/#sec-array.prototype.foreach
	var arrayForEach = (!STRICT_METHOD$1 || !USES_TO_LENGTH$5) ? function forEach(callbackfn /* , thisArg */) {
	  return $forEach$1(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	} : [].forEach;

	// `Array.prototype.forEach` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.foreach
	_export$1({ target: 'Array', proto: true, forced: [].forEach != arrayForEach }, {
	  forEach: arrayForEach
	});

	var $includes$1 = arrayIncludes$1.includes;



	var USES_TO_LENGTH$6 = arrayMethodUsesToLength$1('indexOf', { ACCESSORS: true, 1: 0 });

	// `Array.prototype.includes` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.includes
	_export$1({ target: 'Array', proto: true, forced: !USES_TO_LENGTH$6 }, {
	  includes: function includes(el /* , fromIndex = 0 */) {
	    return $includes$1(this, el, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
	addToUnscopables('includes');

	var $indexOf = arrayIncludes$1.indexOf;



	var nativeIndexOf = [].indexOf;

	var NEGATIVE_ZERO = !!nativeIndexOf && 1 / [1].indexOf(1, -0) < 0;
	var STRICT_METHOD$2 = arrayMethodIsStrict('indexOf');
	var USES_TO_LENGTH$7 = arrayMethodUsesToLength$1('indexOf', { ACCESSORS: true, 1: 0 });

	// `Array.prototype.indexOf` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.indexof
	_export$1({ target: 'Array', proto: true, forced: NEGATIVE_ZERO || !STRICT_METHOD$2 || !USES_TO_LENGTH$7 }, {
	  indexOf: function indexOf(searchElement /* , fromIndex = 0 */) {
	    return NEGATIVE_ZERO
	      // convert -0 to +0
	      ? nativeIndexOf.apply(this, arguments) || 0
	      : $indexOf(this, searchElement, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	var nativeJoin = [].join;

	var ES3_STRINGS = indexedObject$1 != Object;
	var STRICT_METHOD$3 = arrayMethodIsStrict('join', ',');

	// `Array.prototype.join` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.join
	_export$1({ target: 'Array', proto: true, forced: ES3_STRINGS || !STRICT_METHOD$3 }, {
	  join: function join(separator) {
	    return nativeJoin.call(toIndexedObject$1(this), separator === undefined ? ',' : separator);
	  }
	});

	var min$5 = Math.min;
	var nativeLastIndexOf = [].lastIndexOf;
	var NEGATIVE_ZERO$1 = !!nativeLastIndexOf && 1 / [1].lastIndexOf(1, -0) < 0;
	var STRICT_METHOD$4 = arrayMethodIsStrict('lastIndexOf');
	// For preventing possible almost infinite loop in non-standard implementations, test the forward version of the method
	var USES_TO_LENGTH$8 = arrayMethodUsesToLength$1('indexOf', { ACCESSORS: true, 1: 0 });
	var FORCED$2 = NEGATIVE_ZERO$1 || !STRICT_METHOD$4 || !USES_TO_LENGTH$8;

	// `Array.prototype.lastIndexOf` method implementation
	// https://tc39.github.io/ecma262/#sec-array.prototype.lastindexof
	var arrayLastIndexOf = FORCED$2 ? function lastIndexOf(searchElement /* , fromIndex = @[*-1] */) {
	  // convert -0 to +0
	  if (NEGATIVE_ZERO$1) return nativeLastIndexOf.apply(this, arguments) || 0;
	  var O = toIndexedObject$1(this);
	  var length = toLength$1(O.length);
	  var index = length - 1;
	  if (arguments.length > 1) index = min$5(index, toInteger$1(arguments[1]));
	  if (index < 0) index = length + index;
	  for (;index >= 0; index--) if (index in O && O[index] === searchElement) return index || 0;
	  return -1;
	} : nativeLastIndexOf;

	// `Array.prototype.lastIndexOf` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.lastindexof
	_export$1({ target: 'Array', proto: true, forced: arrayLastIndexOf !== [].lastIndexOf }, {
	  lastIndexOf: arrayLastIndexOf
	});

	var $map = arrayIteration.map;



	var HAS_SPECIES_SUPPORT$1 = arrayMethodHasSpeciesSupport('map');
	// FF49- issue
	var USES_TO_LENGTH$9 = arrayMethodUsesToLength$1('map');

	// `Array.prototype.map` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.map
	// with adding support of @@species
	_export$1({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT$1 || !USES_TO_LENGTH$9 }, {
	  map: function map(callbackfn /* , thisArg */) {
	    return $map(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	// `Array.prototype.{ reduce, reduceRight }` methods implementation
	var createMethod$4 = function (IS_RIGHT) {
	  return function (that, callbackfn, argumentsLength, memo) {
	    aFunction$3(callbackfn);
	    var O = toObject$1(that);
	    var self = indexedObject$1(O);
	    var length = toLength$1(O.length);
	    var index = IS_RIGHT ? length - 1 : 0;
	    var i = IS_RIGHT ? -1 : 1;
	    if (argumentsLength < 2) while (true) {
	      if (index in self) {
	        memo = self[index];
	        index += i;
	        break;
	      }
	      index += i;
	      if (IS_RIGHT ? index < 0 : length <= index) {
	        throw TypeError('Reduce of empty array with no initial value');
	      }
	    }
	    for (;IS_RIGHT ? index >= 0 : length > index; index += i) if (index in self) {
	      memo = callbackfn(memo, self[index], index, O);
	    }
	    return memo;
	  };
	};

	var arrayReduce = {
	  // `Array.prototype.reduce` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.reduce
	  left: createMethod$4(false),
	  // `Array.prototype.reduceRight` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.reduceright
	  right: createMethod$4(true)
	};

	var $reduce = arrayReduce.left;



	var STRICT_METHOD$5 = arrayMethodIsStrict('reduce');
	var USES_TO_LENGTH$a = arrayMethodUsesToLength$1('reduce', { 1: 0 });

	// `Array.prototype.reduce` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.reduce
	_export$1({ target: 'Array', proto: true, forced: !STRICT_METHOD$5 || !USES_TO_LENGTH$a }, {
	  reduce: function reduce(callbackfn /* , initialValue */) {
	    return $reduce(this, callbackfn, arguments.length, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	var $reduceRight = arrayReduce.right;



	var STRICT_METHOD$6 = arrayMethodIsStrict('reduceRight');
	// For preventing possible almost infinite loop in non-standard implementations, test the forward version of the method
	var USES_TO_LENGTH$b = arrayMethodUsesToLength$1('reduce', { 1: 0 });

	// `Array.prototype.reduceRight` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.reduceright
	_export$1({ target: 'Array', proto: true, forced: !STRICT_METHOD$6 || !USES_TO_LENGTH$b }, {
	  reduceRight: function reduceRight(callbackfn /* , initialValue */) {
	    return $reduceRight(this, callbackfn, arguments.length, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	var nativeReverse = [].reverse;
	var test$1 = [1, 2];

	// `Array.prototype.reverse` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.reverse
	// fix for Safari 12.0 bug
	// https://bugs.webkit.org/show_bug.cgi?id=188794
	_export$1({ target: 'Array', proto: true, forced: String(test$1) === String(test$1.reverse()) }, {
	  reverse: function reverse() {
	    // eslint-disable-next-line no-self-assign
	    if (isArray(this)) this.length = this.length;
	    return nativeReverse.call(this);
	  }
	});

	var HAS_SPECIES_SUPPORT$2 = arrayMethodHasSpeciesSupport('slice');
	var USES_TO_LENGTH$c = arrayMethodUsesToLength$1('slice', { ACCESSORS: true, 0: 0, 1: 2 });

	var SPECIES$2 = wellKnownSymbol$1('species');
	var nativeSlice = [].slice;
	var max$2 = Math.max;

	// `Array.prototype.slice` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.slice
	// fallback for not array-like ES3 strings and DOM objects
	_export$1({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT$2 || !USES_TO_LENGTH$c }, {
	  slice: function slice(start, end) {
	    var O = toIndexedObject$1(this);
	    var length = toLength$1(O.length);
	    var k = toAbsoluteIndex$1(start, length);
	    var fin = toAbsoluteIndex$1(end === undefined ? length : end, length);
	    // inline `ArraySpeciesCreate` for usage native `Array#slice` where it's possible
	    var Constructor, result, n;
	    if (isArray(O)) {
	      Constructor = O.constructor;
	      // cross-realm fallback
	      if (typeof Constructor == 'function' && (Constructor === Array || isArray(Constructor.prototype))) {
	        Constructor = undefined;
	      } else if (isObject$1(Constructor)) {
	        Constructor = Constructor[SPECIES$2];
	        if (Constructor === null) Constructor = undefined;
	      }
	      if (Constructor === Array || Constructor === undefined) {
	        return nativeSlice.call(O, k, fin);
	      }
	    }
	    result = new (Constructor === undefined ? Array : Constructor)(max$2(fin - k, 0));
	    for (n = 0; k < fin; k++, n++) if (k in O) createProperty(result, n, O[k]);
	    result.length = n;
	    return result;
	  }
	});

	var $some = arrayIteration.some;



	var STRICT_METHOD$7 = arrayMethodIsStrict('some');
	var USES_TO_LENGTH$d = arrayMethodUsesToLength$1('some');

	// `Array.prototype.some` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.some
	_export$1({ target: 'Array', proto: true, forced: !STRICT_METHOD$7 || !USES_TO_LENGTH$d }, {
	  some: function some(callbackfn /* , thisArg */) {
	    return $some(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	var test$2 = [];
	var nativeSort = test$2.sort;

	// IE8-
	var FAILS_ON_UNDEFINED = fails$1(function () {
	  test$2.sort(undefined);
	});
	// V8 bug
	var FAILS_ON_NULL = fails$1(function () {
	  test$2.sort(null);
	});
	// Old WebKit
	var STRICT_METHOD$8 = arrayMethodIsStrict('sort');

	var FORCED$3 = FAILS_ON_UNDEFINED || !FAILS_ON_NULL || !STRICT_METHOD$8;

	// `Array.prototype.sort` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.sort
	_export$1({ target: 'Array', proto: true, forced: FORCED$3 }, {
	  sort: function sort(comparefn) {
	    return comparefn === undefined
	      ? nativeSort.call(toObject$1(this))
	      : nativeSort.call(toObject$1(this), aFunction$3(comparefn));
	  }
	});

	var HAS_SPECIES_SUPPORT$3 = arrayMethodHasSpeciesSupport('splice');
	var USES_TO_LENGTH$e = arrayMethodUsesToLength$1('splice', { ACCESSORS: true, 0: 0, 1: 2 });

	var max$3 = Math.max;
	var min$6 = Math.min;
	var MAX_SAFE_INTEGER$1 = 0x1FFFFFFFFFFFFF;
	var MAXIMUM_ALLOWED_LENGTH_EXCEEDED = 'Maximum allowed length exceeded';

	// `Array.prototype.splice` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.splice
	// with adding support of @@species
	_export$1({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT$3 || !USES_TO_LENGTH$e }, {
	  splice: function splice(start, deleteCount /* , ...items */) {
	    var O = toObject$1(this);
	    var len = toLength$1(O.length);
	    var actualStart = toAbsoluteIndex$1(start, len);
	    var argumentsLength = arguments.length;
	    var insertCount, actualDeleteCount, A, k, from, to;
	    if (argumentsLength === 0) {
	      insertCount = actualDeleteCount = 0;
	    } else if (argumentsLength === 1) {
	      insertCount = 0;
	      actualDeleteCount = len - actualStart;
	    } else {
	      insertCount = argumentsLength - 2;
	      actualDeleteCount = min$6(max$3(toInteger$1(deleteCount), 0), len - actualStart);
	    }
	    if (len + insertCount - actualDeleteCount > MAX_SAFE_INTEGER$1) {
	      throw TypeError(MAXIMUM_ALLOWED_LENGTH_EXCEEDED);
	    }
	    A = arraySpeciesCreate(O, actualDeleteCount);
	    for (k = 0; k < actualDeleteCount; k++) {
	      from = actualStart + k;
	      if (from in O) createProperty(A, k, O[from]);
	    }
	    A.length = actualDeleteCount;
	    if (insertCount < actualDeleteCount) {
	      for (k = actualStart; k < len - actualDeleteCount; k++) {
	        from = k + actualDeleteCount;
	        to = k + insertCount;
	        if (from in O) O[to] = O[from];
	        else delete O[to];
	      }
	      for (k = len; k > len - actualDeleteCount + insertCount; k--) delete O[k - 1];
	    } else if (insertCount > actualDeleteCount) {
	      for (k = len - actualDeleteCount; k > actualStart; k--) {
	        from = k + actualDeleteCount - 1;
	        to = k + insertCount - 1;
	        if (from in O) O[to] = O[from];
	        else delete O[to];
	      }
	    }
	    for (k = 0; k < insertCount; k++) {
	      O[k + actualStart] = arguments[k + 2];
	    }
	    O.length = len - actualDeleteCount + insertCount;
	    return A;
	  }
	});

	var SPECIES$3 = wellKnownSymbol$1('species');

	var setSpecies = function (CONSTRUCTOR_NAME) {
	  var Constructor = getBuiltIn$1(CONSTRUCTOR_NAME);
	  var defineProperty = objectDefineProperty$1.f;

	  if (descriptors$1 && Constructor && !Constructor[SPECIES$3]) {
	    defineProperty(Constructor, SPECIES$3, {
	      configurable: true,
	      get: function () { return this; }
	    });
	  }
	};

	// `Array[@@species]` getter
	// https://tc39.github.io/ecma262/#sec-get-array-@@species
	setSpecies('Array');

	// this method was added to unscopables after implementation
	// in popular engines, so it's moved to a separate module


	addToUnscopables('flat');

	// this method was added to unscopables after implementation
	// in popular engines, so it's moved to a separate module


	addToUnscopables('flatMap');

	var ITERATOR$3 = wellKnownSymbol$1('iterator');
	var BUGGY_SAFARI_ITERATORS = false;

	var returnThis = function () { return this; };

	// `%IteratorPrototype%` object
	// https://tc39.github.io/ecma262/#sec-%iteratorprototype%-object
	var IteratorPrototype, PrototypeOfArrayIteratorPrototype, arrayIterator;

	if ([].keys) {
	  arrayIterator = [].keys();
	  // Safari 8 has buggy iterators w/o `next`
	  if (!('next' in arrayIterator)) BUGGY_SAFARI_ITERATORS = true;
	  else {
	    PrototypeOfArrayIteratorPrototype = objectGetPrototypeOf(objectGetPrototypeOf(arrayIterator));
	    if (PrototypeOfArrayIteratorPrototype !== Object.prototype) IteratorPrototype = PrototypeOfArrayIteratorPrototype;
	  }
	}

	if (IteratorPrototype == undefined) IteratorPrototype = {};

	// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
	if (!has$1(IteratorPrototype, ITERATOR$3)) {
	  createNonEnumerableProperty$1(IteratorPrototype, ITERATOR$3, returnThis);
	}

	var iteratorsCore = {
	  IteratorPrototype: IteratorPrototype,
	  BUGGY_SAFARI_ITERATORS: BUGGY_SAFARI_ITERATORS
	};

	var IteratorPrototype$1 = iteratorsCore.IteratorPrototype;





	var returnThis$1 = function () { return this; };

	var createIteratorConstructor = function (IteratorConstructor, NAME, next) {
	  var TO_STRING_TAG = NAME + ' Iterator';
	  IteratorConstructor.prototype = objectCreate(IteratorPrototype$1, { next: createPropertyDescriptor$1(1, next) });
	  setToStringTag(IteratorConstructor, TO_STRING_TAG, false, true);
	  iterators[TO_STRING_TAG] = returnThis$1;
	  return IteratorConstructor;
	};

	var IteratorPrototype$2 = iteratorsCore.IteratorPrototype;
	var BUGGY_SAFARI_ITERATORS$1 = iteratorsCore.BUGGY_SAFARI_ITERATORS;
	var ITERATOR$4 = wellKnownSymbol$1('iterator');
	var KEYS = 'keys';
	var VALUES = 'values';
	var ENTRIES = 'entries';

	var returnThis$2 = function () { return this; };

	var defineIterator = function (Iterable, NAME, IteratorConstructor, next, DEFAULT, IS_SET, FORCED) {
	  createIteratorConstructor(IteratorConstructor, NAME, next);

	  var getIterationMethod = function (KIND) {
	    if (KIND === DEFAULT && defaultIterator) return defaultIterator;
	    if (!BUGGY_SAFARI_ITERATORS$1 && KIND in IterablePrototype) return IterablePrototype[KIND];
	    switch (KIND) {
	      case KEYS: return function keys() { return new IteratorConstructor(this, KIND); };
	      case VALUES: return function values() { return new IteratorConstructor(this, KIND); };
	      case ENTRIES: return function entries() { return new IteratorConstructor(this, KIND); };
	    } return function () { return new IteratorConstructor(this); };
	  };

	  var TO_STRING_TAG = NAME + ' Iterator';
	  var INCORRECT_VALUES_NAME = false;
	  var IterablePrototype = Iterable.prototype;
	  var nativeIterator = IterablePrototype[ITERATOR$4]
	    || IterablePrototype['@@iterator']
	    || DEFAULT && IterablePrototype[DEFAULT];
	  var defaultIterator = !BUGGY_SAFARI_ITERATORS$1 && nativeIterator || getIterationMethod(DEFAULT);
	  var anyNativeIterator = NAME == 'Array' ? IterablePrototype.entries || nativeIterator : nativeIterator;
	  var CurrentIteratorPrototype, methods, KEY;

	  // fix native
	  if (anyNativeIterator) {
	    CurrentIteratorPrototype = objectGetPrototypeOf(anyNativeIterator.call(new Iterable()));
	    if (IteratorPrototype$2 !== Object.prototype && CurrentIteratorPrototype.next) {
	      if (objectGetPrototypeOf(CurrentIteratorPrototype) !== IteratorPrototype$2) {
	        if (objectSetPrototypeOf) {
	          objectSetPrototypeOf(CurrentIteratorPrototype, IteratorPrototype$2);
	        } else if (typeof CurrentIteratorPrototype[ITERATOR$4] != 'function') {
	          createNonEnumerableProperty$1(CurrentIteratorPrototype, ITERATOR$4, returnThis$2);
	        }
	      }
	      // Set @@toStringTag to native iterators
	      setToStringTag(CurrentIteratorPrototype, TO_STRING_TAG, true, true);
	    }
	  }

	  // fix Array#{values, @@iterator}.name in V8 / FF
	  if (DEFAULT == VALUES && nativeIterator && nativeIterator.name !== VALUES) {
	    INCORRECT_VALUES_NAME = true;
	    defaultIterator = function values() { return nativeIterator.call(this); };
	  }

	  // define iterator
	  if (IterablePrototype[ITERATOR$4] !== defaultIterator) {
	    createNonEnumerableProperty$1(IterablePrototype, ITERATOR$4, defaultIterator);
	  }
	  iterators[NAME] = defaultIterator;

	  // export additional methods
	  if (DEFAULT) {
	    methods = {
	      values: getIterationMethod(VALUES),
	      keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),
	      entries: getIterationMethod(ENTRIES)
	    };
	    if (FORCED) for (KEY in methods) {
	      if (BUGGY_SAFARI_ITERATORS$1 || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) {
	        redefine(IterablePrototype, KEY, methods[KEY]);
	      }
	    } else _export$1({ target: NAME, proto: true, forced: BUGGY_SAFARI_ITERATORS$1 || INCORRECT_VALUES_NAME }, methods);
	  }

	  return methods;
	};

	var ARRAY_ITERATOR = 'Array Iterator';
	var setInternalState$1 = internalState.set;
	var getInternalState$1 = internalState.getterFor(ARRAY_ITERATOR);

	// `Array.prototype.entries` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.entries
	// `Array.prototype.keys` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.keys
	// `Array.prototype.values` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.values
	// `Array.prototype[@@iterator]` method
	// https://tc39.github.io/ecma262/#sec-array.prototype-@@iterator
	// `CreateArrayIterator` internal method
	// https://tc39.github.io/ecma262/#sec-createarrayiterator
	var es_array_iterator = defineIterator(Array, 'Array', function (iterated, kind) {
	  setInternalState$1(this, {
	    type: ARRAY_ITERATOR,
	    target: toIndexedObject$1(iterated), // target
	    index: 0,                          // next index
	    kind: kind                         // kind
	  });
	// `%ArrayIteratorPrototype%.next` method
	// https://tc39.github.io/ecma262/#sec-%arrayiteratorprototype%.next
	}, function () {
	  var state = getInternalState$1(this);
	  var target = state.target;
	  var kind = state.kind;
	  var index = state.index++;
	  if (!target || index >= target.length) {
	    state.target = undefined;
	    return { value: undefined, done: true };
	  }
	  if (kind == 'keys') return { value: index, done: false };
	  if (kind == 'values') return { value: target[index], done: false };
	  return { value: [index, target[index]], done: false };
	}, 'values');

	// argumentsList[@@iterator] is %ArrayProto_values%
	// https://tc39.github.io/ecma262/#sec-createunmappedargumentsobject
	// https://tc39.github.io/ecma262/#sec-createmappedargumentsobject
	iterators.Arguments = iterators.Array;

	// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
	addToUnscopables('keys');
	addToUnscopables('values');
	addToUnscopables('entries');

	var fromCharCode = String.fromCharCode;
	var nativeFromCodePoint = String.fromCodePoint;

	// length should be 1, old FF problem
	var INCORRECT_LENGTH = !!nativeFromCodePoint && nativeFromCodePoint.length != 1;

	// `String.fromCodePoint` method
	// https://tc39.github.io/ecma262/#sec-string.fromcodepoint
	_export$1({ target: 'String', stat: true, forced: INCORRECT_LENGTH }, {
	  fromCodePoint: function fromCodePoint(x) { // eslint-disable-line no-unused-vars
	    var elements = [];
	    var length = arguments.length;
	    var i = 0;
	    var code;
	    while (length > i) {
	      code = +arguments[i++];
	      if (toAbsoluteIndex$1(code, 0x10FFFF) !== code) throw RangeError(code + ' is not a valid code point');
	      elements.push(code < 0x10000
	        ? fromCharCode(code)
	        : fromCharCode(((code -= 0x10000) >> 10) + 0xD800, code % 0x400 + 0xDC00)
	      );
	    } return elements.join('');
	  }
	});

	// `String.raw` method
	// https://tc39.github.io/ecma262/#sec-string.raw
	_export$1({ target: 'String', stat: true }, {
	  raw: function raw(template) {
	    var rawTemplate = toIndexedObject$1(template.raw);
	    var literalSegments = toLength$1(rawTemplate.length);
	    var argumentsLength = arguments.length;
	    var elements = [];
	    var i = 0;
	    while (literalSegments > i) {
	      elements.push(String(rawTemplate[i++]));
	      if (i < argumentsLength) elements.push(String(arguments[i]));
	    } return elements.join('');
	  }
	});

	// `String.prototype.{ codePointAt, at }` methods implementation
	var createMethod$5 = function (CONVERT_TO_STRING) {
	  return function ($this, pos) {
	    var S = String(requireObjectCoercible$1($this));
	    var position = toInteger$1(pos);
	    var size = S.length;
	    var first, second;
	    if (position < 0 || position >= size) return CONVERT_TO_STRING ? '' : undefined;
	    first = S.charCodeAt(position);
	    return first < 0xD800 || first > 0xDBFF || position + 1 === size
	      || (second = S.charCodeAt(position + 1)) < 0xDC00 || second > 0xDFFF
	        ? CONVERT_TO_STRING ? S.charAt(position) : first
	        : CONVERT_TO_STRING ? S.slice(position, position + 2) : (first - 0xD800 << 10) + (second - 0xDC00) + 0x10000;
	  };
	};

	var stringMultibyte = {
	  // `String.prototype.codePointAt` method
	  // https://tc39.github.io/ecma262/#sec-string.prototype.codepointat
	  codeAt: createMethod$5(false),
	  // `String.prototype.at` method
	  // https://github.com/mathiasbynens/String.prototype.at
	  charAt: createMethod$5(true)
	};

	var codeAt = stringMultibyte.codeAt;

	// `String.prototype.codePointAt` method
	// https://tc39.github.io/ecma262/#sec-string.prototype.codepointat
	_export$1({ target: 'String', proto: true }, {
	  codePointAt: function codePointAt(pos) {
	    return codeAt(this, pos);
	  }
	});

	var MATCH$2 = wellKnownSymbol$1('match');

	// `IsRegExp` abstract operation
	// https://tc39.github.io/ecma262/#sec-isregexp
	var isRegexp$1 = function (it) {
	  var isRegExp;
	  return isObject$1(it) && ((isRegExp = it[MATCH$2]) !== undefined ? !!isRegExp : classofRaw$1(it) == 'RegExp');
	};

	var notARegexp$1 = function (it) {
	  if (isRegexp$1(it)) {
	    throw TypeError("The method doesn't accept regular expressions");
	  } return it;
	};

	var MATCH$3 = wellKnownSymbol$1('match');

	var correctIsRegexpLogic$1 = function (METHOD_NAME) {
	  var regexp = /./;
	  try {
	    '/./'[METHOD_NAME](regexp);
	  } catch (e) {
	    try {
	      regexp[MATCH$3] = false;
	      return '/./'[METHOD_NAME](regexp);
	    } catch (f) { /* empty */ }
	  } return false;
	};

	var getOwnPropertyDescriptor$6 = objectGetOwnPropertyDescriptor$1.f;






	var nativeEndsWith = ''.endsWith;
	var min$7 = Math.min;

	var CORRECT_IS_REGEXP_LOGIC = correctIsRegexpLogic$1('endsWith');
	// https://github.com/zloirock/core-js/pull/702
	var MDN_POLYFILL_BUG = !CORRECT_IS_REGEXP_LOGIC && !!function () {
	  var descriptor = getOwnPropertyDescriptor$6(String.prototype, 'endsWith');
	  return descriptor && !descriptor.writable;
	}();

	// `String.prototype.endsWith` method
	// https://tc39.github.io/ecma262/#sec-string.prototype.endswith
	_export$1({ target: 'String', proto: true, forced: !MDN_POLYFILL_BUG && !CORRECT_IS_REGEXP_LOGIC }, {
	  endsWith: function endsWith(searchString /* , endPosition = @length */) {
	    var that = String(requireObjectCoercible$1(this));
	    notARegexp$1(searchString);
	    var endPosition = arguments.length > 1 ? arguments[1] : undefined;
	    var len = toLength$1(that.length);
	    var end = endPosition === undefined ? len : min$7(toLength$1(endPosition), len);
	    var search = String(searchString);
	    return nativeEndsWith
	      ? nativeEndsWith.call(that, search, end)
	      : that.slice(end - search.length, end) === search;
	  }
	});

	// `String.prototype.includes` method
	// https://tc39.github.io/ecma262/#sec-string.prototype.includes
	_export$1({ target: 'String', proto: true, forced: !correctIsRegexpLogic$1('includes') }, {
	  includes: function includes(searchString /* , position = 0 */) {
	    return !!~String(requireObjectCoercible$1(this))
	      .indexOf(notARegexp$1(searchString), arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	// `RegExp.prototype.flags` getter implementation
	// https://tc39.github.io/ecma262/#sec-get-regexp.prototype.flags
	var regexpFlags = function () {
	  var that = anObject$1(this);
	  var result = '';
	  if (that.global) result += 'g';
	  if (that.ignoreCase) result += 'i';
	  if (that.multiline) result += 'm';
	  if (that.dotAll) result += 's';
	  if (that.unicode) result += 'u';
	  if (that.sticky) result += 'y';
	  return result;
	};

	// babel-minify transpiles RegExp('a', 'y') -> /a/y and it causes SyntaxError,
	// so we use an intermediate function.
	function RE(s, f) {
	  return RegExp(s, f);
	}

	var UNSUPPORTED_Y = fails$1(function () {
	  // babel-minify transpiles RegExp('a', 'y') -> /a/y and it causes SyntaxError
	  var re = RE('a', 'y');
	  re.lastIndex = 2;
	  return re.exec('abcd') != null;
	});

	var BROKEN_CARET = fails$1(function () {
	  // https://bugzilla.mozilla.org/show_bug.cgi?id=773687
	  var re = RE('^r', 'gy');
	  re.lastIndex = 2;
	  return re.exec('str') != null;
	});

	var regexpStickyHelpers = {
		UNSUPPORTED_Y: UNSUPPORTED_Y,
		BROKEN_CARET: BROKEN_CARET
	};

	var nativeExec = RegExp.prototype.exec;
	// This always refers to the native implementation, because the
	// String#replace polyfill uses ./fix-regexp-well-known-symbol-logic.js,
	// which loads this file before patching the method.
	var nativeReplace = String.prototype.replace;

	var patchedExec = nativeExec;

	var UPDATES_LAST_INDEX_WRONG = (function () {
	  var re1 = /a/;
	  var re2 = /b*/g;
	  nativeExec.call(re1, 'a');
	  nativeExec.call(re2, 'a');
	  return re1.lastIndex !== 0 || re2.lastIndex !== 0;
	})();

	var UNSUPPORTED_Y$1 = regexpStickyHelpers.UNSUPPORTED_Y || regexpStickyHelpers.BROKEN_CARET;

	// nonparticipating capturing group, copied from es5-shim's String#split patch.
	var NPCG_INCLUDED = /()??/.exec('')[1] !== undefined;

	var PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED || UNSUPPORTED_Y$1;

	if (PATCH) {
	  patchedExec = function exec(str) {
	    var re = this;
	    var lastIndex, reCopy, match, i;
	    var sticky = UNSUPPORTED_Y$1 && re.sticky;
	    var flags = regexpFlags.call(re);
	    var source = re.source;
	    var charsAdded = 0;
	    var strCopy = str;

	    if (sticky) {
	      flags = flags.replace('y', '');
	      if (flags.indexOf('g') === -1) {
	        flags += 'g';
	      }

	      strCopy = String(str).slice(re.lastIndex);
	      // Support anchored sticky behavior.
	      if (re.lastIndex > 0 && (!re.multiline || re.multiline && str[re.lastIndex - 1] !== '\n')) {
	        source = '(?: ' + source + ')';
	        strCopy = ' ' + strCopy;
	        charsAdded++;
	      }
	      // ^(? + rx + ) is needed, in combination with some str slicing, to
	      // simulate the 'y' flag.
	      reCopy = new RegExp('^(?:' + source + ')', flags);
	    }

	    if (NPCG_INCLUDED) {
	      reCopy = new RegExp('^' + source + '$(?!\\s)', flags);
	    }
	    if (UPDATES_LAST_INDEX_WRONG) lastIndex = re.lastIndex;

	    match = nativeExec.call(sticky ? reCopy : re, strCopy);

	    if (sticky) {
	      if (match) {
	        match.input = match.input.slice(charsAdded);
	        match[0] = match[0].slice(charsAdded);
	        match.index = re.lastIndex;
	        re.lastIndex += match[0].length;
	      } else re.lastIndex = 0;
	    } else if (UPDATES_LAST_INDEX_WRONG && match) {
	      re.lastIndex = re.global ? match.index + match[0].length : lastIndex;
	    }
	    if (NPCG_INCLUDED && match && match.length > 1) {
	      // Fix browsers whose `exec` methods don't consistently return `undefined`
	      // for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/
	      nativeReplace.call(match[0], reCopy, function () {
	        for (i = 1; i < arguments.length - 2; i++) {
	          if (arguments[i] === undefined) match[i] = undefined;
	        }
	      });
	    }

	    return match;
	  };
	}

	var regexpExec = patchedExec;

	_export$1({ target: 'RegExp', proto: true, forced: /./.exec !== regexpExec }, {
	  exec: regexpExec
	});

	// TODO: Remove from `core-js@4` since it's moved to entry points







	var SPECIES$4 = wellKnownSymbol$1('species');

	var REPLACE_SUPPORTS_NAMED_GROUPS = !fails$1(function () {
	  // #replace needs built-in support for named groups.
	  // #match works fine because it just return the exec results, even if it has
	  // a "grops" property.
	  var re = /./;
	  re.exec = function () {
	    var result = [];
	    result.groups = { a: '7' };
	    return result;
	  };
	  return ''.replace(re, '$<a>') !== '7';
	});

	// IE <= 11 replaces $0 with the whole match, as if it was $&
	// https://stackoverflow.com/questions/6024666/getting-ie-to-replace-a-regex-with-the-literal-string-0
	var REPLACE_KEEPS_$0 = (function () {
	  return 'a'.replace(/./, '$0') === '$0';
	})();

	var REPLACE = wellKnownSymbol$1('replace');
	// Safari <= 13.0.3(?) substitutes nth capture where n>m with an empty string
	var REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE = (function () {
	  if (/./[REPLACE]) {
	    return /./[REPLACE]('a', '$0') === '';
	  }
	  return false;
	})();

	// Chrome 51 has a buggy "split" implementation when RegExp#exec !== nativeExec
	// Weex JS has frozen built-in prototypes, so use try / catch wrapper
	var SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = !fails$1(function () {
	  var re = /(?:)/;
	  var originalExec = re.exec;
	  re.exec = function () { return originalExec.apply(this, arguments); };
	  var result = 'ab'.split(re);
	  return result.length !== 2 || result[0] !== 'a' || result[1] !== 'b';
	});

	var fixRegexpWellKnownSymbolLogic = function (KEY, length, exec, sham) {
	  var SYMBOL = wellKnownSymbol$1(KEY);

	  var DELEGATES_TO_SYMBOL = !fails$1(function () {
	    // String methods call symbol-named RegEp methods
	    var O = {};
	    O[SYMBOL] = function () { return 7; };
	    return ''[KEY](O) != 7;
	  });

	  var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL && !fails$1(function () {
	    // Symbol-named RegExp methods call .exec
	    var execCalled = false;
	    var re = /a/;

	    if (KEY === 'split') {
	      // We can't use real regex here since it causes deoptimization
	      // and serious performance degradation in V8
	      // https://github.com/zloirock/core-js/issues/306
	      re = {};
	      // RegExp[@@split] doesn't call the regex's exec method, but first creates
	      // a new one. We need to return the patched regex when creating the new one.
	      re.constructor = {};
	      re.constructor[SPECIES$4] = function () { return re; };
	      re.flags = '';
	      re[SYMBOL] = /./[SYMBOL];
	    }

	    re.exec = function () { execCalled = true; return null; };

	    re[SYMBOL]('');
	    return !execCalled;
	  });

	  if (
	    !DELEGATES_TO_SYMBOL ||
	    !DELEGATES_TO_EXEC ||
	    (KEY === 'replace' && !(
	      REPLACE_SUPPORTS_NAMED_GROUPS &&
	      REPLACE_KEEPS_$0 &&
	      !REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE
	    )) ||
	    (KEY === 'split' && !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC)
	  ) {
	    var nativeRegExpMethod = /./[SYMBOL];
	    var methods = exec(SYMBOL, ''[KEY], function (nativeMethod, regexp, str, arg2, forceStringMethod) {
	      if (regexp.exec === regexpExec) {
	        if (DELEGATES_TO_SYMBOL && !forceStringMethod) {
	          // The native String method already delegates to @@method (this
	          // polyfilled function), leasing to infinite recursion.
	          // We avoid it by directly calling the native @@method method.
	          return { done: true, value: nativeRegExpMethod.call(regexp, str, arg2) };
	        }
	        return { done: true, value: nativeMethod.call(str, regexp, arg2) };
	      }
	      return { done: false };
	    }, {
	      REPLACE_KEEPS_$0: REPLACE_KEEPS_$0,
	      REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE: REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE
	    });
	    var stringMethod = methods[0];
	    var regexMethod = methods[1];

	    redefine(String.prototype, KEY, stringMethod);
	    redefine(RegExp.prototype, SYMBOL, length == 2
	      // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
	      // 21.2.5.11 RegExp.prototype[@@split](string, limit)
	      ? function (string, arg) { return regexMethod.call(string, this, arg); }
	      // 21.2.5.6 RegExp.prototype[@@match](string)
	      // 21.2.5.9 RegExp.prototype[@@search](string)
	      : function (string) { return regexMethod.call(string, this); }
	    );
	  }

	  if (sham) createNonEnumerableProperty$1(RegExp.prototype[SYMBOL], 'sham', true);
	};

	var charAt = stringMultibyte.charAt;

	// `AdvanceStringIndex` abstract operation
	// https://tc39.github.io/ecma262/#sec-advancestringindex
	var advanceStringIndex = function (S, index, unicode) {
	  return index + (unicode ? charAt(S, index).length : 1);
	};

	// `RegExpExec` abstract operation
	// https://tc39.github.io/ecma262/#sec-regexpexec
	var regexpExecAbstract = function (R, S) {
	  var exec = R.exec;
	  if (typeof exec === 'function') {
	    var result = exec.call(R, S);
	    if (typeof result !== 'object') {
	      throw TypeError('RegExp exec method returned something other than an Object or null');
	    }
	    return result;
	  }

	  if (classofRaw$1(R) !== 'RegExp') {
	    throw TypeError('RegExp#exec called on incompatible receiver');
	  }

	  return regexpExec.call(R, S);
	};

	// @@match logic
	fixRegexpWellKnownSymbolLogic('match', 1, function (MATCH, nativeMatch, maybeCallNative) {
	  return [
	    // `String.prototype.match` method
	    // https://tc39.github.io/ecma262/#sec-string.prototype.match
	    function match(regexp) {
	      var O = requireObjectCoercible$1(this);
	      var matcher = regexp == undefined ? undefined : regexp[MATCH];
	      return matcher !== undefined ? matcher.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));
	    },
	    // `RegExp.prototype[@@match]` method
	    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@match
	    function (regexp) {
	      var res = maybeCallNative(nativeMatch, regexp, this);
	      if (res.done) return res.value;

	      var rx = anObject$1(regexp);
	      var S = String(this);

	      if (!rx.global) return regexpExecAbstract(rx, S);

	      var fullUnicode = rx.unicode;
	      rx.lastIndex = 0;
	      var A = [];
	      var n = 0;
	      var result;
	      while ((result = regexpExecAbstract(rx, S)) !== null) {
	        var matchStr = String(result[0]);
	        A[n] = matchStr;
	        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength$1(rx.lastIndex), fullUnicode);
	        n++;
	      }
	      return n === 0 ? null : A;
	    }
	  ];
	});

	var SPECIES$5 = wellKnownSymbol$1('species');

	// `SpeciesConstructor` abstract operation
	// https://tc39.github.io/ecma262/#sec-speciesconstructor
	var speciesConstructor = function (O, defaultConstructor) {
	  var C = anObject$1(O).constructor;
	  var S;
	  return C === undefined || (S = anObject$1(C)[SPECIES$5]) == undefined ? defaultConstructor : aFunction$3(S);
	};

	var MATCH_ALL = wellKnownSymbol$1('matchAll');
	var REGEXP_STRING = 'RegExp String';
	var REGEXP_STRING_ITERATOR = REGEXP_STRING + ' Iterator';
	var setInternalState$2 = internalState.set;
	var getInternalState$2 = internalState.getterFor(REGEXP_STRING_ITERATOR);
	var RegExpPrototype = RegExp.prototype;
	var regExpBuiltinExec = RegExpPrototype.exec;
	var nativeMatchAll = ''.matchAll;

	var WORKS_WITH_NON_GLOBAL_REGEX = !!nativeMatchAll && !fails$1(function () {
	  'a'.matchAll(/./);
	});

	var regExpExec = function (R, S) {
	  var exec = R.exec;
	  var result;
	  if (typeof exec == 'function') {
	    result = exec.call(R, S);
	    if (typeof result != 'object') throw TypeError('Incorrect exec result');
	    return result;
	  } return regExpBuiltinExec.call(R, S);
	};

	// eslint-disable-next-line max-len
	var $RegExpStringIterator = createIteratorConstructor(function RegExpStringIterator(regexp, string, global, fullUnicode) {
	  setInternalState$2(this, {
	    type: REGEXP_STRING_ITERATOR,
	    regexp: regexp,
	    string: string,
	    global: global,
	    unicode: fullUnicode,
	    done: false
	  });
	}, REGEXP_STRING, function next() {
	  var state = getInternalState$2(this);
	  if (state.done) return { value: undefined, done: true };
	  var R = state.regexp;
	  var S = state.string;
	  var match = regExpExec(R, S);
	  if (match === null) return { value: undefined, done: state.done = true };
	  if (state.global) {
	    if (String(match[0]) == '') R.lastIndex = advanceStringIndex(S, toLength$1(R.lastIndex), state.unicode);
	    return { value: match, done: false };
	  }
	  state.done = true;
	  return { value: match, done: false };
	});

	var $matchAll = function (string) {
	  var R = anObject$1(this);
	  var S = String(string);
	  var C, flagsValue, flags, matcher, global, fullUnicode;
	  C = speciesConstructor(R, RegExp);
	  flagsValue = R.flags;
	  if (flagsValue === undefined && R instanceof RegExp && !('flags' in RegExpPrototype)) {
	    flagsValue = regexpFlags.call(R);
	  }
	  flags = flagsValue === undefined ? '' : String(flagsValue);
	  matcher = new C(C === RegExp ? R.source : R, flags);
	  global = !!~flags.indexOf('g');
	  fullUnicode = !!~flags.indexOf('u');
	  matcher.lastIndex = toLength$1(R.lastIndex);
	  return new $RegExpStringIterator(matcher, S, global, fullUnicode);
	};

	// `String.prototype.matchAll` method
	// https://github.com/tc39/proposal-string-matchall
	_export$1({ target: 'String', proto: true, forced: WORKS_WITH_NON_GLOBAL_REGEX }, {
	  matchAll: function matchAll(regexp) {
	    var O = requireObjectCoercible$1(this);
	    var flags, S, matcher, rx;
	    if (regexp != null) {
	      if (isRegexp$1(regexp)) {
	        flags = String(requireObjectCoercible$1('flags' in RegExpPrototype
	          ? regexp.flags
	          : regexpFlags.call(regexp)
	        ));
	        if (!~flags.indexOf('g')) throw TypeError('`.matchAll` does not allow non-global regexes');
	      }
	      if (WORKS_WITH_NON_GLOBAL_REGEX) return nativeMatchAll.apply(O, arguments);
	      matcher = regexp[MATCH_ALL];
	      if (matcher === undefined && isPure$1 && classofRaw$1(regexp) == 'RegExp') matcher = $matchAll;
	      if (matcher != null) return aFunction$3(matcher).call(regexp, O);
	    } else if (WORKS_WITH_NON_GLOBAL_REGEX) return nativeMatchAll.apply(O, arguments);
	    S = String(O);
	    rx = new RegExp(regexp, 'g');
	    return rx[MATCH_ALL](S);
	  }
	});

	MATCH_ALL in RegExpPrototype || createNonEnumerableProperty$1(RegExpPrototype, MATCH_ALL, $matchAll);

	// `String.prototype.repeat` method implementation
	// https://tc39.github.io/ecma262/#sec-string.prototype.repeat
	var stringRepeat = ''.repeat || function repeat(count) {
	  var str = String(requireObjectCoercible$1(this));
	  var result = '';
	  var n = toInteger$1(count);
	  if (n < 0 || n == Infinity) throw RangeError('Wrong number of repetitions');
	  for (;n > 0; (n >>>= 1) && (str += str)) if (n & 1) result += str;
	  return result;
	};

	// https://github.com/tc39/proposal-string-pad-start-end




	var ceil$2 = Math.ceil;

	// `String.prototype.{ padStart, padEnd }` methods implementation
	var createMethod$6 = function (IS_END) {
	  return function ($this, maxLength, fillString) {
	    var S = String(requireObjectCoercible$1($this));
	    var stringLength = S.length;
	    var fillStr = fillString === undefined ? ' ' : String(fillString);
	    var intMaxLength = toLength$1(maxLength);
	    var fillLen, stringFiller;
	    if (intMaxLength <= stringLength || fillStr == '') return S;
	    fillLen = intMaxLength - stringLength;
	    stringFiller = stringRepeat.call(fillStr, ceil$2(fillLen / fillStr.length));
	    if (stringFiller.length > fillLen) stringFiller = stringFiller.slice(0, fillLen);
	    return IS_END ? S + stringFiller : stringFiller + S;
	  };
	};

	var stringPad = {
	  // `String.prototype.padStart` method
	  // https://tc39.github.io/ecma262/#sec-string.prototype.padstart
	  start: createMethod$6(false),
	  // `String.prototype.padEnd` method
	  // https://tc39.github.io/ecma262/#sec-string.prototype.padend
	  end: createMethod$6(true)
	};

	// https://github.com/zloirock/core-js/issues/280


	// eslint-disable-next-line unicorn/no-unsafe-regex
	var stringPadWebkitBug = /Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(engineUserAgent$1);

	var $padEnd = stringPad.end;


	// `String.prototype.padEnd` method
	// https://tc39.github.io/ecma262/#sec-string.prototype.padend
	_export$1({ target: 'String', proto: true, forced: stringPadWebkitBug }, {
	  padEnd: function padEnd(maxLength /* , fillString = ' ' */) {
	    return $padEnd(this, maxLength, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	var $padStart = stringPad.start;


	// `String.prototype.padStart` method
	// https://tc39.github.io/ecma262/#sec-string.prototype.padstart
	_export$1({ target: 'String', proto: true, forced: stringPadWebkitBug }, {
	  padStart: function padStart(maxLength /* , fillString = ' ' */) {
	    return $padStart(this, maxLength, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	// `String.prototype.repeat` method
	// https://tc39.github.io/ecma262/#sec-string.prototype.repeat
	_export$1({ target: 'String', proto: true }, {
	  repeat: stringRepeat
	});

	var max$4 = Math.max;
	var min$8 = Math.min;
	var floor$2 = Math.floor;
	var SUBSTITUTION_SYMBOLS = /\$([$&'`]|\d\d?|<[^>]*>)/g;
	var SUBSTITUTION_SYMBOLS_NO_NAMED = /\$([$&'`]|\d\d?)/g;

	var maybeToString = function (it) {
	  return it === undefined ? it : String(it);
	};

	// @@replace logic
	fixRegexpWellKnownSymbolLogic('replace', 2, function (REPLACE, nativeReplace, maybeCallNative, reason) {
	  var REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE = reason.REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE;
	  var REPLACE_KEEPS_$0 = reason.REPLACE_KEEPS_$0;
	  var UNSAFE_SUBSTITUTE = REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE ? '$' : '$0';

	  return [
	    // `String.prototype.replace` method
	    // https://tc39.github.io/ecma262/#sec-string.prototype.replace
	    function replace(searchValue, replaceValue) {
	      var O = requireObjectCoercible$1(this);
	      var replacer = searchValue == undefined ? undefined : searchValue[REPLACE];
	      return replacer !== undefined
	        ? replacer.call(searchValue, O, replaceValue)
	        : nativeReplace.call(String(O), searchValue, replaceValue);
	    },
	    // `RegExp.prototype[@@replace]` method
	    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@replace
	    function (regexp, replaceValue) {
	      if (
	        (!REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE && REPLACE_KEEPS_$0) ||
	        (typeof replaceValue === 'string' && replaceValue.indexOf(UNSAFE_SUBSTITUTE) === -1)
	      ) {
	        var res = maybeCallNative(nativeReplace, regexp, this, replaceValue);
	        if (res.done) return res.value;
	      }

	      var rx = anObject$1(regexp);
	      var S = String(this);

	      var functionalReplace = typeof replaceValue === 'function';
	      if (!functionalReplace) replaceValue = String(replaceValue);

	      var global = rx.global;
	      if (global) {
	        var fullUnicode = rx.unicode;
	        rx.lastIndex = 0;
	      }
	      var results = [];
	      while (true) {
	        var result = regexpExecAbstract(rx, S);
	        if (result === null) break;

	        results.push(result);
	        if (!global) break;

	        var matchStr = String(result[0]);
	        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength$1(rx.lastIndex), fullUnicode);
	      }

	      var accumulatedResult = '';
	      var nextSourcePosition = 0;
	      for (var i = 0; i < results.length; i++) {
	        result = results[i];

	        var matched = String(result[0]);
	        var position = max$4(min$8(toInteger$1(result.index), S.length), 0);
	        var captures = [];
	        // NOTE: This is equivalent to
	        //   captures = result.slice(1).map(maybeToString)
	        // but for some reason `nativeSlice.call(result, 1, result.length)` (called in
	        // the slice polyfill when slicing native arrays) "doesn't work" in safari 9 and
	        // causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.
	        for (var j = 1; j < result.length; j++) captures.push(maybeToString(result[j]));
	        var namedCaptures = result.groups;
	        if (functionalReplace) {
	          var replacerArgs = [matched].concat(captures, position, S);
	          if (namedCaptures !== undefined) replacerArgs.push(namedCaptures);
	          var replacement = String(replaceValue.apply(undefined, replacerArgs));
	        } else {
	          replacement = getSubstitution(matched, S, position, captures, namedCaptures, replaceValue);
	        }
	        if (position >= nextSourcePosition) {
	          accumulatedResult += S.slice(nextSourcePosition, position) + replacement;
	          nextSourcePosition = position + matched.length;
	        }
	      }
	      return accumulatedResult + S.slice(nextSourcePosition);
	    }
	  ];

	  // https://tc39.github.io/ecma262/#sec-getsubstitution
	  function getSubstitution(matched, str, position, captures, namedCaptures, replacement) {
	    var tailPos = position + matched.length;
	    var m = captures.length;
	    var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;
	    if (namedCaptures !== undefined) {
	      namedCaptures = toObject$1(namedCaptures);
	      symbols = SUBSTITUTION_SYMBOLS;
	    }
	    return nativeReplace.call(replacement, symbols, function (match, ch) {
	      var capture;
	      switch (ch.charAt(0)) {
	        case '$': return '$';
	        case '&': return matched;
	        case '`': return str.slice(0, position);
	        case "'": return str.slice(tailPos);
	        case '<':
	          capture = namedCaptures[ch.slice(1, -1)];
	          break;
	        default: // \d\d?
	          var n = +ch;
	          if (n === 0) return match;
	          if (n > m) {
	            var f = floor$2(n / 10);
	            if (f === 0) return match;
	            if (f <= m) return captures[f - 1] === undefined ? ch.charAt(1) : captures[f - 1] + ch.charAt(1);
	            return match;
	          }
	          capture = captures[n - 1];
	      }
	      return capture === undefined ? '' : capture;
	    });
	  }
	});

	// @@search logic
	fixRegexpWellKnownSymbolLogic('search', 1, function (SEARCH, nativeSearch, maybeCallNative) {
	  return [
	    // `String.prototype.search` method
	    // https://tc39.github.io/ecma262/#sec-string.prototype.search
	    function search(regexp) {
	      var O = requireObjectCoercible$1(this);
	      var searcher = regexp == undefined ? undefined : regexp[SEARCH];
	      return searcher !== undefined ? searcher.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));
	    },
	    // `RegExp.prototype[@@search]` method
	    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@search
	    function (regexp) {
	      var res = maybeCallNative(nativeSearch, regexp, this);
	      if (res.done) return res.value;

	      var rx = anObject$1(regexp);
	      var S = String(this);

	      var previousLastIndex = rx.lastIndex;
	      if (!sameValue(previousLastIndex, 0)) rx.lastIndex = 0;
	      var result = regexpExecAbstract(rx, S);
	      if (!sameValue(rx.lastIndex, previousLastIndex)) rx.lastIndex = previousLastIndex;
	      return result === null ? -1 : result.index;
	    }
	  ];
	});

	var arrayPush = [].push;
	var min$9 = Math.min;
	var MAX_UINT32 = 0xFFFFFFFF;

	// babel-minify transpiles RegExp('x', 'y') -> /x/y and it causes SyntaxError
	var SUPPORTS_Y = !fails$1(function () { return !RegExp(MAX_UINT32, 'y'); });

	// @@split logic
	fixRegexpWellKnownSymbolLogic('split', 2, function (SPLIT, nativeSplit, maybeCallNative) {
	  var internalSplit;
	  if (
	    'abbc'.split(/(b)*/)[1] == 'c' ||
	    'test'.split(/(?:)/, -1).length != 4 ||
	    'ab'.split(/(?:ab)*/).length != 2 ||
	    '.'.split(/(.?)(.?)/).length != 4 ||
	    '.'.split(/()()/).length > 1 ||
	    ''.split(/.?/).length
	  ) {
	    // based on es5-shim implementation, need to rework it
	    internalSplit = function (separator, limit) {
	      var string = String(requireObjectCoercible$1(this));
	      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;
	      if (lim === 0) return [];
	      if (separator === undefined) return [string];
	      // If `separator` is not a regex, use native split
	      if (!isRegexp$1(separator)) {
	        return nativeSplit.call(string, separator, lim);
	      }
	      var output = [];
	      var flags = (separator.ignoreCase ? 'i' : '') +
	                  (separator.multiline ? 'm' : '') +
	                  (separator.unicode ? 'u' : '') +
	                  (separator.sticky ? 'y' : '');
	      var lastLastIndex = 0;
	      // Make `global` and avoid `lastIndex` issues by working with a copy
	      var separatorCopy = new RegExp(separator.source, flags + 'g');
	      var match, lastIndex, lastLength;
	      while (match = regexpExec.call(separatorCopy, string)) {
	        lastIndex = separatorCopy.lastIndex;
	        if (lastIndex > lastLastIndex) {
	          output.push(string.slice(lastLastIndex, match.index));
	          if (match.length > 1 && match.index < string.length) arrayPush.apply(output, match.slice(1));
	          lastLength = match[0].length;
	          lastLastIndex = lastIndex;
	          if (output.length >= lim) break;
	        }
	        if (separatorCopy.lastIndex === match.index) separatorCopy.lastIndex++; // Avoid an infinite loop
	      }
	      if (lastLastIndex === string.length) {
	        if (lastLength || !separatorCopy.test('')) output.push('');
	      } else output.push(string.slice(lastLastIndex));
	      return output.length > lim ? output.slice(0, lim) : output;
	    };
	  // Chakra, V8
	  } else if ('0'.split(undefined, 0).length) {
	    internalSplit = function (separator, limit) {
	      return separator === undefined && limit === 0 ? [] : nativeSplit.call(this, separator, limit);
	    };
	  } else internalSplit = nativeSplit;

	  return [
	    // `String.prototype.split` method
	    // https://tc39.github.io/ecma262/#sec-string.prototype.split
	    function split(separator, limit) {
	      var O = requireObjectCoercible$1(this);
	      var splitter = separator == undefined ? undefined : separator[SPLIT];
	      return splitter !== undefined
	        ? splitter.call(separator, O, limit)
	        : internalSplit.call(String(O), separator, limit);
	    },
	    // `RegExp.prototype[@@split]` method
	    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@split
	    //
	    // NOTE: This cannot be properly polyfilled in engines that don't support
	    // the 'y' flag.
	    function (regexp, limit) {
	      var res = maybeCallNative(internalSplit, regexp, this, limit, internalSplit !== nativeSplit);
	      if (res.done) return res.value;

	      var rx = anObject$1(regexp);
	      var S = String(this);
	      var C = speciesConstructor(rx, RegExp);

	      var unicodeMatching = rx.unicode;
	      var flags = (rx.ignoreCase ? 'i' : '') +
	                  (rx.multiline ? 'm' : '') +
	                  (rx.unicode ? 'u' : '') +
	                  (SUPPORTS_Y ? 'y' : 'g');

	      // ^(? + rx + ) is needed, in combination with some S slicing, to
	      // simulate the 'y' flag.
	      var splitter = new C(SUPPORTS_Y ? rx : '^(?:' + rx.source + ')', flags);
	      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;
	      if (lim === 0) return [];
	      if (S.length === 0) return regexpExecAbstract(splitter, S) === null ? [S] : [];
	      var p = 0;
	      var q = 0;
	      var A = [];
	      while (q < S.length) {
	        splitter.lastIndex = SUPPORTS_Y ? q : 0;
	        var z = regexpExecAbstract(splitter, SUPPORTS_Y ? S : S.slice(q));
	        var e;
	        if (
	          z === null ||
	          (e = min$9(toLength$1(splitter.lastIndex + (SUPPORTS_Y ? 0 : q)), S.length)) === p
	        ) {
	          q = advanceStringIndex(S, q, unicodeMatching);
	        } else {
	          A.push(S.slice(p, q));
	          if (A.length === lim) return A;
	          for (var i = 1; i <= z.length - 1; i++) {
	            A.push(z[i]);
	            if (A.length === lim) return A;
	          }
	          q = p = e;
	        }
	      }
	      A.push(S.slice(p));
	      return A;
	    }
	  ];
	}, !SUPPORTS_Y);

	var getOwnPropertyDescriptor$7 = objectGetOwnPropertyDescriptor$1.f;






	var nativeStartsWith = ''.startsWith;
	var min$a = Math.min;

	var CORRECT_IS_REGEXP_LOGIC$1 = correctIsRegexpLogic$1('startsWith');
	// https://github.com/zloirock/core-js/pull/702
	var MDN_POLYFILL_BUG$1 = !CORRECT_IS_REGEXP_LOGIC$1 && !!function () {
	  var descriptor = getOwnPropertyDescriptor$7(String.prototype, 'startsWith');
	  return descriptor && !descriptor.writable;
	}();

	// `String.prototype.startsWith` method
	// https://tc39.github.io/ecma262/#sec-string.prototype.startswith
	_export$1({ target: 'String', proto: true, forced: !MDN_POLYFILL_BUG$1 && !CORRECT_IS_REGEXP_LOGIC$1 }, {
	  startsWith: function startsWith(searchString /* , position = 0 */) {
	    var that = String(requireObjectCoercible$1(this));
	    notARegexp$1(searchString);
	    var index = toLength$1(min$a(arguments.length > 1 ? arguments[1] : undefined, that.length));
	    var search = String(searchString);
	    return nativeStartsWith
	      ? nativeStartsWith.call(that, search, index)
	      : that.slice(index, index + search.length) === search;
	  }
	});

	// a string of all valid unicode whitespaces
	// eslint-disable-next-line max-len
	var whitespaces = '\u0009\u000A\u000B\u000C\u000D\u0020\u00A0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';

	var whitespace = '[' + whitespaces + ']';
	var ltrim = RegExp('^' + whitespace + whitespace + '*');
	var rtrim = RegExp(whitespace + whitespace + '*$');

	// `String.prototype.{ trim, trimStart, trimEnd, trimLeft, trimRight }` methods implementation
	var createMethod$7 = function (TYPE) {
	  return function ($this) {
	    var string = String(requireObjectCoercible$1($this));
	    if (TYPE & 1) string = string.replace(ltrim, '');
	    if (TYPE & 2) string = string.replace(rtrim, '');
	    return string;
	  };
	};

	var stringTrim = {
	  // `String.prototype.{ trimLeft, trimStart }` methods
	  // https://tc39.github.io/ecma262/#sec-string.prototype.trimstart
	  start: createMethod$7(1),
	  // `String.prototype.{ trimRight, trimEnd }` methods
	  // https://tc39.github.io/ecma262/#sec-string.prototype.trimend
	  end: createMethod$7(2),
	  // `String.prototype.trim` method
	  // https://tc39.github.io/ecma262/#sec-string.prototype.trim
	  trim: createMethod$7(3)
	};

	var non = '\u200B\u0085\u180E';

	// check that a method works with the correct list
	// of whitespaces and has a correct name
	var stringTrimForced = function (METHOD_NAME) {
	  return fails$1(function () {
	    return !!whitespaces[METHOD_NAME]() || non[METHOD_NAME]() != non || whitespaces[METHOD_NAME].name !== METHOD_NAME;
	  });
	};

	var $trim = stringTrim.trim;


	// `String.prototype.trim` method
	// https://tc39.github.io/ecma262/#sec-string.prototype.trim
	_export$1({ target: 'String', proto: true, forced: stringTrimForced('trim') }, {
	  trim: function trim() {
	    return $trim(this);
	  }
	});

	var $trimStart = stringTrim.start;


	var FORCED$4 = stringTrimForced('trimStart');

	var trimStart = FORCED$4 ? function trimStart() {
	  return $trimStart(this);
	} : ''.trimStart;

	// `String.prototype.{ trimStart, trimLeft }` methods
	// https://github.com/tc39/ecmascript-string-left-right-trim
	_export$1({ target: 'String', proto: true, forced: FORCED$4 }, {
	  trimStart: trimStart,
	  trimLeft: trimStart
	});

	var $trimEnd = stringTrim.end;


	var FORCED$5 = stringTrimForced('trimEnd');

	var trimEnd = FORCED$5 ? function trimEnd() {
	  return $trimEnd(this);
	} : ''.trimEnd;

	// `String.prototype.{ trimEnd, trimRight }` methods
	// https://github.com/tc39/ecmascript-string-left-right-trim
	_export$1({ target: 'String', proto: true, forced: FORCED$5 }, {
	  trimEnd: trimEnd,
	  trimRight: trimEnd
	});

	var charAt$1 = stringMultibyte.charAt;



	var STRING_ITERATOR = 'String Iterator';
	var setInternalState$3 = internalState.set;
	var getInternalState$3 = internalState.getterFor(STRING_ITERATOR);

	// `String.prototype[@@iterator]` method
	// https://tc39.github.io/ecma262/#sec-string.prototype-@@iterator
	defineIterator(String, 'String', function (iterated) {
	  setInternalState$3(this, {
	    type: STRING_ITERATOR,
	    string: String(iterated),
	    index: 0
	  });
	// `%StringIteratorPrototype%.next` method
	// https://tc39.github.io/ecma262/#sec-%stringiteratorprototype%.next
	}, function next() {
	  var state = getInternalState$3(this);
	  var string = state.string;
	  var index = state.index;
	  var point;
	  if (index >= string.length) return { value: undefined, done: true };
	  point = charAt$1(string, index);
	  state.index += point.length;
	  return { value: point, done: false };
	});

	var quot = /"/g;

	// B.2.3.2.1 CreateHTML(string, tag, attribute, value)
	// https://tc39.github.io/ecma262/#sec-createhtml
	var createHtml = function (string, tag, attribute, value) {
	  var S = String(requireObjectCoercible$1(string));
	  var p1 = '<' + tag;
	  if (attribute !== '') p1 += ' ' + attribute + '="' + String(value).replace(quot, '&quot;') + '"';
	  return p1 + '>' + S + '</' + tag + '>';
	};

	// check the existence of a method, lowercase
	// of a tag and escaping quotes in arguments
	var stringHtmlForced = function (METHOD_NAME) {
	  return fails$1(function () {
	    var test = ''[METHOD_NAME]('"');
	    return test !== test.toLowerCase() || test.split('"').length > 3;
	  });
	};

	// `String.prototype.anchor` method
	// https://tc39.github.io/ecma262/#sec-string.prototype.anchor
	_export$1({ target: 'String', proto: true, forced: stringHtmlForced('anchor') }, {
	  anchor: function anchor(name) {
	    return createHtml(this, 'a', 'name', name);
	  }
	});

	// `String.prototype.big` method
	// https://tc39.github.io/ecma262/#sec-string.prototype.big
	_export$1({ target: 'String', proto: true, forced: stringHtmlForced('big') }, {
	  big: function big() {
	    return createHtml(this, 'big', '', '');
	  }
	});

	// `String.prototype.blink` method
	// https://tc39.github.io/ecma262/#sec-string.prototype.blink
	_export$1({ target: 'String', proto: true, forced: stringHtmlForced('blink') }, {
	  blink: function blink() {
	    return createHtml(this, 'blink', '', '');
	  }
	});

	// `String.prototype.bold` method
	// https://tc39.github.io/ecma262/#sec-string.prototype.bold
	_export$1({ target: 'String', proto: true, forced: stringHtmlForced('bold') }, {
	  bold: function bold() {
	    return createHtml(this, 'b', '', '');
	  }
	});

	// `String.prototype.fixed` method
	// https://tc39.github.io/ecma262/#sec-string.prototype.fixed
	_export$1({ target: 'String', proto: true, forced: stringHtmlForced('fixed') }, {
	  fixed: function fixed() {
	    return createHtml(this, 'tt', '', '');
	  }
	});

	// `String.prototype.fontcolor` method
	// https://tc39.github.io/ecma262/#sec-string.prototype.fontcolor
	_export$1({ target: 'String', proto: true, forced: stringHtmlForced('fontcolor') }, {
	  fontcolor: function fontcolor(color) {
	    return createHtml(this, 'font', 'color', color);
	  }
	});

	// `String.prototype.fontsize` method
	// https://tc39.github.io/ecma262/#sec-string.prototype.fontsize
	_export$1({ target: 'String', proto: true, forced: stringHtmlForced('fontsize') }, {
	  fontsize: function fontsize(size) {
	    return createHtml(this, 'font', 'size', size);
	  }
	});

	// `String.prototype.italics` method
	// https://tc39.github.io/ecma262/#sec-string.prototype.italics
	_export$1({ target: 'String', proto: true, forced: stringHtmlForced('italics') }, {
	  italics: function italics() {
	    return createHtml(this, 'i', '', '');
	  }
	});

	// `String.prototype.link` method
	// https://tc39.github.io/ecma262/#sec-string.prototype.link
	_export$1({ target: 'String', proto: true, forced: stringHtmlForced('link') }, {
	  link: function link(url) {
	    return createHtml(this, 'a', 'href', url);
	  }
	});

	// `String.prototype.small` method
	// https://tc39.github.io/ecma262/#sec-string.prototype.small
	_export$1({ target: 'String', proto: true, forced: stringHtmlForced('small') }, {
	  small: function small() {
	    return createHtml(this, 'small', '', '');
	  }
	});

	// `String.prototype.strike` method
	// https://tc39.github.io/ecma262/#sec-string.prototype.strike
	_export$1({ target: 'String', proto: true, forced: stringHtmlForced('strike') }, {
	  strike: function strike() {
	    return createHtml(this, 'strike', '', '');
	  }
	});

	// `String.prototype.sub` method
	// https://tc39.github.io/ecma262/#sec-string.prototype.sub
	_export$1({ target: 'String', proto: true, forced: stringHtmlForced('sub') }, {
	  sub: function sub() {
	    return createHtml(this, 'sub', '', '');
	  }
	});

	// `String.prototype.sup` method
	// https://tc39.github.io/ecma262/#sec-string.prototype.sup
	_export$1({ target: 'String', proto: true, forced: stringHtmlForced('sup') }, {
	  sup: function sup() {
	    return createHtml(this, 'sup', '', '');
	  }
	});

	// makes subclassing work correct for wrapped built-ins
	var inheritIfRequired = function ($this, dummy, Wrapper) {
	  var NewTarget, NewTargetPrototype;
	  if (
	    // it can work only with native `setPrototypeOf`
	    objectSetPrototypeOf &&
	    // we haven't completely correct pre-ES6 way for getting `new.target`, so use this
	    typeof (NewTarget = dummy.constructor) == 'function' &&
	    NewTarget !== Wrapper &&
	    isObject$1(NewTargetPrototype = NewTarget.prototype) &&
	    NewTargetPrototype !== Wrapper.prototype
	  ) objectSetPrototypeOf($this, NewTargetPrototype);
	  return $this;
	};

	var defineProperty$8 = objectDefineProperty$1.f;
	var getOwnPropertyNames = objectGetOwnPropertyNames.f;





	var setInternalState$4 = internalState.set;



	var MATCH$4 = wellKnownSymbol$1('match');
	var NativeRegExp = global_1$1.RegExp;
	var RegExpPrototype$1 = NativeRegExp.prototype;
	var re1 = /a/g;
	var re2 = /a/g;

	// "new" should create a new object, old webkit bug
	var CORRECT_NEW = new NativeRegExp(re1) !== re1;

	var UNSUPPORTED_Y$2 = regexpStickyHelpers.UNSUPPORTED_Y;

	var FORCED$6 = descriptors$1 && isForced_1$1('RegExp', (!CORRECT_NEW || UNSUPPORTED_Y$2 || fails$1(function () {
	  re2[MATCH$4] = false;
	  // RegExp constructor can alter flags and IsRegExp works correct with @@match
	  return NativeRegExp(re1) != re1 || NativeRegExp(re2) == re2 || NativeRegExp(re1, 'i') != '/a/i';
	})));

	// `RegExp` constructor
	// https://tc39.github.io/ecma262/#sec-regexp-constructor
	if (FORCED$6) {
	  var RegExpWrapper = function RegExp(pattern, flags) {
	    var thisIsRegExp = this instanceof RegExpWrapper;
	    var patternIsRegExp = isRegexp$1(pattern);
	    var flagsAreUndefined = flags === undefined;
	    var sticky;

	    if (!thisIsRegExp && patternIsRegExp && pattern.constructor === RegExpWrapper && flagsAreUndefined) {
	      return pattern;
	    }

	    if (CORRECT_NEW) {
	      if (patternIsRegExp && !flagsAreUndefined) pattern = pattern.source;
	    } else if (pattern instanceof RegExpWrapper) {
	      if (flagsAreUndefined) flags = regexpFlags.call(pattern);
	      pattern = pattern.source;
	    }

	    if (UNSUPPORTED_Y$2) {
	      sticky = !!flags && flags.indexOf('y') > -1;
	      if (sticky) flags = flags.replace(/y/g, '');
	    }

	    var result = inheritIfRequired(
	      CORRECT_NEW ? new NativeRegExp(pattern, flags) : NativeRegExp(pattern, flags),
	      thisIsRegExp ? this : RegExpPrototype$1,
	      RegExpWrapper
	    );

	    if (UNSUPPORTED_Y$2 && sticky) setInternalState$4(result, { sticky: sticky });

	    return result;
	  };
	  var proxy = function (key) {
	    key in RegExpWrapper || defineProperty$8(RegExpWrapper, key, {
	      configurable: true,
	      get: function () { return NativeRegExp[key]; },
	      set: function (it) { NativeRegExp[key] = it; }
	    });
	  };
	  var keys$1 = getOwnPropertyNames(NativeRegExp);
	  var index = 0;
	  while (keys$1.length > index) proxy(keys$1[index++]);
	  RegExpPrototype$1.constructor = RegExpWrapper;
	  RegExpWrapper.prototype = RegExpPrototype$1;
	  redefine(global_1$1, 'RegExp', RegExpWrapper);
	}

	// https://tc39.github.io/ecma262/#sec-get-regexp-@@species
	setSpecies('RegExp');

	var UNSUPPORTED_Y$3 = regexpStickyHelpers.UNSUPPORTED_Y;

	// `RegExp.prototype.flags` getter
	// https://tc39.github.io/ecma262/#sec-get-regexp.prototype.flags
	if (descriptors$1 && (/./g.flags != 'g' || UNSUPPORTED_Y$3)) {
	  objectDefineProperty$1.f(RegExp.prototype, 'flags', {
	    configurable: true,
	    get: regexpFlags
	  });
	}

	var UNSUPPORTED_Y$4 = regexpStickyHelpers.UNSUPPORTED_Y;
	var defineProperty$9 = objectDefineProperty$1.f;
	var getInternalState$4 = internalState.get;
	var RegExpPrototype$2 = RegExp.prototype;

	// `RegExp.prototype.sticky` getter
	if (descriptors$1 && UNSUPPORTED_Y$4) {
	  defineProperty$9(RegExp.prototype, 'sticky', {
	    configurable: true,
	    get: function () {
	      if (this === RegExpPrototype$2) return undefined;
	      // We can't use InternalStateModule.getterFor because
	      // we don't add metadata for regexps created by a literal.
	      if (this instanceof RegExp) {
	        return !!getInternalState$4(this).sticky;
	      }
	      throw TypeError('Incompatible receiver, RegExp required');
	    }
	  });
	}

	// TODO: Remove from `core-js@4` since it's moved to entry points




	var DELEGATES_TO_EXEC = function () {
	  var execCalled = false;
	  var re = /[ac]/;
	  re.exec = function () {
	    execCalled = true;
	    return /./.exec.apply(this, arguments);
	  };
	  return re.test('abc') === true && execCalled;
	}();

	var nativeTest = /./.test;

	_export$1({ target: 'RegExp', proto: true, forced: !DELEGATES_TO_EXEC }, {
	  test: function (str) {
	    if (typeof this.exec !== 'function') {
	      return nativeTest.call(this, str);
	    }
	    var result = this.exec(str);
	    if (result !== null && !isObject$1(result)) {
	      throw new Error('RegExp exec method returned something other than an Object or null');
	    }
	    return !!result;
	  }
	});

	var TO_STRING = 'toString';
	var RegExpPrototype$3 = RegExp.prototype;
	var nativeToString = RegExpPrototype$3[TO_STRING];

	var NOT_GENERIC = fails$1(function () { return nativeToString.call({ source: 'a', flags: 'b' }) != '/a/b'; });
	// FF44- RegExp#toString has a wrong name
	var INCORRECT_NAME = nativeToString.name != TO_STRING;

	// `RegExp.prototype.toString` method
	// https://tc39.github.io/ecma262/#sec-regexp.prototype.tostring
	if (NOT_GENERIC || INCORRECT_NAME) {
	  redefine(RegExp.prototype, TO_STRING, function toString() {
	    var R = anObject$1(this);
	    var p = String(R.source);
	    var rf = R.flags;
	    var f = String(rf === undefined && R instanceof RegExp && !('flags' in RegExpPrototype$3) ? regexpFlags.call(R) : rf);
	    return '/' + p + '/' + f;
	  }, { unsafe: true });
	}

	var trim = stringTrim.trim;


	var $parseInt = global_1$1.parseInt;
	var hex = /^[+-]?0[Xx]/;
	var FORCED$7 = $parseInt(whitespaces + '08') !== 8 || $parseInt(whitespaces + '0x16') !== 22;

	// `parseInt` method
	// https://tc39.github.io/ecma262/#sec-parseint-string-radix
	var numberParseInt = FORCED$7 ? function parseInt(string, radix) {
	  var S = trim(String(string));
	  return $parseInt(S, (radix >>> 0) || (hex.test(S) ? 16 : 10));
	} : $parseInt;

	// `parseInt` method
	// https://tc39.github.io/ecma262/#sec-parseint-string-radix
	_export$1({ global: true, forced: parseInt != numberParseInt }, {
	  parseInt: numberParseInt
	});

	var trim$1 = stringTrim.trim;


	var $parseFloat = global_1$1.parseFloat;
	var FORCED$8 = 1 / $parseFloat(whitespaces + '-0') !== -Infinity;

	// `parseFloat` method
	// https://tc39.github.io/ecma262/#sec-parsefloat-string
	var numberParseFloat = FORCED$8 ? function parseFloat(string) {
	  var trimmedString = trim$1(String(string));
	  var result = $parseFloat(trimmedString);
	  return result === 0 && trimmedString.charAt(0) == '-' ? -0 : result;
	} : $parseFloat;

	// `parseFloat` method
	// https://tc39.github.io/ecma262/#sec-parsefloat-string
	_export$1({ global: true, forced: parseFloat != numberParseFloat }, {
	  parseFloat: numberParseFloat
	});

	var getOwnPropertyNames$1 = objectGetOwnPropertyNames.f;
	var getOwnPropertyDescriptor$8 = objectGetOwnPropertyDescriptor$1.f;
	var defineProperty$a = objectDefineProperty$1.f;
	var trim$2 = stringTrim.trim;

	var NUMBER = 'Number';
	var NativeNumber = global_1$1[NUMBER];
	var NumberPrototype = NativeNumber.prototype;

	// Opera ~12 has broken Object#toString
	var BROKEN_CLASSOF = classofRaw$1(objectCreate(NumberPrototype)) == NUMBER;

	// `ToNumber` abstract operation
	// https://tc39.github.io/ecma262/#sec-tonumber
	var toNumber = function (argument) {
	  var it = toPrimitive$1(argument, false);
	  var first, third, radix, maxCode, digits, length, index, code;
	  if (typeof it == 'string' && it.length > 2) {
	    it = trim$2(it);
	    first = it.charCodeAt(0);
	    if (first === 43 || first === 45) {
	      third = it.charCodeAt(2);
	      if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix
	    } else if (first === 48) {
	      switch (it.charCodeAt(1)) {
	        case 66: case 98: radix = 2; maxCode = 49; break; // fast equal of /^0b[01]+$/i
	        case 79: case 111: radix = 8; maxCode = 55; break; // fast equal of /^0o[0-7]+$/i
	        default: return +it;
	      }
	      digits = it.slice(2);
	      length = digits.length;
	      for (index = 0; index < length; index++) {
	        code = digits.charCodeAt(index);
	        // parseInt parses a string to a first unavailable symbol
	        // but ToNumber should return NaN if a string contains unavailable symbols
	        if (code < 48 || code > maxCode) return NaN;
	      } return parseInt(digits, radix);
	    }
	  } return +it;
	};

	// `Number` constructor
	// https://tc39.github.io/ecma262/#sec-number-constructor
	if (isForced_1$1(NUMBER, !NativeNumber(' 0o1') || !NativeNumber('0b1') || NativeNumber('+0x1'))) {
	  var NumberWrapper = function Number(value) {
	    var it = arguments.length < 1 ? 0 : value;
	    var dummy = this;
	    return dummy instanceof NumberWrapper
	      // check on 1..constructor(foo) case
	      && (BROKEN_CLASSOF ? fails$1(function () { NumberPrototype.valueOf.call(dummy); }) : classofRaw$1(dummy) != NUMBER)
	        ? inheritIfRequired(new NativeNumber(toNumber(it)), dummy, NumberWrapper) : toNumber(it);
	  };
	  for (var keys$2 = descriptors$1 ? getOwnPropertyNames$1(NativeNumber) : (
	    // ES3:
	    'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +
	    // ES2015 (in case, if modules with ES2015 Number statics required before):
	    'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' +
	    'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger'
	  ).split(','), j = 0, key; keys$2.length > j; j++) {
	    if (has$1(NativeNumber, key = keys$2[j]) && !has$1(NumberWrapper, key)) {
	      defineProperty$a(NumberWrapper, key, getOwnPropertyDescriptor$8(NativeNumber, key));
	    }
	  }
	  NumberWrapper.prototype = NumberPrototype;
	  NumberPrototype.constructor = NumberWrapper;
	  redefine(global_1$1, NUMBER, NumberWrapper);
	}

	// `Number.EPSILON` constant
	// https://tc39.github.io/ecma262/#sec-number.epsilon
	_export$1({ target: 'Number', stat: true }, {
	  EPSILON: Math.pow(2, -52)
	});

	var globalIsFinite = global_1$1.isFinite;

	// `Number.isFinite` method
	// https://tc39.github.io/ecma262/#sec-number.isfinite
	var numberIsFinite = Number.isFinite || function isFinite(it) {
	  return typeof it == 'number' && globalIsFinite(it);
	};

	// `Number.isFinite` method
	// https://tc39.github.io/ecma262/#sec-number.isfinite
	_export$1({ target: 'Number', stat: true }, { isFinite: numberIsFinite });

	var floor$3 = Math.floor;

	// `Number.isInteger` method implementation
	// https://tc39.github.io/ecma262/#sec-number.isinteger
	var isInteger = function isInteger(it) {
	  return !isObject$1(it) && isFinite(it) && floor$3(it) === it;
	};

	// `Number.isInteger` method
	// https://tc39.github.io/ecma262/#sec-number.isinteger
	_export$1({ target: 'Number', stat: true }, {
	  isInteger: isInteger
	});

	// `Number.isNaN` method
	// https://tc39.github.io/ecma262/#sec-number.isnan
	_export$1({ target: 'Number', stat: true }, {
	  isNaN: function isNaN(number) {
	    // eslint-disable-next-line no-self-compare
	    return number != number;
	  }
	});

	var abs = Math.abs;

	// `Number.isSafeInteger` method
	// https://tc39.github.io/ecma262/#sec-number.issafeinteger
	_export$1({ target: 'Number', stat: true }, {
	  isSafeInteger: function isSafeInteger(number) {
	    return isInteger(number) && abs(number) <= 0x1FFFFFFFFFFFFF;
	  }
	});

	// `Number.MAX_SAFE_INTEGER` constant
	// https://tc39.github.io/ecma262/#sec-number.max_safe_integer
	_export$1({ target: 'Number', stat: true }, {
	  MAX_SAFE_INTEGER: 0x1FFFFFFFFFFFFF
	});

	// `Number.MIN_SAFE_INTEGER` constant
	// https://tc39.github.io/ecma262/#sec-number.min_safe_integer
	_export$1({ target: 'Number', stat: true }, {
	  MIN_SAFE_INTEGER: -0x1FFFFFFFFFFFFF
	});

	// `Number.parseFloat` method
	// https://tc39.github.io/ecma262/#sec-number.parseFloat
	_export$1({ target: 'Number', stat: true, forced: Number.parseFloat != numberParseFloat }, {
	  parseFloat: numberParseFloat
	});

	// `Number.parseInt` method
	// https://tc39.github.io/ecma262/#sec-number.parseint
	_export$1({ target: 'Number', stat: true, forced: Number.parseInt != numberParseInt }, {
	  parseInt: numberParseInt
	});

	// `thisNumberValue` abstract operation
	// https://tc39.github.io/ecma262/#sec-thisnumbervalue
	var thisNumberValue = function (value) {
	  if (typeof value != 'number' && classofRaw$1(value) != 'Number') {
	    throw TypeError('Incorrect invocation');
	  }
	  return +value;
	};

	var nativeToFixed = 1.0.toFixed;
	var floor$4 = Math.floor;

	var pow = function (x, n, acc) {
	  return n === 0 ? acc : n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc);
	};

	var log = function (x) {
	  var n = 0;
	  var x2 = x;
	  while (x2 >= 4096) {
	    n += 12;
	    x2 /= 4096;
	  }
	  while (x2 >= 2) {
	    n += 1;
	    x2 /= 2;
	  } return n;
	};

	var FORCED$9 = nativeToFixed && (
	  0.00008.toFixed(3) !== '0.000' ||
	  0.9.toFixed(0) !== '1' ||
	  1.255.toFixed(2) !== '1.25' ||
	  1000000000000000128.0.toFixed(0) !== '1000000000000000128'
	) || !fails$1(function () {
	  // V8 ~ Android 4.3-
	  nativeToFixed.call({});
	});

	// `Number.prototype.toFixed` method
	// https://tc39.github.io/ecma262/#sec-number.prototype.tofixed
	_export$1({ target: 'Number', proto: true, forced: FORCED$9 }, {
	  // eslint-disable-next-line max-statements
	  toFixed: function toFixed(fractionDigits) {
	    var number = thisNumberValue(this);
	    var fractDigits = toInteger$1(fractionDigits);
	    var data = [0, 0, 0, 0, 0, 0];
	    var sign = '';
	    var result = '0';
	    var e, z, j, k;

	    var multiply = function (n, c) {
	      var index = -1;
	      var c2 = c;
	      while (++index < 6) {
	        c2 += n * data[index];
	        data[index] = c2 % 1e7;
	        c2 = floor$4(c2 / 1e7);
	      }
	    };

	    var divide = function (n) {
	      var index = 6;
	      var c = 0;
	      while (--index >= 0) {
	        c += data[index];
	        data[index] = floor$4(c / n);
	        c = (c % n) * 1e7;
	      }
	    };

	    var dataToString = function () {
	      var index = 6;
	      var s = '';
	      while (--index >= 0) {
	        if (s !== '' || index === 0 || data[index] !== 0) {
	          var t = String(data[index]);
	          s = s === '' ? t : s + stringRepeat.call('0', 7 - t.length) + t;
	        }
	      } return s;
	    };

	    if (fractDigits < 0 || fractDigits > 20) throw RangeError('Incorrect fraction digits');
	    // eslint-disable-next-line no-self-compare
	    if (number != number) return 'NaN';
	    if (number <= -1e21 || number >= 1e21) return String(number);
	    if (number < 0) {
	      sign = '-';
	      number = -number;
	    }
	    if (number > 1e-21) {
	      e = log(number * pow(2, 69, 1)) - 69;
	      z = e < 0 ? number * pow(2, -e, 1) : number / pow(2, e, 1);
	      z *= 0x10000000000000;
	      e = 52 - e;
	      if (e > 0) {
	        multiply(0, z);
	        j = fractDigits;
	        while (j >= 7) {
	          multiply(1e7, 0);
	          j -= 7;
	        }
	        multiply(pow(10, j, 1), 0);
	        j = e - 1;
	        while (j >= 23) {
	          divide(1 << 23);
	          j -= 23;
	        }
	        divide(1 << j);
	        multiply(1, 1);
	        divide(2);
	        result = dataToString();
	      } else {
	        multiply(0, z);
	        multiply(1 << -e, 0);
	        result = dataToString() + stringRepeat.call('0', fractDigits);
	      }
	    }
	    if (fractDigits > 0) {
	      k = result.length;
	      result = sign + (k <= fractDigits
	        ? '0.' + stringRepeat.call('0', fractDigits - k) + result
	        : result.slice(0, k - fractDigits) + '.' + result.slice(k - fractDigits));
	    } else {
	      result = sign + result;
	    } return result;
	  }
	});

	var nativeToPrecision = 1.0.toPrecision;

	var FORCED$a = fails$1(function () {
	  // IE7-
	  return nativeToPrecision.call(1, undefined) !== '1';
	}) || !fails$1(function () {
	  // V8 ~ Android 4.3-
	  nativeToPrecision.call({});
	});

	// `Number.prototype.toPrecision` method
	// https://tc39.github.io/ecma262/#sec-number.prototype.toprecision
	_export$1({ target: 'Number', proto: true, forced: FORCED$a }, {
	  toPrecision: function toPrecision(precision) {
	    return precision === undefined
	      ? nativeToPrecision.call(thisNumberValue(this))
	      : nativeToPrecision.call(thisNumberValue(this), precision);
	  }
	});

	var log$1 = Math.log;

	// `Math.log1p` method implementation
	// https://tc39.github.io/ecma262/#sec-math.log1p
	var mathLog1p = Math.log1p || function log1p(x) {
	  return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : log$1(1 + x);
	};

	var nativeAcosh = Math.acosh;
	var log$2 = Math.log;
	var sqrt = Math.sqrt;
	var LN2 = Math.LN2;

	var FORCED$b = !nativeAcosh
	  // V8 bug: https://code.google.com/p/v8/issues/detail?id=3509
	  || Math.floor(nativeAcosh(Number.MAX_VALUE)) != 710
	  // Tor Browser bug: Math.acosh(Infinity) -> NaN
	  || nativeAcosh(Infinity) != Infinity;

	// `Math.acosh` method
	// https://tc39.github.io/ecma262/#sec-math.acosh
	_export$1({ target: 'Math', stat: true, forced: FORCED$b }, {
	  acosh: function acosh(x) {
	    return (x = +x) < 1 ? NaN : x > 94906265.62425156
	      ? log$2(x) + LN2
	      : mathLog1p(x - 1 + sqrt(x - 1) * sqrt(x + 1));
	  }
	});

	var nativeAsinh = Math.asinh;
	var log$3 = Math.log;
	var sqrt$1 = Math.sqrt;

	function asinh(x) {
	  return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : log$3(x + sqrt$1(x * x + 1));
	}

	// `Math.asinh` method
	// https://tc39.github.io/ecma262/#sec-math.asinh
	// Tor Browser bug: Math.asinh(0) -> -0
	_export$1({ target: 'Math', stat: true, forced: !(nativeAsinh && 1 / nativeAsinh(0) > 0) }, {
	  asinh: asinh
	});

	var nativeAtanh = Math.atanh;
	var log$4 = Math.log;

	// `Math.atanh` method
	// https://tc39.github.io/ecma262/#sec-math.atanh
	// Tor Browser bug: Math.atanh(-0) -> 0
	_export$1({ target: 'Math', stat: true, forced: !(nativeAtanh && 1 / nativeAtanh(-0) < 0) }, {
	  atanh: function atanh(x) {
	    return (x = +x) == 0 ? x : log$4((1 + x) / (1 - x)) / 2;
	  }
	});

	// `Math.sign` method implementation
	// https://tc39.github.io/ecma262/#sec-math.sign
	var mathSign = Math.sign || function sign(x) {
	  // eslint-disable-next-line no-self-compare
	  return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;
	};

	var abs$1 = Math.abs;
	var pow$1 = Math.pow;

	// `Math.cbrt` method
	// https://tc39.github.io/ecma262/#sec-math.cbrt
	_export$1({ target: 'Math', stat: true }, {
	  cbrt: function cbrt(x) {
	    return mathSign(x = +x) * pow$1(abs$1(x), 1 / 3);
	  }
	});

	var floor$5 = Math.floor;
	var log$5 = Math.log;
	var LOG2E = Math.LOG2E;

	// `Math.clz32` method
	// https://tc39.github.io/ecma262/#sec-math.clz32
	_export$1({ target: 'Math', stat: true }, {
	  clz32: function clz32(x) {
	    return (x >>>= 0) ? 31 - floor$5(log$5(x + 0.5) * LOG2E) : 32;
	  }
	});

	var nativeExpm1 = Math.expm1;
	var exp = Math.exp;

	// `Math.expm1` method implementation
	// https://tc39.github.io/ecma262/#sec-math.expm1
	var mathExpm1 = (!nativeExpm1
	  // Old FF bug
	  || nativeExpm1(10) > 22025.465794806719 || nativeExpm1(10) < 22025.4657948067165168
	  // Tor Browser bug
	  || nativeExpm1(-2e-17) != -2e-17
	) ? function expm1(x) {
	  return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : exp(x) - 1;
	} : nativeExpm1;

	var nativeCosh = Math.cosh;
	var abs$2 = Math.abs;
	var E = Math.E;

	// `Math.cosh` method
	// https://tc39.github.io/ecma262/#sec-math.cosh
	_export$1({ target: 'Math', stat: true, forced: !nativeCosh || nativeCosh(710) === Infinity }, {
	  cosh: function cosh(x) {
	    var t = mathExpm1(abs$2(x) - 1) + 1;
	    return (t + 1 / (t * E * E)) * (E / 2);
	  }
	});

	// `Math.expm1` method
	// https://tc39.github.io/ecma262/#sec-math.expm1
	_export$1({ target: 'Math', stat: true, forced: mathExpm1 != Math.expm1 }, { expm1: mathExpm1 });

	var abs$3 = Math.abs;
	var pow$2 = Math.pow;
	var EPSILON = pow$2(2, -52);
	var EPSILON32 = pow$2(2, -23);
	var MAX32 = pow$2(2, 127) * (2 - EPSILON32);
	var MIN32 = pow$2(2, -126);

	var roundTiesToEven = function (n) {
	  return n + 1 / EPSILON - 1 / EPSILON;
	};

	// `Math.fround` method implementation
	// https://tc39.github.io/ecma262/#sec-math.fround
	var mathFround = Math.fround || function fround(x) {
	  var $abs = abs$3(x);
	  var $sign = mathSign(x);
	  var a, result;
	  if ($abs < MIN32) return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;
	  a = (1 + EPSILON32 / EPSILON) * $abs;
	  result = a - (a - $abs);
	  // eslint-disable-next-line no-self-compare
	  if (result > MAX32 || result != result) return $sign * Infinity;
	  return $sign * result;
	};

	// `Math.fround` method
	// https://tc39.github.io/ecma262/#sec-math.fround
	_export$1({ target: 'Math', stat: true }, { fround: mathFround });

	var $hypot = Math.hypot;
	var abs$4 = Math.abs;
	var sqrt$2 = Math.sqrt;

	// Chrome 77 bug
	// https://bugs.chromium.org/p/v8/issues/detail?id=9546
	var BUGGY = !!$hypot && $hypot(Infinity, NaN) !== Infinity;

	// `Math.hypot` method
	// https://tc39.github.io/ecma262/#sec-math.hypot
	_export$1({ target: 'Math', stat: true, forced: BUGGY }, {
	  hypot: function hypot(value1, value2) { // eslint-disable-line no-unused-vars
	    var sum = 0;
	    var i = 0;
	    var aLen = arguments.length;
	    var larg = 0;
	    var arg, div;
	    while (i < aLen) {
	      arg = abs$4(arguments[i++]);
	      if (larg < arg) {
	        div = larg / arg;
	        sum = sum * div * div + 1;
	        larg = arg;
	      } else if (arg > 0) {
	        div = arg / larg;
	        sum += div * div;
	      } else sum += arg;
	    }
	    return larg === Infinity ? Infinity : larg * sqrt$2(sum);
	  }
	});

	var nativeImul = Math.imul;

	var FORCED$c = fails$1(function () {
	  return nativeImul(0xFFFFFFFF, 5) != -5 || nativeImul.length != 2;
	});

	// `Math.imul` method
	// https://tc39.github.io/ecma262/#sec-math.imul
	// some WebKit versions fails with big numbers, some has wrong arity
	_export$1({ target: 'Math', stat: true, forced: FORCED$c }, {
	  imul: function imul(x, y) {
	    var UINT16 = 0xFFFF;
	    var xn = +x;
	    var yn = +y;
	    var xl = UINT16 & xn;
	    var yl = UINT16 & yn;
	    return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0);
	  }
	});

	var log$6 = Math.log;
	var LOG10E = Math.LOG10E;

	// `Math.log10` method
	// https://tc39.github.io/ecma262/#sec-math.log10
	_export$1({ target: 'Math', stat: true }, {
	  log10: function log10(x) {
	    return log$6(x) * LOG10E;
	  }
	});

	// `Math.log1p` method
	// https://tc39.github.io/ecma262/#sec-math.log1p
	_export$1({ target: 'Math', stat: true }, { log1p: mathLog1p });

	var log$7 = Math.log;
	var LN2$1 = Math.LN2;

	// `Math.log2` method
	// https://tc39.github.io/ecma262/#sec-math.log2
	_export$1({ target: 'Math', stat: true }, {
	  log2: function log2(x) {
	    return log$7(x) / LN2$1;
	  }
	});

	// `Math.sign` method
	// https://tc39.github.io/ecma262/#sec-math.sign
	_export$1({ target: 'Math', stat: true }, {
	  sign: mathSign
	});

	var abs$5 = Math.abs;
	var exp$1 = Math.exp;
	var E$1 = Math.E;

	var FORCED$d = fails$1(function () {
	  return Math.sinh(-2e-17) != -2e-17;
	});

	// `Math.sinh` method
	// https://tc39.github.io/ecma262/#sec-math.sinh
	// V8 near Chromium 38 has a problem with very small numbers
	_export$1({ target: 'Math', stat: true, forced: FORCED$d }, {
	  sinh: function sinh(x) {
	    return abs$5(x = +x) < 1 ? (mathExpm1(x) - mathExpm1(-x)) / 2 : (exp$1(x - 1) - exp$1(-x - 1)) * (E$1 / 2);
	  }
	});

	var exp$2 = Math.exp;

	// `Math.tanh` method
	// https://tc39.github.io/ecma262/#sec-math.tanh
	_export$1({ target: 'Math', stat: true }, {
	  tanh: function tanh(x) {
	    var a = mathExpm1(x = +x);
	    var b = mathExpm1(-x);
	    return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp$2(x) + exp$2(-x));
	  }
	});

	// Math[@@toStringTag] property
	// https://tc39.github.io/ecma262/#sec-math-@@tostringtag
	setToStringTag(Math, 'Math', true);

	var ceil$3 = Math.ceil;
	var floor$6 = Math.floor;

	// `Math.trunc` method
	// https://tc39.github.io/ecma262/#sec-math.trunc
	_export$1({ target: 'Math', stat: true }, {
	  trunc: function trunc(it) {
	    return (it > 0 ? floor$6 : ceil$3)(it);
	  }
	});

	// `Date.now` method
	// https://tc39.github.io/ecma262/#sec-date.now
	_export$1({ target: 'Date', stat: true }, {
	  now: function now() {
	    return new Date().getTime();
	  }
	});

	var FORCED$e = fails$1(function () {
	  return new Date(NaN).toJSON() !== null
	    || Date.prototype.toJSON.call({ toISOString: function () { return 1; } }) !== 1;
	});

	// `Date.prototype.toJSON` method
	// https://tc39.github.io/ecma262/#sec-date.prototype.tojson
	_export$1({ target: 'Date', proto: true, forced: FORCED$e }, {
	  // eslint-disable-next-line no-unused-vars
	  toJSON: function toJSON(key) {
	    var O = toObject$1(this);
	    var pv = toPrimitive$1(O);
	    return typeof pv == 'number' && !isFinite(pv) ? null : O.toISOString();
	  }
	});

	var padStart = stringPad.start;

	var abs$6 = Math.abs;
	var DatePrototype = Date.prototype;
	var getTime = DatePrototype.getTime;
	var nativeDateToISOString = DatePrototype.toISOString;

	// `Date.prototype.toISOString` method implementation
	// https://tc39.github.io/ecma262/#sec-date.prototype.toisostring
	// PhantomJS / old WebKit fails here:
	var dateToIsoString = (fails$1(function () {
	  return nativeDateToISOString.call(new Date(-5e13 - 1)) != '0385-07-25T07:06:39.999Z';
	}) || !fails$1(function () {
	  nativeDateToISOString.call(new Date(NaN));
	})) ? function toISOString() {
	  if (!isFinite(getTime.call(this))) throw RangeError('Invalid time value');
	  var date = this;
	  var year = date.getUTCFullYear();
	  var milliseconds = date.getUTCMilliseconds();
	  var sign = year < 0 ? '-' : year > 9999 ? '+' : '';
	  return sign + padStart(abs$6(year), sign ? 6 : 4, 0) +
	    '-' + padStart(date.getUTCMonth() + 1, 2, 0) +
	    '-' + padStart(date.getUTCDate(), 2, 0) +
	    'T' + padStart(date.getUTCHours(), 2, 0) +
	    ':' + padStart(date.getUTCMinutes(), 2, 0) +
	    ':' + padStart(date.getUTCSeconds(), 2, 0) +
	    '.' + padStart(milliseconds, 3, 0) +
	    'Z';
	} : nativeDateToISOString;

	// `Date.prototype.toISOString` method
	// https://tc39.github.io/ecma262/#sec-date.prototype.toisostring
	// PhantomJS / old WebKit has a broken implementations
	_export$1({ target: 'Date', proto: true, forced: Date.prototype.toISOString !== dateToIsoString }, {
	  toISOString: dateToIsoString
	});

	var DatePrototype$1 = Date.prototype;
	var INVALID_DATE = 'Invalid Date';
	var TO_STRING$1 = 'toString';
	var nativeDateToString = DatePrototype$1[TO_STRING$1];
	var getTime$1 = DatePrototype$1.getTime;

	// `Date.prototype.toString` method
	// https://tc39.github.io/ecma262/#sec-date.prototype.tostring
	if (new Date(NaN) + '' != INVALID_DATE) {
	  redefine(DatePrototype$1, TO_STRING$1, function toString() {
	    var value = getTime$1.call(this);
	    // eslint-disable-next-line no-self-compare
	    return value === value ? nativeDateToString.call(this) : INVALID_DATE;
	  });
	}

	var dateToPrimitive = function (hint) {
	  if (hint !== 'string' && hint !== 'number' && hint !== 'default') {
	    throw TypeError('Incorrect hint');
	  } return toPrimitive$1(anObject$1(this), hint !== 'number');
	};

	var TO_PRIMITIVE$1 = wellKnownSymbol$1('toPrimitive');
	var DatePrototype$2 = Date.prototype;

	// `Date.prototype[@@toPrimitive]` method
	// https://tc39.github.io/ecma262/#sec-date.prototype-@@toprimitive
	if (!(TO_PRIMITIVE$1 in DatePrototype$2)) {
	  createNonEnumerableProperty$1(DatePrototype$2, TO_PRIMITIVE$1, dateToPrimitive);
	}

	var $stringify$1 = getBuiltIn$1('JSON', 'stringify');
	var re = /[\uD800-\uDFFF]/g;
	var low = /^[\uD800-\uDBFF]$/;
	var hi = /^[\uDC00-\uDFFF]$/;

	var fix = function (match, offset, string) {
	  var prev = string.charAt(offset - 1);
	  var next = string.charAt(offset + 1);
	  if ((low.test(match) && !hi.test(next)) || (hi.test(match) && !low.test(prev))) {
	    return '\\u' + match.charCodeAt(0).toString(16);
	  } return match;
	};

	var FORCED$f = fails$1(function () {
	  return $stringify$1('\uDF06\uD834') !== '"\\udf06\\ud834"'
	    || $stringify$1('\uDEAD') !== '"\\udead"';
	});

	if ($stringify$1) {
	  // https://github.com/tc39/proposal-well-formed-stringify
	  _export$1({ target: 'JSON', stat: true, forced: FORCED$f }, {
	    // eslint-disable-next-line no-unused-vars
	    stringify: function stringify(it, replacer, space) {
	      var result = $stringify$1.apply(null, arguments);
	      return typeof result == 'string' ? result.replace(re, fix) : result;
	    }
	  });
	}

	// JSON[@@toStringTag] property
	// https://tc39.github.io/ecma262/#sec-json-@@tostringtag
	setToStringTag(global_1$1.JSON, 'JSON', true);

	var nativePromiseConstructor = global_1$1.Promise;

	var redefineAll = function (target, src, options) {
	  for (var key in src) redefine(target, key, src[key], options);
	  return target;
	};

	var anInstance = function (it, Constructor, name) {
	  if (!(it instanceof Constructor)) {
	    throw TypeError('Incorrect ' + (name ? name + ' ' : '') + 'invocation');
	  } return it;
	};

	var engineIsIos = /(iphone|ipod|ipad).*applewebkit/i.test(engineUserAgent$1);

	var location = global_1$1.location;
	var set$1 = global_1$1.setImmediate;
	var clear = global_1$1.clearImmediate;
	var process$1 = global_1$1.process;
	var MessageChannel = global_1$1.MessageChannel;
	var Dispatch = global_1$1.Dispatch;
	var counter = 0;
	var queue = {};
	var ONREADYSTATECHANGE = 'onreadystatechange';
	var defer, channel, port;

	var run = function (id) {
	  // eslint-disable-next-line no-prototype-builtins
	  if (queue.hasOwnProperty(id)) {
	    var fn = queue[id];
	    delete queue[id];
	    fn();
	  }
	};

	var runner = function (id) {
	  return function () {
	    run(id);
	  };
	};

	var listener = function (event) {
	  run(event.data);
	};

	var post = function (id) {
	  // old engines have not location.origin
	  global_1$1.postMessage(id + '', location.protocol + '//' + location.host);
	};

	// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
	if (!set$1 || !clear) {
	  set$1 = function setImmediate(fn) {
	    var args = [];
	    var i = 1;
	    while (arguments.length > i) args.push(arguments[i++]);
	    queue[++counter] = function () {
	      // eslint-disable-next-line no-new-func
	      (typeof fn == 'function' ? fn : Function(fn)).apply(undefined, args);
	    };
	    defer(counter);
	    return counter;
	  };
	  clear = function clearImmediate(id) {
	    delete queue[id];
	  };
	  // Node.js 0.8-
	  if (classofRaw$1(process$1) == 'process') {
	    defer = function (id) {
	      process$1.nextTick(runner(id));
	    };
	  // Sphere (JS game engine) Dispatch API
	  } else if (Dispatch && Dispatch.now) {
	    defer = function (id) {
	      Dispatch.now(runner(id));
	    };
	  // Browsers with MessageChannel, includes WebWorkers
	  // except iOS - https://github.com/zloirock/core-js/issues/624
	  } else if (MessageChannel && !engineIsIos) {
	    channel = new MessageChannel();
	    port = channel.port2;
	    channel.port1.onmessage = listener;
	    defer = functionBindContext$1(port.postMessage, port, 1);
	  // Browsers with postMessage, skip WebWorkers
	  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
	  } else if (global_1$1.addEventListener && typeof postMessage == 'function' && !global_1$1.importScripts && !fails$1(post)) {
	    defer = post;
	    global_1$1.addEventListener('message', listener, false);
	  // IE8-
	  } else if (ONREADYSTATECHANGE in documentCreateElement$1('script')) {
	    defer = function (id) {
	      html.appendChild(documentCreateElement$1('script'))[ONREADYSTATECHANGE] = function () {
	        html.removeChild(this);
	        run(id);
	      };
	    };
	  // Rest old browsers
	  } else {
	    defer = function (id) {
	      setTimeout(runner(id), 0);
	    };
	  }
	}

	var task = {
	  set: set$1,
	  clear: clear
	};

	var getOwnPropertyDescriptor$9 = objectGetOwnPropertyDescriptor$1.f;

	var macrotask = task.set;


	var MutationObserver = global_1$1.MutationObserver || global_1$1.WebKitMutationObserver;
	var process$2 = global_1$1.process;
	var Promise$1 = global_1$1.Promise;
	var IS_NODE = classofRaw$1(process$2) == 'process';
	// Node.js 11 shows ExperimentalWarning on getting `queueMicrotask`
	var queueMicrotaskDescriptor = getOwnPropertyDescriptor$9(global_1$1, 'queueMicrotask');
	var queueMicrotask = queueMicrotaskDescriptor && queueMicrotaskDescriptor.value;

	var flush, head, last, notify, toggle, node, promise, then;

	// modern engines have queueMicrotask method
	if (!queueMicrotask) {
	  flush = function () {
	    var parent, fn;
	    if (IS_NODE && (parent = process$2.domain)) parent.exit();
	    while (head) {
	      fn = head.fn;
	      head = head.next;
	      try {
	        fn();
	      } catch (error) {
	        if (head) notify();
	        else last = undefined;
	        throw error;
	      }
	    } last = undefined;
	    if (parent) parent.enter();
	  };

	  // Node.js
	  if (IS_NODE) {
	    notify = function () {
	      process$2.nextTick(flush);
	    };
	  // browsers with MutationObserver, except iOS - https://github.com/zloirock/core-js/issues/339
	  } else if (MutationObserver && !engineIsIos) {
	    toggle = true;
	    node = document.createTextNode('');
	    new MutationObserver(flush).observe(node, { characterData: true });
	    notify = function () {
	      node.data = toggle = !toggle;
	    };
	  // environments with maybe non-completely correct, but existent Promise
	  } else if (Promise$1 && Promise$1.resolve) {
	    // Promise.resolve without an argument throws an error in LG WebOS 2
	    promise = Promise$1.resolve(undefined);
	    then = promise.then;
	    notify = function () {
	      then.call(promise, flush);
	    };
	  // for other environments - macrotask based on:
	  // - setImmediate
	  // - MessageChannel
	  // - window.postMessag
	  // - onreadystatechange
	  // - setTimeout
	  } else {
	    notify = function () {
	      // strange IE + webpack dev server bug - use .call(global)
	      macrotask.call(global_1$1, flush);
	    };
	  }
	}

	var microtask = queueMicrotask || function (fn) {
	  var task = { fn: fn, next: undefined };
	  if (last) last.next = task;
	  if (!head) {
	    head = task;
	    notify();
	  } last = task;
	};

	var PromiseCapability = function (C) {
	  var resolve, reject;
	  this.promise = new C(function ($$resolve, $$reject) {
	    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
	    resolve = $$resolve;
	    reject = $$reject;
	  });
	  this.resolve = aFunction$3(resolve);
	  this.reject = aFunction$3(reject);
	};

	// 25.4.1.5 NewPromiseCapability(C)
	var f$b = function (C) {
	  return new PromiseCapability(C);
	};

	var newPromiseCapability = {
		f: f$b
	};

	var promiseResolve = function (C, x) {
	  anObject$1(C);
	  if (isObject$1(x) && x.constructor === C) return x;
	  var promiseCapability = newPromiseCapability.f(C);
	  var resolve = promiseCapability.resolve;
	  resolve(x);
	  return promiseCapability.promise;
	};

	var hostReportErrors = function (a, b) {
	  var console = global_1$1.console;
	  if (console && console.error) {
	    arguments.length === 1 ? console.error(a) : console.error(a, b);
	  }
	};

	var perform = function (exec) {
	  try {
	    return { error: false, value: exec() };
	  } catch (error) {
	    return { error: true, value: error };
	  }
	};

	var task$1 = task.set;










	var SPECIES$6 = wellKnownSymbol$1('species');
	var PROMISE = 'Promise';
	var getInternalState$5 = internalState.get;
	var setInternalState$5 = internalState.set;
	var getInternalPromiseState = internalState.getterFor(PROMISE);
	var PromiseConstructor = nativePromiseConstructor;
	var TypeError$1 = global_1$1.TypeError;
	var document$3 = global_1$1.document;
	var process$3 = global_1$1.process;
	var $fetch = getBuiltIn$1('fetch');
	var newPromiseCapability$1 = newPromiseCapability.f;
	var newGenericPromiseCapability = newPromiseCapability$1;
	var IS_NODE$1 = classofRaw$1(process$3) == 'process';
	var DISPATCH_EVENT = !!(document$3 && document$3.createEvent && global_1$1.dispatchEvent);
	var UNHANDLED_REJECTION = 'unhandledrejection';
	var REJECTION_HANDLED = 'rejectionhandled';
	var PENDING = 0;
	var FULFILLED = 1;
	var REJECTED = 2;
	var HANDLED = 1;
	var UNHANDLED = 2;
	var Internal, OwnPromiseCapability, PromiseWrapper, nativeThen;

	var FORCED$g = isForced_1$1(PROMISE, function () {
	  var GLOBAL_CORE_JS_PROMISE = inspectSource(PromiseConstructor) !== String(PromiseConstructor);
	  if (!GLOBAL_CORE_JS_PROMISE) {
	    // V8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables
	    // https://bugs.chromium.org/p/chromium/issues/detail?id=830565
	    // We can't detect it synchronously, so just check versions
	    if (engineV8Version === 66) return true;
	    // Unhandled rejections tracking support, NodeJS Promise without it fails @@species test
	    if (!IS_NODE$1 && typeof PromiseRejectionEvent != 'function') return true;
	  }
	  // We can't use @@species feature detection in V8 since it causes
	  // deoptimization and performance degradation
	  // https://github.com/zloirock/core-js/issues/679
	  if (engineV8Version >= 51 && /native code/.test(PromiseConstructor)) return false;
	  // Detect correctness of subclassing with @@species support
	  var promise = PromiseConstructor.resolve(1);
	  var FakePromise = function (exec) {
	    exec(function () { /* empty */ }, function () { /* empty */ });
	  };
	  var constructor = promise.constructor = {};
	  constructor[SPECIES$6] = FakePromise;
	  return !(promise.then(function () { /* empty */ }) instanceof FakePromise);
	});

	var INCORRECT_ITERATION$1 = FORCED$g || !checkCorrectnessOfIteration(function (iterable) {
	  PromiseConstructor.all(iterable)['catch'](function () { /* empty */ });
	});

	// helpers
	var isThenable = function (it) {
	  var then;
	  return isObject$1(it) && typeof (then = it.then) == 'function' ? then : false;
	};

	var notify$1 = function (promise, state, isReject) {
	  if (state.notified) return;
	  state.notified = true;
	  var chain = state.reactions;
	  microtask(function () {
	    var value = state.value;
	    var ok = state.state == FULFILLED;
	    var index = 0;
	    // variable length - can't use forEach
	    while (chain.length > index) {
	      var reaction = chain[index++];
	      var handler = ok ? reaction.ok : reaction.fail;
	      var resolve = reaction.resolve;
	      var reject = reaction.reject;
	      var domain = reaction.domain;
	      var result, then, exited;
	      try {
	        if (handler) {
	          if (!ok) {
	            if (state.rejection === UNHANDLED) onHandleUnhandled(promise, state);
	            state.rejection = HANDLED;
	          }
	          if (handler === true) result = value;
	          else {
	            if (domain) domain.enter();
	            result = handler(value); // can throw
	            if (domain) {
	              domain.exit();
	              exited = true;
	            }
	          }
	          if (result === reaction.promise) {
	            reject(TypeError$1('Promise-chain cycle'));
	          } else if (then = isThenable(result)) {
	            then.call(result, resolve, reject);
	          } else resolve(result);
	        } else reject(value);
	      } catch (error) {
	        if (domain && !exited) domain.exit();
	        reject(error);
	      }
	    }
	    state.reactions = [];
	    state.notified = false;
	    if (isReject && !state.rejection) onUnhandled(promise, state);
	  });
	};

	var dispatchEvent = function (name, promise, reason) {
	  var event, handler;
	  if (DISPATCH_EVENT) {
	    event = document$3.createEvent('Event');
	    event.promise = promise;
	    event.reason = reason;
	    event.initEvent(name, false, true);
	    global_1$1.dispatchEvent(event);
	  } else event = { promise: promise, reason: reason };
	  if (handler = global_1$1['on' + name]) handler(event);
	  else if (name === UNHANDLED_REJECTION) hostReportErrors('Unhandled promise rejection', reason);
	};

	var onUnhandled = function (promise, state) {
	  task$1.call(global_1$1, function () {
	    var value = state.value;
	    var IS_UNHANDLED = isUnhandled(state);
	    var result;
	    if (IS_UNHANDLED) {
	      result = perform(function () {
	        if (IS_NODE$1) {
	          process$3.emit('unhandledRejection', value, promise);
	        } else dispatchEvent(UNHANDLED_REJECTION, promise, value);
	      });
	      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
	      state.rejection = IS_NODE$1 || isUnhandled(state) ? UNHANDLED : HANDLED;
	      if (result.error) throw result.value;
	    }
	  });
	};

	var isUnhandled = function (state) {
	  return state.rejection !== HANDLED && !state.parent;
	};

	var onHandleUnhandled = function (promise, state) {
	  task$1.call(global_1$1, function () {
	    if (IS_NODE$1) {
	      process$3.emit('rejectionHandled', promise);
	    } else dispatchEvent(REJECTION_HANDLED, promise, state.value);
	  });
	};

	var bind = function (fn, promise, state, unwrap) {
	  return function (value) {
	    fn(promise, state, value, unwrap);
	  };
	};

	var internalReject = function (promise, state, value, unwrap) {
	  if (state.done) return;
	  state.done = true;
	  if (unwrap) state = unwrap;
	  state.value = value;
	  state.state = REJECTED;
	  notify$1(promise, state, true);
	};

	var internalResolve = function (promise, state, value, unwrap) {
	  if (state.done) return;
	  state.done = true;
	  if (unwrap) state = unwrap;
	  try {
	    if (promise === value) throw TypeError$1("Promise can't be resolved itself");
	    var then = isThenable(value);
	    if (then) {
	      microtask(function () {
	        var wrapper = { done: false };
	        try {
	          then.call(value,
	            bind(internalResolve, promise, wrapper, state),
	            bind(internalReject, promise, wrapper, state)
	          );
	        } catch (error) {
	          internalReject(promise, wrapper, error, state);
	        }
	      });
	    } else {
	      state.value = value;
	      state.state = FULFILLED;
	      notify$1(promise, state, false);
	    }
	  } catch (error) {
	    internalReject(promise, { done: false }, error, state);
	  }
	};

	// constructor polyfill
	if (FORCED$g) {
	  // 25.4.3.1 Promise(executor)
	  PromiseConstructor = function Promise(executor) {
	    anInstance(this, PromiseConstructor, PROMISE);
	    aFunction$3(executor);
	    Internal.call(this);
	    var state = getInternalState$5(this);
	    try {
	      executor(bind(internalResolve, this, state), bind(internalReject, this, state));
	    } catch (error) {
	      internalReject(this, state, error);
	    }
	  };
	  // eslint-disable-next-line no-unused-vars
	  Internal = function Promise(executor) {
	    setInternalState$5(this, {
	      type: PROMISE,
	      done: false,
	      notified: false,
	      parent: false,
	      reactions: [],
	      rejection: false,
	      state: PENDING,
	      value: undefined
	    });
	  };
	  Internal.prototype = redefineAll(PromiseConstructor.prototype, {
	    // `Promise.prototype.then` method
	    // https://tc39.github.io/ecma262/#sec-promise.prototype.then
	    then: function then(onFulfilled, onRejected) {
	      var state = getInternalPromiseState(this);
	      var reaction = newPromiseCapability$1(speciesConstructor(this, PromiseConstructor));
	      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
	      reaction.fail = typeof onRejected == 'function' && onRejected;
	      reaction.domain = IS_NODE$1 ? process$3.domain : undefined;
	      state.parent = true;
	      state.reactions.push(reaction);
	      if (state.state != PENDING) notify$1(this, state, false);
	      return reaction.promise;
	    },
	    // `Promise.prototype.catch` method
	    // https://tc39.github.io/ecma262/#sec-promise.prototype.catch
	    'catch': function (onRejected) {
	      return this.then(undefined, onRejected);
	    }
	  });
	  OwnPromiseCapability = function () {
	    var promise = new Internal();
	    var state = getInternalState$5(promise);
	    this.promise = promise;
	    this.resolve = bind(internalResolve, promise, state);
	    this.reject = bind(internalReject, promise, state);
	  };
	  newPromiseCapability.f = newPromiseCapability$1 = function (C) {
	    return C === PromiseConstructor || C === PromiseWrapper
	      ? new OwnPromiseCapability(C)
	      : newGenericPromiseCapability(C);
	  };

	  if (typeof nativePromiseConstructor == 'function') {
	    nativeThen = nativePromiseConstructor.prototype.then;

	    // wrap native Promise#then for native async functions
	    redefine(nativePromiseConstructor.prototype, 'then', function then(onFulfilled, onRejected) {
	      var that = this;
	      return new PromiseConstructor(function (resolve, reject) {
	        nativeThen.call(that, resolve, reject);
	      }).then(onFulfilled, onRejected);
	    // https://github.com/zloirock/core-js/issues/640
	    }, { unsafe: true });

	    // wrap fetch result
	    if (typeof $fetch == 'function') _export$1({ global: true, enumerable: true, forced: true }, {
	      // eslint-disable-next-line no-unused-vars
	      fetch: function fetch(input /* , init */) {
	        return promiseResolve(PromiseConstructor, $fetch.apply(global_1$1, arguments));
	      }
	    });
	  }
	}

	_export$1({ global: true, wrap: true, forced: FORCED$g }, {
	  Promise: PromiseConstructor
	});

	setToStringTag(PromiseConstructor, PROMISE, false, true);
	setSpecies(PROMISE);

	PromiseWrapper = getBuiltIn$1(PROMISE);

	// statics
	_export$1({ target: PROMISE, stat: true, forced: FORCED$g }, {
	  // `Promise.reject` method
	  // https://tc39.github.io/ecma262/#sec-promise.reject
	  reject: function reject(r) {
	    var capability = newPromiseCapability$1(this);
	    capability.reject.call(undefined, r);
	    return capability.promise;
	  }
	});

	_export$1({ target: PROMISE, stat: true, forced: FORCED$g }, {
	  // `Promise.resolve` method
	  // https://tc39.github.io/ecma262/#sec-promise.resolve
	  resolve: function resolve(x) {
	    return promiseResolve(this, x);
	  }
	});

	_export$1({ target: PROMISE, stat: true, forced: INCORRECT_ITERATION$1 }, {
	  // `Promise.all` method
	  // https://tc39.github.io/ecma262/#sec-promise.all
	  all: function all(iterable) {
	    var C = this;
	    var capability = newPromiseCapability$1(C);
	    var resolve = capability.resolve;
	    var reject = capability.reject;
	    var result = perform(function () {
	      var $promiseResolve = aFunction$3(C.resolve);
	      var values = [];
	      var counter = 0;
	      var remaining = 1;
	      iterate_1(iterable, function (promise) {
	        var index = counter++;
	        var alreadyCalled = false;
	        values.push(undefined);
	        remaining++;
	        $promiseResolve.call(C, promise).then(function (value) {
	          if (alreadyCalled) return;
	          alreadyCalled = true;
	          values[index] = value;
	          --remaining || resolve(values);
	        }, reject);
	      });
	      --remaining || resolve(values);
	    });
	    if (result.error) reject(result.value);
	    return capability.promise;
	  },
	  // `Promise.race` method
	  // https://tc39.github.io/ecma262/#sec-promise.race
	  race: function race(iterable) {
	    var C = this;
	    var capability = newPromiseCapability$1(C);
	    var reject = capability.reject;
	    var result = perform(function () {
	      var $promiseResolve = aFunction$3(C.resolve);
	      iterate_1(iterable, function (promise) {
	        $promiseResolve.call(C, promise).then(capability.resolve, reject);
	      });
	    });
	    if (result.error) reject(result.value);
	    return capability.promise;
	  }
	});

	// `Promise.allSettled` method
	// https://github.com/tc39/proposal-promise-allSettled
	_export$1({ target: 'Promise', stat: true }, {
	  allSettled: function allSettled(iterable) {
	    var C = this;
	    var capability = newPromiseCapability.f(C);
	    var resolve = capability.resolve;
	    var reject = capability.reject;
	    var result = perform(function () {
	      var promiseResolve = aFunction$3(C.resolve);
	      var values = [];
	      var counter = 0;
	      var remaining = 1;
	      iterate_1(iterable, function (promise) {
	        var index = counter++;
	        var alreadyCalled = false;
	        values.push(undefined);
	        remaining++;
	        promiseResolve.call(C, promise).then(function (value) {
	          if (alreadyCalled) return;
	          alreadyCalled = true;
	          values[index] = { status: 'fulfilled', value: value };
	          --remaining || resolve(values);
	        }, function (e) {
	          if (alreadyCalled) return;
	          alreadyCalled = true;
	          values[index] = { status: 'rejected', reason: e };
	          --remaining || resolve(values);
	        });
	      });
	      --remaining || resolve(values);
	    });
	    if (result.error) reject(result.value);
	    return capability.promise;
	  }
	});

	// Safari bug https://bugs.webkit.org/show_bug.cgi?id=200829
	var NON_GENERIC = !!nativePromiseConstructor && fails$1(function () {
	  nativePromiseConstructor.prototype['finally'].call({ then: function () { /* empty */ } }, function () { /* empty */ });
	});

	// `Promise.prototype.finally` method
	// https://tc39.github.io/ecma262/#sec-promise.prototype.finally
	_export$1({ target: 'Promise', proto: true, real: true, forced: NON_GENERIC }, {
	  'finally': function (onFinally) {
	    var C = speciesConstructor(this, getBuiltIn$1('Promise'));
	    var isFunction = typeof onFinally == 'function';
	    return this.then(
	      isFunction ? function (x) {
	        return promiseResolve(C, onFinally()).then(function () { return x; });
	      } : onFinally,
	      isFunction ? function (e) {
	        return promiseResolve(C, onFinally()).then(function () { throw e; });
	      } : onFinally
	    );
	  }
	});

	// patch native Promise.prototype for native async functions
	if (typeof nativePromiseConstructor == 'function' && !nativePromiseConstructor.prototype['finally']) {
	  redefine(nativePromiseConstructor.prototype, 'finally', getBuiltIn$1('Promise').prototype['finally']);
	}

	var collection = function (CONSTRUCTOR_NAME, wrapper, common) {
	  var IS_MAP = CONSTRUCTOR_NAME.indexOf('Map') !== -1;
	  var IS_WEAK = CONSTRUCTOR_NAME.indexOf('Weak') !== -1;
	  var ADDER = IS_MAP ? 'set' : 'add';
	  var NativeConstructor = global_1$1[CONSTRUCTOR_NAME];
	  var NativePrototype = NativeConstructor && NativeConstructor.prototype;
	  var Constructor = NativeConstructor;
	  var exported = {};

	  var fixMethod = function (KEY) {
	    var nativeMethod = NativePrototype[KEY];
	    redefine(NativePrototype, KEY,
	      KEY == 'add' ? function add(value) {
	        nativeMethod.call(this, value === 0 ? 0 : value);
	        return this;
	      } : KEY == 'delete' ? function (key) {
	        return IS_WEAK && !isObject$1(key) ? false : nativeMethod.call(this, key === 0 ? 0 : key);
	      } : KEY == 'get' ? function get(key) {
	        return IS_WEAK && !isObject$1(key) ? undefined : nativeMethod.call(this, key === 0 ? 0 : key);
	      } : KEY == 'has' ? function has(key) {
	        return IS_WEAK && !isObject$1(key) ? false : nativeMethod.call(this, key === 0 ? 0 : key);
	      } : function set(key, value) {
	        nativeMethod.call(this, key === 0 ? 0 : key, value);
	        return this;
	      }
	    );
	  };

	  // eslint-disable-next-line max-len
	  if (isForced_1$1(CONSTRUCTOR_NAME, typeof NativeConstructor != 'function' || !(IS_WEAK || NativePrototype.forEach && !fails$1(function () {
	    new NativeConstructor().entries().next();
	  })))) {
	    // create collection constructor
	    Constructor = common.getConstructor(wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER);
	    internalMetadata.REQUIRED = true;
	  } else if (isForced_1$1(CONSTRUCTOR_NAME, true)) {
	    var instance = new Constructor();
	    // early implementations not supports chaining
	    var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance;
	    // V8 ~ Chromium 40- weak-collections throws on primitives, but should return false
	    var THROWS_ON_PRIMITIVES = fails$1(function () { instance.has(1); });
	    // most early implementations doesn't supports iterables, most modern - not close it correctly
	    // eslint-disable-next-line no-new
	    var ACCEPT_ITERABLES = checkCorrectnessOfIteration(function (iterable) { new NativeConstructor(iterable); });
	    // for early implementations -0 and +0 not the same
	    var BUGGY_ZERO = !IS_WEAK && fails$1(function () {
	      // V8 ~ Chromium 42- fails only with 5+ elements
	      var $instance = new NativeConstructor();
	      var index = 5;
	      while (index--) $instance[ADDER](index, index);
	      return !$instance.has(-0);
	    });

	    if (!ACCEPT_ITERABLES) {
	      Constructor = wrapper(function (dummy, iterable) {
	        anInstance(dummy, Constructor, CONSTRUCTOR_NAME);
	        var that = inheritIfRequired(new NativeConstructor(), dummy, Constructor);
	        if (iterable != undefined) iterate_1(iterable, that[ADDER], that, IS_MAP);
	        return that;
	      });
	      Constructor.prototype = NativePrototype;
	      NativePrototype.constructor = Constructor;
	    }

	    if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {
	      fixMethod('delete');
	      fixMethod('has');
	      IS_MAP && fixMethod('get');
	    }

	    if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER);

	    // weak collections should not contains .clear method
	    if (IS_WEAK && NativePrototype.clear) delete NativePrototype.clear;
	  }

	  exported[CONSTRUCTOR_NAME] = Constructor;
	  _export$1({ global: true, forced: Constructor != NativeConstructor }, exported);

	  setToStringTag(Constructor, CONSTRUCTOR_NAME);

	  if (!IS_WEAK) common.setStrong(Constructor, CONSTRUCTOR_NAME, IS_MAP);

	  return Constructor;
	};

	var defineProperty$b = objectDefineProperty$1.f;








	var fastKey = internalMetadata.fastKey;


	var setInternalState$6 = internalState.set;
	var internalStateGetterFor = internalState.getterFor;

	var collectionStrong = {
	  getConstructor: function (wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER) {
	    var C = wrapper(function (that, iterable) {
	      anInstance(that, C, CONSTRUCTOR_NAME);
	      setInternalState$6(that, {
	        type: CONSTRUCTOR_NAME,
	        index: objectCreate(null),
	        first: undefined,
	        last: undefined,
	        size: 0
	      });
	      if (!descriptors$1) that.size = 0;
	      if (iterable != undefined) iterate_1(iterable, that[ADDER], that, IS_MAP);
	    });

	    var getInternalState = internalStateGetterFor(CONSTRUCTOR_NAME);

	    var define = function (that, key, value) {
	      var state = getInternalState(that);
	      var entry = getEntry(that, key);
	      var previous, index;
	      // change existing entry
	      if (entry) {
	        entry.value = value;
	      // create new entry
	      } else {
	        state.last = entry = {
	          index: index = fastKey(key, true),
	          key: key,
	          value: value,
	          previous: previous = state.last,
	          next: undefined,
	          removed: false
	        };
	        if (!state.first) state.first = entry;
	        if (previous) previous.next = entry;
	        if (descriptors$1) state.size++;
	        else that.size++;
	        // add to index
	        if (index !== 'F') state.index[index] = entry;
	      } return that;
	    };

	    var getEntry = function (that, key) {
	      var state = getInternalState(that);
	      // fast case
	      var index = fastKey(key);
	      var entry;
	      if (index !== 'F') return state.index[index];
	      // frozen object case
	      for (entry = state.first; entry; entry = entry.next) {
	        if (entry.key == key) return entry;
	      }
	    };

	    redefineAll(C.prototype, {
	      // 23.1.3.1 Map.prototype.clear()
	      // 23.2.3.2 Set.prototype.clear()
	      clear: function clear() {
	        var that = this;
	        var state = getInternalState(that);
	        var data = state.index;
	        var entry = state.first;
	        while (entry) {
	          entry.removed = true;
	          if (entry.previous) entry.previous = entry.previous.next = undefined;
	          delete data[entry.index];
	          entry = entry.next;
	        }
	        state.first = state.last = undefined;
	        if (descriptors$1) state.size = 0;
	        else that.size = 0;
	      },
	      // 23.1.3.3 Map.prototype.delete(key)
	      // 23.2.3.4 Set.prototype.delete(value)
	      'delete': function (key) {
	        var that = this;
	        var state = getInternalState(that);
	        var entry = getEntry(that, key);
	        if (entry) {
	          var next = entry.next;
	          var prev = entry.previous;
	          delete state.index[entry.index];
	          entry.removed = true;
	          if (prev) prev.next = next;
	          if (next) next.previous = prev;
	          if (state.first == entry) state.first = next;
	          if (state.last == entry) state.last = prev;
	          if (descriptors$1) state.size--;
	          else that.size--;
	        } return !!entry;
	      },
	      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
	      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
	      forEach: function forEach(callbackfn /* , that = undefined */) {
	        var state = getInternalState(this);
	        var boundFunction = functionBindContext$1(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
	        var entry;
	        while (entry = entry ? entry.next : state.first) {
	          boundFunction(entry.value, entry.key, this);
	          // revert to the last existing entry
	          while (entry && entry.removed) entry = entry.previous;
	        }
	      },
	      // 23.1.3.7 Map.prototype.has(key)
	      // 23.2.3.7 Set.prototype.has(value)
	      has: function has(key) {
	        return !!getEntry(this, key);
	      }
	    });

	    redefineAll(C.prototype, IS_MAP ? {
	      // 23.1.3.6 Map.prototype.get(key)
	      get: function get(key) {
	        var entry = getEntry(this, key);
	        return entry && entry.value;
	      },
	      // 23.1.3.9 Map.prototype.set(key, value)
	      set: function set(key, value) {
	        return define(this, key === 0 ? 0 : key, value);
	      }
	    } : {
	      // 23.2.3.1 Set.prototype.add(value)
	      add: function add(value) {
	        return define(this, value = value === 0 ? 0 : value, value);
	      }
	    });
	    if (descriptors$1) defineProperty$b(C.prototype, 'size', {
	      get: function () {
	        return getInternalState(this).size;
	      }
	    });
	    return C;
	  },
	  setStrong: function (C, CONSTRUCTOR_NAME, IS_MAP) {
	    var ITERATOR_NAME = CONSTRUCTOR_NAME + ' Iterator';
	    var getInternalCollectionState = internalStateGetterFor(CONSTRUCTOR_NAME);
	    var getInternalIteratorState = internalStateGetterFor(ITERATOR_NAME);
	    // add .keys, .values, .entries, [@@iterator]
	    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
	    defineIterator(C, CONSTRUCTOR_NAME, function (iterated, kind) {
	      setInternalState$6(this, {
	        type: ITERATOR_NAME,
	        target: iterated,
	        state: getInternalCollectionState(iterated),
	        kind: kind,
	        last: undefined
	      });
	    }, function () {
	      var state = getInternalIteratorState(this);
	      var kind = state.kind;
	      var entry = state.last;
	      // revert to the last existing entry
	      while (entry && entry.removed) entry = entry.previous;
	      // get next entry
	      if (!state.target || !(state.last = entry = entry ? entry.next : state.state.first)) {
	        // or finish the iteration
	        state.target = undefined;
	        return { value: undefined, done: true };
	      }
	      // return step by kind
	      if (kind == 'keys') return { value: entry.key, done: false };
	      if (kind == 'values') return { value: entry.value, done: false };
	      return { value: [entry.key, entry.value], done: false };
	    }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);

	    // add [@@species], 23.1.2.2, 23.2.2.2
	    setSpecies(CONSTRUCTOR_NAME);
	  }
	};

	// `Map` constructor
	// https://tc39.github.io/ecma262/#sec-map-objects
	var es_map = collection('Map', function (init) {
	  return function Map() { return init(this, arguments.length ? arguments[0] : undefined); };
	}, collectionStrong);

	// `Set` constructor
	// https://tc39.github.io/ecma262/#sec-set-objects
	var es_set = collection('Set', function (init) {
	  return function Set() { return init(this, arguments.length ? arguments[0] : undefined); };
	}, collectionStrong);

	var getWeakData = internalMetadata.getWeakData;








	var setInternalState$7 = internalState.set;
	var internalStateGetterFor$1 = internalState.getterFor;
	var find = arrayIteration.find;
	var findIndex = arrayIteration.findIndex;
	var id$2 = 0;

	// fallback for uncaught frozen keys
	var uncaughtFrozenStore = function (store) {
	  return store.frozen || (store.frozen = new UncaughtFrozenStore());
	};

	var UncaughtFrozenStore = function () {
	  this.entries = [];
	};

	var findUncaughtFrozen = function (store, key) {
	  return find(store.entries, function (it) {
	    return it[0] === key;
	  });
	};

	UncaughtFrozenStore.prototype = {
	  get: function (key) {
	    var entry = findUncaughtFrozen(this, key);
	    if (entry) return entry[1];
	  },
	  has: function (key) {
	    return !!findUncaughtFrozen(this, key);
	  },
	  set: function (key, value) {
	    var entry = findUncaughtFrozen(this, key);
	    if (entry) entry[1] = value;
	    else this.entries.push([key, value]);
	  },
	  'delete': function (key) {
	    var index = findIndex(this.entries, function (it) {
	      return it[0] === key;
	    });
	    if (~index) this.entries.splice(index, 1);
	    return !!~index;
	  }
	};

	var collectionWeak = {
	  getConstructor: function (wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER) {
	    var C = wrapper(function (that, iterable) {
	      anInstance(that, C, CONSTRUCTOR_NAME);
	      setInternalState$7(that, {
	        type: CONSTRUCTOR_NAME,
	        id: id$2++,
	        frozen: undefined
	      });
	      if (iterable != undefined) iterate_1(iterable, that[ADDER], that, IS_MAP);
	    });

	    var getInternalState = internalStateGetterFor$1(CONSTRUCTOR_NAME);

	    var define = function (that, key, value) {
	      var state = getInternalState(that);
	      var data = getWeakData(anObject$1(key), true);
	      if (data === true) uncaughtFrozenStore(state).set(key, value);
	      else data[state.id] = value;
	      return that;
	    };

	    redefineAll(C.prototype, {
	      // 23.3.3.2 WeakMap.prototype.delete(key)
	      // 23.4.3.3 WeakSet.prototype.delete(value)
	      'delete': function (key) {
	        var state = getInternalState(this);
	        if (!isObject$1(key)) return false;
	        var data = getWeakData(key);
	        if (data === true) return uncaughtFrozenStore(state)['delete'](key);
	        return data && has$1(data, state.id) && delete data[state.id];
	      },
	      // 23.3.3.4 WeakMap.prototype.has(key)
	      // 23.4.3.4 WeakSet.prototype.has(value)
	      has: function has(key) {
	        var state = getInternalState(this);
	        if (!isObject$1(key)) return false;
	        var data = getWeakData(key);
	        if (data === true) return uncaughtFrozenStore(state).has(key);
	        return data && has$1(data, state.id);
	      }
	    });

	    redefineAll(C.prototype, IS_MAP ? {
	      // 23.3.3.3 WeakMap.prototype.get(key)
	      get: function get(key) {
	        var state = getInternalState(this);
	        if (isObject$1(key)) {
	          var data = getWeakData(key);
	          if (data === true) return uncaughtFrozenStore(state).get(key);
	          return data ? data[state.id] : undefined;
	        }
	      },
	      // 23.3.3.5 WeakMap.prototype.set(key, value)
	      set: function set(key, value) {
	        return define(this, key, value);
	      }
	    } : {
	      // 23.4.3.1 WeakSet.prototype.add(value)
	      add: function add(value) {
	        return define(this, value, true);
	      }
	    });

	    return C;
	  }
	};

	var es_weakMap = createCommonjsModule(function (module) {






	var enforceIternalState = internalState.enforce;


	var IS_IE11 = !global_1$1.ActiveXObject && 'ActiveXObject' in global_1$1;
	var isExtensible = Object.isExtensible;
	var InternalWeakMap;

	var wrapper = function (init) {
	  return function WeakMap() {
	    return init(this, arguments.length ? arguments[0] : undefined);
	  };
	};

	// `WeakMap` constructor
	// https://tc39.github.io/ecma262/#sec-weakmap-constructor
	var $WeakMap = module.exports = collection('WeakMap', wrapper, collectionWeak);

	// IE11 WeakMap frozen keys fix
	// We can't use feature detection because it crash some old IE builds
	// https://github.com/zloirock/core-js/issues/485
	if (nativeWeakMap && IS_IE11) {
	  InternalWeakMap = collectionWeak.getConstructor(wrapper, 'WeakMap', true);
	  internalMetadata.REQUIRED = true;
	  var WeakMapPrototype = $WeakMap.prototype;
	  var nativeDelete = WeakMapPrototype['delete'];
	  var nativeHas = WeakMapPrototype.has;
	  var nativeGet = WeakMapPrototype.get;
	  var nativeSet = WeakMapPrototype.set;
	  redefineAll(WeakMapPrototype, {
	    'delete': function (key) {
	      if (isObject$1(key) && !isExtensible(key)) {
	        var state = enforceIternalState(this);
	        if (!state.frozen) state.frozen = new InternalWeakMap();
	        return nativeDelete.call(this, key) || state.frozen['delete'](key);
	      } return nativeDelete.call(this, key);
	    },
	    has: function has(key) {
	      if (isObject$1(key) && !isExtensible(key)) {
	        var state = enforceIternalState(this);
	        if (!state.frozen) state.frozen = new InternalWeakMap();
	        return nativeHas.call(this, key) || state.frozen.has(key);
	      } return nativeHas.call(this, key);
	    },
	    get: function get(key) {
	      if (isObject$1(key) && !isExtensible(key)) {
	        var state = enforceIternalState(this);
	        if (!state.frozen) state.frozen = new InternalWeakMap();
	        return nativeHas.call(this, key) ? nativeGet.call(this, key) : state.frozen.get(key);
	      } return nativeGet.call(this, key);
	    },
	    set: function set(key, value) {
	      if (isObject$1(key) && !isExtensible(key)) {
	        var state = enforceIternalState(this);
	        if (!state.frozen) state.frozen = new InternalWeakMap();
	        nativeHas.call(this, key) ? nativeSet.call(this, key, value) : state.frozen.set(key, value);
	      } else nativeSet.call(this, key, value);
	      return this;
	    }
	  });
	}
	});

	// `WeakSet` constructor
	// https://tc39.github.io/ecma262/#sec-weakset-constructor
	collection('WeakSet', function (init) {
	  return function WeakSet() { return init(this, arguments.length ? arguments[0] : undefined); };
	}, collectionWeak);

	var arrayBufferNative = typeof ArrayBuffer !== 'undefined' && typeof DataView !== 'undefined';

	// `ToIndex` abstract operation
	// https://tc39.github.io/ecma262/#sec-toindex
	var toIndex = function (it) {
	  if (it === undefined) return 0;
	  var number = toInteger$1(it);
	  var length = toLength$1(number);
	  if (number !== length) throw RangeError('Wrong length or index');
	  return length;
	};

	// IEEE754 conversions based on https://github.com/feross/ieee754
	// eslint-disable-next-line no-shadow-restricted-names
	var Infinity$1 = 1 / 0;
	var abs$7 = Math.abs;
	var pow$3 = Math.pow;
	var floor$7 = Math.floor;
	var log$8 = Math.log;
	var LN2$2 = Math.LN2;

	var pack = function (number, mantissaLength, bytes) {
	  var buffer = new Array(bytes);
	  var exponentLength = bytes * 8 - mantissaLength - 1;
	  var eMax = (1 << exponentLength) - 1;
	  var eBias = eMax >> 1;
	  var rt = mantissaLength === 23 ? pow$3(2, -24) - pow$3(2, -77) : 0;
	  var sign = number < 0 || number === 0 && 1 / number < 0 ? 1 : 0;
	  var index = 0;
	  var exponent, mantissa, c;
	  number = abs$7(number);
	  // eslint-disable-next-line no-self-compare
	  if (number != number || number === Infinity$1) {
	    // eslint-disable-next-line no-self-compare
	    mantissa = number != number ? 1 : 0;
	    exponent = eMax;
	  } else {
	    exponent = floor$7(log$8(number) / LN2$2);
	    if (number * (c = pow$3(2, -exponent)) < 1) {
	      exponent--;
	      c *= 2;
	    }
	    if (exponent + eBias >= 1) {
	      number += rt / c;
	    } else {
	      number += rt * pow$3(2, 1 - eBias);
	    }
	    if (number * c >= 2) {
	      exponent++;
	      c /= 2;
	    }
	    if (exponent + eBias >= eMax) {
	      mantissa = 0;
	      exponent = eMax;
	    } else if (exponent + eBias >= 1) {
	      mantissa = (number * c - 1) * pow$3(2, mantissaLength);
	      exponent = exponent + eBias;
	    } else {
	      mantissa = number * pow$3(2, eBias - 1) * pow$3(2, mantissaLength);
	      exponent = 0;
	    }
	  }
	  for (; mantissaLength >= 8; buffer[index++] = mantissa & 255, mantissa /= 256, mantissaLength -= 8);
	  exponent = exponent << mantissaLength | mantissa;
	  exponentLength += mantissaLength;
	  for (; exponentLength > 0; buffer[index++] = exponent & 255, exponent /= 256, exponentLength -= 8);
	  buffer[--index] |= sign * 128;
	  return buffer;
	};

	var unpack = function (buffer, mantissaLength) {
	  var bytes = buffer.length;
	  var exponentLength = bytes * 8 - mantissaLength - 1;
	  var eMax = (1 << exponentLength) - 1;
	  var eBias = eMax >> 1;
	  var nBits = exponentLength - 7;
	  var index = bytes - 1;
	  var sign = buffer[index--];
	  var exponent = sign & 127;
	  var mantissa;
	  sign >>= 7;
	  for (; nBits > 0; exponent = exponent * 256 + buffer[index], index--, nBits -= 8);
	  mantissa = exponent & (1 << -nBits) - 1;
	  exponent >>= -nBits;
	  nBits += mantissaLength;
	  for (; nBits > 0; mantissa = mantissa * 256 + buffer[index], index--, nBits -= 8);
	  if (exponent === 0) {
	    exponent = 1 - eBias;
	  } else if (exponent === eMax) {
	    return mantissa ? NaN : sign ? -Infinity$1 : Infinity$1;
	  } else {
	    mantissa = mantissa + pow$3(2, mantissaLength);
	    exponent = exponent - eBias;
	  } return (sign ? -1 : 1) * mantissa * pow$3(2, exponent - mantissaLength);
	};

	var ieee754 = {
	  pack: pack,
	  unpack: unpack
	};

	var getOwnPropertyNames$2 = objectGetOwnPropertyNames.f;
	var defineProperty$c = objectDefineProperty$1.f;




	var getInternalState$6 = internalState.get;
	var setInternalState$8 = internalState.set;
	var ARRAY_BUFFER = 'ArrayBuffer';
	var DATA_VIEW = 'DataView';
	var PROTOTYPE$2 = 'prototype';
	var WRONG_LENGTH = 'Wrong length';
	var WRONG_INDEX = 'Wrong index';
	var NativeArrayBuffer = global_1$1[ARRAY_BUFFER];
	var $ArrayBuffer = NativeArrayBuffer;
	var $DataView = global_1$1[DATA_VIEW];
	var $DataViewPrototype = $DataView && $DataView[PROTOTYPE$2];
	var ObjectPrototype$2 = Object.prototype;
	var RangeError$1 = global_1$1.RangeError;

	var packIEEE754 = ieee754.pack;
	var unpackIEEE754 = ieee754.unpack;

	var packInt8 = function (number) {
	  return [number & 0xFF];
	};

	var packInt16 = function (number) {
	  return [number & 0xFF, number >> 8 & 0xFF];
	};

	var packInt32 = function (number) {
	  return [number & 0xFF, number >> 8 & 0xFF, number >> 16 & 0xFF, number >> 24 & 0xFF];
	};

	var unpackInt32 = function (buffer) {
	  return buffer[3] << 24 | buffer[2] << 16 | buffer[1] << 8 | buffer[0];
	};

	var packFloat32 = function (number) {
	  return packIEEE754(number, 23, 4);
	};

	var packFloat64 = function (number) {
	  return packIEEE754(number, 52, 8);
	};

	var addGetter = function (Constructor, key) {
	  defineProperty$c(Constructor[PROTOTYPE$2], key, { get: function () { return getInternalState$6(this)[key]; } });
	};

	var get$1 = function (view, count, index, isLittleEndian) {
	  var intIndex = toIndex(index);
	  var store = getInternalState$6(view);
	  if (intIndex + count > store.byteLength) throw RangeError$1(WRONG_INDEX);
	  var bytes = getInternalState$6(store.buffer).bytes;
	  var start = intIndex + store.byteOffset;
	  var pack = bytes.slice(start, start + count);
	  return isLittleEndian ? pack : pack.reverse();
	};

	var set$2 = function (view, count, index, conversion, value, isLittleEndian) {
	  var intIndex = toIndex(index);
	  var store = getInternalState$6(view);
	  if (intIndex + count > store.byteLength) throw RangeError$1(WRONG_INDEX);
	  var bytes = getInternalState$6(store.buffer).bytes;
	  var start = intIndex + store.byteOffset;
	  var pack = conversion(+value);
	  for (var i = 0; i < count; i++) bytes[start + i] = pack[isLittleEndian ? i : count - i - 1];
	};

	if (!arrayBufferNative) {
	  $ArrayBuffer = function ArrayBuffer(length) {
	    anInstance(this, $ArrayBuffer, ARRAY_BUFFER);
	    var byteLength = toIndex(length);
	    setInternalState$8(this, {
	      bytes: arrayFill.call(new Array(byteLength), 0),
	      byteLength: byteLength
	    });
	    if (!descriptors$1) this.byteLength = byteLength;
	  };

	  $DataView = function DataView(buffer, byteOffset, byteLength) {
	    anInstance(this, $DataView, DATA_VIEW);
	    anInstance(buffer, $ArrayBuffer, DATA_VIEW);
	    var bufferLength = getInternalState$6(buffer).byteLength;
	    var offset = toInteger$1(byteOffset);
	    if (offset < 0 || offset > bufferLength) throw RangeError$1('Wrong offset');
	    byteLength = byteLength === undefined ? bufferLength - offset : toLength$1(byteLength);
	    if (offset + byteLength > bufferLength) throw RangeError$1(WRONG_LENGTH);
	    setInternalState$8(this, {
	      buffer: buffer,
	      byteLength: byteLength,
	      byteOffset: offset
	    });
	    if (!descriptors$1) {
	      this.buffer = buffer;
	      this.byteLength = byteLength;
	      this.byteOffset = offset;
	    }
	  };

	  if (descriptors$1) {
	    addGetter($ArrayBuffer, 'byteLength');
	    addGetter($DataView, 'buffer');
	    addGetter($DataView, 'byteLength');
	    addGetter($DataView, 'byteOffset');
	  }

	  redefineAll($DataView[PROTOTYPE$2], {
	    getInt8: function getInt8(byteOffset) {
	      return get$1(this, 1, byteOffset)[0] << 24 >> 24;
	    },
	    getUint8: function getUint8(byteOffset) {
	      return get$1(this, 1, byteOffset)[0];
	    },
	    getInt16: function getInt16(byteOffset /* , littleEndian */) {
	      var bytes = get$1(this, 2, byteOffset, arguments.length > 1 ? arguments[1] : undefined);
	      return (bytes[1] << 8 | bytes[0]) << 16 >> 16;
	    },
	    getUint16: function getUint16(byteOffset /* , littleEndian */) {
	      var bytes = get$1(this, 2, byteOffset, arguments.length > 1 ? arguments[1] : undefined);
	      return bytes[1] << 8 | bytes[0];
	    },
	    getInt32: function getInt32(byteOffset /* , littleEndian */) {
	      return unpackInt32(get$1(this, 4, byteOffset, arguments.length > 1 ? arguments[1] : undefined));
	    },
	    getUint32: function getUint32(byteOffset /* , littleEndian */) {
	      return unpackInt32(get$1(this, 4, byteOffset, arguments.length > 1 ? arguments[1] : undefined)) >>> 0;
	    },
	    getFloat32: function getFloat32(byteOffset /* , littleEndian */) {
	      return unpackIEEE754(get$1(this, 4, byteOffset, arguments.length > 1 ? arguments[1] : undefined), 23);
	    },
	    getFloat64: function getFloat64(byteOffset /* , littleEndian */) {
	      return unpackIEEE754(get$1(this, 8, byteOffset, arguments.length > 1 ? arguments[1] : undefined), 52);
	    },
	    setInt8: function setInt8(byteOffset, value) {
	      set$2(this, 1, byteOffset, packInt8, value);
	    },
	    setUint8: function setUint8(byteOffset, value) {
	      set$2(this, 1, byteOffset, packInt8, value);
	    },
	    setInt16: function setInt16(byteOffset, value /* , littleEndian */) {
	      set$2(this, 2, byteOffset, packInt16, value, arguments.length > 2 ? arguments[2] : undefined);
	    },
	    setUint16: function setUint16(byteOffset, value /* , littleEndian */) {
	      set$2(this, 2, byteOffset, packInt16, value, arguments.length > 2 ? arguments[2] : undefined);
	    },
	    setInt32: function setInt32(byteOffset, value /* , littleEndian */) {
	      set$2(this, 4, byteOffset, packInt32, value, arguments.length > 2 ? arguments[2] : undefined);
	    },
	    setUint32: function setUint32(byteOffset, value /* , littleEndian */) {
	      set$2(this, 4, byteOffset, packInt32, value, arguments.length > 2 ? arguments[2] : undefined);
	    },
	    setFloat32: function setFloat32(byteOffset, value /* , littleEndian */) {
	      set$2(this, 4, byteOffset, packFloat32, value, arguments.length > 2 ? arguments[2] : undefined);
	    },
	    setFloat64: function setFloat64(byteOffset, value /* , littleEndian */) {
	      set$2(this, 8, byteOffset, packFloat64, value, arguments.length > 2 ? arguments[2] : undefined);
	    }
	  });
	} else {
	  if (!fails$1(function () {
	    NativeArrayBuffer(1);
	  }) || !fails$1(function () {
	    new NativeArrayBuffer(-1); // eslint-disable-line no-new
	  }) || fails$1(function () {
	    new NativeArrayBuffer(); // eslint-disable-line no-new
	    new NativeArrayBuffer(1.5); // eslint-disable-line no-new
	    new NativeArrayBuffer(NaN); // eslint-disable-line no-new
	    return NativeArrayBuffer.name != ARRAY_BUFFER;
	  })) {
	    $ArrayBuffer = function ArrayBuffer(length) {
	      anInstance(this, $ArrayBuffer);
	      return new NativeArrayBuffer(toIndex(length));
	    };
	    var ArrayBufferPrototype = $ArrayBuffer[PROTOTYPE$2] = NativeArrayBuffer[PROTOTYPE$2];
	    for (var keys$3 = getOwnPropertyNames$2(NativeArrayBuffer), j$1 = 0, key$1; keys$3.length > j$1;) {
	      if (!((key$1 = keys$3[j$1++]) in $ArrayBuffer)) {
	        createNonEnumerableProperty$1($ArrayBuffer, key$1, NativeArrayBuffer[key$1]);
	      }
	    }
	    ArrayBufferPrototype.constructor = $ArrayBuffer;
	  }

	  // WebKit bug - the same parent prototype for typed arrays and data view
	  if (objectSetPrototypeOf && objectGetPrototypeOf($DataViewPrototype) !== ObjectPrototype$2) {
	    objectSetPrototypeOf($DataViewPrototype, ObjectPrototype$2);
	  }

	  // iOS Safari 7.x bug
	  var testView = new $DataView(new $ArrayBuffer(2));
	  var nativeSetInt8 = $DataViewPrototype.setInt8;
	  testView.setInt8(0, 2147483648);
	  testView.setInt8(1, 2147483649);
	  if (testView.getInt8(0) || !testView.getInt8(1)) redefineAll($DataViewPrototype, {
	    setInt8: function setInt8(byteOffset, value) {
	      nativeSetInt8.call(this, byteOffset, value << 24 >> 24);
	    },
	    setUint8: function setUint8(byteOffset, value) {
	      nativeSetInt8.call(this, byteOffset, value << 24 >> 24);
	    }
	  }, { unsafe: true });
	}

	setToStringTag($ArrayBuffer, ARRAY_BUFFER);
	setToStringTag($DataView, DATA_VIEW);

	var arrayBuffer = {
	  ArrayBuffer: $ArrayBuffer,
	  DataView: $DataView
	};

	var ARRAY_BUFFER$1 = 'ArrayBuffer';
	var ArrayBuffer$1 = arrayBuffer[ARRAY_BUFFER$1];
	var NativeArrayBuffer$1 = global_1$1[ARRAY_BUFFER$1];

	// `ArrayBuffer` constructor
	// https://tc39.github.io/ecma262/#sec-arraybuffer-constructor
	_export$1({ global: true, forced: NativeArrayBuffer$1 !== ArrayBuffer$1 }, {
	  ArrayBuffer: ArrayBuffer$1
	});

	setSpecies(ARRAY_BUFFER$1);

	var defineProperty$d = objectDefineProperty$1.f;





	var Int8Array$1 = global_1$1.Int8Array;
	var Int8ArrayPrototype = Int8Array$1 && Int8Array$1.prototype;
	var Uint8ClampedArray = global_1$1.Uint8ClampedArray;
	var Uint8ClampedArrayPrototype = Uint8ClampedArray && Uint8ClampedArray.prototype;
	var TypedArray = Int8Array$1 && objectGetPrototypeOf(Int8Array$1);
	var TypedArrayPrototype = Int8ArrayPrototype && objectGetPrototypeOf(Int8ArrayPrototype);
	var ObjectPrototype$3 = Object.prototype;
	var isPrototypeOf = ObjectPrototype$3.isPrototypeOf;

	var TO_STRING_TAG$3 = wellKnownSymbol$1('toStringTag');
	var TYPED_ARRAY_TAG = uid$1('TYPED_ARRAY_TAG');
	// Fixing native typed arrays in Opera Presto crashes the browser, see #595
	var NATIVE_ARRAY_BUFFER_VIEWS = arrayBufferNative && !!objectSetPrototypeOf && classof(global_1$1.opera) !== 'Opera';
	var TYPED_ARRAY_TAG_REQIRED = false;
	var NAME$1;

	var TypedArrayConstructorsList = {
	  Int8Array: 1,
	  Uint8Array: 1,
	  Uint8ClampedArray: 1,
	  Int16Array: 2,
	  Uint16Array: 2,
	  Int32Array: 4,
	  Uint32Array: 4,
	  Float32Array: 4,
	  Float64Array: 8
	};

	var isView = function isView(it) {
	  var klass = classof(it);
	  return klass === 'DataView' || has$1(TypedArrayConstructorsList, klass);
	};

	var isTypedArray = function (it) {
	  return isObject$1(it) && has$1(TypedArrayConstructorsList, classof(it));
	};

	var aTypedArray = function (it) {
	  if (isTypedArray(it)) return it;
	  throw TypeError('Target is not a typed array');
	};

	var aTypedArrayConstructor = function (C) {
	  if (objectSetPrototypeOf) {
	    if (isPrototypeOf.call(TypedArray, C)) return C;
	  } else for (var ARRAY in TypedArrayConstructorsList) if (has$1(TypedArrayConstructorsList, NAME$1)) {
	    var TypedArrayConstructor = global_1$1[ARRAY];
	    if (TypedArrayConstructor && (C === TypedArrayConstructor || isPrototypeOf.call(TypedArrayConstructor, C))) {
	      return C;
	    }
	  } throw TypeError('Target is not a typed array constructor');
	};

	var exportTypedArrayMethod = function (KEY, property, forced) {
	  if (!descriptors$1) return;
	  if (forced) for (var ARRAY in TypedArrayConstructorsList) {
	    var TypedArrayConstructor = global_1$1[ARRAY];
	    if (TypedArrayConstructor && has$1(TypedArrayConstructor.prototype, KEY)) {
	      delete TypedArrayConstructor.prototype[KEY];
	    }
	  }
	  if (!TypedArrayPrototype[KEY] || forced) {
	    redefine(TypedArrayPrototype, KEY, forced ? property
	      : NATIVE_ARRAY_BUFFER_VIEWS && Int8ArrayPrototype[KEY] || property);
	  }
	};

	var exportTypedArrayStaticMethod = function (KEY, property, forced) {
	  var ARRAY, TypedArrayConstructor;
	  if (!descriptors$1) return;
	  if (objectSetPrototypeOf) {
	    if (forced) for (ARRAY in TypedArrayConstructorsList) {
	      TypedArrayConstructor = global_1$1[ARRAY];
	      if (TypedArrayConstructor && has$1(TypedArrayConstructor, KEY)) {
	        delete TypedArrayConstructor[KEY];
	      }
	    }
	    if (!TypedArray[KEY] || forced) {
	      // V8 ~ Chrome 49-50 `%TypedArray%` methods are non-writable non-configurable
	      try {
	        return redefine(TypedArray, KEY, forced ? property : NATIVE_ARRAY_BUFFER_VIEWS && Int8Array$1[KEY] || property);
	      } catch (error) { /* empty */ }
	    } else return;
	  }
	  for (ARRAY in TypedArrayConstructorsList) {
	    TypedArrayConstructor = global_1$1[ARRAY];
	    if (TypedArrayConstructor && (!TypedArrayConstructor[KEY] || forced)) {
	      redefine(TypedArrayConstructor, KEY, property);
	    }
	  }
	};

	for (NAME$1 in TypedArrayConstructorsList) {
	  if (!global_1$1[NAME$1]) NATIVE_ARRAY_BUFFER_VIEWS = false;
	}

	// WebKit bug - typed arrays constructors prototype is Object.prototype
	if (!NATIVE_ARRAY_BUFFER_VIEWS || typeof TypedArray != 'function' || TypedArray === Function.prototype) {
	  // eslint-disable-next-line no-shadow
	  TypedArray = function TypedArray() {
	    throw TypeError('Incorrect invocation');
	  };
	  if (NATIVE_ARRAY_BUFFER_VIEWS) for (NAME$1 in TypedArrayConstructorsList) {
	    if (global_1$1[NAME$1]) objectSetPrototypeOf(global_1$1[NAME$1], TypedArray);
	  }
	}

	if (!NATIVE_ARRAY_BUFFER_VIEWS || !TypedArrayPrototype || TypedArrayPrototype === ObjectPrototype$3) {
	  TypedArrayPrototype = TypedArray.prototype;
	  if (NATIVE_ARRAY_BUFFER_VIEWS) for (NAME$1 in TypedArrayConstructorsList) {
	    if (global_1$1[NAME$1]) objectSetPrototypeOf(global_1$1[NAME$1].prototype, TypedArrayPrototype);
	  }
	}

	// WebKit bug - one more object in Uint8ClampedArray prototype chain
	if (NATIVE_ARRAY_BUFFER_VIEWS && objectGetPrototypeOf(Uint8ClampedArrayPrototype) !== TypedArrayPrototype) {
	  objectSetPrototypeOf(Uint8ClampedArrayPrototype, TypedArrayPrototype);
	}

	if (descriptors$1 && !has$1(TypedArrayPrototype, TO_STRING_TAG$3)) {
	  TYPED_ARRAY_TAG_REQIRED = true;
	  defineProperty$d(TypedArrayPrototype, TO_STRING_TAG$3, { get: function () {
	    return isObject$1(this) ? this[TYPED_ARRAY_TAG] : undefined;
	  } });
	  for (NAME$1 in TypedArrayConstructorsList) if (global_1$1[NAME$1]) {
	    createNonEnumerableProperty$1(global_1$1[NAME$1], TYPED_ARRAY_TAG, NAME$1);
	  }
	}

	var arrayBufferViewCore = {
	  NATIVE_ARRAY_BUFFER_VIEWS: NATIVE_ARRAY_BUFFER_VIEWS,
	  TYPED_ARRAY_TAG: TYPED_ARRAY_TAG_REQIRED && TYPED_ARRAY_TAG,
	  aTypedArray: aTypedArray,
	  aTypedArrayConstructor: aTypedArrayConstructor,
	  exportTypedArrayMethod: exportTypedArrayMethod,
	  exportTypedArrayStaticMethod: exportTypedArrayStaticMethod,
	  isView: isView,
	  isTypedArray: isTypedArray,
	  TypedArray: TypedArray,
	  TypedArrayPrototype: TypedArrayPrototype
	};

	var NATIVE_ARRAY_BUFFER_VIEWS$1 = arrayBufferViewCore.NATIVE_ARRAY_BUFFER_VIEWS;

	// `ArrayBuffer.isView` method
	// https://tc39.github.io/ecma262/#sec-arraybuffer.isview
	_export$1({ target: 'ArrayBuffer', stat: true, forced: !NATIVE_ARRAY_BUFFER_VIEWS$1 }, {
	  isView: arrayBufferViewCore.isView
	});

	var ArrayBuffer$2 = arrayBuffer.ArrayBuffer;
	var DataView$1 = arrayBuffer.DataView;
	var nativeArrayBufferSlice = ArrayBuffer$2.prototype.slice;

	var INCORRECT_SLICE = fails$1(function () {
	  return !new ArrayBuffer$2(2).slice(1, undefined).byteLength;
	});

	// `ArrayBuffer.prototype.slice` method
	// https://tc39.github.io/ecma262/#sec-arraybuffer.prototype.slice
	_export$1({ target: 'ArrayBuffer', proto: true, unsafe: true, forced: INCORRECT_SLICE }, {
	  slice: function slice(start, end) {
	    if (nativeArrayBufferSlice !== undefined && end === undefined) {
	      return nativeArrayBufferSlice.call(anObject$1(this), start); // FF fix
	    }
	    var length = anObject$1(this).byteLength;
	    var first = toAbsoluteIndex$1(start, length);
	    var fin = toAbsoluteIndex$1(end === undefined ? length : end, length);
	    var result = new (speciesConstructor(this, ArrayBuffer$2))(toLength$1(fin - first));
	    var viewSource = new DataView$1(this);
	    var viewTarget = new DataView$1(result);
	    var index = 0;
	    while (first < fin) {
	      viewTarget.setUint8(index++, viewSource.getUint8(first++));
	    } return result;
	  }
	});

	// `DataView` constructor
	// https://tc39.github.io/ecma262/#sec-dataview-constructor
	_export$1({ global: true, forced: !arrayBufferNative }, {
	  DataView: arrayBuffer.DataView
	});

	/* eslint-disable no-new */



	var NATIVE_ARRAY_BUFFER_VIEWS$2 = arrayBufferViewCore.NATIVE_ARRAY_BUFFER_VIEWS;

	var ArrayBuffer$3 = global_1$1.ArrayBuffer;
	var Int8Array$2 = global_1$1.Int8Array;

	var typedArrayConstructorsRequireWrappers = !NATIVE_ARRAY_BUFFER_VIEWS$2 || !fails$1(function () {
	  Int8Array$2(1);
	}) || !fails$1(function () {
	  new Int8Array$2(-1);
	}) || !checkCorrectnessOfIteration(function (iterable) {
	  new Int8Array$2();
	  new Int8Array$2(null);
	  new Int8Array$2(1.5);
	  new Int8Array$2(iterable);
	}, true) || fails$1(function () {
	  // Safari (11+) bug - a reason why even Safari 13 should load a typed array polyfill
	  return new Int8Array$2(new ArrayBuffer$3(2), 1, undefined).length !== 1;
	});

	var toPositiveInteger = function (it) {
	  var result = toInteger$1(it);
	  if (result < 0) throw RangeError("The argument can't be less than 0");
	  return result;
	};

	var toOffset = function (it, BYTES) {
	  var offset = toPositiveInteger(it);
	  if (offset % BYTES) throw RangeError('Wrong offset');
	  return offset;
	};

	var aTypedArrayConstructor$1 = arrayBufferViewCore.aTypedArrayConstructor;

	var typedArrayFrom = function from(source /* , mapfn, thisArg */) {
	  var O = toObject$1(source);
	  var argumentsLength = arguments.length;
	  var mapfn = argumentsLength > 1 ? arguments[1] : undefined;
	  var mapping = mapfn !== undefined;
	  var iteratorMethod = getIteratorMethod(O);
	  var i, length, result, step, iterator, next;
	  if (iteratorMethod != undefined && !isArrayIteratorMethod(iteratorMethod)) {
	    iterator = iteratorMethod.call(O);
	    next = iterator.next;
	    O = [];
	    while (!(step = next.call(iterator)).done) {
	      O.push(step.value);
	    }
	  }
	  if (mapping && argumentsLength > 2) {
	    mapfn = functionBindContext$1(mapfn, arguments[2], 2);
	  }
	  length = toLength$1(O.length);
	  result = new (aTypedArrayConstructor$1(this))(length);
	  for (i = 0; length > i; i++) {
	    result[i] = mapping ? mapfn(O[i], i) : O[i];
	  }
	  return result;
	};

	var typedArrayConstructor = createCommonjsModule(function (module) {


















	var getOwnPropertyNames = objectGetOwnPropertyNames.f;

	var forEach = arrayIteration.forEach;






	var getInternalState = internalState.get;
	var setInternalState = internalState.set;
	var nativeDefineProperty = objectDefineProperty$1.f;
	var nativeGetOwnPropertyDescriptor = objectGetOwnPropertyDescriptor$1.f;
	var round = Math.round;
	var RangeError = global_1$1.RangeError;
	var ArrayBuffer = arrayBuffer.ArrayBuffer;
	var DataView = arrayBuffer.DataView;
	var NATIVE_ARRAY_BUFFER_VIEWS = arrayBufferViewCore.NATIVE_ARRAY_BUFFER_VIEWS;
	var TYPED_ARRAY_TAG = arrayBufferViewCore.TYPED_ARRAY_TAG;
	var TypedArray = arrayBufferViewCore.TypedArray;
	var TypedArrayPrototype = arrayBufferViewCore.TypedArrayPrototype;
	var aTypedArrayConstructor = arrayBufferViewCore.aTypedArrayConstructor;
	var isTypedArray = arrayBufferViewCore.isTypedArray;
	var BYTES_PER_ELEMENT = 'BYTES_PER_ELEMENT';
	var WRONG_LENGTH = 'Wrong length';

	var fromList = function (C, list) {
	  var index = 0;
	  var length = list.length;
	  var result = new (aTypedArrayConstructor(C))(length);
	  while (length > index) result[index] = list[index++];
	  return result;
	};

	var addGetter = function (it, key) {
	  nativeDefineProperty(it, key, { get: function () {
	    return getInternalState(this)[key];
	  } });
	};

	var isArrayBuffer = function (it) {
	  var klass;
	  return it instanceof ArrayBuffer || (klass = classof(it)) == 'ArrayBuffer' || klass == 'SharedArrayBuffer';
	};

	var isTypedArrayIndex = function (target, key) {
	  return isTypedArray(target)
	    && typeof key != 'symbol'
	    && key in target
	    && String(+key) == String(key);
	};

	var wrappedGetOwnPropertyDescriptor = function getOwnPropertyDescriptor(target, key) {
	  return isTypedArrayIndex(target, key = toPrimitive$1(key, true))
	    ? createPropertyDescriptor$1(2, target[key])
	    : nativeGetOwnPropertyDescriptor(target, key);
	};

	var wrappedDefineProperty = function defineProperty(target, key, descriptor) {
	  if (isTypedArrayIndex(target, key = toPrimitive$1(key, true))
	    && isObject$1(descriptor)
	    && has$1(descriptor, 'value')
	    && !has$1(descriptor, 'get')
	    && !has$1(descriptor, 'set')
	    // TODO: add validation descriptor w/o calling accessors
	    && !descriptor.configurable
	    && (!has$1(descriptor, 'writable') || descriptor.writable)
	    && (!has$1(descriptor, 'enumerable') || descriptor.enumerable)
	  ) {
	    target[key] = descriptor.value;
	    return target;
	  } return nativeDefineProperty(target, key, descriptor);
	};

	if (descriptors$1) {
	  if (!NATIVE_ARRAY_BUFFER_VIEWS) {
	    objectGetOwnPropertyDescriptor$1.f = wrappedGetOwnPropertyDescriptor;
	    objectDefineProperty$1.f = wrappedDefineProperty;
	    addGetter(TypedArrayPrototype, 'buffer');
	    addGetter(TypedArrayPrototype, 'byteOffset');
	    addGetter(TypedArrayPrototype, 'byteLength');
	    addGetter(TypedArrayPrototype, 'length');
	  }

	  _export$1({ target: 'Object', stat: true, forced: !NATIVE_ARRAY_BUFFER_VIEWS }, {
	    getOwnPropertyDescriptor: wrappedGetOwnPropertyDescriptor,
	    defineProperty: wrappedDefineProperty
	  });

	  module.exports = function (TYPE, wrapper, CLAMPED) {
	    var BYTES = TYPE.match(/\d+$/)[0] / 8;
	    var CONSTRUCTOR_NAME = TYPE + (CLAMPED ? 'Clamped' : '') + 'Array';
	    var GETTER = 'get' + TYPE;
	    var SETTER = 'set' + TYPE;
	    var NativeTypedArrayConstructor = global_1$1[CONSTRUCTOR_NAME];
	    var TypedArrayConstructor = NativeTypedArrayConstructor;
	    var TypedArrayConstructorPrototype = TypedArrayConstructor && TypedArrayConstructor.prototype;
	    var exported = {};

	    var getter = function (that, index) {
	      var data = getInternalState(that);
	      return data.view[GETTER](index * BYTES + data.byteOffset, true);
	    };

	    var setter = function (that, index, value) {
	      var data = getInternalState(that);
	      if (CLAMPED) value = (value = round(value)) < 0 ? 0 : value > 0xFF ? 0xFF : value & 0xFF;
	      data.view[SETTER](index * BYTES + data.byteOffset, value, true);
	    };

	    var addElement = function (that, index) {
	      nativeDefineProperty(that, index, {
	        get: function () {
	          return getter(this, index);
	        },
	        set: function (value) {
	          return setter(this, index, value);
	        },
	        enumerable: true
	      });
	    };

	    if (!NATIVE_ARRAY_BUFFER_VIEWS) {
	      TypedArrayConstructor = wrapper(function (that, data, offset, $length) {
	        anInstance(that, TypedArrayConstructor, CONSTRUCTOR_NAME);
	        var index = 0;
	        var byteOffset = 0;
	        var buffer, byteLength, length;
	        if (!isObject$1(data)) {
	          length = toIndex(data);
	          byteLength = length * BYTES;
	          buffer = new ArrayBuffer(byteLength);
	        } else if (isArrayBuffer(data)) {
	          buffer = data;
	          byteOffset = toOffset(offset, BYTES);
	          var $len = data.byteLength;
	          if ($length === undefined) {
	            if ($len % BYTES) throw RangeError(WRONG_LENGTH);
	            byteLength = $len - byteOffset;
	            if (byteLength < 0) throw RangeError(WRONG_LENGTH);
	          } else {
	            byteLength = toLength$1($length) * BYTES;
	            if (byteLength + byteOffset > $len) throw RangeError(WRONG_LENGTH);
	          }
	          length = byteLength / BYTES;
	        } else if (isTypedArray(data)) {
	          return fromList(TypedArrayConstructor, data);
	        } else {
	          return typedArrayFrom.call(TypedArrayConstructor, data);
	        }
	        setInternalState(that, {
	          buffer: buffer,
	          byteOffset: byteOffset,
	          byteLength: byteLength,
	          length: length,
	          view: new DataView(buffer)
	        });
	        while (index < length) addElement(that, index++);
	      });

	      if (objectSetPrototypeOf) objectSetPrototypeOf(TypedArrayConstructor, TypedArray);
	      TypedArrayConstructorPrototype = TypedArrayConstructor.prototype = objectCreate(TypedArrayPrototype);
	    } else if (typedArrayConstructorsRequireWrappers) {
	      TypedArrayConstructor = wrapper(function (dummy, data, typedArrayOffset, $length) {
	        anInstance(dummy, TypedArrayConstructor, CONSTRUCTOR_NAME);
	        return inheritIfRequired(function () {
	          if (!isObject$1(data)) return new NativeTypedArrayConstructor(toIndex(data));
	          if (isArrayBuffer(data)) return $length !== undefined
	            ? new NativeTypedArrayConstructor(data, toOffset(typedArrayOffset, BYTES), $length)
	            : typedArrayOffset !== undefined
	              ? new NativeTypedArrayConstructor(data, toOffset(typedArrayOffset, BYTES))
	              : new NativeTypedArrayConstructor(data);
	          if (isTypedArray(data)) return fromList(TypedArrayConstructor, data);
	          return typedArrayFrom.call(TypedArrayConstructor, data);
	        }(), dummy, TypedArrayConstructor);
	      });

	      if (objectSetPrototypeOf) objectSetPrototypeOf(TypedArrayConstructor, TypedArray);
	      forEach(getOwnPropertyNames(NativeTypedArrayConstructor), function (key) {
	        if (!(key in TypedArrayConstructor)) {
	          createNonEnumerableProperty$1(TypedArrayConstructor, key, NativeTypedArrayConstructor[key]);
	        }
	      });
	      TypedArrayConstructor.prototype = TypedArrayConstructorPrototype;
	    }

	    if (TypedArrayConstructorPrototype.constructor !== TypedArrayConstructor) {
	      createNonEnumerableProperty$1(TypedArrayConstructorPrototype, 'constructor', TypedArrayConstructor);
	    }

	    if (TYPED_ARRAY_TAG) {
	      createNonEnumerableProperty$1(TypedArrayConstructorPrototype, TYPED_ARRAY_TAG, CONSTRUCTOR_NAME);
	    }

	    exported[CONSTRUCTOR_NAME] = TypedArrayConstructor;

	    _export$1({
	      global: true, forced: TypedArrayConstructor != NativeTypedArrayConstructor, sham: !NATIVE_ARRAY_BUFFER_VIEWS
	    }, exported);

	    if (!(BYTES_PER_ELEMENT in TypedArrayConstructor)) {
	      createNonEnumerableProperty$1(TypedArrayConstructor, BYTES_PER_ELEMENT, BYTES);
	    }

	    if (!(BYTES_PER_ELEMENT in TypedArrayConstructorPrototype)) {
	      createNonEnumerableProperty$1(TypedArrayConstructorPrototype, BYTES_PER_ELEMENT, BYTES);
	    }

	    setSpecies(CONSTRUCTOR_NAME);
	  };
	} else module.exports = function () { /* empty */ };
	});

	// `Int8Array` constructor
	// https://tc39.github.io/ecma262/#sec-typedarray-objects
	typedArrayConstructor('Int8', function (init) {
	  return function Int8Array(data, byteOffset, length) {
	    return init(this, data, byteOffset, length);
	  };
	});

	// `Uint8Array` constructor
	// https://tc39.github.io/ecma262/#sec-typedarray-objects
	typedArrayConstructor('Uint8', function (init) {
	  return function Uint8Array(data, byteOffset, length) {
	    return init(this, data, byteOffset, length);
	  };
	});

	// `Uint8ClampedArray` constructor
	// https://tc39.github.io/ecma262/#sec-typedarray-objects
	typedArrayConstructor('Uint8', function (init) {
	  return function Uint8ClampedArray(data, byteOffset, length) {
	    return init(this, data, byteOffset, length);
	  };
	}, true);

	// `Int16Array` constructor
	// https://tc39.github.io/ecma262/#sec-typedarray-objects
	typedArrayConstructor('Int16', function (init) {
	  return function Int16Array(data, byteOffset, length) {
	    return init(this, data, byteOffset, length);
	  };
	});

	// `Uint16Array` constructor
	// https://tc39.github.io/ecma262/#sec-typedarray-objects
	typedArrayConstructor('Uint16', function (init) {
	  return function Uint16Array(data, byteOffset, length) {
	    return init(this, data, byteOffset, length);
	  };
	});

	// `Int32Array` constructor
	// https://tc39.github.io/ecma262/#sec-typedarray-objects
	typedArrayConstructor('Int32', function (init) {
	  return function Int32Array(data, byteOffset, length) {
	    return init(this, data, byteOffset, length);
	  };
	});

	// `Uint32Array` constructor
	// https://tc39.github.io/ecma262/#sec-typedarray-objects
	typedArrayConstructor('Uint32', function (init) {
	  return function Uint32Array(data, byteOffset, length) {
	    return init(this, data, byteOffset, length);
	  };
	});

	// `Float32Array` constructor
	// https://tc39.github.io/ecma262/#sec-typedarray-objects
	typedArrayConstructor('Float32', function (init) {
	  return function Float32Array(data, byteOffset, length) {
	    return init(this, data, byteOffset, length);
	  };
	});

	// `Float64Array` constructor
	// https://tc39.github.io/ecma262/#sec-typedarray-objects
	typedArrayConstructor('Float64', function (init) {
	  return function Float64Array(data, byteOffset, length) {
	    return init(this, data, byteOffset, length);
	  };
	});

	var exportTypedArrayStaticMethod$1 = arrayBufferViewCore.exportTypedArrayStaticMethod;


	// `%TypedArray%.from` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.from
	exportTypedArrayStaticMethod$1('from', typedArrayFrom, typedArrayConstructorsRequireWrappers);

	var aTypedArrayConstructor$2 = arrayBufferViewCore.aTypedArrayConstructor;
	var exportTypedArrayStaticMethod$2 = arrayBufferViewCore.exportTypedArrayStaticMethod;

	// `%TypedArray%.of` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.of
	exportTypedArrayStaticMethod$2('of', function of(/* ...items */) {
	  var index = 0;
	  var length = arguments.length;
	  var result = new (aTypedArrayConstructor$2(this))(length);
	  while (length > index) result[index] = arguments[index++];
	  return result;
	}, typedArrayConstructorsRequireWrappers);

	var aTypedArray$1 = arrayBufferViewCore.aTypedArray;
	var exportTypedArrayMethod$1 = arrayBufferViewCore.exportTypedArrayMethod;

	// `%TypedArray%.prototype.copyWithin` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.copywithin
	exportTypedArrayMethod$1('copyWithin', function copyWithin(target, start /* , end */) {
	  return arrayCopyWithin.call(aTypedArray$1(this), target, start, arguments.length > 2 ? arguments[2] : undefined);
	});

	var $every$1 = arrayIteration.every;

	var aTypedArray$2 = arrayBufferViewCore.aTypedArray;
	var exportTypedArrayMethod$2 = arrayBufferViewCore.exportTypedArrayMethod;

	// `%TypedArray%.prototype.every` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.every
	exportTypedArrayMethod$2('every', function every(callbackfn /* , thisArg */) {
	  return $every$1(aTypedArray$2(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	});

	var aTypedArray$3 = arrayBufferViewCore.aTypedArray;
	var exportTypedArrayMethod$3 = arrayBufferViewCore.exportTypedArrayMethod;

	// `%TypedArray%.prototype.fill` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.fill
	// eslint-disable-next-line no-unused-vars
	exportTypedArrayMethod$3('fill', function fill(value /* , start, end */) {
	  return arrayFill.apply(aTypedArray$3(this), arguments);
	});

	var $filter$1 = arrayIteration.filter;


	var aTypedArray$4 = arrayBufferViewCore.aTypedArray;
	var aTypedArrayConstructor$3 = arrayBufferViewCore.aTypedArrayConstructor;
	var exportTypedArrayMethod$4 = arrayBufferViewCore.exportTypedArrayMethod;

	// `%TypedArray%.prototype.filter` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.filter
	exportTypedArrayMethod$4('filter', function filter(callbackfn /* , thisArg */) {
	  var list = $filter$1(aTypedArray$4(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	  var C = speciesConstructor(this, this.constructor);
	  var index = 0;
	  var length = list.length;
	  var result = new (aTypedArrayConstructor$3(C))(length);
	  while (length > index) result[index] = list[index++];
	  return result;
	});

	var $find$1 = arrayIteration.find;

	var aTypedArray$5 = arrayBufferViewCore.aTypedArray;
	var exportTypedArrayMethod$5 = arrayBufferViewCore.exportTypedArrayMethod;

	// `%TypedArray%.prototype.find` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.find
	exportTypedArrayMethod$5('find', function find(predicate /* , thisArg */) {
	  return $find$1(aTypedArray$5(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
	});

	var $findIndex$1 = arrayIteration.findIndex;

	var aTypedArray$6 = arrayBufferViewCore.aTypedArray;
	var exportTypedArrayMethod$6 = arrayBufferViewCore.exportTypedArrayMethod;

	// `%TypedArray%.prototype.findIndex` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.findindex
	exportTypedArrayMethod$6('findIndex', function findIndex(predicate /* , thisArg */) {
	  return $findIndex$1(aTypedArray$6(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
	});

	var $forEach$2 = arrayIteration.forEach;

	var aTypedArray$7 = arrayBufferViewCore.aTypedArray;
	var exportTypedArrayMethod$7 = arrayBufferViewCore.exportTypedArrayMethod;

	// `%TypedArray%.prototype.forEach` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.foreach
	exportTypedArrayMethod$7('forEach', function forEach(callbackfn /* , thisArg */) {
	  $forEach$2(aTypedArray$7(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	});

	var $includes$2 = arrayIncludes$1.includes;

	var aTypedArray$8 = arrayBufferViewCore.aTypedArray;
	var exportTypedArrayMethod$8 = arrayBufferViewCore.exportTypedArrayMethod;

	// `%TypedArray%.prototype.includes` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.includes
	exportTypedArrayMethod$8('includes', function includes(searchElement /* , fromIndex */) {
	  return $includes$2(aTypedArray$8(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
	});

	var $indexOf$1 = arrayIncludes$1.indexOf;

	var aTypedArray$9 = arrayBufferViewCore.aTypedArray;
	var exportTypedArrayMethod$9 = arrayBufferViewCore.exportTypedArrayMethod;

	// `%TypedArray%.prototype.indexOf` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.indexof
	exportTypedArrayMethod$9('indexOf', function indexOf(searchElement /* , fromIndex */) {
	  return $indexOf$1(aTypedArray$9(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
	});

	var ITERATOR$5 = wellKnownSymbol$1('iterator');
	var Uint8Array$1 = global_1$1.Uint8Array;
	var arrayValues = es_array_iterator.values;
	var arrayKeys = es_array_iterator.keys;
	var arrayEntries = es_array_iterator.entries;
	var aTypedArray$a = arrayBufferViewCore.aTypedArray;
	var exportTypedArrayMethod$a = arrayBufferViewCore.exportTypedArrayMethod;
	var nativeTypedArrayIterator = Uint8Array$1 && Uint8Array$1.prototype[ITERATOR$5];

	var CORRECT_ITER_NAME = !!nativeTypedArrayIterator
	  && (nativeTypedArrayIterator.name == 'values' || nativeTypedArrayIterator.name == undefined);

	var typedArrayValues = function values() {
	  return arrayValues.call(aTypedArray$a(this));
	};

	// `%TypedArray%.prototype.entries` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.entries
	exportTypedArrayMethod$a('entries', function entries() {
	  return arrayEntries.call(aTypedArray$a(this));
	});
	// `%TypedArray%.prototype.keys` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.keys
	exportTypedArrayMethod$a('keys', function keys() {
	  return arrayKeys.call(aTypedArray$a(this));
	});
	// `%TypedArray%.prototype.values` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.values
	exportTypedArrayMethod$a('values', typedArrayValues, !CORRECT_ITER_NAME);
	// `%TypedArray%.prototype[@@iterator]` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype-@@iterator
	exportTypedArrayMethod$a(ITERATOR$5, typedArrayValues, !CORRECT_ITER_NAME);

	var aTypedArray$b = arrayBufferViewCore.aTypedArray;
	var exportTypedArrayMethod$b = arrayBufferViewCore.exportTypedArrayMethod;
	var $join = [].join;

	// `%TypedArray%.prototype.join` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.join
	// eslint-disable-next-line no-unused-vars
	exportTypedArrayMethod$b('join', function join(separator) {
	  return $join.apply(aTypedArray$b(this), arguments);
	});

	var aTypedArray$c = arrayBufferViewCore.aTypedArray;
	var exportTypedArrayMethod$c = arrayBufferViewCore.exportTypedArrayMethod;

	// `%TypedArray%.prototype.lastIndexOf` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.lastindexof
	// eslint-disable-next-line no-unused-vars
	exportTypedArrayMethod$c('lastIndexOf', function lastIndexOf(searchElement /* , fromIndex */) {
	  return arrayLastIndexOf.apply(aTypedArray$c(this), arguments);
	});

	var $map$1 = arrayIteration.map;


	var aTypedArray$d = arrayBufferViewCore.aTypedArray;
	var aTypedArrayConstructor$4 = arrayBufferViewCore.aTypedArrayConstructor;
	var exportTypedArrayMethod$d = arrayBufferViewCore.exportTypedArrayMethod;

	// `%TypedArray%.prototype.map` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.map
	exportTypedArrayMethod$d('map', function map(mapfn /* , thisArg */) {
	  return $map$1(aTypedArray$d(this), mapfn, arguments.length > 1 ? arguments[1] : undefined, function (O, length) {
	    return new (aTypedArrayConstructor$4(speciesConstructor(O, O.constructor)))(length);
	  });
	});

	var $reduce$1 = arrayReduce.left;

	var aTypedArray$e = arrayBufferViewCore.aTypedArray;
	var exportTypedArrayMethod$e = arrayBufferViewCore.exportTypedArrayMethod;

	// `%TypedArray%.prototype.reduce` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.reduce
	exportTypedArrayMethod$e('reduce', function reduce(callbackfn /* , initialValue */) {
	  return $reduce$1(aTypedArray$e(this), callbackfn, arguments.length, arguments.length > 1 ? arguments[1] : undefined);
	});

	var $reduceRight$1 = arrayReduce.right;

	var aTypedArray$f = arrayBufferViewCore.aTypedArray;
	var exportTypedArrayMethod$f = arrayBufferViewCore.exportTypedArrayMethod;

	// `%TypedArray%.prototype.reduceRicht` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.reduceright
	exportTypedArrayMethod$f('reduceRight', function reduceRight(callbackfn /* , initialValue */) {
	  return $reduceRight$1(aTypedArray$f(this), callbackfn, arguments.length, arguments.length > 1 ? arguments[1] : undefined);
	});

	var aTypedArray$g = arrayBufferViewCore.aTypedArray;
	var exportTypedArrayMethod$g = arrayBufferViewCore.exportTypedArrayMethod;
	var floor$8 = Math.floor;

	// `%TypedArray%.prototype.reverse` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.reverse
	exportTypedArrayMethod$g('reverse', function reverse() {
	  var that = this;
	  var length = aTypedArray$g(that).length;
	  var middle = floor$8(length / 2);
	  var index = 0;
	  var value;
	  while (index < middle) {
	    value = that[index];
	    that[index++] = that[--length];
	    that[length] = value;
	  } return that;
	});

	var aTypedArray$h = arrayBufferViewCore.aTypedArray;
	var exportTypedArrayMethod$h = arrayBufferViewCore.exportTypedArrayMethod;

	var FORCED$h = fails$1(function () {
	  // eslint-disable-next-line no-undef
	  new Int8Array(1).set({});
	});

	// `%TypedArray%.prototype.set` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.set
	exportTypedArrayMethod$h('set', function set(arrayLike /* , offset */) {
	  aTypedArray$h(this);
	  var offset = toOffset(arguments.length > 1 ? arguments[1] : undefined, 1);
	  var length = this.length;
	  var src = toObject$1(arrayLike);
	  var len = toLength$1(src.length);
	  var index = 0;
	  if (len + offset > length) throw RangeError('Wrong length');
	  while (index < len) this[offset + index] = src[index++];
	}, FORCED$h);

	var aTypedArray$i = arrayBufferViewCore.aTypedArray;
	var aTypedArrayConstructor$5 = arrayBufferViewCore.aTypedArrayConstructor;
	var exportTypedArrayMethod$i = arrayBufferViewCore.exportTypedArrayMethod;
	var $slice = [].slice;

	var FORCED$i = fails$1(function () {
	  // eslint-disable-next-line no-undef
	  new Int8Array(1).slice();
	});

	// `%TypedArray%.prototype.slice` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.slice
	exportTypedArrayMethod$i('slice', function slice(start, end) {
	  var list = $slice.call(aTypedArray$i(this), start, end);
	  var C = speciesConstructor(this, this.constructor);
	  var index = 0;
	  var length = list.length;
	  var result = new (aTypedArrayConstructor$5(C))(length);
	  while (length > index) result[index] = list[index++];
	  return result;
	}, FORCED$i);

	var $some$1 = arrayIteration.some;

	var aTypedArray$j = arrayBufferViewCore.aTypedArray;
	var exportTypedArrayMethod$j = arrayBufferViewCore.exportTypedArrayMethod;

	// `%TypedArray%.prototype.some` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.some
	exportTypedArrayMethod$j('some', function some(callbackfn /* , thisArg */) {
	  return $some$1(aTypedArray$j(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	});

	var aTypedArray$k = arrayBufferViewCore.aTypedArray;
	var exportTypedArrayMethod$k = arrayBufferViewCore.exportTypedArrayMethod;
	var $sort = [].sort;

	// `%TypedArray%.prototype.sort` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.sort
	exportTypedArrayMethod$k('sort', function sort(comparefn) {
	  return $sort.call(aTypedArray$k(this), comparefn);
	});

	var aTypedArray$l = arrayBufferViewCore.aTypedArray;
	var exportTypedArrayMethod$l = arrayBufferViewCore.exportTypedArrayMethod;

	// `%TypedArray%.prototype.subarray` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.subarray
	exportTypedArrayMethod$l('subarray', function subarray(begin, end) {
	  var O = aTypedArray$l(this);
	  var length = O.length;
	  var beginIndex = toAbsoluteIndex$1(begin, length);
	  return new (speciesConstructor(O, O.constructor))(
	    O.buffer,
	    O.byteOffset + beginIndex * O.BYTES_PER_ELEMENT,
	    toLength$1((end === undefined ? length : toAbsoluteIndex$1(end, length)) - beginIndex)
	  );
	});

	var Int8Array$3 = global_1$1.Int8Array;
	var aTypedArray$m = arrayBufferViewCore.aTypedArray;
	var exportTypedArrayMethod$m = arrayBufferViewCore.exportTypedArrayMethod;
	var $toLocaleString = [].toLocaleString;
	var $slice$1 = [].slice;

	// iOS Safari 6.x fails here
	var TO_LOCALE_STRING_BUG = !!Int8Array$3 && fails$1(function () {
	  $toLocaleString.call(new Int8Array$3(1));
	});

	var FORCED$j = fails$1(function () {
	  return [1, 2].toLocaleString() != new Int8Array$3([1, 2]).toLocaleString();
	}) || !fails$1(function () {
	  Int8Array$3.prototype.toLocaleString.call([1, 2]);
	});

	// `%TypedArray%.prototype.toLocaleString` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.tolocalestring
	exportTypedArrayMethod$m('toLocaleString', function toLocaleString() {
	  return $toLocaleString.apply(TO_LOCALE_STRING_BUG ? $slice$1.call(aTypedArray$m(this)) : aTypedArray$m(this), arguments);
	}, FORCED$j);

	var exportTypedArrayMethod$n = arrayBufferViewCore.exportTypedArrayMethod;



	var Uint8Array$2 = global_1$1.Uint8Array;
	var Uint8ArrayPrototype = Uint8Array$2 && Uint8Array$2.prototype || {};
	var arrayToString = [].toString;
	var arrayJoin = [].join;

	if (fails$1(function () { arrayToString.call({}); })) {
	  arrayToString = function toString() {
	    return arrayJoin.call(this);
	  };
	}

	var IS_NOT_ARRAY_METHOD = Uint8ArrayPrototype.toString != arrayToString;

	// `%TypedArray%.prototype.toString` method
	// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.tostring
	exportTypedArrayMethod$n('toString', arrayToString, IS_NOT_ARRAY_METHOD);

	var nativeApply = getBuiltIn$1('Reflect', 'apply');
	var functionApply = Function.apply;

	// MS Edge argumentsList argument is optional
	var OPTIONAL_ARGUMENTS_LIST = !fails$1(function () {
	  nativeApply(function () { /* empty */ });
	});

	// `Reflect.apply` method
	// https://tc39.github.io/ecma262/#sec-reflect.apply
	_export$1({ target: 'Reflect', stat: true, forced: OPTIONAL_ARGUMENTS_LIST }, {
	  apply: function apply(target, thisArgument, argumentsList) {
	    aFunction$3(target);
	    anObject$1(argumentsList);
	    return nativeApply
	      ? nativeApply(target, thisArgument, argumentsList)
	      : functionApply.call(target, thisArgument, argumentsList);
	  }
	});

	var nativeConstruct = getBuiltIn$1('Reflect', 'construct');

	// `Reflect.construct` method
	// https://tc39.github.io/ecma262/#sec-reflect.construct
	// MS Edge supports only 2 arguments and argumentsList argument is optional
	// FF Nightly sets third argument as `new.target`, but does not create `this` from it
	var NEW_TARGET_BUG = fails$1(function () {
	  function F() { /* empty */ }
	  return !(nativeConstruct(function () { /* empty */ }, [], F) instanceof F);
	});
	var ARGS_BUG = !fails$1(function () {
	  nativeConstruct(function () { /* empty */ });
	});
	var FORCED$k = NEW_TARGET_BUG || ARGS_BUG;

	_export$1({ target: 'Reflect', stat: true, forced: FORCED$k, sham: FORCED$k }, {
	  construct: function construct(Target, args /* , newTarget */) {
	    aFunction$3(Target);
	    anObject$1(args);
	    var newTarget = arguments.length < 3 ? Target : aFunction$3(arguments[2]);
	    if (ARGS_BUG && !NEW_TARGET_BUG) return nativeConstruct(Target, args, newTarget);
	    if (Target == newTarget) {
	      // w/o altered newTarget, optimization for 0-4 arguments
	      switch (args.length) {
	        case 0: return new Target();
	        case 1: return new Target(args[0]);
	        case 2: return new Target(args[0], args[1]);
	        case 3: return new Target(args[0], args[1], args[2]);
	        case 4: return new Target(args[0], args[1], args[2], args[3]);
	      }
	      // w/o altered newTarget, lot of arguments case
	      var $args = [null];
	      $args.push.apply($args, args);
	      return new (functionBind.apply(Target, $args))();
	    }
	    // with altered newTarget, not support built-in constructors
	    var proto = newTarget.prototype;
	    var instance = objectCreate(isObject$1(proto) ? proto : Object.prototype);
	    var result = Function.apply.call(Target, instance, args);
	    return isObject$1(result) ? result : instance;
	  }
	});

	// MS Edge has broken Reflect.defineProperty - throwing instead of returning false
	var ERROR_INSTEAD_OF_FALSE = fails$1(function () {
	  // eslint-disable-next-line no-undef
	  Reflect.defineProperty(objectDefineProperty$1.f({}, 1, { value: 1 }), 1, { value: 2 });
	});

	// `Reflect.defineProperty` method
	// https://tc39.github.io/ecma262/#sec-reflect.defineproperty
	_export$1({ target: 'Reflect', stat: true, forced: ERROR_INSTEAD_OF_FALSE, sham: !descriptors$1 }, {
	  defineProperty: function defineProperty(target, propertyKey, attributes) {
	    anObject$1(target);
	    var key = toPrimitive$1(propertyKey, true);
	    anObject$1(attributes);
	    try {
	      objectDefineProperty$1.f(target, key, attributes);
	      return true;
	    } catch (error) {
	      return false;
	    }
	  }
	});

	var getOwnPropertyDescriptor$a = objectGetOwnPropertyDescriptor$1.f;

	// `Reflect.deleteProperty` method
	// https://tc39.github.io/ecma262/#sec-reflect.deleteproperty
	_export$1({ target: 'Reflect', stat: true }, {
	  deleteProperty: function deleteProperty(target, propertyKey) {
	    var descriptor = getOwnPropertyDescriptor$a(anObject$1(target), propertyKey);
	    return descriptor && !descriptor.configurable ? false : delete target[propertyKey];
	  }
	});

	// `Reflect.get` method
	// https://tc39.github.io/ecma262/#sec-reflect.get
	function get$2(target, propertyKey /* , receiver */) {
	  var receiver = arguments.length < 3 ? target : arguments[2];
	  var descriptor, prototype;
	  if (anObject$1(target) === receiver) return target[propertyKey];
	  if (descriptor = objectGetOwnPropertyDescriptor$1.f(target, propertyKey)) return has$1(descriptor, 'value')
	    ? descriptor.value
	    : descriptor.get === undefined
	      ? undefined
	      : descriptor.get.call(receiver);
	  if (isObject$1(prototype = objectGetPrototypeOf(target))) return get$2(prototype, propertyKey, receiver);
	}

	_export$1({ target: 'Reflect', stat: true }, {
	  get: get$2
	});

	// `Reflect.getOwnPropertyDescriptor` method
	// https://tc39.github.io/ecma262/#sec-reflect.getownpropertydescriptor
	_export$1({ target: 'Reflect', stat: true, sham: !descriptors$1 }, {
	  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, propertyKey) {
	    return objectGetOwnPropertyDescriptor$1.f(anObject$1(target), propertyKey);
	  }
	});

	// `Reflect.getPrototypeOf` method
	// https://tc39.github.io/ecma262/#sec-reflect.getprototypeof
	_export$1({ target: 'Reflect', stat: true, sham: !correctPrototypeGetter }, {
	  getPrototypeOf: function getPrototypeOf(target) {
	    return objectGetPrototypeOf(anObject$1(target));
	  }
	});

	// `Reflect.has` method
	// https://tc39.github.io/ecma262/#sec-reflect.has
	_export$1({ target: 'Reflect', stat: true }, {
	  has: function has(target, propertyKey) {
	    return propertyKey in target;
	  }
	});

	var objectIsExtensible = Object.isExtensible;

	// `Reflect.isExtensible` method
	// https://tc39.github.io/ecma262/#sec-reflect.isextensible
	_export$1({ target: 'Reflect', stat: true }, {
	  isExtensible: function isExtensible(target) {
	    anObject$1(target);
	    return objectIsExtensible ? objectIsExtensible(target) : true;
	  }
	});

	// `Reflect.ownKeys` method
	// https://tc39.github.io/ecma262/#sec-reflect.ownkeys
	_export$1({ target: 'Reflect', stat: true }, {
	  ownKeys: ownKeys
	});

	// `Reflect.preventExtensions` method
	// https://tc39.github.io/ecma262/#sec-reflect.preventextensions
	_export$1({ target: 'Reflect', stat: true, sham: !freezing }, {
	  preventExtensions: function preventExtensions(target) {
	    anObject$1(target);
	    try {
	      var objectPreventExtensions = getBuiltIn$1('Object', 'preventExtensions');
	      if (objectPreventExtensions) objectPreventExtensions(target);
	      return true;
	    } catch (error) {
	      return false;
	    }
	  }
	});

	// `Reflect.set` method
	// https://tc39.github.io/ecma262/#sec-reflect.set
	function set$3(target, propertyKey, V /* , receiver */) {
	  var receiver = arguments.length < 4 ? target : arguments[3];
	  var ownDescriptor = objectGetOwnPropertyDescriptor$1.f(anObject$1(target), propertyKey);
	  var existingDescriptor, prototype;
	  if (!ownDescriptor) {
	    if (isObject$1(prototype = objectGetPrototypeOf(target))) {
	      return set$3(prototype, propertyKey, V, receiver);
	    }
	    ownDescriptor = createPropertyDescriptor$1(0);
	  }
	  if (has$1(ownDescriptor, 'value')) {
	    if (ownDescriptor.writable === false || !isObject$1(receiver)) return false;
	    if (existingDescriptor = objectGetOwnPropertyDescriptor$1.f(receiver, propertyKey)) {
	      if (existingDescriptor.get || existingDescriptor.set || existingDescriptor.writable === false) return false;
	      existingDescriptor.value = V;
	      objectDefineProperty$1.f(receiver, propertyKey, existingDescriptor);
	    } else objectDefineProperty$1.f(receiver, propertyKey, createPropertyDescriptor$1(0, V));
	    return true;
	  }
	  return ownDescriptor.set === undefined ? false : (ownDescriptor.set.call(receiver, V), true);
	}

	// MS Edge 17-18 Reflect.set allows setting the property to object
	// with non-writable property on the prototype
	var MS_EDGE_BUG = fails$1(function () {
	  var object = objectDefineProperty$1.f({}, 'a', { configurable: true });
	  // eslint-disable-next-line no-undef
	  return Reflect.set(objectGetPrototypeOf(object), 'a', 1, object) !== false;
	});

	_export$1({ target: 'Reflect', stat: true, forced: MS_EDGE_BUG }, {
	  set: set$3
	});

	// `Reflect.setPrototypeOf` method
	// https://tc39.github.io/ecma262/#sec-reflect.setprototypeof
	if (objectSetPrototypeOf) _export$1({ target: 'Reflect', stat: true }, {
	  setPrototypeOf: function setPrototypeOf(target, proto) {
	    anObject$1(target);
	    aPossiblePrototype(proto);
	    try {
	      objectSetPrototypeOf(target, proto);
	      return true;
	    } catch (error) {
	      return false;
	    }
	  }
	});

	// iterable DOM collections
	// flag - `iterable` interface - 'entries', 'keys', 'values', 'forEach' methods
	var domIterables = {
	  CSSRuleList: 0,
	  CSSStyleDeclaration: 0,
	  CSSValueList: 0,
	  ClientRectList: 0,
	  DOMRectList: 0,
	  DOMStringList: 0,
	  DOMTokenList: 1,
	  DataTransferItemList: 0,
	  FileList: 0,
	  HTMLAllCollection: 0,
	  HTMLCollection: 0,
	  HTMLFormElement: 0,
	  HTMLSelectElement: 0,
	  MediaList: 0,
	  MimeTypeArray: 0,
	  NamedNodeMap: 0,
	  NodeList: 1,
	  PaintRequestList: 0,
	  Plugin: 0,
	  PluginArray: 0,
	  SVGLengthList: 0,
	  SVGNumberList: 0,
	  SVGPathSegList: 0,
	  SVGPointList: 0,
	  SVGStringList: 0,
	  SVGTransformList: 0,
	  SourceBufferList: 0,
	  StyleSheetList: 0,
	  TextTrackCueList: 0,
	  TextTrackList: 0,
	  TouchList: 0
	};

	for (var COLLECTION_NAME in domIterables) {
	  var Collection = global_1$1[COLLECTION_NAME];
	  var CollectionPrototype = Collection && Collection.prototype;
	  // some Chrome versions have non-configurable methods on DOMTokenList
	  if (CollectionPrototype && CollectionPrototype.forEach !== arrayForEach) try {
	    createNonEnumerableProperty$1(CollectionPrototype, 'forEach', arrayForEach);
	  } catch (error) {
	    CollectionPrototype.forEach = arrayForEach;
	  }
	}

	var ITERATOR$6 = wellKnownSymbol$1('iterator');
	var TO_STRING_TAG$4 = wellKnownSymbol$1('toStringTag');
	var ArrayValues = es_array_iterator.values;

	for (var COLLECTION_NAME$1 in domIterables) {
	  var Collection$1 = global_1$1[COLLECTION_NAME$1];
	  var CollectionPrototype$1 = Collection$1 && Collection$1.prototype;
	  if (CollectionPrototype$1) {
	    // some Chrome versions have non-configurable methods on DOMTokenList
	    if (CollectionPrototype$1[ITERATOR$6] !== ArrayValues) try {
	      createNonEnumerableProperty$1(CollectionPrototype$1, ITERATOR$6, ArrayValues);
	    } catch (error) {
	      CollectionPrototype$1[ITERATOR$6] = ArrayValues;
	    }
	    if (!CollectionPrototype$1[TO_STRING_TAG$4]) {
	      createNonEnumerableProperty$1(CollectionPrototype$1, TO_STRING_TAG$4, COLLECTION_NAME$1);
	    }
	    if (domIterables[COLLECTION_NAME$1]) for (var METHOD_NAME in es_array_iterator) {
	      // some Chrome versions have non-configurable methods on DOMTokenList
	      if (CollectionPrototype$1[METHOD_NAME] !== es_array_iterator[METHOD_NAME]) try {
	        createNonEnumerableProperty$1(CollectionPrototype$1, METHOD_NAME, es_array_iterator[METHOD_NAME]);
	      } catch (error) {
	        CollectionPrototype$1[METHOD_NAME] = es_array_iterator[METHOD_NAME];
	      }
	    }
	  }
	}

	var FORCED$l = !global_1$1.setImmediate || !global_1$1.clearImmediate;

	// http://w3c.github.io/setImmediate/
	_export$1({ global: true, bind: true, enumerable: true, forced: FORCED$l }, {
	  // `setImmediate` method
	  // http://w3c.github.io/setImmediate/#si-setImmediate
	  setImmediate: task.set,
	  // `clearImmediate` method
	  // http://w3c.github.io/setImmediate/#si-clearImmediate
	  clearImmediate: task.clear
	});

	var process$4 = global_1$1.process;
	var isNode = classofRaw$1(process$4) == 'process';

	// `queueMicrotask` method
	// https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-queuemicrotask
	_export$1({ global: true, enumerable: true, noTargetGet: true }, {
	  queueMicrotask: function queueMicrotask(fn) {
	    var domain = isNode && process$4.domain;
	    microtask(domain ? domain.bind(fn) : fn);
	  }
	});

	var slice$2 = [].slice;
	var MSIE$1 = /MSIE .\./.test(engineUserAgent$1); // <- dirty ie9- check

	var wrap$2 = function (scheduler) {
	  return function (handler, timeout /* , ...arguments */) {
	    var boundArgs = arguments.length > 2;
	    var args = boundArgs ? slice$2.call(arguments, 2) : undefined;
	    return scheduler(boundArgs ? function () {
	      // eslint-disable-next-line no-new-func
	      (typeof handler == 'function' ? handler : Function(handler)).apply(this, args);
	    } : handler, timeout);
	  };
	};

	// ie9- setTimeout & setInterval additional parameters fix
	// https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#timers
	_export$1({ global: true, bind: true, forced: MSIE$1 }, {
	  // `setTimeout` method
	  // https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-settimeout
	  setTimeout: wrap$2(global_1$1.setTimeout),
	  // `setInterval` method
	  // https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-setinterval
	  setInterval: wrap$2(global_1$1.setInterval)
	});

	var ITERATOR$7 = wellKnownSymbol$1('iterator');

	var nativeUrl = !fails$1(function () {
	  var url = new URL('b?a=1&b=2&c=3', 'http://a');
	  var searchParams = url.searchParams;
	  var result = '';
	  url.pathname = 'c%20d';
	  searchParams.forEach(function (value, key) {
	    searchParams['delete']('b');
	    result += key + value;
	  });
	  return !searchParams.sort
	    || url.href !== 'http://a/c%20d?a=1&c=3'
	    || searchParams.get('c') !== '3'
	    || String(new URLSearchParams('?a=1')) !== 'a=1'
	    || !searchParams[ITERATOR$7]
	    // throws in Edge
	    || new URL('https://a@b').username !== 'a'
	    || new URLSearchParams(new URLSearchParams('a=b')).get('a') !== 'b'
	    // not punycoded in Edge
	    || new URL('http://тест').host !== 'xn--e1aybc'
	    // not escaped in Chrome 62-
	    || new URL('http://a#б').hash !== '#%D0%B1'
	    // fails in Chrome 66-
	    || result !== 'a1c3'
	    // throws in Safari
	    || new URL('http://x', undefined).host !== 'x';
	});

	// based on https://github.com/bestiejs/punycode.js/blob/master/punycode.js
	var maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1
	var base = 36;
	var tMin = 1;
	var tMax = 26;
	var skew = 38;
	var damp = 700;
	var initialBias = 72;
	var initialN = 128; // 0x80
	var delimiter = '-'; // '\x2D'
	var regexNonASCII = /[^\0-\u007E]/; // non-ASCII chars
	var regexSeparators = /[.\u3002\uFF0E\uFF61]/g; // RFC 3490 separators
	var OVERFLOW_ERROR = 'Overflow: input needs wider integers to process';
	var baseMinusTMin = base - tMin;
	var floor$9 = Math.floor;
	var stringFromCharCode = String.fromCharCode;

	/**
	 * Creates an array containing the numeric code points of each Unicode
	 * character in the string. While JavaScript uses UCS-2 internally,
	 * this function will convert a pair of surrogate halves (each of which
	 * UCS-2 exposes as separate characters) into a single code point,
	 * matching UTF-16.
	 */
	var ucs2decode = function (string) {
	  var output = [];
	  var counter = 0;
	  var length = string.length;
	  while (counter < length) {
	    var value = string.charCodeAt(counter++);
	    if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
	      // It's a high surrogate, and there is a next character.
	      var extra = string.charCodeAt(counter++);
	      if ((extra & 0xFC00) == 0xDC00) { // Low surrogate.
	        output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
	      } else {
	        // It's an unmatched surrogate; only append this code unit, in case the
	        // next code unit is the high surrogate of a surrogate pair.
	        output.push(value);
	        counter--;
	      }
	    } else {
	      output.push(value);
	    }
	  }
	  return output;
	};

	/**
	 * Converts a digit/integer into a basic code point.
	 */
	var digitToBasic = function (digit) {
	  //  0..25 map to ASCII a..z or A..Z
	  // 26..35 map to ASCII 0..9
	  return digit + 22 + 75 * (digit < 26);
	};

	/**
	 * Bias adaptation function as per section 3.4 of RFC 3492.
	 * https://tools.ietf.org/html/rfc3492#section-3.4
	 */
	var adapt = function (delta, numPoints, firstTime) {
	  var k = 0;
	  delta = firstTime ? floor$9(delta / damp) : delta >> 1;
	  delta += floor$9(delta / numPoints);
	  for (; delta > baseMinusTMin * tMax >> 1; k += base) {
	    delta = floor$9(delta / baseMinusTMin);
	  }
	  return floor$9(k + (baseMinusTMin + 1) * delta / (delta + skew));
	};

	/**
	 * Converts a string of Unicode symbols (e.g. a domain name label) to a
	 * Punycode string of ASCII-only symbols.
	 */
	// eslint-disable-next-line  max-statements
	var encode = function (input) {
	  var output = [];

	  // Convert the input in UCS-2 to an array of Unicode code points.
	  input = ucs2decode(input);

	  // Cache the length.
	  var inputLength = input.length;

	  // Initialize the state.
	  var n = initialN;
	  var delta = 0;
	  var bias = initialBias;
	  var i, currentValue;

	  // Handle the basic code points.
	  for (i = 0; i < input.length; i++) {
	    currentValue = input[i];
	    if (currentValue < 0x80) {
	      output.push(stringFromCharCode(currentValue));
	    }
	  }

	  var basicLength = output.length; // number of basic code points.
	  var handledCPCount = basicLength; // number of code points that have been handled;

	  // Finish the basic string with a delimiter unless it's empty.
	  if (basicLength) {
	    output.push(delimiter);
	  }

	  // Main encoding loop:
	  while (handledCPCount < inputLength) {
	    // All non-basic code points < n have been handled already. Find the next larger one:
	    var m = maxInt;
	    for (i = 0; i < input.length; i++) {
	      currentValue = input[i];
	      if (currentValue >= n && currentValue < m) {
	        m = currentValue;
	      }
	    }

	    // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>, but guard against overflow.
	    var handledCPCountPlusOne = handledCPCount + 1;
	    if (m - n > floor$9((maxInt - delta) / handledCPCountPlusOne)) {
	      throw RangeError(OVERFLOW_ERROR);
	    }

	    delta += (m - n) * handledCPCountPlusOne;
	    n = m;

	    for (i = 0; i < input.length; i++) {
	      currentValue = input[i];
	      if (currentValue < n && ++delta > maxInt) {
	        throw RangeError(OVERFLOW_ERROR);
	      }
	      if (currentValue == n) {
	        // Represent delta as a generalized variable-length integer.
	        var q = delta;
	        for (var k = base; /* no condition */; k += base) {
	          var t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
	          if (q < t) break;
	          var qMinusT = q - t;
	          var baseMinusT = base - t;
	          output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT)));
	          q = floor$9(qMinusT / baseMinusT);
	        }

	        output.push(stringFromCharCode(digitToBasic(q)));
	        bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
	        delta = 0;
	        ++handledCPCount;
	      }
	    }

	    ++delta;
	    ++n;
	  }
	  return output.join('');
	};

	var stringPunycodeToAscii = function (input) {
	  var encoded = [];
	  var labels = input.toLowerCase().replace(regexSeparators, '\u002E').split('.');
	  var i, label;
	  for (i = 0; i < labels.length; i++) {
	    label = labels[i];
	    encoded.push(regexNonASCII.test(label) ? 'xn--' + encode(label) : label);
	  }
	  return encoded.join('.');
	};

	var getIterator = function (it) {
	  var iteratorMethod = getIteratorMethod(it);
	  if (typeof iteratorMethod != 'function') {
	    throw TypeError(String(it) + ' is not iterable');
	  } return anObject$1(iteratorMethod.call(it));
	};

	// TODO: in core-js@4, move /modules/ dependencies to public entries for better optimization by tools like `preset-env`





















	var $fetch$1 = getBuiltIn$1('fetch');
	var Headers = getBuiltIn$1('Headers');
	var ITERATOR$8 = wellKnownSymbol$1('iterator');
	var URL_SEARCH_PARAMS = 'URLSearchParams';
	var URL_SEARCH_PARAMS_ITERATOR = URL_SEARCH_PARAMS + 'Iterator';
	var setInternalState$9 = internalState.set;
	var getInternalParamsState = internalState.getterFor(URL_SEARCH_PARAMS);
	var getInternalIteratorState = internalState.getterFor(URL_SEARCH_PARAMS_ITERATOR);

	var plus = /\+/g;
	var sequences = Array(4);

	var percentSequence = function (bytes) {
	  return sequences[bytes - 1] || (sequences[bytes - 1] = RegExp('((?:%[\\da-f]{2}){' + bytes + '})', 'gi'));
	};

	var percentDecode = function (sequence) {
	  try {
	    return decodeURIComponent(sequence);
	  } catch (error) {
	    return sequence;
	  }
	};

	var deserialize = function (it) {
	  var result = it.replace(plus, ' ');
	  var bytes = 4;
	  try {
	    return decodeURIComponent(result);
	  } catch (error) {
	    while (bytes) {
	      result = result.replace(percentSequence(bytes--), percentDecode);
	    }
	    return result;
	  }
	};

	var find$1 = /[!'()~]|%20/g;

	var replace = {
	  '!': '%21',
	  "'": '%27',
	  '(': '%28',
	  ')': '%29',
	  '~': '%7E',
	  '%20': '+'
	};

	var replacer = function (match) {
	  return replace[match];
	};

	var serialize = function (it) {
	  return encodeURIComponent(it).replace(find$1, replacer);
	};

	var parseSearchParams = function (result, query) {
	  if (query) {
	    var attributes = query.split('&');
	    var index = 0;
	    var attribute, entry;
	    while (index < attributes.length) {
	      attribute = attributes[index++];
	      if (attribute.length) {
	        entry = attribute.split('=');
	        result.push({
	          key: deserialize(entry.shift()),
	          value: deserialize(entry.join('='))
	        });
	      }
	    }
	  }
	};

	var updateSearchParams = function (query) {
	  this.entries.length = 0;
	  parseSearchParams(this.entries, query);
	};

	var validateArgumentsLength = function (passed, required) {
	  if (passed < required) throw TypeError('Not enough arguments');
	};

	var URLSearchParamsIterator = createIteratorConstructor(function Iterator(params, kind) {
	  setInternalState$9(this, {
	    type: URL_SEARCH_PARAMS_ITERATOR,
	    iterator: getIterator(getInternalParamsState(params).entries),
	    kind: kind
	  });
	}, 'Iterator', function next() {
	  var state = getInternalIteratorState(this);
	  var kind = state.kind;
	  var step = state.iterator.next();
	  var entry = step.value;
	  if (!step.done) {
	    step.value = kind === 'keys' ? entry.key : kind === 'values' ? entry.value : [entry.key, entry.value];
	  } return step;
	});

	// `URLSearchParams` constructor
	// https://url.spec.whatwg.org/#interface-urlsearchparams
	var URLSearchParamsConstructor = function URLSearchParams(/* init */) {
	  anInstance(this, URLSearchParamsConstructor, URL_SEARCH_PARAMS);
	  var init = arguments.length > 0 ? arguments[0] : undefined;
	  var that = this;
	  var entries = [];
	  var iteratorMethod, iterator, next, step, entryIterator, entryNext, first, second, key;

	  setInternalState$9(that, {
	    type: URL_SEARCH_PARAMS,
	    entries: entries,
	    updateURL: function () { /* empty */ },
	    updateSearchParams: updateSearchParams
	  });

	  if (init !== undefined) {
	    if (isObject$1(init)) {
	      iteratorMethod = getIteratorMethod(init);
	      if (typeof iteratorMethod === 'function') {
	        iterator = iteratorMethod.call(init);
	        next = iterator.next;
	        while (!(step = next.call(iterator)).done) {
	          entryIterator = getIterator(anObject$1(step.value));
	          entryNext = entryIterator.next;
	          if (
	            (first = entryNext.call(entryIterator)).done ||
	            (second = entryNext.call(entryIterator)).done ||
	            !entryNext.call(entryIterator).done
	          ) throw TypeError('Expected sequence with length 2');
	          entries.push({ key: first.value + '', value: second.value + '' });
	        }
	      } else for (key in init) if (has$1(init, key)) entries.push({ key: key, value: init[key] + '' });
	    } else {
	      parseSearchParams(entries, typeof init === 'string' ? init.charAt(0) === '?' ? init.slice(1) : init : init + '');
	    }
	  }
	};

	var URLSearchParamsPrototype = URLSearchParamsConstructor.prototype;

	redefineAll(URLSearchParamsPrototype, {
	  // `URLSearchParams.prototype.appent` method
	  // https://url.spec.whatwg.org/#dom-urlsearchparams-append
	  append: function append(name, value) {
	    validateArgumentsLength(arguments.length, 2);
	    var state = getInternalParamsState(this);
	    state.entries.push({ key: name + '', value: value + '' });
	    state.updateURL();
	  },
	  // `URLSearchParams.prototype.delete` method
	  // https://url.spec.whatwg.org/#dom-urlsearchparams-delete
	  'delete': function (name) {
	    validateArgumentsLength(arguments.length, 1);
	    var state = getInternalParamsState(this);
	    var entries = state.entries;
	    var key = name + '';
	    var index = 0;
	    while (index < entries.length) {
	      if (entries[index].key === key) entries.splice(index, 1);
	      else index++;
	    }
	    state.updateURL();
	  },
	  // `URLSearchParams.prototype.get` method
	  // https://url.spec.whatwg.org/#dom-urlsearchparams-get
	  get: function get(name) {
	    validateArgumentsLength(arguments.length, 1);
	    var entries = getInternalParamsState(this).entries;
	    var key = name + '';
	    var index = 0;
	    for (; index < entries.length; index++) {
	      if (entries[index].key === key) return entries[index].value;
	    }
	    return null;
	  },
	  // `URLSearchParams.prototype.getAll` method
	  // https://url.spec.whatwg.org/#dom-urlsearchparams-getall
	  getAll: function getAll(name) {
	    validateArgumentsLength(arguments.length, 1);
	    var entries = getInternalParamsState(this).entries;
	    var key = name + '';
	    var result = [];
	    var index = 0;
	    for (; index < entries.length; index++) {
	      if (entries[index].key === key) result.push(entries[index].value);
	    }
	    return result;
	  },
	  // `URLSearchParams.prototype.has` method
	  // https://url.spec.whatwg.org/#dom-urlsearchparams-has
	  has: function has(name) {
	    validateArgumentsLength(arguments.length, 1);
	    var entries = getInternalParamsState(this).entries;
	    var key = name + '';
	    var index = 0;
	    while (index < entries.length) {
	      if (entries[index++].key === key) return true;
	    }
	    return false;
	  },
	  // `URLSearchParams.prototype.set` method
	  // https://url.spec.whatwg.org/#dom-urlsearchparams-set
	  set: function set(name, value) {
	    validateArgumentsLength(arguments.length, 1);
	    var state = getInternalParamsState(this);
	    var entries = state.entries;
	    var found = false;
	    var key = name + '';
	    var val = value + '';
	    var index = 0;
	    var entry;
	    for (; index < entries.length; index++) {
	      entry = entries[index];
	      if (entry.key === key) {
	        if (found) entries.splice(index--, 1);
	        else {
	          found = true;
	          entry.value = val;
	        }
	      }
	    }
	    if (!found) entries.push({ key: key, value: val });
	    state.updateURL();
	  },
	  // `URLSearchParams.prototype.sort` method
	  // https://url.spec.whatwg.org/#dom-urlsearchparams-sort
	  sort: function sort() {
	    var state = getInternalParamsState(this);
	    var entries = state.entries;
	    // Array#sort is not stable in some engines
	    var slice = entries.slice();
	    var entry, entriesIndex, sliceIndex;
	    entries.length = 0;
	    for (sliceIndex = 0; sliceIndex < slice.length; sliceIndex++) {
	      entry = slice[sliceIndex];
	      for (entriesIndex = 0; entriesIndex < sliceIndex; entriesIndex++) {
	        if (entries[entriesIndex].key > entry.key) {
	          entries.splice(entriesIndex, 0, entry);
	          break;
	        }
	      }
	      if (entriesIndex === sliceIndex) entries.push(entry);
	    }
	    state.updateURL();
	  },
	  // `URLSearchParams.prototype.forEach` method
	  forEach: function forEach(callback /* , thisArg */) {
	    var entries = getInternalParamsState(this).entries;
	    var boundFunction = functionBindContext$1(callback, arguments.length > 1 ? arguments[1] : undefined, 3);
	    var index = 0;
	    var entry;
	    while (index < entries.length) {
	      entry = entries[index++];
	      boundFunction(entry.value, entry.key, this);
	    }
	  },
	  // `URLSearchParams.prototype.keys` method
	  keys: function keys() {
	    return new URLSearchParamsIterator(this, 'keys');
	  },
	  // `URLSearchParams.prototype.values` method
	  values: function values() {
	    return new URLSearchParamsIterator(this, 'values');
	  },
	  // `URLSearchParams.prototype.entries` method
	  entries: function entries() {
	    return new URLSearchParamsIterator(this, 'entries');
	  }
	}, { enumerable: true });

	// `URLSearchParams.prototype[@@iterator]` method
	redefine(URLSearchParamsPrototype, ITERATOR$8, URLSearchParamsPrototype.entries);

	// `URLSearchParams.prototype.toString` method
	// https://url.spec.whatwg.org/#urlsearchparams-stringification-behavior
	redefine(URLSearchParamsPrototype, 'toString', function toString() {
	  var entries = getInternalParamsState(this).entries;
	  var result = [];
	  var index = 0;
	  var entry;
	  while (index < entries.length) {
	    entry = entries[index++];
	    result.push(serialize(entry.key) + '=' + serialize(entry.value));
	  } return result.join('&');
	}, { enumerable: true });

	setToStringTag(URLSearchParamsConstructor, URL_SEARCH_PARAMS);

	_export$1({ global: true, forced: !nativeUrl }, {
	  URLSearchParams: URLSearchParamsConstructor
	});

	// Wrap `fetch` for correct work with polyfilled `URLSearchParams`
	// https://github.com/zloirock/core-js/issues/674
	if (!nativeUrl && typeof $fetch$1 == 'function' && typeof Headers == 'function') {
	  _export$1({ global: true, enumerable: true, forced: true }, {
	    fetch: function fetch(input /* , init */) {
	      var args = [input];
	      var init, body, headers;
	      if (arguments.length > 1) {
	        init = arguments[1];
	        if (isObject$1(init)) {
	          body = init.body;
	          if (classof(body) === URL_SEARCH_PARAMS) {
	            headers = init.headers ? new Headers(init.headers) : new Headers();
	            if (!headers.has('content-type')) {
	              headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
	            }
	            init = objectCreate(init, {
	              body: createPropertyDescriptor$1(0, String(body)),
	              headers: createPropertyDescriptor$1(0, headers)
	            });
	          }
	        }
	        args.push(init);
	      } return $fetch$1.apply(this, args);
	    }
	  });
	}

	var web_urlSearchParams = {
	  URLSearchParams: URLSearchParamsConstructor,
	  getState: getInternalParamsState
	};

	// TODO: in core-js@4, move /modules/ dependencies to public entries for better optimization by tools like `preset-env`











	var codeAt$1 = stringMultibyte.codeAt;





	var NativeURL = global_1$1.URL;
	var URLSearchParams$1 = web_urlSearchParams.URLSearchParams;
	var getInternalSearchParamsState = web_urlSearchParams.getState;
	var setInternalState$a = internalState.set;
	var getInternalURLState = internalState.getterFor('URL');
	var floor$a = Math.floor;
	var pow$4 = Math.pow;

	var INVALID_AUTHORITY = 'Invalid authority';
	var INVALID_SCHEME = 'Invalid scheme';
	var INVALID_HOST = 'Invalid host';
	var INVALID_PORT = 'Invalid port';

	var ALPHA = /[A-Za-z]/;
	var ALPHANUMERIC = /[\d+\-.A-Za-z]/;
	var DIGIT = /\d/;
	var HEX_START = /^(0x|0X)/;
	var OCT = /^[0-7]+$/;
	var DEC = /^\d+$/;
	var HEX = /^[\dA-Fa-f]+$/;
	// eslint-disable-next-line no-control-regex
	var FORBIDDEN_HOST_CODE_POINT = /[\u0000\u0009\u000A\u000D #%/:?@[\\]]/;
	// eslint-disable-next-line no-control-regex
	var FORBIDDEN_HOST_CODE_POINT_EXCLUDING_PERCENT = /[\u0000\u0009\u000A\u000D #/:?@[\\]]/;
	// eslint-disable-next-line no-control-regex
	var LEADING_AND_TRAILING_C0_CONTROL_OR_SPACE = /^[\u0000-\u001F ]+|[\u0000-\u001F ]+$/g;
	// eslint-disable-next-line no-control-regex
	var TAB_AND_NEW_LINE = /[\u0009\u000A\u000D]/g;
	var EOF;

	var parseHost = function (url, input) {
	  var result, codePoints, index;
	  if (input.charAt(0) == '[') {
	    if (input.charAt(input.length - 1) != ']') return INVALID_HOST;
	    result = parseIPv6(input.slice(1, -1));
	    if (!result) return INVALID_HOST;
	    url.host = result;
	  // opaque host
	  } else if (!isSpecial(url)) {
	    if (FORBIDDEN_HOST_CODE_POINT_EXCLUDING_PERCENT.test(input)) return INVALID_HOST;
	    result = '';
	    codePoints = arrayFrom(input);
	    for (index = 0; index < codePoints.length; index++) {
	      result += percentEncode(codePoints[index], C0ControlPercentEncodeSet);
	    }
	    url.host = result;
	  } else {
	    input = stringPunycodeToAscii(input);
	    if (FORBIDDEN_HOST_CODE_POINT.test(input)) return INVALID_HOST;
	    result = parseIPv4(input);
	    if (result === null) return INVALID_HOST;
	    url.host = result;
	  }
	};

	var parseIPv4 = function (input) {
	  var parts = input.split('.');
	  var partsLength, numbers, index, part, radix, number, ipv4;
	  if (parts.length && parts[parts.length - 1] == '') {
	    parts.pop();
	  }
	  partsLength = parts.length;
	  if (partsLength > 4) return input;
	  numbers = [];
	  for (index = 0; index < partsLength; index++) {
	    part = parts[index];
	    if (part == '') return input;
	    radix = 10;
	    if (part.length > 1 && part.charAt(0) == '0') {
	      radix = HEX_START.test(part) ? 16 : 8;
	      part = part.slice(radix == 8 ? 1 : 2);
	    }
	    if (part === '') {
	      number = 0;
	    } else {
	      if (!(radix == 10 ? DEC : radix == 8 ? OCT : HEX).test(part)) return input;
	      number = parseInt(part, radix);
	    }
	    numbers.push(number);
	  }
	  for (index = 0; index < partsLength; index++) {
	    number = numbers[index];
	    if (index == partsLength - 1) {
	      if (number >= pow$4(256, 5 - partsLength)) return null;
	    } else if (number > 255) return null;
	  }
	  ipv4 = numbers.pop();
	  for (index = 0; index < numbers.length; index++) {
	    ipv4 += numbers[index] * pow$4(256, 3 - index);
	  }
	  return ipv4;
	};

	// eslint-disable-next-line max-statements
	var parseIPv6 = function (input) {
	  var address = [0, 0, 0, 0, 0, 0, 0, 0];
	  var pieceIndex = 0;
	  var compress = null;
	  var pointer = 0;
	  var value, length, numbersSeen, ipv4Piece, number, swaps, swap;

	  var char = function () {
	    return input.charAt(pointer);
	  };

	  if (char() == ':') {
	    if (input.charAt(1) != ':') return;
	    pointer += 2;
	    pieceIndex++;
	    compress = pieceIndex;
	  }
	  while (char()) {
	    if (pieceIndex == 8) return;
	    if (char() == ':') {
	      if (compress !== null) return;
	      pointer++;
	      pieceIndex++;
	      compress = pieceIndex;
	      continue;
	    }
	    value = length = 0;
	    while (length < 4 && HEX.test(char())) {
	      value = value * 16 + parseInt(char(), 16);
	      pointer++;
	      length++;
	    }
	    if (char() == '.') {
	      if (length == 0) return;
	      pointer -= length;
	      if (pieceIndex > 6) return;
	      numbersSeen = 0;
	      while (char()) {
	        ipv4Piece = null;
	        if (numbersSeen > 0) {
	          if (char() == '.' && numbersSeen < 4) pointer++;
	          else return;
	        }
	        if (!DIGIT.test(char())) return;
	        while (DIGIT.test(char())) {
	          number = parseInt(char(), 10);
	          if (ipv4Piece === null) ipv4Piece = number;
	          else if (ipv4Piece == 0) return;
	          else ipv4Piece = ipv4Piece * 10 + number;
	          if (ipv4Piece > 255) return;
	          pointer++;
	        }
	        address[pieceIndex] = address[pieceIndex] * 256 + ipv4Piece;
	        numbersSeen++;
	        if (numbersSeen == 2 || numbersSeen == 4) pieceIndex++;
	      }
	      if (numbersSeen != 4) return;
	      break;
	    } else if (char() == ':') {
	      pointer++;
	      if (!char()) return;
	    } else if (char()) return;
	    address[pieceIndex++] = value;
	  }
	  if (compress !== null) {
	    swaps = pieceIndex - compress;
	    pieceIndex = 7;
	    while (pieceIndex != 0 && swaps > 0) {
	      swap = address[pieceIndex];
	      address[pieceIndex--] = address[compress + swaps - 1];
	      address[compress + --swaps] = swap;
	    }
	  } else if (pieceIndex != 8) return;
	  return address;
	};

	var findLongestZeroSequence = function (ipv6) {
	  var maxIndex = null;
	  var maxLength = 1;
	  var currStart = null;
	  var currLength = 0;
	  var index = 0;
	  for (; index < 8; index++) {
	    if (ipv6[index] !== 0) {
	      if (currLength > maxLength) {
	        maxIndex = currStart;
	        maxLength = currLength;
	      }
	      currStart = null;
	      currLength = 0;
	    } else {
	      if (currStart === null) currStart = index;
	      ++currLength;
	    }
	  }
	  if (currLength > maxLength) {
	    maxIndex = currStart;
	    maxLength = currLength;
	  }
	  return maxIndex;
	};

	var serializeHost = function (host) {
	  var result, index, compress, ignore0;
	  // ipv4
	  if (typeof host == 'number') {
	    result = [];
	    for (index = 0; index < 4; index++) {
	      result.unshift(host % 256);
	      host = floor$a(host / 256);
	    } return result.join('.');
	  // ipv6
	  } else if (typeof host == 'object') {
	    result = '';
	    compress = findLongestZeroSequence(host);
	    for (index = 0; index < 8; index++) {
	      if (ignore0 && host[index] === 0) continue;
	      if (ignore0) ignore0 = false;
	      if (compress === index) {
	        result += index ? ':' : '::';
	        ignore0 = true;
	      } else {
	        result += host[index].toString(16);
	        if (index < 7) result += ':';
	      }
	    }
	    return '[' + result + ']';
	  } return host;
	};

	var C0ControlPercentEncodeSet = {};
	var fragmentPercentEncodeSet = objectAssign$1({}, C0ControlPercentEncodeSet, {
	  ' ': 1, '"': 1, '<': 1, '>': 1, '`': 1
	});
	var pathPercentEncodeSet = objectAssign$1({}, fragmentPercentEncodeSet, {
	  '#': 1, '?': 1, '{': 1, '}': 1
	});
	var userinfoPercentEncodeSet = objectAssign$1({}, pathPercentEncodeSet, {
	  '/': 1, ':': 1, ';': 1, '=': 1, '@': 1, '[': 1, '\\': 1, ']': 1, '^': 1, '|': 1
	});

	var percentEncode = function (char, set) {
	  var code = codeAt$1(char, 0);
	  return code > 0x20 && code < 0x7F && !has$1(set, char) ? char : encodeURIComponent(char);
	};

	var specialSchemes = {
	  ftp: 21,
	  file: null,
	  http: 80,
	  https: 443,
	  ws: 80,
	  wss: 443
	};

	var isSpecial = function (url) {
	  return has$1(specialSchemes, url.scheme);
	};

	var includesCredentials = function (url) {
	  return url.username != '' || url.password != '';
	};

	var cannotHaveUsernamePasswordPort = function (url) {
	  return !url.host || url.cannotBeABaseURL || url.scheme == 'file';
	};

	var isWindowsDriveLetter = function (string, normalized) {
	  var second;
	  return string.length == 2 && ALPHA.test(string.charAt(0))
	    && ((second = string.charAt(1)) == ':' || (!normalized && second == '|'));
	};

	var startsWithWindowsDriveLetter = function (string) {
	  var third;
	  return string.length > 1 && isWindowsDriveLetter(string.slice(0, 2)) && (
	    string.length == 2 ||
	    ((third = string.charAt(2)) === '/' || third === '\\' || third === '?' || third === '#')
	  );
	};

	var shortenURLsPath = function (url) {
	  var path = url.path;
	  var pathSize = path.length;
	  if (pathSize && (url.scheme != 'file' || pathSize != 1 || !isWindowsDriveLetter(path[0], true))) {
	    path.pop();
	  }
	};

	var isSingleDot = function (segment) {
	  return segment === '.' || segment.toLowerCase() === '%2e';
	};

	var isDoubleDot = function (segment) {
	  segment = segment.toLowerCase();
	  return segment === '..' || segment === '%2e.' || segment === '.%2e' || segment === '%2e%2e';
	};

	// States:
	var SCHEME_START = {};
	var SCHEME = {};
	var NO_SCHEME = {};
	var SPECIAL_RELATIVE_OR_AUTHORITY = {};
	var PATH_OR_AUTHORITY = {};
	var RELATIVE = {};
	var RELATIVE_SLASH = {};
	var SPECIAL_AUTHORITY_SLASHES = {};
	var SPECIAL_AUTHORITY_IGNORE_SLASHES = {};
	var AUTHORITY = {};
	var HOST = {};
	var HOSTNAME = {};
	var PORT = {};
	var FILE = {};
	var FILE_SLASH = {};
	var FILE_HOST = {};
	var PATH_START = {};
	var PATH = {};
	var CANNOT_BE_A_BASE_URL_PATH = {};
	var QUERY = {};
	var FRAGMENT = {};

	// eslint-disable-next-line max-statements
	var parseURL = function (url, input, stateOverride, base) {
	  var state = stateOverride || SCHEME_START;
	  var pointer = 0;
	  var buffer = '';
	  var seenAt = false;
	  var seenBracket = false;
	  var seenPasswordToken = false;
	  var codePoints, char, bufferCodePoints, failure;

	  if (!stateOverride) {
	    url.scheme = '';
	    url.username = '';
	    url.password = '';
	    url.host = null;
	    url.port = null;
	    url.path = [];
	    url.query = null;
	    url.fragment = null;
	    url.cannotBeABaseURL = false;
	    input = input.replace(LEADING_AND_TRAILING_C0_CONTROL_OR_SPACE, '');
	  }

	  input = input.replace(TAB_AND_NEW_LINE, '');

	  codePoints = arrayFrom(input);

	  while (pointer <= codePoints.length) {
	    char = codePoints[pointer];
	    switch (state) {
	      case SCHEME_START:
	        if (char && ALPHA.test(char)) {
	          buffer += char.toLowerCase();
	          state = SCHEME;
	        } else if (!stateOverride) {
	          state = NO_SCHEME;
	          continue;
	        } else return INVALID_SCHEME;
	        break;

	      case SCHEME:
	        if (char && (ALPHANUMERIC.test(char) || char == '+' || char == '-' || char == '.')) {
	          buffer += char.toLowerCase();
	        } else if (char == ':') {
	          if (stateOverride && (
	            (isSpecial(url) != has$1(specialSchemes, buffer)) ||
	            (buffer == 'file' && (includesCredentials(url) || url.port !== null)) ||
	            (url.scheme == 'file' && !url.host)
	          )) return;
	          url.scheme = buffer;
	          if (stateOverride) {
	            if (isSpecial(url) && specialSchemes[url.scheme] == url.port) url.port = null;
	            return;
	          }
	          buffer = '';
	          if (url.scheme == 'file') {
	            state = FILE;
	          } else if (isSpecial(url) && base && base.scheme == url.scheme) {
	            state = SPECIAL_RELATIVE_OR_AUTHORITY;
	          } else if (isSpecial(url)) {
	            state = SPECIAL_AUTHORITY_SLASHES;
	          } else if (codePoints[pointer + 1] == '/') {
	            state = PATH_OR_AUTHORITY;
	            pointer++;
	          } else {
	            url.cannotBeABaseURL = true;
	            url.path.push('');
	            state = CANNOT_BE_A_BASE_URL_PATH;
	          }
	        } else if (!stateOverride) {
	          buffer = '';
	          state = NO_SCHEME;
	          pointer = 0;
	          continue;
	        } else return INVALID_SCHEME;
	        break;

	      case NO_SCHEME:
	        if (!base || (base.cannotBeABaseURL && char != '#')) return INVALID_SCHEME;
	        if (base.cannotBeABaseURL && char == '#') {
	          url.scheme = base.scheme;
	          url.path = base.path.slice();
	          url.query = base.query;
	          url.fragment = '';
	          url.cannotBeABaseURL = true;
	          state = FRAGMENT;
	          break;
	        }
	        state = base.scheme == 'file' ? FILE : RELATIVE;
	        continue;

	      case SPECIAL_RELATIVE_OR_AUTHORITY:
	        if (char == '/' && codePoints[pointer + 1] == '/') {
	          state = SPECIAL_AUTHORITY_IGNORE_SLASHES;
	          pointer++;
	        } else {
	          state = RELATIVE;
	          continue;
	        } break;

	      case PATH_OR_AUTHORITY:
	        if (char == '/') {
	          state = AUTHORITY;
	          break;
	        } else {
	          state = PATH;
	          continue;
	        }

	      case RELATIVE:
	        url.scheme = base.scheme;
	        if (char == EOF) {
	          url.username = base.username;
	          url.password = base.password;
	          url.host = base.host;
	          url.port = base.port;
	          url.path = base.path.slice();
	          url.query = base.query;
	        } else if (char == '/' || (char == '\\' && isSpecial(url))) {
	          state = RELATIVE_SLASH;
	        } else if (char == '?') {
	          url.username = base.username;
	          url.password = base.password;
	          url.host = base.host;
	          url.port = base.port;
	          url.path = base.path.slice();
	          url.query = '';
	          state = QUERY;
	        } else if (char == '#') {
	          url.username = base.username;
	          url.password = base.password;
	          url.host = base.host;
	          url.port = base.port;
	          url.path = base.path.slice();
	          url.query = base.query;
	          url.fragment = '';
	          state = FRAGMENT;
	        } else {
	          url.username = base.username;
	          url.password = base.password;
	          url.host = base.host;
	          url.port = base.port;
	          url.path = base.path.slice();
	          url.path.pop();
	          state = PATH;
	          continue;
	        } break;

	      case RELATIVE_SLASH:
	        if (isSpecial(url) && (char == '/' || char == '\\')) {
	          state = SPECIAL_AUTHORITY_IGNORE_SLASHES;
	        } else if (char == '/') {
	          state = AUTHORITY;
	        } else {
	          url.username = base.username;
	          url.password = base.password;
	          url.host = base.host;
	          url.port = base.port;
	          state = PATH;
	          continue;
	        } break;

	      case SPECIAL_AUTHORITY_SLASHES:
	        state = SPECIAL_AUTHORITY_IGNORE_SLASHES;
	        if (char != '/' || buffer.charAt(pointer + 1) != '/') continue;
	        pointer++;
	        break;

	      case SPECIAL_AUTHORITY_IGNORE_SLASHES:
	        if (char != '/' && char != '\\') {
	          state = AUTHORITY;
	          continue;
	        } break;

	      case AUTHORITY:
	        if (char == '@') {
	          if (seenAt) buffer = '%40' + buffer;
	          seenAt = true;
	          bufferCodePoints = arrayFrom(buffer);
	          for (var i = 0; i < bufferCodePoints.length; i++) {
	            var codePoint = bufferCodePoints[i];
	            if (codePoint == ':' && !seenPasswordToken) {
	              seenPasswordToken = true;
	              continue;
	            }
	            var encodedCodePoints = percentEncode(codePoint, userinfoPercentEncodeSet);
	            if (seenPasswordToken) url.password += encodedCodePoints;
	            else url.username += encodedCodePoints;
	          }
	          buffer = '';
	        } else if (
	          char == EOF || char == '/' || char == '?' || char == '#' ||
	          (char == '\\' && isSpecial(url))
	        ) {
	          if (seenAt && buffer == '') return INVALID_AUTHORITY;
	          pointer -= arrayFrom(buffer).length + 1;
	          buffer = '';
	          state = HOST;
	        } else buffer += char;
	        break;

	      case HOST:
	      case HOSTNAME:
	        if (stateOverride && url.scheme == 'file') {
	          state = FILE_HOST;
	          continue;
	        } else if (char == ':' && !seenBracket) {
	          if (buffer == '') return INVALID_HOST;
	          failure = parseHost(url, buffer);
	          if (failure) return failure;
	          buffer = '';
	          state = PORT;
	          if (stateOverride == HOSTNAME) return;
	        } else if (
	          char == EOF || char == '/' || char == '?' || char == '#' ||
	          (char == '\\' && isSpecial(url))
	        ) {
	          if (isSpecial(url) && buffer == '') return INVALID_HOST;
	          if (stateOverride && buffer == '' && (includesCredentials(url) || url.port !== null)) return;
	          failure = parseHost(url, buffer);
	          if (failure) return failure;
	          buffer = '';
	          state = PATH_START;
	          if (stateOverride) return;
	          continue;
	        } else {
	          if (char == '[') seenBracket = true;
	          else if (char == ']') seenBracket = false;
	          buffer += char;
	        } break;

	      case PORT:
	        if (DIGIT.test(char)) {
	          buffer += char;
	        } else if (
	          char == EOF || char == '/' || char == '?' || char == '#' ||
	          (char == '\\' && isSpecial(url)) ||
	          stateOverride
	        ) {
	          if (buffer != '') {
	            var port = parseInt(buffer, 10);
	            if (port > 0xFFFF) return INVALID_PORT;
	            url.port = (isSpecial(url) && port === specialSchemes[url.scheme]) ? null : port;
	            buffer = '';
	          }
	          if (stateOverride) return;
	          state = PATH_START;
	          continue;
	        } else return INVALID_PORT;
	        break;

	      case FILE:
	        url.scheme = 'file';
	        if (char == '/' || char == '\\') state = FILE_SLASH;
	        else if (base && base.scheme == 'file') {
	          if (char == EOF) {
	            url.host = base.host;
	            url.path = base.path.slice();
	            url.query = base.query;
	          } else if (char == '?') {
	            url.host = base.host;
	            url.path = base.path.slice();
	            url.query = '';
	            state = QUERY;
	          } else if (char == '#') {
	            url.host = base.host;
	            url.path = base.path.slice();
	            url.query = base.query;
	            url.fragment = '';
	            state = FRAGMENT;
	          } else {
	            if (!startsWithWindowsDriveLetter(codePoints.slice(pointer).join(''))) {
	              url.host = base.host;
	              url.path = base.path.slice();
	              shortenURLsPath(url);
	            }
	            state = PATH;
	            continue;
	          }
	        } else {
	          state = PATH;
	          continue;
	        } break;

	      case FILE_SLASH:
	        if (char == '/' || char == '\\') {
	          state = FILE_HOST;
	          break;
	        }
	        if (base && base.scheme == 'file' && !startsWithWindowsDriveLetter(codePoints.slice(pointer).join(''))) {
	          if (isWindowsDriveLetter(base.path[0], true)) url.path.push(base.path[0]);
	          else url.host = base.host;
	        }
	        state = PATH;
	        continue;

	      case FILE_HOST:
	        if (char == EOF || char == '/' || char == '\\' || char == '?' || char == '#') {
	          if (!stateOverride && isWindowsDriveLetter(buffer)) {
	            state = PATH;
	          } else if (buffer == '') {
	            url.host = '';
	            if (stateOverride) return;
	            state = PATH_START;
	          } else {
	            failure = parseHost(url, buffer);
	            if (failure) return failure;
	            if (url.host == 'localhost') url.host = '';
	            if (stateOverride) return;
	            buffer = '';
	            state = PATH_START;
	          } continue;
	        } else buffer += char;
	        break;

	      case PATH_START:
	        if (isSpecial(url)) {
	          state = PATH;
	          if (char != '/' && char != '\\') continue;
	        } else if (!stateOverride && char == '?') {
	          url.query = '';
	          state = QUERY;
	        } else if (!stateOverride && char == '#') {
	          url.fragment = '';
	          state = FRAGMENT;
	        } else if (char != EOF) {
	          state = PATH;
	          if (char != '/') continue;
	        } break;

	      case PATH:
	        if (
	          char == EOF || char == '/' ||
	          (char == '\\' && isSpecial(url)) ||
	          (!stateOverride && (char == '?' || char == '#'))
	        ) {
	          if (isDoubleDot(buffer)) {
	            shortenURLsPath(url);
	            if (char != '/' && !(char == '\\' && isSpecial(url))) {
	              url.path.push('');
	            }
	          } else if (isSingleDot(buffer)) {
	            if (char != '/' && !(char == '\\' && isSpecial(url))) {
	              url.path.push('');
	            }
	          } else {
	            if (url.scheme == 'file' && !url.path.length && isWindowsDriveLetter(buffer)) {
	              if (url.host) url.host = '';
	              buffer = buffer.charAt(0) + ':'; // normalize windows drive letter
	            }
	            url.path.push(buffer);
	          }
	          buffer = '';
	          if (url.scheme == 'file' && (char == EOF || char == '?' || char == '#')) {
	            while (url.path.length > 1 && url.path[0] === '') {
	              url.path.shift();
	            }
	          }
	          if (char == '?') {
	            url.query = '';
	            state = QUERY;
	          } else if (char == '#') {
	            url.fragment = '';
	            state = FRAGMENT;
	          }
	        } else {
	          buffer += percentEncode(char, pathPercentEncodeSet);
	        } break;

	      case CANNOT_BE_A_BASE_URL_PATH:
	        if (char == '?') {
	          url.query = '';
	          state = QUERY;
	        } else if (char == '#') {
	          url.fragment = '';
	          state = FRAGMENT;
	        } else if (char != EOF) {
	          url.path[0] += percentEncode(char, C0ControlPercentEncodeSet);
	        } break;

	      case QUERY:
	        if (!stateOverride && char == '#') {
	          url.fragment = '';
	          state = FRAGMENT;
	        } else if (char != EOF) {
	          if (char == "'" && isSpecial(url)) url.query += '%27';
	          else if (char == '#') url.query += '%23';
	          else url.query += percentEncode(char, C0ControlPercentEncodeSet);
	        } break;

	      case FRAGMENT:
	        if (char != EOF) url.fragment += percentEncode(char, fragmentPercentEncodeSet);
	        break;
	    }

	    pointer++;
	  }
	};

	// `URL` constructor
	// https://url.spec.whatwg.org/#url-class
	var URLConstructor = function URL(url /* , base */) {
	  var that = anInstance(this, URLConstructor, 'URL');
	  var base = arguments.length > 1 ? arguments[1] : undefined;
	  var urlString = String(url);
	  var state = setInternalState$a(that, { type: 'URL' });
	  var baseState, failure;
	  if (base !== undefined) {
	    if (base instanceof URLConstructor) baseState = getInternalURLState(base);
	    else {
	      failure = parseURL(baseState = {}, String(base));
	      if (failure) throw TypeError(failure);
	    }
	  }
	  failure = parseURL(state, urlString, null, baseState);
	  if (failure) throw TypeError(failure);
	  var searchParams = state.searchParams = new URLSearchParams$1();
	  var searchParamsState = getInternalSearchParamsState(searchParams);
	  searchParamsState.updateSearchParams(state.query);
	  searchParamsState.updateURL = function () {
	    state.query = String(searchParams) || null;
	  };
	  if (!descriptors$1) {
	    that.href = serializeURL.call(that);
	    that.origin = getOrigin.call(that);
	    that.protocol = getProtocol.call(that);
	    that.username = getUsername.call(that);
	    that.password = getPassword.call(that);
	    that.host = getHost.call(that);
	    that.hostname = getHostname.call(that);
	    that.port = getPort.call(that);
	    that.pathname = getPathname.call(that);
	    that.search = getSearch.call(that);
	    that.searchParams = getSearchParams.call(that);
	    that.hash = getHash.call(that);
	  }
	};

	var URLPrototype = URLConstructor.prototype;

	var serializeURL = function () {
	  var url = getInternalURLState(this);
	  var scheme = url.scheme;
	  var username = url.username;
	  var password = url.password;
	  var host = url.host;
	  var port = url.port;
	  var path = url.path;
	  var query = url.query;
	  var fragment = url.fragment;
	  var output = scheme + ':';
	  if (host !== null) {
	    output += '//';
	    if (includesCredentials(url)) {
	      output += username + (password ? ':' + password : '') + '@';
	    }
	    output += serializeHost(host);
	    if (port !== null) output += ':' + port;
	  } else if (scheme == 'file') output += '//';
	  output += url.cannotBeABaseURL ? path[0] : path.length ? '/' + path.join('/') : '';
	  if (query !== null) output += '?' + query;
	  if (fragment !== null) output += '#' + fragment;
	  return output;
	};

	var getOrigin = function () {
	  var url = getInternalURLState(this);
	  var scheme = url.scheme;
	  var port = url.port;
	  if (scheme == 'blob') try {
	    return new URL(scheme.path[0]).origin;
	  } catch (error) {
	    return 'null';
	  }
	  if (scheme == 'file' || !isSpecial(url)) return 'null';
	  return scheme + '://' + serializeHost(url.host) + (port !== null ? ':' + port : '');
	};

	var getProtocol = function () {
	  return getInternalURLState(this).scheme + ':';
	};

	var getUsername = function () {
	  return getInternalURLState(this).username;
	};

	var getPassword = function () {
	  return getInternalURLState(this).password;
	};

	var getHost = function () {
	  var url = getInternalURLState(this);
	  var host = url.host;
	  var port = url.port;
	  return host === null ? ''
	    : port === null ? serializeHost(host)
	    : serializeHost(host) + ':' + port;
	};

	var getHostname = function () {
	  var host = getInternalURLState(this).host;
	  return host === null ? '' : serializeHost(host);
	};

	var getPort = function () {
	  var port = getInternalURLState(this).port;
	  return port === null ? '' : String(port);
	};

	var getPathname = function () {
	  var url = getInternalURLState(this);
	  var path = url.path;
	  return url.cannotBeABaseURL ? path[0] : path.length ? '/' + path.join('/') : '';
	};

	var getSearch = function () {
	  var query = getInternalURLState(this).query;
	  return query ? '?' + query : '';
	};

	var getSearchParams = function () {
	  return getInternalURLState(this).searchParams;
	};

	var getHash = function () {
	  var fragment = getInternalURLState(this).fragment;
	  return fragment ? '#' + fragment : '';
	};

	var accessorDescriptor = function (getter, setter) {
	  return { get: getter, set: setter, configurable: true, enumerable: true };
	};

	if (descriptors$1) {
	  objectDefineProperties(URLPrototype, {
	    // `URL.prototype.href` accessors pair
	    // https://url.spec.whatwg.org/#dom-url-href
	    href: accessorDescriptor(serializeURL, function (href) {
	      var url = getInternalURLState(this);
	      var urlString = String(href);
	      var failure = parseURL(url, urlString);
	      if (failure) throw TypeError(failure);
	      getInternalSearchParamsState(url.searchParams).updateSearchParams(url.query);
	    }),
	    // `URL.prototype.origin` getter
	    // https://url.spec.whatwg.org/#dom-url-origin
	    origin: accessorDescriptor(getOrigin),
	    // `URL.prototype.protocol` accessors pair
	    // https://url.spec.whatwg.org/#dom-url-protocol
	    protocol: accessorDescriptor(getProtocol, function (protocol) {
	      var url = getInternalURLState(this);
	      parseURL(url, String(protocol) + ':', SCHEME_START);
	    }),
	    // `URL.prototype.username` accessors pair
	    // https://url.spec.whatwg.org/#dom-url-username
	    username: accessorDescriptor(getUsername, function (username) {
	      var url = getInternalURLState(this);
	      var codePoints = arrayFrom(String(username));
	      if (cannotHaveUsernamePasswordPort(url)) return;
	      url.username = '';
	      for (var i = 0; i < codePoints.length; i++) {
	        url.username += percentEncode(codePoints[i], userinfoPercentEncodeSet);
	      }
	    }),
	    // `URL.prototype.password` accessors pair
	    // https://url.spec.whatwg.org/#dom-url-password
	    password: accessorDescriptor(getPassword, function (password) {
	      var url = getInternalURLState(this);
	      var codePoints = arrayFrom(String(password));
	      if (cannotHaveUsernamePasswordPort(url)) return;
	      url.password = '';
	      for (var i = 0; i < codePoints.length; i++) {
	        url.password += percentEncode(codePoints[i], userinfoPercentEncodeSet);
	      }
	    }),
	    // `URL.prototype.host` accessors pair
	    // https://url.spec.whatwg.org/#dom-url-host
	    host: accessorDescriptor(getHost, function (host) {
	      var url = getInternalURLState(this);
	      if (url.cannotBeABaseURL) return;
	      parseURL(url, String(host), HOST);
	    }),
	    // `URL.prototype.hostname` accessors pair
	    // https://url.spec.whatwg.org/#dom-url-hostname
	    hostname: accessorDescriptor(getHostname, function (hostname) {
	      var url = getInternalURLState(this);
	      if (url.cannotBeABaseURL) return;
	      parseURL(url, String(hostname), HOSTNAME);
	    }),
	    // `URL.prototype.port` accessors pair
	    // https://url.spec.whatwg.org/#dom-url-port
	    port: accessorDescriptor(getPort, function (port) {
	      var url = getInternalURLState(this);
	      if (cannotHaveUsernamePasswordPort(url)) return;
	      port = String(port);
	      if (port == '') url.port = null;
	      else parseURL(url, port, PORT);
	    }),
	    // `URL.prototype.pathname` accessors pair
	    // https://url.spec.whatwg.org/#dom-url-pathname
	    pathname: accessorDescriptor(getPathname, function (pathname) {
	      var url = getInternalURLState(this);
	      if (url.cannotBeABaseURL) return;
	      url.path = [];
	      parseURL(url, pathname + '', PATH_START);
	    }),
	    // `URL.prototype.search` accessors pair
	    // https://url.spec.whatwg.org/#dom-url-search
	    search: accessorDescriptor(getSearch, function (search) {
	      var url = getInternalURLState(this);
	      search = String(search);
	      if (search == '') {
	        url.query = null;
	      } else {
	        if ('?' == search.charAt(0)) search = search.slice(1);
	        url.query = '';
	        parseURL(url, search, QUERY);
	      }
	      getInternalSearchParamsState(url.searchParams).updateSearchParams(url.query);
	    }),
	    // `URL.prototype.searchParams` getter
	    // https://url.spec.whatwg.org/#dom-url-searchparams
	    searchParams: accessorDescriptor(getSearchParams),
	    // `URL.prototype.hash` accessors pair
	    // https://url.spec.whatwg.org/#dom-url-hash
	    hash: accessorDescriptor(getHash, function (hash) {
	      var url = getInternalURLState(this);
	      hash = String(hash);
	      if (hash == '') {
	        url.fragment = null;
	        return;
	      }
	      if ('#' == hash.charAt(0)) hash = hash.slice(1);
	      url.fragment = '';
	      parseURL(url, hash, FRAGMENT);
	    })
	  });
	}

	// `URL.prototype.toJSON` method
	// https://url.spec.whatwg.org/#dom-url-tojson
	redefine(URLPrototype, 'toJSON', function toJSON() {
	  return serializeURL.call(this);
	}, { enumerable: true });

	// `URL.prototype.toString` method
	// https://url.spec.whatwg.org/#URL-stringification-behavior
	redefine(URLPrototype, 'toString', function toString() {
	  return serializeURL.call(this);
	}, { enumerable: true });

	if (NativeURL) {
	  var nativeCreateObjectURL = NativeURL.createObjectURL;
	  var nativeRevokeObjectURL = NativeURL.revokeObjectURL;
	  // `URL.createObjectURL` method
	  // https://developer.mozilla.org/en-US/docs/Web/API/URL/createObjectURL
	  // eslint-disable-next-line no-unused-vars
	  if (nativeCreateObjectURL) redefine(URLConstructor, 'createObjectURL', function createObjectURL(blob) {
	    return nativeCreateObjectURL.apply(NativeURL, arguments);
	  });
	  // `URL.revokeObjectURL` method
	  // https://developer.mozilla.org/en-US/docs/Web/API/URL/revokeObjectURL
	  // eslint-disable-next-line no-unused-vars
	  if (nativeRevokeObjectURL) redefine(URLConstructor, 'revokeObjectURL', function revokeObjectURL(url) {
	    return nativeRevokeObjectURL.apply(NativeURL, arguments);
	  });
	}

	setToStringTag(URLConstructor, 'URL');

	_export$1({ global: true, forced: !nativeUrl, sham: !descriptors$1 }, {
	  URL: URLConstructor
	});

	// `URL.prototype.toJSON` method
	// https://url.spec.whatwg.org/#dom-url-tojson
	_export$1({ target: 'URL', proto: true, enumerable: true }, {
	  toJSON: function toJSON() {
	    return URL.prototype.toString.call(this);
	  }
	});

	var runtime_1 = createCommonjsModule(function (module) {
	/**
	 * Copyright (c) 2014-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var runtime = (function (exports) {

	  var Op = Object.prototype;
	  var hasOwn = Op.hasOwnProperty;
	  var undefined$1; // More compressible than void 0.
	  var $Symbol = typeof Symbol === "function" ? Symbol : {};
	  var iteratorSymbol = $Symbol.iterator || "@@iterator";
	  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
	  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

	  function wrap(innerFn, outerFn, self, tryLocsList) {
	    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
	    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
	    var generator = Object.create(protoGenerator.prototype);
	    var context = new Context(tryLocsList || []);

	    // The ._invoke method unifies the implementations of the .next,
	    // .throw, and .return methods.
	    generator._invoke = makeInvokeMethod(innerFn, self, context);

	    return generator;
	  }
	  exports.wrap = wrap;

	  // Try/catch helper to minimize deoptimizations. Returns a completion
	  // record like context.tryEntries[i].completion. This interface could
	  // have been (and was previously) designed to take a closure to be
	  // invoked without arguments, but in all the cases we care about we
	  // already have an existing method we want to call, so there's no need
	  // to create a new function object. We can even get away with assuming
	  // the method takes exactly one argument, since that happens to be true
	  // in every case, so we don't have to touch the arguments object. The
	  // only additional allocation required is the completion record, which
	  // has a stable shape and so hopefully should be cheap to allocate.
	  function tryCatch(fn, obj, arg) {
	    try {
	      return { type: "normal", arg: fn.call(obj, arg) };
	    } catch (err) {
	      return { type: "throw", arg: err };
	    }
	  }

	  var GenStateSuspendedStart = "suspendedStart";
	  var GenStateSuspendedYield = "suspendedYield";
	  var GenStateExecuting = "executing";
	  var GenStateCompleted = "completed";

	  // Returning this object from the innerFn has the same effect as
	  // breaking out of the dispatch switch statement.
	  var ContinueSentinel = {};

	  // Dummy constructor functions that we use as the .constructor and
	  // .constructor.prototype properties for functions that return Generator
	  // objects. For full spec compliance, you may wish to configure your
	  // minifier not to mangle the names of these two functions.
	  function Generator() {}
	  function GeneratorFunction() {}
	  function GeneratorFunctionPrototype() {}

	  // This is a polyfill for %IteratorPrototype% for environments that
	  // don't natively support it.
	  var IteratorPrototype = {};
	  IteratorPrototype[iteratorSymbol] = function () {
	    return this;
	  };

	  var getProto = Object.getPrototypeOf;
	  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
	  if (NativeIteratorPrototype &&
	      NativeIteratorPrototype !== Op &&
	      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
	    // This environment has a native %IteratorPrototype%; use it instead
	    // of the polyfill.
	    IteratorPrototype = NativeIteratorPrototype;
	  }

	  var Gp = GeneratorFunctionPrototype.prototype =
	    Generator.prototype = Object.create(IteratorPrototype);
	  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
	  GeneratorFunctionPrototype.constructor = GeneratorFunction;
	  GeneratorFunctionPrototype[toStringTagSymbol] =
	    GeneratorFunction.displayName = "GeneratorFunction";

	  // Helper for defining the .next, .throw, and .return methods of the
	  // Iterator interface in terms of a single ._invoke method.
	  function defineIteratorMethods(prototype) {
	    ["next", "throw", "return"].forEach(function(method) {
	      prototype[method] = function(arg) {
	        return this._invoke(method, arg);
	      };
	    });
	  }

	  exports.isGeneratorFunction = function(genFun) {
	    var ctor = typeof genFun === "function" && genFun.constructor;
	    return ctor
	      ? ctor === GeneratorFunction ||
	        // For the native GeneratorFunction constructor, the best we can
	        // do is to check its .name property.
	        (ctor.displayName || ctor.name) === "GeneratorFunction"
	      : false;
	  };

	  exports.mark = function(genFun) {
	    if (Object.setPrototypeOf) {
	      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
	    } else {
	      genFun.__proto__ = GeneratorFunctionPrototype;
	      if (!(toStringTagSymbol in genFun)) {
	        genFun[toStringTagSymbol] = "GeneratorFunction";
	      }
	    }
	    genFun.prototype = Object.create(Gp);
	    return genFun;
	  };

	  // Within the body of any async function, `await x` is transformed to
	  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
	  // `hasOwn.call(value, "__await")` to determine if the yielded value is
	  // meant to be awaited.
	  exports.awrap = function(arg) {
	    return { __await: arg };
	  };

	  function AsyncIterator(generator) {
	    function invoke(method, arg, resolve, reject) {
	      var record = tryCatch(generator[method], generator, arg);
	      if (record.type === "throw") {
	        reject(record.arg);
	      } else {
	        var result = record.arg;
	        var value = result.value;
	        if (value &&
	            typeof value === "object" &&
	            hasOwn.call(value, "__await")) {
	          return Promise.resolve(value.__await).then(function(value) {
	            invoke("next", value, resolve, reject);
	          }, function(err) {
	            invoke("throw", err, resolve, reject);
	          });
	        }

	        return Promise.resolve(value).then(function(unwrapped) {
	          // When a yielded Promise is resolved, its final value becomes
	          // the .value of the Promise<{value,done}> result for the
	          // current iteration.
	          result.value = unwrapped;
	          resolve(result);
	        }, function(error) {
	          // If a rejected Promise was yielded, throw the rejection back
	          // into the async generator function so it can be handled there.
	          return invoke("throw", error, resolve, reject);
	        });
	      }
	    }

	    var previousPromise;

	    function enqueue(method, arg) {
	      function callInvokeWithMethodAndArg() {
	        return new Promise(function(resolve, reject) {
	          invoke(method, arg, resolve, reject);
	        });
	      }

	      return previousPromise =
	        // If enqueue has been called before, then we want to wait until
	        // all previous Promises have been resolved before calling invoke,
	        // so that results are always delivered in the correct order. If
	        // enqueue has not been called before, then it is important to
	        // call invoke immediately, without waiting on a callback to fire,
	        // so that the async generator function has the opportunity to do
	        // any necessary setup in a predictable way. This predictability
	        // is why the Promise constructor synchronously invokes its
	        // executor callback, and why async functions synchronously
	        // execute code before the first await. Since we implement simple
	        // async functions in terms of async generators, it is especially
	        // important to get this right, even though it requires care.
	        previousPromise ? previousPromise.then(
	          callInvokeWithMethodAndArg,
	          // Avoid propagating failures to Promises returned by later
	          // invocations of the iterator.
	          callInvokeWithMethodAndArg
	        ) : callInvokeWithMethodAndArg();
	    }

	    // Define the unified helper method that is used to implement .next,
	    // .throw, and .return (see defineIteratorMethods).
	    this._invoke = enqueue;
	  }

	  defineIteratorMethods(AsyncIterator.prototype);
	  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
	    return this;
	  };
	  exports.AsyncIterator = AsyncIterator;

	  // Note that simple async functions are implemented on top of
	  // AsyncIterator objects; they just return a Promise for the value of
	  // the final result produced by the iterator.
	  exports.async = function(innerFn, outerFn, self, tryLocsList) {
	    var iter = new AsyncIterator(
	      wrap(innerFn, outerFn, self, tryLocsList)
	    );

	    return exports.isGeneratorFunction(outerFn)
	      ? iter // If outerFn is a generator, return the full iterator.
	      : iter.next().then(function(result) {
	          return result.done ? result.value : iter.next();
	        });
	  };

	  function makeInvokeMethod(innerFn, self, context) {
	    var state = GenStateSuspendedStart;

	    return function invoke(method, arg) {
	      if (state === GenStateExecuting) {
	        throw new Error("Generator is already running");
	      }

	      if (state === GenStateCompleted) {
	        if (method === "throw") {
	          throw arg;
	        }

	        // Be forgiving, per 25.3.3.3.3 of the spec:
	        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
	        return doneResult();
	      }

	      context.method = method;
	      context.arg = arg;

	      while (true) {
	        var delegate = context.delegate;
	        if (delegate) {
	          var delegateResult = maybeInvokeDelegate(delegate, context);
	          if (delegateResult) {
	            if (delegateResult === ContinueSentinel) continue;
	            return delegateResult;
	          }
	        }

	        if (context.method === "next") {
	          // Setting context._sent for legacy support of Babel's
	          // function.sent implementation.
	          context.sent = context._sent = context.arg;

	        } else if (context.method === "throw") {
	          if (state === GenStateSuspendedStart) {
	            state = GenStateCompleted;
	            throw context.arg;
	          }

	          context.dispatchException(context.arg);

	        } else if (context.method === "return") {
	          context.abrupt("return", context.arg);
	        }

	        state = GenStateExecuting;

	        var record = tryCatch(innerFn, self, context);
	        if (record.type === "normal") {
	          // If an exception is thrown from innerFn, we leave state ===
	          // GenStateExecuting and loop back for another invocation.
	          state = context.done
	            ? GenStateCompleted
	            : GenStateSuspendedYield;

	          if (record.arg === ContinueSentinel) {
	            continue;
	          }

	          return {
	            value: record.arg,
	            done: context.done
	          };

	        } else if (record.type === "throw") {
	          state = GenStateCompleted;
	          // Dispatch the exception by looping back around to the
	          // context.dispatchException(context.arg) call above.
	          context.method = "throw";
	          context.arg = record.arg;
	        }
	      }
	    };
	  }

	  // Call delegate.iterator[context.method](context.arg) and handle the
	  // result, either by returning a { value, done } result from the
	  // delegate iterator, or by modifying context.method and context.arg,
	  // setting context.delegate to null, and returning the ContinueSentinel.
	  function maybeInvokeDelegate(delegate, context) {
	    var method = delegate.iterator[context.method];
	    if (method === undefined$1) {
	      // A .throw or .return when the delegate iterator has no .throw
	      // method always terminates the yield* loop.
	      context.delegate = null;

	      if (context.method === "throw") {
	        // Note: ["return"] must be used for ES3 parsing compatibility.
	        if (delegate.iterator["return"]) {
	          // If the delegate iterator has a return method, give it a
	          // chance to clean up.
	          context.method = "return";
	          context.arg = undefined$1;
	          maybeInvokeDelegate(delegate, context);

	          if (context.method === "throw") {
	            // If maybeInvokeDelegate(context) changed context.method from
	            // "return" to "throw", let that override the TypeError below.
	            return ContinueSentinel;
	          }
	        }

	        context.method = "throw";
	        context.arg = new TypeError(
	          "The iterator does not provide a 'throw' method");
	      }

	      return ContinueSentinel;
	    }

	    var record = tryCatch(method, delegate.iterator, context.arg);

	    if (record.type === "throw") {
	      context.method = "throw";
	      context.arg = record.arg;
	      context.delegate = null;
	      return ContinueSentinel;
	    }

	    var info = record.arg;

	    if (! info) {
	      context.method = "throw";
	      context.arg = new TypeError("iterator result is not an object");
	      context.delegate = null;
	      return ContinueSentinel;
	    }

	    if (info.done) {
	      // Assign the result of the finished delegate to the temporary
	      // variable specified by delegate.resultName (see delegateYield).
	      context[delegate.resultName] = info.value;

	      // Resume execution at the desired location (see delegateYield).
	      context.next = delegate.nextLoc;

	      // If context.method was "throw" but the delegate handled the
	      // exception, let the outer generator proceed normally. If
	      // context.method was "next", forget context.arg since it has been
	      // "consumed" by the delegate iterator. If context.method was
	      // "return", allow the original .return call to continue in the
	      // outer generator.
	      if (context.method !== "return") {
	        context.method = "next";
	        context.arg = undefined$1;
	      }

	    } else {
	      // Re-yield the result returned by the delegate method.
	      return info;
	    }

	    // The delegate iterator is finished, so forget it and continue with
	    // the outer generator.
	    context.delegate = null;
	    return ContinueSentinel;
	  }

	  // Define Generator.prototype.{next,throw,return} in terms of the
	  // unified ._invoke helper method.
	  defineIteratorMethods(Gp);

	  Gp[toStringTagSymbol] = "Generator";

	  // A Generator should always return itself as the iterator object when the
	  // @@iterator function is called on it. Some browsers' implementations of the
	  // iterator prototype chain incorrectly implement this, causing the Generator
	  // object to not be returned from this call. This ensures that doesn't happen.
	  // See https://github.com/facebook/regenerator/issues/274 for more details.
	  Gp[iteratorSymbol] = function() {
	    return this;
	  };

	  Gp.toString = function() {
	    return "[object Generator]";
	  };

	  function pushTryEntry(locs) {
	    var entry = { tryLoc: locs[0] };

	    if (1 in locs) {
	      entry.catchLoc = locs[1];
	    }

	    if (2 in locs) {
	      entry.finallyLoc = locs[2];
	      entry.afterLoc = locs[3];
	    }

	    this.tryEntries.push(entry);
	  }

	  function resetTryEntry(entry) {
	    var record = entry.completion || {};
	    record.type = "normal";
	    delete record.arg;
	    entry.completion = record;
	  }

	  function Context(tryLocsList) {
	    // The root entry object (effectively a try statement without a catch
	    // or a finally block) gives us a place to store values thrown from
	    // locations where there is no enclosing try statement.
	    this.tryEntries = [{ tryLoc: "root" }];
	    tryLocsList.forEach(pushTryEntry, this);
	    this.reset(true);
	  }

	  exports.keys = function(object) {
	    var keys = [];
	    for (var key in object) {
	      keys.push(key);
	    }
	    keys.reverse();

	    // Rather than returning an object with a next method, we keep
	    // things simple and return the next function itself.
	    return function next() {
	      while (keys.length) {
	        var key = keys.pop();
	        if (key in object) {
	          next.value = key;
	          next.done = false;
	          return next;
	        }
	      }

	      // To avoid creating an additional object, we just hang the .value
	      // and .done properties off the next function object itself. This
	      // also ensures that the minifier will not anonymize the function.
	      next.done = true;
	      return next;
	    };
	  };

	  function values(iterable) {
	    if (iterable) {
	      var iteratorMethod = iterable[iteratorSymbol];
	      if (iteratorMethod) {
	        return iteratorMethod.call(iterable);
	      }

	      if (typeof iterable.next === "function") {
	        return iterable;
	      }

	      if (!isNaN(iterable.length)) {
	        var i = -1, next = function next() {
	          while (++i < iterable.length) {
	            if (hasOwn.call(iterable, i)) {
	              next.value = iterable[i];
	              next.done = false;
	              return next;
	            }
	          }

	          next.value = undefined$1;
	          next.done = true;

	          return next;
	        };

	        return next.next = next;
	      }
	    }

	    // Return an iterator with no values.
	    return { next: doneResult };
	  }
	  exports.values = values;

	  function doneResult() {
	    return { value: undefined$1, done: true };
	  }

	  Context.prototype = {
	    constructor: Context,

	    reset: function(skipTempReset) {
	      this.prev = 0;
	      this.next = 0;
	      // Resetting context._sent for legacy support of Babel's
	      // function.sent implementation.
	      this.sent = this._sent = undefined$1;
	      this.done = false;
	      this.delegate = null;

	      this.method = "next";
	      this.arg = undefined$1;

	      this.tryEntries.forEach(resetTryEntry);

	      if (!skipTempReset) {
	        for (var name in this) {
	          // Not sure about the optimal order of these conditions:
	          if (name.charAt(0) === "t" &&
	              hasOwn.call(this, name) &&
	              !isNaN(+name.slice(1))) {
	            this[name] = undefined$1;
	          }
	        }
	      }
	    },

	    stop: function() {
	      this.done = true;

	      var rootEntry = this.tryEntries[0];
	      var rootRecord = rootEntry.completion;
	      if (rootRecord.type === "throw") {
	        throw rootRecord.arg;
	      }

	      return this.rval;
	    },

	    dispatchException: function(exception) {
	      if (this.done) {
	        throw exception;
	      }

	      var context = this;
	      function handle(loc, caught) {
	        record.type = "throw";
	        record.arg = exception;
	        context.next = loc;

	        if (caught) {
	          // If the dispatched exception was caught by a catch block,
	          // then let that catch block handle the exception normally.
	          context.method = "next";
	          context.arg = undefined$1;
	        }

	        return !! caught;
	      }

	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        var record = entry.completion;

	        if (entry.tryLoc === "root") {
	          // Exception thrown outside of any try block that could handle
	          // it, so set the completion value of the entire function to
	          // throw the exception.
	          return handle("end");
	        }

	        if (entry.tryLoc <= this.prev) {
	          var hasCatch = hasOwn.call(entry, "catchLoc");
	          var hasFinally = hasOwn.call(entry, "finallyLoc");

	          if (hasCatch && hasFinally) {
	            if (this.prev < entry.catchLoc) {
	              return handle(entry.catchLoc, true);
	            } else if (this.prev < entry.finallyLoc) {
	              return handle(entry.finallyLoc);
	            }

	          } else if (hasCatch) {
	            if (this.prev < entry.catchLoc) {
	              return handle(entry.catchLoc, true);
	            }

	          } else if (hasFinally) {
	            if (this.prev < entry.finallyLoc) {
	              return handle(entry.finallyLoc);
	            }

	          } else {
	            throw new Error("try statement without catch or finally");
	          }
	        }
	      }
	    },

	    abrupt: function(type, arg) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.tryLoc <= this.prev &&
	            hasOwn.call(entry, "finallyLoc") &&
	            this.prev < entry.finallyLoc) {
	          var finallyEntry = entry;
	          break;
	        }
	      }

	      if (finallyEntry &&
	          (type === "break" ||
	           type === "continue") &&
	          finallyEntry.tryLoc <= arg &&
	          arg <= finallyEntry.finallyLoc) {
	        // Ignore the finally entry if control is not jumping to a
	        // location outside the try/catch block.
	        finallyEntry = null;
	      }

	      var record = finallyEntry ? finallyEntry.completion : {};
	      record.type = type;
	      record.arg = arg;

	      if (finallyEntry) {
	        this.method = "next";
	        this.next = finallyEntry.finallyLoc;
	        return ContinueSentinel;
	      }

	      return this.complete(record);
	    },

	    complete: function(record, afterLoc) {
	      if (record.type === "throw") {
	        throw record.arg;
	      }

	      if (record.type === "break" ||
	          record.type === "continue") {
	        this.next = record.arg;
	      } else if (record.type === "return") {
	        this.rval = this.arg = record.arg;
	        this.method = "return";
	        this.next = "end";
	      } else if (record.type === "normal" && afterLoc) {
	        this.next = afterLoc;
	      }

	      return ContinueSentinel;
	    },

	    finish: function(finallyLoc) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.finallyLoc === finallyLoc) {
	          this.complete(entry.completion, entry.afterLoc);
	          resetTryEntry(entry);
	          return ContinueSentinel;
	        }
	      }
	    },

	    "catch": function(tryLoc) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.tryLoc === tryLoc) {
	          var record = entry.completion;
	          if (record.type === "throw") {
	            var thrown = record.arg;
	            resetTryEntry(entry);
	          }
	          return thrown;
	        }
	      }

	      // The context.catch method must only be called with a location
	      // argument that corresponds to a known catch block.
	      throw new Error("illegal catch attempt");
	    },

	    delegateYield: function(iterable, resultName, nextLoc) {
	      this.delegate = {
	        iterator: values(iterable),
	        resultName: resultName,
	        nextLoc: nextLoc
	      };

	      if (this.method === "next") {
	        // Deliberately forget the last sent value so that we don't
	        // accidentally pass it on to the delegate.
	        this.arg = undefined$1;
	      }

	      return ContinueSentinel;
	    }
	  };

	  // Regardless of whether this script is executing as a CommonJS module
	  // or not, return the runtime object so that we can declare the variable
	  // regeneratorRuntime in the outer scope, which allows this module to be
	  // injected easily by `bin/regenerator --include-runtime script.js`.
	  return exports;

	}(
	  // If this script is executing as a CommonJS module, use module.exports
	  // as the regeneratorRuntime namespace. Otherwise create a new empty
	  // object. Either way, the resulting object will be used to initialize
	  // the regeneratorRuntime variable at the top of this file.
	  module.exports
	));

	try {
	  regeneratorRuntime = runtime;
	} catch (accidentalStrictMode) {
	  // This module should not be running in strict mode, so the above
	  // assignment should always work unless something is misconfigured. Just
	  // in case runtime.js accidentally runs in strict mode, we can escape
	  // strict mode using a global Function call. This could conceivably fail
	  // if a Content Security Policy forbids using Function, but in that case
	  // the proper solution is to fix the accidental strict mode problem. If
	  // you've misconfigured your bundler to force strict mode and applied a
	  // CSP to forbid Function, and you're not willing to fix either of those
	  // problems, please detail your unique predicament in a GitHub issue.
	  Function("r", "regeneratorRuntime = r")(runtime);
	}
	});

	// `IsArray` abstract operation
	// https://tc39.github.io/ecma262/#sec-isarray
	var isArray$1 = Array.isArray || function isArray(arg) {
	  return classofRaw(arg) == 'Array';
	};

	var SPECIES$7 = wellKnownSymbol('species');

	// `ArraySpeciesCreate` abstract operation
	// https://tc39.github.io/ecma262/#sec-arrayspeciescreate
	var arraySpeciesCreate$1 = function (originalArray, length) {
	  var C;
	  if (isArray$1(originalArray)) {
	    C = originalArray.constructor;
	    // cross-realm fallback
	    if (typeof C == 'function' && (C === Array || isArray$1(C.prototype))) C = undefined;
	    else if (isObject(C)) {
	      C = C[SPECIES$7];
	      if (C === null) C = undefined;
	    }
	  } return new (C === undefined ? Array : C)(length === 0 ? 0 : length);
	};

	var push$1 = [].push;

	// `Array.prototype.{ forEach, map, filter, some, every, find, findIndex }` methods implementation
	var createMethod$8 = function (TYPE) {
	  var IS_MAP = TYPE == 1;
	  var IS_FILTER = TYPE == 2;
	  var IS_SOME = TYPE == 3;
	  var IS_EVERY = TYPE == 4;
	  var IS_FIND_INDEX = TYPE == 6;
	  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
	  return function ($this, callbackfn, that, specificCreate) {
	    var O = toObject($this);
	    var self = indexedObject(O);
	    var boundFunction = functionBindContext(callbackfn, that, 3);
	    var length = toLength(self.length);
	    var index = 0;
	    var create = specificCreate || arraySpeciesCreate$1;
	    var target = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;
	    var value, result;
	    for (;length > index; index++) if (NO_HOLES || index in self) {
	      value = self[index];
	      result = boundFunction(value, index, O);
	      if (TYPE) {
	        if (IS_MAP) target[index] = result; // map
	        else if (result) switch (TYPE) {
	          case 3: return true;              // some
	          case 5: return value;             // find
	          case 6: return index;             // findIndex
	          case 2: push$1.call(target, value); // filter
	        } else if (IS_EVERY) return false;  // every
	      }
	    }
	    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : target;
	  };
	};

	var arrayIteration$1 = {
	  // `Array.prototype.forEach` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.foreach
	  forEach: createMethod$8(0),
	  // `Array.prototype.map` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.map
	  map: createMethod$8(1),
	  // `Array.prototype.filter` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.filter
	  filter: createMethod$8(2),
	  // `Array.prototype.some` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.some
	  some: createMethod$8(3),
	  // `Array.prototype.every` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.every
	  every: createMethod$8(4),
	  // `Array.prototype.find` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.find
	  find: createMethod$8(5),
	  // `Array.prototype.findIndex` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.findIndex
	  findIndex: createMethod$8(6)
	};

	var process$5 = global_1.process;
	var versions$1 = process$5 && process$5.versions;
	var v8$1 = versions$1 && versions$1.v8;
	var match$1, version$1;

	if (v8$1) {
	  match$1 = v8$1.split('.');
	  version$1 = match$1[0] + match$1[1];
	} else if (engineUserAgent) {
	  match$1 = engineUserAgent.match(/Edge\/(\d+)/);
	  if (!match$1 || match$1[1] >= 74) {
	    match$1 = engineUserAgent.match(/Chrome\/(\d+)/);
	    if (match$1) version$1 = match$1[1];
	  }
	}

	var engineV8Version$1 = version$1 && +version$1;

	var SPECIES$8 = wellKnownSymbol('species');

	var arrayMethodHasSpeciesSupport$1 = function (METHOD_NAME) {
	  // We can't use this feature detection in V8 since it causes
	  // deoptimization and serious performance degradation
	  // https://github.com/zloirock/core-js/issues/677
	  return engineV8Version$1 >= 51 || !fails(function () {
	    var array = [];
	    var constructor = array.constructor = {};
	    constructor[SPECIES$8] = function () {
	      return { foo: 1 };
	    };
	    return array[METHOD_NAME](Boolean).foo !== 1;
	  });
	};

	var $map$2 = arrayIteration$1.map;



	var HAS_SPECIES_SUPPORT$4 = arrayMethodHasSpeciesSupport$1('map');
	// FF49- issue
	var USES_TO_LENGTH$f = arrayMethodUsesToLength('map');

	// `Array.prototype.map` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.map
	// with adding support of @@species
	_export({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT$4 || !USES_TO_LENGTH$f }, {
	  map: function map(callbackfn /* , thisArg */) {
	    return $map$2(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	var map = entryVirtual('Array').map;

	var ArrayPrototype$3 = Array.prototype;

	var map_1 = function (it) {
	  var own = it.map;
	  return it === ArrayPrototype$3 || (it instanceof Array && own === ArrayPrototype$3.map) ? map : own;
	};

	var map$1 = map_1;

	var map$2 = map$1;

	var $stringify$2 = getBuiltIn('JSON', 'stringify');
	var re$1 = /[\uD800-\uDFFF]/g;
	var low$1 = /^[\uD800-\uDBFF]$/;
	var hi$1 = /^[\uDC00-\uDFFF]$/;

	var fix$1 = function (match, offset, string) {
	  var prev = string.charAt(offset - 1);
	  var next = string.charAt(offset + 1);
	  if ((low$1.test(match) && !hi$1.test(next)) || (hi$1.test(match) && !low$1.test(prev))) {
	    return '\\u' + match.charCodeAt(0).toString(16);
	  } return match;
	};

	var FORCED$m = fails(function () {
	  return $stringify$2('\uDF06\uD834') !== '"\\udf06\\ud834"'
	    || $stringify$2('\uDEAD') !== '"\\udead"';
	});

	if ($stringify$2) {
	  // https://github.com/tc39/proposal-well-formed-stringify
	  _export({ target: 'JSON', stat: true, forced: FORCED$m }, {
	    // eslint-disable-next-line no-unused-vars
	    stringify: function stringify(it, replacer, space) {
	      var result = $stringify$2.apply(null, arguments);
	      return typeof result == 'string' ? result.replace(re$1, fix$1) : result;
	    }
	  });
	}

	if (!path.JSON) path.JSON = { stringify: JSON.stringify };

	// eslint-disable-next-line no-unused-vars
	var stringify = function stringify(it, replacer, space) {
	  return path.JSON.stringify.apply(null, arguments);
	};

	var stringify$1 = stringify;

	var stringify$2 = stringify$1;

	var iterators$1 = {};

	var functionToString$1 = Function.toString;

	// this helper broken in `3.4.1-3.4.4`, so we can't use `shared` helper
	if (typeof sharedStore.inspectSource != 'function') {
	  sharedStore.inspectSource = function (it) {
	    return functionToString$1.call(it);
	  };
	}

	var inspectSource$1 = sharedStore.inspectSource;

	var WeakMap$2 = global_1.WeakMap;

	var nativeWeakMap$1 = typeof WeakMap$2 === 'function' && /native code/.test(inspectSource$1(WeakMap$2));

	var keys$4 = shared('keys');

	var sharedKey$1 = function (key) {
	  return keys$4[key] || (keys$4[key] = uid(key));
	};

	var WeakMap$3 = global_1.WeakMap;
	var set$4, get$3, has$3;

	var enforce$1 = function (it) {
	  return has$3(it) ? get$3(it) : set$4(it, {});
	};

	var getterFor$1 = function (TYPE) {
	  return function (it) {
	    var state;
	    if (!isObject(it) || (state = get$3(it)).type !== TYPE) {
	      throw TypeError('Incompatible receiver, ' + TYPE + ' required');
	    } return state;
	  };
	};

	if (nativeWeakMap$1) {
	  var store$3 = new WeakMap$3();
	  var wmget$1 = store$3.get;
	  var wmhas$1 = store$3.has;
	  var wmset$1 = store$3.set;
	  set$4 = function (it, metadata) {
	    wmset$1.call(store$3, it, metadata);
	    return metadata;
	  };
	  get$3 = function (it) {
	    return wmget$1.call(store$3, it) || {};
	  };
	  has$3 = function (it) {
	    return wmhas$1.call(store$3, it);
	  };
	} else {
	  var STATE$1 = sharedKey$1('state');
	  hiddenKeys[STATE$1] = true;
	  set$4 = function (it, metadata) {
	    createNonEnumerableProperty(it, STATE$1, metadata);
	    return metadata;
	  };
	  get$3 = function (it) {
	    return has(it, STATE$1) ? it[STATE$1] : {};
	  };
	  has$3 = function (it) {
	    return has(it, STATE$1);
	  };
	}

	var internalState$1 = {
	  set: set$4,
	  get: get$3,
	  has: has$3,
	  enforce: enforce$1,
	  getterFor: getterFor$1
	};

	var correctPrototypeGetter$1 = !fails(function () {
	  function F() { /* empty */ }
	  F.prototype.constructor = null;
	  return Object.getPrototypeOf(new F()) !== F.prototype;
	});

	var IE_PROTO$2 = sharedKey$1('IE_PROTO');
	var ObjectPrototype$4 = Object.prototype;

	// `Object.getPrototypeOf` method
	// https://tc39.github.io/ecma262/#sec-object.getprototypeof
	var objectGetPrototypeOf$1 = correctPrototypeGetter$1 ? Object.getPrototypeOf : function (O) {
	  O = toObject(O);
	  if (has(O, IE_PROTO$2)) return O[IE_PROTO$2];
	  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
	    return O.constructor.prototype;
	  } return O instanceof Object ? ObjectPrototype$4 : null;
	};

	var ITERATOR$9 = wellKnownSymbol('iterator');
	var BUGGY_SAFARI_ITERATORS$2 = false;

	// `%IteratorPrototype%` object
	// https://tc39.github.io/ecma262/#sec-%iteratorprototype%-object
	var IteratorPrototype$3, PrototypeOfArrayIteratorPrototype$1, arrayIterator$1;

	if ([].keys) {
	  arrayIterator$1 = [].keys();
	  // Safari 8 has buggy iterators w/o `next`
	  if (!('next' in arrayIterator$1)) BUGGY_SAFARI_ITERATORS$2 = true;
	  else {
	    PrototypeOfArrayIteratorPrototype$1 = objectGetPrototypeOf$1(objectGetPrototypeOf$1(arrayIterator$1));
	    if (PrototypeOfArrayIteratorPrototype$1 !== Object.prototype) IteratorPrototype$3 = PrototypeOfArrayIteratorPrototype$1;
	  }
	}

	if (IteratorPrototype$3 == undefined) IteratorPrototype$3 = {};

	var iteratorsCore$1 = {
	  IteratorPrototype: IteratorPrototype$3,
	  BUGGY_SAFARI_ITERATORS: BUGGY_SAFARI_ITERATORS$2
	};

	// `Object.defineProperties` method
	// https://tc39.github.io/ecma262/#sec-object.defineproperties
	var objectDefineProperties$1 = descriptors ? Object.defineProperties : function defineProperties(O, Properties) {
	  anObject(O);
	  var keys = objectKeys(Properties);
	  var length = keys.length;
	  var index = 0;
	  var key;
	  while (length > index) objectDefineProperty.f(O, key = keys[index++], Properties[key]);
	  return O;
	};

	var html$1 = getBuiltIn('document', 'documentElement');

	var GT$1 = '>';
	var LT$1 = '<';
	var PROTOTYPE$3 = 'prototype';
	var SCRIPT$1 = 'script';
	var IE_PROTO$3 = sharedKey$1('IE_PROTO');

	var EmptyConstructor$1 = function () { /* empty */ };

	var scriptTag$1 = function (content) {
	  return LT$1 + SCRIPT$1 + GT$1 + content + LT$1 + '/' + SCRIPT$1 + GT$1;
	};

	// Create object with fake `null` prototype: use ActiveX Object with cleared prototype
	var NullProtoObjectViaActiveX$1 = function (activeXDocument) {
	  activeXDocument.write(scriptTag$1(''));
	  activeXDocument.close();
	  var temp = activeXDocument.parentWindow.Object;
	  activeXDocument = null; // avoid memory leak
	  return temp;
	};

	// Create object with fake `null` prototype: use iframe Object with cleared prototype
	var NullProtoObjectViaIFrame$1 = function () {
	  // Thrash, waste and sodomy: IE GC bug
	  var iframe = documentCreateElement('iframe');
	  var JS = 'java' + SCRIPT$1 + ':';
	  var iframeDocument;
	  iframe.style.display = 'none';
	  html$1.appendChild(iframe);
	  // https://github.com/zloirock/core-js/issues/475
	  iframe.src = String(JS);
	  iframeDocument = iframe.contentWindow.document;
	  iframeDocument.open();
	  iframeDocument.write(scriptTag$1('document.F=Object'));
	  iframeDocument.close();
	  return iframeDocument.F;
	};

	// Check for document.domain and active x support
	// No need to use active x approach when document.domain is not set
	// see https://github.com/es-shims/es5-shim/issues/150
	// variation of https://github.com/kitcambridge/es5-shim/commit/4f738ac066346
	// avoid IE GC bug
	var activeXDocument$1;
	var NullProtoObject$1 = function () {
	  try {
	    /* global ActiveXObject */
	    activeXDocument$1 = document.domain && new ActiveXObject('htmlfile');
	  } catch (error) { /* ignore */ }
	  NullProtoObject$1 = activeXDocument$1 ? NullProtoObjectViaActiveX$1(activeXDocument$1) : NullProtoObjectViaIFrame$1();
	  var length = enumBugKeys.length;
	  while (length--) delete NullProtoObject$1[PROTOTYPE$3][enumBugKeys[length]];
	  return NullProtoObject$1();
	};

	hiddenKeys[IE_PROTO$3] = true;

	// `Object.create` method
	// https://tc39.github.io/ecma262/#sec-object.create
	var objectCreate$1 = Object.create || function create(O, Properties) {
	  var result;
	  if (O !== null) {
	    EmptyConstructor$1[PROTOTYPE$3] = anObject(O);
	    result = new EmptyConstructor$1();
	    EmptyConstructor$1[PROTOTYPE$3] = null;
	    // add "__proto__" for Object.getPrototypeOf polyfill
	    result[IE_PROTO$3] = O;
	  } else result = NullProtoObject$1();
	  return Properties === undefined ? result : objectDefineProperties$1(result, Properties);
	};

	var TO_STRING_TAG$5 = wellKnownSymbol('toStringTag');
	var test$3 = {};

	test$3[TO_STRING_TAG$5] = 'z';

	var toStringTagSupport$1 = String(test$3) === '[object z]';

	var TO_STRING_TAG$6 = wellKnownSymbol('toStringTag');
	// ES3 wrong here
	var CORRECT_ARGUMENTS$1 = classofRaw(function () { return arguments; }()) == 'Arguments';

	// fallback for IE11 Script Access Denied error
	var tryGet$1 = function (it, key) {
	  try {
	    return it[key];
	  } catch (error) { /* empty */ }
	};

	// getting tag from ES6+ `Object.prototype.toString`
	var classof$1 = toStringTagSupport$1 ? classofRaw : function (it) {
	  var O, tag, result;
	  return it === undefined ? 'Undefined' : it === null ? 'Null'
	    // @@toStringTag case
	    : typeof (tag = tryGet$1(O = Object(it), TO_STRING_TAG$6)) == 'string' ? tag
	    // builtinTag case
	    : CORRECT_ARGUMENTS$1 ? classofRaw(O)
	    // ES3 arguments fallback
	    : (result = classofRaw(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : result;
	};

	// `Object.prototype.toString` method implementation
	// https://tc39.github.io/ecma262/#sec-object.prototype.tostring
	var objectToString$1 = toStringTagSupport$1 ? {}.toString : function toString() {
	  return '[object ' + classof$1(this) + ']';
	};

	var defineProperty$e = objectDefineProperty.f;





	var TO_STRING_TAG$7 = wellKnownSymbol('toStringTag');

	var setToStringTag$1 = function (it, TAG, STATIC, SET_METHOD) {
	  if (it) {
	    var target = STATIC ? it : it.prototype;
	    if (!has(target, TO_STRING_TAG$7)) {
	      defineProperty$e(target, TO_STRING_TAG$7, { configurable: true, value: TAG });
	    }
	    if (SET_METHOD && !toStringTagSupport$1) {
	      createNonEnumerableProperty(target, 'toString', objectToString$1);
	    }
	  }
	};

	var IteratorPrototype$4 = iteratorsCore$1.IteratorPrototype;





	var returnThis$3 = function () { return this; };

	var createIteratorConstructor$1 = function (IteratorConstructor, NAME, next) {
	  var TO_STRING_TAG = NAME + ' Iterator';
	  IteratorConstructor.prototype = objectCreate$1(IteratorPrototype$4, { next: createPropertyDescriptor(1, next) });
	  setToStringTag$1(IteratorConstructor, TO_STRING_TAG, false, true);
	  iterators$1[TO_STRING_TAG] = returnThis$3;
	  return IteratorConstructor;
	};

	var aPossiblePrototype$1 = function (it) {
	  if (!isObject(it) && it !== null) {
	    throw TypeError("Can't set " + String(it) + ' as a prototype');
	  } return it;
	};

	// `Object.setPrototypeOf` method
	// https://tc39.github.io/ecma262/#sec-object.setprototypeof
	// Works with __proto__ only. Old v8 can't work with null proto objects.
	/* eslint-disable no-proto */
	var objectSetPrototypeOf$1 = Object.setPrototypeOf || ('__proto__' in {} ? function () {
	  var CORRECT_SETTER = false;
	  var test = {};
	  var setter;
	  try {
	    setter = Object.getOwnPropertyDescriptor(Object.prototype, '__proto__').set;
	    setter.call(test, []);
	    CORRECT_SETTER = test instanceof Array;
	  } catch (error) { /* empty */ }
	  return function setPrototypeOf(O, proto) {
	    anObject(O);
	    aPossiblePrototype$1(proto);
	    if (CORRECT_SETTER) setter.call(O, proto);
	    else O.__proto__ = proto;
	    return O;
	  };
	}() : undefined);

	var redefine$1 = function (target, key, value, options) {
	  if (options && options.enumerable) target[key] = value;
	  else createNonEnumerableProperty(target, key, value);
	};

	var IteratorPrototype$5 = iteratorsCore$1.IteratorPrototype;
	var BUGGY_SAFARI_ITERATORS$3 = iteratorsCore$1.BUGGY_SAFARI_ITERATORS;
	var ITERATOR$a = wellKnownSymbol('iterator');
	var KEYS$1 = 'keys';
	var VALUES$1 = 'values';
	var ENTRIES$1 = 'entries';

	var returnThis$4 = function () { return this; };

	var defineIterator$1 = function (Iterable, NAME, IteratorConstructor, next, DEFAULT, IS_SET, FORCED) {
	  createIteratorConstructor$1(IteratorConstructor, NAME, next);

	  var getIterationMethod = function (KIND) {
	    if (KIND === DEFAULT && defaultIterator) return defaultIterator;
	    if (!BUGGY_SAFARI_ITERATORS$3 && KIND in IterablePrototype) return IterablePrototype[KIND];
	    switch (KIND) {
	      case KEYS$1: return function keys() { return new IteratorConstructor(this, KIND); };
	      case VALUES$1: return function values() { return new IteratorConstructor(this, KIND); };
	      case ENTRIES$1: return function entries() { return new IteratorConstructor(this, KIND); };
	    } return function () { return new IteratorConstructor(this); };
	  };

	  var TO_STRING_TAG = NAME + ' Iterator';
	  var INCORRECT_VALUES_NAME = false;
	  var IterablePrototype = Iterable.prototype;
	  var nativeIterator = IterablePrototype[ITERATOR$a]
	    || IterablePrototype['@@iterator']
	    || DEFAULT && IterablePrototype[DEFAULT];
	  var defaultIterator = !BUGGY_SAFARI_ITERATORS$3 && nativeIterator || getIterationMethod(DEFAULT);
	  var anyNativeIterator = NAME == 'Array' ? IterablePrototype.entries || nativeIterator : nativeIterator;
	  var CurrentIteratorPrototype, methods, KEY;

	  // fix native
	  if (anyNativeIterator) {
	    CurrentIteratorPrototype = objectGetPrototypeOf$1(anyNativeIterator.call(new Iterable()));
	    if (IteratorPrototype$5 !== Object.prototype && CurrentIteratorPrototype.next) {
	      if (!isPure && objectGetPrototypeOf$1(CurrentIteratorPrototype) !== IteratorPrototype$5) {
	        if (objectSetPrototypeOf$1) {
	          objectSetPrototypeOf$1(CurrentIteratorPrototype, IteratorPrototype$5);
	        } else if (typeof CurrentIteratorPrototype[ITERATOR$a] != 'function') {
	          createNonEnumerableProperty(CurrentIteratorPrototype, ITERATOR$a, returnThis$4);
	        }
	      }
	      // Set @@toStringTag to native iterators
	      setToStringTag$1(CurrentIteratorPrototype, TO_STRING_TAG, true, true);
	      if (isPure) iterators$1[TO_STRING_TAG] = returnThis$4;
	    }
	  }

	  // fix Array#{values, @@iterator}.name in V8 / FF
	  if (DEFAULT == VALUES$1 && nativeIterator && nativeIterator.name !== VALUES$1) {
	    INCORRECT_VALUES_NAME = true;
	    defaultIterator = function values() { return nativeIterator.call(this); };
	  }

	  // define iterator
	  if ((!isPure || FORCED) && IterablePrototype[ITERATOR$a] !== defaultIterator) {
	    createNonEnumerableProperty(IterablePrototype, ITERATOR$a, defaultIterator);
	  }
	  iterators$1[NAME] = defaultIterator;

	  // export additional methods
	  if (DEFAULT) {
	    methods = {
	      values: getIterationMethod(VALUES$1),
	      keys: IS_SET ? defaultIterator : getIterationMethod(KEYS$1),
	      entries: getIterationMethod(ENTRIES$1)
	    };
	    if (FORCED) for (KEY in methods) {
	      if (BUGGY_SAFARI_ITERATORS$3 || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) {
	        redefine$1(IterablePrototype, KEY, methods[KEY]);
	      }
	    } else _export({ target: NAME, proto: true, forced: BUGGY_SAFARI_ITERATORS$3 || INCORRECT_VALUES_NAME }, methods);
	  }

	  return methods;
	};

	var ARRAY_ITERATOR$1 = 'Array Iterator';
	var setInternalState$b = internalState$1.set;
	var getInternalState$7 = internalState$1.getterFor(ARRAY_ITERATOR$1);

	// `Array.prototype.entries` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.entries
	// `Array.prototype.keys` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.keys
	// `Array.prototype.values` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.values
	// `Array.prototype[@@iterator]` method
	// https://tc39.github.io/ecma262/#sec-array.prototype-@@iterator
	// `CreateArrayIterator` internal method
	// https://tc39.github.io/ecma262/#sec-createarrayiterator
	var es_array_iterator$1 = defineIterator$1(Array, 'Array', function (iterated, kind) {
	  setInternalState$b(this, {
	    type: ARRAY_ITERATOR$1,
	    target: toIndexedObject(iterated), // target
	    index: 0,                          // next index
	    kind: kind                         // kind
	  });
	// `%ArrayIteratorPrototype%.next` method
	// https://tc39.github.io/ecma262/#sec-%arrayiteratorprototype%.next
	}, function () {
	  var state = getInternalState$7(this);
	  var target = state.target;
	  var kind = state.kind;
	  var index = state.index++;
	  if (!target || index >= target.length) {
	    state.target = undefined;
	    return { value: undefined, done: true };
	  }
	  if (kind == 'keys') return { value: index, done: false };
	  if (kind == 'values') return { value: target[index], done: false };
	  return { value: [index, target[index]], done: false };
	}, 'values');

	// argumentsList[@@iterator] is %ArrayProto_values%
	// https://tc39.github.io/ecma262/#sec-createunmappedargumentsobject
	// https://tc39.github.io/ecma262/#sec-createmappedargumentsobject
	iterators$1.Arguments = iterators$1.Array;

	// iterable DOM collections
	// flag - `iterable` interface - 'entries', 'keys', 'values', 'forEach' methods
	var domIterables$1 = {
	  CSSRuleList: 0,
	  CSSStyleDeclaration: 0,
	  CSSValueList: 0,
	  ClientRectList: 0,
	  DOMRectList: 0,
	  DOMStringList: 0,
	  DOMTokenList: 1,
	  DataTransferItemList: 0,
	  FileList: 0,
	  HTMLAllCollection: 0,
	  HTMLCollection: 0,
	  HTMLFormElement: 0,
	  HTMLSelectElement: 0,
	  MediaList: 0,
	  MimeTypeArray: 0,
	  NamedNodeMap: 0,
	  NodeList: 1,
	  PaintRequestList: 0,
	  Plugin: 0,
	  PluginArray: 0,
	  SVGLengthList: 0,
	  SVGNumberList: 0,
	  SVGPathSegList: 0,
	  SVGPointList: 0,
	  SVGStringList: 0,
	  SVGTransformList: 0,
	  SourceBufferList: 0,
	  StyleSheetList: 0,
	  TextTrackCueList: 0,
	  TextTrackList: 0,
	  TouchList: 0
	};

	var TO_STRING_TAG$8 = wellKnownSymbol('toStringTag');

	for (var COLLECTION_NAME$2 in domIterables$1) {
	  var Collection$2 = global_1[COLLECTION_NAME$2];
	  var CollectionPrototype$2 = Collection$2 && Collection$2.prototype;
	  if (CollectionPrototype$2 && classof$1(CollectionPrototype$2) !== TO_STRING_TAG$8) {
	    createNonEnumerableProperty(CollectionPrototype$2, TO_STRING_TAG$8, COLLECTION_NAME$2);
	  }
	  iterators$1[COLLECTION_NAME$2] = iterators$1.Array;
	}

	var arrayMethodIsStrict$1 = function (METHOD_NAME, argument) {
	  var method = [][METHOD_NAME];
	  return !!method && fails(function () {
	    // eslint-disable-next-line no-useless-call,no-throw-literal
	    method.call(null, argument || function () { throw 1; }, 1);
	  });
	};

	var $forEach$3 = arrayIteration$1.forEach;



	var STRICT_METHOD$9 = arrayMethodIsStrict$1('forEach');
	var USES_TO_LENGTH$g = arrayMethodUsesToLength('forEach');

	// `Array.prototype.forEach` method implementation
	// https://tc39.github.io/ecma262/#sec-array.prototype.foreach
	var arrayForEach$1 = (!STRICT_METHOD$9 || !USES_TO_LENGTH$g) ? function forEach(callbackfn /* , thisArg */) {
	  return $forEach$3(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	} : [].forEach;

	// `Array.prototype.forEach` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.foreach
	_export({ target: 'Array', proto: true, forced: [].forEach != arrayForEach$1 }, {
	  forEach: arrayForEach$1
	});

	var forEach = entryVirtual('Array').forEach;

	var forEach$1 = forEach;

	var ArrayPrototype$4 = Array.prototype;

	var DOMIterables = {
	  DOMTokenList: true,
	  NodeList: true
	};

	var forEach_1 = function (it) {
	  var own = it.forEach;
	  return it === ArrayPrototype$4 || (it instanceof Array && own === ArrayPrototype$4.forEach)
	    // eslint-disable-next-line no-prototype-builtins
	    || DOMIterables.hasOwnProperty(classof$1(it)) ? forEach$1 : own;
	};

	var forEach$2 = forEach_1;

	var forEach$3 = forEach$2;

	var nativeGetOwnPropertyDescriptor$4 = objectGetOwnPropertyDescriptor.f;


	var FAILS_ON_PRIMITIVES$a = fails(function () { nativeGetOwnPropertyDescriptor$4(1); });
	var FORCED$n = !descriptors || FAILS_ON_PRIMITIVES$a;

	// `Object.getOwnPropertyDescriptor` method
	// https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptor
	_export({ target: 'Object', stat: true, forced: FORCED$n, sham: !descriptors }, {
	  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(it, key) {
	    return nativeGetOwnPropertyDescriptor$4(toIndexedObject(it), key);
	  }
	});

	var getOwnPropertyDescriptor_1 = createCommonjsModule(function (module) {
	var Object = path.Object;

	var getOwnPropertyDescriptor = module.exports = function getOwnPropertyDescriptor(it, key) {
	  return Object.getOwnPropertyDescriptor(it, key);
	};

	if (Object.getOwnPropertyDescriptor.sham) getOwnPropertyDescriptor.sham = true;
	});

	var getOwnPropertyDescriptor$b = getOwnPropertyDescriptor_1;

	var getOwnPropertyDescriptor$c = getOwnPropertyDescriptor$b;

	var $filter$2 = arrayIteration$1.filter;



	var HAS_SPECIES_SUPPORT$5 = arrayMethodHasSpeciesSupport$1('filter');
	// Edge 14- issue
	var USES_TO_LENGTH$h = arrayMethodUsesToLength('filter');

	// `Array.prototype.filter` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.filter
	// with adding support of @@species
	_export({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT$5 || !USES_TO_LENGTH$h }, {
	  filter: function filter(callbackfn /* , thisArg */) {
	    return $filter$2(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	var filter = entryVirtual('Array').filter;

	var ArrayPrototype$5 = Array.prototype;

	var filter_1 = function (it) {
	  var own = it.filter;
	  return it === ArrayPrototype$5 || (it instanceof Array && own === ArrayPrototype$5.filter) ? filter : own;
	};

	var filter$1 = filter_1;

	var filter$2 = filter$1;

	var createProperty$1 = function (object, key, value) {
	  var propertyKey = toPrimitive(key);
	  if (propertyKey in object) objectDefineProperty.f(object, propertyKey, createPropertyDescriptor(0, value));
	  else object[propertyKey] = value;
	};

	var IS_CONCAT_SPREADABLE$1 = wellKnownSymbol('isConcatSpreadable');
	var MAX_SAFE_INTEGER$2 = 0x1FFFFFFFFFFFFF;
	var MAXIMUM_ALLOWED_INDEX_EXCEEDED$1 = 'Maximum allowed index exceeded';

	// We can't use this feature detection in V8 since it causes
	// deoptimization and serious performance degradation
	// https://github.com/zloirock/core-js/issues/679
	var IS_CONCAT_SPREADABLE_SUPPORT$1 = engineV8Version$1 >= 51 || !fails(function () {
	  var array = [];
	  array[IS_CONCAT_SPREADABLE$1] = false;
	  return array.concat()[0] !== array;
	});

	var SPECIES_SUPPORT$1 = arrayMethodHasSpeciesSupport$1('concat');

	var isConcatSpreadable$1 = function (O) {
	  if (!isObject(O)) return false;
	  var spreadable = O[IS_CONCAT_SPREADABLE$1];
	  return spreadable !== undefined ? !!spreadable : isArray$1(O);
	};

	var FORCED$o = !IS_CONCAT_SPREADABLE_SUPPORT$1 || !SPECIES_SUPPORT$1;

	// `Array.prototype.concat` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.concat
	// with adding support of @@isConcatSpreadable and @@species
	_export({ target: 'Array', proto: true, forced: FORCED$o }, {
	  concat: function concat(arg) { // eslint-disable-line no-unused-vars
	    var O = toObject(this);
	    var A = arraySpeciesCreate$1(O, 0);
	    var n = 0;
	    var i, k, length, len, E;
	    for (i = -1, length = arguments.length; i < length; i++) {
	      E = i === -1 ? O : arguments[i];
	      if (isConcatSpreadable$1(E)) {
	        len = toLength(E.length);
	        if (n + len > MAX_SAFE_INTEGER$2) throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED$1);
	        for (k = 0; k < len; k++, n++) if (k in E) createProperty$1(A, n, E[k]);
	      } else {
	        if (n >= MAX_SAFE_INTEGER$2) throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED$1);
	        createProperty$1(A, n++, E);
	      }
	    }
	    A.length = n;
	    return A;
	  }
	});

	var concat = entryVirtual('Array').concat;

	var ArrayPrototype$6 = Array.prototype;

	var concat_1 = function (it) {
	  var own = it.concat;
	  return it === ArrayPrototype$6 || (it instanceof Array && own === ArrayPrototype$6.concat) ? concat : own;
	};

	var concat$1 = concat_1;

	var concat$2 = concat$1;

	var hiddenKeys$3 = enumBugKeys.concat('length', 'prototype');

	// `Object.getOwnPropertyNames` method
	// https://tc39.github.io/ecma262/#sec-object.getownpropertynames
	var f$c = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
	  return objectKeysInternal(O, hiddenKeys$3);
	};

	var objectGetOwnPropertyNames$1 = {
		f: f$c
	};

	var nativeGetOwnPropertyNames$3 = objectGetOwnPropertyNames$1.f;

	var toString$3 = {}.toString;

	var windowNames$1 = typeof window == 'object' && window && Object.getOwnPropertyNames
	  ? Object.getOwnPropertyNames(window) : [];

	var getWindowNames$1 = function (it) {
	  try {
	    return nativeGetOwnPropertyNames$3(it);
	  } catch (error) {
	    return windowNames$1.slice();
	  }
	};

	// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
	var f$d = function getOwnPropertyNames(it) {
	  return windowNames$1 && toString$3.call(it) == '[object Window]'
	    ? getWindowNames$1(it)
	    : nativeGetOwnPropertyNames$3(toIndexedObject(it));
	};

	var objectGetOwnPropertyNamesExternal$1 = {
		f: f$d
	};

	var f$e = wellKnownSymbol;

	var wellKnownSymbolWrapped$1 = {
		f: f$e
	};

	var defineProperty$f = objectDefineProperty.f;

	var defineWellKnownSymbol$1 = function (NAME) {
	  var Symbol = path.Symbol || (path.Symbol = {});
	  if (!has(Symbol, NAME)) defineProperty$f(Symbol, NAME, {
	    value: wellKnownSymbolWrapped$1.f(NAME)
	  });
	};

	var $forEach$4 = arrayIteration$1.forEach;

	var HIDDEN$1 = sharedKey$1('hidden');
	var SYMBOL$1 = 'Symbol';
	var PROTOTYPE$4 = 'prototype';
	var TO_PRIMITIVE$2 = wellKnownSymbol('toPrimitive');
	var setInternalState$c = internalState$1.set;
	var getInternalState$8 = internalState$1.getterFor(SYMBOL$1);
	var ObjectPrototype$5 = Object[PROTOTYPE$4];
	var $Symbol$1 = global_1.Symbol;
	var $stringify$3 = getBuiltIn('JSON', 'stringify');
	var nativeGetOwnPropertyDescriptor$5 = objectGetOwnPropertyDescriptor.f;
	var nativeDefineProperty$3 = objectDefineProperty.f;
	var nativeGetOwnPropertyNames$4 = objectGetOwnPropertyNamesExternal$1.f;
	var nativePropertyIsEnumerable$3 = objectPropertyIsEnumerable.f;
	var AllSymbols$1 = shared('symbols');
	var ObjectPrototypeSymbols$1 = shared('op-symbols');
	var StringToSymbolRegistry$1 = shared('string-to-symbol-registry');
	var SymbolToStringRegistry$1 = shared('symbol-to-string-registry');
	var WellKnownSymbolsStore$3 = shared('wks');
	var QObject$1 = global_1.QObject;
	// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
	var USE_SETTER$1 = !QObject$1 || !QObject$1[PROTOTYPE$4] || !QObject$1[PROTOTYPE$4].findChild;

	// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
	var setSymbolDescriptor$1 = descriptors && fails(function () {
	  return objectCreate$1(nativeDefineProperty$3({}, 'a', {
	    get: function () { return nativeDefineProperty$3(this, 'a', { value: 7 }).a; }
	  })).a != 7;
	}) ? function (O, P, Attributes) {
	  var ObjectPrototypeDescriptor = nativeGetOwnPropertyDescriptor$5(ObjectPrototype$5, P);
	  if (ObjectPrototypeDescriptor) delete ObjectPrototype$5[P];
	  nativeDefineProperty$3(O, P, Attributes);
	  if (ObjectPrototypeDescriptor && O !== ObjectPrototype$5) {
	    nativeDefineProperty$3(ObjectPrototype$5, P, ObjectPrototypeDescriptor);
	  }
	} : nativeDefineProperty$3;

	var wrap$3 = function (tag, description) {
	  var symbol = AllSymbols$1[tag] = objectCreate$1($Symbol$1[PROTOTYPE$4]);
	  setInternalState$c(symbol, {
	    type: SYMBOL$1,
	    tag: tag,
	    description: description
	  });
	  if (!descriptors) symbol.description = description;
	  return symbol;
	};

	var isSymbol$1 = useSymbolAsUid ? function (it) {
	  return typeof it == 'symbol';
	} : function (it) {
	  return Object(it) instanceof $Symbol$1;
	};

	var $defineProperty$1 = function defineProperty(O, P, Attributes) {
	  if (O === ObjectPrototype$5) $defineProperty$1(ObjectPrototypeSymbols$1, P, Attributes);
	  anObject(O);
	  var key = toPrimitive(P, true);
	  anObject(Attributes);
	  if (has(AllSymbols$1, key)) {
	    if (!Attributes.enumerable) {
	      if (!has(O, HIDDEN$1)) nativeDefineProperty$3(O, HIDDEN$1, createPropertyDescriptor(1, {}));
	      O[HIDDEN$1][key] = true;
	    } else {
	      if (has(O, HIDDEN$1) && O[HIDDEN$1][key]) O[HIDDEN$1][key] = false;
	      Attributes = objectCreate$1(Attributes, { enumerable: createPropertyDescriptor(0, false) });
	    } return setSymbolDescriptor$1(O, key, Attributes);
	  } return nativeDefineProperty$3(O, key, Attributes);
	};

	var $defineProperties$1 = function defineProperties(O, Properties) {
	  anObject(O);
	  var properties = toIndexedObject(Properties);
	  var keys = objectKeys(properties).concat($getOwnPropertySymbols$1(properties));
	  $forEach$4(keys, function (key) {
	    if (!descriptors || $propertyIsEnumerable$1.call(properties, key)) $defineProperty$1(O, key, properties[key]);
	  });
	  return O;
	};

	var $create$1 = function create(O, Properties) {
	  return Properties === undefined ? objectCreate$1(O) : $defineProperties$1(objectCreate$1(O), Properties);
	};

	var $propertyIsEnumerable$1 = function propertyIsEnumerable(V) {
	  var P = toPrimitive(V, true);
	  var enumerable = nativePropertyIsEnumerable$3.call(this, P);
	  if (this === ObjectPrototype$5 && has(AllSymbols$1, P) && !has(ObjectPrototypeSymbols$1, P)) return false;
	  return enumerable || !has(this, P) || !has(AllSymbols$1, P) || has(this, HIDDEN$1) && this[HIDDEN$1][P] ? enumerable : true;
	};

	var $getOwnPropertyDescriptor$1 = function getOwnPropertyDescriptor(O, P) {
	  var it = toIndexedObject(O);
	  var key = toPrimitive(P, true);
	  if (it === ObjectPrototype$5 && has(AllSymbols$1, key) && !has(ObjectPrototypeSymbols$1, key)) return;
	  var descriptor = nativeGetOwnPropertyDescriptor$5(it, key);
	  if (descriptor && has(AllSymbols$1, key) && !(has(it, HIDDEN$1) && it[HIDDEN$1][key])) {
	    descriptor.enumerable = true;
	  }
	  return descriptor;
	};

	var $getOwnPropertyNames$1 = function getOwnPropertyNames(O) {
	  var names = nativeGetOwnPropertyNames$4(toIndexedObject(O));
	  var result = [];
	  $forEach$4(names, function (key) {
	    if (!has(AllSymbols$1, key) && !has(hiddenKeys, key)) result.push(key);
	  });
	  return result;
	};

	var $getOwnPropertySymbols$1 = function getOwnPropertySymbols(O) {
	  var IS_OBJECT_PROTOTYPE = O === ObjectPrototype$5;
	  var names = nativeGetOwnPropertyNames$4(IS_OBJECT_PROTOTYPE ? ObjectPrototypeSymbols$1 : toIndexedObject(O));
	  var result = [];
	  $forEach$4(names, function (key) {
	    if (has(AllSymbols$1, key) && (!IS_OBJECT_PROTOTYPE || has(ObjectPrototype$5, key))) {
	      result.push(AllSymbols$1[key]);
	    }
	  });
	  return result;
	};

	// `Symbol` constructor
	// https://tc39.github.io/ecma262/#sec-symbol-constructor
	if (!nativeSymbol) {
	  $Symbol$1 = function Symbol() {
	    if (this instanceof $Symbol$1) throw TypeError('Symbol is not a constructor');
	    var description = !arguments.length || arguments[0] === undefined ? undefined : String(arguments[0]);
	    var tag = uid(description);
	    var setter = function (value) {
	      if (this === ObjectPrototype$5) setter.call(ObjectPrototypeSymbols$1, value);
	      if (has(this, HIDDEN$1) && has(this[HIDDEN$1], tag)) this[HIDDEN$1][tag] = false;
	      setSymbolDescriptor$1(this, tag, createPropertyDescriptor(1, value));
	    };
	    if (descriptors && USE_SETTER$1) setSymbolDescriptor$1(ObjectPrototype$5, tag, { configurable: true, set: setter });
	    return wrap$3(tag, description);
	  };

	  redefine$1($Symbol$1[PROTOTYPE$4], 'toString', function toString() {
	    return getInternalState$8(this).tag;
	  });

	  redefine$1($Symbol$1, 'withoutSetter', function (description) {
	    return wrap$3(uid(description), description);
	  });

	  objectPropertyIsEnumerable.f = $propertyIsEnumerable$1;
	  objectDefineProperty.f = $defineProperty$1;
	  objectGetOwnPropertyDescriptor.f = $getOwnPropertyDescriptor$1;
	  objectGetOwnPropertyNames$1.f = objectGetOwnPropertyNamesExternal$1.f = $getOwnPropertyNames$1;
	  objectGetOwnPropertySymbols.f = $getOwnPropertySymbols$1;

	  wellKnownSymbolWrapped$1.f = function (name) {
	    return wrap$3(wellKnownSymbol(name), name);
	  };

	  if (descriptors) {
	    // https://github.com/tc39/proposal-Symbol-description
	    nativeDefineProperty$3($Symbol$1[PROTOTYPE$4], 'description', {
	      configurable: true,
	      get: function description() {
	        return getInternalState$8(this).description;
	      }
	    });
	  }
	}

	_export({ global: true, wrap: true, forced: !nativeSymbol, sham: !nativeSymbol }, {
	  Symbol: $Symbol$1
	});

	$forEach$4(objectKeys(WellKnownSymbolsStore$3), function (name) {
	  defineWellKnownSymbol$1(name);
	});

	_export({ target: SYMBOL$1, stat: true, forced: !nativeSymbol }, {
	  // `Symbol.for` method
	  // https://tc39.github.io/ecma262/#sec-symbol.for
	  'for': function (key) {
	    var string = String(key);
	    if (has(StringToSymbolRegistry$1, string)) return StringToSymbolRegistry$1[string];
	    var symbol = $Symbol$1(string);
	    StringToSymbolRegistry$1[string] = symbol;
	    SymbolToStringRegistry$1[symbol] = string;
	    return symbol;
	  },
	  // `Symbol.keyFor` method
	  // https://tc39.github.io/ecma262/#sec-symbol.keyfor
	  keyFor: function keyFor(sym) {
	    if (!isSymbol$1(sym)) throw TypeError(sym + ' is not a symbol');
	    if (has(SymbolToStringRegistry$1, sym)) return SymbolToStringRegistry$1[sym];
	  },
	  useSetter: function () { USE_SETTER$1 = true; },
	  useSimple: function () { USE_SETTER$1 = false; }
	});

	_export({ target: 'Object', stat: true, forced: !nativeSymbol, sham: !descriptors }, {
	  // `Object.create` method
	  // https://tc39.github.io/ecma262/#sec-object.create
	  create: $create$1,
	  // `Object.defineProperty` method
	  // https://tc39.github.io/ecma262/#sec-object.defineproperty
	  defineProperty: $defineProperty$1,
	  // `Object.defineProperties` method
	  // https://tc39.github.io/ecma262/#sec-object.defineproperties
	  defineProperties: $defineProperties$1,
	  // `Object.getOwnPropertyDescriptor` method
	  // https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptors
	  getOwnPropertyDescriptor: $getOwnPropertyDescriptor$1
	});

	_export({ target: 'Object', stat: true, forced: !nativeSymbol }, {
	  // `Object.getOwnPropertyNames` method
	  // https://tc39.github.io/ecma262/#sec-object.getownpropertynames
	  getOwnPropertyNames: $getOwnPropertyNames$1,
	  // `Object.getOwnPropertySymbols` method
	  // https://tc39.github.io/ecma262/#sec-object.getownpropertysymbols
	  getOwnPropertySymbols: $getOwnPropertySymbols$1
	});

	// Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives
	// https://bugs.chromium.org/p/v8/issues/detail?id=3443
	_export({ target: 'Object', stat: true, forced: fails(function () { objectGetOwnPropertySymbols.f(1); }) }, {
	  getOwnPropertySymbols: function getOwnPropertySymbols(it) {
	    return objectGetOwnPropertySymbols.f(toObject(it));
	  }
	});

	// `JSON.stringify` method behavior with symbols
	// https://tc39.github.io/ecma262/#sec-json.stringify
	if ($stringify$3) {
	  var FORCED_JSON_STRINGIFY$1 = !nativeSymbol || fails(function () {
	    var symbol = $Symbol$1();
	    // MS Edge converts symbol values to JSON as {}
	    return $stringify$3([symbol]) != '[null]'
	      // WebKit converts symbol values to JSON as null
	      || $stringify$3({ a: symbol }) != '{}'
	      // V8 throws on boxed symbols
	      || $stringify$3(Object(symbol)) != '{}';
	  });

	  _export({ target: 'JSON', stat: true, forced: FORCED_JSON_STRINGIFY$1 }, {
	    // eslint-disable-next-line no-unused-vars
	    stringify: function stringify(it, replacer, space) {
	      var args = [it];
	      var index = 1;
	      var $replacer;
	      while (arguments.length > index) args.push(arguments[index++]);
	      $replacer = replacer;
	      if (!isObject(replacer) && it === undefined || isSymbol$1(it)) return; // IE8 returns string on undefined
	      if (!isArray$1(replacer)) replacer = function (key, value) {
	        if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
	        if (!isSymbol$1(value)) return value;
	      };
	      args[1] = replacer;
	      return $stringify$3.apply(null, args);
	    }
	  });
	}

	// `Symbol.prototype[@@toPrimitive]` method
	// https://tc39.github.io/ecma262/#sec-symbol.prototype-@@toprimitive
	if (!$Symbol$1[PROTOTYPE$4][TO_PRIMITIVE$2]) {
	  createNonEnumerableProperty($Symbol$1[PROTOTYPE$4], TO_PRIMITIVE$2, $Symbol$1[PROTOTYPE$4].valueOf);
	}
	// `Symbol.prototype[@@toStringTag]` property
	// https://tc39.github.io/ecma262/#sec-symbol.prototype-@@tostringtag
	setToStringTag$1($Symbol$1, SYMBOL$1);

	hiddenKeys[HIDDEN$1] = true;

	var getOwnPropertySymbols = path.Object.getOwnPropertySymbols;

	var getOwnPropertySymbols$1 = getOwnPropertySymbols;

	var getOwnPropertySymbols$2 = getOwnPropertySymbols$1;

	var FAILS_ON_PRIMITIVES$b = fails(function () { objectKeys(1); });

	// `Object.keys` method
	// https://tc39.github.io/ecma262/#sec-object.keys
	_export({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES$b }, {
	  keys: function keys(it) {
	    return objectKeys(toObject(it));
	  }
	});

	var keys$5 = path.Object.keys;

	var keys$6 = keys$5;

	var keys$7 = keys$6;

	// `Object.defineProperty` method
	// https://tc39.github.io/ecma262/#sec-object.defineproperty
	_export({ target: 'Object', stat: true, forced: !descriptors, sham: !descriptors }, {
	  defineProperty: objectDefineProperty.f
	});

	var defineProperty_1 = createCommonjsModule(function (module) {
	var Object = path.Object;

	var defineProperty = module.exports = function defineProperty(it, key, desc) {
	  return Object.defineProperty(it, key, desc);
	};

	if (Object.defineProperty.sham) defineProperty.sham = true;
	});

	var defineProperty$g = defineProperty_1;

	var defineProperty$h = defineProperty$g;

	function _defineProperty(obj, key, value) {
	  if (key in obj) {
	    defineProperty$h(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	  } else {
	    obj[key] = value;
	  }

	  return obj;
	}

	var defineProperty$i = _defineProperty;

	function _objectSpread(target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i] != null ? Object(arguments[i]) : {};

	    var ownKeys = keys$7(source);

	    if (typeof getOwnPropertySymbols$2 === 'function') {
	      var _context;

	      ownKeys = concat$2(ownKeys).call(ownKeys, filter$2(_context = getOwnPropertySymbols$2(source)).call(_context, function (sym) {
	        return getOwnPropertyDescriptor$c(source, sym).enumerable;
	      }));
	    }

	    forEach$3(ownKeys).call(ownKeys, function (key) {
	      defineProperty$i(target, key, source[key]);
	    });
	  }

	  return target;
	}

	var objectSpread = _objectSpread;

	// `Array.isArray` method
	// https://tc39.github.io/ecma262/#sec-array.isarray
	_export({ target: 'Array', stat: true }, {
	  isArray: isArray$1
	});

	var isArray$2 = path.Array.isArray;

	var isArray$3 = isArray$2;

	var isArray$4 = isArray$3;

	/** @module SearchStates */

	/**
	 * SearchStates is an ENUM for the various stages of searching,
	 * used to show different templates
	 * @enum {string}
	 */
	var SearchStates = {
	  PRE_SEARCH: 'pre-search',
	  SEARCH_LOADING: 'search-loading',
	  SEARCH_COMPLETE: 'search-complete'
	};

	var propertyIsEnumerable$1 = objectPropertyIsEnumerable.f;

	// `Object.{ entries, values }` methods implementation
	var createMethod$9 = function (TO_ENTRIES) {
	  return function (it) {
	    var O = toIndexedObject(it);
	    var keys = objectKeys(O);
	    var length = keys.length;
	    var i = 0;
	    var result = [];
	    var key;
	    while (length > i) {
	      key = keys[i++];
	      if (!descriptors || propertyIsEnumerable$1.call(O, key)) {
	        result.push(TO_ENTRIES ? [key, O[key]] : O[key]);
	      }
	    }
	    return result;
	  };
	};

	var objectToArray$1 = {
	  // `Object.entries` method
	  // https://tc39.github.io/ecma262/#sec-object.entries
	  entries: createMethod$9(true),
	  // `Object.values` method
	  // https://tc39.github.io/ecma262/#sec-object.values
	  values: createMethod$9(false)
	};

	var $entries$1 = objectToArray$1.entries;

	// `Object.entries` method
	// https://tc39.github.io/ecma262/#sec-object.entries
	_export({ target: 'Object', stat: true }, {
	  entries: function entries(O) {
	    return $entries$1(O);
	  }
	});

	var entries = path.Object.entries;

	var entries$1 = entries;

	var entries$2 = entries$1;

	var forEach$4 = forEach_1;

	var keys$8 = keys$5;

	var keys$9 = keys$8;

	/** @module Result */
	var Result = function Result(data) {
	  if (data === void 0) {
	    data = {};
	  }

	  /**
	   * The raw profile data
	   * @type {Object}
	   * @private
	   */
	  this._raw = data.raw || null;
	  /**
	   * The formatted profile data
	   * @type {Object}
	   * @private
	   */

	  this._formatted = data.formatted;
	  /**
	   * The highlighted profile data with highlights applied to applicable fields
	   * @type {Object}
	   * @private
	   */

	  this._highlighted = data.highlighted;
	  /**
	   * The index number of the result
	   * @type {Number}
	   */

	  this.ordinal = data.ordinal || null;
	  /**
	   * The title of the result card
	   * @type {string|null}
	   */

	  this.title = data.title || null;
	  /**
	   * The body of the details section of the result card, can contain HTML
	   * @type {string| null}
	   */

	  this.details = data.details || null;
	  /**
	   * The destination link for the title of the result card
	   * @type {string|null}
	   */

	  this.link = data.link || null;
	  /**
	   * The Entity ID, or other unique identifier, used for to power interactivity
	   * @type {string|null}
	   */

	  this.id = data.id || null;
	  /**
	   * The subtitle on the result card
	   * @type {string|null}
	   */

	  this.subtitle = data.subtitle || null;
	  /**
	   * The class modifier, usually derived from the vertical configuration ID
	   * Used to apply different styling to different result card types
	   * @type {string|null}
	   */

	  this.modifier = data.modifier || null;
	  /**
	   * A large date, of the format { month: 'Jan', day: '01' }
	   * @type {Object|null}
	   */

	  this.bigDate = data.bigDate || null;
	  /**
	   * An image profile object, expected to have a url property
	   * @type {Object|null}
	   */

	  this.image = data.image || null;
	  /**
	   * An array of calls to action, of the format:
	   * { icon: '', url: '', text: '', eventType: '', eventOptions: {}}
	   * @type {Array}
	   */

	  this.callsToAction = data.callsToAction || [];
	  /**
	   * Determines if an accordian result should be collapsed by default
	   * @type {boolean}
	   */

	  this.collapsed = data.collapsed === undefined ? true : data.collapsed;
	};

	var test$4 = [];
	var nativeSort$1 = test$4.sort;

	// IE8-
	var FAILS_ON_UNDEFINED$1 = fails(function () {
	  test$4.sort(undefined);
	});
	// V8 bug
	var FAILS_ON_NULL$1 = fails(function () {
	  test$4.sort(null);
	});
	// Old WebKit
	var STRICT_METHOD$a = arrayMethodIsStrict$1('sort');

	var FORCED$p = FAILS_ON_UNDEFINED$1 || !FAILS_ON_NULL$1 || !STRICT_METHOD$a;

	// `Array.prototype.sort` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.sort
	_export({ target: 'Array', proto: true, forced: FORCED$p }, {
	  sort: function sort(comparefn) {
	    return comparefn === undefined
	      ? nativeSort$1.call(toObject(this))
	      : nativeSort$1.call(toObject(this), aFunction(comparefn));
	  }
	});

	var sort = entryVirtual('Array').sort;

	var ArrayPrototype$7 = Array.prototype;

	var sort_1 = function (it) {
	  var own = it.sort;
	  return it === ArrayPrototype$7 || (it instanceof Array && own === ArrayPrototype$7.sort) ? sort : own;
	};

	var sort$1 = sort_1;

	var sort$2 = sort$1;

	var HAS_SPECIES_SUPPORT$6 = arrayMethodHasSpeciesSupport$1('slice');
	var USES_TO_LENGTH$i = arrayMethodUsesToLength('slice', { ACCESSORS: true, 0: 0, 1: 2 });

	var SPECIES$9 = wellKnownSymbol('species');
	var nativeSlice$1 = [].slice;
	var max$5 = Math.max;

	// `Array.prototype.slice` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.slice
	// fallback for not array-like ES3 strings and DOM objects
	_export({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT$6 || !USES_TO_LENGTH$i }, {
	  slice: function slice(start, end) {
	    var O = toIndexedObject(this);
	    var length = toLength(O.length);
	    var k = toAbsoluteIndex(start, length);
	    var fin = toAbsoluteIndex(end === undefined ? length : end, length);
	    // inline `ArraySpeciesCreate` for usage native `Array#slice` where it's possible
	    var Constructor, result, n;
	    if (isArray$1(O)) {
	      Constructor = O.constructor;
	      // cross-realm fallback
	      if (typeof Constructor == 'function' && (Constructor === Array || isArray$1(Constructor.prototype))) {
	        Constructor = undefined;
	      } else if (isObject(Constructor)) {
	        Constructor = Constructor[SPECIES$9];
	        if (Constructor === null) Constructor = undefined;
	      }
	      if (Constructor === Array || Constructor === undefined) {
	        return nativeSlice$1.call(O, k, fin);
	      }
	    }
	    result = new (Constructor === undefined ? Array : Constructor)(max$5(fin - k, 0));
	    for (n = 0; k < fin; k++, n++) if (k in O) createProperty$1(result, n, O[k]);
	    result.length = n;
	    return result;
	  }
	});

	var slice$3 = entryVirtual('Array').slice;

	var ArrayPrototype$8 = Array.prototype;

	var slice_1 = function (it) {
	  var own = it.slice;
	  return it === ArrayPrototype$8 || (it instanceof Array && own === ArrayPrototype$8.slice) ? slice$3 : own;
	};

	var slice$4 = slice_1;

	var slice$5 = slice$4;

	/** @module HighlightedValue */

	/**
	 * Model representing a highlighted value.
	 */
	var HighlightedValue =
	/*#__PURE__*/
	function () {
	  function HighlightedValue(data) {
	    if (data === void 0) {
	      data = {};
	    }

	    this.value = data.value || data.shortValue || '';
	    this.matchedSubstrings = data.matchedSubstrings || [];
	  }
	  /**
	   * get highlighted value string
	   * @returns {string}
	   */


	  var _proto = HighlightedValue.prototype;

	  _proto.get = function get() {
	    this._sortMatchedSubstrings();

	    return this.buildHighlightedValue(this.value, this.matchedSubstrings);
	  }
	  /**
	   * get inverted highlighted value string
	   * @returns {string}
	   */
	  ;

	  _proto.getInverted = function getInverted() {
	    this._sortMatchedSubstrings();

	    var invertedSubstrings = this._getInvertedSubstrings(this.matchedSubstrings, this.value.length);

	    return this.buildHighlightedValue(this.value, invertedSubstrings);
	  }
	  /**
	   * introduces highlighting to input data according to highlighting specifiers
	   *
	   * @param {Object} val input object to apply highlighting to
	   *
	   *  example object :
	   *  {
	   *    name: 'ATM',
	   *    featuredMessage: {
	   *      description: 'Save time & bank on your terms at over 1,800 ATMs'
	   *    }
	   *  }
	   *
	   * @param {Object} highlightedSubstrings highlighting specifiers to apply to input object
	   *
	   *  example object :
	   *  {
	   *    name: {
	   *      matchedSubstrings: [{
	   *        length: 3,
	   *        offset: 0
	   *      }],
	   *      value: 'ATM'
	   *    },
	   *    featuredMessage: {
	   *      description: {
	   *        matchedSubstrings: [{
	   *          length: 4,
	   *          offset: 45
	   *        }],
	   *        value: 'Save time & bank on your terms at over 1,800 ATMs'
	   *      }
	   *    }
	   *  }
	   *
	   * @returns {string} copy of input value with highlighting applied
	   *
	   *  example object :
	   *  {
	   *    name: '<strong>ATM</strong>',
	   *    featuredMessage: {
	   *      description: 'Save time & bank on your terms at over 1,800 <strong>ATMs</strong>'
	   *    }
	   *  }
	   *
	   */
	  ;

	  _proto.buildHighlightedValue = function buildHighlightedValue(val, highlightedSubstrings) {
	    var highlightedValue = '';
	    var nextStart = 0;

	    if (highlightedSubstrings.length === 0) {
	      return val;
	    }

	    for (var j = 0; j < highlightedSubstrings.length; j++) {
	      var start = Number(highlightedSubstrings[j].offset);
	      var end = start + highlightedSubstrings[j].length;
	      highlightedValue += [slice$5(val).call(val, nextStart, start), '<strong>', slice$5(val).call(val, start, end), '</strong>'].join('');

	      if (j === highlightedSubstrings.length - 1 && end < val.length) {
	        highlightedValue += slice$5(val).call(val, end);
	      }

	      nextStart = end;
	    }

	    return highlightedValue;
	  };

	  _proto._sortMatchedSubstrings = function _sortMatchedSubstrings() {
	    var _context;

	    sort$2(_context = this.matchedSubstrings).call(_context, function (a, b) {
	      if (a.offset < b.offset) {
	        return -1;
	      }

	      if (a.offset > b.offset) {
	        return 1;
	      }

	      return 0;
	    });
	  };

	  _proto._getInvertedSubstrings = function _getInvertedSubstrings(matchedSubstrings, valueLength) {
	    var invertedSubstrings = [];

	    for (var i = 0; i < matchedSubstrings.length; i++) {
	      var substring = matchedSubstrings[i];
	      var nextOffset = substring.offset + substring.length;

	      if (i === 0 && substring.offset !== 0) {
	        invertedSubstrings.push({
	          offset: 0,
	          length: substring.offset
	        });
	      }

	      if (valueLength > nextOffset) {
	        invertedSubstrings.push({
	          offset: nextOffset,
	          length: i < matchedSubstrings.length - 1 ? matchedSubstrings[i + 1].offset - nextOffset : valueLength - nextOffset
	        });
	      }
	    }

	    return invertedSubstrings;
	  };

	  return HighlightedValue;
	}();

	// `Object.create` method
	// https://tc39.github.io/ecma262/#sec-object.create
	_export({ target: 'Object', stat: true, sham: !descriptors }, {
	  create: objectCreate$1
	});

	var Object$1 = path.Object;

	var create = function create(P, D) {
	  return Object$1.create(P, D);
	};

	var create$1 = create;

	var create$2 = create$1;

	function _inheritsLoose(subClass, superClass) {
	  subClass.prototype = create$2(superClass.prototype);
	  subClass.prototype.constructor = subClass;
	  subClass.__proto__ = superClass;
	}

	var inheritsLoose = _inheritsLoose;

	var freezing$1 = !fails(function () {
	  return Object.isExtensible(Object.preventExtensions({}));
	});

	var internalMetadata$1 = createCommonjsModule(function (module) {
	var defineProperty = objectDefineProperty.f;



	var METADATA = uid('meta');
	var id = 0;

	var isExtensible = Object.isExtensible || function () {
	  return true;
	};

	var setMetadata = function (it) {
	  defineProperty(it, METADATA, { value: {
	    objectID: 'O' + ++id, // object ID
	    weakData: {}          // weak collections IDs
	  } });
	};

	var fastKey = function (it, create) {
	  // return a primitive with prefix
	  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
	  if (!has(it, METADATA)) {
	    // can't set metadata to uncaught frozen object
	    if (!isExtensible(it)) return 'F';
	    // not necessary to add metadata
	    if (!create) return 'E';
	    // add missing metadata
	    setMetadata(it);
	  // return object ID
	  } return it[METADATA].objectID;
	};

	var getWeakData = function (it, create) {
	  if (!has(it, METADATA)) {
	    // can't set metadata to uncaught frozen object
	    if (!isExtensible(it)) return true;
	    // not necessary to add metadata
	    if (!create) return false;
	    // add missing metadata
	    setMetadata(it);
	  // return the store of weak collections IDs
	  } return it[METADATA].weakData;
	};

	// add metadata on freeze-family methods calling
	var onFreeze = function (it) {
	  if (freezing$1 && meta.REQUIRED && isExtensible(it) && !has(it, METADATA)) setMetadata(it);
	  return it;
	};

	var meta = module.exports = {
	  REQUIRED: false,
	  fastKey: fastKey,
	  getWeakData: getWeakData,
	  onFreeze: onFreeze
	};

	hiddenKeys[METADATA] = true;
	});
	var internalMetadata_1$1 = internalMetadata$1.REQUIRED;
	var internalMetadata_2$1 = internalMetadata$1.fastKey;
	var internalMetadata_3$1 = internalMetadata$1.getWeakData;
	var internalMetadata_4$1 = internalMetadata$1.onFreeze;

	var ITERATOR$b = wellKnownSymbol('iterator');
	var ArrayPrototype$9 = Array.prototype;

	// check on default Array iterator
	var isArrayIteratorMethod$1 = function (it) {
	  return it !== undefined && (iterators$1.Array === it || ArrayPrototype$9[ITERATOR$b] === it);
	};

	var ITERATOR$c = wellKnownSymbol('iterator');

	var getIteratorMethod$1 = function (it) {
	  if (it != undefined) return it[ITERATOR$c]
	    || it['@@iterator']
	    || iterators$1[classof$1(it)];
	};

	// call something on iterator step with safe closing on error
	var callWithSafeIterationClosing$1 = function (iterator, fn, value, ENTRIES) {
	  try {
	    return ENTRIES ? fn(anObject(value)[0], value[1]) : fn(value);
	  // 7.4.6 IteratorClose(iterator, completion)
	  } catch (error) {
	    var returnMethod = iterator['return'];
	    if (returnMethod !== undefined) anObject(returnMethod.call(iterator));
	    throw error;
	  }
	};

	var iterate_1$1 = createCommonjsModule(function (module) {
	var Result = function (stopped, result) {
	  this.stopped = stopped;
	  this.result = result;
	};

	var iterate = module.exports = function (iterable, fn, that, AS_ENTRIES, IS_ITERATOR) {
	  var boundFunction = functionBindContext(fn, that, AS_ENTRIES ? 2 : 1);
	  var iterator, iterFn, index, length, result, next, step;

	  if (IS_ITERATOR) {
	    iterator = iterable;
	  } else {
	    iterFn = getIteratorMethod$1(iterable);
	    if (typeof iterFn != 'function') throw TypeError('Target is not iterable');
	    // optimisation for array iterators
	    if (isArrayIteratorMethod$1(iterFn)) {
	      for (index = 0, length = toLength(iterable.length); length > index; index++) {
	        result = AS_ENTRIES
	          ? boundFunction(anObject(step = iterable[index])[0], step[1])
	          : boundFunction(iterable[index]);
	        if (result && result instanceof Result) return result;
	      } return new Result(false);
	    }
	    iterator = iterFn.call(iterable);
	  }

	  next = iterator.next;
	  while (!(step = next.call(iterator)).done) {
	    result = callWithSafeIterationClosing$1(iterator, boundFunction, step.value, AS_ENTRIES);
	    if (typeof result == 'object' && result && result instanceof Result) return result;
	  } return new Result(false);
	};

	iterate.stop = function (result) {
	  return new Result(true, result);
	};
	});

	var anInstance$1 = function (it, Constructor, name) {
	  if (!(it instanceof Constructor)) {
	    throw TypeError('Incorrect ' + (name ? name + ' ' : '') + 'invocation');
	  } return it;
	};

	var defineProperty$j = objectDefineProperty.f;
	var forEach$5 = arrayIteration$1.forEach;



	var setInternalState$d = internalState$1.set;
	var internalStateGetterFor$2 = internalState$1.getterFor;

	var collection$1 = function (CONSTRUCTOR_NAME, wrapper, common) {
	  var IS_MAP = CONSTRUCTOR_NAME.indexOf('Map') !== -1;
	  var IS_WEAK = CONSTRUCTOR_NAME.indexOf('Weak') !== -1;
	  var ADDER = IS_MAP ? 'set' : 'add';
	  var NativeConstructor = global_1[CONSTRUCTOR_NAME];
	  var NativePrototype = NativeConstructor && NativeConstructor.prototype;
	  var exported = {};
	  var Constructor;

	  if (!descriptors || typeof NativeConstructor != 'function'
	    || !(IS_WEAK || NativePrototype.forEach && !fails(function () { new NativeConstructor().entries().next(); }))
	  ) {
	    // create collection constructor
	    Constructor = common.getConstructor(wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER);
	    internalMetadata$1.REQUIRED = true;
	  } else {
	    Constructor = wrapper(function (target, iterable) {
	      setInternalState$d(anInstance$1(target, Constructor, CONSTRUCTOR_NAME), {
	        type: CONSTRUCTOR_NAME,
	        collection: new NativeConstructor()
	      });
	      if (iterable != undefined) iterate_1$1(iterable, target[ADDER], target, IS_MAP);
	    });

	    var getInternalState = internalStateGetterFor$2(CONSTRUCTOR_NAME);

	    forEach$5(['add', 'clear', 'delete', 'forEach', 'get', 'has', 'set', 'keys', 'values', 'entries'], function (KEY) {
	      var IS_ADDER = KEY == 'add' || KEY == 'set';
	      if (KEY in NativePrototype && !(IS_WEAK && KEY == 'clear')) {
	        createNonEnumerableProperty(Constructor.prototype, KEY, function (a, b) {
	          var collection = getInternalState(this).collection;
	          if (!IS_ADDER && IS_WEAK && !isObject(a)) return KEY == 'get' ? undefined : false;
	          var result = collection[KEY](a === 0 ? 0 : a, b);
	          return IS_ADDER ? this : result;
	        });
	      }
	    });

	    IS_WEAK || defineProperty$j(Constructor.prototype, 'size', {
	      configurable: true,
	      get: function () {
	        return getInternalState(this).collection.size;
	      }
	    });
	  }

	  setToStringTag$1(Constructor, CONSTRUCTOR_NAME, false, true);

	  exported[CONSTRUCTOR_NAME] = Constructor;
	  _export({ global: true, forced: true }, exported);

	  if (!IS_WEAK) common.setStrong(Constructor, CONSTRUCTOR_NAME, IS_MAP);

	  return Constructor;
	};

	var redefineAll$1 = function (target, src, options) {
	  for (var key in src) {
	    if (options && options.unsafe && target[key]) target[key] = src[key];
	    else redefine$1(target, key, src[key], options);
	  } return target;
	};

	var SPECIES$a = wellKnownSymbol('species');

	var setSpecies$1 = function (CONSTRUCTOR_NAME) {
	  var Constructor = getBuiltIn(CONSTRUCTOR_NAME);
	  var defineProperty = objectDefineProperty.f;

	  if (descriptors && Constructor && !Constructor[SPECIES$a]) {
	    defineProperty(Constructor, SPECIES$a, {
	      configurable: true,
	      get: function () { return this; }
	    });
	  }
	};

	var defineProperty$k = objectDefineProperty.f;








	var fastKey$1 = internalMetadata$1.fastKey;


	var setInternalState$e = internalState$1.set;
	var internalStateGetterFor$3 = internalState$1.getterFor;

	var collectionStrong$1 = {
	  getConstructor: function (wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER) {
	    var C = wrapper(function (that, iterable) {
	      anInstance$1(that, C, CONSTRUCTOR_NAME);
	      setInternalState$e(that, {
	        type: CONSTRUCTOR_NAME,
	        index: objectCreate$1(null),
	        first: undefined,
	        last: undefined,
	        size: 0
	      });
	      if (!descriptors) that.size = 0;
	      if (iterable != undefined) iterate_1$1(iterable, that[ADDER], that, IS_MAP);
	    });

	    var getInternalState = internalStateGetterFor$3(CONSTRUCTOR_NAME);

	    var define = function (that, key, value) {
	      var state = getInternalState(that);
	      var entry = getEntry(that, key);
	      var previous, index;
	      // change existing entry
	      if (entry) {
	        entry.value = value;
	      // create new entry
	      } else {
	        state.last = entry = {
	          index: index = fastKey$1(key, true),
	          key: key,
	          value: value,
	          previous: previous = state.last,
	          next: undefined,
	          removed: false
	        };
	        if (!state.first) state.first = entry;
	        if (previous) previous.next = entry;
	        if (descriptors) state.size++;
	        else that.size++;
	        // add to index
	        if (index !== 'F') state.index[index] = entry;
	      } return that;
	    };

	    var getEntry = function (that, key) {
	      var state = getInternalState(that);
	      // fast case
	      var index = fastKey$1(key);
	      var entry;
	      if (index !== 'F') return state.index[index];
	      // frozen object case
	      for (entry = state.first; entry; entry = entry.next) {
	        if (entry.key == key) return entry;
	      }
	    };

	    redefineAll$1(C.prototype, {
	      // 23.1.3.1 Map.prototype.clear()
	      // 23.2.3.2 Set.prototype.clear()
	      clear: function clear() {
	        var that = this;
	        var state = getInternalState(that);
	        var data = state.index;
	        var entry = state.first;
	        while (entry) {
	          entry.removed = true;
	          if (entry.previous) entry.previous = entry.previous.next = undefined;
	          delete data[entry.index];
	          entry = entry.next;
	        }
	        state.first = state.last = undefined;
	        if (descriptors) state.size = 0;
	        else that.size = 0;
	      },
	      // 23.1.3.3 Map.prototype.delete(key)
	      // 23.2.3.4 Set.prototype.delete(value)
	      'delete': function (key) {
	        var that = this;
	        var state = getInternalState(that);
	        var entry = getEntry(that, key);
	        if (entry) {
	          var next = entry.next;
	          var prev = entry.previous;
	          delete state.index[entry.index];
	          entry.removed = true;
	          if (prev) prev.next = next;
	          if (next) next.previous = prev;
	          if (state.first == entry) state.first = next;
	          if (state.last == entry) state.last = prev;
	          if (descriptors) state.size--;
	          else that.size--;
	        } return !!entry;
	      },
	      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
	      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
	      forEach: function forEach(callbackfn /* , that = undefined */) {
	        var state = getInternalState(this);
	        var boundFunction = functionBindContext(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
	        var entry;
	        while (entry = entry ? entry.next : state.first) {
	          boundFunction(entry.value, entry.key, this);
	          // revert to the last existing entry
	          while (entry && entry.removed) entry = entry.previous;
	        }
	      },
	      // 23.1.3.7 Map.prototype.has(key)
	      // 23.2.3.7 Set.prototype.has(value)
	      has: function has(key) {
	        return !!getEntry(this, key);
	      }
	    });

	    redefineAll$1(C.prototype, IS_MAP ? {
	      // 23.1.3.6 Map.prototype.get(key)
	      get: function get(key) {
	        var entry = getEntry(this, key);
	        return entry && entry.value;
	      },
	      // 23.1.3.9 Map.prototype.set(key, value)
	      set: function set(key, value) {
	        return define(this, key === 0 ? 0 : key, value);
	      }
	    } : {
	      // 23.2.3.1 Set.prototype.add(value)
	      add: function add(value) {
	        return define(this, value = value === 0 ? 0 : value, value);
	      }
	    });
	    if (descriptors) defineProperty$k(C.prototype, 'size', {
	      get: function () {
	        return getInternalState(this).size;
	      }
	    });
	    return C;
	  },
	  setStrong: function (C, CONSTRUCTOR_NAME, IS_MAP) {
	    var ITERATOR_NAME = CONSTRUCTOR_NAME + ' Iterator';
	    var getInternalCollectionState = internalStateGetterFor$3(CONSTRUCTOR_NAME);
	    var getInternalIteratorState = internalStateGetterFor$3(ITERATOR_NAME);
	    // add .keys, .values, .entries, [@@iterator]
	    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
	    defineIterator$1(C, CONSTRUCTOR_NAME, function (iterated, kind) {
	      setInternalState$e(this, {
	        type: ITERATOR_NAME,
	        target: iterated,
	        state: getInternalCollectionState(iterated),
	        kind: kind,
	        last: undefined
	      });
	    }, function () {
	      var state = getInternalIteratorState(this);
	      var kind = state.kind;
	      var entry = state.last;
	      // revert to the last existing entry
	      while (entry && entry.removed) entry = entry.previous;
	      // get next entry
	      if (!state.target || !(state.last = entry = entry ? entry.next : state.state.first)) {
	        // or finish the iteration
	        state.target = undefined;
	        return { value: undefined, done: true };
	      }
	      // return step by kind
	      if (kind == 'keys') return { value: entry.key, done: false };
	      if (kind == 'values') return { value: entry.value, done: false };
	      return { value: [entry.key, entry.value], done: false };
	    }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);

	    // add [@@species], 23.1.2.2, 23.2.2.2
	    setSpecies$1(CONSTRUCTOR_NAME);
	  }
	};

	// `Map` constructor
	// https://tc39.github.io/ecma262/#sec-map-objects
	var es_map$1 = collection$1('Map', function (init) {
	  return function Map() { return init(this, arguments.length ? arguments[0] : undefined); };
	}, collectionStrong$1);

	// empty

	// `String.prototype.{ codePointAt, at }` methods implementation
	var createMethod$a = function (CONVERT_TO_STRING) {
	  return function ($this, pos) {
	    var S = String(requireObjectCoercible($this));
	    var position = toInteger(pos);
	    var size = S.length;
	    var first, second;
	    if (position < 0 || position >= size) return CONVERT_TO_STRING ? '' : undefined;
	    first = S.charCodeAt(position);
	    return first < 0xD800 || first > 0xDBFF || position + 1 === size
	      || (second = S.charCodeAt(position + 1)) < 0xDC00 || second > 0xDFFF
	        ? CONVERT_TO_STRING ? S.charAt(position) : first
	        : CONVERT_TO_STRING ? S.slice(position, position + 2) : (first - 0xD800 << 10) + (second - 0xDC00) + 0x10000;
	  };
	};

	var stringMultibyte$1 = {
	  // `String.prototype.codePointAt` method
	  // https://tc39.github.io/ecma262/#sec-string.prototype.codepointat
	  codeAt: createMethod$a(false),
	  // `String.prototype.at` method
	  // https://github.com/mathiasbynens/String.prototype.at
	  charAt: createMethod$a(true)
	};

	var charAt$2 = stringMultibyte$1.charAt;



	var STRING_ITERATOR$1 = 'String Iterator';
	var setInternalState$f = internalState$1.set;
	var getInternalState$9 = internalState$1.getterFor(STRING_ITERATOR$1);

	// `String.prototype[@@iterator]` method
	// https://tc39.github.io/ecma262/#sec-string.prototype-@@iterator
	defineIterator$1(String, 'String', function (iterated) {
	  setInternalState$f(this, {
	    type: STRING_ITERATOR$1,
	    string: String(iterated),
	    index: 0
	  });
	// `%StringIteratorPrototype%.next` method
	// https://tc39.github.io/ecma262/#sec-%stringiteratorprototype%.next
	}, function next() {
	  var state = getInternalState$9(this);
	  var string = state.string;
	  var index = state.index;
	  var point;
	  if (index >= string.length) return { value: undefined, done: true };
	  point = charAt$2(string, index);
	  state.index += point.length;
	  return { value: point, done: false };
	});

	var map$3 = path.Map;

	// https://tc39.github.io/proposal-setmap-offrom/




	var collectionFrom = function from(source /* , mapFn, thisArg */) {
	  var length = arguments.length;
	  var mapFn = length > 1 ? arguments[1] : undefined;
	  var mapping, A, n, boundFunction;
	  aFunction(this);
	  mapping = mapFn !== undefined;
	  if (mapping) aFunction(mapFn);
	  if (source == undefined) return new this();
	  A = [];
	  if (mapping) {
	    n = 0;
	    boundFunction = functionBindContext(mapFn, length > 2 ? arguments[2] : undefined, 2);
	    iterate_1$1(source, function (nextItem) {
	      A.push(boundFunction(nextItem, n++));
	    });
	  } else {
	    iterate_1$1(source, A.push, A);
	  }
	  return new this(A);
	};

	// `Map.from` method
	// https://tc39.github.io/proposal-setmap-offrom/#sec-map.from
	_export({ target: 'Map', stat: true }, {
	  from: collectionFrom
	});

	// https://tc39.github.io/proposal-setmap-offrom/
	var collectionOf = function of() {
	  var length = arguments.length;
	  var A = new Array(length);
	  while (length--) A[length] = arguments[length];
	  return new this(A);
	};

	// `Map.of` method
	// https://tc39.github.io/proposal-setmap-offrom/#sec-map.of
	_export({ target: 'Map', stat: true }, {
	  of: collectionOf
	});

	// https://github.com/tc39/collection-methods
	var collectionDeleteAll = function (/* ...elements */) {
	  var collection = anObject(this);
	  var remover = aFunction(collection['delete']);
	  var allDeleted = true;
	  var wasDeleted;
	  for (var k = 0, len = arguments.length; k < len; k++) {
	    wasDeleted = remover.call(collection, arguments[k]);
	    allDeleted = allDeleted && wasDeleted;
	  }
	  return !!allDeleted;
	};

	// `Map.prototype.deleteAll` method
	// https://github.com/tc39/proposal-collection-methods
	_export({ target: 'Map', proto: true, real: true, forced: isPure }, {
	  deleteAll: function deleteAll(/* ...elements */) {
	    return collectionDeleteAll.apply(this, arguments);
	  }
	});

	var getIterator$1 = function (it) {
	  var iteratorMethod = getIteratorMethod$1(it);
	  if (typeof iteratorMethod != 'function') {
	    throw TypeError(String(it) + ' is not iterable');
	  } return anObject(iteratorMethod.call(it));
	};

	var getMapIterator = getIterator$1;

	// `Map.prototype.every` method
	// https://github.com/tc39/proposal-collection-methods
	_export({ target: 'Map', proto: true, real: true, forced: isPure }, {
	  every: function every(callbackfn /* , thisArg */) {
	    var map = anObject(this);
	    var iterator = getMapIterator(map);
	    var boundFunction = functionBindContext(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
	    return !iterate_1$1(iterator, function (key, value) {
	      if (!boundFunction(value, key, map)) return iterate_1$1.stop();
	    }, undefined, true, true).stopped;
	  }
	});

	var SPECIES$b = wellKnownSymbol('species');

	// `SpeciesConstructor` abstract operation
	// https://tc39.github.io/ecma262/#sec-speciesconstructor
	var speciesConstructor$1 = function (O, defaultConstructor) {
	  var C = anObject(O).constructor;
	  var S;
	  return C === undefined || (S = anObject(C)[SPECIES$b]) == undefined ? defaultConstructor : aFunction(S);
	};

	// `Map.prototype.filter` method
	// https://github.com/tc39/proposal-collection-methods
	_export({ target: 'Map', proto: true, real: true, forced: isPure }, {
	  filter: function filter(callbackfn /* , thisArg */) {
	    var map = anObject(this);
	    var iterator = getMapIterator(map);
	    var boundFunction = functionBindContext(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
	    var newMap = new (speciesConstructor$1(map, getBuiltIn('Map')))();
	    var setter = aFunction(newMap.set);
	    iterate_1$1(iterator, function (key, value) {
	      if (boundFunction(value, key, map)) setter.call(newMap, key, value);
	    }, undefined, true, true);
	    return newMap;
	  }
	});

	// `Map.prototype.find` method
	// https://github.com/tc39/proposal-collection-methods
	_export({ target: 'Map', proto: true, real: true, forced: isPure }, {
	  find: function find(callbackfn /* , thisArg */) {
	    var map = anObject(this);
	    var iterator = getMapIterator(map);
	    var boundFunction = functionBindContext(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
	    return iterate_1$1(iterator, function (key, value) {
	      if (boundFunction(value, key, map)) return iterate_1$1.stop(value);
	    }, undefined, true, true).result;
	  }
	});

	// `Map.prototype.findKey` method
	// https://github.com/tc39/proposal-collection-methods
	_export({ target: 'Map', proto: true, real: true, forced: isPure }, {
	  findKey: function findKey(callbackfn /* , thisArg */) {
	    var map = anObject(this);
	    var iterator = getMapIterator(map);
	    var boundFunction = functionBindContext(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
	    return iterate_1$1(iterator, function (key, value) {
	      if (boundFunction(value, key, map)) return iterate_1$1.stop(key);
	    }, undefined, true, true).result;
	  }
	});

	// `Map.groupBy` method
	// https://github.com/tc39/proposal-collection-methods
	_export({ target: 'Map', stat: true }, {
	  groupBy: function groupBy(iterable, keyDerivative) {
	    var newMap = new this();
	    aFunction(keyDerivative);
	    var has = aFunction(newMap.has);
	    var get = aFunction(newMap.get);
	    var set = aFunction(newMap.set);
	    iterate_1$1(iterable, function (element) {
	      var derivedKey = keyDerivative(element);
	      if (!has.call(newMap, derivedKey)) set.call(newMap, derivedKey, [element]);
	      else get.call(newMap, derivedKey).push(element);
	    });
	    return newMap;
	  }
	});

	// `SameValueZero` abstract operation
	// https://tc39.github.io/ecma262/#sec-samevaluezero
	var sameValueZero = function (x, y) {
	  // eslint-disable-next-line no-self-compare
	  return x === y || x != x && y != y;
	};

	// `Map.prototype.includes` method
	// https://github.com/tc39/proposal-collection-methods
	_export({ target: 'Map', proto: true, real: true, forced: isPure }, {
	  includes: function includes(searchElement) {
	    return iterate_1$1(getMapIterator(anObject(this)), function (key, value) {
	      if (sameValueZero(value, searchElement)) return iterate_1$1.stop();
	    }, undefined, true, true).stopped;
	  }
	});

	// `Map.keyBy` method
	// https://github.com/tc39/proposal-collection-methods
	_export({ target: 'Map', stat: true }, {
	  keyBy: function keyBy(iterable, keyDerivative) {
	    var newMap = new this();
	    aFunction(keyDerivative);
	    var setter = aFunction(newMap.set);
	    iterate_1$1(iterable, function (element) {
	      setter.call(newMap, keyDerivative(element), element);
	    });
	    return newMap;
	  }
	});

	// `Map.prototype.includes` method
	// https://github.com/tc39/proposal-collection-methods
	_export({ target: 'Map', proto: true, real: true, forced: isPure }, {
	  keyOf: function keyOf(searchElement) {
	    return iterate_1$1(getMapIterator(anObject(this)), function (key, value) {
	      if (value === searchElement) return iterate_1$1.stop(key);
	    }, undefined, true, true).result;
	  }
	});

	// `Map.prototype.mapKeys` method
	// https://github.com/tc39/proposal-collection-methods
	_export({ target: 'Map', proto: true, real: true, forced: isPure }, {
	  mapKeys: function mapKeys(callbackfn /* , thisArg */) {
	    var map = anObject(this);
	    var iterator = getMapIterator(map);
	    var boundFunction = functionBindContext(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
	    var newMap = new (speciesConstructor$1(map, getBuiltIn('Map')))();
	    var setter = aFunction(newMap.set);
	    iterate_1$1(iterator, function (key, value) {
	      setter.call(newMap, boundFunction(value, key, map), value);
	    }, undefined, true, true);
	    return newMap;
	  }
	});

	// `Map.prototype.mapValues` method
	// https://github.com/tc39/proposal-collection-methods
	_export({ target: 'Map', proto: true, real: true, forced: isPure }, {
	  mapValues: function mapValues(callbackfn /* , thisArg */) {
	    var map = anObject(this);
	    var iterator = getMapIterator(map);
	    var boundFunction = functionBindContext(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
	    var newMap = new (speciesConstructor$1(map, getBuiltIn('Map')))();
	    var setter = aFunction(newMap.set);
	    iterate_1$1(iterator, function (key, value) {
	      setter.call(newMap, key, boundFunction(value, key, map));
	    }, undefined, true, true);
	    return newMap;
	  }
	});

	// `Map.prototype.merge` method
	// https://github.com/tc39/proposal-collection-methods
	_export({ target: 'Map', proto: true, real: true, forced: isPure }, {
	  // eslint-disable-next-line no-unused-vars
	  merge: function merge(iterable /* ...iterbles */) {
	    var map = anObject(this);
	    var setter = aFunction(map.set);
	    var i = 0;
	    while (i < arguments.length) {
	      iterate_1$1(arguments[i++], setter, map, true);
	    }
	    return map;
	  }
	});

	// `Map.prototype.reduce` method
	// https://github.com/tc39/proposal-collection-methods
	_export({ target: 'Map', proto: true, real: true, forced: isPure }, {
	  reduce: function reduce(callbackfn /* , initialValue */) {
	    var map = anObject(this);
	    var iterator = getMapIterator(map);
	    var noInitial = arguments.length < 2;
	    var accumulator = noInitial ? undefined : arguments[1];
	    aFunction(callbackfn);
	    iterate_1$1(iterator, function (key, value) {
	      if (noInitial) {
	        noInitial = false;
	        accumulator = value;
	      } else {
	        accumulator = callbackfn(accumulator, value, key, map);
	      }
	    }, undefined, true, true);
	    if (noInitial) throw TypeError('Reduce of empty map with no initial value');
	    return accumulator;
	  }
	});

	// `Set.prototype.some` method
	// https://github.com/tc39/proposal-collection-methods
	_export({ target: 'Map', proto: true, real: true, forced: isPure }, {
	  some: function some(callbackfn /* , thisArg */) {
	    var map = anObject(this);
	    var iterator = getMapIterator(map);
	    var boundFunction = functionBindContext(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
	    return iterate_1$1(iterator, function (key, value) {
	      if (boundFunction(value, key, map)) return iterate_1$1.stop();
	    }, undefined, true, true).stopped;
	  }
	});

	// `Set.prototype.update` method
	// https://github.com/tc39/proposal-collection-methods
	_export({ target: 'Map', proto: true, real: true, forced: isPure }, {
	  update: function update(key, callback /* , thunk */) {
	    var map = anObject(this);
	    var length = arguments.length;
	    aFunction(callback);
	    var isPresentInMap = map.has(key);
	    if (!isPresentInMap && length < 3) {
	      throw TypeError('Updating absent value');
	    }
	    var value = isPresentInMap ? map.get(key) : aFunction(length > 2 ? arguments[2] : undefined)(key, map);
	    map.set(key, callback(value, key, map));
	    return map;
	  }
	});

	// `Map.prototype.upsert` method
	// https://github.com/thumbsupep/proposal-upsert
	var mapUpsert = function upsert(key, updateFn /* , insertFn */) {
	  var map = anObject(this);
	  var insertFn = arguments.length > 2 ? arguments[2] : undefined;
	  var value;
	  if (typeof updateFn != 'function' && typeof insertFn != 'function') {
	    throw TypeError('At least one callback required');
	  }
	  if (map.has(key)) {
	    value = map.get(key);
	    if (typeof updateFn == 'function') {
	      value = updateFn(value);
	      map.set(key, value);
	    }
	  } else if (typeof insertFn == 'function') {
	    value = insertFn();
	    map.set(key, value);
	  } return value;
	};

	// `Map.prototype.upsert` method
	// https://github.com/thumbsupep/proposal-upsert
	_export({ target: 'Map', proto: true, real: true, forced: isPure }, {
	  upsert: mapUpsert
	});

	// TODO: remove from `core-js@4`




	// `Map.prototype.updateOrInsert` method (replaced by `Map.prototype.upsert`)
	// https://github.com/thumbsupep/proposal-upsert
	_export({ target: 'Map', proto: true, real: true, forced: isPure }, {
	  updateOrInsert: mapUpsert
	});

	// TODO: remove from `core-js@4`


	var map$4 = map$3;

	var map$5 = map$4;

	var FAILS_ON_PRIMITIVES$c = fails(function () { objectGetPrototypeOf$1(1); });

	// `Object.getPrototypeOf` method
	// https://tc39.github.io/ecma262/#sec-object.getprototypeof
	_export({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES$c, sham: !correctPrototypeGetter$1 }, {
	  getPrototypeOf: function getPrototypeOf(it) {
	    return objectGetPrototypeOf$1(toObject(it));
	  }
	});

	var getPrototypeOf = path.Object.getPrototypeOf;

	var getPrototypeOf$1 = getPrototypeOf;

	var getPrototypeOf$2 = getPrototypeOf$1;

	// `Object.setPrototypeOf` method
	// https://tc39.github.io/ecma262/#sec-object.setprototypeof
	_export({ target: 'Object', stat: true }, {
	  setPrototypeOf: objectSetPrototypeOf$1
	});

	var setPrototypeOf = path.Object.setPrototypeOf;

	var setPrototypeOf$1 = setPrototypeOf;

	var setPrototypeOf$2 = setPrototypeOf$1;

	var getPrototypeOf$3 = createCommonjsModule(function (module) {
	function _getPrototypeOf(o) {
	  module.exports = _getPrototypeOf = setPrototypeOf$2 ? getPrototypeOf$2 : function _getPrototypeOf(o) {
	    return o.__proto__ || getPrototypeOf$2(o);
	  };
	  return _getPrototypeOf(o);
	}

	module.exports = _getPrototypeOf;
	});

	var setPrototypeOf$3 = createCommonjsModule(function (module) {
	function _setPrototypeOf(o, p) {
	  module.exports = _setPrototypeOf = setPrototypeOf$2 || function _setPrototypeOf(o, p) {
	    o.__proto__ = p;
	    return o;
	  };

	  return _setPrototypeOf(o, p);
	}

	module.exports = _setPrototypeOf;
	});

	var $indexOf$2 = arrayIncludes.indexOf;



	var nativeIndexOf$1 = [].indexOf;

	var NEGATIVE_ZERO$2 = !!nativeIndexOf$1 && 1 / [1].indexOf(1, -0) < 0;
	var STRICT_METHOD$b = arrayMethodIsStrict$1('indexOf');
	var USES_TO_LENGTH$j = arrayMethodUsesToLength('indexOf', { ACCESSORS: true, 1: 0 });

	// `Array.prototype.indexOf` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.indexof
	_export({ target: 'Array', proto: true, forced: NEGATIVE_ZERO$2 || !STRICT_METHOD$b || !USES_TO_LENGTH$j }, {
	  indexOf: function indexOf(searchElement /* , fromIndex = 0 */) {
	    return NEGATIVE_ZERO$2
	      // convert -0 to +0
	      ? nativeIndexOf$1.apply(this, arguments) || 0
	      : $indexOf$2(this, searchElement, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	var indexOf$2 = entryVirtual('Array').indexOf;

	var ArrayPrototype$a = Array.prototype;

	var indexOf_1 = function (it) {
	  var own = it.indexOf;
	  return it === ArrayPrototype$a || (it instanceof Array && own === ArrayPrototype$a.indexOf) ? indexOf$2 : own;
	};

	var indexOf$3 = indexOf_1;

	var indexOf$4 = indexOf$3;

	function _isNativeFunction(fn) {
	  var _context;

	  return indexOf$4(_context = Function.toString.call(fn)).call(_context, "[native code]") !== -1;
	}

	var isNativeFunction = _isNativeFunction;

	var slice$6 = [].slice;
	var factories$1 = {};

	var construct$1 = function (C, argsLength, args) {
	  if (!(argsLength in factories$1)) {
	    for (var list = [], i = 0; i < argsLength; i++) list[i] = 'a[' + i + ']';
	    // eslint-disable-next-line no-new-func
	    factories$1[argsLength] = Function('C,a', 'return new C(' + list.join(',') + ')');
	  } return factories$1[argsLength](C, args);
	};

	// `Function.prototype.bind` method implementation
	// https://tc39.github.io/ecma262/#sec-function.prototype.bind
	var functionBind$1 = Function.bind || function bind(that /* , ...args */) {
	  var fn = aFunction(this);
	  var partArgs = slice$6.call(arguments, 1);
	  var boundFunction = function bound(/* args... */) {
	    var args = partArgs.concat(slice$6.call(arguments));
	    return this instanceof boundFunction ? construct$1(fn, args.length, args) : fn.apply(that, args);
	  };
	  if (isObject(fn.prototype)) boundFunction.prototype = fn.prototype;
	  return boundFunction;
	};

	// `Function.prototype.bind` method
	// https://tc39.github.io/ecma262/#sec-function.prototype.bind
	_export({ target: 'Function', proto: true }, {
	  bind: functionBind$1
	});

	var bind$1 = entryVirtual('Function').bind;

	var FunctionPrototype$2 = Function.prototype;

	var bind_1 = function (it) {
	  var own = it.bind;
	  return it === FunctionPrototype$2 || (it instanceof Function && own === FunctionPrototype$2.bind) ? bind$1 : own;
	};

	var bind$2 = bind_1;

	var bind$3 = bind$2;

	var nativeConstruct$1 = getBuiltIn('Reflect', 'construct');

	// `Reflect.construct` method
	// https://tc39.github.io/ecma262/#sec-reflect.construct
	// MS Edge supports only 2 arguments and argumentsList argument is optional
	// FF Nightly sets third argument as `new.target`, but does not create `this` from it
	var NEW_TARGET_BUG$1 = fails(function () {
	  function F() { /* empty */ }
	  return !(nativeConstruct$1(function () { /* empty */ }, [], F) instanceof F);
	});
	var ARGS_BUG$1 = !fails(function () {
	  nativeConstruct$1(function () { /* empty */ });
	});
	var FORCED$q = NEW_TARGET_BUG$1 || ARGS_BUG$1;

	_export({ target: 'Reflect', stat: true, forced: FORCED$q, sham: FORCED$q }, {
	  construct: function construct(Target, args /* , newTarget */) {
	    aFunction(Target);
	    anObject(args);
	    var newTarget = arguments.length < 3 ? Target : aFunction(arguments[2]);
	    if (ARGS_BUG$1 && !NEW_TARGET_BUG$1) return nativeConstruct$1(Target, args, newTarget);
	    if (Target == newTarget) {
	      // w/o altered newTarget, optimization for 0-4 arguments
	      switch (args.length) {
	        case 0: return new Target();
	        case 1: return new Target(args[0]);
	        case 2: return new Target(args[0], args[1]);
	        case 3: return new Target(args[0], args[1], args[2]);
	        case 4: return new Target(args[0], args[1], args[2], args[3]);
	      }
	      // w/o altered newTarget, lot of arguments case
	      var $args = [null];
	      $args.push.apply($args, args);
	      return new (functionBind$1.apply(Target, $args))();
	    }
	    // with altered newTarget, not support built-in constructors
	    var proto = newTarget.prototype;
	    var instance = objectCreate$1(isObject(proto) ? proto : Object.prototype);
	    var result = Function.apply.call(Target, instance, args);
	    return isObject(result) ? result : instance;
	  }
	});

	var construct$2 = path.Reflect.construct;

	var construct$3 = construct$2;

	var construct$4 = construct$3;

	var construct$5 = createCommonjsModule(function (module) {
	function isNativeReflectConstruct() {
	  if (typeof Reflect === "undefined" || !construct$4) return false;
	  if (construct$4.sham) return false;
	  if (typeof Proxy === "function") return true;

	  try {
	    Date.prototype.toString.call(construct$4(Date, [], function () {}));
	    return true;
	  } catch (e) {
	    return false;
	  }
	}

	function _construct(Parent, args, Class) {
	  if (isNativeReflectConstruct()) {
	    module.exports = _construct = construct$4;
	  } else {
	    module.exports = _construct = function _construct(Parent, args, Class) {
	      var a = [null];
	      a.push.apply(a, args);

	      var Constructor = bind$3(Function).apply(Parent, a);

	      var instance = new Constructor();
	      if (Class) setPrototypeOf$3(instance, Class.prototype);
	      return instance;
	    };
	  }

	  return _construct.apply(null, arguments);
	}

	module.exports = _construct;
	});

	var wrapNativeSuper = createCommonjsModule(function (module) {
	function _wrapNativeSuper(Class) {
	  var _cache = typeof map$5 === "function" ? new map$5() : undefined;

	  module.exports = _wrapNativeSuper = function _wrapNativeSuper(Class) {
	    if (Class === null || !isNativeFunction(Class)) return Class;

	    if (typeof Class !== "function") {
	      throw new TypeError("Super expression must either be null or a function");
	    }

	    if (typeof _cache !== "undefined") {
	      if (_cache.has(Class)) return _cache.get(Class);

	      _cache.set(Class, Wrapper);
	    }

	    function Wrapper() {
	      return construct$5(Class, arguments, getPrototypeOf$3(this).constructor);
	    }

	    Wrapper.prototype = create$2(Class.prototype, {
	      constructor: {
	        value: Wrapper,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	    return setPrototypeOf$3(Wrapper, Class);
	  };

	  return _wrapNativeSuper(Class);
	}

	module.exports = _wrapNativeSuper;
	});

	/** @module Errors */

	/**
	 * AnswersBaseError is an extension of the base Error object.
	 * This is the object that is used to when reporting to the server.
	 * @extends Error
	 *
	 * Error codes fall into one of four categories:
	 * 1XX errors: Basic errors
	 * 2XX errors: UI errors
	 * 3XX errors: Endpoint errors
	 * 4XX errors: Core errors
	 */
	var AnswersBaseError =
	/*#__PURE__*/
	function (_Error) {
	  inheritsLoose(AnswersBaseError, _Error);

	  function AnswersBaseError(errorCode, message, boundary, causedBy) {
	    var _this;

	    if (boundary === void 0) {
	      boundary = 'unknown';
	    }

	    _this = _Error.call(this, message) || this;
	    _this.errorCode = errorCode;
	    _this.errorMessage = message;
	    _this.boundary = boundary;
	    _this.reported = false;

	    if (causedBy) {
	      _this.causedBy = causedBy instanceof AnswersBaseError ? causedBy : AnswersBaseError.from(causedBy);
	      _this.stack = _this.stack + "\nCaused By: " + _this.causedBy.stack;
	    }

	    return _this;
	  }

	  var _proto = AnswersBaseError.prototype;

	  _proto.toJson = function toJson() {
	    return stringify$2(this);
	  };

	  _proto.toString = function toString() {
	    var string = this.errorMessage + " (" + this.boundary + ")";

	    if (this.causedBy) {
	      string += "\n  Caused By: " + this.causedBy.toString();
	    }

	    return string;
	  };

	  AnswersBaseError.from = function from(builtinError, boundary) {
	    var error = new AnswersBasicError(builtinError.message, boundary);
	    error.stack = builtinError.stack;
	    return error;
	  };

	  return AnswersBaseError;
	}(wrapNativeSuper(Error));
	/**
	 * AnswersBasicError is a wrapper around all the built-in errors
	 * e.g. undefined variables, incorrect syntax, types, missing methods, etc.
	 * @extends AnswersBaseError
	 */

	var AnswersBasicError =
	/*#__PURE__*/
	function (_AnswersBaseError) {
	  inheritsLoose(AnswersBasicError, _AnswersBaseError);

	  function AnswersBasicError(message, boundary, causedBy) {
	    return _AnswersBaseError.call(this, 100, message, boundary, causedBy) || this;
	  }

	  return AnswersBasicError;
	}(AnswersBaseError);
	/**
	 * AnswersUiError used for things like DOM errors.
	 * @extends AnswersBaseError
	 */

	var AnswersConfigError =
	/*#__PURE__*/
	function (_AnswersBaseError2) {
	  inheritsLoose(AnswersConfigError, _AnswersBaseError2);

	  function AnswersConfigError(message, boundary, causedBy) {
	    return _AnswersBaseError2.call(this, 101, message, boundary, causedBy) || this;
	  }

	  return AnswersConfigError;
	}(AnswersBaseError);
	/**
	 * AnswersComponentError is used for Component oriented errors
	 * e.g. failure to render, or catching unknowns.
	 * @extends AnswersBaseError
	 */

	var AnswersComponentError =
	/*#__PURE__*/
	function (_AnswersBaseError4) {
	  inheritsLoose(AnswersComponentError, _AnswersBaseError4);

	  function AnswersComponentError(message, component, causedBy) {
	    return _AnswersBaseError4.call(this, 201, message, component, causedBy) || this;
	  }

	  return AnswersComponentError;
	}(AnswersBaseError);
	/**
	 * AnswersEndpointError represents all network related errors.
	 * @extends AnswersBaseError
	 */

	var AnswersEndpointError =
	/*#__PURE__*/
	function (_AnswersBaseError5) {
	  inheritsLoose(AnswersEndpointError, _AnswersBaseError5);

	  function AnswersEndpointError(message, boundary, causedBy) {
	    return _AnswersBaseError5.call(this, 300, message, boundary, causedBy) || this;
	  }

	  return AnswersEndpointError;
	}(AnswersBaseError);
	/**
	 * AnswersCoreError represents errors for precondition failures in the core library
	 * @extends AnswersBaseError
	 */

	var AnswersCoreError =
	/*#__PURE__*/
	function (_AnswersBaseError6) {
	  inheritsLoose(AnswersCoreError, _AnswersBaseError6);

	  function AnswersCoreError(message, boundary, causedBy) {
	    return _AnswersBaseError6.call(this, 400, message, boundary, causedBy) || this;
	  }

	  return AnswersCoreError;
	}(AnswersBaseError);
	/**
	 * AnswersStorageError represents storage related errors
	 * @extends AnswersBaseError
	 */

	var AnswersStorageError =
	/*#__PURE__*/
	function (_AnswersBaseError7) {
	  inheritsLoose(AnswersStorageError, _AnswersBaseError7);

	  function AnswersStorageError(message, storageKey, data, causedBy) {
	    var _this2;

	    _this2 = _AnswersBaseError7.call(this, 401, message, 'Storage', causedBy) || this;
	    _this2.storageKey = storageKey;
	    _this2.data = data;
	    return _this2;
	  }

	  return AnswersStorageError;
	}(AnswersBaseError);
	/**
	 * AnswersAnalyticsError is used for errors when reporting analytics
	 * @extends AnswersBaseError
	 */

	var AnswersAnalyticsError =
	/*#__PURE__*/
	function (_AnswersBaseError8) {
	  inheritsLoose(AnswersAnalyticsError, _AnswersBaseError8);

	  function AnswersAnalyticsError(message, event, causedBy) {
	    var _this3;

	    _this3 = _AnswersBaseError8.call(this, 402, message, 'Analytics', causedBy) || this;
	    _this3.event = event;
	    return _this3;
	  }

	  return AnswersAnalyticsError;
	}(AnswersBaseError);

	var ResultFactory =
	/*#__PURE__*/
	function () {
	  function ResultFactory() {}

	  /**
	   * Converts an API result object into a Result view model.
	   * Includes default mappings of GoogleCustomSearchEngine results to
	   * the fields exposed by the template.
	   * @param resultsData  {Array} expected format: { data: { ... }, highlightedFields: { ... }}
	   * @param {Object.<string, function>} formatters The formatters to apply to the result
	   * @param {string} verticalId The vertical of these results
	   * @param {string} source Backend source of these results
	   * @returns {Result[]}
	   */
	  ResultFactory.from = function from(resultsData, formatters, verticalId, source) {
	    var results = [];

	    for (var i = 0; i < resultsData.length; i++) {
	      var data = resultsData[i].data || resultsData[i];

	      switch (source) {
	        case 'GOOGLE_CSE':
	          results.push(ResultFactory.fromGoogleCustomSearchEngine(data));
	          break;

	        case 'BING_CSE':
	          results.push(ResultFactory.fromBingCustomSearchEngine(data));
	          break;

	        case 'ZENDESK':
	          results.push(ResultFactory.fromZendeskSearchEngine(data));
	          break;

	        case 'ALGOLIA':
	          results.push(ResultFactory.fromAlgoliaSearchEngine(data));
	          break;

	        case 'KNOWLEDGE_MANAGER':
	          var highlightedFields = resultsData[i].highlightedFields || {};
	          results.push(ResultFactory.fromKnowledgeManager(data, formatters, verticalId, highlightedFields, i));
	          break;

	        default:
	          results.push(ResultFactory.fromGeneric(data, i));
	      }
	    }

	    return results;
	  }
	  /**
	   * Applies field formatters to Knowledge Manager Entity Profile Data
	   *
	   * @param {Object} entityProfileData Entity Profile Data
	   * @param {Object} formatters Developer specified Field Formatters
	   * @param {string} verticalId Identifier for Vertical
	   * @param {Object} highlightedEntityProfileData Subset of Entity Profile Data with highlighting applied
	   * @returns {Object} Subset of Entity Profile Data Fields with field formatters applied
	   */
	  ;

	  ResultFactory.computeFormattedData = function computeFormattedData(entityProfileData, formatters, verticalId, highlightedEntityProfileData) {
	    var _context;

	    // if no field formatters specified, nothing to format
	    if (keys$9(formatters).length === 0) {
	      return {};
	    }

	    var formattedData = {};

	    forEach$4(_context = entries$2(entityProfileData)).call(_context, function (_ref) {
	      var fieldName = _ref[0],
	          fieldVal = _ref[1];

	      // check if a field formatter exists for the current entity profile field
	      if (formatters[fieldName] === undefined) {
	        return;
	      } // verify the field formatter provided is a formatter function as expected


	      if (typeof formatters[fieldName] !== 'function') {
	        throw new AnswersCoreError('Field formatter is not of expected type function', 'ResultFactory');
	      } // if highlighted version of field value is available, make it available to field formatter


	      var highlightedFieldVal = null;

	      if (highlightedEntityProfileData && highlightedEntityProfileData[fieldName]) {
	        highlightedFieldVal = highlightedEntityProfileData[fieldName];
	      } // call formatter function associated with the field name
	      // the input object defines the interface that field formatter functions work with


	      formattedData[fieldName] = formatters[fieldName]({
	        entityProfileData: entityProfileData,
	        entityFieldValue: fieldVal,
	        highlightedEntityFieldValue: highlightedFieldVal,
	        verticalId: verticalId,
	        isDirectAnswer: false
	      });
	    });

	    return formattedData;
	  }
	  /**
	   * Applies highlighting to substrings within Knowledge Manager Entity Field Values
	   * according to highlighting specifiers returned from the Knowledge Manager Search Backend
	   *
	   * @param {Object} entityProfileData Entity Profile Data
	   * @param {Object} highlightedFields KM specified highlighting instructions to highlight certain Fields
	   * @returns {Object} Subset of Entity Profile Data Fields with highlighting applied
	   */
	  ;

	  ResultFactory.computeHighlightedData = function computeHighlightedData(entityProfileData, highlightedFields) {
	    var _context2;

	    // if no highlighted fields specified, nothing to highlight
	    if (keys$9(highlightedFields).length === 0) {
	      return {};
	    }

	    var highlightedData = {}; // iterate through entity fields that have highlighting instructions

	    forEach$4(_context2 = entries$2(highlightedFields)).call(_context2, function (_ref2) {
	      var highlightedFieldName = _ref2[0];

	      // verify that the highlighted field name corresponds to an existing entity profile field
	      if (entityProfileData[highlightedFieldName] === undefined) {
	        throw new AnswersCoreError('Highlighted Field Name does not exist in Entity Profile', 'ResultFactory');
	      }

	      var highlightedField = highlightedFields[highlightedFieldName]; // check for nested fields

	      if (typeof highlightedField === 'object' && keys$9(highlightedField).length > 0 && highlightedField['matchedSubstrings'] === undefined) {
	        // recurse to children fields
	        highlightedData[highlightedFieldName] = ResultFactory.computeHighlightedData(entityProfileData[highlightedFieldName], highlightedFields[highlightedFieldName]);
	      } else {
	        var highlightedDataValue = new HighlightedValue(entityProfileData).buildHighlightedValue(highlightedField.value, highlightedField.matchedSubstrings);
	        highlightedData[highlightedFieldName] = highlightedDataValue;
	      }
	    });

	    return highlightedData;
	  }
	  /**
	   * Converts an API result object into a generic result view model.
	   * @param {Object} data
	   * @param {number} index
	   * @returns {Result}
	   */
	  ;

	  ResultFactory.fromGeneric = function fromGeneric(data, index) {
	    return new Result({
	      raw: data,
	      title: data.name,
	      details: this.truncate(data.description),
	      link: data.website,
	      id: data.id,
	      ordinal: index + 1
	    });
	  }
	  /**
	   * Converts an API result object into a Knowledge Manager result view model.
	   * @param {Object} data
	   * @param {Object} formatters
	   * @param {string} verticalId
	   * @param {Object} highlightedFields
	   * @param {number} index
	   * @returns {Result}
	   */
	  ;

	  ResultFactory.fromKnowledgeManager = function fromKnowledgeManager(data, formatters, verticalId, highlightedFields, index) {
	    // compute highlighted entity profile data
	    var highlightedEntityProfileData = ResultFactory.computeHighlightedData(data, highlightedFields); // compute formatted entity profile data

	    var formattedEntityProfileData = ResultFactory.computeFormattedData(data, formatters, verticalId, highlightedEntityProfileData); // set result details checking the following in order of priority : formatted, highlighted, raw

	    var resultDetails = null;

	    if (formattedEntityProfileData.description !== undefined) {
	      resultDetails = formattedEntityProfileData.description;
	    } else if (highlightedEntityProfileData.description !== undefined) {
	      resultDetails = this.truncate(highlightedEntityProfileData.description);
	    } else {
	      resultDetails = this.truncate(data.description);
	    }

	    return new Result({
	      raw: data,
	      formatted: formattedEntityProfileData,
	      highlighted: highlightedEntityProfileData,
	      title: formattedEntityProfileData.name || data.name,
	      details: resultDetails,
	      link: data.website,
	      id: data.id,
	      ordinal: index + 1
	    });
	  }
	  /**
	   * Converts an API result object into a result view model.
	   * Maps view model fields based on the API data for a Google Custom Search Engine object.
	   * @param {Object} data
	   * @returns {Result}
	   */
	  ;

	  ResultFactory.fromGoogleCustomSearchEngine = function fromGoogleCustomSearchEngine(data) {
	    return new Result({
	      raw: data,
	      title: data.htmlTitle.replace(/(<([^>]+)>)/ig, ''),
	      details: data.htmlSnippet,
	      link: data.link
	    });
	  }
	  /**
	   * Converts an API result object into a result view model.
	   * Maps view model fields based on the API data for a Bing Custom Search Engine object.
	   * @param {Object} data
	   * @returns {Result}
	   */
	  ;

	  ResultFactory.fromBingCustomSearchEngine = function fromBingCustomSearchEngine(data) {
	    return new Result({
	      raw: data,
	      title: data.name,
	      details: data.snippet,
	      link: data.url
	    });
	  }
	  /**
	   * Converts an API result object into a result view model.
	   * Maps view model fields based on the API data for a Zendesk Search Engine object.
	   * @param {Object} data
	   * @returns {Result}
	   */
	  ;

	  ResultFactory.fromZendeskSearchEngine = function fromZendeskSearchEngine(data) {
	    return new Result({
	      raw: data,
	      title: data.title,
	      details: data.snippet,
	      link: data.html_url
	    });
	  }
	  /**
	   * Converts an API result object into a result view model.
	   * Maps view model fields based on the API data for a Algolia Search Engine object.
	   * Details field is set to objectID since response has only one general field objectID.
	   * @param {Object} data
	   * @returns {Result}
	   */
	  ;

	  ResultFactory.fromAlgoliaSearchEngine = function fromAlgoliaSearchEngine(data) {
	    return new Result({
	      raw: data,
	      details: data.objectID,
	      id: data.objectID
	    });
	  }
	  /**
	   * Truncates strings to 250 characters, attempting to preserve whole words
	   * @param str {string} the string to truncate
	   * @param limit {Number} the maximum character length to return
	   * @param trailing {string} a trailing string to denote truncation, e.g. '...'
	   * @param sep {string} the word separator
	   * @returns {string}
	   */
	  ;

	  ResultFactory.truncate = function truncate(str, limit, trailing, sep) {
	    if (limit === void 0) {
	      limit = 250;
	    }

	    if (trailing === void 0) {
	      trailing = '...';
	    }

	    if (sep === void 0) {
	      sep = ' ';
	    }

	    if (!str || str.length <= limit) {
	      return str;
	    } // TODO (bmcginnis): split punctuation too so we don't end up with "foo,..."


	    var words = str.split(sep);
	    var max = limit - trailing.length;
	    var truncated = '';

	    for (var i = 0; i < words.length; i++) {
	      var word = words[i];

	      if (truncated.length + word.length > max || i !== 0 && truncated.length + word.length + sep.length > max) {
	        truncated += trailing;
	        break;
	      }

	      truncated += i === 0 ? word : sep + word;
	    }

	    return truncated;
	  };

	  return ResultFactory;
	}();

	var Section =
	/*#__PURE__*/
	function () {
	  function Section(data, url, formatters) {
	    this.searchState = SearchStates.SEARCH_COMPLETE;
	    this.verticalConfigId = data.verticalConfigId || null;
	    this.resultsCount = data.resultsCount || 0;
	    this.encodedState = data.encodedState || '';
	    this.appliedQueryFilters = AppliedQueryFilter.from(data.appliedQueryFilters);
	    this.facets = data.facets || null;
	    this.results = ResultFactory.from(data.results, formatters, this.verticalConfigId, data.source);
	    this.map = Section.parseMap(data.results);
	    this.verticalURL = url || null;
	  }

	  Section.parseMap = function parseMap(results) {
	    var mapMarkers = [];
	    var centerCoordinates = {};

	    for (var j = 0; j < results.length; j++) {
	      // TODO(billy) Remove legacy fallback from all data format
	      var result = results[j].data || results[j];

	      if (result && result.yextDisplayCoordinate) {
	        if (!centerCoordinates.latitude) {
	          centerCoordinates = {
	            latitude: result.yextDisplayCoordinate.latitude,
	            longitude: result.yextDisplayCoordinate.longitude
	          };
	        }

	        mapMarkers.push({
	          item: result,
	          label: mapMarkers.length + 1,
	          latitude: result.yextDisplayCoordinate.latitude,
	          longitude: result.yextDisplayCoordinate.longitude
	        });
	      }
	    }

	    return {
	      'mapCenter': centerCoordinates,
	      'mapMarkers': mapMarkers
	    };
	  }
	  /**
	   * Create a section from the provided data
	   * @param {Object|Array} modules The result modules
	   * @param {Object} urls The tab urls
	   * @param {Object.<string, function>} formatters Field formatters for results
	   */
	  ;

	  Section.from = function from(modules, urls, formatters) {
	    var sections = [];

	    if (!modules) {
	      return sections;
	    }

	    if (!isArray$4(modules)) {
	      return new Section(modules, null, formatters);
	    } // Our sections should contain a property of mapMarker objects


	    for (var i = 0; i < modules.length; i++) {
	      sections.push(new Section(modules[i], urls[modules[i].verticalConfigId], formatters));
	    }

	    return sections;
	  };

	  return Section;
	}();

	var AppliedQueryFilter =
	/*#__PURE__*/
	function () {
	  // Support legacy model and new model until fully migrated.
	  // TODO(billy) Remove the left expression during assignment when migrated.
	  function AppliedQueryFilter(appliedQueryFilter) {
	    this.key = appliedQueryFilter.key || appliedQueryFilter.displayKey;
	    this.value = appliedQueryFilter.value || appliedQueryFilter.displayValue;
	  }

	  AppliedQueryFilter.from = function from(appliedQueryFilters) {
	    var filters = [];

	    for (var i = 0; i < appliedQueryFilters.length; i++) {
	      filters.push(new AppliedQueryFilter(appliedQueryFilters[i]));
	    }

	    return filters;
	  };

	  return AppliedQueryFilter;
	}();

	/** @module UniversalResults */

	var UniversalResults =
	/*#__PURE__*/
	function () {
	  function UniversalResults(data) {
	    this.queryId = data.queryId || null;
	    this.sections = data.sections || [];
	    /**
	     * The current state of the search, used to render different templates before, during,
	     * and after loading
	     * @type {string}
	     */

	    this.searchState = data.searchState || SearchStates.SEARCH_COMPLETE;
	  }
	  /**
	   * Create universal results from server data
	   * @param {Object} response The server response
	   * @param {Object} urls The tab urls
	   * @param {Object.<string, function>} formatters The field formatters to use
	   */


	  UniversalResults.from = function from(response, urls, formatters) {
	    return new UniversalResults({
	      queryId: response.queryId,
	      sections: Section.from(response.modules, urls, formatters)
	    });
	  }
	  /**
	   * Construct a UnivervalResults object representing loading results
	   * @return {UniversalResults}
	   */
	  ;

	  UniversalResults.searchLoading = function searchLoading() {
	    return new UniversalResults({
	      searchState: SearchStates.SEARCH_LOADING
	    });
	  };

	  return UniversalResults;
	}();

	var onFreeze$3 = internalMetadata$1.onFreeze;

	var nativeFreeze$1 = Object.freeze;
	var FAILS_ON_PRIMITIVES$d = fails(function () { nativeFreeze$1(1); });

	// `Object.freeze` method
	// https://tc39.github.io/ecma262/#sec-object.freeze
	_export({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES$d, sham: !freezing$1 }, {
	  freeze: function freeze(it) {
	    return nativeFreeze$1 && isObject(it) ? nativeFreeze$1(onFreeze$3(it)) : it;
	  }
	});

	var freeze = path.Object.freeze;

	var freeze$1 = freeze;

	var freeze$2 = freeze$1;

	/** @module DirectAnswer */
	var DirectAnswer =
	/*#__PURE__*/
	function () {
	  function DirectAnswer(directAnswer) {
	    if (directAnswer === void 0) {
	      directAnswer = {};
	    }

	    assign$2(this, directAnswer);

	    freeze$2(this);
	  }
	  /**
	   * Create a DirectAnswer model from the given server data and formatters
	   * @param {Object} response The server direct answer
	   * @param {Object.<string, function>} formatters The formatters to apply to this direct answer
	   */


	  DirectAnswer.from = function from(response, formatters) {
	    var data = objectSpread({}, response);

	    var answer = data.answer,
	        relatedItem = data.relatedItem;

	    if (answer && formatters[answer.fieldApiName]) {
	      answer.value = formatters[answer.fieldApiName](answer.value, relatedItem.data.fieldValues, relatedItem.verticalConfigId, true);
	    }

	    return new DirectAnswer(data);
	  };

	  return DirectAnswer;
	}();

	/** @module Navigation */
	var Navigation =
	/*#__PURE__*/
	function () {
	  function Navigation(tabOrder) {
	    this.tabOrder = tabOrder || [];

	    freeze$2(this);
	  }

	  Navigation.from = function from(modules) {
	    var nav = [];

	    if (!modules || !isArray$4(modules)) {
	      return nav;
	    }

	    for (var i = 0; i < modules.length; i++) {
	      nav.push(modules[i].verticalConfigId);
	    }

	    return new Navigation(nav);
	  };

	  return Navigation;
	}();

	var concat$3 = concat_1;

	var concat$4 = concat$3;

	var VerticalResults =
	/*#__PURE__*/
	function () {
	  function VerticalResults(data) {
	    if (data === void 0) {
	      data = {};
	    }

	    assign$2(this, {
	      searchState: SearchStates.SEARCH_COMPLETE
	    }, data);

	    freeze$2(this);
	  }
	  /**
	   * Append the provided results to the current results
	   * @param {VerticalResults} results the results to append to the current results
	   */


	  var _proto = VerticalResults.prototype;

	  _proto.append = function append(results) {
	    var _context, _context2;

	    var merged = objectSpread({}, this);

	    merged.results = concat$4(_context = this.results).call(_context, results.results);
	    map$2(merged).mapMarkers = concat$4(_context2 = map$2(this).mapMarkers).call(_context2, map$2(results).mapMarkers);
	    return new VerticalResults(merged);
	  }
	  /**
	   * Create vertical results from server data
	   * @param {Object} response The server response
	   * @param {Object.<string, function>} formatters The field formatters to use
	   */
	  ;

	  VerticalResults.from = function from(response, formatters) {
	    return new VerticalResults(Section.from(response, null, formatters));
	  }
	  /**
	   * Construct a VerticalResults object representing loading results
	   * @return {VerticalResults}
	   */
	  ;

	  VerticalResults.searchLoading = function searchLoading() {
	    return new VerticalResults({
	      searchState: SearchStates.SEARCH_LOADING
	    });
	  };

	  VerticalResults.areDuplicateNamesAllowed = function areDuplicateNamesAllowed() {
	    return true;
	  };

	  return VerticalResults;
	}();

	/** @module SpellCheck */
	/**
	 * SpellCheck is the core state model
	 * to power the SpellCheck component
	 */

	var SpellCheck =
	/*#__PURE__*/
	function () {
	  function SpellCheck(data) {
	    /**
	     * The original query
	     * @type {string}
	     */
	    this.query = data.query || null;
	    /**
	     * The corrected query
	     * @type {string}
	     */

	    this.correctedQuery = data.correctedQuery || null;
	    /**
	     * The corrected query with highlighted tags
	     * @type {string}
	     */

	    this.correctedQueryDisplay = data.correctedQueryDisplay || null;
	    /**
	     * The spell check type
	     * @type {string}
	     */

	    this.type = data.type || null;
	    /**
	     * Should show spell check or not
	     * @type {boolean}
	     */

	    this.shouldShow = this.correctedQuery !== null;
	  }
	  /**
	   * Create a spell check model from the provided data
	   * @param {Object} response The spell check response
	   */


	  SpellCheck.from = function from(response) {
	    if (!response) {
	      return {};
	    }

	    return new SpellCheck({
	      query: response.originalQuery,
	      correctedQuery: response.correctedQuery,
	      correctedQueryDisplay: new HighlightedValue(response.correctedQuery).get(),
	      type: response.type
	    });
	  };

	  return SpellCheck;
	}();

	/** @module StorageKeys */

	/**
	 * StorageKeys is an ENUM are considered the root context
	 * for how data is stored and scoped in the storage.
	 *
	 * @enum {string}
	 */
	var StorageKeys = {
	  NAVIGATION: 'navigation',
	  UNIVERSAL_RESULTS: 'universal-results',
	  VERTICAL_RESULTS: 'vertical-results',
	  AUTOCOMPLETE: 'autocomplete',
	  DIRECT_ANSWER: 'direct-answer',
	  FILTER: 'filter',
	  QUERY: 'query',
	  QUERY_ID: 'query-id',
	  FACET_FILTER: 'facet-filter',
	  DYNAMIC_FILTERS: 'dynamic-filters',
	  PARAMS: 'params',
	  GEOLOCATION: 'geolocation',
	  INTENTS: 'intents',
	  QUESTION_SUBMISSION: 'question-submission',
	  SEARCH_CONFIG: 'search-config',
	  SEARCH_OFFSET: 'search-offset',
	  SPELL_CHECK: 'spell-check',
	  LOCATION_BIAS: 'location-bias',
	  SESSIONS_OPT_IN: 'sessions-opt-in',
	  NAVIGATION_CONFIG: 'navigation-config',
	  LOCALE: 'locale',
	  SORT_BYS: 'sort-bys'
	};

	var filter$3 = filter_1;

	var filter$4 = filter$3;

	/** @module DynamicFilters */

	/**
	 * Model representing a set of dynamic filters
	 */
	var DynamicFilters =
	/*#__PURE__*/
	function () {
	  function DynamicFilters(data) {
	    /**
	     * The list of filters this model holds
	     * @type {{label: string, fieldId: string, options: object[]}}
	     */
	    this.filters = data.filters || [];

	    freeze$2(this);
	  }
	  /**
	   * Organize 'facets' from the api response into dynamic filters
	   * @param {Object} response dynamic filter response from the api
	   * @returns {DynamicFilters}
	   */


	  DynamicFilters.from = function from(response) {
	    var facets = response.facets;

	    var dynamicFilters = map$2(facets).call(facets, function (f) {
	      var _context;

	      return {
	        label: f['displayName'],
	        fieldId: f['fieldId'],
	        options: map$2(_context = f.options).call(_context, function (o) {
	          return {
	            label: o['displayName'],
	            countLabel: o['count'],
	            selected: o['selected'],
	            filter: filter$4(o)
	          };
	        })
	      };
	    });

	    return new DynamicFilters({
	      filters: dynamicFilters
	    });
	  };

	  return DynamicFilters;
	}();

	/** @module SearchIntents */
	var SearchIntents =
	/*#__PURE__*/
	function () {
	  function SearchIntents(intents) {
	    /**
	     * The intent to find results based on the user's location
	     * @type {boolean}
	     */
	    this.nearMe = intents.nearMe;

	    freeze$2(this);
	  }
	  /**
	   * Create SearchIntents from server response
	   * @param {Object} response The server response intents
	   * @returns {SearchIntents}
	   */


	  SearchIntents.from = function from(response) {
	    var intents = response || [];
	    return new SearchIntents({
	      nearMe: includes$4(intents).call(intents, 'NEAR_ME')
	    });
	  };

	  return SearchIntents;
	}();

	/** @module LocationBias */

	/**
	 * LocationBias is the core state model
	 * to power the LocationBias component
	 */
	var LocationBias =
	/*#__PURE__*/
	function () {
	  function LocationBias(data) {
	    /**
	     * The location bias accuracy which are IP, DEVICE and UNKNWON
	     * @type {string}
	     */
	    this.accuracy = data.accuracy || null;
	    /**
	     * The latitude used for location bias
	     * @type {number}
	     */

	    this.latitude = data.latitude || null;
	    /**
	     * The longitude used for location bias
	     * @type {number}
	     */

	    this.longitude = data.longitude || null;
	    /**
	     * The location display name
	     * @type {string}
	     */

	    this.locationDisplayName = data.locationDisplayName || null;
	  }
	  /**
	   * Create a location bias model from the provided data
	   * @param {Object} response The location bias response
	   */


	  LocationBias.from = function from(response) {
	    if (!response) {
	      return new LocationBias({
	        accuracy: 'UNKNOWN'
	      });
	    }

	    return new LocationBias({
	      accuracy: response.accuracy,
	      latitude: response.latitude,
	      longitude: response.longitude,
	      locationDisplayName: response.locationDisplayName
	    });
	  };

	  return LocationBias;
	}();

	/** @module SearchDataTransformer */
	/**
	 * A Data Transformer that takes the response object from a Search request
	 * And transforms in to a front-end oriented data structure that our
	 * component library and core storage understand.
	 */

	var SearchDataTransformer =
	/*#__PURE__*/
	function () {
	  function SearchDataTransformer() {}

	  SearchDataTransformer.transform = function transform(data, urls, formatters) {
	    var _ref;

	    if (urls === void 0) {
	      urls = {};
	    }

	    var response = data.response;
	    return _ref = {}, _ref[StorageKeys.QUERY_ID] = response.queryId, _ref[StorageKeys.NAVIGATION] = Navigation.from(response.modules), _ref[StorageKeys.DIRECT_ANSWER] = DirectAnswer.from(response.directAnswer, formatters), _ref[StorageKeys.UNIVERSAL_RESULTS] = UniversalResults.from(response, urls, formatters), _ref[StorageKeys.INTENTS] = SearchIntents.from(response.searchIntents), _ref[StorageKeys.SPELL_CHECK] = SpellCheck.from(response.spellCheck), _ref[StorageKeys.LOCATION_BIAS] = LocationBias.from(response.locationBias), _ref;
	  };

	  SearchDataTransformer.transformVertical = function transformVertical(data, formatters) {
	    var _ref2;

	    return _ref2 = {}, _ref2[StorageKeys.QUERY_ID] = data.response.queryId, _ref2[StorageKeys.NAVIGATION] = new Navigation(), _ref2[StorageKeys.VERTICAL_RESULTS] = VerticalResults.from(data.response, formatters), _ref2[StorageKeys.DYNAMIC_FILTERS] = DynamicFilters.from(data.response), _ref2[StorageKeys.INTENTS] = SearchIntents.from(data.response.searchIntents), _ref2[StorageKeys.SPELL_CHECK] = SpellCheck.from(data.response.spellCheck), _ref2[StorageKeys.LOCATION_BIAS] = LocationBias.from(data.response.locationBias), _ref2;
	  };

	  return SearchDataTransformer;
	}();

	/** @module QuestionSubmission */

	/**
	 * QuestionSubmission is the core state model
	 * to power the QuestionSubmission component
	 */
	var QuestionSubmission =
	/*#__PURE__*/
	function () {
	  function QuestionSubmission(question, errors) {
	    if (question === void 0) {
	      question = {};
	    }

	    /**
	     * The author of the question
	     * @type {string}
	     */
	    this.name = question.name || null;
	    /**
	     * The email address of the question
	     * @type {string}
	     */

	    this.email = question.email || null;
	    /**
	     * True if the privacy policy was approved
	     * @type {boolean}
	     */

	    this.privacyPolicy = question.privacyPolicy || null;
	    /**
	     * The question to be sent to the server
	     * @type {string}
	     */

	    this.questionText = question.questionText || null;
	    /**
	     * Alternative question meta information
	     * @type {string}
	     */

	    this.questionDescription = question.questionDescription || null;
	    /**
	     * Whether the form is expanded or not. Defaults to true.
	     */

	    this.questionExpanded = typeof question.expanded !== 'boolean' || question.expanded;
	    /**
	     * Contains any errors about the question submission
	     * @type {object}
	     */

	    this.errors = errors || null;
	    /**
	     * Whether the form has been submitted or not. Defaults to false.
	     */

	    this.questionSubmitted = question.submitted || false;

	    freeze$2(this);
	  }

	  QuestionSubmission.submitted = function submitted() {
	    return {
	      questionSubmitted: true,
	      questionExpanded: true
	    };
	  };

	  QuestionSubmission.errors = function errors(question, _errors) {
	    return QuestionSubmission(question, _errors);
	  };

	  return QuestionSubmission;
	}();

	/** @module Filter */

	/**
	 * Represents an api filter and provides static methods for easily constructing Filters.
	 * See https://developer.yext.com/docs/api-reference/#operation/listEntities for structure details
	 */
	var Filter =
	/*#__PURE__*/
	function () {
	  function Filter(data) {
	    if (data === void 0) {
	      data = {};
	    }

	    assign$2(this, data);

	    freeze$2(this);
	  }
	  /**
	   * Parse a JSON format filter returned from the server into a Filter
	   * @param {*} responseFilter A filter in JSON format returned from the backend
	   * @returns {Filter}
	   */


	  Filter.fromResponse = function fromResponse(responseFilter) {
	    return new Filter(JSON.parse(responseFilter));
	  }
	  /**
	   * Return a new Filter representing the OR of all provided filters
	   * @param  {...Filter} filters The filters to OR together
	   * @returns {Filter}
	   */
	  ;

	  Filter.or = function or() {
	    for (var _len = arguments.length, filters = new Array(_len), _key = 0; _key < _len; _key++) {
	      filters[_key] = arguments[_key];
	    }

	    return new Filter({
	      '$or': filters
	    });
	  }
	  /**
	   * Return a new Filter representing the AND of all provided filters
	   * @param  {...Filter} filters The filters to AND together
	   * @returns {Filter}
	   */
	  ;

	  Filter.and = function and() {
	    for (var _len2 = arguments.length, filters = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	      filters[_key2] = arguments[_key2];
	    }

	    return new Filter({
	      '$and': filters
	    });
	  }
	  /**
	   * OR filters with the same keys, then AND the resulting groups
	   * @param  {...Filter} filters The filters to group
	   * @returns {Filter}
	   */
	  ;

	  Filter.group = function group() {
	    var groups = {};

	    for (var _len3 = arguments.length, filters = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
	      filters[_key3] = arguments[_key3];
	    }

	    for (var _i = 0, _filters = filters; _i < _filters.length; _i++) {
	      var filter = _filters[_i];

	      var key = keys$9(filter)[0];

	      if (!groups[key]) {
	        groups[key] = [];
	      }

	      groups[key].push(filter);
	    }

	    var groupFilters = [];

	    for (var _i2 = 0, _Object$keys = keys$9(groups); _i2 < _Object$keys.length; _i2++) {
	      var field = _Object$keys[_i2];
	      groupFilters.push(groups[field].length > 1 ? Filter.or.apply(Filter, groups[field]) : groups[field][0]);
	    }

	    return groupFilters.length > 1 ? Filter.and.apply(Filter, groupFilters) : groupFilters[0];
	  }
	  /**
	   * Create a new "equal to" filter for a field
	   * @param {string} field The subject field of the filter
	   * @param {*} value The value the field should be equal to
	   * @returns {Filter}
	   */
	  ;

	  Filter.equal = function equal(field, value) {
	    return Filter._fromMatcher(field, '$eq', value);
	  }
	  /**
	   * Create a new "less than" filter for a field
	   * @param {string} field The subject field of the filter
	   * @param {*} value The value the field should be less than
	   * @returns {Filter}
	   */
	  ;

	  Filter.lessThan = function lessThan(field, value) {
	    return Filter._fromMatcher(field, '$lt', value);
	  }
	  /**
	   * Create a new "less than or equal to" filter for a field
	   * @param {string} field The subject field of the filter
	   * @param {*} value The value the field should be less than or equal to
	   * @returns {Filter}
	   */
	  ;

	  Filter.lessThanEqual = function lessThanEqual(field, value) {
	    return Filter._fromMatcher(field, '$le', value);
	  }
	  /**
	   * Create a new "greater than" filter for a field
	   * @param {string} field The subject field of the filter
	   * @param {*} value The value the field should be greater than
	   * @returns {Filter}
	   */
	  ;

	  Filter.greaterThan = function greaterThan(field, value) {
	    return Filter._fromMatcher(field, '$gt', value);
	  }
	  /**
	   * Create a new "greater than or equal to" filter for a field
	   * @param {string} field The subject field of the filter
	   * @param {*} value The value the field should be greater than or equal to
	   * @returns {Filter}
	   */
	  ;

	  Filter.greaterThanEqual = function greaterThanEqual(field, value) {
	    return Filter._fromMatcher(field, '$ge', value);
	  }
	  /**
	   * Create a new inclusive range filter
	   * @param {string} field The subject field of the filter
	   * @param {*} min The minimum value
	   * @param {*} max The maximum value
	   * @returns {Filter}
	   */
	  ;

	  Filter.inclusiveRange = function inclusiveRange(field, min, max) {
	    var _ref;

	    return new Filter((_ref = {}, _ref[field] = {
	      '$ge': min,
	      '$le': max
	    }, _ref));
	  }
	  /**
	   * Create a new exclusive range filter
	   * @param {string} field The subject field of the filter
	   * @param {*} min The minimum value
	   * @param {*} max The maximum value
	   * @returns {Filter}
	   */
	  ;

	  Filter.exclusiveRange = function exclusiveRange(field, min, max) {
	    var _ref2;

	    return new Filter((_ref2 = {}, _ref2[field] = {
	      '$gt': min,
	      '$lt': max
	    }, _ref2));
	  }
	  /**
	   * Create a new position filter
	   * @param {number} lat The latitude of the position
	   * @param {number} lng The longitude of the position
	   * @param {number} radius The search radius (in meters)
	   */
	  ;

	  Filter.position = function position(lat, lng, radius) {
	    return Filter._fromMatcher('builtin.location', '$near', {
	      lat: lat,
	      lng: lng,
	      radius: radius
	    });
	  }
	  /**
	   * Create a new filter with the given matcher
	   * @private
	   * @param {string} field The subject field of the filter
	   * @param {string} matcher The matcher for the filer
	   * @param {*} value The value for the filter
	   * @returns {Filter}
	   */
	  ;

	  Filter._fromMatcher = function _fromMatcher(field, matcher, value) {
	    var _field, _ref3;

	    return new Filter((_ref3 = {}, _ref3[field] = (_field = {}, _field[matcher] = value, _field), _ref3));
	  };

	  return Filter;
	}();

	/** @typedef {import('./services/searchservice').default} SearchService */

	/** @typedef {import('./services/autocompleteservice').default} AutoCompleteService */

	/** @typedef {import('./services/questionanswerservice').default} QuestionAnswerService */

	/**
	 * Core is the main application container for all of the network and storage
	 * related behaviors of the application.
	 */

	var Core =
	/*#__PURE__*/
	function () {
	  function Core(config) {
	    if (config === void 0) {
	      config = {};
	    }

	    /**
	     * A reference to the client API Key used for all requests
	     * @type {string}
	     * @private
	     */
	    this._apiKey = config.apiKey;
	    /**
	     * A reference to the client Answers Key used for all requests
	     * @type {string}
	     * @private
	     */

	    this._experienceKey = config.experienceKey;
	    /**
	     * The answers config version to use for all requests
	     * @type {string}
	     * @private
	     */

	    this._experienceVersion = config.experienceVersion;
	    /**
	     * A reference to the client locale used for all requests. If not specified, defaults to "en" (for
	     * backwards compatibility).
	     * @type {string}
	     * @private
	     */

	    this._locale = config.locale;
	    /**
	     * A map of field formatters used to format results, if present
	     * @type {Object.<string, function>}
	     * @private
	     */

	    this._fieldFormatters = config.fieldFormatters || {};
	    /**
	     * A reference to the core data storage that powers the UI
	     * @type {GlobalStorage}
	     * @private
	     */

	    this.globalStorage = config.globalStorage;
	    /**
	     * A reference to the core persistent storage
	     * @type {PersistentStorage}
	     * @private
	     */

	    this.persistentStorage = config.persistentStorage;
	    /**
	     * An abstraction containing the integration with the RESTful search API
	     * For both vertical and universal search
	     * @type {SearchService}
	     * @private
	     */

	    this._searcher = config.searchService;
	    /**
	     * An abstraction containing the integration with the RESTful autocomplete API
	     * For filter search, vertical autocomplete, and universal autocomplete
	     * @type {AutoCompleteService}
	     * @private
	     */

	    this._autoComplete = config.autoCompleteService;
	    /**
	     * An abstraction for interacting with the Q&A rest interface
	     * @type {QuestionAnswerService}
	     * @private
	     */

	    this._questionAnswer = config.questionAnswerService;
	  }
	  /**
	   * Search in the context of a vertical
	   * @param {string} verticalKey vertical ID for the search
	   * @param {object} query The query details
	   * @param {string} query.input The input to search for
	   * @param {string} query.filter The filter to use in the search
	   * @param {string} query.facetFilter The facet filter to use in the search
	   * @param {number} query.limit The max number of results to include, max of 50
	   * @param {number} query.offset The results offset, for fetching more results of the same query
	   * @param {string} query.id The query ID to use. If paging within a query, the same ID should be used
	   * @param {boolean} query.append If true, adds the results of this query to the end of the current results, defaults false
	   */


	  var _proto = Core.prototype;

	  _proto.verticalSearch = function verticalSearch(verticalKey, query) {
	    var _this = this;

	    if (!query.append) {
	      this.globalStorage.set(StorageKeys.VERTICAL_RESULTS, VerticalResults.searchLoading());
	      this.globalStorage.set(StorageKeys.SPELL_CHECK, {});
	      this.globalStorage.set(StorageKeys.LOCATION_BIAS, {});
	    }

	    return this._searcher.verticalSearch(verticalKey, objectSpread({
	      limit: this.globalStorage.getState(StorageKeys.SEARCH_CONFIG).limit,
	      geolocation: this.globalStorage.getState(StorageKeys.GEOLOCATION)
	    }, query, {
	      isDynamicFiltersEnabled: this._isDynamicFiltersEnabled,
	      skipSpellCheck: this.globalStorage.getState('skipSpellCheck'),
	      queryTrigger: this.globalStorage.getState('queryTrigger'),
	      sessionTrackingEnabled: this.globalStorage.getState(StorageKeys.SESSIONS_OPT_IN),
	      sortBys: this.globalStorage.getState(StorageKeys.SORT_BYS)
	    })).then(function (response) {
	      return SearchDataTransformer.transformVertical(response, _this._fieldFormatters);
	    }).then(function (data) {
	      _this.globalStorage.set(StorageKeys.QUERY_ID, data[StorageKeys.QUERY_ID]);

	      _this.globalStorage.set(StorageKeys.NAVIGATION, data[StorageKeys.NAVIGATION]);

	      _this.globalStorage.set(StorageKeys.INTENTS, data[StorageKeys.INTENTS]);

	      if (query.append) {
	        var mergedResults = _this.globalStorage.getState(StorageKeys.VERTICAL_RESULTS).append(data[StorageKeys.VERTICAL_RESULTS]);

	        _this.globalStorage.set(StorageKeys.VERTICAL_RESULTS, mergedResults);
	      } else {
	        _this.globalStorage.set(StorageKeys.VERTICAL_RESULTS, data[StorageKeys.VERTICAL_RESULTS]);
	      }

	      if (data[StorageKeys.DYNAMIC_FILTERS]) {
	        _this.globalStorage.set(StorageKeys.DYNAMIC_FILTERS, data[StorageKeys.DYNAMIC_FILTERS]);
	      }

	      if (data[StorageKeys.SPELL_CHECK]) {
	        _this.globalStorage.set(StorageKeys.SPELL_CHECK, data[StorageKeys.SPELL_CHECK]);
	      }

	      if (data[StorageKeys.LOCATION_BIAS]) {
	        _this.globalStorage.set(StorageKeys.LOCATION_BIAS, data[StorageKeys.LOCATION_BIAS]);
	      }

	      _this.globalStorage["delete"]('skipSpellCheck');

	      _this.globalStorage["delete"]('queryTrigger');
	    });
	  }
	  /**
	   * Page within the results of the last query
	   * @param {string} verticalKey The vertical key to use in the search
	   * @param {number} offset The offset to use in the search
	   */
	  ;

	  _proto.verticalPage = function verticalPage(verticalKey, offset) {
	    var allFilters = this.globalStorage.getAll(StorageKeys.FILTER);
	    var totalFilter = allFilters.length > 1 ? Filter.and.apply(Filter, allFilters) : allFilters[0];
	    var facetFilter = this.globalStorage.getAll(StorageKeys.FACET_FILTER)[0];
	    this.verticalSearch(verticalKey, {
	      input: this.globalStorage.getState(StorageKeys.QUERY),
	      id: this.globalStorage.getState(StorageKeys.QUERY_ID),
	      filter: stringify$2(totalFilter),
	      facetFilter: stringify$2(facetFilter),
	      offset: offset
	    });
	  };

	  _proto.search = function search(queryString, urls) {
	    var _this2 = this;

	    this.globalStorage.set(StorageKeys.DIRECT_ANSWER, {});
	    this.globalStorage.set(StorageKeys.UNIVERSAL_RESULTS, UniversalResults.searchLoading());
	    this.globalStorage.set(StorageKeys.QUESTION_SUBMISSION, {});
	    this.globalStorage.set(StorageKeys.SPELL_CHECK, {});
	    this.globalStorage.set(StorageKeys.LOCATION_BIAS, {});
	    return this._searcher.universalSearch(queryString, {
	      geolocation: this.globalStorage.getState(StorageKeys.GEOLOCATION),
	      skipSpellCheck: this.globalStorage.getState('skipSpellCheck'),
	      queryTrigger: this.globalStorage.getState('queryTrigger'),
	      sessionTrackingEnabled: this.globalStorage.getState(StorageKeys.SESSIONS_OPT_IN)
	    }).then(function (response) {
	      return SearchDataTransformer.transform(response, urls, _this2._fieldFormatters);
	    }).then(function (data) {
	      _this2.globalStorage.set(StorageKeys.QUERY_ID, data[StorageKeys.QUERY_ID]);

	      _this2.globalStorage.set(StorageKeys.NAVIGATION, data[StorageKeys.NAVIGATION]);

	      _this2.globalStorage.set(StorageKeys.DIRECT_ANSWER, data[StorageKeys.DIRECT_ANSWER]);

	      _this2.globalStorage.set(StorageKeys.UNIVERSAL_RESULTS, data[StorageKeys.UNIVERSAL_RESULTS], urls);

	      _this2.globalStorage.set(StorageKeys.INTENTS, data[StorageKeys.INTENTS]);

	      _this2.globalStorage.set(StorageKeys.SPELL_CHECK, data[StorageKeys.SPELL_CHECK]);

	      _this2.globalStorage.set(StorageKeys.LOCATION_BIAS, data[StorageKeys.LOCATION_BIAS]);

	      _this2.globalStorage["delete"]('skipSpellCheck');

	      _this2.globalStorage["delete"]('queryTrigger');
	    });
	  }
	  /**
	   * Given an input, query for a list of similar results and set into storage
	   *
	   * @param {string} input     the string to autocomplete
	   * @param {string} namespace the namespace to use for the storage key
	   */
	  ;

	  _proto.autoCompleteUniversal = function autoCompleteUniversal(input, namespace) {
	    var _this3 = this;

	    return this._autoComplete.queryUniversal(input).then(function (data) {
	      _this3.globalStorage.set(StorageKeys.AUTOCOMPLETE + "." + namespace, data);

	      return data;
	    });
	  }
	  /**
	   * Given an input, query for a list of similar results in the provided vertical
	   * and set into storage
	   *
	   * @param {string} input       the string to autocomplete
	   * @param {string} namespace the namespace to use for the storage key
	   * @param {string} verticalKey the vertical key for the experience
	   */
	  ;

	  _proto.autoCompleteVertical = function autoCompleteVertical(input, namespace, verticalKey) {
	    var _this4 = this;

	    return this._autoComplete.queryVertical(input, verticalKey).then(function (data) {
	      _this4.globalStorage.set(StorageKeys.AUTOCOMPLETE + "." + namespace, data);

	      return data;
	    });
	  }
	  /**
	   * Given an input, provide a list of suitable filters for autocompletion
	   *
	   * @param {string} input  the string to search for filters with
	   * @param {object} config  the config to serach for filters with
	   * @param {string} config.namespace  the namespace to use for the storage key
	   * @param {string} config.verticalKey the vertical key for the config
	   * @param {object} config.searchParameters  the search parameters for the config v2
	   */
	  ;

	  _proto.autoCompleteFilter = function autoCompleteFilter(input, config) {
	    var _this5 = this;

	    return this._autoComplete.queryFilter(input, config).then(function (data) {
	      _this5.globalStorage.set(StorageKeys.AUTOCOMPLETE + "." + config.namespace, data);
	    });
	  }
	  /**
	   * Submits a question to the server and updates the underlying question model
	   * @param {object} question The question object to submit to the server
	   * @param {number} question.entityId The entity to associate with the question (required)
	   * @param {string} question.lanuage The language of the question
	   * @param {string} question.site The "publisher" of the (e.g. 'FIRST_PARTY')
	   * @param {string} question.name The name of the author
	   * @param {string} question.email The email address of the author
	   * @param {string} question.questionText The question
	   * @param {string} question.questionDescription Additional information about the question
	   */
	  ;

	  _proto.submitQuestion = function submitQuestion(question) {
	    var _this6 = this;

	    return this._questionAnswer.submitQuestion(question).then(function (data) {
	      _this6.globalStorage.set(StorageKeys.QUESTION_SUBMISSION, QuestionSubmission.submitted());
	    });
	  }
	  /**
	   * Stores the given sortBy into storage, to be used for the next search
	   * @param {Object} sortByOptions
	   */
	  ;

	  _proto.setSortBys = function setSortBys() {
	    for (var _len = arguments.length, sortByOptions = new Array(_len), _key = 0; _key < _len; _key++) {
	      sortByOptions[_key] = arguments[_key];
	    }

	    var sortBys = map$2(sortByOptions).call(sortByOptions, function (option) {
	      return {
	        type: option.type,
	        field: option.field,
	        direction: option.direction
	      };
	    });

	    this.globalStorage.set(StorageKeys.SORT_BYS, stringify$2(sortBys));
	  }
	  /**
	   * Clears the sortBys key in global storage.
	   */
	  ;

	  _proto.clearSortBys = function clearSortBys() {
	    this.globalStorage["delete"](StorageKeys.SORT_BYS);
	  }
	  /**
	   * Stores the given query into storage, to be used for the next search
	   * @param {string} query the query to store
	   */
	  ;

	  _proto.setQuery = function setQuery(query) {
	    this.globalStorage.set(StorageKeys.QUERY, query);
	  }
	  /**
	   * Stores the provided query ID, to be used in analytics
	   * @param {string} queryId The query id to store
	   */
	  ;

	  _proto.setQueryId = function setQueryId(queryId) {
	    this.globalStorage.set(StorageKeys.QUERY_ID, queryId);
	  }
	  /**
	   * Stores the given filter into storage, to be used for the next search
	   *
	   * @param {string} namespace the namespace to use for the storage key
	   * @param {Filter} filter    the filter to set
	   */
	  ;

	  _proto.setFilter = function setFilter(namespace, filter) {
	    this.globalStorage.set(StorageKeys.FILTER + "." + namespace, filter);
	  };

	  _proto.setFacetFilter = function setFacetFilter(namespace, filter) {
	    this.globalStorage.set(StorageKeys.FACET_FILTER + "." + namespace, filter);
	  };

	  _proto.enableDynamicFilters = function enableDynamicFilters() {
	    this._isDynamicFiltersEnabled = true;
	  };

	  _proto.on = function on(evt, moduleId, cb) {
	    return this.globalStorage.on(evt, moduleId, cb);
	  };

	  return Core;
	}();

	// `Array.from` method implementation
	// https://tc39.github.io/ecma262/#sec-array.from
	var arrayFrom$1 = function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {
	  var O = toObject(arrayLike);
	  var C = typeof this == 'function' ? this : Array;
	  var argumentsLength = arguments.length;
	  var mapfn = argumentsLength > 1 ? arguments[1] : undefined;
	  var mapping = mapfn !== undefined;
	  var iteratorMethod = getIteratorMethod$1(O);
	  var index = 0;
	  var length, result, step, iterator, next, value;
	  if (mapping) mapfn = functionBindContext(mapfn, argumentsLength > 2 ? arguments[2] : undefined, 2);
	  // if the target is not iterable or it's an array with the default iterator - use a simple case
	  if (iteratorMethod != undefined && !(C == Array && isArrayIteratorMethod$1(iteratorMethod))) {
	    iterator = iteratorMethod.call(O);
	    next = iterator.next;
	    result = new C();
	    for (;!(step = next.call(iterator)).done; index++) {
	      value = mapping ? callWithSafeIterationClosing$1(iterator, mapfn, [step.value, index], true) : step.value;
	      createProperty$1(result, index, value);
	    }
	  } else {
	    length = toLength(O.length);
	    result = new C(length);
	    for (;length > index; index++) {
	      value = mapping ? mapfn(O[index], index) : O[index];
	      createProperty$1(result, index, value);
	    }
	  }
	  result.length = index;
	  return result;
	};

	var ITERATOR$d = wellKnownSymbol('iterator');
	var SAFE_CLOSING$1 = false;

	try {
	  var called$1 = 0;
	  var iteratorWithReturn$1 = {
	    next: function () {
	      return { done: !!called$1++ };
	    },
	    'return': function () {
	      SAFE_CLOSING$1 = true;
	    }
	  };
	  iteratorWithReturn$1[ITERATOR$d] = function () {
	    return this;
	  };
	} catch (error) { /* empty */ }

	var checkCorrectnessOfIteration$1 = function (exec, SKIP_CLOSING) {
	  if (!SKIP_CLOSING && !SAFE_CLOSING$1) return false;
	  var ITERATION_SUPPORT = false;
	  try {
	    var object = {};
	    object[ITERATOR$d] = function () {
	      return {
	        next: function () {
	          return { done: ITERATION_SUPPORT = true };
	        }
	      };
	    };
	    exec(object);
	  } catch (error) { /* empty */ }
	  return ITERATION_SUPPORT;
	};

	var INCORRECT_ITERATION$2 = !checkCorrectnessOfIteration$1(function (iterable) {
	});

	// `Array.from` method
	// https://tc39.github.io/ecma262/#sec-array.from
	_export({ target: 'Array', stat: true, forced: INCORRECT_ITERATION$2 }, {
	  from: arrayFrom$1
	});

	var from_1 = path.Array.from;

	var from_1$1 = from_1;

	var from_1$2 = from_1$1;

	/** @module DOM */

	/* global HTMLElement, HTMLDocument, Window, Event, Element */
	var document$4 = window.document;
	/**
	 * Static interface for interacting with the DOM API.
	 * @namespace
	 */

	var DOM =
	/*#__PURE__*/
	function () {
	  function DOM() {}

	  DOM.setup = function setup(d, p) {
	    document$4 = d;
	  }
	  /**
	   * create a HTMLElement from and HTML string
	   * @param {string} html The HTML to parse to a DOM node.
	   * @return {HTMLElement}
	   */
	  ;

	  DOM.create = function create(html) {
	    if ('createRange' in document$4) {
	      // prefer this implementation as it has wider browser support
	      // and it's better performing.
	      // see https://davidwalsh.name/convert-html-stings-dom-nodes
	      var container = document$4.createElement('div');
	      var frag = document$4.createRange().createContextualFragment(html);
	      container.appendChild(frag);
	      return container;
	    } // fallback to this because of a bug in jsdom that causes tests to fail
	    // see: https://github.com/jsdom/jsdom/issues/399


	    return new DOMParser().parseFromString(html, 'text/html').body;
	  }
	  /**
	   * query the DOM for a given css selector
	   * @param {HTMLElement} parent Optional context to use for a search. Defaults to document if not provided.
	   * @param {string} selector the CSS selector to query for
	   *
	   * @returns {HTMLElement} the FIRST node it finds, if any
	   */
	  ;

	  DOM.query = function query(parent, selector) {
	    // Facade, shifting the selector to the parent argument if only one
	    // argument is provided
	    if (selector === undefined) {
	      selector = parent;
	      parent = document$4;
	    }

	    if (selector instanceof HTMLElement || selector instanceof Window || selector instanceof HTMLDocument) {
	      return selector;
	    }

	    return parent.querySelector(selector);
	  }
	  /**
	   * query the DOM for a given css selector
	   * @param {HTMLElement} parent Optional context to use for a search. Defaults to document if not provided.
	   * @param {string} selector the CSS selector to query for
	   *
	   * @returns {Array} the FIRST node it finds, if any
	   */
	  ;

	  DOM.queryAll = function queryAll(parent, selector) {
	    // Facade, shifting the selector to the parent argument if only one
	    // argument is provided
	    if (selector === undefined) {
	      selector = parent;
	      parent = document$4;
	    } // handle the case where client code is using a pointer to a dom node and it's null, e.g. this._container


	    if (parent == null) {
	      parent = document$4;
	    }

	    if (selector instanceof HTMLElement || selector instanceof HTMLDocument || selector instanceof Window) {
	      return [selector];
	    }

	    return from_1$2(parent.querySelectorAll(selector));
	  };

	  DOM.onReady = function onReady(cb) {
	    if (document$4.readyState === 'complete' || document$4.readyState === 'loaded' || document$4.readyState === 'interactive') {
	      cb();
	      return;
	    }

	    DOM.on(document$4, 'DOMContentLoaded', cb);
	  }
	  /**
	   * createEle will create a {HTMLElement} and apply the properties attributes through an object provided.
	   * @param {string} el The element `tag` name to construct
	   * @param {Object} opts_data Optional attributes to apply to the new HTMLElement
	   */
	  ;

	  DOM.createEl = function createEl(el, opts_data) {
	    if (opts_data === void 0) {
	      opts_data = {};
	    }

	    var node = document$4.createElement(el);

	    var props = keys$9(opts_data);

	    for (var i = 0; i < props.length; i++) {
	      if (props[i] === 'class') {
	        DOM.addClass(node, opts_data[props[i]]);
	        continue;
	      }

	      node[props[i]] = opts_data[props[i]];
	    }

	    return node;
	  };

	  DOM.append = function append(parent, node) {
	    if (node === undefined) {
	      node = parent;
	      parent = document$4;
	    }

	    if (typeof parent === 'string') {
	      parent = DOM.query(parent);
	    } // Support HTML injection as well as HTMLElement appends


	    if (typeof node === 'string') {
	      parent.insertAdjacentHTML('afterBegin', node);
	    } else {
	      parent.appendChild(node);
	    }
	  };

	  DOM.addClass = function addClass(node, className) {
	    if (!node) {
	      return;
	    }

	    var classes = className.split(',');
	    var len = classes.length;

	    for (var i = 0; i < len; i++) {
	      node.classList.add(classes[i]);
	    }
	  };

	  DOM.empty = function empty(parent) {
	    parent.innerHTML = '';
	  };

	  DOM.css = function css(selector, styles) {
	    var node = DOM.query(selector);

	    for (var prop in styles) {
	      node.style[prop] = styles[prop];
	    }
	  };

	  DOM.attr = function attr(selector, _attr, val) {
	    DOM.query(selector).setAttribute(_attr, val);
	  };

	  DOM.attributes = function attributes(selector, attrs) {
	    var _context,
	        _this = this;

	    forEach$4(_context = entries$2(attrs)).call(_context, function (_ref) {
	      var attr = _ref[0],
	          val = _ref[1];
	      return _this.attr(selector, attr, val);
	    });
	  };

	  DOM.trigger = function trigger(selector, event, settings) {
	    var e = DOM._customEvent(event, settings);

	    DOM.query(selector).dispatchEvent(e);
	  } // TODO (agrow) investigate removing this
	  // Event constructor polyfill
	  ;

	  DOM._customEvent = function _customEvent(event, settings) {
	    if (typeof window.CustomEvent === 'function') {
	      return new Event(event, assign$2({
	        'bubbles': true,
	        'cancelable': true
	      }, settings || {}));
	    }

	    settings = settings || {
	      bubbles: false,
	      cancelable: false,
	      detail: null
	    };
	    var evt = document$4.createEvent('CustomEvent');
	    evt.initCustomEvent(event, settings.bubbles, settings.cancelable, settings.detail);
	    return evt;
	  };

	  DOM.on = function on(selector, evt, handler) {
	    DOM.query(selector).addEventListener(evt, handler);
	  };

	  DOM.once = function once(selector, evt, handler) {
	    DOM.query(selector).addEventListener(evt, handler, {
	      once: true
	    });
	  };

	  DOM.off = function off(selector, evt, handler) {
	    DOM.query(selector).removeEventListener(evt, handler);
	  };

	  DOM.delegate = function delegate(ctxt, selector, evt, handler) {
	    var el = DOM.query(ctxt);
	    el.addEventListener(evt, function (event) {
	      var target = event.target;

	      while (!target.isEqualNode(el)) {
	        if (DOM.matches(target, selector)) {
	          handler(event, target);
	          break;
	        }

	        target = target.parentNode;
	      }
	    });
	  } // TODO (agrow) investigate removing this
	  // Element.matches polyfill
	  ;

	  DOM.matches = function matches(element, potentialMatch) {
	    if (Element.prototype.matches) {
	      return element.matches(potentialMatch);
	    }

	    if (Element.prototype.msMatchesSelector) {
	      return element.msMatchesSelector(potentialMatch);
	    }

	    if (Element.prototype.webkitMatchesSelector) {
	      return element.webkitMatchesSelector(potentialMatch);
	    }
	  };

	  return DOM;
	}();

	var indexOf$5 = indexOf_1;

	var indexOf$6 = indexOf$5;

	var ITERATOR$e = wellKnownSymbol('iterator');

	var nativeUrl$1 = !fails(function () {
	  var url = new URL('b?a=1&b=2&c=3', 'http://a');
	  var searchParams = url.searchParams;
	  var result = '';
	  url.pathname = 'c%20d';
	  searchParams.forEach(function (value, key) {
	    searchParams['delete']('b');
	    result += key + value;
	  });
	  return (!url.toJSON)
	    || !searchParams.sort
	    || url.href !== 'http://a/c%20d?a=1&c=3'
	    || searchParams.get('c') !== '3'
	    || String(new URLSearchParams('?a=1')) !== 'a=1'
	    || !searchParams[ITERATOR$e]
	    // throws in Edge
	    || new URL('https://a@b').username !== 'a'
	    || new URLSearchParams(new URLSearchParams('a=b')).get('a') !== 'b'
	    // not punycoded in Edge
	    || new URL('http://тест').host !== 'xn--e1aybc'
	    // not escaped in Chrome 62-
	    || new URL('http://a#б').hash !== '#%D0%B1'
	    // fails in Chrome 66-
	    || result !== 'a1c3'
	    // throws in Safari
	    || new URL('http://x', undefined).host !== 'x';
	});

	// TODO: in core-js@4, move /modules/ dependencies to public entries for better optimization by tools like `preset-env`





















	var $fetch$2 = getBuiltIn('fetch');
	var Headers$1 = getBuiltIn('Headers');
	var ITERATOR$f = wellKnownSymbol('iterator');
	var URL_SEARCH_PARAMS$1 = 'URLSearchParams';
	var URL_SEARCH_PARAMS_ITERATOR$1 = URL_SEARCH_PARAMS$1 + 'Iterator';
	var setInternalState$g = internalState$1.set;
	var getInternalParamsState$1 = internalState$1.getterFor(URL_SEARCH_PARAMS$1);
	var getInternalIteratorState$1 = internalState$1.getterFor(URL_SEARCH_PARAMS_ITERATOR$1);

	var plus$1 = /\+/g;
	var sequences$1 = Array(4);

	var percentSequence$1 = function (bytes) {
	  return sequences$1[bytes - 1] || (sequences$1[bytes - 1] = RegExp('((?:%[\\da-f]{2}){' + bytes + '})', 'gi'));
	};

	var percentDecode$1 = function (sequence) {
	  try {
	    return decodeURIComponent(sequence);
	  } catch (error) {
	    return sequence;
	  }
	};

	var deserialize$1 = function (it) {
	  var result = it.replace(plus$1, ' ');
	  var bytes = 4;
	  try {
	    return decodeURIComponent(result);
	  } catch (error) {
	    while (bytes) {
	      result = result.replace(percentSequence$1(bytes--), percentDecode$1);
	    }
	    return result;
	  }
	};

	var find$2 = /[!'()~]|%20/g;

	var replace$1 = {
	  '!': '%21',
	  "'": '%27',
	  '(': '%28',
	  ')': '%29',
	  '~': '%7E',
	  '%20': '+'
	};

	var replacer$1 = function (match) {
	  return replace$1[match];
	};

	var serialize$1 = function (it) {
	  return encodeURIComponent(it).replace(find$2, replacer$1);
	};

	var parseSearchParams$1 = function (result, query) {
	  if (query) {
	    var attributes = query.split('&');
	    var index = 0;
	    var attribute, entry;
	    while (index < attributes.length) {
	      attribute = attributes[index++];
	      if (attribute.length) {
	        entry = attribute.split('=');
	        result.push({
	          key: deserialize$1(entry.shift()),
	          value: deserialize$1(entry.join('='))
	        });
	      }
	    }
	  }
	};

	var updateSearchParams$1 = function (query) {
	  this.entries.length = 0;
	  parseSearchParams$1(this.entries, query);
	};

	var validateArgumentsLength$1 = function (passed, required) {
	  if (passed < required) throw TypeError('Not enough arguments');
	};

	var URLSearchParamsIterator$1 = createIteratorConstructor$1(function Iterator(params, kind) {
	  setInternalState$g(this, {
	    type: URL_SEARCH_PARAMS_ITERATOR$1,
	    iterator: getIterator$1(getInternalParamsState$1(params).entries),
	    kind: kind
	  });
	}, 'Iterator', function next() {
	  var state = getInternalIteratorState$1(this);
	  var kind = state.kind;
	  var step = state.iterator.next();
	  var entry = step.value;
	  if (!step.done) {
	    step.value = kind === 'keys' ? entry.key : kind === 'values' ? entry.value : [entry.key, entry.value];
	  } return step;
	});

	// `URLSearchParams` constructor
	// https://url.spec.whatwg.org/#interface-urlsearchparams
	var URLSearchParamsConstructor$1 = function URLSearchParams(/* init */) {
	  anInstance$1(this, URLSearchParamsConstructor$1, URL_SEARCH_PARAMS$1);
	  var init = arguments.length > 0 ? arguments[0] : undefined;
	  var that = this;
	  var entries = [];
	  var iteratorMethod, iterator, next, step, entryIterator, entryNext, first, second, key;

	  setInternalState$g(that, {
	    type: URL_SEARCH_PARAMS$1,
	    entries: entries,
	    updateURL: function () { /* empty */ },
	    updateSearchParams: updateSearchParams$1
	  });

	  if (init !== undefined) {
	    if (isObject(init)) {
	      iteratorMethod = getIteratorMethod$1(init);
	      if (typeof iteratorMethod === 'function') {
	        iterator = iteratorMethod.call(init);
	        next = iterator.next;
	        while (!(step = next.call(iterator)).done) {
	          entryIterator = getIterator$1(anObject(step.value));
	          entryNext = entryIterator.next;
	          if (
	            (first = entryNext.call(entryIterator)).done ||
	            (second = entryNext.call(entryIterator)).done ||
	            !entryNext.call(entryIterator).done
	          ) throw TypeError('Expected sequence with length 2');
	          entries.push({ key: first.value + '', value: second.value + '' });
	        }
	      } else for (key in init) if (has(init, key)) entries.push({ key: key, value: init[key] + '' });
	    } else {
	      parseSearchParams$1(entries, typeof init === 'string' ? init.charAt(0) === '?' ? init.slice(1) : init : init + '');
	    }
	  }
	};

	var URLSearchParamsPrototype$1 = URLSearchParamsConstructor$1.prototype;

	redefineAll$1(URLSearchParamsPrototype$1, {
	  // `URLSearchParams.prototype.appent` method
	  // https://url.spec.whatwg.org/#dom-urlsearchparams-append
	  append: function append(name, value) {
	    validateArgumentsLength$1(arguments.length, 2);
	    var state = getInternalParamsState$1(this);
	    state.entries.push({ key: name + '', value: value + '' });
	    state.updateURL();
	  },
	  // `URLSearchParams.prototype.delete` method
	  // https://url.spec.whatwg.org/#dom-urlsearchparams-delete
	  'delete': function (name) {
	    validateArgumentsLength$1(arguments.length, 1);
	    var state = getInternalParamsState$1(this);
	    var entries = state.entries;
	    var key = name + '';
	    var index = 0;
	    while (index < entries.length) {
	      if (entries[index].key === key) entries.splice(index, 1);
	      else index++;
	    }
	    state.updateURL();
	  },
	  // `URLSearchParams.prototype.get` method
	  // https://url.spec.whatwg.org/#dom-urlsearchparams-get
	  get: function get(name) {
	    validateArgumentsLength$1(arguments.length, 1);
	    var entries = getInternalParamsState$1(this).entries;
	    var key = name + '';
	    var index = 0;
	    for (; index < entries.length; index++) {
	      if (entries[index].key === key) return entries[index].value;
	    }
	    return null;
	  },
	  // `URLSearchParams.prototype.getAll` method
	  // https://url.spec.whatwg.org/#dom-urlsearchparams-getall
	  getAll: function getAll(name) {
	    validateArgumentsLength$1(arguments.length, 1);
	    var entries = getInternalParamsState$1(this).entries;
	    var key = name + '';
	    var result = [];
	    var index = 0;
	    for (; index < entries.length; index++) {
	      if (entries[index].key === key) result.push(entries[index].value);
	    }
	    return result;
	  },
	  // `URLSearchParams.prototype.has` method
	  // https://url.spec.whatwg.org/#dom-urlsearchparams-has
	  has: function has(name) {
	    validateArgumentsLength$1(arguments.length, 1);
	    var entries = getInternalParamsState$1(this).entries;
	    var key = name + '';
	    var index = 0;
	    while (index < entries.length) {
	      if (entries[index++].key === key) return true;
	    }
	    return false;
	  },
	  // `URLSearchParams.prototype.set` method
	  // https://url.spec.whatwg.org/#dom-urlsearchparams-set
	  set: function set(name, value) {
	    validateArgumentsLength$1(arguments.length, 1);
	    var state = getInternalParamsState$1(this);
	    var entries = state.entries;
	    var found = false;
	    var key = name + '';
	    var val = value + '';
	    var index = 0;
	    var entry;
	    for (; index < entries.length; index++) {
	      entry = entries[index];
	      if (entry.key === key) {
	        if (found) entries.splice(index--, 1);
	        else {
	          found = true;
	          entry.value = val;
	        }
	      }
	    }
	    if (!found) entries.push({ key: key, value: val });
	    state.updateURL();
	  },
	  // `URLSearchParams.prototype.sort` method
	  // https://url.spec.whatwg.org/#dom-urlsearchparams-sort
	  sort: function sort() {
	    var state = getInternalParamsState$1(this);
	    var entries = state.entries;
	    // Array#sort is not stable in some engines
	    var slice = entries.slice();
	    var entry, entriesIndex, sliceIndex;
	    entries.length = 0;
	    for (sliceIndex = 0; sliceIndex < slice.length; sliceIndex++) {
	      entry = slice[sliceIndex];
	      for (entriesIndex = 0; entriesIndex < sliceIndex; entriesIndex++) {
	        if (entries[entriesIndex].key > entry.key) {
	          entries.splice(entriesIndex, 0, entry);
	          break;
	        }
	      }
	      if (entriesIndex === sliceIndex) entries.push(entry);
	    }
	    state.updateURL();
	  },
	  // `URLSearchParams.prototype.forEach` method
	  forEach: function forEach(callback /* , thisArg */) {
	    var entries = getInternalParamsState$1(this).entries;
	    var boundFunction = functionBindContext(callback, arguments.length > 1 ? arguments[1] : undefined, 3);
	    var index = 0;
	    var entry;
	    while (index < entries.length) {
	      entry = entries[index++];
	      boundFunction(entry.value, entry.key, this);
	    }
	  },
	  // `URLSearchParams.prototype.keys` method
	  keys: function keys() {
	    return new URLSearchParamsIterator$1(this, 'keys');
	  },
	  // `URLSearchParams.prototype.values` method
	  values: function values() {
	    return new URLSearchParamsIterator$1(this, 'values');
	  },
	  // `URLSearchParams.prototype.entries` method
	  entries: function entries() {
	    return new URLSearchParamsIterator$1(this, 'entries');
	  }
	}, { enumerable: true });

	// `URLSearchParams.prototype[@@iterator]` method
	redefine$1(URLSearchParamsPrototype$1, ITERATOR$f, URLSearchParamsPrototype$1.entries);

	// `URLSearchParams.prototype.toString` method
	// https://url.spec.whatwg.org/#urlsearchparams-stringification-behavior
	redefine$1(URLSearchParamsPrototype$1, 'toString', function toString() {
	  var entries = getInternalParamsState$1(this).entries;
	  var result = [];
	  var index = 0;
	  var entry;
	  while (index < entries.length) {
	    entry = entries[index++];
	    result.push(serialize$1(entry.key) + '=' + serialize$1(entry.value));
	  } return result.join('&');
	}, { enumerable: true });

	setToStringTag$1(URLSearchParamsConstructor$1, URL_SEARCH_PARAMS$1);

	_export({ global: true, forced: !nativeUrl$1 }, {
	  URLSearchParams: URLSearchParamsConstructor$1
	});

	// Wrap `fetch` for correct work with polyfilled `URLSearchParams`
	// https://github.com/zloirock/core-js/issues/674
	if (!nativeUrl$1 && typeof $fetch$2 == 'function' && typeof Headers$1 == 'function') {
	  _export({ global: true, enumerable: true, forced: true }, {
	    fetch: function fetch(input /* , init */) {
	      var args = [input];
	      var init, body, headers;
	      if (arguments.length > 1) {
	        init = arguments[1];
	        if (isObject(init)) {
	          body = init.body;
	          if (classof$1(body) === URL_SEARCH_PARAMS$1) {
	            headers = init.headers ? new Headers$1(init.headers) : new Headers$1();
	            if (!headers.has('content-type')) {
	              headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
	            }
	            init = objectCreate$1(init, {
	              body: createPropertyDescriptor(0, String(body)),
	              headers: createPropertyDescriptor(0, headers)
	            });
	          }
	        }
	        args.push(init);
	      } return $fetch$2.apply(this, args);
	    }
	  });
	}

	var urlSearchParams = path.URLSearchParams;

	var urlSearchParams$1 = urlSearchParams;

	var urlSearchParams$2 = urlSearchParams$1;

	/** @module SearchParams */

	/* global window */

	/**
	 * SearchParams is a class to get the search params in a URL.
	 * It is a replacement for URL.searchParams and URLSearchParams for browsers like IE11
	 */
	var SearchParams =
	/*#__PURE__*/
	function () {
	  function SearchParams(url) {
	    /**
	     * Mapping of all query parameters in the given url, query param -> value
	     * Only used if URLSearchParams does not exist in the window
	     * @type {Object}
	     * @private
	     */
	    this._params = {};

	    if (window && window.URLSearchParams) {
	      return new urlSearchParams$2(url);
	    } else {
	      this._params = this.parse(url);
	    }
	  }
	  /**
	   * parse creates a mapping of all query params in a given url
	   * The query param values are decoded before being put in the map
	   * Three types of input are supported
	   *   (1) full URL e.g. http://www.yext.com/?q=hello
	   *   (2) params with ? e.g. ?q=hello
	   *   (1) params without ? e.g. q=hello
	   * @param {string} url The url
	   * @returns {Object} mapping from query param -> value where value is '' if no value is provided
	   */


	  var _proto = SearchParams.prototype;

	  _proto.parse = function parse(url) {
	    var params = {};
	    var search = url;

	    if (search === '') {
	      return params;
	    } // Normalize all url inputs to string of query params separated by &


	    if (indexOf$6(url).call(url, '?') > -1) {
	      search = slice$5(url).call(url, indexOf$6(url).call(url, '?') + 1);
	    }

	    var encodedParams = search.split('&');

	    for (var i = 0; i < encodedParams.length; i++) {
	      var keyVal = encodedParams[i].split('=');

	      if (keyVal.length > 1) {
	        params[keyVal[0]] = SearchParams.decode(keyVal[1]);
	      } else {
	        params[keyVal[0]] = '';
	      }
	    }

	    return params;
	  }
	  /**
	   * get returns the value of the given query param
	   * @param {string} query the query param key to get the value of
	   * @return {string} param value, null otherwise
	   */
	  ;

	  _proto.get = function get(query) {
	    if (typeof this._params[String(query)] === 'undefined') {
	      return null;
	    }

	    return this._params[query];
	  }
	  /**
	   * set changes the value of a given query param
	   * @param {string} name the query param key
	   * @param {string} value the value of the query param update with
	   */
	  ;

	  _proto.set = function set(name, value) {
	    this._params[String(name)] = String(value);
	  }
	  /**
	   * has checks to see if the given query param key exists in the params object
	   * @param {string} query the query param to check
	   * @return {boolean} true if the query param is in the params object, false o/w
	   */
	  ;

	  _proto.has = function has(query) {
	    return query in this._params;
	  }
	  /**
	   * delete removes the given query param and its associated value from the params object
	   * @param {string} name the query param key
	   */
	  ;

	  _proto["delete"] = function _delete(name) {
	    delete this._params[String(name)];
	  }
	  /**
	   * toString returns a url with all the query params in the params object (without a ?)
	   * @return {string}
	   */
	  ;

	  _proto.toString = function toString() {
	    var string = [];

	    for (var key in this._params) {
	      string.push(key + "=" + SearchParams.encode(this._params[key]));
	    }

	    return string.join('&');
	  };

	  _proto.entries = function entries() {
	    var entries = [];

	    for (var key in this._params) {
	      entries.push([key, this._params[key]]);
	    }

	    return entries;
	  }
	  /**
	   * decode returns the decoded representation of the given string
	   * @param {string} string the string to decode
	   * @return {string}
	   */
	  ;

	  SearchParams.decode = function decode(string) {
	    return decodeURIComponent(string.replace(/[ +]/g, '%20'));
	  }
	  /**
	   * decode returns the encoded representation of the given string (e.g. + -> %2B)
	   * @param {string} string the string to encode
	   * @return {string}
	   */
	  ;

	  SearchParams.encode = function encode(string) {
	    var replace = {
	      '!': '%21',
	      "'": '%27',
	      '(': '%28',
	      ')': '%29',
	      '%20': '+'
	    };
	    return encodeURIComponent(string).replace(/[!'()]|%20/g, function (match) {
	      return replace[match];
	    });
	  };

	  return SearchParams;
	}();

	/** @module Renderer */

	/**
	 * Renderer is an abstract class that all Renderers should extend and implement
	 */
	var Renderer =
	/*#__PURE__*/
	function () {
	  function Renderer() {}

	  var _proto = Renderer.prototype;

	  /**
	   * render is a core method for all renderers.
	   * All implementations should override this class
	   * @param {string} template
	   * @param {object} data
	   */
	  _proto.render = function render(template, data) {
	    return template;
	  };

	  _proto.registerHelper = function registerHelper(name, cb) {};

	  _proto.compile = function compile(template) {};

	  return Renderer;
	}();

	/**
	 * HandlebarsRenderer is a wrapper around the nativate handlebars renderer.
	 * @extends Renderer
	 */

	var HandlebarsRenderer =
	/*#__PURE__*/
	function (_Renderer) {
	  inheritsLoose(HandlebarsRenderer, _Renderer);

	  function HandlebarsRenderer(templates, opts) {
	    var _this;

	    if (templates === void 0) {
	      templates = {};
	    }

	    if (opts === void 0) {
	      opts = {};
	    }

	    _this = _Renderer.call(this) || this;
	    /**
	     * A local reference to the handlebars compiler
	     * @type {Handlebars}
	     * @private
	     */

	    _this._handlebars = templates._hb || null;
	    /**
	     * A local reference to the pre-compiled handlebars templates
	     * @type {Handlebars}
	     * @private
	     */

	    _this._templates = templates || {};
	    return _this;
	  }

	  var _proto = HandlebarsRenderer.prototype;

	  _proto.init = function init(templates) {
	    // Assign the handlebars compiler and templates based on
	    // information provided from external dep (in default case, it comes from external server request)
	    this._handlebars = templates._hb;
	    this._templates = templates; // TODO(billy) Once we re-write templates using the new helpers library
	    // we probably don't need these custom helpers anymore

	    this._registerCustomHelpers();
	  }
	  /**
	   * registerHelper is a public interface for external dependencies to
	   * register their own custom helpers to our internal Handlebars Compiler
	   */
	  ;

	  _proto.registerHelper = function registerHelper(name, cb) {
	    this._handlebars.registerHelper(name, cb);
	  }
	  /**
	   * compile a handlebars template so that it can be rendered,
	   * using the {Handlebars} compiler
	   * @param {string} template The template string to compile
	   */
	  ;

	  _proto.compile = function compile(template) {
	    if (typeof template !== 'string') {
	      return '';
	    }

	    return this._handlebars.compile(template);
	  }
	  /**
	   * render will render a template with data
	   * @param {Object} config Provide either a templateName or a pre-compiled template
	   * @param {Object} data The data to provide to the template
	   */
	  ;

	  _proto.render = function render(config, data) {
	    // If a custom template is provided, use it,
	    // otherwise fall back to the template name
	    // TODO(billy) This interface should probably be less ugly
	    if (config.template !== null) {
	      return config.template(data);
	    }

	    try {
	      return this._templates[config.templateName](data);
	    } catch (e) {
	      throw new Error('Can not find/render template: ' + config.templateName, e);
	    }
	  };

	  _proto._registerCustomHelpers = function _registerCustomHelpers() {
	    this.registerHelper('ifeq', function (arg1, arg2, options) {
	      return arg1 === arg2 ? options.fn(this) : options.inverse(this);
	    });
	    this.registerHelper('ifnoteq', function (arg1, arg2, options) {
	      return arg1 !== arg2 ? options.fn(this) : options.inverse(this);
	    });
	    this.registerHelper('formatPhoneNumber', function (phoneNumberString) {
	      var cleaned = ('' + phoneNumberString).replace(/\D/g, '');
	      var match = cleaned.match(/^(1|)?(\d{3})(\d{3})(\d{4})$/);

	      if (match) {
	        var intlCode = match[1] ? '+1 ' : '';
	        return [intlCode, '(', match[2], ') ', match[3], '-', match[4]].join('');
	      }

	      return null;
	    });
	    this.registerHelper('assign', function (name, value, options) {
	      var args = arguments;
	      options = args[args.length - 1];

	      if (!options.data.root) {
	        options.data.root = {};
	      }

	      var v = '';

	      for (var i = 1; i < args.length - 1; i++) {
	        v = v + args[i];
	      }

	      options.data.root[name] = v;
	    });
	    this.registerHelper('json', function (name, value, options) {
	      return name === undefined ? '' : stringify$2(name);
	    });
	  };

	  return HandlebarsRenderer;
	}(Renderer);

	/** @module */
	// E.g. Mustache, SOY, HandleBars, React, etc.

	var Renderers = {
	  SOY: Renderer,
	  Handlebars: HandlebarsRenderer
	};

	var nativePromiseConstructor$1 = global_1.Promise;

	var engineIsIos$1 = /(iphone|ipod|ipad).*applewebkit/i.test(engineUserAgent);

	var location$1 = global_1.location;
	var set$5 = global_1.setImmediate;
	var clear$1 = global_1.clearImmediate;
	var process$6 = global_1.process;
	var MessageChannel$1 = global_1.MessageChannel;
	var Dispatch$1 = global_1.Dispatch;
	var counter$1 = 0;
	var queue$1 = {};
	var ONREADYSTATECHANGE$1 = 'onreadystatechange';
	var defer$1, channel$1, port$1;

	var run$1 = function (id) {
	  // eslint-disable-next-line no-prototype-builtins
	  if (queue$1.hasOwnProperty(id)) {
	    var fn = queue$1[id];
	    delete queue$1[id];
	    fn();
	  }
	};

	var runner$1 = function (id) {
	  return function () {
	    run$1(id);
	  };
	};

	var listener$1 = function (event) {
	  run$1(event.data);
	};

	var post$1 = function (id) {
	  // old engines have not location.origin
	  global_1.postMessage(id + '', location$1.protocol + '//' + location$1.host);
	};

	// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
	if (!set$5 || !clear$1) {
	  set$5 = function setImmediate(fn) {
	    var args = [];
	    var i = 1;
	    while (arguments.length > i) args.push(arguments[i++]);
	    queue$1[++counter$1] = function () {
	      // eslint-disable-next-line no-new-func
	      (typeof fn == 'function' ? fn : Function(fn)).apply(undefined, args);
	    };
	    defer$1(counter$1);
	    return counter$1;
	  };
	  clear$1 = function clearImmediate(id) {
	    delete queue$1[id];
	  };
	  // Node.js 0.8-
	  if (classofRaw(process$6) == 'process') {
	    defer$1 = function (id) {
	      process$6.nextTick(runner$1(id));
	    };
	  // Sphere (JS game engine) Dispatch API
	  } else if (Dispatch$1 && Dispatch$1.now) {
	    defer$1 = function (id) {
	      Dispatch$1.now(runner$1(id));
	    };
	  // Browsers with MessageChannel, includes WebWorkers
	  // except iOS - https://github.com/zloirock/core-js/issues/624
	  } else if (MessageChannel$1 && !engineIsIos$1) {
	    channel$1 = new MessageChannel$1();
	    port$1 = channel$1.port2;
	    channel$1.port1.onmessage = listener$1;
	    defer$1 = functionBindContext(port$1.postMessage, port$1, 1);
	  // Browsers with postMessage, skip WebWorkers
	  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
	  } else if (global_1.addEventListener && typeof postMessage == 'function' && !global_1.importScripts && !fails(post$1)) {
	    defer$1 = post$1;
	    global_1.addEventListener('message', listener$1, false);
	  // IE8-
	  } else if (ONREADYSTATECHANGE$1 in documentCreateElement('script')) {
	    defer$1 = function (id) {
	      html$1.appendChild(documentCreateElement('script'))[ONREADYSTATECHANGE$1] = function () {
	        html$1.removeChild(this);
	        run$1(id);
	      };
	    };
	  // Rest old browsers
	  } else {
	    defer$1 = function (id) {
	      setTimeout(runner$1(id), 0);
	    };
	  }
	}

	var task$2 = {
	  set: set$5,
	  clear: clear$1
	};

	var getOwnPropertyDescriptor$d = objectGetOwnPropertyDescriptor.f;

	var macrotask$1 = task$2.set;


	var MutationObserver$1 = global_1.MutationObserver || global_1.WebKitMutationObserver;
	var process$7 = global_1.process;
	var Promise$2 = global_1.Promise;
	var IS_NODE$2 = classofRaw(process$7) == 'process';
	// Node.js 11 shows ExperimentalWarning on getting `queueMicrotask`
	var queueMicrotaskDescriptor$1 = getOwnPropertyDescriptor$d(global_1, 'queueMicrotask');
	var queueMicrotask$1 = queueMicrotaskDescriptor$1 && queueMicrotaskDescriptor$1.value;

	var flush$1, head$1, last$1, notify$2, toggle$1, node$1, promise$1, then$1;

	// modern engines have queueMicrotask method
	if (!queueMicrotask$1) {
	  flush$1 = function () {
	    var parent, fn;
	    if (IS_NODE$2 && (parent = process$7.domain)) parent.exit();
	    while (head$1) {
	      fn = head$1.fn;
	      head$1 = head$1.next;
	      try {
	        fn();
	      } catch (error) {
	        if (head$1) notify$2();
	        else last$1 = undefined;
	        throw error;
	      }
	    } last$1 = undefined;
	    if (parent) parent.enter();
	  };

	  // Node.js
	  if (IS_NODE$2) {
	    notify$2 = function () {
	      process$7.nextTick(flush$1);
	    };
	  // browsers with MutationObserver, except iOS - https://github.com/zloirock/core-js/issues/339
	  } else if (MutationObserver$1 && !engineIsIos$1) {
	    toggle$1 = true;
	    node$1 = document.createTextNode('');
	    new MutationObserver$1(flush$1).observe(node$1, { characterData: true });
	    notify$2 = function () {
	      node$1.data = toggle$1 = !toggle$1;
	    };
	  // environments with maybe non-completely correct, but existent Promise
	  } else if (Promise$2 && Promise$2.resolve) {
	    // Promise.resolve without an argument throws an error in LG WebOS 2
	    promise$1 = Promise$2.resolve(undefined);
	    then$1 = promise$1.then;
	    notify$2 = function () {
	      then$1.call(promise$1, flush$1);
	    };
	  // for other environments - macrotask based on:
	  // - setImmediate
	  // - MessageChannel
	  // - window.postMessag
	  // - onreadystatechange
	  // - setTimeout
	  } else {
	    notify$2 = function () {
	      // strange IE + webpack dev server bug - use .call(global)
	      macrotask$1.call(global_1, flush$1);
	    };
	  }
	}

	var microtask$1 = queueMicrotask$1 || function (fn) {
	  var task = { fn: fn, next: undefined };
	  if (last$1) last$1.next = task;
	  if (!head$1) {
	    head$1 = task;
	    notify$2();
	  } last$1 = task;
	};

	var PromiseCapability$1 = function (C) {
	  var resolve, reject;
	  this.promise = new C(function ($$resolve, $$reject) {
	    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
	    resolve = $$resolve;
	    reject = $$reject;
	  });
	  this.resolve = aFunction(resolve);
	  this.reject = aFunction(reject);
	};

	// 25.4.1.5 NewPromiseCapability(C)
	var f$f = function (C) {
	  return new PromiseCapability$1(C);
	};

	var newPromiseCapability$2 = {
		f: f$f
	};

	var promiseResolve$1 = function (C, x) {
	  anObject(C);
	  if (isObject(x) && x.constructor === C) return x;
	  var promiseCapability = newPromiseCapability$2.f(C);
	  var resolve = promiseCapability.resolve;
	  resolve(x);
	  return promiseCapability.promise;
	};

	var hostReportErrors$1 = function (a, b) {
	  var console = global_1.console;
	  if (console && console.error) {
	    arguments.length === 1 ? console.error(a) : console.error(a, b);
	  }
	};

	var perform$1 = function (exec) {
	  try {
	    return { error: false, value: exec() };
	  } catch (error) {
	    return { error: true, value: error };
	  }
	};

	var task$3 = task$2.set;










	var SPECIES$c = wellKnownSymbol('species');
	var PROMISE$1 = 'Promise';
	var getInternalState$a = internalState$1.get;
	var setInternalState$h = internalState$1.set;
	var getInternalPromiseState$1 = internalState$1.getterFor(PROMISE$1);
	var PromiseConstructor$1 = nativePromiseConstructor$1;
	var TypeError$2 = global_1.TypeError;
	var document$5 = global_1.document;
	var process$8 = global_1.process;
	var $fetch$3 = getBuiltIn('fetch');
	var newPromiseCapability$3 = newPromiseCapability$2.f;
	var newGenericPromiseCapability$1 = newPromiseCapability$3;
	var IS_NODE$3 = classofRaw(process$8) == 'process';
	var DISPATCH_EVENT$1 = !!(document$5 && document$5.createEvent && global_1.dispatchEvent);
	var UNHANDLED_REJECTION$1 = 'unhandledrejection';
	var REJECTION_HANDLED$1 = 'rejectionhandled';
	var PENDING$1 = 0;
	var FULFILLED$1 = 1;
	var REJECTED$1 = 2;
	var HANDLED$1 = 1;
	var UNHANDLED$1 = 2;
	var Internal$1, OwnPromiseCapability$1, PromiseWrapper$1, nativeThen$1;

	var FORCED$r = isForced_1(PROMISE$1, function () {
	  var GLOBAL_CORE_JS_PROMISE = inspectSource$1(PromiseConstructor$1) !== String(PromiseConstructor$1);
	  if (!GLOBAL_CORE_JS_PROMISE) {
	    // V8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables
	    // https://bugs.chromium.org/p/chromium/issues/detail?id=830565
	    // We can't detect it synchronously, so just check versions
	    if (engineV8Version$1 === 66) return true;
	    // Unhandled rejections tracking support, NodeJS Promise without it fails @@species test
	    if (!IS_NODE$3 && typeof PromiseRejectionEvent != 'function') return true;
	  }
	  // We need Promise#finally in the pure version for preventing prototype pollution
	  if (isPure && !PromiseConstructor$1.prototype['finally']) return true;
	  // We can't use @@species feature detection in V8 since it causes
	  // deoptimization and performance degradation
	  // https://github.com/zloirock/core-js/issues/679
	  if (engineV8Version$1 >= 51 && /native code/.test(PromiseConstructor$1)) return false;
	  // Detect correctness of subclassing with @@species support
	  var promise = PromiseConstructor$1.resolve(1);
	  var FakePromise = function (exec) {
	    exec(function () { /* empty */ }, function () { /* empty */ });
	  };
	  var constructor = promise.constructor = {};
	  constructor[SPECIES$c] = FakePromise;
	  return !(promise.then(function () { /* empty */ }) instanceof FakePromise);
	});

	var INCORRECT_ITERATION$3 = FORCED$r || !checkCorrectnessOfIteration$1(function (iterable) {
	  PromiseConstructor$1.all(iterable)['catch'](function () { /* empty */ });
	});

	// helpers
	var isThenable$1 = function (it) {
	  var then;
	  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
	};

	var notify$3 = function (promise, state, isReject) {
	  if (state.notified) return;
	  state.notified = true;
	  var chain = state.reactions;
	  microtask$1(function () {
	    var value = state.value;
	    var ok = state.state == FULFILLED$1;
	    var index = 0;
	    // variable length - can't use forEach
	    while (chain.length > index) {
	      var reaction = chain[index++];
	      var handler = ok ? reaction.ok : reaction.fail;
	      var resolve = reaction.resolve;
	      var reject = reaction.reject;
	      var domain = reaction.domain;
	      var result, then, exited;
	      try {
	        if (handler) {
	          if (!ok) {
	            if (state.rejection === UNHANDLED$1) onHandleUnhandled$1(promise, state);
	            state.rejection = HANDLED$1;
	          }
	          if (handler === true) result = value;
	          else {
	            if (domain) domain.enter();
	            result = handler(value); // can throw
	            if (domain) {
	              domain.exit();
	              exited = true;
	            }
	          }
	          if (result === reaction.promise) {
	            reject(TypeError$2('Promise-chain cycle'));
	          } else if (then = isThenable$1(result)) {
	            then.call(result, resolve, reject);
	          } else resolve(result);
	        } else reject(value);
	      } catch (error) {
	        if (domain && !exited) domain.exit();
	        reject(error);
	      }
	    }
	    state.reactions = [];
	    state.notified = false;
	    if (isReject && !state.rejection) onUnhandled$1(promise, state);
	  });
	};

	var dispatchEvent$1 = function (name, promise, reason) {
	  var event, handler;
	  if (DISPATCH_EVENT$1) {
	    event = document$5.createEvent('Event');
	    event.promise = promise;
	    event.reason = reason;
	    event.initEvent(name, false, true);
	    global_1.dispatchEvent(event);
	  } else event = { promise: promise, reason: reason };
	  if (handler = global_1['on' + name]) handler(event);
	  else if (name === UNHANDLED_REJECTION$1) hostReportErrors$1('Unhandled promise rejection', reason);
	};

	var onUnhandled$1 = function (promise, state) {
	  task$3.call(global_1, function () {
	    var value = state.value;
	    var IS_UNHANDLED = isUnhandled$1(state);
	    var result;
	    if (IS_UNHANDLED) {
	      result = perform$1(function () {
	        if (IS_NODE$3) {
	          process$8.emit('unhandledRejection', value, promise);
	        } else dispatchEvent$1(UNHANDLED_REJECTION$1, promise, value);
	      });
	      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
	      state.rejection = IS_NODE$3 || isUnhandled$1(state) ? UNHANDLED$1 : HANDLED$1;
	      if (result.error) throw result.value;
	    }
	  });
	};

	var isUnhandled$1 = function (state) {
	  return state.rejection !== HANDLED$1 && !state.parent;
	};

	var onHandleUnhandled$1 = function (promise, state) {
	  task$3.call(global_1, function () {
	    if (IS_NODE$3) {
	      process$8.emit('rejectionHandled', promise);
	    } else dispatchEvent$1(REJECTION_HANDLED$1, promise, state.value);
	  });
	};

	var bind$4 = function (fn, promise, state, unwrap) {
	  return function (value) {
	    fn(promise, state, value, unwrap);
	  };
	};

	var internalReject$1 = function (promise, state, value, unwrap) {
	  if (state.done) return;
	  state.done = true;
	  if (unwrap) state = unwrap;
	  state.value = value;
	  state.state = REJECTED$1;
	  notify$3(promise, state, true);
	};

	var internalResolve$1 = function (promise, state, value, unwrap) {
	  if (state.done) return;
	  state.done = true;
	  if (unwrap) state = unwrap;
	  try {
	    if (promise === value) throw TypeError$2("Promise can't be resolved itself");
	    var then = isThenable$1(value);
	    if (then) {
	      microtask$1(function () {
	        var wrapper = { done: false };
	        try {
	          then.call(value,
	            bind$4(internalResolve$1, promise, wrapper, state),
	            bind$4(internalReject$1, promise, wrapper, state)
	          );
	        } catch (error) {
	          internalReject$1(promise, wrapper, error, state);
	        }
	      });
	    } else {
	      state.value = value;
	      state.state = FULFILLED$1;
	      notify$3(promise, state, false);
	    }
	  } catch (error) {
	    internalReject$1(promise, { done: false }, error, state);
	  }
	};

	// constructor polyfill
	if (FORCED$r) {
	  // 25.4.3.1 Promise(executor)
	  PromiseConstructor$1 = function Promise(executor) {
	    anInstance$1(this, PromiseConstructor$1, PROMISE$1);
	    aFunction(executor);
	    Internal$1.call(this);
	    var state = getInternalState$a(this);
	    try {
	      executor(bind$4(internalResolve$1, this, state), bind$4(internalReject$1, this, state));
	    } catch (error) {
	      internalReject$1(this, state, error);
	    }
	  };
	  // eslint-disable-next-line no-unused-vars
	  Internal$1 = function Promise(executor) {
	    setInternalState$h(this, {
	      type: PROMISE$1,
	      done: false,
	      notified: false,
	      parent: false,
	      reactions: [],
	      rejection: false,
	      state: PENDING$1,
	      value: undefined
	    });
	  };
	  Internal$1.prototype = redefineAll$1(PromiseConstructor$1.prototype, {
	    // `Promise.prototype.then` method
	    // https://tc39.github.io/ecma262/#sec-promise.prototype.then
	    then: function then(onFulfilled, onRejected) {
	      var state = getInternalPromiseState$1(this);
	      var reaction = newPromiseCapability$3(speciesConstructor$1(this, PromiseConstructor$1));
	      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
	      reaction.fail = typeof onRejected == 'function' && onRejected;
	      reaction.domain = IS_NODE$3 ? process$8.domain : undefined;
	      state.parent = true;
	      state.reactions.push(reaction);
	      if (state.state != PENDING$1) notify$3(this, state, false);
	      return reaction.promise;
	    },
	    // `Promise.prototype.catch` method
	    // https://tc39.github.io/ecma262/#sec-promise.prototype.catch
	    'catch': function (onRejected) {
	      return this.then(undefined, onRejected);
	    }
	  });
	  OwnPromiseCapability$1 = function () {
	    var promise = new Internal$1();
	    var state = getInternalState$a(promise);
	    this.promise = promise;
	    this.resolve = bind$4(internalResolve$1, promise, state);
	    this.reject = bind$4(internalReject$1, promise, state);
	  };
	  newPromiseCapability$2.f = newPromiseCapability$3 = function (C) {
	    return C === PromiseConstructor$1 || C === PromiseWrapper$1
	      ? new OwnPromiseCapability$1(C)
	      : newGenericPromiseCapability$1(C);
	  };

	  if (!isPure && typeof nativePromiseConstructor$1 == 'function') {
	    nativeThen$1 = nativePromiseConstructor$1.prototype.then;

	    // wrap native Promise#then for native async functions
	    redefine$1(nativePromiseConstructor$1.prototype, 'then', function then(onFulfilled, onRejected) {
	      var that = this;
	      return new PromiseConstructor$1(function (resolve, reject) {
	        nativeThen$1.call(that, resolve, reject);
	      }).then(onFulfilled, onRejected);
	    // https://github.com/zloirock/core-js/issues/640
	    }, { unsafe: true });

	    // wrap fetch result
	    if (typeof $fetch$3 == 'function') _export({ global: true, enumerable: true, forced: true }, {
	      // eslint-disable-next-line no-unused-vars
	      fetch: function fetch(input /* , init */) {
	        return promiseResolve$1(PromiseConstructor$1, $fetch$3.apply(global_1, arguments));
	      }
	    });
	  }
	}

	_export({ global: true, wrap: true, forced: FORCED$r }, {
	  Promise: PromiseConstructor$1
	});

	setToStringTag$1(PromiseConstructor$1, PROMISE$1, false, true);
	setSpecies$1(PROMISE$1);

	PromiseWrapper$1 = getBuiltIn(PROMISE$1);

	// statics
	_export({ target: PROMISE$1, stat: true, forced: FORCED$r }, {
	  // `Promise.reject` method
	  // https://tc39.github.io/ecma262/#sec-promise.reject
	  reject: function reject(r) {
	    var capability = newPromiseCapability$3(this);
	    capability.reject.call(undefined, r);
	    return capability.promise;
	  }
	});

	_export({ target: PROMISE$1, stat: true, forced: isPure || FORCED$r }, {
	  // `Promise.resolve` method
	  // https://tc39.github.io/ecma262/#sec-promise.resolve
	  resolve: function resolve(x) {
	    return promiseResolve$1(isPure && this === PromiseWrapper$1 ? PromiseConstructor$1 : this, x);
	  }
	});

	_export({ target: PROMISE$1, stat: true, forced: INCORRECT_ITERATION$3 }, {
	  // `Promise.all` method
	  // https://tc39.github.io/ecma262/#sec-promise.all
	  all: function all(iterable) {
	    var C = this;
	    var capability = newPromiseCapability$3(C);
	    var resolve = capability.resolve;
	    var reject = capability.reject;
	    var result = perform$1(function () {
	      var $promiseResolve = aFunction(C.resolve);
	      var values = [];
	      var counter = 0;
	      var remaining = 1;
	      iterate_1$1(iterable, function (promise) {
	        var index = counter++;
	        var alreadyCalled = false;
	        values.push(undefined);
	        remaining++;
	        $promiseResolve.call(C, promise).then(function (value) {
	          if (alreadyCalled) return;
	          alreadyCalled = true;
	          values[index] = value;
	          --remaining || resolve(values);
	        }, reject);
	      });
	      --remaining || resolve(values);
	    });
	    if (result.error) reject(result.value);
	    return capability.promise;
	  },
	  // `Promise.race` method
	  // https://tc39.github.io/ecma262/#sec-promise.race
	  race: function race(iterable) {
	    var C = this;
	    var capability = newPromiseCapability$3(C);
	    var reject = capability.reject;
	    var result = perform$1(function () {
	      var $promiseResolve = aFunction(C.resolve);
	      iterate_1$1(iterable, function (promise) {
	        $promiseResolve.call(C, promise).then(capability.resolve, reject);
	      });
	    });
	    if (result.error) reject(result.value);
	    return capability.promise;
	  }
	});

	// `Promise.allSettled` method
	// https://github.com/tc39/proposal-promise-allSettled
	_export({ target: 'Promise', stat: true }, {
	  allSettled: function allSettled(iterable) {
	    var C = this;
	    var capability = newPromiseCapability$2.f(C);
	    var resolve = capability.resolve;
	    var reject = capability.reject;
	    var result = perform$1(function () {
	      var promiseResolve = aFunction(C.resolve);
	      var values = [];
	      var counter = 0;
	      var remaining = 1;
	      iterate_1$1(iterable, function (promise) {
	        var index = counter++;
	        var alreadyCalled = false;
	        values.push(undefined);
	        remaining++;
	        promiseResolve.call(C, promise).then(function (value) {
	          if (alreadyCalled) return;
	          alreadyCalled = true;
	          values[index] = { status: 'fulfilled', value: value };
	          --remaining || resolve(values);
	        }, function (e) {
	          if (alreadyCalled) return;
	          alreadyCalled = true;
	          values[index] = { status: 'rejected', reason: e };
	          --remaining || resolve(values);
	        });
	      });
	      --remaining || resolve(values);
	    });
	    if (result.error) reject(result.value);
	    return capability.promise;
	  }
	});

	// Safari bug https://bugs.webkit.org/show_bug.cgi?id=200829
	var NON_GENERIC$1 = !!nativePromiseConstructor$1 && fails(function () {
	  nativePromiseConstructor$1.prototype['finally'].call({ then: function () { /* empty */ } }, function () { /* empty */ });
	});

	// `Promise.prototype.finally` method
	// https://tc39.github.io/ecma262/#sec-promise.prototype.finally
	_export({ target: 'Promise', proto: true, real: true, forced: NON_GENERIC$1 }, {
	  'finally': function (onFinally) {
	    var C = speciesConstructor$1(this, getBuiltIn('Promise'));
	    var isFunction = typeof onFinally == 'function';
	    return this.then(
	      isFunction ? function (x) {
	        return promiseResolve$1(C, onFinally()).then(function () { return x; });
	      } : onFinally,
	      isFunction ? function (e) {
	        return promiseResolve$1(C, onFinally()).then(function () { throw e; });
	      } : onFinally
	    );
	  }
	});

	var promise$2 = path.Promise;

	var promise$3 = promise$2;

	var promise$4 = promise$3;

	/** @module */

	/** The current lib version, reported with errors and analytics */
	var LIB_VERSION = 'v0.12.2';
	/** The identifier of the production environment */

	var PRODUCTION = 'production';
	/** The identifier of the sandbox environment */

	var SANDBOX = 'sandbox';
	/** The default url for compiled component templates */

	var COMPILED_TEMPLATES_URL = "https://assets.sitescdn.net/answers/" + LIB_VERSION + "/answerstemplates.compiled.min.js";

	/**
	 * TemplateLoader exposes an interface for loading templates asynchronously
	 * from the server and registers them with the proper renderer.
	 * It also allows you to assign them synchronously.
	 */

	var TemplateLoader =
	/*#__PURE__*/
	function () {
	  function TemplateLoader(config) {
	    if (!TemplateLoader.setInstance(this)) {
	      return TemplateLoader.getInstance();
	    }
	    /**
	     * The template url to fetch compiled templates from
	     * @type {string}
	     * @private
	     */


	    this._templateUrl = config.templateUrl || COMPILED_TEMPLATES_URL;
	    this._templates = {};

	    this._onLoaded = function () {};

	    this._init();
	  }

	  TemplateLoader.setInstance = function setInstance(instance) {
	    if (!this.instance) {
	      this.instance = instance;
	      return true;
	    }

	    return false;
	  };

	  TemplateLoader.getInstance = function getInstance() {
	    return this.instance;
	  };

	  var _proto = TemplateLoader.prototype;

	  _proto._init = function _init() {
	    this.fetchTemplates();
	  };

	  _proto.fetchTemplates = function fetchTemplates() {
	    var _this = this;

	    // If we already have templates loaded, do nothing
	    var node = DOM.query('#yext-answers-templates');

	    if (node) {
	      return;
	    } // Inject a script to fetch the compiled templates,
	    // wrapping it a Promise for cleanliness


	    new promise$4(function (resolve, reject) {
	      var script = DOM.createEl('script', {
	        id: 'yext-answers-templates',
	        onload: resolve,
	        onerror: reject,
	        async: true,
	        src: _this._templateUrl
	      });
	      DOM.append('body', script);
	    }).then(function (response) {
	      // TODO(billy) Implmenet error handling here (e.g. request could fail)
	      console.log('Templates loaded successfully!');
	    });
	    return this;
	  }
	  /**
	   * register the templates internally so that they can be later consumed
	   * (e.g. by components and renderers) with convienience.
	   *
	   * `fetchTemplates` will automatically call this, providing the compiled templates from the server.
	   */
	  ;

	  _proto.register = function register(templates) {
	    this._templates = templates; // Notify our consumers that the templates are here :)

	    this._onLoaded(this._templates);

	    return this;
	  };

	  _proto.onLoaded = function onLoaded(cb) {
	    this._onLoaded = cb;
	    return this;
	  };

	  _proto.get = function get(templateName) {
	    return this._templates[templateName];
	  }
	  /**
	   * @return The internal template collection
	   */
	  ;

	  _proto.getTemplates = function getTemplates() {
	    return this._templates;
	  };

	  return TemplateLoader;
	}();

	/** @module */

	var nativeReverse$1 = [].reverse;
	var test$5 = [1, 2];

	// `Array.prototype.reverse` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.reverse
	// fix for Safari 12.0 bug
	// https://bugs.webkit.org/show_bug.cgi?id=188794
	_export({ target: 'Array', proto: true, forced: String(test$5) === String(test$5.reverse()) }, {
	  reverse: function reverse() {
	    // eslint-disable-next-line no-self-assign
	    if (isArray$1(this)) this.length = this.length;
	    return nativeReverse$1.call(this);
	  }
	});

	var reverse = entryVirtual('Array').reverse;

	var ArrayPrototype$b = Array.prototype;

	var reverse_1 = function (it) {
	  var own = it.reverse;
	  return it === ArrayPrototype$b || (it instanceof Array && own === ArrayPrototype$b.reverse) ? reverse : own;
	};

	var reverse$1 = reverse_1;

	var reverse$2 = reverse$1;

	var bind$5 = bind_1;

	var bind$6 = bind$5;

	function _defineProperties(target, props) {
	  for (var i = 0; i < props.length; i++) {
	    var descriptor = props[i];
	    descriptor.enumerable = descriptor.enumerable || false;
	    descriptor.configurable = true;
	    if ("value" in descriptor) descriptor.writable = true;

	    defineProperty$h(target, descriptor.key, descriptor);
	  }
	}

	function _createClass(Constructor, protoProps, staticProps) {
	  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
	  if (staticProps) _defineProperties(Constructor, staticProps);
	  return Constructor;
	}

	var createClass = _createClass;

	/** @module EventEmitter */

	/**
	 * EventEmitter is a base class for any object that wants to expose
	 * a pub/sub interface, for emitting messages and providing listeners.
	 */
	var EventEmitter =
	/*#__PURE__*/
	function () {
	  function EventEmitter() {
	    /**
	     * The subscribers of messages
	     * @type {object[]}
	     * @private
	     */
	    this._listeners = {};
	  }
	  /**
	   * on is the public interface for subscribing events that are emitted.
	   * @param {string} evt the event name to listen to
	   * @param {function} cb The callback to invoke when the {evt} is emitted
	   * @param {boolean} once Optional value which will only handle the message once
	   */


	  var _proto = EventEmitter.prototype;

	  _proto.on = function on(evt, cb, once) {
	    if (typeof cb !== 'function') {
	      throw new Error('callback handler should be of type {function}');
	    }

	    if (this._listeners[evt] === undefined) {
	      this._listeners[evt] = [];
	    }

	    this._listeners[evt].push({
	      event: evt,
	      cb: cb,
	      once: once || false
	    });

	    return this;
	  }
	  /**
	   * once is the public interface for subscribing events that are emitted.
	   * The handler will only be triggered once.
	   *
	   * @param {string} evt the event name to listen to
	   * @param {function} cb The callback to invoke when the {evt} is emitted
	   * @param {boolean} once Optional value which will only handle the message once
	   */
	  ;

	  _proto.once = function once(evt, cb) {
	    return this.on(evt, cb, true);
	  }
	  /**
	   * off is the public interface for unsubscribing from an event
	   * @param {string} evt the event name to unsubscribe from
	   */
	  ;

	  _proto.off = function off(evt) {
	    delete this._listeners[evt];
	    return this;
	  }
	  /**
	   * emit is the public interface for broadcasting messages/events
	   * @param {string} evt the event name to publish from
	   * @param {Object} data the data to send along to the subscribers
	   */
	  ;

	  _proto.emit = function emit(evt, data) {
	    var listeners = this._listeners[evt];

	    if (listeners === undefined) {
	      return;
	    } // Invoke each of all the listener handlers and remove the ones that should fire only once.


	    var keep = [];

	    for (var i = 0; i < listeners.length; i++) {
	      listeners[i].cb(data);

	      if (listeners[i].once === true) {
	        continue;
	      } // Instead of having a 'dirty' array with deleted or 'undefined' entries,
	      // we just create a brand new array without the listeners that were removed


	      keep.push(listeners[i]);
	    } // Update our old list of listeners to the newly created array


	    this._listeners[evt] = keep;
	    return this;
	  };

	  return EventEmitter;
	}();

	/**
	 * State contains the data for the component
	 * and exposes an {EventEmitter} interface so that external
	 * dependencies can listen/hook subscribe to messages/updates.
	 * @extends EventEmitter
	 */

	var State =
	/*#__PURE__*/
	function (_EventEmitter) {
	  inheritsLoose(State, _EventEmitter);

	  function State(data) {
	    var _this;

	    _this = _EventEmitter.call(this) || this;
	    /**
	     * The initial state of the component
	     * @type {Object}
	     * @private
	     */

	    _this._state = data || {};
	    return _this;
	  }
	  /**
	   * Set the initial state of the component.
	   * NOTE(billy): Does not fire an update message
	   */


	  var _proto = State.prototype;

	  _proto.init = function init(prop, optVal) {
	    this._set(prop, optVal);
	  }
	  /**
	   * setter for the state
	   * @param prop {string|Object} The property to set
	   * @param optVal Optional, if prop is a {string}, it will assign the value to that property
	   */
	  ;

	  _proto.set = function set(prop, optVal) {
	    this._set(prop, optVal);

	    this.emit('update');
	  }
	  /**
	   * setter for the state enables you to update a single property, or complete state
	   * depending on the arguments provided.
	   * @param prop {string|Object} The property to set
	   * @param optVal If prop is a {string}, provide its value
	   * @private
	   */
	  ;

	  _proto._set = function _set(prop, optVal) {
	    if (optVal === undefined) {
	      this._state = prop;
	    } else {
	      this._state[prop] = optVal;
	    }
	  };

	  _proto.update = function update(data) {
	    this._state = data;
	    this.emit('update');
	  }
	  /**
	   * Retrieve a properties value from the state
	   * If no property provided, return the full state
	   * @param {string} optProp optional property to retrieve
	   */
	  ;

	  _proto.get = function get(optProp) {
	    if (optProp === undefined) {
	      return this._state;
	    }

	    return this._state[optProp];
	  };

	  _proto.has = function has(prop) {
	    return this._state[prop] !== undefined;
	  };

	  _proto.asJSON = function asJSON() {
	    return this._state;
	  };

	  return State;
	}(EventEmitter);

	var support = {
	  searchParams: 'URLSearchParams' in self,
	  iterable: 'Symbol' in self && 'iterator' in Symbol,
	  blob:
	    'FileReader' in self &&
	    'Blob' in self &&
	    (function() {
	      try {
	        new Blob();
	        return true
	      } catch (e) {
	        return false
	      }
	    })(),
	  formData: 'FormData' in self,
	  arrayBuffer: 'ArrayBuffer' in self
	};

	function isDataView(obj) {
	  return obj && DataView.prototype.isPrototypeOf(obj)
	}

	if (support.arrayBuffer) {
	  var viewClasses = [
	    '[object Int8Array]',
	    '[object Uint8Array]',
	    '[object Uint8ClampedArray]',
	    '[object Int16Array]',
	    '[object Uint16Array]',
	    '[object Int32Array]',
	    '[object Uint32Array]',
	    '[object Float32Array]',
	    '[object Float64Array]'
	  ];

	  var isArrayBufferView =
	    ArrayBuffer.isView ||
	    function(obj) {
	      return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1
	    };
	}

	function normalizeName(name) {
	  if (typeof name !== 'string') {
	    name = String(name);
	  }
	  if (/[^a-z0-9\-#$%&'*+.^_`|~]/i.test(name)) {
	    throw new TypeError('Invalid character in header field name')
	  }
	  return name.toLowerCase()
	}

	function normalizeValue(value) {
	  if (typeof value !== 'string') {
	    value = String(value);
	  }
	  return value
	}

	// Build a destructive iterator for the value list
	function iteratorFor(items) {
	  var iterator = {
	    next: function() {
	      var value = items.shift();
	      return {done: value === undefined, value: value}
	    }
	  };

	  if (support.iterable) {
	    iterator[Symbol.iterator] = function() {
	      return iterator
	    };
	  }

	  return iterator
	}

	function Headers$2(headers) {
	  this.map = {};

	  if (headers instanceof Headers$2) {
	    headers.forEach(function(value, name) {
	      this.append(name, value);
	    }, this);
	  } else if (Array.isArray(headers)) {
	    headers.forEach(function(header) {
	      this.append(header[0], header[1]);
	    }, this);
	  } else if (headers) {
	    Object.getOwnPropertyNames(headers).forEach(function(name) {
	      this.append(name, headers[name]);
	    }, this);
	  }
	}

	Headers$2.prototype.append = function(name, value) {
	  name = normalizeName(name);
	  value = normalizeValue(value);
	  var oldValue = this.map[name];
	  this.map[name] = oldValue ? oldValue + ', ' + value : value;
	};

	Headers$2.prototype['delete'] = function(name) {
	  delete this.map[normalizeName(name)];
	};

	Headers$2.prototype.get = function(name) {
	  name = normalizeName(name);
	  return this.has(name) ? this.map[name] : null
	};

	Headers$2.prototype.has = function(name) {
	  return this.map.hasOwnProperty(normalizeName(name))
	};

	Headers$2.prototype.set = function(name, value) {
	  this.map[normalizeName(name)] = normalizeValue(value);
	};

	Headers$2.prototype.forEach = function(callback, thisArg) {
	  for (var name in this.map) {
	    if (this.map.hasOwnProperty(name)) {
	      callback.call(thisArg, this.map[name], name, this);
	    }
	  }
	};

	Headers$2.prototype.keys = function() {
	  var items = [];
	  this.forEach(function(value, name) {
	    items.push(name);
	  });
	  return iteratorFor(items)
	};

	Headers$2.prototype.values = function() {
	  var items = [];
	  this.forEach(function(value) {
	    items.push(value);
	  });
	  return iteratorFor(items)
	};

	Headers$2.prototype.entries = function() {
	  var items = [];
	  this.forEach(function(value, name) {
	    items.push([name, value]);
	  });
	  return iteratorFor(items)
	};

	if (support.iterable) {
	  Headers$2.prototype[Symbol.iterator] = Headers$2.prototype.entries;
	}

	function consumed(body) {
	  if (body.bodyUsed) {
	    return Promise.reject(new TypeError('Already read'))
	  }
	  body.bodyUsed = true;
	}

	function fileReaderReady(reader) {
	  return new Promise(function(resolve, reject) {
	    reader.onload = function() {
	      resolve(reader.result);
	    };
	    reader.onerror = function() {
	      reject(reader.error);
	    };
	  })
	}

	function readBlobAsArrayBuffer(blob) {
	  var reader = new FileReader();
	  var promise = fileReaderReady(reader);
	  reader.readAsArrayBuffer(blob);
	  return promise
	}

	function readBlobAsText(blob) {
	  var reader = new FileReader();
	  var promise = fileReaderReady(reader);
	  reader.readAsText(blob);
	  return promise
	}

	function readArrayBufferAsText(buf) {
	  var view = new Uint8Array(buf);
	  var chars = new Array(view.length);

	  for (var i = 0; i < view.length; i++) {
	    chars[i] = String.fromCharCode(view[i]);
	  }
	  return chars.join('')
	}

	function bufferClone(buf) {
	  if (buf.slice) {
	    return buf.slice(0)
	  } else {
	    var view = new Uint8Array(buf.byteLength);
	    view.set(new Uint8Array(buf));
	    return view.buffer
	  }
	}

	function Body() {
	  this.bodyUsed = false;

	  this._initBody = function(body) {
	    this._bodyInit = body;
	    if (!body) {
	      this._bodyText = '';
	    } else if (typeof body === 'string') {
	      this._bodyText = body;
	    } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
	      this._bodyBlob = body;
	    } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
	      this._bodyFormData = body;
	    } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
	      this._bodyText = body.toString();
	    } else if (support.arrayBuffer && support.blob && isDataView(body)) {
	      this._bodyArrayBuffer = bufferClone(body.buffer);
	      // IE 10-11 can't handle a DataView body.
	      this._bodyInit = new Blob([this._bodyArrayBuffer]);
	    } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
	      this._bodyArrayBuffer = bufferClone(body);
	    } else {
	      this._bodyText = body = Object.prototype.toString.call(body);
	    }

	    if (!this.headers.get('content-type')) {
	      if (typeof body === 'string') {
	        this.headers.set('content-type', 'text/plain;charset=UTF-8');
	      } else if (this._bodyBlob && this._bodyBlob.type) {
	        this.headers.set('content-type', this._bodyBlob.type);
	      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
	        this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
	      }
	    }
	  };

	  if (support.blob) {
	    this.blob = function() {
	      var rejected = consumed(this);
	      if (rejected) {
	        return rejected
	      }

	      if (this._bodyBlob) {
	        return Promise.resolve(this._bodyBlob)
	      } else if (this._bodyArrayBuffer) {
	        return Promise.resolve(new Blob([this._bodyArrayBuffer]))
	      } else if (this._bodyFormData) {
	        throw new Error('could not read FormData body as blob')
	      } else {
	        return Promise.resolve(new Blob([this._bodyText]))
	      }
	    };

	    this.arrayBuffer = function() {
	      if (this._bodyArrayBuffer) {
	        return consumed(this) || Promise.resolve(this._bodyArrayBuffer)
	      } else {
	        return this.blob().then(readBlobAsArrayBuffer)
	      }
	    };
	  }

	  this.text = function() {
	    var rejected = consumed(this);
	    if (rejected) {
	      return rejected
	    }

	    if (this._bodyBlob) {
	      return readBlobAsText(this._bodyBlob)
	    } else if (this._bodyArrayBuffer) {
	      return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))
	    } else if (this._bodyFormData) {
	      throw new Error('could not read FormData body as text')
	    } else {
	      return Promise.resolve(this._bodyText)
	    }
	  };

	  if (support.formData) {
	    this.formData = function() {
	      return this.text().then(decode)
	    };
	  }

	  this.json = function() {
	    return this.text().then(JSON.parse)
	  };

	  return this
	}

	// HTTP methods whose capitalization should be normalized
	var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];

	function normalizeMethod(method) {
	  var upcased = method.toUpperCase();
	  return methods.indexOf(upcased) > -1 ? upcased : method
	}

	function Request(input, options) {
	  options = options || {};
	  var body = options.body;

	  if (input instanceof Request) {
	    if (input.bodyUsed) {
	      throw new TypeError('Already read')
	    }
	    this.url = input.url;
	    this.credentials = input.credentials;
	    if (!options.headers) {
	      this.headers = new Headers$2(input.headers);
	    }
	    this.method = input.method;
	    this.mode = input.mode;
	    this.signal = input.signal;
	    if (!body && input._bodyInit != null) {
	      body = input._bodyInit;
	      input.bodyUsed = true;
	    }
	  } else {
	    this.url = String(input);
	  }

	  this.credentials = options.credentials || this.credentials || 'same-origin';
	  if (options.headers || !this.headers) {
	    this.headers = new Headers$2(options.headers);
	  }
	  this.method = normalizeMethod(options.method || this.method || 'GET');
	  this.mode = options.mode || this.mode || null;
	  this.signal = options.signal || this.signal;
	  this.referrer = null;

	  if ((this.method === 'GET' || this.method === 'HEAD') && body) {
	    throw new TypeError('Body not allowed for GET or HEAD requests')
	  }
	  this._initBody(body);
	}

	Request.prototype.clone = function() {
	  return new Request(this, {body: this._bodyInit})
	};

	function decode(body) {
	  var form = new FormData();
	  body
	    .trim()
	    .split('&')
	    .forEach(function(bytes) {
	      if (bytes) {
	        var split = bytes.split('=');
	        var name = split.shift().replace(/\+/g, ' ');
	        var value = split.join('=').replace(/\+/g, ' ');
	        form.append(decodeURIComponent(name), decodeURIComponent(value));
	      }
	    });
	  return form
	}

	function parseHeaders(rawHeaders) {
	  var headers = new Headers$2();
	  // Replace instances of \r\n and \n followed by at least one space or horizontal tab with a space
	  // https://tools.ietf.org/html/rfc7230#section-3.2
	  var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, ' ');
	  preProcessedHeaders.split(/\r?\n/).forEach(function(line) {
	    var parts = line.split(':');
	    var key = parts.shift().trim();
	    if (key) {
	      var value = parts.join(':').trim();
	      headers.append(key, value);
	    }
	  });
	  return headers
	}

	Body.call(Request.prototype);

	function Response(bodyInit, options) {
	  if (!options) {
	    options = {};
	  }

	  this.type = 'default';
	  this.status = options.status === undefined ? 200 : options.status;
	  this.ok = this.status >= 200 && this.status < 300;
	  this.statusText = 'statusText' in options ? options.statusText : 'OK';
	  this.headers = new Headers$2(options.headers);
	  this.url = options.url || '';
	  this._initBody(bodyInit);
	}

	Body.call(Response.prototype);

	Response.prototype.clone = function() {
	  return new Response(this._bodyInit, {
	    status: this.status,
	    statusText: this.statusText,
	    headers: new Headers$2(this.headers),
	    url: this.url
	  })
	};

	Response.error = function() {
	  var response = new Response(null, {status: 0, statusText: ''});
	  response.type = 'error';
	  return response
	};

	var redirectStatuses = [301, 302, 303, 307, 308];

	Response.redirect = function(url, status) {
	  if (redirectStatuses.indexOf(status) === -1) {
	    throw new RangeError('Invalid status code')
	  }

	  return new Response(null, {status: status, headers: {location: url}})
	};

	var DOMException = self.DOMException;
	try {
	  new DOMException();
	} catch (err) {
	  DOMException = function(message, name) {
	    this.message = message;
	    this.name = name;
	    var error = Error(message);
	    this.stack = error.stack;
	  };
	  DOMException.prototype = Object.create(Error.prototype);
	  DOMException.prototype.constructor = DOMException;
	}

	function fetch$1(input, init) {
	  return new Promise(function(resolve, reject) {
	    var request = new Request(input, init);

	    if (request.signal && request.signal.aborted) {
	      return reject(new DOMException('Aborted', 'AbortError'))
	    }

	    var xhr = new XMLHttpRequest();

	    function abortXhr() {
	      xhr.abort();
	    }

	    xhr.onload = function() {
	      var options = {
	        status: xhr.status,
	        statusText: xhr.statusText,
	        headers: parseHeaders(xhr.getAllResponseHeaders() || '')
	      };
	      options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');
	      var body = 'response' in xhr ? xhr.response : xhr.responseText;
	      resolve(new Response(body, options));
	    };

	    xhr.onerror = function() {
	      reject(new TypeError('Network request failed'));
	    };

	    xhr.ontimeout = function() {
	      reject(new TypeError('Network request failed'));
	    };

	    xhr.onabort = function() {
	      reject(new DOMException('Aborted', 'AbortError'));
	    };

	    xhr.open(request.method, request.url, true);

	    if (request.credentials === 'include') {
	      xhr.withCredentials = true;
	    } else if (request.credentials === 'omit') {
	      xhr.withCredentials = false;
	    }

	    if ('responseType' in xhr && support.blob) {
	      xhr.responseType = 'blob';
	    }

	    request.headers.forEach(function(value, name) {
	      xhr.setRequestHeader(name, value);
	    });

	    if (request.signal) {
	      request.signal.addEventListener('abort', abortXhr);

	      xhr.onreadystatechange = function() {
	        // DONE (success or failure)
	        if (xhr.readyState === 4) {
	          request.signal.removeEventListener('abort', abortXhr);
	        }
	      };
	    }

	    xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);
	  })
	}

	fetch$1.polyfill = true;

	if (!self.fetch) {
	  self.fetch = fetch$1;
	  self.Headers = Headers$2;
	  self.Request = Request;
	  self.Response = Response;
	}

	/**
	 * Types of HTTP requests
	 */

	var Methods = {
	  GET: 'get',
	  POST: 'post',
	  PUT: 'put',
	  DELETE: 'delete'
	};
	/**
	 * HttpRequester is a wrapper around the native implementation of AJAX
	 * related matters. It's used to make all types of network requests
	 * and exposes a promise interface.
	 */

	var HttpRequester =
	/*#__PURE__*/
	function () {
	  function HttpRequester() {}

	  var _proto = HttpRequester.prototype;

	  /**
	   * Create a GET HTTP request
	   * @param {string} url The url to make a request to
	   * @param {Object} data The data to provide (gets encoded into the URL)
	   * @param {Object} opts Configuration options to use for the request
	   */
	  _proto.get = function get(url, data, opts) {
	    return this.request(Methods.GET, this.encodeParams(url, data), opts);
	  }
	  /**
	   * Create a POST HTTP request
	   * @param {string} url The url to make a request to
	   * @param {Object} urlParams The params to encode into the URL
	   * @param {Object} jsonBody The request body (json) to provide with the POST request
	   * @param {Object} requestConfig Configuration options to use for the request
	   */
	  ;

	  _proto.post = function post(url, urlParams, jsonBody, requestConfig) {
	    return this.request(Methods.POST, this.encodeParams(url, urlParams), assign$2({}, {
	      body: stringify$2(jsonBody),
	      credentials: undefined
	    }, requestConfig));
	  };

	  _proto.request = function request(method, url, opts) {
	    var reqArgs = assign$2({}, {
	      'method': method,
	      'credentials': 'include'
	    }, opts);

	    return this._fetch(url, reqArgs);
	  } // TODO (agrow) investigate removing this
	  // Use imported fetchPolyfill if it does not already exist on window
	  ;

	  _proto._fetch = function _fetch(url, reqArgs) {
	    if (!window.fetch) {
	      return fetch$1(url, reqArgs);
	    }

	    return fetch(url, reqArgs);
	  }
	  /**
	   * Send a beacon to the provided url which will send a non-blocking request
	   * to the server that is guaranteed to send before page load. No response is returned,
	   * so beacons are primarily used for analytics reporting.
	   * @param {string} url The url to send the beacon to
	   * @param {object} data The data payload to send in the beacon
	   * @return {boolean} true if the request is successfully queued
	   */
	  ;

	  _proto.beacon = function beacon(url, data) {
	    return this._sendBeacon(url, stringify$2(data));
	  } // TODO (agrow) investigate removing this
	  // Navigator.sendBeacon polyfill
	  // Combination of the compact Financial Times polyfill:
	  // https://github.com/Financial-Times/polyfill-library/blob/master/polyfills/navigator/sendBeacon/polyfill.js
	  // with the async-by-default behavior of Miguel Mota's polyfill:
	  // https://github.com/miguelmota/Navigator.sendBeacon/blob/master/sendbeacon.js
	  ;

	  _proto._sendBeacon = function _sendBeacon(url, data) {
	    if (window.navigator && window.navigator.sendBeacon) {
	      return window.navigator.sendBeacon(url, data);
	    }

	    var event = window.event && window.event.type;
	    var sync = event === 'unload' || event === 'beforeunload';
	    var xhr = 'XMLHttpRequest' in window ? new XMLHttpRequest() : new ActiveXObject('Microsoft.XMLHTTP');
	    xhr.open('POST', url, !sync);
	    xhr.setRequestHeader('Accept', '*/*');

	    if (typeof data === 'string') {
	      xhr.setRequestHeader('Content-Type', 'text/plain;charset=UTF-8');
	    } else if (Object.prototype.toString.call(data) === '[object Blob]') {
	      if (data.type) {
	        xhr.setRequestHeader('Content-Type', data.type);
	      }
	    }

	    xhr.send(data);
	    return true;
	  };

	  _proto.encodeParams = function encodeParams(url, params) {
	    if (typeof params !== 'object') {
	      return;
	    }

	    var hasParam = indexOf$6(url).call(url, '?') > -1;
	    var searchQuery = '';

	    for (var key in params) {
	      if (!hasParam) {
	        hasParam = true;
	        searchQuery += '?';
	      } else {
	        searchQuery += '&';
	      }

	      searchQuery += key + '=' + encodeURIComponent(params[key]);
	    }

	    return url + searchQuery;
	  };

	  return HttpRequester;
	}();

	/**
	 * Returns the base url for the live api backend in the desired environment.
	 * @param {string} env The desired environment.
	 */

	function getLiveApiUrl(env) {
	  if (env === void 0) {
	    env = PRODUCTION;
	  }

	  return env === SANDBOX ? 'https://liveapi-sandbox.yext.com' : 'https://liveapi.yext.com';
	}
	/**
	 * Returns the base url for the knowledge api backend in the desired environment.
	 * @param {string} env The desired environment.
	 */

	function getKnowledgeApiUrl(env) {
	  if (env === void 0) {
	    env = PRODUCTION;
	  }

	  return env === SANDBOX ? 'https://api-sandbox.yext.com' : 'https://api.yext.com';
	}
	/**
	 * Returns the base url for the analytics backend in the desired environment.
	 * @param {string} env The desired environment.
	 * @param {boolean} conversionTrackingEnabled If conversion tracking has been opted into.
	 */

	function getAnalyticsUrl(env, conversionTrackingEnabled) {
	  if (env === void 0) {
	    env = PRODUCTION;
	  }

	  if (conversionTrackingEnabled === void 0) {
	    conversionTrackingEnabled = false;
	  }

	  if (conversionTrackingEnabled) {
	    return env === SANDBOX ? 'https://sandbox-realtimeanalytics.yext.com' : 'https://realtimeanalytics.yext.com';
	  }

	  return env === SANDBOX ? 'https://sandbox-answers.yext-pixel.com' : 'https://answers.yext-pixel.com';
	}

	/**
	 * ApiRequest is the base class for all API requests.
	 * It defines all of the core properties required to make a request
	 */

	var ApiRequest =
	/*#__PURE__*/
	function () {
	  // TODO (tmeyer): Create an ApiService interface and pass an implementation to the current
	  // consumers of ApiRequest as a dependency.
	  function ApiRequest(opts, globalStorage) {
	    if (opts === void 0) {
	      opts = {};
	    }

	    /**
	     * An abstraction used for making network request and handling errors
	     * @type {HttpRequester}
	     * @private
	     */
	    this._requester = new HttpRequester();
	    /**
	     * The environment the request should be made to
	     * @type {string}
	     * @private
	     */

	    this._environment = opts.environment || PRODUCTION;
	    /**
	     * The baseUrl to use for making a request
	     * @type {string}
	     * @private
	     */

	    this._baseUrl = opts.baseUrl || getLiveApiUrl(this._environment);
	    /**
	     * The endpoint to use in the url (appended to the {baseUrl})
	     * @type {string}
	     * @private
	     */

	    this._endpoint = opts.endpoint || null;
	    /**
	     * The API Key to use for the request
	     * @type {string}
	     * @private
	     */

	    this._apiKey = opts.apiKey || null;
	    /**
	     * The version of the API to make a request to
	     * @type {string}
	     * @private
	     */

	    this._version = opts.version || 20190101;
	    /**
	     * Additional data params that are sent along with the request
	     * @type {string}
	     * @private
	     */

	    this._params = opts.params || {};

	    if (!globalStorage) {
	      throw new AnswersBasicError('Must include global storage', 'ApiRequest');
	    }
	    /**
	     * @type {GlobalStorage}
	     * @private
	     */


	    this._globalStorage = globalStorage;
	  }
	  /**
	   * get creates a new `GET` request to the server using the configuration of the request class
	   * @returns {Promise<Response>}
	   */


	  var _proto = ApiRequest.prototype;

	  _proto.get = function get() {
	    return this._requester.get(this._baseUrl + this._endpoint, assign$2({}, this.baseParams(), this.sanitizeParams(this._params)));
	  }
	  /**
	   * @param {Object} opts
	   * @returns {Promise<Response>}
	   */
	  ;

	  _proto.post = function post(opts) {
	    return this._requester.post(this._baseUrl + this._endpoint, this.baseParams()
	    /* urlParams */
	    , this.sanitizeParams(this._params)
	    /* jsonBody */
	    , opts
	    /* requestConfig */
	    );
	  }
	  /**
	   * @returns {Object}
	   * @private
	   */
	  ;

	  _proto.baseParams = function baseParams() {
	    var baseParams = {
	      'v': this._version,
	      'api_key': this._apiKey,
	      'jsLibVersion': LIB_VERSION,
	      'sessionTrackingEnabled': this._globalStorage.getState(StorageKeys.SESSIONS_OPT_IN)
	    };
	    var urlParams = new SearchParams(window.location.search.substring(1));

	    if (urlParams.has('beta')) {
	      baseParams['beta'] = urlParams.get('beta');
	    }

	    return baseParams;
	  };

	  _proto.sanitizeParams = function sanitizeParams(params) {
	    var _context;

	    if (params === void 0) {
	      params = {};
	    }

	    // Remove any paramaters whos value is `undefined`.
	    //
	    // NOTE(billy) Probably better to be explicit about how to handle this at the request building level,
	    // but I can't see any cases where we'd ever want to send 'undefined' as a value to the server.
	    // So it's probably fine to 'clean' the params object here
	    forEach$4(_context = keys$9(params)).call(_context, function (key) {
	      if (params[key] === undefined || params[key] === null) {
	        delete params[key];
	      }
	    });

	    return params;
	  };

	  return ApiRequest;
	}();

	/**
	 * SearchApi is the API for doing various types of search
	 * over the network (e.g. vertical or universal)
	 *
	 * @implements {SearchService}
	 */

	var SearchApi =
	/*#__PURE__*/
	function () {
	  function SearchApi(config) {
	    if (config === void 0) {
	      config = {};
	    }

	    /**
	     * A local reference to the API Key to use for the request
	     * @type {string}
	     * @private
	     */
	    if (!config.apiKey) {
	      throw new AnswersBasicError('Api Key is required', 'Search');
	    }

	    this._apiKey = config.apiKey;
	    /**
	     * A local reference to the Answers Key to use for the request
	     * @type {string}
	     * @private
	     */

	    if (!config.experienceKey) {
	      throw new AnswersBasicError('Answers Key is required', 'Search');
	    }

	    this._experienceKey = config.experienceKey;
	    /**
	     * The answers config version to use for all requests
	     * @type {string}
	     * @private
	     */

	    this._experienceVersion = config.experienceVersion;
	    /**
	     * The version of the API to make a request to
	     * @type {string}
	     * @private
	     */

	    this._version = config.version || 20190101 || 20190301;
	    /**
	     * A local reference to the locale to use for the request
	     * @type {string}
	     * @private
	     */

	    if (!config.locale) {
	      throw new AnswersBasicError('Locale is required', 'Search');
	    }

	    this._locale = config.locale;
	    /**
	     * The environment of the Answers experience
	     * @type {string}
	     * @private
	     */

	    this._environment = config.environment;
	  }
	  /** @inheritdoc */


	  var _proto = SearchApi.prototype;

	  _proto.verticalSearch = function verticalSearch(verticalKey, _ref) {
	    var input = _ref.input,
	        filter = filter$4(_ref),
	        facetFilter = _ref.facetFilter,
	        limit = _ref.limit,
	        offset = _ref.offset,
	        id = _ref.id,
	        geolocation = _ref.geolocation,
	        isDynamicFiltersEnabled = _ref.isDynamicFiltersEnabled,
	        skipSpellCheck = _ref.skipSpellCheck,
	        queryTrigger = _ref.queryTrigger,
	        sessionTrackingEnabled = _ref.sessionTrackingEnabled,
	        sortBys = _ref.sortBys;

	    if (limit > 50) {
	      throw new AnswersCoreError('Provided search limit unsupported', 'SearchApi');
	    }

	    var requestConfig = {
	      endpoint: '/v2/accounts/me/answers/vertical/query',
	      apiKey: this._apiKey,
	      version: this._version,
	      environment: this._environment,
	      params: {
	        'input': input,
	        'experienceKey': this._experienceKey,
	        'version': this._experienceVersion,
	        'filters': filter,
	        'facetFilters': facetFilter,
	        'verticalKey': verticalKey,
	        'limit': limit,
	        'offset': offset,
	        'location': geolocation ? geolocation.lat + "," + geolocation.lng : null,
	        'radius': geolocation ? geolocation.radius : null,
	        'queryId': id,
	        'retrieveFacets': isDynamicFiltersEnabled,
	        'locale': this._locale,
	        'skipSpellCheck': skipSpellCheck,
	        'queryTrigger': queryTrigger,
	        'sessionTrackingEnabled': sessionTrackingEnabled,
	        'sortBys': sortBys
	      }
	    };
	    var request = new ApiRequest(requestConfig, {
	      getState: function getState() {
	        return sessionTrackingEnabled;
	      }
	    });
	    return request.get().then(function (response) {
	      return response.json();
	    });
	  }
	  /** @inheritdoc */
	  ;

	  _proto.universalSearch = function universalSearch(queryString, params) {
	    var requestConfig = {
	      endpoint: '/v2/accounts/me/answers/query',
	      apiKey: this._apiKey,
	      version: this._version,
	      environment: this._environment,
	      params: {
	        'input': queryString,
	        'experienceKey': this._experienceKey,
	        'location': params.geolocation ? params.geolocation.lat + "," + params.geolocation.lng : null,
	        'radius': params.geolocation ? params.geolocation.radius : null,
	        'version': this._experienceVersion,
	        'locale': this._locale,
	        'skipSpellCheck': params.skipSpellCheck,
	        'queryTrigger': params.queryTrigger
	      }
	    };
	    var request = new ApiRequest(requestConfig, {
	      getState: function getState() {
	        return params.sessionTrackingEnabled;
	      }
	    });
	    return request.get().then(function (response) {
	      return response.json();
	    });
	  };

	  return SearchApi;
	}();

	/**
	 * Model for the analytics event type
	 */
	var AnalyticsEvent =
	/*#__PURE__*/
	function () {
	  function AnalyticsEvent(type, label) {
	    /**
	     * The type of event to report
	     * @type {string}
	     */
	    this.eventType = type.toUpperCase();
	    /**
	     * An optional label to be provided for the event
	     * @type {string}
	     */

	    if (label) {
	      this.label = label;
	    }
	  }
	  /**
	   * Adds the provided options to the event
	   * @param {object} options Additional options for the event
	   */


	  var _proto = AnalyticsEvent.prototype;

	  _proto.addOptions = function addOptions(options) {
	    assign$2(this, options);

	    return this;
	  }
	  /**
	   * Return the event in the api format, typically for reporting to the api
	   */
	  ;

	  _proto.toApiEvent = function toApiEvent() {
	    return assign$2({}, this);
	  };

	  return AnalyticsEvent;
	}();

	/** @typedef {import('../services/analyticsreporterservice').default} AnalyticsReporterService */

	/**
	 * Class for reporting analytics events to the server via HTTP
	 *
	 * @implements {AnalyticsReporterService}
	 */

	var AnalyticsReporter =
	/*#__PURE__*/
	function () {
	  function AnalyticsReporter(core, experienceKey, experienceVersion, businessId, globalOptions, environment) {
	    var _this = this;

	    if (globalOptions === void 0) {
	      globalOptions = {};
	    }

	    if (environment === void 0) {
	      environment = PRODUCTION;
	    }

	    /**
	     * The internal business identifier used for reporting
	     * @type {number}
	     */
	    this._businessId = businessId;
	    /**
	     * Options to include with every analytic event reported to the server
	     * @type {object}
	     * @private
	     */

	    this._globalOptions = assign$2({}, globalOptions, {
	      experienceKey: experienceKey
	    });
	    /**
	     * The environment of the Answers experience
	     * @type {string}
	     * @private
	     */

	    this._environment = environment;
	    /**
	     * Base URL for the analytics API
	     * @type {string}
	     * @private
	     */

	    this._baseUrl = getAnalyticsUrl(this._environment);
	    /**
	     * Boolean indicating if opted in or out of conversion tracking
	     * @type {boolean}
	     * @private
	     */

	    this._conversionTrackingEnabled = false;

	    if (experienceVersion) {
	      this._globalOptions.experienceVersion = experienceVersion;
	    } // listen to query id updates


	    core.globalStorage.on('update', StorageKeys.QUERY_ID, function (id) {
	      return _this.setQueryId(id);
	    });
	  }

	  var _proto = AnalyticsReporter.prototype;

	  _proto.setQueryId = function setQueryId(queryId) {
	    this._globalOptions.queryId = queryId;
	  }
	  /** @inheritdoc */
	  ;

	  _proto.report = function report(event) {
	    var cookieData = {};

	    if (this._conversionTrackingEnabled && typeof ytag === 'function') {
	      ytag('optin', true);
	      cookieData = ytag('yfpc', null);
	    } else if (this._conversionTrackingEnabled) {
	      throw new AnswersAnalyticsError('Tried to enable conversion tracking without including ytag');
	    }

	    if (!(event instanceof AnalyticsEvent)) {
	      throw new AnswersAnalyticsError('Tried to send invalid analytics event', event);
	    }

	    event.addOptions(this._globalOptions);
	    return new HttpRequester().beacon(this._baseUrl + "/realtimeanalytics/data/answers/" + this._businessId, objectSpread({
	      data: event.toApiEvent()
	    }, cookieData));
	  }
	  /** @inheritdoc */
	  ;

	  _proto.setConversionTrackingEnabled = function setConversionTrackingEnabled(isEnabled) {
	    this._conversionTrackingEnabled = isEnabled;
	    this._baseUrl = getAnalyticsUrl(this._environment, isEnabled);
	  };

	  return AnalyticsReporter;
	}();

	/** @typedef {import('../services/analyticsreporterservice').default} AnalyticsReporterService */

	/**
	 * @implements {AnalyticsReporterService}
	 */
	var NoopAnalyticsReporter =
	/*#__PURE__*/
	function () {
	  function NoopAnalyticsReporter() {}

	  var _proto = NoopAnalyticsReporter.prototype;

	  /** @inheritdoc */
	  _proto.report = function report(event) {
	    return true;
	  }
	  /** @inheritdoc */
	  ;

	  _proto.setConversionTrackingEnabled = function setConversionTrackingEnabled(isEnabled) {};

	  return NoopAnalyticsReporter;
	}();

	/**
	 * ModuleData is used as a generic model for Storage.
	 * Typically an instance of ModuleData powers a single component.

	 * A data model that exposes an event emitter interface.
	 * @extends EventEmitter
	 */

	var ModuleData =
	/*#__PURE__*/
	function (_EventEmitter) {
	  inheritsLoose(ModuleData, _EventEmitter);

	  function ModuleData(id, data) {
	    var _this;

	    if (data === void 0) {
	      data = {};
	    }

	    _this = _EventEmitter.call(this) || this;
	    _this._id = id;
	    _this._history = [];
	    _this._data = data;

	    _this.set(data);

	    return _this;
	  }
	  /**
	   * replaces the currently held data with the given data
	   * @param {*} data the data to replace the current data
	   */


	  var _proto = ModuleData.prototype;

	  _proto.set = function set(data) {
	    this.capturePrevious();

	    if (typeof data !== 'object' || isArray$4(data) || keys$9(data).length !== keys$9(this._data).length) {
	      this._data = data;
	      this.emit('update', this._data);
	      return;
	    } // check for shallow equality


	    for (var _i = 0, _Object$keys2 = keys$9(data); _i < _Object$keys2.length; _i++) {
	      var key = _Object$keys2[_i];

	      if (this._data[key] !== data[key]) {
	        this._data = data;
	        this.emit('update', this._data);
	        return;
	      }
	    }
	  };

	  _proto.capturePrevious = function capturePrevious() {
	    if (this._history === undefined) {
	      this._history = [];
	    }

	    if (this._history.length + 1 > 5) {
	      this._history.shift();
	    } // If data is ever undefined, we default to empty object


	    this._history.push(stringify$2(this._data || {}));
	  };

	  _proto.undo = function undo() {
	    var previous = {};

	    if (this._previous.length > 0) {
	      previous = JSON.parse(this._previous.pop());
	    }

	    this._data.set(previous);
	  };

	  _proto.raw = function raw() {
	    return this._data;
	  };

	  return ModuleData;
	}(EventEmitter);

	var nativeStartsWith$1 = ''.startsWith;
	var min$b = Math.min;

	var CORRECT_IS_REGEXP_LOGIC$2 = correctIsRegexpLogic('startsWith');

	// `String.prototype.startsWith` method
	// https://tc39.github.io/ecma262/#sec-string.prototype.startswith
	_export({ target: 'String', proto: true, forced: !CORRECT_IS_REGEXP_LOGIC$2 }, {
	  startsWith: function startsWith(searchString /* , position = 0 */) {
	    var that = String(requireObjectCoercible(this));
	    notARegexp(searchString);
	    var index = toLength(min$b(arguments.length > 1 ? arguments[1] : undefined, that.length));
	    var search = String(searchString);
	    return nativeStartsWith$1
	      ? nativeStartsWith$1.call(that, search, index)
	      : that.slice(index, index + search.length) === search;
	  }
	});

	var startsWith = entryVirtual('String').startsWith;

	var StringPrototype$1 = String.prototype;

	var startsWith_1 = function (it) {
	  var own = it.startsWith;
	  return typeof it === 'string' || it === StringPrototype$1
	    || (it instanceof String && own === StringPrototype$1.startsWith) ? startsWith : own;
	};

	var startsWith$1 = startsWith_1;

	var startsWith$2 = startsWith$1;

	/**
	 * Storage is a container around application state.
	 * It exposes an interface for CRUD operations as well as listening
	 * for stateful changes.
	 */

	var GlobalStorage =
	/*#__PURE__*/
	function () {
	  function GlobalStorage() {
	    this._moduleDataContainer = {};
	    this._futureListeners = {};
	  }
	  /**
	   * Set the data in storage with the given key to the provided data,
	   * completely overwriting any existing data.
	   * @param {string} key the storage key to set
	   * @param {*} data the data to set
	   */


	  var _proto = GlobalStorage.prototype;

	  _proto.set = function set(key, data) {
	    this._initDataContainer(key, data);

	    this._moduleDataContainer[key].set(data);
	  }
	  /**
	   * Add all key/value pairs in the provided map to the storage
	   * @param {*} data The key/value pairs to set in the storage
	   */
	  ;

	  _proto.setAll = function setAll(data) {
	    for (var _i = 0, _Object$entries = entries$2(data); _i < _Object$entries.length; _i++) {
	      var _Object$entries$_i = _Object$entries[_i],
	          key = _Object$entries$_i[0],
	          val = _Object$entries$_i[1];

	      if (key === StorageKeys.QUERY) {
	        continue;
	      }

	      this.set(key, val);
	    } // Update query last since it triggers a search
	    // TODO: move listeners up so all of storage can be updated at the same time


	    if (data[StorageKeys.QUERY]) {
	      this.set(StorageKeys.QUERY, data[StorageKeys.QUERY]);
	    }
	  };

	  _proto._initDataContainer = function _initDataContainer(key, data) {
	    if (key === undefined || key === null || typeof key !== 'string') {
	      throw new AnswersStorageError('Invalid storage key provided', key, data);
	    }

	    if (data === undefined || data === null) {
	      throw new AnswersStorageError('No data provided', key, data);
	    }

	    if (this._moduleDataContainer[key] === undefined) {
	      this._moduleDataContainer[key] = new ModuleData(key);

	      this._applyFutureListeners(key);
	    }
	  };

	  _proto.getState = function getState(moduleId) {
	    if (this._moduleDataContainer[moduleId]) {
	      return this._moduleDataContainer[moduleId].raw();
	    }

	    return null;
	  };

	  _proto.getAll = function getAll(key) {
	    var data = [];

	    for (var _i2 = 0, _Object$keys = keys$9(this._moduleDataContainer); _i2 < _Object$keys.length; _i2++) {
	      var dataKey = _Object$keys[_i2];

	      if (startsWith$2(dataKey).call(dataKey, key) && this._moduleDataContainer[dataKey].raw() !== null) {
	        data.push(this._moduleDataContainer[dataKey].raw());
	      }
	    }

	    return data;
	  }
	  /**
	   * Remove the data in storage with the given key to the provided data,
	   * @param {string} key the storage key to delete
	   */
	  ;

	  _proto["delete"] = function _delete(key) {
	    // Note: Do we need to clean up listeners here?
	    delete this._moduleDataContainer[key];
	  };

	  _proto.on = function on(evt, moduleId, cb) {
	    var moduleData = this._moduleDataContainer[moduleId];

	    if (moduleData === undefined) {
	      if (this._futureListeners[moduleId] === undefined) {
	        this._futureListeners[moduleId] = [];
	      }

	      this._futureListeners[moduleId].push({
	        event: evt,
	        cb: cb
	      });

	      return;
	    }

	    this._moduleDataContainer[moduleId].on(evt, cb);

	    return this;
	  };

	  _proto.off = function off(evt, moduleId, cb) {
	    var moduleData = this._moduleDataContainer[moduleId];

	    if (moduleData === undefined) {
	      if (this._futureListeners[moduleId] !== undefined) {
	        this._futureListeners[moduleId].pop();
	      }

	      return this;
	    }

	    this._moduleDataContainer[moduleId].off(evt, cb);

	    return this;
	  };

	  _proto._applyFutureListeners = function _applyFutureListeners(moduleId) {
	    var futures = this._futureListeners[moduleId];

	    if (!futures) {
	      return;
	    }

	    for (var i = 0; i < futures.length; i++) {
	      var future = futures[i];
	      this.on(future.event, moduleId, future.cb);
	    }

	    delete this._futureListeners[moduleId];
	  };

	  return GlobalStorage;
	}();

	/** @module */

	/**
	 * Component is an abstraction that encapsulates state, behavior,
	 * and view for a particular chunk of functionality on the page.
	 *
	 * The API exposes event life cycle hooks for when things are rendered,
	 * mounted, created, etc.
	 */

	var Component =
	/*#__PURE__*/
	function () {
	  function Component(config, systemConfig) {
	    var _context, _context2, _context3;

	    if (config === void 0) {
	      config = {};
	    }

	    if (systemConfig === void 0) {
	      systemConfig = {};
	    }

	    this.moduleId = null;
	    /**
	     * Unique name of this component instance
	     * Used to distinguish between other components of the same type
	     * @type {String}
	     */

	    this.name = config.name || this.constructor.type;
	    /**
	     * Cache the options so that we can propogate properly to child components
	     * @type {Object}
	     */

	    this._config = config;
	    /**
	     * An identifier used to classify the type of component.
	     * The component manager uses this information in order to persist and organize components
	     * @type {string|ComponentType}
	     */

	    this._type = this.constructor.name;
	    /**
	     * A local reference to the parent component, if exists
	     * @type {Component}
	     */

	    this._parentContainer = config.parentContainer || null;
	    /**
	     * A container for all the child components
	     * @type {Component[]}
	     */

	    this._children = [];
	    /**
	     * The state (data) of the component to be provided to the template for rendering
	     * @type {object}
	     */

	    this._state = new State(config.state);
	    /**
	     * TODO(billy) This should be 'services'
	     */

	    this.core = systemConfig.core || null;
	    /**
	     * A local reference to the component manager, which contains all of the component classes
	     * eligible to be created
	     * @type {ComponentManager}
	     */

	    this.componentManager = systemConfig.componentManager || null;
	    /**
	     * A local reference to the analytics reporter, used to report events for this component
	     * @type {AnalyticsReporter}
	     */

	    this.analyticsReporter = systemConfig.analyticsReporter || null;
	    /**
	     * Options to include with all analytic events sent by this component
	     * @type {object}
	     * @private
	     */

	    this._analyticsOptions = config.analyticsOptions || {};
	    /**
	     * A reference to the DOM node that the component will be appended to when mounted/rendered.
	     * @type {HTMLElement}
	     */

	    if (this._parentContainer === null) {
	      if (typeof config.container === 'string') {
	        this._container = DOM.query(config.container) || null;

	        if (this._container === null) {
	          throw new Error('Cannot find container DOM node: ' + config.container);
	        }
	      }
	    } else {
	      this._container = DOM.query(this._parentContainer, config.container); // If we have a parent, and the container is missing from the DOM,
	      // we construct the container and append it to the parent

	      if (this._container === null) {
	        this._container = DOM.createEl('div', {
	          "class": config.container.substring(1, config.container.length)
	        });
	        DOM.append(this._parentContainer, this._container);
	      }
	    }
	    /**
	     * A custom class to be applied to {this._container} node
	     * @type {string}
	     */


	    this._className = config["class"] || 'component';
	    /**
	     * A custom render function to be used instead of using the default renderer
	     * @type {Renderer}
	     */

	    this._render = config.render || null;
	    /**
	     * A local reference to the default {Renderer} that will be used for rendering the template
	     * @type {Renderer}
	     */

	    this._renderer = systemConfig.renderer || Renderers.Handlebars;
	    /**
	     * The template string to use for rendering the component
	     * If this is left empty, we lookup the template the base templates using the templateName
	     * @type {string}
	     */

	    this._template = config.template ? this._renderer.compile(config.template) : null;
	    /**
	     * The templateName to use for rendering the component.
	     * This is only used if _template is empty.
	     * @type {string}
	     */

	    this._templateName = config.templateName || this.constructor.defaultTemplateName(config);
	    /**
	     * An internal state indicating whether or not the component has been mounted to the DOM
	     * @type {boolean}
	     */

	    this._isMounted = false;
	    /**
	     * A local reference to the callback, thats used to transform the internal data
	     * models of the components, before it gets applied to the component state.
	     * By default, no transformation happens.
	     * @type {function}
	     */

	    this.transformData = config.transformData || this.transformData || function () {};
	    /**
	     * The a local reference to the callback that will be invoked when a component is created.
	     * @type {function}
	     */


	    this.onCreate = config.onCreateOverride || this.onCreate || function () {};

	    this.onCreate = bind$6(_context = this.onCreate).call(_context, this);
	    /**
	     * The a local reference to the callback that will be invoked when a component is Mounted.
	     * @type {function}
	     */

	    this.onMount = config.onMountOverride || this.onMount || function () {};

	    this.onMount = bind$6(_context2 = this.onMount).call(_context2, this);
	    /**
	     * The a local reference to the callback that will be invoked when a components state is updated.
	     * @type {function}
	     */

	    this.onUpdate = config.onUpdateOverride || this.onUpdate || function () {};

	    this.onUpdate = bind$6(_context3 = this.onUpdate).call(_context3, this);
	    /**
	     * A user provided onCreate callback
	     * @type {function}
	     */

	    this.userOnCreate = config.onCreate || function () {};
	    /**
	     * A user provided onMount callback
	     * @type {function}
	     */


	    this.userOnMount = config.onMount || function () {};
	    /**
	     * A user provided onUpdate callback
	     * @type {function}
	     */


	    this.userOnUpdate = config.onUpdate || function () {};
	  }
	  /**
	   * The template to render
	   * @returns {string}
	   * @override
	   */


	  Component.defaultTemplateName = function defaultTemplateName(config) {
	    return 'default';
	  };

	  Component.areDuplicateNamesAllowed = function areDuplicateNamesAllowed() {
	    return false;
	  };

	  var _proto = Component.prototype;

	  _proto.init = function init(opts) {
	    var _this = this;

	    try {
	      this.setState(opts.data || opts.state || {});
	      this.onCreate();
	      this.userOnCreate();
	    } catch (e) {
	      throw new AnswersComponentError('Error initializing component', this.constructor.type, e);
	    }

	    this._state.on('update', function () {
	      try {
	        _this.onUpdate();

	        _this.userOnUpdate();

	        _this.unMount();

	        _this.mount();
	      } catch (e) {
	        throw new AnswersComponentError('Error updating component', _this.constructor.type, e);
	      }
	    });

	    DOM.addClass(this._container, this._className);
	    return this;
	  };

	  _proto.setState = function setState(data) {
	    var newState = assign$2({}, {
	      _config: this._config
	    }, data);

	    this._state.set(newState);

	    return this;
	  };

	  _proto.getState = function getState(prop) {
	    return this._state.get(prop);
	  };

	  _proto.hasState = function hasState(prop) {
	    return this._state.has(prop);
	  };

	  _proto.transformData = function transformData(data) {
	    return data;
	  };

	  _proto.addChild = function addChild(data, type, opts) {
	    var childComponent = this.componentManager.create(type, assign$2({
	      name: data.name,
	      parentContainer: this._container,
	      data: data
	    }, opts || {}, {
	      _parentOpts: this._config
	    }));

	    this._children.push(childComponent);

	    return childComponent;
	  }
	  /**
	   * Unmount and remove this component and its children from the list
	   * of active components
	   */
	  ;

	  _proto.remove = function remove() {
	    var _context4;

	    forEach$4(_context4 = this._children).call(_context4, function (c) {
	      return c.remove();
	    });

	    this.componentManager.remove(this);
	  }
	  /**
	   * Set the render method to be used for rendering the component
	   * @param {Function} render
	   * @return {string}
	   */
	  ;

	  _proto.setRender = function setRender(render) {
	    this._render = render;
	    return this;
	  }
	  /**
	   * Set the renderer for the component
	   * @param {RendererType} renderer
	   */
	  ;

	  _proto.setRenderer = function setRenderer(renderer) {
	    this._renderer = Renderers[renderer];
	    return this;
	  }
	  /**
	   * Sets the template for the component to use when rendering
	   * @param {string} template
	   */
	  ;

	  _proto.setTemplate = function setTemplate(template) {
	    this._template = this._renderer.compile(template);
	  };

	  _proto.unMount = function unMount() {
	    var _context5, _context6;

	    if (!this._container) {
	      return this;
	    }

	    forEach$4(_context5 = this._children).call(_context5, function (child) {
	      child.unMount();
	    });

	    DOM.empty(this._container);

	    forEach$4(_context6 = this._children).call(_context6, function (c) {
	      return c.remove();
	    });

	    this._children = [];
	    this.onUnMount();
	  };

	  _proto.mount = function mount(container) {
	    var _this2 = this,
	        _context7;

	    if (container) {
	      this._container = container;
	    }

	    if (!this._container) {
	      return this;
	    }

	    if (this.beforeMount() === false) {
	      return this;
	    }

	    DOM.append(this._container, this.render(this._state.asJSON())); // Process the DOM to determine if we should create
	    // in-memory sub-components for rendering

	    var domComponents = DOM.queryAll(this._container, '[data-component]:not([data-is-component-mounted])');
	    var data = this.transformData(JSON.parse(stringify$2(this._state.get())));

	    forEach$4(domComponents).call(domComponents, function (c) {
	      return _this2._createSubcomponent(c, data);
	    });

	    forEach$4(_context7 = this._children).call(_context7, function (child) {
	      child.mount();
	    }); // Attach analytics hooks as necessary


	    if (this.analyticsReporter) {
	      var _context8;

	      var domHooks = DOM.queryAll(this._container, '[data-eventtype]:not([data-is-analytics-attached])');

	      forEach$4(domHooks).call(domHooks, bind$6(_context8 = this._createAnalyticsHook).call(_context8, this));
	    }

	    this._isMounted = true;
	    this.onMount(this);
	    this.userOnMount(this);
	    return this;
	  }
	  /**
	   * render the template using the {Renderer} with the current state and template of the component
	   * @returns {string}
	   */
	  ;

	  _proto.render = function render(data) {
	    if (data === void 0) {
	      data = this._state.get();
	    }

	    this.beforeRender(); // Temporary fix for passing immutable data to transformData().

	    data = this.transformData(JSON.parse(stringify$2(data)));
	    var html = ''; // Use either the custom render function or the internal renderer
	    // dependant on the component configuration

	    if (typeof this._render === 'function') {
	      html = this._render(data);

	      if (typeof html !== 'string') {
	        throw new Error('Render method must return HTML as type {string}');
	      }
	    } else {
	      // Render the existing templates as a string
	      html = this._renderer.render({
	        template: this._template,
	        templateName: this._templateName
	      }, data);
	    } // We create an HTML Document fragment with the rendered string
	    // So that we can query it for processing of sub components


	    var el = DOM.create(html);
	    this.afterRender();
	    return el.innerHTML;
	  };

	  _proto._createSubcomponent = function _createSubcomponent(domComponent, data) {
	    var _this3 = this;

	    domComponent.dataset.isComponentMounted = true;
	    var dataset = domComponent.dataset;
	    var type = dataset.component;
	    var prop = dataset.prop;
	    var opts = dataset.opts ? JSON.parse(dataset.opts) : {};
	    var childData = data[prop] || {};
	    opts = objectSpread({}, opts, {
	      container: domComponent
	    }); // TODO(billy) Right now, if we provide an array as the data prop,
	    // the behavior is to create many components for each item in the array.
	    // THAT interface SHOULD change to use a different property that defines
	    // whether to array data should be used for a single component or
	    // to create many components for each item.
	    // Overloading and having this side effect is unintuitive and WRONG

	    if (!isArray$4(childData)) {
	      // Rendering a sub component should be within the context,
	      // of the node that we processed it from
	      this.addChild(childData, type, opts);
	      return;
	    }

	    reverse$2(childData).call(childData);

	    forEach$4(childData).call(childData, function (data) {
	      _this3.addChild(data, type, opts);
	    });
	  };

	  _proto._createAnalyticsHook = function _createAnalyticsHook(domComponent) {
	    var _this4 = this;

	    domComponent.dataset.isAnalyticsAttached = true;
	    var dataset = domComponent.dataset;
	    var type = dataset.eventtype;
	    var label = dataset.eventlabel;
	    var options = dataset.eventoptions ? JSON.parse(dataset.eventoptions) : {};
	    DOM.on(domComponent, 'click', function (e) {
	      var event = new AnalyticsEvent(type, label);
	      event.addOptions(_this4._analyticsOptions);
	      event.addOptions(options);

	      _this4.analyticsReporter.report(event);
	    });
	  }
	  /**
	   * onCreate is triggered when the component is constructed
	   * @param {function} the callback to invoke upon emit
	   */
	  ;

	  _proto.onCreate = function onCreate(cb) {}
	  /**
	   * onUpdate is triggered when the state of the component changes
	   * @param {function} the callback to invoke upon emit
	   */
	  ;

	  _proto.onUpdate = function onUpdate(cb) {}
	  /**
	   * beforeRender event is triggered before the component is rendered
	   * @param {function} the callback to invoke upon emit
	   */
	  ;

	  _proto.beforeRender = function beforeRender(cb) {}
	  /**
	   * afterRender event is triggered after the component is rendered
	   * @param {function} the callback to invoke upon emit
	   */
	  ;

	  _proto.afterRender = function afterRender(cb) {}
	  /**
	   * onMount is triggered when the component is appended to the DOM
	   * @param {function} the callback to invoke upon emit
	   */
	  ;

	  _proto.onMount = function onMount(cb) {}
	  /**
	   * onUnMount is triggered when the component is removed from the DOM
	   * @param {function} the callback to invoke upon emit
	   */
	  ;

	  _proto.onUnMount = function onUnMount(cb) {}
	  /**
	   * beforeMount is triggered before the component is mounted to the DOM
	   * @param {function} the callback to invoke upon emit
	   */
	  ;

	  _proto.beforeMount = function beforeMount(cb) {}
	  /**
	   * onDestroy is triggered when the component is destroyed
	   * @param {function} the callback to invoke upon emit
	   */
	  ;

	  _proto.onDestroy = function onDestroy(cb) {};

	  createClass(Component, null, [{
	    key: "type",
	    get: function get() {
	      return 'Component';
	    }
	  }]);

	  return Component;
	}();

	/** @module ErrorReporter */
	/** @typedef {import('../services/errorreporterservice').default} ErrorReporterService */

	/**
	 * ErrorReporter is used for reporting errors to the console and API
	 *
	 * @implements {ErrorReporterService}
	 */

	var ErrorReporter =
	/*#__PURE__*/
	function () {
	  function ErrorReporter(config, globalStorage) {
	    var _this = this;

	    /**
	     * The apiKey to use for reporting
	     * @type {string}
	     */
	    this.apiKey = config.apiKey;
	    /**
	     * The experienceKey to use when reporting
	     * @type {string}
	     */

	    this.experienceKey = config.experienceKey;
	    /**
	     * The answers config version used for api requests
	     * @type {string|number}
	     */

	    this.experienceVersion = config.experienceVersion || 'config1.0';
	    /**
	     * If true, print entire error objects to the console for inspection
	     * @type {boolean}
	     */

	    this.printVerbose = config.printVerbose;
	    /**
	     * If true, report the error the server for logging and monitoring
	     * @type {boolean}
	     */

	    this.sendToServer = config.sendToServer;
	    /**
	     * The global storage instance of the experience
	     * @type {GlobalStorage}
	     */

	    if (this.sendToServer && !globalStorage) {
	      throw new AnswersBasicError('Must include globalStorage to send errors to server', 'ErrorReporter');
	    }

	    this.globalStorage = globalStorage;
	    /**
	     * The environment of the Answers experience
	     * @type {string}
	     * @private
	     */

	    this.environment = config.environment; // Attach reporting listeners to window

	    window.addEventListener('error', function (e) {
	      return _this.report(e.error);
	    });
	    window.addEventListener('unhandledrejection', function (e) {
	      return _this.report(e.error);
	    });
	  }
	  /**
	   * report pretty prints the error to the console, optionally
	   * prints the entire error if `printVerbose` is true, and sends the
	   * error to the server to be logged if `sendToServer` is true
	   * @param {AnswersBaseError} err The error to be reported
	   * @returns {AnswersBaseError} The reported error
	   */


	  var _proto = ErrorReporter.prototype;

	  _proto.report = function report(err) {
	    if (!(err instanceof AnswersBaseError) || err.reported) {
	      return;
	    }

	    err.reported = true;
	    this.printError(err);

	    if (this.sendToServer) {
	      var requestConfig = {
	        endpoint: '/v2/accounts/me/answers/errors',
	        apiKey: this.apiKey,
	        version: 20190301,
	        environment: this.environment,
	        params: {
	          'libVersion': LIB_VERSION,
	          'experienceVersion': this.experienceVersion,
	          'experienceKey': this.experienceKey,
	          'error': err.toJson()
	        }
	      };
	      var request = new ApiRequest(requestConfig, this.globalStorage); // TODO(amullings): We should probably change this endpoint to POST,
	      // ideally using the beacon API. Stack traces will likely easily hit URL
	      // length limits.

	      request.get()["catch"](console.err);
	    }

	    return err;
	  }
	  /**
	   * prints the given error to the browser console
	   * @param {AnswersBaseError} err The error to be printed
	   */
	  ;

	  _proto.printError = function printError(err) {
	    if (this.printVerbose) {
	      console.error("error: " + err.errorMessage + "\ncode: " + err.errorCode + "\nboundary: " + err.boundary + "\nstack: " + err.stack);
	    } else {
	      console.error(err.toString());
	    }
	  };

	  return ErrorReporter;
	}();

	/** @typedef {import('../services/errorreporterservice').default} ErrorReporterService */

	/**
	 * @implements {ErrorReporterService}
	 */
	var ConsoleErrorReporter =
	/*#__PURE__*/
	function () {
	  function ConsoleErrorReporter() {}

	  var _proto = ConsoleErrorReporter.prototype;

	  /** @inheritdoc */
	  _proto.report = function report(err) {
	    console.error(err.toString());
	  };

	  return ConsoleErrorReporter;
	}();

	var getIterator_1 = getIterator$1;

	var getIterator$2 = getIterator_1;

	var entries$3 = entryVirtual('Array').entries;

	var entries$4 = entries$3;

	var ArrayPrototype$c = Array.prototype;

	var DOMIterables$1 = {
	  DOMTokenList: true,
	  NodeList: true
	};

	var entries_1 = function (it) {
	  var own = it.entries;
	  return it === ArrayPrototype$c || (it instanceof Array && own === ArrayPrototype$c.entries)
	    // eslint-disable-next-line no-prototype-builtins
	    || DOMIterables$1.hasOwnProperty(classof$1(it)) ? entries$4 : own;
	};

	var entries$5 = entries_1;

	/** @module PersistentStorage */

	var PersistentStorage =
	/*#__PURE__*/
	function () {
	  function PersistentStorage(config) {
	    var _this = this;

	    if (config === void 0) {
	      config = {};
	    }

	    /**
	     * The current params model
	     * @type {SearchParams}
	     */
	    this._params = new SearchParams(window.location.search.substring(1));
	    /**
	     * The current history edit timer, if any
	     * @type {number}
	     */

	    this._historyTimer = null;
	    /**
	     * The list of listeners to every storage update
	     * @type {function[]}
	     */

	    this._updateListener = config.updateListener || function () {};
	    /**
	     * The list of listeners to storage resets
	     * @type {function[]}
	     */


	    this._resetListener = config.resetListener || function () {};

	    window.onpopstate = function () {
	      _this._params = new SearchParams(window.location.search.substring(1));

	      _this._callListener(_this._updateListener);

	      _this._callListener(_this._resetListener);
	    };
	  }
	  /**
	   * Insert the given key/value pair into storage
	   * @param {string} key The key to insert the data in
	   * @param {*} data The data to insert
	   * @param {boolean} replace history instead of pushing new state
	   */


	  var _proto = PersistentStorage.prototype;

	  _proto.set = function set(key, data, replaceHistory) {
	    if (replaceHistory === void 0) {
	      replaceHistory = false;
	    }

	    if (typeof key !== 'string') {
	      throw new AnswersStorageError('Storage data key must be a string', key, data);
	    }

	    var newData = data;

	    if (typeof data !== 'string') {
	      newData = stringify$2(data);
	    }

	    this._params.set(key, newData);

	    this._updateHistory(replaceHistory);
	  }
	  /**
	   * Delete the given key from storage
	   * @param {string} key The key to delete
	   * @param {boolean} replace history instead of pushing new state
	   */
	  ;

	  _proto["delete"] = function _delete(key, replaceHistory) {
	    if (replaceHistory === void 0) {
	      replaceHistory = false;
	    }

	    this._params["delete"](key);

	    this._updateHistory(replaceHistory);
	  };

	  _proto._updateHistory = function _updateHistory(replaceHistory) {
	    var _this2 = this;

	    if (replaceHistory === void 0) {
	      replaceHistory = false;
	    }

	    if (this._historyTimer) {
	      clearTimeout(this._historyTimer);
	    } // batch update calls across components to avoid updating the url too much


	    this._historyTimer = setTimeout$2(function () {
	      _this2._historyTimer = null;

	      if (replaceHistory) {
	        window.history.replaceState(null, null, "?" + _this2._params.toString());
	      } else {
	        window.history.pushState(null, null, "?" + _this2._params.toString());
	      }

	      _this2._callListener(_this2._updateListener);
	    });
	  }
	  /**
	   * Invoke the given list of callbacks with the current storage data
	   * @param {function[]} listeners The callbacks to invoke
	   * @private
	   */
	  ;

	  _proto._callListener = function _callListener(listener) {
	    listener(this.getAll(), this._params.toString());
	  }
	  /**
	   * Get all the key/value pairs in storage
	   */
	  ;

	  _proto.getAll = function getAll() {
	    var allParams = {};

	    for (var _iterator = entries$5(_context = this._params).call(_context), _isArray = isArray$4(_iterator), _i = 0, _iterator = _isArray ? _iterator : getIterator$2(_iterator);;) {
	      var _context;

	      var _ref;

	      if (_isArray) {
	        if (_i >= _iterator.length) break;
	        _ref = _iterator[_i++];
	      } else {
	        _i = _iterator.next();
	        if (_i.done) break;
	        _ref = _i.value;
	      }

	      var _ref2 = _ref,
	          key = _ref2[0],
	          val = _ref2[1];
	      allParams[key] = val;
	    }

	    return allParams;
	  };

	  return PersistentStorage;
	}();

	/** @module SearchConfig */

	var SearchConfig =
	/*#__PURE__*/
	function () {
	  function SearchConfig(config) {
	    if (config === void 0) {
	      config = {};
	    }

	    /**
	     * The max results per search.
	     * Also defines the number of results per page, if pagination is enabled
	     * @type {number}
	     */
	    this.limit = config.limit || 20;
	    /**
	     * The vertical key to use for all searches
	     * @type {string}
	     */

	    this.verticalKey = config.verticalKey || null;
	    /**
	     * A default search to use on initialization for vertical searchers, when the user has't provided a query
	     * @type {string}
	     */

	    this.defaultInitialSearch = config.defaultInitialSearch;
	    this.validate();

	    freeze$2(this);
	  }

	  var _proto = SearchConfig.prototype;

	  _proto.validate = function validate() {
	    if (typeof this.limit !== 'number' || this.limit < 1 || this.limit > 50) {
	      throw new AnswersConfigError('Search Limit must be between 1 and 50', 'SearchConfig');
	    }
	  };

	  return SearchConfig;
	}();

	var AutoCompleteData =
	/*#__PURE__*/
	function () {
	  function AutoCompleteData(data) {
	    if (data === void 0) {
	      data = {};
	    }

	    this.sections = data.sections || [];
	    this.queryId = data.queryId || '';
	    this.inputIntents = data.inputIntents || [];

	    freeze$2(this);
	  }

	  AutoCompleteData.from = function from(response) {
	    var sections;

	    if (response.sections) {
	      var _context;

	      sections = map$2(_context = response.sections).call(_context, function (s) {
	        var _context2;

	        return {
	          label: s.label,
	          results: map$2(_context2 = s.results).call(_context2, function (r) {
	            return new AutoCompleteResult(r);
	          })
	        };
	      });
	    } else {
	      var _context3;

	      sections = [{
	        results: map$2(_context3 = response.results).call(_context3, function (r) {
	          return new AutoCompleteResult(r);
	        })
	      }];
	    }

	    var inputIntents = response.input ? response.input.queryIntents : [];
	    return new AutoCompleteData({
	      sections: sections,
	      queryId: response.queryId,
	      inputIntents: inputIntents
	    });
	  };

	  return AutoCompleteData;
	}();
	var AutoCompleteResult = function AutoCompleteResult(data) {
	  if (data === void 0) {
	    data = {};
	  }

	  this.filter = filter$4(data) || {};
	  this.highlightedValue = new HighlightedValue(data).getInverted();
	  this.key = data.key || '';
	  this.matchedSubstrings = data.matchedSubstrings || [];
	  this.value = data.value || '';
	  this.shortValue = data.shortValue || this.value;
	  this.intents = data.queryIntents || [];

	  freeze$2(this);
	};

	/** @module AutoCompleteDataTransformer */
	/**
	 * A Data Transformer that takes the response object from a AutoComplete request
	 * And transforms in to a front-end oriented data structure that our
	 * component library and core storage understand.
	 *
	 * TODO(billy) Create our own front-end data models
	 */

	var AutoCompleteDataTransformer =
	/*#__PURE__*/
	function () {
	  function AutoCompleteDataTransformer() {}

	  AutoCompleteDataTransformer.clean = function clean(moduleId, data) {
	    var _ref;

	    if (data.sections && data.sections.length === 0) {
	      delete data.sections;
	    }

	    if (data.sections && data.sections.length === 1 && data.sections[0].results.length === 0) {
	      delete data.sections;
	    }

	    return _ref = {}, _ref[moduleId] = data, _ref;
	  };

	  AutoCompleteDataTransformer.universal = function universal(response) {
	    return AutoCompleteData.from(response);
	  };

	  AutoCompleteDataTransformer.filter = function filter(response) {
	    return AutoCompleteData.from(response);
	  };

	  AutoCompleteDataTransformer.vertical = function vertical(response) {
	    return AutoCompleteData.from(response);
	  };

	  return AutoCompleteDataTransformer;
	}();

	/** @typedef {import('./autocompleteservice').default} AutoCompleteService */

	/**
	 * AutoCompleteApi exposes an interface for network related matters
	 * for all the autocomplete endpoints.
	 *
	 * @implements {AutoCompleteService}
	 */

	var AutoCompleteApi =
	/*#__PURE__*/
	function () {
	  function AutoCompleteApi(config, globalStorage) {
	    if (config === void 0) {
	      config = {};
	    }

	    /**
	     * The API Key to use for the request
	     * @type {string}
	     * @private
	     */
	    if (!config.apiKey) {
	      throw new AnswersBasicError('Api Key is required', 'AutoComplete');
	    }

	    this._apiKey = config.apiKey;
	    /**
	     * The Answers Key to use for the request
	     * @type {string}
	     * @private
	     */

	    if (!config.experienceKey) {
	      throw new AnswersBasicError('Answers Key is required', 'AutoComplete');
	    }

	    this._experienceKey = config.experienceKey;
	    /**
	     * The version of the API to make a request to
	     * @type {string}
	     * @private
	     */

	    this._version = config.version || 20190101 || 20190301;
	    /**
	     * The answers config version to use for all requests
	     * @type {string}
	     * @private
	     */

	    this._experienceVersion = config.experienceVersion;
	    /**
	     * The locale to use for the request
	     * @type {string}
	     * @private
	     */

	    if (!config.locale) {
	      throw new AnswersBasicError('Locale is required', 'AutoComplete');
	    }

	    this._locale = config.locale;
	    /**
	     * The global storage instance of the experience
	     * @type {GlobalStorage}
	     * @private
	     */

	    if (!globalStorage) {
	      throw new AnswersBasicError('Global storage is required', 'AutoComplete');
	    }

	    this._globalStorage = globalStorage;
	    /**
	     * The environment of the Answers experience
	     * @type {string}
	     * @private
	     */

	    this._environment = config.environment;
	  }
	  /** @inheritdoc */


	  var _proto = AutoCompleteApi.prototype;

	  _proto.queryFilter = function queryFilter(input, config) {
	    var requestConfig = {
	      endpoint: '/v2/accounts/me/answers/filtersearch',
	      apiKey: this._apiKey,
	      version: this._version,
	      environment: this._environment,
	      params: {
	        'input': input,
	        'experienceKey': this._experienceKey,
	        'version': this._experienceVersion,
	        'verticalKey': config.verticalKey,
	        'locale': this._locale,
	        'search_parameters': stringify$2(config.searchParameters)
	      }
	    };
	    var request = new ApiRequest(requestConfig, this._globalStorage);
	    return request.get().then(function (response) {
	      return response.json();
	    }).then(function (response) {
	      return filter$4(AutoCompleteDataTransformer).call(AutoCompleteDataTransformer, response.response);
	    })["catch"](function (error) {
	      throw new AnswersEndpointError('Filter search request failed', 'AutoComplete', error);
	    });
	  }
	  /** @inheritdoc */
	  ;

	  _proto.queryVertical = function queryVertical(input, verticalKey) {
	    var requestConfig = {
	      endpoint: '/v2/accounts/me/answers/vertical/autocomplete',
	      apiKey: this._apiKey,
	      version: this._version,
	      environment: this._environment,
	      params: {
	        'input': input,
	        'experienceKey': this._experienceKey,
	        'version': this._experienceVersion,
	        'verticalKey': verticalKey,
	        'locale': this._locale
	      }
	    };
	    var request = new ApiRequest(requestConfig, this._globalStorage);
	    return request.get().then(function (response) {
	      return response.json();
	    }).then(function (response) {
	      return AutoCompleteDataTransformer.vertical(response.response);
	    })["catch"](function (error) {
	      throw new AnswersEndpointError('Vertical search request failed', 'AutoComplete', error);
	    });
	  }
	  /** @inheritdoc */
	  ;

	  _proto.queryUniversal = function queryUniversal(queryString) {
	    var requestConfig = {
	      endpoint: '/v2/accounts/me/answers/autocomplete',
	      apiKey: this._apiKey,
	      version: this._version,
	      environment: this._environment,
	      params: {
	        'input': queryString,
	        'experienceKey': this._experienceKey,
	        'version': this._experienceVersion,
	        'locale': this._locale
	      }
	    };
	    var request = new ApiRequest(requestConfig, this._globalStorage);
	    return request.get(queryString).then(function (response) {
	      return response.json();
	    }).then(function (response) {
	      return AutoCompleteDataTransformer.universal(response.response);
	    })["catch"](function (error) {
	      throw new AnswersEndpointError('Universal search request failed', 'AutoComplete', error);
	    });
	  };

	  return AutoCompleteApi;
	}();

	/** @typedef {import('../services/autocompleteservice').default} AutoCompleteService */

	var universalOptions = ['what is yext', 'who is the ceo of yext'];
	var verticalOptions = ['near me', 'in new york', 'available now'];
	/**
	 * MockAutoCompleteService serves autocomplete queries with mock data
	 *
	 * @implements {AutoCompleteService}
	 */

	var MockAutoCompleteService =
	/*#__PURE__*/
	function () {
	  function MockAutoCompleteService() {}

	  var _proto = MockAutoCompleteService.prototype;

	  /** @inheritdoc */
	  _proto.queryFilter = function queryFilter(input, config) {
	    // TODO(amullings): Simulate filter search, with sections
	    return emptyResults();
	  }
	  /** @inheritdoc */
	  ;

	  _proto.queryVertical = function queryVertical(input, verticalKey) {
	    var _context;

	    return filterOptions(input, concat$4(_context = map$2(verticalOptions).call(verticalOptions, function (opt) {
	      return verticalKey + " " + opt;
	    })).call(_context, universalOptions));
	  }
	  /** @inheritdoc */
	  ;

	  _proto.queryUniversal = function queryUniversal(input) {
	    return filterOptions(input, universalOptions);
	  };

	  return MockAutoCompleteService;
	}();

	function filterOptions(input, options) {
	  var _context2;

	  if (input.length === 0) {
	    return emptyResults();
	  }

	  var lowercase = input.toLowerCase();

	  var results = map$2(_context2 = filter$4(options).call(options, function (opt) {
	    return includes$4(opt).call(opt, lowercase);
	  })).call(_context2, function (opt) {
	    return new AutoCompleteResult({
	      value: opt,
	      matchedSubstrings: [{
	        offset: indexOf$6(opt).call(opt, lowercase),
	        length: lowercase.length
	      }]
	    });
	  });

	  return promise$4.resolve(new AutoCompleteData({
	    sections: [{
	      results: results
	    }],
	    queryId: randomString()
	  }));
	}
	/**
	 * @returns {Promise<AutoCompleteData>}
	 */


	function emptyResults() {
	  return promise$4.resolve(new AutoCompleteData({
	    sections: [{}],
	    queryId: randomString()
	  }));
	}
	/**
	 * @returns {string}
	 */


	function randomString() {
	  return Math.random().toString(36).substring(2);
	}

	/** @module QuestionAnswerApi */
	/** @typedef {import('./questionanswerservice').default} QuestionAnswerService */

	/**
	 * QuestionAnswerApi submits questions via the Q&A REST API
	 *
	 * @implements {QuestionAnswerService}
	 */

	var QuestionAnswerApi =
	/*#__PURE__*/
	function () {
	  function QuestionAnswerApi(config, globalStorage) {
	    if (config === void 0) {
	      config = {};
	    }

	    /**
	     * The API Key to use for the request
	     * @type {string}
	     * @private
	     */
	    if (!config.apiKey) {
	      throw new AnswersBasicError('Api Key is required', 'QuestionAnswerApi');
	    }

	    this._apiKey = config.apiKey;
	    /**
	     * The global storage instance of the experience
	     * @type {GlobalStorage}
	     * @private
	     */

	    if (!globalStorage) {
	      throw new AnswersBasicError('Global storage is required', 'QuestionAnswerApi');
	    }

	    this._globalStorage = globalStorage;
	    /**
	     * The environment of the Answers experience
	     * @type {string}
	     * @private
	     */

	    this._environment = config.environment || PRODUCTION;
	  }
	  /** @inheritdoc */


	  var _proto = QuestionAnswerApi.prototype;

	  _proto.submitQuestion = function submitQuestion(question) {
	    var requestConfig = {
	      baseUrl: getKnowledgeApiUrl(this._environment),
	      endpoint: '/v2/accounts/me/questions',
	      apiKey: this._apiKey,
	      params: {
	        'entityId': question.entityId,
	        'site': question.site,
	        'name': question.name,
	        'email': question.email,
	        'questionText': question.questionText,
	        'questionDescription': question.questionDescription,
	        'questionLanguage': question.questionLanguage
	      }
	    };
	    var request = new ApiRequest(requestConfig, this._globalStorage);
	    return request.post({
	      mode: 'cors',
	      headers: {
	        'Content-Type': 'application/json'
	      }
	    }).then(function (response) {
	      return response.json();
	    })["catch"](function (error) {
	      throw new AnswersEndpointError('Question submit failed', 'QuestionAnswerApi', error);
	    });
	  };

	  return QuestionAnswerApi;
	}();

	/** @module MockQuestionAnswerService */

	/** @typedef {import('../services/questionanswerservice').default} QuestionAnswerService */

	/**
	 * @implements {QuestionAnswerService}
	 */
	var MockQuestionAnswerService =
	/*#__PURE__*/
	function () {
	  function MockQuestionAnswerService() {}

	  var _proto = MockQuestionAnswerService.prototype;

	  /** @inheritdoc */
	  _proto.submitQuestion = function submitQuestion(question) {
	    // TODO(amullings): Make actual response object once we're using it for
	    // something
	    return promise$4.resolve({});
	  };

	  return MockQuestionAnswerService;
	}();

	var $find$2 = arrayIteration$1.find;



	var FIND$1 = 'find';
	var SKIPS_HOLES$2 = true;

	var USES_TO_LENGTH$k = arrayMethodUsesToLength(FIND$1);

	// Shouldn't skip holes
	if (FIND$1 in []) Array(1)[FIND$1](function () { SKIPS_HOLES$2 = false; });

	// `Array.prototype.find` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.find
	_export({ target: 'Array', proto: true, forced: SKIPS_HOLES$2 || !USES_TO_LENGTH$k }, {
	  find: function find(callbackfn /* , that = undefined */) {
	    return $find$2(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	var find$3 = entryVirtual('Array').find;

	var ArrayPrototype$d = Array.prototype;

	var find_1 = function (it) {
	  var own = it.find;
	  return it === ArrayPrototype$d || (it instanceof Array && own === ArrayPrototype$d.find) ? find$3 : own;
	};

	var find$4 = find_1;

	var find$5 = find$4;

	/* global fetch */

	/** @typedef {import('../models/section').default} Section */

	/** @typedef {import('../services/searchservice').default} SearchService */

	/**
	 * @typedef {Object} ResultData
	 * @property {Object} data
	 * @property {string } htmlTitle
	 */

	/**
	 * @callback ResultsModifier
	 * @param {ResultData[]} results
	 * @returns {ResultData[]}
	 */

	/**
	 * @callback MockDataConsumer
	 * @param {Section[]} sections
	 * @returns {Promise<Object>}
	 */
	var ARBITRARY_BUSINESS_ID = 919871;
	/**
	 * @implements {SearchService}
	 */

	var MockSearchService =
	/*#__PURE__*/
	function () {
	  function MockSearchService() {
	    /**
	     * @type {Promise<string>}
	     * @private
	     */
	    this._getMockDataJson = fetch('https://assets.sitescdn.net/answers/testdata/search/mockdata_v1.json').then(function (resp) {
	      return resp.text();
	    })["catch"](console.error);
	  }
	  /** @inheritdoc */


	  var _proto = MockSearchService.prototype;

	  _proto.verticalSearch = function verticalSearch(verticalKey, _ref) {
	    var input = _ref.input,
	        filter = filter$4(_ref),
	        facetFilter = _ref.facetFilter,
	        limit = _ref.limit,
	        offset = _ref.offset,
	        id = _ref.id,
	        geolocation = _ref.geolocation,
	        isDynamicFiltersEnabled = _ref.isDynamicFiltersEnabled,
	        skipSpellCheck = _ref.skipSpellCheck,
	        queryTrigger = _ref.queryTrigger;

	    return this.useMockData(function (sections) {
	      if (input === '') {
	        return delayedResponse(constructVerticalResponse({
	          results: [],
	          appliedQueryFilters: []
	        }));
	      } // Either find a section with matching ID, or pick one at random


	      var section = find$5(sections).call(sections, function (verticalModule) {
	        return verticalKey === verticalModule['verticalConfigId'];
	      });

	      if (section == null) {
	        section = sections[Math.floor(Math.random() * sections.length)];
	      }

	      modifyResults(section, getResultsFilterer(input));

	      if (offset != null && limit != null) {
	        modifyResults(section, function limit(results) {
	          return slice$5(results).call(results, offset, offset + limit);
	        });
	      }

	      var resp = constructVerticalResponse(section);
	      return delayedResponse(resp);
	    });
	  }
	  /** @inheritdoc */
	  ;

	  _proto.universalSearch = function universalSearch(queryString, params) {
	    return this.useMockData(function (sections) {
	      if (queryString === '') {
	        return delayedResponse(constructUniversalResponse([]));
	      }

	      forEach$4(sections).call(sections, function (section) {
	        modifyResults(section, getResultsFilterer(queryString));
	      });

	      sections = filter$4(sections).call(sections, function (section) {
	        return section.results.length > 0;
	      });
	      var resp = constructUniversalResponse(sections);
	      return delayedResponse(resp);
	    });
	  }
	  /**
	   * @param {MockDataConsumer} consumer
	   * @returns {Promise<Object>}
	   * @private
	   */
	  ;

	  _proto.useMockData = function useMockData(consumer) {
	    return this._getMockDataJson.then(JSON.parse).then(consumer);
	  };

	  return MockSearchService;
	}();

	function getResultsFilterer(queryString) {
	  return function (results) {
	    return filter$4(results).call(results, function (result) {
	      var _context;

	      if (result.htmlTitle && includes$4(_context = result.htmlTitle.toLowerCase()).call(_context, queryString)) {
	        return true;
	      }

	      for (var prop in result.data) {
	        var _context2;

	        var val = result.data[prop];

	        if (typeof val === 'string' && includes$4(_context2 = val.toLowerCase()).call(_context2, queryString)) {
	          return true;
	        }
	      }

	      return false;
	    });
	  };
	}
	/**
	 * @param {Section} section
	 * @param {ResultsModifier} modifyFn
	 */


	function modifyResults(section, modifyFn) {
	  section.results = modifyFn(section.results);
	}
	/**
	 * @param {Section[]} sections A list of mock section data
	 * @returns {Object} A mock AnswersApi response
	 */


	function constructUniversalResponse(sections) {
	  // TODO(amullings): spellcheck, geo, filters
	  // TODO(amullings): Fake encodedState once the SDK uses it
	  sections = map$2(sections).call(sections, fillSectionFields);
	  return {
	    meta: {
	      uuid: uuidV4(),
	      errors: []
	    },
	    response: {
	      businessId: ARBITRARY_BUSINESS_ID,
	      modules: sections,
	      failedVerticals: [],
	      queryId: uuidV4(),
	      searchIntents: []
	    }
	  };
	}
	/**
	 * @param {Section} section A mock section data
	 * @returns {Object} A mock AnswersApi response
	 */


	function constructVerticalResponse(section) {
	  // TODO(amullings): spellcheck, geo, filters
	  // TODO(amullings): Fake encodedState once the SDK uses it
	  section = fillSectionFields(section);
	  return {
	    meta: {
	      uuid: uuidV4(),
	      errors: []
	    },
	    response: assign$2(section, {
	      businessId: ARBITRARY_BUSINESS_ID,
	      queryId: uuidV4(),
	      searchIntents: []
	    })
	  };
	}
	/**
	 * @param {Section}
	 * @returns {Section}
	 */


	function fillSectionFields(section) {
	  return {
	    verticalConfigId: section.verticalConfigId,
	    resultsCount: section.results.length,
	    encodedState: '',
	    results: section.results,
	    appliedQueryFilters: section.appliedQueryFilters,
	    queryDurationMillis: randomInt(50, 1000),
	    facets: section.facets,
	    source: section.source
	  };
	}
	/**
	 * @param {Object} resp
	 * @returns {Promise<Object>}
	 */


	function delayedResponse(resp) {
	  return new promise$4(function (resolve) {
	    setTimeout$2(function () {
	      resolve(resp);
	    }, randomInt(250, 1000));
	  });
	}
	/**
	 * Code-golf-y but legit basic UUID v4 implementation. Not cryptographically secure.
	 * From https://gist.github.com/jed/982883
	 * @returns {string} A v4-compliant UUID
	 */


	function uuidV4() {
	  return function b(a) {
	    return a ? (a ^ Math.random() * 16 >> a / 4).toString(16) : ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, b);
	  }();
	}
	/**
	 * @param {number} min inclusive
	 * @param {number} max exclusive
	 * @returns {number} A random integer in the specified range
	 */


	function randomInt(min, max) {
	  return Math.floor(Math.random() * (max - min) + min);
	}

	var HAS_SPECIES_SUPPORT$7 = arrayMethodHasSpeciesSupport$1('splice');
	var USES_TO_LENGTH$l = arrayMethodUsesToLength('splice', { ACCESSORS: true, 0: 0, 1: 2 });

	var max$6 = Math.max;
	var min$c = Math.min;
	var MAX_SAFE_INTEGER$3 = 0x1FFFFFFFFFFFFF;
	var MAXIMUM_ALLOWED_LENGTH_EXCEEDED$1 = 'Maximum allowed length exceeded';

	// `Array.prototype.splice` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.splice
	// with adding support of @@species
	_export({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT$7 || !USES_TO_LENGTH$l }, {
	  splice: function splice(start, deleteCount /* , ...items */) {
	    var O = toObject(this);
	    var len = toLength(O.length);
	    var actualStart = toAbsoluteIndex(start, len);
	    var argumentsLength = arguments.length;
	    var insertCount, actualDeleteCount, A, k, from, to;
	    if (argumentsLength === 0) {
	      insertCount = actualDeleteCount = 0;
	    } else if (argumentsLength === 1) {
	      insertCount = 0;
	      actualDeleteCount = len - actualStart;
	    } else {
	      insertCount = argumentsLength - 2;
	      actualDeleteCount = min$c(max$6(toInteger(deleteCount), 0), len - actualStart);
	    }
	    if (len + insertCount - actualDeleteCount > MAX_SAFE_INTEGER$3) {
	      throw TypeError(MAXIMUM_ALLOWED_LENGTH_EXCEEDED$1);
	    }
	    A = arraySpeciesCreate$1(O, actualDeleteCount);
	    for (k = 0; k < actualDeleteCount; k++) {
	      from = actualStart + k;
	      if (from in O) createProperty$1(A, k, O[from]);
	    }
	    A.length = actualDeleteCount;
	    if (insertCount < actualDeleteCount) {
	      for (k = actualStart; k < len - actualDeleteCount; k++) {
	        from = k + actualDeleteCount;
	        to = k + insertCount;
	        if (from in O) O[to] = O[from];
	        else delete O[to];
	      }
	      for (k = len; k > len - actualDeleteCount + insertCount; k--) delete O[k - 1];
	    } else if (insertCount > actualDeleteCount) {
	      for (k = len - actualDeleteCount; k > actualStart; k--) {
	        from = k + actualDeleteCount - 1;
	        to = k + insertCount - 1;
	        if (from in O) O[to] = O[from];
	        else delete O[to];
	      }
	    }
	    for (k = 0; k < insertCount; k++) {
	      O[k + actualStart] = arguments[k + 2];
	    }
	    O.length = len - actualDeleteCount + insertCount;
	    return A;
	  }
	});

	var splice = entryVirtual('Array').splice;

	var ArrayPrototype$e = Array.prototype;

	var splice_1 = function (it) {
	  var own = it.splice;
	  return it === ArrayPrototype$e || (it instanceof Array && own === ArrayPrototype$e.splice) ? splice : own;
	};

	var splice$1 = splice_1;

	var splice$2 = splice$1;

	var $findIndex$2 = arrayIteration$1.findIndex;



	var FIND_INDEX$1 = 'findIndex';
	var SKIPS_HOLES$3 = true;

	var USES_TO_LENGTH$m = arrayMethodUsesToLength(FIND_INDEX$1);

	// Shouldn't skip holes
	if (FIND_INDEX$1 in []) Array(1)[FIND_INDEX$1](function () { SKIPS_HOLES$3 = false; });

	// `Array.prototype.findIndex` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.findindex
	_export({ target: 'Array', proto: true, forced: SKIPS_HOLES$3 || !USES_TO_LENGTH$m }, {
	  findIndex: function findIndex(callbackfn /* , that = undefined */) {
	    return $findIndex$2(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	var findIndex$1 = entryVirtual('Array').findIndex;

	var ArrayPrototype$f = Array.prototype;

	var findIndex_1 = function (it) {
	  var own = it.findIndex;
	  return it === ArrayPrototype$f || (it instanceof Array && own === ArrayPrototype$f.findIndex) ? findIndex$1 : own;
	};

	var findIndex$2 = findIndex_1;

	var findIndex$3 = findIndex$2;

	var $some$2 = arrayIteration$1.some;



	var STRICT_METHOD$c = arrayMethodIsStrict$1('some');
	var USES_TO_LENGTH$n = arrayMethodUsesToLength('some');

	// `Array.prototype.some` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.some
	_export({ target: 'Array', proto: true, forced: !STRICT_METHOD$c || !USES_TO_LENGTH$n }, {
	  some: function some(callbackfn /* , thisArg */) {
	    return $some$2(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	var some = entryVirtual('Array').some;

	var ArrayPrototype$g = Array.prototype;

	var some_1 = function (it) {
	  var own = it.some;
	  return it === ArrayPrototype$g || (it instanceof Array && own === ArrayPrototype$g.some) ? some : own;
	};

	var some$1 = some_1;

	var some$2 = some$1;

	// `Array.prototype.{ reduce, reduceRight }` methods implementation
	var createMethod$b = function (IS_RIGHT) {
	  return function (that, callbackfn, argumentsLength, memo) {
	    aFunction(callbackfn);
	    var O = toObject(that);
	    var self = indexedObject(O);
	    var length = toLength(O.length);
	    var index = IS_RIGHT ? length - 1 : 0;
	    var i = IS_RIGHT ? -1 : 1;
	    if (argumentsLength < 2) while (true) {
	      if (index in self) {
	        memo = self[index];
	        index += i;
	        break;
	      }
	      index += i;
	      if (IS_RIGHT ? index < 0 : length <= index) {
	        throw TypeError('Reduce of empty array with no initial value');
	      }
	    }
	    for (;IS_RIGHT ? index >= 0 : length > index; index += i) if (index in self) {
	      memo = callbackfn(memo, self[index], index, O);
	    }
	    return memo;
	  };
	};

	var arrayReduce$1 = {
	  // `Array.prototype.reduce` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.reduce
	  left: createMethod$b(false),
	  // `Array.prototype.reduceRight` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.reduceright
	  right: createMethod$b(true)
	};

	var $reduce$2 = arrayReduce$1.left;



	var STRICT_METHOD$d = arrayMethodIsStrict$1('reduce');
	var USES_TO_LENGTH$o = arrayMethodUsesToLength('reduce', { 1: 0 });

	// `Array.prototype.reduce` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.reduce
	_export({ target: 'Array', proto: true, forced: !STRICT_METHOD$d || !USES_TO_LENGTH$o }, {
	  reduce: function reduce(callbackfn /* , initialValue */) {
	    return $reduce$2(this, callbackfn, arguments.length, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	var reduce = entryVirtual('Array').reduce;

	var ArrayPrototype$h = Array.prototype;

	var reduce_1 = function (it) {
	  var own = it.reduce;
	  return it === ArrayPrototype$h || (it instanceof Array && own === ArrayPrototype$h.reduce) ? reduce : own;
	};

	var reduce$1 = reduce_1;

	var reduce$2 = reduce$1;

	function _assertThisInitialized(self) {
	  if (self === void 0) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }

	  return self;
	}

	var assertThisInitialized = _assertThisInitialized;

	/**
	 * The debounce duration for resize events
	 * @type {number}
	 */

	var RESIZE_DEBOUNCE = 100;
	/**
	 * The breakpoint for mobile
	 * @type {number}
	 */

	var MOBILE_BREAKPOINT = 767;
	/**
	 * Enum options for mobile overflow beahvior
	 * @type {Object.<string, string>}
	 */

	var MOBILE_OVERFLOW_BEHAVIOR_OPTION = {
	  COLLAPSE: 'COLLAPSE',
	  INNERSCROLL: 'INNERSCROLL'
	};
	/**
	 * The Tab is a model that is used to power the Navigation tabs in the view.
	 * It's initialized through the configuration provided to the component.
	 */

	var Tab =
	/*#__PURE__*/
	function () {
	  function Tab(config) {
	    /**
	     * The name of the tab that is exposed for the link
	     * @type {string}
	     */
	    this.label = config.label;

	    if (typeof this.label !== 'string') {
	      throw new AnswersComponentError('label is a required configuration option for tab.', 'NavigationComponent');
	    }
	    /**
	     * The complete URL, including the params
	     * @type {string}
	     */


	    this.url = config.url;

	    if (typeof this.url !== 'string') {
	      throw new AnswersComponentError('url is a required configuration option for tab.', 'NavigationComponent');
	    }
	    /**
	     * The serverside vertical config id that this is referenced to.
	     * By providing this, enables dynamic sorting based on results.
	     * @type {string}
	     */


	    this.configId = config.configId || null;
	    /**
	     * The base URL used for constructing the URL with params
	     * @type {string}
	     */

	    this.baseUrl = config.url;
	    /**
	     * Determines whether to show this tab first in the order
	     * @type {boolean}
	     */

	    this.isFirst = config.isFirst || false;
	    /**
	     * Determines whether or not to apply a special class to the
	     * markup to determine if it's an active tab
	     * @type {boolean}
	     */

	    this.isActive = config.isActive || false;
	  }
	  /**
	   * from will construct a map of configId to {Tab} from
	   * a configuration file
	   * @param {object} tabsConfig the configuration to use
	   */


	  Tab.from = function from(tabsConfig) {
	    var tabs = {}; // Parse the options and build out our tabs and

	    for (var i = 0; i < tabsConfig.length; i++) {
	      var tab = tabsConfig[i]; // For tabs without config ids, map their URL to the configID
	      // to avoid duplication of renders

	      if (tab.configId === null && tabs[tab.configId] === undefined) {
	        tab.configId = tab.url;
	      }

	      tabs[tab.configId] = new Tab(tab);
	    }

	    return tabs;
	  };

	  return Tab;
	}();
	/**
	 * NavigationComponent exposes an interface for building a dynamic
	 * navigation that is powered by universal search updates.
	 * @extends Component
	 */

	var NavigationComponent =
	/*#__PURE__*/
	function (_Component) {
	  inheritsLoose(NavigationComponent, _Component);

	  function NavigationComponent(config, systemConfig) {
	    var _context, _context2;

	    var _this;

	    if (config === void 0) {
	      config = {};
	    }

	    if (systemConfig === void 0) {
	      systemConfig = {};
	    }

	    _this = _Component.call(this, config, systemConfig) || this;
	    /**
	     * The label to show on the dropdown menu button when overflow
	     * @type {string}
	     */

	    _this.overflowLabel = config.overflowLabel || 'More';
	    /**
	     * The optional icon to show on the dropdown menu button when overflow
	     * @type {string}
	     */

	    _this.overflowIcon = config.overflowIcon || 'kabob';
	    /**
	     * The data storage key
	     * @type {string}
	     */

	    _this.moduleId = StorageKeys.NAVIGATION;
	    /**
	     * Tabs config from global navigation config
	     * @type {Array.<object>}
	     * @private
	     */

	    _this._tabsConfig = _this.core.globalStorage.getState(StorageKeys.NAVIGATION_CONFIG).tabsConfig;
	    /**
	     * Unordered map of each tab, keyed by VS configId
	     * @type {Object.<String, Object>}
	     * @private
	     */

	    _this._tabs = Tab.from(_this._tabsConfig);
	    /**
	     * The order of the tabs, parsed from configuration or URL.
	     * This gets updated based on the server results
	     * @type {Array.<String>} The list of VS configIds
	     * @private
	     */

	    _this._tabOrder = _this.getDefaultTabOrder(_this._tabsConfig, _this.getUrlParams());
	    /**
	     * Breakpoints at which navigation items move to the "more" dropdown
	     * @type {number[]}
	     * @private
	     */

	    _this._navBreakpoints = [];
	    /**
	     *  The mobile overflow behavior config
	     *  @type {string}
	     */

	    _this._mobileOverflowBehavior = config.mobileOverflowBehavior || MOBILE_OVERFLOW_BEHAVIOR_OPTION.COLLAPSE;
	    /**
	     *  The ARIA label
	     *  @type {string}
	     */

	    _this._ariaLabel = config.ariaLabel || 'Search Page Navigation';
	    _this.checkOutsideClick = bind$6(_context = _this.checkOutsideClick).call(_context, assertThisInitialized(_this));
	    _this.checkMobileOverflowBehavior = bind$6(_context2 = _this.checkMobileOverflowBehavior).call(_context2, assertThisInitialized(_this));
	    return _this;
	  }

	  /**
	   * The template to render
	   * @returns {string}
	   * @override
	   */
	  NavigationComponent.defaultTemplateName = function defaultTemplateName(config) {
	    return 'navigation/navigation';
	  };

	  var _proto = NavigationComponent.prototype;

	  _proto.onCreate = function onCreate() {
	    // TODO: Re-rendering and re-mounting the component every tim e the window changes size
	    // is not great.
	    DOM.on(window, 'resize', this.checkMobileOverflowBehavior);
	  };

	  _proto.onDestroy = function onDestroy() {
	    DOM.off(window, 'resize', this.checkMobileOverflowBehavior);
	  };

	  _proto.onMount = function onMount() {
	    if (this.shouldCollapse()) {
	      var _context3;

	      this._navBreakpoints = [];
	      this.bindOverflowHandlers();
	      this.refitNav();
	      DOM.on(DOM.query(this._container, '.yxt-Nav-more'), 'click', bind$6(_context3 = this.toggleMoreDropdown).call(_context3, this));
	    }
	  };

	  _proto.onUnMount = function onUnMount() {
	    this.unbindOverflowHandlers();
	  };

	  _proto.bindOverflowHandlers = function bindOverflowHandlers() {
	    DOM.on(window, 'click', this.checkOutsideClick);
	  };

	  _proto.unbindOverflowHandlers = function unbindOverflowHandlers() {
	    DOM.off(window, 'click', this.checkOutsideClick);
	  };

	  _proto.refitNav = function refitNav() {
	    var container = DOM.query(this._container, '.yxt-Nav-container');
	    var moreButton = DOM.query(this._container, '.yxt-Nav-more');
	    var mainLinks = DOM.query(this._container, '.yxt-Nav-expanded');
	    var collapsedLinks = DOM.query(this._container, '.yxt-Nav-modal');
	    var navWidth = moreButton.classList.contains('yxt-Nav-item--more') ? container.offsetWidth : container.offsetWidth - moreButton.offsetWidth;
	    var numBreakpoints = this._navBreakpoints.length; // sum child widths instead of using parent's width to avoid
	    // browser inconsistencies

	    var mainLinksWidth = 0;

	    for (var _iterator = mainLinks.children, _isArray = isArray$4(_iterator), _i = 0, _iterator = _isArray ? _iterator : getIterator$2(_iterator);;) {
	      var _ref;

	      if (_isArray) {
	        if (_i >= _iterator.length) break;
	        _ref = _iterator[_i++];
	      } else {
	        _i = _iterator.next();
	        if (_i.done) break;
	        _ref = _i.value;
	      }

	      var el = _ref;
	      mainLinksWidth += el.offsetWidth;
	    }

	    if (mainLinksWidth > navWidth) {
	      this._navBreakpoints.push(mainLinksWidth);

	      var lastLink = mainLinks.children.item(mainLinks.children.length - 1);

	      if (lastLink === null) {
	        return;
	      }

	      this._prepend(collapsedLinks, lastLink);

	      if (moreButton.classList.contains('yxt-Nav-item--more')) {
	        moreButton.classList.remove('yxt-Nav-item--more');
	      }
	    } else {
	      if (numBreakpoints && navWidth > this._navBreakpoints[numBreakpoints - 1]) {
	        var firstLink = collapsedLinks.children.item(0);

	        if (firstLink === null) {
	          return;
	        }

	        mainLinks.append(firstLink);

	        this._navBreakpoints.pop();

	        numBreakpoints--;
	      }

	      if (collapsedLinks.children.length === 0) {
	        moreButton.classList.add('yxt-Nav-item--more');
	      }
	    }

	    this.closeMoreDropdown();

	    if (mainLinksWidth > navWidth || numBreakpoints > 0 && navWidth > this._navBreakpoints[numBreakpoints - 1]) {
	      this.refitNav();
	    }
	  };

	  _proto.closeMoreDropdown = function closeMoreDropdown() {
	    var collapsed = DOM.query(this._container, '.yxt-Nav-modal');
	    collapsed.classList.remove('is-active');
	    var moreButton = DOM.query(this._container, '.yxt-Nav-more');
	    moreButton.setAttribute('aria-expanded', false);
	  };

	  _proto.openMoreDropdown = function openMoreDropdown() {
	    var collapsed = DOM.query(this._container, '.yxt-Nav-modal');
	    collapsed.classList.add('is-active');
	    var moreButton = DOM.query(this._container, '.yxt-Nav-more');
	    moreButton.setAttribute('aria-expanded', true);
	  };

	  _proto.toggleMoreDropdown = function toggleMoreDropdown() {
	    var collapsed = DOM.query(this._container, '.yxt-Nav-modal');
	    collapsed.classList.toggle('is-active');
	    var moreButton = DOM.query(this._container, '.yxt-Nav-more');
	    moreButton.setAttribute('aria-expanded', collapsed.classList.contains('is-active'));
	  };

	  _proto.checkOutsideClick = function checkOutsideClick(e) {
	    if (this._closest(e.target, '.yxt-Nav-container')) {
	      return;
	    }

	    this.closeMoreDropdown();
	  };

	  _proto.checkMobileOverflowBehavior = function checkMobileOverflowBehavior() {
	    var _context4;

	    if (this._checkMobileOverflowBehaviorTimer) {
	      clearTimeout(this._checkMobileOverflowBehaviorTimer);
	    }

	    this._checkMobileOverflowBehaviorTimer = setTimeout$2(bind$6(_context4 = this.setState).call(_context4, this), RESIZE_DEBOUNCE);
	  }
	  /**
	   * Since the server data only provides a list of
	   * VS configIds, we need to compute and transform
	   * the data into the proper format for rendering.
	   *
	   * @override
	   */
	  ;

	  _proto.setState = function setState(data) {
	    if (data === void 0) {
	      data = {};
	    }

	    if (data.tabOrder !== undefined) {
	      this._tabOrder = this.mergeTabOrder(data.tabOrder, this._tabOrder);
	    } // Since the tab ordering can change based on the server data
	    // we need to update each tabs URL to include the order as part of their params.
	    // This helps with persisting state across verticals.


	    var tabs = [];

	    for (var i = 0; i < this._tabOrder.length; i++) {
	      var tab = this._tabs[this._tabOrder[i]];

	      if (tab !== undefined) {
	        tab.url = this.generateTabUrl(tab.baseUrl, this.getUrlParams());
	        tabs.push(tab);
	      }
	    }

	    return _Component.prototype.setState.call(this, {
	      tabs: tabs,
	      overflowLabel: this.overflowLabel,
	      overflowIcon: this.overflowIcon,
	      showCollapse: this.shouldCollapse(),
	      ariaLabel: this._ariaLabel
	    });
	  } // TODO (agrow) investigate removing this
	  // ParentNode.prepend polyfill
	  // https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/prepend#Polyfill
	  ;

	  _proto._prepend = function _prepend(collapsedLinks, lastLink) {
	    if (!collapsedLinks.hasOwnProperty('prepend')) {
	      var docFrag = document.createDocumentFragment();
	      var isNode = lastLink instanceof Node;
	      docFrag.appendChild(isNode ? lastLink : document.createTextNode(String(lastLink)));
	      collapsedLinks.insertBefore(docFrag, collapsedLinks.firstChild);
	      return;
	    }

	    collapsedLinks.prepend(lastLink);
	  } // TODO (agrow) investigate removing this
	  // Adapted from Element.closest polyfill
	  // https://developer.mozilla.org/en-US/docs/Web/API/Element/closest#Polyfill
	  ;

	  _proto._closest = function _closest(el, closestElSelector) {
	    if (!el.hasOwnProperty('closest')) {
	      do {
	        if (DOM.matches(el, closestElSelector)) return el;
	        el = el.parentElement || el.parentNode;
	      } while (el !== null && el.nodeType === 1);

	      return null;
	    }

	    return el.closest(closestElSelector);
	  };

	  _proto.getUrlParams = function getUrlParams() {
	    return new SearchParams(window.location.search.substring(1));
	  };

	  _proto.shouldCollapse = function shouldCollapse() {
	    switch (this._mobileOverflowBehavior) {
	      case MOBILE_OVERFLOW_BEHAVIOR_OPTION.COLLAPSE:
	        return true;

	      case MOBILE_OVERFLOW_BEHAVIOR_OPTION.INNERSCROLL:
	        var container = DOM.query(this._container, '.yxt-Nav-container') || this._container;

	        var navWidth = container.offsetWidth;
	        return navWidth > MOBILE_BREAKPOINT;
	    }
	  }
	  /**
	   * getDefaultTabOrder will compute the initial tab ordering based
	   * on a combination of the configuration provided directly to the component
	   * and the url params.
	   * @param {Object[]} tabsConfig
	   * @param {SearchParams}
	   */
	  ;

	  _proto.getDefaultTabOrder = function getDefaultTabOrder(tabsConfig, urlParams) {
	    var tabOrder = []; // Use the ordering from the URL as the primary configuration
	    // And then merge it with the local configuration, if provided.

	    if (urlParams && urlParams.has('tabOrder')) {
	      tabOrder = urlParams.get('tabOrder').split(',');
	    }

	    for (var i = 0; i < tabsConfig.length; i++) {
	      var tab = tabsConfig[i]; // Some tabs don't have configId, so we map it from URL

	      if (tab.configId === undefined) {
	        tab.configId = tab.url;
	      } // Avoid duplicates if config was provided from URL


	      if (includes$4(tabOrder).call(tabOrder, tab.configId)) {
	        continue;
	      } // isFirst should always be the first element in the list


	      if (tab.isFirst) {
	        tabOrder.unshift(tab.configId);
	      } else {
	        tabOrder.push(tab.configId);
	      }
	    }

	    return tabOrder;
	  }
	  /**
	   * mergeTabOrder merges two arrays into one
	   * by appending additional tabs to the end of the original array
	   * @param {string[]} tabOrder Tab order provided by the server
	   * @param {string[]} otherTabOrder Tab order provided by configuration
	   * @return {string[]}
	   */
	  ;

	  _proto.mergeTabOrder = function mergeTabOrder(tabOrder, otherTabOrder) {
	    for (var i = 0; i < otherTabOrder.length; i++) {
	      var tabConfig = otherTabOrder[i];

	      if (includes$4(tabOrder).call(tabOrder, tabConfig)) {
	        continue;
	      } // isFirst should be an override to dynamic tab ordering.


	      if (this._tabs[tabConfig] && this._tabs[tabConfig].isFirst) {
	        tabOrder.unshift(tabConfig);
	      } else {
	        tabOrder.push(tabConfig);
	      }
	    }

	    return tabOrder;
	  };

	  _proto.generateTabUrl = function generateTabUrl(baseUrl, params) {
	    if (params === void 0) {
	      params = new urlSearchParams$2();
	    }

	    // We want to persist the params from the existing URL to the new
	    // URLS we create.
	    params.set('tabOrder', this._tabOrder);
	    return baseUrl + '?' + params.toString();
	  };

	  createClass(NavigationComponent, null, [{
	    key: "type",
	    get: function get() {
	      return 'Navigation';
	    }
	  }]);

	  return NavigationComponent;
	}(Component);

	// `FlattenIntoArray` abstract operation
	// https://tc39.github.io/proposal-flatMap/#sec-FlattenIntoArray
	var flattenIntoArray$1 = function (target, original, source, sourceLen, start, depth, mapper, thisArg) {
	  var targetIndex = start;
	  var sourceIndex = 0;
	  var mapFn = mapper ? functionBindContext(mapper, thisArg, 3) : false;
	  var element;

	  while (sourceIndex < sourceLen) {
	    if (sourceIndex in source) {
	      element = mapFn ? mapFn(source[sourceIndex], sourceIndex, original) : source[sourceIndex];

	      if (depth > 0 && isArray$1(element)) {
	        targetIndex = flattenIntoArray$1(target, original, element, toLength(element.length), targetIndex, depth - 1) - 1;
	      } else {
	        if (targetIndex >= 0x1FFFFFFFFFFFFF) throw TypeError('Exceed the acceptable array length');
	        target[targetIndex] = element;
	      }

	      targetIndex++;
	    }
	    sourceIndex++;
	  }
	  return targetIndex;
	};

	var flattenIntoArray_1$1 = flattenIntoArray$1;

	// `Array.prototype.flatMap` method
	// https://github.com/tc39/proposal-flatMap
	_export({ target: 'Array', proto: true }, {
	  flatMap: function flatMap(callbackfn /* , thisArg */) {
	    var O = toObject(this);
	    var sourceLen = toLength(O.length);
	    var A;
	    aFunction(callbackfn);
	    A = arraySpeciesCreate$1(O, 0);
	    A.length = flattenIntoArray_1$1(A, O, O, sourceLen, 0, 1, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	    return A;
	  }
	});

	var flatMap = entryVirtual('Array').flatMap;

	var ArrayPrototype$i = Array.prototype;

	var flatMap_1 = function (it) {
	  var own = it.flatMap;
	  return it === ArrayPrototype$i || (it instanceof Array && own === ArrayPrototype$i.flatMap) ? flatMap : own;
	};

	var flatMap$1 = flatMap_1;

	var flatMap$2 = flatMap$1;

	/**
	 * SearchComponent exposes an interface in order to create
	 * a UI Search experience for vertical and universal search.
	 *
	 * @extends Component
	 */

	var SearchComponent =
	/*#__PURE__*/
	function (_Component) {
	  inheritsLoose(SearchComponent, _Component);

	  function SearchComponent(config, systemConfig) {
	    var _this;

	    if (config === void 0) {
	      config = {};
	    }

	    if (systemConfig === void 0) {
	      systemConfig = {};
	    }

	    _this = _Component.call(this, config, systemConfig) || this;
	    /**
	     * The optional vertical key for vertical search configuration
	     * If not provided, auto-complete and search will be based on universal
	     * @type {string}
	     */

	    _this._verticalKey = config.verticalKey || null;
	    /**
	     * Query submission is based on a form as context.
	     * Optionally provided, otherwise defaults to native form node within container
	     * @type {string} CSS selector
	     */

	    _this._formEl = config.formSelector || 'form';
	    /**
	     * The input element used for searching and wires up the keyboard interaction
	     * Optionally provided.
	     * @type {string} CSS selector
	     */

	    _this._inputEl = config.inputEl || '.js-yext-query';
	    /**
	     * The title used, provided to the template as a data point
	     * Optionally provided. If not provided, no title will be included.
	     * @type {string}
	     */

	    _this.title = config.title;
	    /**
	     * The label text is used for labeling the input box, also provided to template.
	     * Optionally provided
	     * @type {string}
	     */

	    _this.labelText = config.labelText || 'Conduct a search';
	    /**
	     * The submit text is used for labeling the submit button, also provided to the template.
	     * @type {string}
	     */

	    _this.submitText = config.submitText || 'Submit';
	    /**
	     * The clear text is used for labeling the clear button, also provided to the template.
	     * @type {string}
	     */

	    _this.clearText = config.clearText || 'Clear';
	    /**
	     * The submit icon is an icon for the submit button, if provided it will be displayed and the
	     * submit text will be used for screen readers.
	     * @type {string|null}
	     */

	    _this.submitIcon = config.submitIcon || null;
	    /**
	     * The query text to show as the first item for auto complete.
	     * Optionally provided
	     * @type {string}
	     */

	    _this.promptHeader = config.promptHeader || null;
	    /**
	     * Auto focuses the input box if set to true.
	     * Optionally provided, defaults to false.
	     * @type {boolean}
	     */

	    _this.autoFocus = config.autoFocus === true;
	    /**
	     * If true, show an "x" that allows the user to clear the current
	     * query
	     * @type {boolean}
	     */

	    _this.clearButton = config.clearButton === undefined ? true : config.clearButton;
	    /**
	     * When autofocusing on load, optionally open the autocomplete
	     * (preset prompts)
	     * @type {boolean}
	     */

	    _this.autocompleteOnLoad = config.autocompleteOnLoad || false;
	    /**
	     * submitURL will force the search query submission to get
	     * redirected to the URL provided.
	     * Optional, defaults to null.
	     *
	     * If no redirectUrl provided, we keep the page as a single page app.
	     *
	     * @type {boolean}
	     */

	    _this.redirectUrl = config.redirectUrl || null;
	    /**
	     * true if there is another search bar present on the page.
	     * Twins only update the query, and do not search
	     */

	    _this._isTwin = config.isTwin;
	    /**
	     * The query string to use for the input box, provided to template for rendering.
	     * Optionally provided
	     * @type {string|null}
	     */

	    _this.query = config.query || _this.core.globalStorage.getState(StorageKeys.QUERY);

	    _this.core.globalStorage.on('update', StorageKeys.QUERY, function (q) {
	      _this.query = q;

	      _this.setState();

	      _this.debouncedSearch(q);
	    });
	    /**
	     * The minimum time allowed in milliseconds between searches to prevent
	     * many duplicate searches back-to-back
	     * @type {number}
	     * @private
	     */


	    _this._searchCooldown = config.searchCooldown || 300;
	    /**
	     * When true and "near me" intent is expressed, prompt the user for their geolocation
	     * @type {boolean}
	     * @private
	     */

	    _this._promptForLocation = config.promptForLocation === undefined ? true : Boolean(config.promptForLocation);
	    /**
	     * Controls showing and hiding the search clear button
	     */

	    _this._showClearButton = _this.clearButton && _this.query;
	    /**
	     * For vertical search bars, whether or not to allow empty searches.
	     * @type {boolean}
	     * @private
	     */

	    _this._allowEmptySearch = !!config.allowEmptySearch;
	    /**
	     * The name of the child AutoComplete component.
	     * @type {string}
	     * @private
	     */

	    _this._autoCompleteName = _this.name + ".autocomplete";
	    return _this;
	  }

	  /**
	   * The template to render
	   * @returns {string}
	   * @override
	   */
	  SearchComponent.defaultTemplateName = function defaultTemplateName() {
	    return 'search/search';
	  };

	  var _proto = SearchComponent.prototype;

	  _proto.onCreate = function onCreate() {
	    if (this.query != null && !this.redirectUrl) {
	      this.core.setQuery(this.query);
	    }
	  };

	  _proto.onMount = function onMount() {
	    // NOTE(amullings): If autocompleteOnLoad is false, we focus the input
	    // element before loading the autocomplete component so that its focus
	    // handler won't be triggered
	    if (this.autoFocus === true && !this.query && !this.autocompleteOnLoad) {
	      this.focusInputElement();
	    } // Wire up our search handling and auto complete


	    this.initSearch(this._formEl);
	    this.initAutoComplete(this._inputEl);

	    if (this.clearButton) {
	      this.initClearButton();
	    }

	    if (this.autoFocus === true && !this.query && this.autocompleteOnLoad) {
	      this.focusInputElement();
	    }
	  };

	  _proto.remove = function remove() {
	    this._autocomplete.remove();

	    _Component.prototype.remove.call(this);
	  };

	  _proto.initClearButton = function initClearButton() {
	    var _this2 = this;

	    var button = DOM.query(this._container, '.js-yxt-SearchBar-clear');
	    this._showClearButton = this._showClearButton || this.query;
	    button.classList.toggle('yxt-SearchBar--hidden', !this._showClearButton);
	    DOM.on(button, 'click', function () {
	      _this2.query = '';
	      _this2._showClearButton = false;
	      button.classList.add('yxt-SearchBar--hidden');

	      _this2.setState({});

	      _this2.core.persistentStorage.set(StorageKeys.QUERY, _this2.query);

	      _this2.core.persistentStorage["delete"](StorageKeys.SEARCH_OFFSET);

	      _this2.core.globalStorage["delete"](StorageKeys.SEARCH_OFFSET);

	      _this2.core.setQuery(_this2.query); // Focus the input element after clearing the query, regardless of whether
	      // or not the autoFocus option is enabled.
	      // NOTE(amullings): This depends heavily on the fact that the re-renders
	      // triggered by setState and core.setQuery happen synchronously; if this
	      // stops being the case at some point, we'll need an alternative solution


	      _this2.focusInputElement();
	    });
	    var input = DOM.query(this._container, this._inputEl);
	    DOM.on(input, 'input', function (e) {
	      var input = e.target.value;

	      if (!_this2._showClearButton && input.length > 0) {
	        _this2._showClearButton = true;
	        button.classList.remove('yxt-SearchBar--hidden');
	      } else if (_this2._showClearButton && input.length === 0) {
	        _this2._showClearButton = false;
	        button.classList.add('yxt-SearchBar--hidden');
	      }
	    });
	  }
	  /**
	   * A helper method to use for wiring up searching on form submission
	   * @param {string} formSelector CSS selector to bind our submit handling to
	   */
	  ;

	  _proto.initSearch = function initSearch(formSelector) {
	    var _this3 = this;

	    this._formEl = formSelector;

	    this._container.classList.add('yxt-SearchBar-wrapper');

	    var form = DOM.query(this._container, formSelector);

	    if (!form) {
	      throw new Error('Could not initialize SearchBar; Can not find {HTMLElement} `', this._formEl, '`.');
	    }

	    DOM.on(form, 'submit', function (e) {
	      e.preventDefault();
	      var inputEl = form.querySelector(_this3._inputEl);
	      var query = inputEl.value;
	      var params = new SearchParams(window.location.search.substring(1));
	      params.set('query', query); // If we have a redirectUrl, we want the form to be
	      // serialized and submitted.

	      if (typeof _this3.redirectUrl === 'string') {
	        window.location.href = _this3.redirectUrl + '?' + params.toString();
	        return false;
	      }

	      inputEl.blur();

	      _this3.core.persistentStorage.set(StorageKeys.QUERY, query);

	      _this3.core.persistentStorage["delete"](StorageKeys.SEARCH_OFFSET);

	      _this3.core.globalStorage["delete"](StorageKeys.SEARCH_OFFSET);

	      _this3.core.setQuery(query);

	      _this3.debouncedSearch(query);

	      return false;
	    });
	  }
	  /**
	   * A helper method to wire up our auto complete on an input selector
	   * @param {string} inputSelector CSS selector to bind our auto complete component to
	   */
	  ;

	  _proto.initAutoComplete = function initAutoComplete(inputSelector) {
	    var _this4 = this;

	    this._inputEl = inputSelector;

	    if (this._autocomplete) {
	      this._autocomplete.remove();
	    }

	    this._autocomplete = this.componentManager.create('AutoComplete', {
	      parentContainer: this._container,
	      name: this._autoCompleteName,
	      container: '.yxt-SearchBar-autocomplete',
	      autoFocus: this.autoFocus && !this.autocompleteOnLoad,
	      verticalKey: this._verticalKey,
	      promptHeader: this.promptHeader,
	      originalQuery: this.query,
	      inputEl: inputSelector,
	      onSubmit: function onSubmit() {
	        DOM.trigger(DOM.query(_this4._container, _this4._formEl), 'submit');
	      },
	      onChange: function onChange() {
	        DOM.trigger(DOM.query(_this4._container, inputSelector), 'input');
	      }
	    });
	  }
	  /**
	   * Performs a debounced query using the provided string input. Specifically, a new search is not
	   * performed if we recently searched, if there's no query for universal search, or if this
	   * is a twin searchbar.
	   * @param {string} query The string to query against.
	   * @returns {Promise} A promise that will perform the query and update globalStorage accordingly.
	   */
	  ;

	  _proto.debouncedSearch = function debouncedSearch(query) {
	    var _this5 = this;

	    if (this._throttled || !query && !this._verticalKey || !query && this._verticalKey && !this._allowEmptySearch || this._isTwin) {
	      return;
	    }

	    this._throttled = true;

	    setTimeout$2(function () {
	      _this5._throttled = false;
	    }, this._searchCooldown); // If _promptForLocation is enabled, we will compute the query's intent and, from there,
	    // determine if it's necessary to prompt the user for their location information. It will
	    // be unnecessary if the query does not have near me intent or we already have their location
	    // stored.


	    if (this._promptForLocation) {
	      this.fetchQueryIntents(query).then(function (queryIntents) {
	        return includes$4(queryIntents).call(queryIntents, 'NEAR_ME');
	      }).then(function (queryHasNearMeIntent) {
	        if (queryHasNearMeIntent && !_this5.core.globalStorage.getState(StorageKeys.GEOLOCATION)) {
	          return new promise$4(function (resolve, reject) {
	            return navigator.geolocation.getCurrentPosition(function (position) {
	              _this5.core.globalStorage.set(StorageKeys.GEOLOCATION, {
	                lat: position.coords.latitude,
	                lng: position.coords.longitude,
	                radius: position.coords.accuracy
	              });

	              resolve(_this5.search(query));
	            }, function () {
	              return resolve(_this5.search(query));
	            });
	          });
	        } else {
	          return _this5.search(query);
	        }
	      });
	    } else {
	      return this.search(query);
	    }
	  }
	  /**
	   * Performs a query using the provided string input.
	   * @param {string} query The string to query against.
	   * @returns {Promise} A promise that will perform the query and update globalStorage accordingly.
	   */
	  ;

	  _proto.search = function search(query) {
	    if (this._verticalKey) {
	      var allFilters = this.core.globalStorage.getAll(StorageKeys.FILTER);
	      var totalFilter = allFilters.length > 1 ? Filter.and.apply(Filter, allFilters) : allFilters[0];
	      return this.core.verticalSearch(this._verticalKey, {
	        input: query,
	        filter: stringify$2(totalFilter),
	        offset: this.core.globalStorage.getState(StorageKeys.SEARCH_OFFSET) || 0
	      });
	    } else {
	      // NOTE(billy) Temporary hack for DEMO
	      // Remove me after the demo
	      var nav = this.componentManager.getActiveComponent('Navigation');

	      if (nav) {
	        var tabs = nav.getState('tabs');
	        var urls = {};

	        if (tabs && isArray$4(tabs)) {
	          for (var i = 0; i < tabs.length; i++) {
	            var params = new SearchParams(tabs[i].url.split('?')[1]);
	            params.set('query', query);
	            var url = tabs[i].baseUrl;

	            if (params.toString().length > 0) {
	              url += '?' + params.toString();
	            }

	            urls[tabs[i].configId] = url;
	          }
	        }

	        return this.core.search(query, urls);
	      }

	      return this.core.search(query);
	    }
	  }
	  /**
	   * A helper method that computes the intents of the provided query. If the query was entered
	   * manually into the search bar or selected via autocomplete, its intents will have been stored
	   * already in globalStorage. Otherwise, a new API call will have to be issued to determine
	   * intent.
	   * @param {string} query The query whose intent is needed.
	   * @returns {Promise} A promise containing the intents of the query.
	   */
	  ;

	  _proto.fetchQueryIntents = function fetchQueryIntents(query) {
	    var autocompleteData = this.core.globalStorage.getState(StorageKeys.AUTOCOMPLETE + "." + this._autoCompleteName);

	    if (!autocompleteData) {
	      var autocompleteRequest = this._verticalKey ? this.core.autoCompleteVertical(query, this._autoCompleteName, this._verticalKey) : this.core.autoCompleteUniversal(query, this._autoCompleteName);
	      return autocompleteRequest.then(function (data) {
	        return data.inputIntents;
	      });
	    } else {
	      var _context;

	      // There are two alternatives to consider here. The user could have selected the query
	      // as an autocomplete option or manually input it themselves. If the former, use the intents
	      // of the corresponding autocomplete option. If the latter, use the inputIntents of the
	      // autocompleteData.
	      var results = flatMap$2(_context = autocompleteData.sections).call(_context, function (section) {
	        return section.results;
	      });

	      var matchingResult = find$5(results).call(results, function (result) {
	        return result.value === query;
	      });

	      var queryIntents = matchingResult ? matchingResult.intents : autocompleteData.inputIntents;
	      return promise$4.resolve(queryIntents);
	    }
	  }
	  /**
	   * A helper method that constructs the meta information needed by the SEARCH_CLEAR_BUTTON
	   * analytics event.
	   */
	  ;

	  _proto.eventOptions = function eventOptions() {
	    var queryId = this.core.globalStorage.getState(StorageKeys.QUERY_ID);

	    var options = assign$2({}, queryId && {
	      queryId: queryId
	    }, this._verticalKey && {
	      verticalKey: this._verticalKey
	    });

	    return stringify$2(options);
	  };

	  _proto.setState = function setState(data) {
	    return _Component.prototype.setState.call(this, assign$2({
	      title: this.title,
	      labelText: this.labelText,
	      submitIcon: this.submitIcon,
	      submitText: this.submitText,
	      clearText: this.clearText,
	      showClearButton: this._showClearButton,
	      query: this.query || '',
	      eventOptions: this.eventOptions()
	    }, data));
	  };

	  _proto.focusInputElement = function focusInputElement() {
	    DOM.query(this._container, this._inputEl).focus();
	  };

	  createClass(SearchComponent, null, [{
	    key: "type",
	    get: function get() {
	      return 'SearchBar';
	    }
	  }]);

	  return SearchComponent;
	}(Component);

	/** @module SearchParamsParser */
	function buildSearchParameters(searchParameterConfigs) {
	  var searchParameters = {
	    sectioned: false,
	    fields: []
	  };

	  if (searchParameterConfigs === undefined) {
	    return searchParameters;
	  }

	  if (searchParameterConfigs.sectioned) {
	    searchParameters.sectioned = searchParameterConfigs.sectioned;
	  }

	  searchParameters.fields = buildFields(searchParameterConfigs.fields);
	  return searchParameters;
	}

	function buildFields(fieldConfigs) {
	  if (fieldConfigs === undefined) {
	    return [];
	  }

	  return map$2(fieldConfigs).call(fieldConfigs, function (fc) {
	    return objectSpread({
	      fetchEntities: false
	    }, fc);
	  });
	}

	/**
	 * FilterSearchComponent is used for autocomplete using the FilterSearch backend.
	 * It'll allow you to pick pre-set filters that are setup on the backend within
	 * a vertical search context.
	 *
	 * @extends Component
	 */

	var FilterSearchComponent =
	/*#__PURE__*/
	function (_Component) {
	  inheritsLoose(FilterSearchComponent, _Component);

	  function FilterSearchComponent(config, systemConfig) {
	    var _this;

	    if (config === void 0) {
	      config = {};
	    }

	    if (systemConfig === void 0) {
	      systemConfig = {};
	    }

	    _this = _Component.call(this, config, systemConfig) || this;
	    /**
	     * The vertical key for vertical search configuration
	     * @type {string}
	     */

	    _this._verticalKey = config.verticalKey || null;
	    /**
	     * If true, store the filter value but do not search on change
	     * @type {boolean}
	     * @private
	     */

	    _this._storeOnChange = config.storeOnChange || false;
	    /**
	     * Query submission is based on a form as context.
	     * Optionally provided, otherwise defaults to native form node within container
	     * @type {string} CSS selector
	     */

	    _this._formEl = config.formSelector || 'form';
	    /**
	     * The input element used for searching and wires up the keyboard interaction
	     * Optionally provided.
	     * @type {string} CSS selector
	     */

	    _this._inputEl = config.inputEl || '.js-yext-query';
	    /**
	     * The title used, provided to the template as a data point
	     * Optionally provided.
	     * @type {string}
	     */

	    _this.title = config.title;
	    /**
	     * The search text used for labeling the input box, also provided to template.
	     * Optionally provided
	     * @type {string}
	     */

	    _this.searchText = config.searchText || 'What are you interested in?';
	    /**
	     * The query text to show as the first item for auto complete.
	     * Optionally provided
	     * @type {string}
	     */

	    _this.promptHeader = config.promptHeader || null;
	    /**
	     * Auto focuses the input box if set to true.
	     * Optionally provided, defaults to false.
	     * @type {boolean}
	     */

	    _this.autoFocus = config.autoFocus === true;
	    /**
	     * submitURL will force the search query submission to get
	     * redirected to the URL provided.
	     * Optional, defaults to null.
	     *
	     * If no redirectUrl provided, we keep the page as a single page app.
	     *
	     * @type {boolean}
	     */

	    _this.redirectUrl = config.redirectUrl || null;
	    /**
	     * The query string to use for the input box, provided to template for rendering.
	     * Optionally provided
	     * @type {string}
	     */

	    _this.query = config.query || _this.core.globalStorage.getState(StorageKeys.QUERY + "." + _this.name) || '';

	    _this.core.globalStorage.on('update', StorageKeys.QUERY + "." + _this.name, function (q) {
	      _this.query = q;

	      _this.search();
	    });
	    /**
	     * The filter string to use for the provided query
	     * Optionally provided
	     * @type {string}
	     */


	    _this.filter = filter$4(config) || _this.core.globalStorage.getState(StorageKeys.FILTER + "." + _this.name) || '';

	    if (typeof filter$4(_this) === 'string') {
	      try {
	        _this.filter = JSON.parse(filter$4(_this));
	      } catch (e) {}
	    }

	    _this.searchParameters = buildSearchParameters(config.searchParameters);

	    _this.core.globalStorage.on('update', StorageKeys.FILTER + "." + _this.name, function (f) {
	      _this.filter = f;
	    });

	    return _this;
	  }

	  /**
	   * The template to render
	   * @returns {string}
	   * @override
	   */
	  FilterSearchComponent.defaultTemplateName = function defaultTemplateName() {
	    return 'search/filtersearch';
	  };

	  var _proto = FilterSearchComponent.prototype;

	  _proto.onCreate = function onCreate() {
	    if (this.query && filter$4(this)) {
	      this.search();
	    }
	  };

	  _proto.onMount = function onMount() {
	    // Wire up our search handling and auto complete
	    this.initAutoComplete(this._inputEl);

	    if (this.autoFocus === true && this.query.length === 0) {
	      DOM.query(this._container, this._inputEl).focus();
	    }
	  }
	  /**
	   * A helper method to wire up our auto complete on an input selector
	   * @param {string} inputSelector CSS selector to bind our auto complete component to
	   */
	  ;

	  _proto.initAutoComplete = function initAutoComplete(inputSelector) {
	    var _this2 = this;

	    this._inputEl = inputSelector;
	    this.componentManager.create('AutoComplete', {
	      parentContainer: this._container,
	      name: this.name + ".autocomplete",
	      isFilterSearch: true,
	      container: '.yxt-SearchBar-autocomplete',
	      promptHeader: this.promptHeader,
	      originalQuery: this.query,
	      originalFilter: filter$4(this),
	      inputEl: inputSelector,
	      verticalKey: this._verticalKey,
	      searchParameters: this.searchParameters,
	      onSubmit: function onSubmit(query, filter) {
	        var params = new SearchParams(window.location.search.substring(1));
	        params.set(_this2.name + ".query", query);
	        params.set(_this2.name + ".filter", filter); // If we have a redirectUrl, we want the params to be
	        // serialized and submitted.

	        if (typeof _this2.redirectUrl === 'string') {
	          window.location.href = _this2.redirectUrl + '?' + params.toString();
	          return false;
	        } // save the filter to storage for the next search


	        _this2.query = query;
	        _this2.filter = Filter.fromResponse(filter);

	        _this2.core.persistentStorage.set(StorageKeys.QUERY + "." + _this2.name, _this2.query);

	        _this2.core.persistentStorage.set(StorageKeys.FILTER + "." + _this2.name, filter$4(_this2));

	        _this2.core.setFilter(_this2.name, filter$4(_this2));

	        _this2.search();
	      }
	    });
	  }
	  /**
	   * Perform the vertical search with all saved filters and query,
	   * optionally redirecting based on config
	   */
	  ;

	  _proto.search = function search() {
	    if (this._storeOnChange) {
	      return;
	    }

	    var filters = this.core.globalStorage.getAll(StorageKeys.FILTER);
	    var totalFilter = filters[0];

	    if (filters.length > 1) {
	      totalFilter = Filter.and.apply(Filter, filters);
	    }

	    var searchQuery = this.core.globalStorage.getState(StorageKeys.QUERY) || '';
	    var facetFilter = this.core.globalStorage.getAll(StorageKeys.FACET_FILTER)[0];
	    this.core.persistentStorage["delete"](StorageKeys.SEARCH_OFFSET);
	    this.core.globalStorage["delete"](StorageKeys.SEARCH_OFFSET);
	    this.core.verticalSearch(this._verticalKey, {
	      input: searchQuery,
	      filter: stringify$2(totalFilter),
	      facetFilter: stringify$2(facetFilter)
	    });
	  };

	  _proto.setState = function setState(data) {
	    return _Component.prototype.setState.call(this, assign$2({
	      title: this.title,
	      searchText: this.searchText,
	      query: this.query,
	      filter: filter$4(this)
	    }, data));
	  };

	  createClass(FilterSearchComponent, null, [{
	    key: "type",
	    get: function get() {
	      return 'FilterSearch';
	    }
	  }]);

	  return FilterSearchComponent;
	}(Component);

	var Keys = {
	  BACKSPACE: 8,
	  TAB: 9,
	  ENTER: 13,
	  SHIFT: 16,
	  CTRL: 17,
	  ALT: 18,
	  ESCAPE: 27,
	  LEFT: 37,
	  RIGHT: 39,
	  UP: 38,
	  DELETE: 46,
	  DOWN: 40,
	  LEFT_OS_KEY: 91,
	  RIGHT_OS_KEY: 92,
	  SELECT_KEY: 93
	};

	var AutoCompleteComponent =
	/*#__PURE__*/
	function (_Component) {
	  inheritsLoose(AutoCompleteComponent, _Component);

	  function AutoCompleteComponent(opts, systemOpts) {
	    var _this;

	    if (opts === void 0) {
	      opts = {};
	    }

	    if (systemOpts === void 0) {
	      systemOpts = {};
	    }

	    _this = _Component.call(this, opts, systemOpts) || this;
	    /**
	     * Whether autocomplete is simple or filter
	     * @type {boolean}
	     */

	    _this.isFilterSearch = opts.isFilterSearch || false;
	    /**
	     * The `verticalKey` of the vertical search to use for auto-complete
	     * @type {string}
	     */

	    _this._verticalKey = opts.verticalKey || null;
	    /**
	     * A reference to the input el selector for auto complete
	     * @type {string}
	     */

	    _this._inputEl = opts.inputEl || '.js-yext-query';
	    /**
	     * A selector for the autocomplete elementes
	     * @type {string}
	     */

	    _this._autocompleteEls = opts.autoCompleteEls || '.js-yext-autocomplete-option';
	    /**
	     * An internal reference for the data-storage to listen for updates from the server
	     * @type {string}
	     */

	    _this.moduleId = StorageKeys.AUTOCOMPLETE + "." + _this.name;
	    /**
	     * An internal reference to the input value when typing.
	     * We use this for resetting the state of the input value when other interactions (e.g. result navigation)
	     * change based on interactions. For instance, hitting escape should reset the value to the original typed query.
	     * @type {string}
	     */

	    _this._originalQuery = opts.originalQuery || '';
	    /**
	     * Used for keyboard navigation through results.
	     * An internal reference to the current section we're navigating in.
	     * @type {number}
	     */

	    _this._sectionIndex = 0;
	    /**
	     * Used for keyboard navigation through results.
	     * An internal reference to the current result index we're navigating on.
	     * @type {number}
	     */

	    _this._resultIndex = -1;
	    /**
	     * The query text to show as the first item for auto complete.
	     * Optionally provided
	     * @type {string}
	     */

	    _this.promptHeader = opts.promptHeader || null;
	    /**
	     * Whether the input is autocomatically focused or not
	     * @type {boolean}
	     */

	    _this._autoFocus = opts.autoFocus || false;
	    /**
	     * Callback invoked when the `Enter` key is pressed on auto complete.
	     */

	    _this._onSubmit = opts.onSubmit || function () {};
	    /**
	     * Callback invoked when keys are used to navigate through the auto complete. Note that this is
	     * not called when either the `Enter` key is pressed or the mouse is used to select an
	     * autocomplete option.
	     */


	    _this._onChange = opts.onChange || function () {};

	    _this._searchParameters = opts.searchParameters || null;
	    return _this;
	  }
	  /**
	   * The aliased used by the component manager for creation.
	   */


	  /**
	   * The template to render
	   * @returns {string}
	   * @override
	   */
	  AutoCompleteComponent.defaultTemplateName = function defaultTemplateName(config) {
	    return 'search/autocomplete';
	  }
	  /**
	   * setState is overridden so that we can provide additional meta data
	   * to the template (e.g. the sectionIndex and resultIndex), since
	   * those are client-interaction specific values and aren't returned from the server.
	   */
	  ;

	  var _proto = AutoCompleteComponent.prototype;

	  _proto.setState = function setState(data) {
	    if (!this.isQueryInputFocused()) {
	      this._sectionIndex = 0;
	      this._resultIndex = -1;
	      data = {};
	    }

	    _Component.prototype.setState.call(this, assign$2({}, data, {
	      hasResults: this.hasResults(data),
	      sectionIndex: this._sectionIndex,
	      resultIndex: this._resultIndex,
	      promptHeader: this._originalQuery.length === 0 ? this.promptHeader : null
	    }));
	  };

	  _proto.isQueryInputFocused = function isQueryInputFocused() {
	    var _context;

	    return document.activeElement && includes$4(_context = document.activeElement.className).call(_context, this._inputEl.substring(1));
	  }
	  /**
	   * updateState is a helper to apply the current state with new client-state.
	   */
	  ;

	  _proto.updateState = function updateState() {
	    this.setState(this._state.get());
	  }
	  /**
	   * onCreate is triggered when the component is constructed from the framework.
	   * Once we're initalized, we wire up all of our user interactions
	   */
	  ;

	  _proto.onCreate = function onCreate() {
	    var _this2 = this;

	    // Use the context of the parent component to find the input node.
	    var queryInput = DOM.query(this._parentContainer, this._inputEl);

	    if (!queryInput) {
	      throw new Error('Could not initialize AutoComplete. Can not find {HTMLElement} `', this._inputEl, '`.');
	    } // Disable the native autocomplete, autocorrect & spellcheck


	    DOM.attributes(queryInput, {
	      autocomplete: 'off',
	      autocorrect: 'off',
	      spellcheck: 'false'
	    }); // The user exits the input, so we want to reset the state and close
	    // the auto complete
	    // TODO(jdelerme): Close logic to be moved to parent

	    DOM.on(document, 'click', function (e) {
	      if (DOM.matches(e.target, '.js-yxt-AutoComplete-wrapper *') || DOM.matches(e.target, _this2._inputEl)) {
	        return;
	      }

	      _this2.close();
	    }); // When a user focuses the input, we should populate the autocomplete based
	    // on the current value

	    DOM.on(queryInput, 'focus', function () {
	      _this2.reset();

	      _this2.autoComplete(queryInput.value);
	    }); // Allow the user to navigate between the results using the keyboard

	    DOM.on(queryInput, 'keydown', function (e) {
	      _this2.handleNavigateResults(e.keyCode, e);

	      _this2.handleSubmitResult(e.keyCode, queryInput.value, e);
	    });

	    if (this._autoFocus) {
	      DOM.once(queryInput, 'click', function () {
	        _this2.autoComplete(queryInput.value);
	      });
	    } // Allow the user to select a result with the mouse


	    DOM.delegate(this._container, '.js-yext-autocomplete-option', 'click', function (evt, target) {
	      var data = target.dataset;
	      var val = data["short"];

	      _this2.updateQuery(val);

	      _this2._onSubmit(val, filter$4(data));

	      _this2.close();
	    }); // When the user is typing in the input, process the auto complete.

	    DOM.on(queryInput, 'keyup', function (e) {
	      _this2.handleTyping(e.keyCode, queryInput.value, e);
	    });
	  }
	  /**
	   * close will hide the auto complete results and reset the state.
	   */
	  ;

	  _proto.close = function close() {
	    this.setState({});
	    this.reset();
	  }
	  /**
	   * resets the client state to their original values and triggers
	   * a template-rerender via updateState
	   */
	  ;

	  _proto.reset = function reset() {
	    this._sectionIndex = 0;
	    this._resultIndex = -1;
	    this.updateState();
	  }
	  /**
	   * Helper method to update the input text
	   * @param {string} optValue Option value provided.
	   * If no value provided, we'll try to find it based on the selection indexes.
	   */
	  ;

	  _proto.updateQuery = function updateQuery(optValue) {
	    // Only want to update the query string if theres a value.
	    // If one is provided, great.
	    // Otherwise, lets try to find it from the current selection in the results.
	    if (optValue === undefined) {
	      var sections = this._state.get('sections');

	      var results = sections[this._sectionIndex].results;
	      optValue = results[this._resultIndex].shortValue;
	    }

	    var queryEl = DOM.query(this._parentContainer, this._inputEl);
	    queryEl.value = optValue;
	  };

	  _proto.handleTyping = function handleTyping(key, value, e) {
	    var ignoredKeys = [Keys.DOWN, Keys.UP, Keys.CTRL, Keys.ALT, Keys.SHIFT, Keys.LEFT, Keys.RIGHT, Keys.LEFT_OS_KEY, Keys.RIGHT_OS_KEY, Keys.ENTER, Keys.TAB, Keys.SELECT_KEY];

	    if (indexOf$6(ignoredKeys).call(ignoredKeys, key) > -1) {
	      return;
	    } // User escapes out of auto complete, so we reset it to the original input


	    if (key === Keys.ESCAPE) {
	      this.updateQuery(this._originalQuery);
	      this.close();
	      return;
	    } // Update the original value based on the user input


	    this._originalQuery = value;
	    this.reset();
	    this.autoComplete(value);
	  };

	  _proto.autoComplete = function autoComplete(input) {
	    if (this.isFilterSearch) {
	      this.core.autoCompleteFilter(input, {
	        namespace: this.name,
	        verticalKey: this._verticalKey,
	        searchParameters: this._searchParameters
	      });
	    } else if (this._verticalKey) {
	      this.core.autoCompleteVertical(input, this.name, this._verticalKey);
	    } else {
	      this.core.autoCompleteUniversal(input, this.name);
	    }
	  }
	  /**
	   * returns true if we have results in any section
	   * @returns boolean
	   */
	  ;

	  _proto.hasResults = function hasResults(data) {
	    if (!data) {
	      return false;
	    }

	    var sections = data['sections'];

	    if (!sections) {
	      return false;
	    }

	    for (var i = 0; i < sections.length; i++) {
	      var _data = sections[i];

	      if (!_data) {
	        continue;
	      }

	      var results = _data.results;

	      if (!results) {
	        continue;
	      }

	      if (results.length > 0) {
	        return true;
	      }
	    }

	    return false;
	  };

	  _proto.handleNavigateResults = function handleNavigateResults(key, e) {
	    var sections = this._state.get('sections');

	    if (sections === undefined || sections.length <= 0) {
	      return;
	    } // Tabbing out or enter should close the auto complete.


	    if (key === Keys.TAB) {
	      this.close();
	      return;
	    }

	    var results = sections[this._sectionIndex].results;

	    if (key === Keys.UP) {
	      e.preventDefault();

	      if (this._resultIndex <= 0) {
	        if (this._sectionIndex > 0) {
	          this._sectionIndex--;
	          this._resultIndex = sections[this._sectionIndex].results.length - 1;
	        } else {
	          this.updateQuery(this._originalQuery);
	          this.reset();
	          return;
	        }

	        this.updateQuery();
	        this.updateState();
	        return;
	      }

	      this._resultIndex--;
	      this.updateState();
	      this.updateQuery();
	      return;
	    }

	    if (key === Keys.DOWN) {
	      e.preventDefault();

	      if (this._resultIndex >= results.length - 1) {
	        if (this._sectionIndex < sections.length - 1) {
	          this._sectionIndex++;
	          this._resultIndex = 0;
	        }

	        this.updateQuery();
	        this.updateState();
	        return;
	      }

	      this._resultIndex++;
	      this.updateQuery();
	      this.updateState();
	    }
	  };

	  _proto.handleSubmitResult = function handleSubmitResult(key, value, e) {
	    var sections = this._state.get('sections');

	    if (sections === undefined || sections.length <= 0) {
	      if (this.isFilterSearch) {
	        this.autoComplete(value);
	      }

	      return;
	    } // submit the search on enter


	    if (key === Keys.ENTER) {
	      e.preventDefault();

	      if (this.isFilterSearch && this._resultIndex === -1) {
	        return;
	      }

	      var filter = '';

	      if (this._sectionIndex >= 0 && this._resultIndex >= 0) {
	        filter = stringify$2(filter$4(sections[this._sectionIndex].results[this._resultIndex]));
	      }

	      this.updateQuery(value);
	      this._originalQuery = value;

	      this._onSubmit(value, filter);

	      this.close();
	    } else {
	      this._onChange();
	    }
	  };

	  createClass(AutoCompleteComponent, null, [{
	    key: "type",
	    get: function get() {
	      return 'AutoComplete';
	    }
	  }]);

	  return AutoCompleteComponent;
	}(Component);

	/**
	 * SpellCheckComponent will support displaying suggestion, autocorrect and combined(maybe in the future)
	 * provided from spelling correction.
	 *
	 * @extends Component
	 */

	var SpellCheckComponent =
	/*#__PURE__*/
	function (_Component) {
	  inheritsLoose(SpellCheckComponent, _Component);

	  function SpellCheckComponent(config, systemConfig) {
	    var _this;

	    if (config === void 0) {
	      config = {};
	    }

	    if (systemConfig === void 0) {
	      systemConfig = {};
	    }

	    _this = _Component.call(this, config, systemConfig) || this;
	    _this.moduleId = StorageKeys.SPELL_CHECK;
	    return _this;
	  }

	  SpellCheckComponent.defaultTemplateName = function defaultTemplateName() {
	    return 'search/spellcheck';
	  };

	  var _proto = SpellCheckComponent.prototype;

	  _proto.onCreate = function onCreate() {
	    this.core.persistentStorage["delete"]('skipSpellCheck', true);
	    this.core.persistentStorage["delete"]('queryTrigger', true);
	  };

	  _proto.setState = function setState(data, val) {
	    return _Component.prototype.setState.call(this, assign$2({}, data, {
	      shouldShow: data.correctedQuery !== undefined,
	      correctedQueryUrl: this._buildRedirectQueryUrl(data.correctedQuery, data.type),
	      helpText: this._getHelpText(data.type)
	    }, val));
	  };

	  _proto._buildRedirectQueryUrl = function _buildRedirectQueryUrl(query, type) {
	    if (query === undefined) {
	      return '';
	    }

	    var params = new SearchParams(window.location.search.substring(1));
	    params.set('query', query.value);
	    params.set('skipSpellCheck', true);
	    params.set('queryTrigger', type.toLowerCase());
	    return '?' + params.toString();
	  };

	  _proto._getHelpText = function _getHelpText(type) {
	    switch (type) {
	      case 'SUGGEST':
	        return 'Did you mean:';

	      default:
	        return '';
	    }
	  };

	  createClass(SpellCheckComponent, null, [{
	    key: "type",
	    get: function get() {
	      return 'SpellCheck';
	    }
	  }]);

	  return SpellCheckComponent;
	}(Component);

	/**
	 * LocationBiasComponent will show the user where is used for location bias and allow user to
	 * improve accuracy with HTML5 geolocation.
	 *
	 * @extends Component
	 */

	var LocationBiasComponent =
	/*#__PURE__*/
	function (_Component) {
	  inheritsLoose(LocationBiasComponent, _Component);

	  function LocationBiasComponent(config, systemConfig) {
	    var _this;

	    if (config === void 0) {
	      config = {};
	    }

	    if (systemConfig === void 0) {
	      systemConfig = {};
	    }

	    _this = _Component.call(this, config, systemConfig) || this;
	    /**
	     * Recieve updates from storage based on this index
	     * @type {StorageKey}
	     */

	    _this.moduleId = StorageKeys.LOCATION_BIAS;
	    /**
	     * The optional vertical key for vertical search configuration
	     * If not provided, when location updated,
	     * a universal search will be triggered.
	     * @type {string}
	     */
	    // TODO: Remove config.verticalKey

	    _this._verticalKey = config.verticalKey || _this.core.globalStorage.getState(StorageKeys.SEARCH_CONFIG).verticalKey || null;
	    /**
	     * The element used for updating location
	     * Optionally provided.
	     * @type {string} CSS selector
	     */

	    _this._updateLocationEl = config.updateLocationEl || '.js-locationBias-update-location';
	    _this._locationDisplayName = '';
	    _this._accuracy = '';
	    _this._allowUpdate = true;
	    return _this;
	  }

	  LocationBiasComponent.defaultTemplateName = function defaultTemplateName() {
	    return 'search/locationbias';
	  };

	  var _proto = LocationBiasComponent.prototype;

	  _proto.onMount = function onMount() {
	    var _this2 = this;

	    if (!this._allowUpdate) {
	      return;
	    }

	    this._disableLocationUpdateIfGeolocationDenied();

	    DOM.on(this._updateLocationEl, 'click', function (e) {
	      if ('geolocation' in navigator) {
	        navigator.geolocation.getCurrentPosition(function (position) {
	          _this2.core.globalStorage.set(StorageKeys.GEOLOCATION, {
	            lat: position.coords.latitude,
	            lng: position.coords.longitude,
	            radius: position.coords.accuracy
	          });

	          _this2._doSearch();
	        }, function (err) {
	          if (err.code === 1) {
	            _this2._disableLocationUpdate();
	          }
	        });
	      } // TODO: Should we throw error or warning here if no geolocation?

	    });
	  };

	  _proto.setState = function setState(data, val) {
	    this._locationDisplayName = data.locationDisplayName;
	    this._accuracy = data.accuracy;
	    return _Component.prototype.setState.call(this, assign$2({}, data, {
	      locationDisplayName: this._getLocationDisplayName(data),
	      accuracyText: this._getAccuracyHelpText(data.accuracy),
	      isPreciseLocation: data.accuracy === 'DEVICE' && this._allowUpdate,
	      isUnknownLocation: data.accuracy === 'UNKNOWN',
	      shouldShow: data.accuracy !== undefined,
	      allowUpdate: this._allowUpdate
	    }, val));
	  };

	  _proto._getLocationDisplayName = function _getLocationDisplayName(data) {
	    if (data.accuracy === 'UNKNOWN') {
	      return 'Unknown Location';
	    }

	    return data.locationDisplayName;
	  };

	  _proto._getAccuracyHelpText = function _getAccuracyHelpText(accuracy) {
	    switch (accuracy) {
	      case 'IP':
	        return 'based on your internet address';

	      case 'DEVICE':
	        return 'based on your device';

	      default:
	        return '';
	    }
	  };

	  _proto._doSearch = function _doSearch() {
	    var query = this.core.globalStorage.getState(StorageKeys.QUERY);

	    if (this._verticalKey) {
	      var allFilters = this.core.globalStorage.getAll(StorageKeys.FILTER);
	      var totalFilter = allFilters.length > 1 ? Filter.and.apply(Filter, allFilters) : allFilters[0];
	      var facetFilter = this.core.globalStorage.getAll(StorageKeys.FACET_FILTER)[0];
	      this.core.verticalSearch(this._verticalKey, {
	        input: query,
	        filter: stringify$2(totalFilter),
	        offset: this.core.globalStorage.getState(StorageKeys.SEARCH_OFFSET) || 0,
	        facetFilter: stringify$2(facetFilter)
	      });
	    } else {
	      this.core.search(query);
	    }
	  };

	  _proto._disableLocationUpdateIfGeolocationDenied = function _disableLocationUpdateIfGeolocationDenied() {
	    var _this3 = this;

	    if ('permissions' in navigator) {
	      navigator.permissions.query({
	        name: 'geolocation'
	      }).then(function (result) {
	        if (result.state === 'denied') {
	          _this3._disableLocationUpdate();
	        }
	      });
	    }
	  };

	  _proto._disableLocationUpdate = function _disableLocationUpdate() {
	    this.core.globalStorage["delete"](StorageKeys.GEOLOCATION);
	    this._allowUpdate = false;
	    this.setState({
	      locationDisplayName: this._locationDisplayName,
	      accuracy: this._accuracy
	    });
	  };

	  createClass(LocationBiasComponent, null, [{
	    key: "type",
	    get: function get() {
	      return 'LocationBias';
	    }
	  }]);

	  return LocationBiasComponent;
	}(Component);

	/** @module Facet */

	/**
	 * Model representing a facet filter with the format of
	 * {
	 *   "field_name": [ Filters... ],
	 *   ...
	 * }
	 *
	 * @see {@link Filter}
	 */
	var Facet =
	/*#__PURE__*/
	function () {
	  function Facet(data) {
	    if (data === void 0) {
	      data = {};
	    }

	    assign$2(this, data);

	    freeze$2(this);
	  }
	  /**
	   * Create a facet filter from a list of Filters
	   * @param  {...Filter} filters The filters to use in this facet
	   * @returns {Facet}
	   */


	  Facet.fromFilters = function fromFilters(availableFieldIds) {
	    var groups = {};

	    forEach$4(availableFieldIds).call(availableFieldIds, function (fieldId) {
	      groups[fieldId] = [];
	    });

	    for (var _len = arguments.length, filters = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	      filters[_key - 1] = arguments[_key];
	    }

	    var flatFilters = flatMap$2(filters).call(filters, function (f) {
	      return f.$or || f;
	    });

	    forEach$4(flatFilters).call(flatFilters, function (f) {
	      var key = keys$9(f)[0];

	      if (!groups[key]) {
	        groups[key] = [];
	      }

	      groups[key].push(f);
	    });

	    return new Facet(groups);
	  };

	  return Facet;
	}();

	var FilterBoxConfig =
	/*#__PURE__*/
	function () {
	  function FilterBoxConfig(config) {
	    var _context;

	    /**
	     * The title to display above the controls
	     * @type {string}
	     */
	    this.title = config.title || 'Filters';
	    /**
	     * If true, display the number of results next to each facet
	     * @type {boolean}
	     */

	    this.showCount = config.showCount === undefined ? true : config.showCount;
	    /**
	     * If true, trigger a search on each change to a filter
	     * @type {boolean}
	     */

	    this.searchOnChange = config.searchOnChange || false;
	    /**
	     * If true, show a button to reset for each facet group
	     * @type {boolean}
	     */

	    this.resetFilter = config.resetFacet || false;
	    /**
	     * The label to show for the reset button
	     * @type {string}
	     */

	    this.resetFilterLabel = config.resetFacetLabel || 'reset';
	    /**
	     * If true, show a "reset all" button to reset all facets
	     * @type {boolean}
	     */

	    this.resetFilters = config.resetFacets === undefined ? true : config.resetFacets;
	    /**
	     * The label to show for the "reset all" button
	     * @type {string}
	     */

	    this.resetFiltersLabel = config.resetFacetsLabel || 'reset all';
	    /**
	     * The max number of facets to show before displaying "show more"/"show less"
	     * @type {number}
	     */

	    this.showMoreLimit = config.showMoreLimit || 5;
	    /**
	     * The label to show for displaying more facets
	     * @type {string}
	     */

	    this.showMoreLabel = config.showMoreLabel || 'show more';
	    /**
	     * The label to show for displaying less facets
	     * @type {string}
	     */

	    this.showLessLabel = config.showLessLabel || 'show less';
	    /**
	     * If true, enable hiding excess facets in each group with a "show more"/"show less" button
	     * @type {boolean}
	     */

	    this.showMore = config.showMore === undefined ? true : config.showMore;
	    /**
	     * If true, allow expanding and collapsing each group of facets
	     * @type {boolean}
	     */

	    this.expand = config.expand === undefined ? true : config.expand;
	    /**
	     * If true, display the number of currently applied filters when collapsed
	     * @type {boolean}
	     */

	    this.showNumberApplied = config.showNumberApplied === undefined ? true : config.showNumberApplied;
	    /**
	     * Text to display on the apply button
	     * @type {string}
	     */

	    this.applyLabel = config.applyLabel || 'apply';
	    /**
	     * The selector of the apply button
	     * @type {string}
	     */

	    this.applyButtonSelector = config.applyButtonSelector || '.js-yext-filterbox-apply';
	    /**
	     * The list of filters to display and control, ignoring empty sections
	     * @type {object[]}
	     */

	    this.filterConfigs = filter$4(_context = config.filters).call(_context, function (f) {
	      return f.options.length !== 0;
	    });
	    /**
	     * Whether or not this filterbox contains facets. This affects the
	     * the way the filters are used in the search
	     * @type {boolean}
	     */

	    this.isDynamic = config.isDynamic || false;
	    this.validate();
	  }

	  var _proto = FilterBoxConfig.prototype;

	  _proto.validate = function validate() {};

	  return FilterBoxConfig;
	}();
	/**
	 * Renders a set of filters, and searches with them when applied.
	 * Multiple FilterBox components will AND together but will not share state.
	 * @extends Component
	 */


	var FilterBoxComponent =
	/*#__PURE__*/
	function (_Component) {
	  inheritsLoose(FilterBoxComponent, _Component);

	  function FilterBoxComponent(config, systemConfig) {
	    var _this;

	    if (config === void 0) {
	      config = {};
	    }

	    if (systemConfig === void 0) {
	      systemConfig = {};
	    }

	    _this = _Component.call(this, config, systemConfig) || this;
	    _this.config = new FilterBoxConfig(config);

	    if (!config.filters || !(config.filters instanceof Array)) {
	      throw new AnswersComponentError('FilterBox requires filters to be provided as an array', 'FilterBox');
	    }
	    /**
	     * The vertical key for the search
	     * @type {string}
	     * @private
	     */


	    _this._verticalKey = config.verticalKey || null;
	    /**
	     * The components created for each filter config
	     * @type {Component[]}
	     * @private
	     */

	    _this._filterComponents = [];
	    /**
	     * The current state of the filter components in the box
	     * @type {Filter}
	     * @private
	     */

	    _this._filters = [];

	    if (!_this.config.showCount) {
	      var _context2;

	      forEach$4(_context2 = _this.config.filterConfigs).call(_context2, function (config) {
	        var _context3;

	        forEach$4(_context3 = config.options).call(_context3, function (option) {
	          option.countLabel = null;
	        });
	      });
	    }

	    return _this;
	  }

	  FilterBoxComponent.defaultTemplateName = function defaultTemplateName() {
	    return 'filters/filterbox';
	  };

	  var _proto2 = FilterBoxComponent.prototype;

	  _proto2.setState = function setState(data) {
	    _Component.prototype.setState.call(this, assign$2({}, data, this.config, {
	      showReset: this.config.resetFilters,
	      resetLabel: this.config.resetFiltersLabel,
	      showApplyButton: !this.config.searchOnChange
	    }));
	  };

	  _proto2.onMount = function onMount() {
	    var _this2 = this;

	    if (this._filterComponents.length) {
	      var _context4;

	      forEach$4(_context4 = this._filterComponents).call(_context4, function (c) {
	        return c.remove();
	      });

	      this._filterComponents = [];
	      this._filters = [];
	    } // Initialize filters from configs


	    var _loop = function _loop(i) {
	      var config = _this2.config.filterConfigs[i];

	      var component = _this2.componentManager.create(config.type, assign$2({}, config, _this2.config, {
	        parentContainer: _this2._container,
	        name: _this2.name + ".filter" + i,
	        storeOnChange: false,
	        container: ".js-yext-filterbox-filter" + i,
	        showReset: _this2.config.resetFilter,
	        resetLabel: _this2.config.resetFilterLabel,
	        showExpand: _this2.config.expand,
	        onChange: function onChange(filter) {
	          _this2.onFilterChange(i, filter);
	        }
	      }));

	      component.mount();

	      _this2._filterComponents.push(component);

	      _this2._filters[i] = component.getFilter();

	      _this2._saveFiltersToStorage();
	    };

	    for (var i = 0; i < this.config.filterConfigs.length; i++) {
	      _loop(i);
	    } // Initialize apply button


	    if (!this.config.searchOnChange) {
	      var button = DOM.query(this._container, this.config.applyButtonSelector);

	      if (button) {
	        DOM.on(button, 'click', function () {
	          _this2._saveFiltersToStorage();

	          _this2._search();
	        });
	      }
	    } // Initialize reset button


	    if (this.config.resetFilters) {
	      var _context5;

	      DOM.on(DOM.query(this._container, '.js-yxt-FilterBox-reset'), 'click', bind$6(_context5 = this.resetFilters).call(_context5, this));
	    }
	  };

	  _proto2.resetFilters = function resetFilters() {
	    var _context6;

	    forEach$4(_context6 = this._filterComponents).call(_context6, function (filter) {
	      return filter.clearOptions();
	    });
	  }
	  /**
	   * Handle changes to child filter components
	   * @param {number} index The index of the changed filter
	   * @param {Filter} filter The new filter
	   */
	  ;

	  _proto2.onFilterChange = function onFilterChange(index, filter) {
	    this._filters[index] = filter;

	    if (this.config.searchOnChange) {
	      this._saveFiltersToStorage();

	      this._search();
	    }
	  }
	  /**
	   * Remove all filter components along with this component
	   */
	  ;

	  _proto2.remove = function remove() {
	    var _context7;

	    forEach$4(_context7 = this._filterComponents).call(_context7, function (c) {
	      return c.remove();
	    });

	    _Component.prototype.remove.call(this);
	  }
	  /**
	   * Save current filters to storage to be used in the next search
	   * @private
	   */
	  ;

	  _proto2._saveFiltersToStorage = function _saveFiltersToStorage() {
	    var _context8;

	    var validFilters = filter$4(_context8 = this._filters).call(_context8, function (f) {
	      return f !== undefined && f !== null && keys$9(f).length > 0;
	    });

	    if (this.config.isDynamic) {
	      var _context9, _context10;

	      var availableFieldIds = map$2(_context9 = this.config.filterConfigs).call(_context9, function (config) {
	        return config.fieldId;
	      });

	      var combinedFilter = Facet.fromFilters.apply(Facet, concat$4(_context10 = [availableFieldIds]).call(_context10, validFilters));
	      this.core.setFacetFilter(this.name, combinedFilter || {});
	    } else {
	      var _combinedFilter = validFilters.length > 1 ? Filter.and.apply(Filter, validFilters) : validFilters[0];

	      this.core.setFilter(this.name, _combinedFilter || {});
	    }
	  }
	  /**
	   * Trigger a search with all filters in storage
	   */
	  ;

	  _proto2._search = function _search() {
	    var allFilters = this.core.globalStorage.getAll(StorageKeys.FILTER);
	    var totalFilter = allFilters.length > 1 ? Filter.and.apply(Filter, allFilters) : allFilters[0];
	    var query = this.core.globalStorage.getState(StorageKeys.QUERY);
	    var facetFilter = this.core.globalStorage.getAll(StorageKeys.FACET_FILTER)[0];
	    this.core.persistentStorage["delete"](StorageKeys.SEARCH_OFFSET);
	    this.core.globalStorage["delete"](StorageKeys.SEARCH_OFFSET);
	    this.core.verticalSearch(this._verticalKey, {
	      input: query,
	      filter: stringify$2(totalFilter),
	      facetFilter: stringify$2(facetFilter)
	    });
	  };

	  createClass(FilterBoxComponent, null, [{
	    key: "type",
	    get: function get() {
	      return 'FilterBox';
	    }
	  }]);

	  return FilterBoxComponent;
	}(Component);

	// a string of all valid unicode whitespaces
	// eslint-disable-next-line max-len
	var whitespaces$1 = '\u0009\u000A\u000B\u000C\u000D\u0020\u00A0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';

	var whitespace$1 = '[' + whitespaces$1 + ']';
	var ltrim$1 = RegExp('^' + whitespace$1 + whitespace$1 + '*');
	var rtrim$1 = RegExp(whitespace$1 + whitespace$1 + '*$');

	// `String.prototype.{ trim, trimStart, trimEnd, trimLeft, trimRight }` methods implementation
	var createMethod$c = function (TYPE) {
	  return function ($this) {
	    var string = String(requireObjectCoercible($this));
	    if (TYPE & 1) string = string.replace(ltrim$1, '');
	    if (TYPE & 2) string = string.replace(rtrim$1, '');
	    return string;
	  };
	};

	var stringTrim$1 = {
	  // `String.prototype.{ trimLeft, trimStart }` methods
	  // https://tc39.github.io/ecma262/#sec-string.prototype.trimstart
	  start: createMethod$c(1),
	  // `String.prototype.{ trimRight, trimEnd }` methods
	  // https://tc39.github.io/ecma262/#sec-string.prototype.trimend
	  end: createMethod$c(2),
	  // `String.prototype.trim` method
	  // https://tc39.github.io/ecma262/#sec-string.prototype.trim
	  trim: createMethod$c(3)
	};

	var trim$3 = stringTrim$1.trim;


	var $parseInt$1 = global_1.parseInt;
	var hex$1 = /^[+-]?0[Xx]/;
	var FORCED$s = $parseInt$1(whitespaces$1 + '08') !== 8 || $parseInt$1(whitespaces$1 + '0x16') !== 22;

	// `parseInt` method
	// https://tc39.github.io/ecma262/#sec-parseint-string-radix
	var numberParseInt$1 = FORCED$s ? function parseInt(string, radix) {
	  var S = trim$3(String(string));
	  return $parseInt$1(S, (radix >>> 0) || (hex$1.test(S) ? 16 : 10));
	} : $parseInt$1;

	// `parseInt` method
	// https://tc39.github.io/ecma262/#sec-parseint-string-radix
	_export({ global: true, forced: parseInt != numberParseInt$1 }, {
	  parseInt: numberParseInt$1
	});

	var _parseInt = path.parseInt;

	var _parseInt$1 = _parseInt;

	var _parseInt$2 = _parseInt$1;

	/**
	 * The currently supported controls
	 * @type {string[]}
	 */

	var SUPPORTED_CONTROLS = ['singleoption', 'multioption'];

	var FilterOptionsConfig =
	/*#__PURE__*/
	function () {
	  function FilterOptionsConfig(config) {
	    /**
	     * The type of control to display
	     * @type {string}
	     */
	    this.control = config.control;
	    /**
	     * The list of filter options to display with checked status
	     * @type {object[]}
	     */

	    this.options = config.options;
	    /**
	     * The label to be used in the legend
	     * @type {string}
	     */

	    this.label = config.label || 'Filters';
	    /**
	     * The callback function to call when changed
	     * @type {function}
	     */

	    this.onChange = config.onChange || function () {};
	    /**
	     * If true, stores the filter to storage on each change
	     * @type {boolean}
	     */


	    this.storeOnChange = config.storeOnChange === undefined ? true : config.storeOnChange;
	    /**
	     * If true, show a button to reset the current filter selection
	     * @type {boolean}
	     */

	    this.showReset = config.showReset && this.options.length > 0;
	    /**
	     * The label to show for the reset button
	     * @type {string}
	     */

	    this.resetLabel = config.resetLabel || 'reset';
	    /**
	     * The max number of facets to show before displaying "show more"/"show less"
	     * @type {number}
	     */

	    this.showMoreLimit = config.showMoreLimit || 5;
	    /**
	     * The label to show for displaying more facets
	     * @type {string}
	     */

	    this.showMoreLabel = config.showMoreLabel || 'show more';
	    /**
	     * The label to show for displaying less facets
	     * @type {string}
	     */

	    this.showLessLabel = config.showLessLabel || 'show less';
	    /**
	     * If true, enable hiding excess facets with a "show more"/"show less" button
	     * @type {boolean}
	     */

	    this.showMore = config.showMore === undefined ? true : config.showMore;
	    this.showMore = this.showMore && this.options.length > this.showMoreLimit;
	    /**
	     * If true, allow expanding and collapsing the group of facets
	     * @type {boolean}
	     */

	    this.showExpand = config.showExpand === undefined ? true : config.showExpand;
	    /**
	     * If true, display the number of currently applied filters when collapsed
	     * @type {boolean}
	     */

	    this.showNumberApplied = config.showNumberApplied === undefined ? true : config.showNumberApplied;
	    /**
	     * The selector used for options in the template
	     * @type {string}
	     */

	    this.optionSelector = config.optionSelector || '.js-yext-filter-option';
	    this.validate();

	    if (typeof config.previousOptions === 'string') {
	      try {
	        config.previousOptions = JSON.parse(config.previousOptions);
	      } catch (e) {
	        config.previousOptions = [];
	      }
	    }

	    var selectedOptions = config.previousOptions || [];
	    this.options = this.setDefaultSelectedValues(this.options, selectedOptions);
	  }

	  var _proto = FilterOptionsConfig.prototype;

	  _proto.setDefaultSelectedValues = function setDefaultSelectedValues(options, selectedOptions) {
	    return map$2(options).call(options, function (o) {
	      return objectSpread({}, o, {
	        selected: selectedOptions.length ? includes$4(selectedOptions).call(selectedOptions, o.label) : o.selected
	      });
	    });
	  };

	  _proto.getSelectedCount = function getSelectedCount() {
	    var _context;

	    return reduce$2(_context = this.options).call(_context, function (numSelected, option) {
	      return option.selected ? numSelected + 1 : numSelected;
	    }, 0);
	  };

	  _proto.validate = function validate() {
	    if (!this.control || !includes$4(SUPPORTED_CONTROLS).call(SUPPORTED_CONTROLS, this.control)) {
	      throw new AnswersComponentError('FilterOptions requires a valid "control" to be provided', 'FilterOptions');
	    }

	    if (!this.options) {
	      throw new AnswersComponentError('FilterOptions component requires options to be provided', 'FilterOptions');
	    }
	  };

	  return FilterOptionsConfig;
	}();
	/**
	 * Renders a set of options, each one representing a filter in a search.
	 */


	var FilterOptionsComponent =
	/*#__PURE__*/
	function (_Component) {
	  inheritsLoose(FilterOptionsComponent, _Component);

	  function FilterOptionsComponent(config, systemConfig) {
	    var _this;

	    if (config === void 0) {
	      config = {};
	    }

	    if (systemConfig === void 0) {
	      systemConfig = {};
	    }

	    _this = _Component.call(this, config, systemConfig) || this;

	    var previousOptions = _this.core.globalStorage.getState(_this.name);

	    _this.core.globalStorage["delete"](_this.name);
	    /**
	     * The component config
	     * @type {FilterOptionsConfig}
	     */


	    _this.config = new FilterOptionsConfig(objectSpread({
	      previousOptions: previousOptions
	    }, config));

	    var selectedCount = _this.config.getSelectedCount();
	    /**
	     * True if the option list is expanded and visible
	     * @type {boolean}
	     */


	    _this.expanded = _this.config.showExpand ? selectedCount > 0 : true;
	    /**
	     * True if all options are shown, false if some are hidden based on config
	     * @type {boolean}
	     */

	    _this.allShown = false;
	    return _this;
	  }

	  /**
	   * The template to render, based on the control
	   * @returns {string}
	   * @override
	   */
	  FilterOptionsComponent.defaultTemplateName = function defaultTemplateName(config) {
	    return "controls/filteroptions";
	  };

	  var _proto2 = FilterOptionsComponent.prototype;

	  _proto2.setState = function setState(data) {
	    var options = this.config.options;

	    if (this.config.showMore && !this.allShown) {
	      var _context2;

	      options = slice$5(_context2 = this.config.options).call(_context2, 0, this.config.showMoreLimit);
	    }

	    var selectedCount = this.config.getSelectedCount();

	    _Component.prototype.setState.call(this, assign$2({}, data, objectSpread({
	      name: this.name.toLowerCase()
	    }, this.config, {
	      showReset: this.config.showReset && selectedCount > 0,
	      expanded: this.expanded,
	      allShown: this.allShown,
	      selectedCount: selectedCount,
	      isSingleOption: this.config.control === 'singleoption',
	      options: options
	    })));
	  };

	  _proto2.onMount = function onMount() {
	    var _this2 = this;

	    DOM.delegate(DOM.query(this._container, ".yxt-FilterOptions-options"), this.config.optionSelector, 'click', function (event) {
	      _this2._updateOption(_parseInt$2(event.target.dataset.index), event.target.checked);
	    });
	    var selectedCount = this.config.getSelectedCount(); // reset button

	    if (this.config.showReset && selectedCount > 0) {
	      var _context3;

	      DOM.on(DOM.query(this._container, '.yxt-FilterOptions-reset'), 'click', bind$6(_context3 = this.clearOptions).call(_context3, this));
	    } // show more/less button


	    if (this.config.showMore) {
	      DOM.on(DOM.query(this._container, '.yxt-FilterOptions-showToggle'), 'click', function () {
	        _this2.allShown = !_this2.allShown;

	        _this2.setState();
	      });
	    } // expand button


	    if (this.config.showExpand) {
	      var legend = DOM.query(this._container, '.yxt-FilterOptions-clickableLegend');
	      DOM.on(legend, 'mousedown', function (click) {
	        if (click.button === 0) {
	          _this2.expanded = !_this2.expanded;

	          _this2.setState();
	        }
	      });
	      DOM.on(legend, 'keydown', function (key) {
	        if (key.key === ' ' || key.key === 'Enter') {
	          key.preventDefault();
	          _this2.expanded = !_this2.expanded;

	          _this2.setState();
	        }
	      });
	    }
	  };

	  _proto2.clearOptions = function clearOptions() {
	    var _context4;

	    this.config.options = map$2(_context4 = this.config.options).call(_context4, function (o) {
	      return assign$2({}, o, {
	        selected: false
	      });
	    });
	    this.updateListeners();
	    this.setState();
	  };

	  _proto2.updateListeners = function updateListeners() {
	    var filter = this._buildFilter();

	    if (this.config.storeOnChange) {
	      this.core.setFilter(this.name, filter);
	    }

	    this.config.onChange(filter);
	  };

	  _proto2._updateOption = function _updateOption(index, selected) {
	    if (this.config.control === 'singleoption') {
	      var _context5;

	      this.config.options = map$2(_context5 = this.config.options).call(_context5, function (o) {
	        return assign$2({}, o, {
	          selected: false
	        });
	      });
	    }

	    this.config.options[index] = assign$2({}, this.config.options[index], {
	      selected: selected
	    });
	    this.updateListeners();
	    this.setState();
	  };

	  _proto2.getFilter = function getFilter() {
	    return this._buildFilter();
	  }
	  /**
	   * Clear all options
	   */
	  ;

	  _proto2.clear = function clear() {
	    var elements = DOM.queryAll(this._container, this.config.optionSelector);

	    forEach$4(elements).call(elements, function (e) {
	      return e.setAttribute('checked', 'false');
	    });

	    this._applyFilter();
	  }
	  /**
	   * Build and return the Filter that represents the current state
	   * @returns {Filter}
	   * @private
	   */
	  ;

	  _proto2._buildFilter = function _buildFilter() {
	    var _context6, _context7, _context8, _context9;

	    var filters = map$2(_context6 = filter$4(_context7 = this.config.options).call(_context7, function (o) {
	      return o.selected;
	    })).call(_context6, function (o) {
	      return filter$4(o) ? filter$4(o) : Filter.equal(o.field, o.value);
	    });

	    this.core.persistentStorage.set(this.name, map$2(_context8 = filter$4(_context9 = this.config.options).call(_context9, function (o) {
	      return o.selected;
	    })).call(_context8, function (o) {
	      return o.label;
	    }));
	    return filters.length > 0 ? Filter.group.apply(Filter, filters) : {};
	  };

	  createClass(FilterOptionsComponent, null, [{
	    key: "type",
	    get: function get() {
	      return 'FilterOptions';
	    }
	  }]);

	  return FilterOptionsComponent;
	}(Component);

	// `Number.parseInt` method
	// https://tc39.github.io/ecma262/#sec-number.parseint
	_export({ target: 'Number', stat: true, forced: Number.parseInt != numberParseInt$1 }, {
	  parseInt: numberParseInt$1
	});

	var _parseInt$3 = path.Number.parseInt;

	var _parseInt$4 = _parseInt$3;

	var _parseInt$5 = _parseInt$4;

	var RangeFilterComponent =
	/*#__PURE__*/
	function (_Component) {
	  inheritsLoose(RangeFilterComponent, _Component);

	  function RangeFilterComponent(config, systemConfig) {
	    var _this;

	    if (config === void 0) {
	      config = {};
	    }

	    if (systemConfig === void 0) {
	      systemConfig = {};
	    }

	    _this = _Component.call(this, config, systemConfig) || this;
	    /**
	     * The field to filter on
	     * @type {string}
	     * @private
	     */

	    _this._field = config.field;
	    /**
	     * The callback function to call when the filter value changes
	     * @type {function}
	     * @private
	     */

	    _this._onChange = config.onChange || function () {};
	    /**
	     * If true, stores the filter to storage on each change
	     * @type {boolean}
	     * @private
	     */


	    _this._storeOnChange = config.storeOnChange === undefined ? true : config.storeOnChange;

	    var minVal = _this.core.globalStorage.getState(_this.name + ".min");

	    if (typeof minVal === 'string') {
	      try {
	        minVal = _parseInt$5(minVal);
	      } catch (e) {}
	    }

	    var maxVal = _this.core.globalStorage.getState(_this.name + ".max");

	    if (typeof minVal === 'string') {
	      try {
	        maxVal = _parseInt$5(maxVal);
	      } catch (e) {}
	    }
	    /**
	     * The current range represented
	     * @type {object}
	     * @private
	     */


	    _this._range = {
	      min: minVal || config.initialMin || 0,
	      max: maxVal || config.initialMax || 10
	    };
	    /**
	     * The title to display for the range control
	     * @type {string}
	     * @private
	     */

	    _this._title = config.title;
	    /**
	     * The optional label to display for the min input
	     * @type {string}
	     * @private
	     */

	    _this._minLabel = config.minLabel || null;
	    /**
	     * The optional label to display for the max input
	     * @type {string}
	     * @private
	     */

	    _this._maxLabel = config.maxLabel || null;
	    /**
	     * The template to render
	     * @type {string}
	     * @private
	     */

	    _this._templateName = "controls/range";
	    return _this;
	  }

	  var _proto = RangeFilterComponent.prototype;

	  _proto.setState = function setState(data) {
	    _Component.prototype.setState.call(this, assign$2({}, data, {
	      name: this.name,
	      title: this._title,
	      minLabel: this._minLabel,
	      maxLabel: this._maxLabel,
	      minValue: this._range.min,
	      maxValue: this._range.max
	    }));
	  };

	  _proto.onCreate = function onCreate() {
	    var _this2 = this;

	    DOM.delegate(this._container, '.js-yext-range', 'change', function (event) {
	      _this2._updateRange(event.target.dataset.key, _parseInt$5(event.target.value));
	    });
	  };

	  _proto.setMin = function setMin(value) {
	    this._updateRange('min', value);
	  };

	  _proto.setMax = function setMax(value) {
	    this._updateRange('max', value);
	  };

	  _proto.getFilter = function getFilter() {
	    return this._buildFilter();
	  }
	  /**
	   * Update the current range state
	   * @param {string} key The range key to update
	   * @param {number} value The new value for the key
	   */
	  ;

	  _proto._updateRange = function _updateRange(key, value) {
	    var _Object$assign2;

	    this._range = assign$2({}, this._range, (_Object$assign2 = {}, _Object$assign2[key] = value, _Object$assign2));
	    this.setState();

	    var filter = this._buildFilter();

	    if (this._storeOnChange) {
	      this.core.setFilter(this.name, filter);
	    }

	    this.core.persistentStorage.set(this.name + ".min", this._range.min);
	    this.core.persistentStorage.set(this.name + ".max", this._range.max);

	    this._onChange(filter);
	  }
	  /**
	   * Build the filter representation of the current state
	   * @returns {Filter}
	   */
	  ;

	  _proto._buildFilter = function _buildFilter() {
	    return Filter.inclusiveRange(this._field, this._range.min, this._range.max);
	  };

	  createClass(RangeFilterComponent, null, [{
	    key: "type",
	    get: function get() {
	      return 'RangeFilter';
	    }
	  }]);

	  return RangeFilterComponent;
	}(Component);

	// `String.prototype.repeat` method implementation
	// https://tc39.github.io/ecma262/#sec-string.prototype.repeat
	var stringRepeat$1 = ''.repeat || function repeat(count) {
	  var str = String(requireObjectCoercible(this));
	  var result = '';
	  var n = toInteger(count);
	  if (n < 0 || n == Infinity) throw RangeError('Wrong number of repetitions');
	  for (;n > 0; (n >>>= 1) && (str += str)) if (n & 1) result += str;
	  return result;
	};

	// https://github.com/tc39/proposal-string-pad-start-end




	var ceil$4 = Math.ceil;

	// `String.prototype.{ padStart, padEnd }` methods implementation
	var createMethod$d = function (IS_END) {
	  return function ($this, maxLength, fillString) {
	    var S = String(requireObjectCoercible($this));
	    var stringLength = S.length;
	    var fillStr = fillString === undefined ? ' ' : String(fillString);
	    var intMaxLength = toLength(maxLength);
	    var fillLen, stringFiller;
	    if (intMaxLength <= stringLength || fillStr == '') return S;
	    fillLen = intMaxLength - stringLength;
	    stringFiller = stringRepeat$1.call(fillStr, ceil$4(fillLen / fillStr.length));
	    if (stringFiller.length > fillLen) stringFiller = stringFiller.slice(0, fillLen);
	    return IS_END ? S + stringFiller : stringFiller + S;
	  };
	};

	var stringPad$1 = {
	  // `String.prototype.padStart` method
	  // https://tc39.github.io/ecma262/#sec-string.prototype.padstart
	  start: createMethod$d(false),
	  // `String.prototype.padEnd` method
	  // https://tc39.github.io/ecma262/#sec-string.prototype.padend
	  end: createMethod$d(true)
	};

	// https://github.com/zloirock/core-js/issues/280


	// eslint-disable-next-line unicorn/no-unsafe-regex
	var stringPadWebkitBug$1 = /Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(engineUserAgent);

	var $padStart$1 = stringPad$1.start;


	// `String.prototype.padStart` method
	// https://tc39.github.io/ecma262/#sec-string.prototype.padstart
	_export({ target: 'String', proto: true, forced: stringPadWebkitBug$1 }, {
	  padStart: function padStart(maxLength /* , fillString = ' ' */) {
	    return $padStart$1(this, maxLength, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	var padStart$1 = entryVirtual('String').padStart;

	var StringPrototype$2 = String.prototype;

	var padStart_1 = function (it) {
	  var own = it.padStart;
	  return typeof it === 'string' || it === StringPrototype$2
	    || (it instanceof String && own === StringPrototype$2.padStart) ? padStart$1 : own;
	};

	var padStart$2 = padStart_1;

	var padStart$3 = padStart$2;

	/**
	 * A filter for a range of dates
	 */

	var DateRangeFilterComponent =
	/*#__PURE__*/
	function (_Component) {
	  inheritsLoose(DateRangeFilterComponent, _Component);

	  function DateRangeFilterComponent(config, systemConfig) {
	    var _context, _context2;

	    var _this;

	    if (config === void 0) {
	      config = {};
	    }

	    if (systemConfig === void 0) {
	      systemConfig = {};
	    }

	    _this = _Component.call(this, config, systemConfig) || this;
	    /**
	     * The api field this filter controls
	     * @type {string}
	     * @private
	     */

	    _this._field = config.field;
	    /**
	     * The title to display for the date range
	     * @type {string}
	     * @private
	     */

	    _this._title = config.title;
	    /**
	     * The optional label to show for the min date input
	     * @type {string}
	     * @private
	     */

	    _this._minLabel = config.minLabel || null;
	    /**
	     * The optional label to show for the max date input
	     * @type {string}
	     * @private
	     */

	    _this._maxLabel = config.maxLabel || null;
	    /**
	     * The callback used when a date is changed
	     * @type {function}
	     * @private
	     */

	    _this._onChange = config.onChange || function () {};
	    /**
	     * If true, stores the filter to storage on each change
	     * @type {boolean}
	     * @private
	     */


	    _this._storeOnChange = config.storeOnChange === undefined ? true : config.storeOnChange;
	    /**
	     * If true, this filter represents an exclusive range, rather than an inclusive one
	     * @type {boolean}
	     * @private
	     */

	    _this._isExclusive = config.isExclusive;
	    /**
	     * The template for this component
	     * @private
	     */

	    _this._templateName = "controls/date";
	    var today = new Date();

	    var todayString = today.getFullYear() + "-" + padStart$3(_context = "" + (today.getMonth() + 1)).call(_context, 2, '0') + "-" + padStart$3(_context2 = "" + today.getDate()).call(_context2, 2, '0');

	    var minDate = _this.core.globalStorage.getState(_this.name + ".min");

	    var maxDate = _this.core.globalStorage.getState(_this.name + ".max");
	    /**
	     * The current date range
	     * @private
	     */


	    _this._date = {
	      min: minDate || config.initialMin || todayString,
	      max: maxDate || config.initialMax || todayString
	    };
	    return _this;
	  }

	  var _proto = DateRangeFilterComponent.prototype;

	  _proto.setState = function setState(data) {
	    _Component.prototype.setState.call(this, assign$2({}, data, {
	      name: this.name,
	      title: this._title,
	      minLabel: this._minLabel,
	      maxLabel: this._maxLabel,
	      dateMin: this._date.min,
	      dateMax: this._date.max
	    }));
	  };

	  _proto.onCreate = function onCreate() {
	    var _this2 = this;

	    DOM.delegate(this._container, '.js-yext-date', 'change', function (event) {
	      _this2._updateRange(event.target.dataset.key, event.target.value);
	    });
	  }
	  /**
	   * Set the min date to the one provided
	   * @param {string} date Date to set in yyyy-mm-dd string format
	   */
	  ;

	  _proto.setMin = function setMin(date) {
	    this._updateRange('min', date);
	  }
	  /**
	   * Set the max date to the one provided
	   * @param {string} date Date to set in yyyy-mm-dd string format
	   */
	  ;

	  _proto.setMax = function setMax(date) {
	    this._updateRange('max', date);
	  };

	  _proto.getFilter = function getFilter() {
	    return this._buildFilter();
	  }
	  /**
	   * Updates the current state of the date range
	   * @param {string} key The key for the date value
	   * @param {string} value The string date value
	   * @private
	   */
	  ;

	  _proto._updateRange = function _updateRange(key, value) {
	    var _Object$assign2;

	    this._date = assign$2({}, this._date, (_Object$assign2 = {}, _Object$assign2[key] = value, _Object$assign2));
	    this.setState();

	    var filter = this._buildFilter();

	    if (this._storeOnChange) {
	      this.core.setFilter(this.name, filter);
	    }

	    this.core.persistentStorage.set(this.name + ".min", this._date.min);
	    this.core.persistentStorage.set(this.name + ".max", this._date.max);

	    this._onChange(filter);
	  }
	  /**
	   * Construct an api filter with the current date state
	   * @private
	   */
	  ;

	  _proto._buildFilter = function _buildFilter() {
	    if (this._date.min === '' || this._date.max === '') {
	      return {};
	    }

	    return this._isExclusive ? Filter.exclusiveRange(this._field, this._date.min, this._date.max) : Filter.inclusiveRange(this._field, this._date.min, this._date.max);
	  };

	  createClass(DateRangeFilterComponent, null, [{
	    key: "type",
	    get: function get() {
	      return 'DateRangeFilter';
	    }
	  }]);

	  return DateRangeFilterComponent;
	}(Component);

	var FacetsConfig =
	/*#__PURE__*/
	function () {
	  function FacetsConfig(config) {
	    /**
	     * The title to display above the controls
	     * @type {string}
	     */
	    this.title = config.title || 'Filters';
	    /**
	     * If true, display the number of results next to each facet
	     * @type {boolean}
	     */

	    this.showCount = config.showCount === undefined ? true : config.showCount;
	    /**
	     * If true, trigger a search on each change to a filter
	     * @type {boolean}
	     */

	    this.searchOnChange = config.searchOnChange || false;
	    /**
	     * If true, show a button to reset for each facet group
	     * @type {boolean}
	     */

	    this.resetFacet = config.resetFacet || false;
	    /**
	     * The label to show for the reset button
	     * @type {string}
	     */

	    this.resetFacetLabel = config.resetFacetLabel || 'reset';
	    /**
	     * If true, show a "reset all" button to reset all facets
	     * @type {boolean}
	     */

	    this.resetFacets = config.resetFacets === undefined ? true : config.resetFacets;
	    /**
	     * The label to show for the "reset all" button
	     * @type {string}
	     */

	    this.resetFacetsLabel = config.resetFacetsLabel || 'reset all';
	    /**
	     * The max number of facets to show before displaying "show more"/"show less"
	     * @type {number}
	     */

	    this.showMoreLimit = config.showMoreLimit || 5;
	    /**
	     * The label to show for displaying more facets
	     * @type {string}
	     */

	    this.showMoreLabel = config.showMoreLabel || 'show more';
	    /**
	     * The label to show for displaying less facets
	     * @type {string}
	     */

	    this.showLessLabel = config.showLessLabel || 'show less';
	    /**
	     * If true, enable hiding excess facets in each group with a "show more"/"show less" button
	     * @type {boolean}
	     */

	    this.showMore = config.showMore === undefined ? true : config.showMore;
	    /**
	     * If true, allow expanding and collapsing each group of facets
	     * @type {boolean}
	     */

	    this.expand = config.expand === undefined ? true : config.expand;
	    /**
	     * If true, display the number of currently applied filters when collapsed
	     * @type {boolean}
	     */

	    this.showNumberApplied = config.showNumberApplied === undefined ? true : config.showNumberApplied;
	    /**
	     * Text to display on the apply button
	     * @type {string}
	     */

	    this.applyLabel = config.applyLabel || 'apply';
	    /**
	     * The controls to use for each field. Each type of filter has a default
	     * $eq : multioption (checkbox)
	     * @type {Object}
	     */

	    this.fieldControls = config.fieldControls || {};
	    /**
	     * The selector of the apply button
	     * @type {string}
	     * @private
	     */

	    this.applyButtonSelector = config.applyButtonSelector || null;
	    this.validate();
	  }

	  var _proto = FacetsConfig.prototype;

	  _proto.validate = function validate() {};

	  return FacetsConfig;
	}();
	/**
	 * Displays a set of dynamic filters returned from the backend
	 * @extends Component
	 */


	var FacetsComponent =
	/*#__PURE__*/
	function (_Component) {
	  inheritsLoose(FacetsComponent, _Component);

	  function FacetsComponent(config, systemConfig) {
	    var _this;

	    if (config === void 0) {
	      config = {};
	    }

	    if (systemConfig === void 0) {
	      systemConfig = {};
	    }

	    _this = _Component.call(this, config, systemConfig) || this;
	    _this.config = new FacetsConfig(config);
	    /**
	     * The vertical key for the search
	     * @type {string}
	     * @private
	     */

	    _this._verticalKey = config.verticalKey; // config.verticalKey || null;

	    /**
	     * The selector of the apply button
	     * @type {string}
	     * @private
	     */

	    _this._applyButtonSelector = config.applyButtonSelector || null;
	    /**
	     * An internal reference for the data storage to listen for updates from the server
	     * @type {string}
	     */

	    _this.moduleId = StorageKeys.DYNAMIC_FILTERS;
	    /**
	     * The filter box that displays the dynamic filters
	     * @type {FilterBoxComponent}
	     * @private
	     */

	    _this._filterbox = null;
	    return _this;
	  }

	  /**
	   * The template to render
	   * @returns {string}
	   * @override
	   */
	  FacetsComponent.defaultTemplateName = function defaultTemplateName() {
	    return 'filters/facets';
	  };

	  var _proto2 = FacetsComponent.prototype;

	  _proto2.remove = function remove() {
	    if (this._filterbox) {
	      this._filterbox.remove();
	    }

	    _Component.prototype.remove.call(this);
	  };

	  _proto2.onMount = function onMount() {
	    var _this2 = this;

	    this.core.enableDynamicFilters();

	    if (this._filterbox) {
	      this._filterbox.remove();
	    }

	    var _this$_state$get = this._state.get(),
	        filters = _this$_state$get.filters;

	    if (!filters) {
	      return;
	    }

	    filters = map$2(filters).call(filters, function (f) {
	      return assign$2({}, f, {
	        type: 'FilterOptions',
	        control: _this2.config.fieldControls[f.fieldId] || 'multioption'
	      });
	    });
	    this._filterbox = this.componentManager.create('FilterBox', assign$2({}, this.config, {
	      parentContainer: this._container,
	      name: this.name + ".filterbox",
	      container: '.js-yxt-Facets',
	      verticalKey: this._verticalKey,
	      resetFilter: this.config.resetFacet,
	      resetFilters: this.config.resetFacets,
	      resetFilterLabel: this.config.resetFacetLabel,
	      resetFiltersLabel: this.config.resetFacetsLabel,
	      isDynamic: true,
	      filters: filters
	    }));

	    this._filterbox.mount();
	  };

	  createClass(FacetsComponent, null, [{
	    key: "type",
	    get: function get() {
	      return 'Facets';
	    }
	  }]);

	  return FacetsComponent;
	}(Component);

	var METERS_PER_MILE = 1609.344;
	var DEFAULT_CONFIG = {
	  /**
	   * The radius, in miles, around the user's location to find results.
	   * If location accuracy is low, a larger radius may be used automatically
	   * @type {number}
	   */
	  radius: 50,

	  /**
	   * The vertical key to use
	   * @type {string}
	   */
	  verticalKey: null,

	  /**
	   * If true, submits a search when the value is changed
	   * @type {boolean}
	   */
	  searchOnChange: false,

	  /**
	   * The title to display
	   * @type {string}
	   */
	  title: 'Location',

	  /**
	   * The label to display
	   * @type {string}
	   */
	  label: 'Location',

	  /**
	   * The icon url to show in the geo button
	   * @type {string}
	   */
	  geoButtonIcon: '',

	  /**
	   * The text to show in the geo button
	   * @type {string}
	   */
	  geoButtonText: 'Use My Location',

	  /**
	   * The text to show when geolocation is enabled
	   * @type {string}
	   */
	  enabledText: 'Current Location',

	  /**
	   * The text to show when loading the user's location
	   * @type {string}
	   */
	  loadingText: 'Finding Your Location...',

	  /**
	   * The text to show if the user's location cannot be found
	   * @type {string}
	   */
	  errorText: 'Could Not Find Your Location',

	  /**
	   * The CSS selector of the toggle button
	   * @type {string}
	   */
	  buttonSelector: '.js-yxt-GeoLocationFilter-button',

	  /**
	   * The CSS selector of the query input
	   * @type {string}
	   */
	  inputSelector: '.js-yxt-GeoLocationFilter-input'
	};
	/**
	 * Renders a button that when clicked adds a static filter representing the user's location
	 * @extends Component
	 */

	var GeoLocationComponent =
	/*#__PURE__*/
	function (_Component) {
	  inheritsLoose(GeoLocationComponent, _Component);

	  function GeoLocationComponent(config, systemConfig) {
	    var _this;

	    if (config === void 0) {
	      config = {};
	    }

	    if (systemConfig === void 0) {
	      systemConfig = {};
	    }

	    _this = _Component.call(this, objectSpread({}, DEFAULT_CONFIG, {}, config), systemConfig) || this;
	    /**
	     * The query string to use for the input box, provided to template for rendering.
	     * @type {string}
	     */

	    _this.query = _this.core.globalStorage.getState(StorageKeys.QUERY + "." + _this.name) || '';

	    _this.core.globalStorage.on('update', StorageKeys.QUERY + "." + _this.name, function (q) {
	      _this.query = q;

	      _this.setState();
	    });
	    /**
	     * The filter to use for the current query
	     * @type {Filter}
	     */


	    _this.filter = _this.core.globalStorage.getState(StorageKeys.FILTER + "." + _this.name) || {};

	    if (typeof filter$4(_this) === 'string') {
	      try {
	        _this.filter = JSON.parse(filter$4(_this));
	      } catch (e) {}
	    }

	    _this.core.globalStorage.on('update', StorageKeys.FILTER + "." + _this.name, function (f) {
	      _this.filter = f;
	    });

	    _this.searchParameters = buildSearchParameters(config.searchParameters);
	    return _this;
	  }

	  GeoLocationComponent.defaultTemplateName = function defaultTemplateName() {
	    return 'controls/geolocation';
	  };

	  var _proto = GeoLocationComponent.prototype;

	  _proto.setState = function setState(data) {
	    var placeholder = '';

	    if (this._enabled) {
	      placeholder = this._config.enabledText;
	    }

	    if (data.geoLoading) {
	      placeholder = this._config.loadingText;
	    }

	    if (data.geoError) {
	      placeholder = this._config.errorText;
	    }

	    _Component.prototype.setState.call(this, objectSpread({}, data, {
	      title: this._config.title,
	      geoEnabled: this._enabled,
	      query: this.query,
	      labelText: this._config.label,
	      enabledText: this._config.enabledText,
	      loadingText: this._config.loadingText,
	      errorText: this._config.errorText,
	      geoButtonIcon: this._config.geoButtonIcon,
	      geoValue: this._enabled || data.geoLoading || data.geoError ? '' : this.query,
	      geoPlaceholder: placeholder,
	      geoButtonText: this._config.geoButtonText
	    }));
	  };

	  _proto.onMount = function onMount() {
	    var _this2 = this;

	    if (this._autocomplete) {
	      this._autocomplete.remove();
	    }

	    this._initAutoComplete(this._config.inputSelector);

	    DOM.on(this._config.buttonSelector, 'click', function () {
	      return _this2._toggleGeoFilter();
	    });
	  }
	  /**
	   * A helper method to wire up our auto complete on an input selector
	   * @param {string} inputSelector CSS selector to bind our auto complete component to
	   * @private
	   */
	  ;

	  _proto._initAutoComplete = function _initAutoComplete(inputSelector) {
	    var _this3 = this;

	    if (this._autocomplete) {
	      this._autocomplete.remove();
	    }

	    this._autocomplete = this.componentManager.create('AutoComplete', {
	      parentContainer: this._container,
	      name: this.name + ".autocomplete",
	      isFilterSearch: true,
	      container: '.js-yxt-GeoLocationFilter-autocomplete',
	      originalQuery: this.query,
	      originalFilter: filter$4(this),
	      inputEl: inputSelector,
	      verticalKey: this._config.verticalKey,
	      searchParameters: this.searchParameters,
	      onSubmit: function onSubmit(query, filter) {
	        _this3.query = query;
	        _this3.filter = Filter.fromResponse(filter);

	        _this3._saveDataToStorage(query, filter$4(_this3));

	        _this3._enabled = false;
	      }
	    });
	  }
	  /**
	   * Toggles the static filter representing the user's location
	   * @private
	   */
	  ;

	  _proto._toggleGeoFilter = function _toggleGeoFilter() {
	    var _this4 = this;

	    if (!navigator.geolocation) {
	      this.setState({
	        geoError: true
	      });
	      return;
	    }

	    if (!this._enabled) {
	      this.setState({
	        geoLoading: true
	      });
	      navigator.geolocation.getCurrentPosition(function (position) {
	        var filter = _this4._buildFilter(position);

	        _this4._saveDataToStorage('', filter, position);

	        _this4._enabled = true;

	        _this4.setState({});

	        _this4.core.persistentStorage["delete"](StorageKeys.QUERY + "." + _this4.name);

	        _this4.core.persistentStorage["delete"](StorageKeys.FILTER + "." + _this4.name);
	      }, function () {
	        return _this4.setState({
	          geoError: true
	        });
	      });
	    }
	  }
	  /**
	   * Saves the provided filter under this component's name
	   * @param {string} query The query to save
	   * @param {Filter} filter The filter to save
	   * @param {Object} position The position to save
	   * @private
	   */
	  ;

	  _proto._saveDataToStorage = function _saveDataToStorage(query, filter, position) {
	    this.core.persistentStorage.set(StorageKeys.QUERY + "." + this.name, query);
	    this.core.persistentStorage.set(StorageKeys.FILTER + "." + this.name, filter);
	    this.core.setFilter(this.name, filter);

	    if (position) {
	      this.core.globalStorage.set(StorageKeys.GEOLOCATION, {
	        lat: position.coords.latitude,
	        lng: position.coords.longitude,
	        radius: position.coords.accuracy
	      });
	    }

	    if (this._config.searchOnChange) {
	      var filters = this.core.globalStorage.getAll(StorageKeys.FILTER);
	      var totalFilter = filters[0];

	      if (filters.length > 1) {
	        totalFilter = Filter.and.apply(Filter, filters);
	      }

	      var searchQuery = this.core.globalStorage.getState(StorageKeys.QUERY) || '';
	      var facetFilter = this.core.globalStorage.getAll(StorageKeys.FACET_FILTER)[0];
	      this.core.persistentStorage["delete"](StorageKeys.SEARCH_OFFSET);
	      this.core.globalStorage["delete"](StorageKeys.SEARCH_OFFSET);
	      this.core.verticalSearch(this._config.verticalKey, {
	        input: searchQuery,
	        filter: stringify$2(totalFilter),
	        facetFilter: stringify$2(facetFilter)
	      });
	    }
	  }
	  /**
	   * Given a position, construct a Filter object
	   * @param {Postition} position The position
	   * @returns {Filter}
	   * @private
	   */
	  ;

	  _proto._buildFilter = function _buildFilter(position) {
	    var _position$coords = position.coords,
	        latitude = _position$coords.latitude,
	        longitude = _position$coords.longitude,
	        accuracy = _position$coords.accuracy;
	    var radius = Math.max(accuracy, this._config.radius * METERS_PER_MILE);
	    return Filter.position(latitude, longitude, radius);
	  };

	  createClass(GeoLocationComponent, null, [{
	    key: "type",
	    get: function get() {
	      return 'GeoLocationFilter';
	    }
	  }]);

	  return GeoLocationComponent;
	}(Component);

	/**
	 * Renders configuration options for sorting Vertical Results.
	 * TODO: how to deal with multiple instances of this component (and filters in general),
	 * ideally "identical" filters/sorts would be synced up.
	 */

	var SortOptionsComponent =
	/*#__PURE__*/
	function (_Component) {
	  inheritsLoose(SortOptionsComponent, _Component);

	  function SortOptionsComponent(config, systemConfig) {
	    var _this;

	    if (config === void 0) {
	      config = {};
	    }

	    if (systemConfig === void 0) {
	      systemConfig = {};
	    }

	    _this = _Component.call(this, assignDefaults(config), systemConfig) || this;
	    _this.options = _this._config.options;
	    _this.selectedOptionIndex = _parseInt$2(_this.core.globalStorage.getState(_this.name)) || 0;
	    _this.options[_this.selectedOptionIndex].isSelected = true;
	    _this.hideExcessOptions = _this._config.showMore && _this.selectedOptionIndex <= _this._config.showMoreLimit;
	    _this.showReset = _this._config.showReset && _this.selectedOptionIndex !== 0;
	    return _this;
	  }

	  var _proto = SortOptionsComponent.prototype;

	  _proto.setState = function setState(data) {
	    var options = this.options;

	    if (this.hideExcessOptions) {
	      var _context;

	      options = slice$5(_context = this.options).call(_context, 0, this._config.showMoreLimit);
	    }

	    _Component.prototype.setState.call(this, assign$2({}, data, {
	      options: options,
	      hideExcessOptions: this.hideExcessOptions,
	      name: this.name,
	      showReset: this.showReset
	    }));
	  };

	  _proto.onMount = function onMount() {
	    var _this2 = this;

	    // Handle radio button selections
	    DOM.on(DOM.query(this._container, '.yxt-SortOptions-fieldSet'), 'change', function (evt) {
	      return _this2.handleOptionSelection(_parseInt$2(evt.target.value));
	    }); // Register more/less button

	    if (this._config.showMore) {
	      DOM.on(DOM.query(this._container, '.yxt-SortOptions-showToggle'), 'click', function () {
	        _this2.hideExcessOptions = !_this2.hideExcessOptions;

	        _this2.setState();
	      });
	    } // Register show reset button


	    if (this.showReset) {
	      DOM.on(DOM.query(this._container, '.yxt-SortOptions-reset'), 'click', function () {
	        return _this2.handleOptionSelection(0);
	      });
	    } // Register apply button


	    if (!this._config.searchOnChange) {
	      DOM.on(DOM.query(this._container, '.yxt-SortOptions-apply'), 'click', function () {
	        return _this2._sortResults();
	      });
	    }
	  };

	  _proto.handleOptionSelection = function handleOptionSelection(optionIndex) {
	    this._updateSelectedOption(optionIndex);

	    if (this._config.searchOnChange) {
	      this._sortResults();
	    }
	  };

	  _proto._updateSelectedOption = function _updateSelectedOption(optionIndex) {
	    this.options[this.selectedOptionIndex].isSelected = false;
	    this.options[optionIndex].isSelected = true;
	    this.selectedOptionIndex = optionIndex;
	    this.showReset = this._config.showReset && optionIndex !== 0;
	    this.setState();
	  };

	  _proto._sortResults = function _sortResults() {
	    var optionIndex = this.selectedOptionIndex;
	    var option = this.options[optionIndex]; // searchOnChange really means sort on change here, just that the sort is done through a search,
	    // This was done to have a consistent option name between filters.

	    this.core.persistentStorage.set(this.name, optionIndex);

	    if (this._config.storeOnChange && optionIndex === 0) {
	      this.core.clearSortBys();
	    } else if (this._config.storeOnChange) {
	      this.core.setSortBys(option);
	    }

	    this._search();

	    this._config.onChange(option);

	    this.setState();
	  }
	  /**
	   * Trigger a search with all filters in storage
	   */
	  ;

	  _proto._search = function _search() {
	    var allFilters = this.core.globalStorage.getAll(StorageKeys.FILTER);
	    var totalFilter = allFilters.length > 1 ? Filter.and.apply(Filter, allFilters) : allFilters[0];
	    var input = this.core.globalStorage.getState(StorageKeys.QUERY) || '';
	    var facetFilter = this.core.globalStorage.getAll(StorageKeys.FACET_FILTER)[0];
	    this.core.persistentStorage["delete"](StorageKeys.SEARCH_OFFSET);
	    this.core.globalStorage["delete"](StorageKeys.SEARCH_OFFSET);
	    this.core.verticalSearch(this._config.verticalKey, {
	      input: input,
	      filter: stringify$2(totalFilter),
	      facetFilter: stringify$2(facetFilter)
	    });
	  };

	  SortOptionsComponent.defaultTemplateName = function defaultTemplateName() {
	    return 'controls/sortoptions';
	  };

	  createClass(SortOptionsComponent, null, [{
	    key: "type",
	    get: function get() {
	      return 'SortOptions';
	    }
	  }]);

	  return SortOptionsComponent;
	}(Component);

	function assignDefaults(config) {
	  var _context2;

	  var updatedConfig = assign$2({}, config); // Optional, The label used for the “default” sort (aka the sort specified by the experience config").


	  updatedConfig.defaultSortLabel = config.defaultSortLabel || 'Best Match'; // Array of search options, where an option has type, label, and if is type FIELD also a label and direction

	  if (!config.options) {
	    throw new AnswersBasicError('config.options are required', 'SortOptions');
	  }

	  var OPTION_TYPES = ['FIELD', 'RELEVANCE', 'ENTITY_DISTANCE'];

	  if (!isArray$4(config.options)) {
	    throw new AnswersBasicError('options must be an array of objects', 'SortOptions');
	  }

	  updatedConfig.options = map$2(_context2 = config.options).call(_context2, function (option) {
	    if (!option.label || !option.type) {
	      throw new AnswersBasicError("option.label and option.type are required option " + option, 'SortOptions');
	    }

	    var newOption = {
	      isSelected: false
	    };
	    newOption.label = option.label;
	    newOption.type = option.type;
	    var isField = indexOf$6(OPTION_TYPES).call(OPTION_TYPES, newOption.type) === 0;

	    if (isField && option.field && option.direction) {
	      newOption.field = option.field;
	      newOption.direction = option.direction;
	    } else if (isField) {
	      throw new AnswersBasicError("option.field and option.direction are required for option: " + option, 'SortOptions');
	    }

	    return newOption;
	  }); // Add default option to the front of the options array

	  updatedConfig.options.unshift({
	    label: updatedConfig.defaultSortLabel,
	    isSelected: false
	  }); // Optional, the selector used for options in the template

	  updatedConfig.optionSelector = config.optionSelector || 'yxt-SortOptions-optionSelector'; // Optional, if true, triggers a search on each change to a filter,
	  // if false the component also renders an apply button, defaults to false

	  updatedConfig.searchOnChange = config.searchOnChange === undefined ? true : config.searchOnChange; // Optional, show a reset button. Clicking it will always return the user to the default sorting option.

	  updatedConfig.showReset = config.showReset || false; // Optional, the label to use for the reset button

	  updatedConfig.resetLabel = config.resetLabel || 'reset'; // Optional, the max number of filter options to show before collapsing extras

	  updatedConfig.showMoreLimit = config.showMoreLimit || 5; // Optional, allow collapsing excess sort options after a limit

	  updatedConfig.showMore = config.showMore === undefined ? true : config.showMore;
	  updatedConfig.showMore = updatedConfig.showMore && updatedConfig.options.length > updatedConfig.showMoreLimit; // Optional, the label to show for displaying more options

	  updatedConfig.showMoreLabel = config.showMoreLabel || 'Show more'; // Optional, the label to show for displaying less options

	  updatedConfig.showLessLabel = config.showLessLabel || 'Show less'; // Optional, the callback function to call when changed

	  updatedConfig.onChange = config.onChange || function () {}; // Optional, Top title for the sorting component


	  updatedConfig.label = config.label || 'Sorting'; // Optional, when true component does not update globalStorage
	  // possibly delegating that to a higher-order/composite component

	  updatedConfig.storeOnChange = config.storeOnChange === undefined ? true : config.storeOnChange;
	  updatedConfig.applyLabel = config.applyLabel || 'Apply';
	  updatedConfig.verticalKey = config.verticalKey || this.core.globalStorage.getState(StorageKeys.SEARCH_CONFIG).verticalKey;

	  if (!updatedConfig.verticalKey) {
	    throw new AnswersBasicError('vertical key is required', 'SortOptions');
	  } // note: showExpand and showNumberApplied explicitly not included, on the grounds that
	  // sorting should always be exposed to the user if added.


	  return updatedConfig;
	}

	/**
	 * EventTypes are explicit strings defined
	 * for what the server expects for analytics.
	 *
	 * @enum
	 */

	var EventTypes = {
	  THUMBS_UP: 'THUMBS_UP',
	  THUMBS_DOWN: 'THUMBS_DOWN'
	};

	var DirectAnswerComponent =
	/*#__PURE__*/
	function (_Component) {
	  inheritsLoose(DirectAnswerComponent, _Component);

	  function DirectAnswerComponent(config, systemConfig) {
	    var _this;

	    if (config === void 0) {
	      config = {};
	    }

	    if (systemConfig === void 0) {
	      systemConfig = {};
	    }

	    _this = _Component.call(this, config, systemConfig) || this;
	    /**
	     * Recieve updates from storage based on this index
	     * @type {StorageKey}
	     */

	    _this.moduleId = StorageKeys.DIRECT_ANSWER;
	    /**
	     * The form used for submitting the feedback
	     * @type {string}
	     */

	    _this._formEl = config.formEl || '.js-directAnswer-feedback-form';
	    /**
	     * The `thumbs up` css selector to bind ui interaction to for reporting
	     * @type {string}
	     */

	    _this._thumbsUpSelector = config.thumbsUpSelector || '.js-directAnswer-thumbUp';
	    /**
	     * The `thumbs down` css selector to bind ui interaction to for reporting
	     * @type {string}
	     */

	    _this._thumbsDownSelector = config.thumbsDownSelector || '.js-directAnswer-thumbDown';
	    /**
	     * The display text for the View Details click to action link
	     * @type {string}
	     */

	    _this._viewDetailsText = config.viewDetailsText || 'View Details';
	    return _this;
	  }

	  /**
	   * The template to render
	   * @returns {string}
	   * @override
	   */
	  DirectAnswerComponent.defaultTemplateName = function defaultTemplateName(config) {
	    return 'results/directanswer';
	  }
	  /**
	   * beforeMount, only display the direct answer component if it has data
	   */
	  ;

	  var _proto = DirectAnswerComponent.prototype;

	  _proto.beforeMount = function beforeMount() {
	    if (!this.hasState('answer')) {
	      return false;
	    }

	    return true;
	  }
	  /**
	   * When the DOM is constructed,
	   * we want to wire up the behavior for interacting with the quality feedback reporting (thumbsup/down)
	   */
	  ;

	  _proto.onMount = function onMount() {
	    var _this2 = this;

	    // Avoid bindings if the feedback has previously been submitted
	    if (this.getState('feedbackSubmitted') === true) {
	      return this;
	    } // For WCAG compliance, the feedback should be a submittable form


	    DOM.on(this._formEl, 'submit', function (e) {
	      var formEl = e.target;
	      var checkedValue = DOM.query(formEl, 'input:checked').value === 'true';

	      _this2.reportQuality(checkedValue);

	      _this2.updateState({
	        'feedbackSubmitted': true
	      });
	    }); // Is this actually necessary? I guess it's only necessary if the
	    // submit button is hidden.

	    DOM.on(this._thumbsUpSelector, 'click', function () {
	      DOM.trigger(_this2._formEl, 'submit');
	    });
	    DOM.on(this._thumbsDownSelector, 'click', function () {
	      DOM.trigger(_this2._formEl, 'submit');
	    });
	  }
	  /**
	   * updateState enables for partial updates (the delta between the old and new)
	   * @type {object} The new state to apply to the old
	   */
	  ;

	  _proto.updateState = function updateState(state) {
	    if (state === void 0) {
	      state = {};
	    }

	    var newState = assign$2({}, this.getState(), state);

	    this.setState(newState);
	  };

	  _proto.setState = function setState(data) {
	    return _Component.prototype.setState.call(this, assign$2({}, data, {
	      eventOptions: this.eventOptions(data),
	      viewDetailsText: this._viewDetailsText
	    }));
	  };

	  _proto.eventOptions = function eventOptions(data) {
	    if (!data || keys$9(data).length === 0) {
	      return data;
	    }

	    return stringify$2({
	      verticalConfigId: data.relatedItem.verticalConfigId,
	      searcher: 'UNIVERSAL',
	      entityId: data.relatedItem.data.id,
	      ctaLabel: this._viewDetailsText.toUpperCase().replace(' ', '_')
	    });
	  }
	  /**
	   * reportQuality will send the quality feedback to analytics
	   * @param {boolean} isGood true if the answer is what you were looking for
	   */
	  ;

	  _proto.reportQuality = function reportQuality(isGood) {
	    var eventType = isGood === true ? EventTypes.THUMBS_UP : EventTypes.THUMBS_DOWN;
	    var event = new AnalyticsEvent(eventType).addOptions({
	      'directAnswer': true
	    });
	    this.analyticsReporter.report(event);
	  };

	  createClass(DirectAnswerComponent, null, [{
	    key: "type",
	    get: function get() {
	      return 'DirectAnswer';
	    }
	  }]);

	  return DirectAnswerComponent;
	}(Component);

	var ResultsItemComponent =
	/*#__PURE__*/
	function (_Component) {
	  inheritsLoose(ResultsItemComponent, _Component);

	  function ResultsItemComponent(opts, systemConfig) {
	    var _this;

	    if (opts === void 0) {
	      opts = {};
	    }

	    if (systemConfig === void 0) {
	      systemConfig = {};
	    }

	    _this = _Component.call(this, opts, systemConfig) || this;
	    /**
	     * verticalConfigId used for analytics and passed to children
	     * @type {string}
	     * @private
	     */

	    _this._verticalConfigId = opts.verticalConfigId;
	    /**
	     * isUniversal is used for analytics and passed to children and is set to
	     * true if this component is added by the UniversalResultsComponent
	     * @type {boolean}
	     * @private
	     */

	    _this._isUniversal = opts.isUniversal || false;
	    return _this;
	  }

	  /**
	   * The template to render
	   * @returns {string}
	   * @override
	   */
	  ResultsItemComponent.defaultTemplateName = function defaultTemplateName(config) {
	    return 'results/resultsitem';
	  };

	  ResultsItemComponent.areDuplicateNamesAllowed = function areDuplicateNamesAllowed() {
	    return true;
	  }
	  /**
	   * helper to construct the eventOptions object for the title link
	   * @param entityId The ID of the result item, if present
	   * @param url The url of the result item, if present
	   * @returns {string}
	   */
	  ;

	  var _proto = ResultsItemComponent.prototype;

	  _proto.eventOptions = function eventOptions(entityId, url) {
	    var options = {
	      verticalConfigId: this._verticalConfigId,
	      searcher: this._isUniversal ? 'UNIVERSAL' : 'VERTICAL'
	    };

	    if (entityId) {
	      options.entityId = entityId;
	    } else {
	      options.url = url;
	    }

	    return stringify$2(options);
	  }
	  /**
	   * passes eventOptions to the viewModel
	   * @override
	   * @param data
	   * @returns {ResultsItemComponent}
	   */
	  ;

	  _proto.setState = function setState(data) {
	    return _Component.prototype.setState.call(this, assign$2(data, {
	      eventOptions: this.eventOptions(data.id, data.link)
	    }));
	  };

	  createClass(ResultsItemComponent, null, [{
	    key: "type",
	    get: function get() {
	      return 'ResultsItemComponent';
	    }
	  }]);

	  return ResultsItemComponent;
	}(Component);

	var LocationResultsItemComponent =
	/*#__PURE__*/
	function (_ResultsItemComponent) {
	  inheritsLoose(LocationResultsItemComponent, _ResultsItemComponent);

	  function LocationResultsItemComponent(opts, systemConfig) {
	    if (opts === void 0) {
	      opts = {};
	    }

	    if (systemConfig === void 0) {
	      systemConfig = {};
	    }

	    return _ResultsItemComponent.call(this, opts, systemConfig) || this;
	  }

	  /**
	   * The template to render
	   * @returns {string}
	   * @override
	   */
	  LocationResultsItemComponent.defaultTemplateName = function defaultTemplateName(config) {
	    return 'results/locationresultsitem';
	  };

	  LocationResultsItemComponent.areDuplicateNamesAllowed = function areDuplicateNamesAllowed() {
	    return true;
	  };

	  createClass(LocationResultsItemComponent, null, [{
	    key: "type",
	    get: function get() {
	      return 'LocationResultsItemComponent';
	    }
	  }]);

	  return LocationResultsItemComponent;
	}(ResultsItemComponent);

	var EventResultsItemComponent =
	/*#__PURE__*/
	function (_ResultsItemComponent) {
	  inheritsLoose(EventResultsItemComponent, _ResultsItemComponent);

	  function EventResultsItemComponent(opts, systemConfig) {
	    if (opts === void 0) {
	      opts = {};
	    }

	    if (systemConfig === void 0) {
	      systemConfig = {};
	    }

	    return _ResultsItemComponent.call(this, opts, systemConfig) || this;
	  }

	  /**
	   * The template to render
	   * @returns {string}
	   * @override
	   */
	  EventResultsItemComponent.defaultTemplateName = function defaultTemplateName(config) {
	    return 'results/eventresultsitem';
	  };

	  EventResultsItemComponent.areDuplicateNamesAllowed = function areDuplicateNamesAllowed() {
	    return true;
	  };

	  createClass(EventResultsItemComponent, null, [{
	    key: "type",
	    get: function get() {
	      return 'EventResultsItemComponent';
	    }
	  }]);

	  return EventResultsItemComponent;
	}(ResultsItemComponent);

	var PeopleResultsItemComponent =
	/*#__PURE__*/
	function (_ResultsItemComponent) {
	  inheritsLoose(PeopleResultsItemComponent, _ResultsItemComponent);

	  function PeopleResultsItemComponent(opts, systemOpts) {
	    if (opts === void 0) {
	      opts = {};
	    }

	    if (systemOpts === void 0) {
	      systemOpts = {};
	    }

	    return _ResultsItemComponent.call(this, opts, systemOpts) || this;
	  }

	  /**
	   * The template to render
	   * @returns {string}
	   * @override
	   */
	  PeopleResultsItemComponent.defaultTemplateName = function defaultTemplateName(config) {
	    return 'results/peopleresultsitem';
	  };

	  PeopleResultsItemComponent.areDuplicateNamesAllowed = function areDuplicateNamesAllowed() {
	    return true;
	  };

	  createClass(PeopleResultsItemComponent, null, [{
	    key: "type",
	    get: function get() {
	      return 'PeopleResultsItemComponent';
	    }
	  }]);

	  return PeopleResultsItemComponent;
	}(ResultsItemComponent);

	/** @module MapProvider */

	/**
	 * A MapProvider is an interface that represents that should be implemented
	 * in order to integrate with a Third Party Map provider for
	 * interactive maps. MapProviders are used by the MapComponent.
	 *
	 * Implementations should extend this interface.
	 */
	var MapProvider =
	/*#__PURE__*/
	function () {
	  function MapProvider(config) {
	    if (config === void 0) {
	      config = {};
	    }

	    /**
	     * The API Key used for interacting with the map provider
	     * @type {string}
	     */
	    this._apiKey = config.apiKey;
	    /**
	     * The zoom level of the map, defaults to 14
	     * @type {number}
	     */

	    this._zoom = config.zoom || 14;
	    /**
	     * The default coordinates to display if there are no results returned
	     * Only used if showEmptyMap is set to true
	     * @type {Object}
	     */

	    this._defaultPosition = config.defaultPosition || {
	      lat: 37.0902,
	      lng: -95.7129
	    };
	    /**
	     * Determines if an empty map should be shown when there are no results
	     * @type {boolean}
	     */

	    this._showEmptyMap = config.showEmptyMap || false;
	    /**
	     * A reference to the underlying map instance, created by the external lib.
	     * @type {number}
	     */

	    this._map = null;
	    /**
	     * Temporary boolean tracking whether or not the external JS library is loaded (see TODO below)
	     * @type {boolean}
	     */

	    this._isLoaded = false;
	    /**
	     * Callback to invoke when a pin is clicked. The clicked item(s) are passed to the callback
	     * @type {function}
	     */

	    this._onPinClick = config.onPinClick || null;
	    /**
	     * Callback to invoke once the Javascript is loaded
	     * @type {function}
	     */

	    this._onLoaded = config.onLoaded || function () {};
	    /**
	     * The custom configuration override to use for the map markers
	     * @type {Object|Function}
	     */


	    this._pinConfig = typeof config.pin === 'function' ? config.pin : assign$2(MapProvider.DEFAULT_PIN_CONFIG, config.pin);
	    /**
	     * Determines whether or not to collapse pins at the same lat/lng
	     * @type {boolean}
	     */

	    this._collapsePins = config.collapsePins || false;
	  }
	  /**
	   * The default configuration to use for the map markers
	   * @type {Object}
	   * TODO(billy) Create a configuration model
	   */


	  var _proto = MapProvider.prototype;

	  _proto.onLoaded = function onLoaded(cb) {
	    if (typeof cb !== 'function') {
	      return;
	    }

	    this._onLoaded = cb;

	    if (this.isLoaded()) {
	      this._onLoaded();
	    }
	  };

	  _proto.isLoaded = function isLoaded() {
	    return this._isLoaded;
	  };

	  _proto.loadJS = function loadJS() {
	    throw new Error('Unimplemented Method: loadJS');
	  };

	  _proto.init = function init(mapData) {
	    // TODO(billy) This should be based off a promise that gets created from loadJS
	    throw new Error('Unimplemented Method: init');
	  }
	  /**
	   * Given a list of markers, combine markers with the same lat/lng into a single marker
	   * @param {object[]} markers The markers to collapse
	   */
	  ;

	  _proto._collapseMarkers = function _collapseMarkers(markers) {
	    var locationToItem = {};

	    forEach$4(markers).call(markers, function (m) {
	      locationToItem["" + m.latitude + m.longitude] ? locationToItem["" + m.latitude + m.longitude].push(m) : locationToItem["" + m.latitude + m.longitude] = [m];
	    });

	    var collapsedMarkers = [];

	    for (var _i = 0, _Object$entries = entries$2(locationToItem); _i < _Object$entries.length; _i++) {
	      var _Object$entries$_i = _Object$entries[_i],
	          _markers = _Object$entries$_i[1];

	      if (_markers.length > 1) {
	        var collapsedMarker = {
	          item: map$2(_markers).call(_markers, function (m) {
	            return m.item;
	          }),
	          label: _markers.length,
	          latitude: _markers[0].latitude,
	          longitude: _markers[0].longitude
	        };
	        collapsedMarkers.push(collapsedMarker);
	      } else {
	        collapsedMarkers.push(_markers[0]);
	      }
	    }

	    return collapsedMarkers;
	  };

	  createClass(MapProvider, null, [{
	    key: "DEFAULT_PIN_CONFIG",
	    get: function get() {
	      return {
	        icon: {
	          anchor: null,
	          // e.g. { x: 1, y: 1 }
	          svg: null,
	          url: null,
	          scaledSize: null // e.g. { w: 20, h: 20 }

	        },
	        labelType: 'numeric'
	      };
	    }
	  }]);

	  return MapProvider;
	}();

	/* global google */

	/**
	 * GoogleMapProvider is an implementation of a MapProvider
	 * that handles the integration with the third party API to expose maps.
	 * @extends MapProvider
	 */

	var GoogleMapProvider =
	/*#__PURE__*/
	function (_MapProvider) {
	  inheritsLoose(GoogleMapProvider, _MapProvider);

	  function GoogleMapProvider(opts) {
	    var _this;

	    _this = _MapProvider.call(this, opts) || this; // normalize because google's zoom is effectively 1 unit of difference away from mapbox zoom

	    _this._zoomOffset = 1;
	    _this._zoom += _this._zoomOffset;
	    _this._clientId = opts.clientId;
	    _this._signature = opts.signature;

	    if (!_this.hasValidClientCredentials() && !_this._apiKey) {
	      throw new Error('GoogleMapsProvider: Missing `apiKey` or {`clientId`, `signature`}');
	    }

	    return _this;
	  }

	  var _proto = GoogleMapProvider.prototype;

	  _proto.loadJS = function loadJS() {
	    var self = this;

	    var onLoad = function onLoad() {
	      if (typeof self._onLoaded === 'function') {
	        self._onLoaded();
	      }
	    };

	    if (typeof google !== 'undefined') {
	      self._isLoaded = true;
	      onLoad();
	      return;
	    }

	    var script = DOM.query('#yext-map-js');

	    if (script) {
	      var onLoadFunc = script.onload;

	      script.onload = function () {
	        onLoadFunc();
	        onLoad();
	      };

	      return;
	    }

	    script = DOM.createEl('script', {
	      id: 'yext-map-js',
	      onload: function onload() {
	        self._isLoaded = true;
	        onLoad();
	      },
	      async: true,
	      src: "https://maps.googleapis.com/maps/api/js?" + self.generateCredentials()
	    });
	    DOM.append('body', script);
	  };

	  _proto.generateCredentials = function generateCredentials() {
	    if (this.hasValidClientCredentials()) {
	      return "client=" + this._clientId;
	    } else {
	      return "key=" + this._apiKey;
	    }
	  };

	  _proto.hasValidClientCredentials = function hasValidClientCredentials() {
	    return this._clientId;
	  };

	  _proto.init = function init(el, mapData) {
	    var _this2 = this;

	    if ((!mapData || mapData.mapMarkers.length <= 0) && !this._showEmptyMap) {
	      this._map = null;
	      return this;
	    } // NOTE(billy) This timeout is a hack for dealing with async nature.
	    // Only here for demo purposes, so we'll fix later.


	    setTimeout$2(function () {
	      var container = DOM.query(el);
	      _this2.map = new google.maps.Map(container, {
	        zoom: _this2._zoom,
	        center: _this2.getCenterMarker(mapData)
	      }); // Apply our search data to our GoogleMap

	      if (mapData && mapData.mapMarkers.length) {
	        (function () {
	          var collapsedMarkers = _this2._collapsePins ? _this2._collapseMarkers(mapData.mapMarkers) : mapData.mapMarkers;
	          var googleMapMarkerConfigs = GoogleMapMarkerConfig.from(collapsedMarkers, _this2._pinConfig, map$2(_this2));
	          var bounds = new google.maps.LatLngBounds();

	          var _loop = function _loop(i) {
	            var marker = new google.maps.Marker(googleMapMarkerConfigs[i]);

	            if (_this2._onPinClick) {
	              marker.addListener('click', function () {
	                return _this2._onPinClick(collapsedMarkers[i].item);
	              });
	            }

	            bounds.extend(marker.position);
	          };

	          for (var i = 0; i < googleMapMarkerConfigs.length; i++) {
	            _loop(i);
	          }

	          if (googleMapMarkerConfigs.length >= 2) {
	            map$2(_this2).fitBounds(bounds);
	          }
	        })();
	      }
	    }, 100);
	  };

	  _proto.getCenterMarker = function getCenterMarker(mapData) {
	    return mapData && mapData.mapCenter && mapData.mapCenter.longitude && mapData.mapCenter.latitude ? {
	      lng: mapData.mapCenter.longitude,
	      lat: mapData.mapCenter.latitude
	    } : {
	      lng: this._defaultPosition.lng,
	      lat: this._defaultPosition.lat
	    };
	  };

	  return GoogleMapProvider;
	}(MapProvider); // TODO(billy) Move to own class
	var GoogleMapMarkerConfig =
	/*#__PURE__*/
	function () {
	  function GoogleMapMarkerConfig(opts) {
	    /**
	     * A reference to the google map, that the marker is appended to
	     * @type {GoogleMap}
	     */
	    this.map = map$2(opts) || undefined;
	    /**
	     * The coordinates of the marker (lat/lng)
	     * @type {Object}
	     */

	    this.position = opts.position || {
	      lat: undefined,
	      lng: undefined
	    };
	    /**
	     * The properties/settings of the icon used for the marker
	     * e.g. {
	     *        anchor: { x: 0, y: 0 }
	     *        url: 'path/to/url.jpg'
	     *        scaledSize: { w: 0, h: 0 }
	     *       }
	     *
	     * @type {object}
	     */

	    this.icon = opts.icon || undefined;
	    /**
	     * The label of the marker to use
	     * @type {string}
	     */

	    this.label = opts.label || undefined;
	  }
	  /**
	   * Serializes an array of marker configs
	   * @param {GoogleMapMarkerConfig[]} googleMapMarkerConfigs
	   * @returns {string[]}
	   */


	  GoogleMapMarkerConfig.serialize = function serialize(googleMapMarkerConfigs) {
	    var serializedMarkers = [];

	    forEach$4(googleMapMarkerConfigs).call(googleMapMarkerConfigs, function (marker) {
	      serializedMarkers.push("markers=label:" + marker.label + "|" + marker.position.lat + "," + marker.position.lng);
	    });

	    return serializedMarkers.join('&');
	  }
	  /**
	   * Converts the storage data model of markers into GoogleAPIMarker
	   * @param {object[]} markers The data of the marker
	   * @param {(Object|function)} pinConfig The configuration to apply to the marker
	   * @param {GoogleMap} map reference to the google map to apply the marker to
	   * @returns {GoogleMapMarkerConfig[]}
	   */
	  ;

	  GoogleMapMarkerConfig.from = function from(markers, pinConfig, map) {
	    var googleMapMarkerConfigs = [];

	    if (!isArray$4(markers)) {
	      markers = [markers];
	    }

	    forEach$4(markers).call(markers, function (marker) {
	      // Support configuration as a function
	      var pinConfigObj = pinConfig;

	      if (typeof pinConfig === 'function') {
	        pinConfigObj = pinConfig(marker.item, MapProvider.DEFAULT_PIN_CONFIG, marker);
	      } // Transform our Configuration Object into the expected
	      // Google API format.


	      var icon = {};

	      if (pinConfigObj.anchor) {
	        icon.anchor = google.maps.Point(pinConfigObj.anchor.x, pinConfigObj.anchor.y);
	      }

	      if (pinConfigObj.scaledSize) {
	        icon.scaledSize = new google.maps.Size(pinConfigObj.scaledSize.w, pinConfigObj.scaledSize.h);
	      }

	      if (pinConfigObj.url) {
	        icon.url = pinConfigObj.url;
	      }

	      if (pinConfigObj.svg) {
	        icon.url = "data:image/svg+xml;charset=utf-8, " + encodeURIComponent(pinConfigObj.svg);
	      }

	      var label;

	      if (pinConfigObj.label) {
	        label = pinConfigObj.label;
	      } else {
	        label = marker.label.toString();
	      } // NOTE(billy) Google maps doesn't handle empty icon objects nicely
	      // Make google maps happy if no settings for icon are provided;


	      if (keys$9(icon).length === 0) {
	        icon = undefined;
	      }

	      googleMapMarkerConfigs.push(new GoogleMapMarkerConfig({
	        map: map,
	        position: {
	          lat: marker.latitude,
	          lng: marker.longitude
	        },
	        icon: icon,
	        label: label
	      }));
	    });

	    return googleMapMarkerConfigs;
	  };

	  return GoogleMapMarkerConfig;
	}();

	/* global mapboxgl */

	/**
	 * MapBoxMapProvider is an implementation of a MapProvider
	 * that handles the integration with the third party API to expose maps.
	 * @extends MapProvider
	 */

	var MapBoxMapProvider =
	/*#__PURE__*/
	function (_MapProvider) {
	  inheritsLoose(MapBoxMapProvider, _MapProvider);

	  function MapBoxMapProvider() {
	    return _MapProvider.apply(this, arguments) || this;
	  }

	  var _proto = MapBoxMapProvider.prototype;

	  /**
	   * Load the external JS Library
	   * @param {function} onLoad An optional callback to invoke once the JS is loaded.
	   */
	  _proto.loadJS = function loadJS(onLoad) {
	    var _this = this;

	    var script = DOM.createEl('script', {
	      id: 'yext-map-js',
	      onload: function onload() {
	        _this._isLoaded = true;
	        mapboxgl.accessToken = _this._apiKey;

	        if (typeof onLoad === 'function') {
	          onLoad();
	        }

	        if (typeof _this._onLoaded === 'function') {
	          _this._onLoaded();
	        }
	      },
	      async: true,
	      src: 'https://api.mapbox.com/mapbox-gl-js/v0.44.1/mapbox-gl.js'
	    });
	    var css = DOM.createEl('link', {
	      id: 'yext-map-css',
	      rel: 'stylesheet',
	      href: 'https://api.mapbox.com/mapbox-gl-js/v0.44.1/mapbox-gl.css'
	    });
	    DOM.append('body', css);
	    DOM.append('body', script);
	  };

	  _proto.init = function init(el, mapData) {
	    var _this2 = this;

	    if ((!mapData || mapData.mapMarkers.length <= 0) && !this._showEmptyMap) {
	      this._map = null;
	      return this;
	    }

	    var container = DOM.query(el);
	    this._map = new mapboxgl.Map({
	      container: container,
	      zoom: this._zoom,
	      style: 'mapbox://styles/mapbox/streets-v9',
	      center: this.getCenterMarker(mapData)
	    });

	    if (mapData && mapData.mapMarkers.length) {
	      (function () {
	        var collapsedMarkers = _this2._collapsePins ? _this2._collapseMarkers(mapData.mapMarkers) : mapData.mapMarkers;
	        var mapboxMapMarkerConfigs = MapBoxMarkerConfig.from(collapsedMarkers, _this2._pinConfig, _this2._map);
	        var bounds = new mapboxgl.LngLatBounds();

	        var _loop = function _loop(i) {
	          var wrapper = mapboxMapMarkerConfigs[i].wrapper;
	          var coords = new mapboxgl.LngLat(mapboxMapMarkerConfigs[i].position.longitude, mapboxMapMarkerConfigs[i].position.latitude);
	          var marker = new mapboxgl.Marker(wrapper).setLngLat(coords);
	          bounds.extend(marker.getLngLat());
	          marker.addTo(_this2._map);

	          if (_this2._onPinClick) {
	            marker.getElement().addEventListener('click', function () {
	              return _this2._onPinClick(collapsedMarkers[i].item);
	            });
	          }
	        };

	        for (var i = 0; i < mapboxMapMarkerConfigs.length; i++) {
	          _loop(i);
	        }

	        if (mapboxMapMarkerConfigs.length >= 2) {
	          _this2._map.fitBounds(bounds, {
	            padding: 50
	          });
	        }
	      })();
	    }
	  };

	  _proto.getCenterMarker = function getCenterMarker(mapData) {
	    return mapData && mapData.mapCenter && mapData.mapCenter.longitude && mapData.mapCenter.latitude ? [mapData.mapCenter.longitude, mapData.mapCenter.latitude] : {
	      lng: this._defaultPosition.lng,
	      lat: this._defaultPosition.lat
	    };
	  };

	  return MapBoxMapProvider;
	}(MapProvider);
	var MapBoxMarkerConfig =
	/*#__PURE__*/
	function () {
	  function MapBoxMarkerConfig(opts) {
	    /**
	     * A reference to the mapbox map, that the marker is appended to
	     * @type {MapBox}
	     */
	    this.map = map$2(opts) || undefined;
	    /**
	     * The coordinates of the marker (lat/lng)
	     * @type {Object}
	     */

	    this.position = opts.position || {
	      latitude: undefined,
	      longitude: undefined
	    };
	    /**
	     * The html element to be used as the map marker
	     * @type {object}
	     */

	    this.wrapper = opts.wrapper || undefined;
	    /**
	     * The label of the marker to use
	     * @type {string}
	     */

	    this.label = opts.label || undefined;
	    /**
	     * The url of the pin for the static map
	     * @type {string}
	     */

	    this.staticMapPin = opts.staticMapPin || undefined;
	  }
	  /**
	   * Serializes an array of marker configs
	   * @param {MapBoxMarkerConfig[]} mapboxMapMarkerConfigs
	   * @returns {string[]}
	   */


	  MapBoxMarkerConfig.serialize = function serialize(mapboxMapMarkerConfigs) {
	    var serializedMarkers = [];

	    forEach$4(mapboxMapMarkerConfigs).call(mapboxMapMarkerConfigs, function (marker) {
	      if (marker.staticMapPin) {
	        serializedMarkers.push("url-" + marker.staticMapPin + "(" + marker.position.longitude + "," + marker.position.latitude + ")");
	      } else {
	        serializedMarkers.push("pin-s-" + marker.label + "(" + marker.position.longitude + "," + marker.position.latitude + ")");
	      }
	    });

	    return serializedMarkers.join(',');
	  }
	  /**
	   * Converts the storage data model of markers into MapBoxMarkerConfig
	   * @param {MapBox} A reference to the mapbox map to apply the marker to
	   * @param {object[]} markers The data of the marker
	   * @param {Object} pinConfig The configuration to apply to the marker
	   * @returns {MapBoxMarkerConfig[]}
	   */
	  ;

	  MapBoxMarkerConfig.from = function from(markers, pinConfig, map) {
	    var mapboxMapMarkerConfigs = [];

	    if (!isArray$4(markers)) {
	      markers = [markers];
	    }

	    forEach$4(markers).call(markers, function (marker) {
	      // Support configuration as a function
	      var pinConfigObj = pinConfig;

	      if (typeof pinConfig === 'function') {
	        pinConfigObj = pinConfig(marker.item, MapProvider.DEFAULT_PIN_CONFIG, marker);
	      }

	      var wrapper = pinConfigObj.wrapper ? pinConfigObj.wrapper : null;
	      var staticMapPin = pinConfigObj.staticMapPin ? pinConfigObj.staticMapPin : null;
	      mapboxMapMarkerConfigs.push(new MapBoxMarkerConfig({
	        map: map,
	        position: {
	          latitude: marker.latitude,
	          longitude: marker.longitude
	        },
	        wrapper: wrapper,
	        label: marker.label,
	        staticMapPin: staticMapPin
	      }));
	    });

	    return mapboxMapMarkerConfigs;
	  };

	  return MapBoxMarkerConfig;
	}();

	var ProviderTypes = {
	  'google': GoogleMapProvider,
	  'mapbox': MapBoxMapProvider
	};

	var MapComponent =
	/*#__PURE__*/
	function (_Component) {
	  inheritsLoose(MapComponent, _Component);

	  function MapComponent(opts, systemOpts) {
	    var _this;

	    if (opts === void 0) {
	      opts = {};
	    }

	    if (systemOpts === void 0) {
	      systemOpts = {};
	    }

	    _this = _Component.call(this, opts, systemOpts) || this;
	    /**
	     * Bind this component to listen to the storage based on this key
	     */

	    _this.moduleId = StorageKeys.VERTICAL_RESULTS;
	    /**
	     * An aliased used to determine the type of map provider to use
	     * @type {string}
	     */

	    _this._mapProvider = opts.mapProvider;

	    if (!_this._mapProvider || !(_this._mapProvider.toLowerCase() in ProviderTypes)) {
	      throw new Error('MapComponent: Invalid Map Provider; must be `google` or `mapBox`');
	    }
	    /**
	     * A reference to an instance of the {MapProvider} that's constructed
	     * @type {MapProvider}
	     */


	    _this._map = null;
	    return _this;
	  }

	  /**
	   * The template to render
	   * @returns {string}
	   * @override
	   */
	  MapComponent.defaultTemplateName = function defaultTemplateName(config) {
	    return 'results/map';
	  } // TODO(billy) Make ProviderTypes a factory class
	  ;

	  var _proto = MapComponent.prototype;

	  _proto.getProviderInstance = function getProviderInstance(type) {
	    return new ProviderTypes[type.toLowerCase()](this._config);
	  };

	  _proto.onCreate = function onCreate() {
	    this._map = this.getProviderInstance(this._mapProvider);

	    this._map.loadJS();
	  };

	  _proto.onMount = function onMount() {
	    var _this2 = this;

	    this._map.onLoaded(function () {
	      _this2._map.init(_this2._container, _this2.getState('map'));
	    });
	  };

	  _proto.setState = function setState(data, val) {
	    if (keys$9(data).length === 0) {
	      return this;
	    }

	    return _Component.prototype.setState.call(this, data, val);
	  };

	  createClass(MapComponent, null, [{
	    key: "type",
	    get: function get() {
	      return 'Map';
	    }
	  }]);

	  return MapComponent;
	}(Component);

	var ResultType = {
	  EVENT: 'event',
	  LOCATION: 'location',
	  PEOPLE: 'people'
	};

	var ResultsComponent =
	/*#__PURE__*/
	function (_Component) {
	  inheritsLoose(ResultsComponent, _Component);

	  function ResultsComponent(config, systemConfig) {
	    var _this$_itemConfig;

	    var _this;

	    if (config === void 0) {
	      config = {};
	    }

	    if (systemConfig === void 0) {
	      systemConfig = {};
	    }

	    _this = _Component.call(this, config, systemConfig) || this;
	    /**
	     * verticalConfigId used for analytics and passed to children
	     * @type {string}
	     * @private
	     */

	    _this._verticalConfigId = config.verticalConfigId;
	    /**
	     * isUniversal is set to true if this component is added by the UniversalResultsComponent
	     * @type {boolean}
	     * @private
	     */

	    _this._isUniversal = config.isUniversal || false;
	    _this.moduleId = StorageKeys.VERTICAL_RESULTS;
	    _this._itemConfig = (_this$_itemConfig = {
	      global: {
	        render: null,
	        template: null
	      }
	    }, _this$_itemConfig[EventResultsItemComponent.type] = {
	      render: null,
	      template: null
	    }, _this$_itemConfig[LocationResultsItemComponent.type] = {
	      render: null,
	      template: null
	    }, _this$_itemConfig[PeopleResultsItemComponent.type] = {
	      render: null,
	      template: null
	    }, _this$_itemConfig);

	    if (config.renderItem === undefined && config._parentOpts !== undefined) {
	      config.renderItem = config._parentOpts.renderItem;
	    }

	    if (config.itemTemplate === undefined && config._parentOpts !== undefined) {
	      config.itemTemplate = config._parentOpts.itemTemplate;
	    }

	    _this.configureItem({
	      render: config.renderItem,
	      template: config.itemTemplate
	    });
	    /**
	     * The url to the universal page for the no results page to link back to with current query
	     * @type {string|null}
	     */


	    _this._universalUrl = config.universalUrl;
	    return _this;
	  }

	  var _proto = ResultsComponent.prototype;

	  _proto.mount = function mount() {
	    if (keys$9(this.getState()).length > 0) {
	      _Component.prototype.mount.call(this);
	    }

	    return this;
	  };

	  _proto.setState = function setState(data, val) {
	    var results = data.results || [];
	    var searchState = data.searchState || SearchStates.PRE_SEARCH;
	    return _Component.prototype.setState.call(this, assign$2({
	      results: []
	    }, data, {
	      isPreSearch: searchState === SearchStates.PRE_SEARCH,
	      isSearchLoading: searchState === SearchStates.SEARCH_LOADING,
	      isSearchComplete: searchState === SearchStates.SEARCH_COMPLETE,
	      includeMap: this._config.includeMap,
	      mapConfig: this._config.mapConfig,
	      eventOptions: this.eventOptions(),
	      universalUrl: this._universalUrl ? this._universalUrl + window.location.search : '',
	      showNoResults: results.length === 0,
	      query: this.core.globalStorage.getState(StorageKeys.QUERY)
	    }), val);
	  }
	  /**
	   * helper to construct the eventOptions object for the view all link
	   * @returns {string}
	   */
	  ;

	  _proto.eventOptions = function eventOptions() {
	    return stringify$2({
	      verticalConfigId: this._verticalConfigId
	    });
	  };

	  /**
	   * The template to render
	   * @returns {string}
	   * @override
	   */
	  ResultsComponent.defaultTemplateName = function defaultTemplateName(config) {
	    return 'results/results';
	  };

	  _proto.configureItem = function configureItem(config) {
	    if (typeof config.render === 'function') {
	      this._itemConfig.global.render = config.render;
	    } else {
	      for (var key in config.render) {
	        this.setItemRender(key, config.render[key]);
	      }
	    }

	    if (typeof config.template === 'string') {
	      this._itemConfig.global.template = config.template;
	    } else {
	      for (var _key in config.template) {
	        this.setItemTemplate(_key, config.template[_key]);
	      }
	    }
	  };

	  _proto.setItemTemplate = function setItemTemplate(type, template) {
	    var clazz = this.getItemComponent(type);
	    this._itemConfig[clazz.type].template = template;
	  };

	  _proto.setItemRender = function setItemRender(type, render) {
	    var clazz = this.getItemComponent(type);
	    this._itemConfig[clazz.type].render = render;
	  };

	  _proto.getItemComponent = function getItemComponent(type) {
	    var comp = ResultsItemComponent;

	    switch (type) {
	      case ResultType.EVENT:
	        comp = EventResultsItemComponent;
	        break;

	      case ResultType.LOCATION:
	        comp = LocationResultsItemComponent;
	        break;

	      case ResultType.PEOPLE:
	        comp = PeopleResultsItemComponent;
	        break;
	    }

	    return comp;
	  };

	  _proto.addChild = function addChild(data, type, opts) {
	    // TODO(billy) Refactor the way configuration and data flows
	    // through top level components to child components.
	    if (type === ResultsItemComponent.type) {
	      var clazz = this.getItemComponent(data.type);

	      if (clazz) {
	        type = clazz.type;
	      }
	    } else if (type === MapComponent.type) {
	      data = {
	        map: data
	      };

	      var newOpts = assign$2({}, this._config.mapConfig, opts);

	      return _Component.prototype.addChild.call(this, data, type, newOpts);
	    } // Apply the proper item renders to the the components
	    // have just been constructed. Prioritize global over individual items.


	    var comp = _Component.prototype.addChild.call(this, data, type, assign$2(opts, {
	      verticalConfigId: this._verticalConfigId,
	      isUniversal: this._isUniversal
	    }));

	    var globalConfig = this._itemConfig.global;
	    var itemConfig = this._itemConfig[comp.type];
	    var hasGlobalRender = typeof globalConfig.render === 'function';
	    var hasGlobalTemplate = typeof globalConfig.template === 'string';

	    if (hasGlobalRender) {
	      comp.setRender(globalConfig.render);
	    }

	    if (hasGlobalTemplate) {
	      comp.setTemplate(globalConfig.template);
	    }

	    if (!itemConfig) {
	      return comp;
	    }

	    if (!hasGlobalRender && itemConfig.render) {
	      comp.setRender(itemConfig.render);
	    } // Apply template specific situation


	    if (!hasGlobalTemplate && itemConfig.template) {
	      comp.setTemplate(itemConfig.template);
	    }

	    return comp;
	  };

	  createClass(ResultsComponent, null, [{
	    key: "duplicatesAllowed",
	    get: function get() {
	      return true;
	    }
	  }, {
	    key: "type",
	    get: function get() {
	      return 'VerticalResults';
	    }
	  }]);

	  return ResultsComponent;
	}(Component);

	var AccordionResultsComponent =
	/*#__PURE__*/
	function (_ResultsComponent) {
	  inheritsLoose(AccordionResultsComponent, _ResultsComponent);

	  function AccordionResultsComponent(config, systemConfig) {
	    var _this;

	    if (config === void 0) {
	      config = {};
	    }

	    if (systemConfig === void 0) {
	      systemConfig = {};
	    }

	    _this = _ResultsComponent.call(this, config, systemConfig) || this;
	    /**
	     * base selector to use when finding DOM targets
	     * @type {string}
	     */

	    _this._selectorBase = config.selectorBase || '.js-yxt-AccordionResult';
	    /**
	     * collapsed state class
	     * @type {string}
	     */

	    _this.collapsedClass = config.collapsedClass || 'is-collapsed';
	    /**
	     * vertical config id is required for analytics
	     * @type {string|null}
	     */

	    _this.verticalConfigId = config.verticalConfigId || config._parentOpts.verticalConfigId || null;
	    return _this;
	  }
	  /**
	   * the component type
	   * @returns {string}
	   * @override
	   */


	  /**
	   * The template to render
	   * @returns {string}
	   * @override
	   */
	  AccordionResultsComponent.defaultTemplateName = function defaultTemplateName(config) {
	    return 'results/resultsaccordion';
	  }
	  /**
	   * overrides onMount to add bindings to change the height on click
	   * @returns {AccordionResultsComponent}
	   * @override
	   */
	  ;

	  var _proto = AccordionResultsComponent.prototype;

	  _proto.onMount = function onMount() {
	    var _this2 = this;

	    _ResultsComponent.prototype.onMount.call(this); // NOTE(amullings): This is a hack, since currently components with siblings
	    // have no way of referring to their own element. We have to grab the first
	    // element since sections get added in reverse.


	    var selfEl = this._container.firstElementChild;
	    var accordionEls = DOM.queryAll(selfEl, this._selectorBase);

	    forEach$4(accordionEls).call(accordionEls, function (accordionEl) {
	      var toggleEl = DOM.query(accordionEl, _this2.toggleSelector());
	      var contentEl = DOM.query(accordionEl, _this2.bodySelector());

	      _this2.changeHeight(contentEl, accordionEl);

	      toggleEl.addEventListener('click', function () {
	        _this2.handleClick(accordionEl, toggleEl, contentEl);
	      });
	    });

	    return this;
	  };

	  _proto.setState = function setState(data) {
	    return _ResultsComponent.prototype.setState.call(this, assign$2({}, data, {
	      modifier: this.verticalConfigId
	    }));
	  }
	  /**
	   * click handler for the accordion toggle button
	   * @param wrapperEl {HTMLElement} the toggle container
	   * @param toggleEl {HTMLElement} the button
	   * @param contentEl {HTMLElement} the toggle target
	   */
	  ;

	  _proto.handleClick = function handleClick(wrapperEl, toggleEl, contentEl) {
	    var event = new AnalyticsEvent(this.isCollapsed(wrapperEl) ? 'ROW_EXPAND' : 'ROW_COLLAPSE').addOptions({
	      verticalConfigId: this.verticalConfigId,
	      entityId: toggleEl.dataset.entityId
	    });
	    wrapperEl.classList.toggle(this.collapsedClass);
	    this.changeHeight(contentEl, wrapperEl);
	    toggleEl.setAttribute('aria-expanded', this.isCollapsed(wrapperEl) ? 'false' : 'true');
	    this.analyticsReporter.report(event);
	  }
	  /**
	   * returns true if the element is currently collapsed
	   * @param wrapperEl {HTMLElement} the toggle container
	   * @returns {boolean}
	   */
	  ;

	  _proto.isCollapsed = function isCollapsed(wrapperEl) {
	    if (!wrapperEl) {
	      return false;
	    }

	    return wrapperEl.classList.contains(this.collapsedClass);
	  }
	  /**
	   * toggles the height between 0 and the content height for smooth animation
	   * @param targetEl {HTMLElement}
	   * @param wrapperEl {HTMLElement}
	   */
	  ;

	  _proto.changeHeight = function changeHeight(targetEl, wrapperEl) {
	    targetEl.style.height = (this.isCollapsed(wrapperEl) ? 0 : targetEl.scrollHeight) + "px";
	  }
	  /**
	   * helper for composing child element selectors
	   * @param child {string}
	   * @returns {string}
	   */
	  ;

	  _proto.buildSelector = function buildSelector(child) {
	    return "" + this._selectorBase + child;
	  }
	  /**
	   * helper for the toggle button selector
	   * @returns {string}
	   */
	  ;

	  _proto.toggleSelector = function toggleSelector() {
	    return this.buildSelector('-toggle');
	  }
	  /**
	   * helper for the content element selector
	   * @returns {string}
	   */
	  ;

	  _proto.bodySelector = function bodySelector() {
	    return this.buildSelector('-body');
	  };

	  createClass(AccordionResultsComponent, null, [{
	    key: "type",
	    get: function get() {
	      return 'AccordionResults';
	    }
	  }]);

	  return AccordionResultsComponent;
	}(ResultsComponent);

	var UniversalResultsComponent =
	/*#__PURE__*/
	function (_Component) {
	  inheritsLoose(UniversalResultsComponent, _Component);

	  function UniversalResultsComponent(opts, systemOpts) {
	    var _this;

	    if (opts === void 0) {
	      opts = {};
	    }

	    if (systemOpts === void 0) {
	      systemOpts = {};
	    }

	    _this = _Component.call(this, opts, systemOpts) || this;
	    _this.moduleId = StorageKeys.UNIVERSAL_RESULTS;
	    _this._limit = opts.limit || 10;
	    return _this;
	  }

	  /**
	   * The template to render
	   * @returns {string}
	   * @override
	   */
	  UniversalResultsComponent.defaultTemplateName = function defaultTemplateName(config) {
	    return 'results/universalresults';
	  };

	  UniversalResultsComponent.areDuplicateNamesAllowed = function areDuplicateNamesAllowed() {
	    return true;
	  };

	  var _proto = UniversalResultsComponent.prototype;

	  _proto.init = function init(opts) {
	    _Component.prototype.init.call(this, opts);

	    return this;
	  };

	  _proto.setState = function setState(data, val) {
	    var sections = data.sections || [];
	    var searchState = data.searchState || SearchStates.PRE_SEARCH;
	    return _Component.prototype.setState.call(this, assign$2({
	      sections: []
	    }, data, {
	      isPreSearch: searchState === SearchStates.PRE_SEARCH,
	      isSearchLoading: searchState === SearchStates.SEARCH_LOADING,
	      isSearchComplete: searchState === SearchStates.SEARCH_COMPLETE,
	      showNoResults: sections.length === 0,
	      query: this.core.globalStorage.getState(StorageKeys.QUERY)
	    }), val);
	  };

	  _proto.addChild = function addChild(data, type, opts) {
	    if (data === void 0) {
	      data = {};
	    }

	    var childOpts = objectSpread({}, opts, {}, this.getChildConfig([data['verticalConfigId']]));

	    if (childOpts.useAccordion === true) {
	      return _Component.prototype.addChild.call(this, data, AccordionResultsComponent.type, childOpts);
	    }

	    return _Component.prototype.addChild.call(this, data, type, childOpts);
	  };

	  _proto.getChildConfig = function getChildConfig(configId) {
	    var defaultConfig = {
	      verticalConfigId: configId,
	      isUniversal: true
	    };
	    var config = this._config.config;

	    if (config === undefined) {
	      return defaultConfig;
	    }

	    return assign$2(defaultConfig, this._config['config'][configId] || this._config['config']);
	  };

	  createClass(UniversalResultsComponent, null, [{
	    key: "type",
	    get: function get() {
	      return 'UniversalResults';
	    }
	  }]);

	  return UniversalResultsComponent;
	}(Component);

	var ceil$5 = Math.ceil;
	var floor$b = Math.floor;

	// `Math.trunc` method
	// https://tc39.github.io/ecma262/#sec-math.trunc
	_export({ target: 'Math', stat: true }, {
	  trunc: function trunc(it) {
	    return (it > 0 ? floor$b : ceil$5)(it);
	  }
	});

	var trunc = path.Math.trunc;

	var trunc$1 = trunc;

	var trunc$2 = trunc$1;

	var PaginationComponent =
	/*#__PURE__*/
	function (_Component) {
	  inheritsLoose(PaginationComponent, _Component);

	  function PaginationComponent(config, systemConfig) {
	    var _this;

	    if (config === void 0) {
	      config = {};
	    }

	    if (systemConfig === void 0) {
	      systemConfig = {};
	    }

	    _this = _Component.call(this, config, systemConfig) || this;
	    /**
	     * The vertical key to use for searches
	     * @type {string}
	     * @private
	     */

	    _this._verticalKey = _this.core.globalStorage.getState(StorageKeys.SEARCH_CONFIG).verticalKey;

	    if (typeof _this._verticalKey !== 'string') {
	      throw new AnswersComponentError('verticalKey not provided, but necessary for pagination', 'PaginationComponent');
	    }
	    /**
	     * If true, displays the first page button
	     * @type {boolean}
	     * @private
	     */


	    _this._firstPageButtonEnabled = config.showFirst === undefined ? true : config.showFirst;
	    /**
	     * If true, displays the last page button
	     * @type {boolean}
	     * @private
	     */

	    _this._lastPageButtonEnabled = config.showLast === undefined ? true : config.showLast;
	    /**
	     * Options to include with all analytic events sent by this component
	     * @type {object}
	     * @private
	     */

	    _this._analyticsOptions = {
	      verticalKey: _this._verticalKey
	    };
	    var offset = _this.core.globalStorage.getState(StorageKeys.SEARCH_OFFSET) || 0;

	    _this.core.globalStorage.set(StorageKeys.SEARCH_OFFSET, Number(offset));

	    _this.core.globalStorage.on('update', StorageKeys.SEARCH_OFFSET, function (offset) {
	      if (typeof offset === 'number') {
	        return;
	      }

	      _this.core.globalStorage.set(StorageKeys.SEARCH_OFFSET, Number(offset));
	    });

	    _this.core.globalStorage.on('update', StorageKeys.VERTICAL_RESULTS, function (results) {
	      if (results.searchState === SearchStates.SEARCH_COMPLETE) {
	        _this.setState();
	      }
	    });

	    return _this;
	  }

	  PaginationComponent.defaultTemplateName = function defaultTemplateName() {
	    return 'results/pagination';
	  };

	  var _proto = PaginationComponent.prototype;

	  _proto.onMount = function onMount() {
	    var _this2 = this;

	    var results = this.core.globalStorage.getState(StorageKeys.VERTICAL_RESULTS) || {};
	    var limit = this.core.globalStorage.getState(StorageKeys.SEARCH_CONFIG).limit;
	    var showControls = results.searchState === 'search-complete' && results.resultsCount > limit;
	    var offset = this.core.globalStorage.getState(StorageKeys.SEARCH_OFFSET) || 0;

	    if (!showControls) {
	      return;
	    }

	    var previousPageButton = DOM.query(this._container, '.js-yxt-Pagination-previous');
	    var nextPageButton = DOM.query(this._container, '.js-yxt-Pagination-next');

	    var maxPage = trunc$2((results.resultsCount - 1) / limit);

	    DOM.on(previousPageButton, 'click', function () {
	      return _this2.updatePage(offset - limit);
	    });
	    DOM.on(nextPageButton, 'click', function () {
	      return _this2.updatePage(offset + limit);
	    });

	    if (this._firstPageButtonEnabled) {
	      var firstPageButton = DOM.query(this._container, '.js-yxt-Pagination-first');
	      DOM.on(firstPageButton, 'click', function () {
	        return _this2.updatePage(0);
	      });
	    }

	    if (this._lastPageButtonEnabled) {
	      var lastPageButton = DOM.query(this._container, '.js-yxt-Pagination-last');
	      DOM.on(lastPageButton, 'click', function () {
	        return _this2.updatePage(maxPage * limit);
	      });
	    }
	  };

	  _proto.updatePage = function updatePage(offset) {
	    this.scrollToTop();
	    this.core.globalStorage.set(StorageKeys.SEARCH_OFFSET, offset);
	    this.core.persistentStorage.set(StorageKeys.SEARCH_OFFSET, offset);
	    this.core.verticalPage(this._verticalKey, offset);
	  };

	  _proto.scrollToTop = function scrollToTop() {
	    document.documentElement.scrollTop = 0; // Safari

	    document.body.scrollTop = 0;
	  };

	  _proto.setState = function setState(data) {
	    var results = this.core.globalStorage.getState(StorageKeys.VERTICAL_RESULTS) || {};
	    var offset = this.core.globalStorage.getState(StorageKeys.SEARCH_OFFSET) || 0;
	    var limit = this.core.globalStorage.getState(StorageKeys.SEARCH_CONFIG).limit;
	    var pageNumber = offset / limit;
	    var showControls = results.searchState === 'search-complete' && results.resultsCount > limit;
	    var isMoreResults = results.resultsCount > offset + limit;

	    var maxPage = trunc$2((results.resultsCount - 1) / limit);

	    return _Component.prototype.setState.call(this, objectSpread({
	      showControls: showControls,
	      firstPageButtonEnabled: this._firstPageButtonEnabled,
	      lastPageButtonEnabled: this._lastPageButtonEnabled,
	      pageNumber: pageNumber + 1,
	      showFirstPageButton: pageNumber > 1,
	      showPreviousPageButton: pageNumber > 0,
	      showNextPageButton: isMoreResults,
	      showLastPageButton: pageNumber < maxPage - 1
	    }, data));
	  };

	  createClass(PaginationComponent, null, [{
	    key: "type",
	    get: function get() {
	      return 'Pagination';
	    }
	  }]);

	  return PaginationComponent;
	}(Component);

	/**
	 * Configurable options for the component
	 * @type {Object}
	 */

	var DEFAULT_CONFIG$1 = {
	  /**
	   * The entity identifier that the question is associated with.
	   * This is typically an organization object
	   * @type {number}
	   */
	  'entityId': null,

	  /**
	   * The main CSS selector used to reference the form for the component.
	   * @type {string} CSS selector
	   */
	  'formSelector': 'form',

	  /**
	   * An optional label to use for the e-mail address input
	   * @type {string}
	   */
	  'emailLabel': 'Email',

	  /**
	   * An optional label to use for the name input
	   * @type {string}
	   */
	  'nameLabel': 'Name',

	  /**
	   * An optional label to use for the question
	   * @type {string}
	   */
	  'questionLabel': 'Question',

	  /**
	   * An optional label to use for the Privacy Policy
	   * @type {string}
	   */
	  'privacyPolicyText': 'By submitting my email address, I consent to being contacted via email at the address provided.',

	  /**
	   * The label to use for the Submit button
	   * @type {string}
	   */
	  'buttonLabel': 'Submit',

	  /**
	   * The title to display in the title bar
	   * @type {string}
	   */
	  'sectionTitle': 'Ask a Question',

	  /**
	   * The description to display in the title bar
	   * @type {string}
	   */
	  'teaser': 'Can’t find what you\'re looking for? Ask a question below.',

	  /**
	   * The name of the icon to use in the title bar
	   * @type {string}
	   */
	  'sectionTitleIconName': 'support',

	  /**
	   * The text to display in the feedback form ahead of the Question input
	   * @type {string}
	   */
	  'description': 'Enter your question and contact information, and we\'ll get back to you with a response shortly.',

	  /**
	   * The placeholder text for required inputs
	   * @type {string}
	   */
	  'requiredInputPlaceholder': '(required)',

	  /**
	   * The placeholder text for the question text area
	   * @type {string}
	   */
	  'questionInputPlaceholder': 'Enter your question here',

	  /**
	   * The confirmation text to display after successfully submitting feedback
	   * @type {string}
	   */
	  'questionSubmissionConfirmationText': 'Thank you for your question!',

	  /**
	   * The default privacy policy url label
	   * @type {string}
	  */
	  'privacyPolicyUrlLabel': 'Learn more here.',

	  /**
	   * The default privacy policy url
	   * @type {string}
	   */
	  'privacyPolicyUrl': '',

	  /**
	   * The default privacy policy error text, shown when the user does not agree
	   * @type {string}
	   */
	  'privacyPolicyErrorText': '* You must agree to the privacy policy to submit a question.',

	  /**
	   * The default email format error text, shown when the user submits an invalid email
	   * @type {string}
	   */
	  'emailFormatErrorText': '* Please enter a valid email address.',

	  /**
	   * Whether or not this component is expanded by default.
	   * @type {boolean}
	   */
	  'expanded': true
	};
	/**
	 * QuestionSubmissionComponent is a component that creates a form
	 * thats displayed whenever a query is run. It enables the user
	 * to submit questions that they cant find the answer for.
	 */

	var QuestionSubmissionComponent =
	/*#__PURE__*/
	function (_Component) {
	  inheritsLoose(QuestionSubmissionComponent, _Component);

	  function QuestionSubmissionComponent(config, systemConfig) {
	    var _this;

	    if (config === void 0) {
	      config = {};
	    }

	    if (systemConfig === void 0) {
	      systemConfig = {};
	    }

	    _this = _Component.call(this, assign$2({}, DEFAULT_CONFIG$1, config), systemConfig) || this;
	    /**
	     * Reference to the storage model
	     * @type {string}
	     */

	    _this.moduleId = StorageKeys.QUESTION_SUBMISSION;
	    /**
	     * Reference to the locale as set in the global config
	     * @type {string}
	     */

	    _this.locale = _this.core.globalStorage.getState(StorageKeys.LOCALE);
	    /**
	     * NOTE(billy) if this is a pattern we want to follow for configuration
	     * we should bake it into the core class.
	     */

	    _this.validateConfig();
	    /**
	     * The QuestionSubmission component should be rendered only once a search has completed. If the
	     * search results are still loading, the component should not be displayed.
	     */


	    var onResultsUpdate = function onResultsUpdate(results) {
	      if (results.searchState !== SearchStates.SEARCH_LOADING) {
	        var questionText = _this.core.globalStorage.getState(StorageKeys.QUERY);

	        _this.setState(new QuestionSubmission({
	          questionText: questionText,
	          expanded: _this._config.expanded
	        }));
	      } else {
	        _this.unMount();
	      }
	    };

	    _this.core.globalStorage.on('update', StorageKeys.VERTICAL_RESULTS, onResultsUpdate);

	    _this.core.globalStorage.on('update', StorageKeys.UNIVERSAL_RESULTS, onResultsUpdate);

	    return _this;
	  }
	  /**
	   * The template to render
	   * @returns {string}
	   * @override
	   */


	  QuestionSubmissionComponent.defaultTemplateName = function defaultTemplateName(config) {
	    return 'questions/questionsubmission';
	  }
	  /**
	   * The public interface alias for the component
	   * @returns {string}
	   * @override
	   */
	  ;

	  var _proto = QuestionSubmissionComponent.prototype;

	  /**
	   * validationConfig contains a bunch of rules
	   * that are used to validate aginst configuration provided by the user
	   */
	  _proto.validateConfig = function validateConfig() {
	    if (this._config.entityId === null || this._config.entityId === undefined) {
	      throw new AnswersComponentError('`entityId` is a required configuration option for Question Submission', 'QuestionSubmission');
	    }
	  };

	  _proto.beforeMount = function beforeMount() {
	    // Avoid mounting the component if theres no data
	    // Note, 1 because `config` is always part of the state.
	    return keys$9(this.getState()).length > 1;
	  };

	  _proto.onMount = function onMount() {
	    var triggerEl = DOM.query(this._container, '.js-content-visibility-toggle');

	    if (triggerEl !== null) {
	      this.bindFormToggle(triggerEl);
	    }

	    var formEl = DOM.query(this._container, this._config.formSelector);

	    if (formEl === null) {
	      return;
	    }

	    this.bindFormFocus(formEl);
	    this.bindFormSubmit(formEl);
	  }
	  /**
	   * bindFormFocus will wire up the DOM focus event to serverside reporting
	   * @param {HTMLElement} formEl
	   */
	  ;

	  _proto.bindFormFocus = function bindFormFocus(formEl) {
	    var _this2 = this;

	    if (this.analyticsReporter === null) {
	      return;
	    }

	    var questionText = DOM.query(formEl, '.js-question-text');
	    DOM.on(questionText, 'focus', function () {
	      _this2.analyticsReporter.report(_this2.getAnalyticsEvent('QUESTION_FOCUS'));
	    });
	  }
	  /**
	   * bindFormSubmit handles submitting the question to the server,
	   * and submits an event to serverside reporting
	   * @param {HTMLElement} formEl
	   */
	  ;

	  _proto.bindFormSubmit = function bindFormSubmit(formEl) {
	    var _this3 = this;

	    DOM.on(formEl, 'submit', function (e) {
	      e.preventDefault();

	      _this3.analyticsReporter.report(_this3.getAnalyticsEvent('QUESTION_SUBMIT')); // TODO(billy) we probably want to disable the form from being submitted twice


	      var errors = _this3.validate(formEl);

	      var formData = _this3.parse(formEl);

	      if (keys$9(errors).length) {
	        return _this3.setState(new QuestionSubmission(formData, errors));
	      }

	      _this3.core.submitQuestion({
	        'entityId': _this3._config.entityId,
	        'questionLanguage': _this3.locale,
	        'site': 'FIRSTPARTY',
	        'name': formData.name,
	        'email': formData.email,
	        'questionText': formData.questionText,
	        'questionDescription': formData.questionDescription
	      })["catch"](function (error) {
	        _this3.setState(new QuestionSubmission(formData, {
	          'network': 'We\'re sorry, an error occurred.'
	        }));

	        throw error;
	      });
	    });
	  }
	  /**
	   * bindFormToggle handles expanding and mimimizing the component's form.
	   * @param {HTMLElement} triggerEl
	   */
	  ;

	  _proto.bindFormToggle = function bindFormToggle(triggerEl) {
	    var _this4 = this;

	    DOM.on(triggerEl, 'click', function (e) {
	      var formData = _this4.getState();

	      _this4.setState(new QuestionSubmission(objectSpread({}, formData, {
	        'expanded': !formData.questionExpanded,
	        'submitted': formData.questionSubmitted
	      }), formData.errors));
	    });
	  }
	  /**
	   * Takes the form, and builds a object that represents the input names
	   * and text fields.
	   * @param {HTMLElement} formEl
	   * @returns {object}
	   */
	  ;

	  _proto.parse = function parse(formEl) {
	    var inputFields = DOM.queryAll(formEl, '.js-question-field');

	    if (!inputFields || inputFields.length === 0) {
	      return {};
	    }

	    var obj = {};

	    for (var i = 0; i < inputFields.length; i++) {
	      var val = inputFields[i].value;

	      if (inputFields[i].type === 'checkbox') {
	        val = inputFields[i].checked;
	      }

	      obj[inputFields[i].name] = val;
	    }

	    return obj;
	  }
	  /**
	   * Validates the fields for correct formatting
	   * @param {HTMLElement} formEl
	   * @returns {Object} errors object if any errors found
	   */
	  ;

	  _proto.validate = function validate(formEl) {
	    var errors = {};
	    var fields = DOM.queryAll(formEl, '.js-question-field');

	    for (var i = 0; i < fields.length; i++) {
	      if (!fields[i].checkValidity()) {
	        if (i === 0) {
	          // set focus state on first error
	          fields[i].focus();
	        }

	        switch (fields[i].name) {
	          case 'email':
	            errors['emailError'] = true;

	            if (!fields[i].validity.valueMissing) {
	              errors['emailErrorText'] = this._config.emailFormatErrorText;
	            }

	            break;

	          case 'name':
	            errors['nameError'] = true;
	            break;

	          case 'privacyPolicy':
	            errors['privacyPolicyErrorText'] = this._config.privacyPolicyErrorText;
	            errors['privacyPolicyError'] = true;
	            break;

	          case 'questionText':
	            errors['questionTextError'] = true;
	            break;
	        }
	      }
	    }

	    return errors;
	  }
	  /**
	   * Returns an options object describing the context of a reportable event
	   */
	  ;

	  _proto.getAnalyticsEvent = function getAnalyticsEvent(eventType) {
	    var analyticsEvent = new AnalyticsEvent(eventType);
	    analyticsEvent.addOptions({
	      verticalConfigId: this._verticalKey,
	      searcher: this._verticalKey ? 'VERTICAL' : 'UNIVERSAL'
	    });
	    return analyticsEvent;
	  };

	  createClass(QuestionSubmissionComponent, null, [{
	    key: "type",
	    get: function get() {
	      return 'QASubmission';
	    }
	  }]);

	  return QuestionSubmissionComponent;
	}(Component);

	var SVGIcon =
	/*#__PURE__*/
	function () {
	  /**
	   * @param config
	   * @param config.name
	   * @param config.path
	   * @param config.complexContents
	   * @param config.viewBox
	   * @constructor
	   */
	  function SVGIcon(config) {
	    /**
	     * the name of the icon
	     */
	    this.name = config.name;
	    /**
	     * an svg path definition
	     */

	    this.path = config.path;
	    /**
	     * if not using a path, a the markup for a complex SVG
	     */

	    this.complexContents = config.complexContents;
	    /**
	     * the view box definition, defaults to 24x24
	     * @type {string}
	     */

	    this.viewBox = config.viewBox || '0 0 24 24';
	    /**
	     * actual contents used
	     */

	    this.contents = this.pathDefinition();
	  }

	  var _proto = SVGIcon.prototype;

	  _proto.pathDefinition = function pathDefinition() {
	    if (this.complexContents) {
	      return this.complexContents;
	    }

	    return "<path d=\"" + this.path + "\"></path>";
	  }
	  /**
	   * returns the svg markup
	   */
	  ;

	  _proto.markup = function markup() {
	    return "<svg viewBox=\"" + this.viewBox + "\" xmlns=\"http://www.w3.org/2000/svg\">" + this.contents + "</svg>";
	  };

	  return SVGIcon;
	}();

	var thumbIcon = new SVGIcon({
	  name: 'thumb',
	  viewBox: '0 0 24 22',
	  path: 'M15.273 1H5.455c-.906 0-1.68.55-2.008 1.342L.153 10.097A2.19 2.19 0 000 10.9v2.2c0 1.21.982 2.2 2.182 2.2h6.883L8.03 20.327l-.033.352c0 .451.186.869.48 1.166L9.633 23l7.178-7.249a2.16 2.16 0 00.644-1.551v-11c0-1.21-.982-2.2-2.182-2.2zm0 13.2l-4.735 4.774L11.75 13.1H2.182v-2.2l3.273-7.7h9.818v11zM19.636 1H24v13.2h-4.364V1z'
	});

	var receiptIcon = new SVGIcon({
	  name: 'receipt',
	  path: 'M14.606 9.5c-.671-.515-1.591-.833-2.606-.833 1.015 0 1.935.318 2.606.833zm-7.985 0H1.655A1.66 1.66 0 010 7.833V3.667C0 2.747.741 2 1.655 2h20.69A1.66 1.66 0 0124 3.667v4.166A1.66 1.66 0 0122.345 9.5h-4.966V22H6.621V9.5h2.773H6.62zm10.758-1.667h4.966V3.667H1.655v4.166h4.966v-2.5h10.758v2.5z'
	});

	var pantheonIcon = new SVGIcon({
	  name: 'pantheon',
	  path: 'M9.947 16.598h.252V9.412h-.252a.432.432 0 01-.23-.065c-.07-.043-.106-.093-.106-.15L9.15 7.82v-.15c0-.044.028-.08.084-.109a.691.691 0 01.105-.086.254.254 0 01.146-.043H13.6c.056 0 .104.015.146.043.042.03.091.058.147.086a.271.271 0 01.063.108c.014.043.007.093-.02.15l-.42 1.378a.374.374 0 01-.147.15.37.37 0 01-.19.065h-.251v7.186h.252a.37.37 0 01.189.065c.07.043.119.093.147.15l.42 1.378c.027.028.034.071.02.129a.275.275 0 01-.063.129 1.364 1.364 0 00-.147.086.254.254 0 01-.146.043H9.485a.254.254 0 01-.146-.043.691.691 0 01-.105-.086c-.056-.029-.084-.072-.084-.13v-.128l.461-1.377c0-.058.035-.108.105-.151a.432.432 0 01.231-.065zm5.792 0h.252V9.412h-.252a.432.432 0 01-.23-.065.374.374 0 01-.148-.15l-.42-1.377c-.027-.029-.034-.072-.02-.13a.275.275 0 01.063-.129c.056-.028.105-.057.146-.086a.254.254 0 01.147-.043h4.114c.055 0 .104.015.146.043a.691.691 0 01.105.086c.056.03.084.072.084.13v.129l-.42 1.377a.374.374 0 01-.146.15.432.432 0 01-.231.065h-.21v7.186h.21a.43.43 0 01.23.065c.07.043.12.093.148.15l.42 1.378v.15c0 .043-.029.08-.085.108a.691.691 0 01-.105.086.254.254 0 01-.146.043h-4.114a.254.254 0 01-.147-.043 1.364 1.364 0 00-.146-.086.271.271 0 01-.063-.108c-.014-.043-.007-.093.02-.15l.42-1.377a.374.374 0 01.147-.151.432.432 0 01.231-.065zm-11.794-.086h.252V9.498h-.252a.334.334 0 01-.21-.065.386.386 0 01-.126-.193l-.42-1.377a.248.248 0 01-.02-.172.854.854 0 01.063-.173c.028-.057.07-.1.126-.129a.365.365 0 01.168-.043h4.07c.057 0 .113.015.169.043a.278.278 0 01.126.13.854.854 0 01.062.172.248.248 0 01-.02.172l-.42 1.377a.386.386 0 01-.126.193.334.334 0 01-.21.065h-.21v7.014h.21c.084 0 .154.029.21.086a.673.673 0 01.126.172l.42 1.378a.248.248 0 01.02.172.854.854 0 01-.062.172.278.278 0 01-.126.129.365.365 0 01-.168.043H3.526a.365.365 0 01-.168-.043.278.278 0 01-.126-.13.854.854 0 01-.063-.171.248.248 0 01.02-.172l.42-1.378a.673.673 0 01.126-.172.281.281 0 01.21-.086zM1.763 6.658a.717.717 0 01-.504-.194.644.644 0 01-.21-.495v-.43a.73.73 0 01.105-.387.68.68 0 01.273-.259C4.309 3.402 6.54 2.276 8.121 1.515 9.702.755 10.493.361 10.493.332c.531-.258.972-.366 1.322-.323.35.043.734.165 1.154.366l8.31 4.518c.14.058.245.144.315.259a.73.73 0 01.105.387v.43c0 .201-.07.366-.21.495a.717.717 0 01-.504.194H1.763zm-.714 13.34a.54.54 0 01.168-.387.516.516 0 01.378-.172h19.642c.168 0 .308.057.42.172a.541.541 0 01.168.387v.818a.522.522 0 01-.168.408.605.605 0 01-.42.151H1.595a.551.551 0 01-.378-.15.522.522 0 01-.168-.41v-.817zm21.405 2.022c.14 0 .266.058.378.173a.592.592 0 01.168.43v.818a.541.541 0 01-.168.387.516.516 0 01-.378.172L.546 23.957a.516.516 0 01-.378-.172.541.541 0 01-.168-.387v-.818a.59.59 0 01.168-.43.516.516 0 01.378-.173l21.908.043z'
	});

	var micIcon = new SVGIcon({
	  name: 'mic',
	  path: 'M12 15c1.66 0 2.99-1.34 2.99-3L15 6c0-1.66-1.34-3-3-3S9 4.34 9 6v6c0 1.66 1.34 3 3 3zm5.3-3c0 3-2.54 5.1-5.3 5.1S6.7 15 6.7 12H5c0 3.41 2.72 6.23 6 6.72V22h2v-3.28c3.28-.48 6-3.3 6-6.72h-1.7z'
	});

	var directionsIcon = new SVGIcon({
	  name: 'directions',
	  path: 'M23.649 11.154L12.846.35a1.195 1.195 0 00-1.692 0L.35 11.154a1.195 1.195 0 000 1.692L11.154 23.65a1.195 1.195 0 001.692 0L23.65 12.846c.468-.456.468-1.212 0-1.692zm-9.254 3.853v-3.001H9.593v3.6h-2.4v-4.8c0-.66.54-1.2 1.2-1.2h6.002V6.604l4.2 4.2-4.2 4.202z'
	});

	var calendarIcon = new SVGIcon({
	  name: 'calendar',
	  path: 'M18.111 13.2H12v6h6.111v-6zM16.89 0v2.4H7.11V0H4.667v2.4H3.444c-1.356 0-2.432 1.08-2.432 2.4L1 21.6C1 22.92 2.088 24 3.444 24h17.112C21.9 24 23 22.92 23 21.6V4.8c0-1.32-1.1-2.4-2.444-2.4h-1.223V0H16.89zm3.667 21.6H3.444V8.4h17.112v13.2z'
	});

	var calloutIcon = new SVGIcon({
	  name: 'callout',
	  path: 'M21.99 4c0-1.1-.89-2-1.99-2H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h14l4 4-.01-18z'
	});

	var infoIcon = new SVGIcon({
	  name: 'info',
	  path: 'M12 8.4A1.2 1.2 0 1012 6a1.2 1.2 0 000 2.4zM12 0c6.624 0 12 5.376 12 12s-5.376 12-12 12S0 18.624 0 12 5.376 0 12 0zm0 18c.66 0 1.2-.54 1.2-1.2V12c0-.66-.54-1.2-1.2-1.2-.66 0-1.2.54-1.2 1.2v4.8c0 .66.54 1.2 1.2 1.2z'
	});

	var briefcaseIcon = new SVGIcon({
	  name: 'briefcase',
	  path: 'M20 7h-4V5c0-1.11-.89-2-2-2h-4c-1.11 0-2 .89-2 2v2H4c-1.11 0-1.99.89-1.99 2L2 20c0 1.11.89 2 2 2h16c1.11 0 2-.89 2-2V9c0-1.11-.89-2-2-2zm-6 0h-4V5h4v2z'
	});

	var kabobIcon = new SVGIcon({
	  name: 'kabob',
	  viewBox: '0 0 3 11',
	  complexContents: "<circle cx=\"1.5\" cy=\"1.5\" r=\"1.5\"/><circle cx=\"1.5\" cy=\"5.5\" r=\"1.5\"/><circle cx=\"1.5\" cy=\"9.5\" r=\"1.5\"/>"
	});

	var personIcon = new SVGIcon({
	  name: 'person',
	  viewBox: '0 0 18 18',
	  path: 'M9 9c2.486 0 4.5-2.014 4.5-4.5S11.486 0 9 0a4.499 4.499 0 00-4.5 4.5C4.5 6.986 6.514 9 9 9zm0 2.25c-3.004 0-9 1.508-9 4.5v1.125C0 17.494.506 18 1.125 18h15.75c.619 0 1.125-.506 1.125-1.125V15.75c0-2.992-5.996-4.5-9-4.5z'
	});

	var magnifyingGlassIcon = new SVGIcon({
	  name: 'magnifying_glass',
	  path: 'M16.124 13.051a5.154 5.154 0 110-10.308 5.154 5.154 0 010 10.308M16.114 0a7.886 7.886 0 00-6.46 12.407L0 22.06 1.94 24l9.653-9.653A7.886 7.886 0 1016.113 0'
	});

	var officeIcon = new SVGIcon({
	  name: 'office',
	  path: 'M12 7V3H2v18h20V7H12zM6 19H4v-2h2v2zm0-4H4v-2h2v2zm0-4H4V9h2v2zm0-4H4V5h2v2zm4 12H8v-2h2v2zm0-4H8v-2h2v2zm0-4H8V9h2v2zm0-4H8V5h2v2zm10 12h-8v-2h2v-2h-2v-2h2v-2h-2V9h8v10zm-2-8h-2v2h2v-2zm0 4h-2v2h2v-2z'
	});

	var linkIcon = new SVGIcon({
	  name: 'link',
	  path: 'M2.28 12A3.723 3.723 0 016 8.28h4.8V6H6c-3.312 0-6 2.688-6 6s2.688 6 6 6h4.8v-2.28H6A3.723 3.723 0 012.28 12zm4.92 1.2h9.6v-2.4H7.2v2.4zM18 6h-4.8v2.28H18A3.723 3.723 0 0121.72 12 3.723 3.723 0 0118 15.72h-4.8V18H18c3.312 0 6-2.688 6-6s-2.688-6-6-6z'
	});

	var windowIcon = new SVGIcon({
	  name: 'window',
	  path: 'M3 13h8V3H3v10zm0 8h8v-6H3v6zm10 0h8V11h-8v10zm0-18v6h8V3h-8z'
	});

	var phoneIcon = new SVGIcon({
	  name: 'phone',
	  path: 'M4.827 10.387a20.198 20.198 0 008.786 8.786l2.934-2.933c.36-.36.893-.48 1.36-.32a15.21 15.21 0 004.76.76c.733 0 1.333.6 1.333 1.333v4.654C24 23.4 23.4 24 22.667 24 10.147 24 0 13.853 0 1.333 0 .6.6 0 1.333 0H6c.733 0 1.333.6 1.333 1.333 0 1.667.267 3.267.76 4.76.147.467.04.987-.333 1.36l-2.933 2.934z'
	});

	var tagIcon = new SVGIcon({
	  name: 'tag',
	  viewBox: '0 0 18 18',
	  path: 'M17.469 8.622l-8.1-8.1A1.789 1.789 0 008.1 0H1.8C.81 0 0 .81 0 1.8v6.3c0 .495.198.945.531 1.278l8.1 8.1c.324.324.774.522 1.269.522a1.76 1.76 0 001.269-.531l6.3-6.3A1.76 1.76 0 0018 9.9c0-.495-.207-.954-.531-1.278zM3.15 4.5c-.747 0-1.35-.603-1.35-1.35 0-.747.603-1.35 1.35-1.35.747 0 1.35.603 1.35 1.35 0 .747-.603 1.35-1.35 1.35z'
	});

	var documentIcon = new SVGIcon({
	  name: 'document',
	  path: 'M4 6H2v14c0 1.1.9 2 2 2h14v-2H4V6zm16-4H8c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm-1 9H9V9h10v2zm-4 4H9v-2h6v2zm4-8H9V5h10v2z'
	});

	var chevronIcon = new SVGIcon({
	  name: 'chevron',
	  viewBox: '0 0 7 9',
	  complexContents: "<g fill-rule=\"evenodd\" transform=\"translate(-1 -8)\"><path d=\"m2.6417004 8-1.1417004 1.0575 3.70850202 3.4425-3.70850202 3.4425 1.1417004 1.0575 4.8582996-4.5z\"/></g>"
	});

	var supportIcon = new SVGIcon({
	  name: 'support',
	  path: 'M12,0 C5.376,0 0,5.376 0,12 C0,18.624 5.376,24 12,24 C18.624,24 24,18.624 24,12 C24,5.376 18.624,0 12,0 Z M13,19 L11,19 L11,17 L13,17 L13,19 Z M15.07,11.25 L14.17,12.17 C13.45,12.9 13,13.5 13,15 L11,15 L11,14.5 C11,13.4 11.45,12.4 12.17,11.67 L13.41,10.41 C13.78,10.05 14,9.55 14,9 C14,7.9 13.1,7 12,7 C10.9,7 10,7.9 10,9 L8,9 C8,6.79 9.79,5 12,5 C14.21,5 16,6.79 16,9 C16,9.88 15.64,10.68 15.07,11.25 Z'
	});

	var yextIcon = new SVGIcon({
	  name: 'yext',
	  viewBox: '0 0 30 30',
	  path: 'M25.517 28.142v.095h-.204v.905h-.066v-.905h-.197v-.095h.467zm.667 0h.066v1h-.066v-.825l-.24.595h-.013l-.24-.595v.825h-.066v-1h.066l.247.61.246-.61zM15 28.8c7.622 0 13.8-6.178 13.8-13.8 0-7.622-6.178-13.8-13.8-13.8C7.378 1.2 1.2 7.378 1.2 15c0 7.622 6.178 13.8 13.8 13.8zM15 0c8.284 0 15 6.716 15 15 0 8.284-6.716 15-15 15-8.284 0-15-6.716-15-15C0 6.716 6.716 0 15 0zm.45 16.65v-1.2h6.6v1.2h-2.7v5.4h-1.2v-5.4h-2.7zm-1.599-1.35l.849.849-2.601 2.601 2.601 2.601-.849.849-2.601-2.601L8.649 22.2l-.849-.849 2.601-2.601L7.8 16.149l.849-.849 2.601 2.601 2.601-2.601zM18.675 9a2.175 2.175 0 00-1.847 3.323l2.995-2.995A2.163 2.163 0 0018.675 9zm0 5.55a3.375 3.375 0 112.833-5.209l-3.789 3.788a2.175 2.175 0 003.13-1.954h1.201a3.375 3.375 0 01-3.375 3.375zm-7.425-3.734L13.78 7.8l.92.771-2.85 3.397v2.582h-1.2v-2.582L7.8 8.57l.92-.771 2.53 3.016z'
	});

	var pinIcon = new SVGIcon({
	  name: 'pin',
	  viewBox: '0 0 13 18',
	  path: 'm9.375 0c-3.52446429 0-6.375 2.817-6.375 6.3 0 4.725 6.375 11.7 6.375 11.7s6.375-6.975 6.375-11.7c0-3.483-2.8505357-6.3-6.375-6.3zm.00000018 8.55000007c-1.25678576 0-2.27678579-1.008-2.27678579-2.25s1.02000003-2.25 2.27678579-2.25c1.25678572 0 2.27678582 1.008 2.27678582 2.25s-1.0200001 2.25-2.27678582 2.25z'
	});

	var gearIcon = new SVGIcon({
	  name: 'gear',
	  path: 'M12 10c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm7-7H5a2 2 0 00-2 2v14a2 2 0 002 2h14a2 2 0 002-2V5a2 2 0 00-2-2zm-1.75 9c0 .23-.02.46-.05.68l1.48 1.16c.13.11.17.3.08.45l-1.4 2.42c-.09.15-.27.21-.43.15l-1.74-.7c-.36.28-.76.51-1.18.69l-.26 1.85c-.03.17-.18.3-.35.3h-2.8c-.17 0-.32-.13-.35-.29l-.26-1.85c-.43-.18-.82-.41-1.18-.69l-1.74.7c-.16.06-.34 0-.43-.15l-1.4-2.42a.353.353 0 01.08-.45l1.48-1.16c-.03-.23-.05-.46-.05-.69 0-.23.02-.46.05-.68l-1.48-1.16a.353.353 0 01-.08-.45l1.4-2.42c.09-.15.27-.21.43-.15l1.74.7c.36-.28.76-.51 1.18-.69l.26-1.85c.03-.17.18-.3.35-.3h2.8c.17 0 .32.13.35.29l.26 1.85c.43.18.82.41 1.18.69l1.74-.7c.16-.06.34 0 .43.15l1.4 2.42c.09.15.05.34-.08.45l-1.48 1.16c.03.23.05.46.05.69z'
	});

	var lightBulbIcon = new SVGIcon({
	  name: 'light_bulb',
	  viewBox: '0 0 32 35',
	  path: 'M11.585 31.056l8.38-.493v-.986l-8.38.493zM11.585 33.028L15.775 35l4.19-1.972V31.55l-8.38.493v.986zm6.926-.407l-2.736 1.29-2.13-1.004 4.866-.286zM15.775 7.394c-4.63 0-8.38 3.205-8.38 8.38 0 5.177 4.19 6.902 4.19 12.818v.493l8.38-.493c0-5.916 4.19-8.188 4.19-12.817a8.38 8.38 0 00-8.38-8.38zm5.617 13.48c-1.025 1.837-2.174 3.892-2.381 6.786l-6.44.38c-.129-3.01-1.29-5.021-2.32-6.808-.493-.8-.928-1.636-1.299-2.5h13.556c-.325.708-.704 1.403-1.116 2.142zm1.479-3.128H8.627a7.793 7.793 0 01-.247-1.971c0-4.353 3.042-7.395 7.395-7.395a7.394 7.394 0 017.394 7.395 6.739 6.739 0 01-.3 1.971h.002zM26.62 15.282h4.93v1h-4.93zM23.094 7.756l2.091-2.091.698.697-2.092 2.092zM15.282 0h1v4.93h-1zM5.666 6.362l.697-.697 2.091 2.091-.697.697zM0 15.282h4.93v1H0z'
	});

	var starIcon = new SVGIcon({
	  name: 'receipt',
	  viewBox: '0 0 18 18',
	  path: 'M8.991 0C4.023 0 0 4.032 0 9s4.023 9 8.991 9C13.968 18 18 13.968 18 9s-4.032-9-9.009-9zm3.816 14.4L9 12.105 5.193 14.4l1.008-4.329-3.357-2.907 4.428-.378L9 2.7l1.728 4.077 4.428.378-3.357 2.907z'
	});

	var close = new SVGIcon({
	  name: 'close',
	  complexContents: "\n    <path d=\"M7 8l9.716 9.716m0-9.716L7 17.716\" \n          stroke=\"currentColor\" \n          stroke-width=\"2\"/>\n  "
	});

	var elements = new SVGIcon({
	  name: 'elements',
	  path: 'M13,15 L13,17 L21,17 L21,19 L13,19 L13,21 L11,21 L11,15 L13,15 Z M9,17 L9,19 L3,19 L3,17 L9,17 Z M9,15 L7,15 L7,13 L3,13 L3,11 L7,11 L7,9 L9,9 L9,15 Z M21,11 L21,13 L11,13 L11,11 L21,11 Z M17,3 L17,5 L21,5 L21,7 L17,7 L17,9 L15,9 L15,3 L17,3 Z M13,5 L13,7 L3,7 L3,5 L13,5 Z'
	});

	var iconsArray = [thumbIcon, receiptIcon, pantheonIcon, micIcon, directionsIcon, calendarIcon, calloutIcon, infoIcon, briefcaseIcon, kabobIcon, personIcon, magnifyingGlassIcon, officeIcon, linkIcon, windowIcon, phoneIcon, tagIcon, documentIcon, chevronIcon, supportIcon, yextIcon, pinIcon, gearIcon, lightBulbIcon, elements, close];
	var Icons = {};

	forEach$4(iconsArray).call(iconsArray, function (icon) {
	  Icons[icon.name] = icon.markup();
	});

	Icons["default"] = starIcon.markup();

	var IconComponent =
	/*#__PURE__*/
	function (_Component) {
	  inheritsLoose(IconComponent, _Component);

	  /**
	   * IconComponent
	   * @param opts
	   * @param opts.iconName {string}
	   * @param opts.customIcon {string}
	   * @param opts.iconUrl {string}
	   */
	  function IconComponent(opts, systemOpts) {
	    var _this;

	    if (opts === void 0) {
	      opts = {};
	    }

	    if (systemOpts === void 0) {
	      systemOpts = {};
	    }

	    _this = _Component.call(this, opts, systemOpts) || this;
	    /**
	     * name of an icon from the default icon set
	     * @type {string}
	     */

	    _this.iconName = opts.iconName || 'default';
	    /**
	     * the markup for a fully custom icon
	     * @type {*|null}
	     */

	    _this.customIcon = opts.customIcon || null;
	    /**
	     * the url to a custom image icon
	     * @type {null}
	     */

	    _this.iconUrl = opts.iconUrl || null;
	    return _this;
	  }
	  /**
	   * getter for the image pasted to handlebars
	   * @returns {string}
	   */


	  /**
	   * The template to render
	   * @returns {string}
	   * @override
	   */
	  IconComponent.defaultTemplateName = function defaultTemplateName(config) {
	    return 'icons/icon';
	  }
	  /**
	   * allowing duplicates
	   * @returns {boolean}
	   * @override
	   */
	  ;

	  IconComponent.areDuplicateNamesAllowed = function areDuplicateNamesAllowed() {
	    return true;
	  }
	  /**
	   * overrides default functionality to provide name and markup
	   * @param data
	   * @returns {IconComponent}
	   */
	  ;

	  var _proto = IconComponent.prototype;

	  _proto.setState = function setState(data) {
	    return _Component.prototype.setState.call(this, assign$2(data, {
	      image: this.image,
	      name: this.iconName ? this.iconName : 'custom'
	    }));
	  };

	  createClass(IconComponent, [{
	    key: "image",
	    get: function get() {
	      if (this.customIcon) {
	        return this.customIcon;
	      }

	      if (this.iconUrl) {
	        return "<img src=\"" + this.iconUrl + "\" alt=\"\" class=\"Icon-image\">";
	      }

	      if (Icons[this.iconName]) {
	        return Icons[this.iconName];
	      }

	      return Icons["default"];
	    }
	  }], [{
	    key: "type",
	    get: function get() {
	      return 'IconComponent';
	    }
	  }]);

	  return IconComponent;
	}(Component);

	var COMPONENT_CLASS_LIST = [// Core Component
	Component, // Navigation Components
	NavigationComponent, // Search Components
	SearchComponent, FilterSearchComponent, AutoCompleteComponent, SpellCheckComponent, LocationBiasComponent, // Filter Components
	FilterBoxComponent, FilterOptionsComponent, RangeFilterComponent, DateRangeFilterComponent, FacetsComponent, GeoLocationComponent, SortOptionsComponent, // Results Components
	DirectAnswerComponent, UniversalResultsComponent, ResultsComponent, PaginationComponent, ResultsItemComponent, AccordionResultsComponent, LocationResultsItemComponent, EventResultsItemComponent, PeopleResultsItemComponent, MapComponent, // Questions Components
	QuestionSubmissionComponent, // Helper Components
	IconComponent];
	/**
	 * The component registry is a map that contains
	 * all available component classes used for creation or extension.
	 * Each component class has a unique type, which is used as the key for the registry
	 * @type {Object.<string, Component>}
	 */

	var COMPONENT_REGISTRY = reduce$2(COMPONENT_CLASS_LIST).call(COMPONENT_CLASS_LIST, function (registry, clazz) {
	  registry[clazz.type] = clazz;
	  return registry;
	}, {});

	/**
	 * ComponentManager is a Singletone that contains both an internal registry of
	 * eligible components to be created, as well as keeps track of the current
	 * instantiated and active components.
	 *
	 * ALL components should be constructed using the {ComponentManager} via its `create` method.
	 */

	var ComponentManager =
	/*#__PURE__*/
	function () {
	  function ComponentManager() {
	    /**
	     * The active components is an internal container to keep track
	     * of all of the components that have been constructed
	     */
	    this._activeComponents = [];
	    /**
	     * A local reference to the core library dependency
	     *
	     * The Core contains both the storage AND services that are needed for performing operations
	     * like search and auto complete.
	     *
	     * The storage is the source of truth for the state of ALL components.
	     * Whenever the storage is updated, the state gets pushed down to the necessary components.
	     * @type {Core}
	     */

	    this._core = null;
	    /**
	     * The primary renderer to use for all components
	     * @type {HandlebarsRenderer}
	     */

	    this._renderer = null;
	    /**
	     * A local reference to the analytics reporter dependency
	     */

	    this._analyticsReporter = null;
	  }

	  ComponentManager.getInstance = function getInstance() {
	    if (!this.instance) {
	      this.instance = new ComponentManager();
	    }

	    return this.instance;
	  };

	  var _proto = ComponentManager.prototype;

	  _proto.setRenderer = function setRenderer(renderer) {
	    this._renderer = renderer;
	    return this;
	  };

	  _proto.setCore = function setCore(core) {
	    this._core = core;
	    return this;
	  };

	  _proto.setAnalyticsReporter = function setAnalyticsReporter(reporter) {
	    this._analyticsReporter = reporter;
	    return this;
	  }
	  /**
	   * registers a component to be eligible for creation and override.
	   * @param {Component} The Component Class to register
	   */
	  ;

	  _proto.register = function register(componentClazz) {
	    COMPONENT_REGISTRY[componentClazz.type] = componentClazz;
	    return this;
	  }
	  /**
	   * create is the entry point for constructing any and all components.
	   * It will instantiate a new instance of the component, and both apply
	   * initial state from the storage and bind it to the storage for updates.
	   * @param {string} componentType The component type to create
	   * @param {Object} opts The options to pipe to the construction of the component
	   */
	  ;

	  _proto.create = function create(componentType, opts) {
	    var _context, _context2;

	    // Every component needs local access to the component manager
	    // because sometimes components have subcomponents that need to be
	    // constructed during creation
	    var systemOpts = {
	      core: this._core,
	      renderer: this._renderer,
	      analyticsReporter: this._analyticsReporter,
	      componentManager: this
	    };
	    var componentClass = COMPONENT_REGISTRY[componentType];

	    if (!componentClass.areDuplicateNamesAllowed() && some$2(_context = this._activeComponents).call(_context, function (c) {
	      return c.name === opts.name;
	    })) {
	      throw new AnswersComponentError("Another component with name " + opts.name + " already exists", componentType);
	    }

	    var config = objectSpread({
	      isTwin: some$2(_context2 = this._activeComponents).call(_context2, function (component) {
	        return component.constructor.type === componentType;
	      })
	    }, opts); // Instantiate our new component and keep track of it


	    var component = new COMPONENT_REGISTRY[componentType](config, systemOpts).init(config);

	    this._activeComponents.push(component); // If there is a global storage to power state, apply the state
	    // from the storage to the component, and then bind the component
	    // state to the storage via its updates


	    if (this._core && this._core.globalStorage !== null) {
	      if (component.moduleId === undefined || component.moduleId === null) {
	        return component;
	      }

	      this._core.globalStorage.on('update', component.moduleId, function (data) {
	        component.setState(data);
	      });
	    }

	    return component;
	  }
	  /**
	   * Remove the provided component from the list of active components and remove
	   * the associated storage event listener
	   * @param {Component} component The component to remove
	   */
	  ;

	  _proto.remove = function remove(component) {
	    var _context3, _context4;

	    this._core.globalStorage.off('update', component.moduleId);

	    var index = findIndex$3(_context3 = this._activeComponents).call(_context3, function (c) {
	      return c.name === component.name;
	    });

	    splice$2(_context4 = this._activeComponents).call(_context4, index, 1);
	  }
	  /**
	   * Remove the component with the given name
	   * @param {string} name The name of the compnent to remove
	   */
	  ;

	  _proto.removeByName = function removeByName(name) {
	    var _context5;

	    var component = find$5(_context5 = this._activeComponents).call(_context5, function (c) {
	      return c.name === name;
	    });

	    component.remove();
	    DOM.empty(component._container);
	  };

	  _proto.getActiveComponent = function getActiveComponent(type) {
	    var _context6;

	    return find$5(_context6 = this._activeComponents).call(_context6, function (c) {
	      return c.constructor.type === type;
	    });
	  };

	  return ComponentManager;
	}();

	/** @module NavigationConfig */
	var TabConfig =
	/*#__PURE__*/
	function () {
	  function TabConfig(config) {
	    if (config === void 0) {
	      config = {};
	    }

	    /**
	     * The name of the tab that is exposed for the link
	     * @type {string}
	     */
	    this.label = config.label || null;
	    /**
	     * The complete URL, including the params
	     * @type {string}
	     */

	    this.url = config.url || null;
	    /**
	     * The serverside vertical config id that this is referenced to.
	     * By providing this, enables dynamic sorting based on results.
	     * @type {string}
	     */

	    this.configId = config.configId || null;
	    /**
	     * Determines whether to show this tab first in the order
	     * @type {boolean}
	     */

	    this.isFirst = config.isFirst || false;
	    /**
	     * Determines whether or not to apply a special class to the
	     * markup to determine if it's an active tab
	     * @type {boolean}
	     */

	    this.isActive = config.isActive || false;
	  }

	  var _proto = TabConfig.prototype;

	  _proto.validate = function validate() {};

	  TabConfig.from = function from(tabs) {
	    var tabConfigs = [];

	    if (tabs === undefined) {
	      return tabConfigs;
	    }

	    for (var i = 0; i < tabs.length; i++) {
	      var tab = tabs[i];
	      tabConfigs.push(new TabConfig(tab));
	    }

	    return tabConfigs;
	  };

	  return TabConfig;
	}();

	var NavigationConfig = function NavigationConfig(config) {
	  if (config === void 0) {
	    config = {};
	  }

	  this.tabsConfig = TabConfig.from(config.tabs);
	};

	/** @typedef {import('./core/services/searchservice').default} SearchService */

	/** @typedef {import('./core/services/autocompleteservice').default} AutoCompleteService */

	/** @typedef {import('./core/services/questionanswerservice').default} QuestionAnswerService */

	/** @typedef {import('./core/services/errorreporterservice').default} ErrorReporterService */

	/** @typedef {import('./core/services/analyticsreporterservice').default} AnalyticsReporterService */

	/**
	 * @typedef Services
	 * @property {SearchService} searchService
	 * @property {AutoCompleteService} autoCompleteService
	 * @property {QuestionAnswerService} questionAnswerService
	 * @property {ErrorReporterService} errorReporterService
	 */

	var DEFAULTS = {
	  locale: 'en'
	};
	/**
	 * The main Answers interface
	 */

	var Answers =
	/*#__PURE__*/
	function () {
	  function Answers() {
	    if (!Answers.setInstance(this)) {
	      return Answers.getInstance();
	    }
	    /**
	     * A reference to the Component base class for custom
	     * components to extend
	     */


	    this.Component = Component;
	    /**
	     * A reference to the AnalyticsEvent base class for reporting
	     * custom analytics
	     */

	    this.AnalyticsEvent = AnalyticsEvent;
	    /**
	     * A reference of the renderer to use for the components
	     * This is provided during initialization.
	     * @type {Renderer}
	     */

	    this.renderer = new Renderers.Handlebars();
	    /**
	     * A local reference to the component manager
	     * @type {ComponentManager}
	     */

	    this.components = ComponentManager.getInstance();
	    /**
	     * A local reference to the core api
	     * @type {Core}
	     */

	    this.core = null;
	    /**
	     * A callback function to invoke once the library is ready.
	     * Typically fired after templates are fetched from server for rendering.
	     */

	    this._onReady = function () {};
	    /**
	     * @type {boolean}
	     * @private
	     */


	    this._eligibleForAnalytics = false;
	    /**
	     * @type {Services}
	     * @private
	     */

	    this._services = null;
	    /**
	     * @type {AnalyticsReporterService}
	     * @private
	     */

	    this._analyticsReporterService = null;
	  }

	  Answers.setInstance = function setInstance(instance) {
	    if (!this.instance) {
	      this.instance = instance;
	      return true;
	    }

	    return false;
	  };

	  Answers.getInstance = function getInstance() {
	    return this.instance;
	  };

	  var _proto = Answers.prototype;

	  _proto.init = function init(config) {
	    var _this = this;

	    var parsedConfig = this.parseConfig(config);
	    this.validateConfig(parsedConfig);
	    parsedConfig.search = new SearchConfig(parsedConfig.search);
	    parsedConfig.navigation = new NavigationConfig(parsedConfig.navigation);
	    var globalStorage = new GlobalStorage();
	    var persistentStorage = new PersistentStorage({
	      updateListener: parsedConfig.onStateChange,
	      resetListener: function resetListener(data) {
	        return globalStorage.setAll(data);
	      }
	    });
	    globalStorage.setAll(persistentStorage.getAll());
	    globalStorage.set(StorageKeys.SEARCH_CONFIG, parsedConfig.search);
	    globalStorage.set(StorageKeys.NAVIGATION_CONFIG, parsedConfig.navigation);
	    globalStorage.set(StorageKeys.LOCALE, parsedConfig.locale);
	    globalStorage.set(StorageKeys.SESSIONS_OPT_IN, parsedConfig.sessionTrackingEnabled);
	    this._services = parsedConfig.mock ? getMockServices() : getServices(parsedConfig, globalStorage);
	    this.core = new Core({
	      apiKey: parsedConfig.apiKey,
	      globalStorage: globalStorage,
	      persistentStorage: persistentStorage,
	      experienceKey: parsedConfig.experienceKey,
	      fieldFormatters: parsedConfig.fieldFormatters,
	      experienceVersion: parsedConfig.experienceVersion,
	      locale: parsedConfig.locale,
	      searchService: this._services.searchService,
	      autoCompleteService: this._services.autoCompleteService,
	      questionAnswerService: this._services.questionAnswerService
	    });

	    if (parsedConfig.onStateChange && typeof parsedConfig.onStateChange === 'function') {
	      parsedConfig.onStateChange(persistentStorage.getAll(), window.location.search.substr(1));
	    }

	    this.components.setCore(this.core).setRenderer(this.renderer);
	    this._eligibleForAnalytics = parsedConfig.businessId != null;

	    if (this._eligibleForAnalytics) {
	      // TODO(amullings): Initialize with other services
	      var reporter = parsedConfig.mock ? new NoopAnalyticsReporter() : new AnalyticsReporter(this.core, parsedConfig.experienceKey, parsedConfig.experienceVersion, parsedConfig.businessId, parsedConfig.analyticsOptions, parsedConfig.environment);
	      this._analyticsReporterService = reporter;
	      this.components.setAnalyticsReporter(reporter);
	      initScrollListener(reporter);
	    }

	    this._setDefaultInitialSearch(parsedConfig.search);

	    this._onReady = parsedConfig.onReady || function () {};

	    if (parsedConfig.useTemplates === false || parsedConfig.templateBundle) {
	      if (parsedConfig.templateBundle) {
	        this.renderer.init(parsedConfig.templateBundle);
	      }

	      this._onReady();

	      return this;
	    } // Templates are currently downloaded separately from the CORE and UI bundle.
	    // Future enhancement is to ship the components with templates in a separate bundle.


	    this.templates = new TemplateLoader({
	      templateUrl: parsedConfig.templateUrl
	    }).onLoaded(function (templates) {
	      _this.renderer.init(templates);

	      _this._onReady();
	    });
	    return this;
	  };

	  _proto.domReady = function domReady(cb) {
	    DOM.onReady(cb);
	  };

	  _proto.onReady = function onReady(cb) {
	    this._onReady = cb;
	    return this;
	  }
	  /**
	   * Parses the config provided by the user. In the parsed config, any options not supplied by the
	   * user are given default values.
	   * @param {Object} config The user supplied config.
	   */
	  ;

	  _proto.parseConfig = function parseConfig(config) {
	    var _context;

	    var parsedConfig = assign$2({}, DEFAULTS, config);

	    var sessionTrackingEnabled = true;

	    if (typeof config.sessionTrackingEnabled === 'boolean') {
	      sessionTrackingEnabled = config.sessionTrackingEnabled;
	    }

	    parsedConfig.sessionTrackingEnabled = sessionTrackingEnabled;
	    var sandboxPrefix = SANDBOX + "-";
	    includes$4(_context = parsedConfig.apiKey).call(_context, sandboxPrefix) ? parsedConfig.environment = SANDBOX : parsedConfig.environment = PRODUCTION;
	    parsedConfig.apiKey = parsedConfig.apiKey.replace(sandboxPrefix, '');
	    return parsedConfig;
	  }
	  /**
	   * Validates the Answers config object to ensure things like api key and experience key are
	   * properly set.
	   * @param {Object} config The Answers config.
	   */
	  ;

	  _proto.validateConfig = function validateConfig(config) {
	    // TODO (tmeyer): Extract this method into it's own class. Investigate the use of JSON schema
	    // to validate these configs.
	    if (typeof config.apiKey !== 'string') {
	      throw new Error('Missing required `apiKey`. Type must be {string}');
	    }

	    if (typeof config.experienceKey !== 'string') {
	      throw new Error('Missing required `experienceKey`. Type must be {string}');
	    }
	  }
	  /**
	   * Register a custom component type so it can be created via
	   * addComponent and used as a child component
	   * @param {Component} componentClass
	   */
	  ;

	  _proto.registerComponentType = function registerComponentType(componentClass) {
	    this.components.register(componentClass);
	  };

	  _proto.addComponent = function addComponent(type, opts) {
	    if (typeof opts === 'string') {
	      opts = {
	        container: opts
	      };
	    }

	    try {
	      this.components.create(type, opts).mount();
	    } catch (e) {
	      throw new AnswersComponentError('Failed to add component', type, e);
	    }

	    return this;
	  }
	  /**
	   * Remove the component - and all of its children - with the given name
	   * @param {string} name The name of the component to remove
	   */
	  ;

	  _proto.removeComponent = function removeComponent(name) {
	    this.components.removeByName(name);
	  };

	  _proto.createComponent = function createComponent(opts) {
	    return this.components.create('Component', opts).mount();
	  };

	  _proto.registerHelper = function registerHelper(name, cb) {
	    this.renderer.registerHelper(name, cb);
	    return this;
	  }
	  /**
	   * Opt in or out of convertion tracking analytics
	   * @param {boolean} optIn
	   */
	  ;

	  _proto.setConversionsOptIn = function setConversionsOptIn(optIn) {
	    if (this._eligibleForAnalytics) {
	      this._analyticsReporterService.setConversionTrackingEnabled(optIn);
	    }
	  }
	  /**
	   * Opt in or out of session cookies
	   * @param {boolean} optIn
	   */
	  ;

	  _proto.setSessionsOptIn = function setSessionsOptIn(optIn) {
	    this.core.globalStorage.set(StorageKeys.SESSIONS_OPT_IN, optIn);
	  }
	  /**
	   * Sets a search query on initialization for vertical searchers that have a
	   * defaultInitialSearch provided, if the user hasn't already provided their
	   * own via URL param.
	   * @param {SearchConfig} searchConfig
	   * @private
	   */
	  ;

	  _proto._setDefaultInitialSearch = function _setDefaultInitialSearch(searchConfig) {
	    if (searchConfig.defaultInitialSearch == null || !searchConfig.verticalKey) {
	      return;
	    }

	    var prepopulatedQuery = this.core.globalStorage.getState(StorageKeys.QUERY);

	    if (prepopulatedQuery != null) {
	      return;
	    }

	    this.core.globalStorage.set('queryTrigger', 'initialize');
	    this.core.setQuery(searchConfig.defaultInitialSearch);
	  };

	  return Answers;
	}();
	/**
	 * @param {Object} config
	 * @param {GlobalStorage} globalStorage
	 * @returns {Services}
	 */


	function getServices(config, globalStorage) {
	  return {
	    searchService: new SearchApi({
	      apiKey: config.apiKey,
	      experienceKey: config.experienceKey,
	      experienceVersion: config.experienceVersion,
	      locale: config.locale,
	      environment: config.environment
	    }),
	    autoCompleteService: new AutoCompleteApi({
	      apiKey: config.apiKey,
	      experienceKey: config.experienceKey,
	      experienceVersion: config.experienceVersion,
	      locale: config.locale,
	      environment: config.environment
	    }, globalStorage),
	    questionAnswerService: new QuestionAnswerApi({
	      apiKey: config.apiKey,
	      environment: config.environment
	    }, globalStorage),
	    errorReporterService: new ErrorReporter({
	      apiKey: config.apiKey,
	      experienceKey: config.experienceKey,
	      experienceVersion: config.experienceVersion,
	      printVerbose: config.debug,
	      sendToServer: !config.suppressErrorReports,
	      environment: config.environment
	    }, globalStorage)
	  };
	}
	/**
	 * @returns {Services}
	 */


	function getMockServices() {
	  return {
	    searchService: new MockSearchService(),
	    autoCompleteService: new MockAutoCompleteService(),
	    questionAnswerService: new MockQuestionAnswerService(),
	    errorReporterService: new ConsoleErrorReporter()
	  };
	}
	/**
	 * Initialize the scroll event listener to send analytics events
	 * when the user scrolls to the bottom. Debounces scroll events so
	 * they are processed after the user stops scrolling
	 */


	function initScrollListener(reporter) {
	  var DEBOUNCE_TIME = 100;
	  var timeout = null;

	  var sendEvent = function sendEvent() {
	    if (window.innerHeight + window.pageYOffset >= document.body.scrollHeight) {
	      var event = new AnalyticsEvent('SCROLL_TO_BOTTOM_OF_PAGE');
	      reporter.report(event);
	    }
	  };

	  document.addEventListener('scroll', function () {
	    clearTimeout(timeout);
	    timeout = setTimeout$2(sendEvent, DEBOUNCE_TIME);
	  });
	}

	var ANSWERS = new Answers();

	return ANSWERS;

}());

//# sourceMappingURL=data:application/json;charset=utf-8;base64,