(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('markdown-it-for-inline')) :
  typeof define === 'function' && define.amd ? define(['markdown-it-for-inline'], factory) :
  (global = global || self, global.ANSWERS = factory(global.iterator));
}(this, function (iterator) { 'use strict';

  iterator = iterator && iterator.hasOwnProperty('default') ? iterator['default'] : iterator;

  function _typeof(obj) {
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function (obj) {
        return typeof obj;
      };
    } else {
      _typeof = function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }

    return _typeof(obj);
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function _objectSpread(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};
      var ownKeys = Object.keys(source);

      if (typeof Object.getOwnPropertySymbols === 'function') {
        ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
          return Object.getOwnPropertyDescriptor(source, sym).enumerable;
        }));
      }

      ownKeys.forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    }

    return target;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    if (superClass) _setPrototypeOf(subClass, superClass);
  }

  function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
      return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _getPrototypeOf(o);
  }

  function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
      o.__proto__ = p;
      return o;
    };

    return _setPrototypeOf(o, p);
  }

  function isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;

    try {
      Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
      return true;
    } catch (e) {
      return false;
    }
  }

  function _construct(Parent, args, Class) {
    if (isNativeReflectConstruct()) {
      _construct = Reflect.construct;
    } else {
      _construct = function _construct(Parent, args, Class) {
        var a = [null];
        a.push.apply(a, args);
        var Constructor = Function.bind.apply(Parent, a);
        var instance = new Constructor();
        if (Class) _setPrototypeOf(instance, Class.prototype);
        return instance;
      };
    }

    return _construct.apply(null, arguments);
  }

  function _isNativeFunction(fn) {
    return Function.toString.call(fn).indexOf("[native code]") !== -1;
  }

  function _wrapNativeSuper(Class) {
    var _cache = typeof Map === "function" ? new Map() : undefined;

    _wrapNativeSuper = function _wrapNativeSuper(Class) {
      if (Class === null || !_isNativeFunction(Class)) return Class;

      if (typeof Class !== "function") {
        throw new TypeError("Super expression must either be null or a function");
      }

      if (typeof _cache !== "undefined") {
        if (_cache.has(Class)) return _cache.get(Class);

        _cache.set(Class, Wrapper);
      }

      function Wrapper() {
        return _construct(Class, arguments, _getPrototypeOf(this).constructor);
      }

      Wrapper.prototype = Object.create(Class.prototype, {
        constructor: {
          value: Wrapper,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
      return _setPrototypeOf(Wrapper, Class);
    };

    return _wrapNativeSuper(Class);
  }

  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;

    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      target[key] = source[key];
    }

    return target;
  }

  function _objectWithoutProperties(source, excluded) {
    if (source == null) return {};

    var target = _objectWithoutPropertiesLoose(source, excluded);

    var key, i;

    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
        target[key] = source[key];
      }
    }

    return target;
  }

  function _assertThisInitialized(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return self;
  }

  function _possibleConstructorReturn(self, call) {
    if (call && (typeof call === "object" || typeof call === "function")) {
      return call;
    }

    return _assertThisInitialized(self);
  }

  function _superPropBase(object, property) {
    while (!Object.prototype.hasOwnProperty.call(object, property)) {
      object = _getPrototypeOf(object);
      if (object === null) break;
    }

    return object;
  }

  function _get(target, property, receiver) {
    if (typeof Reflect !== "undefined" && Reflect.get) {
      _get = Reflect.get;
    } else {
      _get = function _get(target, property, receiver) {
        var base = _superPropBase(target, property);

        if (!base) return;
        var desc = Object.getOwnPropertyDescriptor(base, property);

        if (desc.get) {
          return desc.get.call(receiver);
        }

        return desc.value;
      };
    }

    return _get(target, property, receiver || target);
  }

  function _slicedToArray(arr, i) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
  }

  function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
  }

  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) {
      for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

      return arr2;
    }
  }

  function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
  }

  function _iterableToArray(iter) {
    if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
  }

  function _iterableToArrayLimit(arr, i) {
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;

    try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance");
  }

  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance");
  }

  /** @module SearchStates */

  /**
   * SearchStates is an ENUM for the various stages of searching,
   * used to show different templates
   * @enum {string}
   */
  var SearchStates = {
    PRE_SEARCH: 'pre-search',
    SEARCH_LOADING: 'search-loading',
    SEARCH_COMPLETE: 'search-complete'
  };

  /** @module Result */
  var Result = function Result() {
    var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, Result);

    /**
     * The raw profile data
     * @type {Object}
     * @private
     */
    this._raw = data.raw || null;
    /**
     * The formatted profile data
     * @type {Object}
     * @private
     */

    this._formatted = data.formatted;
    /**
     * The highlighted profile data with highlights applied to applicable fields
     * @type {Object}
     * @private
     */

    this._highlighted = data.highlighted;
    /**
     * The index number of the result
     * @type {Number}
     */

    this.ordinal = data.ordinal || null;
    /**
     * The title of the result card
     * @type {string|null}
     */

    this.title = data.title || null;
    /**
     * The body of the details section of the result card, can contain HTML
     * @type {string| null}
     */

    this.details = data.details || null;
    /**
     * The destination link for the title of the result card
     * @type {string|null}
     */

    this.link = data.link || null;
    /**
     * The Entity ID, or other unique identifier, used for to power interactivity
     * @type {string|null}
     */

    this.id = data.id || null;
    /**
     * The subtitle on the result card
     * @type {string|null}
     */

    this.subtitle = data.subtitle || null;
    /**
     * The class modifier, usually derived from the vertical configuration ID
     * Used to apply different styling to different result card types
     * @type {string|null}
     */

    this.modifier = data.modifier || null;
    /**
     * A large date, of the format { month: 'Jan', day: '01' }
     * @type {Object|null}
     */

    this.bigDate = data.bigDate || null;
    /**
     * An image profile object, expected to have a url property
     * @type {Object|null}
     */

    this.image = data.image || null;
    /**
     * An array of calls to action, of the format:
     * { icon: '', url: '', text: '', eventType: '', eventOptions: {}}
     * @type {Array}
     */

    this.callsToAction = data.callsToAction || [];
    /**
     * Determines if an accordian result should be collapsed by default
     * @type {boolean}
     */

    this.collapsed = data.collapsed === undefined ? true : data.collapsed;
    /**
     * @type {number}
     */

    this.distance = data.distance || null;
  };

  /** @module HighlightedValue */

  /**
   * Model representing a highlighted value.
   */
  var HighlightedValue =
  /*#__PURE__*/
  function () {
    function HighlightedValue() {
      var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      _classCallCheck(this, HighlightedValue);

      this.value = data.value || data.shortValue || '';
      this.matchedSubstrings = data.matchedSubstrings || [];
    }
    /**
     * get highlighted value string
     * @returns {string}
     */


    _createClass(HighlightedValue, [{
      key: "get",
      value: function get() {
        this._sortMatchedSubstrings();

        return this.buildHighlightedValue(this.value, this.matchedSubstrings);
      }
      /**
       * get inverted highlighted value string
       * @returns {string}
       */

    }, {
      key: "getInverted",
      value: function getInverted() {
        this._sortMatchedSubstrings();

        var invertedSubstrings = this._getInvertedSubstrings(this.matchedSubstrings, this.value.length);

        return this.buildHighlightedValue(this.value, invertedSubstrings);
      }
      /**
       * introduces highlighting to input data according to highlighting specifiers
       *
       * @param {Object} val input object to apply highlighting to
       *
       *  example object :
       *  {
       *    name: 'ATM',
       *    featuredMessage: {
       *      description: 'Save time & bank on your terms at over 1,800 ATMs'
       *    }
       *  }
       *
       * @param {Object} highlightedSubstrings highlighting specifiers to apply to input object
       *
       *  example object :
       *  {
       *    name: {
       *      matchedSubstrings: [{
       *        length: 3,
       *        offset: 0
       *      }],
       *      value: 'ATM'
       *    },
       *    featuredMessage: {
       *      description: {
       *        matchedSubstrings: [{
       *          length: 4,
       *          offset: 45
       *        }],
       *        value: 'Save time & bank on your terms at over 1,800 ATMs'
       *      }
       *    }
       *  }
       *
       * @returns {string} copy of input value with highlighting applied
       *
       *  example object :
       *  {
       *    name: '<strong>ATM</strong>',
       *    featuredMessage: {
       *      description: 'Save time & bank on your terms at over 1,800 <strong>ATMs</strong>'
       *    }
       *  }
       *
       */

    }, {
      key: "buildHighlightedValue",
      value: function buildHighlightedValue(val, highlightedSubstrings) {
        var highlightedValue = '';
        var nextStart = 0;

        if (highlightedSubstrings.length === 0) {
          return val;
        }

        for (var j = 0; j < highlightedSubstrings.length; j++) {
          var start = Number(highlightedSubstrings[j].offset);
          var end = start + highlightedSubstrings[j].length;
          highlightedValue += [val.slice(nextStart, start), '<strong>', val.slice(start, end), '</strong>'].join('');

          if (j === highlightedSubstrings.length - 1 && end < val.length) {
            highlightedValue += val.slice(end);
          }

          nextStart = end;
        }

        return highlightedValue;
      }
    }, {
      key: "_sortMatchedSubstrings",
      value: function _sortMatchedSubstrings() {
        this.matchedSubstrings.sort(function (a, b) {
          if (a.offset < b.offset) {
            return -1;
          }

          if (a.offset > b.offset) {
            return 1;
          }

          return 0;
        });
      }
    }, {
      key: "_getInvertedSubstrings",
      value: function _getInvertedSubstrings(matchedSubstrings, valueLength) {
        var invertedSubstrings = [];

        for (var i = 0; i < matchedSubstrings.length; i++) {
          var substring = matchedSubstrings[i];
          var nextOffset = substring.offset + substring.length;

          if (i === 0 && substring.offset !== 0) {
            invertedSubstrings.push({
              offset: 0,
              length: substring.offset
            });
          }

          if (valueLength > nextOffset) {
            invertedSubstrings.push({
              offset: nextOffset,
              length: i < matchedSubstrings.length - 1 ? matchedSubstrings[i + 1].offset - nextOffset : valueLength - nextOffset
            });
          }
        }

        return invertedSubstrings;
      }
    }]);

    return HighlightedValue;
  }();

  /** @module Errors */

  /**
   * AnswersBaseError is an extension of the base Error object.
   * This is the object that is used to when reporting to the server.
   * @extends Error
   *
   * Error codes fall into one of four categories:
   * 1XX errors: Basic errors
   * 2XX errors: UI errors
   * 3XX errors: Endpoint errors
   * 4XX errors: Core errors
   */
  var AnswersBaseError =
  /*#__PURE__*/
  function (_Error) {
    _inherits(AnswersBaseError, _Error);

    function AnswersBaseError(errorCode, message) {
      var _this;

      var boundary = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'unknown';
      var causedBy = arguments.length > 3 ? arguments[3] : undefined;

      _classCallCheck(this, AnswersBaseError);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(AnswersBaseError).call(this, message));
      _this.errorCode = errorCode;
      _this.errorMessage = message;
      _this.boundary = boundary;
      _this.reported = false;

      if (causedBy) {
        _this.causedBy = causedBy instanceof AnswersBaseError ? causedBy : AnswersBaseError.from(causedBy);
        _this.stack = "".concat(_this.stack, "\nCaused By: ").concat(_this.causedBy.stack);
      }

      return _this;
    }

    _createClass(AnswersBaseError, [{
      key: "toJson",
      value: function toJson() {
        return JSON.stringify(this);
      }
    }, {
      key: "toString",
      value: function toString() {
        var string = "".concat(this.errorMessage, " (").concat(this.boundary, ")");

        if (this.causedBy) {
          string += "\n  Caused By: ".concat(this.causedBy.toString());
        }

        return string;
      }
    }], [{
      key: "from",
      value: function from(builtinError, boundary) {
        var error = new AnswersBasicError(builtinError.message, boundary);
        error.stack = builtinError.stack;
        return error;
      }
    }]);

    return AnswersBaseError;
  }(_wrapNativeSuper(Error));
  /**
   * AnswersBasicError is a wrapper around all the built-in errors
   * e.g. undefined variables, incorrect syntax, types, missing methods, etc.
   * @extends AnswersBaseError
   */

  var AnswersBasicError =
  /*#__PURE__*/
  function (_AnswersBaseError) {
    _inherits(AnswersBasicError, _AnswersBaseError);

    function AnswersBasicError(message, boundary, causedBy) {
      _classCallCheck(this, AnswersBasicError);

      return _possibleConstructorReturn(this, _getPrototypeOf(AnswersBasicError).call(this, 100, message, boundary, causedBy));
    }

    return AnswersBasicError;
  }(AnswersBaseError);
  /**
   * AnswersUiError used for things like DOM errors.
   * @extends AnswersBaseError
   */

  var AnswersConfigError =
  /*#__PURE__*/
  function (_AnswersBaseError2) {
    _inherits(AnswersConfigError, _AnswersBaseError2);

    function AnswersConfigError(message, boundary, causedBy) {
      _classCallCheck(this, AnswersConfigError);

      return _possibleConstructorReturn(this, _getPrototypeOf(AnswersConfigError).call(this, 101, message, boundary, causedBy));
    }

    return AnswersConfigError;
  }(AnswersBaseError);
  /**
   * AnswersComponentError is used for Component oriented errors
   * e.g. failure to render, or catching unknowns.
   * @extends AnswersBaseError
   */

  var AnswersComponentError =
  /*#__PURE__*/
  function (_AnswersBaseError4) {
    _inherits(AnswersComponentError, _AnswersBaseError4);

    function AnswersComponentError(message, component, causedBy) {
      _classCallCheck(this, AnswersComponentError);

      return _possibleConstructorReturn(this, _getPrototypeOf(AnswersComponentError).call(this, 201, message, component, causedBy));
    }

    return AnswersComponentError;
  }(AnswersBaseError);
  /**
   * AnswersEndpointError represents all network related errors.
   * @extends AnswersBaseError
   */

  var AnswersEndpointError =
  /*#__PURE__*/
  function (_AnswersBaseError5) {
    _inherits(AnswersEndpointError, _AnswersBaseError5);

    function AnswersEndpointError(message, boundary, causedBy) {
      _classCallCheck(this, AnswersEndpointError);

      return _possibleConstructorReturn(this, _getPrototypeOf(AnswersEndpointError).call(this, 300, message, boundary, causedBy));
    }

    return AnswersEndpointError;
  }(AnswersBaseError);
  /**
   * AnswersCoreError represents errors for precondition failures in the core library
   * @extends AnswersBaseError
   */

  var AnswersCoreError =
  /*#__PURE__*/
  function (_AnswersBaseError6) {
    _inherits(AnswersCoreError, _AnswersBaseError6);

    function AnswersCoreError(message, boundary, causedBy) {
      _classCallCheck(this, AnswersCoreError);

      return _possibleConstructorReturn(this, _getPrototypeOf(AnswersCoreError).call(this, 400, message, boundary, causedBy));
    }

    return AnswersCoreError;
  }(AnswersBaseError);
  /**
   * AnswersStorageError represents storage related errors
   * @extends AnswersBaseError
   */

  var AnswersStorageError =
  /*#__PURE__*/
  function (_AnswersBaseError7) {
    _inherits(AnswersStorageError, _AnswersBaseError7);

    function AnswersStorageError(message, storageKey, data, causedBy) {
      var _this2;

      _classCallCheck(this, AnswersStorageError);

      _this2 = _possibleConstructorReturn(this, _getPrototypeOf(AnswersStorageError).call(this, 401, message, 'Storage', causedBy));
      _this2.storageKey = storageKey;
      _this2.data = data;
      return _this2;
    }

    return AnswersStorageError;
  }(AnswersBaseError);
  /**
   * AnswersAnalyticsError is used for errors when reporting analytics
   * @extends AnswersBaseError
   */

  var AnswersAnalyticsError =
  /*#__PURE__*/
  function (_AnswersBaseError8) {
    _inherits(AnswersAnalyticsError, _AnswersBaseError8);

    function AnswersAnalyticsError(message, event, causedBy) {
      var _this3;

      _classCallCheck(this, AnswersAnalyticsError);

      _this3 = _possibleConstructorReturn(this, _getPrototypeOf(AnswersAnalyticsError).call(this, 402, message, 'Analytics', causedBy));
      _this3.event = event;
      return _this3;
    }

    return AnswersAnalyticsError;
  }(AnswersBaseError);

  var ResultFactory =
  /*#__PURE__*/
  function () {
    function ResultFactory() {
      _classCallCheck(this, ResultFactory);
    }

    _createClass(ResultFactory, null, [{
      key: "from",

      /**
       * Converts an API result object into a Result view model.
       * Includes default mappings of GoogleCustomSearchEngine results to
       * the fields exposed by the template.
       * @param resultsData  {Array} expected format: { data: { ... }, highlightedFields: { ... }}
       * @param {Object.<string, function>} formatters The formatters to apply to the result
       * @param {string} verticalId The vertical of these results
       * @param {string} source Backend source of these results
       * @returns {Result[]}
       */
      value: function from(resultsData, formatters, verticalId, source) {
        var results = [];

        for (var i = 0; i < resultsData.length; i++) {
          var data = resultsData[i].data || resultsData[i];
          var distance = resultsData[i].distance;

          switch (source) {
            case 'GOOGLE_CSE':
              results.push(ResultFactory.fromGoogleCustomSearchEngine(data));
              break;

            case 'BING_CSE':
              results.push(ResultFactory.fromBingCustomSearchEngine(data));
              break;

            case 'ZENDESK':
              results.push(ResultFactory.fromZendeskSearchEngine(data));
              break;

            case 'ALGOLIA':
              results.push(ResultFactory.fromAlgoliaSearchEngine(data));
              break;

            case 'KNOWLEDGE_MANAGER':
              var highlightedFields = resultsData[i].highlightedFields || {};
              results.push(ResultFactory.fromKnowledgeManager(data, formatters, verticalId, highlightedFields, i, distance));
              break;

            default:
              results.push(ResultFactory.fromGeneric(data, i));
          }
        }

        return results;
      }
      /**
       * Applies field formatters to Knowledge Manager Entity Profile Data
       *
       * @param {Object} entityProfileData Entity Profile Data
       * @param {Object} formatters Developer specified Field Formatters
       * @param {string} verticalId Identifier for Vertical
       * @param {Object} highlightedEntityProfileData Subset of Entity Profile Data with highlighting applied
       * @returns {Object} Subset of Entity Profile Data Fields with field formatters applied
       */

    }, {
      key: "computeFormattedData",
      value: function computeFormattedData(entityProfileData, formatters, verticalId, highlightedEntityProfileData) {
        // if no field formatters specified, nothing to format
        if (Object.keys(formatters).length === 0) {
          return {};
        }

        var formattedData = {};
        Object.entries(entityProfileData).forEach(function (_ref) {
          var _ref2 = _slicedToArray(_ref, 2),
              fieldName = _ref2[0],
              fieldVal = _ref2[1];

          // check if a field formatter exists for the current entity profile field
          if (formatters[fieldName] === undefined) {
            return;
          } // verify the field formatter provided is a formatter function as expected


          if (typeof formatters[fieldName] !== 'function') {
            throw new AnswersCoreError('Field formatter is not of expected type function', 'ResultFactory');
          } // if highlighted version of field value is available, make it available to field formatter


          var highlightedFieldVal = null;

          if (highlightedEntityProfileData && highlightedEntityProfileData[fieldName]) {
            highlightedFieldVal = highlightedEntityProfileData[fieldName];
          } // call formatter function associated with the field name
          // the input object defines the interface that field formatter functions work with


          formattedData[fieldName] = formatters[fieldName]({
            entityProfileData: entityProfileData,
            entityFieldValue: fieldVal,
            highlightedEntityFieldValue: highlightedFieldVal,
            verticalId: verticalId,
            isDirectAnswer: false
          });
        });
        return formattedData;
      }
      /**
       * Applies highlighting to substrings within Knowledge Manager Entity Field Values
       * according to highlighting specifiers returned from the Knowledge Manager Search Backend
       *
       * @param {Object} entityProfileData Entity Profile Data
       * @param {Object} highlightedFields KM specified highlighting instructions to highlight certain Fields
       * @returns {Object} Subset of Entity Profile Data Fields with highlighting applied
       */

    }, {
      key: "computeHighlightedData",
      value: function computeHighlightedData(entityProfileData, highlightedFields) {
        // if no highlighted fields specified, nothing to highlight
        if (Object.keys(highlightedFields).length === 0) {
          return {};
        }

        var highlightedData = {}; // iterate through entity fields that have highlighting instructions

        Object.entries(highlightedFields).forEach(function (_ref3) {
          var _ref4 = _slicedToArray(_ref3, 1),
              highlightedFieldName = _ref4[0];

          // verify that the highlighted field name corresponds to an existing entity profile field
          if (entityProfileData[highlightedFieldName] === undefined) {
            throw new AnswersCoreError('Highlighted Field Name does not exist in Entity Profile', 'ResultFactory');
          }

          var highlightedField = highlightedFields[highlightedFieldName]; // check for nested fields

          if (_typeof(highlightedField) === 'object' && Object.keys(highlightedField).length > 0 && highlightedField['matchedSubstrings'] === undefined) {
            // recurse to children fields
            highlightedData[highlightedFieldName] = ResultFactory.computeHighlightedData(entityProfileData[highlightedFieldName], highlightedFields[highlightedFieldName]);
          } else {
            var highlightedDataValue = new HighlightedValue(entityProfileData).buildHighlightedValue(highlightedField.value, highlightedField.matchedSubstrings);
            highlightedData[highlightedFieldName] = highlightedDataValue;
          }
        });
        return highlightedData;
      }
      /**
       * Converts an API result object into a generic result view model.
       * @param {Object} data
       * @param {number} index
       * @returns {Result}
       */

    }, {
      key: "fromGeneric",
      value: function fromGeneric(data, index) {
        return new Result({
          raw: data,
          title: data.name,
          details: this.truncate(data.description),
          link: data.website,
          id: data.id,
          ordinal: index + 1
        });
      }
      /**
       * Converts an API result object into a Knowledge Manager result view model.
       * @param {Object} data
       * @param {Object} formatters
       * @param {string} verticalId
       * @param {Object} highlightedFields
       * @param {number} index
       * @param {number} distance
       * @returns {Result}
       */

    }, {
      key: "fromKnowledgeManager",
      value: function fromKnowledgeManager(data, formatters, verticalId, highlightedFields, index, distance) {
        // compute highlighted entity profile data
        var highlightedEntityProfileData = ResultFactory.computeHighlightedData(data, highlightedFields); // compute formatted entity profile data

        var formattedEntityProfileData = ResultFactory.computeFormattedData(data, formatters, verticalId, highlightedEntityProfileData); // set result details checking the following in order of priority : formatted, highlighted, raw

        var resultDetails = null;

        if (formattedEntityProfileData.description !== undefined) {
          resultDetails = formattedEntityProfileData.description;
        } else if (highlightedEntityProfileData.description !== undefined) {
          resultDetails = this.truncate(highlightedEntityProfileData.description);
        } else {
          resultDetails = this.truncate(data.description);
        }

        return new Result({
          raw: data,
          formatted: formattedEntityProfileData,
          highlighted: highlightedEntityProfileData,
          title: formattedEntityProfileData.name || data.name,
          details: resultDetails,
          link: data.website,
          id: data.id,
          ordinal: index + 1,
          distance: distance
        });
      }
      /**
       * Converts an API result object into a result view model.
       * Maps view model fields based on the API data for a Google Custom Search Engine object.
       * @param {Object} data
       * @returns {Result}
       */

    }, {
      key: "fromGoogleCustomSearchEngine",
      value: function fromGoogleCustomSearchEngine(data) {
        return new Result({
          raw: data,
          title: data.htmlTitle.replace(/(<([^>]+)>)/ig, ''),
          details: data.htmlSnippet,
          link: data.link
        });
      }
      /**
       * Converts an API result object into a result view model.
       * Maps view model fields based on the API data for a Bing Custom Search Engine object.
       * @param {Object} data
       * @returns {Result}
       */

    }, {
      key: "fromBingCustomSearchEngine",
      value: function fromBingCustomSearchEngine(data) {
        return new Result({
          raw: data,
          title: data.name,
          details: data.snippet,
          link: data.url
        });
      }
      /**
       * Converts an API result object into a result view model.
       * Maps view model fields based on the API data for a Zendesk Search Engine object.
       * @param {Object} data
       * @returns {Result}
       */

    }, {
      key: "fromZendeskSearchEngine",
      value: function fromZendeskSearchEngine(data) {
        return new Result({
          raw: data,
          title: data.title,
          details: data.snippet,
          link: data.html_url
        });
      }
      /**
       * Converts an API result object into a result view model.
       * Maps view model fields based on the API data for a Algolia Search Engine object.
       * Details field is set to objectID since response has only one general field objectID.
       * @param {Object} data
       * @returns {Result}
       */

    }, {
      key: "fromAlgoliaSearchEngine",
      value: function fromAlgoliaSearchEngine(data) {
        return new Result({
          raw: data,
          details: data.objectID,
          id: data.objectID
        });
      }
      /**
       * Truncates strings to 250 characters, attempting to preserve whole words
       * @param str {string} the string to truncate
       * @param limit {Number} the maximum character length to return
       * @param trailing {string} a trailing string to denote truncation, e.g. '...'
       * @param sep {string} the word separator
       * @returns {string}
       */

    }, {
      key: "truncate",
      value: function truncate(str) {
        var limit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 250;
        var trailing = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '...';
        var sep = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : ' ';

        if (!str || str.length <= limit) {
          return str;
        } // TODO (bmcginnis): split punctuation too so we don't end up with "foo,..."


        var words = str.split(sep);
        var max = limit - trailing.length;
        var truncated = '';

        for (var i = 0; i < words.length; i++) {
          var word = words[i];

          if (truncated.length + word.length > max || i !== 0 && truncated.length + word.length + sep.length > max) {
            truncated += trailing;
            break;
          }

          truncated += i === 0 ? word : sep + word;
        }

        return truncated;
      }
    }]);

    return ResultFactory;
  }();

  var Section =
  /*#__PURE__*/
  function () {
    function Section(data, url, formatters) {
      _classCallCheck(this, Section);

      this.searchState = SearchStates.SEARCH_COMPLETE;
      this.verticalConfigId = data.verticalConfigId || null;
      this.resultsCount = data.resultsCount || 0;
      this.encodedState = data.encodedState || '';
      this.appliedQueryFilters = AppliedQueryFilter.from(data.appliedQueryFilters);
      this.facets = data.facets || null;
      this.results = ResultFactory.from(data.results, formatters, this.verticalConfigId, data.source);
      this.map = Section.parseMap(data.results);
      this.verticalURL = url || null;
      this.resultsContext = data.resultsContext;
    }

    _createClass(Section, null, [{
      key: "parseMap",
      value: function parseMap(results) {
        var mapMarkers = [];
        var centerCoordinates = {};

        for (var j = 0; j < results.length; j++) {
          // TODO(billy) Remove legacy fallback from all data format
          var result = results[j].data || results[j];

          if (result && result.yextDisplayCoordinate) {
            if (!centerCoordinates.latitude) {
              centerCoordinates = {
                latitude: result.yextDisplayCoordinate.latitude,
                longitude: result.yextDisplayCoordinate.longitude
              };
            }

            mapMarkers.push({
              item: result,
              label: mapMarkers.length + 1,
              latitude: result.yextDisplayCoordinate.latitude,
              longitude: result.yextDisplayCoordinate.longitude
            });
          }
        }

        return {
          'mapCenter': centerCoordinates,
          'mapMarkers': mapMarkers
        };
      }
      /**
       * Create a section from the provided data
       * @param {Object|Array} modules The result modules
       * @param {Object} urls The tab urls
       * @param {Object.<string, function>} formatters Field formatters for results
       */

    }, {
      key: "from",
      value: function from(modules, urls, formatters) {
        var sections = [];

        if (!modules) {
          return sections;
        }

        if (!Array.isArray(modules)) {
          return new Section(modules, null, formatters);
        } // Our sections should contain a property of mapMarker objects


        for (var i = 0; i < modules.length; i++) {
          sections.push(new Section(modules[i], urls[modules[i].verticalConfigId], formatters));
        }

        return sections;
      }
    }]);

    return Section;
  }();

  var AppliedQueryFilter =
  /*#__PURE__*/
  function () {
    // Support legacy model and new model until fully migrated.
    // TODO(billy) Remove the left expression during assignment when migrated.
    // TODO(SPR-2394): convert this into a FilterNode here instead of in VerticalResults
    function AppliedQueryFilter(appliedQueryFilter) {
      _classCallCheck(this, AppliedQueryFilter);

      this.key = appliedQueryFilter.key || appliedQueryFilter.displayKey;
      this.value = appliedQueryFilter.value || appliedQueryFilter.displayValue;
      this.filter = appliedQueryFilter.filter;
      this.fieldId = Object.keys(appliedQueryFilter.filter)[0];
    }

    _createClass(AppliedQueryFilter, null, [{
      key: "from",
      value: function from(appliedQueryFilters) {
        var filters = [];

        for (var i = 0; i < appliedQueryFilters.length; i++) {
          filters.push(new AppliedQueryFilter(appliedQueryFilters[i]));
        }

        return filters;
      }
    }]);

    return AppliedQueryFilter;
  }();

  var UniversalResults =
  /*#__PURE__*/
  function () {
    function UniversalResults(data) {
      _classCallCheck(this, UniversalResults);

      this.queryId = data.queryId || null;
      this.sections = data.sections || [];
      /**
       * The current state of the search, used to render different templates before, during,
       * and after loading
       * @type {string}
       */

      this.searchState = data.searchState || SearchStates.SEARCH_COMPLETE;
    }
    /**
     * Create universal results from server data
     * @param {Object} response The server response
     * @param {Object} urls The tab urls
     * @param {Object.<string, function>} formatters The field formatters to use
     */


    _createClass(UniversalResults, null, [{
      key: "from",
      value: function from(response, urls, formatters) {
        return new UniversalResults({
          queryId: response.queryId,
          sections: Section.from(response.modules, urls, formatters)
        });
      }
      /**
       * Construct a UnivervalResults object representing loading results
       * @return {UniversalResults}
       */

    }, {
      key: "searchLoading",
      value: function searchLoading() {
        return new UniversalResults({
          searchState: SearchStates.SEARCH_LOADING
        });
      }
    }]);

    return UniversalResults;
  }();

  /** @module DirectAnswer */
  var DirectAnswer =
  /*#__PURE__*/
  function () {
    function DirectAnswer() {
      var directAnswer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      _classCallCheck(this, DirectAnswer);

      Object.assign(this, directAnswer);
      Object.freeze(this);
    }
    /**
     * Create a DirectAnswer model from the given server data and formatters
     * @param {Object} response The server direct answer
     * @param {Object.<string, function>} formatters The formatters to apply to this direct answer
     */


    _createClass(DirectAnswer, null, [{
      key: "from",
      value: function from(response, formatters) {
        var data = _objectSpread({}, response);

        var answer = data.answer,
            relatedItem = data.relatedItem;

        if (answer && formatters[answer.fieldApiName]) {
          answer.value = formatters[answer.fieldApiName](answer.value, relatedItem.data.fieldValues, relatedItem.verticalConfigId, true);
        }

        return new DirectAnswer(data);
      }
    }]);

    return DirectAnswer;
  }();

  /** @module Navigation */
  var Navigation =
  /*#__PURE__*/
  function () {
    function Navigation(tabOrder) {
      _classCallCheck(this, Navigation);

      this.tabOrder = tabOrder || [];
      Object.freeze(this);
    }

    _createClass(Navigation, null, [{
      key: "from",
      value: function from(modules) {
        var nav = [];

        if (!modules || !Array.isArray(modules)) {
          return nav;
        }

        for (var i = 0; i < modules.length; i++) {
          nav.push(modules[i].verticalConfigId);
        }

        return new Navigation(nav);
      }
    }]);

    return Navigation;
  }();

  var VerticalResults =
  /*#__PURE__*/
  function () {
    function VerticalResults() {
      var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      _classCallCheck(this, VerticalResults);

      Object.assign(this, {
        searchState: SearchStates.SEARCH_COMPLETE
      }, data);
      /**
       * The context of the results, used to provide more information about why
       * these specific results were returned.
       * @type {ResultsContext}
       */

      this.resultsContext = data.resultsContext;
      Object.freeze(this);
    }
    /**
     * Append the provided results to the current results
     * @param {VerticalResults} results the results to append to the current results
     */


    _createClass(VerticalResults, [{
      key: "append",
      value: function append(results) {
        if (results.resultsContext !== this.resultsContext) {
          throw new AnswersCoreError('Cannot merge results with different contexts', 'VerticalResults');
        }

        var merged = _objectSpread({}, this);

        merged.resultsContext = this.resultsContext;
        merged.results = this.results.concat(results.results);
        merged.map.mapMarkers = this.map.mapMarkers.concat(results.map.mapMarkers);
        return new VerticalResults(merged);
      }
      /**
       * Create vertical results from server data
       * @param {Object} response The server response
       * @param {Object.<string, function>} formatters The field formatters to use
       * @param {string} verticalKey the vertical key
       */

    }], [{
      key: "from",
      value: function from(response, formatters, verticalKey) {
        var data = Section.from(response, null, formatters);
        return new VerticalResults(_objectSpread({}, data, {
          verticalConfigId: verticalKey
        }));
      }
      /**
       * Construct a VerticalResults object representing loading results
       * @return {VerticalResults}
       */

    }, {
      key: "searchLoading",
      value: function searchLoading() {
        return new VerticalResults({
          searchState: SearchStates.SEARCH_LOADING
        });
      }
    }, {
      key: "areDuplicateNamesAllowed",
      value: function areDuplicateNamesAllowed() {
        return true;
      }
    }]);

    return VerticalResults;
  }();

  /** @module SpellCheck */

  /**
   * SpellCheck is the core state model
   * to power the SpellCheck component
   */
  var SpellCheck =
  /*#__PURE__*/
  function () {
    function SpellCheck(data) {
      _classCallCheck(this, SpellCheck);

      /**
       * The original query
       * @type {string}
       */
      this.query = data.query || null;
      /**
       * The corrected query
       * @type {string}
       */

      this.correctedQuery = data.correctedQuery || null;
      /**
       * The spell check type
       * @type {string}
       */

      this.type = data.type || null;
      /**
       * Should show spell check or not
       * @type {boolean}
       */

      this.shouldShow = this.correctedQuery !== null;
    }
    /**
     * Create a spell check model from the provided data
     * @param {Object} response The spell check response
     */


    _createClass(SpellCheck, null, [{
      key: "from",
      value: function from(response) {
        if (!response) {
          return {};
        }

        return new SpellCheck({
          query: response.originalQuery,
          correctedQuery: response.correctedQuery,
          type: response.type
        });
      }
    }]);

    return SpellCheck;
  }();

  /** @module StorageKeys */

  /**
   * StorageKeys is an ENUM are considered the root context
   * for how data is stored and scoped in the storage.
   *
   * @enum {string}
   */
  var StorageKeys = {
    NAVIGATION: 'navigation',
    UNIVERSAL_RESULTS: 'universal-results',
    VERTICAL_RESULTS: 'vertical-results',
    ALTERNATIVE_VERTICALS: 'alternative-verticals',
    AUTOCOMPLETE: 'autocomplete',
    DIRECT_ANSWER: 'direct-answer',
    FILTER: 'filter',
    // DEPRECATED
    STATIC_FILTER_NODE: 'static-filter-node',
    QUERY: 'query',
    QUERY_ID: 'query-id',
    FACET_FILTER_NODE: 'facet-filter-node',
    DYNAMIC_FILTERS: 'dynamic-filters',
    PARAMS: 'params',
    GEOLOCATION: 'geolocation',
    INTENTS: 'intents',
    QUESTION_SUBMISSION: 'question-submission',
    SEARCH_CONFIG: 'search-config',
    SEARCH_OFFSET: 'search-offset',
    SPELL_CHECK: 'spell-check',
    LOCATION_BIAS: 'location-bias',
    SESSIONS_OPT_IN: 'sessions-opt-in',
    VERTICAL_PAGES_CONFIG: 'vertical-pages-config',
    LOCALE: 'locale',
    SORT_BYS: 'sort-bys',
    NO_RESULTS_CONFIG: 'no-results-config',
    LOCATION_RADIUS: 'location-radius',
    RESULTS_HEADER: 'results-header',
    API_CONTEXT: 'context',
    REFERRER_PAGE_URL: 'referrerPageUrl'
  };

  /** @module DynamicFilters */

  /**
   * Model representing a set of dynamic filters
   */
  var DynamicFilters =
  /*#__PURE__*/
  function () {
    function DynamicFilters(data) {
      _classCallCheck(this, DynamicFilters);

      /**
       * The list of filters this model holds
       * @type {{label: string, fieldId: string, options: object[]}}
       */
      this.filters = data.filters || [];
      /**
       * The {@link ResultsContext} of the facets.
       * @type {ResultsContext}
       */

      this.resultsContext = data.resultsContext;
      Object.freeze(this);
    }
    /**
     * Organize 'facets' from the api response into dynamic filters
     * @param {Object} response dynamic filter response from the api
     * @returns {DynamicFilters}
     */


    _createClass(DynamicFilters, null, [{
      key: "from",
      value: function from(response) {
        var facets = response.facets || [];
        var dynamicFilters = facets.map(function (f) {
          return {
            label: f['displayName'],
            fieldId: f['fieldId'],
            options: f.options.map(function (o) {
              return {
                label: o['displayName'],
                countLabel: o['count'],
                selected: o['selected'],
                filter: o['filter']
              };
            })
          };
        });
        return new DynamicFilters({
          filters: dynamicFilters,
          resultsContext: response.resultsContext
        });
      }
    }]);

    return DynamicFilters;
  }();

  /** @module SearchIntents */
  var SearchIntents =
  /*#__PURE__*/
  function () {
    function SearchIntents(intents) {
      _classCallCheck(this, SearchIntents);

      /**
       * The intent to find results based on the user's location
       * @type {boolean}
       */
      this.nearMe = intents.nearMe;
      Object.freeze(this);
    }
    /**
     * Create SearchIntents from server response
     * @param {Object} response The server response intents
     * @returns {SearchIntents}
     */


    _createClass(SearchIntents, null, [{
      key: "from",
      value: function from(response) {
        var intents = response || [];
        return new SearchIntents({
          nearMe: intents.includes('NEAR_ME')
        });
      }
    }]);

    return SearchIntents;
  }();

  /** @module LocationBias */

  /**
   * LocationBias is the core state model
   * to power the LocationBias component
   */
  var LocationBias =
  /*#__PURE__*/
  function () {
    function LocationBias(data) {
      _classCallCheck(this, LocationBias);

      /**
       * The location bias accuracy which are IP, DEVICE and UNKNWON
       * @type {string}
       */
      this.accuracy = data.accuracy || null;
      /**
       * The latitude used for location bias
       * @type {number}
       */

      this.latitude = data.latitude || null;
      /**
       * The longitude used for location bias
       * @type {number}
       */

      this.longitude = data.longitude || null;
      /**
       * The location display name
       * @type {string}
       */

      this.locationDisplayName = data.locationDisplayName || null;
    }
    /**
     * Create a location bias model from the provided data
     * @param {Object} response The location bias response
     */


    _createClass(LocationBias, null, [{
      key: "from",
      value: function from(response) {
        if (!response) {
          return new LocationBias({
            accuracy: 'UNKNOWN'
          });
        }

        return new LocationBias({
          accuracy: response.accuracy,
          latitude: response.latitude,
          longitude: response.longitude,
          locationDisplayName: response.locationDisplayName
        });
      }
    }]);

    return LocationBias;
  }();

  var AlternativeVerticals =
  /*#__PURE__*/
  function () {
    function AlternativeVerticals(data) {
      _classCallCheck(this, AlternativeVerticals);

      /**
       * Alternative verticals that have results for the current query
       * @type {Section}
       */
      this.alternativeVerticals = data || [];
    }
    /**
     * Create alternative verticals from server data
     * @param {Object} response The server response
     * @param {Object.<string, function>} formatters The field formatters to use
     */


    _createClass(AlternativeVerticals, null, [{
      key: "from",
      value: function from(response, formatters) {
        var alternativeVerticals = response.alternativeVerticals;

        if (!alternativeVerticals || !alternativeVerticals.modules) {
          return new AlternativeVerticals();
        }

        return new AlternativeVerticals(Section.from(alternativeVerticals.modules, {}, formatters));
      }
    }]);

    return AlternativeVerticals;
  }();

  /** @module ResultsContext */

  /**
   * ResultsContext is an ENUM that provides context
   * for the results that we are storing from server
   * data
   * @enum {string}
   */
  var ResultsContext = {
    NORMAL: 'normal',
    NO_RESULTS: 'no-results'
  };

  /**
   * A Data Transformer that takes the response object from a Search request
   * And transforms in to a front-end oriented data structure that our
   * component library and core storage understand.
   */

  var SearchDataTransformer =
  /*#__PURE__*/
  function () {
    function SearchDataTransformer() {
      _classCallCheck(this, SearchDataTransformer);
    }

    _createClass(SearchDataTransformer, null, [{
      key: "transform",
      value: function transform(data) {
        var _ref;

        var urls = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var formatters = arguments.length > 2 ? arguments[2] : undefined;
        var response = data.response;
        return _ref = {}, _defineProperty(_ref, StorageKeys.QUERY_ID, response.queryId), _defineProperty(_ref, StorageKeys.NAVIGATION, Navigation.from(response.modules)), _defineProperty(_ref, StorageKeys.DIRECT_ANSWER, DirectAnswer.from(response.directAnswer, formatters)), _defineProperty(_ref, StorageKeys.UNIVERSAL_RESULTS, UniversalResults.from(response, urls, formatters)), _defineProperty(_ref, StorageKeys.INTENTS, SearchIntents.from(response.searchIntents)), _defineProperty(_ref, StorageKeys.SPELL_CHECK, SpellCheck.from(response.spellCheck)), _defineProperty(_ref, StorageKeys.LOCATION_BIAS, LocationBias.from(response.locationBias)), _ref;
      }
    }, {
      key: "transformVertical",
      value: function transformVertical(data, formatters, verticalKey) {
        var _ref2;

        var response = SearchDataTransformer._parseVerticalResponse(data.response);

        return _ref2 = {}, _defineProperty(_ref2, StorageKeys.QUERY_ID, response.queryId), _defineProperty(_ref2, StorageKeys.NAVIGATION, new Navigation()), _defineProperty(_ref2, StorageKeys.VERTICAL_RESULTS, VerticalResults.from(response, formatters, verticalKey)), _defineProperty(_ref2, StorageKeys.DYNAMIC_FILTERS, DynamicFilters.from(response)), _defineProperty(_ref2, StorageKeys.INTENTS, SearchIntents.from(response.searchIntents)), _defineProperty(_ref2, StorageKeys.SPELL_CHECK, SpellCheck.from(response.spellCheck)), _defineProperty(_ref2, StorageKeys.ALTERNATIVE_VERTICALS, AlternativeVerticals.from(response, formatters)), _defineProperty(_ref2, StorageKeys.LOCATION_BIAS, LocationBias.from(response.locationBias)), _ref2;
      }
      /**
       * Form response as if the results from `allResultsForVertical` were the actual
       * results in `results`
       * @param {Object} response The server response
       */

    }, {
      key: "_parseVerticalResponse",
      value: function _parseVerticalResponse(response) {
        var hasResults = response.results && response.resultsCount > 0;
        var resultsContext = hasResults ? ResultsContext.NORMAL : ResultsContext.NO_RESULTS;

        if (resultsContext === ResultsContext.NO_RESULTS) {
          var _ref3 = response.allResultsForVertical || {},
              results = _ref3.results,
              resultsCount = _ref3.resultsCount,
              facets = _ref3.facets;

          return _objectSpread({}, response, {
            results: results || [],
            resultsCount: resultsCount || 0,
            resultsContext: resultsContext,
            facets: facets
          });
        }

        return _objectSpread({}, response, {
          resultsContext: resultsContext
        });
      }
    }]);

    return SearchDataTransformer;
  }();

  /** @module QuestionSubmission */

  /**
   * QuestionSubmission is the core state model
   * to power the QuestionSubmission component
   */
  var QuestionSubmission =
  /*#__PURE__*/
  function () {
    function QuestionSubmission() {
      var question = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var errors = arguments.length > 1 ? arguments[1] : undefined;

      _classCallCheck(this, QuestionSubmission);

      /**
       * The author of the question
       * @type {string}
       */
      this.name = question.name || null;
      /**
       * The email address of the question
       * @type {string}
       */

      this.email = question.email || null;
      /**
       * True if the privacy policy was approved
       * @type {boolean}
       */

      this.privacyPolicy = question.privacyPolicy || null;
      /**
       * The question to be sent to the server
       * @type {string}
       */

      this.questionText = question.questionText || null;
      /**
       * Alternative question meta information
       * @type {string}
       */

      this.questionDescription = question.questionDescription || null;
      /**
       * Whether the form is expanded or not. Defaults to true.
       */

      this.questionExpanded = typeof question.expanded !== 'boolean' || question.expanded;
      /**
       * Contains any errors about the question submission
       * @type {object}
       */

      this.errors = errors || null;
      /**
       * Whether the form has been submitted or not. Defaults to false.
       */

      this.questionSubmitted = question.submitted || false;
      Object.freeze(this);
    }

    _createClass(QuestionSubmission, null, [{
      key: "submitted",
      value: function submitted() {
        return {
          questionSubmitted: true,
          questionExpanded: true
        };
      }
    }, {
      key: "errors",
      value: function errors(question, _errors) {
        return QuestionSubmission(question, _errors);
      }
    }]);

    return QuestionSubmission;
  }();

  /**
   * Model for the analytics event type
   */
  var AnalyticsEvent =
  /*#__PURE__*/
  function () {
    function AnalyticsEvent(type, label) {
      _classCallCheck(this, AnalyticsEvent);

      /**
       * The type of event to report
       * @type {string}
       */
      this.eventType = type.toUpperCase();
      /**
       * An optional label to be provided for the event
       * @type {string}
       */

      if (label) {
        this.label = label;
      }
    }
    /**
     * Adds the provided options to the event
     * @param {object} options Additional options for the event
     */


    _createClass(AnalyticsEvent, [{
      key: "addOptions",
      value: function addOptions(options) {
        Object.assign(this, options);
        return this;
      }
      /**
       * Return the event in the api format, typically for reporting to the api
       */

    }, {
      key: "toApiEvent",
      value: function toApiEvent() {
        return Object.assign({}, this);
      }
      /**
       * Creating an analytics event from raw data.
       * @param {Object} data
       */

    }], [{
      key: "fromData",
      value: function fromData(data) {
        var type = data.type,
            label = data.label,
            eventOptions = _objectWithoutProperties(data, ["type", "label"]);

        var analyticsEvent = new AnalyticsEvent(type, label);
        analyticsEvent.addOptions(eventOptions);
        return analyticsEvent;
      }
    }]);

    return AnalyticsEvent;
  }();

  /** @module FilterCombinators */

  /**
   * FilterCombinators are enums for valid ways to combine {@link Filter}s.
   */
  var FilterCombinators = {
    AND: '$and',
    OR: '$or'
  };

  /**
   * Represents an api filter and provides static methods for easily constructing Filters.
   * See https://developer.yext.com/docs/api-reference/#operation/listEntities for structure details
   */

  var Filter =
  /*#__PURE__*/
  function () {
    function Filter() {
      var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      _classCallCheck(this, Filter);

      Object.assign(this, data);
      Object.freeze(this);
    }
    /**
     * A filter should have exactly ONE key. That key is EITHER the field name to filter by, or
     * a special string such as $or or $and.
     * @type {string}
     */


    _createClass(Filter, [{
      key: "getFilterKey",
      value: function getFilterKey() {
        if (Object.keys(this).length > 0) {
          return Object.keys(this)[0];
        }
      }
      /**
       * Create an empty filter
       */

    }], [{
      key: "empty",
      value: function empty() {
        return new Filter();
      }
      /**
       * Wrap filter data in a Filter class
       * @param {Object} filter
       */

    }, {
      key: "from",
      value: function from(filter) {
        return new Filter(filter);
      }
      /**
       * Parse a JSON format filter returned from the server into a Filter
       * @param {*} responseFilter A filter in JSON format returned from the backend
       * @returns {Filter}
       */

    }, {
      key: "fromResponse",
      value: function fromResponse(responseFilter) {
        return new Filter(JSON.parse(responseFilter));
      }
      /**
       * Return a new Filter representing the OR of all provided filters
       * @param  {...Filter} filters The filters to OR together
       * @returns {Filter}
       */

    }, {
      key: "or",
      value: function or() {
        for (var _len = arguments.length, filters = new Array(_len), _key = 0; _key < _len; _key++) {
          filters[_key] = arguments[_key];
        }

        return new Filter(_defineProperty({}, FilterCombinators.OR, filters));
      }
      /**
       * Return a new Filter representing the AND of all provided filters
       * @param  {...Filter} filters The filters to AND together
       * @returns {Filter}
       */

    }, {
      key: "and",
      value: function and() {
        for (var _len2 = arguments.length, filters = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          filters[_key2] = arguments[_key2];
        }

        return new Filter(_defineProperty({}, FilterCombinators.AND, filters));
      }
      /**
       * Helper method for creating a range filter
       * @param {string} field field id of the filter
       * @param {number|string} min minimum value
       * @param {number|string} max maximum value
       * @param {boolean} isExclusive whether this is an inclusive or exclusive range
       * @returns {Filter}
       */

    }, {
      key: "range",
      value: function range(field, min, max, isExclusive) {
        var falsyMin = min === null || min === undefined || min === '';
        var falsyMax = max === null || max === undefined || max === '';

        if (falsyMin && falsyMax) {
          return Filter.empty();
        } else if (falsyMax) {
          return isExclusive ? Filter.greaterThan(field, min) : Filter.greaterThanEqual(field, min);
        } else if (falsyMin) {
          return isExclusive ? Filter.lessThan(field, max) : Filter.lessThanEqual(field, max);
        } else if (min === max) {
          return isExclusive ? Filter.empty() : Filter.equal(field, min);
        }

        return isExclusive ? Filter.exclusiveRange(field, min, max) : Filter.inclusiveRange(field, min, max);
      }
      /**
       * Create a new "equal to" filter for a field
       * @param {string} field The subject field of the filter
       * @param {*} value The value the field should be equal to
       * @returns {Filter}
       */

    }, {
      key: "equal",
      value: function equal(field, value) {
        return Filter._fromMatcher(field, '$eq', value);
      }
      /**
       * Create a new "less than" filter for a field
       * @param {string} field The subject field of the filter
       * @param {*} value The value the field should be less than
       * @returns {Filter}
       */

    }, {
      key: "lessThan",
      value: function lessThan(field, value) {
        return Filter._fromMatcher(field, '$lt', value);
      }
      /**
       * Create a new "less than or equal to" filter for a field
       * @param {string} field The subject field of the filter
       * @param {*} value The value the field should be less than or equal to
       * @returns {Filter}
       */

    }, {
      key: "lessThanEqual",
      value: function lessThanEqual(field, value) {
        return Filter._fromMatcher(field, '$le', value);
      }
      /**
       * Create a new "greater than" filter for a field
       * @param {string} field The subject field of the filter
       * @param {*} value The value the field should be greater than
       * @returns {Filter}
       */

    }, {
      key: "greaterThan",
      value: function greaterThan(field, value) {
        return Filter._fromMatcher(field, '$gt', value);
      }
      /**
       * Create a new "greater than or equal to" filter for a field
       * @param {string} field The subject field of the filter
       * @param {*} value The value the field should be greater than or equal to
       * @returns {Filter}
       */

    }, {
      key: "greaterThanEqual",
      value: function greaterThanEqual(field, value) {
        return Filter._fromMatcher(field, '$ge', value);
      }
      /**
       * Create a new inclusive range filter
       * @param {string} field The subject field of the filter
       * @param {*} min The minimum value
       * @param {*} max The maximum value
       * @returns {Filter}
       */

    }, {
      key: "inclusiveRange",
      value: function inclusiveRange(field, min, max) {
        return new Filter(_defineProperty({}, field, {
          '$ge': min,
          '$le': max
        }));
      }
      /**
       * Create a new exclusive range filter
       * @param {string} field The subject field of the filter
       * @param {*} min The minimum value
       * @param {*} max The maximum value
       * @returns {Filter}
       */

    }, {
      key: "exclusiveRange",
      value: function exclusiveRange(field, min, max) {
        return new Filter(_defineProperty({}, field, {
          '$gt': min,
          '$lt': max
        }));
      }
      /**
       * Create a new position filter
       * @param {number} lat The latitude of the position
       * @param {number} lng The longitude of the position
       * @param {number} radius The search radius (in meters)
       */

    }, {
      key: "position",
      value: function position(lat, lng, radius) {
        return Filter._fromMatcher('builtin.location', '$near', {
          lat: lat,
          lng: lng,
          radius: radius
        });
      }
      /**
       * Create a new filter with the given matcher
       * @private
       * @param {string} field The subject field of the filter
       * @param {string} matcher The matcher for the filer
       * @param {*} value The value for the filter
       * @returns {Filter}
       */

    }, {
      key: "_fromMatcher",
      value: function _fromMatcher(field, matcher, value) {
        return new Filter(_defineProperty({}, field, _defineProperty({}, matcher, value)));
      }
    }]);

    return Filter;
  }();

  /** @module FilterTypes */

  /**
   * FilterType is an ENUM for the different types of filters in the SDK.
   * @enum {string}
   */
  var FilterType = {
    STATIC: 'filter-type-static',
    FACET: 'filter-type-facet',
    RADIUS: 'filter-type-radius',
    NLP: 'filter-type-nlp'
  };

  /**
   * FilterMetadata is a container for additional display data for a {@link Filter}.
   */

  var FilterMetadata = function FilterMetadata() {
    var metadata = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, FilterMetadata);

    var fieldName = metadata.fieldName,
        displayValue = metadata.displayValue,
        filterType = metadata.filterType;
    /**
     * The display name for the field being filtered on.
     * @type {string}
     */

    this.fieldName = fieldName;
    /**
     * The display value for the values being filtered on.
     * Even if there are multiple values within the data of a filter,
     * there should only be one display value for the whole filter.
     * @type {string}
     */

    this.displayValue = displayValue;
    /**
     * What type of filter this is.
     * @type {FilterType}
     */

    this.filterType = filterType || FilterType.STATIC;
    Object.freeze(this);
  };

  /** @module FilterNode */

  /**
   * A FilterNode represents a single node in a filter tree.
   * Each filter node has an associated filter, containing the filter
   * data to send in a request, any additional filter metadata for display,
   * and any children nodes.
   *
   * Implemented by {@link SimpleFilterNode} and {@link CombinedFilterNode}.
   */
  var FilterNode =
  /*#__PURE__*/
  function () {
    function FilterNode() {
      _classCallCheck(this, FilterNode);
    }

    _createClass(FilterNode, [{
      key: "getFilter",

      /**
       * Returns this node's filter.
       * @returns {Filter}
       */
      value: function getFilter() {}
      /**
       * Returns the metadata for this node's filter.
       * @returns {FilterMetadata}
       */

    }, {
      key: "getMetadata",
      value: function getMetadata() {}
      /**
       * Returns the children of this node.
       * @returns {Array<FilterNode>}
       */

    }, {
      key: "getChildren",
      value: function getChildren() {}
      /**
       * Recursively get all of the leaf SimpleFilterNodes.
       * @returns {Array<SimpleFilterNode>}
       */

    }, {
      key: "getSimpleDescendants",
      value: function getSimpleDescendants() {}
      /**
       * Remove this FilterNode from the FilterRegistry.
       */

    }, {
      key: "remove",
      value: function remove() {}
    }]);

    return FilterNode;
  }();

  /**
   * A SimpleFilterNode represents a single, atomic filter.
   * An atomic filter is a filter that filters by a single value on a single field id,
   * and does not contain any children filters.
   */

  var SimpleFilterNode =
  /*#__PURE__*/
  function (_FilterNode) {
    _inherits(SimpleFilterNode, _FilterNode);

    function SimpleFilterNode() {
      var _this;

      var filterNode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      _classCallCheck(this, SimpleFilterNode);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(SimpleFilterNode).call(this));
      var filter = filterNode.filter,
          metadata = filterNode.metadata,
          remove = filterNode.remove;
      /**
       * The filter data.
       * @type {Filter}
       */

      _this.filter = Filter.from(filter);
      /**
       * Display metadata associated with the filter data.
       * @type {FilterMetadata}
       */

      _this.metadata = new FilterMetadata(metadata);
      /**
       * Remove callback function.
       * @type {Function}
       */

      _this._remove = remove || function () {};

      Object.freeze(_assertThisInitialized(_this));
      return _this;
    }
    /**
     * Returns the filter associated with this node.
     * @type {Filter}
     */


    _createClass(SimpleFilterNode, [{
      key: "getFilter",
      value: function getFilter() {
        return this.filter;
      }
      /**
       * Returns the children associated with this node (no children).
       * @returns {Array<FilterNode>}
       */

    }, {
      key: "getChildren",
      value: function getChildren() {
        return [];
      }
      /**
       * Returns the filter metadata for this node's filter.
       * @returns {FilterMetadata}
       */

    }, {
      key: "getMetadata",
      value: function getMetadata() {
        return this.metadata;
      }
      /**
       * Recursively get all of the leaf SimpleFilterNodes.
       * Since SimpleFilterNodes have no children this just returns itself.
       * @returns {Array<SimpleFilterNode>}
       */

    }, {
      key: "getSimpleDescendants",
      value: function getSimpleDescendants() {
        return this;
      }
      /**
       * Removes this filter node from the FilterRegistry.
       */

    }, {
      key: "remove",
      value: function remove() {
        this._remove();
      }
      /**
       * Returns whether this SimpleFilterNode's filter is equal to another SimpleFilterNode's
       * @param {SimpleFilterNode} node
       * @returns {boolean}
       */

    }, {
      key: "hasSameFilterAs",
      value: function hasSameFilterAs(otherNode) {
        var thisFilter = this.getFilter();
        var otherFilter = otherNode.getFilter();
        var thisFieldId = thisFilter.getFilterKey();
        var otherFieldId = otherFilter.getFilterKey();

        if (thisFieldId !== otherFieldId) {
          return false;
        }

        var thisMatchersToValues = thisFilter[thisFieldId];
        var otherMatchersToValues = otherFilter[otherFieldId];
        var thisMatchers = Object.keys(thisMatchersToValues);
        var otherMatchers = Object.keys(otherMatchersToValues);

        if (thisMatchers.length !== otherMatchers.length) {
          return false;
        }

        return thisMatchers.every(function (m) {
          return otherMatchersToValues.hasOwnProperty(m) && otherMatchersToValues[m] === thisMatchersToValues[m];
        });
      }
    }]);

    return SimpleFilterNode;
  }(FilterNode);

  /**
   * A CombinedFilterNode represents a combined filter.
   * A combined filter is a set of filters combined with a {@link FilterCombinators}
   * ($and or $or). Since a combined filter is just a set of other filters,
   * it does not have its own {@link FilterMetadata}, and its filter is dervied from
   * its children.
   */

  var CombinedFilterNode =
  /*#__PURE__*/
  function (_FilterNode) {
    _inherits(CombinedFilterNode, _FilterNode);

    function CombinedFilterNode() {
      var _this;

      var filterNode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      _classCallCheck(this, CombinedFilterNode);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(CombinedFilterNode).call(this));
      var combinator = filterNode.combinator,
          children = filterNode.children;
      /**
       * @type {string}
       */

      _this.combinator = combinator;
      /**
       * @type {Array<FilterNode>}
       */

      _this.children = children || [];
      Object.freeze(_assertThisInitialized(_this));
      return _this;
    }
    /**
     * Returns the filter created by combining this node's children.
     * @type {Filter}
     */


    _createClass(CombinedFilterNode, [{
      key: "getFilter",
      value: function getFilter() {
        var filters = this.children.map(function (childNode) {
          return childNode.getFilter();
        });

        switch (this.combinator) {
          case FilterCombinators.AND:
            return Filter.and.apply(Filter, _toConsumableArray(filters));

          case FilterCombinators.OR:
            return Filter.or.apply(Filter, _toConsumableArray(filters));
        }

        return Filter.empty();
      }
      /**
       * Returns the metadata associated with this node's filter.
       * Because a combined filter's purpose is solely to join together other filters,
       * and does not have its own filter, this value is always null.
       * @returns {null}
       */

    }, {
      key: "getMetadata",
      value: function getMetadata() {
        return null;
      }
      /**
       * Returns this node's children.
       * @returns {Array<FilterNode>}
       */

    }, {
      key: "getChildren",
      value: function getChildren() {
        return this.children;
      }
      /**
       * Recursively get all of the leaf SimpleFilterNodes.
       * @returns {Array<SimpleFilterNode>}
       */

    }, {
      key: "getSimpleDescendants",
      value: function getSimpleDescendants() {
        return this.getChildren().flatMap(function (fn) {
          return fn.getSimpleDescendants();
        });
      }
      /**
       * Removes this filter node from the FilterRegistry by calling remove on each of its
       * child FilterNodes.
       */

    }, {
      key: "remove",
      value: function remove() {
        this.children.forEach(function (child) {
          child.remove();
        });
      }
    }]);

    return CombinedFilterNode;
  }(FilterNode);

  /**
   * FilterNodeFactory is a class containing static helper methods for
   * generating FilterNodes.
   */

  var FilterNodeFactory =
  /*#__PURE__*/
  function () {
    function FilterNodeFactory() {
      _classCallCheck(this, FilterNodeFactory);
    }

    _createClass(FilterNodeFactory, null, [{
      key: "and",

      /**
       * Create an AND filter node, with specified children.
       * @param  {...FilterNode} childrenNodes
       * @returns {FilterNode}
       */
      value: function and() {
        for (var _len = arguments.length, childrenNodes = new Array(_len), _key = 0; _key < _len; _key++) {
          childrenNodes[_key] = arguments[_key];
        }

        return FilterNodeFactory._combine(FilterCombinators.AND, childrenNodes);
      }
      /**
       * Create an OR filter node, with specified children.
       * @param  {...FilterNode} childrenNodes
       * @returns {FilterNode}
       */

    }, {
      key: "or",
      value: function or() {
        for (var _len2 = arguments.length, childrenNodes = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          childrenNodes[_key2] = arguments[_key2];
        }

        return FilterNodeFactory._combine(FilterCombinators.OR, childrenNodes);
      }
      /**
       * Creates a combined filter node with the given combinator and children.
       * @param {string} combinator
       * @param {Array<FilterNode>} filterNodes
       * @returns {FilterNode}
       * @private
       */

    }, {
      key: "_combine",
      value: function _combine(combinator, filterNodes) {
        var children = filterNodes.filter(function (fn) {
          return fn.getFilter().getFilterKey();
        });

        if (!children.length) {
          return new SimpleFilterNode();
        }

        if (children.length === 1) {
          return children[0];
        }

        return new CombinedFilterNode({
          combinator: combinator,
          children: children
        });
      }
      /**
       * Creates a filterNode from the given data.
       * @param {Object|FilterNode} filterNode
       * @returns {FilterNode}
       */

    }, {
      key: "from",
      value: function from() {
        var filterNode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        if (filterNode.children && filterNode.children.length) {
          return new CombinedFilterNode(filterNode);
        }

        return new SimpleFilterNode(filterNode);
      }
    }]);

    return FilterNodeFactory;
  }();

  /** @module Facet */

  /**
   * Model representing a facet filter with the format of
   * {
   *   "field_name": [ Filters... ],
   *   ...
   * }
   *
   * @see {@link Filter}
   */
  var Facet =
  /*#__PURE__*/
  function () {
    function Facet() {
      var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      _classCallCheck(this, Facet);

      Object.assign(this, data);
      Object.freeze(this);
    }
    /**
     * Create a facet filter from a list of Filters
     * @param {Array<string>} availableFieldIds array of expected field ids
     * @param  {...Filter} filters The filters to use in this facet
     * @returns {Facet}
     */


    _createClass(Facet, null, [{
      key: "fromFilters",
      value: function fromFilters(availableFieldIds) {
        var groups = {};
        availableFieldIds.forEach(function (fieldId) {
          groups[fieldId] = [];
        });

        for (var _len = arguments.length, filters = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          filters[_key - 1] = arguments[_key];
        }

        var flatFilters = filters.flatMap(function (f) {
          return f.$or || f;
        });
        flatFilters.forEach(function (f) {
          var key = f.getFilterKey();

          if (!groups[key]) {
            groups[key] = [];
          }

          groups[key].push(f);
        });
        return new Facet(groups);
      }
    }]);

    return Facet;
  }();

  /**
   * FilterRegistry is a structure that manages static {@link Filter}s and {@link Facet} filters.
   *
   * Static filters and facet filters are stored within global storage using FilterNodes.
   */

  var FilterRegistry =
  /*#__PURE__*/
  function () {
    function FilterRegistry(globalStorage) {
      var availableFieldIds = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

      _classCallCheck(this, FilterRegistry);

      /**
       * FilterRegistry uses {@link GlobalStorage} for storing FilterNodes.
       * Each node is given a unique key in global storage.
       */
      this.globalStorage = globalStorage;
      /**
       * All available field ids for the current facet filters, including
       * field ids for unused but available filters.
       * @type {Array<string>}
       */

      this.availableFieldIds = availableFieldIds;
    }
    /**
     * Returns an array containing all of the filternodes stored in global storage.
     * @returns {Array<FilterNode>}
     */


    _createClass(FilterRegistry, [{
      key: "getAllFilterNodes",
      value: function getAllFilterNodes() {
        var globalStorageFilterNodes = [].concat(_toConsumableArray(this.getStaticFilterNodes()), _toConsumableArray(this.getFacetFilterNodes()));
        var locationRadiusFilterNode = this.getFilterNodeByKey(StorageKeys.LOCATION_RADIUS);

        if (locationRadiusFilterNode) {
          globalStorageFilterNodes.push(locationRadiusFilterNode);
        }

        return globalStorageFilterNodes;
      }
      /**
       * Get all of the {@link FilterNode}s for static filters.
       * @returns {Array<FilterNode>}
       */

    }, {
      key: "getStaticFilterNodes",
      value: function getStaticFilterNodes() {
        return this.globalStorage.getAll(StorageKeys.STATIC_FILTER_NODE);
      }
      /**
       * Get all of the active {@link FilterNode}s for facets.
       * @returns {Array<FilterNode>}
       */

    }, {
      key: "getFacetFilterNodes",
      value: function getFacetFilterNodes() {
        return this.globalStorage.getState(StorageKeys.FACET_FILTER_NODE) || [];
      }
      /**
       * Gets the filter string to send in a search query.
       * TODO: move payload method logic into core.js, since it is only used there.
       * @returns {string}
       */

    }, {
      key: "getStaticFilterPayload",
      value: function getStaticFilterPayload() {
        return JSON.stringify(this._getStaticFilterPayload());
      }
    }, {
      key: "_getStaticFilterPayload",
      value: function _getStaticFilterPayload() {
        var filterNodes = this.getStaticFilterNodes();
        var totalNode = FilterNodeFactory.and.apply(FilterNodeFactory, _toConsumableArray(filterNodes));
        return totalNode.getFilter();
      }
      /**
       * Gets the facet filter string to send in a search query.
       * @returns {string}
       */

    }, {
      key: "getFacetFilterPayload",
      value: function getFacetFilterPayload() {
        return JSON.stringify(this._getFacetFilterPayload());
      }
    }, {
      key: "_getFacetFilterPayload",
      value: function _getFacetFilterPayload() {
        var getFilters = function getFilters(fn) {
          return fn.getChildren().length ? fn.getChildren().flatMap(getFilters) : fn.getFilter();
        };

        var filters = this.getFacetFilterNodes().flatMap(getFilters);
        return Facet.fromFilters.apply(Facet, [this.availableFieldIds].concat(_toConsumableArray(filters)));
      }
      /**
       * Get the FilterNode with the corresponding key. Defaults to null.
       * @param {string} key
       */

    }, {
      key: "getFilterNodeByKey",
      value: function getFilterNodeByKey(key) {
        return this.globalStorage.getState(key);
      }
      /**
       * Sets the specified {@link FilterNode} under the given key.
       * Will replace a preexisting node if there is one.
       * @param {string} key
       * @param {FilterNode} filterNode
       */

    }, {
      key: "setStaticFilterNodes",
      value: function setStaticFilterNodes(key, filterNode) {
        this.globalStorage.set("".concat(StorageKeys.STATIC_FILTER_NODE, ".").concat(key), filterNode);
      }
      /**
       * Sets the filter nodes used for the current facet filters.
       *
       * Because the search response only sends back one
       * set of facet filters, there can only be one active facet filter node
       * at a time.
       * @param {Array<string>} availableFieldIds
       * @param {Array<FilterNode>} filterNodes
       */

    }, {
      key: "setFacetFilterNodes",
      value: function setFacetFilterNodes() {
        var availableFieldIds = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
        var filterNodes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
        this.availableFieldIds = availableFieldIds;
        this.globalStorage.set(StorageKeys.FACET_FILTER_NODE, filterNodes);
      }
      /**
       * Sets the locationRadius filterNode. There may only be one locationRadius active
       * at a time.
       * @param {FilterNode} filterNode
       */

    }, {
      key: "setLocationRadiusFilterNode",
      value: function setLocationRadiusFilterNode(filterNode) {
        this.globalStorage.set(StorageKeys.LOCATION_RADIUS, filterNode);
      }
      /**
       * Remove the static FilterNode with this namespace.
       * @param {string} key
       */

    }, {
      key: "clearStaticFilterNode",
      value: function clearStaticFilterNode(key) {
        this.globalStorage["delete"]("".concat(StorageKeys.STATIC_FILTER_NODE, ".").concat(key));
      }
      /**
       * Remove all facet FilterNodes.
       */

    }, {
      key: "clearFacetFilterNodes",
      value: function clearFacetFilterNodes() {
        this.globalStorage["delete"](StorageKeys.FACET_FILTER_NODE);
      }
    }]);

    return FilterRegistry;
  }();

  /** @typedef {import('./services/searchservice').default} SearchService */

  /** @typedef {import('./services/autocompleteservice').default} AutoCompleteService */

  /** @typedef {import('./services/questionanswerservice').default} QuestionAnswerService */

  /**
   * Core is the main application container for all of the network and storage
   * related behaviors of the application.
   */

  var Core =
  /*#__PURE__*/
  function () {
    function Core() {
      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      _classCallCheck(this, Core);

      /**
       * A reference to the client API Key used for all requests
       * @type {string}
       * @private
       */
      this._apiKey = config.apiKey;
      /**
       * A reference to the client Answers Key used for all requests
       * @type {string}
       * @private
       */

      this._experienceKey = config.experienceKey;
      /**
       * The answers config version to use for all requests
       * @type {string}
       * @private
       */

      this._experienceVersion = config.experienceVersion;
      /**
       * A reference to the client locale used for all requests. If not specified, defaults to "en" (for
       * backwards compatibility).
       * @type {string}
       * @private
       */

      this._locale = config.locale;
      /**
       * A map of field formatters used to format results, if present
       * @type {Object.<string, function>}
       * @private
       */

      this._fieldFormatters = config.fieldFormatters || {};
      /**
       * A reference to the core data storage that powers the UI
       * @type {GlobalStorage}
       * @private
       */

      this.globalStorage = config.globalStorage;
      /**
       * A reference to the core persistent storage
       * @type {PersistentStorage}
       * @private
       */

      this.persistentStorage = config.persistentStorage;
      /**
       * The filterRegistry is in charge of setting, removing, and retrieving filters
       * and facet filters from global storage.
       * @type {FilterRegistry}
       */

      this.filterRegistry = new FilterRegistry(this.globalStorage);
      /**
       * An abstraction containing the integration with the RESTful search API
       * For both vertical and universal search
       * @type {SearchService}
       * @private
       */

      this._searcher = config.searchService;
      /**
       * An abstraction containing the integration with the RESTful autocomplete API
       * For filter search, vertical autocomplete, and universal autocomplete
       * @type {AutoCompleteService}
       * @private
       */

      this._autoComplete = config.autoCompleteService;
      /**
       * An abstraction for interacting with the Q&A rest interface
       * @type {QuestionAnswerService}
       * @private
       */

      this._questionAnswer = config.questionAnswerService;
      /**
       * A local reference to the analytics reporter, used to report events for this component
       * @type {AnalyticsReporter}
       */

      this._analyticsReporter = config.analyticsReporter;
      /**
       * A user-given function that returns an analytics event to fire after a universal search.
       * @type {Function}
       */

      this.onUniversalSearch = config.onUniversalSearch || function () {};
      /**
       * A user-given function that returns an analytics event to fire after a vertical search.
       * @type {Function}
       */


      this.onVerticalSearch = config.onVerticalSearch || function () {};
    }
    /**
     * Search in the context of a vertical
     * @param {string} verticalKey vertical ID for the search
     * @param {Object} options additional settings for the search.
     * @param {Object} query The query details
     * @param {string} query.input The input to search for
     * @param {string} query.id The query ID to use. If paging within a query, the same ID should be used
     * @param {boolean} query.append If true, adds the results of this query to the end of the current results, defaults false
     */


    _createClass(Core, [{
      key: "verticalSearch",
      value: function verticalSearch(verticalKey) {
        var _this = this;

        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var query = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

        if (!query.append) {
          this.globalStorage.set(StorageKeys.VERTICAL_RESULTS, VerticalResults.searchLoading());
          this.globalStorage.set(StorageKeys.SPELL_CHECK, {});
          this.globalStorage.set(StorageKeys.LOCATION_BIAS, {});
        }

        var resetPagination = options.resetPagination,
            useFacets = options.useFacets;

        if (resetPagination) {
          this.persistentStorage["delete"](StorageKeys.SEARCH_OFFSET);
          this.globalStorage["delete"](StorageKeys.SEARCH_OFFSET);
        }

        if (!useFacets) {
          this.filterRegistry.setFacetFilterNodes([], []);
        }

        var setQueryParams = options.setQueryParams;
        var context = this.globalStorage.getState(StorageKeys.API_CONTEXT);
        var referrerPageUrl = this.globalStorage.getState(StorageKeys.REFERRER_PAGE_URL);

        if (setQueryParams) {
          if (context) {
            this.persistentStorage.set(StorageKeys.API_CONTEXT, context, true);
          }

          if (referrerPageUrl !== null) {
            this.persistentStorage.set(StorageKeys.REFERRER_PAGE_URL, referrerPageUrl, true);
          }
        }

        var searchConfig = this.globalStorage.getState(StorageKeys.SEARCH_CONFIG) || {};

        if (!searchConfig.verticalKey) {
          this.globalStorage.set(StorageKeys.SEARCH_CONFIG, _objectSpread({}, searchConfig, {
            verticalKey: verticalKey
          }));
        }

        var locationRadiusFilterNode = this.getLocationRadiusFilterNode();
        return this._searcher.verticalSearch(verticalKey, _objectSpread({
          limit: this.globalStorage.getState(StorageKeys.SEARCH_CONFIG).limit,
          geolocation: this.globalStorage.getState(StorageKeys.GEOLOCATION),
          input: this.globalStorage.getState(StorageKeys.QUERY) || ''
        }, query, {
          filter: this.filterRegistry.getStaticFilterPayload(),
          facetFilter: this.filterRegistry.getFacetFilterPayload(),
          offset: this.globalStorage.getState(StorageKeys.SEARCH_OFFSET) || 0,
          isDynamicFiltersEnabled: this._isDynamicFiltersEnabled,
          skipSpellCheck: this.globalStorage.getState('skipSpellCheck'),
          queryTrigger: this.globalStorage.getState('queryTrigger'),
          sessionTrackingEnabled: this.globalStorage.getState(StorageKeys.SESSIONS_OPT_IN),
          sortBys: this.globalStorage.getState(StorageKeys.SORT_BYS),
          locationRadius: locationRadiusFilterNode ? locationRadiusFilterNode.getFilter().value : null,
          context: context,
          referrerPageUrl: referrerPageUrl
        })).then(function (response) {
          return SearchDataTransformer.transformVertical(response, _this._fieldFormatters, verticalKey);
        }).then(function (data) {
          _this.globalStorage.set(StorageKeys.QUERY_ID, data[StorageKeys.QUERY_ID]);

          _this.globalStorage.set(StorageKeys.NAVIGATION, data[StorageKeys.NAVIGATION]);

          _this.globalStorage.set(StorageKeys.INTENTS, data[StorageKeys.INTENTS]);

          _this.globalStorage.set(StorageKeys.ALTERNATIVE_VERTICALS, data[StorageKeys.ALTERNATIVE_VERTICALS]);

          if (query.append) {
            var mergedResults = _this.globalStorage.getState(StorageKeys.VERTICAL_RESULTS).append(data[StorageKeys.VERTICAL_RESULTS]);

            _this.globalStorage.set(StorageKeys.VERTICAL_RESULTS, mergedResults);
          } else {
            _this.globalStorage.set(StorageKeys.VERTICAL_RESULTS, data[StorageKeys.VERTICAL_RESULTS]);
          }

          if (data[StorageKeys.DYNAMIC_FILTERS]) {
            _this.globalStorage.set(StorageKeys.DYNAMIC_FILTERS, data[StorageKeys.DYNAMIC_FILTERS]);

            _this.globalStorage.set(StorageKeys.RESULTS_HEADER, data[StorageKeys.DYNAMIC_FILTERS]);
          }

          if (data[StorageKeys.SPELL_CHECK]) {
            _this.globalStorage.set(StorageKeys.SPELL_CHECK, data[StorageKeys.SPELL_CHECK]);
          }

          if (data[StorageKeys.LOCATION_BIAS]) {
            _this.globalStorage.set(StorageKeys.LOCATION_BIAS, data[StorageKeys.LOCATION_BIAS]);
          }

          _this.globalStorage["delete"]('skipSpellCheck');

          _this.globalStorage["delete"]('queryTrigger');

          var exposedParams = {
            verticalKey: verticalKey,
            queryString: query.input,
            resultsCount: _this.globalStorage.getState(StorageKeys.VERTICAL_RESULTS).resultsCount,
            resultsContext: data[StorageKeys.VERTICAL_RESULTS].resultsContext
          };

          var analyticsEvent = _this.onVerticalSearch(exposedParams);

          if (_typeof(analyticsEvent) === 'object') {
            _this._analyticsReporter.report(AnalyticsEvent.fromData(analyticsEvent));
          }
        });
      }
      /**
       * Page within the results of the last query
       * TODO: Should id be in all searches? Currently is only in searches done by the pagination
       * component
       * @param {string} verticalKey The vertical key to use in the search
       */

    }, {
      key: "verticalPage",
      value: function verticalPage(verticalKey) {
        this.verticalSearch(verticalKey, {
          useFacets: true,
          setQueryParams: true
        }, {
          id: this.globalStorage.getState(StorageKeys.QUERY_ID)
        });
      }
    }, {
      key: "search",
      value: function search(queryString, urls) {
        var _this2 = this;

        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        var setQueryParams = options.setQueryParams;
        var context = this.globalStorage.getState(StorageKeys.API_CONTEXT);
        var referrerPageUrl = this.globalStorage.getState(StorageKeys.REFERRER_PAGE_URL);

        if (setQueryParams) {
          if (context) {
            this.persistentStorage.set(StorageKeys.API_CONTEXT, context, true);
          }

          if (referrerPageUrl !== null) {
            this.persistentStorage.set(StorageKeys.REFERRER_PAGE_URL, referrerPageUrl, true);
          }
        }

        this.globalStorage.set(StorageKeys.DIRECT_ANSWER, {});
        this.globalStorage.set(StorageKeys.UNIVERSAL_RESULTS, UniversalResults.searchLoading());
        this.globalStorage.set(StorageKeys.QUESTION_SUBMISSION, {});
        this.globalStorage.set(StorageKeys.SPELL_CHECK, {});
        this.globalStorage.set(StorageKeys.LOCATION_BIAS, {});
        return this._searcher.universalSearch(queryString, {
          geolocation: this.globalStorage.getState(StorageKeys.GEOLOCATION),
          skipSpellCheck: this.globalStorage.getState('skipSpellCheck'),
          queryTrigger: this.globalStorage.getState('queryTrigger'),
          sessionTrackingEnabled: this.globalStorage.getState(StorageKeys.SESSIONS_OPT_IN),
          context: context,
          referrerPageUrl: referrerPageUrl
        }).then(function (response) {
          return SearchDataTransformer.transform(response, urls, _this2._fieldFormatters);
        }).then(function (data) {
          _this2.globalStorage.set(StorageKeys.QUERY_ID, data[StorageKeys.QUERY_ID]);

          _this2.globalStorage.set(StorageKeys.NAVIGATION, data[StorageKeys.NAVIGATION]);

          _this2.globalStorage.set(StorageKeys.DIRECT_ANSWER, data[StorageKeys.DIRECT_ANSWER]);

          _this2.globalStorage.set(StorageKeys.UNIVERSAL_RESULTS, data[StorageKeys.UNIVERSAL_RESULTS], urls);

          _this2.globalStorage.set(StorageKeys.INTENTS, data[StorageKeys.INTENTS]);

          _this2.globalStorage.set(StorageKeys.SPELL_CHECK, data[StorageKeys.SPELL_CHECK]);

          _this2.globalStorage.set(StorageKeys.LOCATION_BIAS, data[StorageKeys.LOCATION_BIAS]);

          _this2.globalStorage["delete"]('skipSpellCheck');

          _this2.globalStorage["delete"]('queryTrigger');

          var exposedParams = {
            queryString: queryString,
            sectionsCount: data[StorageKeys.UNIVERSAL_RESULTS].sections.length
          };

          var analyticsEvent = _this2.onUniversalSearch(exposedParams);

          if (_typeof(analyticsEvent) === 'object') {
            _this2._analyticsReporter.report(AnalyticsEvent.fromData(analyticsEvent));
          }
        });
      }
      /**
       * Given an input, query for a list of similar results and set into storage
       *
       * @param {string} input     the string to autocomplete
       * @param {string} namespace the namespace to use for the storage key
       */

    }, {
      key: "autoCompleteUniversal",
      value: function autoCompleteUniversal(input, namespace) {
        var _this3 = this;

        return this._autoComplete.queryUniversal(input).then(function (data) {
          _this3.globalStorage.set("".concat(StorageKeys.AUTOCOMPLETE, ".").concat(namespace), data);

          return data;
        });
      }
      /**
       * Given an input, query for a list of similar results in the provided vertical
       * and set into storage
       *
       * @param {string} input       the string to autocomplete
       * @param {string} namespace the namespace to use for the storage key
       * @param {string} verticalKey the vertical key for the experience
       */

    }, {
      key: "autoCompleteVertical",
      value: function autoCompleteVertical(input, namespace, verticalKey) {
        var _this4 = this;

        return this._autoComplete.queryVertical(input, verticalKey).then(function (data) {
          _this4.globalStorage.set("".concat(StorageKeys.AUTOCOMPLETE, ".").concat(namespace), data);

          return data;
        });
      }
      /**
       * Given an input, provide a list of suitable filters for autocompletion
       *
       * @param {string} input  the string to search for filters with
       * @param {object} config  the config to serach for filters with
       * @param {string} config.namespace  the namespace to use for the storage key
       * @param {string} config.verticalKey the vertical key for the config
       * @param {object} config.searchParameters  the search parameters for the config v2
       */

    }, {
      key: "autoCompleteFilter",
      value: function autoCompleteFilter(input, config) {
        var _this5 = this;

        return this._autoComplete.queryFilter(input, config).then(function (data) {
          _this5.globalStorage.set("".concat(StorageKeys.AUTOCOMPLETE, ".").concat(config.namespace), data);
        });
      }
      /**
       * Submits a question to the server and updates the underlying question model
       * @param {object} question The question object to submit to the server
       * @param {number} question.entityId The entity to associate with the question (required)
       * @param {string} question.lanuage The language of the question
       * @param {string} question.site The "publisher" of the (e.g. 'FIRST_PARTY')
       * @param {string} question.name The name of the author
       * @param {string} question.email The email address of the author
       * @param {string} question.questionText The question
       * @param {string} question.questionDescription Additional information about the question
       */

    }, {
      key: "submitQuestion",
      value: function submitQuestion(question) {
        var _this6 = this;

        return this._questionAnswer.submitQuestion(question).then(function (data) {
          _this6.globalStorage.set(StorageKeys.QUESTION_SUBMISSION, QuestionSubmission.submitted());
        });
      }
      /**
       * Stores the given sortBy into storage, to be used for the next search
       * @param {Object} sortByOptions
       */

    }, {
      key: "setSortBys",
      value: function setSortBys() {
        for (var _len = arguments.length, sortByOptions = new Array(_len), _key = 0; _key < _len; _key++) {
          sortByOptions[_key] = arguments[_key];
        }

        var sortBys = sortByOptions.map(function (option) {
          return {
            type: option.type,
            field: option.field,
            direction: option.direction
          };
        });
        this.globalStorage.set(StorageKeys.SORT_BYS, JSON.stringify(sortBys));
      }
      /**
       * Clears the sortBys key in global storage.
       */

    }, {
      key: "clearSortBys",
      value: function clearSortBys() {
        this.globalStorage["delete"](StorageKeys.SORT_BYS);
      }
      /**
       * Stores the given query into storage, to be used for the next search
       * @param {string} query the query to store
       */

    }, {
      key: "setQuery",
      value: function setQuery(query) {
        this.globalStorage.set(StorageKeys.QUERY, query);
      }
      /**
       * Stores the provided query ID, to be used in analytics
       * @param {string} queryId The query id to store
       */

    }, {
      key: "setQueryId",
      value: function setQueryId(queryId) {
        this.globalStorage.set(StorageKeys.QUERY_ID, queryId);
      }
      /**
       * Get all of the {@link FilterNode}s for static filters.
       * @returns {Array<FilterNode>}
       */

    }, {
      key: "getStaticFilterNodes",
      value: function getStaticFilterNodes() {
        return this.filterRegistry.getStaticFilterNodes();
      }
      /**
       * Get all of the active {@link FilterNode}s for facets.
       * @returns {Array<FilterNode>}
       */

    }, {
      key: "getFacetFilterNodes",
      value: function getFacetFilterNodes() {
        return this.filterRegistry.getFacetFilterNodes();
      }
      /**
       * Get the {@link FilterNode} affecting the locationRadius url parameter.
       * @returns {FilterNode}
       */

    }, {
      key: "getLocationRadiusFilterNode",
      value: function getLocationRadiusFilterNode() {
        return this.filterRegistry.getFilterNodeByKey(StorageKeys.LOCATION_RADIUS);
      }
      /**
       * Sets the filter nodes used for the current facet filters.
       *
       * Because the search response only sends back one
       * set of facet filters, there can only be one active facet filter node
       * at a time.
       * @param {Array<string>} availableFieldIds
       * @param {Array<FilterNode>} filterNodes
       */

    }, {
      key: "setFacetFilterNodes",
      value: function setFacetFilterNodes() {
        var availableFieldids = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
        var filterNodes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
        this.filterRegistry.setFacetFilterNodes(availableFieldids, filterNodes);
      }
      /**
       * Sets the specified {@link FilterNode} under the given key.
       * Will replace a preexisting node if there is one.
       * @param {string} namespace
       * @param {FilterNode} filterNode
       */

    }, {
      key: "setStaticFilterNodes",
      value: function setStaticFilterNodes(namespace, filterNode) {
        this.filterRegistry.setStaticFilterNodes(namespace, filterNode);
      }
      /**
       * Sets the locationRadius filterNode.
       * @param {FilterNode} filterNode
       */

    }, {
      key: "setLocationRadiusFilterNode",
      value: function setLocationRadiusFilterNode(filterNode) {
        this.filterRegistry.setLocationRadiusFilterNode(filterNode);
      }
      /**
       * Remove the static FilterNode with this namespace.
       * @param {string} namespace
       */

    }, {
      key: "clearStaticFilterNode",
      value: function clearStaticFilterNode(namespace) {
        this.filterRegistry.clearStaticFilterNode(namespace);
      }
      /**
       * Remove all facet FilterNodes.
       */

    }, {
      key: "clearFacetFilterNodes",
      value: function clearFacetFilterNodes() {
        this.filterRegistry.clearFacetFilterNodes();
      }
      /**
       * Clears the locationRadius filterNode.
       */

    }, {
      key: "clearLocationRadiusFilterNode",
      value: function clearLocationRadiusFilterNode() {
        this.filterRegistry.clearLocationRadiusFilterNode();
      }
    }, {
      key: "enableDynamicFilters",
      value: function enableDynamicFilters() {
        this._isDynamicFiltersEnabled = true;
      }
    }, {
      key: "on",
      value: function on(evt, moduleId, cb) {
        return this.globalStorage.on(evt, moduleId, cb);
      }
    }]);

    return Core;
  }();

  /*!
   * css-vars-ponyfill
   * v2.3.1
   * https://jhildenbiddle.github.io/css-vars-ponyfill/
   * (c) 2018-2020 John Hildenbiddle <http://hildenbiddle.com>
   * MIT license
   */
  function _extends() {
      _extends = Object.assign || function(target) {
          for (var i = 1; i < arguments.length; i++) {
              var source = arguments[i];
              for (var key in source) {
                  if (Object.prototype.hasOwnProperty.call(source, key)) {
                      target[key] = source[key];
                  }
              }
          }
          return target;
      };
      return _extends.apply(this, arguments);
  }

  function _toConsumableArray$1(arr) {
      return _arrayWithoutHoles$1(arr) || _iterableToArray$1(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread$1();
  }

  function _arrayWithoutHoles$1(arr) {
      if (Array.isArray(arr)) return _arrayLikeToArray(arr);
  }

  function _iterableToArray$1(iter) {
      if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter);
  }

  function _unsupportedIterableToArray(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor) n = o.constructor.name;
      if (n === "Map" || n === "Set") return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
  }

  function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length) len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
      return arr2;
  }

  function _nonIterableSpread$1() {
      throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  /*!
   * get-css-data
   * v1.8.0
   * https://github.com/jhildenbiddle/get-css-data
   * (c) 2018-2020 John Hildenbiddle <http://hildenbiddle.com>
   * MIT license
   */ function getUrls(urls) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var settings = {
          mimeType: options.mimeType || null,
          onBeforeSend: options.onBeforeSend || Function.prototype,
          onSuccess: options.onSuccess || Function.prototype,
          onError: options.onError || Function.prototype,
          onComplete: options.onComplete || Function.prototype
      };
      var urlArray = Array.isArray(urls) ? urls : [ urls ];
      var urlQueue = Array.apply(null, Array(urlArray.length)).map((function(x) {
          return null;
      }));
      function isValidCss() {
          var cssText = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
          var isHTML = cssText.trim().charAt(0) === "<";
          return !isHTML;
      }
      function onError(xhr, urlIndex) {
          settings.onError(xhr, urlArray[urlIndex], urlIndex);
      }
      function onSuccess(responseText, urlIndex) {
          var returnVal = settings.onSuccess(responseText, urlArray[urlIndex], urlIndex);
          responseText = returnVal === false ? "" : returnVal || responseText;
          urlQueue[urlIndex] = responseText;
          if (urlQueue.indexOf(null) === -1) {
              settings.onComplete(urlQueue);
          }
      }
      var parser = document.createElement("a");
      urlArray.forEach((function(url, i) {
          parser.setAttribute("href", url);
          parser.href = String(parser.href);
          var isIElte9 = Boolean(document.all && !window.atob);
          var isIElte9CORS = isIElte9 && parser.host.split(":")[0] !== location.host.split(":")[0];
          if (isIElte9CORS) {
              var isSameProtocol = parser.protocol === location.protocol;
              if (isSameProtocol) {
                  var xdr = new XDomainRequest;
                  xdr.open("GET", url);
                  xdr.timeout = 0;
                  xdr.onprogress = Function.prototype;
                  xdr.ontimeout = Function.prototype;
                  xdr.onload = function() {
                      if (isValidCss(xdr.responseText)) {
                          onSuccess(xdr.responseText, i);
                      } else {
                          onError(xdr, i);
                      }
                  };
                  xdr.onerror = function(err) {
                      onError(xdr, i);
                  };
                  setTimeout((function() {
                      xdr.send();
                  }), 0);
              } else {
                  console.warn("Internet Explorer 9 Cross-Origin (CORS) requests must use the same protocol (".concat(url, ")"));
                  onError(null, i);
              }
          } else {
              var xhr = new XMLHttpRequest;
              xhr.open("GET", url);
              if (settings.mimeType && xhr.overrideMimeType) {
                  xhr.overrideMimeType(settings.mimeType);
              }
              settings.onBeforeSend(xhr, url, i);
              xhr.onreadystatechange = function() {
                  if (xhr.readyState === 4) {
                      if (xhr.status === 200 && isValidCss(xhr.responseText)) {
                          onSuccess(xhr.responseText, i);
                      } else {
                          onError(xhr, i);
                      }
                  }
              };
              xhr.send();
          }
      }));
  }

  /**
   * Gets CSS data from <style> and <link> nodes (including @imports), then
   * returns data in order processed by DOM. Allows specifying nodes to
   * include/exclude and filtering CSS data using RegEx.
   *
   * @preserve
   * @param {object}   [options] The options object
   * @param {object}   [options.rootElement=document] Root element to traverse for
   *                   <link> and <style> nodes.
   * @param {string}   [options.include] CSS selector matching <link> and <style>
   *                   nodes to include
   * @param {string}   [options.exclude] CSS selector matching <link> and <style>
   *                   nodes to exclude
   * @param {object}   [options.filter] Regular expression used to filter node CSS
   *                   data. Each block of CSS data is tested against the filter,
   *                   and only matching data is included.
   * @param {boolean}  [options.skipDisabled=true] Determines if disabled
   *                   stylesheets will be skipped while collecting CSS data.
   * @param {boolean}  [options.useCSSOM=false] Determines if CSS data will be
   *                   collected from a stylesheet's runtime values instead of its
   *                   text content. This is required to get accurate CSS data
   *                   when a stylesheet has been modified using the deleteRule()
   *                   or insertRule() methods because these modifications will
   *                   not be reflected in the stylesheet's text content.
   * @param {function} [options.onBeforeSend] Callback before XHR is sent. Passes
   *                   1) the XHR object, 2) source node reference, and 3) the
   *                   source URL as arguments.
   * @param {function} [options.onSuccess] Callback on each CSS node read. Passes
   *                   1) CSS text, 2) source node reference, and 3) the source
   *                   URL as arguments.
   * @param {function} [options.onError] Callback on each error. Passes 1) the XHR
   *                   object for inspection, 2) soure node reference, and 3) the
   *                   source URL that failed (either a <link> href or an @import)
   *                   as arguments
   * @param {function} [options.onComplete] Callback after all nodes have been
   *                   processed. Passes 1) concatenated CSS text, 2) an array of
   *                   CSS text in DOM order, and 3) an array of nodes in DOM
   *                   order as arguments.
   *
   * @example
   *
   *   getCssData({
   *     rootElement : document,
   *     include     : 'style,link[rel="stylesheet"]',
   *     exclude     : '[href="skip.css"]',
   *     filter      : /red/,
   *     skipDisabled: true,
   *     useCSSOM    : false,
   *     onBeforeSend(xhr, node, url) {
   *       // ...
   *     }
   *     onSuccess(cssText, node, url) {
   *       // ...
   *     }
   *     onError(xhr, node, url) {
   *       // ...
   *     },
   *     onComplete(cssText, cssArray, nodeArray) {
   *       // ...
   *     }
   *   });
   */ function getCssData(options) {
      var regex = {
          cssComments: /\/\*[\s\S]+?\*\//g,
          cssImports: /(?:@import\s*)(?:url\(\s*)?(?:['"])([^'"]*)(?:['"])(?:\s*\))?(?:[^;]*;)/g
      };
      var settings = {
          rootElement: options.rootElement || document,
          include: options.include || 'style,link[rel="stylesheet"]',
          exclude: options.exclude || null,
          filter: options.filter || null,
          skipDisabled: options.skipDisabled !== false,
          useCSSOM: options.useCSSOM || false,
          onBeforeSend: options.onBeforeSend || Function.prototype,
          onSuccess: options.onSuccess || Function.prototype,
          onError: options.onError || Function.prototype,
          onComplete: options.onComplete || Function.prototype
      };
      var sourceNodes = Array.apply(null, settings.rootElement.querySelectorAll(settings.include)).filter((function(node) {
          return !matchesSelector(node, settings.exclude);
      }));
      var cssArray = Array.apply(null, Array(sourceNodes.length)).map((function(x) {
          return null;
      }));
      function handleComplete() {
          var isComplete = cssArray.indexOf(null) === -1;
          if (isComplete) {
              var cssText = cssArray.join("");
              settings.onComplete(cssText, cssArray, sourceNodes);
          }
      }
      function handleSuccess(cssText, cssIndex, node, sourceUrl) {
          var returnVal = settings.onSuccess(cssText, node, sourceUrl);
          cssText = returnVal !== undefined && Boolean(returnVal) === false ? "" : returnVal || cssText;
          resolveImports(cssText, node, sourceUrl, (function(resolvedCssText, errorData) {
              if (cssArray[cssIndex] === null) {
                  errorData.forEach((function(data) {
                      return settings.onError(data.xhr, node, data.url);
                  }));
                  if (!settings.filter || settings.filter.test(resolvedCssText)) {
                      cssArray[cssIndex] = resolvedCssText;
                  } else {
                      cssArray[cssIndex] = "";
                  }
                  handleComplete();
              }
          }));
      }
      function parseImportData(cssText, baseUrl) {
          var ignoreRules = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
          var importData = {};
          importData.rules = (cssText.replace(regex.cssComments, "").match(regex.cssImports) || []).filter((function(rule) {
              return ignoreRules.indexOf(rule) === -1;
          }));
          importData.urls = importData.rules.map((function(rule) {
              return rule.replace(regex.cssImports, "$1");
          }));
          importData.absoluteUrls = importData.urls.map((function(url) {
              return getFullUrl(url, baseUrl);
          }));
          importData.absoluteRules = importData.rules.map((function(rule, i) {
              var oldUrl = importData.urls[i];
              var newUrl = getFullUrl(importData.absoluteUrls[i], baseUrl);
              return rule.replace(oldUrl, newUrl);
          }));
          return importData;
      }
      function resolveImports(cssText, node, baseUrl, callbackFn) {
          var __errorData = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];
          var __errorRules = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : [];
          var importData = parseImportData(cssText, baseUrl, __errorRules);
          if (importData.rules.length) {
              getUrls(importData.absoluteUrls, {
                  onBeforeSend: function onBeforeSend(xhr, url, urlIndex) {
                      settings.onBeforeSend(xhr, node, url);
                  },
                  onSuccess: function onSuccess(cssText, url, urlIndex) {
                      var returnVal = settings.onSuccess(cssText, node, url);
                      cssText = returnVal === false ? "" : returnVal || cssText;
                      var responseImportData = parseImportData(cssText, url, __errorRules);
                      responseImportData.rules.forEach((function(rule, i) {
                          cssText = cssText.replace(rule, responseImportData.absoluteRules[i]);
                      }));
                      return cssText;
                  },
                  onError: function onError(xhr, url, urlIndex) {
                      __errorData.push({
                          xhr: xhr,
                          url: url
                      });
                      __errorRules.push(importData.rules[urlIndex]);
                      resolveImports(cssText, node, baseUrl, callbackFn, __errorData, __errorRules);
                  },
                  onComplete: function onComplete(responseArray) {
                      responseArray.forEach((function(importText, i) {
                          cssText = cssText.replace(importData.rules[i], importText);
                      }));
                      resolveImports(cssText, node, baseUrl, callbackFn, __errorData, __errorRules);
                  }
              });
          } else {
              callbackFn(cssText, __errorData);
          }
      }
      if (sourceNodes.length) {
          sourceNodes.forEach((function(node, i) {
              var linkHref = node.getAttribute("href");
              var linkRel = node.getAttribute("rel");
              var isLink = node.nodeName === "LINK" && linkHref && linkRel && linkRel.toLowerCase().indexOf("stylesheet") !== -1;
              var isSkip = settings.skipDisabled === false ? false : node.disabled;
              var isStyle = node.nodeName === "STYLE";
              if (isLink && !isSkip) {
                  getUrls(linkHref, {
                      mimeType: "text/css",
                      onBeforeSend: function onBeforeSend(xhr, url, urlIndex) {
                          settings.onBeforeSend(xhr, node, url);
                      },
                      onSuccess: function onSuccess(cssText, url, urlIndex) {
                          var sourceUrl = getFullUrl(linkHref);
                          handleSuccess(cssText, i, node, sourceUrl);
                      },
                      onError: function onError(xhr, url, urlIndex) {
                          cssArray[i] = "";
                          settings.onError(xhr, node, url);
                          handleComplete();
                      }
                  });
              } else if (isStyle && !isSkip) {
                  var cssText = node.textContent;
                  if (settings.useCSSOM) {
                      cssText = Array.apply(null, node.sheet.cssRules).map((function(rule) {
                          return rule.cssText;
                      })).join("");
                  }
                  handleSuccess(cssText, i, node, location.href);
              } else {
                  cssArray[i] = "";
                  handleComplete();
              }
          }));
      } else {
          settings.onComplete("", []);
      }
  }

  function getFullUrl(url, base) {
      var d = document.implementation.createHTMLDocument("");
      var b = d.createElement("base");
      var a = d.createElement("a");
      d.head.appendChild(b);
      d.body.appendChild(a);
      b.href = base || document.baseURI || (document.querySelector("base") || {}).href || location.href;
      a.href = url;
      return a.href;
  }

  function matchesSelector(elm, selector) {
      var matches = elm.matches || elm.matchesSelector || elm.webkitMatchesSelector || elm.mozMatchesSelector || elm.msMatchesSelector || elm.oMatchesSelector;
      return matches.call(elm, selector);
  }

  var balancedMatch = balanced;

  function balanced(a, b, str) {
      if (a instanceof RegExp) a = maybeMatch(a, str);
      if (b instanceof RegExp) b = maybeMatch(b, str);
      var r = range(a, b, str);
      return r && {
          start: r[0],
          end: r[1],
          pre: str.slice(0, r[0]),
          body: str.slice(r[0] + a.length, r[1]),
          post: str.slice(r[1] + b.length)
      };
  }

  function maybeMatch(reg, str) {
      var m = str.match(reg);
      return m ? m[0] : null;
  }

  balanced.range = range;

  function range(a, b, str) {
      var begs, beg, left, right, result;
      var ai = str.indexOf(a);
      var bi = str.indexOf(b, ai + 1);
      var i = ai;
      if (ai >= 0 && bi > 0) {
          begs = [];
          left = str.length;
          while (i >= 0 && !result) {
              if (i == ai) {
                  begs.push(i);
                  ai = str.indexOf(a, i + 1);
              } else if (begs.length == 1) {
                  result = [ begs.pop(), bi ];
              } else {
                  beg = begs.pop();
                  if (beg < left) {
                      left = beg;
                      right = bi;
                  }
                  bi = str.indexOf(b, i + 1);
              }
              i = ai < bi && ai >= 0 ? ai : bi;
          }
          if (begs.length) {
              result = [ left, right ];
          }
      }
      return result;
  }

  function parseCss(css) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var defaults = {
          preserveStatic: true,
          removeComments: false
      };
      var settings = _extends({}, defaults, options);
      var errors = [];
      function error(msg) {
          throw new Error("CSS parse error: ".concat(msg));
      }
      function match(re) {
          var m = re.exec(css);
          if (m) {
              css = css.slice(m[0].length);
              return m;
          }
      }
      function open() {
          return match(/^{\s*/);
      }
      function close() {
          return match(/^}/);
      }
      function whitespace() {
          match(/^\s*/);
      }
      function comment() {
          whitespace();
          if (css[0] !== "/" || css[1] !== "*") {
              return;
          }
          var i = 2;
          while (css[i] && (css[i] !== "*" || css[i + 1] !== "/")) {
              i++;
          }
          if (!css[i]) {
              return error("end of comment is missing");
          }
          var str = css.slice(2, i);
          css = css.slice(i + 2);
          return {
              type: "comment",
              comment: str
          };
      }
      function comments() {
          var cmnts = [];
          var c;
          while (c = comment()) {
              cmnts.push(c);
          }
          return settings.removeComments ? [] : cmnts;
      }
      function selector() {
          whitespace();
          while (css[0] === "}") {
              error("extra closing bracket");
          }
          var m = match(/^(("(?:\\"|[^"])*"|'(?:\\'|[^'])*'|[^{])+)/);
          if (m) {
              return m[0].trim().replace(/\/\*([^*]|[\r\n]|(\*+([^*/]|[\r\n])))*\*\/+/g, "").replace(/"(?:\\"|[^"])*"|'(?:\\'|[^'])*'/g, (function(m) {
                  return m.replace(/,/g, "‌");
              })).split(/\s*(?![^(]*\)),\s*/).map((function(s) {
                  return s.replace(/\u200C/g, ",");
              }));
          }
      }
      function declaration() {
          if (css[0] === "@") {
              return at_rule();
          }
          match(/^([;\s]*)+/);
          var comment_regexp = /\/\*[^*]*\*+([^/*][^*]*\*+)*\//g;
          var prop = match(/^(\*?[-#/*\\\w]+(\[[0-9a-z_-]+\])?)\s*/);
          if (!prop) {
              return;
          }
          prop = prop[0].trim();
          if (!match(/^:\s*/)) {
              return error("property missing ':'");
          }
          var val = match(/^((?:\/\*.*?\*\/|'(?:\\'|.)*?'|"(?:\\"|.)*?"|\((\s*'(?:\\'|.)*?'|"(?:\\"|.)*?"|[^)]*?)\s*\)|[^};])+)/);
          var ret = {
              type: "declaration",
              property: prop.replace(comment_regexp, ""),
              value: val ? val[0].replace(comment_regexp, "").trim() : ""
          };
          match(/^[;\s]*/);
          return ret;
      }
      function declarations() {
          if (!open()) {
              return error("missing '{'");
          }
          var d;
          var decls = comments();
          while (d = declaration()) {
              decls.push(d);
              decls = decls.concat(comments());
          }
          if (!close()) {
              return error("missing '}'");
          }
          return decls;
      }
      function keyframe() {
          whitespace();
          var vals = [];
          var m;
          while (m = match(/^((\d+\.\d+|\.\d+|\d+)%?|[a-z]+)\s*/)) {
              vals.push(m[1]);
              match(/^,\s*/);
          }
          if (vals.length) {
              return {
                  type: "keyframe",
                  values: vals,
                  declarations: declarations()
              };
          }
      }
      function at_keyframes() {
          var m = match(/^@([-\w]+)?keyframes\s*/);
          if (!m) {
              return;
          }
          var vendor = m[1];
          m = match(/^([-\w]+)\s*/);
          if (!m) {
              return error("@keyframes missing name");
          }
          var name = m[1];
          if (!open()) {
              return error("@keyframes missing '{'");
          }
          var frame;
          var frames = comments();
          while (frame = keyframe()) {
              frames.push(frame);
              frames = frames.concat(comments());
          }
          if (!close()) {
              return error("@keyframes missing '}'");
          }
          return {
              type: "keyframes",
              name: name,
              vendor: vendor,
              keyframes: frames
          };
      }
      function at_page() {
          var m = match(/^@page */);
          if (m) {
              var sel = selector() || [];
              return {
                  type: "page",
                  selectors: sel,
                  declarations: declarations()
              };
          }
      }
      function at_page_margin_box() {
          var m = match(/@(top|bottom|left|right)-(left|center|right|top|middle|bottom)-?(corner)?\s*/);
          if (m) {
              var name = "".concat(m[1], "-").concat(m[2]) + (m[3] ? "-".concat(m[3]) : "");
              return {
                  type: "page-margin-box",
                  name: name,
                  declarations: declarations()
              };
          }
      }
      function at_fontface() {
          var m = match(/^@font-face\s*/);
          if (m) {
              return {
                  type: "font-face",
                  declarations: declarations()
              };
          }
      }
      function at_supports() {
          var m = match(/^@supports *([^{]+)/);
          if (m) {
              return {
                  type: "supports",
                  supports: m[1].trim(),
                  rules: rules()
              };
          }
      }
      function at_host() {
          var m = match(/^@host\s*/);
          if (m) {
              return {
                  type: "host",
                  rules: rules()
              };
          }
      }
      function at_media() {
          var m = match(/^@media([^{]+)*/);
          if (m) {
              return {
                  type: "media",
                  media: (m[1] || "").trim(),
                  rules: rules()
              };
          }
      }
      function at_custom_m() {
          var m = match(/^@custom-media\s+(--[^\s]+)\s*([^{;]+);/);
          if (m) {
              return {
                  type: "custom-media",
                  name: m[1].trim(),
                  media: m[2].trim()
              };
          }
      }
      function at_document() {
          var m = match(/^@([-\w]+)?document *([^{]+)/);
          if (m) {
              return {
                  type: "document",
                  document: m[2].trim(),
                  vendor: m[1] ? m[1].trim() : null,
                  rules: rules()
              };
          }
      }
      function at_x() {
          var m = match(/^@(import|charset|namespace)\s*([^;]+);/);
          if (m) {
              return {
                  type: m[1],
                  name: m[2].trim()
              };
          }
      }
      function at_rule() {
          whitespace();
          if (css[0] === "@") {
              var ret = at_x() || at_fontface() || at_media() || at_keyframes() || at_supports() || at_document() || at_custom_m() || at_host() || at_page() || at_page_margin_box();
              if (ret && !settings.preserveStatic) {
                  var hasVarFunc = false;
                  if (ret.declarations) {
                      hasVarFunc = ret.declarations.some((function(decl) {
                          return /var\(/.test(decl.value);
                      }));
                  } else {
                      var arr = ret.keyframes || ret.rules || [];
                      hasVarFunc = arr.some((function(obj) {
                          return (obj.declarations || []).some((function(decl) {
                              return /var\(/.test(decl.value);
                          }));
                      }));
                  }
                  return hasVarFunc ? ret : {};
              }
              return ret;
          }
      }
      function rule() {
          if (!settings.preserveStatic) {
              var balancedMatch$1 = balancedMatch("{", "}", css);
              if (balancedMatch$1) {
                  var hasVarDecl = /:(?:root|host)(?![.:#(])/.test(balancedMatch$1.pre) && /--\S*\s*:/.test(balancedMatch$1.body);
                  var hasVarFunc = /var\(/.test(balancedMatch$1.body);
                  if (!hasVarDecl && !hasVarFunc) {
                      css = css.slice(balancedMatch$1.end + 1);
                      return {};
                  }
              }
          }
          var sel = selector() || [];
          var decls = settings.preserveStatic ? declarations() : declarations().filter((function(decl) {
              var hasVarDecl = sel.some((function(s) {
                  return /:(?:root|host)(?![.:#(])/.test(s);
              })) && /^--\S/.test(decl.property);
              var hasVarFunc = /var\(/.test(decl.value);
              return hasVarDecl || hasVarFunc;
          }));
          if (!sel.length) {
              error("selector missing");
          }
          return {
              type: "rule",
              selectors: sel,
              declarations: decls
          };
      }
      function rules(core) {
          if (!core && !open()) {
              return error("missing '{'");
          }
          var node;
          var rules = comments();
          while (css.length && (core || css[0] !== "}") && (node = at_rule() || rule())) {
              if (node.type) {
                  rules.push(node);
              }
              rules = rules.concat(comments());
          }
          if (!core && !close()) {
              return error("missing '}'");
          }
          return rules;
      }
      return {
          type: "stylesheet",
          stylesheet: {
              rules: rules(true),
              errors: errors
          }
      };
  }

  function parseVars(cssData) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var defaults = {
          parseHost: false,
          store: {},
          onWarning: function onWarning() {}
      };
      var settings = _extends({}, defaults, options);
      var reVarDeclSelectors = new RegExp(":".concat(settings.parseHost ? "host" : "root", "$"));
      if (typeof cssData === "string") {
          cssData = parseCss(cssData, settings);
      }
      cssData.stylesheet.rules.forEach((function(rule) {
          if (rule.type !== "rule" || !rule.selectors.some((function(s) {
              return reVarDeclSelectors.test(s);
          }))) {
              return;
          }
          rule.declarations.forEach((function(decl, i) {
              var prop = decl.property;
              var value = decl.value;
              if (prop && prop.indexOf("--") === 0) {
                  settings.store[prop] = value;
              }
          }));
      }));
      return settings.store;
  }

  function stringifyCss(tree) {
      var delim = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
      var cb = arguments.length > 2 ? arguments[2] : undefined;
      var renderMethods = {
          charset: function charset(node) {
              return "@charset " + node.name + ";";
          },
          comment: function comment(node) {
              return node.comment.indexOf("__CSSVARSPONYFILL") === 0 ? "/*" + node.comment + "*/" : "";
          },
          "custom-media": function customMedia(node) {
              return "@custom-media " + node.name + " " + node.media + ";";
          },
          declaration: function declaration(node) {
              return node.property + ":" + node.value + ";";
          },
          document: function document(node) {
              return "@" + (node.vendor || "") + "document " + node.document + "{" + visit(node.rules) + "}";
          },
          "font-face": function fontFace(node) {
              return "@font-face" + "{" + visit(node.declarations) + "}";
          },
          host: function host(node) {
              return "@host" + "{" + visit(node.rules) + "}";
          },
          import: function _import(node) {
              return "@import " + node.name + ";";
          },
          keyframe: function keyframe(node) {
              return node.values.join(",") + "{" + visit(node.declarations) + "}";
          },
          keyframes: function keyframes(node) {
              return "@" + (node.vendor || "") + "keyframes " + node.name + "{" + visit(node.keyframes) + "}";
          },
          media: function media(node) {
              return "@media " + node.media + "{" + visit(node.rules) + "}";
          },
          namespace: function namespace(node) {
              return "@namespace " + node.name + ";";
          },
          page: function page(node) {
              return "@page " + (node.selectors.length ? node.selectors.join(", ") : "") + "{" + visit(node.declarations) + "}";
          },
          "page-margin-box": function pageMarginBox(node) {
              return "@" + node.name + "{" + visit(node.declarations) + "}";
          },
          rule: function rule(node) {
              var decls = node.declarations;
              if (decls.length) {
                  return node.selectors.join(",") + "{" + visit(decls) + "}";
              }
          },
          supports: function supports(node) {
              return "@supports " + node.supports + "{" + visit(node.rules) + "}";
          }
      };
      function visit(nodes) {
          var buf = "";
          for (var i = 0; i < nodes.length; i++) {
              var n = nodes[i];
              if (cb) {
                  cb(n);
              }
              var txt = renderMethods[n.type](n);
              if (txt) {
                  buf += txt;
                  if (txt.length && n.selectors) {
                      buf += delim;
                  }
              }
          }
          return buf;
      }
      return visit(tree.stylesheet.rules);
  }

  function walkCss(node, fn) {
      node.rules.forEach((function(rule) {
          if (rule.rules) {
              walkCss(rule, fn);
              return;
          }
          if (rule.keyframes) {
              rule.keyframes.forEach((function(keyframe) {
                  if (keyframe.type === "keyframe") {
                      fn(keyframe.declarations, rule);
                  }
              }));
              return;
          }
          if (!rule.declarations) {
              return;
          }
          fn(rule.declarations, node);
      }));
  }

  var VAR_PROP_IDENTIFIER = "--";

  var VAR_FUNC_IDENTIFIER = "var";

  function transformCss(cssData) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var defaults = {
          preserveStatic: true,
          preserveVars: false,
          variables: {},
          onWarning: function onWarning() {}
      };
      var settings = _extends({}, defaults, options);
      if (typeof cssData === "string") {
          cssData = parseCss(cssData, settings);
      }
      walkCss(cssData.stylesheet, (function(declarations, node) {
          for (var i = 0; i < declarations.length; i++) {
              var decl = declarations[i];
              var type = decl.type;
              var prop = decl.property;
              var value = decl.value;
              if (type !== "declaration") {
                  continue;
              }
              if (!settings.preserveVars && prop && prop.indexOf(VAR_PROP_IDENTIFIER) === 0) {
                  declarations.splice(i, 1);
                  i--;
                  continue;
              }
              if (value.indexOf(VAR_FUNC_IDENTIFIER + "(") !== -1) {
                  var resolvedValue = resolveValue(value, settings);
                  if (resolvedValue !== decl.value) {
                      resolvedValue = fixNestedCalc(resolvedValue);
                      if (!settings.preserveVars) {
                          decl.value = resolvedValue;
                      } else {
                          declarations.splice(i, 0, {
                              type: type,
                              property: prop,
                              value: resolvedValue
                          });
                          i++;
                      }
                  }
              }
          }
      }));
      return stringifyCss(cssData);
  }

  function fixNestedCalc(value) {
      var reCalcVal = /calc\(([^)]+)\)/g;
      (value.match(reCalcVal) || []).forEach((function(match) {
          var newVal = "calc".concat(match.split("calc").join(""));
          value = value.replace(match, newVal);
      }));
      return value;
  }

  function resolveValue(value) {
      var settings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var __recursiveFallback = arguments.length > 2 ? arguments[2] : undefined;
      if (value.indexOf("var(") === -1) {
          return value;
      }
      var valueData = balancedMatch("(", ")", value);
      function resolveFunc(value) {
          var name = value.split(",")[0].replace(/[\s\n\t]/g, "");
          var fallback = (value.match(/(?:\s*,\s*){1}(.*)?/) || [])[1];
          var match = Object.prototype.hasOwnProperty.call(settings.variables, name) ? String(settings.variables[name]) : undefined;
          var replacement = match || (fallback ? String(fallback) : undefined);
          var unresolvedFallback = __recursiveFallback || value;
          if (!match) {
              settings.onWarning('variable "'.concat(name, '" is undefined'));
          }
          if (replacement && replacement !== "undefined" && replacement.length > 0) {
              return resolveValue(replacement, settings, unresolvedFallback);
          } else {
              return "var(".concat(unresolvedFallback, ")");
          }
      }
      if (!valueData) {
          if (value.indexOf("var(") !== -1) {
              settings.onWarning('missing closing ")" in the value "'.concat(value, '"'));
          }
          return value;
      } else if (valueData.pre.slice(-3) === "var") {
          var isEmptyVarFunc = valueData.body.trim().length === 0;
          if (isEmptyVarFunc) {
              settings.onWarning("var() must contain a non-whitespace string");
              return value;
          } else {
              return valueData.pre.slice(0, -3) + resolveFunc(valueData.body) + resolveValue(valueData.post, settings);
          }
      } else {
          return valueData.pre + "(".concat(resolveValue(valueData.body, settings), ")") + resolveValue(valueData.post, settings);
      }
  }

  var isBrowser = typeof window !== "undefined";

  var isNativeSupport = isBrowser && window.CSS && window.CSS.supports && window.CSS.supports("(--a: 0)");

  var counters = {
      group: 0,
      job: 0
  };

  var defaults = {
      rootElement: isBrowser ? document : null,
      shadowDOM: false,
      include: "style,link[rel=stylesheet]",
      exclude: "",
      variables: {},
      onlyLegacy: true,
      preserveStatic: true,
      preserveVars: false,
      silent: false,
      updateDOM: true,
      updateURLs: true,
      watch: null,
      onBeforeSend: function onBeforeSend() {},
      onError: function onError() {},
      onWarning: function onWarning() {},
      onSuccess: function onSuccess() {},
      onComplete: function onComplete() {},
      onFinally: function onFinally() {}
  };

  var regex = {
      cssComments: /\/\*[\s\S]+?\*\//g,
      cssKeyframes: /@(?:-\w*-)?keyframes/,
      cssMediaQueries: /@media[^{]+\{([\s\S]+?})\s*}/g,
      cssUrls: /url\((?!['"]?(?:data|http|\/\/):)['"]?([^'")]*)['"]?\)/g,
      cssVarDeclRules: /(?::(?:root|host)(?![.:#(])[\s,]*[^{]*{\s*[^}]*})/g,
      cssVarDecls: /(?:[\s;]*)(-{2}\w[\w-]*)(?:\s*:\s*)([^;]*);/g,
      cssVarFunc: /var\(\s*--[\w-]/,
      cssVars: /(?:(?::(?:root|host)(?![.:#(])[\s,]*[^{]*{\s*[^;]*;*\s*)|(?:var\(\s*))(--[^:)]+)(?:\s*[:)])/
  };

  var variableStore = {
      dom: {},
      job: {},
      user: {}
  };

  var cssVarsIsRunning = false;

  var cssVarsObserver = null;

  var cssVarsSrcNodeCount = 0;

  var debounceTimer = null;

  var isShadowDOMReady = false;

  /**
   * Fetches, parses, and transforms CSS custom properties from specified
   * <style> and <link> elements into static values, then appends a new <style>
   * element with static values to the DOM to provide CSS custom property
   * compatibility for legacy browsers. Also provides a single interface for
   * live updates of runtime values in both modern and legacy browsers.
   *
   * @preserve
   * @param {object}   [options] Options object
   * @param {object}   [options.rootElement=document] Root element to traverse for
   *                   <link> and <style> nodes
   * @param {boolean}  [options.shadowDOM=false] Determines if shadow DOM <link>
   *                   and <style> nodes will be processed.
   * @param {string}   [options.include="style,link[rel=stylesheet]"] CSS selector
   *                   matching <link re="stylesheet"> and <style> nodes to
   *                   process
   * @param {string}   [options.exclude] CSS selector matching <link
   *                   rel="stylehseet"> and <style> nodes to exclude from those
   *                   matches by options.include
   * @param {object}   [options.variables] A map of custom property name/value
   *                   pairs. Property names can omit or include the leading
   *                   double-hyphen (—), and values specified will override
   *                   previous values
   * @param {boolean}  [options.onlyLegacy=true] Determines if the ponyfill will
   *                   only generate legacy-compatible CSS in browsers that lack
   *                   native support (i.e., legacy browsers)
   * @param {boolean}  [options.preserveStatic=true] Determines if CSS
   *                   declarations that do not reference a custom property will
   *                   be preserved in the transformed CSS
   * @param {boolean}  [options.preserveVars=false] Determines if CSS custom
   *                   property declarations will be preserved in the transformed
   *                   CSS
   * @param {boolean}  [options.silent=false] Determines if warning and error
   *                   messages will be displayed on the console
   * @param {boolean}  [options.updateDOM=true] Determines if the ponyfill will
   *                   update the DOM after processing CSS custom properties
   * @param {boolean}  [options.updateURLs=true] Determines if the ponyfill will
   *                   convert relative url() paths to absolute urls
   * @param {boolean}  [options.watch=false] Determines if a MutationObserver will
   *                   be created that will execute the ponyfill when a <link> or
   *                   <style> DOM mutation is observed
   * @param {function} [options.onBeforeSend] Callback before XHR is sent. Passes
   *                   1) the XHR object, 2) source node reference, and 3) the
   *                   source URL as arguments
   * @param {function} [options.onError] Callback after a CSS parsing error has
   *                   occurred or an XHR request has failed. Passes 1) an error
   *                   message, and 2) source node reference, 3) xhr, and 4 url as
   *                   arguments.
   * @param {function} [options.onWarning] Callback after each CSS parsing warning
   *                   has occurred. Passes 1) a warning message as an argument.
   * @param {function} [options.onSuccess] Callback after CSS data has been
   *                   collected from each node and before CSS custom properties
   *                   have been transformed. Allows modifying the CSS data before
   *                   it is transformed by returning any string value (or false
   *                   to skip). Passes 1) CSS text, 2) source node reference, and
   *                   3) the source URL as arguments.
   * @param {function} [options.onComplete] Callback after all CSS has been
   *                   processed, legacy-compatible CSS has been generated, and
   *                   (optionally) the DOM has been updated. Passes 1) a CSS
   *                   string with CSS variable values resolved, 2) an array of
   *                   output <style> node references that have been appended to
   *                   the DOM, 3) an object containing all custom properies names
   *                   and values, and 4) the ponyfill execution time in
   *                   milliseconds.
   * @param {function} [options.onFinally] Callback in modern and legacy browsers
   *                   after the ponyfill has finished all tasks. Passes 1) a
   *                   boolean indicating if the last ponyfill call resulted in a
   *                   style change, 2) a boolean indicating if the current
   *                   browser provides native support for CSS custom properties,
   *                   and 3) the ponyfill execution time in milliseconds.
   * @example
   *
   *   cssVars({
   *     rootElement   : document,
   *     shadowDOM     : false,
   *     include       : 'style,link[rel="stylesheet"]',
   *     exclude       : '',
   *     variables     : {},
   *     onlyLegacy    : true,
   *     preserveStatic: true,
   *     preserveVars  : false,
   *     silent        : false,
   *     updateDOM     : true,
   *     updateURLs    : true,
   *     watch         : false,
   *     onBeforeSend(xhr, node, url) {},
   *     onError(message, node, xhr, url) {},
   *     onWarning(message) {},
   *     onSuccess(cssText, node, url) {},
   *     onComplete(cssText, styleNode, cssVariables, benchmark) {},
   *     onFinally(hasChanged, hasNativeSupport, benchmark)
   *   });
   */ function cssVars() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var msgPrefix = "cssVars(): ";
      var settings = _extends({}, defaults, options);
      function handleError(message, sourceNode, xhr, url) {
          if (!settings.silent && window.console) {
              console.error("".concat(msgPrefix).concat(message, "\n"), sourceNode);
          }
          settings.onError(message, sourceNode, xhr, url);
      }
      function handleWarning(message) {
          if (!settings.silent && window.console) {
              console.warn("".concat(msgPrefix).concat(message));
          }
          settings.onWarning(message);
      }
      function handleFinally(hasChanged) {
          settings.onFinally(Boolean(hasChanged), isNativeSupport, getTimeStamp() - settings.__benchmark);
      }
      if (!isBrowser) {
          return;
      }
      if (settings.watch) {
          settings.watch = defaults.watch;
          addMutationObserver(settings);
          cssVars(settings);
          return;
      } else if (settings.watch === false && cssVarsObserver) {
          cssVarsObserver.disconnect();
          cssVarsObserver = null;
      }
      if (!settings.__benchmark) {
          if (cssVarsIsRunning === settings.rootElement) {
              cssVarsDebounced(options);
              return;
          }
          settings.__benchmark = getTimeStamp();
          settings.exclude = [ cssVarsObserver ? '[data-cssvars]:not([data-cssvars=""])' : '[data-cssvars="out"]', settings.exclude ].filter((function(selector) {
              return selector;
          })).join(",");
          settings.variables = fixVarNames(settings.variables);
          if (!cssVarsObserver) {
              var outNodes = Array.apply(null, settings.rootElement.querySelectorAll('[data-cssvars="out"]'));
              outNodes.forEach((function(outNode) {
                  var dataGroup = outNode.getAttribute("data-cssvars-group");
                  var srcNode = dataGroup ? settings.rootElement.querySelector('[data-cssvars="src"][data-cssvars-group="'.concat(dataGroup, '"]')) : null;
                  if (!srcNode) {
                      outNode.parentNode.removeChild(outNode);
                  }
              }));
              if (cssVarsSrcNodeCount) {
                  var srcNodes = settings.rootElement.querySelectorAll('[data-cssvars]:not([data-cssvars="out"])');
                  if (srcNodes.length < cssVarsSrcNodeCount) {
                      cssVarsSrcNodeCount = srcNodes.length;
                      variableStore.dom = {};
                  }
              }
          }
      }
      if (document.readyState !== "loading") {
          if (isNativeSupport && settings.onlyLegacy) {
              var hasVarChange = false;
              if (settings.updateDOM) {
                  var targetElm = settings.rootElement.host || (settings.rootElement === document ? document.documentElement : settings.rootElement);
                  Object.keys(settings.variables).forEach((function(key) {
                      var varValue = settings.variables[key];
                      hasVarChange = hasVarChange || varValue !== getComputedStyle(targetElm).getPropertyValue(key);
                      targetElm.style.setProperty(key, varValue);
                  }));
              }
              handleFinally(hasVarChange);
          } else if (!isShadowDOMReady && (settings.shadowDOM || settings.rootElement.shadowRoot || settings.rootElement.host)) {
              getCssData({
                  rootElement: defaults.rootElement,
                  include: defaults.include,
                  exclude: settings.exclude,
                  skipDisabled: false,
                  onSuccess: function onSuccess(cssText, node, url) {
                      cssText = cssText.replace(regex.cssComments, "").replace(regex.cssMediaQueries, "");
                      cssText = (cssText.match(regex.cssVarDeclRules) || []).join("");
                      return cssText || false;
                  },
                  onComplete: function onComplete(cssText, cssArray, nodeArray) {
                      parseVars(cssText, {
                          store: variableStore.dom,
                          onWarning: handleWarning
                      });
                      isShadowDOMReady = true;
                      cssVars(settings);
                  }
              });
          } else {
              cssVarsIsRunning = settings.rootElement;
              getCssData({
                  rootElement: settings.rootElement,
                  include: settings.include,
                  exclude: settings.exclude,
                  skipDisabled: false,
                  onBeforeSend: settings.onBeforeSend,
                  onError: function onError(xhr, node, url) {
                      var responseUrl = xhr.responseURL || getFullUrl$1(url, location.href);
                      var statusText = xhr.statusText ? "(".concat(xhr.statusText, ")") : "Unspecified Error" + (xhr.status === 0 ? " (possibly CORS related)" : "");
                      var errorMsg = "CSS XHR Error: ".concat(responseUrl, " ").concat(xhr.status, " ").concat(statusText);
                      handleError(errorMsg, node, xhr, responseUrl);
                  },
                  onSuccess: function onSuccess(cssText, node, url) {
                      var returnVal = settings.onSuccess(cssText, node, url);
                      cssText = returnVal !== undefined && Boolean(returnVal) === false ? "" : returnVal || cssText;
                      if (settings.updateURLs) {
                          cssText = fixRelativeCssUrls(cssText, url);
                      }
                      return cssText;
                  },
                  onComplete: function onComplete(cssText, cssArray) {
                      var nodeArray = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
                      var currentVars = _extends({}, variableStore.dom, variableStore.user);
                      var hasVarChange = false;
                      variableStore.job = {};
                      nodeArray.forEach((function(node, i) {
                          var nodeCSS = cssArray[i];
                          if (regex.cssVars.test(nodeCSS)) {
                              try {
                                  var cssTree = parseCss(nodeCSS, {
                                      preserveStatic: settings.preserveStatic,
                                      removeComments: true
                                  });
                                  parseVars(cssTree, {
                                      parseHost: Boolean(settings.rootElement.host),
                                      store: variableStore.dom,
                                      onWarning: handleWarning
                                  });
                                  node.__cssVars = {
                                      tree: cssTree
                                  };
                              } catch (err) {
                                  handleError(err.message, node);
                              }
                          }
                      }));
                      _extends(variableStore.job, variableStore.dom);
                      if (settings.updateDOM) {
                          _extends(variableStore.user, settings.variables);
                          _extends(variableStore.job, variableStore.user);
                      } else {
                          _extends(variableStore.job, variableStore.user, settings.variables);
                          _extends(currentVars, settings.variables);
                      }
                      hasVarChange = counters.job > 0 && Boolean(Object.keys(variableStore.job).length > Object.keys(currentVars).length || Boolean(Object.keys(currentVars).length && Object.keys(variableStore.job).some((function(key) {
                          return variableStore.job[key] !== currentVars[key];
                      }))));
                      if (hasVarChange) {
                          resetCssNodes(settings.rootElement);
                          cssVars(settings);
                      } else {
                          var outCssArray = [];
                          var outNodeArray = [];
                          var hasKeyframesWithVars = false;
                          if (settings.updateDOM) {
                              counters.job++;
                          }
                          nodeArray.forEach((function(node, i) {
                              var isSkip = !node.__cssVars;
                              if (node.__cssVars) {
                                  try {
                                      transformCss(node.__cssVars.tree, _extends({}, settings, {
                                          variables: variableStore.job,
                                          onWarning: handleWarning
                                      }));
                                      var outCss = stringifyCss(node.__cssVars.tree);
                                      if (settings.updateDOM) {
                                          var nodeCSS = cssArray[i];
                                          var hasCSSVarFunc = regex.cssVarFunc.test(nodeCSS);
                                          if (!node.getAttribute("data-cssvars")) {
                                              node.setAttribute("data-cssvars", "src");
                                          }
                                          if (outCss.length && hasCSSVarFunc) {
                                              var dataGroup = node.getAttribute("data-cssvars-group") || ++counters.group;
                                              var outCssNoSpaces = outCss.replace(/\s/g, "");
                                              var outNode = settings.rootElement.querySelector('[data-cssvars="out"][data-cssvars-group="'.concat(dataGroup, '"]')) || document.createElement("style");
                                              hasKeyframesWithVars = hasKeyframesWithVars || regex.cssKeyframes.test(outCss);
                                              if (settings.preserveStatic) {
                                                  node.sheet.disabled = true;
                                              }
                                              if (!outNode.hasAttribute("data-cssvars")) {
                                                  outNode.setAttribute("data-cssvars", "out");
                                              }
                                              if (outCssNoSpaces === node.textContent.replace(/\s/g, "")) {
                                                  isSkip = true;
                                                  if (outNode && outNode.parentNode) {
                                                      node.removeAttribute("data-cssvars-group");
                                                      outNode.parentNode.removeChild(outNode);
                                                  }
                                              } else if (outCssNoSpaces !== outNode.textContent.replace(/\s/g, "")) {
                                                  [ node, outNode ].forEach((function(n) {
                                                      n.setAttribute("data-cssvars-job", counters.job);
                                                      n.setAttribute("data-cssvars-group", dataGroup);
                                                  }));
                                                  outNode.textContent = outCss;
                                                  outCssArray.push(outCss);
                                                  outNodeArray.push(outNode);
                                                  if (!outNode.parentNode) {
                                                      node.parentNode.insertBefore(outNode, node.nextSibling);
                                                  }
                                              }
                                          }
                                      } else {
                                          if (node.textContent.replace(/\s/g, "") !== outCss) {
                                              outCssArray.push(outCss);
                                          }
                                      }
                                  } catch (err) {
                                      handleError(err.message, node);
                                  }
                              }
                              if (isSkip) {
                                  node.setAttribute("data-cssvars", "skip");
                              }
                              if (!node.hasAttribute("data-cssvars-job")) {
                                  node.setAttribute("data-cssvars-job", counters.job);
                              }
                          }));
                          cssVarsSrcNodeCount = settings.rootElement.querySelectorAll('[data-cssvars]:not([data-cssvars="out"])').length;
                          if (settings.shadowDOM) {
                              var elms = [ settings.rootElement ].concat(_toConsumableArray$1(settings.rootElement.querySelectorAll("*")));
                              for (var i = 0, elm; elm = elms[i]; ++i) {
                                  if (elm.shadowRoot && elm.shadowRoot.querySelector("style")) {
                                      var shadowSettings = _extends({}, settings, {
                                          rootElement: elm.shadowRoot
                                      });
                                      cssVars(shadowSettings);
                                  }
                              }
                          }
                          if (settings.updateDOM && hasKeyframesWithVars) {
                              fixKeyframes(settings.rootElement);
                          }
                          cssVarsIsRunning = false;
                          settings.onComplete(outCssArray.join(""), outNodeArray, JSON.parse(JSON.stringify(variableStore.job)), getTimeStamp() - settings.__benchmark);
                          handleFinally(outNodeArray.length);
                      }
                  }
              });
          }
      } else {
          document.addEventListener("DOMContentLoaded", (function init(evt) {
              cssVars(options);
              document.removeEventListener("DOMContentLoaded", init);
          }));
      }
  }

  cssVars.reset = function() {
      counters.job = 0;
      counters.group = 0;
      cssVarsIsRunning = false;
      if (cssVarsObserver) {
          cssVarsObserver.disconnect();
          cssVarsObserver = null;
      }
      cssVarsSrcNodeCount = 0;
      debounceTimer = null;
      isShadowDOMReady = false;
      for (var prop in variableStore) {
          variableStore[prop] = {};
      }
  };

  function addMutationObserver(settings) {
      function isDisabled(node) {
          var isDisabledAttr = node.hasAttribute("disabled");
          var isDisabledSheet = (node.sheet || {}).disabled;
          return isDisabledAttr || isDisabledSheet;
      }
      function isLink(node) {
          var isStylesheet = node.tagName === "LINK" && (node.getAttribute("rel") || "").indexOf("stylesheet") !== -1;
          return isStylesheet && !isDisabled(node);
      }
      function isStyle(node) {
          return node.tagName === "STYLE" && !isDisabled(node);
      }
      function isValidAddMutation(mutationNodes) {
          return Array.apply(null, mutationNodes).some((function(node) {
              var isElm = node.nodeType === 1;
              var hasAttr = isElm && node.hasAttribute("data-cssvars");
              var isStyleWithVars = isStyle(node) && regex.cssVars.test(node.textContent);
              var isValid = !hasAttr && (isLink(node) || isStyleWithVars);
              return isValid;
          }));
      }
      function isValidRemoveMutation(mutationNodes) {
          return Array.apply(null, mutationNodes).some((function(node) {
              var isElm = node.nodeType === 1;
              var isOutNode = isElm && node.getAttribute("data-cssvars") === "out";
              var isSrcNode = isElm && node.getAttribute("data-cssvars") === "src";
              var isValid = isSrcNode;
              if (isSrcNode || isOutNode) {
                  var dataGroup = node.getAttribute("data-cssvars-group");
                  var orphanNode = settings.rootElement.querySelector('[data-cssvars-group="'.concat(dataGroup, '"]'));
                  if (isSrcNode) {
                      resetCssNodes(settings.rootElement);
                      variableStore.dom = {};
                  }
                  if (orphanNode) {
                      orphanNode.parentNode.removeChild(orphanNode);
                  }
              }
              return isValid;
          }));
      }
      if (!window.MutationObserver) {
          return;
      }
      if (cssVarsObserver) {
          cssVarsObserver.disconnect();
          cssVarsObserver = null;
      }
      cssVarsObserver = new MutationObserver((function(mutations) {
          var hasValidMutation = mutations.some((function(mutation) {
              var isValid = false;
              if (mutation.type === "attributes") {
                  isValid = isLink(mutation.target);
              } else if (mutation.type === "childList") {
                  isValid = isValidAddMutation(mutation.addedNodes) || isValidRemoveMutation(mutation.removedNodes);
              }
              return isValid;
          }));
          if (hasValidMutation) {
              cssVars(settings);
          }
      }));
      cssVarsObserver.observe(document.documentElement, {
          attributes: true,
          attributeFilter: [ "disabled", "href" ],
          childList: true,
          subtree: true
      });
  }

  function cssVarsDebounced(settings) {
      var delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100;
      clearTimeout(debounceTimer);
      debounceTimer = setTimeout((function() {
          settings.__benchmark = null;
          cssVars(settings);
      }), delay);
  }

  function fixKeyframes(rootElement) {
      var animationNameProp = [ "animation-name", "-moz-animation-name", "-webkit-animation-name" ].filter((function(prop) {
          return getComputedStyle(document.body)[prop];
      }))[0];
      if (animationNameProp) {
          var allNodes = rootElement.getElementsByTagName("*");
          var keyframeNodes = [];
          var nameMarker = "__CSSVARSPONYFILL-KEYFRAMES__";
          for (var i = 0, len = allNodes.length; i < len; i++) {
              var node = allNodes[i];
              var animationName = getComputedStyle(node)[animationNameProp];
              if (animationName !== "none") {
                  node.style[animationNameProp] += nameMarker;
                  keyframeNodes.push(node);
              }
          }
          void document.body.offsetHeight;
          for (var _i = 0, _len = keyframeNodes.length; _i < _len; _i++) {
              var nodeStyle = keyframeNodes[_i].style;
              nodeStyle[animationNameProp] = nodeStyle[animationNameProp].replace(nameMarker, "");
          }
      }
  }

  function fixRelativeCssUrls(cssText, baseUrl) {
      var cssUrls = cssText.replace(regex.cssComments, "").match(regex.cssUrls) || [];
      cssUrls.forEach((function(cssUrl) {
          var oldUrl = cssUrl.replace(regex.cssUrls, "$1");
          var newUrl = getFullUrl$1(oldUrl, baseUrl);
          cssText = cssText.replace(cssUrl, cssUrl.replace(oldUrl, newUrl));
      }));
      return cssText;
  }

  function fixVarNames() {
      var varObj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var reLeadingHyphens = /^-{2}/;
      return Object.keys(varObj).reduce((function(obj, value) {
          var key = reLeadingHyphens.test(value) ? value : "--".concat(value.replace(/^-+/, ""));
          obj[key] = varObj[value];
          return obj;
      }), {});
  }

  function getFullUrl$1(url) {
      var base = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : location.href;
      var d = document.implementation.createHTMLDocument("");
      var b = d.createElement("base");
      var a = d.createElement("a");
      d.head.appendChild(b);
      d.body.appendChild(a);
      b.href = base;
      a.href = url;
      return a.href;
  }

  function getTimeStamp() {
      return isBrowser && (window.performance || {}).now ? window.performance.now() : (new Date).getTime();
  }

  function resetCssNodes(rootElement) {
      var resetNodes = Array.apply(null, rootElement.querySelectorAll('[data-cssvars="skip"],[data-cssvars="src"]'));
      resetNodes.forEach((function(node) {
          return node.setAttribute("data-cssvars", "");
      }));
  }

  /** @module DOM */

  /* global HTMLElement, HTMLDocument, Window, Element */
  var document$1 = window.document;
  /**
   * Static interface for interacting with the DOM API.
   * @namespace
   */

  var DOM =
  /*#__PURE__*/
  function () {
    function DOM() {
      _classCallCheck(this, DOM);
    }

    _createClass(DOM, null, [{
      key: "setup",
      value: function setup(d, p) {
        document$1 = d;
      }
      /**
       * create a HTMLElement from and HTML string
       * @param {string} html The HTML to parse to a DOM node.
       * @return {HTMLElement}
       */

    }, {
      key: "create",
      value: function create(html) {
        if ('createRange' in document$1) {
          // prefer this implementation as it has wider browser support
          // and it's better performing.
          // see https://davidwalsh.name/convert-html-stings-dom-nodes
          var container = document$1.createElement('div');
          var frag = document$1.createRange().createContextualFragment(html);
          container.appendChild(frag);
          return container;
        } // fallback to this because of a bug in jsdom that causes tests to fail
        // see: https://github.com/jsdom/jsdom/issues/399


        return new DOMParser().parseFromString(html, 'text/html').body;
      }
      /**
       * query the DOM for a given css selector
       * @param {HTMLElement} parent Optional context to use for a search. Defaults to document if not provided.
       * @param {string} selector the CSS selector to query for
       *
       * @returns {HTMLElement} the FIRST node it finds, if any
       */

    }, {
      key: "query",
      value: function query(parent, selector) {
        // Facade, shifting the selector to the parent argument if only one
        // argument is provided
        if (selector === undefined) {
          selector = parent;
          parent = document$1;
        }

        if (selector instanceof HTMLElement || selector instanceof Window || selector instanceof HTMLDocument) {
          return selector;
        }

        return parent.querySelector(selector);
      }
      /**
       * query the DOM for a given css selector
       * @param {HTMLElement} parent Optional context to use for a search. Defaults to document if not provided.
       * @param {string} selector the CSS selector to query for
       *
       * @returns {Array} the FIRST node it finds, if any
       */

    }, {
      key: "queryAll",
      value: function queryAll(parent, selector) {
        // Facade, shifting the selector to the parent argument if only one
        // argument is provided
        if (selector === undefined) {
          selector = parent;
          parent = document$1;
        } // handle the case where client code is using a pointer to a dom node and it's null, e.g. this._container


        if (parent == null) {
          parent = document$1;
        }

        if (selector instanceof HTMLElement || selector instanceof HTMLDocument || selector instanceof Window) {
          return [selector];
        }

        return Array.from(parent.querySelectorAll(selector));
      }
    }, {
      key: "onReady",
      value: function onReady(cb) {
        if (document$1.readyState === 'complete' || document$1.readyState === 'loaded' || document$1.readyState === 'interactive') {
          cb();
          return;
        }

        DOM.on(document$1, 'DOMContentLoaded', cb);
      }
      /**
       * createEle will create a {HTMLElement} and apply the properties attributes through an object provided.
       * @param {string} el The element `tag` name to construct
       * @param {Object} opts_data Optional attributes to apply to the new HTMLElement
       */

    }, {
      key: "createEl",
      value: function createEl(el) {
        var opts_data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var node = document$1.createElement(el);
        var props = Object.keys(opts_data);

        for (var i = 0; i < props.length; i++) {
          if (props[i] === 'class') {
            DOM.addClass(node, opts_data[props[i]]);
            continue;
          }

          node[props[i]] = opts_data[props[i]];
        }

        return node;
      }
    }, {
      key: "append",
      value: function append(parent, node) {
        if (node === undefined) {
          node = parent;
          parent = document$1;
        }

        if (typeof parent === 'string') {
          parent = DOM.query(parent);
        } // Support HTML injection as well as HTMLElement appends


        if (typeof node === 'string') {
          parent.insertAdjacentHTML('afterBegin', node);
        } else {
          parent.appendChild(node);
        }
      }
    }, {
      key: "addClass",
      value: function addClass(node, className) {
        if (!node) {
          return;
        }

        var classes = className.split(',');
        var len = classes.length;

        for (var i = 0; i < len; i++) {
          node.classList.add(classes[i]);
        }
      }
    }, {
      key: "empty",
      value: function empty(parent) {
        parent.innerHTML = '';
      }
    }, {
      key: "css",
      value: function css(selector, styles) {
        var node = DOM.query(selector);

        for (var prop in styles) {
          node.style[prop] = styles[prop];
        }
      }
    }, {
      key: "attr",
      value: function attr(selector, _attr, val) {
        DOM.query(selector).setAttribute(_attr, val);
      }
    }, {
      key: "attributes",
      value: function attributes(selector, attrs) {
        var _this = this;

        Object.entries(attrs).forEach(function (_ref) {
          var _ref2 = _slicedToArray(_ref, 2),
              attr = _ref2[0],
              val = _ref2[1];

          return _this.attr(selector, attr, val);
        });
      }
    }, {
      key: "trigger",
      value: function trigger(selector, event, settings) {
        var e = DOM._customEvent(event, settings);

        DOM.query(selector).dispatchEvent(e);
      } // TODO (agrow) investigate removing this
      // Event constructor polyfill

    }, {
      key: "_customEvent",
      value: function _customEvent(event, settings) {
        var _settings = _objectSpread({
          bubbles: true,
          cancelable: true,
          detail: null
        }, settings);

        var evt = document$1.createEvent('CustomEvent');
        evt.initCustomEvent(event, _settings.bubbles, _settings.cancelable, _settings.detail);
        return evt;
      }
    }, {
      key: "on",
      value: function on(selector, evt, handler) {
        DOM.query(selector).addEventListener(evt, handler);
      }
    }, {
      key: "once",
      value: function once(selector, evt, handler) {
        DOM.query(selector).addEventListener(evt, handler, {
          once: true
        });
      }
    }, {
      key: "off",
      value: function off(selector, evt, handler) {
        DOM.query(selector).removeEventListener(evt, handler);
      }
    }, {
      key: "delegate",
      value: function delegate(ctxt, selector, evt, handler) {
        var el = DOM.query(ctxt);
        el.addEventListener(evt, function (event) {
          var target = event.target;

          while (!target.isEqualNode(el)) {
            if (DOM.matches(target, selector)) {
              handler(event, target);
              break;
            }

            target = target.parentNode;
          }
        });
      } // TODO (agrow) investigate removing this
      // Element.matches polyfill

    }, {
      key: "matches",
      value: function matches(element, potentialMatch) {
        if (Element.prototype.matches) {
          return element.matches(potentialMatch);
        }

        if (Element.prototype.msMatchesSelector) {
          return element.msMatchesSelector(potentialMatch);
        }

        if (Element.prototype.webkitMatchesSelector) {
          return element.webkitMatchesSelector(potentialMatch);
        }
      }
    }]);

    return DOM;
  }();

  /** @module SearchParams */

  /* global window */

  /**
   * SearchParams is a class to get the search params in a URL.
   * It is a replacement for URL.searchParams and URLSearchParams for browsers like IE11
   */
  var SearchParams =
  /*#__PURE__*/
  function () {
    function SearchParams(url) {
      _classCallCheck(this, SearchParams);

      /**
       * Mapping of all query parameters in the given url, query param -> value
       * Only used if URLSearchParams does not exist in the window
       * @type {Object}
       * @private
       */
      this._params = {};

      if (window && window.URLSearchParams) {
        return new URLSearchParams(url);
      } else {
        this._params = this.parse(url);
      }
    }
    /**
     * parse creates a mapping of all query params in a given url
     * The query param values are decoded before being put in the map
     * Three types of input are supported
     *   (1) full URL e.g. http://www.yext.com/?q=hello
     *   (2) params with ? e.g. ?q=hello
     *   (1) params without ? e.g. q=hello
     * @param {string} url The url
     * @returns {Object} mapping from query param -> value where value is '' if no value is provided
     */


    _createClass(SearchParams, [{
      key: "parse",
      value: function parse(url) {
        var params = {};
        var search = url;

        if (search === '') {
          return params;
        } // Normalize all url inputs to string of query params separated by &


        if (url.indexOf('?') > -1) {
          search = url.slice(url.indexOf('?') + 1);
        }

        var encodedParams = search.split('&');

        for (var i = 0; i < encodedParams.length; i++) {
          var keyVal = encodedParams[i].split('=');

          if (keyVal.length > 1) {
            params[keyVal[0]] = SearchParams.decode(keyVal[1]);
          } else {
            params[keyVal[0]] = '';
          }
        }

        return params;
      }
      /**
       * get returns the value of the given query param
       * @param {string} query the query param key to get the value of
       * @return {string} param value, null otherwise
       */

    }, {
      key: "get",
      value: function get(query) {
        if (typeof this._params[String(query)] === 'undefined') {
          return null;
        }

        return this._params[query];
      }
      /**
       * set changes the value of a given query param
       * @param {string} name the query param key
       * @param {string} value the value of the query param update with
       */

    }, {
      key: "set",
      value: function set(name, value) {
        this._params[String(name)] = String(value);
      }
      /**
       * has checks to see if the given query param key exists in the params object
       * @param {string} query the query param to check
       * @return {boolean} true if the query param is in the params object, false o/w
       */

    }, {
      key: "has",
      value: function has(query) {
        return query in this._params;
      }
      /**
       * delete removes the given query param and its associated value from the params object
       * @param {string} name the query param key
       */

    }, {
      key: "delete",
      value: function _delete(name) {
        delete this._params[String(name)];
      }
      /**
       * toString returns a url with all the query params in the params object (without a ?)
       * @return {string}
       */

    }, {
      key: "toString",
      value: function toString() {
        var string = [];

        for (var key in this._params) {
          string.push("".concat(key, "=").concat(SearchParams.encode(this._params[key])));
        }

        return string.join('&');
      }
    }, {
      key: "entries",
      value: function entries() {
        var entries = [];

        for (var key in this._params) {
          entries.push([key, this._params[key]]);
        }

        return entries;
      }
      /**
       * decode returns the decoded representation of the given string
       * @param {string} string the string to decode
       * @return {string}
       */

    }], [{
      key: "decode",
      value: function decode(string) {
        return decodeURIComponent(string.replace(/[ +]/g, '%20'));
      }
      /**
       * decode returns the encoded representation of the given string (e.g. + -> %2B)
       * @param {string} string the string to encode
       * @return {string}
       */

    }, {
      key: "encode",
      value: function encode(string) {
        var replace = {
          '!': '%21',
          "'": '%27',
          '(': '%28',
          ')': '%29',
          '%20': '+'
        };
        return encodeURIComponent(string).replace(/[!'()]|%20/g, function (match) {
          return replace[match];
        });
      }
    }]);

    return SearchParams;
  }();

  /** @module Renderer */

  /**
   * Renderer is an abstract class that all Renderers should extend and implement
   */
  var Renderer =
  /*#__PURE__*/
  function () {
    function Renderer() {
      _classCallCheck(this, Renderer);
    }

    _createClass(Renderer, [{
      key: "render",

      /**
       * render is a core method for all renderers.
       * All implementations should override this class
       * @param {string} template
       * @param {object} data
       */
      value: function render(template, data) {
        return template;
      }
    }, {
      key: "registerHelper",
      value: function registerHelper(name, cb) {}
    }, {
      key: "registerTemplate",
      value: function registerTemplate(templateName, template) {}
    }, {
      key: "compile",
      value: function compile(template) {}
    }]);

    return Renderer;
  }();

  var SVGIcon =
  /*#__PURE__*/
  function () {
    /**
     * @param config
     * @param config.name
     * @param config.path
     * @param config.complexContents
     * @param config.viewBox
     * @constructor
     */
    function SVGIcon(config) {
      _classCallCheck(this, SVGIcon);

      /**
       * the name of the icon
       */
      this.name = config.name;
      /**
       * an svg path definition
       */

      this.path = config.path;
      /**
       * if not using a path, a the markup for a complex SVG
       */

      this.complexContents = config.complexContents;
      /**
       * the view box definition, defaults to 24x24
       * @type {string}
       */

      this.viewBox = config.viewBox || '0 0 24 24';
      /**
       * actual contents used
       */

      this.contents = this.pathDefinition();
    }

    _createClass(SVGIcon, [{
      key: "pathDefinition",
      value: function pathDefinition() {
        if (this.complexContents) {
          return this.complexContents;
        }

        return "<path d=\"".concat(this.path, "\"></path>");
      }
    }, {
      key: "parseContents",
      value: function parseContents(complexContentsParams) {
        var contents = this.contents;

        if (typeof contents === 'function') {
          contents = contents(complexContentsParams);
        }

        return "<svg viewBox=\"".concat(this.viewBox, "\" xmlns=\"http://www.w3.org/2000/svg\">").concat(contents, "</svg>");
      }
      /**
       * returns the svg markup
       */

    }, {
      key: "markup",
      value: function markup() {
        var _this = this;

        if (typeof this.contents === 'function') {
          return function (complexContentsParams) {
            return _this.parseContents(complexContentsParams);
          };
        }

        return this.parseContents();
      }
    }]);

    return SVGIcon;
  }();

  var thumbIcon = new SVGIcon({
    name: 'thumb',
    viewBox: '0 0 24 22',
    path: 'M15.273 1H5.455c-.906 0-1.68.55-2.008 1.342L.153 10.097A2.19 2.19 0 000 10.9v2.2c0 1.21.982 2.2 2.182 2.2h6.883L8.03 20.327l-.033.352c0 .451.186.869.48 1.166L9.633 23l7.178-7.249a2.16 2.16 0 00.644-1.551v-11c0-1.21-.982-2.2-2.182-2.2zm0 13.2l-4.735 4.774L11.75 13.1H2.182v-2.2l3.273-7.7h9.818v11zM19.636 1H24v13.2h-4.364V1z'
  });

  var receiptIcon = new SVGIcon({
    name: 'receipt',
    path: 'M14.606 9.5c-.671-.515-1.591-.833-2.606-.833 1.015 0 1.935.318 2.606.833zm-7.985 0H1.655A1.66 1.66 0 010 7.833V3.667C0 2.747.741 2 1.655 2h20.69A1.66 1.66 0 0124 3.667v4.166A1.66 1.66 0 0122.345 9.5h-4.966V22H6.621V9.5h2.773H6.62zm10.758-1.667h4.966V3.667H1.655v4.166h4.966v-2.5h10.758v2.5z'
  });

  var pantheonIcon = new SVGIcon({
    name: 'pantheon',
    path: 'M9.947 16.598h.252V9.412h-.252a.432.432 0 01-.23-.065c-.07-.043-.106-.093-.106-.15L9.15 7.82v-.15c0-.044.028-.08.084-.109a.691.691 0 01.105-.086.254.254 0 01.146-.043H13.6c.056 0 .104.015.146.043.042.03.091.058.147.086a.271.271 0 01.063.108c.014.043.007.093-.02.15l-.42 1.378a.374.374 0 01-.147.15.37.37 0 01-.19.065h-.251v7.186h.252a.37.37 0 01.189.065c.07.043.119.093.147.15l.42 1.378c.027.028.034.071.02.129a.275.275 0 01-.063.129 1.364 1.364 0 00-.147.086.254.254 0 01-.146.043H9.485a.254.254 0 01-.146-.043.691.691 0 01-.105-.086c-.056-.029-.084-.072-.084-.13v-.128l.461-1.377c0-.058.035-.108.105-.151a.432.432 0 01.231-.065zm5.792 0h.252V9.412h-.252a.432.432 0 01-.23-.065.374.374 0 01-.148-.15l-.42-1.377c-.027-.029-.034-.072-.02-.13a.275.275 0 01.063-.129c.056-.028.105-.057.146-.086a.254.254 0 01.147-.043h4.114c.055 0 .104.015.146.043a.691.691 0 01.105.086c.056.03.084.072.084.13v.129l-.42 1.377a.374.374 0 01-.146.15.432.432 0 01-.231.065h-.21v7.186h.21a.43.43 0 01.23.065c.07.043.12.093.148.15l.42 1.378v.15c0 .043-.029.08-.085.108a.691.691 0 01-.105.086.254.254 0 01-.146.043h-4.114a.254.254 0 01-.147-.043 1.364 1.364 0 00-.146-.086.271.271 0 01-.063-.108c-.014-.043-.007-.093.02-.15l.42-1.377a.374.374 0 01.147-.151.432.432 0 01.231-.065zm-11.794-.086h.252V9.498h-.252a.334.334 0 01-.21-.065.386.386 0 01-.126-.193l-.42-1.377a.248.248 0 01-.02-.172.854.854 0 01.063-.173c.028-.057.07-.1.126-.129a.365.365 0 01.168-.043h4.07c.057 0 .113.015.169.043a.278.278 0 01.126.13.854.854 0 01.062.172.248.248 0 01-.02.172l-.42 1.377a.386.386 0 01-.126.193.334.334 0 01-.21.065h-.21v7.014h.21c.084 0 .154.029.21.086a.673.673 0 01.126.172l.42 1.378a.248.248 0 01.02.172.854.854 0 01-.062.172.278.278 0 01-.126.129.365.365 0 01-.168.043H3.526a.365.365 0 01-.168-.043.278.278 0 01-.126-.13.854.854 0 01-.063-.171.248.248 0 01.02-.172l.42-1.378a.673.673 0 01.126-.172.281.281 0 01.21-.086zM1.763 6.658a.717.717 0 01-.504-.194.644.644 0 01-.21-.495v-.43a.73.73 0 01.105-.387.68.68 0 01.273-.259C4.309 3.402 6.54 2.276 8.121 1.515 9.702.755 10.493.361 10.493.332c.531-.258.972-.366 1.322-.323.35.043.734.165 1.154.366l8.31 4.518c.14.058.245.144.315.259a.73.73 0 01.105.387v.43c0 .201-.07.366-.21.495a.717.717 0 01-.504.194H1.763zm-.714 13.34a.54.54 0 01.168-.387.516.516 0 01.378-.172h19.642c.168 0 .308.057.42.172a.541.541 0 01.168.387v.818a.522.522 0 01-.168.408.605.605 0 01-.42.151H1.595a.551.551 0 01-.378-.15.522.522 0 01-.168-.41v-.817zm21.405 2.022c.14 0 .266.058.378.173a.592.592 0 01.168.43v.818a.541.541 0 01-.168.387.516.516 0 01-.378.172L.546 23.957a.516.516 0 01-.378-.172.541.541 0 01-.168-.387v-.818a.59.59 0 01.168-.43.516.516 0 01.378-.173l21.908.043z'
  });

  var micIcon = new SVGIcon({
    name: 'mic',
    path: 'M12 15c1.66 0 2.99-1.34 2.99-3L15 6c0-1.66-1.34-3-3-3S9 4.34 9 6v6c0 1.66 1.34 3 3 3zm5.3-3c0 3-2.54 5.1-5.3 5.1S6.7 15 6.7 12H5c0 3.41 2.72 6.23 6 6.72V22h2v-3.28c3.28-.48 6-3.3 6-6.72h-1.7z'
  });

  var directionsIcon = new SVGIcon({
    name: 'directions',
    path: 'M23.649 11.154L12.846.35a1.195 1.195 0 00-1.692 0L.35 11.154a1.195 1.195 0 000 1.692L11.154 23.65a1.195 1.195 0 001.692 0L23.65 12.846c.468-.456.468-1.212 0-1.692zm-9.254 3.853v-3.001H9.593v3.6h-2.4v-4.8c0-.66.54-1.2 1.2-1.2h6.002V6.604l4.2 4.2-4.2 4.202z'
  });

  var calendarIcon = new SVGIcon({
    name: 'calendar',
    path: 'M18.111 13.2H12v6h6.111v-6zM16.89 0v2.4H7.11V0H4.667v2.4H3.444c-1.356 0-2.432 1.08-2.432 2.4L1 21.6C1 22.92 2.088 24 3.444 24h17.112C21.9 24 23 22.92 23 21.6V4.8c0-1.32-1.1-2.4-2.444-2.4h-1.223V0H16.89zm3.667 21.6H3.444V8.4h17.112v13.2z'
  });

  var calloutIcon = new SVGIcon({
    name: 'callout',
    path: 'M21.99 4c0-1.1-.89-2-1.99-2H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h14l4 4-.01-18z'
  });

  var infoIcon = new SVGIcon({
    name: 'info',
    path: 'M12 8.4A1.2 1.2 0 1012 6a1.2 1.2 0 000 2.4zM12 0c6.624 0 12 5.376 12 12s-5.376 12-12 12S0 18.624 0 12 5.376 0 12 0zm0 18c.66 0 1.2-.54 1.2-1.2V12c0-.66-.54-1.2-1.2-1.2-.66 0-1.2.54-1.2 1.2v4.8c0 .66.54 1.2 1.2 1.2z'
  });

  var briefcaseIcon = new SVGIcon({
    name: 'briefcase',
    path: 'M20 7h-4V5c0-1.11-.89-2-2-2h-4c-1.11 0-2 .89-2 2v2H4c-1.11 0-1.99.89-1.99 2L2 20c0 1.11.89 2 2 2h16c1.11 0 2-.89 2-2V9c0-1.11-.89-2-2-2zm-6 0h-4V5h4v2z'
  });

  var kabobIcon = new SVGIcon({
    name: 'kabob',
    viewBox: '0 0 3 11',
    complexContents: "<circle cx=\"1.5\" cy=\"1.5\" r=\"1.5\"/><circle cx=\"1.5\" cy=\"5.5\" r=\"1.5\"/><circle cx=\"1.5\" cy=\"9.5\" r=\"1.5\"/>"
  });

  var personIcon = new SVGIcon({
    name: 'person',
    viewBox: '0 0 18 18',
    path: 'M9 9c2.486 0 4.5-2.014 4.5-4.5S11.486 0 9 0a4.499 4.499 0 00-4.5 4.5C4.5 6.986 6.514 9 9 9zm0 2.25c-3.004 0-9 1.508-9 4.5v1.125C0 17.494.506 18 1.125 18h15.75c.619 0 1.125-.506 1.125-1.125V15.75c0-2.992-5.996-4.5-9-4.5z'
  });

  var magnifyingGlassIcon = new SVGIcon({
    name: 'magnifying_glass',
    path: 'M16.124 13.051a5.154 5.154 0 110-10.308 5.154 5.154 0 010 10.308M16.114 0a7.886 7.886 0 00-6.46 12.407L0 22.06 1.94 24l9.653-9.653A7.886 7.886 0 1016.113 0'
  });

  var officeIcon = new SVGIcon({
    name: 'office',
    path: 'M12 7V3H2v18h20V7H12zM6 19H4v-2h2v2zm0-4H4v-2h2v2zm0-4H4V9h2v2zm0-4H4V5h2v2zm4 12H8v-2h2v2zm0-4H8v-2h2v2zm0-4H8V9h2v2zm0-4H8V5h2v2zm10 12h-8v-2h2v-2h-2v-2h2v-2h-2V9h8v10zm-2-8h-2v2h2v-2zm0 4h-2v2h2v-2z'
  });

  var linkIcon = new SVGIcon({
    name: 'link',
    path: 'M2.28 12A3.723 3.723 0 016 8.28h4.8V6H6c-3.312 0-6 2.688-6 6s2.688 6 6 6h4.8v-2.28H6A3.723 3.723 0 012.28 12zm4.92 1.2h9.6v-2.4H7.2v2.4zM18 6h-4.8v2.28H18A3.723 3.723 0 0121.72 12 3.723 3.723 0 0118 15.72h-4.8V18H18c3.312 0 6-2.688 6-6s-2.688-6-6-6z'
  });

  var windowIcon = new SVGIcon({
    name: 'window',
    path: 'M3 13h8V3H3v10zm0 8h8v-6H3v6zm10 0h8V11h-8v10zm0-18v6h8V3h-8z'
  });

  var phoneIcon = new SVGIcon({
    name: 'phone',
    path: 'M4.827 10.387a20.198 20.198 0 008.786 8.786l2.934-2.933c.36-.36.893-.48 1.36-.32a15.21 15.21 0 004.76.76c.733 0 1.333.6 1.333 1.333v4.654C24 23.4 23.4 24 22.667 24 10.147 24 0 13.853 0 1.333 0 .6.6 0 1.333 0H6c.733 0 1.333.6 1.333 1.333 0 1.667.267 3.267.76 4.76.147.467.04.987-.333 1.36l-2.933 2.934z'
  });

  var tagIcon = new SVGIcon({
    name: 'tag',
    viewBox: '0 0 18 18',
    path: 'M17.469 8.622l-8.1-8.1A1.789 1.789 0 008.1 0H1.8C.81 0 0 .81 0 1.8v6.3c0 .495.198.945.531 1.278l8.1 8.1c.324.324.774.522 1.269.522a1.76 1.76 0 001.269-.531l6.3-6.3A1.76 1.76 0 0018 9.9c0-.495-.207-.954-.531-1.278zM3.15 4.5c-.747 0-1.35-.603-1.35-1.35 0-.747.603-1.35 1.35-1.35.747 0 1.35.603 1.35 1.35 0 .747-.603 1.35-1.35 1.35z'
  });

  var documentIcon = new SVGIcon({
    name: 'document',
    path: 'M4 6H2v14c0 1.1.9 2 2 2h14v-2H4V6zm16-4H8c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm-1 9H9V9h10v2zm-4 4H9v-2h6v2zm4-8H9V5h10v2z'
  });

  var chevronIcon = new SVGIcon({
    name: 'chevron',
    viewBox: '0 0 7 9',
    complexContents: "<g fill-rule=\"evenodd\" transform=\"translate(-1 -8)\"><path d=\"m2.6417004 8-1.1417004 1.0575 3.70850202 3.4425-3.70850202 3.4425 1.1417004 1.0575 4.8582996-4.5z\"/></g>"
  });

  var supportIcon = new SVGIcon({
    name: 'support',
    path: 'M12,0 C5.376,0 0,5.376 0,12 C0,18.624 5.376,24 12,24 C18.624,24 24,18.624 24,12 C24,5.376 18.624,0 12,0 Z M13,19 L11,19 L11,17 L13,17 L13,19 Z M15.07,11.25 L14.17,12.17 C13.45,12.9 13,13.5 13,15 L11,15 L11,14.5 C11,13.4 11.45,12.4 12.17,11.67 L13.41,10.41 C13.78,10.05 14,9.55 14,9 C14,7.9 13.1,7 12,7 C10.9,7 10,7.9 10,9 L8,9 C8,6.79 9.79,5 12,5 C14.21,5 16,6.79 16,9 C16,9.88 15.64,10.68 15.07,11.25 Z'
  });

  var yextIcon = new SVGIcon({
    name: 'yext',
    viewBox: '0 0 30 30',
    path: 'M25.517 28.142v.095h-.204v.905h-.066v-.905h-.197v-.095h.467zm.667 0h.066v1h-.066v-.825l-.24.595h-.013l-.24-.595v.825h-.066v-1h.066l.247.61.246-.61zM15 28.8c7.622 0 13.8-6.178 13.8-13.8 0-7.622-6.178-13.8-13.8-13.8C7.378 1.2 1.2 7.378 1.2 15c0 7.622 6.178 13.8 13.8 13.8zM15 0c8.284 0 15 6.716 15 15 0 8.284-6.716 15-15 15-8.284 0-15-6.716-15-15C0 6.716 6.716 0 15 0zm.45 16.65v-1.2h6.6v1.2h-2.7v5.4h-1.2v-5.4h-2.7zm-1.599-1.35l.849.849-2.601 2.601 2.601 2.601-.849.849-2.601-2.601L8.649 22.2l-.849-.849 2.601-2.601L7.8 16.149l.849-.849 2.601 2.601 2.601-2.601zM18.675 9a2.175 2.175 0 00-1.847 3.323l2.995-2.995A2.163 2.163 0 0018.675 9zm0 5.55a3.375 3.375 0 112.833-5.209l-3.789 3.788a2.175 2.175 0 003.13-1.954h1.201a3.375 3.375 0 01-3.375 3.375zm-7.425-3.734L13.78 7.8l.92.771-2.85 3.397v2.582h-1.2v-2.582L7.8 8.57l.92-.771 2.53 3.016z'
  });

  var pinIcon = new SVGIcon({
    name: 'pin',
    viewBox: '5 0 9 18',
    path: 'm9.375 0c-3.52446429 0-6.375 2.817-6.375 6.3 0 4.725 6.375 11.7 6.375 11.7s6.375-6.975 6.375-11.7c0-3.483-2.8505357-6.3-6.375-6.3zm.00000018 8.55000007c-1.25678576 0-2.27678579-1.008-2.27678579-2.25s1.02000003-2.25 2.27678579-2.25c1.25678572 0 2.27678582 1.008 2.27678582 2.25s-1.0200001 2.25-2.27678582 2.25z'
  });

  var gearIcon = new SVGIcon({
    name: 'gear',
    path: 'M12 10c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm7-7H5a2 2 0 00-2 2v14a2 2 0 002 2h14a2 2 0 002-2V5a2 2 0 00-2-2zm-1.75 9c0 .23-.02.46-.05.68l1.48 1.16c.13.11.17.3.08.45l-1.4 2.42c-.09.15-.27.21-.43.15l-1.74-.7c-.36.28-.76.51-1.18.69l-.26 1.85c-.03.17-.18.3-.35.3h-2.8c-.17 0-.32-.13-.35-.29l-.26-1.85c-.43-.18-.82-.41-1.18-.69l-1.74.7c-.16.06-.34 0-.43-.15l-1.4-2.42a.353.353 0 01.08-.45l1.48-1.16c-.03-.23-.05-.46-.05-.69 0-.23.02-.46.05-.68l-1.48-1.16a.353.353 0 01-.08-.45l1.4-2.42c.09-.15.27-.21.43-.15l1.74.7c.36-.28.76-.51 1.18-.69l.26-1.85c.03-.17.18-.3.35-.3h2.8c.17 0 .32.13.35.29l.26 1.85c.43.18.82.41 1.18.69l1.74-.7c.16-.06.34 0 .43.15l1.4 2.42c.09.15.05.34-.08.45l-1.48 1.16c.03.23.05.46.05.69z'
  });

  var lightBulbIcon = new SVGIcon({
    name: 'light_bulb',
    viewBox: '0 0 32 35',
    path: 'M11.585 31.056l8.38-.493v-.986l-8.38.493zM11.585 33.028L15.775 35l4.19-1.972V31.55l-8.38.493v.986zm6.926-.407l-2.736 1.29-2.13-1.004 4.866-.286zM15.775 7.394c-4.63 0-8.38 3.205-8.38 8.38 0 5.177 4.19 6.902 4.19 12.818v.493l8.38-.493c0-5.916 4.19-8.188 4.19-12.817a8.38 8.38 0 00-8.38-8.38zm5.617 13.48c-1.025 1.837-2.174 3.892-2.381 6.786l-6.44.38c-.129-3.01-1.29-5.021-2.32-6.808-.493-.8-.928-1.636-1.299-2.5h13.556c-.325.708-.704 1.403-1.116 2.142zm1.479-3.128H8.627a7.793 7.793 0 01-.247-1.971c0-4.353 3.042-7.395 7.395-7.395a7.394 7.394 0 017.394 7.395 6.739 6.739 0 01-.3 1.971h.002zM26.62 15.282h4.93v1h-4.93zM23.094 7.756l2.091-2.091.698.697-2.092 2.092zM15.282 0h1v4.93h-1zM5.666 6.362l.697-.697 2.091 2.091-.697.697zM0 15.282h4.93v1H0z'
  });

  var starIcon = new SVGIcon({
    name: 'star',
    viewBox: '0 0 18 18',
    path: 'M8.991 0C4.023 0 0 4.032 0 9s4.023 9 8.991 9C13.968 18 18 13.968 18 9s-4.032-9-9.009-9zm3.816 14.4L9 12.105 5.193 14.4l1.008-4.329-3.357-2.907 4.428-.378L9 2.7l1.728 4.077 4.428.378-3.357 2.907z'
  });

  var close = new SVGIcon({
    name: 'close',
    viewBox: '0 1 24 24',
    complexContents: "\n    <path d=\"M7 8l9.716 9.716m0-9.716L7 17.716\"\n          stroke=\"currentColor\"\n          stroke-width=\"2\"/>\n  "
  });

  var elements = new SVGIcon({
    name: 'elements',
    path: 'M13,15 L13,17 L21,17 L21,19 L13,19 L13,21 L11,21 L11,15 L13,15 Z M9,17 L9,19 L3,19 L3,17 L9,17 Z M9,15 L7,15 L7,13 L3,13 L3,11 L7,11 L7,9 L9,9 L9,15 Z M21,11 L21,13 L11,13 L11,11 L21,11 Z M17,3 L17,5 L21,5 L21,7 L17,7 L17,9 L15,9 L15,3 L17,3 Z M13,5 L13,7 L3,7 L3,5 L13,5 Z'
  });

  var yextAnimatedForward = new SVGIcon({
    name: 'yext_animated_reverse',
    viewBox: '0 0 72 72',
    complexContents: function complexContents() {
      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var iconPrefix = params.iconPrefix || 'yxt';
      return "<defs>\n      <mask id=\"".concat(iconPrefix, "_reverse_Mask-1\">\n        <rect fill=\"#fff\" width=\"720\" height=\"720\" />\n      </mask>\n      <mask id=\"").concat(iconPrefix, "_reverse_Mask-2\">\n        <rect x=\"-144.3\" y=\"144.3\" fill=\"#fff\" width=\"720\" height=\"720\" />\n        <path d=\"M-0.3 .1c0 0 1.3 1.2 1.3 1.2c0 0 .3-1.6 .3-1.6c0 0-1.6 .4-1.6 .4\" />\n        <path fill=\"#fff\" d=\"M.3 .7c0 0-0.3 .3-0.3 .3c0 0 0 0 0 0c0 0 .3-0.3 .3-0.3c0 0 0 0 0 0\" />\n        <path d=\"M.3 .7c0 0-0.1 0-0.1 0c0 0 .1 .1 .1 .1c0 0 .1-0.1 .1-0.1c0 0-0.1 0-0.1 0m222.8 469.1c0 0-70.5 69.4-70.5 69.4c0 0 34.1 33.5 34.1 33.5c0 0 67-72.9 67-72.9c0 0-30.6-30-30.6-30\" />\n      </mask>\n      <mask id=\"").concat(iconPrefix, "_reverse_Mask-3\">\n        <rect fill=\"#fff\" width=\"720\" height=\"720\" />\n        <path d=\"M489.8 277.4c0 0 78 18.8 78 18.8c0 0-96.1 61.5-96.1 61.5c0 0 59.6-41.1 59.6-41.1c0 0 10.6-53.8 10.6-53.8c0 0-38.2 .6-38.2 .6c0 0-13.9 14-13.9 14m-67.8-108.1c0 0 73.9 1.3 73.9 1.3c0 0-33.8 54.5-33.8 54.5c0 0 18.6-3.2 18.6-3.2c0 0 35.4-36.5 35.4-36.5c0 0-62-25.9-62-25.9c0 0-32.1 9.8-32.1 9.8\" />\n      </mask>\n      <mask id=\"").concat(iconPrefix, "_reverse_Mask-4\">\n        <rect x=\"-91.1\" y=\"91.1\" fill=\"#fff\" width=\"720\" height=\"720\" />\n        <path d=\"M-0.3 .1c0 0 1.3 1.2 1.3 1.2c0 0 .3-1.6 .3-1.6c0 0-1.6 .4-1.6 .4\" />\n        <path fill=\"#fff\" d=\"M.3 .7c0 0-0.3 .3-0.3 .3c0 0 0 0 0 0c0 0 .3-0.3 .3-0.3c0 0 0 0 0 0\" />\n        <path d=\"M.3 .7c0 0-0.1 0-0.1 0c0 0 .1 .1 .1 .1c0 0 .1-0.1 .1-0.1c0 0-0.1 0-0.1 0m222.8 469.1c0 0-70.5 69.4-70.5 69.4c0 0 34.1 33.5 34.1 33.5c0 0 67-72.9 67-72.9c0 0-30.6-30-30.6-30\" />\n      </mask>\n      <mask id=\"").concat(iconPrefix, "_reverse_Mask-5\">\n        <rect fill=\"#fff\" width=\"720\" height=\"720\" />\n        <path d=\"M488.4 291.4c0 0 40.5 39.3 40.5 39.3c0 0-57.2 27-57.2 27c0 0 59.6-41.1 59.6-41.1c0 0 10.6-53.8 10.6-53.8c0 0-38.2 .6-38.2 .6c0 0-15.3 28-15.3 28m-90.5-97.4c0 0 52-11.3 52-11.3c0 0-6 45.2-6 45.2c0 0 36.8-6 36.8-6c0 0 39.3-31.9 39.3-31.9c0 0-65.9-30.5-65.9-30.5c0 0-56.2 34.5-56.2 34.5\" />\n      </mask>\n      <mask id=\"").concat(iconPrefix, "_reverse_Mask-6\">\n        <rect x=\"-61.3\" y=\"61.3\" fill=\"#fff\" width=\"720\" height=\"720\" />\n      </mask>\n      <mask id=\"").concat(iconPrefix, "_reverse_Mask-7\">\n        <rect fill=\"#fff\" width=\"720\" height=\"720\" />\n        <path d=\"M481.8 298.4c0 0 27.5 39.8 27.5 39.8c0 0-37.6 19.5-37.6 19.5c0 0 59.6-41.1 59.6-41.1c0 0 10.6-53.8 10.6-53.8c0 0-38.2 .6-38.2 .6c0 0-21.9 35-21.9 35m-108.1-79.7c0 0 30.2-23.8 30.2-23.8c0 0 21.7 35.9 21.7 35.9c0 0 55.1-8.9 55.1-8.9c0 0 35.4-36.5 35.4-36.5c0 0-62-25.9-62-25.9c0 0-80.4 59.2-80.4 59.2\" />\n      </mask>\n      <mask id=\"").concat(iconPrefix, "_reverse_Mask-8\">\n        <rect x=\"-42.6\" y=\"42.6\" fill=\"#fff\" width=\"720\" height=\"720\" />\n      </mask>\n      <mask id=\"").concat(iconPrefix, "_reverse_Mask-9\">\n        <rect fill=\"#fff\" width=\"720\" height=\"720\" />\n        <path d=\"M475.2 305.4c0 0 14.5 40.3 14.5 40.3c0 0-18 12-18 12c0 0 59.6-41.1 59.6-41.1c0 0 10.6-53.8 10.6-53.8c0 0-38.2 .6-38.2 .6c0 0-28.5 42-28.5 42m-113.6-74.3c0 0 17.9-18.5 17.9-18.5c0 0 36.4 25.3 36.4 25.3c0 0 64.8-16 64.8-16c0 0 39.3-31.9 39.3-31.9c0 0-65.9-30.5-65.9-30.5c0 0-92.5 71.6-92.5 71.6\" />\n      </mask>\n      <mask id=\"").concat(iconPrefix, "_reverse_Mask-10\">\n        <rect x=\"-29.6\" y=\"29.6\" fill=\"#fff\" width=\"720\" height=\"720\" />\n      </mask>\n      <mask id=\"").concat(iconPrefix, "_reverse_Mask-11\">\n        <rect fill=\"#fff\" width=\"720\" height=\"720\" />\n        <path d=\"M468.6 312.4c0 0 1.5 40.8 1.5 40.8c0 0 1.6 4.5 1.6 4.5c0 0 59.6-41.1 59.6-41.1c0 0 10.6-53.8 10.6-53.8c0 0-38.2 .6-38.2 .6c0 0-35.1 49-35.1 49m-107-81.3c0 0 15.1 4.9 15.1 4.9c0 0 38.2 13.3 38.2 13.3c0 0 65.8-27.4 65.8-27.4c0 0 39.3-21.9 39.3-21.9c0 0-65.9-40.5-65.9-40.5c0 0-92.5 71.6-92.5 71.6\" />\n      </mask>\n      <mask id=\"").concat(iconPrefix, "_reverse_Mask-12\">\n        <rect x=\"-20.3\" y=\"20.3\" fill=\"#fff\" width=\"720\" height=\"720\" />\n      </mask>\n      <mask id=\"").concat(iconPrefix, "_reverse_Mask-13\">\n        <rect fill=\"#fff\" width=\"720\" height=\"720\" />\n        <path d=\"M456.6 311.9c0 0-7 35.6-7 35.6c0 0 22.1 10.2 22.1 10.2c0 0 59.6-41.1 59.6-41.1c0 0 10.6-53.8 10.6-53.8c0 0-38.2 .6-38.2 .6c0 0-47.1 48.5-47.1 48.5m-95-80.8c0 0 12.3 28.3 12.3 28.3c0 0 39.9 1.3 39.9 1.3c0 0 66.9-38.8 66.9-38.8c0 0 39.3-21.9 39.3-21.9c0 0-65.9-40.5-65.9-40.5c0 0-92.5 71.6-92.5 71.6\" />\n      </mask>\n      <mask id=\"").concat(iconPrefix, "_reverse_Mask-14\">\n        <rect x=\"-13.4\" y=\"13.4\" fill=\"#fff\" width=\"720\" height=\"720\" />\n      </mask>\n      <mask id=\"").concat(iconPrefix, "_reverse_Mask-15\">\n        <rect fill=\"#fff\" width=\"720\" height=\"720\" />\n        <path d=\"M444.6 311.4c0 0-15.6 30.5-15.6 30.5c0 0 42.7 15.8 42.7 15.8c0 0 59.6-41.1 59.6-41.1c0 0 10.6-53.8 10.6-53.8c0 0-38.2 .6-38.2 .6c0 0-59.1 48-59.1 48m-83-80.3c0 0 9.5 51.7 9.5 51.7c0 0 41.7-10.8 41.7-10.8c0 0 67.9-50.1 67.9-50.1c0 0 50.6-31.9 50.6-31.9c0 0-77.2-30.5-77.2-30.5c0 0-92.5 71.6-92.5 71.6\" />\n      </mask>\n      <mask id=\"").concat(iconPrefix, "_reverse_Mask-16\">\n        <rect x=\"-7.3\" y=\"7.3\" fill=\"#fff\" width=\"720\" height=\"720\" />\n      </mask>\n      <mask id=\"").concat(iconPrefix, "_reverse_Mask-17\">\n        <rect fill=\"#fff\" width=\"720\" height=\"720\" />\n        <path d=\"M432.6 310.9c0 0-24.2 25.3-24.2 25.3c0 0 63.3 21.5 63.3 21.5c0 0 59.6-41.1 59.6-41.1c0 0 10.6-53.8 10.6-53.8c0 0-38.2 .6-38.2 .6c0 0-71.1 47.5-71.1 47.5m-71-79.8c0 0 20.3 90.4 20.3 90.4c0 0 29-29.5 29-29.5c0 0 69.8-70.1 69.8-70.1c0 0 35.4-36.5 35.4-36.5c0 0-62-25.9-62-25.9c0 0-92.5 71.6-92.5 71.6\" />\n      </mask>\n      <mask id=\"").concat(iconPrefix, "_reverse_Mask-18\">\n        <rect x=\"-4\" y=\"4\" fill=\"#fff\" width=\"720\" height=\"720\" />\n      </mask>\n      <mask id=\"").concat(iconPrefix, "_reverse_Mask-19\">\n        <rect fill=\"#fff\" width=\"720\" height=\"720\" />\n        <path d=\"M432.6 310.9c0 0-24.2 25.3-24.2 25.3c0 0 63.3 21.5 63.3 21.5c0 0 59.6-41.1 59.6-41.1c0 0 10.6-53.8 10.6-53.8c0 0-38.2 .6-38.2 .6c0 0-71.1 47.5-71.1 47.5m-71-79.8c0 0 20.3 90.4 20.3 90.4c0 0 29-29.5 29-29.5c0 0 69.8-70.1 69.8-70.1c0 0 39.3-31.9 39.3-31.9c0 0-65.9-30.5-65.9-30.5c0 0-92.5 71.6-92.5 71.6\" />\n      </mask>\n      <mask id=\"").concat(iconPrefix, "_reverse_Mask-20\">\n        <rect fill=\"#fff\" width=\"720\" height=\"720\" />\n      </mask>\n      <clipPath id=\"").concat(iconPrefix, "_reverse_ClipPath-1\">\n        <rect width=\"720\" height=\"720\" />\n      </clipPath>\n    </defs>\n    <g transform=\"translate(0,0) scale(.1,.1)\">\n      <g mask=\"url(#").concat(iconPrefix, "_reverse_Mask-1)\">\n        <path d=\"M377.5 395.3c0 0 64.8 0 64.8 0c0 0 0 129.6 0 129.6c0 0 28.8 0 28.8 0c0 0 0-129.6 0-129.6c0 0 64.8 0 64.8 0c0 0 0-28.8 0-28.8c0 0-158.4 0-158.4 0c0 0 0 28.8 0 28.8Z\" />\n        <path d=\"M338.9 363.6c0 0-62.5 62.4-62.5 62.4c0 0-62.4-62.4-62.4-62.4c0 0-20.4 20.4-20.4 20.4c0 0 62.5 62.4 62.5 62.4c0 0-62.5 62.4-62.5 62.4c0 0 20.4 20.4 20.4 20.4c0 0 62.4-62.4 62.4-62.4c0 0 62.5 62.4 62.5 62.4c0 0 20.3-20.4 20.3-20.4c0 0-62.4-62.4-62.4-62.4c0 0 62.4-62.4 62.4-62.4c0 0-20.3-20.4-20.3-20.4Z\" />\n        <path d=\"M454.7 345.8c44.8 0 81-36.3 81-81c0 0-28.8 0-28.8 0c0 28.8-23.3 52.2-52.2 52.2c-8.2 0-16-1.9-22.9-5.3c0 0 69.8-69.9 69.8-69.9c0 0 21.1-21 21.1-21c-14.4-22.3-39.5-37-68-37c-44.7 0-81 36.2-81 81c0 44.7 36.3 81 81 81Zm0-133.2c10.2 0 19.6 2.9 27.6 7.9c0 0-71.9 71.8-71.9 71.8c-5-8-7.9-17.4-7.9-27.5c0-28.9 23.4-52.2 52.2-52.2Z\" />\n        <path d=\"M276.4 255.9c0 0-60.7-72.8-60.7-72.8c0 0-22.1 18.6-22.1 18.6c0 0 68.4 82 68.4 82c0 0 0 62.4 0 62.4c0 0 28.8 0 28.8 0c0 0 0-62.6 0-62.6c0 0 68.4-81.8 68.4-81.8c0 0-22-18.6-22-18.6c0 0-60.8 72.8-60.8 72.8Z\" />\n      </g>\n      <path stroke=\"#000\" stroke-width=\"30\" d=\"M0-353.7c195.2 0 353.7 158.5 353.7 353.7c0 195.2-158.5 353.7-353.7 353.7c-195.2 0-353.7-158.5-353.7-353.7c0-195.2 158.5-353.7 353.7-353.7Z\" fill=\"none\" transform=\"translate(359.8,360.4) scale(.977,.977)\" />\n    </g>\n    <g opacity=\"0\" transform=\"translate(0,0) scale(.1,.1)\">\n      <g display=\"block\" mask=\"url(#").concat(iconPrefix, "_reverse_Mask-2)\" transform=\"translate(144.3,-144.3)\">\n        <path d=\"M224.2 478.3c0 0-210.6 210.5-210.6 210.5c0 0 20.4 20.4 20.4 20.4c0 0 210.7-210.7 210.7-210.7c-11.7-11-5.9-6-20.5-20.2Z\" />\n      </g>\n      <g display=\"block\" mask=\"url(#").concat(iconPrefix, "_reverse_Mask-3)\">\n        <path d=\"M390.6 395.2c0 0 51.7 .1 51.7 .1c0 0 .1 103.6 .1 103.6c0 0 28.7 0 28.7 0c0 0 0-103.6 0-103.6c0 0 52-0.1 52-0.1c0 0 0-28.4 0-28.4c0 0-132.5 0-132.5 0c0 0 0 28.4 0 28.4Z\" />\n        <path d=\"M329 373.4c0 .1-52.6 52.6-52.6 52.6c0 0-62.4-62.4-62.4-62.4c0 0-20.4 20.4-20.4 20.4c0 0 62.5 62.4 62.5 62.4c0 0-62.5 62.4-62.5 62.4c0 0 20.4 20.4 20.4 20.4c0 0 62.4-62.4 62.4-62.4c0 0 62.5 62.4 62.5 62.4c0 0 20.3-20.4 20.3-20.4c0 0-62.4-62.4-62.4-62.4c0 0 52.6-52.6 52.6-52.6c0 0-20.4-20.3-20.4-20.3Z\" />\n        <path d=\"M454.7 345.8c44.8 0 81-36.3 81-81c0 0-28.8 0-28.8 0c0 28.8-23.3 52.2-52.2 52.2c-8.2 0-16-1.9-22.9-5.3c0 0 69.8-69.9 69.8-69.9c0 0 21.1-21 21.1-21c-14.4-22.3-39.5-37-68-37c-44.7 0-81 36.2-81 81c0 44.7 36.3 81 81 81Zm0-133.2c10.2 0 19.6 2.9 27.6 7.9c0 0-71.9 71.8-71.9 71.8c-5-8-7.9-17.4-7.9-27.5c0-28.9 23.4-52.2 52.2-52.2Z\" />\n        <path d=\"M276.4 255.9c0 0-48.7-58.3-48.7-58.3c0 0-21.1 19-21.1 19c0 0 55.5 67.2 55.5 67.2c0 0 .3 50 .3 50c0 0 28.4 0 28.4 0c0 0 0-50.3 0-50.3c0 0 55.4-66.9 55.4-66.9c0 0-21-18.6-21-18.6c0 0-48.8 57.9-48.8 57.9Z\" />\n      </g>\n      <path stroke=\"#000\" stroke-width=\"30\" d=\"M0-336.2c185.6 0 336.2 150.6 336.2 336.2c0 185.6-150.6 336.2-336.2 336.2c-185.6 0-336.2-150.6-336.2-336.2c0-185.6 150.6-336.2 336.2-336.2Z\" fill=\"none\" display=\"block\" transform=\"translate(370.8,347.5) scale(.977,.977)\" />\n    </g>\n    <g opacity=\"0\" transform=\"translate(0,0) scale(.1,.1)\">\n      <g mask=\"url(#").concat(iconPrefix, "_reverse_Mask-4)\" transform=\"translate(91.1,-91.1)\">\n        <path d=\"M224.2 478.3c0 0-210.6 210.5-210.6 210.5c0 0 20.4 20.4 20.4 20.4c0 0 210.7-210.7 210.7-210.7c-11.7-11-5.9-6-20.5-20.2Z\" />\n      </g>\n      <g mask=\"url(#").concat(iconPrefix, "_reverse_Mask-5)\">\n        <path d=\"M409.7 395.1c0 0 32.6 .2 32.6 .2c0 0 .3 65.5 .3 65.5c0 0 28.5 0 28.5 0c0 0 0-65.5 0-65.5c0 0 33.1-0.2 33.1-0.2c0 0 0-27.8 0-27.8c0 0-94.5 0-94.5 0c0 0 0 27.8 0 27.8Z\" />\n        <path d=\"M319.7 382.8c0 0-43.3 43.2-43.3 43.2c0 0-62.4-62.4-62.4-62.4c0 0-20.4 20.4-20.4 20.4c0 0 62.5 62.4 62.5 62.4c0 0-62.5 62.4-62.5 62.4c0 0 20.4 20.4 20.4 20.4c0 0 62.4-62.4 62.4-62.4c0 0 62.5 62.4 62.5 62.4c0 0 20.3-20.4 20.3-20.4c0 0-62.4-62.4-62.4-62.4c0 0 43.4-43.3 43.4-43.3c0 0-20.5-20.3-20.5-20.3Z\" />\n        <path d=\"M502.8 199.6c-13.4-9.9-30-15.8-48.1-15.8c-44.7 0-81 36.2-81 81c0 44.7 36.3 81 81 81c44.8 0 81-36.3 81-81h-28.8c0 28.8-23.3 52.2-52.2 52.2c-8.2 0-16-1.9-22.9-5.3l69.8-69.9l.3-0.2l-20.3-20.4l-71.2 71.1c-5-8-7.9-17.4-7.9-27.5c0-28.9 23.4-52.2 52.2-52.2c10.1 0 19.4 2.8 27.4 7.7Z\" fill-rule=\"evenodd\" />\n        <path d=\"M276.4 255.9c0 0-31.1-37-31.1-37c0 0-19.7 19.5-19.7 19.5c0 0 36.7 45.6 36.7 45.6c0 0 .7 31.8 .7 31.8c0 0 27.7 0 27.7 0c0 0 0-32.4 0-32.4c0 0 36.5-44.9 36.5-44.9c0 0-19.6-18.6-19.6-18.6c0 0-31.2 36-31.2 36Z\" />\n      </g>\n      <path stroke=\"#000\" stroke-width=\"30\" d=\"M0-310c171.1 0 310 138.9 310 310c0 171.1-138.9 310-310 310c-171.1 0-310-138.9-310-310c0-171.1 138.9-310 310-310Z\" fill=\"none\" transform=\"translate(387.8,328.7) scale(.977,.977)\" />\n    </g>\n    <g opacity=\"0\" transform=\"translate(0,0) scale(.1,.1)\">\n      <g display=\"block\" mask=\"url(#").concat(iconPrefix, "_reverse_Mask-6)\" transform=\"translate(61.3,-61.3)\">\n        <path d=\"M224.2 478.3c0 0-210.6 210.5-210.6 210.5c0 0 20.4 20.4 20.4 20.4c0 0 210.7-210.7 210.7-210.7c-11.7-11-5.9-6-20.5-20.2Z\" />\n      </g>\n      <g mask=\"url(#").concat(iconPrefix, "_reverse_Mask-7)\">\n        <path d=\"M420.4 395c0 0 21.9 .3 21.9 .3c0 0 .4 44.1 .4 44.1c0 0 28.4 0 28.4 0c0 0 0-44.1 0-44.1c0 0 22.6-0.3 22.6-0.3c0 0 0-27.5 0-27.5c0 0-73.3 0-73.3 0c0 0 0 27.5 0 27.5Z\" />\n        <path d=\"M313.2 389.2c0 0-36.8 36.8-36.8 36.8c0 0-62.4-62.4-62.4-62.4c0 0-20.4 20.4-20.4 20.4c0 0 62.5 62.4 62.5 62.4c0 0-62.5 62.4-62.5 62.4c0 0 20.4 20.4 20.4 20.4c0 0 62.4-62.4 62.4-62.4c0 0 62.5 62.4 62.5 62.4c0 0 20.3-20.4 20.3-20.4c0 0-62.4-62.4-62.4-62.4c0 0 37-36.9 37-36.9c0 0-20.6-20.3-20.6-20.3Z\" />\n        <path d=\"M500 200c-13.4-9.9-27.2-16.2-45.3-16.2c-44.7 0-81 36.2-81 81c0 44.7 36.3 81 81 81c44.8 0 81-36.3 81-81h-28.8c0 28.8-23.3 52.2-52.2 52.2c-8.2 0-16-1.9-22.9-5.3l57.7-57.7l-20.3-20.4l-58.8 58.7c-5-8-7.9-17.4-7.9-27.5c0-28.9 23.4-52.2 52.2-52.2c10.1 0 19.4 2.8 27.4 7.7Z\" fill-rule=\"evenodd\" />\n        <path d=\"M276.4 255.9c0 0-21.2-25.1-21.2-25.1c0 0-19 19.8-19 19.8c0 0 26.2 33.5 26.2 33.5c0 0 1 21.6 1 21.6c0 0 27.2 0 27.2 0c0 0 0-22.3 0-22.3c0 0 25.9-32.7 25.9-32.7c0 0-18.8-18.6-18.8-18.6c0 0-21.3 23.8-21.3 23.8Z\" />\n      </g>\n      <path stroke=\"#000\" stroke-width=\"30\" d=\"M0-294.3c162.4 0 294.3 131.9 294.3 294.3c0 162.4-131.9 294.3-294.3 294.3c-162.4 0-294.3-131.9-294.3-294.3c0-162.4 131.9-294.3 294.3-294.3Z\" fill=\"none\" display=\"block\" transform=\"translate(398.7,318.2) scale(.977,.977)\" />\n    </g>\n    <g opacity=\"0\" transform=\"translate(0,0) scale(.1,.1)\">\n      <g mask=\"url(#").concat(iconPrefix, "_reverse_Mask-8)\" transform=\"translate(42.6,-42.6)\">\n        <path d=\"M224.2 478.3c0 0-210.6 210.5-210.6 210.5c0 0 20.4 20.4 20.4 20.4c0 0 210.7-210.7 210.7-210.7c-11.7-11-5.9-6-20.5-20.2Z\" />\n      </g>\n      <g display=\"block\" mask=\"url(#").concat(iconPrefix, "_reverse_Mask-9)\">\n        <path d=\"M427.2 394.9c0 0 15.1 .4 15.1 .4c0 0 .4 30.7 .4 30.7c0 0 28.4 0 28.4 0c0 0 0-30.7 0-30.7c0 0 15.9-0.4 15.9-0.4c0 0 0-27.2 0-27.2c0 0-59.8 0-59.8 0c0 0 0 27.2 0 27.2Z\" />\n        <path d=\"M307.4 395c0 0-31 31-31 31c0 0-53.9-54-53.9-54c0 0-20.4 20.4-20.4 20.4c0 0 54 54 54 54c0 0-62.5 62.4-62.5 62.4c0 0 20.4 20.4 20.4 20.4c0 0 62.4-62.4 62.4-62.4c0 0 54 54 54 54c0 0 20.4-20.3 20.4-20.3c0 0-54-54.1-54-54.1c0 0 31.2-31.1 31.2-31.1c0 0-20.6-20.3-20.6-20.3Z\" />\n        <path d=\"M502.8 199.6c-13.4-9.9-30.1-15.8-48.1-15.8c-44.7 0-81 36.2-81 81c0 44.7 36.3 81 81 81c44.8 0 81-36.3 81-81h-28.8c0 28.8-23.3 52.2-52.2 52.2c-8.2 0-16-1.9-22.9-5.3l45.5-45.5l-20.4-20.4l-46.5 46.5c-5-8-7.9-17.4-7.9-27.5c0-28.9 23.4-52.2 52.2-52.2c10.1 0 19.4 2.8 27.4 7.7Z\" fill-rule=\"evenodd\" />\n        <path d=\"M276.4 255.9c0 0-15-17.6-15-17.6c0 0-18.4 20-18.4 20c0 0 19.4 25.8 19.4 25.8c0 0 1.2 15.2 1.2 15.2c0 0 27 0 27 0c0 0 0-15.9 0-15.9c0 0 19.1-24.9 19.1-24.9c0 0-18.2-18.7-18.2-18.7c0 0-15.1 16.1-15.1 16.1Z\" />\n      </g>\n      <path stroke=\"#000\" stroke-width=\"30\" d=\"M0-284.4c157 0 284.4 127.4 284.4 284.4c0 157-127.4 284.4-284.4 284.4c-157 0-284.4-127.4-284.4-284.4c0-157 127.4-284.4 284.4-284.4Z\" fill=\"none\" transform=\"translate(406.1,311.6) scale(.977,.977)\" />\n    </g>\n    <g opacity=\"0\" transform=\"translate(0,0) scale(.1,.1)\">\n      <g display=\"block\" mask=\"url(#").concat(iconPrefix, "_reverse_Mask-10)\" transform=\"translate(29.6,-29.6)\">\n        <path d=\"M224.2 478.3c0 0-210.6 210.5-210.6 210.5c0 0 20.4 20.4 20.4 20.4c0 0 210.7-210.7 210.7-210.7c-11.7-11-5.9-6-20.5-20.2Z\" />\n      </g>\n      <g display=\"block\" mask=\"url(#").concat(iconPrefix, "_reverse_Mask-11)\">\n        <path d=\"M436 393.5c0 0 8.7 .4 8.7 .4c0 0 .4 17.8 .4 17.8c0 0 23.6 0 23.6 0c0 0 0-17.8 0-17.8c0 0 9.4-0.4 9.4-0.4c0 0 0-22.6 0-22.6c0 0-42.1 0-42.1 0c0 0 0 22.6 0 22.6Z\" />\n        <path d=\"M297.2 405.2c0 0-20.8 20.8-20.8 20.8c0 0-35.4-35.6-35.4-35.6c0 0-20.3 20.5-20.3 20.5c0 0 35.4 35.5 35.4 35.5c0 0-62.5 62.4-62.5 62.4c0 0 20.4 20.4 20.4 20.4c0 0 62.4-62.4 62.4-62.4c0 0 35.6 35.5 35.6 35.5c0 0 20.2-20.2 20.2-20.2c0 0-35.4-35.7-35.4-35.7c0 0 21.1-21 21.1-21c0 0-20.7-20.2-20.7-20.2Z\" />\n        <path d=\"M502.8 199.6c-13.4-9.9-30.1-15.8-48.1-15.8c-44.7 0-81 36.2-81 81c0 44.7 36.3 81 81 81c44.8 0 81-36.3 81-81h-28.8c0 28.8-23.3 52.2-52.2 52.2c-8.2 0-16-1.9-22.9-5.3l33.7-33.7l-20.4-20.3l-34.7 34.6c-5-8-7.9-17.4-7.9-27.5c0-28.9 23.4-52.2 52.2-52.2c10.1 0 19.4 2.8 27.4 7.7Z\" fill-rule=\"evenodd\" />\n        <path d=\"M276.4 255.9c0 0-10.7-12.4-10.7-12.4c0 0-18.1 20.1-18.1 20.1c0 0 14.9 20.6 14.9 20.6c0 0 1.2 10.7 1.2 10.7c0 0 26.8 0 26.8 0c0 0 0-11.5 0-11.5c0 0 14.6-19.6 14.6-19.6c0 0-17.9-18.6-17.9-18.6c0 0-10.8 10.7-10.8 10.7Z\" />\n      </g>\n      <path stroke=\"#000\" stroke-width=\"30\" d=\"M0-277.5c153.1 0 277.5 124.4 277.5 277.5c0 153.1-124.4 277.5-277.5 277.5c-153.1 0-277.5-124.4-277.5-277.5c0-153.1 124.4-277.5 277.5-277.5Z\" fill=\"none\" display=\"block\" transform=\"translate(411.2,307.1) scale(.977,.977)\" />\n    </g>\n    <g opacity=\"0\" transform=\"translate(0,0) scale(.1,.1)\">\n      <g display=\"block\" mask=\"url(#").concat(iconPrefix, "_reverse_Mask-12)\" transform=\"translate(20.3,-20.3)\">\n        <path d=\"M224.2 478.3c0 0-210.6 210.5-210.6 210.5c0 0 20.4 20.4 20.4 20.4c0 0 210.7-210.7 210.7-210.7c-11.7-11-5.9-6-20.5-20.2Z\" />\n      </g>\n      <g display=\"block\" mask=\"url(#").concat(iconPrefix, "_reverse_Mask-13)\">\n        <path d=\"M446 390.8c0 0 3.5 .2 3.5 .2c0 0 .2 7.3 .2 7.3c.1 0 14.2 0 14.2 0c0 0 0-7.3 0-7.3c0 0 4-0.2 4-0.2c0 0 0-13.5 0-13.5c0 0-21.9 0-21.9 0c0 0 0 13.5 0 13.5Z\" />\n        <path d=\"M287.9 414.4c0 0-11.5 11.6-11.5 11.6c0 0-18.5-18.8-18.5-18.8c0 0-20.3 20.5-20.3 20.5c0 0 18.5 18.7 18.5 18.7c0 0-62.5 62.4-62.5 62.4c0 0 20.4 20.4 20.4 20.4c0 0 62.4-62.4 62.4-62.4c0 0 18.7 18.7 18.7 18.7c0 0 20.2-20 20.2-20c0 0-18.5-19.1-18.5-19.1c0 0 11.9-11.8 11.9-11.8c0 0-20.8-20.2-20.8-20.2Z\" />\n        <path d=\"M502.8 199.6c-13.4-10-30.1-15.8-48.1-15.8c-44.7 0-81 36.2-81 81c0 44.7 36.3 81 81 81c44.8 0 81-36.3 81-81h-28.8c0 28.8-23.3 52.2-52.2 52.2c-8.2 0-16-1.9-22.9-5.3l22.4-22.4l-20.4-20.4l-23.4 23.4c-5-8-7.9-17.4-7.9-27.5c0-28.9 23.4-52.2 52.2-52.2c10.1 0 19.4 2.8 27.4 7.7Z\" fill-rule=\"evenodd\" />\n        <path d=\"M276.4 259.4c0 0-4.5-5.2-4.5-5.2c0 0-10.7 12.1-10.7 12.1c0 0 6.9 10.1 6.9 10.1c0 0 .8 4.5 .8 4.5c0 0 16 0 16 0c0 0 0-5 0-5c0 0 6.7-9.4 6.7-9.4c0 0-10.6-11.2-10.6-11.2c0 0-4.6 4.1-4.6 4.1Z\" />\n      </g>\n      <path stroke=\"#000\" stroke-width=\"30\" d=\"M0-272.5c150.4 0 272.5 122.1 272.5 272.5c0 150.4-122.1 272.5-272.5 272.5c-150.4 0-272.5-122.1-272.5-272.5c0-150.4 122.1-272.5 272.5-272.5Z\" fill=\"none\" display=\"block\" transform=\"translate(414.9,303.7) scale(.977,.977)\" />\n    </g>\n    <g opacity=\"0\" transform=\"translate(0,0) scale(.1,.1)\">\n      <g display=\"block\" mask=\"url(#").concat(iconPrefix, "_reverse_Mask-14)\" transform=\"translate(13.4,-13.4)\">\n        <path d=\"M224.2 478.3c0 0-210.6 210.5-210.6 210.5c0 0 20.4 20.4 20.4 20.4c0 0 210.7-210.7 210.7-210.7c-11.7-11-5.9-6-20.5-20.2Z\" />\n      </g>\n      <g display=\"block\" mask=\"url(#").concat(iconPrefix, "_reverse_Mask-15)\">\n        <path d=\"M453.6 388.1c0 0 .7 0 .7 0c0 0 .1 1.7 .1 1.7c0 0 4.7 0 4.7 0c0 0 0-1.7 0-1.7c0 0 1 0 1 0c0 0 0-4.5 0-4.5c0 0-6.5 0-6.5 0c0 0 0 4.5 0 4.5Z\" />\n        <path d=\"M280.8 421.5c0 0-4.4 4.5-4.4 4.5c0 0-5.5-5.9-5.5-5.9c0 0-20.3 20.6-20.3 20.6c0 0 5.5 5.7 5.5 5.7c0 0-62.5 62.4-62.5 62.4c0 0 20.4 20.4 20.4 20.4c0 0 62.4-62.4 62.4-62.4c0 0 5.8 5.7 5.8 5.7c0 0 20.1-19.9 20.1-19.9c0 0-5.5-6.2-5.5-6.2c0 0 4.8-4.6 4.8-4.6c0 0-20.8-20.3-20.8-20.3Z\" />\n        <path d=\"M502.8 199.6c-13.4-10-30.1-15.8-48.1-15.8c-44.7 0-81 36.2-81 81c0 44.7 36.3 81 81 81c44.8 0 81-36.3 81-81h-28.8c0 28.8-23.3 52.2-52.2 52.2c-8.2 0-16-1.9-22.9-5.3l11.9-11.9l-20.4-20.3l-12.9 12.8c-5-8-7.9-17.4-7.9-27.5c0-28.9 23.4-52.2 52.2-52.2c10.1 0 19.4 2.8 27.4 7.7Z\" fill-rule=\"evenodd\" />\n        <path d=\"M276.4 262.9c0 0-1-1.2-1-1.2c0 0-3.6 4-3.6 4c0 0 1.9 2.8 1.9 2.8c0 0 .2 1.1 .2 1.1c0 0 5.4 0 5.4 0c0 0 0-1.2 0-1.2c0 0 1.7-2.6 1.7-2.6c0 0-3.5-3.7-3.5-3.7c0 0-1.1 .8-1.1 .8Z\" />\n      </g>\n      <path stroke=\"#000\" stroke-width=\"30\" d=\"M0-268.8c148.4 0 268.8 120.4 268.8 268.8c0 148.4-120.4 268.8-268.8 268.8c-148.4 0-268.8-120.4-268.8-268.8c0-148.4 120.4-268.8 268.8-268.8Z\" fill=\"none\" display=\"block\" transform=\"translate(417.6,301.3) scale(.977,.977)\" />\n    </g>\n    <g opacity=\"0\" transform=\"translate(0,0) scale(.1,.1)\">\n      <g display=\"block\" mask=\"url(#").concat(iconPrefix, "_reverse_Mask-16)\" transform=\"translate(7.3,-7.3)\">\n        <path d=\"M224.2 478.3c0 0-210.6 210.5-210.6 210.5c0 0 20.4 20.4 20.4 20.4c0 0 210.7-210.7 210.7-210.7c-11.7-11-5.9-6-20.5-20.2Z\" />\n      </g>\n      <g display=\"block\" mask=\"url(#").concat(iconPrefix, "_reverse_Mask-17)\">\n        <path d=\"M275.4 426.9c0 0-19.3 19.5-19.3 19.5c0 0-62.5 62.4-62.5 62.4c0 0 20.4 20.4 20.4 20.4c0 0 62.4-62.4 62.4-62.4c0 0 19.9-19.7 19.9-19.7c0 0-20.9-20.2-20.9-20.2Z\" />\n        <path d=\"M411.4 291.3l20.7 20.7l.1-0.1c6.8 3.2 14.5 5.1 22.5 5.1c28.9 0 52.2-23.4 52.2-52.2h28.8c0 44.7-36.2 81-81 81c-44.7 0-81-36.3-81-81c0-44.8 36.3-81 81-81c18 0 21.9 6.3 35.3 16.2l-7.9 20.3c-8-4.9-17.3-7.7-27.4-7.7c-28.8 0-52.2 23.3-52.2 52.2c0 10.1 2.9 19.5 7.9 27.5Z\" fill-rule=\"evenodd\" />\n      </g>\n      <path stroke=\"#000\" stroke-width=\"30\" d=\"M0-265.6c146.6 0 265.6 119 265.6 265.6c0 146.6-119 265.6-265.6 265.6c-146.6 0-265.6-119-265.6-265.6c0-146.6 119-265.6 265.6-265.6Z\" fill=\"none\" display=\"block\" transform=\"translate(420,299.1) scale(.977,.977)\" />\n    </g>\n    <g opacity=\"0\" transform=\"translate(0,0) scale(.1,.1)\">\n      <g display=\"block\" mask=\"url(#").concat(iconPrefix, "_reverse_Mask-18)\" transform=\"translate(4,-4)\">\n        <path d=\"M224.2 478.3c0 0-210.6 210.5-210.6 210.5c0 0 20.4 20.4 20.4 20.4c0 0 210.7-210.7 210.7-210.7c-11.7-11-5.9-6-20.5-20.2Z\" />\n      </g>\n      <g display=\"block\" mask=\"url(#").concat(iconPrefix, "_reverse_Mask-19)\">\n        <path d=\"M265.4 437.1c0 0-9.3 9.3-9.3 9.3c0 0-62.5 62.4-62.5 62.4c0 0 20.4 20.4 20.4 20.4c0 0 62.4-62.4 62.4-62.4c0 0 9.8-9.6 9.8-9.6c0 0-20.8-20.1-20.8-20.1Z\" />\n        <path d=\"M403 299.3l20.9 20.9l8.3-8.3c6.8 3.2 14.5 5.1 22.5 5.1c28.9 0 52.2-23.4 52.2-52.2h28.8c0 44.7-36.2 81-81 81c-44.7 0-81-36.3-81-81c0-44.8 36.3-81 81-81c18 0 34.6 5.8 48.1 15.8l-20.7 20.7c-8-4.9-17.3-7.7-27.4-7.7c-28.8 0-52.2 23.3-52.2 52.2c0 10 2.9 19.3 7.8 27.3Z\" fill-rule=\"evenodd\" />\n      </g>\n      <path stroke=\"#000\" stroke-width=\"30\" d=\"M0-263.8c145.6 0 263.8 118.2 263.8 263.8c0 145.6-118.2 263.8-263.8 263.8c-145.6 0-263.8-118.2-263.8-263.8c0-145.6 118.2-263.8 263.8-263.8Z\" fill=\"none\" display=\"block\" transform=\"translate(421.2,297.8) scale(.977,.977)\" />\n    </g>\n    <g clip-path=\"url(#").concat(iconPrefix, "_reverse_ClipPath-1)\" opacity=\"0\" transform=\"translate(0,0) scale(.1,.1)\">\n      <g display=\"block\" mask=\"url(#").concat(iconPrefix, "_reverse_Mask-20)\">\n        <path d=\"M224.2 478.3c0 0-210.6 210.5-210.6 210.5c0 0 20.4 20.4 20.4 20.4c0 0 210.7-210.7 210.7-210.7c-11.7-11-5.9-6-20.5-20.2Z\" />\n      </g>\n      <path stroke=\"#000\" stroke-width=\"30\" d=\"M0-261.7c144.4 0 261.7 117.3 261.7 261.7c0 144.4-117.3 261.7-261.7 261.7c-144.4 0-261.7-117.3-261.7-261.7c0-144.4 117.3-261.7 261.7-261.7Z\" fill=\"none\" display=\"block\" transform=\"translate(422.8,296.4) scale(.977,.977)\" />\n    </g>");
    }
  });

  var yextAnimatedReverse = new SVGIcon({
    name: 'yext_animated_forward',
    viewBox: '0 0 72 72',
    complexContents: function complexContents() {
      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var iconPrefix = params.iconPrefix || 'yxt';
      return "<defs>\n      <mask id=\"".concat(iconPrefix, "_forward_Mask-1\">\n        <rect fill=\"#fff\" width=\"720\" height=\"720\" />\n      </mask>\n      <mask id=\"").concat(iconPrefix, "_forward_Mask-2\">\n        <rect x=\"-144.3\" y=\"144.3\" fill=\"#fff\" width=\"720\" height=\"720\" />\n        <path d=\"M-0.3 .1c0 0 1.3 1.2 1.3 1.2c0 0 .3-1.6 .3-1.6c0 0-1.6 .4-1.6 .4\" />\n        <path fill=\"#fff\" d=\"M.3 .7c0 0-0.3 .3-0.3 .3c0 0 0 0 0 0c0 0 .3-0.3 .3-0.3c0 0 0 0 0 0\" />\n        <path d=\"M.3 .7c0 0-0.1 0-0.1 0c0 0 .1 .1 .1 .1c0 0 .1-0.1 .1-0.1c0 0-0.1 0-0.1 0m222.8 469.1c0 0-70.5 69.4-70.5 69.4c0 0 34.1 33.5 34.1 33.5c0 0 67-72.9 67-72.9c0 0-30.6-30-30.6-30\" />\n      </mask>\n      <mask id=\"").concat(iconPrefix, "_forward_Mask-3\">\n        <rect fill=\"#fff\" width=\"720\" height=\"720\" />\n        <path d=\"M489.8 277.4c0 0 78 18.8 78 18.8c0 0-96.1 61.5-96.1 61.5c0 0 59.6-41.1 59.6-41.1c0 0 10.6-53.8 10.6-53.8c0 0-38.2 .6-38.2 .6c0 0-13.9 14-13.9 14m-67.8-108.1c0 0 73.9 1.3 73.9 1.3c0 0-33.8 54.5-33.8 54.5c0 0 18.6-3.2 18.6-3.2c0 0 35.4-36.5 35.4-36.5c0 0-62-25.9-62-25.9c0 0-32.1 9.8-32.1 9.8\" />\n      </mask>\n      <mask id=\"").concat(iconPrefix, "_forward_Mask-4\">\n        <rect x=\"-91.1\" y=\"91.1\" fill=\"#fff\" width=\"720\" height=\"720\" />\n        <path d=\"M-0.3 .1c0 0 1.3 1.2 1.3 1.2c0 0 .3-1.6 .3-1.6c0 0-1.6 .4-1.6 .4\" />\n        <path fill=\"#fff\" d=\"M.3 .7c0 0-0.3 .3-0.3 .3c0 0 0 0 0 0c0 0 .3-0.3 .3-0.3c0 0 0 0 0 0\" />\n        <path d=\"M.3 .7c0 0-0.1 0-0.1 0c0 0 .1 .1 .1 .1c0 0 .1-0.1 .1-0.1c0 0-0.1 0-0.1 0m222.8 469.1c0 0-70.5 69.4-70.5 69.4c0 0 34.1 33.5 34.1 33.5c0 0 67-72.9 67-72.9c0 0-30.6-30-30.6-30\" />\n      </mask>\n      <mask id=\"").concat(iconPrefix, "_forward_Mask-5\">\n        <rect fill=\"#fff\" width=\"720\" height=\"720\" />\n        <path d=\"M488.4 291.4c0 0 40.5 39.3 40.5 39.3c0 0-57.2 27-57.2 27c0 0 59.6-41.1 59.6-41.1c0 0 10.6-53.8 10.6-53.8c0 0-38.2 .6-38.2 .6c0 0-15.3 28-15.3 28m-90.5-97.4c0 0 52-11.3 52-11.3c0 0-6 45.2-6 45.2c0 0 36.8-6 36.8-6c0 0 39.3-31.9 39.3-31.9c0 0-65.9-30.5-65.9-30.5c0 0-56.2 34.5-56.2 34.5\" />\n      </mask>\n      <mask id=\"").concat(iconPrefix, "_forward_Mask-6\">\n        <rect x=\"-61.3\" y=\"61.3\" fill=\"#fff\" width=\"720\" height=\"720\" />\n      </mask>\n      <mask id=\"").concat(iconPrefix, "_forward_Mask-7\">\n        <rect fill=\"#fff\" width=\"720\" height=\"720\" />\n        <path d=\"M481.8 298.4c0 0 27.5 39.8 27.5 39.8c0 0-37.6 19.5-37.6 19.5c0 0 59.6-41.1 59.6-41.1c0 0 10.6-53.8 10.6-53.8c0 0-38.2 .6-38.2 .6c0 0-21.9 35-21.9 35m-108.1-79.7c0 0 30.2-23.8 30.2-23.8c0 0 21.7 35.9 21.7 35.9c0 0 55.1-8.9 55.1-8.9c0 0 35.4-36.5 35.4-36.5c0 0-62-25.9-62-25.9c0 0-80.4 59.2-80.4 59.2\" />\n      </mask>\n      <mask id=\"").concat(iconPrefix, "_forward_Mask-8\">\n        <rect x=\"-42.6\" y=\"42.6\" fill=\"#fff\" width=\"720\" height=\"720\" />\n      </mask>\n      <mask id=\"").concat(iconPrefix, "_forward_Mask-9\">\n        <rect fill=\"#fff\" width=\"720\" height=\"720\" />\n        <path d=\"M475.2 305.4c0 0 14.5 40.3 14.5 40.3c0 0-18 12-18 12c0 0 59.6-41.1 59.6-41.1c0 0 10.6-53.8 10.6-53.8c0 0-38.2 .6-38.2 .6c0 0-28.5 42-28.5 42m-113.6-74.3c0 0 17.9-18.5 17.9-18.5c0 0 36.4 25.3 36.4 25.3c0 0 64.8-16 64.8-16c0 0 39.3-31.9 39.3-31.9c0 0-65.9-30.5-65.9-30.5c0 0-92.5 71.6-92.5 71.6\" />\n      </mask>\n      <mask id=\"").concat(iconPrefix, "_forward_Mask-10\">\n        <rect x=\"-29.6\" y=\"29.6\" fill=\"#fff\" width=\"720\" height=\"720\" />\n      </mask>\n      <mask id=\"").concat(iconPrefix, "_forward_Mask-11\">\n        <rect fill=\"#fff\" width=\"720\" height=\"720\" />\n        <path d=\"M468.6 312.4c0 0 1.5 40.8 1.5 40.8c0 0 1.6 4.5 1.6 4.5c0 0 59.6-41.1 59.6-41.1c0 0 10.6-53.8 10.6-53.8c0 0-38.2 .6-38.2 .6c0 0-35.1 49-35.1 49m-107-81.3c0 0 15.1 4.9 15.1 4.9c0 0 38.2 13.3 38.2 13.3c0 0 65.8-27.4 65.8-27.4c0 0 39.3-21.9 39.3-21.9c0 0-65.9-40.5-65.9-40.5c0 0-92.5 71.6-92.5 71.6\" />\n      </mask>\n      <mask id=\"").concat(iconPrefix, "_forward_Mask-12\">\n        <rect x=\"-20.3\" y=\"20.3\" fill=\"#fff\" width=\"720\" height=\"720\" />\n      </mask>\n      <mask id=\"").concat(iconPrefix, "_forward_Mask-13\">\n        <rect fill=\"#fff\" width=\"720\" height=\"720\" />\n        <path d=\"M456.6 311.9c0 0-7 35.6-7 35.6c0 0 22.1 10.2 22.1 10.2c0 0 59.6-41.1 59.6-41.1c0 0 10.6-53.8 10.6-53.8c0 0-38.2 .6-38.2 .6c0 0-47.1 48.5-47.1 48.5m-95-80.8c0 0 12.3 28.3 12.3 28.3c0 0 39.9 1.3 39.9 1.3c0 0 66.9-38.8 66.9-38.8c0 0 39.3-21.9 39.3-21.9c0 0-65.9-40.5-65.9-40.5c0 0-92.5 71.6-92.5 71.6\" />\n      </mask>\n      <mask id=\"").concat(iconPrefix, "_forward_Mask-14\">\n        <rect x=\"-13.4\" y=\"13.4\" fill=\"#fff\" width=\"720\" height=\"720\" />\n      </mask>\n      <mask id=\"").concat(iconPrefix, "_forward_Mask-15\">\n        <rect fill=\"#fff\" width=\"720\" height=\"720\" />\n        <path d=\"M444.6 311.4c0 0-15.6 30.5-15.6 30.5c0 0 42.7 15.8 42.7 15.8c0 0 59.6-41.1 59.6-41.1c0 0 10.6-53.8 10.6-53.8c0 0-38.2 .6-38.2 .6c0 0-59.1 48-59.1 48m-83-80.3c0 0 9.5 51.7 9.5 51.7c0 0 41.7-10.8 41.7-10.8c0 0 67.9-50.1 67.9-50.1c0 0 50.6-31.9 50.6-31.9c0 0-77.2-30.5-77.2-30.5c0 0-92.5 71.6-92.5 71.6\" />\n      </mask>\n      <mask id=\"").concat(iconPrefix, "_forward_Mask-16\">\n        <rect x=\"-7.3\" y=\"7.3\" fill=\"#fff\" width=\"720\" height=\"720\" />\n      </mask>\n      <mask id=\"").concat(iconPrefix, "_forward_Mask-17\">\n        <rect fill=\"#fff\" width=\"720\" height=\"720\" />\n        <path d=\"M432.6 310.9c0 0-24.2 25.3-24.2 25.3c0 0 63.3 21.5 63.3 21.5c0 0 59.6-41.1 59.6-41.1c0 0 10.6-53.8 10.6-53.8c0 0-38.2 .6-38.2 .6c0 0-71.1 47.5-71.1 47.5m-71-79.8c0 0 20.3 90.4 20.3 90.4c0 0 29-29.5 29-29.5c0 0 69.8-70.1 69.8-70.1c0 0 35.4-36.5 35.4-36.5c0 0-62-25.9-62-25.9c0 0-92.5 71.6-92.5 71.6\" />\n      </mask>\n      <mask id=\"").concat(iconPrefix, "_forward_Mask-18\">\n        <rect x=\"-4\" y=\"4\" fill=\"#fff\" width=\"720\" height=\"720\" />\n      </mask>\n      <mask id=\"").concat(iconPrefix, "_forward_Mask-19\">\n        <rect fill=\"#fff\" width=\"720\" height=\"720\" />\n        <path d=\"M432.6 310.9c0 0-24.2 25.3-24.2 25.3c0 0 63.3 21.5 63.3 21.5c0 0 59.6-41.1 59.6-41.1c0 0 10.6-53.8 10.6-53.8c0 0-38.2 .6-38.2 .6c0 0-71.1 47.5-71.1 47.5m-71-79.8c0 0 20.3 90.4 20.3 90.4c0 0 29-29.5 29-29.5c0 0 69.8-70.1 69.8-70.1c0 0 39.3-31.9 39.3-31.9c0 0-65.9-30.5-65.9-30.5c0 0-92.5 71.6-92.5 71.6\" />\n      </mask>\n      <mask id=\"").concat(iconPrefix, "_forward_Mask-20\">\n        <rect fill=\"#fff\" width=\"720\" height=\"720\" />\n      </mask>\n      <clipPath id=\"").concat(iconPrefix, "_forward_ClipPath-1\">\n        <rect width=\"720\" height=\"720\" />\n      </clipPath>\n    </defs>\n    <g transform=\"translate(0,0) scale(.1,.1)\">\n      <g mask=\"url(#").concat(iconPrefix, "_forward_Mask-1)\">\n        <path d=\"M377.5 395.3c0 0 64.8 0 64.8 0c0 0 0 129.6 0 129.6c0 0 28.8 0 28.8 0c0 0 0-129.6 0-129.6c0 0 64.8 0 64.8 0c0 0 0-28.8 0-28.8c0 0-158.4 0-158.4 0c0 0 0 28.8 0 28.8Z\" />\n        <path d=\"M338.9 363.6c0 0-62.5 62.4-62.5 62.4c0 0-62.4-62.4-62.4-62.4c0 0-20.4 20.4-20.4 20.4c0 0 62.5 62.4 62.5 62.4c0 0-62.5 62.4-62.5 62.4c0 0 20.4 20.4 20.4 20.4c0 0 62.4-62.4 62.4-62.4c0 0 62.5 62.4 62.5 62.4c0 0 20.3-20.4 20.3-20.4c0 0-62.4-62.4-62.4-62.4c0 0 62.4-62.4 62.4-62.4c0 0-20.3-20.4-20.3-20.4Z\" />\n        <path d=\"M454.7 345.8c44.8 0 81-36.3 81-81c0 0-28.8 0-28.8 0c0 28.8-23.3 52.2-52.2 52.2c-8.2 0-16-1.9-22.9-5.3c0 0 69.8-69.9 69.8-69.9c0 0 21.1-21 21.1-21c-14.4-22.3-39.5-37-68-37c-44.7 0-81 36.2-81 81c0 44.7 36.3 81 81 81Zm0-133.2c10.2 0 19.6 2.9 27.6 7.9c0 0-71.9 71.8-71.9 71.8c-5-8-7.9-17.4-7.9-27.5c0-28.9 23.4-52.2 52.2-52.2Z\" />\n        <path d=\"M276.4 255.9c0 0-60.7-72.8-60.7-72.8c0 0-22.1 18.6-22.1 18.6c0 0 68.4 82 68.4 82c0 0 0 62.4 0 62.4c0 0 28.8 0 28.8 0c0 0 0-62.6 0-62.6c0 0 68.4-81.8 68.4-81.8c0 0-22-18.6-22-18.6c0 0-60.8 72.8-60.8 72.8Z\" />\n      </g>\n      <path stroke=\"#000\" stroke-width=\"30\" d=\"M0-353.7c195.2 0 353.7 158.5 353.7 353.7c0 195.2-158.5 353.7-353.7 353.7c-195.2 0-353.7-158.5-353.7-353.7c0-195.2 158.5-353.7 353.7-353.7Z\" fill=\"none\" transform=\"translate(359.8,360.4) scale(.977,.977)\" />\n    </g>\n    <g opacity=\"0\" transform=\"translate(0,0) scale(.1,.1)\">\n      <g display=\"block\" mask=\"url(#").concat(iconPrefix, "_forward_Mask-2)\" transform=\"translate(144.3,-144.3)\">\n        <path d=\"M224.2 478.3c0 0-210.6 210.5-210.6 210.5c0 0 20.4 20.4 20.4 20.4c0 0 210.7-210.7 210.7-210.7c-11.7-11-5.9-6-20.5-20.2Z\" />\n      </g>\n      <g display=\"block\" mask=\"url(#").concat(iconPrefix, "_forward_Mask-3)\">\n        <path d=\"M390.6 395.2c0 0 51.7 .1 51.7 .1c0 0 .1 103.6 .1 103.6c0 0 28.7 0 28.7 0c0 0 0-103.6 0-103.6c0 0 52-0.1 52-0.1c0 0 0-28.4 0-28.4c0 0-132.5 0-132.5 0c0 0 0 28.4 0 28.4Z\" />\n        <path d=\"M329 373.4c0 .1-52.6 52.6-52.6 52.6c0 0-62.4-62.4-62.4-62.4c0 0-20.4 20.4-20.4 20.4c0 0 62.5 62.4 62.5 62.4c0 0-62.5 62.4-62.5 62.4c0 0 20.4 20.4 20.4 20.4c0 0 62.4-62.4 62.4-62.4c0 0 62.5 62.4 62.5 62.4c0 0 20.3-20.4 20.3-20.4c0 0-62.4-62.4-62.4-62.4c0 0 52.6-52.6 52.6-52.6c0 0-20.4-20.3-20.4-20.3Z\" />\n        <path d=\"M454.7 345.8c44.8 0 81-36.3 81-81c0 0-28.8 0-28.8 0c0 28.8-23.3 52.2-52.2 52.2c-8.2 0-16-1.9-22.9-5.3c0 0 69.8-69.9 69.8-69.9c0 0 21.1-21 21.1-21c-14.4-22.3-39.5-37-68-37c-44.7 0-81 36.2-81 81c0 44.7 36.3 81 81 81Zm0-133.2c10.2 0 19.6 2.9 27.6 7.9c0 0-71.9 71.8-71.9 71.8c-5-8-7.9-17.4-7.9-27.5c0-28.9 23.4-52.2 52.2-52.2Z\" />\n        <path d=\"M276.4 255.9c0 0-48.7-58.3-48.7-58.3c0 0-21.1 19-21.1 19c0 0 55.5 67.2 55.5 67.2c0 0 .3 50 .3 50c0 0 28.4 0 28.4 0c0 0 0-50.3 0-50.3c0 0 55.4-66.9 55.4-66.9c0 0-21-18.6-21-18.6c0 0-48.8 57.9-48.8 57.9Z\" />\n      </g>\n      <path stroke=\"#000\" stroke-width=\"30\" d=\"M0-336.2c185.6 0 336.2 150.6 336.2 336.2c0 185.6-150.6 336.2-336.2 336.2c-185.6 0-336.2-150.6-336.2-336.2c0-185.6 150.6-336.2 336.2-336.2Z\" fill=\"none\" display=\"block\" transform=\"translate(370.8,347.5) scale(.977,.977)\" />\n    </g>\n    <g opacity=\"0\" transform=\"translate(0,0) scale(.1,.1)\">\n      <g mask=\"url(#").concat(iconPrefix, "_forward_Mask-4)\" transform=\"translate(91.1,-91.1)\">\n        <path d=\"M224.2 478.3c0 0-210.6 210.5-210.6 210.5c0 0 20.4 20.4 20.4 20.4c0 0 210.7-210.7 210.7-210.7c-11.7-11-5.9-6-20.5-20.2Z\" />\n      </g>\n      <g mask=\"url(#").concat(iconPrefix, "_forward_Mask-5)\">\n        <path d=\"M409.7 395.1c0 0 32.6 .2 32.6 .2c0 0 .3 65.5 .3 65.5c0 0 28.5 0 28.5 0c0 0 0-65.5 0-65.5c0 0 33.1-0.2 33.1-0.2c0 0 0-27.8 0-27.8c0 0-94.5 0-94.5 0c0 0 0 27.8 0 27.8Z\" />\n        <path d=\"M319.7 382.8c0 0-43.3 43.2-43.3 43.2c0 0-62.4-62.4-62.4-62.4c0 0-20.4 20.4-20.4 20.4c0 0 62.5 62.4 62.5 62.4c0 0-62.5 62.4-62.5 62.4c0 0 20.4 20.4 20.4 20.4c0 0 62.4-62.4 62.4-62.4c0 0 62.5 62.4 62.5 62.4c0 0 20.3-20.4 20.3-20.4c0 0-62.4-62.4-62.4-62.4c0 0 43.4-43.3 43.4-43.3c0 0-20.5-20.3-20.5-20.3Z\" />\n        <path d=\"M502.8 199.6c-13.4-9.9-30-15.8-48.1-15.8c-44.7 0-81 36.2-81 81c0 44.7 36.3 81 81 81c44.8 0 81-36.3 81-81h-28.8c0 28.8-23.3 52.2-52.2 52.2c-8.2 0-16-1.9-22.9-5.3l69.8-69.9l.3-0.2l-20.3-20.4l-71.2 71.1c-5-8-7.9-17.4-7.9-27.5c0-28.9 23.4-52.2 52.2-52.2c10.1 0 19.4 2.8 27.4 7.7Z\" fill-rule=\"evenodd\" />\n        <path d=\"M276.4 255.9c0 0-31.1-37-31.1-37c0 0-19.7 19.5-19.7 19.5c0 0 36.7 45.6 36.7 45.6c0 0 .7 31.8 .7 31.8c0 0 27.7 0 27.7 0c0 0 0-32.4 0-32.4c0 0 36.5-44.9 36.5-44.9c0 0-19.6-18.6-19.6-18.6c0 0-31.2 36-31.2 36Z\" />\n      </g>\n      <path stroke=\"#000\" stroke-width=\"30\" d=\"M0-310c171.1 0 310 138.9 310 310c0 171.1-138.9 310-310 310c-171.1 0-310-138.9-310-310c0-171.1 138.9-310 310-310Z\" fill=\"none\" transform=\"translate(387.8,328.7) scale(.977,.977)\" />\n    </g>\n    <g opacity=\"0\" transform=\"translate(0,0) scale(.1,.1)\">\n      <g display=\"block\" mask=\"url(#").concat(iconPrefix, "_forward_Mask-6)\" transform=\"translate(61.3,-61.3)\">\n        <path d=\"M224.2 478.3c0 0-210.6 210.5-210.6 210.5c0 0 20.4 20.4 20.4 20.4c0 0 210.7-210.7 210.7-210.7c-11.7-11-5.9-6-20.5-20.2Z\" />\n      </g>\n      <g mask=\"url(#").concat(iconPrefix, "_forward_Mask-7)\">\n        <path d=\"M420.4 395c0 0 21.9 .3 21.9 .3c0 0 .4 44.1 .4 44.1c0 0 28.4 0 28.4 0c0 0 0-44.1 0-44.1c0 0 22.6-0.3 22.6-0.3c0 0 0-27.5 0-27.5c0 0-73.3 0-73.3 0c0 0 0 27.5 0 27.5Z\" />\n        <path d=\"M313.2 389.2c0 0-36.8 36.8-36.8 36.8c0 0-62.4-62.4-62.4-62.4c0 0-20.4 20.4-20.4 20.4c0 0 62.5 62.4 62.5 62.4c0 0-62.5 62.4-62.5 62.4c0 0 20.4 20.4 20.4 20.4c0 0 62.4-62.4 62.4-62.4c0 0 62.5 62.4 62.5 62.4c0 0 20.3-20.4 20.3-20.4c0 0-62.4-62.4-62.4-62.4c0 0 37-36.9 37-36.9c0 0-20.6-20.3-20.6-20.3Z\" />\n        <path d=\"M500 200c-13.4-9.9-27.2-16.2-45.3-16.2c-44.7 0-81 36.2-81 81c0 44.7 36.3 81 81 81c44.8 0 81-36.3 81-81h-28.8c0 28.8-23.3 52.2-52.2 52.2c-8.2 0-16-1.9-22.9-5.3l57.7-57.7l-20.3-20.4l-58.8 58.7c-5-8-7.9-17.4-7.9-27.5c0-28.9 23.4-52.2 52.2-52.2c10.1 0 19.4 2.8 27.4 7.7Z\" fill-rule=\"evenodd\" />\n        <path d=\"M276.4 255.9c0 0-21.2-25.1-21.2-25.1c0 0-19 19.8-19 19.8c0 0 26.2 33.5 26.2 33.5c0 0 1 21.6 1 21.6c0 0 27.2 0 27.2 0c0 0 0-22.3 0-22.3c0 0 25.9-32.7 25.9-32.7c0 0-18.8-18.6-18.8-18.6c0 0-21.3 23.8-21.3 23.8Z\" />\n      </g>\n      <path stroke=\"#000\" stroke-width=\"30\" d=\"M0-294.3c162.4 0 294.3 131.9 294.3 294.3c0 162.4-131.9 294.3-294.3 294.3c-162.4 0-294.3-131.9-294.3-294.3c0-162.4 131.9-294.3 294.3-294.3Z\" fill=\"none\" display=\"block\" transform=\"translate(398.7,318.2) scale(.977,.977)\" />\n    </g>\n    <g opacity=\"0\" transform=\"translate(0,0) scale(.1,.1)\">\n      <g mask=\"url(#").concat(iconPrefix, "_forward_Mask-8)\" transform=\"translate(42.6,-42.6)\">\n        <path d=\"M224.2 478.3c0 0-210.6 210.5-210.6 210.5c0 0 20.4 20.4 20.4 20.4c0 0 210.7-210.7 210.7-210.7c-11.7-11-5.9-6-20.5-20.2Z\" />\n      </g>\n      <g display=\"block\" mask=\"url(#").concat(iconPrefix, "_forward_Mask-9)\">\n        <path d=\"M427.2 394.9c0 0 15.1 .4 15.1 .4c0 0 .4 30.7 .4 30.7c0 0 28.4 0 28.4 0c0 0 0-30.7 0-30.7c0 0 15.9-0.4 15.9-0.4c0 0 0-27.2 0-27.2c0 0-59.8 0-59.8 0c0 0 0 27.2 0 27.2Z\" />\n        <path d=\"M307.4 395c0 0-31 31-31 31c0 0-53.9-54-53.9-54c0 0-20.4 20.4-20.4 20.4c0 0 54 54 54 54c0 0-62.5 62.4-62.5 62.4c0 0 20.4 20.4 20.4 20.4c0 0 62.4-62.4 62.4-62.4c0 0 54 54 54 54c0 0 20.4-20.3 20.4-20.3c0 0-54-54.1-54-54.1c0 0 31.2-31.1 31.2-31.1c0 0-20.6-20.3-20.6-20.3Z\" />\n        <path d=\"M502.8 199.6c-13.4-9.9-30.1-15.8-48.1-15.8c-44.7 0-81 36.2-81 81c0 44.7 36.3 81 81 81c44.8 0 81-36.3 81-81h-28.8c0 28.8-23.3 52.2-52.2 52.2c-8.2 0-16-1.9-22.9-5.3l45.5-45.5l-20.4-20.4l-46.5 46.5c-5-8-7.9-17.4-7.9-27.5c0-28.9 23.4-52.2 52.2-52.2c10.1 0 19.4 2.8 27.4 7.7Z\" fill-rule=\"evenodd\" />\n        <path d=\"M276.4 255.9c0 0-15-17.6-15-17.6c0 0-18.4 20-18.4 20c0 0 19.4 25.8 19.4 25.8c0 0 1.2 15.2 1.2 15.2c0 0 27 0 27 0c0 0 0-15.9 0-15.9c0 0 19.1-24.9 19.1-24.9c0 0-18.2-18.7-18.2-18.7c0 0-15.1 16.1-15.1 16.1Z\" />\n      </g>\n      <path stroke=\"#000\" stroke-width=\"30\" d=\"M0-284.4c157 0 284.4 127.4 284.4 284.4c0 157-127.4 284.4-284.4 284.4c-157 0-284.4-127.4-284.4-284.4c0-157 127.4-284.4 284.4-284.4Z\" fill=\"none\" transform=\"translate(406.1,311.6) scale(.977,.977)\" />\n    </g>\n    <g opacity=\"0\" transform=\"translate(0,0) scale(.1,.1)\">\n      <g display=\"block\" mask=\"url(#").concat(iconPrefix, "_forward_Mask-10)\" transform=\"translate(29.6,-29.6)\">\n        <path d=\"M224.2 478.3c0 0-210.6 210.5-210.6 210.5c0 0 20.4 20.4 20.4 20.4c0 0 210.7-210.7 210.7-210.7c-11.7-11-5.9-6-20.5-20.2Z\" />\n      </g>\n      <g display=\"block\" mask=\"url(#").concat(iconPrefix, "_forward_Mask-11)\">\n        <path d=\"M436 393.5c0 0 8.7 .4 8.7 .4c0 0 .4 17.8 .4 17.8c0 0 23.6 0 23.6 0c0 0 0-17.8 0-17.8c0 0 9.4-0.4 9.4-0.4c0 0 0-22.6 0-22.6c0 0-42.1 0-42.1 0c0 0 0 22.6 0 22.6Z\" />\n        <path d=\"M297.2 405.2c0 0-20.8 20.8-20.8 20.8c0 0-35.4-35.6-35.4-35.6c0 0-20.3 20.5-20.3 20.5c0 0 35.4 35.5 35.4 35.5c0 0-62.5 62.4-62.5 62.4c0 0 20.4 20.4 20.4 20.4c0 0 62.4-62.4 62.4-62.4c0 0 35.6 35.5 35.6 35.5c0 0 20.2-20.2 20.2-20.2c0 0-35.4-35.7-35.4-35.7c0 0 21.1-21 21.1-21c0 0-20.7-20.2-20.7-20.2Z\" />\n        <path d=\"M502.8 199.6c-13.4-9.9-30.1-15.8-48.1-15.8c-44.7 0-81 36.2-81 81c0 44.7 36.3 81 81 81c44.8 0 81-36.3 81-81h-28.8c0 28.8-23.3 52.2-52.2 52.2c-8.2 0-16-1.9-22.9-5.3l33.7-33.7l-20.4-20.3l-34.7 34.6c-5-8-7.9-17.4-7.9-27.5c0-28.9 23.4-52.2 52.2-52.2c10.1 0 19.4 2.8 27.4 7.7Z\" fill-rule=\"evenodd\" />\n        <path d=\"M276.4 255.9c0 0-10.7-12.4-10.7-12.4c0 0-18.1 20.1-18.1 20.1c0 0 14.9 20.6 14.9 20.6c0 0 1.2 10.7 1.2 10.7c0 0 26.8 0 26.8 0c0 0 0-11.5 0-11.5c0 0 14.6-19.6 14.6-19.6c0 0-17.9-18.6-17.9-18.6c0 0-10.8 10.7-10.8 10.7Z\" />\n      </g>\n      <path stroke=\"#000\" stroke-width=\"30\" d=\"M0-277.5c153.1 0 277.5 124.4 277.5 277.5c0 153.1-124.4 277.5-277.5 277.5c-153.1 0-277.5-124.4-277.5-277.5c0-153.1 124.4-277.5 277.5-277.5Z\" fill=\"none\" display=\"block\" transform=\"translate(411.2,307.1) scale(.977,.977)\" />\n    </g>\n    <g opacity=\"0\" transform=\"translate(0,0) scale(.1,.1)\">\n      <g display=\"block\" mask=\"url(#").concat(iconPrefix, "_forward_Mask-12)\" transform=\"translate(20.3,-20.3)\">\n        <path d=\"M224.2 478.3c0 0-210.6 210.5-210.6 210.5c0 0 20.4 20.4 20.4 20.4c0 0 210.7-210.7 210.7-210.7c-11.7-11-5.9-6-20.5-20.2Z\" />\n      </g>\n      <g display=\"block\" mask=\"url(#").concat(iconPrefix, "_forward_Mask-13)\">\n        <path d=\"M446 390.8c0 0 3.5 .2 3.5 .2c0 0 .2 7.3 .2 7.3c.1 0 14.2 0 14.2 0c0 0 0-7.3 0-7.3c0 0 4-0.2 4-0.2c0 0 0-13.5 0-13.5c0 0-21.9 0-21.9 0c0 0 0 13.5 0 13.5Z\" />\n        <path d=\"M287.9 414.4c0 0-11.5 11.6-11.5 11.6c0 0-18.5-18.8-18.5-18.8c0 0-20.3 20.5-20.3 20.5c0 0 18.5 18.7 18.5 18.7c0 0-62.5 62.4-62.5 62.4c0 0 20.4 20.4 20.4 20.4c0 0 62.4-62.4 62.4-62.4c0 0 18.7 18.7 18.7 18.7c0 0 20.2-20 20.2-20c0 0-18.5-19.1-18.5-19.1c0 0 11.9-11.8 11.9-11.8c0 0-20.8-20.2-20.8-20.2Z\" />\n        <path d=\"M502.8 199.6c-13.4-10-30.1-15.8-48.1-15.8c-44.7 0-81 36.2-81 81c0 44.7 36.3 81 81 81c44.8 0 81-36.3 81-81h-28.8c0 28.8-23.3 52.2-52.2 52.2c-8.2 0-16-1.9-22.9-5.3l22.4-22.4l-20.4-20.4l-23.4 23.4c-5-8-7.9-17.4-7.9-27.5c0-28.9 23.4-52.2 52.2-52.2c10.1 0 19.4 2.8 27.4 7.7Z\" fill-rule=\"evenodd\" />\n        <path d=\"M276.4 259.4c0 0-4.5-5.2-4.5-5.2c0 0-10.7 12.1-10.7 12.1c0 0 6.9 10.1 6.9 10.1c0 0 .8 4.5 .8 4.5c0 0 16 0 16 0c0 0 0-5 0-5c0 0 6.7-9.4 6.7-9.4c0 0-10.6-11.2-10.6-11.2c0 0-4.6 4.1-4.6 4.1Z\" />\n      </g>\n      <path stroke=\"#000\" stroke-width=\"30\" d=\"M0-272.5c150.4 0 272.5 122.1 272.5 272.5c0 150.4-122.1 272.5-272.5 272.5c-150.4 0-272.5-122.1-272.5-272.5c0-150.4 122.1-272.5 272.5-272.5Z\" fill=\"none\" display=\"block\" transform=\"translate(414.9,303.7) scale(.977,.977)\" />\n    </g>\n    <g opacity=\"0\" transform=\"translate(0,0) scale(.1,.1)\">\n      <g display=\"block\" mask=\"url(#").concat(iconPrefix, "_forward_Mask-14)\" transform=\"translate(13.4,-13.4)\">\n        <path d=\"M224.2 478.3c0 0-210.6 210.5-210.6 210.5c0 0 20.4 20.4 20.4 20.4c0 0 210.7-210.7 210.7-210.7c-11.7-11-5.9-6-20.5-20.2Z\" />\n      </g>\n      <g display=\"block\" mask=\"url(#").concat(iconPrefix, "_forward_Mask-15)\">\n        <path d=\"M453.6 388.1c0 0 .7 0 .7 0c0 0 .1 1.7 .1 1.7c0 0 4.7 0 4.7 0c0 0 0-1.7 0-1.7c0 0 1 0 1 0c0 0 0-4.5 0-4.5c0 0-6.5 0-6.5 0c0 0 0 4.5 0 4.5Z\" />\n        <path d=\"M280.8 421.5c0 0-4.4 4.5-4.4 4.5c0 0-5.5-5.9-5.5-5.9c0 0-20.3 20.6-20.3 20.6c0 0 5.5 5.7 5.5 5.7c0 0-62.5 62.4-62.5 62.4c0 0 20.4 20.4 20.4 20.4c0 0 62.4-62.4 62.4-62.4c0 0 5.8 5.7 5.8 5.7c0 0 20.1-19.9 20.1-19.9c0 0-5.5-6.2-5.5-6.2c0 0 4.8-4.6 4.8-4.6c0 0-20.8-20.3-20.8-20.3Z\" />\n        <path d=\"M502.8 199.6c-13.4-10-30.1-15.8-48.1-15.8c-44.7 0-81 36.2-81 81c0 44.7 36.3 81 81 81c44.8 0 81-36.3 81-81h-28.8c0 28.8-23.3 52.2-52.2 52.2c-8.2 0-16-1.9-22.9-5.3l11.9-11.9l-20.4-20.3l-12.9 12.8c-5-8-7.9-17.4-7.9-27.5c0-28.9 23.4-52.2 52.2-52.2c10.1 0 19.4 2.8 27.4 7.7Z\" fill-rule=\"evenodd\" />\n        <path d=\"M276.4 262.9c0 0-1-1.2-1-1.2c0 0-3.6 4-3.6 4c0 0 1.9 2.8 1.9 2.8c0 0 .2 1.1 .2 1.1c0 0 5.4 0 5.4 0c0 0 0-1.2 0-1.2c0 0 1.7-2.6 1.7-2.6c0 0-3.5-3.7-3.5-3.7c0 0-1.1 .8-1.1 .8Z\" />\n      </g>\n      <path stroke=\"#000\" stroke-width=\"30\" d=\"M0-268.8c148.4 0 268.8 120.4 268.8 268.8c0 148.4-120.4 268.8-268.8 268.8c-148.4 0-268.8-120.4-268.8-268.8c0-148.4 120.4-268.8 268.8-268.8Z\" fill=\"none\" display=\"block\" transform=\"translate(417.6,301.3) scale(.977,.977)\" />\n    </g>\n    <g opacity=\"0\" transform=\"translate(0,0) scale(.1,.1)\">\n      <g display=\"block\" mask=\"url(#").concat(iconPrefix, "_forward_Mask-16)\" transform=\"translate(7.3,-7.3)\">\n        <path d=\"M224.2 478.3c0 0-210.6 210.5-210.6 210.5c0 0 20.4 20.4 20.4 20.4c0 0 210.7-210.7 210.7-210.7c-11.7-11-5.9-6-20.5-20.2Z\" />\n      </g>\n      <g display=\"block\" mask=\"url(#").concat(iconPrefix, "_forward_Mask-17)\">\n        <path d=\"M275.4 426.9c0 0-19.3 19.5-19.3 19.5c0 0-62.5 62.4-62.5 62.4c0 0 20.4 20.4 20.4 20.4c0 0 62.4-62.4 62.4-62.4c0 0 19.9-19.7 19.9-19.7c0 0-20.9-20.2-20.9-20.2Z\" />\n        <path d=\"M411.4 291.3l20.7 20.7l.1-0.1c6.8 3.2 14.5 5.1 22.5 5.1c28.9 0 52.2-23.4 52.2-52.2h28.8c0 44.7-36.2 81-81 81c-44.7 0-81-36.3-81-81c0-44.8 36.3-81 81-81c18 0 21.9 6.3 35.3 16.2l-7.9 20.3c-8-4.9-17.3-7.7-27.4-7.7c-28.8 0-52.2 23.3-52.2 52.2c0 10.1 2.9 19.5 7.9 27.5Z\" fill-rule=\"evenodd\" />\n      </g>\n      <path stroke=\"#000\" stroke-width=\"30\" d=\"M0-265.6c146.6 0 265.6 119 265.6 265.6c0 146.6-119 265.6-265.6 265.6c-146.6 0-265.6-119-265.6-265.6c0-146.6 119-265.6 265.6-265.6Z\" fill=\"none\" display=\"block\" transform=\"translate(420,299.1) scale(.977,.977)\" />\n    </g>\n    <g opacity=\"0\" transform=\"translate(0,0) scale(.1,.1)\">\n      <g display=\"block\" mask=\"url(#").concat(iconPrefix, "_forward_Mask-18)\" transform=\"translate(4,-4)\">\n        <path d=\"M224.2 478.3c0 0-210.6 210.5-210.6 210.5c0 0 20.4 20.4 20.4 20.4c0 0 210.7-210.7 210.7-210.7c-11.7-11-5.9-6-20.5-20.2Z\" />\n      </g>\n      <g display=\"block\" mask=\"url(#").concat(iconPrefix, "_forward_Mask-19)\">\n        <path d=\"M265.4 437.1c0 0-9.3 9.3-9.3 9.3c0 0-62.5 62.4-62.5 62.4c0 0 20.4 20.4 20.4 20.4c0 0 62.4-62.4 62.4-62.4c0 0 9.8-9.6 9.8-9.6c0 0-20.8-20.1-20.8-20.1Z\" />\n        <path d=\"M403 299.3l20.9 20.9l8.3-8.3c6.8 3.2 14.5 5.1 22.5 5.1c28.9 0 52.2-23.4 52.2-52.2h28.8c0 44.7-36.2 81-81 81c-44.7 0-81-36.3-81-81c0-44.8 36.3-81 81-81c18 0 34.6 5.8 48.1 15.8l-20.7 20.7c-8-4.9-17.3-7.7-27.4-7.7c-28.8 0-52.2 23.3-52.2 52.2c0 10 2.9 19.3 7.8 27.3Z\" fill-rule=\"evenodd\" />\n      </g>\n      <path stroke=\"#000\" stroke-width=\"30\" d=\"M0-263.8c145.6 0 263.8 118.2 263.8 263.8c0 145.6-118.2 263.8-263.8 263.8c-145.6 0-263.8-118.2-263.8-263.8c0-145.6 118.2-263.8 263.8-263.8Z\" fill=\"none\" display=\"block\" transform=\"translate(421.2,297.8) scale(.977,.977)\" />\n    </g>\n    <g clip-path=\"url(#").concat(iconPrefix, "_forward_ClipPath-1)\" opacity=\"0\" transform=\"translate(0,0) scale(.1,.1)\">\n      <g display=\"block\" mask=\"url(#").concat(iconPrefix, "_forward_Mask-20)\">\n        <path d=\"M224.2 478.3c0 0-210.6 210.5-210.6 210.5c0 0 20.4 20.4 20.4 20.4c0 0 210.7-210.7 210.7-210.7c-11.7-11-5.9-6-20.5-20.2Z\" />\n      </g>\n      <path stroke=\"#000\" stroke-width=\"30\" d=\"M0-261.7c144.4 0 261.7 117.3 261.7 261.7c0 144.4-117.3 261.7-261.7 261.7c-144.4 0-261.7-117.3-261.7-261.7c0-144.4 117.3-261.7 261.7-261.7Z\" fill=\"none\" display=\"block\" transform=\"translate(422.8,296.4) scale(.977,.977)\" />\n    </g>");
    }
  });

  var email = new SVGIcon({
    name: 'email',
    path: 'M12,-3.55271368e-15 C8.81712,-3.55271368e-15 5.7648,1.26468 3.5148,3.5148 C1.2648,5.76492 3.55271368e-15,8.81736 3.55271368e-15,12 C3.55271368e-15,15.18264 1.26468,18.2352 3.5148,20.4852 C5.76492,22.7352 8.81736,24 12,24 C15.18264,24 18.2352,22.73532 20.4852,20.4852 C22.7352,18.23508 24,15.18264 24,12 C24,8.81736 22.73532,5.7648 20.4852,3.5148 C18.23508,1.2648 15.18264,-3.55271368e-15 12,-3.55271368e-15 Z M17.28,7.92 L12,11.87064 L6.72,7.92 L17.28,7.92 Z M18,15.64776 C18,15.7743216 17.9446872,15.894312 17.85,15.976824 C17.7543744,16.059324 17.6278128,16.096824 17.503128,16.0799496 L6.479928,16.0799496 C6.352428,16.0940122 6.224928,16.0499496 6.13212,15.961824 C6.0402456,15.8727624 5.9914944,15.7471368 5.9999328,15.618696 L5.9999328,9.047736 L5.9999328,8.441184 L7.9536768,9.90744 L11.6398368,12.67224 C11.839524,12.8681784 12.1601568,12.8681784 12.3598368,12.67224 L17.8939968,8.51736 L17.9849352,8.44986 L17.9858726,8.45079768 C17.9914978,8.48548488 17.9952478,8.52111048 17.9971226,8.55579768 L17.9971226,15.6386777 L18,15.64776 Z'
  });

  var iconsArray = [thumbIcon, receiptIcon, pantheonIcon, micIcon, directionsIcon, calendarIcon, calloutIcon, infoIcon, briefcaseIcon, kabobIcon, personIcon, magnifyingGlassIcon, officeIcon, linkIcon, windowIcon, phoneIcon, tagIcon, documentIcon, chevronIcon, supportIcon, yextIcon, pinIcon, gearIcon, lightBulbIcon, elements, close, yextAnimatedForward, yextAnimatedReverse, email, starIcon];
  var Icons = {};
  iconsArray.forEach(function (icon) {
    Icons[icon.name] = icon.markup();
  });
  Icons["default"] = starIcon.markup();

  /**
   * HandlebarsRenderer is a wrapper around the nativate handlebars renderer.
   * @extends Renderer
   */

  var HandlebarsRenderer =
  /*#__PURE__*/
  function (_Renderer) {
    _inherits(HandlebarsRenderer, _Renderer);

    function HandlebarsRenderer() {
      var _this;

      var templates = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      _classCallCheck(this, HandlebarsRenderer);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(HandlebarsRenderer).call(this));
      /**
       * A local reference to the handlebars compiler
       * @type {Handlebars}
       * @private
       */

      _this._handlebars = templates._hb || null;
      /**
       * A local reference to the pre-compiled handlebars templates
       * @type {Handlebars}
       * @private
       */

      _this._templates = templates || {};
      return _this;
    }

    _createClass(HandlebarsRenderer, [{
      key: "init",
      value: function init(templates) {
        // Assign the handlebars compiler and templates based on
        // information provided from external dep (in default case, it comes from external server request)
        this._handlebars = templates._hb;
        this._templates = templates; // TODO(billy) Once we re-write templates using the new helpers library
        // we probably don't need these custom helpers anymore

        this._registerCustomHelpers();
      }
      /**
       * registerHelper is a public interface for external dependencies to
       * register their own custom helpers to our internal Handlebars Compiler
       */

    }, {
      key: "registerHelper",
      value: function registerHelper(name, cb) {
        this._handlebars.registerHelper(name, cb);
      }
      /**
       * SafeString is a public interface for external dependencies to
       * mark a string as 'safe'. Handlebars will not escape a SafeString
       */

    }, {
      key: "SafeString",
      value: function SafeString(string) {
        return new this._handlebars.SafeString(string);
      }
      /**
       * EscapeExpression is a public interface for external dependencies to
       * escape a string
       */

    }, {
      key: "escapeExpression",
      value: function escapeExpression(string) {
        return this._handlebars.escapeExpression(string);
      }
      /**
       * compile a handlebars template so that it can be rendered,
       * using the {Handlebars} compiler
       * @param {string} template The template string to compile
       */

    }, {
      key: "compile",
      value: function compile(template) {
        if (typeof template !== 'string') {
          return '';
        }

        return this._handlebars.compile(template);
      }
      /**
       * compile a template and then add it to the current template bundle
       * @param {string} templateName The unique name for the template
       * @param {string} template The handlebars template string
       */

    }, {
      key: "registerTemplate",
      value: function registerTemplate(templateName, template) {
        this._templates[templateName] = this.compile(template);
      }
      /**
       * render will render a template with data
       * @param {Object} config Provide either a templateName or a pre-compiled template
       * @param {Object} data The data to provide to the template
       */

    }, {
      key: "render",
      value: function render(config, data) {
        // If a custom template is provided, use it,
        // otherwise fall back to the template name
        // TODO(billy) This interface should probably be less ugly
        if (config.template !== null) {
          return config.template(data);
        }

        try {
          return this._templates[config.templateName](data);
        } catch (e) {
          throw new Error('Can not find/render template: ' + config.templateName, e);
        }
      }
    }, {
      key: "_registerCustomHelpers",
      value: function _registerCustomHelpers() {
        this.registerHelper('ifeq', function (arg1, arg2, options) {
          return arg1 === arg2 ? options.fn(this) : options.inverse(this);
        });
        this.registerHelper('ifnoteq', function (arg1, arg2, options) {
          return arg1 !== arg2 ? options.fn(this) : options.inverse(this);
        });
        this.registerHelper({
          eq: function eq(v1, v2) {
            return v1 === v2;
          },
          ne: function ne(v1, v2) {
            return v1 !== v2;
          },
          lt: function lt(v1, v2) {
            return v1 < v2;
          },
          gt: function gt(v1, v2) {
            return v1 > v2;
          },
          lte: function lte(v1, v2) {
            return v1 <= v2;
          },
          gte: function gte(v1, v2) {
            return v1 >= v2;
          },
          and: function and() {
            return Array.prototype.slice.call(arguments).every(Boolean);
          },
          or: function or() {
            return Array.prototype.slice.call(arguments, 0, -1).some(Boolean);
          }
        });
        this.registerHelper({
          add: function add(a1, a2) {
            return a1 + a2;
          },
          sub: function sub(a1, a2) {
            return a1 - a2;
          },
          mul: function mul(a1, a2) {
            return a1 * a2;
          },
          div: function div(a1, a2) {
            return a1 / a2;
          },
          mod: function mod(a1, a2) {
            return a1 % a2;
          }
        });
        this.registerHelper('every', function () {
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          var values = args.slice(0, args.length - 1);
          var options = args[args.length - 1];
          return values.every(function (v) {
            return v;
          }) ? options.fn(this) : options.inverse(this);
        });
        this.registerHelper('formatPhoneNumber', function (phoneNumberString) {
          var cleaned = ('' + phoneNumberString).replace(/\D/g, '');
          var match = cleaned.match(/^(1|)?(\d{3})(\d{3})(\d{4})$/);

          if (match) {
            var intlCode = match[1] ? '+1 ' : '';
            return [intlCode, '(', match[2], ') ', match[3], '-', match[4]].join('');
          }

          return null;
        });
        this.registerHelper('assign', function (name, value, options) {
          var args = arguments;
          options = args[args.length - 1];

          if (!options.data.root) {
            options.data.root = {};
          }

          var v = '';

          for (var i = 1; i < args.length - 1; i++) {
            v = v + args[i];
          }

          options.data.root[name] = v;
        });
        this.registerHelper('json', function (name, value, options) {
          return name === undefined ? '' : JSON.stringify(name);
        });
        this.registerHelper('plural', function (number, singularText, pluralText) {
          return number === 1 ? singularText : pluralText;
        });
        var self = this;
        self.registerHelper('icon', function (name, complexContentsParams, options) {
          var icon = Icons["default"];

          if (!Icons[name]) {
            return self.SafeString(icon);
          }

          if (typeof Icons[name] === 'function') {
            icon = Icons[name](complexContentsParams);
          } else {
            icon = Icons[name];
          }

          return self.SafeString(icon);
        });
        self.registerHelper('highlightValue', function (value, getInverted) {
          var escapedInput = self.escapeExpression(value.value || value.shortValue);
          var highlightedVal = new HighlightedValue({
            value: escapedInput,
            matchedSubstrings: value.matchedSubstrings
          });
          return getInverted ? self.SafeString(highlightedVal.getInverted()) : self.SafeString(highlightedVal.get());
        });
      }
    }]);

    return HandlebarsRenderer;
  }(Renderer);

  /** @module */
  // E.g. Mustache, SOY, HandleBars, React, etc.

  var Renderers = {
    SOY: Renderer,
    Handlebars: HandlebarsRenderer
  };

  /** @module */

  /** The current lib version, reported with errors and analytics, injected by the build process */
  var LIB_VERSION = 'v1.5.1-7-g9ff0f632';
  /** The identifier of the production environment */

  var PRODUCTION = 'production';
  /** The identifier of the sandbox environment */

  var SANDBOX = 'sandbox';
  /** The default url for compiled component templates */

  var COMPILED_TEMPLATES_URL = "https://assets.sitescdn.net/answers/".concat(LIB_VERSION, "/answerstemplates.compiled.min.js");

  /**
   * DefaultTemplatesLoader exposes an interface for loading the default set of compiled templates
   * asynchronously from the server. Note that this class cannot be repurposed to fetch custom
   * templates hosted by a client.
   */

  var DefaultTemplatesLoader =
  /*#__PURE__*/
  function () {
    function DefaultTemplatesLoader(onLoaded) {
      _classCallCheck(this, DefaultTemplatesLoader);

      if (!DefaultTemplatesLoader.setInstance(this)) {
        return DefaultTemplatesLoader.getInstance();
      }

      this._templates = {};

      this._onLoaded = onLoaded || function () {};

      this._fetchTemplates();
    }

    _createClass(DefaultTemplatesLoader, [{
      key: "_fetchTemplates",
      value: function _fetchTemplates() {
        // If template have already been loaded, do nothing
        var node = DOM.query('#yext-answers-templates');

        if (node) {
          return;
        } // Inject a script to fetch the compiled templates,
        // wrapping it a Promise for cleanliness


        return new Promise(function (resolve, reject) {
          var script = DOM.createEl('script', {
            id: 'yext-answers-templates',
            onload: resolve,
            onerror: reject,
            async: true,
            src: COMPILED_TEMPLATES_URL
          });
          DOM.append('body', script);
        });
      }
      /**
       * register the templates internally so that they can be later consumed
       * (e.g. by components and renderers) with convienience.
       *
       * `fetchTemplates` will automatically call this, providing the compiled templates from the server.
       */

    }, {
      key: "register",
      value: function register(templates) {
        this._templates = templates; // Notify our consumers that the templates are here :)

        this._onLoaded(this._templates);

        return this;
      }
    }, {
      key: "get",
      value: function get(templateName) {
        return this._templates[templateName];
      }
      /**
       * @return The internal template collection
       */

    }, {
      key: "getTemplates",
      value: function getTemplates() {
        return this._templates;
      }
    }], [{
      key: "setInstance",
      value: function setInstance(instance) {
        if (!this.instance) {
          this.instance = instance;
          return true;
        }

        return false;
      }
    }, {
      key: "getInstance",
      value: function getInstance() {
        return this.instance;
      }
    }]);

    return DefaultTemplatesLoader;
  }();

  /** @module */

  /** @module EventEmitter */

  /**
   * EventEmitter is a base class for any object that wants to expose
   * a pub/sub interface, for emitting messages and providing listeners.
   */
  var EventEmitter =
  /*#__PURE__*/
  function () {
    function EventEmitter() {
      _classCallCheck(this, EventEmitter);

      /**
       * The subscribers of messages
       * @type {object[]}
       * @private
       */
      this._listeners = {};
    }
    /**
     * on is the public interface for subscribing events that are emitted.
     * @param {string} evt the event name to listen to
     * @param {function} cb The callback to invoke when the {evt} is emitted
     * @param {boolean} once Optional value which will only handle the message once
     */


    _createClass(EventEmitter, [{
      key: "on",
      value: function on(evt, cb, once) {
        if (typeof cb !== 'function') {
          throw new Error('callback handler should be of type {function}');
        }

        if (this._listeners[evt] === undefined) {
          this._listeners[evt] = [];
        }

        this._listeners[evt].push({
          event: evt,
          cb: cb,
          once: once || false
        });

        return this;
      }
      /**
       * once is the public interface for subscribing events that are emitted.
       * The handler will only be triggered once.
       *
       * @param {string} evt the event name to listen to
       * @param {function} cb The callback to invoke when the {evt} is emitted
       * @param {boolean} once Optional value which will only handle the message once
       */

    }, {
      key: "once",
      value: function once(evt, cb) {
        return this.on(evt, cb, true);
      }
      /**
       * off is the public interface for unsubscribing from an event
       * @param {string} evt the event name to unsubscribe from
       */

    }, {
      key: "off",
      value: function off(evt) {
        delete this._listeners[evt];
        return this;
      }
      /**
       * emit is the public interface for broadcasting messages/events
       * @param {string} evt the event name to publish from
       * @param {Object} data the data to send along to the subscribers
       */

    }, {
      key: "emit",
      value: function emit(evt, data) {
        var listeners = this._listeners[evt];

        if (listeners === undefined) {
          return;
        } // Invoke each of all the listener handlers and remove the ones that should fire only once.


        var keep = [];

        for (var i = 0; i < listeners.length; i++) {
          listeners[i].cb(data);

          if (listeners[i].once === true) {
            continue;
          } // Instead of having a 'dirty' array with deleted or 'undefined' entries,
          // we just create a brand new array without the listeners that were removed


          keep.push(listeners[i]);
        } // Update our old list of listeners to the newly created array


        this._listeners[evt] = keep;
        return this;
      }
    }]);

    return EventEmitter;
  }();

  /**
   * State contains the data for the component
   * and exposes an {EventEmitter} interface so that external
   * dependencies can listen/hook subscribe to messages/updates.
   * @extends EventEmitter
   */

  var State =
  /*#__PURE__*/
  function (_EventEmitter) {
    _inherits(State, _EventEmitter);

    function State(data) {
      var _this;

      _classCallCheck(this, State);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(State).call(this));
      /**
       * The initial state of the component
       * @type {Object}
       * @private
       */

      _this._state = data || {};
      return _this;
    }
    /**
     * Set the initial state of the component.
     * NOTE(billy): Does not fire an update message
     */


    _createClass(State, [{
      key: "init",
      value: function init(prop, optVal) {
        this._set(prop, optVal);
      }
      /**
       * setter for the state
       * @param prop {string|Object} The property to set
       * @param optVal Optional, if prop is a {string}, it will assign the value to that property
       */

    }, {
      key: "set",
      value: function set(prop, optVal) {
        this._set(prop, optVal);

        this.emit('update');
      }
      /**
       * setter for the state enables you to update a single property, or complete state
       * depending on the arguments provided.
       * @param prop {string|Object} The property to set
       * @param optVal If prop is a {string}, provide its value
       * @private
       */

    }, {
      key: "_set",
      value: function _set(prop, optVal) {
        if (optVal === undefined) {
          this._state = prop;
        } else {
          this._state[prop] = optVal;
        }
      }
    }, {
      key: "update",
      value: function update(data) {
        this._state = data;
        this.emit('update');
      }
      /**
       * Retrieve a properties value from the state
       * If no property provided, return the full state
       * @param {string} optProp optional property to retrieve
       */

    }, {
      key: "get",
      value: function get(optProp) {
        if (optProp === undefined) {
          return this._state;
        }

        return this._state[optProp];
      }
    }, {
      key: "has",
      value: function has(prop) {
        return this._state[prop] !== undefined;
      }
    }, {
      key: "asJSON",
      value: function asJSON() {
        return this._state;
      }
    }]);

    return State;
  }(EventEmitter);

  var support = {
    searchParams: 'URLSearchParams' in self,
    iterable: 'Symbol' in self && 'iterator' in Symbol,
    blob:
      'FileReader' in self &&
      'Blob' in self &&
      (function() {
        try {
          new Blob();
          return true
        } catch (e) {
          return false
        }
      })(),
    formData: 'FormData' in self,
    arrayBuffer: 'ArrayBuffer' in self
  };

  function isDataView(obj) {
    return obj && DataView.prototype.isPrototypeOf(obj)
  }

  if (support.arrayBuffer) {
    var viewClasses = [
      '[object Int8Array]',
      '[object Uint8Array]',
      '[object Uint8ClampedArray]',
      '[object Int16Array]',
      '[object Uint16Array]',
      '[object Int32Array]',
      '[object Uint32Array]',
      '[object Float32Array]',
      '[object Float64Array]'
    ];

    var isArrayBufferView =
      ArrayBuffer.isView ||
      function(obj) {
        return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1
      };
  }

  function normalizeName(name) {
    if (typeof name !== 'string') {
      name = String(name);
    }
    if (/[^a-z0-9\-#$%&'*+.^_`|~]/i.test(name)) {
      throw new TypeError('Invalid character in header field name')
    }
    return name.toLowerCase()
  }

  function normalizeValue(value) {
    if (typeof value !== 'string') {
      value = String(value);
    }
    return value
  }

  // Build a destructive iterator for the value list
  function iteratorFor(items) {
    var iterator = {
      next: function() {
        var value = items.shift();
        return {done: value === undefined, value: value}
      }
    };

    if (support.iterable) {
      iterator[Symbol.iterator] = function() {
        return iterator
      };
    }

    return iterator
  }

  function Headers(headers) {
    this.map = {};

    if (headers instanceof Headers) {
      headers.forEach(function(value, name) {
        this.append(name, value);
      }, this);
    } else if (Array.isArray(headers)) {
      headers.forEach(function(header) {
        this.append(header[0], header[1]);
      }, this);
    } else if (headers) {
      Object.getOwnPropertyNames(headers).forEach(function(name) {
        this.append(name, headers[name]);
      }, this);
    }
  }

  Headers.prototype.append = function(name, value) {
    name = normalizeName(name);
    value = normalizeValue(value);
    var oldValue = this.map[name];
    this.map[name] = oldValue ? oldValue + ', ' + value : value;
  };

  Headers.prototype['delete'] = function(name) {
    delete this.map[normalizeName(name)];
  };

  Headers.prototype.get = function(name) {
    name = normalizeName(name);
    return this.has(name) ? this.map[name] : null
  };

  Headers.prototype.has = function(name) {
    return this.map.hasOwnProperty(normalizeName(name))
  };

  Headers.prototype.set = function(name, value) {
    this.map[normalizeName(name)] = normalizeValue(value);
  };

  Headers.prototype.forEach = function(callback, thisArg) {
    for (var name in this.map) {
      if (this.map.hasOwnProperty(name)) {
        callback.call(thisArg, this.map[name], name, this);
      }
    }
  };

  Headers.prototype.keys = function() {
    var items = [];
    this.forEach(function(value, name) {
      items.push(name);
    });
    return iteratorFor(items)
  };

  Headers.prototype.values = function() {
    var items = [];
    this.forEach(function(value) {
      items.push(value);
    });
    return iteratorFor(items)
  };

  Headers.prototype.entries = function() {
    var items = [];
    this.forEach(function(value, name) {
      items.push([name, value]);
    });
    return iteratorFor(items)
  };

  if (support.iterable) {
    Headers.prototype[Symbol.iterator] = Headers.prototype.entries;
  }

  function consumed(body) {
    if (body.bodyUsed) {
      return Promise.reject(new TypeError('Already read'))
    }
    body.bodyUsed = true;
  }

  function fileReaderReady(reader) {
    return new Promise(function(resolve, reject) {
      reader.onload = function() {
        resolve(reader.result);
      };
      reader.onerror = function() {
        reject(reader.error);
      };
    })
  }

  function readBlobAsArrayBuffer(blob) {
    var reader = new FileReader();
    var promise = fileReaderReady(reader);
    reader.readAsArrayBuffer(blob);
    return promise
  }

  function readBlobAsText(blob) {
    var reader = new FileReader();
    var promise = fileReaderReady(reader);
    reader.readAsText(blob);
    return promise
  }

  function readArrayBufferAsText(buf) {
    var view = new Uint8Array(buf);
    var chars = new Array(view.length);

    for (var i = 0; i < view.length; i++) {
      chars[i] = String.fromCharCode(view[i]);
    }
    return chars.join('')
  }

  function bufferClone(buf) {
    if (buf.slice) {
      return buf.slice(0)
    } else {
      var view = new Uint8Array(buf.byteLength);
      view.set(new Uint8Array(buf));
      return view.buffer
    }
  }

  function Body() {
    this.bodyUsed = false;

    this._initBody = function(body) {
      this._bodyInit = body;
      if (!body) {
        this._bodyText = '';
      } else if (typeof body === 'string') {
        this._bodyText = body;
      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
        this._bodyBlob = body;
      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
        this._bodyFormData = body;
      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
        this._bodyText = body.toString();
      } else if (support.arrayBuffer && support.blob && isDataView(body)) {
        this._bodyArrayBuffer = bufferClone(body.buffer);
        // IE 10-11 can't handle a DataView body.
        this._bodyInit = new Blob([this._bodyArrayBuffer]);
      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
        this._bodyArrayBuffer = bufferClone(body);
      } else {
        this._bodyText = body = Object.prototype.toString.call(body);
      }

      if (!this.headers.get('content-type')) {
        if (typeof body === 'string') {
          this.headers.set('content-type', 'text/plain;charset=UTF-8');
        } else if (this._bodyBlob && this._bodyBlob.type) {
          this.headers.set('content-type', this._bodyBlob.type);
        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
        }
      }
    };

    if (support.blob) {
      this.blob = function() {
        var rejected = consumed(this);
        if (rejected) {
          return rejected
        }

        if (this._bodyBlob) {
          return Promise.resolve(this._bodyBlob)
        } else if (this._bodyArrayBuffer) {
          return Promise.resolve(new Blob([this._bodyArrayBuffer]))
        } else if (this._bodyFormData) {
          throw new Error('could not read FormData body as blob')
        } else {
          return Promise.resolve(new Blob([this._bodyText]))
        }
      };

      this.arrayBuffer = function() {
        if (this._bodyArrayBuffer) {
          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)
        } else {
          return this.blob().then(readBlobAsArrayBuffer)
        }
      };
    }

    this.text = function() {
      var rejected = consumed(this);
      if (rejected) {
        return rejected
      }

      if (this._bodyBlob) {
        return readBlobAsText(this._bodyBlob)
      } else if (this._bodyArrayBuffer) {
        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))
      } else if (this._bodyFormData) {
        throw new Error('could not read FormData body as text')
      } else {
        return Promise.resolve(this._bodyText)
      }
    };

    if (support.formData) {
      this.formData = function() {
        return this.text().then(decode)
      };
    }

    this.json = function() {
      return this.text().then(JSON.parse)
    };

    return this
  }

  // HTTP methods whose capitalization should be normalized
  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];

  function normalizeMethod(method) {
    var upcased = method.toUpperCase();
    return methods.indexOf(upcased) > -1 ? upcased : method
  }

  function Request(input, options) {
    options = options || {};
    var body = options.body;

    if (input instanceof Request) {
      if (input.bodyUsed) {
        throw new TypeError('Already read')
      }
      this.url = input.url;
      this.credentials = input.credentials;
      if (!options.headers) {
        this.headers = new Headers(input.headers);
      }
      this.method = input.method;
      this.mode = input.mode;
      this.signal = input.signal;
      if (!body && input._bodyInit != null) {
        body = input._bodyInit;
        input.bodyUsed = true;
      }
    } else {
      this.url = String(input);
    }

    this.credentials = options.credentials || this.credentials || 'same-origin';
    if (options.headers || !this.headers) {
      this.headers = new Headers(options.headers);
    }
    this.method = normalizeMethod(options.method || this.method || 'GET');
    this.mode = options.mode || this.mode || null;
    this.signal = options.signal || this.signal;
    this.referrer = null;

    if ((this.method === 'GET' || this.method === 'HEAD') && body) {
      throw new TypeError('Body not allowed for GET or HEAD requests')
    }
    this._initBody(body);
  }

  Request.prototype.clone = function() {
    return new Request(this, {body: this._bodyInit})
  };

  function decode(body) {
    var form = new FormData();
    body
      .trim()
      .split('&')
      .forEach(function(bytes) {
        if (bytes) {
          var split = bytes.split('=');
          var name = split.shift().replace(/\+/g, ' ');
          var value = split.join('=').replace(/\+/g, ' ');
          form.append(decodeURIComponent(name), decodeURIComponent(value));
        }
      });
    return form
  }

  function parseHeaders(rawHeaders) {
    var headers = new Headers();
    // Replace instances of \r\n and \n followed by at least one space or horizontal tab with a space
    // https://tools.ietf.org/html/rfc7230#section-3.2
    var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, ' ');
    preProcessedHeaders.split(/\r?\n/).forEach(function(line) {
      var parts = line.split(':');
      var key = parts.shift().trim();
      if (key) {
        var value = parts.join(':').trim();
        headers.append(key, value);
      }
    });
    return headers
  }

  Body.call(Request.prototype);

  function Response(bodyInit, options) {
    if (!options) {
      options = {};
    }

    this.type = 'default';
    this.status = options.status === undefined ? 200 : options.status;
    this.ok = this.status >= 200 && this.status < 300;
    this.statusText = 'statusText' in options ? options.statusText : 'OK';
    this.headers = new Headers(options.headers);
    this.url = options.url || '';
    this._initBody(bodyInit);
  }

  Body.call(Response.prototype);

  Response.prototype.clone = function() {
    return new Response(this._bodyInit, {
      status: this.status,
      statusText: this.statusText,
      headers: new Headers(this.headers),
      url: this.url
    })
  };

  Response.error = function() {
    var response = new Response(null, {status: 0, statusText: ''});
    response.type = 'error';
    return response
  };

  var redirectStatuses = [301, 302, 303, 307, 308];

  Response.redirect = function(url, status) {
    if (redirectStatuses.indexOf(status) === -1) {
      throw new RangeError('Invalid status code')
    }

    return new Response(null, {status: status, headers: {location: url}})
  };

  var DOMException = self.DOMException;
  try {
    new DOMException();
  } catch (err) {
    DOMException = function(message, name) {
      this.message = message;
      this.name = name;
      var error = Error(message);
      this.stack = error.stack;
    };
    DOMException.prototype = Object.create(Error.prototype);
    DOMException.prototype.constructor = DOMException;
  }

  function fetch$1(input, init) {
    return new Promise(function(resolve, reject) {
      var request = new Request(input, init);

      if (request.signal && request.signal.aborted) {
        return reject(new DOMException('Aborted', 'AbortError'))
      }

      var xhr = new XMLHttpRequest();

      function abortXhr() {
        xhr.abort();
      }

      xhr.onload = function() {
        var options = {
          status: xhr.status,
          statusText: xhr.statusText,
          headers: parseHeaders(xhr.getAllResponseHeaders() || '')
        };
        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');
        var body = 'response' in xhr ? xhr.response : xhr.responseText;
        resolve(new Response(body, options));
      };

      xhr.onerror = function() {
        reject(new TypeError('Network request failed'));
      };

      xhr.ontimeout = function() {
        reject(new TypeError('Network request failed'));
      };

      xhr.onabort = function() {
        reject(new DOMException('Aborted', 'AbortError'));
      };

      xhr.open(request.method, request.url, true);

      if (request.credentials === 'include') {
        xhr.withCredentials = true;
      } else if (request.credentials === 'omit') {
        xhr.withCredentials = false;
      }

      if ('responseType' in xhr && support.blob) {
        xhr.responseType = 'blob';
      }

      request.headers.forEach(function(value, name) {
        xhr.setRequestHeader(name, value);
      });

      if (request.signal) {
        request.signal.addEventListener('abort', abortXhr);

        xhr.onreadystatechange = function() {
          // DONE (success or failure)
          if (xhr.readyState === 4) {
            request.signal.removeEventListener('abort', abortXhr);
          }
        };
      }

      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);
    })
  }

  fetch$1.polyfill = true;

  if (!self.fetch) {
    self.fetch = fetch$1;
    self.Headers = Headers;
    self.Request = Request;
    self.Response = Response;
  }

  /**
   * Types of HTTP requests
   */

  var Methods = {
    GET: 'get',
    POST: 'post',
    PUT: 'put',
    DELETE: 'delete'
  };
  /**
   * HttpRequester is a wrapper around the native implementation of AJAX
   * related matters. It's used to make all types of network requests
   * and exposes a promise interface.
   */

  var HttpRequester =
  /*#__PURE__*/
  function () {
    function HttpRequester() {
      _classCallCheck(this, HttpRequester);
    }

    _createClass(HttpRequester, [{
      key: "get",

      /**
       * Create a GET HTTP request
       * @param {string} url The url to make a request to
       * @param {Object} data The data to provide (gets encoded into the URL)
       * @param {Object} opts Configuration options to use for the request
       */
      value: function get(url, data, opts) {
        return this.request(Methods.GET, this.encodeParams(url, data), opts);
      }
      /**
       * Create a POST HTTP request
       * @param {string} url The url to make a request to
       * @param {Object} urlParams The params to encode into the URL
       * @param {Object} jsonBody The request body (json) to provide with the POST request
       * @param {Object} requestConfig Configuration options to use for the request
       */

    }, {
      key: "post",
      value: function post(url, urlParams, jsonBody, requestConfig) {
        return this.request(Methods.POST, this.encodeParams(url, urlParams), Object.assign({}, {
          body: JSON.stringify(jsonBody),
          credentials: undefined
        }, requestConfig));
      }
    }, {
      key: "request",
      value: function request(method, url, opts) {
        var reqArgs = Object.assign({}, {
          'method': method,
          'credentials': 'include'
        }, opts);
        return this._fetch(url, reqArgs);
      } // TODO (agrow) investigate removing this
      // Use imported fetchPolyfill if it does not already exist on window

    }, {
      key: "_fetch",
      value: function _fetch(url, reqArgs) {
        if (!window.fetch) {
          return fetch$1(url, reqArgs);
        }

        return fetch(url, reqArgs);
      }
      /**
       * Send a beacon to the provided url which will send a non-blocking request
       * to the server that is guaranteed to send before page load. No response is returned,
       * so beacons are primarily used for analytics reporting.
       * @param {string} url The url to send the beacon to
       * @param {object} data The data payload to send in the beacon
       * @return {boolean} true if the request is successfully queued
       */

    }, {
      key: "beacon",
      value: function beacon(url, data) {
        return this._sendBeacon(url, JSON.stringify(data));
      } // TODO (agrow) investigate removing this
      // Navigator.sendBeacon polyfill
      // Combination of the compact Financial Times polyfill:
      // https://github.com/Financial-Times/polyfill-library/blob/master/polyfills/navigator/sendBeacon/polyfill.js
      // with the async-by-default behavior of Miguel Mota's polyfill:
      // https://github.com/miguelmota/Navigator.sendBeacon/blob/master/sendbeacon.js

    }, {
      key: "_sendBeacon",
      value: function _sendBeacon(url, data) {
        if (window.navigator && window.navigator.sendBeacon) {
          return window.navigator.sendBeacon(url, data);
        }

        var event = window.event && window.event.type;
        var sync = event === 'unload' || event === 'beforeunload';
        var xhr = 'XMLHttpRequest' in window ? new XMLHttpRequest() : new ActiveXObject('Microsoft.XMLHTTP');
        xhr.open('POST', url, !sync);
        xhr.setRequestHeader('Accept', '*/*');

        if (typeof data === 'string') {
          xhr.setRequestHeader('Content-Type', 'text/plain;charset=UTF-8');
        } else if (Object.prototype.toString.call(data) === '[object Blob]') {
          if (data.type) {
            xhr.setRequestHeader('Content-Type', data.type);
          }
        }

        xhr.send(data);
        return true;
      }
    }, {
      key: "encodeParams",
      value: function encodeParams(url, params) {
        if (_typeof(params) !== 'object') {
          return;
        }

        var hasParam = url.indexOf('?') > -1;
        var searchQuery = '';

        for (var key in params) {
          if (!hasParam) {
            hasParam = true;
            searchQuery += '?';
          } else {
            searchQuery += '&';
          }

          searchQuery += key + '=' + encodeURIComponent(params[key]);
        }

        return url + searchQuery;
      }
    }]);

    return HttpRequester;
  }();

  /** @module */

  /**
   * An enum listing the different Component types supported in the SDK
   * TODO: add all component types
   * @type {Object.<string, string>}
   */
  var ComponentTypes = {
    FILTER_BOX: 'FilterBox',
    FILTER_OPTIONS: 'FilterOptions',
    RANGE_FILTER: 'RangeFilter',
    DATE_RANGE_FILTER: 'DateRangeFilter',
    FACETS: 'Facets',
    GEOLOCATION_FILTER: 'GeoLocationFilter',
    SORT_OPTIONS: 'SortOptions',
    FILTER_SEARCH: 'FilterSearch'
  };

  /**
   * Returns the base url for the live api backend in the desired environment.
   * @param {string} env The desired environment.
   */

  function getLiveApiUrl() {
    var env = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : PRODUCTION;
    return env === SANDBOX ? 'https://liveapi-sandbox.yext.com' : 'https://liveapi.yext.com';
  }
  /**
   * Returns the base url for the live api backend in the desired environment.
   * @param {string} env The desired environment.
   */

  function getCachedLiveApiUrl() {
    var env = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : PRODUCTION;
    return env === SANDBOX ? 'https://liveapi-sandbox.yext.com' : 'https://liveapi-cached.yext.com';
  }
  /**
   * Returns the base url for the knowledge api backend in the desired environment.
   * @param {string} env The desired environment.
   */

  function getKnowledgeApiUrl() {
    var env = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : PRODUCTION;
    return env === SANDBOX ? 'https://api-sandbox.yext.com' : 'https://api.yext.com';
  }
  /**
   * Returns the base url for the analytics backend in the desired environment.
   * @param {string} env The desired environment.
   * @param {boolean} conversionTrackingEnabled If conversion tracking has been opted into.
   */

  function getAnalyticsUrl() {
    var env = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : PRODUCTION;
    var conversionTrackingEnabled = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

    if (conversionTrackingEnabled) {
      return env === SANDBOX ? 'https://sandbox-realtimeanalytics.yext.com' : 'https://realtimeanalytics.yext.com';
    }

    return env === SANDBOX ? 'https://sandbox-answers.yext-pixel.com' : 'https://answers.yext-pixel.com';
  }
  /**
   * Returns the passed in url with the passed in params appended as query params
   * Note: query parameters in the url are stripped, you should include those query parameters
   * in `params` if you want to keep them
   * @param {string} url
   * @param {SearchParams} params to add to the url
   * @returns {string}
   */

  function replaceUrlParams(url) {
    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new SearchParams();
    return url.split('?')[0] + '?' + params.toString();
  }
  /**
   * Returns the given url without query params and hashes
   * @param {string} url Full url e.g. https://yext.com/?query=hello#Footer
   * @returns {string} Url without query params and hashes e.g. https://yext.com/
   */

  function urlWithoutQueryParamsAndHash(url) {
    return url.split('?')[0].split('#')[0];
  }
  /**
   * returns if two SearchParams objects have the same key,value entries
   * @param {SearchParams} params1
   * @param {SearchParams} params2
   * @return {boolean} true if params1 and params2 have the same key,value entries, false otherwise
   */

  function equivalentParams(params1, params2) {
    var entries1 = Array.from(params1.entries());
    var entries2 = Array.from(params2.entries());

    if (entries1.length !== entries2.length) {
      return false;
    }

    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = params1.entries()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var _step$value = _slicedToArray(_step.value, 2),
            key = _step$value[0],
            val = _step$value[1];

        if (val !== params2.get(key)) {
          return false;
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator["return"] != null) {
          _iterator["return"]();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    return true;
  }
  /**
   * Creates a copy of the provided {@link SearchParams}, with the specified
   * attributes filtered out
   * @param {SearchParams} params The parameters to remove from
   * @param {string[]} prefixes The prefixes of parameters to remove
   * @return {SearchParams} A new instance of SearchParams without entries with
   *   keys that start with the given prefixes
   */

  function removeParamsWithPrefixes(params, prefixes) {
    var newParams = new SearchParams();
    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
      var _loop = function _loop() {
        var _step2$value = _slicedToArray(_step2.value, 2),
            key = _step2$value[0],
            val = _step2$value[1];

        var includeEntry = prefixes.every(function (prefix) {
          return !key.startsWith(prefix);
        });

        if (includeEntry) {
          newParams.set(key, val);
        }
      };

      for (var _iterator2 = params.entries()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
        _loop();
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
          _iterator2["return"]();
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }

    return newParams;
  }
  /**
   * Removes parameters for filters, facets, sort options, and pagination
   * from the provided {@link SearchParams}. This is useful for constructing
   * inter-experience answers links.
   * @param {SearchParams} params The parameters to remove from
   * @param {function} getComponentNamesForComponentTypes Given string[]
   *   component types, returns string[] component names for those types
   * @return {SearchParams} Parameters that have filtered out params that
   *   should not persist across the answers experience
   */

  function filterParamsForExperienceLink(params, getComponentNamesForComponentTypes) {
    var componentTypesToExclude = [ComponentTypes.FACETS, ComponentTypes.FILTER_BOX, ComponentTypes.FILTER_OPTIONS, ComponentTypes.RANGE_FILTER, ComponentTypes.DATE_RANGE_FILTER, ComponentTypes.SORT_OPTIONS, ComponentTypes.GEOLOCATION_FILTER, ComponentTypes.FILTER_SEARCH];
    var paramsToFilter = componentTypesToExclude.flatMap(function (type) {
      var params = getComponentNamesForComponentTypes([type]);

      if (type === ComponentTypes.GEOLOCATION_FILTER || type === ComponentTypes.FILTER_SEARCH) {
        params = params.map(function (param) {
          return "".concat(StorageKeys.QUERY, ".").concat(param);
        });
      }

      return params;
    });
    paramsToFilter = paramsToFilter.concat([StorageKeys.FILTER]);
    var newParams = removeParamsWithPrefixes(params, paramsToFilter);
    newParams["delete"](StorageKeys.SEARCH_OFFSET);
    return newParams;
  }

  /**
   * ApiRequest is the base class for all API requests.
   * It defines all of the core properties required to make a request
   */

  var ApiRequest =
  /*#__PURE__*/
  function () {
    // TODO (tmeyer): Create an ApiService interface and pass an implementation to the current
    // consumers of ApiRequest as a dependency.
    function ApiRequest() {
      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var globalStorage = arguments.length > 1 ? arguments[1] : undefined;

      _classCallCheck(this, ApiRequest);

      /**
       * An abstraction used for making network request and handling errors
       * @type {HttpRequester}
       * @private
       */
      this._requester = new HttpRequester();
      /**
       * The environment the request should be made to
       * @type {string}
       * @private
       */

      this._environment = opts.environment || PRODUCTION;
      /**
       * The baseUrl to use for making a request
       * @type {string}
       * @private
       */

      this._baseUrl = opts.baseUrl || getLiveApiUrl(this._environment);
      /**
       * The endpoint to use in the url (appended to the {baseUrl})
       * @type {string}
       * @private
       */

      this._endpoint = opts.endpoint || null;
      /**
       * The API Key to use for the request
       * @type {string}
       * @private
       */

      this._apiKey = opts.apiKey || null;
      /**
       * The version of the API to make a request to
       * @type {string}
       * @private
       */

      this._version = opts.version || 20190101;
      /**
       * Additional data params that are sent along with the request
       * @type {string}
       * @private
       */

      this._params = opts.params || {};

      if (!globalStorage) {
        throw new AnswersBasicError('Must include global storage', 'ApiRequest');
      }
      /**
       * @type {GlobalStorage}
       * @private
       */


      this._globalStorage = globalStorage;
    }
    /**
     * get creates a new `GET` request to the server using the configuration of the request class
     *
     * @param {Object} opts Any configuration options to use for the GET request.
     * @returns {Promise<Response>}
     */


    _createClass(ApiRequest, [{
      key: "get",
      value: function get(opts) {
        return this._requester.get(this._baseUrl + this._endpoint, Object.assign({}, this.baseParams(), this.sanitizeParams(this._params)), opts);
      }
      /**
       * @param {Object} opts
       * @returns {Promise<Response>}
       */

    }, {
      key: "post",
      value: function post(opts) {
        return this._requester.post(this._baseUrl + this._endpoint, this.baseParams()
        /* urlParams */
        , this.sanitizeParams(this._params)
        /* jsonBody */
        , opts
        /* requestConfig */
        );
      }
      /**
       * @returns {Object}
       * @private
       */

    }, {
      key: "baseParams",
      value: function baseParams() {
        var baseParams = {
          'v': this._version,
          'api_key': this._apiKey,
          'jsLibVersion': LIB_VERSION,
          'sessionTrackingEnabled': this._globalStorage.getState(StorageKeys.SESSIONS_OPT_IN)
        };
        var urlParams = new SearchParams(window.location.search.substring(1));

        if (urlParams.has('beta')) {
          baseParams['beta'] = urlParams.get('beta');
        }

        return baseParams;
      }
    }, {
      key: "sanitizeParams",
      value: function sanitizeParams() {
        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        // Remove any paramaters whos value is `undefined`.
        //
        // NOTE(billy) Probably better to be explicit about how to handle this at the request building level,
        // but I can't see any cases where we'd ever want to send 'undefined' as a value to the server.
        // So it's probably fine to 'clean' the params object here
        Object.keys(params).forEach(function (key) {
          if (params[key] === undefined || params[key] === null) {
            delete params[key];
          }
        });
        return params;
      }
    }]);

    return ApiRequest;
  }();

  /**
   * SearchApi is the API for doing various types of search
   * over the network (e.g. vertical or universal)
   *
   * @implements {SearchService}
   */

  var SearchApi =
  /*#__PURE__*/
  function () {
    function SearchApi() {
      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      _classCallCheck(this, SearchApi);

      /**
       * A local reference to the API Key to use for the request
       * @type {string}
       * @private
       */
      if (!config.apiKey) {
        throw new AnswersBasicError('Api Key is required', 'Search');
      }

      this._apiKey = config.apiKey;
      /**
       * A local reference to the Answers Key to use for the request
       * @type {string}
       * @private
       */

      if (!config.experienceKey) {
        throw new AnswersBasicError('Answers Key is required', 'Search');
      }

      this._experienceKey = config.experienceKey;
      /**
       * The answers config version to use for all requests
       * @type {string}
       * @private
       */

      this._experienceVersion = config.experienceVersion;
      /**
       * The version of the API to make a request to
       * @type {string}
       * @private
       */

      this._version = config.version || 20190101 || 20190301;
      /**
       * A local reference to the locale to use for the request
       * @type {string}
       * @private
       */

      if (!config.locale) {
        throw new AnswersBasicError('Locale is required', 'Search');
      }

      this._locale = config.locale;
      /**
       * The environment of the Answers experience
       * @type {string}
       * @private
       */

      this._environment = config.environment;
    }
    /** @inheritdoc */


    _createClass(SearchApi, [{
      key: "verticalSearch",
      value: function verticalSearch(verticalKey, _ref) {
        var input = _ref.input,
            filter = _ref.filter,
            facetFilter = _ref.facetFilter,
            limit = _ref.limit,
            offset = _ref.offset,
            id = _ref.id,
            geolocation = _ref.geolocation,
            isDynamicFiltersEnabled = _ref.isDynamicFiltersEnabled,
            skipSpellCheck = _ref.skipSpellCheck,
            queryTrigger = _ref.queryTrigger,
            sessionTrackingEnabled = _ref.sessionTrackingEnabled,
            sortBys = _ref.sortBys,
            locationRadius = _ref.locationRadius,
            context = _ref.context,
            referrerPageUrl = _ref.referrerPageUrl;

        if (limit > 50) {
          throw new AnswersCoreError('Provided search limit unsupported', 'SearchApi');
        }

        var requestConfig = {
          endpoint: '/v2/accounts/me/answers/vertical/query',
          apiKey: this._apiKey,
          version: this._version,
          environment: this._environment,
          params: {
            'input': input,
            'experienceKey': this._experienceKey,
            'version': this._experienceVersion,
            'filters': filter,
            'facetFilters': facetFilter,
            'verticalKey': verticalKey,
            'limit': limit,
            'offset': offset,
            'location': geolocation ? "".concat(geolocation.lat, ",").concat(geolocation.lng) : null,
            'queryId': id,
            'retrieveFacets': isDynamicFiltersEnabled,
            'locale': this._locale,
            'skipSpellCheck': skipSpellCheck,
            'queryTrigger': queryTrigger,
            'sessionTrackingEnabled': sessionTrackingEnabled,
            'sortBys': sortBys,
            'locationRadius': locationRadius,
            'context': context,
            'referrerPageUrl': referrerPageUrl
          }
        };
        var request = new ApiRequest(requestConfig, {
          getState: function getState() {
            return sessionTrackingEnabled;
          }
        });
        return request.get().then(function (response) {
          return response.json();
        });
      }
      /** @inheritdoc */

    }, {
      key: "universalSearch",
      value: function universalSearch(queryString, params) {
        var requestConfig = {
          endpoint: '/v2/accounts/me/answers/query',
          apiKey: this._apiKey,
          version: this._version,
          environment: this._environment,
          params: {
            'input': queryString,
            'experienceKey': this._experienceKey,
            'location': params.geolocation ? "".concat(params.geolocation.lat, ",").concat(params.geolocation.lng) : null,
            'version': this._experienceVersion,
            'locale': this._locale,
            'skipSpellCheck': params.skipSpellCheck,
            'queryTrigger': params.queryTrigger,
            'context': params.context,
            'referrerPageUrl': params.referrerPageUrl
          }
        };
        var request = new ApiRequest(requestConfig, {
          getState: function getState() {
            return params.sessionTrackingEnabled;
          }
        });
        return request.get().then(function (response) {
          return response.json();
        });
      }
    }]);

    return SearchApi;
  }();

  /** @typedef {import('../services/analyticsreporterservice').default} AnalyticsReporterService */

  /**
   * Class for reporting analytics events to the server via HTTP
   *
   * @implements {AnalyticsReporterService}
   */

  var AnalyticsReporter =
  /*#__PURE__*/
  function () {
    function AnalyticsReporter(experienceKey, experienceVersion, businessId) {
      var globalOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
      var environment = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : PRODUCTION;

      _classCallCheck(this, AnalyticsReporter);

      /**
       * The internal business identifier used for reporting
       * @type {number}
       */
      this._businessId = businessId;
      /**
       * Options to include with every analytic event reported to the server
       * @type {object}
       * @private
       */

      this._globalOptions = Object.assign({}, globalOptions, {
        experienceKey: experienceKey
      });
      /**
       * The environment of the Answers experience
       * @type {string}
       * @private
       */

      this._environment = environment;
      /**
       * Base URL for the analytics API
       * @type {string}
       * @private
       */

      this._baseUrl = getAnalyticsUrl(this._environment);
      /**
       * Boolean indicating if opted in or out of conversion tracking
       * @type {boolean}
       * @private
       */

      this._conversionTrackingEnabled = false;

      if (experienceVersion) {
        this._globalOptions.experienceVersion = experienceVersion;
      }
    }

    _createClass(AnalyticsReporter, [{
      key: "getQueryId",
      value: function getQueryId() {
        return this._globalOptions.queryId;
      }
    }, {
      key: "setQueryId",
      value: function setQueryId(queryId) {
        this._globalOptions.queryId = queryId;
      }
      /** @inheritdoc */

    }, {
      key: "report",
      value: function report(event) {
        var cookieData = {};

        if (this._conversionTrackingEnabled && typeof ytag === 'function') {
          ytag('optin', true);
          cookieData = ytag('yfpc', null);
        } else if (this._conversionTrackingEnabled) {
          throw new AnswersAnalyticsError('Tried to enable conversion tracking without including ytag');
        }

        if (!(event instanceof AnalyticsEvent)) {
          throw new AnswersAnalyticsError('Tried to send invalid analytics event', event);
        }

        event.addOptions(this._globalOptions);
        return new HttpRequester().beacon("".concat(this._baseUrl, "/realtimeanalytics/data/answers/").concat(this._businessId), _objectSpread({
          data: event.toApiEvent()
        }, cookieData));
      }
      /** @inheritdoc */

    }, {
      key: "setConversionTrackingEnabled",
      value: function setConversionTrackingEnabled(isEnabled) {
        this._conversionTrackingEnabled = isEnabled;
        this._baseUrl = getAnalyticsUrl(this._environment, isEnabled);
      }
    }]);

    return AnalyticsReporter;
  }();

  /** @typedef {import('../services/analyticsreporterservice').default} AnalyticsReporterService */

  /**
   * @implements {AnalyticsReporterService}
   */
  var NoopAnalyticsReporter =
  /*#__PURE__*/
  function () {
    function NoopAnalyticsReporter() {
      _classCallCheck(this, NoopAnalyticsReporter);
    }

    _createClass(NoopAnalyticsReporter, [{
      key: "report",

      /** @inheritdoc */
      value: function report(event) {
        return true;
      }
      /** @inheritdoc */

    }, {
      key: "setConversionTrackingEnabled",
      value: function setConversionTrackingEnabled(isEnabled) {}
    }]);

    return NoopAnalyticsReporter;
  }();

  /**
   * ModuleData is used as a generic model for Storage.
   * Typically an instance of ModuleData powers a single component.

   * A data model that exposes an event emitter interface.
   * @extends EventEmitter
   */

  var ModuleData =
  /*#__PURE__*/
  function (_EventEmitter) {
    _inherits(ModuleData, _EventEmitter);

    function ModuleData(id) {
      var _this;

      var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      _classCallCheck(this, ModuleData);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(ModuleData).call(this));
      _this._id = id;
      _this._history = [];
      _this._data = data;

      _this.set(data);

      return _this;
    }
    /**
     * replaces the currently held data with the given data
     * @param {*} data the data to replace the current data
     */


    _createClass(ModuleData, [{
      key: "set",
      value: function set(data) {
        this.capturePrevious();

        if (_typeof(data) !== 'object' || Array.isArray(data) || Object.keys(data).length !== Object.keys(this._data).length) {
          this._data = data;
          this.emit('update', this._data);
          return;
        } // check for shallow equality


        for (var _i = 0, _Object$keys = Object.keys(data); _i < _Object$keys.length; _i++) {
          var key = _Object$keys[_i];

          if (this._data[key] !== data[key]) {
            this._data = data;
            this.emit('update', this._data);
            return;
          }
        }
      }
    }, {
      key: "capturePrevious",
      value: function capturePrevious() {
        if (this._history === undefined) {
          this._history = [];
        }

        if (this._history.length + 1 > 5) {
          this._history.shift();
        } // If data is ever undefined, we default to empty object


        this._history.push(JSON.stringify(this._data || {}));
      }
    }, {
      key: "undo",
      value: function undo() {
        var previous = {};

        if (this._previous.length > 0) {
          previous = JSON.parse(this._previous.pop());
        }

        this._data.set(previous);
      }
    }, {
      key: "raw",
      value: function raw() {
        return this._data;
      }
    }]);

    return ModuleData;
  }(EventEmitter);

  /**
   * Storage is a container around application state.
   * It exposes an interface for CRUD operations as well as listening
   * for stateful changes.
   */

  var GlobalStorage =
  /*#__PURE__*/
  function () {
    function GlobalStorage() {
      _classCallCheck(this, GlobalStorage);

      this._moduleDataContainer = {};
      this._futureListeners = {};
    }
    /**
     * Set the data in storage with the given key to the provided data,
     * completely overwriting any existing data.
     * @param {string} key the storage key to set
     * @param {*} data the data to set
     */


    _createClass(GlobalStorage, [{
      key: "set",
      value: function set(key, data) {
        this._initDataContainer(key, data);

        this._moduleDataContainer[key].set(data);
      }
      /**
       * Add all key/value pairs in the provided map to the storage
       * @param {*} data The key/value pairs to set in the storage
       */

    }, {
      key: "setAll",
      value: function setAll(data) {
        for (var _i = 0, _Object$entries = Object.entries(data); _i < _Object$entries.length; _i++) {
          var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),
              key = _Object$entries$_i[0],
              val = _Object$entries$_i[1];

          if (key === StorageKeys.QUERY) {
            continue;
          }

          this.set(key, val);
        } // Update query last since it triggers a search
        // TODO: move listeners up so all of storage can be updated at the same time


        if (data[StorageKeys.QUERY]) {
          this.set(StorageKeys.QUERY, data[StorageKeys.QUERY]);
        }
      }
    }, {
      key: "_initDataContainer",
      value: function _initDataContainer(key, data) {
        if (key === undefined || key === null || typeof key !== 'string') {
          throw new AnswersStorageError('Invalid storage key provided', key, data);
        }

        if (data === undefined || data === null) {
          throw new AnswersStorageError('No data provided', key, data);
        }

        if (this._moduleDataContainer[key] === undefined) {
          this._moduleDataContainer[key] = new ModuleData(key);

          this._applyFutureListeners(key);
        }
      }
    }, {
      key: "getState",
      value: function getState(moduleId) {
        if (this._moduleDataContainer[moduleId]) {
          return this._moduleDataContainer[moduleId].raw();
        }

        return null;
      }
    }, {
      key: "getAll",
      value: function getAll(key) {
        var data = [];

        for (var _i2 = 0, _Object$keys = Object.keys(this._moduleDataContainer); _i2 < _Object$keys.length; _i2++) {
          var dataKey = _Object$keys[_i2];

          if (dataKey.startsWith(key) && this._moduleDataContainer[dataKey].raw() !== null) {
            data.push(this._moduleDataContainer[dataKey].raw());
          }
        }

        return data;
      }
      /**
       * Remove the data in storage with the given key to the provided data,
       * @param {string} key the storage key to delete
       */

    }, {
      key: "delete",
      value: function _delete(key) {
        // Note: Do we need to clean up listeners here?
        delete this._moduleDataContainer[key];
      }
    }, {
      key: "on",
      value: function on(evt, moduleId, cb) {
        var moduleData = this._moduleDataContainer[moduleId];

        if (moduleData === undefined) {
          if (this._futureListeners[moduleId] === undefined) {
            this._futureListeners[moduleId] = [];
          }

          this._futureListeners[moduleId].push({
            event: evt,
            cb: cb
          });

          return;
        }

        this._moduleDataContainer[moduleId].on(evt, cb);

        return this;
      }
    }, {
      key: "off",
      value: function off(evt, moduleId, cb) {
        var moduleData = this._moduleDataContainer[moduleId];

        if (moduleData === undefined) {
          if (this._futureListeners[moduleId] !== undefined) {
            this._futureListeners[moduleId].pop();
          }

          return this;
        }

        this._moduleDataContainer[moduleId].off(evt, cb);

        return this;
      }
    }, {
      key: "_applyFutureListeners",
      value: function _applyFutureListeners(moduleId) {
        var futures = this._futureListeners[moduleId];

        if (!futures) {
          return;
        }

        for (var i = 0; i < futures.length; i++) {
          var future = futures[i];
          this.on(future.event, moduleId, future.cb);
        }

        delete this._futureListeners[moduleId];
      }
    }]);

    return GlobalStorage;
  }();

  /** @module */

  /**
   * Component is an abstraction that encapsulates state, behavior,
   * and view for a particular chunk of functionality on the page.
   *
   * The API exposes event life cycle hooks for when things are rendered,
   * mounted, created, etc.
   */

  var Component =
  /*#__PURE__*/
  function () {
    function Component() {
      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var systemConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      _classCallCheck(this, Component);

      this.moduleId = null;
      /**
       * Unique name of this component instance
       * Used to distinguish between other components of the same type
       * @type {String}
       */

      this.name = config.name || this.constructor.type;
      /**
       * Cache the options so that we can propogate properly to child components
       * @type {Object}
       */

      this._config = config;
      /**
       * An identifier used to classify the type of component.
       * The component manager uses this information in order to persist and organize components
       * @type {string|ComponentType}
       */

      this._type = this.constructor.name;
      /**
       * A local reference to the parent component, if exists
       * @type {Component}
       */

      this._parentContainer = config.parentContainer || null;
      /**
       * A container for all the child components
       * @type {Component[]}
       */

      this._children = [];
      /**
       * The state (data) of the component to be provided to the template for rendering
       * @type {object}
       */

      this._state = new State(config.state);
      /**
       * TODO(billy) This should be 'services'
       */

      this.core = systemConfig.core || null;
      /**
       * A local reference to the component manager, which contains all of the component classes
       * eligible to be created
       * @type {ComponentManager}
       */

      this.componentManager = systemConfig.componentManager || null;
      /**
       * A local reference to the analytics reporter, used to report events for this component
       * @type {AnalyticsReporter}
       */

      this.analyticsReporter = systemConfig.analyticsReporter || null;
      /**
       * Options to include with all analytic events sent by this component
       * @type {object}
       * @private
       */

      this._analyticsOptions = config.analyticsOptions || {};
      /**
       * A reference to the DOM node that the component will be appended to when mounted/rendered.
       * @type {HTMLElement}
       */

      if (this._parentContainer === null) {
        if (typeof config.container === 'string') {
          this._container = DOM.query(config.container) || null;

          if (this._container === null) {
            throw new Error('Cannot find container DOM node: ' + config.container);
          }
        }
      } else {
        this._container = DOM.query(this._parentContainer, config.container); // If we have a parent, and the container is missing from the DOM,
        // we construct the container and append it to the parent

        if (this._container === null) {
          this._container = DOM.createEl('div', {
            "class": config.container.substring(1, config.container.length)
          });
          DOM.append(this._parentContainer, this._container);
        }
      }
      /**
       * A custom class to be applied to {this._container} node
       * @type {string}
       */


      this._className = config["class"] || 'component';
      /**
       * A custom render function to be used instead of using the default renderer
       * @type {Renderer}
       */

      this._render = config.render || null;
      /**
       * A local reference to the default {Renderer} that will be used for rendering the template
       * @type {Renderer}
       */

      this._renderer = systemConfig.renderer || Renderers.Handlebars;
      /**
       * The template string to use for rendering the component
       * If this is left empty, we lookup the template the base templates using the templateName
       * @type {string}
       */

      this._template = config.template ? this._renderer.compile(config.template) : null;
      /**
       * The templateName to use for rendering the component.
       * This is only used if _template is empty.
       * @type {string}
       */

      this._templateName = config.templateName || this.constructor.defaultTemplateName(config);
      /**
       * An internal state indicating whether or not the component has been mounted to the DOM
       * @type {boolean}
       */

      this._isMounted = false;
      /**
       * A local reference to the callback, thats used to transform the internal data
       * models of the components, before it gets applied to the component state.
       * By default, no transformation happens.
       * @type {function}
       */

      this.transformData = config.transformData || this.transformData || function () {};
      /**
       * The a local reference to the callback that will be invoked when a component is created.
       * @type {function}
       */


      this.onCreate = config.onCreateOverride || this.onCreate || function () {};

      this.onCreate = this.onCreate.bind(this);
      /**
       * The a local reference to the callback that will be invoked when a component is Mounted.
       * @type {function}
       */

      this.onMount = config.onMountOverride || this.onMount || function () {};

      this.onMount = this.onMount.bind(this);
      /**
       * The a local reference to the callback that will be invoked when a components state is updated.
       * @type {function}
       */

      this.onUpdate = config.onUpdateOverride || this.onUpdate || function () {};

      this.onUpdate = this.onUpdate.bind(this);
      /**
       * A user provided onCreate callback
       * @type {function}
       */

      this.userOnCreate = config.onCreate || function () {};
      /**
       * A user provided onMount callback
       * @type {function}
       */


      this.userOnMount = config.onMount || function () {};
      /**
       * A user provided onUpdate callback
       * @type {function}
       */


      this.userOnUpdate = config.onUpdate || function () {};
    }
    /**
     * The template to render
     * @returns {string}
     * @override
     */


    _createClass(Component, [{
      key: "init",
      value: function init(opts) {
        var _this = this;

        try {
          this.setState(opts.data || opts.state || {});
          this.onCreate();
          this.userOnCreate();
        } catch (e) {
          throw new AnswersComponentError('Error initializing component', this.constructor.type, e);
        }

        this._state.on('update', function () {
          try {
            _this.onUpdate();

            _this.userOnUpdate();

            _this.unMount();

            _this.mount();
          } catch (e) {
            throw new AnswersComponentError('Error updating component', _this.constructor.type, e);
          }
        });

        DOM.addClass(this._container, this._className);
        return this;
      }
    }, {
      key: "setState",
      value: function setState(data) {
        var newState = Object.assign({}, {
          _config: this._config
        }, data);

        this._state.set(newState);

        return this;
      }
    }, {
      key: "getState",
      value: function getState(prop) {
        return this._state.get(prop);
      }
    }, {
      key: "hasState",
      value: function hasState(prop) {
        return this._state.has(prop);
      }
    }, {
      key: "transformData",
      value: function transformData(data) {
        return data;
      }
    }, {
      key: "addChild",
      value: function addChild(data, type, opts) {
        var childComponent = this.componentManager.create(type, Object.assign({
          name: data.name,
          parentContainer: this._container,
          data: data
        }, opts || {}, {
          _parentOpts: this._config
        }));

        this._children.push(childComponent);

        return childComponent;
      }
      /**
       * Unmount and remove this component and its children from the list
       * of active components
       */

    }, {
      key: "remove",
      value: function remove() {
        this._children.forEach(function (c) {
          return c.remove();
        });

        this.componentManager.remove(this);
      }
      /**
       * Set the render method to be used for rendering the component
       * @param {Function} render
       * @return {string}
       */

    }, {
      key: "setRender",
      value: function setRender(render) {
        this._render = render;
        return this;
      }
      /**
       * Set the renderer for the component
       * @param {RendererType} renderer
       */

    }, {
      key: "setRenderer",
      value: function setRenderer(renderer) {
        this._renderer = Renderers[renderer];
        return this;
      }
      /**
       * Sets the template for the component to use when rendering
       * @param {string} template
       */

    }, {
      key: "setTemplate",
      value: function setTemplate(template) {
        this._template = this._renderer.compile(template);
      }
    }, {
      key: "unMount",
      value: function unMount() {
        if (!this._container) {
          return this;
        }

        this._children.forEach(function (child) {
          child.unMount();
        });

        DOM.empty(this._container);

        this._children.forEach(function (c) {
          return c.remove();
        });

        this._children = [];
        this.onUnMount();
      }
    }, {
      key: "mount",
      value: function mount(container) {
        var _this2 = this;

        if (container) {
          this._container = container;
        }

        if (!this._container) {
          return this;
        }

        if (this.beforeMount() === false) {
          return this;
        }

        DOM.append(this._container, this.render(this._state.asJSON())); // Process the DOM to determine if we should create
        // in-memory sub-components for rendering

        var domComponents = DOM.queryAll(this._container, '[data-component]:not([data-is-component-mounted])');
        var data = this.transformData(JSON.parse(JSON.stringify(this._state.get())));
        domComponents.forEach(function (c) {
          return _this2._createSubcomponent(c, data);
        });

        this._children.forEach(function (child) {
          child.mount();
        }); // Attach analytics hooks as necessary


        if (this.analyticsReporter) {
          var domHooks = DOM.queryAll(this._container, '[data-eventtype]:not([data-is-analytics-attached])');
          domHooks.forEach(this._createAnalyticsHook.bind(this));
        }

        this._isMounted = true;
        this.onMount(this);
        this.userOnMount(this);
        return this;
      }
      /**
       * render the template using the {Renderer} with the current state and template of the component
       * @returns {string}
       */

    }, {
      key: "render",
      value: function render() {
        var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._state.get();
        this.beforeRender(); // Temporary fix for passing immutable data to transformData().

        data = this.transformData(JSON.parse(JSON.stringify(data)));
        var html = ''; // Use either the custom render function or the internal renderer
        // dependant on the component configuration

        if (typeof this._render === 'function') {
          html = this._render(data);

          if (typeof html !== 'string') {
            throw new Error('Render method must return HTML as type {string}');
          }
        } else {
          // Render the existing templates as a string
          html = this._renderer.render({
            template: this._template,
            templateName: this._templateName
          }, data);
        } // We create an HTML Document fragment with the rendered string
        // So that we can query it for processing of sub components


        var el = DOM.create(html);
        this.afterRender();
        return el.innerHTML;
      }
    }, {
      key: "_createSubcomponent",
      value: function _createSubcomponent(domComponent, data) {
        var _this3 = this;

        domComponent.dataset.isComponentMounted = true;
        var dataset = domComponent.dataset;
        var type = dataset.component;
        var prop = dataset.prop;
        var opts = dataset.opts ? JSON.parse(dataset.opts) : {};
        var childData = data[prop] || {};
        opts = _objectSpread({}, opts, {
          container: domComponent
        }); // TODO(billy) Right now, if we provide an array as the data prop,
        // the behavior is to create many components for each item in the array.
        // THAT interface SHOULD change to use a different property that defines
        // whether to array data should be used for a single component or
        // to create many components for each item.
        // Overloading and having this side effect is unintuitive and WRONG

        if (!Array.isArray(childData)) {
          // Rendering a sub component should be within the context,
          // of the node that we processed it from
          this.addChild(childData, type, opts);
          return;
        }

        childData.reverse();
        childData.forEach(function (data) {
          _this3.addChild(data, type, opts);
        });
      }
    }, {
      key: "_createAnalyticsHook",
      value: function _createAnalyticsHook(domComponent) {
        var _this4 = this;

        domComponent.dataset.isAnalyticsAttached = true;
        var dataset = domComponent.dataset;
        var type = dataset.eventtype;
        var label = dataset.eventlabel;
        var middleclick = dataset.middleclick;
        var options = dataset.eventoptions ? JSON.parse(dataset.eventoptions) : {};
        DOM.on(domComponent, 'mousedown', function (e) {
          if (e.button === 0 || middleclick && e.button === 1) {
            var event = new AnalyticsEvent(type, label);
            event.addOptions(_this4._analyticsOptions);
            event.addOptions(options);

            _this4.analyticsReporter.report(event);
          }
        });
      }
      /**
       * onCreate is triggered when the component is constructed
       * @param {function} the callback to invoke upon emit
       */

    }, {
      key: "onCreate",
      value: function onCreate(cb) {}
      /**
       * onUpdate is triggered when the state of the component changes
       * @param {function} the callback to invoke upon emit
       */

    }, {
      key: "onUpdate",
      value: function onUpdate(cb) {}
      /**
       * beforeRender event is triggered before the component is rendered
       * @param {function} the callback to invoke upon emit
       */

    }, {
      key: "beforeRender",
      value: function beforeRender(cb) {}
      /**
       * afterRender event is triggered after the component is rendered
       * @param {function} the callback to invoke upon emit
       */

    }, {
      key: "afterRender",
      value: function afterRender(cb) {}
      /**
       * onMount is triggered when the component is appended to the DOM
       * @param {function} the callback to invoke upon emit
       */

    }, {
      key: "onMount",
      value: function onMount(cb) {}
      /**
       * onUnMount is triggered when the component is removed from the DOM
       * @param {function} the callback to invoke upon emit
       */

    }, {
      key: "onUnMount",
      value: function onUnMount(cb) {}
      /**
       * beforeMount is triggered before the component is mounted to the DOM
       * @param {function} the callback to invoke upon emit
       */

    }, {
      key: "beforeMount",
      value: function beforeMount(cb) {}
      /**
       * onDestroy is triggered when the component is destroyed
       * @param {function} the callback to invoke upon emit
       */

    }, {
      key: "onDestroy",
      value: function onDestroy(cb) {}
    }], [{
      key: "defaultTemplateName",
      value: function defaultTemplateName(config) {
        return 'default';
      }
    }, {
      key: "areDuplicateNamesAllowed",
      value: function areDuplicateNamesAllowed() {
        return false;
      }
    }, {
      key: "type",
      get: function get() {
        return 'Component';
      }
    }]);

    return Component;
  }();

  /** @typedef {import('../services/errorreporterservice').default} ErrorReporterService */

  /**
   * ErrorReporter is used for reporting errors to the console and API
   *
   * @implements {ErrorReporterService}
   */

  var ErrorReporter =
  /*#__PURE__*/
  function () {
    function ErrorReporter(config, globalStorage) {
      var _this = this;

      _classCallCheck(this, ErrorReporter);

      /**
       * The apiKey to use for reporting
       * @type {string}
       */
      this.apiKey = config.apiKey;
      /**
       * The experienceKey to use when reporting
       * @type {string}
       */

      this.experienceKey = config.experienceKey;
      /**
       * The answers config version used for api requests
       * @type {string|number}
       */

      this.experienceVersion = config.experienceVersion || 'config1.0';
      /**
       * If true, print entire error objects to the console for inspection
       * @type {boolean}
       */

      this.printVerbose = config.printVerbose;
      /**
       * If true, report the error the server for logging and monitoring
       * @type {boolean}
       */

      this.sendToServer = config.sendToServer;
      /**
       * The global storage instance of the experience
       * @type {GlobalStorage}
       */

      if (this.sendToServer && !globalStorage) {
        throw new AnswersBasicError('Must include globalStorage to send errors to server', 'ErrorReporter');
      }

      this.globalStorage = globalStorage;
      /**
       * The environment of the Answers experience
       * @type {string}
       * @private
       */

      this.environment = config.environment; // Attach reporting listeners to window

      window.addEventListener('error', function (e) {
        return _this.report(e.error);
      });
      window.addEventListener('unhandledrejection', function (e) {
        return _this.report(e.error);
      });
    }
    /**
     * report pretty prints the error to the console, optionally
     * prints the entire error if `printVerbose` is true, and sends the
     * error to the server to be logged if `sendToServer` is true
     * @param {AnswersBaseError} err The error to be reported
     * @returns {AnswersBaseError} The reported error
     */


    _createClass(ErrorReporter, [{
      key: "report",
      value: function report(err) {
        if (!(err instanceof AnswersBaseError) || err.reported) {
          return;
        }

        err.reported = true;
        this.printError(err);

        if (this.sendToServer) {
          var requestConfig = {
            endpoint: '/v2/accounts/me/answers/errors',
            apiKey: this.apiKey,
            version: 20190301,
            environment: this.environment,
            params: {
              'libVersion': LIB_VERSION,
              'experienceVersion': this.experienceVersion,
              'experienceKey': this.experienceKey,
              'error': err.toJson()
            }
          };
          var request = new ApiRequest(requestConfig, this.globalStorage); // TODO(amullings): We should probably change this endpoint to POST,
          // ideally using the beacon API. Stack traces will likely easily hit URL
          // length limits.

          request.get()["catch"](console.err);
        }

        return err;
      }
      /**
       * prints the given error to the browser console
       * @param {AnswersBaseError} err The error to be printed
       */

    }, {
      key: "printError",
      value: function printError(err) {
        if (this.printVerbose) {
          console.error("error: ".concat(err.errorMessage, "\ncode: ").concat(err.errorCode, "\nboundary: ").concat(err.boundary, "\nstack: ").concat(err.stack));
        } else {
          console.error(err.toString());
        }
      }
    }]);

    return ErrorReporter;
  }();

  /** @typedef {import('../services/errorreporterservice').default} ErrorReporterService */

  /**
   * @implements {ErrorReporterService}
   */
  var ConsoleErrorReporter =
  /*#__PURE__*/
  function () {
    function ConsoleErrorReporter() {
      _classCallCheck(this, ConsoleErrorReporter);
    }

    _createClass(ConsoleErrorReporter, [{
      key: "report",

      /** @inheritdoc */
      value: function report(err) {
        console.error(err.toString());
      }
    }]);

    return ConsoleErrorReporter;
  }();

  /** @module PersistentStorage */

  var PersistentStorage =
  /*#__PURE__*/
  function () {
    function PersistentStorage() {
      var _this = this;

      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      _classCallCheck(this, PersistentStorage);

      /**
       * The current params model
       * @type {SearchParams}
       */
      this._params = new SearchParams(window.location.search.substring(1));
      /**
       * The list of listeners to every storage update
       * @type {function[]}
       */

      this._updateListener = config.updateListener || function () {};
      /**
       * The list of listeners to storage resets
       * @type {function[]}
       */


      this._resetListener = config.resetListener || function () {};

      window.onpopstate = function () {
        _this._params = new SearchParams(window.location.search.substring(1));

        _this._callListener(_this._updateListener);

        _this._callListener(_this._resetListener);
      };
    }
    /**
     * Insert the given key/value pair into storage
     * @param {string} key The key to insert the data in
     * @param {*} data The data to insert
     * @param {boolean} replace history instead of pushing new state
     */


    _createClass(PersistentStorage, [{
      key: "set",
      value: function set(key, data) {
        var replaceHistory = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

        if (typeof key !== 'string') {
          throw new AnswersStorageError('Storage data key must be a string', key, data);
        }

        var newData = data;

        if (typeof data !== 'string') {
          newData = JSON.stringify(data);
        }

        this._params.set(key, newData);

        this._updateHistory(replaceHistory);
      }
      /**
       * Delete the given key from storage
       * @param {string} key The key to delete
       * @param {boolean} replace history instead of pushing new state
       */

    }, {
      key: "delete",
      value: function _delete(key) {
        var replaceHistory = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

        this._params["delete"](key);

        this._updateHistory(replaceHistory);
      }
    }, {
      key: "_updateHistory",
      value: function _updateHistory() {
        var replaceHistory = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
        var currentParams = new SearchParams(window.location.search.substring(1));

        if (equivalentParams(this._params, currentParams)) {
          return;
        }

        if (replaceHistory) {
          window.history.replaceState(null, null, "?".concat(this._params.toString()));
        } else {
          window.history.pushState(null, null, "?".concat(this._params.toString()));
        }

        this._callListener(this._updateListener);
      }
      /**
       * Invoke the given list of callbacks with the current storage data
       * @param {function[]} listeners The callbacks to invoke
       * @private
       */

    }, {
      key: "_callListener",
      value: function _callListener(listener) {
        listener(this.getAll(), this._params.toString());
      }
      /**
       * Get all the key/value pairs in storage
       */

    }, {
      key: "getAll",
      value: function getAll() {
        var allParams = {};
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = this._params.entries()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var _step$value = _slicedToArray(_step.value, 2),
                key = _step$value[0],
                val = _step$value[1];

            allParams[key] = val;
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator["return"] != null) {
              _iterator["return"]();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        return allParams;
      }
    }]);

    return PersistentStorage;
  }();

  /** @module SearchConfig */

  var SearchConfig =
  /*#__PURE__*/
  function () {
    function SearchConfig() {
      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      _classCallCheck(this, SearchConfig);

      /**
       * The max results per search.
       * Also defines the number of results per page, if pagination is enabled
       * @type {number}
       */
      this.limit = config.limit || 20;
      /**
       * The vertical key to use for all searches
       * @type {string}
       */

      this.verticalKey = config.verticalKey || null;
      /**
       * A default search to use on initialization for vertical searchers, when the user has't provided a query
       * @type {string}
       */

      this.defaultInitialSearch = config.defaultInitialSearch;
      this.validate();
      Object.freeze(this);
    }

    _createClass(SearchConfig, [{
      key: "validate",
      value: function validate() {
        if (typeof this.limit !== 'number' || this.limit < 1 || this.limit > 50) {
          throw new AnswersConfigError('Search Limit must be between 1 and 50', 'SearchConfig');
        }
      }
    }]);

    return SearchConfig;
  }();

  /** @module AutoCompleteData */
  var AutoCompleteData =
  /*#__PURE__*/
  function () {
    function AutoCompleteData() {
      var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      _classCallCheck(this, AutoCompleteData);

      this.sections = data.sections || [];
      this.queryId = data.queryId || '';
      this.inputIntents = data.inputIntents || [];
      Object.freeze(this);
    }

    _createClass(AutoCompleteData, null, [{
      key: "from",
      value: function from(response) {
        var sections;

        if (response.sections) {
          sections = response.sections.map(function (s) {
            return {
              label: s.label,
              results: s.results.map(function (r) {
                return new AutoCompleteResult(r);
              })
            };
          });
        } else {
          sections = [{
            results: response.results.map(function (r) {
              return new AutoCompleteResult(r);
            })
          }];
        }

        var inputIntents = response.input ? response.input.queryIntents : [];
        return new AutoCompleteData({
          sections: sections,
          queryId: response.queryId,
          inputIntents: inputIntents
        });
      }
    }]);

    return AutoCompleteData;
  }();
  var AutoCompleteResult = function AutoCompleteResult() {
    var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, AutoCompleteResult);

    this.filter = data.filter || {};
    this.key = data.key || '';
    this.matchedSubstrings = data.matchedSubstrings || [];
    this.value = data.value || '';
    this.shortValue = data.shortValue || this.value;
    this.intents = data.queryIntents || [];
    Object.freeze(this);
  };

  /**
   * A Data Transformer that takes the response object from a AutoComplete request
   * And transforms in to a front-end oriented data structure that our
   * component library and core storage understand.
   *
   * TODO(billy) Create our own front-end data models
   */

  var AutoCompleteDataTransformer =
  /*#__PURE__*/
  function () {
    function AutoCompleteDataTransformer() {
      _classCallCheck(this, AutoCompleteDataTransformer);
    }

    _createClass(AutoCompleteDataTransformer, null, [{
      key: "clean",
      value: function clean(moduleId, data) {
        if (data.sections && data.sections.length === 0) {
          delete data.sections;
        }

        if (data.sections && data.sections.length === 1 && data.sections[0].results.length === 0) {
          delete data.sections;
        }

        return _defineProperty({}, moduleId, data);
      }
    }, {
      key: "universal",
      value: function universal(response) {
        return AutoCompleteData.from(response);
      }
    }, {
      key: "filter",
      value: function filter(response) {
        return AutoCompleteData.from(response);
      }
    }, {
      key: "vertical",
      value: function vertical(response) {
        return AutoCompleteData.from(response);
      }
    }]);

    return AutoCompleteDataTransformer;
  }();

  /** @typedef {import('./autocompleteservice').default} AutoCompleteService */

  /**
   * AutoCompleteApi exposes an interface for network related matters
   * for all the autocomplete endpoints.
   *
   * @implements {AutoCompleteService}
   */

  var AutoCompleteApi =
  /*#__PURE__*/
  function () {
    function AutoCompleteApi() {
      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var globalStorage = arguments.length > 1 ? arguments[1] : undefined;

      _classCallCheck(this, AutoCompleteApi);

      /**
       * The API Key to use for the request
       * @type {string}
       * @private
       */
      if (!config.apiKey) {
        throw new AnswersBasicError('Api Key is required', 'AutoComplete');
      }

      this._apiKey = config.apiKey;
      /**
       * The Answers Key to use for the request
       * @type {string}
       * @private
       */

      if (!config.experienceKey) {
        throw new AnswersBasicError('Answers Key is required', 'AutoComplete');
      }

      this._experienceKey = config.experienceKey;
      /**
       * The version of the API to make a request to
       * @type {string}
       * @private
       */

      this._version = config.version || 20190101 || 20190301;
      /**
       * The answers config version to use for all requests
       * @type {string}
       * @private
       */

      this._experienceVersion = config.experienceVersion;
      /**
       * The locale to use for the request
       * @type {string}
       * @private
       */

      if (!config.locale) {
        throw new AnswersBasicError('Locale is required', 'AutoComplete');
      }

      this._locale = config.locale;
      /**
       * The global storage instance of the experience
       * @type {GlobalStorage}
       * @private
       */

      if (!globalStorage) {
        throw new AnswersBasicError('Global storage is required', 'AutoComplete');
      }

      this._globalStorage = globalStorage;
      /**
       * The environment of the Answers experience
       * @type {string}
       * @private
       */

      this._environment = config.environment;
      /**
       * The base url for the autocomplete API request
       * @type {string}
       * @private
       */

      this._baseUrl = getCachedLiveApiUrl(this._environment);
    }
    /** @inheritdoc */


    _createClass(AutoCompleteApi, [{
      key: "queryFilter",
      value: function queryFilter(input, config) {
        var requestConfig = {
          endpoint: '/v2/accounts/me/answers/filtersearch',
          apiKey: this._apiKey,
          version: this._version,
          environment: this._environment,
          params: {
            'input': input,
            'experienceKey': this._experienceKey,
            'version': this._experienceVersion,
            'verticalKey': config.verticalKey,
            'locale': this._locale,
            'search_parameters': JSON.stringify(config.searchParameters)
          }
        };
        var request = new ApiRequest(requestConfig, this._globalStorage);
        return request.get().then(function (response) {
          return response.json();
        }).then(function (response) {
          return AutoCompleteDataTransformer.filter(response.response);
        })["catch"](function (error) {
          throw new AnswersEndpointError('Filter search request failed', 'AutoComplete', error);
        });
      }
      /** @inheritdoc */

    }, {
      key: "queryVertical",
      value: function queryVertical(input, verticalKey) {
        var requestConfig = {
          endpoint: '/v2/accounts/me/answers/vertical/autocomplete',
          apiKey: this._apiKey,
          version: this._version,
          environment: this._environment,
          baseUrl: this._baseUrl,
          params: {
            'input': input,
            'experienceKey': this._experienceKey,
            'version': this._experienceVersion,
            'verticalKey': verticalKey,
            'locale': this._locale
          }
        };
        var request = new ApiRequest(requestConfig, this._globalStorage);
        return request.get().then(function (response) {
          return response.json();
        }).then(function (response) {
          return AutoCompleteDataTransformer.vertical(response.response);
        })["catch"](function (error) {
          throw new AnswersEndpointError('Vertical search request failed', 'AutoComplete', error);
        });
      }
      /** @inheritdoc */

    }, {
      key: "queryUniversal",
      value: function queryUniversal(queryString) {
        var requestConfig = {
          endpoint: '/v2/accounts/me/answers/autocomplete',
          apiKey: this._apiKey,
          version: this._version,
          environment: this._environment,
          baseUrl: this._baseUrl,
          params: {
            'input': queryString,
            'experienceKey': this._experienceKey,
            'version': this._experienceVersion,
            'locale': this._locale
          }
        };
        var request = new ApiRequest(requestConfig, this._globalStorage);
        return request.get().then(function (response) {
          return response.json();
        }).then(function (response) {
          return AutoCompleteDataTransformer.universal(response.response);
        })["catch"](function (error) {
          throw new AnswersEndpointError('Universal search request failed', 'AutoComplete', error);
        });
      }
    }]);

    return AutoCompleteApi;
  }();

  /** @typedef {import('../services/autocompleteservice').default} AutoCompleteService */

  var universalOptions = ['what is yext', 'who is the ceo of yext'];
  var verticalOptions = ['near me', 'in new york', 'available now'];
  /**
   * MockAutoCompleteService serves autocomplete queries with mock data
   *
   * @implements {AutoCompleteService}
   */

  var MockAutoCompleteService =
  /*#__PURE__*/
  function () {
    function MockAutoCompleteService() {
      _classCallCheck(this, MockAutoCompleteService);
    }

    _createClass(MockAutoCompleteService, [{
      key: "queryFilter",

      /** @inheritdoc */
      value: function queryFilter(input, config) {
        // TODO(amullings): Simulate filter search, with sections
        return emptyResults();
      }
      /** @inheritdoc */

    }, {
      key: "queryVertical",
      value: function queryVertical(input, verticalKey) {
        return filterOptions(input, verticalOptions.map(function (opt) {
          return "".concat(verticalKey, " ").concat(opt);
        }).concat(universalOptions));
      }
      /** @inheritdoc */

    }, {
      key: "queryUniversal",
      value: function queryUniversal(input) {
        return filterOptions(input, universalOptions);
      }
    }]);

    return MockAutoCompleteService;
  }();

  function filterOptions(input, options) {
    if (input.length === 0) {
      return emptyResults();
    }

    var lowercase = input.toLowerCase();
    var results = options.filter(function (opt) {
      return opt.includes(lowercase);
    }).map(function (opt) {
      return new AutoCompleteResult({
        value: opt,
        matchedSubstrings: [{
          offset: opt.indexOf(lowercase),
          length: lowercase.length
        }]
      });
    });
    return Promise.resolve(new AutoCompleteData({
      sections: [{
        results: results
      }],
      queryId: randomString()
    }));
  }
  /**
   * @returns {Promise<AutoCompleteData>}
   */


  function emptyResults() {
    return Promise.resolve(new AutoCompleteData({
      sections: [{}],
      queryId: randomString()
    }));
  }
  /**
   * @returns {string}
   */


  function randomString() {
    return Math.random().toString(36).substring(2);
  }

  /** @typedef {import('./questionanswerservice').default} QuestionAnswerService */

  /**
   * QuestionAnswerApi submits questions via the Q&A REST API
   *
   * @implements {QuestionAnswerService}
   */

  var QuestionAnswerApi =
  /*#__PURE__*/
  function () {
    function QuestionAnswerApi() {
      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var globalStorage = arguments.length > 1 ? arguments[1] : undefined;

      _classCallCheck(this, QuestionAnswerApi);

      /**
       * The API Key to use for the request
       * @type {string}
       * @private
       */
      if (!config.apiKey) {
        throw new AnswersBasicError('Api Key is required', 'QuestionAnswerApi');
      }

      this._apiKey = config.apiKey;
      /**
       * The global storage instance of the experience
       * @type {GlobalStorage}
       * @private
       */

      if (!globalStorage) {
        throw new AnswersBasicError('Global storage is required', 'QuestionAnswerApi');
      }

      this._globalStorage = globalStorage;
      /**
       * The environment of the Answers experience
       * @type {string}
       * @private
       */

      this._environment = config.environment || PRODUCTION;
    }
    /** @inheritdoc */


    _createClass(QuestionAnswerApi, [{
      key: "submitQuestion",
      value: function submitQuestion(question) {
        var requestConfig = {
          baseUrl: getKnowledgeApiUrl(this._environment),
          endpoint: '/v2/accounts/me/createQuestion',
          apiKey: this._apiKey,
          params: {
            'entityId': question.entityId,
            'site': question.site,
            'name': question.name,
            'email': question.email,
            'questionText': question.questionText,
            'questionDescription': question.questionDescription,
            'questionLanguage': question.questionLanguage
          }
        };
        var request = new ApiRequest(requestConfig, this._globalStorage);
        return request.post({
          mode: 'cors',
          headers: {
            'Content-Type': 'application/json'
          }
        }).then(function (response) {
          return response.json();
        })["catch"](function (error) {
          throw new AnswersEndpointError('Question submit failed', 'QuestionAnswerApi', error);
        });
      }
    }]);

    return QuestionAnswerApi;
  }();

  /** @module MockQuestionAnswerService */

  /** @typedef {import('../services/questionanswerservice').default} QuestionAnswerService */

  /**
   * @implements {QuestionAnswerService}
   */
  var MockQuestionAnswerService =
  /*#__PURE__*/
  function () {
    function MockQuestionAnswerService() {
      _classCallCheck(this, MockQuestionAnswerService);
    }

    _createClass(MockQuestionAnswerService, [{
      key: "submitQuestion",

      /** @inheritdoc */
      value: function submitQuestion(question) {
        // TODO(amullings): Make actual response object once we're using it for
        // something
        return Promise.resolve({});
      }
    }]);

    return MockQuestionAnswerService;
  }();

  /* global fetch */

  /** @typedef {import('../models/section').default} Section */

  /** @typedef {import('../services/searchservice').default} SearchService */

  /**
   * @typedef {Object} ResultData
   * @property {Object} data
   * @property {string } htmlTitle
   */

  /**
   * @callback ResultsModifier
   * @param {ResultData[]} results
   * @returns {ResultData[]}
   */

  /**
   * @callback MockDataConsumer
   * @param {Section[]} sections
   * @returns {Promise<Object>}
   */
  var ARBITRARY_BUSINESS_ID = 919871;
  /**
   * @implements {SearchService}
   */

  var MockSearchService =
  /*#__PURE__*/
  function () {
    function MockSearchService() {
      _classCallCheck(this, MockSearchService);

      /**
       * @type {Promise<string>}
       * @private
       */
      this._getMockDataJson = fetch('https://assets.sitescdn.net/answers/testdata/search/mockdata_v1.json').then(function (resp) {
        return resp.text();
      })["catch"](console.error);
    }
    /** @inheritdoc */


    _createClass(MockSearchService, [{
      key: "verticalSearch",
      value: function verticalSearch(verticalKey, _ref) {
        var input = _ref.input,
            filter = _ref.filter,
            facetFilter = _ref.facetFilter,
            limit = _ref.limit,
            offset = _ref.offset,
            id = _ref.id,
            geolocation = _ref.geolocation,
            isDynamicFiltersEnabled = _ref.isDynamicFiltersEnabled,
            skipSpellCheck = _ref.skipSpellCheck,
            queryTrigger = _ref.queryTrigger;
        return this.useMockData(function (sections) {
          if (input === '') {
            return delayedResponse(constructVerticalResponse({
              results: [],
              appliedQueryFilters: []
            }));
          } // Either find a section with matching ID, or pick one at random


          var section = sections.find(function (verticalModule) {
            return verticalKey === verticalModule['verticalConfigId'];
          });

          if (section == null) {
            section = sections[Math.floor(Math.random() * sections.length)];
          }

          modifyResults(section, getResultsFilterer(input));

          if (offset != null && limit != null) {
            modifyResults(section, function limit(results) {
              return results.slice(offset, offset + limit);
            });
          }

          var resp = constructVerticalResponse(section);
          return delayedResponse(resp);
        });
      }
      /** @inheritdoc */

    }, {
      key: "universalSearch",
      value: function universalSearch(queryString, params) {
        return this.useMockData(function (sections) {
          if (queryString === '') {
            return delayedResponse(constructUniversalResponse([]));
          }

          sections.forEach(function (section) {
            modifyResults(section, getResultsFilterer(queryString));
          });
          sections = sections.filter(function (section) {
            return section.results.length > 0;
          });
          var resp = constructUniversalResponse(sections);
          return delayedResponse(resp);
        });
      }
      /**
       * @param {MockDataConsumer} consumer
       * @returns {Promise<Object>}
       * @private
       */

    }, {
      key: "useMockData",
      value: function useMockData(consumer) {
        return this._getMockDataJson.then(JSON.parse).then(consumer);
      }
    }]);

    return MockSearchService;
  }();

  function getResultsFilterer(queryString) {
    return function (results) {
      return results.filter(function (result) {
        if (result.htmlTitle && result.htmlTitle.toLowerCase().includes(queryString)) {
          return true;
        }

        for (var prop in result.data) {
          var val = result.data[prop];

          if (typeof val === 'string' && val.toLowerCase().includes(queryString)) {
            return true;
          }
        }

        return false;
      });
    };
  }
  /**
   * @param {Section} section
   * @param {ResultsModifier} modifyFn
   */


  function modifyResults(section, modifyFn) {
    section.results = modifyFn(section.results);
  }
  /**
   * @param {Section[]} sections A list of mock section data
   * @returns {Object} A mock AnswersApi response
   */


  function constructUniversalResponse(sections) {
    // TODO(amullings): spellcheck, geo, filters
    // TODO(amullings): Fake encodedState once the SDK uses it
    sections = sections.map(fillSectionFields);
    return {
      meta: {
        uuid: uuidV4(),
        errors: []
      },
      response: {
        businessId: ARBITRARY_BUSINESS_ID,
        modules: sections,
        failedVerticals: [],
        queryId: uuidV4(),
        searchIntents: []
      }
    };
  }
  /**
   * @param {Section} section A mock section data
   * @returns {Object} A mock AnswersApi response
   */


  function constructVerticalResponse(section) {
    // TODO(amullings): spellcheck, geo, filters
    // TODO(amullings): Fake encodedState once the SDK uses it
    section = fillSectionFields(section);
    return {
      meta: {
        uuid: uuidV4(),
        errors: []
      },
      response: Object.assign(section, {
        businessId: ARBITRARY_BUSINESS_ID,
        queryId: uuidV4(),
        searchIntents: []
      })
    };
  }
  /**
   * @param {Section}
   * @returns {Section}
   */


  function fillSectionFields(section) {
    return {
      verticalConfigId: section.verticalConfigId,
      resultsCount: section.results.length,
      encodedState: '',
      results: section.results,
      appliedQueryFilters: section.appliedQueryFilters,
      queryDurationMillis: randomInt(50, 1000),
      facets: section.facets,
      source: section.source
    };
  }
  /**
   * @param {Object} resp
   * @returns {Promise<Object>}
   */


  function delayedResponse(resp) {
    return new Promise(function (resolve) {
      setTimeout(function () {
        resolve(resp);
      }, randomInt(250, 1000));
    });
  }
  /**
   * Code-golf-y but legit basic UUID v4 implementation. Not cryptographically secure.
   * From https://gist.github.com/jed/982883
   * @returns {string} A v4-compliant UUID
   */


  function uuidV4() {
    return function b(a) {
      return a ? (a ^ Math.random() * 16 >> a / 4).toString(16) : ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, b);
    }();
  }
  /**
   * @param {number} min inclusive
   * @param {number} max exclusive
   * @returns {number} A random integer in the specified range
   */


  function randomInt(min, max) {
    return Math.floor(Math.random() * (max - min) + min);
  }

  function getUrlParams() {
    return new SearchParams(window.location.search.substring(1));
  }
  function getDefaultTabOrder(tabsConfig, urlParams) {
    var tabOrder = []; // Use the ordering from the URL as the primary configuration
    // And then merge it with the local configuration, if provided.

    if (urlParams && urlParams.has('tabOrder')) {
      tabOrder = urlParams.get('tabOrder').split(',');
    }

    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = tabsConfig[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var tab = _step.value;
        var verticalKeyOrUrl = tab.verticalKey || tab.url; // Avoid duplicates if config was provided from URL

        if (tabOrder.includes(verticalKeyOrUrl)) {
          continue;
        } // isFirst should always be the first element in the list


        if (tab.isFirst) {
          tabOrder.unshift(verticalKeyOrUrl);
        } else {
          tabOrder.push(verticalKeyOrUrl);
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator["return"] != null) {
          _iterator["return"]();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    return tabOrder;
  }
  /**
   * mergeTabOrder merges two arrays into one
   * by appending additional tabs to the end of the original array
   * @param {string[]} tabOrder Tab order provided by the server
   * @param {string[]} otherTabOrder Tab order provided by configuration
   * @return {string[]}
   */

  function mergeTabOrder(tabOrder, otherTabOrder, tabs) {
    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
      for (var _iterator2 = otherTabOrder[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
        var tabConfig = _step2.value;

        if (tabOrder.includes(tabConfig)) {
          continue;
        } // isFirst should be an override to dynamic tab ordering.


        if (tabs[tabConfig] && tabs[tabConfig].isFirst) {
          tabOrder.unshift(tabConfig);
        } else {
          tabOrder.push(tabConfig);
        }
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
          _iterator2["return"]();
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }

    return tabOrder;
  }
  function getTabOrder(tabsConfig, dataTabOrder) {
    var tabOrder = getDefaultTabOrder(tabsConfig, getUrlParams()); // We want to persist the params from the existing URL to the new
    // URLS we create.

    if (tabOrder && dataTabOrder) {
      tabOrder = mergeTabOrder(dataTabOrder, tabOrder, tabsConfig);
    }

    return tabOrder;
  }

  /**
   * The debounce duration for resize events
   * @type {number}
   */

  var RESIZE_DEBOUNCE = 100;
  /**
   * The breakpoint for mobile
   * @type {number}
   */

  var MOBILE_BREAKPOINT = 767;
  /**
   * Enum options for mobile overflow beahvior
   * @type {Object.<string, string>}
   */

  var MOBILE_OVERFLOW_BEHAVIOR_OPTION = {
    COLLAPSE: 'COLLAPSE',
    INNERSCROLL: 'INNERSCROLL'
  };
  /**
   * The Tab is a model that is used to power the Navigation tabs in the view.
   * It's initialized through the configuration provided to the component.
   */

  var Tab =
  /*#__PURE__*/
  function () {
    function Tab(config) {
      _classCallCheck(this, Tab);

      /**
       * The name of the tab that is exposed for the link
       * @type {string}
       */
      this.label = config.label;

      if (typeof this.label !== 'string') {
        throw new AnswersComponentError('label is a required configuration option for tab.', 'NavigationComponent');
      }
      /**
       * The complete URL, including the params
       * @type {string}
       */


      this.url = config.url;

      if (typeof this.url !== 'string') {
        throw new AnswersComponentError('url is a required configuration option for tab.', 'NavigationComponent');
      }
      /**
       * The serverside vertical config id that this is referenced to.
       * By providing this, enables dynamic sorting based on results.
       * @type {string}
       */


      this.verticalKey = config.verticalKey || null;
      /**
       * The base URL used for constructing the URL with params
       * @type {string}
       */

      this.baseUrl = config.url;
      /**
       * Determines whether to show this tab first in the order
       * @type {boolean}
       */

      this.isFirst = config.isFirst || false;
      /**
       * Determines whether or not to apply a special class to the
       * markup to determine if it's an active tab
       * @type {boolean}
       */

      this.isActive = config.isActive || false;
    }
    /**
     * from will construct a map of verticalKey to {Tab} from
     * a configuration file
     * @param {object} tabsConfig the configuration to use
     */


    _createClass(Tab, null, [{
      key: "from",
      value: function from(tabsConfig) {
        var tabs = {}; // Parse the options and build out our tabs and

        for (var i = 0; i < tabsConfig.length; i++) {
          var tab = _objectSpread({}, tabsConfig[i]); // If a tab is configured to be hidden in this component,
          // do not process it


          if (tab.hideInNavigation) {
            continue;
          } // For tabs without config ids, map their URL to the configID
          // to avoid duplication of renders


          if (!tab.verticalKey && !tabs[tab.url]) {
            tab.verticalKey = tab.url;
          }

          tabs[tab.verticalKey] = new Tab(tab);
        }

        return tabs;
      }
    }]);

    return Tab;
  }();
  /**
   * NavigationComponent exposes an interface for building a dynamic
   * navigation that is powered by universal search updates.
   * @extends Component
   */

  var NavigationComponent =
  /*#__PURE__*/
  function (_Component) {
    _inherits(NavigationComponent, _Component);

    function NavigationComponent() {
      var _this;

      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var systemConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      _classCallCheck(this, NavigationComponent);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(NavigationComponent).call(this, config, systemConfig));
      /**
       * The label to show on the dropdown menu button when overflow
       * @type {string}
       */

      _this.overflowLabel = config.overflowLabel || 'More';
      /**
       * The optional icon to show on the dropdown menu button when overflow
       * @type {string}
       */

      _this.overflowIcon = config.overflowIcon || 'kabob';
      /**
       * The data storage key
       * @type {string}
       */

      _this.moduleId = StorageKeys.NAVIGATION;
      /**
       * Tabs config from global navigation config
       * @type {Array.<object>}
       * @private
       */

      _this._tabsConfig = config.verticalPages || _this.core.globalStorage.getState(StorageKeys.VERTICAL_PAGES_CONFIG).get();
      /**
       * Unordered map of each tab, keyed by VS verticalKey
       * @type {Object.<String, Object>}
       * @private
       */

      _this._tabs = Tab.from(_this._tabsConfig);
      /**
       * The order of the tabs, parsed from configuration or URL.
       * This gets updated based on the server results
       * @type {Array.<String>} The list of VS verticalKeys
       * @private
       */

      _this._tabOrder = getDefaultTabOrder(_this._tabsConfig, getUrlParams());
      /**
       * Breakpoints at which navigation items move to the "more" dropdown
       * @type {number[]}
       * @private
       */

      _this._navBreakpoints = [];
      /**
       *  The mobile overflow behavior config
       *  @type {string}
       */

      _this._mobileOverflowBehavior = config.mobileOverflowBehavior || MOBILE_OVERFLOW_BEHAVIOR_OPTION.COLLAPSE;
      /**
       *  The ARIA label
       *  @type {string}
       */

      _this._ariaLabel = config.ariaLabel || 'Search Page Navigation';
      _this.checkOutsideClick = _this.checkOutsideClick.bind(_assertThisInitialized(_this));
      _this.checkMobileOverflowBehavior = _this.checkMobileOverflowBehavior.bind(_assertThisInitialized(_this));

      _this.core.globalStorage.on('update', StorageKeys.API_CONTEXT, function () {
        _this.setState(_this.core.globalStorage.getState(StorageKeys.NAVIGATION) || {});
      });

      return _this;
    }

    _createClass(NavigationComponent, [{
      key: "onCreate",
      value: function onCreate() {
        // TODO: Re-rendering and re-mounting the component every tim e the window changes size
        // is not great.
        DOM.on(window, 'resize', this.checkMobileOverflowBehavior);
      }
    }, {
      key: "onDestroy",
      value: function onDestroy() {
        DOM.off(window, 'resize', this.checkMobileOverflowBehavior);
      }
    }, {
      key: "onMount",
      value: function onMount() {
        if (this.shouldCollapse()) {
          this._navBreakpoints = [];
          this.bindOverflowHandlers();
          this.refitNav();
          DOM.on(DOM.query(this._container, '.yxt-Nav-more'), 'click', this.toggleMoreDropdown.bind(this));
        }
      }
    }, {
      key: "onUnMount",
      value: function onUnMount() {
        this.unbindOverflowHandlers();
      }
    }, {
      key: "bindOverflowHandlers",
      value: function bindOverflowHandlers() {
        DOM.on(window, 'click', this.checkOutsideClick);
      }
    }, {
      key: "unbindOverflowHandlers",
      value: function unbindOverflowHandlers() {
        DOM.off(window, 'click', this.checkOutsideClick);
      }
    }, {
      key: "refitNav",
      value: function refitNav() {
        var container = DOM.query(this._container, '.yxt-Nav-container');
        var moreButton = DOM.query(this._container, '.yxt-Nav-more');
        var mainLinks = DOM.query(this._container, '.yxt-Nav-expanded');
        var collapsedLinks = DOM.query(this._container, '.yxt-Nav-modal');
        var navWidth = moreButton.classList.contains('yxt-Nav-item--more') ? container.offsetWidth : container.offsetWidth - moreButton.offsetWidth;
        var numBreakpoints = this._navBreakpoints.length; // sum child widths instead of using parent's width to avoid
        // browser inconsistencies

        var mainLinksWidth = 0;
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = mainLinks.children[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var el = _step.value;
            mainLinksWidth += el.offsetWidth;
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator["return"] != null) {
              _iterator["return"]();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        if (mainLinksWidth > navWidth) {
          this._navBreakpoints.push(mainLinksWidth);

          var lastLink = mainLinks.children.item(mainLinks.children.length - 1);

          if (lastLink === null) {
            return;
          }

          this._prepend(collapsedLinks, lastLink);

          if (moreButton.classList.contains('yxt-Nav-item--more')) {
            moreButton.classList.remove('yxt-Nav-item--more');
          }
        } else {
          if (numBreakpoints && navWidth > this._navBreakpoints[numBreakpoints - 1]) {
            var firstLink = collapsedLinks.children.item(0);

            if (firstLink === null) {
              return;
            }

            mainLinks.append(firstLink);

            this._navBreakpoints.pop();

            numBreakpoints--;
          }

          if (collapsedLinks.children.length === 0) {
            moreButton.classList.add('yxt-Nav-item--more');
          }
        }

        this.closeMoreDropdown();

        if (mainLinksWidth > navWidth || numBreakpoints > 0 && navWidth > this._navBreakpoints[numBreakpoints - 1]) {
          this.refitNav();
        }
      }
    }, {
      key: "closeMoreDropdown",
      value: function closeMoreDropdown() {
        var collapsed = DOM.query(this._container, '.yxt-Nav-modal');
        collapsed.classList.remove('is-active');
        var moreButton = DOM.query(this._container, '.yxt-Nav-more');
        moreButton.setAttribute('aria-expanded', false);
      }
    }, {
      key: "openMoreDropdown",
      value: function openMoreDropdown() {
        var collapsed = DOM.query(this._container, '.yxt-Nav-modal');
        collapsed.classList.add('is-active');
        var moreButton = DOM.query(this._container, '.yxt-Nav-more');
        moreButton.setAttribute('aria-expanded', true);
      }
    }, {
      key: "toggleMoreDropdown",
      value: function toggleMoreDropdown() {
        var collapsed = DOM.query(this._container, '.yxt-Nav-modal');
        collapsed.classList.toggle('is-active');
        var moreButton = DOM.query(this._container, '.yxt-Nav-more');
        moreButton.setAttribute('aria-expanded', collapsed.classList.contains('is-active'));
      }
    }, {
      key: "checkOutsideClick",
      value: function checkOutsideClick(e) {
        if (this._closest(e.target, '.yxt-Nav-container')) {
          return;
        }

        this.closeMoreDropdown();
      }
    }, {
      key: "checkMobileOverflowBehavior",
      value: function checkMobileOverflowBehavior() {
        if (this._checkMobileOverflowBehaviorTimer) {
          clearTimeout(this._checkMobileOverflowBehaviorTimer);
        }

        this._checkMobileOverflowBehaviorTimer = setTimeout(this.setState.bind(this), RESIZE_DEBOUNCE);
      }
      /**
       * Since the server data only provides a list of
       * VS verticalKeys, we need to compute and transform
       * the data into the proper format for rendering.
       *
       * @override
       */

    }, {
      key: "setState",
      value: function setState() {
        var _this2 = this;

        var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        if (data.tabOrder !== undefined) {
          this._tabOrder = mergeTabOrder(data.tabOrder, this._tabOrder, this._tabs);
        }

        var params = getUrlParams();
        params.set('tabOrder', this._tabOrder);
        var context = this.core.globalStorage.getState(StorageKeys.API_CONTEXT);

        if (context) {
          params.set(StorageKeys.API_CONTEXT, context);
        }

        var referrerPageUrl = this.core.globalStorage.getState(StorageKeys.REFERRER_PAGE_URL);

        if (referrerPageUrl !== null) {
          params.set(StorageKeys.REFERRER_PAGE_URL, referrerPageUrl);
        }

        var filteredParams = filterParamsForExperienceLink(params, function (types) {
          return _this2.componentManager.getComponentNamesForComponentTypes(types);
        }); // Since the tab ordering can change based on the server data
        // we need to update each tabs URL to include the order as part of their params.
        // This helps with persisting state across verticals.

        var tabs = [];

        for (var i = 0; i < this._tabOrder.length; i++) {
          var tab = this._tabs[this._tabOrder[i]];

          if (tab !== undefined) {
            tab.url = replaceUrlParams(tab.baseUrl, filteredParams);
            tabs.push(tab);
          }
        }

        return _get(_getPrototypeOf(NavigationComponent.prototype), "setState", this).call(this, {
          tabs: tabs,
          overflowLabel: this.overflowLabel,
          overflowIcon: this.overflowIcon,
          showCollapse: this.shouldCollapse(),
          ariaLabel: this._ariaLabel
        });
      } // TODO (agrow) investigate removing this
      // ParentNode.prepend polyfill
      // https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/prepend#Polyfill

    }, {
      key: "_prepend",
      value: function _prepend(collapsedLinks, lastLink) {
        if (!collapsedLinks.hasOwnProperty('prepend')) {
          var docFrag = document.createDocumentFragment();
          var isNode = lastLink instanceof Node;
          docFrag.appendChild(isNode ? lastLink : document.createTextNode(String(lastLink)));
          collapsedLinks.insertBefore(docFrag, collapsedLinks.firstChild);
          return;
        }

        collapsedLinks.prepend(lastLink);
      } // TODO (agrow) investigate removing this
      // Adapted from Element.closest polyfill
      // https://developer.mozilla.org/en-US/docs/Web/API/Element/closest#Polyfill

    }, {
      key: "_closest",
      value: function _closest(el, closestElSelector) {
        if (!el.hasOwnProperty('closest')) {
          do {
            if (DOM.matches(el, closestElSelector)) return el;
            el = el.parentElement || el.parentNode;
          } while (el !== null && el.nodeType === 1);

          return null;
        }

        return el.closest(closestElSelector);
      }
    }, {
      key: "shouldCollapse",
      value: function shouldCollapse() {
        switch (this._mobileOverflowBehavior) {
          case MOBILE_OVERFLOW_BEHAVIOR_OPTION.COLLAPSE:
            return true;

          case MOBILE_OVERFLOW_BEHAVIOR_OPTION.INNERSCROLL:
            var container = DOM.query(this._container, '.yxt-Nav-container') || this._container;

            var navWidth = container.offsetWidth;
            return navWidth > MOBILE_BREAKPOINT;
        }
      }
    }], [{
      key: "defaultTemplateName",

      /**
       * The template to render
       * @returns {string}
       * @override
       */
      value: function defaultTemplateName(config) {
        return 'navigation/navigation';
      }
    }, {
      key: "type",
      get: function get() {
        return 'Navigation';
      }
    }]);

    return NavigationComponent;
  }(Component);

  var IconState = {
    'YEXT': 0,
    'MAGNIFYING_GLASS': 1
  };
  /**
   * SearchComponent exposes an interface in order to create
   * a UI Search experience for vertical and universal search.
   *
   * @extends Component
   */

  var SearchComponent =
  /*#__PURE__*/
  function (_Component) {
    _inherits(SearchComponent, _Component);

    function SearchComponent() {
      var _this;

      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var systemConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      _classCallCheck(this, SearchComponent);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(SearchComponent).call(this, config, systemConfig));
      /**
       * The optional vertical key for vertical search configuration
       * If not provided, auto-complete and search will be based on universal
       * @type {string}
       */

      _this._verticalKey = config.verticalKey || null;
      /**
       * Query submission can optionally be based on a form as context. Note that if
       * a form is not used, the component has no guarantee of WCAG compliance.
       */

      _this._useForm = config.useForm !== undefined ? config.useForm : true;
      /**
       * Query submission is based on a form as context.
       * Optionally provided, otherwise defaults to native form node within container
       * @type {string} CSS selector
       */

      _this._formEl = config.formSelector || 'form';
      /**
       * The input element used for searching and wires up the keyboard interaction
       * Optionally provided.
       * @type {string} CSS selector
       */

      _this._inputEl = config.inputEl || '.js-yext-query';
      /**
       * The title used, provided to the template as a data point
       * Optionally provided. If not provided, no title will be included.
       * @type {string}
       */

      _this.title = config.title;
      /**
       * The label text is used for labeling the input box, also provided to template.
       * Optionally provided
       * @type {string}
       */

      _this.labelText = config.labelText || 'Conduct a search';
      /**
       * The submit text is used for labeling the submit button, also provided to the template.
       * @type {string}
       */

      _this.submitText = config.submitText || 'Submit';
      /**
       * The clear text is used for labeling the clear button, also provided to the template.
       * @type {string}
       */

      _this.clearText = config.clearText || 'Clear';
      /**
       * The submit icon is an icon for the submit button, if provided it will be displayed and the
       * submit text will be used for screen readers.
       * @type {string|null}
       */

      _this.submitIcon = config.submitIcon || null;
      /**
       * The query text to show as the first item for auto complete.
       * Optionally provided
       * @type {string}
       */

      _this.promptHeader = config.promptHeader || null;
      /**
       * Auto focuses the input box if set to true.
       * Optionally provided, defaults to false.
       * @type {boolean}
       */

      _this.autoFocus = config.autoFocus === true;
      /**
       * If true, show an "x" that allows the user to clear the current
       * query
       * @type {boolean}
       */

      _this.clearButton = config.clearButton === undefined ? true : config.clearButton;
      /**
       * When autofocusing on load, optionally open the autocomplete
       * (preset prompts)
       * @type {boolean}
       */

      _this.autocompleteOnLoad = config.autocompleteOnLoad || false;
      /**
       * submitURL will force the search query submission to get
       * redirected to the URL provided.
       * Optional, defaults to null.
       *
       * If no redirectUrl provided, we keep the page as a single page app.
       *
       * @type {boolean}
       */

      _this.redirectUrl = config.redirectUrl || null;
      /**
       * true if there is another search bar present on the page.
       * Twins only update the query, and do not search
       */

      _this._isTwin = config.isTwin;
      /**
       * The query string to use for the input box, provided to template for rendering.
       * Optionally provided
       * @type {string|null}
       */

      _this.query = config.query || _this.core.globalStorage.getState(StorageKeys.QUERY);

      _this.core.globalStorage.on('update', StorageKeys.QUERY, function (q) {
        _this.query = q;

        if (_this.queryEl) {
          _this.queryEl.value = q;
        }

        _this.debouncedSearch(q);
      });
      /**
       * The minimum time allowed in milliseconds between searches to prevent
       * many duplicate searches back-to-back
       * @type {number}
       * @private
       */


      _this._searchCooldown = config.searchCooldown || 300;
      /**
       * When true and "near me" intent is expressed, prompt the user for their geolocation
       * @type {boolean}
       * @private
       */

      _this._promptForLocation = config.promptForLocation === undefined ? true : Boolean(config.promptForLocation);
      /**
       * Controls showing and hiding the search clear button
       */

      _this._showClearButton = _this.clearButton && _this.query;
      /**
       * For vertical search bars, whether or not to allow empty searches.
       * @type {boolean}
       * @private
       */

      _this._allowEmptySearch = !!config.allowEmptySearch;
      /**
       * The name of the child AutoComplete component.
       * @type {string}
       * @private
       */

      _this._autoCompleteName = "".concat(_this.name, ".autocomplete");
      /**
       * Options to pass to the geolocation api.
       * @type {Object}
       */

      _this._geolocationOptions = _objectSpread({
        enableHighAccuracy: false,
        timeout: 1000,
        maximumAge: 300000
      }, config.geolocationOptions);
      /**
       * Options for the geolocation timeout alert.
       * @type {Object}
       */

      _this._geolocationTimeoutAlert = _objectSpread({
        enabled: false,
        message: 'We are unable to determine your location'
      }, config.geolocationTimeoutAlert);
      return _this;
    }

    _createClass(SearchComponent, [{
      key: "onCreate",
      value: function onCreate() {
        if (this.query != null && !this.redirectUrl) {
          this.core.setQuery(this.query);
        }
      }
    }, {
      key: "onMount",
      value: function onMount() {
        this.queryEl = DOM.query(this._container, this._inputEl);

        if (this.autoFocus && !this.query && !this.autocompleteOnLoad) {
          this.focusInputElement();
        }

        this.isUsingYextAnimatedIcon = !this._config.customIconUrl && !this.submitIcon;

        if (this.isUsingYextAnimatedIcon) {
          this.initAnimatedIcon();
        } // Wire up our search handling and auto complete


        this.initSearch(this._formEl);
        this.initAutoComplete(this._inputEl);

        if (this.clearButton) {
          this.initClearButton();
        }

        if (this.autoFocus && !this.query && this.autocompleteOnLoad) {
          this.focusInputElement();
        }
      }
    }, {
      key: "requestIconAnimationFrame",
      value: function requestIconAnimationFrame(iconState) {
        var _this2 = this;

        if (this.iconState === iconState) {
          return;
        }

        this.iconState = iconState;

        if (!this.isRequestingAnimationFrame) {
          this.isRequestingAnimationFrame = true;
          window.requestAnimationFrame(function () {
            _this2.forwardIcon.classList.remove('yxt-SearchBar-AnimatedIcon--paused');

            _this2.reverseIcon.classList.remove('yxt-SearchBar-AnimatedIcon--paused');

            if (_this2.iconState === IconState.MAGNIFYING_GLASS) {
              _this2.forwardIcon.classList.remove('yxt-SearchBar-AnimatedIcon--inactive');

              _this2.reverseIcon.classList.add('yxt-SearchBar-AnimatedIcon--inactive');
            } else if (_this2.iconState === IconState.YEXT) {
              _this2.forwardIcon.classList.add('yxt-SearchBar-AnimatedIcon--inactive');

              _this2.reverseIcon.classList.remove('yxt-SearchBar-AnimatedIcon--inactive');
            }

            _this2.isRequestingAnimationFrame = false;
          });
        }
      }
    }, {
      key: "animateIconToMagnifyingGlass",
      value: function animateIconToMagnifyingGlass() {
        if (this.iconIsFrozen) {
          return;
        }

        this.requestIconAnimationFrame(IconState.MAGNIFYING_GLASS);
      }
    }, {
      key: "animateIconToYext",
      value: function animateIconToYext(e) {
        var focusStillInSearchbar = false;

        if (e && e.relatedTarget) {
          focusStillInSearchbar = this._container.contains(e.relatedTarget);
        }

        if (this.iconIsFrozen || focusStillInSearchbar) {
          return;
        }

        this.requestIconAnimationFrame(IconState.YEXT);
      }
    }, {
      key: "initAnimatedIcon",
      value: function initAnimatedIcon() {
        var _this3 = this;

        this.iconState = this.autoFocus && !this.query ? IconState.MAGNIFYING_GLASS : IconState.YEXT;
        this.forwardIcon = DOM.query(this._container, '.js-yxt-AnimatedForward');
        this.reverseIcon = DOM.query(this._container, '.js-yxt-AnimatedReverse');
        var clickableElementSelectors = ['.js-yext-submit', '.js-yxt-SearchBar-clear'];

        for (var _i = 0, _clickableElementSele = clickableElementSelectors; _i < _clickableElementSele.length; _i++) {
          var selector = _clickableElementSele[_i];
          var clickableEl = DOM.query(this._container, selector);

          if (clickableEl) {
            DOM.on(clickableEl, 'mousedown', function () {
              _this3.iconIsFrozen = true;
            });
            DOM.on(clickableEl, 'mouseup', function () {
              _this3.iconIsFrozen = false;
            });
          }
        }

        DOM.on(this.queryEl, 'focus', function () {
          _this3.animateIconToMagnifyingGlass();
        });
        DOM.on(this._container, 'focusout', function (e) {
          _this3.animateIconToYext(e);
        });
      }
    }, {
      key: "remove",
      value: function remove() {
        this._autocomplete.remove();

        _get(_getPrototypeOf(SearchComponent.prototype), "remove", this).call(this);
      }
    }, {
      key: "initClearButton",
      value: function initClearButton() {
        var _this4 = this;

        var button = DOM.query(this._container, '.js-yxt-SearchBar-clear');
        this._showClearButton = this._showClearButton || this.query;
        button.classList.toggle('yxt-SearchBar--hidden', !this._showClearButton);
        DOM.on(button, 'click', function () {
          _this4.query = '';
          _this4._showClearButton = false;
          button.classList.add('yxt-SearchBar--hidden');
          _this4.queryEl.value = _this4.query;

          _this4.core.persistentStorage.set(StorageKeys.QUERY, _this4.query);

          _this4.core.persistentStorage["delete"](StorageKeys.SEARCH_OFFSET);

          _this4.core.globalStorage["delete"](StorageKeys.SEARCH_OFFSET);

          _this4.core.setQuery(_this4.query); // Focus the input element after clearing the query, regardless of whether
          // or not the autoFocus option is enabled.
          // NOTE(amullings): This depends heavily on the fact that the re-renders
          // triggered by setState and core.setQuery happen synchronously; if this
          // stops being the case at some point, we'll need an alternative solution


          _this4.focusInputElement();
        });
        DOM.on(this.queryEl, 'input', function (e) {
          var input = e.target.value;
          _this4.query = input;

          if (!_this4._showClearButton && input.length > 0) {
            _this4._showClearButton = true;
            button.classList.remove('yxt-SearchBar--hidden');
          } else if (_this4._showClearButton && input.length === 0) {
            _this4._showClearButton = false;
            button.classList.add('yxt-SearchBar--hidden');
          }
        });
      }
      /**
       * Registers the different event handlers that can issue a search. Note that
       * different handlers are used depending on whether or not a form is used as
       * context.
       *
       * @param {string} formSelector CSS selector to bind our form submit handling to
       */

    }, {
      key: "initSearch",
      value: function initSearch(formSelector) {
        var _this5 = this;

        this._formEl = formSelector;

        this._container.classList.add('yxt-SearchBar-wrapper');

        if (this._useForm) {
          var form = DOM.query(this._container, formSelector);

          if (!form) {
            throw new Error('Could not initialize SearchBar; Can not find {HTMLElement} `', this._formEl, '`.');
          }

          DOM.on(form, 'submit', function (e) {
            e.preventDefault(); // TODO(oshi) we should not use the same css selector (this._inputEl)
            // For both the autocomplete AND the search bar input
            // This is incredibly confusing, and also makes the first DOM.query
            // Rely on the order of the input el and autocomplete in the template

            var inputEl = form.querySelector(_this5._inputEl);

            _this5.onQuerySubmit(inputEl);
          });
        } else {
          var inputEl = DOM.query(this._container, this._inputEl);

          if (!inputEl) {
            throw new Error('Could not initialize SearchBar; Can not find {HTMLElement} `', this._inputEl, '`.');
          }

          DOM.on(inputEl, 'keydown', function (e) {
            if (e.key === 'Enter') {
              e.preventDefault();

              _this5.onQuerySubmit(inputEl);
            }
          });
          var submitButton = DOM.query(this._container, '.js-yext-submit');
          DOM.on(submitButton, 'click', function (e) {
            e.preventDefault();

            _this5.onQuerySubmit(inputEl);
          });
        }
      }
      /**
       * The handler for a query submission. This method first sets the new query in
       * persistent and global storage, than performs a debounced search.
       *
       * @param {Node} inputEl The input element containing the query.
       */

    }, {
      key: "onQuerySubmit",
      value: function onQuerySubmit(inputEl) {
        var query = inputEl.value;
        this.query = query;
        var params = new SearchParams(window.location.search.substring(1));
        params.set('query', query);
        var context = this.core.globalStorage.getState(StorageKeys.API_CONTEXT);

        if (context) {
          params.set(StorageKeys.API_CONTEXT, context);
        } // If we have a redirectUrl, we want the form to be
        // serialized and submitted.


        if (typeof this.redirectUrl === 'string') {
          if (this._allowEmptySearch || query) {
            window.location.href = this.redirectUrl + '?' + params.toString();
            return false;
          }
        }

        inputEl.blur();
        DOM.query(this._container, '.js-yext-submit').blur(); // TODO: move this into initClearButton

        if (this.clearButton) {
          var button = DOM.query(this._container, '.js-yxt-SearchBar-clear');

          if (this.query) {
            this._showClearButton = true;
            button.classList.remove('yxt-SearchBar--hidden');
          } else {
            this._showClearButton = false;
            button.classList.add('yxt-SearchBar--hidden');
          }
        }

        if (this.isUsingYextAnimatedIcon) {
          this.animateIconToYext();
        }

        this.core.persistentStorage.set(StorageKeys.QUERY, query);
        this.core.persistentStorage["delete"](StorageKeys.SEARCH_OFFSET);
        this.core.globalStorage["delete"](StorageKeys.SEARCH_OFFSET);
        this.core.setQuery(query);
        this.debouncedSearch(query);
        return false;
      }
      /**
       * A helper method to wire up our auto complete on an input selector
       * @param {string} inputSelector CSS selector to bind our auto complete component to
       */

    }, {
      key: "initAutoComplete",
      value: function initAutoComplete(inputSelector) {
        var _this6 = this;

        this._inputEl = inputSelector;

        if (this._autocomplete) {
          this._autocomplete.remove();
        }

        this._autocomplete = this.componentManager.create('AutoComplete', {
          parentContainer: this._container,
          name: this._autoCompleteName,
          container: '.yxt-SearchBar-autocomplete',
          autoFocus: this.autoFocus && !this.autocompleteOnLoad,
          verticalKey: this._verticalKey,
          promptHeader: this.promptHeader,
          originalQuery: this.query,
          inputEl: inputSelector,
          onSubmit: function onSubmit() {
            if (_this6._useForm) {
              DOM.trigger(DOM.query(_this6._container, _this6._formEl), 'submit');
            } else {
              var inputEl = DOM.query(_this6._container, inputSelector);

              _this6.onQuerySubmit(inputEl);
            }
          },
          onChange: function onChange() {
            DOM.trigger(DOM.query(_this6._container, inputSelector), 'input');
          }
        });
      }
      /**
       * Performs a debounced query using the provided string input. Specifically, a new search is not
       * performed if we recently searched, if there's no query for universal search, or if this
       * is a twin searchbar.
       * @param {string} query The string to query against.
       * @returns {Promise} A promise that will perform the query and update globalStorage accordingly.
       */

    }, {
      key: "debouncedSearch",
      value: function debouncedSearch(query) {
        var _this7 = this;

        if (this._throttled || !query && !this._verticalKey || !query && this._verticalKey && !this._allowEmptySearch || this._isTwin) {
          return;
        }

        this._throttled = true;
        setTimeout(function () {
          _this7._throttled = false;
        }, this._searchCooldown); // If _promptForLocation is enabled, we will compute the query's intent and, from there,
        // determine if it's necessary to prompt the user for their location information. It will
        // be unnecessary if the query does not have near me intent or we already have their location
        // stored.

        if (this._promptForLocation) {
          this.fetchQueryIntents(query).then(function (queryIntents) {
            return queryIntents.includes('NEAR_ME');
          }).then(function (queryHasNearMeIntent) {
            if (queryHasNearMeIntent && !_this7.core.globalStorage.getState(StorageKeys.GEOLOCATION)) {
              return new Promise(function (resolve, reject) {
                return navigator.geolocation.getCurrentPosition(function (position) {
                  _this7.core.globalStorage.set(StorageKeys.GEOLOCATION, {
                    lat: position.coords.latitude,
                    lng: position.coords.longitude,
                    radius: position.coords.accuracy
                  });

                  resolve(_this7.search(query));
                }, function () {
                  resolve(_this7.search(query));
                  var _this7$_geolocationTi = _this7._geolocationTimeoutAlert,
                      enabled = _this7$_geolocationTi.enabled,
                      message = _this7$_geolocationTi.message;

                  if (enabled) {
                    window.alert(message);
                  }
                }, _this7._geolocationOptions);
              });
            } else {
              return _this7.search(query);
            }
          });
        } else {
          return this.search(query);
        }
      }
      /**
       * Performs a query using the provided string input.
       * @param {string} query The string to query against.
       * @returns {Promise} A promise that will perform the query and update globalStorage accordingly.
       */

    }, {
      key: "search",
      value: function search(query) {
        if (this._verticalKey) {
          this.core.verticalSearch(this._config.verticalKey, {
            resetPagination: true,
            setQueryParams: true
          }, {
            input: query
          });
        } else {
          // NOTE(billy) Temporary hack for DEMO
          // Remove me after the demo
          var nav = this.componentManager.getActiveComponent('Navigation');

          if (nav) {
            var tabs = nav.getState('tabs');
            var urls = {};

            if (tabs && Array.isArray(tabs)) {
              for (var i = 0; i < tabs.length; i++) {
                var params = new SearchParams(tabs[i].url.split('?')[1]);
                params.set('query', query);
                var url = tabs[i].baseUrl;

                if (params.toString().length > 0) {
                  url += '?' + params.toString();
                }

                urls[tabs[i].configId] = url;
              }
            }

            return this.core.search(query, urls, {
              setQueryParams: true
            });
          }

          return this.core.search(query, undefined, {
            setQueryParams: true
          });
        }
      }
      /**
       * A helper method that computes the intents of the provided query. If the query was entered
       * manually into the search bar or selected via autocomplete, its intents will have been stored
       * already in globalStorage. Otherwise, a new API call will have to be issued to determine
       * intent.
       * @param {string} query The query whose intent is needed.
       * @returns {Promise} A promise containing the intents of the query.
       */

    }, {
      key: "fetchQueryIntents",
      value: function fetchQueryIntents(query) {
        var autocompleteData = this.core.globalStorage.getState("".concat(StorageKeys.AUTOCOMPLETE, ".").concat(this._autoCompleteName));

        if (!autocompleteData) {
          var autocompleteRequest = this._verticalKey ? this.core.autoCompleteVertical(query, this._autoCompleteName, this._verticalKey) : this.core.autoCompleteUniversal(query, this._autoCompleteName);
          return autocompleteRequest.then(function (data) {
            return data.inputIntents;
          });
        } else {
          // There are two alternatives to consider here. The user could have selected the query
          // as an autocomplete option or manually input it themselves. If the former, use the intents
          // of the corresponding autocomplete option. If the latter, use the inputIntents of the
          // autocompleteData.
          var results = autocompleteData.sections.flatMap(function (section) {
            return section.results;
          });
          var matchingResult = results.find(function (result) {
            return result.value === query;
          });
          var queryIntents = matchingResult ? matchingResult.intents : autocompleteData.inputIntents;
          return Promise.resolve(queryIntents);
        }
      }
      /**
       * A helper method that constructs the meta information needed by the SEARCH_CLEAR_BUTTON
       * analytics event.
       */

    }, {
      key: "eventOptions",
      value: function eventOptions() {
        var queryId = this.core.globalStorage.getState(StorageKeys.QUERY_ID);
        var options = Object.assign({}, queryId && {
          queryId: queryId
        }, this._verticalKey && {
          verticalKey: this._verticalKey
        });
        return JSON.stringify(options);
      }
    }, {
      key: "setState",
      value: function setState(data) {
        var forwardIconOpts = {
          iconName: 'yext_animated_forward',
          classNames: 'Icon--lg',
          complexContentsParams: {
            iconPrefix: this.name
          }
        };
        var reverseIconOpts = {
          iconName: 'yext_animated_reverse',
          classNames: 'Icon--lg',
          complexContentsParams: {
            iconPrefix: this.name
          }
        };
        return _get(_getPrototypeOf(SearchComponent.prototype), "setState", this).call(this, Object.assign({
          title: this.title,
          labelText: this.labelText,
          submitIcon: this.submitIcon,
          submitText: this.submitText,
          clearText: this.clearText,
          showClearButton: this._showClearButton,
          query: this.query || '',
          eventOptions: this.eventOptions(),
          iconId: this.name,
          forwardIconOpts: forwardIconOpts,
          reverseIconOpts: reverseIconOpts,
          autoFocus: this.autoFocus && !this.query,
          useForm: this._useForm
        }, data));
      }
    }, {
      key: "focusInputElement",
      value: function focusInputElement() {
        DOM.query(this._container, this._inputEl).focus();
      }
    }], [{
      key: "defaultTemplateName",

      /**
       * The template to render
       * @returns {string}
       * @override
       */
      value: function defaultTemplateName() {
        return 'search/search';
      }
    }, {
      key: "type",
      get: function get() {
        return 'SearchBar';
      }
    }]);

    return SearchComponent;
  }(Component);

  /** @module SearchParamsParser */
  function buildSearchParameters(searchParameterConfigs) {
    var searchParameters = {
      sectioned: false,
      fields: []
    };

    if (searchParameterConfigs === undefined) {
      return searchParameters;
    }

    if (searchParameterConfigs.sectioned) {
      searchParameters.sectioned = searchParameterConfigs.sectioned;
    }

    searchParameters.fields = buildFields(searchParameterConfigs.fields);
    return searchParameters;
  }

  function buildFields(fieldConfigs) {
    if (fieldConfigs === undefined) {
      return [];
    }

    return fieldConfigs.map(function (fc) {
      return _objectSpread({
        fetchEntities: false
      }, fc);
    });
  }

  /**
   * FilterSearchComponent is used for autocomplete using the FilterSearch backend.
   * It'll allow you to pick pre-set filters that are setup on the backend within
   * a vertical search context.
   *
   * @extends Component
   */

  var FilterSearchComponent =
  /*#__PURE__*/
  function (_Component) {
    _inherits(FilterSearchComponent, _Component);

    function FilterSearchComponent() {
      var _this;

      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var systemConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      _classCallCheck(this, FilterSearchComponent);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(FilterSearchComponent).call(this, config, systemConfig));
      /**
       * The vertical key for vertical search configuration
       * @type {string}
       */

      _this._verticalKey = config.verticalKey || null;
      /**
       * If true, store the filter value but do not search on change
       * @type {boolean}
       * @private
       */

      _this._storeOnChange = config.storeOnChange || false;
      /**
       * Query submission is based on a form as context.
       * Optionally provided, otherwise defaults to native form node within container
       * @type {string} CSS selector
       */

      _this._formEl = config.formSelector || 'form';
      /**
       * The input element used for searching and wires up the keyboard interaction
       * Optionally provided.
       * @type {string} CSS selector
       */

      _this._inputEl = config.inputEl || '.js-yext-query';
      /**
       * The title used, provided to the template as a data point
       * Optionally provided.
       * @type {string}
       */

      _this.title = config.title;
      /**
       * The search text used for labeling the input box, also provided to template.
       * Optionally provided
       * @type {string}
       */

      _this.searchText = config.searchText || 'What are you interested in?';
      /**
       * The query text to show as the first item for auto complete.
       * Optionally provided
       * @type {string}
       */

      _this.promptHeader = config.promptHeader || null;
      /**
       * Auto focuses the input box if set to true.
       * Optionally provided, defaults to false.
       * @type {boolean}
       */

      _this.autoFocus = config.autoFocus === true;
      /**
       * submitURL will force the search query submission to get
       * redirected to the URL provided.
       * Optional, defaults to null.
       *
       * If no redirectUrl provided, we keep the page as a single page app.
       *
       * @type {boolean}
       */

      _this.redirectUrl = config.redirectUrl || null;
      /**
       * The query string to use for the input box, provided to template for rendering.
       * Optionally provided
       * @type {string}
       */

      _this.query = config.query || _this.core.globalStorage.getState("".concat(StorageKeys.QUERY, ".").concat(_this.name)) || '';

      _this.core.globalStorage.on('update', "".concat(StorageKeys.QUERY, ".").concat(_this.name), function (q) {
        _this.query = q;

        _this.search();
      });
      /**
       * The filter string to use for the provided query
       * Optionally provided
       * @type {string}
       */


      _this.filter = config.filter || _this.core.globalStorage.getState("".concat(StorageKeys.FILTER, ".").concat(_this.name));

      if (typeof _this.filter === 'string') {
        try {
          _this.filter = JSON.parse(_this.filter);
        } catch (e) {}
      }

      if (_this.query && _this.filter) {
        var filterNode = _this._buildFilterNode(_this.query, _this.filter);

        _this.core.setStaticFilterNodes(_this.name, filterNode);
      }

      _this.searchParameters = buildSearchParameters(config.searchParameters);
      return _this;
    }

    _createClass(FilterSearchComponent, [{
      key: "onCreate",
      // TODO(oshi): SPR-1925 check that it is safe to remove this, it runs an extra search
      // For no obvious reasons
      value: function onCreate() {
        if (this.query && this.filter) {
          this.search();
        }
      }
    }, {
      key: "onMount",
      value: function onMount() {
        if (this.autoCompleteComponent) {
          this.autoCompleteComponent.remove();
        } // Wire up our search handling and auto complete


        this.initAutoComplete(this._inputEl);

        if (this.autoFocus === true && this.query.length === 0) {
          DOM.query(this._container, this._inputEl).focus();
        }
      }
    }, {
      key: "_removeFilterNode",
      value: function _removeFilterNode() {
        this.query = '';
        this.core.persistentStorage.set("".concat(StorageKeys.QUERY, ".").concat(this.name), this.query);
        this.core.clearStaticFilterNode(this.name);
        this.setState();
      }
    }, {
      key: "_buildFilterNode",
      value: function _buildFilterNode(query, filter) {
        var _this2 = this;

        return FilterNodeFactory.from({
          filter: filter,
          metadata: {
            fieldName: this.title,
            displayValue: "".concat(query)
          },
          remove: function remove() {
            return _this2._removeFilterNode();
          }
        });
      }
      /**
       * A helper method to wire up our auto complete on an input selector
       * @param {string} inputSelector CSS selector to bind our auto complete component to
       */

    }, {
      key: "initAutoComplete",
      value: function initAutoComplete(inputSelector) {
        var _this3 = this;

        this._inputEl = inputSelector;
        this.autoCompleteComponent = this.componentManager.create('AutoComplete', {
          parentContainer: this._container,
          name: "".concat(this.name, ".autocomplete"),
          isFilterSearch: true,
          container: '.yxt-SearchBar-autocomplete',
          promptHeader: this.promptHeader,
          originalQuery: this.query,
          inputEl: inputSelector,
          verticalKey: this._verticalKey,
          searchParameters: this.searchParameters,
          onSubmit: function onSubmit(query, filter) {
            _this3.filter = Filter.fromResponse(filter);

            var filterNode = _this3._buildFilterNode(query, _this3.filter);

            var params = new SearchParams(window.location.search.substring(1));
            params.set("".concat(_this3.name, ".query"), query);
            params.set("".concat(_this3.name, ".filter"), filter); // If we have a redirectUrl, we want the params to be
            // serialized and submitted.

            if (typeof _this3.redirectUrl === 'string') {
              window.location.href = _this3.redirectUrl + '?' + params.toString();
              return false;
            } // save the filter to storage for the next search


            _this3.query = query;

            _this3.core.persistentStorage.set("".concat(StorageKeys.QUERY, ".").concat(_this3.name), _this3.query);

            _this3.core.persistentStorage.set("".concat(StorageKeys.FILTER, ".").concat(_this3.name), filterNode.getFilter());

            _this3.core.setStaticFilterNodes(_this3.name, filterNode);

            _this3.search();
          }
        });
      }
      /**
       * Perform the vertical search with all saved filters and query,
       * optionally redirecting based on config. Uses window.setTimeout to allow
       * other filters to finish rendering before searching.
       */

    }, {
      key: "search",
      value: function search() {
        var _this4 = this;

        if (this._storeOnChange) {
          return;
        }

        window.setTimeout(function () {
          _this4.core.verticalSearch(_this4._config.verticalKey, {
            setQueryParams: true,
            resetPagination: true,
            useFacets: true
          });
        });
      }
    }, {
      key: "setState",
      value: function setState(data) {
        return _get(_getPrototypeOf(FilterSearchComponent.prototype), "setState", this).call(this, Object.assign({
          title: this.title,
          searchText: this.searchText,
          query: this.query
        }, data));
      }
    }], [{
      key: "defaultTemplateName",

      /**
       * The template to render
       * @returns {string}
       * @override
       */
      value: function defaultTemplateName() {
        return 'search/filtersearch';
      }
    }, {
      key: "type",
      get: function get() {
        return ComponentTypes.FILTER_SEARCH;
      }
    }]);

    return FilterSearchComponent;
  }(Component);

  var Keys = {
    BACKSPACE: 8,
    TAB: 9,
    ENTER: 13,
    SHIFT: 16,
    CTRL: 17,
    ALT: 18,
    ESCAPE: 27,
    LEFT: 37,
    RIGHT: 39,
    UP: 38,
    DELETE: 46,
    DOWN: 40,
    LEFT_OS_KEY: 91,
    RIGHT_OS_KEY: 92,
    SELECT_KEY: 93
  };

  var AutoCompleteComponent =
  /*#__PURE__*/
  function (_Component) {
    _inherits(AutoCompleteComponent, _Component);

    function AutoCompleteComponent() {
      var _this;

      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var systemOpts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      _classCallCheck(this, AutoCompleteComponent);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(AutoCompleteComponent).call(this, opts, systemOpts));
      /**
       * Whether autocomplete is simple or filter
       * @type {boolean}
       */

      _this.isFilterSearch = opts.isFilterSearch || false;
      /**
       * The `verticalKey` of the vertical search to use for auto-complete
       * @type {string}
       */

      _this._verticalKey = opts.verticalKey || null;
      /**
       * A reference to the input el selector for auto complete
       * @type {string}
       */

      _this._inputEl = opts.inputEl || '.js-yext-query';
      /**
       * A selector for the autocomplete elementes
       * @type {string}
       */

      _this._autocompleteEls = opts.autoCompleteEls || '.js-yext-autocomplete-option';
      /**
       * An internal reference for the data-storage to listen for updates from the server
       * @type {string}
       */

      _this.moduleId = "".concat(StorageKeys.AUTOCOMPLETE, ".").concat(_this.name);
      /**
       * An internal reference to the input value when typing.
       * We use this for resetting the state of the input value when other interactions (e.g. result navigation)
       * change based on interactions. For instance, hitting escape should reset the value to the original typed query.
       * @type {string}
       */

      _this._originalQuery = opts.originalQuery || '';
      /**
       * Used for keyboard navigation through results.
       * An internal reference to the current section we're navigating in.
       * @type {number}
       */

      _this._sectionIndex = 0;
      /**
       * Used for keyboard navigation through results.
       * An internal reference to the current result index we're navigating on.
       * @type {number}
       */

      _this._resultIndex = -1;
      /**
       * The query text to show as the first item for auto complete.
       * Optionally provided
       * @type {string}
       */

      _this.promptHeader = opts.promptHeader || null;
      /**
       * Whether the input is autocomatically focused or not
       * @type {boolean}
       */

      _this._autoFocus = opts.autoFocus || false;
      /**
       * Callback invoked when the `Enter` key is pressed on auto complete.
       */

      _this._onSubmit = opts.onSubmit || function () {};
      /**
       * Callback invoked when keys are used to navigate through the auto complete. Note that this is
       * not called when either the `Enter` key is pressed or the mouse is used to select an
       * autocomplete option.
       */


      _this._onChange = opts.onChange || function () {};

      _this._searchParameters = opts.searchParameters || null;
      return _this;
    }
    /**
     * The aliased used by the component manager for creation.
     */


    _createClass(AutoCompleteComponent, [{
      key: "setState",

      /**
       * setState is overridden so that we can provide additional meta data
       * to the template (e.g. the sectionIndex and resultIndex), since
       * those are client-interaction specific values and aren't returned from the server.
       */
      value: function setState(data) {
        if (!this.isQueryInputFocused()) {
          this._sectionIndex = 0;
          this._resultIndex = -1;
          data = {};
        }

        _get(_getPrototypeOf(AutoCompleteComponent.prototype), "setState", this).call(this, Object.assign({}, data, {
          hasResults: this.hasResults(data),
          sectionIndex: this._sectionIndex,
          resultIndex: this._resultIndex,
          promptHeader: this._originalQuery.length === 0 ? this.promptHeader : null
        }));
      }
    }, {
      key: "isQueryInputFocused",
      value: function isQueryInputFocused() {
        return document.activeElement && document.activeElement.className.includes(this._inputEl.substring(1));
      }
      /**
       * updateState is a helper to apply the current state with new client-state.
       */

    }, {
      key: "updateState",
      value: function updateState() {
        this.setState(this._state.get());
      }
      /**
       * onCreate is triggered when the component is constructed from the framework.
       * Once we're initalized, we wire up all of our user interactions
       */

    }, {
      key: "onCreate",
      value: function onCreate() {
        var _this2 = this;

        // Use the context of the parent component to find the input node.
        var queryInput = DOM.query(this._parentContainer, this._inputEl);

        if (!queryInput) {
          throw new Error('Could not initialize AutoComplete. Can not find {HTMLElement} `', this._inputEl, '`.');
        } // Disable the native autocomplete, autocorrect & spellcheck


        DOM.attributes(queryInput, {
          autocomplete: 'off',
          autocorrect: 'off',
          spellcheck: 'false'
        }); // The user exits the input, so we want to reset the state and close
        // the auto complete
        // TODO(jdelerme): Close logic to be moved to parent

        DOM.on(document, 'click', function (e) {
          if (DOM.matches(e.target, '.js-yxt-AutoComplete-wrapper *') || DOM.matches(e.target, _this2._inputEl)) {
            return;
          }

          _this2.close();
        }); // When a user focuses the input, we should populate the autocomplete based
        // on the current value

        DOM.on(queryInput, 'focus', function () {
          _this2.reset();

          _this2.autoComplete(queryInput.value);
        }); // Allow the user to navigate between the results using the keyboard

        DOM.on(queryInput, 'keydown', function (e) {
          _this2.handleNavigateResults(e.keyCode, e);

          _this2.handleSubmitResult(e.keyCode, queryInput.value, e);
        });

        if (this._autoFocus) {
          DOM.once(queryInput, 'click', function () {
            _this2.autoComplete(queryInput.value);
          });
        } // Allow the user to select a result with the mouse


        DOM.delegate(this._container, '.js-yext-autocomplete-option', 'click', function (evt, target) {
          var data = target.dataset;
          var val = data["short"];

          _this2.updateQuery(val);

          _this2._onSubmit(val, data.filter);

          _this2.close();
        }); // When the user is typing in the input, process the auto complete.

        DOM.on(queryInput, 'keyup', function (e) {
          _this2.handleTyping(e.keyCode, queryInput.value, e);
        });
      }
      /**
       * close will hide the auto complete results and reset the state.
       */

    }, {
      key: "close",
      value: function close() {
        this.setState({});
        this.reset();
      }
      /**
       * resets the client state to their original values and triggers
       * a template-rerender via updateState
       */

    }, {
      key: "reset",
      value: function reset() {
        this._sectionIndex = 0;
        this._resultIndex = -1;
        this.updateState();
      }
      /**
       * Helper method to update the input text
       * @param {string} optValue Option value provided.
       * If no value provided, we'll try to find it based on the selection indexes.
       */

    }, {
      key: "updateQuery",
      value: function updateQuery(optValue) {
        // Only want to update the query string if theres a value.
        // If one is provided, great.
        // Otherwise, lets try to find it from the current selection in the results.
        if (optValue === undefined) {
          var sections = this._state.get('sections');

          var results = sections[this._sectionIndex].results;
          optValue = results[this._resultIndex].shortValue;
        }

        var queryEl = DOM.query(this._parentContainer, this._inputEl);
        queryEl.value = optValue;
      }
    }, {
      key: "handleTyping",
      value: function handleTyping(key, value, e) {
        var ignoredKeys = [Keys.DOWN, Keys.UP, Keys.CTRL, Keys.ALT, Keys.SHIFT, Keys.LEFT, Keys.RIGHT, Keys.LEFT_OS_KEY, Keys.RIGHT_OS_KEY, Keys.ENTER, Keys.TAB, Keys.SELECT_KEY];

        if (ignoredKeys.indexOf(key) > -1) {
          return;
        } // User escapes out of auto complete, so we reset it to the original input


        if (key === Keys.ESCAPE) {
          this.updateQuery(this._originalQuery);
          this.close();
          return;
        } // Update the original value based on the user input


        this._originalQuery = value;
        this.reset();
        this.autoComplete(value);
      }
    }, {
      key: "autoComplete",
      value: function autoComplete(input) {
        if (this.isFilterSearch) {
          this.core.autoCompleteFilter(input, {
            namespace: this.name,
            verticalKey: this._verticalKey,
            searchParameters: this._searchParameters
          });
        } else if (this._verticalKey) {
          this.core.autoCompleteVertical(input, this.name, this._verticalKey);
        } else {
          this.core.autoCompleteUniversal(input, this.name);
        }
      }
      /**
       * returns true if we have results in any section
       * @returns boolean
       */

    }, {
      key: "hasResults",
      value: function hasResults(data) {
        if (!data) {
          return false;
        }

        var sections = data['sections'];

        if (!sections) {
          return false;
        }

        for (var i = 0; i < sections.length; i++) {
          var _data = sections[i];

          if (!_data) {
            continue;
          }

          var results = _data.results;

          if (!results) {
            continue;
          }

          if (results.length > 0) {
            return true;
          }
        }

        return false;
      }
    }, {
      key: "handleNavigateResults",
      value: function handleNavigateResults(key, e) {
        var sections = this._state.get('sections');

        if (sections === undefined || sections.length <= 0) {
          return;
        } // Tabbing out or enter should close the auto complete.


        if (key === Keys.TAB) {
          this.close();
          return;
        }

        var results = sections[this._sectionIndex].results;

        if (key === Keys.UP) {
          e.preventDefault();

          if (this._resultIndex <= 0) {
            if (this._sectionIndex > 0) {
              this._sectionIndex--;
              this._resultIndex = sections[this._sectionIndex].results.length - 1;
            } else {
              this.updateQuery(this._originalQuery);
              this.reset();
              return;
            }

            this.updateQuery();
            this.updateState();
            return;
          }

          this._resultIndex--;
          this.updateState();
          this.updateQuery();
          return;
        }

        if (key === Keys.DOWN) {
          e.preventDefault();

          if (this._resultIndex >= results.length - 1) {
            if (this._sectionIndex < sections.length - 1) {
              this._sectionIndex++;
              this._resultIndex = 0;
            }

            this.updateQuery();
            this.updateState();
            return;
          }

          this._resultIndex++;
          this.updateQuery();
          this.updateState();
        }
      }
    }, {
      key: "handleSubmitResult",
      value: function handleSubmitResult(key, value, e) {
        var sections = this._state.get('sections');

        if (sections === undefined || sections.length <= 0) {
          if (this.isFilterSearch) {
            this.autoComplete(value);
          }

          return;
        } // submit the search on enter


        if (key === Keys.ENTER) {
          e.preventDefault();

          if (this.isFilterSearch && this._resultIndex === -1) {
            return;
          }

          var filter = '';

          if (this._sectionIndex >= 0 && this._resultIndex >= 0) {
            filter = JSON.stringify(sections[this._sectionIndex].results[this._resultIndex].filter);
          }

          this.updateQuery(value);
          this._originalQuery = value;

          this._onSubmit(value, filter);

          this.close();
        } else {
          this._onChange();
        }
      }
    }], [{
      key: "defaultTemplateName",

      /**
       * The template to render
       * @returns {string}
       * @override
       */
      value: function defaultTemplateName(config) {
        return 'search/autocomplete';
      }
    }, {
      key: "type",
      get: function get() {
        return 'AutoComplete';
      }
    }]);

    return AutoCompleteComponent;
  }(Component);

  var DEFAULT_CONFIG = {
    suggestionHelpText: 'Did you mean:'
  };
  /**
   * SpellCheckComponent will support displaying suggestion, autocorrect and combined(maybe in the future)
   * provided from spelling correction.
   *
   * @extends Component
   */

  var SpellCheckComponent =
  /*#__PURE__*/
  function (_Component) {
    _inherits(SpellCheckComponent, _Component);

    function SpellCheckComponent() {
      var _this;

      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var systemConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      _classCallCheck(this, SpellCheckComponent);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(SpellCheckComponent).call(this, _objectSpread({}, DEFAULT_CONFIG, {}, config), systemConfig));
      _this.moduleId = StorageKeys.SPELL_CHECK;
      return _this;
    }

    _createClass(SpellCheckComponent, [{
      key: "onCreate",
      value: function onCreate() {
        this.core.persistentStorage["delete"]('skipSpellCheck', true);
        this.core.persistentStorage["delete"]('queryTrigger', true);
      }
    }, {
      key: "setState",
      value: function setState(data, val) {
        return _get(_getPrototypeOf(SpellCheckComponent.prototype), "setState", this).call(this, Object.assign({}, data, {
          shouldShow: data.correctedQuery !== undefined,
          correctedQueryUrl: this._buildRedirectQueryUrl(data.correctedQuery, data.type),
          helpText: this._getHelpText(data.type)
        }, val));
      }
    }, {
      key: "_buildRedirectQueryUrl",
      value: function _buildRedirectQueryUrl(query, type) {
        if (query === undefined) {
          return '';
        }

        var params = new SearchParams(window.location.search.substring(1));
        params.set('query', query.value);
        params.set('skipSpellCheck', true);
        params.set('queryTrigger', type.toLowerCase());
        return '?' + params.toString();
      }
    }, {
      key: "_getHelpText",
      value: function _getHelpText(type) {
        switch (type) {
          case 'SUGGEST':
            return this._config.suggestionHelpText;

          default:
            return '';
        }
      }
    }], [{
      key: "defaultTemplateName",
      value: function defaultTemplateName() {
        return 'search/spellcheck';
      }
    }, {
      key: "type",
      get: function get() {
        return 'SpellCheck';
      }
    }]);

    return SpellCheckComponent;
  }(Component);

  var DEFAULT_CONFIG$1 = {
    ipAccuracyHelpText: 'based on your internet address',
    deviceAccuracyHelpText: 'based on your device',
    updateLocationButtonText: 'Update your location'
  };
  /**
   * LocationBiasComponent will show the user where is used for location bias and allow user to
   * improve accuracy with HTML5 geolocation.
   *
   * @extends Component
   */

  var LocationBiasComponent =
  /*#__PURE__*/
  function (_Component) {
    _inherits(LocationBiasComponent, _Component);

    function LocationBiasComponent() {
      var _this;

      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var systemConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      _classCallCheck(this, LocationBiasComponent);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(LocationBiasComponent).call(this, _objectSpread({}, DEFAULT_CONFIG$1, {}, config), systemConfig));
      /**
       * Recieve updates from storage based on this index
       * @type {StorageKey}
       */

      _this.moduleId = StorageKeys.LOCATION_BIAS;
      /**
       * The optional vertical key for vertical search configuration
       * If not provided, when location updated,
       * a universal search will be triggered.
       * @type {string}
       */
      // TODO: Remove config.verticalKey

      _this._verticalKey = config.verticalKey || _this.core.globalStorage.getState(StorageKeys.SEARCH_CONFIG).verticalKey || null;
      /**
       * The element used for updating location
       * Optionally provided.
       * @type {string} CSS selector
       */

      _this._updateLocationEl = config.updateLocationEl || '.js-locationBias-update-location';
      _this._locationDisplayName = '';
      _this._accuracy = '';
      _this._allowUpdate = true;
      /**
       * Options to pass to the geolocation api.
       * @type {Object}
       */

      _this._geolocationOptions = _objectSpread({
        enableHighAccuracy: false,
        timeout: 6000,
        maximumAge: 300000
      }, config.geolocationOptions);
      /**
       * Options for the geolocation timeout alert.
       * @type {Object}
       */

      _this._geolocationTimeoutAlert = _objectSpread({
        enabled: false,
        message: 'We are unable to determine your location'
      }, config.geolocationTimeoutAlert);
      return _this;
    }

    _createClass(LocationBiasComponent, [{
      key: "onMount",
      value: function onMount() {
        var _this2 = this;

        if (!this._allowUpdate) {
          return;
        }

        this._disableLocationUpdateIfGeolocationDenied();

        DOM.on(this._updateLocationEl, 'click', function (e) {
          if ('geolocation' in navigator) {
            navigator.geolocation.getCurrentPosition(function (position) {
              _this2.core.globalStorage.set(StorageKeys.GEOLOCATION, {
                lat: position.coords.latitude,
                lng: position.coords.longitude,
                radius: position.coords.accuracy
              });

              _this2._doSearch();
            }, function (err) {
              return _this2._handleGeolocationError(err);
            }, _this2._geolocationOptions);
          } // TODO: Should we throw error or warning here if no geolocation?

        });
      }
    }, {
      key: "_handleGeolocationError",
      value: function _handleGeolocationError(err) {
        if (err.code === 1) {
          this._disableLocationUpdate();
        }

        var _this$_geolocationTim = this._geolocationTimeoutAlert,
            enabled = _this$_geolocationTim.enabled,
            message = _this$_geolocationTim.message;

        if (enabled) {
          window.alert(message);
        }
      }
    }, {
      key: "setState",
      value: function setState(data, val) {
        this._locationDisplayName = data.locationDisplayName;
        this._accuracy = data.accuracy;
        return _get(_getPrototypeOf(LocationBiasComponent.prototype), "setState", this).call(this, Object.assign({}, data, {
          locationDisplayName: this._getLocationDisplayName(data),
          accuracyText: this._getAccuracyHelpText(data.accuracy),
          isPreciseLocation: data.accuracy === 'DEVICE' && this._allowUpdate,
          isUnknownLocation: data.accuracy === 'UNKNOWN',
          shouldShow: data.accuracy !== undefined,
          allowUpdate: this._allowUpdate
        }, val));
      }
    }, {
      key: "_getLocationDisplayName",
      value: function _getLocationDisplayName(data) {
        if (data.accuracy === 'UNKNOWN') {
          return 'Unknown Location';
        }

        return data.locationDisplayName;
      }
    }, {
      key: "_getAccuracyHelpText",
      value: function _getAccuracyHelpText(accuracy) {
        switch (accuracy) {
          case 'IP':
            return this._config.ipAccuracyHelpText;

          case 'DEVICE':
            return this._config.deviceAccuracyHelpText;

          default:
            return '';
        }
      }
    }, {
      key: "_doSearch",
      value: function _doSearch() {
        if (this._verticalKey) {
          this.core.verticalSearch(this._config.verticalKey, {
            setQueryParams: true,
            useFacets: true
          });
        } else {
          var query = this.core.globalStorage.getState(StorageKeys.QUERY);
          this.core.search(query);
        }
      }
    }, {
      key: "_disableLocationUpdateIfGeolocationDenied",
      value: function _disableLocationUpdateIfGeolocationDenied() {
        var _this3 = this;

        if ('permissions' in navigator) {
          navigator.permissions.query({
            name: 'geolocation'
          }).then(function (result) {
            if (result.state === 'denied') {
              _this3._disableLocationUpdate();
            }
          });
        }
      }
    }, {
      key: "_disableLocationUpdate",
      value: function _disableLocationUpdate() {
        this.core.globalStorage["delete"](StorageKeys.GEOLOCATION);
        this._allowUpdate = false;
        this.setState({
          locationDisplayName: this._locationDisplayName,
          accuracy: this._accuracy
        });
      }
    }], [{
      key: "defaultTemplateName",
      value: function defaultTemplateName() {
        return 'search/locationbias';
      }
    }, {
      key: "type",
      get: function get() {
        return 'LocationBias';
      }
    }]);

    return LocationBiasComponent;
  }(Component);

  var FilterBoxConfig =
  /*#__PURE__*/
  function () {
    function FilterBoxConfig(config) {
      _classCallCheck(this, FilterBoxConfig);

      /**
       * The title to display above the controls
       * @type {string}
       */
      this.title = config.title || 'Filters';
      /**
       * If true, display the number of results next to each facet
       * @type {boolean}
       */

      this.showCount = config.showCount === undefined ? true : config.showCount;
      /**
       * If true, trigger a search on each change to a filter
       * @type {boolean}
       */

      this.searchOnChange = config.searchOnChange || false;
      /**
       * If true, show a button to reset for each facet group
       * @type {boolean}
       */

      this.resetFilter = config.resetFilter || false;
      /**
       * The label to show for the reset button
       * @type {string}
       */

      this.resetFilterLabel = config.resetFilterLabel || 'reset';
      /**
       * If true, show a "reset all" button to reset all facets
       * @type {boolean}
       */

      this.resetFilters = config.resetFilters === undefined ? !config.searchOnChange : config.resetFilters;
      /**
       * The label to show for the "reset all" button
       * @type {string}
       */

      this.resetFiltersLabel = config.resetFiltersLabel || 'reset all';
      /**
       * The max number of facets to show before displaying "show more"/"show less"
       * @type {number}
       */

      this.showMoreLimit = config.showMoreLimit || 5;
      /**
       * The label to show for displaying more facets
       * @type {string}
       */

      this.showMoreLabel = config.showMoreLabel || 'show more';
      /**
       * The label to show for displaying less facets
       * @type {string}
       */

      this.showLessLabel = config.showLessLabel || 'show less';
      /**
       * If true, enable hiding excess facets in each group with a "show more"/"show less" button
       * @type {boolean}
       */

      this.showMore = config.showMore === undefined ? true : config.showMore;
      /**
       * If true, allow expanding and collapsing each group of facets
       * @type {boolean}
       */

      this.expand = config.expand === undefined ? true : config.expand;
      /**
       * If true, display the number of currently applied filters when collapsed
       * @type {boolean}
       */

      this.showNumberApplied = config.showNumberApplied === undefined ? true : config.showNumberApplied;
      /**
       * Text to display on the apply button
       * @type {string}
       */

      this.applyLabel = config.applyLabel || 'apply';
      /**
       * The selector of the apply button
       * @type {string}
       */

      this.applyButtonSelector = config.applyButtonSelector || '.js-yext-filterbox-apply';
      /**
       * The list of filters to display and control, ignoring empty sections
       * @type {object[]}
       */

      this.filterConfigs = config.filters.filter(function (f) {
        return f.options.length;
      });
      /**
       * Whether or not this filterbox contains facets. This affects the
       * the way the filters are used in the search
       * @type {boolean}
       */

      this.isDynamic = config.isDynamic || false;
      this.validate();
    }

    _createClass(FilterBoxConfig, [{
      key: "validate",
      value: function validate() {}
    }]);

    return FilterBoxConfig;
  }();
  /**
   * Renders a set of filters, and searches with them when applied.
   * Multiple FilterBox components will AND together but will not share state.
   * @extends Component
   */


  var FilterBoxComponent =
  /*#__PURE__*/
  function (_Component) {
    _inherits(FilterBoxComponent, _Component);

    function FilterBoxComponent() {
      var _this;

      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var systemConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      _classCallCheck(this, FilterBoxComponent);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(FilterBoxComponent).call(this, config, systemConfig));
      _this.config = new FilterBoxConfig(config);

      if (!config.filters || !(config.filters instanceof Array)) {
        throw new AnswersComponentError('FilterBox requires filters to be provided as an array', 'FilterBox');
      }
      /**
       * The vertical key for the search
       * @type {string}
       * @private
       */


      _this._verticalKey = config.verticalKey || null;
      /**
       * The components created for each filter config
       * @type {Component[]}
       * @private
       */

      _this._filterComponents = [];
      /**
       * The current state of the filter components in the box
       * @type {Array<FilterNode>}
       * @private
       */

      _this._filterNodes = [];

      _this.config.filterConfigs.forEach(function (config) {
        var hideCount = config.showCount === undefined ? !_this.config.showCount : !config.showCount;

        if (hideCount) {
          config.options.forEach(function (option) {
            option.countLabel = null;
          });
        }
      });

      return _this;
    }

    _createClass(FilterBoxComponent, [{
      key: "setState",
      value: function setState(data) {
        _get(_getPrototypeOf(FilterBoxComponent.prototype), "setState", this).call(this, Object.assign({}, data, this.config, {
          showReset: this.config.resetFilters,
          resetLabel: this.config.resetFiltersLabel,
          showApplyButton: !this.config.searchOnChange
        }));
      }
    }, {
      key: "onMount",
      value: function onMount() {
        var _this2 = this;

        if (this._filterComponents.length) {
          this._filterComponents.forEach(function (c) {
            return c.remove();
          });

          this._filterComponents = [];
          this._filterNodes = [];
        } // Initialize filters from configs


        var _loop = function _loop(i) {
          var config = _this2.config.filterConfigs[i];

          var component = _this2.componentManager.create(config.type, _objectSpread({}, _this2.config, {
            parentContainer: _this2._container,
            name: "".concat(_this2.name, ".filter").concat(i),
            storeOnChange: false,
            container: ".js-yext-filterbox-filter".concat(i),
            showReset: _this2.config.resetFilter,
            resetLabel: _this2.config.resetFilterLabel,
            isDynamic: _this2.config.isDynamic
          }, config, {
            showExpand: config.showExpand === undefined ? _this2.config.expand : config.showExpand,
            onChange: function onChange(filterNode, alwaysSaveFilterNodes, blockSearchOnChange) {
              var _saveFilterNodes = _this2.config.searchOnChange || alwaysSaveFilterNodes;

              var _searchOnChange = _this2.config.searchOnChange && !blockSearchOnChange;

              _this2.onFilterNodeChange(i, filterNode, _saveFilterNodes, _searchOnChange);

              config.onChange && config.onChange();
            }
          }));

          if (_this2.config.isDynamic && typeof component.floatSelected === 'function') {
            component.floatSelected();
          }

          component.mount();

          _this2._filterComponents.push(component);

          _this2._filterNodes[i] = component.getFilterNode();
        };

        for (var i = 0; i < this.config.filterConfigs.length; i++) {
          _loop(i);
        }

        this._saveFilterNodesToStorage(); // Initialize apply button


        if (!this.config.searchOnChange) {
          var button = DOM.query(this._container, this.config.applyButtonSelector);

          if (button) {
            DOM.on(button, 'click', function () {
              _this2._saveFilterNodesToStorage();

              _this2._search();
            });
          }
        } // Initialize reset button


        var resetEl = DOM.query(this._container, '.js-yxt-FilterBox-reset');

        if (resetEl) {
          DOM.on(resetEl, 'click', this.resetFilters.bind(this));
        }
      }
    }, {
      key: "_getValidFilterNodes",
      value: function _getValidFilterNodes() {
        return this._filterNodes.filter(function (fn) {
          return fn.getFilter().getFilterKey();
        });
      }
    }, {
      key: "resetFilters",
      value: function resetFilters() {
        this._filterComponents.forEach(function (filter) {
          return filter.clearOptions();
        });
      }
      /**
       * Handle changes to child filter components
       * @param {number} index The index of the changed filter
       * @param {FilterNode} filterNode The new filter node
       * @param {boolean} saveFilterNodes Whether to save filternodes to storage
       * @param {boolean} searchOnChange Whether to conduct a search
       */

    }, {
      key: "onFilterNodeChange",
      value: function onFilterNodeChange(index, filterNode, saveFilterNodes, searchOnChange) {
        this._filterNodes[index] = filterNode;

        if (saveFilterNodes || searchOnChange) {
          this._saveFilterNodesToStorage();
        }

        if (searchOnChange) {
          this._search();
        }
      }
      /**
       * Remove all filter components along with this component
       */

    }, {
      key: "remove",
      value: function remove() {
        this._filterComponents.forEach(function (c) {
          return c.remove();
        });

        _get(_getPrototypeOf(FilterBoxComponent.prototype), "remove", this).call(this);
      }
      /**
       * Save current filters to storage to be used in the next search
       * @private
       */

    }, {
      key: "_saveFilterNodesToStorage",
      value: function _saveFilterNodesToStorage() {
        if (this.config.isDynamic) {
          var availableFieldIds = this.config.filterConfigs.map(function (config) {
            return config.fieldId;
          });
          this.core.setFacetFilterNodes(availableFieldIds, this._getValidFilterNodes());
        } else {
          this._filterComponents.forEach(function (fc) {
            return fc.apply();
          });
        }
      }
      /**
       * Trigger a search with all filters in storage
       */

    }, {
      key: "_search",
      value: function _search() {
        this.core.verticalSearch(this._config.verticalKey, {
          setQueryParams: true,
          resetPagination: true,
          useFacets: true
        });
      }
    }], [{
      key: "defaultTemplateName",
      value: function defaultTemplateName() {
        return 'filters/filterbox';
      }
    }, {
      key: "type",
      get: function get() {
        return ComponentTypes.FILTER_BOX;
      }
    }]);

    return FilterBoxComponent;
  }(Component);

  var jsLevenshtein = (function()
  {
    function _min(d0, d1, d2, bx, ay)
    {
      return d0 < d1 || d2 < d1
          ? d0 > d2
              ? d2 + 1
              : d0 + 1
          : bx === ay
              ? d1
              : d1 + 1;
    }

    return function(a, b)
    {
      if (a === b) {
        return 0;
      }

      if (a.length > b.length) {
        var tmp = a;
        a = b;
        b = tmp;
      }

      var la = a.length;
      var lb = b.length;

      while (la > 0 && (a.charCodeAt(la - 1) === b.charCodeAt(lb - 1))) {
        la--;
        lb--;
      }

      var offset = 0;

      while (offset < la && (a.charCodeAt(offset) === b.charCodeAt(offset))) {
        offset++;
      }

      la -= offset;
      lb -= offset;

      if (la === 0 || lb < 3) {
        return lb;
      }

      var x = 0;
      var y;
      var d0;
      var d1;
      var d2;
      var d3;
      var dd;
      var dy;
      var ay;
      var bx0;
      var bx1;
      var bx2;
      var bx3;

      var vector = [];

      for (y = 0; y < la; y++) {
        vector.push(y + 1);
        vector.push(a.charCodeAt(offset + y));
      }

      var len = vector.length - 1;

      for (; x < lb - 3;) {
        bx0 = b.charCodeAt(offset + (d0 = x));
        bx1 = b.charCodeAt(offset + (d1 = x + 1));
        bx2 = b.charCodeAt(offset + (d2 = x + 2));
        bx3 = b.charCodeAt(offset + (d3 = x + 3));
        dd = (x += 4);
        for (y = 0; y < len; y += 2) {
          dy = vector[y];
          ay = vector[y + 1];
          d0 = _min(dy, d0, d1, bx0, ay);
          d1 = _min(d0, d1, d2, bx1, ay);
          d2 = _min(d1, d2, d3, bx2, ay);
          dd = _min(d2, d3, dd, bx3, ay);
          vector[y] = dd;
          d3 = d2;
          d2 = d1;
          d1 = d0;
          d0 = dy;
        }
      }

      for (; x < lb;) {
        bx0 = b.charCodeAt(offset + (d0 = x));
        dd = ++x;
        for (y = 0; y < len; y += 2) {
          dy = vector[y];
          vector[y] = dd = _min(dy, d0, dd, bx0, vector[y + 1]);
          d0 = dy;
        }
      }

      return dd;
    };
  })();

  /**
   * Groups an array into an object using a given key and value function, and an initial object
   * to add to. By default the key and value functions will not perform any transformations
   * on the array elements.
   * @param {Array<any>} arr array to be grouped
   * @param {Function} keyFunc function that evaluates what key to give an array element.
   * @param {Function} valueFunc function that evaluates what value to give an array element.
   * @param {Object} intitial the initial object to add to, defaulting to {}
   * @returns {Object}
   */
  function groupArray(arr, keyFunc, valueFunc, initial) {
    keyFunc = keyFunc || function (key) {
      return key;
    };

    valueFunc = valueFunc || function (value) {
      return value;
    };

    return arr.reduce(function (groups, element, idx) {
      var key = keyFunc(element, idx);
      var value = valueFunc(element, idx);

      if (!groups[key]) {
        groups[key] = [value];
      } else {
        groups[key].push(value);
      }

      return groups;
    }, initial || {});
  }

  /**
   * The currently supported controls
   * @type {string[]}
   */

  var SUPPORTED_CONTROLS = ['singleoption', 'multioption'];
  /**
   * The currently supported option types.
   */

  var OptionTypes = {
    RADIUS_FILTER: 'RADIUS_FILTER',
    STATIC_FILTER: 'STATIC_FILTER'
  };

  var FilterOptionsConfig =
  /*#__PURE__*/
  function () {
    function FilterOptionsConfig(config) {
      _classCallCheck(this, FilterOptionsConfig);

      /**
       * The type of control to display
       * @type {string}
       */
      this.control = config.control;
      /**
       * The type of filtering to apply to the options.
       * @type {string}
       */

      this.optionType = config.optionType || OptionTypes.STATIC_FILTER;
      /**
       * The list of filter options to display with checked status
       * @type {object[]}
       */

      this.options = config.options.map(function (o) {
        return _objectSpread({}, o);
      });
      /**
       * The label to be used in the legend
       * @type {string}
       */

      this.label = config.label || 'Filters';
      /**
       * The callback function to call when changed
       * @type {function}
       */

      this.onChange = config.onChange || function () {};
      /**
       * If true, stores the filter to storage on each change
       * @type {boolean}
       */


      this.storeOnChange = config.storeOnChange === undefined ? true : config.storeOnChange;
      /**
       * If true, show a button to reset the current filter selection
       * @type {boolean}
       */

      this.showReset = config.showReset && this.options.length > 0;
      /**
       * Whether this FilterOptions is part of a dynamic FilterBox component (i.e. is
       * part of a FacetsComponent). Used to correctly set the {@link FilterType} of
       * the created {@link FilterNode}.
       * @type {boolean}
       */

      this.isDynamic = config.isDynamic;
      /**
       * The label to show for the reset button
       * @type {string}
       */

      this.resetLabel = config.resetLabel || 'reset';
      /**
       * The max number of facets to show before displaying "show more"/"show less"
       * @type {number}
       */

      this.showMoreLimit = config.showMoreLimit || 5;
      /**
       * The label to show for displaying more facets
       * @type {string}
       */

      this.showMoreLabel = config.showMoreLabel || 'show more';
      /**
       * The label to show for displaying less facets
       * @type {string}
       */

      this.showLessLabel = config.showLessLabel || 'show less';
      /**
       * If true, enable hiding excess facets with a "show more"/"show less" button
       * @type {boolean}
       */

      this.showMore = config.showMore === undefined ? true : config.showMore;
      this.showMore = this.showMore && this.options.length > this.showMoreLimit;
      /**
       * If true, allow expanding and collapsing the group of facets
       * @type {boolean}
       */

      this.showExpand = config.showExpand === undefined ? true : config.showExpand;
      /**
       * If true, display the number of currently applied filters when collapsed
       * @type {boolean}
       */

      this.showNumberApplied = config.showNumberApplied === undefined ? true : config.showNumberApplied;
      /**
       * The selector used for options in the template
       * @type {string}
       */

      this.optionSelector = config.optionSelector || '.js-yext-filter-option';
      /**
       * The placeholder text used for the filter option search input
       * @type {string}
       */

      this.placeholderText = config.placeholderText || 'Search here...';
      /**
       * If true, display the filter option search input
       * @type {boolean}
       */

      this.searchable = config.searchable || false;
      /**
       * The form label text for the search input
       * @type {boolean}
       */

      this.searchLabelText = config.searchLabelText || 'Search for a filter option';
      this.validate();

      if (typeof config.previousOptions === 'string') {
        try {
          config.previousOptions = JSON.parse(config.previousOptions);
        } catch (e) {
          config.previousOptions = [];
        }
      } // previousOptions will be null if there were no previousOptions in persistentStorage


      var previousOptions = config.previousOptions;
      this.options = this.setSelectedOptions(this.options, previousOptions);
    }
    /**
     * Sets selected options on load based on options stored in persistent storage and options with selected: true.
     * If no previous options were stored in persistentStorage, default to options marked
     * as selected. If multiple options are marked as selected for 'singleoption', only the
     * first should be selected.
     * @param {Array<Object>} options
     * @param {Array<string>} previousOptions
     * @returns {Array<Object>}
     */


    _createClass(FilterOptionsConfig, [{
      key: "setSelectedOptions",
      value: function setSelectedOptions(options, previousOptions) {
        if (previousOptions && this.control === 'singleoption') {
          var hasSeenSelectedOption = false;
          return options.map(function (o) {
            if (previousOptions.includes(o.label) && !hasSeenSelectedOption) {
              hasSeenSelectedOption = true;
              return _objectSpread({}, o, {
                selected: true
              });
            }

            return _objectSpread({}, o, {
              selected: false
            });
          });
        } else if (previousOptions && this.control === 'multioption') {
          return options.map(function (o) {
            return _objectSpread({}, o, {
              selected: previousOptions.includes(o.label)
            });
          });
        } else if (this.control === 'singleoption') {
          var _hasSeenSelectedOption = false;
          return options.map(function (o) {
            if (_hasSeenSelectedOption) {
              return _objectSpread({}, o, {
                selected: false
              });
            } else if (o.selected) {
              _hasSeenSelectedOption = true;
            }

            return _objectSpread({}, o);
          });
        }

        return options;
      }
    }, {
      key: "getInitialSelectedCount",
      value: function getInitialSelectedCount() {
        return this.options.reduce(function (numSelected, option) {
          return option.selected ? numSelected + 1 : numSelected;
        }, 0);
      }
    }, {
      key: "validate",
      value: function validate() {
        if (!this.control || !SUPPORTED_CONTROLS.includes(this.control)) {
          throw new AnswersComponentError('FilterOptions requires a valid "control" to be provided', 'FilterOptions');
        }

        if (!(this.optionType in OptionTypes)) {
          var possibleTypes = Object.values(OptionTypes).join(', ');
          throw new AnswersComponentError("Invalid optionType ".concat(this.optionType, " passed to FilterOptions. Expected one of ").concat(possibleTypes), 'FilterOptions');
        }

        if (this.optionType === OptionTypes.RADIUS_FILTER && this.control !== 'singleoption') {
          throw new AnswersComponentError("FilterOptions of optionType ".concat(OptionTypes.RADIUS_FILTER, " requires control \"singleoption\""), 'FilterOptions');
        }

        if (!this.options) {
          throw new AnswersComponentError('FilterOptions component requires options to be provided', 'FilterOptions');
        }
      }
    }]);

    return FilterOptionsConfig;
  }();
  /**
   * Renders a set of options, each one representing a filter in a search.
   */


  var FilterOptionsComponent =
  /*#__PURE__*/
  function (_Component) {
    _inherits(FilterOptionsComponent, _Component);

    function FilterOptionsComponent() {
      var _this;

      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var systemConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      _classCallCheck(this, FilterOptionsComponent);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(FilterOptionsComponent).call(this, config, systemConfig));

      var previousOptions = _this.core.globalStorage.getState(_this.name);

      _this.core.globalStorage["delete"](_this.name);
      /**
       * The component config
       * @type {FilterOptionsConfig}
       */


      _this.config = new FilterOptionsConfig(_objectSpread({
        previousOptions: previousOptions
      }, config));

      var selectedCount = _this.config.getInitialSelectedCount();
      /**
       * True if the option list is expanded and visible
       * @type {boolean}
       */


      _this.expanded = _this.config.showExpand ? selectedCount > 0 : true;
      /**
       * Whether the current is currently showing more or less. If true, is currently "show more".
       * Only used if config.showMore is true.
       * @type {boolean}
       */

      _this.showMoreState = _this.config.showMore;

      if (_this.config.storeOnChange) {
        _this.apply();
      }

      return _this;
    }

    _createClass(FilterOptionsComponent, [{
      key: "setState",
      value: function setState(data) {
        var selectedCount = this._getSelectedCount();

        _get(_getPrototypeOf(FilterOptionsComponent.prototype), "setState", this).call(this, Object.assign({}, data, _objectSpread({
          name: this.name.toLowerCase()
        }, this.config, {
          showMoreState: this.showMoreState,
          displayReset: this.config.showReset && selectedCount > 0,
          expanded: this.expanded,
          selectedCount: selectedCount,
          isSingleOption: this.config.control === 'singleoption'
        })));
      }
    }, {
      key: "onMount",
      value: function onMount() {
        var _this2 = this;

        DOM.delegate(DOM.query(this._container, ".yxt-FilterOptions-options"), this.config.optionSelector, 'click', function (event) {
          var selectedCountEl = DOM.query(_this2._container, '.js-yxt-FilterOptions-selectedCount');

          if (selectedCountEl) {
            selectedCountEl.innerText = _this2._getSelectedCount();
          }

          _this2._updateOption(parseInt(event.target.dataset.index), event.target.checked);
        }); // Initialize reset element if present

        var resetEl = DOM.query(this._container, '.js-yxt-FilterOptions-reset');

        if (resetEl) {
          DOM.on(resetEl, 'click', this.clearOptions.bind(this));
        } // show more/less button


        if (this.config.showMore) {
          var showLessEl = DOM.query(this._container, '.js-yxt-FilterOptions-showLess');
          var showMoreEl = DOM.query(this._container, '.js-yxt-FilterOptions-showMore');
          var optionsOverLimitEls = DOM.queryAll(this._container, '.js-yxt-FilterOptions-aboveShowMoreLimit');
          DOM.on(showLessEl, 'click', function () {
            _this2.showMoreState = true;
            showLessEl.classList.add('hidden');
            showMoreEl.classList.remove('hidden');
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
              for (var _iterator = optionsOverLimitEls[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                var optionEl = _step.value;
                optionEl.classList.add('hidden');
              }
            } catch (err) {
              _didIteratorError = true;
              _iteratorError = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion && _iterator["return"] != null) {
                  _iterator["return"]();
                }
              } finally {
                if (_didIteratorError) {
                  throw _iteratorError;
                }
              }
            }
          });
          DOM.on(showMoreEl, 'click', function () {
            _this2.showMoreState = false;
            showLessEl.classList.remove('hidden');
            showMoreEl.classList.add('hidden');
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
              for (var _iterator2 = optionsOverLimitEls[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                var optionEl = _step2.value;
                optionEl.classList.remove('hidden');
              }
            } catch (err) {
              _didIteratorError2 = true;
              _iteratorError2 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
                  _iterator2["return"]();
                }
              } finally {
                if (_didIteratorError2) {
                  throw _iteratorError2;
                }
              }
            }
          });
        } // searchable option list


        if (this.config.searchable) {
          var clearSearchEl = DOM.query(this._container, '.js-yxt-FilterOptions-clearSearch');
          var searchInputEl = DOM.query(this._container, '.js-yxt-FilterOptions-filter');
          var filterOptionEls = DOM.queryAll(this._container, '.js-yxt-FilterOptions-option');
          var filterContainerEl = DOM.query(this._container, '.js-yxt-FilterOptions-container'); // On clearSearchEl click, clear search input

          if (clearSearchEl && searchInputEl) {
            DOM.on(clearSearchEl, 'click', function (event) {
              searchInputEl.value = '';
              searchInputEl.dispatchEvent(new Event('input', {
                'bubbles': true,
                'cancelable': true
              }));
              searchInputEl.focus();
            });
          }

          DOM.on(searchInputEl, 'input', function (event) {
            var filter = event.target.value;

            if (!filter) {
              filterContainerEl.classList.remove('yxt-FilterOptions-container--searching');
              clearSearchEl.classList.add('js-hidden');
            } else {
              filterContainerEl.classList.add('yxt-FilterOptions-container--searching');
              clearSearchEl.classList.remove('js-hidden');
            }

            var _iteratorNormalCompletion3 = true;
            var _didIteratorError3 = false;
            var _iteratorError3 = undefined;

            try {
              for (var _iterator3 = filterOptionEls[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                var filterOption = _step3.value;
                var labelEl = DOM.query(filterOption, '.js-yxt-FilterOptions-optionLabel--name');
                var labelText = labelEl.textContent || labelEl.innerText || '';
                labelText = labelText.trim();

                if (!filter) {
                  filterOption.classList.remove('hiddenSearch');
                  filterOption.classList.remove('displaySearch');
                  labelEl.innerHTML = labelText;
                } else {
                  var matchedSubstring = _this2._getMatchedSubstring(labelText.toLowerCase(), filter.toLowerCase());

                  if (matchedSubstring) {
                    filterOption.classList.add('displaySearch');
                    filterOption.classList.remove('hiddenSearch');
                    labelEl.innerHTML = new HighlightedValue({
                      value: labelText,
                      matchedSubstrings: [matchedSubstring]
                    }).get();
                  } else {
                    filterOption.classList.add('hiddenSearch');
                    filterOption.classList.remove('displaySearch');
                    labelEl.innerHTML = labelText;
                  }
                }
              }
            } catch (err) {
              _didIteratorError3 = true;
              _iteratorError3 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
                  _iterator3["return"]();
                }
              } finally {
                if (_didIteratorError3) {
                  throw _iteratorError3;
                }
              }
            }
          });
        } // expand button


        if (this.config.showExpand) {
          var legend = DOM.query(this._container, '.yxt-FilterOptions-clickableLegend');
          DOM.on(legend, 'mousedown', function (click) {
            if (click.button === 0) {
              _this2.expanded = !_this2.expanded;

              _this2.setState();
            }
          });
          DOM.on(legend, 'keydown', function (key) {
            if (key.key === ' ' || key.key === 'Enter') {
              key.preventDefault();
              _this2.expanded = !_this2.expanded;

              _this2.setState();
            }
          });
        }
      }
      /**
       * Returns the count of currently selected options
       * @returns {number}
       * @private
       */

    }, {
      key: "_getSelectedCount",
      value: function _getSelectedCount() {
        return this.config.options.filter(function (o) {
          return o.selected;
        }).length;
      }
      /**
       * Toggles the display of the reset element based on the selected count. If there are selected
       * options, show the reset element, if not, hide it.
       *
       * Note: this will not have any effect if the reset element isn't in the DOM.
       *
       * @returns {number}
       * @private
       */

    }, {
      key: "_toggleReset",
      value: function _toggleReset() {
        var resetEl = DOM.query(this._container, '.js-yxt-FilterOptions-reset');

        var selectedCount = this._getSelectedCount();

        if (selectedCount > 0) {
          resetEl.classList.remove('js-hidden');
        } else if (!resetEl.classList.contains('js-hidden')) {
          resetEl.classList.add('js-hidden');
        }
      }
      /**
       * Finds the length and offset of the substring where (string) option and
       * (string) filter "match".
       *
       * "Match" is defined as an exact text match, or -- if the length of filter
       * is greater than the `minFilterSizeForLevenshtein` -- a "match" can occur if
       * any "n length" substring of option (where "n length" is the length of filter)
       * is within the `maxLevenshteinDistance` levenshtein distance of the filter.
       *
       * Note: this is case sensitive.
       *
       * @returns {Object}
       * @private
       */

    }, {
      key: "_getMatchedSubstring",
      value: function _getMatchedSubstring(option, filter) {
        var offset = this._getOffset(option, filter);

        if (offset > -1) {
          return {
            length: filter.length,
            offset: offset
          };
        }

        var minFilterSizeForLevenshtein = 3;
        var maxLevenshteinDistance = 1;

        if (filter.length > minFilterSizeForLevenshtein) {
          // Break option into X filter.length size substrings
          var substrings = [];

          for (var start = 0; start <= option.length - filter.length; start++) {
            substrings.push(option.substr(start, filter.length));
          } // Find the substring that is the closest in levenshtein distance to filter


          var minLevDist = filter.length;
          var minLevSubstring = filter;

          for (var _i = 0, _substrings = substrings; _i < _substrings.length; _i++) {
            var substring = _substrings[_i];

            var levDist = this._calcLevenshteinDistance(substring, filter);

            if (levDist < minLevDist) {
              minLevDist = levDist;
              minLevSubstring = substring;
            }
          } // If the min levenshtein distance is below the max, count it as a match


          if (minLevDist <= maxLevenshteinDistance) {
            offset = this._getOffset(option, minLevSubstring);

            if (offset > -1) {
              return {
                length: filter.length,
                offset: offset
              };
            }
          }
        }
      }
      /**
       * Calculate the levenshtein distance for two strings
       * @returns {number}
       * @private
       */

    }, {
      key: "_calcLevenshteinDistance",
      value: function _calcLevenshteinDistance(a, b) {
        return jsLevenshtein(a, b);
      }
      /**
       * Returns the starting index of first occurance of the (string) filter in
       * the (string) option, or -1 if not present
       * @returns {number}
       * @private
       */

    }, {
      key: "_getOffset",
      value: function _getOffset(option, filter) {
        return option && filter ? option.indexOf(filter) : -1;
      }
      /**
       * Clears all selected options.
       */

    }, {
      key: "clearOptions",
      value: function clearOptions() {
        this.config.options = this.config.options.map(function (o) {
          return Object.assign({}, o, {
            selected: false
          });
        });
        this.updateListeners();
        this.setState();
      }
      /**
       * Call the config.onChange callback with the FilterNode corresponding to the
       * component state.
       * @param {boolean} alwaysSaveFilterNodes
       * @param {boolean} blockSearchOnChange
       */

    }, {
      key: "updateListeners",
      value: function updateListeners(alwaysSaveFilterNodes, blockSearchOnChange) {
        var filterNode = this.getFilterNode();

        if (this.config.storeOnChange) {
          this.apply();
        }

        this.config.onChange(filterNode, alwaysSaveFilterNodes, blockSearchOnChange);
      }
    }, {
      key: "_updateOption",
      value: function _updateOption(index, selected) {
        if (this.config.control === 'singleoption') {
          this.config.options = this.config.options.map(function (o) {
            return Object.assign({}, o, {
              selected: false
            });
          });
        }

        this.config.options[index] = Object.assign({}, this.config.options[index], {
          selected: selected
        });

        if (this.config.showReset) {
          this._toggleReset();
        }

        this.updateListeners();
      }
    }, {
      key: "apply",
      value: function apply() {
        switch (this.config.optionType) {
          case OptionTypes.RADIUS_FILTER:
            this.core.setLocationRadiusFilterNode(this.getLocationRadiusFilterNode());
            break;

          case OptionTypes.STATIC_FILTER:
            this.core.setStaticFilterNodes(this.name, this.getFilterNode());
            break;

          default:
            throw new AnswersComponentError("Unknown optionType ".concat(this.config.optionType), 'FilterOptions');
        }
      }
    }, {
      key: "floatSelected",
      value: function floatSelected() {
        this.config.options = this.config.options.sort(function (a, b) {
          return b.selected - a.selected;
        });
      }
    }, {
      key: "_buildFilter",
      value: function _buildFilter(option) {
        return option.filter ? option.filter : Filter.equal(option.field, option.value);
      }
    }, {
      key: "_getFilterType",
      value: function _getFilterType() {
        if (this.config.isDynamic) {
          return FilterType.FACET;
        }

        return this.config.optionType === 'RADIUS_FILTER' ? FilterType.RADIUS : FilterType.STATIC;
      }
    }, {
      key: "_buildFilterMetadata",
      value: function _buildFilterMetadata(option) {
        return new FilterMetadata({
          fieldName: this.config.label,
          displayValue: option.label,
          filterType: this._getFilterType()
        });
      }
      /**
       * Return the FilterNode when this is a RADIUS_FILTER.
       * @type {FilterNode}
       */

    }, {
      key: "getLocationRadiusFilterNode",
      value: function getLocationRadiusFilterNode() {
        var _this3 = this;

        var selectedOption = this.config.options.find(function (o) {
          return o.selected;
        });

        if (!selectedOption) {
          return FilterNodeFactory.from();
        }

        var filterNode = {
          metadata: this._buildFilterMetadata(selectedOption),
          filter: {
            value: selectedOption.value
          },
          remove: function remove() {
            return _this3._clearSingleOption(selectedOption);
          }
        };

        if (selectedOption.value === 0) {
          return FilterNodeFactory.from(_objectSpread({}, filterNode, {
            filter: Filter.empty()
          }));
        } else {
          return FilterNodeFactory.from(filterNode);
        }
      }
    }, {
      key: "_clearSingleOption",
      value: function _clearSingleOption(option) {
        option.selected = false;
        this.updateListeners(true, true);
        this.setState();
      }
      /**
       * Returns this component's filter node when it is a STATIC_FILTER.
       * This method is exposed so that components like {@link FilterBoxComponent}
       * can access them.
       * @returns {FilterNode}
       */

    }, {
      key: "getFilterNode",
      value: function getFilterNode() {
        var _this4 = this;

        var filterNodes = this.config.options.filter(function (o) {
          return o.selected;
        }).map(function (o) {
          return FilterNodeFactory.from({
            filter: _this4._buildFilter(o),
            metadata: _this4._buildFilterMetadata(o),
            remove: function remove() {
              return _this4._clearSingleOption(o);
            }
          });
        });
        this.core.persistentStorage.set(this.name, this.config.options.filter(function (o) {
          return o.selected;
        }).map(function (o) {
          return o.label;
        }));
        var fieldIdToFilterNodes = groupArray(filterNodes, function (fn) {
          return fn.getFilter().getFilterKey();
        }); // OR together filter nodes for the same field id.

        var totalFilterNodes = [];

        for (var _i2 = 0, _Object$values = Object.values(fieldIdToFilterNodes); _i2 < _Object$values.length; _i2++) {
          var sameIdNodes = _Object$values[_i2];
          totalFilterNodes.push(FilterNodeFactory.or.apply(FilterNodeFactory, _toConsumableArray(sameIdNodes)));
        } // AND all of the ORed together nodes.


        return FilterNodeFactory.and.apply(FilterNodeFactory, totalFilterNodes);
      }
    }], [{
      key: "defaultTemplateName",

      /**
       * The template to render, based on the control
       * @returns {string}
       * @override
       */
      value: function defaultTemplateName(config) {
        return "controls/filteroptions";
      }
    }, {
      key: "type",
      get: function get() {
        return ComponentTypes.FILTER_OPTIONS;
      }
    }]);

    return FilterOptionsComponent;
  }(Component);

  var DEFAULT_CONFIG$2 = {
    minPlaceholderText: 'Min',
    maxPlaceholderText: 'Max'
  };

  var RangeFilterComponent =
  /*#__PURE__*/
  function (_Component) {
    _inherits(RangeFilterComponent, _Component);

    function RangeFilterComponent() {
      var _this;

      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var systemConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      _classCallCheck(this, RangeFilterComponent);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(RangeFilterComponent).call(this, _objectSpread({}, DEFAULT_CONFIG$2, {}, config), systemConfig));
      /**
       * The field to filter on
       * @type {string}
       * @private
       */

      _this._field = config.field;
      /**
       * The callback function to call when the filter value changes
       * @type {function}
       * @private
       */

      _this._onChange = config.onChange || function () {};
      /**
       * If true, stores the filter to storage on each change
       * @type {boolean}
       * @private
       */


      _this._storeOnChange = config.storeOnChange === undefined ? true : config.storeOnChange;

      var minVal = _this.core.globalStorage.getState("".concat(_this.name, ".min"));

      if (typeof minVal === 'string') {
        try {
          minVal = Number.parseInt(minVal);
        } catch (e) {}
      }

      var maxVal = _this.core.globalStorage.getState("".concat(_this.name, ".max"));

      if (typeof minVal === 'string') {
        try {
          maxVal = Number.parseInt(maxVal);
        } catch (e) {}
      }
      /**
       * The current range represented
       * @type {object}
       * @private
       */


      _this._range = {
        min: _this.getFirstValidValue(minVal, config.initialMin, 0),
        max: _this.getFirstValidValue(maxVal, config.initialMax, 10)
      };
      /**
       * The title to display for the range control
       * @type {string}
       * @private
       */

      _this._title = config.title;
      /**
       * The optional label to display for the min input
       * @type {string}
       * @private
       */

      _this._minLabel = config.minLabel || null;
      /**
       * The optional label to display for the max input
       * @type {string}
       * @private
       */

      _this._maxLabel = config.maxLabel || null;
      return _this;
    }

    _createClass(RangeFilterComponent, [{
      key: "getFirstValidValue",
      value: function getFirstValidValue() {
        for (var _len = arguments.length, values = new Array(_len), _key = 0; _key < _len; _key++) {
          values[_key] = arguments[_key];
        }

        for (var _i = 0, _values = values; _i < _values.length; _i++) {
          var value = _values[_i];

          if (value || value === 0) {
            return value;
          }
        }
      }
    }, {
      key: "setState",
      value: function setState(data) {
        _get(_getPrototypeOf(RangeFilterComponent.prototype), "setState", this).call(this, Object.assign({}, data, {
          name: this.name,
          title: this._title,
          minLabel: this._minLabel,
          maxLabel: this._maxLabel,
          minValue: this._range.min,
          maxValue: this._range.max
        }));
      }
    }, {
      key: "onCreate",
      value: function onCreate() {
        var _this2 = this;

        DOM.delegate(this._container, '.js-yext-range', 'change', function (event) {
          _this2._updateRange(event.target.dataset.key, Number.parseInt(event.target.value));
        });
      }
    }, {
      key: "setMin",
      value: function setMin(value) {
        this._updateRange('min', value);
      }
    }, {
      key: "setMax",
      value: function setMax(value) {
        this._updateRange('max', value);
      }
    }, {
      key: "_removeFilterNode",
      value: function _removeFilterNode() {
        this._range = {
          min: null,
          max: null
        };
        this.setState();

        this._onChange(FilterNodeFactory.from());

        this.core.clearStaticFilterNode(this.name);
        this.core.persistentStorage["delete"]("".concat(this.name, ".min"));
        this.core.persistentStorage["delete"]("".concat(this.name, ".max"));
      }
      /**
       * Returns this component's filter node.
       * This method is exposed so that components like {@link FilterBoxComponent}
       * can access them.
       * @returns {FilterNode}
       */

    }, {
      key: "getFilterNode",
      value: function getFilterNode() {
        var _this3 = this;

        return FilterNodeFactory.from({
          filter: this._buildFilter(),
          metadata: this._buildFilterMetadata(),
          remove: function remove() {
            return _this3._removeFilterNode();
          }
        });
      }
      /**
       * Update the current range state
       * @param {string} key The range key to update
       * @param {number} value The new value for the key
       */

    }, {
      key: "_updateRange",
      value: function _updateRange(key, value) {
        this._range = Object.assign({}, this._range, _defineProperty({}, key, value));
        this.setState();
        var filterNode = this.getFilterNode();

        if (this._storeOnChange) {
          this.core.setStaticFilterNodes(this.name, filterNode);
        }

        this.core.persistentStorage.set("".concat(this.name, ".min"), this._range.min);
        this.core.persistentStorage.set("".concat(this.name, ".max"), this._range.max);

        this._onChange(filterNode);
      }
      /**
       * Build the filter representation of the current state
       * @returns {Filter}
       */

    }, {
      key: "_buildFilter",
      value: function _buildFilter() {
        var _this$_range = this._range,
            min = _this$_range.min,
            max = _this$_range.max;
        var falsyMin = !min && min !== 0;
        var falsyMax = !max && max !== 0;

        var _min = falsyMin ? null : parseInt(min);

        var _max = falsyMax ? null : parseInt(max);

        return Filter.range(this._field, _min, _max, false);
      }
      /**
       * Helper method for creating range filter metadata
       * @returns {FilterMetadata}
       */

    }, {
      key: "_buildFilterMetadata",
      value: function _buildFilterMetadata() {
        var _this$_range2 = this._range,
            min = _this$_range2.min,
            max = _this$_range2.max;
        var falsyMin = !min && min !== 0;
        var falsyMax = !max && max !== 0;

        if (falsyMin && falsyMax) {
          return new FilterMetadata({
            fieldName: this._title
          });
        } // TODO add config option to range filter component for exclusive ranges.
        var displayValue;

        if (falsyMax) {
          displayValue = "\u2265 ".concat(min);
        } else if (falsyMin) {
          displayValue = "\u2264 ".concat(max);
        } else if (min === max) {
          displayValue = min;
        } else {
          displayValue = "".concat(min, " - ").concat(max);
        }

        return new FilterMetadata({
          fieldName: this._title,
          displayValue: displayValue
        });
      }
    }], [{
      key: "defaultTemplateName",
      value: function defaultTemplateName() {
        return 'controls/range';
      }
    }, {
      key: "type",
      get: function get() {
        return ComponentTypes.RANGE_FILTER;
      }
    }]);

    return RangeFilterComponent;
  }(Component);

  /**
   * A filter for a range of dates
   */

  var DateRangeFilterComponent =
  /*#__PURE__*/
  function (_Component) {
    _inherits(DateRangeFilterComponent, _Component);

    function DateRangeFilterComponent() {
      var _this;

      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var systemConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      _classCallCheck(this, DateRangeFilterComponent);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(DateRangeFilterComponent).call(this, config, systemConfig));
      /**
       * The api field this filter controls
       * @type {string}
       * @private
       */

      _this._field = config.field;
      /**
       * The title to display for the date range
       * @type {string}
       * @private
       */

      _this._title = config.title;
      /**
       * The optional label to show for the min date input
       * @type {string}
       * @private
       */

      _this._minLabel = config.minLabel || null;
      /**
       * The optional label to show for the max date input
       * @type {string}
       * @private
       */

      _this._maxLabel = config.maxLabel || null;
      /**
       * The callback used when a date is changed
       * @type {function}
       * @private
       */

      _this._onChange = config.onChange || function () {};
      /**
       * If true, stores the filter to storage on each change
       * @type {boolean}
       * @private
       */


      _this._storeOnChange = config.storeOnChange === undefined ? true : config.storeOnChange;
      /**
       * If true, this filter represents an exclusive range, rather than an inclusive one
       * @type {boolean}
       * @private
       */

      _this._isExclusive = config.isExclusive;
      var today = new Date();
      var todayString = "".concat(today.getFullYear(), "-").concat("".concat(today.getMonth() + 1).padStart(2, '0'), "-").concat("".concat(today.getDate()).padStart(2, '0'));

      var minDate = _this.core.globalStorage.getState("".concat(_this.name, ".min"));

      var maxDate = _this.core.globalStorage.getState("".concat(_this.name, ".max"));
      /**
       * The current date range
       * @private
       */


      _this._date = {
        min: minDate || config.initialMin || todayString,
        max: maxDate || config.initialMax || todayString
      };
      return _this;
    }

    _createClass(DateRangeFilterComponent, [{
      key: "setState",
      value: function setState(data) {
        _get(_getPrototypeOf(DateRangeFilterComponent.prototype), "setState", this).call(this, Object.assign({}, data, {
          name: this.name,
          title: this._title,
          minLabel: this._minLabel,
          maxLabel: this._maxLabel,
          dateMin: this._date.min,
          dateMax: this._date.max
        }));
      }
    }, {
      key: "onCreate",
      value: function onCreate() {
        var _this2 = this;

        DOM.delegate(this._container, '.js-yext-date', 'change', function (event) {
          _this2._updateRange(event.target.dataset.key, event.target.value);
        });
      }
      /**
       * Set the min date to the one provided
       * @param {string} date Date to set in yyyy-mm-dd string format
       */

    }, {
      key: "setMin",
      value: function setMin(date) {
        this._updateRange('min', date);
      }
      /**
       * Set the max date to the one provided
       * @param {string} date Date to set in yyyy-mm-dd string format
       */

    }, {
      key: "setMax",
      value: function setMax(date) {
        this._updateRange('max', date);
      }
    }, {
      key: "_removeFilterNode",
      value: function _removeFilterNode() {
        this._date = {
          min: null,
          max: null
        };
        this.setState();

        this._onChange(FilterNodeFactory.from());

        this.core.clearStaticFilterNode(this.name);
        this.core.persistentStorage["delete"]("".concat(this.name, ".min"));
        this.core.persistentStorage["delete"]("".concat(this.name, ".max"));
      }
      /**
       * Returns this component's filter node.
       * This method is exposed so that components like {@link FilterBoxComponent}
       * can access them.
       * @returns {FilterNode}
       */

    }, {
      key: "getFilterNode",
      value: function getFilterNode() {
        var _this3 = this;

        return FilterNodeFactory.from({
          filter: this._buildFilter(),
          metadata: this._buildFilterMetadata(),
          remove: function remove() {
            return _this3._removeFilterNode();
          }
        });
      }
      /**
       * Updates the current state of the date range
       * @param {string} key The key for the date value
       * @param {string} value The string date value
       * @private
       */

    }, {
      key: "_updateRange",
      value: function _updateRange(key, value) {
        this._date = Object.assign({}, this._date, _defineProperty({}, key, value));
        this.setState();
        var filterNode = this.getFilterNode();

        if (this._storeOnChange) {
          this.core.setStaticFilterNodes(this.name, filterNode);
        }

        this.core.persistentStorage.set("".concat(this.name, ".min"), this._date.min);
        this.core.persistentStorage.set("".concat(this.name, ".max"), this._date.max);

        this._onChange(filterNode);
      }
      /**
       * Construct an api filter with the current date state
       * @private
       */

    }, {
      key: "_buildFilter",
      value: function _buildFilter() {
        return Filter.range(this._field, this._date.min, this._date.max, this._isExclusive);
      }
      /**
       * Helper method for creating a date range filter metadata
       * @returns {FilterMetadata}
       */

    }, {
      key: "_buildFilterMetadata",
      value: function _buildFilterMetadata() {
        var _this$_date = this._date,
            min = _this$_date.min,
            max = _this$_date.max;

        if (!min && !max) {
          return new FilterMetadata({
            fieldName: this._title
          });
        }

        var displayValue;

        if (!max) {
          displayValue = this._isExclusive ? "After ".concat(min) : "".concat(min, " or later");
        } else if (!min) {
          displayValue = this._isExclusive ? "Before ".concat(max) : "".concat(max, " and earlier");
        } else if (min === max) {
          displayValue = this._isExclusive ? '' : min;
        } else {
          displayValue = "".concat(min, " - ").concat(max);
        }

        return new FilterMetadata({
          fieldName: this._title,
          displayValue: displayValue
        });
      }
    }], [{
      key: "defaultTemplateName",
      value: function defaultTemplateName() {
        return 'controls/date';
      }
    }, {
      key: "type",
      get: function get() {
        return ComponentTypes.DATE_RANGE_FILTER;
      }
    }]);

    return DateRangeFilterComponent;
  }(Component);

  var FacetsConfig =
  /*#__PURE__*/
  function () {
    function FacetsConfig(config) {
      _classCallCheck(this, FacetsConfig);

      /**
       * The title to display above the controls
       * @type {string}
       */
      this.title = config.title || 'Filters';
      /**
       * If true, display the number of results next to each facet
       * @type {boolean}
       */

      this.showCount = config.showCount === undefined ? true : config.showCount;
      /**
       * If true, trigger a search on each change to a filter
       * @type {boolean}
       */

      this.searchOnChange = config.searchOnChange || false;
      /**
       * If true, show a button to reset for each facet group
       * @type {boolean}
       */

      this.resetFacet = config.resetFacet || false;
      /**
       * The label to show for the reset button
       * @type {string}
       */

      this.resetFacetLabel = config.resetFacetLabel || 'reset';
      /**
       * If true, show a "reset all" button to reset all facets
       * @type {boolean}
       */

      this.resetFacets = config.resetFacets;
      /**
       * The label to show for the "reset all" button
       * @type {string}
       */

      this.resetFacetsLabel = config.resetFacetsLabel || 'reset all';
      /**
       * The max number of facets to show before displaying "show more"/"show less"
       * @type {number}
       */

      this.showMoreLimit = config.showMoreLimit || 5;
      /**
       * The label to show for displaying more facets
       * @type {string}
       */

      this.showMoreLabel = config.showMoreLabel || 'show more';
      /**
       * The label to show for displaying less facets
       * @type {string}
       */

      this.showLessLabel = config.showLessLabel || 'show less';
      /**
       * If true, enable hiding excess facets in each group with a "show more"/"show less" button
       * @type {boolean}
       */

      this.showMore = config.showMore === undefined ? true : config.showMore;
      /**
       * If true, allow expanding and collapsing each group of facets
       * @type {boolean}
       */

      this.expand = config.expand === undefined ? true : config.expand;
      /**
       * If true, display the number of currently applied filters when collapsed
       * @type {boolean}
       */

      this.showNumberApplied = config.showNumberApplied === undefined ? true : config.showNumberApplied;
      /**
       * Text to display on the apply button
       * @type {string}
       */

      this.applyLabel = config.applyLabel || 'apply';
      /**
       * The controls to use for each field. Each type of filter has a default
       * $eq : multioption (checkbox)
       *
       * DEPRECATED: prefer putting this in config.fields
       *
       * @type {Object}
       */

      this.fieldControls = config.fieldControls || {};
      /**
       * The placeholder text used for the filter option search input
       * @type {string}
       */

      this.placeholderText = config.placeholderText || 'Search here...';
      /**
       * If true, display the filter option search input
       * @type {boolean}
       */

      this.searchable = config.searchable || false;
      /**
       * The form label text for the search input
       * @type {boolean}
       */

      this.searchLabelText = config.searchLabelText || 'Search for a filter option';
      /**
       * An object that maps field API names to their filter options overrides,
       * which have the same keys as the config options in FilterOptions component.
       * @type {Object}
       */

      this.fields = config.fields || {};
      /**
       * The selector of the apply button
       * @type {string}
       * @private
       */

      this.applyButtonSelector = config.applyButtonSelector || null;
      this.validate();
    }

    _createClass(FacetsConfig, [{
      key: "validate",
      value: function validate() {}
    }]);

    return FacetsConfig;
  }();
  /**
   * Displays a set of dynamic filters returned from the backend
   * @extends Component
   */


  var FacetsComponent =
  /*#__PURE__*/
  function (_Component) {
    _inherits(FacetsComponent, _Component);

    function FacetsComponent() {
      var _this;

      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var systemConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      _classCallCheck(this, FacetsComponent);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(FacetsComponent).call(this, config, systemConfig));
      _this.config = new FacetsConfig(config);
      /**
       * The vertical key for the search
       * @type {string}
       * @private
       */

      _this._verticalKey = config.verticalKey;
      /**
       * The selector of the apply button
       * @type {string}
       * @private
       */

      _this._applyButtonSelector = config.applyButtonSelector || null;
      /**
       * An internal reference for the data storage to listen for updates from the server
       * @type {string}
       */

      _this.moduleId = StorageKeys.DYNAMIC_FILTERS;
      /**
       * The filter box that displays the dynamic filters
       * @type {FilterBoxComponent}
       * @private
       */

      _this._filterbox = null;
      return _this;
    }

    _createClass(FacetsComponent, [{
      key: "setState",
      value: function setState(data) {
        return _get(_getPrototypeOf(FacetsComponent.prototype), "setState", this).call(this, _objectSpread({}, data, {
          isNoResults: data.resultsContext === ResultsContext.NO_RESULTS
        }));
      }
    }, {
      key: "remove",
      value: function remove() {
        if (this._filterbox) {
          this._filterbox.remove();
        }

        _get(_getPrototypeOf(FacetsComponent.prototype), "remove", this).call(this);
      }
    }, {
      key: "onMount",
      value: function onMount() {
        var _this2 = this;

        this.core.enableDynamicFilters();

        if (this._filterbox) {
          this._filterbox.remove();
        }

        var _this$_state$get = this._state.get(),
            filters = _this$_state$get.filters,
            resultsContext = _this$_state$get.resultsContext;

        if (!filters || resultsContext === ResultsContext.NO_RESULTS) {
          return;
        }

        filters = filters.map(function (f) {
          var fieldOverrides = _this2.config.fields[f.fieldId] || {};
          return Object.assign({}, f, _objectSpread({
            type: 'FilterOptions',
            control: _this2.config.fieldControls[f.fieldId] || 'multioption',
            searchable: _this2.config.searchable,
            searchLabelText: _this2.config.searchLabelText,
            placeholderText: _this2.config.placeholderText,
            showExpand: fieldOverrides.expand === undefined ? _this2.config.expand : fieldOverrides.expand
          }, fieldOverrides));
        }); // TODO: pass an apply() method to FilterBox, that will override its default behavior,
        // and remove the isDynamic config option.

        this._filterbox = this.componentManager.create('FilterBox', Object.assign({}, this.config, {
          parentContainer: this._container,
          name: "".concat(this.name, ".filterbox"),
          container: '.js-yxt-Facets',
          verticalKey: this._verticalKey,
          resetFilter: this.config.resetFacet,
          resetFilters: this.config.resetFacets,
          resetFilterLabel: this.config.resetFacetLabel,
          resetFiltersLabel: this.config.resetFacetsLabel,
          isDynamic: true,
          filters: filters
        }));

        this._filterbox.mount();
      }
    }], [{
      key: "defaultTemplateName",

      /**
       * The template to render
       * @returns {string}
       * @override
       */
      value: function defaultTemplateName() {
        return 'filters/facets';
      }
    }, {
      key: "type",
      get: function get() {
        return ComponentTypes.FACETS;
      }
    }]);

    return FacetsComponent;
  }(Component);

  var METERS_PER_MILE = 1609.344;
  var DEFAULT_CONFIG$3 = {
    /**
     * The radius, in miles, around the user's location to find results.
     * If location accuracy is low, a larger radius may be used automatically
     * @type {number}
     */
    radius: 50,

    /**
     * The vertical key to use
     * @type {string}
     */
    verticalKey: null,

    /**
     * If true, submits a search when the value is changed
     * @type {boolean}
     */
    searchOnChange: false,

    /**
     * The title to display
     * @type {string}
     */
    title: 'Location',

    /**
     * The label to display
     * @type {string}
     */
    label: 'Location',

    /**
     * The icon url to show in the geo button
     * @type {string}
     */
    geoButtonIcon: '',

    /**
     * The alt text to include with the geo button icon
     * @type {string}
     */
    geoButtonIconAltText: 'Use My Location',

    /**
     * The text to show in the geo button
     * @type {string}
     */
    geoButtonText: 'Use My Location',

    /**
     * The text to show when geolocation is enabled
     * @type {string}
     */
    enabledText: 'Current Location',

    /**
     * The text to show when loading the user's location
     * @type {string}
     */
    loadingText: 'Finding Your Location...',

    /**
     * The text to show if the user's location cannot be found
     * @type {string}
     */
    errorText: 'Could Not Find Your Location',

    /**
     * The CSS selector of the toggle button
     * @type {string}
     */
    buttonSelector: '.js-yxt-GeoLocationFilter-button',

    /**
     * The CSS selector of the query input
     * @type {string}
     */
    inputSelector: '.js-yxt-GeoLocationFilter-input'
  };
  /**
   * Renders a button that when clicked adds a static filter representing the user's location
   * @extends Component
   */

  var GeoLocationComponent =
  /*#__PURE__*/
  function (_Component) {
    _inherits(GeoLocationComponent, _Component);

    function GeoLocationComponent() {
      var _this;

      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var systemConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      _classCallCheck(this, GeoLocationComponent);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(GeoLocationComponent).call(this, _objectSpread({}, DEFAULT_CONFIG$3, {}, config), systemConfig));
      /**
       * The query string to use for the input box, provided to template for rendering.
       * @type {string}
       */

      _this.query = _this.core.globalStorage.getState("".concat(StorageKeys.QUERY, ".").concat(_this.name)) || '';

      _this.core.globalStorage.on('update', "".concat(StorageKeys.QUERY, ".").concat(_this.name), function (q) {
        _this.query = q;

        _this.setState();
      });

      _this.searchParameters = buildSearchParameters(config.searchParameters);
      /**
       * Options to pass to the geolocation api.
       * @type {Object}
       */

      _this._geolocationOptions = _objectSpread({
        enableHighAccuracy: false,
        timeout: 6000,
        maximumAge: 300000
      }, config.geolocationOptions);
      /**
       * Options for the geolocation timeout alert.
       * @type {Object}
       */

      _this._geolocationTimeoutAlert = _objectSpread({
        enabled: false,
        message: 'We are unable to determine your location'
      }, config.geolocationTimeoutAlert);
      return _this;
    }

    _createClass(GeoLocationComponent, [{
      key: "setState",
      value: function setState() {
        var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var placeholder = '';

        if (this._enabled) {
          placeholder = this._config.enabledText;
        }

        if (data.geoLoading) {
          placeholder = this._config.loadingText;
        }

        if (data.geoError) {
          placeholder = this._config.errorText;
        }

        _get(_getPrototypeOf(GeoLocationComponent.prototype), "setState", this).call(this, _objectSpread({}, data, {
          title: this._config.title,
          geoEnabled: this._enabled,
          query: this.query,
          labelText: this._config.label,
          enabledText: this._config.enabledText,
          loadingText: this._config.loadingText,
          errorText: this._config.errorText,
          geoButtonIcon: this._config.geoButtonIcon,
          geoValue: this._enabled || data.geoLoading || data.geoError ? '' : this.query,
          geoPlaceholder: placeholder,
          geoButtonText: this._config.geoButtonText
        }));
      }
    }, {
      key: "onMount",
      value: function onMount() {
        var _this2 = this;

        if (this._autocomplete) {
          this._autocomplete.remove();
        }

        this._initAutoComplete(this._config.inputSelector);

        DOM.on(DOM.query(this._container, this._config.buttonSelector), 'click', function () {
          return _this2._toggleGeoFilter();
        });
      }
      /**
       * A helper method to wire up our auto complete on an input selector
       * @param {string} inputSelector CSS selector to bind our auto complete component to
       * @private
       */

    }, {
      key: "_initAutoComplete",
      value: function _initAutoComplete(inputSelector) {
        var _this3 = this;

        if (this._autocomplete) {
          this._autocomplete.remove();
        }

        this._autocomplete = this.componentManager.create('AutoComplete', {
          parentContainer: this._container,
          name: "".concat(this.name, ".autocomplete"),
          isFilterSearch: true,
          container: '.js-yxt-GeoLocationFilter-autocomplete',
          originalQuery: this.query,
          inputEl: inputSelector,
          verticalKey: this._config.verticalKey,
          searchParameters: this.searchParameters,
          onSubmit: function onSubmit(query, filter) {
            return _this3._handleSubmit(query, filter);
          }
        });
      }
    }, {
      key: "_handleSubmit",
      value: function _handleSubmit(query, filter) {
        this.query = query;

        this._saveDataToStorage(query, Filter.fromResponse(filter), "".concat(query));

        this._enabled = false;
      }
      /**
       * Toggles the static filter representing the user's location
       * @private
       */

    }, {
      key: "_toggleGeoFilter",
      value: function _toggleGeoFilter() {
        var _this4 = this;

        if (!navigator.geolocation) {
          this.setState({
            geoError: true
          });
          return;
        }

        if (!this._enabled) {
          this.setState({
            geoLoading: true
          });
          navigator.geolocation.getCurrentPosition(function (position) {
            var filter = _this4._buildFilter(position);

            _this4._saveDataToStorage('', filter, 'Current Location', position);

            _this4._enabled = true;

            _this4.setState({});

            _this4.core.persistentStorage["delete"]("".concat(StorageKeys.QUERY, ".").concat(_this4.name));

            _this4.core.persistentStorage["delete"]("".concat(StorageKeys.FILTER, ".").concat(_this4.name));
          }, function () {
            return _this4._handleGeolocationError();
          }, this._geolocationOptions);
        }
      }
    }, {
      key: "_handleGeolocationError",
      value: function _handleGeolocationError() {
        this.setState({
          geoError: true
        });
        var _this$_geolocationTim = this._geolocationTimeoutAlert,
            enabled = _this$_geolocationTim.enabled,
            message = _this$_geolocationTim.message;

        if (enabled) {
          window.alert(message);
        }
      }
    }, {
      key: "_removeFilterNode",
      value: function _removeFilterNode() {
        this.core.persistentStorage["delete"]("".concat(StorageKeys.QUERY, ".").concat(this.name));
        this.core.persistentStorage["delete"]("".concat(StorageKeys.FILTER, ".").concat(this.name));
        this._enabled = false;
        this.query = '';
        this.core.clearStaticFilterNode(this.name);
        this.setState();
      }
    }, {
      key: "_buildFilterNode",
      value: function _buildFilterNode(filter, displayValue) {
        var _this5 = this;

        return FilterNodeFactory.from({
          filter: filter,
          metadata: {
            displayValue: displayValue,
            fieldName: this._config.title || this._config.label || 'Location'
          },
          remove: function remove() {
            return _this5._removeFilterNode();
          }
        });
      }
      /**
       * Saves the provided filter under this component's name
       * @param {string} query The query to save
       * @param {Filter} filter The filter to save
       * @param {string} displayValue The display value for the filter
       * @param {Object} position The position to save
       * @private
       */

    }, {
      key: "_saveDataToStorage",
      value: function _saveDataToStorage(query, filter, displayValue, position) {
        this.core.persistentStorage.set("".concat(StorageKeys.QUERY, ".").concat(this.name), query);
        this.core.persistentStorage.set("".concat(StorageKeys.FILTER, ".").concat(this.name), filter);

        var filterNode = this._buildFilterNode(filter, displayValue);

        this.core.setStaticFilterNodes(this.name, filterNode);

        if (position) {
          this.core.globalStorage.set(StorageKeys.GEOLOCATION, {
            lat: position.coords.latitude,
            lng: position.coords.longitude,
            radius: position.coords.accuracy
          });
        }

        if (this._config.searchOnChange) {
          this.core.verticalSearch(this._config.verticalKey, {
            setQueryParams: true,
            resetPagination: true,
            useFacets: true
          });
        }
      }
      /**
       * Given a position, construct a Filter object
       * @param {Postition} position The position
       * @returns {Filter}
       * @private
       */

    }, {
      key: "_buildFilter",
      value: function _buildFilter(position) {
        var _position$coords = position.coords,
            latitude = _position$coords.latitude,
            longitude = _position$coords.longitude,
            accuracy = _position$coords.accuracy;
        var radius = Math.max(accuracy, this._config.radius * METERS_PER_MILE);
        return Filter.position(latitude, longitude, radius);
      }
    }], [{
      key: "defaultTemplateName",
      value: function defaultTemplateName() {
        return 'controls/geolocation';
      }
    }, {
      key: "type",
      get: function get() {
        return ComponentTypes.GEOLOCATION_FILTER;
      }
    }]);

    return GeoLocationComponent;
  }(Component);

  /**
   * Renders configuration options for sorting Vertical Results.
   * TODO: how to deal with multiple instances of this component (and filters in general),
   * ideally "identical" filters/sorts would be synced up.
   */

  var SortOptionsComponent =
  /*#__PURE__*/
  function (_Component) {
    _inherits(SortOptionsComponent, _Component);

    function SortOptionsComponent() {
      var _this;

      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var systemConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      _classCallCheck(this, SortOptionsComponent);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(SortOptionsComponent).call(this, assignDefaults(config), systemConfig)); // TODO SPR-1929 centralize this logic

      _this._config.verticalKey = config.verticalKey || _this.core.globalStorage.getState(StorageKeys.SEARCH_CONFIG).verticalKey;
      _this.options = _this._config.options;
      _this.selectedOptionIndex = parseInt(_this.core.globalStorage.getState(_this.name)) || 0;
      _this.options[_this.selectedOptionIndex].isSelected = true;
      _this.hideExcessOptions = _this._config.showMore && _this.selectedOptionIndex < _this._config.showMoreLimit;
      _this.showReset = _this._config.showReset && _this.selectedOptionIndex !== 0;
      /**
       * This component listens to updates to vertical results, and sets its state to it when
       * an update occurs.
       * @type {string}
       */

      _this.core.globalStorage.on('update', StorageKeys.VERTICAL_RESULTS, function (verticalResults) {
        if (verticalResults.searchState === SearchStates.SEARCH_COMPLETE) {
          _this.setState(verticalResults);
        }
      });

      return _this;
    }

    _createClass(SortOptionsComponent, [{
      key: "setState",
      value: function setState() {
        var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var options = this.options;

        if (this.hideExcessOptions) {
          options = this.options.slice(0, this._config.showMoreLimit);
        }

        _get(_getPrototypeOf(SortOptionsComponent.prototype), "setState", this).call(this, Object.assign({}, data, {
          options: options,
          hideExcessOptions: this.hideExcessOptions,
          name: this.name,
          showReset: this.showReset,
          isNoResults: data.resultsContext === ResultsContext.NO_RESULTS
        }));
      }
    }, {
      key: "onMount",
      value: function onMount() {
        var _this2 = this;

        // Handle radio button selections
        var containerEl = DOM.query(this._container, '.yxt-SortOptions-fieldSet');
        containerEl && DOM.on(containerEl, 'change', function (evt) {
          return _this2.handleOptionSelection(parseInt(evt.target.value));
        }); // Register more/less button

        if (this._config.showMore) {
          var toggleEl = DOM.query(this._container, '.yxt-SortOptions-showToggle');
          toggleEl && DOM.on(toggleEl, 'click', function () {
            _this2.hideExcessOptions = !_this2.hideExcessOptions;

            _this2.setState();
          });
        } // Register show reset button


        if (this.showReset) {
          var resetEl = DOM.query(this._container, '.yxt-SortOptions-reset');
          resetEl && DOM.on(resetEl, 'click', function () {
            return _this2.handleOptionSelection(0);
          });
        } // Register apply button


        if (!this._config.searchOnChange) {
          var applyEl = DOM.query(this._container, '.yxt-SortOptions-apply');
          applyEl && DOM.on(applyEl, 'click', function () {
            return _this2._sortResults();
          });
        }
      }
    }, {
      key: "handleOptionSelection",
      value: function handleOptionSelection(optionIndex) {
        this._updateSelectedOption(optionIndex);

        if (this._config.searchOnChange) {
          this._sortResults();
        }
      }
    }, {
      key: "_updateSelectedOption",
      value: function _updateSelectedOption(optionIndex) {
        this.options[this.selectedOptionIndex].isSelected = false;
        this.options[optionIndex].isSelected = true;
        this.selectedOptionIndex = optionIndex;
        this.showReset = this._config.showReset && optionIndex !== 0;
        this.setState();
      }
    }, {
      key: "_sortResults",
      value: function _sortResults() {
        var optionIndex = this.selectedOptionIndex;
        var option = this.options[optionIndex]; // searchOnChange really means sort on change here, just that the sort is done through a search,
        // This was done to have a consistent option name between filters.

        this.core.persistentStorage.set(this.name, optionIndex);

        if (this._config.storeOnChange && optionIndex === 0) {
          this.core.clearSortBys();
        } else if (this._config.storeOnChange) {
          this.core.setSortBys(option);
        }

        this._search();

        this._config.onChange(option);

        this.setState();
      }
      /**
       * Trigger a search with all filters in storage
       */

    }, {
      key: "_search",
      value: function _search() {
        this.core.verticalSearch(this._config.verticalKey, {
          setQueryParams: true,
          resetPagination: true,
          useFacets: true
        });
      }
    }], [{
      key: "defaultTemplateName",
      value: function defaultTemplateName() {
        return 'controls/sortoptions';
      }
    }, {
      key: "type",
      get: function get() {
        return ComponentTypes.SORT_OPTIONS;
      }
    }]);

    return SortOptionsComponent;
  }(Component);

  function assignDefaults(config) {
    var updatedConfig = Object.assign({}, config); // Optional, The label used for the “default” sort (aka the sort specified by the experience config").

    updatedConfig.defaultSortLabel = config.defaultSortLabel || 'Best Match'; // Array of search options, where an option has type, label, and if is type FIELD also a label and direction

    if (!config.options) {
      throw new AnswersBasicError('config.options are required', 'SortOptions');
    }

    var OPTION_TYPES = ['FIELD', 'RELEVANCE', 'ENTITY_DISTANCE'];

    if (!Array.isArray(config.options)) {
      throw new AnswersBasicError('options must be an array of objects', 'SortOptions');
    }

    updatedConfig.options = config.options.map(function (option) {
      if (!option.label || !option.type) {
        throw new AnswersBasicError("option.label and option.type are required option ".concat(option), 'SortOptions');
      }

      var newOption = {
        isSelected: false
      };
      newOption.label = option.label;
      newOption.type = option.type;
      var isField = OPTION_TYPES.indexOf(newOption.type) === 0;

      if (isField && option.field && option.direction) {
        newOption.field = option.field;
        newOption.direction = option.direction;
      } else if (isField) {
        throw new AnswersBasicError("option.field and option.direction are required for option: ".concat(option), 'SortOptions');
      }

      return newOption;
    }); // Add default option to the front of the options array

    updatedConfig.options.unshift({
      label: updatedConfig.defaultSortLabel,
      isSelected: false
    }); // Optional, the selector used for options in the template

    updatedConfig.optionSelector = config.optionSelector || 'yxt-SortOptions-optionSelector'; // Optional, if true, triggers a search on each change to a filter,
    // if false the component also renders an apply button, defaults to false

    updatedConfig.searchOnChange = config.searchOnChange === undefined ? true : config.searchOnChange; // Optional, show a reset button. Clicking it will always return the user to the default sorting option.

    updatedConfig.showReset = config.showReset || false; // Optional, the label to use for the reset button

    updatedConfig.resetLabel = config.resetLabel || 'reset'; // Optional, the max number of filter options to show before collapsing extras

    updatedConfig.showMoreLimit = config.showMoreLimit || 5; // Optional, allow collapsing excess sort options after a limit

    updatedConfig.showMore = config.showMore === undefined ? true : config.showMore;
    updatedConfig.showMore = updatedConfig.showMore && updatedConfig.options.length > updatedConfig.showMoreLimit; // Optional, the label to show for displaying more options

    updatedConfig.showMoreLabel = config.showMoreLabel || 'Show more'; // Optional, the label to show for displaying less options

    updatedConfig.showLessLabel = config.showLessLabel || 'Show less'; // Optional, the callback function to call when changed

    updatedConfig.onChange = config.onChange || function () {}; // Optional, Top title for the sorting component


    updatedConfig.label = config.label || 'Sorting'; // Optional, when true component does not update globalStorage
    // possibly delegating that to a higher-order/composite component

    updatedConfig.storeOnChange = config.storeOnChange === undefined ? true : config.storeOnChange;
    updatedConfig.applyLabel = config.applyLabel || 'Apply';
    updatedConfig.verticalKey = config.verticalKey;

    if (!updatedConfig.verticalKey) {
      throw new AnswersBasicError('vertical key is required', 'SortOptions');
    } // note: showExpand and showNumberApplied explicitly not included, on the grounds that
    // sorting should always be exposed to the user if added.


    return updatedConfig;
  }

  /**
   * EventTypes are explicit strings defined
   * for what the server expects for analytics.
   *
   * @enum
   */

  var EventTypes = {
    THUMBS_UP: 'THUMBS_UP',
    THUMBS_DOWN: 'THUMBS_DOWN'
  };
  var DEFAULT_CONFIG$4 = {
    positiveFeedbackSrText: 'This answered my question',
    negativeFeedbackSrText: 'This did not answer my question',
    footerTextOnSubmission: 'Thank you for your feedback!'
  };

  var DirectAnswerComponent =
  /*#__PURE__*/
  function (_Component) {
    _inherits(DirectAnswerComponent, _Component);

    function DirectAnswerComponent() {
      var _this;

      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var systemConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      _classCallCheck(this, DirectAnswerComponent);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(DirectAnswerComponent).call(this, _objectSpread({}, DEFAULT_CONFIG$4, {}, config), systemConfig));
      /**
       * The user given config, without any defaults applied.
       * @type {Object}
       */

      _this._userConfig = _objectSpread({}, config);
      /**
       * Recieve updates from storage based on this index
       * @type {StorageKey}
       */

      _this.moduleId = StorageKeys.DIRECT_ANSWER;
      /**
       * The form used for submitting the feedback
       * @type {string}
       */

      _this._formEl = config.formEl || '.js-directAnswer-feedback-form';
      /**
       * The `thumbs up` css selector to bind ui interaction to for reporting
       * @type {string}
       */

      _this._thumbsUpSelector = config.thumbsUpSelector || '.js-directAnswer-thumbUp';
      /**
       * The `thumbs down` css selector to bind ui interaction to for reporting
       * @type {string}
       */

      _this._thumbsDownSelector = config.thumbsDownSelector || '.js-directAnswer-thumbDown';
      /**
       * The display text for the View Details click to action link
       * @type {string}
       */

      _this._viewDetailsText = config.viewDetailsText || 'View Details';
      /**
       * The default custom direct answer card to use, when there are no matching card overrides.
       * @type {string}
       */

      _this._defaultCard = config.defaultCard;
      /**
       * Card overrides, which choose a custom direct answer card based on fieldName, fieldType, and entityType.
       * @type {Array<Object>}
       */

      _this._cardOverrides = config.cardOverrides || [];
      return _this;
    }

    _createClass(DirectAnswerComponent, [{
      key: "beforeMount",

      /**
       * beforeMount, only display the direct answer component if it has data
       */
      value: function beforeMount() {
        if (!this.hasState('answer')) {
          return false;
        }

        return true;
      }
      /**
       * Check whether a given cardOverride matches a given directAnswer.
       * @param {Object} directAnswer
       * @param {Object} override
       */

    }, {
      key: "_overrideMatchesAnswer",
      value: function _overrideMatchesAnswer(directAnswer, override) {
        if (!Object.keys(directAnswer).length) {
          return true;
        }

        var directAnswerPropeties = {
          entityType: directAnswer.relatedItem.data.type,
          fieldName: directAnswer.answer.fieldName,
          fieldType: directAnswer.answer.fieldType
        };

        for (var _i = 0, _Object$entries = Object.entries(override); _i < _Object$entries.length; _i++) {
          var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),
              propertyToMatch = _Object$entries$_i[0],
              propertyValue = _Object$entries$_i[1];

          if (propertyToMatch === 'cardType') {
            continue;
          }

          if (directAnswerPropeties[propertyToMatch] !== propertyValue) {
            return false;
          }
        }

        return true;
      }
      /**
       * Returns the custom card that should be used for the given direct answer.
       * First, checks user given cardOverrides for a matching override, if there are none
       * then returns the default card.
       * @returns {string}
       */

    }, {
      key: "_getCustomCard",
      value: function _getCustomCard(directAnswer) {
        var _this2 = this;

        var cardOverride = this._cardOverrides.find(function (override) {
          return _this2._overrideMatchesAnswer(directAnswer, override);
        });

        return cardOverride ? cardOverride.cardType : this._defaultCard;
      }
      /**
       * When the DOM is constructed,
       * we want to wire up the behavior for interacting with the quality feedback reporting (thumbsup/down)
       */

    }, {
      key: "onMount",
      value: function onMount() {
        var _this3 = this;

        var customCard = this.getState('customCard');
        var feedbackSubmitted = this.getState('feedbackSubmitted') === true; // Avoid bindings if the feedback has previously been submitted or is using a custom card.

        if (customCard || feedbackSubmitted) {
          return this;
        } // For WCAG compliance, the feedback should be a submittable form


        DOM.on(this._formEl, 'submit', function (e) {
          var formEl = e.target;
          var checkedValue = DOM.query(formEl, 'input:checked').value === 'true';

          _this3.reportQuality(checkedValue);

          _this3.updateState({
            'feedbackSubmitted': true
          });
        }); // Is this actually necessary? I guess it's only necessary if the
        // submit button is hidden.

        DOM.on(this._thumbsUpSelector, 'click', function () {
          DOM.trigger(_this3._formEl, 'submit');
        });
        DOM.on(this._thumbsDownSelector, 'click', function () {
          DOM.trigger(_this3._formEl, 'submit');
        });
        var rtfElement = DOM.query(this._container, '.js-yxt-rtfValue');
        rtfElement && DOM.on(rtfElement, 'click', function (e) {
          return _this3._handleRtfClickAnalytics(e);
        });
      }
      /**
       * A click handler for links in a Rich Text Direct Answer. When such a link
       * is clicked, an {@link AnalyticsEvent} needs to be fired.
       *
       * @param {MouseEvent} event The click event.
       */

    }, {
      key: "_handleRtfClickAnalytics",
      value: function _handleRtfClickAnalytics(event) {
        if (!event.target.dataset.ctaType) {
          return;
        }

        var ctaType = event.target.dataset.ctaType;
        var relatedItem = this.getState('relatedItem');
        var analyticsOptions = {
          verticalKey: relatedItem.verticalConfigId,
          directAnswer: true,
          fieldName: this.getState('answer').fieldApiName,
          searcher: 'UNIVERSAL',
          entityId: relatedItem.data.id,
          url: event.target.href
        };
        var analyticsEvent = new AnalyticsEvent(ctaType);
        analyticsEvent.addOptions(analyticsOptions);
        this.analyticsReporter.report(analyticsEvent);
      }
      /**
       * updateState enables for partial updates (the delta between the old and new)
       * @type {object} The new state to apply to the old
       */

    }, {
      key: "updateState",
      value: function updateState() {
        var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var newState = Object.assign({}, this.getState(), state);
        this.setState(newState);
      }
    }, {
      key: "setState",
      value: function setState(data) {
        return _get(_getPrototypeOf(DirectAnswerComponent.prototype), "setState", this).call(this, Object.assign({}, data, {
          eventOptions: this.eventOptions(data),
          viewDetailsText: this._viewDetailsText,
          directAnswer: data,
          customCard: this._getCustomCard(data)
        }));
      }
    }, {
      key: "eventOptions",
      value: function eventOptions(data) {
        if (!data || Object.keys(data).length === 0) {
          return data;
        }

        return JSON.stringify({
          verticalConfigId: data.relatedItem.verticalConfigId,
          searcher: 'UNIVERSAL',
          entityId: data.relatedItem.data.id,
          ctaLabel: this._viewDetailsText.toUpperCase().replace(' ', '_')
        });
      }
      /**
       * reportQuality will send the quality feedback to analytics
       * @param {boolean} isGood true if the answer is what you were looking for
       */

    }, {
      key: "reportQuality",
      value: function reportQuality(isGood) {
        var eventType = isGood === true ? EventTypes.THUMBS_UP : EventTypes.THUMBS_DOWN;
        var event = new AnalyticsEvent(eventType).addOptions({
          'directAnswer': true
        });
        this.analyticsReporter.report(event);
      }
    }, {
      key: "addChild",
      value: function addChild(data, type, opts) {
        if (type === this.getState('customCard')) {
          return _get(_getPrototypeOf(DirectAnswerComponent.prototype), "addChild", this).call(this, this.getState('directAnswer'), type, _objectSpread({}, this._userConfig, {}, opts));
        }

        return _get(_getPrototypeOf(DirectAnswerComponent.prototype), "addChild", this).call(this, data, type, opts);
      }
    }], [{
      key: "defaultTemplateName",

      /**
       * The template to render
       * @returns {string}
       * @override
       */
      value: function defaultTemplateName(config) {
        return 'results/directanswer';
      }
    }, {
      key: "type",
      get: function get() {
        return 'DirectAnswer';
      }
    }]);

    return DirectAnswerComponent;
  }(Component);

  /**
   * The AlternativeVertical is a model that is used to power the search
   * suggestions info box. It's initialized through the configuration provided
   * to the component.
   */

  var AlternativeVertical = function AlternativeVertical(config) {
    _classCallCheck(this, AlternativeVertical);

    /**
     * The name of the vertical that is exposed for the link
     * @type {string}
     */
    this.label = config.label;

    if (typeof this.label !== 'string') {
      throw new AnswersConfigError('label is a required configuration option for verticalPage.', 'AlternativeVertical');
    }
    /**
     * The complete URL, including the params
     * @type {string}
     */


    this.url = config.url;

    if (typeof this.url !== 'string') {
      throw new AnswersConfigError('url is a required configuration option for verticalPage.', 'AlternativeVertical');
    }
    /**
     * name of an icon from the default icon set
     * @type {string}
     */


    this.iconName = config.iconName;
    /**
     * URL of an icon
     * @type {string}
     */

    this.iconUrl = config.iconUrl;
    /**
     * Whether the vertical has an icon
     * @type {string}
     */

    this.hasIcon = this.iconName || this.iconUrl;
    /**
     * The number of results to display next to each alternative
     * vertical
     * @type {number}
     */

    this.resultsCount = config.resultsCount;
  };

  var AlternativeVerticalsComponent =
  /*#__PURE__*/
  function (_Component) {
    _inherits(AlternativeVerticalsComponent, _Component);

    function AlternativeVerticalsComponent() {
      var _this;

      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var systemOpts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      _classCallCheck(this, AlternativeVerticalsComponent);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(AlternativeVerticalsComponent).call(this, opts, systemOpts));
      _this.moduleId = StorageKeys.ALTERNATIVE_VERTICALS;
      /**
       * Alternative verticals that have results for the current query
       * This gets updated based on the server results
       * @type {AlternativeVerticals}
       * @private
       */

      _this._alternativeVerticals = opts.data && opts.data.alternativeVerticals || [];
      /**
       * Vertical pages config from global verticals config
       * @type {VerticalPagesConfig}
       * @private
       */

      _this._verticalsConfig = opts.verticalsConfig || [];
      /**
       * The name of the vertical that is exposed for the link
       * @type {string}
       */

      _this._currentVerticalLabel = _this.getCurrentVerticalLabel(opts.verticalsConfig) || '';
      /**
       * The alternative vertical search suggestions, parsed from alternative verticals and
       * the global verticals config.
       * This gets updated based on the server results
       * @type {AlternativeVertical[]}
       */

      _this.verticalSuggestions = _this._buildVerticalSuggestions(_this._alternativeVerticals, _this._verticalsConfig, _this.core.globalStorage.getState(StorageKeys.API_CONTEXT), _this.core.globalStorage.getState(StorageKeys.REFERRER_PAGE_URL));
      /**
       * The url to the universal page to link back to with current query
       * @type {string|null}
       */

      _this._universalUrl = opts.universalUrl || '';
      /**
       * Whether or not results are displaying, used to control language in the info box
       * @type {boolean}
       */

      _this._isShowingResults = opts.isShowingResults || false;

      _this.core.globalStorage.on('update', StorageKeys.API_CONTEXT, function () {
        _this.verticalSuggestions = _this._buildVerticalSuggestions(_this._alternativeVerticals, _this._verticalsConfig, _this.core.globalStorage.getState(StorageKeys.API_CONTEXT), _this.core.globalStorage.getState(StorageKeys.REFERRER_PAGE_URL));

        _this.setState(_this.core.globalStorage.getState(StorageKeys.ALERNATIVE_VERTICALS));
      });

      return _this;
    }

    _createClass(AlternativeVerticalsComponent, [{
      key: "setState",
      value: function setState(data) {
        return _get(_getPrototypeOf(AlternativeVerticalsComponent.prototype), "setState", this).call(this, Object.assign({
          verticalSuggestions: []
        }, data, {
          universalUrl: this._universalUrl,
          verticalSuggestions: this.verticalSuggestions,
          currentVerticalLabel: this._currentVerticalLabel,
          isShowingResults: this._isShowingResults,
          query: this.core.globalStorage.getState(StorageKeys.QUERY)
        }));
      }
    }, {
      key: "getCurrentVerticalLabel",
      value: function getCurrentVerticalLabel(verticalsConfig) {
        var thisVertical = verticalsConfig.find(function (config) {
          return config.isActive || false;
        });
        return thisVertical ? thisVertical.label : '';
      }
      /**
       * _buildVerticalSuggestions will construct an array of {AlternativeVertical}
       * from alternative verticals and verticalPages configuration
       * @param {object} alternativeVerticals alternativeVerticals server response
       * @param {object} verticalsConfig the configuration to use
       * @param {string} context the API context query parameter to add to the urls
       * @param {string} referrerPageUrl the referrerPageUrl query parameter to add to the urls
       */

    }, {
      key: "_buildVerticalSuggestions",
      value: function _buildVerticalSuggestions(alternativeVerticals, verticalsConfig, context, referrerPageUrl) {
        var _this2 = this;

        var verticals = [];
        var params = new SearchParams(window.location.search.substring(1));

        if (context) {
          params.set(StorageKeys.API_CONTEXT, context);
        }

        if (typeof referrerPageUrl === 'string') {
          params.set(StorageKeys.REFERRER_PAGE_URL, referrerPageUrl);
        }

        var filteredParams = filterParamsForExperienceLink(params, function (types) {
          return _this2.componentManager.getComponentNamesForComponentTypes(types);
        });
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          var _loop = function _loop() {
            var alternativeVertical = _step.value;
            var verticalKey = alternativeVertical.verticalConfigId;
            var matchingVerticalConfig = verticalsConfig.find(function (config) {
              return config.verticalKey === verticalKey;
            });

            if (!matchingVerticalConfig || alternativeVertical.resultsCount < 1) {
              return "continue";
            }

            verticals.push(new AlternativeVertical({
              label: matchingVerticalConfig.label,
              url: replaceUrlParams(matchingVerticalConfig.url, filteredParams),
              iconName: matchingVerticalConfig.icon,
              iconUrl: matchingVerticalConfig.iconUrl,
              resultsCount: alternativeVertical.resultsCount
            }));
          };

          for (var _iterator = alternativeVerticals[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var _ret = _loop();

            if (_ret === "continue") continue;
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator["return"] != null) {
              _iterator["return"]();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        return verticals;
      }
    }], [{
      key: "defaultTemplateName",

      /**
       * The template to render
       * @returns {string}
       * @override
       */
      value: function defaultTemplateName(config) {
        return 'results/alternativeverticals';
      }
    }, {
      key: "areDuplicateNamesAllowed",
      value: function areDuplicateNamesAllowed() {
        return true;
      }
    }, {
      key: "type",
      get: function get() {
        return 'AlternativeVerticals';
      }
    }]);

    return AlternativeVerticalsComponent;
  }(Component);

  /**
   * A MapProvider is an interface that represents that should be implemented
   * in order to integrate with a Third Party Map provider for
   * interactive maps. MapProviders are used by the MapComponent.
   *
   * Implementations should extend this interface.
   */

  var MapProvider =
  /*#__PURE__*/
  function () {
    function MapProvider() {
      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      _classCallCheck(this, MapProvider);

      /**
       * The API Key used for interacting with the map provider
       * @type {string}
       */
      this._apiKey = config.apiKey;
      /**
       * The zoom level of the map, defaults to 14
       * @type {number}
       */

      this._zoom = config.zoom || 14;
      /**
       * The default coordinates to display if there are no results returned
       * Only used if showEmptyMap is set to true
       * @type {Object}
       */

      this._defaultPosition = config.defaultPosition || {
        lat: 37.0902,
        lng: -95.7129
      };
      /**
       * Configuration for the behavior when there are no vertical results.
       * @type {Object}
       */

      this._noResults = config.noResults || {};
      /**
       * Determines if an empty map should be shown when there are no results
       * @type {boolean}
       */

      this._showEmptyMap = config.showEmptyMap || false;
      /**
       * A reference to the underlying map instance, created by the external lib.
       * @type {number}
       */

      this._map = null;
      /**
       * Temporary boolean tracking whether or not the external JS library is loaded (see TODO below)
       * @type {boolean}
       */

      this._isLoaded = false;
      /**
       * Callback to invoke when a pin is clicked. The clicked item(s) are passed to the callback
       * @type {function}
       */

      this._onPinClick = config.onPinClick || null;
      /**
       * Callback to invoke when a pin is hovered. The hovered item is passed to the callback
       * @type {function}
       */

      this._onPinMouseOver = config.onPinMouseOver || null;
      /**
       * Callback to invoke when a pin is no longer hovered after being hovered.
       * The hovered item is passed to the callback
       * @type {function}
       */

      this._onPinMouseOut = config.onPinMouseOut || null;
      /**
       * Callback to invoke once the Javascript is loaded
       * @type {function}
       */

      this._onLoaded = config.onLoaded || function () {};
      /**
       * The custom configuration override to use for the map markers
       * @type {Object|Function}
       */


      this._pinConfig = typeof config.pin === 'function' ? config.pin : Object.assign(MapProvider.DEFAULT_PIN_CONFIG, config.pin);
      /**
       * Determines whether or not to collapse pins at the same lat/lng
       * @type {boolean}
       */

      this._collapsePins = config.collapsePins || false;
    }
    /**
     * The default configuration to use for the map markers
     * @type {Object}
     * TODO(billy) Create a configuration model
     */


    _createClass(MapProvider, [{
      key: "onLoaded",
      value: function onLoaded(cb) {
        if (typeof cb !== 'function') {
          return;
        }

        this._onLoaded = cb;

        if (this.isLoaded()) {
          this._onLoaded();
        }
      }
    }, {
      key: "isLoaded",
      value: function isLoaded() {
        return this._isLoaded;
      }
    }, {
      key: "loadJS",
      value: function loadJS() {
        throw new Error('Unimplemented Method: loadJS');
      }
    }, {
      key: "init",
      value: function init(mapData) {
        // TODO(billy) This should be based off a promise that gets created from loadJS
        throw new Error('Unimplemented Method: init');
      }
      /**
       * Given a list of markers, combine markers with the same lat/lng into a single marker
       * @param {object[]} markers The markers to collapse
       */

    }, {
      key: "_collapseMarkers",
      value: function _collapseMarkers(markers) {
        var locationToItem = {};
        markers.forEach(function (m) {
          locationToItem["".concat(m.latitude).concat(m.longitude)] ? locationToItem["".concat(m.latitude).concat(m.longitude)].push(m) : locationToItem["".concat(m.latitude).concat(m.longitude)] = [m];
        });
        var collapsedMarkers = [];

        for (var _i = 0, _Object$entries = Object.entries(locationToItem); _i < _Object$entries.length; _i++) {
          var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),
              _markers = _Object$entries$_i[1];

          if (_markers.length > 1) {
            var collapsedMarker = {
              item: _markers.map(function (m) {
                return m.item;
              }),
              label: _markers.length,
              latitude: _markers[0].latitude,
              longitude: _markers[0].longitude
            };
            collapsedMarkers.push(collapsedMarker);
          } else {
            collapsedMarkers.push(_markers[0]);
          }
        }

        return collapsedMarkers;
      }
    }], [{
      key: "shouldHideMap",
      value: function shouldHideMap(mapData, resultsContext, showEmptyMap, visibleForNoResults) {
        if (resultsContext === ResultsContext.NO_RESULTS && visibleForNoResults !== undefined) {
          return !visibleForNoResults;
        }

        var hasEmptyMap = !mapData || mapData.mapMarkers.length <= 0;
        return hasEmptyMap && !showEmptyMap;
      }
    }, {
      key: "DEFAULT_PIN_CONFIG",
      get: function get() {
        return {
          icon: {
            anchor: null,
            // e.g. { x: 1, y: 1 }
            svg: null,
            url: null,
            scaledSize: null // e.g. { w: 20, h: 20 }

          },
          labelType: 'numeric'
        };
      }
    }]);

    return MapProvider;
  }();

  /* global google */

  /**
   * GoogleMapProvider is an implementation of a MapProvider
   * that handles the integration with the third party API to expose maps.
   * @extends MapProvider
   */

  var GoogleMapProvider =
  /*#__PURE__*/
  function (_MapProvider) {
    _inherits(GoogleMapProvider, _MapProvider);

    function GoogleMapProvider(opts) {
      var _this;

      _classCallCheck(this, GoogleMapProvider);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(GoogleMapProvider).call(this, opts)); // normalize because google's zoom is effectively 1 unit of difference away from mapbox zoom

      _this._zoomOffset = 1;
      _this._zoom += _this._zoomOffset;
      _this._clientId = opts.clientId;
      _this._signature = opts.signature;

      if (!_this.hasValidClientCredentials() && !_this._apiKey) {
        throw new Error('GoogleMapsProvider: Missing `apiKey` or {`clientId`, `signature`}');
      }

      return _this;
    }

    _createClass(GoogleMapProvider, [{
      key: "loadJS",
      value: function loadJS() {
        var self = this;

        var onLoad = function onLoad() {
          if (typeof self._onLoaded === 'function') {
            self._onLoaded();
          }
        };

        if (typeof google !== 'undefined') {
          self._isLoaded = true;
          onLoad();
          return;
        }

        var script = DOM.query('#yext-map-js');

        if (script) {
          var onLoadFunc = script.onload;

          script.onload = function () {
            onLoadFunc();
            onLoad();
          };

          return;
        }

        script = DOM.createEl('script', {
          id: 'yext-map-js',
          onload: function onload() {
            self._isLoaded = true;
            onLoad();
          },
          async: true,
          src: "https://maps.googleapis.com/maps/api/js?".concat(self.generateCredentials())
        });
        DOM.append('body', script);
      }
    }, {
      key: "generateCredentials",
      value: function generateCredentials() {
        if (this.hasValidClientCredentials()) {
          return "client=".concat(this._clientId);
        } else {
          return "key=".concat(this._apiKey);
        }
      }
    }, {
      key: "hasValidClientCredentials",
      value: function hasValidClientCredentials() {
        return this._clientId;
      }
    }, {
      key: "init",
      value: function init(el, mapData, resultsContext) {
        var _this2 = this;

        if (MapProvider.shouldHideMap(mapData, resultsContext, this._showEmptyMap, this._noResults.visible)) {
          this._map = null;
          return this;
        } // NOTE(billy) This timeout is a hack for dealing with async nature.
        // Only here for demo purposes, so we'll fix later.


        setTimeout(function () {
          var container = DOM.query(el);
          _this2.map = new google.maps.Map(container, {
            zoom: _this2._zoom,
            center: _this2.getCenterMarker(mapData)
          }); // Apply our search data to our GoogleMap

          if (mapData && mapData.mapMarkers.length) {
            (function () {
              var collapsedMarkers = _this2._collapsePins ? _this2._collapseMarkers(mapData.mapMarkers) : mapData.mapMarkers;
              var googleMapMarkerConfigs = GoogleMapMarkerConfig.from(collapsedMarkers, _this2._pinConfig, _this2.map);
              var bounds = new google.maps.LatLngBounds();

              var _loop = function _loop(i) {
                var marker = new google.maps.Marker(googleMapMarkerConfigs[i]);

                if (_this2._onPinClick) {
                  marker.addListener('click', function () {
                    return _this2._onPinClick(collapsedMarkers[i].item);
                  });
                }

                if (_this2._onPinMouseOver) {
                  marker.addListener('mouseover', function () {
                    return _this2._onPinMouseOver(collapsedMarkers[i].item);
                  });
                }

                if (_this2._onPinMouseOut) {
                  marker.addListener('mouseout', function () {
                    return _this2._onPinMouseOut(collapsedMarkers[i].item);
                  });
                }

                bounds.extend(marker.position);
              };

              for (var i = 0; i < googleMapMarkerConfigs.length; i++) {
                _loop(i);
              }

              if (googleMapMarkerConfigs.length >= 2) {
                _this2.map.fitBounds(bounds);
              }
            })();
          }
        }, 100);
      }
    }, {
      key: "getCenterMarker",
      value: function getCenterMarker(mapData) {
        return mapData && mapData.mapCenter && mapData.mapCenter.longitude && mapData.mapCenter.latitude ? {
          lng: mapData.mapCenter.longitude,
          lat: mapData.mapCenter.latitude
        } : {
          lng: this._defaultPosition.lng,
          lat: this._defaultPosition.lat
        };
      }
    }]);

    return GoogleMapProvider;
  }(MapProvider); // TODO(billy) Move to own class
  var GoogleMapMarkerConfig =
  /*#__PURE__*/
  function () {
    function GoogleMapMarkerConfig(opts) {
      _classCallCheck(this, GoogleMapMarkerConfig);

      /**
       * A reference to the google map, that the marker is appended to
       * @type {GoogleMap}
       */
      this.map = opts.map || undefined;
      /**
       * The coordinates of the marker (lat/lng)
       * @type {Object}
       */

      this.position = opts.position || {
        lat: undefined,
        lng: undefined
      };
      /**
       * The properties/settings of the icon used for the marker
       * e.g. {
       *        anchor: { x: 0, y: 0 }
       *        url: 'path/to/url.jpg'
       *        scaledSize: { w: 0, h: 0 }
       *       }
       *
       * @type {object}
       */

      this.icon = opts.icon || undefined;
      /**
       * The label of the marker to use
       * @type {string}
       */

      this.label = opts.label || undefined;
    }
    /**
     * Serializes an array of marker configs
     * @param {GoogleMapMarkerConfig[]} googleMapMarkerConfigs
     * @returns {string[]}
     */


    _createClass(GoogleMapMarkerConfig, null, [{
      key: "serialize",
      value: function serialize(googleMapMarkerConfigs) {
        var serializedMarkers = [];
        googleMapMarkerConfigs.forEach(function (marker) {
          serializedMarkers.push("markers=label:".concat(marker.label, "|").concat(marker.position.lat, ",").concat(marker.position.lng));
        });
        return serializedMarkers.join('&');
      }
      /**
       * Converts the storage data model of markers into GoogleAPIMarker
       * @param {object[]} markers The data of the marker
       * @param {(Object|function)} pinConfig The configuration to apply to the marker
       * @param {GoogleMap} map reference to the google map to apply the marker to
       * @returns {GoogleMapMarkerConfig[]}
       */

    }, {
      key: "from",
      value: function from(markers, pinConfig, map) {
        var googleMapMarkerConfigs = [];

        if (!Array.isArray(markers)) {
          markers = [markers];
        }

        markers.forEach(function (marker) {
          // Support configuration as a function
          var pinConfigObj = pinConfig;

          if (typeof pinConfig === 'function') {
            pinConfigObj = pinConfig(marker.item, MapProvider.DEFAULT_PIN_CONFIG, marker);
          } // Transform our Configuration Object into the expected
          // Google API format.


          var icon = {};

          if (pinConfigObj.anchor) {
            icon.anchor = google.maps.Point(pinConfigObj.anchor.x, pinConfigObj.anchor.y);
          }

          if (pinConfigObj.scaledSize) {
            icon.scaledSize = new google.maps.Size(pinConfigObj.scaledSize.w, pinConfigObj.scaledSize.h);
          }

          if (pinConfigObj.url) {
            icon.url = pinConfigObj.url;
          }

          if (pinConfigObj.svg) {
            icon.url = "data:image/svg+xml;charset=utf-8, ".concat(encodeURIComponent(pinConfigObj.svg));
          }

          var label;

          if (pinConfigObj.label) {
            label = pinConfigObj.label;
          } else {
            label = marker.label.toString();
          } // NOTE(billy) Google maps doesn't handle empty icon objects nicely
          // Make google maps happy if no settings for icon are provided;


          if (Object.keys(icon).length === 0) {
            icon = undefined;
          }

          googleMapMarkerConfigs.push(new GoogleMapMarkerConfig({
            map: map,
            position: {
              lat: marker.latitude,
              lng: marker.longitude
            },
            icon: icon,
            label: label
          }));
        });
        return googleMapMarkerConfigs;
      }
    }]);

    return GoogleMapMarkerConfig;
  }();

  /* global mapboxgl */

  /**
   * MapBoxMapProvider is an implementation of a MapProvider
   * that handles the integration with the third party API to expose maps.
   * @extends MapProvider
   */

  var MapBoxMapProvider =
  /*#__PURE__*/
  function (_MapProvider) {
    _inherits(MapBoxMapProvider, _MapProvider);

    function MapBoxMapProvider() {
      _classCallCheck(this, MapBoxMapProvider);

      return _possibleConstructorReturn(this, _getPrototypeOf(MapBoxMapProvider).apply(this, arguments));
    }

    _createClass(MapBoxMapProvider, [{
      key: "loadJS",

      /**
       * Load the external JS Library
       * @param {function} onLoad An optional callback to invoke once the JS is loaded.
       */
      value: function loadJS(onLoad) {
        var _this = this;

        var script = DOM.createEl('script', {
          id: 'yext-map-js',
          onload: function onload() {
            _this._isLoaded = true;
            mapboxgl.accessToken = _this._apiKey;

            if (typeof onLoad === 'function') {
              onLoad();
            }

            if (typeof _this._onLoaded === 'function') {
              _this._onLoaded();
            }
          },
          async: true,
          src: 'https://api.mapbox.com/mapbox-gl-js/v0.44.1/mapbox-gl.js'
        });
        var css = DOM.createEl('link', {
          id: 'yext-map-css',
          rel: 'stylesheet',
          href: 'https://api.mapbox.com/mapbox-gl-js/v0.44.1/mapbox-gl.css'
        });
        DOM.append('body', css);
        DOM.append('body', script);
      }
    }, {
      key: "init",
      value: function init(el, mapData, resultsContext) {
        var _this2 = this;

        if (MapProvider.shouldHideMap(mapData, resultsContext, this._showEmptyMap, this._noResults.visible)) {
          this._map = null;
          return this;
        }

        var container = DOM.query(el);
        this._map = new mapboxgl.Map({
          container: container,
          zoom: this._zoom,
          style: 'mapbox://styles/mapbox/streets-v9',
          center: this.getCenterMarker(mapData)
        });

        if (mapData && mapData.mapMarkers.length) {
          (function () {
            var collapsedMarkers = _this2._collapsePins ? _this2._collapseMarkers(mapData.mapMarkers) : mapData.mapMarkers;
            var mapboxMapMarkerConfigs = MapBoxMarkerConfig.from(collapsedMarkers, _this2._pinConfig, _this2._map);
            var bounds = new mapboxgl.LngLatBounds();

            var _loop = function _loop(i) {
              var wrapper = mapboxMapMarkerConfigs[i].wrapper;
              var coords = new mapboxgl.LngLat(mapboxMapMarkerConfigs[i].position.longitude, mapboxMapMarkerConfigs[i].position.latitude);
              var marker = new mapboxgl.Marker(wrapper).setLngLat(coords);
              bounds.extend(marker.getLngLat());
              marker.addTo(_this2._map);

              if (_this2._onPinClick) {
                marker.getElement().addEventListener('click', function () {
                  return _this2._onPinClick(collapsedMarkers[i].item);
                });
              }

              if (_this2._onPinMouseOver) {
                marker.getElement().addEventListener('mouseover', function () {
                  return _this2._onPinMouseOver(collapsedMarkers[i].item);
                });
              }

              if (_this2._onPinMouseOut) {
                marker.getElement().addEventListener('mouseout', function () {
                  return _this2._onPinMouseOut(collapsedMarkers[i].item);
                });
              }
            };

            for (var i = 0; i < mapboxMapMarkerConfigs.length; i++) {
              _loop(i);
            }

            if (mapboxMapMarkerConfigs.length >= 2) {
              _this2._map.fitBounds(bounds, {
                padding: 50
              });
            }
          })();
        }
      }
    }, {
      key: "getCenterMarker",
      value: function getCenterMarker(mapData) {
        return mapData && mapData.mapCenter && mapData.mapCenter.longitude && mapData.mapCenter.latitude ? [mapData.mapCenter.longitude, mapData.mapCenter.latitude] : {
          lng: this._defaultPosition.lng,
          lat: this._defaultPosition.lat
        };
      }
    }]);

    return MapBoxMapProvider;
  }(MapProvider);
  var MapBoxMarkerConfig =
  /*#__PURE__*/
  function () {
    function MapBoxMarkerConfig(opts) {
      _classCallCheck(this, MapBoxMarkerConfig);

      /**
       * A reference to the mapbox map, that the marker is appended to
       * @type {MapBox}
       */
      this.map = opts.map || undefined;
      /**
       * The coordinates of the marker (lat/lng)
       * @type {Object}
       */

      this.position = opts.position || {
        latitude: undefined,
        longitude: undefined
      };
      /**
       * The html element to be used as the map marker
       * @type {object}
       */

      this.wrapper = opts.wrapper || undefined;
      /**
       * The label of the marker to use
       * @type {string}
       */

      this.label = opts.label || undefined;
      /**
       * The url of the pin for the static map
       * @type {string}
       */

      this.staticMapPin = opts.staticMapPin || undefined;
    }
    /**
     * Serializes an array of marker configs
     * @param {MapBoxMarkerConfig[]} mapboxMapMarkerConfigs
     * @returns {string[]}
     */


    _createClass(MapBoxMarkerConfig, null, [{
      key: "serialize",
      value: function serialize(mapboxMapMarkerConfigs) {
        var serializedMarkers = [];
        mapboxMapMarkerConfigs.forEach(function (marker) {
          if (marker.staticMapPin) {
            serializedMarkers.push("url-".concat(marker.staticMapPin, "(").concat(marker.position.longitude, ",").concat(marker.position.latitude, ")"));
          } else {
            serializedMarkers.push("pin-s-".concat(marker.label, "(").concat(marker.position.longitude, ",").concat(marker.position.latitude, ")"));
          }
        });
        return serializedMarkers.join(',');
      }
      /**
       * Converts the storage data model of markers into MapBoxMarkerConfig
       * @param {MapBox} A reference to the mapbox map to apply the marker to
       * @param {object[]} markers The data of the marker
       * @param {Object} pinConfig The configuration to apply to the marker
       * @returns {MapBoxMarkerConfig[]}
       */

    }, {
      key: "from",
      value: function from(markers, pinConfig, map) {
        var mapboxMapMarkerConfigs = [];

        if (!Array.isArray(markers)) {
          markers = [markers];
        }

        markers.forEach(function (marker) {
          // Support configuration as a function
          var pinConfigObj = pinConfig;

          if (typeof pinConfig === 'function') {
            pinConfigObj = pinConfig(marker.item, MapProvider.DEFAULT_PIN_CONFIG, marker);
          }

          var wrapper = pinConfigObj.wrapper ? pinConfigObj.wrapper : null;
          var staticMapPin = pinConfigObj.staticMapPin ? pinConfigObj.staticMapPin : null;
          mapboxMapMarkerConfigs.push(new MapBoxMarkerConfig({
            map: map,
            position: {
              latitude: marker.latitude,
              longitude: marker.longitude
            },
            wrapper: wrapper,
            label: marker.label,
            staticMapPin: staticMapPin
          }));
        });
        return mapboxMapMarkerConfigs;
      }
    }]);

    return MapBoxMarkerConfig;
  }();

  var ProviderTypes = {
    'google': GoogleMapProvider,
    'mapbox': MapBoxMapProvider
  };

  var MapComponent =
  /*#__PURE__*/
  function (_Component) {
    _inherits(MapComponent, _Component);

    function MapComponent() {
      var _this;

      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var systemOpts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      _classCallCheck(this, MapComponent);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(MapComponent).call(this, opts, systemOpts));
      /**
       * Bind this component to listen to the storage based on this key
       */

      _this.moduleId = StorageKeys.VERTICAL_RESULTS;
      /**
       * Configuration for the behavior when there are no vertical results.
       */

      _this._noResults = _objectSpread({
        displayAllResults: false,
        visible: undefined,
        template: ''
      }, opts.noResults || _this.core.globalStorage.getState(StorageKeys.NO_RESULTS_CONFIG));
      /**
       * An aliased used to determine the type of map provider to use
       * @type {string}
       */

      _this._mapProvider = opts.mapProvider;

      if (!_this._mapProvider || !(_this._mapProvider.toLowerCase() in ProviderTypes)) {
        throw new Error('MapComponent: Invalid Map Provider; must be `google` or `mapBox`');
      }
      /**
       * A reference to an instance of the {MapProvider} that's constructed
       * @type {MapProvider}
       */


      _this._map = null;
      return _this;
    }

    _createClass(MapComponent, [{
      key: "getProviderInstance",
      // TODO(billy) Make ProviderTypes a factory class
      value: function getProviderInstance(type) {
        var _config = _objectSpread({}, this._config, {
          noResults: this._noResults
        });

        return new ProviderTypes[type.toLowerCase()](_config);
      }
    }, {
      key: "onCreate",
      value: function onCreate() {
        this._map = this.getProviderInstance(this._mapProvider);

        this._map.loadJS();
      }
    }, {
      key: "onMount",
      value: function onMount() {
        var _this2 = this;

        this._map.onLoaded(function () {
          _this2._map.init(_this2._container, _this2.getState('map'), _this2.getState('resultsContext'));
        });
      }
    }, {
      key: "setState",
      value: function setState(data, val) {
        if (Object.keys(data).length === 0) {
          return this;
        }

        if (data.resultsContext === ResultsContext.NO_RESULTS && !this._noResults.displayAllResults) {
          data = {
            resultsContext: data.resultsContext
          };
        }

        return _get(_getPrototypeOf(MapComponent.prototype), "setState", this).call(this, data, val);
      }
    }], [{
      key: "defaultTemplateName",

      /**
       * The template to render
       * @returns {string}
       * @override
       */
      value: function defaultTemplateName(config) {
        return 'results/map';
      }
    }, {
      key: "type",
      get: function get() {
        return 'Map';
      }
    }]);

    return MapComponent;
  }(Component);

  var cardTemplates = {
    'Standard': 'cards/standard',
    'Accordion': 'cards/accordion',
    'Legacy': 'cards/legacy'
  };
  var cardTypes = {
    'Standard': 'StandardCard',
    'Accordion': 'AccordionCard',
    'Legacy': 'LegacyCard'
  };

  var CardConfig = function CardConfig() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, CardConfig);

    Object.assign(this, config);
    /**
     * The card type to use
     * @type {string}
     */

    this.cardType = config.cardType || 'Standard';
    /**
     * Data mappings is a function specified in the config
     * that returns config based on the data passed into card
     * @type {Function}
     */

    this.dataMappings = config.dataMappings || function () {};
    /**
     * Either a function that spits out an array of CTA config objects or an array of CTA config objects
     * or api fieldnames
     * @type {Function|Array<Object|string>}
     */


    this.callsToAction = config.callsToAction || [];
    /**
     * The index of the card.
     * @type {number}
     */

    this._index = config._index || 0;
    /**
     * Whether this card is part of a universal search
     */

    this.isUniversal = config.isUniversal || false;
  };

  var CardComponent =
  /*#__PURE__*/
  function (_Component) {
    _inherits(CardComponent, _Component);

    function CardComponent() {
      var _this;

      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var systemConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      _classCallCheck(this, CardComponent);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(CardComponent).call(this, new CardConfig(config), systemConfig));
      /**
       * config.data comes from the data-prop attribute passed in
       * from the parent component.
       * @type {Object}
       */

      var data = config.data || {};
      /**
       * The result data for this card.
       * @type {Result}
       */

      _this.result = data.result || {};
      /**
       * Vertical key for the search.
       * @type {string}
       */

      _this.verticalKey = data.verticalKey;
      return _this;
    }

    _createClass(CardComponent, [{
      key: "onMount",
      value: function onMount() {
        var _this2 = this;

        var rtfElement = DOM.query(this._container, '.js-yxt-rtfValue');

        if (rtfElement) {
          var fieldName = rtfElement.dataset.fieldName;
          DOM.on(rtfElement, 'click', function (e) {
            return _this2._handleRtfClickAnalytics(e, fieldName);
          });
        }
      }
      /**
       * A click handler for links in a Rich Text attriubte. When such a link is
       * clicked, an {@link AnalyticsEvent} needs to be fired.
       *
       * @param {MouseEvent} event The click event.
       * @param {string} fieldName The name of the Rich Text field used in the
       *                           attriubte.
       */

    }, {
      key: "_handleRtfClickAnalytics",
      value: function _handleRtfClickAnalytics(event, fieldName) {
        var ctaType = event.target.dataset.ctaType;

        if (!ctaType) {
          return;
        }

        var analyticsOptions = {
          directAnswer: false,
          verticalKey: this._config.data.verticalKey,
          searcher: this._config.isUniversal ? 'UNIVERSAL' : 'VERTICAL',
          entityId: this._config.data.result.id,
          url: event.target.href
        };

        if (!fieldName) {
          console.warn('Field name not provided for RTF click analytics');
        } else {
          analyticsOptions.fieldName = fieldName;
        }

        var analyticsEvent = new AnalyticsEvent(ctaType);
        analyticsEvent.addOptions(analyticsOptions);
        this.analyticsReporter.report(analyticsEvent);
      }
    }, {
      key: "setState",
      value: function setState(data) {
        var cardType = this._config.cardType; // Use the cardType as component name if it is not a built-in type

        var cardComponentName = cardTypes[cardType] || cardType;
        return _get(_getPrototypeOf(CardComponent.prototype), "setState", this).call(this, _objectSpread({}, data, {
          result: this.result,
          cardType: cardComponentName
        }));
      }
    }, {
      key: "addChild",
      value: function addChild(data, type, opts) {
        var updatedData = {
          verticalKey: this.verticalKey,
          result: data
        };

        var newOpts = _objectSpread({
          showOrdinal: this._config.showOrdinal,
          dataMappings: this._config.dataMappings,
          callsToAction: this._config.callsToAction,
          verticalKey: this._config.verticalKey,
          _index: this._config._index,
          isUniversal: this._config.isUniversal,
          modifier: this._config.modifier
        }, opts);

        return _get(_getPrototypeOf(CardComponent.prototype), "addChild", this).call(this, updatedData, type, newOpts);
      }
      /**
       * Used by children card components like StandardCardComponent to
       * apply given template mappings as config.
       * @param {Result} result
       * @param {Object|Function} dataMappings
       */

    }], [{
      key: "applyDataMappings",
      value: function applyDataMappings(result, dataMappings) {
        var config = {};

        if (typeof dataMappings === 'function') {
          dataMappings = dataMappings(result);
        }

        if (_typeof(dataMappings) === 'object') {
          Object.entries(dataMappings).forEach(function (_ref) {
            var _ref2 = _slicedToArray(_ref, 2),
                attribute = _ref2[0],
                value = _ref2[1];

            if (typeof value === 'function') {
              config[attribute] = value(result);
            } else {
              config[attribute] = value;
            }
          });
        }

        return config;
      }
    }, {
      key: "defaultTemplateName",

      /**
       * The template to render
       * @returns {string}
       * @override
       */
      value: function defaultTemplateName(config) {
        return 'cards/card';
      }
    }, {
      key: "areDuplicateNamesAllowed",
      value: function areDuplicateNamesAllowed() {
        return true;
      }
    }, {
      key: "type",
      get: function get() {
        return 'Card';
      }
    }]);

    return CardComponent;
  }(Component);

  /**
   * Converts an array of {@link AppliedQueryFilter}s into equivalent {@link SimpleFilterNode}s.
   * @param {Array<AppliedQueryFilter>} nlpFilters
   * @returns {Array<SimpleFilterNode>}
   */

  function convertNlpFiltersToFilterNodes(nlpFilters) {
    return nlpFilters.map(function (nlpFilter) {
      return FilterNodeFactory.from({
        filter: Filter.from(nlpFilter.filter),
        metadata: new FilterMetadata({
          fieldName: nlpFilter.key,
          displayValue: nlpFilter.value
        })
      });
    });
  }
  /**
   * Flattens an array of {@link FilterNode}s into an array
   * of their constituent leaf {@link SimpleFilterNode}s.
   * @param {Array<FilterNode>} filterNodes
   * @returns {Array<SimpleFilterNode>}
   */

  function flattenFilterNodes(filterNodes) {
    return filterNodes.flatMap(function (fn) {
      return fn.getSimpleDescendants();
    });
  }
  /**
   * Returns the given array of {@link FilterNode}s,
   * removing FilterNodes that are empty or have a field id listed as a hidden.
   * @param {Array<FilterNode>} filterNodes
   * @param {Array<string>} hiddenFields
   * @returns {Array<FilterNode>}
   */

  function pruneFilterNodes(filterNodes, hiddenFields) {
    return filterNodes.filter(function (fn) {
      var _fn$getMetadata = fn.getMetadata(),
          fieldName = _fn$getMetadata.fieldName,
          displayValue = _fn$getMetadata.displayValue;

      if (!fieldName || !displayValue) {
        return false;
      }

      var fieldId = fn.getFilter().getFilterKey();
      return !hiddenFields.includes(fieldId);
    });
  }

  var DEFAULT_CONFIG$5 = {
    showResultCount: true,
    showAppliedFilters: true,
    showFieldNames: false,
    resultsCountSeparator: '|',
    verticalURL: undefined,
    showChangeFilters: false,
    removable: false,
    delimiter: '|',
    isUniversal: false,
    labelText: 'Filters applied to this search:',
    removableLabelText: 'Remove this filter',
    resultsCountTemplate: '',
    hiddenFields: []
  };

  var ResultsHeaderComponent =
  /*#__PURE__*/
  function (_Component) {
    _inherits(ResultsHeaderComponent, _Component);

    function ResultsHeaderComponent() {
      var _this;

      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var systemConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      _classCallCheck(this, ResultsHeaderComponent);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(ResultsHeaderComponent).call(this, _objectSpread({}, DEFAULT_CONFIG$5, {}, config), systemConfig));
      var data = config.data || {};
      /**
       * Total number of results.
       * @type {number}
       */

      _this.resultsCount = data.resultsCount || 0;
      /**
       * Number of results displayed on the page.
       * @type {number}
       */

      _this.resultsLength = data.resultsLength || 0;
      /**
       * The compiled custom results count template, if the user specifies one.
       * @type {Function}
       */

      _this._compiledResultsCountTemplate = _this._renderer.compile(_this._config.resultsCountTemplate);
      /**
       * Array of nlp filters in the search response.
       * @type {Array<AppliedQueryFilter>}
       */

      _this.nlpFilterNodes = convertNlpFiltersToFilterNodes(data.nlpFilters || []);
      /**
       * TODO (SPR-2455): Ideally, we would be able to set moduleId to DYNAMIC_FILTERS, the actual data
       * we are listening to changes to, instead of this bespoke RESULTS_HEADER storage key.
       * The issue is that when two components share a moduleId, if that moduleId listener is ever
       * unregistered with the off() method, all listeners to that moduleId are unregistered.
       * With child components, this is something that happens whenever the parent component rerenders.
       */

      _this.moduleId = StorageKeys.RESULTS_HEADER;
      return _this;
    }

    _createClass(ResultsHeaderComponent, [{
      key: "onMount",
      value: function onMount() {
        var _this2 = this;

        var removableFilterTags = DOM.queryAll(this._container, '.js-yxt-ResultsHeader-removableFilterTag');
        removableFilterTags.forEach(function (tag) {
          DOM.on(tag, 'click', function () {
            return _this2._removeFilterTag(tag);
          });
        });
      }
      /**
       * Call remove callback for the {@link FilterNode} corresponding to a specific
       * removable filter tag.
       * @param {HTMLElement} tag
       */

    }, {
      key: "_removeFilterTag",
      value: function _removeFilterTag(tag) {
        var filterId = tag.dataset.filterId;
        var filterNode = this.appliedFilterNodes[filterId];
        filterNode.remove();
        this.core.verticalSearch(this._config.verticalKey, {
          setQueryParams: true,
          resetPagination: true,
          useFacets: true
        });
      }
      /**
       * Returns the currently applied nlp filter nodes, with nlp filter nodes that
       * are duplicates of other filter nodes removed or filter on hiddenFields removed.
       * @returns {Array<FilterNode>}
       */

    }, {
      key: "_getPrunedNlpFilterNodes",
      value: function _getPrunedNlpFilterNodes() {
        var _this3 = this;

        var duplicatesRemoved = this.nlpFilterNodes.filter(function (nlpNode) {
          var isDuplicate = _this3.appliedFilterNodes.find(function (appliedNode) {
            return appliedNode.hasSameFilterAs(nlpNode);
          });

          return !isDuplicate;
        });
        return pruneFilterNodes(duplicatesRemoved, this._config.hiddenFields);
      }
      /**
       * Combine all of the applied filters into a format the handlebars
       * template can work with.
       * Keys are the fieldName of the filter. Values are an array of objects with a
       * displayValue and dataFilterId.
       * TODO (SPR-2350): give every node a unique id, and use that instead of index for
       * dataFilterId.
       * @returns {Array<Object>}
       */

    }, {
      key: "_groupAppliedFilters",
      value: function _groupAppliedFilters() {
        var _this4 = this;

        var getFieldName = function getFieldName(filterNode) {
          return filterNode.getMetadata().fieldName;
        };

        var parseNlpFilterDisplay = function parseNlpFilterDisplay(filterNode) {
          return {
            displayValue: filterNode.getMetadata().displayValue
          };
        };

        var parseRemovableFilterDisplay = function parseRemovableFilterDisplay(filterNode, index) {
          return {
            displayValue: filterNode.getMetadata().displayValue,
            dataFilterId: index,
            removable: _this4._config.removable
          };
        };

        var removableNodes = groupArray(this.appliedFilterNodes, getFieldName, parseRemovableFilterDisplay);

        var prunedNlpFilterNodes = this._getPrunedNlpFilterNodes();

        return groupArray(prunedNlpFilterNodes, getFieldName, parseNlpFilterDisplay, removableNodes);
      }
      /**
       * Returns an array of object the handlebars can understand and render
       * the applied filters bar from. Our handlebars can only loop through arrays,
       * not objects, so we need to reformat the grouped applied filters.
       * @returns {Array<Object>}
       */

    }, {
      key: "_createAppliedFiltersArray",
      value: function _createAppliedFiltersArray() {
        var groupedFilters = this._groupAppliedFilters();

        return Object.keys(groupedFilters).map(function (label) {
          return {
            label: label,
            filterDataArray: groupedFilters[label]
          };
        });
      }
      /**
       * Pulls applied filter nodes from {@link FilterRegistry}, then retrives an array of
       * the leaf nodes, and then removes hidden or empty {@link FilterNode}s. Then appends
       * the currently applied nlp filters.
       */

    }, {
      key: "_calculateAppliedFilterNodes",
      value: function _calculateAppliedFilterNodes() {
        var filterNodes = this.core.filterRegistry.getAllFilterNodes();
        var simpleFilterNodes = flattenFilterNodes(filterNodes);
        return pruneFilterNodes(simpleFilterNodes, this._config.hiddenFields);
      }
    }, {
      key: "setState",
      value: function setState(data) {
        var offset = this.core.globalStorage.getState(StorageKeys.SEARCH_OFFSET);
        this.appliedFilterNodes = this._calculateAppliedFilterNodes();

        var appliedFiltersArray = this._createAppliedFiltersArray();

        var shouldShowFilters = appliedFiltersArray.length > 0 && this._config.showAppliedFilters;
        var resultsCountData = {
          resultsCount: this.resultsCount,
          resultsCountStart: offset + 1,
          resultsCountEnd: offset + this.resultsLength
        };
        return _get(_getPrototypeOf(ResultsHeaderComponent.prototype), "setState", this).call(this, _objectSpread({}, data, {}, resultsCountData, {
          showResultSeparator: this._config.resultsCountSeparator && this._config.showResultCount && shouldShowFilters,
          shouldShowFilters: shouldShowFilters,
          appliedFiltersArray: appliedFiltersArray,
          customResultsCount: this._compiledResultsCountTemplate(resultsCountData)
        }));
      }
    }], [{
      key: "areDuplicateNamesAllowed",
      value: function areDuplicateNamesAllowed() {
        return true;
      }
    }, {
      key: "defaultTemplateName",

      /**
       * The template to render
       * @returns {string}
       * @override
       */
      value: function defaultTemplateName(config) {
        return 'results/resultsheader';
      }
    }, {
      key: "type",
      get: function get() {
        return 'ResultsHeader';
      }
    }]);

    return ResultsHeaderComponent;
  }(Component);

  /**
   * Used to parse config options, defaulting to different synonyms and
   * finally a default value. Option names with periods will be parsed
   * as multiple child object accessors, i.e. trying to access 'first.second.option'
   * will first look for config['first']['second']['option'].
   *
   * This is mostly needed for boolean config values, since boolean operators,
   * which we commonly use for defaulting config options, do not work properly
   * in those cases.
   * @param {Object} config
   * @param {Array<string>}
   * @param {any} defaultValue
   */
  function defaultConfigOption(config, synonyms, defaultValue) {
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = synonyms[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var name = _step.value;
        var accessors = name.split('.');
        var parentConfig = config;
        var skip = false;
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
          for (var _iterator2 = accessors.slice(0, -1)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var childConfigAccessor = _step2.value;

            if (!(childConfigAccessor in parentConfig)) {
              skip = true;
              break;
            }

            parentConfig = parentConfig[childConfigAccessor];
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
              _iterator2["return"]();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }

        var configName = accessors[accessors.length - 1];

        if (!skip && configName in parentConfig) {
          return parentConfig[configName];
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator["return"] != null) {
          _iterator["return"]();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    return defaultValue;
  }

  var VerticalResultsConfig = function VerticalResultsConfig() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, VerticalResultsConfig);

    Object.assign(this, config);
    /**
     * isUniversal is set to true if this component is added by the UniversalResultsComponent
     * @type {boolean}
     * @private
     */

    this.isUniversal = config.isUniversal || false;
    var parentOpts = config._parentOpts || {};
    /**
     * Custom render function
     * @type {function}
     */

    this.renderItem = config.renderItem || parentOpts.renderItem;
    /**
     * Custom item template
     * @type {string}
     */

    this.itemTemplate = config.itemTemplate || parentOpts.itemTemplate;
    /**
     * The maximum number of columns to display, supports 1, 2, 3, or 4.
     * @type {number}
     */

    this.maxNumberOfColumns = config.maxNumberOfColumns || 1;
    /**
     * The config to pass to the card
     * @type {Object}
     */

    this.card = config.card || {};
    /**
     * Vertical URL for view more link
     * @type {string}
     */

    this.verticalURL = config.verticalURL;
    /**
     * Whether to display the number of results.
     * @type {boolean}
     */

    this.showResultCount = config.showResultCount === undefined ? true : config.showResultCount;
    /**
     * A custom results count template.
     * @type {string}
     */

    this.resultsCountTemplate = config.resultsCountTemplate || '';
    /**
     * Config for the applied filters in the results header.
     * @type {Object}
     */

    this.appliedFilters = {
      /**
       * If present, show the filters that were ultimately applied to this query
       * @type {boolean}
       */
      show: defaultConfigOption(config, ['appliedFilters.show', 'showAppliedFilters'], true),

      /**
       * If showResultCount and showAppliedFilters are true,
       * display this separator between the result count and the applied query filters
       * @type {string}
       */
      resultsCountSeparator: defaultConfigOption(config, ['appliedFilters.resultsCountSeparator', 'resultsCountSeparator'], '|'),

      /**
       * If showAppliedFilters is true, show the field name in the string followed by a colon.
       * @type {boolean}
       */
      showFieldNames: defaultConfigOption(config, ['appliedFilters.showFieldNames', 'showFieldNames'], false),

      /**
       * Any fieldIds in hiddenFields will be hidden from the list of appied filters.
       * @type {Array<string>}
       */
      hiddenFields: defaultConfigOption(config, ['appliedFilters.hiddenFields', 'hiddenFields'], ['builtin.entityType']),

      /**
       * The character that should separate each field (and its associated filters) within the applied filter bar
       * @type {string}
       */
      delimiter: defaultConfigOption(config, ['appliedFilters.delimiter'], '|'),

      /**
       * If the filters are shown, whether or not they should be removable from within the applied filter bar.
       * @type {boolean}
       */
      removable: defaultConfigOption(config, ['appliedFilters.removable'], false),

      /**
       * Whether to show the change filters link on universal results.
       * @type {boolean}
       **/
      showChangeFilters: defaultConfigOption(config, ['appliedFilters.showChangeFilters', 'showChangeFilters'], false),

      /**
       * The text for the change filters link.
       * @type {string}
       */
      changeFiltersText: defaultConfigOption(config, ['appliedFilters.changeFiltersText', 'changeFiltersText']),

      /**
       * The aria-label given to the applied filters bar. Defaults to 'Filters applied to this search:'.
       * @type {string}
       **/
      labelText: defaultConfigOption(config, ['appliedFilters.labelText'], 'Filters applied to this search:'),

      /**
       * The aria-label given to the removable filter buttons.
       * @type {string}
       */
      removableLabelText: defaultConfigOption(config, ['appliedFilters.removableLabelText'], 'Remove this filter')
    };
    /**
     * Text for the view more button.
     * @type {string}
     */

    this.viewMoreLabel = defaultConfigOption(config, ['viewMoreLabel', 'viewAllText'], 'View More');
  };

  var VerticalResultsComponent =
  /*#__PURE__*/
  function (_Component) {
    _inherits(VerticalResultsComponent, _Component);

    function VerticalResultsComponent() {
      var _this;

      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var systemConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      _classCallCheck(this, VerticalResultsComponent);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(VerticalResultsComponent).call(this, new VerticalResultsConfig(APPLY_SYNONYMS(config)), systemConfig));

      var noResultsConfig = _this._config.noResults || _this.core.globalStorage.getState(StorageKeys.NO_RESULTS_CONFIG);
      /**
       * A parsed version of the noResults config provided to the component.
       * Applies sensible defaults if certain values are not set.
       * @type {Object}
       * @private
       */


      _this._noResultsConfig = Object.assign({
        displayAllResults: false,
        template: ''
      }, noResultsConfig);
      /**
       * Boolean indicating if legacy no results display should be used.
       * @type {boolean}
       * @private
       */

      _this._useLegacyNoResults = _this._config.isUniversal || !noResultsConfig;
      /**
       * _displayAllResults controls if all results for the vertical will display
       * when there are no results for a query.
       * @type {boolean}
       * @private
       */

      _this._displayAllResults = _this._noResultsConfig.displayAllResults;
      /**
       * Specifies a custom no results template.
       *
       * @type {string}
       * @private
       */

      _this._noResultsTemplate = _this._noResultsConfig.template;

      _this.core.globalStorage.on('update', StorageKeys.VERTICAL_RESULTS, function (results) {
        if (results.searchState === SearchStates.SEARCH_COMPLETE) {
          _this.setState(results);
        }
      });
      /**
       * Vertical config from config, if not present, fall back to global verticalPagesConfig
       * @type {Array.<object>}
       * @private
       */


      _this._verticalsConfig = config.verticalPages || _this.core.globalStorage.getState(StorageKeys.VERTICAL_PAGES_CONFIG).get() || [];
      /**
       * @type {Array<Result>}
       */

      _this.results = [];
      _this.numColumns = _this._config.maxNumberOfColumns;
      /**
       * Config options used in the {@link ResultsHeaderComponent}
       */

      _this.resultsHeaderOpts = {
        showFieldNames: _this._config.appliedFilters.showFieldNames,
        resultsCountSeparator: _this._config.appliedFilters.resultsCountSeparator,
        showAppliedFilters: _this._config.appliedFilters.show,
        showChangeFilters: _this._config.appliedFilters.showChangeFilters,
        changeFiltersText: _this._config.appliedFilters.changeFiltersText,
        showResultCount: _this._config.showResultCount,
        removable: _this._config.appliedFilters.removable,
        delimiter: _this._config.appliedFilters.delimiter,
        labelText: _this._config.appliedFilters.labelText,
        removableLabelText: _this._config.appliedFilters.removableLabelText,
        hiddenFields: _this._config.appliedFilters.hiddenFields,
        resultsCountTemplate: _this._config.resultsCountTemplate
      };
      return _this;
    }

    _createClass(VerticalResultsComponent, [{
      key: "mount",
      value: function mount() {
        if (Object.keys(this.getState()).length > 0) {
          _get(_getPrototypeOf(VerticalResultsComponent.prototype), "mount", this).call(this);
        }

        return this;
      }
    }, {
      key: "getUniversalUrl",
      value: function getUniversalUrl() {
        var universalConfig = this._verticalsConfig.find(function (config) {
          return !config.verticalKey;
        }) || {};

        if (!universalConfig.url) {
          return undefined;
        }

        return this._getExperienceURL(universalConfig.url, new SearchParams(window.location.search.substring(1)));
      }
    }, {
      key: "getVerticalURL",
      value: function getVerticalURL() {
        var _this2 = this;

        var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var verticalConfig = this._verticalsConfig.find(function (config) {
          return config.verticalKey === _this2.verticalKey;
        }) || {};
        var verticalURL = this._config.verticalURL || verticalConfig.url || data.verticalURL || this.verticalKey + '.html';
        var dataTabOrder = this.core.globalStorage.getState(StorageKeys.NAVIGATION) ? this.core.globalStorage.getState(StorageKeys.NAVIGATION).tabOrder : [];
        var tabOrder = getTabOrder(this._verticalsConfig, dataTabOrder);
        var params = new SearchParams(window.location.search.substring(1));
        params.set('tabOrder', tabOrder);
        return this._getExperienceURL(verticalURL, params);
      }
      /**
       * Adds parameters that are dynamically set. Removes parameters for facets,
       * filters, and pagination, which should not persist across the experience.
       * @param {string} baseUrl The url append the appropriate params to. Note:
       *    params already on the baseUrl will be stripped
       * @param {SearchParams} params The parameters to include in the experience URL
       * @return {string} The formatted experience URL with appropriate query params
       */

    }, {
      key: "_getExperienceURL",
      value: function _getExperienceURL(baseUrl, params) {
        var _this3 = this;

        params.set(StorageKeys.QUERY, this.query);
        var context = this.core.globalStorage.getState(StorageKeys.API_CONTEXT);

        if (context) {
          params.set(StorageKeys.API_CONTEXT, context);
        }

        var referrerPageUrl = this.core.globalStorage.getState(StorageKeys.REFERRER_PAGE_URL);

        if (referrerPageUrl !== null) {
          params.set(StorageKeys.REFERRER_PAGE_URL, referrerPageUrl);
        }

        var filteredParams = filterParamsForExperienceLink(params, function (types) {
          return _this3.componentManager.getComponentNamesForComponentTypes(types);
        });
        return replaceUrlParams(baseUrl, filteredParams);
      }
    }, {
      key: "setState",
      value: function setState() {
        var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var val = arguments.length > 1 ? arguments[1] : undefined;

        /**
         * @type {Array<Result>}
         */
        this.results = data.results || [];
        this.resultsCount = data.resultsCount;
        this.verticalKey = data.verticalConfigId;
        this.resultsContext = data.resultsContext;
        var searchState = data.searchState || SearchStates.PRE_SEARCH;
        var displayResultsIfExist = this._config.isUniversal || this._displayAllResults || data.resultsContext === ResultsContext.NORMAL;
        this.query = this.core.globalStorage.getState(StorageKeys.QUERY);
        return _get(_getPrototypeOf(VerticalResultsComponent.prototype), "setState", this).call(this, Object.assign({
          results: []
        }, data, {
          isPreSearch: searchState === SearchStates.PRE_SEARCH,
          isSearchLoading: searchState === SearchStates.SEARCH_LOADING,
          isSearchComplete: searchState === SearchStates.SEARCH_COMPLETE,
          eventOptions: this.eventOptions(),
          universalUrl: this.getUniversalUrl(),
          verticalURL: this.getVerticalURL(data),
          query: this.query,
          currentVerticalLabel: this._currentVerticalLabel,
          resultsPresent: displayResultsIfExist && this.results.length !== 0,
          showNoResults: this.resultsContext === ResultsContext.NO_RESULTS,
          placeholders: new Array(this._config.maxNumberOfColumns - 1),
          numColumns: Math.min(this._config.maxNumberOfColumns, this.results.length),
          useLegacyNoResults: this._useLegacyNoResults,
          iconIsBuiltIn: Icons[this._config.icon],
          nlpFilters: data.appliedQueryFilters || []
        }), val);
      }
      /**
       * helper to construct the eventOptions object for the view all link
       * @returns {string}
       */

    }, {
      key: "eventOptions",
      value: function eventOptions() {
        return JSON.stringify({
          verticalConfigId: this.verticalKey
        });
      }
    }, {
      key: "addChild",
      value: function addChild(data, type, opts) {
        if (type === MapComponent.type) {
          var _opts = _objectSpread({
            noResults: this._noResultsConfig
          }, this._config.mapConfig, {}, opts);

          var _data = {
            resultsContext: this.getState('resultsContext'),
            map: data
          };
          return _get(_getPrototypeOf(VerticalResultsComponent.prototype), "addChild", this).call(this, _data, type, _opts);
        } else if (type === CardComponent.type) {
          var updatedData = {
            result: this.results[opts._index],
            verticalKey: this.verticalKey
          };

          var newOpts = _objectSpread({
            target: this._config.target
          }, this._config.card, {
            isUniversal: this._config.isUniversal,
            template: this._config.itemTemplate,
            render: this._config.renderItem,
            modifier: this._config.modifier
          }, opts);

          return _get(_getPrototypeOf(VerticalResultsComponent.prototype), "addChild", this).call(this, updatedData, type, newOpts);
        } else if (type === AlternativeVerticalsComponent.type) {
          var hasResults = this.results && this.results.length > 0;
          data = this.core.globalStorage.getState(StorageKeys.ALTERNATIVE_VERTICALS);

          var _newOpts = _objectSpread({
            template: this._noResultsTemplate,
            universalUrl: this.getUniversalUrl(),
            verticalsConfig: this._verticalsConfig,
            isShowingResults: this._displayAllResults && hasResults
          }, opts);

          return _get(_getPrototypeOf(VerticalResultsComponent.prototype), "addChild", this).call(this, data, type, _newOpts);
        } else if (type === ResultsHeaderComponent.type) {
          var resultsHeaderData = _objectSpread({
            resultsLength: this.results.length,
            resultsCount: this.resultsCount,
            nlpFilters: this.getState('nlpFilters')
          }, data);

          var _opts2 = _objectSpread({}, opts);

          if (this.resultsContext === ResultsContext.NO_RESULTS) {
            _opts2.showAppliedFilters = false;
          }

          return _get(_getPrototypeOf(VerticalResultsComponent.prototype), "addChild", this).call(this, resultsHeaderData, type, _objectSpread({
            isUniversal: this._config.isUniversal,
            verticalURL: this.getVerticalURL(),
            verticalKey: this.verticalKey
          }, this.resultsHeaderOpts, {}, _opts2));
        }

        return _get(_getPrototypeOf(VerticalResultsComponent.prototype), "addChild", this).call(this, data, type, opts);
      }
    }], [{
      key: "areDuplicateNamesAllowed",
      value: function areDuplicateNamesAllowed() {
        return true;
      }
    }, {
      key: "defaultTemplateName",

      /**
       * The template to render
       * @returns {string}
       * @override
       */
      value: function defaultTemplateName(config) {
        return 'results/verticalresults';
      }
    }, {
      key: "type",
      get: function get() {
        return 'VerticalResults';
      }
    }]);

    return VerticalResultsComponent;
  }(Component);

  var APPLY_SYNONYMS = function APPLY_SYNONYMS(config) {
    return _objectSpread({
      icon: config.sectionTitleIconName || config.sectionTitleIconUrl,
      title: config.sectionTitle
    }, config);
  };

  var AccordionResultsComponent =
  /*#__PURE__*/
  function (_VerticalResultsCompo) {
    _inherits(AccordionResultsComponent, _VerticalResultsCompo);

    function AccordionResultsComponent() {
      var _this;

      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var systemConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      _classCallCheck(this, AccordionResultsComponent);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(AccordionResultsComponent).call(this, config, systemConfig));
      /**
       * base selector to use when finding DOM targets
       * @type {string}
       */

      _this._selectorBase = config.selectorBase || '.js-yxt-AccordionResult';
      /**
       * collapsed state class
       * @type {string}
       */

      _this.collapsedClass = config.collapsedClass || 'is-collapsed';
      /**
       * vertical config id is required for analytics
       * @type {string|null}
       */

      _this.verticalConfigId = config.verticalConfigId || config._parentOpts.verticalConfigId || null;
      return _this;
    }
    /**
     * the component type
     * @returns {string}
     * @override
     */


    _createClass(AccordionResultsComponent, [{
      key: "onMount",

      /**
       * overrides onMount to add bindings to change the height on click
       * @returns {AccordionResultsComponent}
       * @override
       */
      value: function onMount() {
        var _this2 = this;

        _get(_getPrototypeOf(AccordionResultsComponent.prototype), "onMount", this).call(this); // NOTE(amullings): This is a hack, since currently components with siblings
        // have no way of referring to their own element. We have to grab the first
        // element since sections get added in reverse.


        var selfEl = this._container.firstElementChild;
        var accordionEls = DOM.queryAll(selfEl, this._selectorBase);
        accordionEls.forEach(function (accordionEl) {
          var toggleEl = DOM.query(accordionEl, _this2.toggleSelector());
          var contentEl = DOM.query(accordionEl, _this2.bodySelector());

          _this2.changeHeight(contentEl, accordionEl);

          toggleEl.addEventListener('click', function () {
            _this2.handleClick(accordionEl, toggleEl, contentEl);
          });
        });
        return this;
      }
    }, {
      key: "setState",
      value: function setState(data) {
        return _get(_getPrototypeOf(AccordionResultsComponent.prototype), "setState", this).call(this, Object.assign({}, data, {
          modifier: this.verticalConfigId
        }));
      }
      /**
       * click handler for the accordion toggle button
       * @param wrapperEl {HTMLElement} the toggle container
       * @param toggleEl {HTMLElement} the button
       * @param contentEl {HTMLElement} the toggle target
       */

    }, {
      key: "handleClick",
      value: function handleClick(wrapperEl, toggleEl, contentEl) {
        var event = new AnalyticsEvent(this.isCollapsed(wrapperEl) ? 'ROW_EXPAND' : 'ROW_COLLAPSE').addOptions({
          verticalConfigId: this.verticalConfigId,
          entityId: toggleEl.dataset.entityId
        });
        wrapperEl.classList.toggle(this.collapsedClass);
        this.changeHeight(contentEl, wrapperEl);
        toggleEl.setAttribute('aria-expanded', this.isCollapsed(wrapperEl) ? 'false' : 'true');
        this.analyticsReporter.report(event);
      }
      /**
       * returns true if the element is currently collapsed
       * @param wrapperEl {HTMLElement} the toggle container
       * @returns {boolean}
       */

    }, {
      key: "isCollapsed",
      value: function isCollapsed(wrapperEl) {
        if (!wrapperEl) {
          return false;
        }

        return wrapperEl.classList.contains(this.collapsedClass);
      }
      /**
       * toggles the height between 0 and the content height for smooth animation
       * @param targetEl {HTMLElement}
       * @param wrapperEl {HTMLElement}
       */

    }, {
      key: "changeHeight",
      value: function changeHeight(targetEl, wrapperEl) {
        targetEl.style.height = "".concat(this.isCollapsed(wrapperEl) ? 0 : targetEl.scrollHeight, "px");
      }
      /**
       * helper for composing child element selectors
       * @param child {string}
       * @returns {string}
       */

    }, {
      key: "buildSelector",
      value: function buildSelector(child) {
        return "".concat(this._selectorBase).concat(child);
      }
      /**
       * helper for the toggle button selector
       * @returns {string}
       */

    }, {
      key: "toggleSelector",
      value: function toggleSelector() {
        return this.buildSelector('-toggle');
      }
      /**
       * helper for the content element selector
       * @returns {string}
       */

    }, {
      key: "bodySelector",
      value: function bodySelector() {
        return this.buildSelector('-body');
      }
    }], [{
      key: "defaultTemplateName",

      /**
       * The template to render
       * @returns {string}
       * @override
       */
      value: function defaultTemplateName(config) {
        return 'results/resultsaccordion';
      }
    }, {
      key: "type",
      get: function get() {
        return 'AccordionResults';
      }
    }]);

    return AccordionResultsComponent;
  }(VerticalResultsComponent);

  var UniversalResultsComponent =
  /*#__PURE__*/
  function (_Component) {
    _inherits(UniversalResultsComponent, _Component);

    function UniversalResultsComponent() {
      var _this;

      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var systemConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      _classCallCheck(this, UniversalResultsComponent);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(UniversalResultsComponent).call(this, config, systemConfig));
      _this.moduleId = StorageKeys.UNIVERSAL_RESULTS;
      _this._appliedFilters = _objectSpread({
        show: true,
        showFieldNames: false,
        hiddenFields: ['builtin.entityType'],
        resultsCountSeparator: '|',
        showChangeFilters: false,
        delimiter: '|',
        labelText: 'Filters applied to this search:'
      }, config.appliedFilters);

      _this.core.globalStorage.on('update', StorageKeys.API_CONTEXT, function () {
        _this.setState(_this.core.globalStorage.getState(StorageKeys.UNIVERSAL_RESULTS) || {});
      });

      return _this;
    }

    _createClass(UniversalResultsComponent, [{
      key: "setState",
      value: function setState(data, val) {
        var sections = data.sections || [];
        var searchState = data.searchState || SearchStates.PRE_SEARCH;
        return _get(_getPrototypeOf(UniversalResultsComponent.prototype), "setState", this).call(this, Object.assign(data, {
          isPreSearch: searchState === SearchStates.PRE_SEARCH,
          isSearchLoading: searchState === SearchStates.SEARCH_LOADING,
          isSearchComplete: searchState === SearchStates.SEARCH_COMPLETE,
          showNoResults: sections.length === 0,
          query: this.core.globalStorage.getState(StorageKeys.QUERY),
          sections: sections
        }, val));
      }
    }, {
      key: "addChild",
      value: function addChild() {
        var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var type = arguments.length > 1 ? arguments[1] : undefined;
        var opts = arguments.length > 2 ? arguments[2] : undefined;
        var verticals = this._config.verticals || this._config.config || {};
        var verticalKey = data.verticalConfigId;

        var childOpts = _objectSpread({}, opts, {}, UniversalResultsComponent.getChildConfig(verticalKey, verticals[verticalKey] || {}, this._appliedFilters));

        var childType = childOpts.useAccordion ? AccordionResultsComponent.type : type;
        return _get(_getPrototypeOf(UniversalResultsComponent.prototype), "addChild", this).call(this, data, childType, childOpts);
      }
      /**
       * Applies synonyms and default config for a vertical in universal results.
       * @param {string} verticalKey
       * @param {Object} config
       * @param {Object} topLevelAppliedFilters
       * @returns {Object}
       */

    }], [{
      key: "defaultTemplateName",
      value: function defaultTemplateName(config) {
        return 'results/universalresults';
      }
    }, {
      key: "areDuplicateNamesAllowed",
      value: function areDuplicateNamesAllowed() {
        return true;
      }
    }, {
      key: "getChildConfig",
      value: function getChildConfig(verticalKey, config, topLevelAppliedFilters) {
        return _objectSpread({
          // Tells vertical results it is in a universal results page.
          isUniversal: true,
          // Label for the vertical in the titlebar.
          title: config.sectionTitle || verticalKey,
          // Icon in the titlebar
          icon: config.sectionTitleIconName || config.sectionTitleIconUrl || 'star',
          // Url that links to the vertical search for this vertical.
          verticalURL: config.url,
          // Show a view more link by default, which also links to verticalURL.
          viewMore: true,
          // By default, the view more link has a label of 'View More'.
          viewMoreLabel: defaultConfigOption(config, ['viewMoreLabel', 'viewAllText'], 'View More'),
          // Whether to show a result count.
          showResultCount: false,
          // Whether to use AccordionResults (DEPRECATED)
          useAccordion: false
        }, config, {
          // Config for the applied filters bar. Must be placed after ...config to not override defaults.
          appliedFilters: {
            // Whether to display applied filters.
            show: defaultConfigOption(config, ['appliedFilters.show', 'showAppliedFilters'], topLevelAppliedFilters.show),
            // Whether to show field names, e.g. Location in Location: Virginia.
            showFieldNames: defaultConfigOption(config, ['appliedFilters.showFieldNames', 'showFieldNames'], topLevelAppliedFilters.showFieldNames),
            // Hide filters with these field ids.
            hiddenFields: defaultConfigOption(config, ['appliedFilters.hiddenFields', 'hiddenFields'], topLevelAppliedFilters.hiddenFields),
            // Symbol placed between the result count and the applied filters.
            resultsCountSeparator: defaultConfigOption(config, ['appliedFilters.resultsCountSeparator', 'resultsCountSeparator'], topLevelAppliedFilters.resultsCountSeparator),
            // Whether to show a 'change filters' link, linking back to verticalURL.
            showChangeFilters: defaultConfigOption(config, ['appliedFilters.showChangeFilters', 'showChangeFilters'], topLevelAppliedFilters.showChangeFilters),
            // The text for the change filters link.
            changeFiltersText: defaultConfigOption(config, ['appliedFilters.changeFiltersText', 'changeFiltersText'], topLevelAppliedFilters.changeFiltersText),
            // The symbol placed between different filters with the same fieldName. e.g. Location: Virginia | New York | Miami.
            delimiter: defaultConfigOption(config, ['appliedFilters.delimiter'], topLevelAppliedFilters.delimiter),
            // The aria-label given to the applied filters bar.
            labelText: defaultConfigOption(config, ['appliedFilters.labelText'], topLevelAppliedFilters.labelText)
          }
        });
      }
    }, {
      key: "type",
      get: function get() {
        return 'UniversalResults';
      }
    }]);

    return UniversalResultsComponent;
  }(Component);

  var PaginationComponent =
  /*#__PURE__*/
  function (_Component) {
    _inherits(PaginationComponent, _Component);

    function PaginationComponent() {
      var _this;

      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var systemConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      _classCallCheck(this, PaginationComponent);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(PaginationComponent).call(this, config, systemConfig));
      /**
       * The vertical key to use for searches
       * @type {string}
       * @private
       */

      _this._verticalKey = config.verticalKey || _this.core.globalStorage.getState(StorageKeys.SEARCH_CONFIG).verticalKey;

      if (typeof _this._verticalKey !== 'string') {
        throw new AnswersComponentError('verticalKey not provided, but necessary for pagination', 'PaginationComponent');
      }
      /**
       * The number of pages visible before/after the current page on desktop.
       * @type {number}
       * @private
       */


      _this._maxVisiblePagesDesktop = config.maxVisiblePagesDesktop === undefined ? 1 : config.maxVisiblePagesDesktop;
      /**
       * The number of pages visible before/after the current page on mobile.
       * @type {number}
       * @private
       */

      _this._maxVisiblePagesMobile = config.maxVisiblePagesMobile === undefined ? 1 : config.maxVisiblePagesMobile;
      /**
       * If true, displays the first and last page buttons
       * @type {boolean}
       * @private
       */

      _this._showFirstAndLastPageButtons = config.showFirstAndLastButton === undefined ? true : config.showFirstAndLastButton;
      /**
       * DEPRECATED
       * @type {boolean}
       * @private
       */

      _this._firstPageButtonEnabled = config.showFirst === undefined ? _this._showFirstAndLastPageButtons : config.showFirst;
      /**
       * DEPRECATED
       * @type {boolean}
       * @private
       */

      _this._lastPageButtonEnabled = config.showLast === undefined ? _this._showFirstAndLastPageButtons : config.showLast;
      /**
       * If true, always displays the page numbers for first and last page.
       * @type {boolean}
       * @private
       */

      _this._pinFirstAndLastPage = config.pinFirstAndLastPage === undefined ? false : config.pinFirstAndLastPage;
      /**
       * Icons object for first, previous, next, and last page icons.
       * @type {{
       *  nextButtonIcon: (string | undefined),
       *  previousButtonIcon: (string | undefined),
       *  firstButtonIcon: (string | undefined),
       *  lastButtonIcon: (string | undefined),
       * }}
       * @private
       */

      _this._icons = config.icons;
      /**
       * Options to include with all analytic events sent by this component
       * @type {object}
       * @private
       */

      _this._analyticsOptions = {
        verticalKey: _this._verticalKey
      };
      /**
       * Label for a page of results.
       * @type {string}
       * @private
       */

      _this._pageLabel = config.pageLabel === undefined ? 'Page' : config.pageLabel;
      /**
       * Function that is invoked on pagination
       * @type {function(): {}}
       * @private
       */

      _this._onPaginate = config.onPaginate || _this.scrollToTop;
      /**
       * The maximum number of results per page
       * @type {number}
       * @private
       */

      _this._limit = _this.core.globalStorage.getState(StorageKeys.SEARCH_CONFIG).limit;
      var offset = _this.core.globalStorage.getState(StorageKeys.SEARCH_OFFSET) || 0;

      _this.core.globalStorage.set(StorageKeys.SEARCH_OFFSET, Number(offset));

      _this.core.globalStorage.on('update', StorageKeys.SEARCH_OFFSET, function (offset) {
        if (typeof offset === 'number') {
          return;
        }

        _this.core.globalStorage.set(StorageKeys.SEARCH_OFFSET, Number(offset));
      });

      _this.core.globalStorage.on('update', StorageKeys.VERTICAL_RESULTS, function (results) {
        if (results.searchState === SearchStates.SEARCH_COMPLETE) {
          _this.setState();
        }
      });
      /**
       * Configuration for the behavior when there are no vertical results.
       */


      _this._noResults = config.noResults || _this.core.globalStorage.getState(StorageKeys.NO_RESULTS_CONFIG) || {};
      return _this;
    }

    _createClass(PaginationComponent, [{
      key: "shouldShowControls",
      value: function shouldShowControls(results, limit) {
        var hasResults = results.searchState === 'search-complete' && results.resultsCount > limit;
        var isNormalResults = results.resultsContext === ResultsContext.NORMAL;
        var isVisibleForNoResults = 'visible' in this._noResults ? this._noResults.visible : this._noResults.displayAllResults;
        return hasResults && (isNormalResults || isVisibleForNoResults);
      }
    }, {
      key: "onMount",
      value: function onMount() {
        var _this2 = this;

        var results = this.core.globalStorage.getState(StorageKeys.VERTICAL_RESULTS) || {};
        var limit = this.core.globalStorage.getState(StorageKeys.SEARCH_CONFIG).limit;
        var showControls = this.shouldShowControls(results, limit);
        var offset = this.core.globalStorage.getState(StorageKeys.SEARCH_OFFSET) || 0;

        if (!showControls) {
          return;
        }

        var previousPageButton = DOM.query(this._container, '.js-yxt-Pagination-previous');
        var nextPageButton = DOM.query(this._container, '.js-yxt-Pagination-next');
        var maxPage = Math.trunc((results.resultsCount - 1) / limit);
        DOM.on(previousPageButton, 'click', function () {
          return _this2.updatePage(offset - limit);
        });
        DOM.on(nextPageButton, 'click', function () {
          return _this2.updatePage(offset + limit);
        });

        if (this._firstPageButtonEnabled) {
          var firstPageButton = DOM.query(this._container, '.js-yxt-Pagination-first');
          DOM.on(firstPageButton, 'click', function () {
            return _this2.updatePage(0);
          });
        }

        if (this._lastPageButtonEnabled) {
          var lastPageButton = DOM.query(this._container, '.js-yxt-Pagination-last');
          DOM.on(lastPageButton, 'click', function () {
            return _this2.updatePage(maxPage * limit);
          });
        }

        DOM.queryAll('.js-yxt-Pagination-link').forEach(function (node) {
          DOM.on(node, 'click', function () {
            return _this2.updatePage((parseInt(node.dataset.number) - 1) * limit);
          });
        });
      }
    }, {
      key: "updatePage",
      value: function updatePage(offset) {
        var results = this.core.globalStorage.getState(StorageKeys.VERTICAL_RESULTS) || {};
        var currentOffset = this.core.globalStorage.getState(StorageKeys.SEARCH_OFFSET) || 0;
        var currentPageNumber = currentOffset / this._limit + 1;
        var newPageNumber = offset / this._limit + 1;

        var maxPageCount = this._computeMaxPage(results.resultsCount);

        this._onPaginate(newPageNumber, currentPageNumber, maxPageCount);

        this.core.globalStorage.set(StorageKeys.SEARCH_OFFSET, offset);
        this.core.persistentStorage.set(StorageKeys.SEARCH_OFFSET, offset);
        this.core.verticalPage(this._verticalKey);
      }
    }, {
      key: "scrollToTop",
      value: function scrollToTop() {
        document.documentElement.scrollTop = 0; // Safari

        document.body.scrollTop = 0;
      }
      /**
       * Computes the highest page number for a given amount of results
       * @param {number} resultsCount
       */

    }, {
      key: "_computeMaxPage",
      value: function _computeMaxPage(resultsCount) {
        return Math.trunc((resultsCount - 1) / this._limit) + 1;
      }
      /**
       * Pagination should evenly add page numbers in the "forward" and "backward" directions, unless
       * one side has reached the max/min value, in which case the remaining side should be the only
       * one to get more pages.
       * @param {number} pageNumber the current page's number
       * @param {number} maxPage the highest page number, acts as the upper bound
       * @param {number} limit the maximum total number of pages that are allocated
       * @returns {Array<number>} the backLimit and frontLimit, respectively
       */

    }, {
      key: "_allocate",
      value: function _allocate(pageNumber, maxPage, limit) {
        var backLimit = pageNumber;
        var frontLimit = pageNumber;

        for (var i = 0; i < limit; i++) {
          if (i % 2 === 0) {
            if (backLimit > 0) {
              backLimit--;
            } else if (frontLimit < maxPage) {
              frontLimit++;
            }
          } else {
            if (frontLimit < maxPage) {
              frontLimit++;
            } else if (backLimit > 0) {
              backLimit--;
            }
          }
        }

        return [backLimit, frontLimit];
      }
      /**
       * Creates an object representing the view state of the page numbers and ellipses
       * @param {number} pageNumber refers to the page number, not the page index
       * @param {number} maxPage the highest page number, which also represents the total page count
       * @returns {Object} the view-model for the page numbers displayed in the component, including whether to display ellipses
       */

    }, {
      key: "_createPageNumberViews",
      value: function _createPageNumberViews(pageNumber, maxPage) {
        var _this$_allocate = this._allocate(pageNumber, maxPage, this._maxVisiblePagesMobile),
            _this$_allocate2 = _slicedToArray(_this$_allocate, 2),
            mobileBackLimit = _this$_allocate2[0],
            mobileFrontLimit = _this$_allocate2[1];

        var _this$_allocate3 = this._allocate(pageNumber, maxPage, this._maxVisiblePagesDesktop),
            _this$_allocate4 = _slicedToArray(_this$_allocate3, 2),
            desktopBackLimit = _this$_allocate4[0],
            desktopFrontLimit = _this$_allocate4[1];

        var pageNumberViews = [];

        for (var i = 1; i <= maxPage; i++) {
          var num = {
            number: i
          };

          if (i === pageNumber) {
            num.active = true;

            if (this._maxVisiblePagesDesktop > 1) {
              num.activeDesktop = true;
            }

            if (this._maxVisiblePagesMobile > 1) {
              num.activeMobile = true;
            }
          } else {
            if (i <= mobileBackLimit || i > mobileFrontLimit) {
              num.mobileHidden = true;
            }

            if (i <= desktopBackLimit || i > desktopFrontLimit) {
              num.desktopHidden = true;
            }
          }

          pageNumberViews.push(num);
        }

        return {
          pinnedNumbers: {
            mobileBack: this._pinFirstAndLastPage && mobileBackLimit > 0,
            mobileFront: this._pinFirstAndLastPage && mobileFrontLimit < maxPage,
            desktopBack: this._pinFirstAndLastPage && desktopBackLimit > 0,
            desktopFront: this._pinFirstAndLastPage && desktopFrontLimit < maxPage
          },
          ellipses: {
            mobileBack: this._pinFirstAndLastPage && mobileBackLimit > 1,
            mobileFront: this._pinFirstAndLastPage && mobileFrontLimit < maxPage - 1,
            desktopBack: this._pinFirstAndLastPage && desktopBackLimit > 1,
            desktopFront: this._pinFirstAndLastPage && desktopFrontLimit < maxPage - 1
          },
          pageNumberViews: pageNumberViews
        };
      }
    }, {
      key: "setState",
      value: function setState(data) {
        var results = this.core.globalStorage.getState(StorageKeys.VERTICAL_RESULTS) || {};
        var offset = this.core.globalStorage.getState(StorageKeys.SEARCH_OFFSET) || 0;
        var pageNumber = offset / this._limit + 1;
        var isMoreResults = results.resultsCount > offset + this._limit;

        var maxPage = this._computeMaxPage(results.resultsCount);

        var _this$_createPageNumb = this._createPageNumberViews(pageNumber, maxPage),
            pinnedNumbers = _this$_createPageNumb.pinnedNumbers,
            ellipses = _this$_createPageNumb.ellipses,
            pageNumberViews = _this$_createPageNumb.pageNumberViews;

        return _get(_getPrototypeOf(PaginationComponent.prototype), "setState", this).call(this, _objectSpread({
          showControls: this.shouldShowControls(results, this._limit),
          firstPageButtonEnabled: this._firstPageButtonEnabled,
          lastPageButtonEnabled: this._lastPageButtonEnabled,
          pageNumber: pageNumber,
          pageLabel: this._pageLabel,
          showFirstPageButton: pageNumber > 2,
          showPreviousPageButton: pageNumber > 1,
          showNextPageButton: isMoreResults,
          showLastPageButton: pageNumber < maxPage - 1,
          icons: this._icons,
          pageNumbers: pageNumberViews,
          pinnedNumbers: pinnedNumbers,
          ellipses: ellipses,
          pinPages: this._pinFirstAndLastPage,
          nextPage: pageNumber + 1,
          maxPage: maxPage
        }, data));
      }
    }], [{
      key: "defaultTemplateName",
      value: function defaultTemplateName() {
        return 'results/pagination';
      }
    }, {
      key: "type",
      get: function get() {
        return 'Pagination';
      }
    }]);

    return PaginationComponent;
  }(Component);

  var CTACollectionComponent =
  /*#__PURE__*/
  function (_Component) {
    _inherits(CTACollectionComponent, _Component);

    function CTACollectionComponent() {
      var _this;

      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var systemConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      _classCallCheck(this, CTACollectionComponent);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(CTACollectionComponent).call(this, config, systemConfig));
      var data = _this._config.data || {};
      /**
       * Result data
       * @type {Result}
       */

      _this.result = data.result || {};
      /**
       * Whether the DOM should include legacy class names
       * @type {boolean}
       */

      _this.includeLegacyClasses = _this._config.includeLegacyClasses || false;
      /**
       * Vertical key for the search.
       * @type {string}
       */

      _this.verticalKey = data.verticalKey;
      /**
       * Whether this cta is part of a universal search.
       * @type {boolean}
       */

      _this.isUniversal = _this._config.isUniversal || false;
      /**
       * Either a function that spits out an array of CTA config objects or an array of CTA config objects
       * or api fieldnames
       * @type {Function|Array<Object|string>}
       */

      var callsToAction = _this._config.callsToAction || [];
      /**
       * The config for each calls to action component to render.
       * @type {Array<Object>}
       */

      _this.callsToAction = CTACollectionComponent.resolveCTAMapping.apply(CTACollectionComponent, [_this.result._raw].concat(_toConsumableArray(callsToAction))); // Assign any extra cta config that does not come from the cta mappings.

      var _ctaModifiers = _this._config._ctaModifiers || [];

      if (_this.callsToAction.length === 1) {
        _ctaModifiers.push('solo');
      }

      _this.callsToAction = _this.callsToAction.map(function (cta) {
        return _objectSpread({
          eventOptions: _this.defaultEventOptions(_this.result),
          _ctaModifiers: _ctaModifiers,
          includeLegacyClasses: _this.includeLegacyClasses
        }, cta);
      });
      return _this;
    }
    /**
     * Handles resolving ctas from a cta mapping which are either
     * 1. a function that returns a cta's config
     * 2. an object that has a per-attribute mapping of either a
     *    a) static value
     *    b) function that takes in resut data and returns the given attributes value
     * Note: Intentionally does not allow nesting functions.
     * @param {Object} result
     * @param {Function|...(Object|string)} ctas
     * @returns {Array<Object>}
     */


    _createClass(CTACollectionComponent, [{
      key: "defaultEventOptions",
      value: function defaultEventOptions(result) {
        var eventOptions = {
          verticalKey: this.verticalKey,
          searcher: this._config.isUniversal ? 'UNIVERSAL' : 'VERTICAL'
        };

        if (result._raw.id) {
          eventOptions.entityId = result._raw.id;
        }

        return eventOptions;
      }
    }, {
      key: "setState",
      value: function setState(data) {
        return _get(_getPrototypeOf(CTACollectionComponent.prototype), "setState", this).call(this, _objectSpread({}, data, {
          includeLegacyClasses: this.includeLegacyClasses,
          callsToAction: this.callsToAction
        }));
      }
    }], [{
      key: "resolveCTAMapping",
      value: function resolveCTAMapping(result) {
        var parsedCTAs = [];

        for (var _len = arguments.length, ctas = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          ctas[_key - 1] = arguments[_key];
        }

        ctas.map(function (ctaMapping) {
          if (typeof ctaMapping === 'function') {
            parsedCTAs = parsedCTAs.concat(ctaMapping(result));
          } else if (_typeof(ctaMapping) === 'object') {
            var ctaObject = _objectSpread({}, ctaMapping);

            for (var _i = 0, _Object$entries = Object.entries(ctaMapping); _i < _Object$entries.length; _i++) {
              var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),
                  ctaAttribute = _Object$entries$_i[0],
                  attributeMapping = _Object$entries$_i[1];

              if (typeof attributeMapping === 'function') {
                ctaObject[ctaAttribute] = attributeMapping(result);
              }
            }

            parsedCTAs.push(ctaObject);
          }
        });
        parsedCTAs = parsedCTAs.filter(function (cta) {
          return cta;
        });
        parsedCTAs.forEach(function (cta) {
          if (!cta.label && !cta.url) {
            console.warn('Call to Action:', cta, 'is missing both a label and url attribute and is being automatically hidden');
          } else if (!cta.label) {
            console.warn('Call to Action:', cta, 'is missing a label attribute and is being automatically hidden');
          } else if (!cta.url) {
            console.warn('Call to Action:', cta, 'is missing a url attribute and is being automatically hidden');
          }
        });
        return parsedCTAs.filter(function (cta) {
          return cta.url && cta.url.trim() && cta.label && cta.label.trim();
        });
      }
    }, {
      key: "hasCTAs",
      value: function hasCTAs(result, ctas) {
        return CTACollectionComponent.resolveCTAMapping.apply(CTACollectionComponent, [result].concat(_toConsumableArray(ctas))).length > 0;
      }
    }, {
      key: "defaultTemplateName",
      value: function defaultTemplateName() {
        return 'ctas/ctacollection';
      }
    }, {
      key: "type",
      get: function get() {
        return 'CTACollection';
      }
    }]);

    return CTACollectionComponent;
  }(Component);

  var StandardCardConfig = function StandardCardConfig() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, StandardCardConfig);

    Object.assign(this, config);
    var data = config.data || {};
    /**
     * The result data
     * @type {Result}
     */

    var result = data.result || {};
    /**
     * The raw profile data
     * @type {Object}
     */

    var rawResult = result._raw || {};
    /**
     * The dataMappings attribute of the config
     * is either a function that returns additional config for
     * a card or an object that is the additional config.
     */

    Object.assign(this, CardComponent.applyDataMappings(rawResult, config.dataMappings || {}));
    /**
     * The result data
     * @type {Result}
     */

    this.result = config.data || {};
    /**
     * Title for the card
     * @type {string}
     */

    this.title = this.title || result.title || rawResult.name || '';
    /**
     * Details for the card
     * @type {string}
     */

    this.details = this.details === null ? null : this.details || result.details || rawResult.description || '';
    /**
     * Url when you click the title
     * @type {string}
     */

    this.url = this.url === null ? '' : this.url || result.link || rawResult.website;
    /**
     * If showMoreLimit is set, the text that displays beneath it
     * @type {string}
     */

    this.showMoreText = this.showMoreText || 'Show More';
    /**
     * If showMoreLimit is set, the text that displays beneath it when all text is shown
     * @type {string}
     */

    this.showLessText = this.showLessText || 'Show Less';
    /**
     * Add a show more link if this number of characters is shown,
     * and truncate the last 3 characters with an ellipses.
     * Clicking show more should expand the results (but no “show less” link).
     * @type {number}
     */

    this.showMoreLimit = this.showMoreLimit;
    /**
     * The target attribute for the title link.
     * @type {string}
     */

    this.target = this.target;
    /**
     * Image url to display
     * @type {string}
     */

    this.image = this.image;
    /**
     * Subtitle
     * @type {string}
     */

    this.subtitle = this.subtitle;
    /**
     * Whether a 'show more' toggle button needs to be rendered at all
     */

    var detailsOverLimit = this.details.length > this.showMoreLimit;
    this.showToggle = this.showMoreLimit && detailsOverLimit;
    /**
     * Either a function that spits out an array of CTA config objects or an array of CTA config objects
     * or api fieldnames
     * @type {Function|Array<Object|string>}
     */

    this.callsToAction = this.callsToAction || [];
    /**
     * Whether to show the ordinal of the card in the results.
     * @type {boolean}
     */

    this.showOrdinal = this.showOrdinal || false;
    /**
     * Whether this card is part of a universal search.
     * @type {boolean}
     */

    this.isUniversal = this.isUniversal || false;
    /**
     * The index of the card.
     * @type {number}
     */

    this._index = config._index || 0;
  };
  /**
   * Card components expect to receive a data config option, containing data regarding entity result
   * each card is assigned to, including all field data in data._raw.
   */


  var StandardCardComponent =
  /*#__PURE__*/
  function (_Component) {
    _inherits(StandardCardComponent, _Component);

    function StandardCardComponent() {
      var _this;

      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var systemConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      _classCallCheck(this, StandardCardComponent);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(StandardCardComponent).call(this, new StandardCardConfig(config), systemConfig));
      _this.hideExcessDetails = _this._config.showToggle;
      /**
       * @type {Object}
       */

      var data = config.data || {};
      /**
       * Vertical key for the search.
       * @type {string}
       */

      _this.verticalKey = data.verticalKey;
      /**
       * The result data
       * @type {Result}
       */

      _this.result = data.result || {};
      return _this;
    }

    _createClass(StandardCardComponent, [{
      key: "setState",
      value: function setState(data) {
        var details = this._config.details;

        if (this._config.showMoreLimit) {
          details = this.hideExcessDetails ? "".concat(this._config.details.substring(0, this._config.showMoreLimit), "...") : this._config.details;
        }

        return _get(_getPrototypeOf(StandardCardComponent.prototype), "setState", this).call(this, _objectSpread({}, data, {
          hideExcessDetails: this.hideExcessDetails,
          result: this.result,
          hasCTAs: CTACollectionComponent.hasCTAs(this.result._raw, this._config.callsToAction),
          entityId: this.result._raw.id,
          verticalKey: this.verticalKey,
          details: details
        }));
      }
    }, {
      key: "onMount",
      value: function onMount() {
        var _this2 = this;

        if (this._config.showToggle) {
          var el = DOM.query(this._container, '.js-yxt-StandardCard-toggle');
          DOM.on(el, 'click', function () {
            _this2.hideExcessDetails = !_this2.hideExcessDetails;

            _this2.setState();
          });
        }
      }
    }, {
      key: "addChild",
      value: function addChild(data, type, opts) {
        if (type === CTACollectionComponent.type) {
          var updatedData = {
            verticalKey: this.verticalKey,
            result: data
          };
          return _get(_getPrototypeOf(StandardCardComponent.prototype), "addChild", this).call(this, updatedData, type, _objectSpread({
            callsToAction: this._config.callsToAction,
            isUniversal: this._config.isUniversal,
            _ctaModifiers: ['StandardCard']
          }, opts));
        }

        return _get(_getPrototypeOf(StandardCardComponent.prototype), "addChild", this).call(this, data, type, opts);
      }
    }], [{
      key: "defaultTemplateName",
      value: function defaultTemplateName() {
        return cardTemplates.Standard;
      }
    }, {
      key: "areDuplicateNamesAllowed",
      value: function areDuplicateNamesAllowed() {
        return true;
      }
    }, {
      key: "type",
      get: function get() {
        return cardTypes.Standard;
      }
    }]);

    return StandardCardComponent;
  }(Component);

  var AccordionCardConfig = function AccordionCardConfig() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, AccordionCardConfig);

    Object.assign(this, config);
    var data = config.data || {};
    /**
     * The result data
     * @type {Result}
     */

    var result = data.result || {};
    /**
     * The raw profile data
     * @type {Object}
     */

    var rawResult = result._raw || {};
    /**
     * The dataMappings attribute of the config
     * is either a function that returns additional config for
     * a card or an object that is the additional config.
     */

    var dataMappings = config.dataMappings || {};
    Object.assign(this, CardComponent.applyDataMappings(rawResult, dataMappings));
    /**
     * Vertical key for the card, added to analytics events sent by this component.
     * @type {string}
     */

    this.verticalKey = config.verticalKey;
    /**
     * @type {string}
     */

    this.title = this.title || result.title || rawResult.name || '';
    /**
     * @type {string}
     */

    this.subtitle = this.subtitle;
    /**
     * @type {string}
     */

    this.details = this.details === null ? null : this.details || result.details || rawResult.description || '';
    /**
     * If expanded is true the first accordion in vertical/universal results renders on page load expanded.
     * @type {boolean}
     */

    this.expanded = this.expanded || false;
    /**
     * Either a function that spits out an array of CTA config objects or an array of CTA config objects
     * or api fieldnames
     * @type {Function|Array<Object|string>}
     */

    this.callsToAction = this.callsToAction || [];
    /**
     * Whether this card is part of a universal search. Used in analytics.
     * @type {boolean}
     */

    this.isUniversal = config.isUniversal || false;
  };

  var AccordionCardComponent =
  /*#__PURE__*/
  function (_Component) {
    _inherits(AccordionCardComponent, _Component);

    function AccordionCardComponent() {
      var _this;

      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var systemConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      _classCallCheck(this, AccordionCardComponent);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(AccordionCardComponent).call(this, new AccordionCardConfig(config), systemConfig));
      /**
       * Whether the accordion is collapsed or not.
       * Defaults to true only if the expanded option is true
       * and this is the first card in the results.
       * @type {boolean}
       */

      _this.isExpanded = _this._config.expanded && config._index === 0;
      /**
       * @type {Object}
       */

      var data = config.data || {};
      /**
       * Vertical key for the card, added to analytics events sent by this component.
       * @type {string}
       */

      _this.verticalKey = data.verticalKey;
      /**
       * The result data, sent to children CTA Components that need this.
       * @type {Result}
       */

      _this.result = data.result || {};
      return _this;
    }

    _createClass(AccordionCardComponent, [{
      key: "setState",
      value: function setState(data) {
        var id = this.result.id || this.result.ordinal;
        return _get(_getPrototypeOf(AccordionCardComponent.prototype), "setState", this).call(this, _objectSpread({}, data, {
          result: this.result,
          isExpanded: this.isExpanded,
          id: "".concat(this.name, "-").concat(id, "-").concat(this.verticalKey),
          hasCTAs: CTACollectionComponent.hasCTAs(this.result._raw, this._config.callsToAction)
        }));
      }
      /**
       * Click handler for the accordion toggle button
       * This is used over set state because it's a lot smoother, since
       * it doesn't rip the whole component off of the page and remount it.
       * Also reports an analytics event.
       * @param {HTMLElement} toggleEl the toggle element
       * @param {HTMLElement} accordionBodyEl the .js-yxt-AccordionCard-body element
       * @param {HTMLElement} accordionEl the root accordion element
       */

    }, {
      key: "handleClick",
      value: function handleClick(toggleEl, accordionBodyEl, accordionEl) {
        this.isExpanded = !this.isExpanded;
        accordionEl.classList.toggle('yxt-AccordionCard--expanded');
        accordionBodyEl.style.height = "".concat(this.isExpanded ? accordionBodyEl.scrollHeight : 0, "px");
        toggleEl.setAttribute('aria-expanded', this.isExpanded ? 'true' : 'false');
        accordionBodyEl.setAttribute('aria-hidden', this.isExpanded ? 'false' : 'true');
        var event = new AnalyticsEvent(this.isExpanded ? 'ROW_EXPAND' : 'ROW_COLLAPSE').addOptions({
          verticalKey: this.verticalKey,
          entityId: this.result._raw.id,
          searcher: this._config.isUniversal ? 'UNIVERSAL' : 'VERTICAL'
        });
        this.analyticsReporter.report(event);
      }
    }, {
      key: "onMount",
      value: function onMount() {
        var _this2 = this;

        if (this._config.details) {
          var toggleEl = DOM.query(this._container, '.js-yxt-AccordionCard-toggle');
          var accordionBodyEl = DOM.query(this._container, '.js-yxt-AccordionCard-body');
          var accordionEl = DOM.query(this._container, '.js-yxt-AccordionCard');
          accordionBodyEl.style.height = "".concat(this.isExpanded ? accordionBodyEl.scrollHeight : 0, "px");
          DOM.on(toggleEl, 'click', function () {
            return _this2.handleClick(toggleEl, accordionBodyEl, accordionEl);
          });
        }
      }
      /**
       * For passing functions to the config of children {@link CTACollectionComponent}
       */

    }, {
      key: "addChild",
      value: function addChild(data, type, opts) {
        if (type === CTACollectionComponent.type) {
          var updatedData = {
            verticalKey: this.verticalKey,
            result: data
          };
          return _get(_getPrototypeOf(AccordionCardComponent.prototype), "addChild", this).call(this, updatedData, type, _objectSpread({
            callsToAction: this._config.callsToAction,
            _ctaModifiers: ['AccordionCard'],
            isUniversal: this._config.isUniversal
          }, opts));
        }

        return _get(_getPrototypeOf(AccordionCardComponent.prototype), "addChild", this).call(this, data, type, opts);
      }
    }], [{
      key: "defaultTemplateName",
      value: function defaultTemplateName() {
        return cardTemplates.Accordion;
      }
    }, {
      key: "areDuplicateNamesAllowed",
      value: function areDuplicateNamesAllowed() {
        return true;
      }
    }, {
      key: "type",
      get: function get() {
        return cardTypes.Accordion;
      }
    }]);

    return AccordionCardComponent;
  }(Component);

  var LegacyCardConfig = function LegacyCardConfig() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, LegacyCardConfig);

    Object.assign(this, config);
    var data = config.data || {};
    /**
     * The result data
     * @type {Result}
     */

    var result = data.result || {};
    /**
     * The raw profile data
     * @type {Object}
     */

    var rawResult = result._raw || {};
    /**
     * The dataMappings attribute of the config
     * is either a function that returns additional config for
     * a card or an object that is the additional config.
     */

    Object.assign(this, CardComponent.applyDataMappings(rawResult, config.dataMappings || {}));
    /**
     * The result data
     * @type {Result}
     */

    this.result = config.data || {};
    /**
     * Title for the card
     * @type {string}
     */

    this.title = this.title || result.title || rawResult.name || '';
    /**
     * Details for the card
     * @type {string}
     */

    this.details = this.details === null ? null : this.details || result.details || rawResult.description || '';
    /**
     * Url when you click the title
     * @type {string}
     */

    this.url = this.url === null ? '' : this.url || result.link || rawResult.website;
    /**
     * The target attribute for the title link.
     * @type {string}
     */

    this.target = this.target;
    /**
     * Image url to display
     * @type {string}
     */

    this.image = this.image;
    /**
     * Subtitle
     * @type {string}
     */

    this.subtitle = this.subtitle;
    /**
     * Either a function that spits out an array of CTA config objects or an array of CTA config objects
     * or api fieldnames
     * @type {Function|Array<Object|string>}
     */

    this.callsToAction = this.callsToAction || [];
    /**
     * Whether to show the ordinal of the card in the results.
     * @type {boolean}
     */

    this.showOrdinal = this.showOrdinal || false;
    /**
     * Whether this card is part of a universal search.
     * @type {boolean}
     */

    this.isUniversal = this.isUniversal || false;
    /**
     * The index of the card.
     * @type {number}
     */

    this._index = config._index || 0;
  };
  /**
   * Card components expect to receive a data config option, containing data regarding entity result
   * each card is assigned to, including all field data in data._raw.
   */


  var LegacyCardComponent =
  /*#__PURE__*/
  function (_Component) {
    _inherits(LegacyCardComponent, _Component);

    function LegacyCardComponent() {
      var _this;

      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var systemConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      _classCallCheck(this, LegacyCardComponent);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(LegacyCardComponent).call(this, new LegacyCardConfig(config), systemConfig));
      /**
       * @type {Object}
       */

      var data = config.data || {};
      /**
       * Vertical key for the search.
       * @type {string}
       */

      _this.verticalKey = data.verticalKey;
      /**
       * The result data
       * @type {Result}
       */

      _this.result = data.result || {};
      return _this;
    }

    _createClass(LegacyCardComponent, [{
      key: "setState",
      value: function setState(data) {
        return _get(_getPrototypeOf(LegacyCardComponent.prototype), "setState", this).call(this, _objectSpread({}, data, {
          eventOptions: this._legacyEventOptions(this.result._raw.id, this.result.link),
          result: this.result,
          hasCTAs: CTACollectionComponent.hasCTAs(this.result._raw, this._config.callsToAction),
          entityId: this.result._raw.id,
          verticalKey: this.verticalKey
        }));
      }
    }, {
      key: "_legacyEventOptions",
      value: function _legacyEventOptions(entityId, url) {
        var options = {
          verticalConfigId: this.verticalKey,
          searcher: this._config.isUniversal ? 'UNIVERSAL' : 'VERTICAL'
        };

        if (entityId) {
          options.entityId = entityId;
        } else {
          options.url = url;
        }

        return JSON.stringify(options);
      }
    }, {
      key: "addChild",
      value: function addChild(data, type, opts) {
        if (type === CTACollectionComponent.type) {
          var updatedData = {
            verticalKey: this.verticalKey,
            result: data
          };
          return _get(_getPrototypeOf(LegacyCardComponent.prototype), "addChild", this).call(this, updatedData, type, _objectSpread({
            callsToAction: this._config.callsToAction,
            isUniversal: this._config.isUniversal,
            _ctaModifiers: ['LegacyCard'],
            includeLegacyClasses: true
          }, opts));
        }

        return _get(_getPrototypeOf(LegacyCardComponent.prototype), "addChild", this).call(this, data, type, opts);
      }
    }], [{
      key: "defaultTemplateName",
      value: function defaultTemplateName() {
        return cardTemplates.Legacy;
      }
    }, {
      key: "areDuplicateNamesAllowed",
      value: function areDuplicateNamesAllowed() {
        return true;
      }
    }, {
      key: "type",
      get: function get() {
        return cardTypes.Legacy;
      }
    }]);

    return LegacyCardComponent;
  }(Component);

  /**
   * Configurable options for the component
   * @type {Object}
   */

  var DEFAULT_CONFIG$6 = {
    /**
     * The entity identifier that the question is associated with.
     * This is typically an organization object
     * @type {number}
     */
    'entityId': null,

    /**
     * The main CSS selector used to reference the form for the component.
     * @type {string} CSS selector
     */
    'formSelector': 'form',

    /**
     * An optional label to use for the e-mail address input
     * @type {string}
     */
    'emailLabel': 'Email',

    /**
     * An optional label to use for the name input
     * @type {string}
     */
    'nameLabel': 'Name',

    /**
     * An optional label to use for the question
     * @type {string}
     */
    'questionLabel': 'Question',

    /**
     * An optional label to use for the Privacy Policy
     * @type {string}
     */
    'privacyPolicyText': 'By submitting my email address, I consent to being contacted via email at the address provided.',

    /**
     * The label to use for the Submit button
     * @type {string}
     */
    'buttonLabel': 'Submit',

    /**
     * The title to display in the title bar
     * @type {string}
     */
    'sectionTitle': 'Ask a Question',

    /**
     * The description to display in the title bar
     * @type {string}
     */
    'teaser': 'Can’t find what you\'re looking for? Ask a question below.',

    /**
     * The name of the icon to use in the title bar
     * @type {string}
     */
    'sectionTitleIconName': 'support',

    /**
     * The text to display in the feedback form ahead of the Question input
     * @type {string}
     */
    'description': 'Enter your question and contact information, and we\'ll get back to you with a response shortly.',

    /**
     * The placeholder text for required inputs
     * @type {string}
     */
    'requiredInputPlaceholder': '(required)',

    /**
     * The placeholder text for the question text area
     * @type {string}
     */
    'questionInputPlaceholder': 'Enter your question here',

    /**
     * The confirmation text to display after successfully submitting feedback
     * @type {string}
     */
    'questionSubmissionConfirmationText': 'Thank you for your question!',

    /**
     * The default privacy policy url label
     * @type {string}
    */
    'privacyPolicyUrlLabel': 'Learn more here.',

    /**
     * The default privacy policy url
     * @type {string}
     */
    'privacyPolicyUrl': '',

    /**
     * The default privacy policy error text, shown when the user does not agree
     * @type {string}
     */
    'privacyPolicyErrorText': '* You must agree to the privacy policy to submit a question.',

    /**
     * The default email format error text, shown when the user submits an invalid email
     * @type {string}
     */
    'emailFormatErrorText': '* Please enter a valid email address.',

    /**
     * The default network error text, shown when there is an issue with the QA Submission
     * request.
     * @type {string}
     */
    'networkErrorText': 'We\'re sorry, an error occurred.',

    /**
     * Whether or not this component is expanded by default.
     * @type {boolean}
     */
    'expanded': true
  };
  /**
   * QuestionSubmissionComponent is a component that creates a form
   * thats displayed whenever a query is run. It enables the user
   * to submit questions that they cant find the answer for.
   */

  var QuestionSubmissionComponent =
  /*#__PURE__*/
  function (_Component) {
    _inherits(QuestionSubmissionComponent, _Component);

    function QuestionSubmissionComponent() {
      var _this;

      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var systemConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      _classCallCheck(this, QuestionSubmissionComponent);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(QuestionSubmissionComponent).call(this, Object.assign({}, DEFAULT_CONFIG$6, config), systemConfig));
      /**
       * Reference to the storage model
       * @type {string}
       */

      _this.moduleId = StorageKeys.QUESTION_SUBMISSION;
      /**
       * Reference to the locale as set in the global config
       * @type {string}
       */

      _this.locale = _this.core.globalStorage.getState(StorageKeys.LOCALE);
      /**
       * NOTE(billy) if this is a pattern we want to follow for configuration
       * we should bake it into the core class.
       */

      _this.validateConfig();
      /**
       * The QuestionSubmission component should be rendered only once a search has completed. If the
       * search results are still loading, the component should not be displayed.
       */


      var onResultsUpdate = function onResultsUpdate(results) {
        if (results.searchState !== SearchStates.SEARCH_LOADING) {
          var questionText = _this.core.globalStorage.getState(StorageKeys.QUERY);

          _this.setState(new QuestionSubmission({
            questionText: questionText,
            expanded: _this._config.expanded
          }));
        } else {
          _this.unMount();
        }
      };

      _this.core.globalStorage.on('update', StorageKeys.VERTICAL_RESULTS, onResultsUpdate);

      _this.core.globalStorage.on('update', StorageKeys.UNIVERSAL_RESULTS, onResultsUpdate);

      return _this;
    }
    /**
     * The template to render
     * @returns {string}
     * @override
     */


    _createClass(QuestionSubmissionComponent, [{
      key: "validateConfig",

      /**
       * validationConfig contains a bunch of rules
       * that are used to validate aginst configuration provided by the user
       */
      value: function validateConfig() {
        if (this._config.entityId === null || this._config.entityId === undefined) {
          throw new AnswersComponentError('`entityId` is a required configuration option for Question Submission', 'QuestionSubmission');
        }
      }
    }, {
      key: "beforeMount",
      value: function beforeMount() {
        // Avoid mounting the component if theres no data
        // Note, 1 because `config` is always part of the state.
        return Object.keys(this.getState()).length > 1;
      }
    }, {
      key: "onMount",
      value: function onMount() {
        var triggerEl = DOM.query(this._container, '.js-content-visibility-toggle');

        if (triggerEl !== null) {
          this.bindFormToggle(triggerEl);
        }

        var formEl = DOM.query(this._container, this._config.formSelector);

        if (formEl === null) {
          return;
        }

        this.bindFormFocus(formEl);
        this.bindFormSubmit(formEl);
      }
      /**
       * bindFormFocus will wire up the DOM focus event to serverside reporting
       * @param {HTMLElement} formEl
       */

    }, {
      key: "bindFormFocus",
      value: function bindFormFocus(formEl) {
        var _this2 = this;

        if (this.analyticsReporter === null) {
          return;
        }

        var questionText = DOM.query(formEl, '.js-question-text');
        DOM.on(questionText, 'focus', function () {
          _this2.analyticsReporter.report(_this2.getAnalyticsEvent('QUESTION_FOCUS'));
        });
      }
      /**
       * bindFormSubmit handles submitting the question to the server,
       * and submits an event to serverside reporting
       * @param {HTMLElement} formEl
       */

    }, {
      key: "bindFormSubmit",
      value: function bindFormSubmit(formEl) {
        var _this3 = this;

        DOM.on(formEl, 'submit', function (e) {
          e.preventDefault();

          _this3.analyticsReporter.report(_this3.getAnalyticsEvent('QUESTION_SUBMIT')); // TODO(billy) we probably want to disable the form from being submitted twice


          var errors = _this3.validate(formEl);

          var formData = _this3.parse(formEl);

          if (Object.keys(errors).length) {
            return _this3.setState(new QuestionSubmission(formData, errors));
          }

          _this3.core.submitQuestion({
            'entityId': _this3._config.entityId,
            'questionLanguage': _this3.locale,
            'site': 'FIRSTPARTY',
            'name': formData.name,
            'email': formData.email,
            'questionText': formData.questionText,
            'questionDescription': formData.questionDescription
          })["catch"](function (error) {
            _this3.setState(new QuestionSubmission(formData, {
              'network': 'We\'re sorry, an error occurred.'
            }));

            throw error;
          });
        });
      }
      /**
       * bindFormToggle handles expanding and mimimizing the component's form.
       * @param {HTMLElement} triggerEl
       */

    }, {
      key: "bindFormToggle",
      value: function bindFormToggle(triggerEl) {
        var _this4 = this;

        DOM.on(triggerEl, 'click', function (e) {
          var formData = _this4.getState();

          _this4.setState(new QuestionSubmission(_objectSpread({}, formData, {
            'expanded': !formData.questionExpanded,
            'submitted': formData.questionSubmitted
          }), formData.errors));
        });
      }
      /**
       * Takes the form, and builds a object that represents the input names
       * and text fields.
       * @param {HTMLElement} formEl
       * @returns {object}
       */

    }, {
      key: "parse",
      value: function parse(formEl) {
        var inputFields = DOM.queryAll(formEl, '.js-question-field');

        if (!inputFields || inputFields.length === 0) {
          return {};
        }

        var obj = {};

        for (var i = 0; i < inputFields.length; i++) {
          var val = inputFields[i].value;

          if (inputFields[i].type === 'checkbox') {
            val = inputFields[i].checked;
          }

          obj[inputFields[i].name] = val;
        }

        return obj;
      }
      /**
       * Validates the fields for correct formatting
       * @param {HTMLElement} formEl
       * @returns {Object} errors object if any errors found
       */

    }, {
      key: "validate",
      value: function validate(formEl) {
        var errors = {};
        var fields = DOM.queryAll(formEl, '.js-question-field');

        for (var i = 0; i < fields.length; i++) {
          if (!fields[i].checkValidity()) {
            if (i === 0) {
              // set focus state on first error
              fields[i].focus();
            }

            switch (fields[i].name) {
              case 'email':
                errors['emailError'] = true;

                if (!fields[i].validity.valueMissing) {
                  errors['emailErrorText'] = this._config.emailFormatErrorText;
                }

                break;

              case 'name':
                errors['nameError'] = true;
                break;

              case 'privacyPolicy':
                errors['privacyPolicyErrorText'] = this._config.privacyPolicyErrorText;
                errors['privacyPolicyError'] = true;
                break;

              case 'questionText':
                errors['questionTextError'] = true;
                break;
            }
          }
        }

        return errors;
      }
      /**
       * Returns an options object describing the context of a reportable event
       */

    }, {
      key: "getAnalyticsEvent",
      value: function getAnalyticsEvent(eventType) {
        var analyticsEvent = new AnalyticsEvent(eventType);
        analyticsEvent.addOptions({
          verticalConfigId: this._verticalKey,
          searcher: this._verticalKey ? 'VERTICAL' : 'UNIVERSAL'
        });
        return analyticsEvent;
      }
    }], [{
      key: "defaultTemplateName",
      value: function defaultTemplateName(config) {
        return 'questions/questionsubmission';
      }
      /**
       * The public interface alias for the component
       * @returns {string}
       * @override
       */

    }, {
      key: "type",
      get: function get() {
        return 'QASubmission';
      }
    }]);

    return QuestionSubmissionComponent;
  }(Component);

  var IconComponent =
  /*#__PURE__*/
  function (_Component) {
    _inherits(IconComponent, _Component);

    /**
     * IconComponent
     * @param opts
     * @param opts.iconName {string}
     * @param opts.iconUrl {string}
     */
    function IconComponent() {
      var _this;

      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var systemOpts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      _classCallCheck(this, IconComponent);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(IconComponent).call(this, opts, systemOpts));
      /**
       * name of an icon from the default icon set
       * @type {string}
       */

      _this.iconName = opts.iconName || 'default';
      /**
       * the url to a custom image icon
       * @type {null}
       */

      _this.iconUrl = opts.iconUrl || null;
      /**
       * An additional string to append to the icon's css class. Multiple
       * classes should be space delimited.
       */

      _this.classNames = opts.classNames || null;
      /**
       * A unique id to pass to the icon.
       * @type {Object}
       */

      _this.complexContentsParams = opts.complexContentsParams || {};
      return _this;
    }

    _createClass(IconComponent, [{
      key: "setState",

      /**
       * overrides default functionality to provide name and markup
       * @param data
       * @returns {IconComponent}
       */
      value: function setState(data) {
        return _get(_getPrototypeOf(IconComponent.prototype), "setState", this).call(this, Object.assign(data, {
          iconUrl: this.iconUrl,
          iconName: this.iconName,
          name: this.iconName ? this.iconName : 'custom',
          classNames: this.classNames,
          complexContentsParams: this.complexContentsParams
        }));
      }
    }], [{
      key: "defaultTemplateName",

      /**
       * The template to render
       * @returns {string}
       * @override
       */
      value: function defaultTemplateName(config) {
        return 'icons/icon';
      }
      /**
       * allowing duplicates
       * @returns {boolean}
       * @override
       */

    }, {
      key: "areDuplicateNamesAllowed",
      value: function areDuplicateNamesAllowed() {
        return true;
      }
    }, {
      key: "type",
      get: function get() {
        return 'IconComponent';
      }
    }]);

    return IconComponent;
  }(Component);

  var CTAConfig = function CTAConfig() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, CTAConfig);

    Object.assign(this, config);
    /**
     * Label below the CTA icon
     * @type {string}
     */

    this.label = config.label;
    /**
     * CTA icon, maps to a set of icons.
     * @type {string}
     */

    this.icon = config.icon;
    /**
     * Url to custom icon, has priority over icon.
     * @type {string}
     */

    this.iconUrl = config.iconUrl;
    /**
     * Whether the DOM should include legacy class names
     * @type {boolean}
     */

    this.includeLegacyClasses = config.includeLegacyClasses || false;
    /**
     * Click through url for the icon and label
     * @type {string}
     */

    this.url = config.url;
    /**
     * Analytics event that should fire:
     * @type {string}
     */

    this.analyticsEventType = config.analytics || config.eventType || 'CTA_CLICK';
    /**
     * The target attribute for the CTA link.
     * @type {boolean}
     */

    this.target = config.target || '_blank';
    /**
     * The eventOptions needed for the event to fire, passed as a string or Object
     * from config.dataMappings || {}.
     * @type {Object}
     */

    if (typeof config.eventOptions === 'string') {
      this.eventOptions = JSON.parse(config.eventOptions);
    }

    this.eventOptions = this.eventOptions;
    /**
     * Additional css className modifiers for the cta
     * @type {string}
     */

    this._ctaModifiers = config._ctaModifiers;
    /**
     * Whether the cta is the only one in its CTACollectionComponent
     * @type {boolean}
     */

    this._isSolo = config._isSolo || false;
  };

  var CTAComponent =
  /*#__PURE__*/
  function (_Component) {
    _inherits(CTAComponent, _Component);

    function CTAComponent() {
      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var systemConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      _classCallCheck(this, CTAComponent);

      return _possibleConstructorReturn(this, _getPrototypeOf(CTAComponent).call(this, new CTAConfig(config), systemConfig));
    }

    _createClass(CTAComponent, [{
      key: "onMount",
      value: function onMount() {
        var _this = this;

        var el = DOM.query(this._container, ".js-yxt-CTA");

        if (el && this._config.eventOptions) {
          DOM.on(el, 'mousedown', function (e) {
            if (e.button === 0 || e.button === 1) {
              _this.reportAnalyticsEvent();
            }
          });
        }
      }
    }, {
      key: "setState",
      value: function setState(data) {
        return _get(_getPrototypeOf(CTAComponent.prototype), "setState", this).call(this, _objectSpread({}, data, {
          hasIcon: this._config.icon || this._config.iconUrl
        }));
      }
    }, {
      key: "reportAnalyticsEvent",
      value: function reportAnalyticsEvent() {
        var analyticsEvent = new AnalyticsEvent(this._config.analyticsEventType);
        analyticsEvent.addOptions(this._config.eventOptions);
        this.analyticsReporter.report(analyticsEvent);
      }
    }], [{
      key: "defaultTemplateName",
      value: function defaultTemplateName(config) {
        return 'ctas/cta';
      }
    }, {
      key: "type",
      get: function get() {
        return 'CTA';
      }
    }]);

    return CTAComponent;
  }(Component);

  /** @module */
  var COMPONENT_CLASS_LIST = [// Core Component
  Component, // Navigation Components
  NavigationComponent, // Search Components
  SearchComponent, FilterSearchComponent, AutoCompleteComponent, SpellCheckComponent, LocationBiasComponent, // Filter Components
  FilterBoxComponent, FilterOptionsComponent, RangeFilterComponent, DateRangeFilterComponent, FacetsComponent, GeoLocationComponent, SortOptionsComponent, // Results Components
  DirectAnswerComponent, UniversalResultsComponent, VerticalResultsComponent, PaginationComponent, AccordionResultsComponent, MapComponent, AlternativeVerticalsComponent, ResultsHeaderComponent, // Card Components
  CardComponent, StandardCardComponent, AccordionCardComponent, LegacyCardComponent, // Questions Components
  QuestionSubmissionComponent, // Helper Components
  IconComponent, CTAComponent, CTACollectionComponent];
  /**
   * The component registry is a map that contains
   * all available component classes used for creation or extension.
   * Each component class has a unique type, which is used as the key for the registry
   * @type {Object.<string, Component>}
   */

  var COMPONENT_REGISTRY = COMPONENT_CLASS_LIST.reduce(function (registry, clazz) {
    registry[clazz.type] = clazz;
    return registry;
  }, {});

  /**
   * ComponentManager is a Singletone that contains both an internal registry of
   * eligible components to be created, as well as keeps track of the current
   * instantiated and active components.
   *
   * ALL components should be constructed using the {ComponentManager} via its `create` method.
   */

  var ComponentManager =
  /*#__PURE__*/
  function () {
    function ComponentManager() {
      _classCallCheck(this, ComponentManager);

      /**
       * The active components is an internal container to keep track
       * of all of the components that have been constructed
       */
      this._activeComponents = [];
      /**
       * A local reference to the core library dependency
       *
       * The Core contains both the storage AND services that are needed for performing operations
       * like search and auto complete.
       *
       * The storage is the source of truth for the state of ALL components.
       * Whenever the storage is updated, the state gets pushed down to the necessary components.
       * @type {Core}
       */

      this._core = null;
      /**
       * The primary renderer to use for all components
       * @type {HandlebarsRenderer}
       */

      this._renderer = null;
      /**
       * A local reference to the analytics reporter dependency
       */

      this._analyticsReporter = null;
      /**
       * A mapping from component types to component names, as these may be configured by a user
       */

      this._componentTypeToComponentNames = {};
    }

    _createClass(ComponentManager, [{
      key: "setRenderer",
      value: function setRenderer(renderer) {
        this._renderer = renderer;
        return this;
      }
    }, {
      key: "setCore",
      value: function setCore(core) {
        this._core = core;
        return this;
      }
    }, {
      key: "setAnalyticsReporter",
      value: function setAnalyticsReporter(reporter) {
        this._analyticsReporter = reporter;
        return this;
      }
      /**
       * registers a component to be eligible for creation and override.
       * @param {Component} The Component Class to register
       */

    }, {
      key: "register",
      value: function register(componentClazz) {
        COMPONENT_REGISTRY[componentClazz.type] = componentClazz;
        return this;
      }
      /**
       * Returns components with names similar to the passed in component class.
       * @param {string} componentType
       */

    }, {
      key: "getSimilarComponents",
      value: function getSimilarComponents(componentType) {
        var similarComponents = Object.keys(COMPONENT_REGISTRY).filter(function (type) {
          return type.startsWith(componentType.substring(0, 2));
        });

        if (similarComponents.length === 0) {
          similarComponents = Object.keys(COMPONENT_REGISTRY);
        }

        return similarComponents;
      }
      /**
       * create is the entry point for constructing any and all components.
       * It will instantiate a new instance of the component, and both apply
       * initial state from the storage and bind it to the storage for updates.
       * @param {string} componentType The component type to create
       * @param {Object} opts The options to pipe to the construction of the component
       */

    }, {
      key: "create",
      value: function create(componentType, opts) {
        // Every component needs local access to the component manager
        // because sometimes components have subcomponents that need to be
        // constructed during creation
        var systemOpts = {
          core: this._core,
          renderer: this._renderer,
          analyticsReporter: this._analyticsReporter,
          componentManager: this
        };
        var componentClass = COMPONENT_REGISTRY[componentType];

        if (!componentClass) {
          throw new AnswersComponentError("Component type ".concat(componentType, " is not recognized as a valid component.") + " You might have meant ".concat(this.getSimilarComponents(componentType).join(', '), "?"));
        }

        if (!componentClass.areDuplicateNamesAllowed() && this._activeComponents.some(function (c) {
          return c.name === opts.name;
        })) {
          throw new AnswersComponentError("Another component with name ".concat(opts.name, " already exists"), componentType);
        }

        var config = _objectSpread({
          isTwin: this._activeComponents.some(function (component) {
            return component.constructor.type === componentType;
          })
        }, opts); // Instantiate our new component and keep track of it


        var component = new COMPONENT_REGISTRY[componentType](config, systemOpts).init(config);

        this._activeComponents.push(component);

        if (!this._componentTypeToComponentNames[componentType]) {
          this._componentTypeToComponentNames[componentType] = [];
        }

        this._componentTypeToComponentNames[componentType].push(component.name); // If there is a global storage to power state, apply the state
        // from the storage to the component, and then bind the component
        // state to the storage via its updates


        if (this._core && this._core.globalStorage !== null) {
          if (component.moduleId === undefined || component.moduleId === null) {
            return component;
          }

          this._core.globalStorage.on('update', component.moduleId, function (data) {
            component.setState(data);
          });
        }

        return component;
      }
      /**
       * Remove the provided component from the list of active components and remove
       * the associated storage event listener
       * @param {Component} component The component to remove
       */

    }, {
      key: "remove",
      value: function remove(component) {
        this._core.globalStorage.off('update', component.moduleId);

        var index = this._activeComponents.findIndex(function (c) {
          return c.name === component.name;
        });

        this._activeComponents.splice(index, 1);
      }
      /**
       * Remove the component with the given name
       * @param {string} name The name of the compnent to remove
       */

    }, {
      key: "removeByName",
      value: function removeByName(name) {
        var component = this._activeComponents.find(function (c) {
          return c.name === name;
        });

        component.remove();
        DOM.empty(component._container);
      }
    }, {
      key: "getActiveComponent",
      value: function getActiveComponent(type) {
        return this._activeComponents.find(function (c) {
          return c.constructor.type === type;
        });
      }
      /**
       * Returns a concatenated list of all names associated with the given component types
       * @param {string[]} type The types of the component
       * @returns {string[]} The component names for the component types
       */

    }, {
      key: "getComponentNamesForComponentTypes",
      value: function getComponentNamesForComponentTypes(types) {
        var _this = this;

        return types.reduce(function (names, type) {
          return names.concat(_this._componentTypeToComponentNames[type] || []);
        }, []);
      }
    }], [{
      key: "getInstance",
      value: function getInstance() {
        if (!this.instance) {
          this.instance = new ComponentManager();
        }

        return this.instance;
      }
    }]);

    return ComponentManager;
  }();

  /** @module VerticalPagesConfig */
  var VerticalPageConfig =
  /*#__PURE__*/
  function () {
    function VerticalPageConfig() {
      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      _classCallCheck(this, VerticalPageConfig);

      /**
       * The name of the tab that is exposed for the link
       * @type {string}
       */
      this.label = config.label || null;
      /**
       * The complete URL, including the params
       * @type {string}
       */

      this.url = config.url || null;
      /**
       * The serverside vertical config id that this is referenced to.
       * By providing this, enables dynamic sorting based on results.
       * @type {string}
       */

      this.verticalKey = config.verticalKey || null;
      /**
       * Determines whether to show this tab in the navigation component
       * @type {boolean}
       */

      this.hideInNavigation = config.hideInNavigation || false;
      /**
       * Determines whether to show this tab first in the order
       * @type {boolean}
       */

      this.isFirst = config.isFirst || false;
      /**
       * Determines whether or not to apply a special class to the
       * markup to determine if it's an active tab
       * @type {boolean}
       */

      this.isActive = config.isActive || false;
      /**
       * URL of an icon
       * @type {string}
       */

      this.iconUrl = config.iconUrl;
      /**
       * name of an icon from the default icon set
       * @type {string}
       */

      this.icon = config.icon;
      Object.freeze(this);
    }

    _createClass(VerticalPageConfig, [{
      key: "validate",
      value: function validate() {}
    }]);

    return VerticalPageConfig;
  }();

  var VerticalPagesConfig =
  /*#__PURE__*/
  function () {
    function VerticalPagesConfig() {
      var pages = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

      _classCallCheck(this, VerticalPagesConfig);

      this.verticalPagesConfig = VerticalPagesConfig.from(pages);
    }
    /**
     * Using a getter that copies the data instead of providing a reference prevents it from being mutated.
     * This is important for global configuration.
     * @returns {Array<VerticalPageConfig>}
     */


    _createClass(VerticalPagesConfig, [{
      key: "get",
      value: function get() {
        return this.verticalPagesConfig.map(function (page) {
          return _objectSpread({}, page);
        });
      }
    }], [{
      key: "from",
      value: function from(pages) {
        return pages.map(function (page) {
          return new VerticalPageConfig(page);
        });
      }
    }]);

    return VerticalPagesConfig;
  }();

  /**
   * This class provides access to the Answers Status page. This page indicates
   * if the front-end for a particular experience should be temporarily disabled
   * due to back-end issues.
   */

  var MasterSwitchApi =
  /*#__PURE__*/
  function () {
    function MasterSwitchApi(requestConfig, globalStorage) {
      _classCallCheck(this, MasterSwitchApi);

      this._request = new ApiRequest(requestConfig, globalStorage);
    }
    /**
     * Checks if the front-end for the given experience should be temporarily disabled.
     * Note that this check errs on the side of enabling the front-end. If the network call
     * does not complete successfully, due to timeout or other error, those failures are caught.
     * In these failure cases, the assumption is that things are enabled.
     *
     * @returns {Promise<boolean>} A Promise containing a boolean indicating if the front-end
     *                             should be disabled.
     */


    _createClass(MasterSwitchApi, [{
      key: "isDisabled",
      value: function isDisabled() {
        var _this = this;

        // A 100ms timeout is enforced on the status call.
        var timeout = new Promise(function (resolve, reject) {
          setTimeout(reject, 100);
        });
        return new Promise(function (resolve, reject) {
          Promise.race([_this._request.get({
            credentials: 'omit'
          }), timeout]).then(function (response) {
            return response.json();
          }).then(function (status) {
            return status && status.disabled;
          }).then(function (isDisabled) {
            return resolve(!!isDisabled);
          })["catch"](function () {
            return resolve(false);
          });
        });
      }
      /**
       * Creates a new {@link MasterSwitchApi} from the provided parameters.
       *
       * @param {string} apiKey The apiKey of the experience.
       * @param {string} experienceKey The identifier of the experience.
       * @param {GlobalStorage} globalStorage The {@link GlobalStorage} instance.
       * @returns {MasterSwitchApi} The new {@link MasterSwitchApi} instance.
       */

    }], [{
      key: "from",
      value: function from(apiKey, experienceKey, globalStorage) {
        var requestConfig = {
          apiKey: apiKey,
          baseUrl: 'https://answersstatus.pagescdn.com/',
          endpoint: "".concat(apiKey, "/").concat(experienceKey, "/status.json")
        };
        return new MasterSwitchApi(requestConfig, globalStorage);
      }
    }]);

    return MasterSwitchApi;
  }();

  var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

  function createCommonjsModule(fn, module) {
  	return module = { exports: {} }, fn(module, module.exports), module.exports;
  }

  var rtfConverter_min = createCommonjsModule(function (module, exports) {
  !function(e,r){module.exports=r();}(commonjsGlobal,function(){var e="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof commonjsGlobal?commonjsGlobal:"undefined"!=typeof self?self:{};function r(){throw new Error("Dynamic requires are not currently supported by rollup-plugin-commonjs")}var t,n=(function(t,n){t.exports=function e(t,n,o){function s(a,l){if(!n[a]){if(!t[a]){var c=r;if(!l&&c)return c(a,!0);if(i)return i(a,!0);var u=new Error("Cannot find module '"+a+"'");throw u.code="MODULE_NOT_FOUND",u}var p=n[a]={exports:{}};t[a][0].call(p.exports,function(e){var r=t[a][1][e];return s(r||e)},p,p.exports,e,t,n,o);}return n[a].exports}for(var i=r,a=0;a<o.length;a++)s(o[a]);return s}({1:[function(e,r,t){r.exports=e("entities/lib/maps/entities.json");},{"entities/lib/maps/entities.json":52}],2:[function(e,r,t){r.exports=["address","article","aside","base","basefont","blockquote","body","caption","center","col","colgroup","dd","details","dialog","dir","div","dl","dt","fieldset","figcaption","figure","footer","form","frame","frameset","h1","h2","h3","h4","h5","h6","head","header","hr","html","iframe","legend","li","link","main","menu","menuitem","meta","nav","noframes","ol","optgroup","option","p","param","section","source","summary","table","tbody","td","tfoot","th","thead","title","tr","track","ul"];},{}],3:[function(e,r,t){var n="<[A-Za-z][A-Za-z0-9\\-]*(?:\\s+[a-zA-Z_:][a-zA-Z0-9:._-]*(?:\\s*=\\s*(?:[^\"'=<>`\\x00-\\x20]+|'[^']*'|\"[^\"]*\"))?)*\\s*\\/?>",o="<\\/[A-Za-z][A-Za-z0-9\\-]*\\s*>",s=new RegExp("^(?:"+n+"|"+o+"|\x3c!----\x3e|\x3c!--(?:-?[^>-])(?:-?[^-])*--\x3e|<[?].*?[?]>|<![A-Z]+\\s+[^>]*>|<!\\[CDATA\\[[\\s\\S]*?\\]\\]>)"),i=new RegExp("^(?:"+n+"|"+o+")");r.exports.HTML_TAG_RE=s,r.exports.HTML_OPEN_CLOSE_TAG_RE=i;},{}],4:[function(e,r,t){var n=Object.prototype.hasOwnProperty;function o(e,r){return n.call(e,r)}function s(e){return !(e>=55296&&e<=57343||e>=64976&&e<=65007||65535==(65535&e)||65534==(65535&e)||e>=0&&e<=8||11===e||e>=14&&e<=31||e>=127&&e<=159||e>1114111)}function i(e){if(e>65535){var r=55296+((e-=65536)>>10),t=56320+(1023&e);return String.fromCharCode(r,t)}return String.fromCharCode(e)}var a=/\\([!"#$%&'()*+,\-.\/:;<=>?@[\\\]^_`{|}~])/g,l=new RegExp(a.source+"|"+/&([a-z#][a-z0-9]{1,31});/gi.source,"gi"),c=/^#((?:x[a-f0-9]{1,8}|[0-9]{1,8}))/i,u=e("./entities"),p=/[&<>"]/,h=/[&<>"]/g,f={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;"};function d(e){return f[e]}var m=/[.?*+^$[\]\\(){}|-]/g,_=e("uc.micro/categories/P/regex");t.lib={},t.lib.mdurl=e("mdurl"),t.lib.ucmicro=e("uc.micro"),t.assign=function(e){return Array.prototype.slice.call(arguments,1).forEach(function(r){if(r){if("object"!=typeof r)throw new TypeError(r+"must be object");Object.keys(r).forEach(function(t){e[t]=r[t];});}}),e},t.isString=function(e){return "[object String]"===function(e){return Object.prototype.toString.call(e)}(e)},t.has=o,t.unescapeMd=function(e){return e.indexOf("\\")<0?e:e.replace(a,"$1")},t.unescapeAll=function(e){return e.indexOf("\\")<0&&e.indexOf("&")<0?e:e.replace(l,function(e,r,t){return r||function(e,r){var t=0;return o(u,r)?u[r]:35===r.charCodeAt(0)&&c.test(r)&&s(t="x"===r[1].toLowerCase()?parseInt(r.slice(2),16):parseInt(r.slice(1),10))?i(t):e}(e,t)})},t.isValidEntityCode=s,t.fromCodePoint=i,t.escapeHtml=function(e){return p.test(e)?e.replace(h,d):e},t.arrayReplaceAt=function(e,r,t){return [].concat(e.slice(0,r),t,e.slice(r+1))},t.isSpace=function(e){switch(e){case 9:case 32:return !0}return !1},t.isWhiteSpace=function(e){if(e>=8192&&e<=8202)return !0;switch(e){case 9:case 10:case 11:case 12:case 13:case 32:case 160:case 5760:case 8239:case 8287:case 12288:return !0}return !1},t.isMdAsciiPunct=function(e){switch(e){case 33:case 34:case 35:case 36:case 37:case 38:case 39:case 40:case 41:case 42:case 43:case 44:case 45:case 46:case 47:case 58:case 59:case 60:case 61:case 62:case 63:case 64:case 91:case 92:case 93:case 94:case 95:case 96:case 123:case 124:case 125:case 126:return !0;default:return !1}},t.isPunctChar=function(e){return _.test(e)},t.escapeRE=function(e){return e.replace(m,"\\$&")},t.normalizeReference=function(e){return e=e.trim().replace(/\s+/g," "),"Ṿ"==="ẞ".toLowerCase()&&(e=e.replace(/ẞ/g,"ß")),e.toLowerCase().toUpperCase()};},{"./entities":1,mdurl:58,"uc.micro":65,"uc.micro/categories/P/regex":63}],5:[function(e,r,t){t.parseLinkLabel=e("./parse_link_label"),t.parseLinkDestination=e("./parse_link_destination"),t.parseLinkTitle=e("./parse_link_title");},{"./parse_link_destination":6,"./parse_link_label":7,"./parse_link_title":8}],6:[function(e,r,t){var n=e("../common/utils").unescapeAll;r.exports=function(e,r,t){var o,s,i=r,a={ok:!1,pos:0,lines:0,str:""};if(60===e.charCodeAt(r)){for(r++;r<t;){if(10===(o=e.charCodeAt(r)))return a;if(62===o)return a.pos=r+1,a.str=n(e.slice(i+1,r)),a.ok=!0,a;92===o&&r+1<t?r+=2:r++;}return a}for(s=0;r<t&&32!==(o=e.charCodeAt(r))&&!(o<32||127===o);)if(92===o&&r+1<t)r+=2;else{if(40===o&&s++,41===o){if(0===s)break;s--;}r++;}return i===r?a:0!==s?a:(a.str=n(e.slice(i,r)),a.lines=0,a.pos=r,a.ok=!0,a)};},{"../common/utils":4}],7:[function(e,r,t){r.exports=function(e,r,t){var n,o,s,i,a=-1,l=e.posMax,c=e.pos;for(e.pos=r+1,n=1;e.pos<l;){if(93===(s=e.src.charCodeAt(e.pos))&&0==--n){o=!0;break}if(i=e.pos,e.md.inline.skipToken(e),91===s)if(i===e.pos-1)n++;else if(t)return e.pos=c,-1}return o&&(a=e.pos),e.pos=c,a};},{}],8:[function(e,r,t){var n=e("../common/utils").unescapeAll;r.exports=function(e,r,t){var o,s,i=0,a=r,l={ok:!1,pos:0,lines:0,str:""};if(r>=t)return l;if(34!==(s=e.charCodeAt(r))&&39!==s&&40!==s)return l;for(r++,40===s&&(s=41);r<t;){if((o=e.charCodeAt(r))===s)return l.pos=r+1,l.lines=i,l.str=n(e.slice(a+1,r)),l.ok=!0,l;10===o?i++:92===o&&r+1<t&&(r++,10===e.charCodeAt(r)&&i++),r++;}return l};},{"../common/utils":4}],9:[function(e,r,t){var n=e("./common/utils"),o=e("./helpers"),s=e("./renderer"),i=e("./parser_core"),a=e("./parser_block"),l=e("./parser_inline"),c=e("linkify-it"),u=e("mdurl"),p=e("punycode"),h={default:e("./presets/default"),zero:e("./presets/zero"),commonmark:e("./presets/commonmark")},f=/^(vbscript|javascript|file|data):/,d=/^data:image\/(gif|png|jpeg|webp);/;function m(e){var r=e.trim().toLowerCase();return !f.test(r)||!!d.test(r)}var _=["http:","https:","mailto:"];function g(e){var r=u.parse(e,!0);if(r.hostname&&(!r.protocol||_.indexOf(r.protocol)>=0))try{r.hostname=p.toASCII(r.hostname);}catch(e){}return u.encode(u.format(r))}function k(e){var r=u.parse(e,!0);if(r.hostname&&(!r.protocol||_.indexOf(r.protocol)>=0))try{r.hostname=p.toUnicode(r.hostname);}catch(e){}return u.decode(u.format(r))}function b(e,r){if(!(this instanceof b))return new b(e,r);r||n.isString(e)||(r=e||{},e="default"),this.inline=new l,this.block=new a,this.core=new i,this.renderer=new s,this.linkify=new c,this.validateLink=m,this.normalizeLink=g,this.normalizeLinkText=k,this.utils=n,this.helpers=n.assign({},o),this.options={},this.configure(e),r&&this.set(r);}b.prototype.set=function(e){return n.assign(this.options,e),this},b.prototype.configure=function(e){var r,t=this;if(n.isString(e)&&!(e=h[r=e]))throw new Error('Wrong `markdown-it` preset "'+r+'", check name');if(!e)throw new Error("Wrong `markdown-it` preset, can't be empty");return e.options&&t.set(e.options),e.components&&Object.keys(e.components).forEach(function(r){e.components[r].rules&&t[r].ruler.enableOnly(e.components[r].rules),e.components[r].rules2&&t[r].ruler2.enableOnly(e.components[r].rules2);}),this},b.prototype.enable=function(e,r){var t=[];Array.isArray(e)||(e=[e]),["core","block","inline"].forEach(function(r){t=t.concat(this[r].ruler.enable(e,!0));},this),t=t.concat(this.inline.ruler2.enable(e,!0));var n=e.filter(function(e){return t.indexOf(e)<0});if(n.length&&!r)throw new Error("MarkdownIt. Failed to enable unknown rule(s): "+n);return this},b.prototype.disable=function(e,r){var t=[];Array.isArray(e)||(e=[e]),["core","block","inline"].forEach(function(r){t=t.concat(this[r].ruler.disable(e,!0));},this),t=t.concat(this.inline.ruler2.disable(e,!0));var n=e.filter(function(e){return t.indexOf(e)<0});if(n.length&&!r)throw new Error("MarkdownIt. Failed to disable unknown rule(s): "+n);return this},b.prototype.use=function(e){var r=[this].concat(Array.prototype.slice.call(arguments,1));return e.apply(e,r),this},b.prototype.parse=function(e,r){if("string"!=typeof e)throw new Error("Input data should be a String");var t=new this.core.State(e,this,r);return this.core.process(t),t.tokens},b.prototype.render=function(e,r){return r=r||{},this.renderer.render(this.parse(e,r),this.options,r)},b.prototype.parseInline=function(e,r){var t=new this.core.State(e,this,r);return t.inlineMode=!0,this.core.process(t),t.tokens},b.prototype.renderInline=function(e,r){return r=r||{},this.renderer.render(this.parseInline(e,r),this.options,r)},r.exports=b;},{"./common/utils":4,"./helpers":5,"./parser_block":10,"./parser_core":11,"./parser_inline":12,"./presets/commonmark":13,"./presets/default":14,"./presets/zero":15,"./renderer":16,"linkify-it":53,mdurl:58,punycode:60}],10:[function(e,r,t){var n=e("./ruler"),o=[["table",e("./rules_block/table"),["paragraph","reference"]],["code",e("./rules_block/code")],["fence",e("./rules_block/fence"),["paragraph","reference","blockquote","list"]],["blockquote",e("./rules_block/blockquote"),["paragraph","reference","blockquote","list"]],["hr",e("./rules_block/hr"),["paragraph","reference","blockquote","list"]],["list",e("./rules_block/list"),["paragraph","reference","blockquote"]],["reference",e("./rules_block/reference")],["heading",e("./rules_block/heading"),["paragraph","reference","blockquote"]],["lheading",e("./rules_block/lheading")],["html_block",e("./rules_block/html_block"),["paragraph","reference","blockquote"]],["paragraph",e("./rules_block/paragraph")]];function s(){this.ruler=new n;for(var e=0;e<o.length;e++)this.ruler.push(o[e][0],o[e][1],{alt:(o[e][2]||[]).slice()});}s.prototype.tokenize=function(e,r,t){for(var n,o=this.ruler.getRules(""),s=o.length,i=r,a=!1,l=e.md.options.maxNesting;i<t&&(e.line=i=e.skipEmptyLines(i),!(i>=t))&&!(e.sCount[i]<e.blkIndent);){if(e.level>=l){e.line=t;break}for(n=0;n<s&&!o[n](e,i,t,!1);n++);e.tight=!a,e.isEmpty(e.line-1)&&(a=!0),(i=e.line)<t&&e.isEmpty(i)&&(a=!0,i++,e.line=i);}},s.prototype.parse=function(e,r,t,n){var o;e&&(o=new this.State(e,r,t,n),this.tokenize(o,o.line,o.lineMax));},s.prototype.State=e("./rules_block/state_block"),r.exports=s;},{"./ruler":17,"./rules_block/blockquote":18,"./rules_block/code":19,"./rules_block/fence":20,"./rules_block/heading":21,"./rules_block/hr":22,"./rules_block/html_block":23,"./rules_block/lheading":24,"./rules_block/list":25,"./rules_block/paragraph":26,"./rules_block/reference":27,"./rules_block/state_block":28,"./rules_block/table":29}],11:[function(e,r,t){var n=e("./ruler"),o=[["normalize",e("./rules_core/normalize")],["block",e("./rules_core/block")],["inline",e("./rules_core/inline")],["linkify",e("./rules_core/linkify")],["replacements",e("./rules_core/replacements")],["smartquotes",e("./rules_core/smartquotes")]];function s(){this.ruler=new n;for(var e=0;e<o.length;e++)this.ruler.push(o[e][0],o[e][1]);}s.prototype.process=function(e){var r,t,n;for(n=this.ruler.getRules(""),r=0,t=n.length;r<t;r++)n[r](e);},s.prototype.State=e("./rules_core/state_core"),r.exports=s;},{"./ruler":17,"./rules_core/block":30,"./rules_core/inline":31,"./rules_core/linkify":32,"./rules_core/normalize":33,"./rules_core/replacements":34,"./rules_core/smartquotes":35,"./rules_core/state_core":36}],12:[function(e,r,t){var n=e("./ruler"),o=[["text",e("./rules_inline/text")],["newline",e("./rules_inline/newline")],["escape",e("./rules_inline/escape")],["backticks",e("./rules_inline/backticks")],["strikethrough",e("./rules_inline/strikethrough").tokenize],["emphasis",e("./rules_inline/emphasis").tokenize],["link",e("./rules_inline/link")],["image",e("./rules_inline/image")],["autolink",e("./rules_inline/autolink")],["html_inline",e("./rules_inline/html_inline")],["entity",e("./rules_inline/entity")]],s=[["balance_pairs",e("./rules_inline/balance_pairs")],["strikethrough",e("./rules_inline/strikethrough").postProcess],["emphasis",e("./rules_inline/emphasis").postProcess],["text_collapse",e("./rules_inline/text_collapse")]];function i(){var e;for(this.ruler=new n,e=0;e<o.length;e++)this.ruler.push(o[e][0],o[e][1]);for(this.ruler2=new n,e=0;e<s.length;e++)this.ruler2.push(s[e][0],s[e][1]);}i.prototype.skipToken=function(e){var r,t,n=e.pos,o=this.ruler.getRules(""),s=o.length,i=e.md.options.maxNesting,a=e.cache;if(void 0===a[n]){if(e.level<i)for(t=0;t<s&&(e.level++,r=o[t](e,!0),e.level--,!r);t++);else e.pos=e.posMax;r||e.pos++,a[n]=e.pos;}else e.pos=a[n];},i.prototype.tokenize=function(e){for(var r,t,n=this.ruler.getRules(""),o=n.length,s=e.posMax,i=e.md.options.maxNesting;e.pos<s;){if(e.level<i)for(t=0;t<o&&!(r=n[t](e,!1));t++);if(r){if(e.pos>=s)break}else e.pending+=e.src[e.pos++];}e.pending&&e.pushPending();},i.prototype.parse=function(e,r,t,n){var o,s,i,a=new this.State(e,r,t,n);for(this.tokenize(a),s=this.ruler2.getRules(""),i=s.length,o=0;o<i;o++)s[o](a);},i.prototype.State=e("./rules_inline/state_inline"),r.exports=i;},{"./ruler":17,"./rules_inline/autolink":37,"./rules_inline/backticks":38,"./rules_inline/balance_pairs":39,"./rules_inline/emphasis":40,"./rules_inline/entity":41,"./rules_inline/escape":42,"./rules_inline/html_inline":43,"./rules_inline/image":44,"./rules_inline/link":45,"./rules_inline/newline":46,"./rules_inline/state_inline":47,"./rules_inline/strikethrough":48,"./rules_inline/text":49,"./rules_inline/text_collapse":50}],13:[function(e,r,t){r.exports={options:{html:!0,xhtmlOut:!0,breaks:!1,langPrefix:"language-",linkify:!1,typographer:!1,quotes:"“”‘’",highlight:null,maxNesting:20},components:{core:{rules:["normalize","block","inline"]},block:{rules:["blockquote","code","fence","heading","hr","html_block","lheading","list","reference","paragraph"]},inline:{rules:["autolink","backticks","emphasis","entity","escape","html_inline","image","link","newline","text"],rules2:["balance_pairs","emphasis","text_collapse"]}}};},{}],14:[function(e,r,t){r.exports={options:{html:!1,xhtmlOut:!1,breaks:!1,langPrefix:"language-",linkify:!1,typographer:!1,quotes:"“”‘’",highlight:null,maxNesting:100},components:{core:{},block:{},inline:{}}};},{}],15:[function(e,r,t){r.exports={options:{html:!1,xhtmlOut:!1,breaks:!1,langPrefix:"language-",linkify:!1,typographer:!1,quotes:"“”‘’",highlight:null,maxNesting:20},components:{core:{rules:["normalize","block","inline"]},block:{rules:["paragraph"]},inline:{rules:["text"],rules2:["balance_pairs","text_collapse"]}}};},{}],16:[function(e,r,t){var n=e("./common/utils").assign,o=e("./common/utils").unescapeAll,s=e("./common/utils").escapeHtml,i={};function a(){this.rules=n({},i);}i.code_inline=function(e,r,t,n,o){var i=e[r];return "<code"+o.renderAttrs(i)+">"+s(e[r].content)+"</code>"},i.code_block=function(e,r,t,n,o){var i=e[r];return "<pre"+o.renderAttrs(i)+"><code>"+s(e[r].content)+"</code></pre>\n"},i.fence=function(e,r,t,n,i){var a,l,c,u,p=e[r],h=p.info?o(p.info).trim():"",f="";return h&&(f=h.split(/\s+/g)[0]),0===(a=t.highlight&&t.highlight(p.content,f)||s(p.content)).indexOf("<pre")?a+"\n":h?(l=p.attrIndex("class"),c=p.attrs?p.attrs.slice():[],l<0?c.push(["class",t.langPrefix+f]):c[l][1]+=" "+t.langPrefix+f,u={attrs:c},"<pre><code"+i.renderAttrs(u)+">"+a+"</code></pre>\n"):"<pre><code"+i.renderAttrs(p)+">"+a+"</code></pre>\n"},i.image=function(e,r,t,n,o){var s=e[r];return s.attrs[s.attrIndex("alt")][1]=o.renderInlineAsText(s.children,t,n),o.renderToken(e,r,t)},i.hardbreak=function(e,r,t){return t.xhtmlOut?"<br />\n":"<br>\n"},i.softbreak=function(e,r,t){return t.breaks?t.xhtmlOut?"<br />\n":"<br>\n":"\n"},i.text=function(e,r){return s(e[r].content)},i.html_block=function(e,r){return e[r].content},i.html_inline=function(e,r){return e[r].content},a.prototype.renderAttrs=function(e){var r,t,n;if(!e.attrs)return "";for(n="",r=0,t=e.attrs.length;r<t;r++)n+=" "+s(e.attrs[r][0])+'="'+s(e.attrs[r][1])+'"';return n},a.prototype.renderToken=function(e,r,t){var n,o="",s=!1,i=e[r];return i.hidden?"":(i.block&&-1!==i.nesting&&r&&e[r-1].hidden&&(o+="\n"),o+=(-1===i.nesting?"</":"<")+i.tag,o+=this.renderAttrs(i),0===i.nesting&&t.xhtmlOut&&(o+=" /"),i.block&&(s=!0,1===i.nesting&&r+1<e.length&&("inline"===(n=e[r+1]).type||n.hidden?s=!1:-1===n.nesting&&n.tag===i.tag&&(s=!1))),o+=s?">\n":">")},a.prototype.renderInline=function(e,r,t){for(var n,o="",s=this.rules,i=0,a=e.length;i<a;i++)n=e[i].type,void 0!==s[n]?o+=s[n](e,i,r,t,this):o+=this.renderToken(e,i,r);return o},a.prototype.renderInlineAsText=function(e,r,t){for(var n="",o=0,s=e.length;o<s;o++)"text"===e[o].type?n+=e[o].content:"image"===e[o].type&&(n+=this.renderInlineAsText(e[o].children,r,t));return n},a.prototype.render=function(e,r,t){var n,o,s,i="",a=this.rules;for(n=0,o=e.length;n<o;n++)"inline"===(s=e[n].type)?i+=this.renderInline(e[n].children,r,t):void 0!==a[s]?i+=a[e[n].type](e,n,r,t,this):i+=this.renderToken(e,n,r,t);return i},r.exports=a;},{"./common/utils":4}],17:[function(e,r,t){function n(){this.__rules__=[],this.__cache__=null;}n.prototype.__find__=function(e){for(var r=0;r<this.__rules__.length;r++)if(this.__rules__[r].name===e)return r;return -1},n.prototype.__compile__=function(){var e=this,r=[""];e.__rules__.forEach(function(e){e.enabled&&e.alt.forEach(function(e){r.indexOf(e)<0&&r.push(e);});}),e.__cache__={},r.forEach(function(r){e.__cache__[r]=[],e.__rules__.forEach(function(t){t.enabled&&(r&&t.alt.indexOf(r)<0||e.__cache__[r].push(t.fn));});});},n.prototype.at=function(e,r,t){var n=this.__find__(e),o=t||{};if(-1===n)throw new Error("Parser rule not found: "+e);this.__rules__[n].fn=r,this.__rules__[n].alt=o.alt||[],this.__cache__=null;},n.prototype.before=function(e,r,t,n){var o=this.__find__(e),s=n||{};if(-1===o)throw new Error("Parser rule not found: "+e);this.__rules__.splice(o,0,{name:r,enabled:!0,fn:t,alt:s.alt||[]}),this.__cache__=null;},n.prototype.after=function(e,r,t,n){var o=this.__find__(e),s=n||{};if(-1===o)throw new Error("Parser rule not found: "+e);this.__rules__.splice(o+1,0,{name:r,enabled:!0,fn:t,alt:s.alt||[]}),this.__cache__=null;},n.prototype.push=function(e,r,t){var n=t||{};this.__rules__.push({name:e,enabled:!0,fn:r,alt:n.alt||[]}),this.__cache__=null;},n.prototype.enable=function(e,r){Array.isArray(e)||(e=[e]);var t=[];return e.forEach(function(e){var n=this.__find__(e);if(n<0){if(r)return;throw new Error("Rules manager: invalid rule name "+e)}this.__rules__[n].enabled=!0,t.push(e);},this),this.__cache__=null,t},n.prototype.enableOnly=function(e,r){Array.isArray(e)||(e=[e]),this.__rules__.forEach(function(e){e.enabled=!1;}),this.enable(e,r);},n.prototype.disable=function(e,r){Array.isArray(e)||(e=[e]);var t=[];return e.forEach(function(e){var n=this.__find__(e);if(n<0){if(r)return;throw new Error("Rules manager: invalid rule name "+e)}this.__rules__[n].enabled=!1,t.push(e);},this),this.__cache__=null,t},n.prototype.getRules=function(e){return null===this.__cache__&&this.__compile__(),this.__cache__[e]||[]},r.exports=n;},{}],18:[function(e,r,t){var n=e("../common/utils").isSpace;r.exports=function(e,r,t,o){var s,i,a,l,c,u,p,h,f,d,m,_,g,k,b,v,y,x,C,A,w=e.lineMax,D=e.bMarks[r]+e.tShift[r],E=e.eMarks[r];if(e.sCount[r]-e.blkIndent>=4)return !1;if(62!==e.src.charCodeAt(D++))return !1;if(o)return !0;for(l=f=e.sCount[r]+D-(e.bMarks[r]+e.tShift[r]),32===e.src.charCodeAt(D)?(D++,l++,f++,s=!1,v=!0):9===e.src.charCodeAt(D)?(v=!0,(e.bsCount[r]+f)%4==3?(D++,l++,f++,s=!1):s=!0):v=!1,d=[e.bMarks[r]],e.bMarks[r]=D;D<E&&(i=e.src.charCodeAt(D),n(i));)9===i?f+=4-(f+e.bsCount[r]+(s?1:0))%4:f++,D++;for(m=[e.bsCount[r]],e.bsCount[r]=e.sCount[r]+1+(v?1:0),u=D>=E,k=[e.sCount[r]],e.sCount[r]=f-l,b=[e.tShift[r]],e.tShift[r]=D-e.bMarks[r],x=e.md.block.ruler.getRules("blockquote"),g=e.parentType,e.parentType="blockquote",A=!1,h=r+1;h<t&&(e.sCount[h]<e.blkIndent&&(A=!0),D=e.bMarks[h]+e.tShift[h],E=e.eMarks[h],!(D>=E));h++)if(62!==e.src.charCodeAt(D++)||A){if(u)break;for(y=!1,a=0,c=x.length;a<c;a++)if(x[a](e,h,t,!0)){y=!0;break}if(y){e.lineMax=h,0!==e.blkIndent&&(d.push(e.bMarks[h]),m.push(e.bsCount[h]),b.push(e.tShift[h]),k.push(e.sCount[h]),e.sCount[h]-=e.blkIndent);break}d.push(e.bMarks[h]),m.push(e.bsCount[h]),b.push(e.tShift[h]),k.push(e.sCount[h]),e.sCount[h]=-1;}else{for(l=f=e.sCount[h]+D-(e.bMarks[h]+e.tShift[h]),32===e.src.charCodeAt(D)?(D++,l++,f++,s=!1,v=!0):9===e.src.charCodeAt(D)?(v=!0,(e.bsCount[h]+f)%4==3?(D++,l++,f++,s=!1):s=!0):v=!1,d.push(e.bMarks[h]),e.bMarks[h]=D;D<E&&(i=e.src.charCodeAt(D),n(i));)9===i?f+=4-(f+e.bsCount[h]+(s?1:0))%4:f++,D++;u=D>=E,m.push(e.bsCount[h]),e.bsCount[h]=e.sCount[h]+1+(v?1:0),k.push(e.sCount[h]),e.sCount[h]=f-l,b.push(e.tShift[h]),e.tShift[h]=D-e.bMarks[h];}for(_=e.blkIndent,e.blkIndent=0,(C=e.push("blockquote_open","blockquote",1)).markup=">",C.map=p=[r,0],e.md.block.tokenize(e,r,h),(C=e.push("blockquote_close","blockquote",-1)).markup=">",e.lineMax=w,e.parentType=g,p[1]=e.line,a=0;a<b.length;a++)e.bMarks[a+r]=d[a],e.tShift[a+r]=b[a],e.sCount[a+r]=k[a],e.bsCount[a+r]=m[a];return e.blkIndent=_,!0};},{"../common/utils":4}],19:[function(e,r,t){r.exports=function(e,r,t){var n,o,s;if(e.sCount[r]-e.blkIndent<4)return !1;for(o=n=r+1;n<t;)if(e.isEmpty(n))n++;else{if(!(e.sCount[n]-e.blkIndent>=4))break;o=++n;}return e.line=o,(s=e.push("code_block","code",0)).content=e.getLines(r,o,4+e.blkIndent,!0),s.map=[r,e.line],!0};},{}],20:[function(e,r,t){r.exports=function(e,r,t,n){var o,s,i,a,l,c,u,p=!1,h=e.bMarks[r]+e.tShift[r],f=e.eMarks[r];if(e.sCount[r]-e.blkIndent>=4)return !1;if(h+3>f)return !1;if(126!==(o=e.src.charCodeAt(h))&&96!==o)return !1;if(l=h,h=e.skipChars(h,o),(s=h-l)<3)return !1;if(u=e.src.slice(l,h),i=e.src.slice(h,f),96===o&&i.indexOf(String.fromCharCode(o))>=0)return !1;if(n)return !0;for(a=r;!(++a>=t||(h=l=e.bMarks[a]+e.tShift[a],f=e.eMarks[a],h<f&&e.sCount[a]<e.blkIndent));)if(e.src.charCodeAt(h)===o&&!(e.sCount[a]-e.blkIndent>=4||(h=e.skipChars(h,o))-l<s||(h=e.skipSpaces(h))<f)){p=!0;break}return s=e.sCount[r],e.line=a+(p?1:0),(c=e.push("fence","code",0)).info=i,c.content=e.getLines(r+1,a,s,!0),c.markup=u,c.map=[r,e.line],!0};},{}],21:[function(e,r,t){var n=e("../common/utils").isSpace;r.exports=function(e,r,t,o){var s,i,a,l,c=e.bMarks[r]+e.tShift[r],u=e.eMarks[r];if(e.sCount[r]-e.blkIndent>=4)return !1;if(35!==(s=e.src.charCodeAt(c))||c>=u)return !1;for(i=1,s=e.src.charCodeAt(++c);35===s&&c<u&&i<=6;)i++,s=e.src.charCodeAt(++c);return !(i>6||c<u&&!n(s)||!o&&(u=e.skipSpacesBack(u,c),(a=e.skipCharsBack(u,35,c))>c&&n(e.src.charCodeAt(a-1))&&(u=a),e.line=r+1,(l=e.push("heading_open","h"+String(i),1)).markup="########".slice(0,i),l.map=[r,e.line],(l=e.push("inline","",0)).content=e.src.slice(c,u).trim(),l.map=[r,e.line],l.children=[],(l=e.push("heading_close","h"+String(i),-1)).markup="########".slice(0,i),0))};},{"../common/utils":4}],22:[function(e,r,t){var n=e("../common/utils").isSpace;r.exports=function(e,r,t,o){var s,i,a,l,c=e.bMarks[r]+e.tShift[r],u=e.eMarks[r];if(e.sCount[r]-e.blkIndent>=4)return !1;if(42!==(s=e.src.charCodeAt(c++))&&45!==s&&95!==s)return !1;for(i=1;c<u;){if((a=e.src.charCodeAt(c++))!==s&&!n(a))return !1;a===s&&i++;}return !(i<3||!o&&(e.line=r+1,(l=e.push("hr","hr",0)).map=[r,e.line],l.markup=Array(i+1).join(String.fromCharCode(s)),0))};},{"../common/utils":4}],23:[function(e,r,t){var n=e("../common/html_blocks"),o=e("../common/html_re").HTML_OPEN_CLOSE_TAG_RE,s=[[/^<(script|pre|style)(?=(\s|>|$))/i,/<\/(script|pre|style)>/i,!0],[/^<!--/,/-->/,!0],[/^<\?/,/\?>/,!0],[/^<![A-Z]/,/>/,!0],[/^<!\[CDATA\[/,/\]\]>/,!0],[new RegExp("^</?("+n.join("|")+")(?=(\\s|/?>|$))","i"),/^$/,!0],[new RegExp(o.source+"\\s*$"),/^$/,!1]];r.exports=function(e,r,t,n){var o,i,a,l,c=e.bMarks[r]+e.tShift[r],u=e.eMarks[r];if(e.sCount[r]-e.blkIndent>=4)return !1;if(!e.md.options.html)return !1;if(60!==e.src.charCodeAt(c))return !1;for(l=e.src.slice(c,u),o=0;o<s.length&&!s[o][0].test(l);o++);if(o===s.length)return !1;if(n)return s[o][2];if(i=r+1,!s[o][1].test(l))for(;i<t&&!(e.sCount[i]<e.blkIndent);i++)if(c=e.bMarks[i]+e.tShift[i],u=e.eMarks[i],l=e.src.slice(c,u),s[o][1].test(l)){0!==l.length&&i++;break}return e.line=i,(a=e.push("html_block","",0)).map=[r,i],a.content=e.getLines(r,i,e.blkIndent,!0),!0};},{"../common/html_blocks":2,"../common/html_re":3}],24:[function(e,r,t){r.exports=function(e,r,t){var n,o,s,i,a,l,c,u,p,h,f=r+1,d=e.md.block.ruler.getRules("paragraph");if(e.sCount[r]-e.blkIndent>=4)return !1;for(h=e.parentType,e.parentType="paragraph";f<t&&!e.isEmpty(f);f++)if(!(e.sCount[f]-e.blkIndent>3)){if(e.sCount[f]>=e.blkIndent&&(l=e.bMarks[f]+e.tShift[f],c=e.eMarks[f],l<c&&(45===(p=e.src.charCodeAt(l))||61===p)&&(l=e.skipChars(l,p),(l=e.skipSpaces(l))>=c))){u=61===p?1:2;break}if(!(e.sCount[f]<0)){for(o=!1,s=0,i=d.length;s<i;s++)if(d[s](e,f,t,!0)){o=!0;break}if(o)break}}return !!u&&(n=e.getLines(r,f,e.blkIndent,!1).trim(),e.line=f+1,(a=e.push("heading_open","h"+String(u),1)).markup=String.fromCharCode(p),a.map=[r,e.line],(a=e.push("inline","",0)).content=n,a.map=[r,e.line-1],a.children=[],(a=e.push("heading_close","h"+String(u),-1)).markup=String.fromCharCode(p),e.parentType=h,!0)};},{}],25:[function(e,r,t){var n=e("../common/utils").isSpace;function o(e,r){var t,o,s,i;return o=e.bMarks[r]+e.tShift[r],s=e.eMarks[r],42!==(t=e.src.charCodeAt(o++))&&45!==t&&43!==t?-1:o<s&&(i=e.src.charCodeAt(o),!n(i))?-1:o}function s(e,r){var t,o=e.bMarks[r]+e.tShift[r],s=o,i=e.eMarks[r];if(s+1>=i)return -1;if((t=e.src.charCodeAt(s++))<48||t>57)return -1;for(;;){if(s>=i)return -1;if(!((t=e.src.charCodeAt(s++))>=48&&t<=57)){if(41===t||46===t)break;return -1}if(s-o>=10)return -1}return s<i&&(t=e.src.charCodeAt(s),!n(t))?-1:s}r.exports=function(e,r,t,n){var i,a,l,c,u,p,h,f,d,m,_,g,k,b,v,y,x,C,A,w,D,E,q,F,S,L,z,T,I=!1,R=!0;if(e.sCount[r]-e.blkIndent>=4)return !1;if(e.listIndent>=0&&e.sCount[r]-e.listIndent>=4&&e.sCount[r]<e.blkIndent)return !1;if(n&&"paragraph"===e.parentType&&e.tShift[r]>=e.blkIndent&&(I=!0),(q=s(e,r))>=0){if(h=!0,S=e.bMarks[r]+e.tShift[r],k=Number(e.src.substr(S,q-S-1)),I&&1!==k)return !1}else{if(!((q=o(e,r))>=0))return !1;h=!1;}if(I&&e.skipSpaces(q)>=e.eMarks[r])return !1;if(g=e.src.charCodeAt(q-1),n)return !0;for(_=e.tokens.length,h?(T=e.push("ordered_list_open","ol",1),1!==k&&(T.attrs=[["start",k]])):T=e.push("bullet_list_open","ul",1),T.map=m=[r,0],T.markup=String.fromCharCode(g),v=r,F=!1,z=e.md.block.ruler.getRules("list"),C=e.parentType,e.parentType="list";v<t;){for(E=q,b=e.eMarks[v],p=y=e.sCount[v]+q-(e.bMarks[r]+e.tShift[r]);E<b;){if(9===(i=e.src.charCodeAt(E)))y+=4-(y+e.bsCount[v])%4;else{if(32!==i)break;y++;}E++;}if((u=(a=E)>=b?1:y-p)>4&&(u=1),c=p+u,(T=e.push("list_item_open","li",1)).markup=String.fromCharCode(g),T.map=f=[r,0],D=e.tight,w=e.tShift[r],A=e.sCount[r],x=e.listIndent,e.listIndent=e.blkIndent,e.blkIndent=c,e.tight=!0,e.tShift[r]=a-e.bMarks[r],e.sCount[r]=y,a>=b&&e.isEmpty(r+1)?e.line=Math.min(e.line+2,t):e.md.block.tokenize(e,r,t,!0),e.tight&&!F||(R=!1),F=e.line-r>1&&e.isEmpty(e.line-1),e.blkIndent=e.listIndent,e.listIndent=x,e.tShift[r]=w,e.sCount[r]=A,e.tight=D,(T=e.push("list_item_close","li",-1)).markup=String.fromCharCode(g),v=r=e.line,f[1]=v,a=e.bMarks[r],v>=t)break;if(e.sCount[v]<e.blkIndent)break;if(e.sCount[r]-e.blkIndent>=4)break;for(L=!1,l=0,d=z.length;l<d;l++)if(z[l](e,v,t,!0)){L=!0;break}if(L)break;if(h){if((q=s(e,v))<0)break}else if((q=o(e,v))<0)break;if(g!==e.src.charCodeAt(q-1))break}return (T=h?e.push("ordered_list_close","ol",-1):e.push("bullet_list_close","ul",-1)).markup=String.fromCharCode(g),m[1]=v,e.line=v,e.parentType=C,R&&function(e,r){var t,n,o=e.level+2;for(t=r+2,n=e.tokens.length-2;t<n;t++)e.tokens[t].level===o&&"paragraph_open"===e.tokens[t].type&&(e.tokens[t+2].hidden=!0,e.tokens[t].hidden=!0,t+=2);}(e,_),!0};},{"../common/utils":4}],26:[function(e,r,t){r.exports=function(e,r){var t,n,o,s,i,a,l=r+1,c=e.md.block.ruler.getRules("paragraph"),u=e.lineMax;for(a=e.parentType,e.parentType="paragraph";l<u&&!e.isEmpty(l);l++)if(!(e.sCount[l]-e.blkIndent>3||e.sCount[l]<0)){for(n=!1,o=0,s=c.length;o<s;o++)if(c[o](e,l,u,!0)){n=!0;break}if(n)break}return t=e.getLines(r,l,e.blkIndent,!1).trim(),e.line=l,(i=e.push("paragraph_open","p",1)).map=[r,e.line],(i=e.push("inline","",0)).content=t,i.map=[r,e.line],i.children=[],i=e.push("paragraph_close","p",-1),e.parentType=a,!0};},{}],27:[function(e,r,t){var n=e("../common/utils").normalizeReference,o=e("../common/utils").isSpace;r.exports=function(e,r,t,s){var i,a,l,c,u,p,h,f,d,m,_,g,k,b,v,y,x=0,C=e.bMarks[r]+e.tShift[r],A=e.eMarks[r],w=r+1;if(e.sCount[r]-e.blkIndent>=4)return !1;if(91!==e.src.charCodeAt(C))return !1;for(;++C<A;)if(93===e.src.charCodeAt(C)&&92!==e.src.charCodeAt(C-1)){if(C+1===A)return !1;if(58!==e.src.charCodeAt(C+1))return !1;break}for(c=e.lineMax,v=e.md.block.ruler.getRules("reference"),m=e.parentType,e.parentType="reference";w<c&&!e.isEmpty(w);w++)if(!(e.sCount[w]-e.blkIndent>3||e.sCount[w]<0)){for(b=!1,p=0,h=v.length;p<h;p++)if(v[p](e,w,c,!0)){b=!0;break}if(b)break}for(k=e.getLines(r,w,e.blkIndent,!1).trim(),A=k.length,C=1;C<A;C++){if(91===(i=k.charCodeAt(C)))return !1;if(93===i){d=C;break}10===i?x++:92===i&&++C<A&&10===k.charCodeAt(C)&&x++;}if(d<0||58!==k.charCodeAt(d+1))return !1;for(C=d+2;C<A;C++)if(10===(i=k.charCodeAt(C)))x++;else if(!o(i))break;if(!(_=e.md.helpers.parseLinkDestination(k,C,A)).ok)return !1;if(u=e.md.normalizeLink(_.str),!e.md.validateLink(u))return !1;for(C=_.pos,x+=_.lines,a=C,l=x,g=C;C<A;C++)if(10===(i=k.charCodeAt(C)))x++;else if(!o(i))break;for(_=e.md.helpers.parseLinkTitle(k,C,A),C<A&&g!==C&&_.ok?(y=_.str,C=_.pos,x+=_.lines):(y="",C=a,x=l);C<A&&(i=k.charCodeAt(C),o(i));)C++;if(C<A&&10!==k.charCodeAt(C)&&y)for(y="",C=a,x=l;C<A&&(i=k.charCodeAt(C),o(i));)C++;return !(C<A&&10!==k.charCodeAt(C)||!(f=n(k.slice(1,d)))||!s&&(void 0===e.env.references&&(e.env.references={}),void 0===e.env.references[f]&&(e.env.references[f]={title:y,href:u}),e.parentType=m,e.line=r+x+1,0))};},{"../common/utils":4}],28:[function(e,r,t){var n=e("../token"),o=e("../common/utils").isSpace;function s(e,r,t,n){var s,i,a,l,c,u,p,h;for(this.src=e,this.md=r,this.env=t,this.tokens=n,this.bMarks=[],this.eMarks=[],this.tShift=[],this.sCount=[],this.bsCount=[],this.blkIndent=0,this.line=0,this.lineMax=0,this.tight=!1,this.ddIndent=-1,this.listIndent=-1,this.parentType="root",this.level=0,this.result="",i=this.src,h=!1,a=l=u=p=0,c=i.length;l<c;l++){if(s=i.charCodeAt(l),!h){if(o(s)){u++,9===s?p+=4-p%4:p++;continue}h=!0;}10!==s&&l!==c-1||(10!==s&&l++,this.bMarks.push(a),this.eMarks.push(l),this.tShift.push(u),this.sCount.push(p),this.bsCount.push(0),h=!1,u=0,p=0,a=l+1);}this.bMarks.push(i.length),this.eMarks.push(i.length),this.tShift.push(0),this.sCount.push(0),this.bsCount.push(0),this.lineMax=this.bMarks.length-1;}s.prototype.push=function(e,r,t){var o=new n(e,r,t);return o.block=!0,t<0&&this.level--,o.level=this.level,t>0&&this.level++,this.tokens.push(o),o},s.prototype.isEmpty=function(e){return this.bMarks[e]+this.tShift[e]>=this.eMarks[e]},s.prototype.skipEmptyLines=function(e){for(var r=this.lineMax;e<r&&!(this.bMarks[e]+this.tShift[e]<this.eMarks[e]);e++);return e},s.prototype.skipSpaces=function(e){for(var r,t=this.src.length;e<t&&(r=this.src.charCodeAt(e),o(r));e++);return e},s.prototype.skipSpacesBack=function(e,r){if(e<=r)return e;for(;e>r;)if(!o(this.src.charCodeAt(--e)))return e+1;return e},s.prototype.skipChars=function(e,r){for(var t=this.src.length;e<t&&this.src.charCodeAt(e)===r;e++);return e},s.prototype.skipCharsBack=function(e,r,t){if(e<=t)return e;for(;e>t;)if(r!==this.src.charCodeAt(--e))return e+1;return e},s.prototype.getLines=function(e,r,t,n){var s,i,a,l,c,u,p,h=e;if(e>=r)return "";for(u=new Array(r-e),s=0;h<r;h++,s++){for(i=0,p=l=this.bMarks[h],c=h+1<r||n?this.eMarks[h]+1:this.eMarks[h];l<c&&i<t;){if(a=this.src.charCodeAt(l),o(a))9===a?i+=4-(i+this.bsCount[h])%4:i++;else{if(!(l-p<this.tShift[h]))break;i++;}l++;}u[s]=i>t?new Array(i-t+1).join(" ")+this.src.slice(l,c):this.src.slice(l,c);}return u.join("")},s.prototype.Token=n,r.exports=s;},{"../common/utils":4,"../token":51}],29:[function(e,r,t){var n=e("../common/utils").isSpace;function o(e,r){var t=e.bMarks[r]+e.blkIndent,n=e.eMarks[r];return e.src.substr(t,n-t)}function s(e){var r,t=[],n=0,o=e.length,s=0,i=0,a=!1,l=0;for(r=e.charCodeAt(n);n<o;)96===r?a?(a=!1,l=n):s%2==0&&(a=!0,l=n):124!==r||s%2!=0||a||(t.push(e.substring(i,n)),i=n+1),92===r?s++:s=0,++n===o&&a&&(a=!1,n=l+1),r=e.charCodeAt(n);return t.push(e.substring(i)),t}r.exports=function(e,r,t,i){var a,l,c,u,p,h,f,d,m,_,g,k;if(r+2>t)return !1;if(p=r+1,e.sCount[p]<e.blkIndent)return !1;if(e.sCount[p]-e.blkIndent>=4)return !1;if((c=e.bMarks[p]+e.tShift[p])>=e.eMarks[p])return !1;if(124!==(a=e.src.charCodeAt(c++))&&45!==a&&58!==a)return !1;for(;c<e.eMarks[p];){if(124!==(a=e.src.charCodeAt(c))&&45!==a&&58!==a&&!n(a))return !1;c++;}for(l=o(e,r+1),h=l.split("|"),m=[],u=0;u<h.length;u++){if(!(_=h[u].trim())){if(0===u||u===h.length-1)continue;return !1}if(!/^:?-+:?$/.test(_))return !1;58===_.charCodeAt(_.length-1)?m.push(58===_.charCodeAt(0)?"center":"right"):58===_.charCodeAt(0)?m.push("left"):m.push("");}if(-1===(l=o(e,r).trim()).indexOf("|"))return !1;if(e.sCount[r]-e.blkIndent>=4)return !1;if(h=s(l.replace(/^\||\|$/g,"")),(f=h.length)>m.length)return !1;if(i)return !0;for((d=e.push("table_open","table",1)).map=g=[r,0],(d=e.push("thead_open","thead",1)).map=[r,r+1],(d=e.push("tr_open","tr",1)).map=[r,r+1],u=0;u<h.length;u++)(d=e.push("th_open","th",1)).map=[r,r+1],m[u]&&(d.attrs=[["style","text-align:"+m[u]]]),(d=e.push("inline","",0)).content=h[u].trim(),d.map=[r,r+1],d.children=[],d=e.push("th_close","th",-1);for(d=e.push("tr_close","tr",-1),d=e.push("thead_close","thead",-1),(d=e.push("tbody_open","tbody",1)).map=k=[r+2,0],p=r+2;p<t&&!(e.sCount[p]<e.blkIndent)&&-1!==(l=o(e,p).trim()).indexOf("|")&&!(e.sCount[p]-e.blkIndent>=4);p++){for(h=s(l.replace(/^\||\|$/g,"")),d=e.push("tr_open","tr",1),u=0;u<f;u++)d=e.push("td_open","td",1),m[u]&&(d.attrs=[["style","text-align:"+m[u]]]),(d=e.push("inline","",0)).content=h[u]?h[u].trim():"",d.children=[],d=e.push("td_close","td",-1);d=e.push("tr_close","tr",-1);}return d=e.push("tbody_close","tbody",-1),d=e.push("table_close","table",-1),g[1]=k[1]=p,e.line=p,!0};},{"../common/utils":4}],30:[function(e,r,t){r.exports=function(e){var r;e.inlineMode?((r=new e.Token("inline","",0)).content=e.src,r.map=[0,1],r.children=[],e.tokens.push(r)):e.md.block.parse(e.src,e.md,e.env,e.tokens);};},{}],31:[function(e,r,t){r.exports=function(e){var r,t,n,o=e.tokens;for(t=0,n=o.length;t<n;t++)"inline"===(r=o[t]).type&&e.md.inline.parse(r.content,e.md,e.env,r.children);};},{}],32:[function(e,r,t){var n=e("../common/utils").arrayReplaceAt;function o(e){return /^<\/a\s*>/i.test(e)}r.exports=function(e){var r,t,s,i,a,l,c,u,p,h,f,d,m,_,g,k,b,v,y=e.tokens;if(e.md.options.linkify)for(t=0,s=y.length;t<s;t++)if("inline"===y[t].type&&e.md.linkify.pretest(y[t].content))for(i=y[t].children,m=0,r=i.length-1;r>=0;r--)if("link_close"!==(l=i[r]).type){if("html_inline"===l.type&&(v=l.content,/^<a[>\s]/i.test(v)&&m>0&&m--,o(l.content)&&m++),!(m>0)&&"text"===l.type&&e.md.linkify.test(l.content)){for(p=l.content,b=e.md.linkify.match(p),c=[],d=l.level,f=0,u=0;u<b.length;u++)_=b[u].url,g=e.md.normalizeLink(_),e.md.validateLink(g)&&(k=b[u].text,k=b[u].schema?"mailto:"!==b[u].schema||/^mailto:/i.test(k)?e.md.normalizeLinkText(k):e.md.normalizeLinkText("mailto:"+k).replace(/^mailto:/,""):e.md.normalizeLinkText("http://"+k).replace(/^http:\/\//,""),(h=b[u].index)>f&&((a=new e.Token("text","",0)).content=p.slice(f,h),a.level=d,c.push(a)),(a=new e.Token("link_open","a",1)).attrs=[["href",g]],a.level=d++,a.markup="linkify",a.info="auto",c.push(a),(a=new e.Token("text","",0)).content=k,a.level=d,c.push(a),(a=new e.Token("link_close","a",-1)).level=--d,a.markup="linkify",a.info="auto",c.push(a),f=b[u].lastIndex);f<p.length&&((a=new e.Token("text","",0)).content=p.slice(f),a.level=d,c.push(a)),y[t].children=i=n(i,r,c);}}else for(r--;i[r].level!==l.level&&"link_open"!==i[r].type;)r--;};},{"../common/utils":4}],33:[function(e,r,t){var n=/\r\n?|\n/g,o=/\0/g;r.exports=function(e){var r;r=(r=e.src.replace(n,"\n")).replace(o,"�"),e.src=r;};},{}],34:[function(e,r,t){var n=/\+-|\.\.|\?\?\?\?|!!!!|,,|--/,o=/\((c|tm|r|p)\)/i,s=/\((c|tm|r|p)\)/gi,i={c:"©",r:"®",p:"§",tm:"™"};function a(e,r){return i[r.toLowerCase()]}function l(e){var r,t,n=0;for(r=e.length-1;r>=0;r--)"text"!==(t=e[r]).type||n||(t.content=t.content.replace(s,a)),"link_open"===t.type&&"auto"===t.info&&n--,"link_close"===t.type&&"auto"===t.info&&n++;}function c(e){var r,t,o=0;for(r=e.length-1;r>=0;r--)"text"!==(t=e[r]).type||o||n.test(t.content)&&(t.content=t.content.replace(/\+-/g,"±").replace(/\.{2,}/g,"…").replace(/([?!])…/g,"$1..").replace(/([?!]){4,}/g,"$1$1$1").replace(/,{2,}/g,",").replace(/(^|[^-])---([^-]|$)/gm,"$1—$2").replace(/(^|\s)--(\s|$)/gm,"$1–$2").replace(/(^|[^-\s])--([^-\s]|$)/gm,"$1–$2")),"link_open"===t.type&&"auto"===t.info&&o--,"link_close"===t.type&&"auto"===t.info&&o++;}r.exports=function(e){var r;if(e.md.options.typographer)for(r=e.tokens.length-1;r>=0;r--)"inline"===e.tokens[r].type&&(o.test(e.tokens[r].content)&&l(e.tokens[r].children),n.test(e.tokens[r].content)&&c(e.tokens[r].children));};},{}],35:[function(e,r,t){var n=e("../common/utils").isWhiteSpace,o=e("../common/utils").isPunctChar,s=e("../common/utils").isMdAsciiPunct,i=/['"]/,a=/['"]/g,l="’";function c(e,r,t){return e.substr(0,r)+t+e.substr(r+1)}function u(e,r){var t,i,u,p,h,f,d,m,_,g,k,b,v,y,x,C,A,w,D,E,q;for(D=[],t=0;t<e.length;t++){for(i=e[t],d=e[t].level,A=D.length-1;A>=0&&!(D[A].level<=d);A--);if(D.length=A+1,"text"===i.type){u=i.content,h=0,f=u.length;e:for(;h<f&&(a.lastIndex=h,p=a.exec(u));){if(x=C=!0,h=p.index+1,w="'"===p[0],_=32,p.index-1>=0)_=u.charCodeAt(p.index-1);else for(A=t-1;A>=0&&"softbreak"!==e[A].type&&"hardbreak"!==e[A].type;A--)if("text"===e[A].type){_=e[A].content.charCodeAt(e[A].content.length-1);break}if(g=32,h<f)g=u.charCodeAt(h);else for(A=t+1;A<e.length&&"softbreak"!==e[A].type&&"hardbreak"!==e[A].type;A++)if("text"===e[A].type){g=e[A].content.charCodeAt(0);break}if(k=s(_)||o(String.fromCharCode(_)),b=s(g)||o(String.fromCharCode(g)),v=n(_),(y=n(g))?x=!1:b&&(v||k||(x=!1)),v?C=!1:k&&(y||b||(C=!1)),34===g&&'"'===p[0]&&_>=48&&_<=57&&(C=x=!1),x&&C&&(x=!1,C=b),x||C){if(C)for(A=D.length-1;A>=0&&(m=D[A],!(D[A].level<d));A--)if(m.single===w&&D[A].level===d){m=D[A],w?(E=r.md.options.quotes[2],q=r.md.options.quotes[3]):(E=r.md.options.quotes[0],q=r.md.options.quotes[1]),i.content=c(i.content,p.index,q),e[m.token].content=c(e[m.token].content,m.pos,E),h+=q.length-1,m.token===t&&(h+=E.length-1),u=i.content,f=u.length,D.length=A;continue e}x?D.push({token:t,pos:p.index,single:w,level:d}):C&&w&&(i.content=c(i.content,p.index,l));}else w&&(i.content=c(i.content,p.index,l));}}}}r.exports=function(e){var r;if(e.md.options.typographer)for(r=e.tokens.length-1;r>=0;r--)"inline"===e.tokens[r].type&&i.test(e.tokens[r].content)&&u(e.tokens[r].children,e);};},{"../common/utils":4}],36:[function(e,r,t){var n=e("../token");function o(e,r,t){this.src=e,this.env=t,this.tokens=[],this.inlineMode=!1,this.md=r;}o.prototype.Token=n,r.exports=o;},{"../token":51}],37:[function(e,r,t){var n=/^<([a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*)>/,o=/^<([a-zA-Z][a-zA-Z0-9+.\-]{1,31}):([^<>\x00-\x20]*)>/;r.exports=function(e,r){var t,s,i,a,l,c,u=e.pos;return !(60!==e.src.charCodeAt(u)||(t=e.src.slice(u)).indexOf(">")<0||(o.test(t)?(s=t.match(o),a=s[0].slice(1,-1),l=e.md.normalizeLink(a),!e.md.validateLink(l)||(r||((c=e.push("link_open","a",1)).attrs=[["href",l]],c.markup="autolink",c.info="auto",(c=e.push("text","",0)).content=e.md.normalizeLinkText(a),(c=e.push("link_close","a",-1)).markup="autolink",c.info="auto"),e.pos+=s[0].length,0)):!n.test(t)||(i=t.match(n),a=i[0].slice(1,-1),l=e.md.normalizeLink("mailto:"+a),!e.md.validateLink(l)||(r||((c=e.push("link_open","a",1)).attrs=[["href",l]],c.markup="autolink",c.info="auto",(c=e.push("text","",0)).content=e.md.normalizeLinkText(a),(c=e.push("link_close","a",-1)).markup="autolink",c.info="auto"),e.pos+=i[0].length,0))))};},{}],38:[function(e,r,t){r.exports=function(e,r){var t,n,o,s,i,a,l=e.pos,c=e.src.charCodeAt(l);if(96!==c)return !1;for(t=l,l++,n=e.posMax;l<n&&96===e.src.charCodeAt(l);)l++;for(o=e.src.slice(t,l),s=i=l;-1!==(s=e.src.indexOf("`",i));){for(i=s+1;i<n&&96===e.src.charCodeAt(i);)i++;if(i-s===o.length)return r||((a=e.push("code_inline","code",0)).markup=o,a.content=e.src.slice(l,s).replace(/\n/g," ").replace(/^ (.+) $/,"$1")),e.pos=i,!0}return r||(e.pending+=o),e.pos+=o.length,!0};},{}],39:[function(e,r,t){function n(e,r){var t,n,o,s,i,a,l,c,u={},p=r.length;for(t=0;t<p;t++)if((o=r[t]).length=o.length||0,o.close){for(u.hasOwnProperty(o.marker)||(u[o.marker]=[-1,-1,-1]),i=u[o.marker][o.length%3],a=-1,n=t-o.jump-1;n>i;n-=s.jump+1)if((s=r[n]).marker===o.marker&&(-1===a&&(a=n),s.open&&s.end<0&&s.level===o.level&&(l=!1,(s.close||o.open)&&(s.length+o.length)%3==0&&(s.length%3==0&&o.length%3==0||(l=!0)),!l))){c=n>0&&!r[n-1].open?r[n-1].jump+1:0,o.jump=t-n+c,o.open=!1,s.end=t,s.jump=c,s.close=!1,a=-1;break}-1!==a&&(u[o.marker][(o.length||0)%3]=a);}}r.exports=function(e){var r,t=e.tokens_meta,o=e.tokens_meta.length;for(n(0,e.delimiters),r=0;r<o;r++)t[r]&&t[r].delimiters&&n(0,t[r].delimiters);};},{}],40:[function(e,r,t){function n(e,r){var t,n,o,s,i,a,l=r.length;for(t=l-1;t>=0;t--)95!==(n=r[t]).marker&&42!==n.marker||-1!==n.end&&(o=r[n.end],a=t>0&&r[t-1].end===n.end+1&&r[t-1].token===n.token-1&&r[n.end+1].token===o.token+1&&r[t-1].marker===n.marker,i=String.fromCharCode(n.marker),(s=e.tokens[n.token]).type=a?"strong_open":"em_open",s.tag=a?"strong":"em",s.nesting=1,s.markup=a?i+i:i,s.content="",(s=e.tokens[o.token]).type=a?"strong_close":"em_close",s.tag=a?"strong":"em",s.nesting=-1,s.markup=a?i+i:i,s.content="",a&&(e.tokens[r[t-1].token].content="",e.tokens[r[n.end+1].token].content="",t--));}r.exports.tokenize=function(e,r){var t,n,o=e.pos,s=e.src.charCodeAt(o);if(r)return !1;if(95!==s&&42!==s)return !1;for(n=e.scanDelims(e.pos,42===s),t=0;t<n.length;t++)e.push("text","",0).content=String.fromCharCode(s),e.delimiters.push({marker:s,length:n.length,jump:t,token:e.tokens.length-1,end:-1,open:n.can_open,close:n.can_close});return e.pos+=n.length,!0},r.exports.postProcess=function(e){var r,t=e.tokens_meta,o=e.tokens_meta.length;for(n(e,e.delimiters),r=0;r<o;r++)t[r]&&t[r].delimiters&&n(e,t[r].delimiters);};},{}],41:[function(e,r,t){var n=e("../common/entities"),o=e("../common/utils").has,s=e("../common/utils").isValidEntityCode,i=e("../common/utils").fromCodePoint,a=/^&#((?:x[a-f0-9]{1,6}|[0-9]{1,7}));/i,l=/^&([a-z][a-z0-9]{1,31});/i;r.exports=function(e,r){var t,c,u=e.pos,p=e.posMax;if(38!==e.src.charCodeAt(u))return !1;if(u+1<p)if(35===e.src.charCodeAt(u+1)){if(c=e.src.slice(u).match(a))return r||(t="x"===c[1][0].toLowerCase()?parseInt(c[1].slice(1),16):parseInt(c[1],10),e.pending+=s(t)?i(t):i(65533)),e.pos+=c[0].length,!0}else if((c=e.src.slice(u).match(l))&&o(n,c[1]))return r||(e.pending+=n[c[1]]),e.pos+=c[0].length,!0;return r||(e.pending+="&"),e.pos++,!0};},{"../common/entities":1,"../common/utils":4}],42:[function(e,r,t){for(var n=e("../common/utils").isSpace,o=[],s=0;s<256;s++)o.push(0);"\\!\"#$%&'()*+,./:;<=>?@[]^_`{|}~-".split("").forEach(function(e){o[e.charCodeAt(0)]=1;}),r.exports=function(e,r){var t,s=e.pos,i=e.posMax;if(92!==e.src.charCodeAt(s))return !1;if(++s<i){if((t=e.src.charCodeAt(s))<256&&0!==o[t])return r||(e.pending+=e.src[s]),e.pos+=2,!0;if(10===t){for(r||e.push("hardbreak","br",0),s++;s<i&&(t=e.src.charCodeAt(s),n(t));)s++;return e.pos=s,!0}}return r||(e.pending+="\\"),e.pos++,!0};},{"../common/utils":4}],43:[function(e,r,t){var n=e("../common/html_re").HTML_TAG_RE;r.exports=function(e,r){var t,o,s,i=e.pos;return !(!e.md.options.html||(s=e.posMax,60!==e.src.charCodeAt(i)||i+2>=s||33!==(t=e.src.charCodeAt(i+1))&&63!==t&&47!==t&&!function(e){var r=32|e;return r>=97&&r<=122}(t)||!(o=e.src.slice(i).match(n))||(r||(e.push("html_inline","",0).content=e.src.slice(i,i+o[0].length)),e.pos+=o[0].length,0)))};},{"../common/html_re":3}],44:[function(e,r,t){var n=e("../common/utils").normalizeReference,o=e("../common/utils").isSpace;r.exports=function(e,r){var t,s,i,a,l,c,u,p,h,f,d,m,_,g="",k=e.pos,b=e.posMax;if(33!==e.src.charCodeAt(e.pos))return !1;if(91!==e.src.charCodeAt(e.pos+1))return !1;if(c=e.pos+2,(l=e.md.helpers.parseLinkLabel(e,e.pos+1,!1))<0)return !1;if((u=l+1)<b&&40===e.src.charCodeAt(u)){for(u++;u<b&&(s=e.src.charCodeAt(u),o(s)||10===s);u++);if(u>=b)return !1;for(_=u,(h=e.md.helpers.parseLinkDestination(e.src,u,e.posMax)).ok&&(g=e.md.normalizeLink(h.str),e.md.validateLink(g)?u=h.pos:g=""),_=u;u<b&&(s=e.src.charCodeAt(u),o(s)||10===s);u++);if(h=e.md.helpers.parseLinkTitle(e.src,u,e.posMax),u<b&&_!==u&&h.ok)for(f=h.str,u=h.pos;u<b&&(s=e.src.charCodeAt(u),o(s)||10===s);u++);else f="";if(u>=b||41!==e.src.charCodeAt(u))return e.pos=k,!1;u++;}else{if(void 0===e.env.references)return !1;if(u<b&&91===e.src.charCodeAt(u)?(_=u+1,(u=e.md.helpers.parseLinkLabel(e,u))>=0?a=e.src.slice(_,u++):u=l+1):u=l+1,a||(a=e.src.slice(c,l)),!(p=e.env.references[n(a)]))return e.pos=k,!1;g=p.href,f=p.title;}return r||(i=e.src.slice(c,l),e.md.inline.parse(i,e.md,e.env,m=[]),(d=e.push("image","img",0)).attrs=t=[["src",g],["alt",""]],d.children=m,d.content=i,f&&t.push(["title",f])),e.pos=u,e.posMax=b,!0};},{"../common/utils":4}],45:[function(e,r,t){var n=e("../common/utils").normalizeReference,o=e("../common/utils").isSpace;r.exports=function(e,r){var t,s,i,a,l,c,u,p,h,f="",d=e.pos,m=e.posMax,_=e.pos,g=!0;if(91!==e.src.charCodeAt(e.pos))return !1;if(l=e.pos+1,(a=e.md.helpers.parseLinkLabel(e,e.pos,!0))<0)return !1;if((c=a+1)<m&&40===e.src.charCodeAt(c)){for(g=!1,c++;c<m&&(s=e.src.charCodeAt(c),o(s)||10===s);c++);if(c>=m)return !1;for(_=c,(u=e.md.helpers.parseLinkDestination(e.src,c,e.posMax)).ok&&(f=e.md.normalizeLink(u.str),e.md.validateLink(f)?c=u.pos:f=""),_=c;c<m&&(s=e.src.charCodeAt(c),o(s)||10===s);c++);if(u=e.md.helpers.parseLinkTitle(e.src,c,e.posMax),c<m&&_!==c&&u.ok)for(h=u.str,c=u.pos;c<m&&(s=e.src.charCodeAt(c),o(s)||10===s);c++);else h="";(c>=m||41!==e.src.charCodeAt(c))&&(g=!0),c++;}if(g){if(void 0===e.env.references)return !1;if(c<m&&91===e.src.charCodeAt(c)?(_=c+1,(c=e.md.helpers.parseLinkLabel(e,c))>=0?i=e.src.slice(_,c++):c=a+1):c=a+1,i||(i=e.src.slice(l,a)),!(p=e.env.references[n(i)]))return e.pos=d,!1;f=p.href,h=p.title;}return r||(e.pos=l,e.posMax=a,e.push("link_open","a",1).attrs=t=[["href",f]],h&&t.push(["title",h]),e.md.inline.tokenize(e),e.push("link_close","a",-1)),e.pos=c,e.posMax=m,!0};},{"../common/utils":4}],46:[function(e,r,t){var n=e("../common/utils").isSpace;r.exports=function(e,r){var t,o,s=e.pos;if(10!==e.src.charCodeAt(s))return !1;for(t=e.pending.length-1,o=e.posMax,r||(t>=0&&32===e.pending.charCodeAt(t)?t>=1&&32===e.pending.charCodeAt(t-1)?(e.pending=e.pending.replace(/ +$/,""),e.push("hardbreak","br",0)):(e.pending=e.pending.slice(0,-1),e.push("softbreak","br",0)):e.push("softbreak","br",0)),s++;s<o&&n(e.src.charCodeAt(s));)s++;return e.pos=s,!0};},{"../common/utils":4}],47:[function(e,r,t){var n=e("../token"),o=e("../common/utils").isWhiteSpace,s=e("../common/utils").isPunctChar,i=e("../common/utils").isMdAsciiPunct;function a(e,r,t,n){this.src=e,this.env=t,this.md=r,this.tokens=n,this.tokens_meta=Array(n.length),this.pos=0,this.posMax=this.src.length,this.level=0,this.pending="",this.pendingLevel=0,this.cache={},this.delimiters=[],this._prev_delimiters=[];}a.prototype.pushPending=function(){var e=new n("text","",0);return e.content=this.pending,e.level=this.pendingLevel,this.tokens.push(e),this.pending="",e},a.prototype.push=function(e,r,t){this.pending&&this.pushPending();var o=new n(e,r,t),s=null;return t<0&&(this.level--,this.delimiters=this._prev_delimiters.pop()),o.level=this.level,t>0&&(this.level++,this._prev_delimiters.push(this.delimiters),this.delimiters=[],s={delimiters:this.delimiters}),this.pendingLevel=this.level,this.tokens.push(o),this.tokens_meta.push(s),o},a.prototype.scanDelims=function(e,r){var t,n,a,l,c,u,p,h,f,d=e,m=!0,_=!0,g=this.posMax,k=this.src.charCodeAt(e);for(t=e>0?this.src.charCodeAt(e-1):32;d<g&&this.src.charCodeAt(d)===k;)d++;return a=d-e,n=d<g?this.src.charCodeAt(d):32,p=i(t)||s(String.fromCharCode(t)),f=i(n)||s(String.fromCharCode(n)),u=o(t),(h=o(n))?m=!1:f&&(u||p||(m=!1)),u?_=!1:p&&(h||f||(_=!1)),r?(l=m,c=_):(l=m&&(!_||p),c=_&&(!m||f)),{can_open:l,can_close:c,length:a}},a.prototype.Token=n,r.exports=a;},{"../common/utils":4,"../token":51}],48:[function(e,r,t){function n(e,r){var t,n,o,s,i,a=[],l=r.length;for(t=0;t<l;t++)126===(o=r[t]).marker&&-1!==o.end&&(s=r[o.end],(i=e.tokens[o.token]).type="s_open",i.tag="s",i.nesting=1,i.markup="~~",i.content="",(i=e.tokens[s.token]).type="s_close",i.tag="s",i.nesting=-1,i.markup="~~",i.content="","text"===e.tokens[s.token-1].type&&"~"===e.tokens[s.token-1].content&&a.push(s.token-1));for(;a.length;){for(t=a.pop(),n=t+1;n<e.tokens.length&&"s_close"===e.tokens[n].type;)n++;t!==--n&&(i=e.tokens[n],e.tokens[n]=e.tokens[t],e.tokens[t]=i);}}r.exports.tokenize=function(e,r){var t,n,o,s,i=e.pos,a=e.src.charCodeAt(i);if(r)return !1;if(126!==a)return !1;if(n=e.scanDelims(e.pos,!0),o=n.length,s=String.fromCharCode(a),o<2)return !1;for(o%2&&(e.push("text","",0).content=s,o--),t=0;t<o;t+=2)e.push("text","",0).content=s+s,e.delimiters.push({marker:a,length:0,jump:t,token:e.tokens.length-1,end:-1,open:n.can_open,close:n.can_close});return e.pos+=n.length,!0},r.exports.postProcess=function(e){var r,t=e.tokens_meta,o=e.tokens_meta.length;for(n(e,e.delimiters),r=0;r<o;r++)t[r]&&t[r].delimiters&&n(e,t[r].delimiters);};},{}],49:[function(e,r,t){function n(e){switch(e){case 10:case 33:case 35:case 36:case 37:case 38:case 42:case 43:case 45:case 58:case 60:case 61:case 62:case 64:case 91:case 92:case 93:case 94:case 95:case 96:case 123:case 125:case 126:return !0;default:return !1}}r.exports=function(e,r){for(var t=e.pos;t<e.posMax&&!n(e.src.charCodeAt(t));)t++;return t!==e.pos&&(r||(e.pending+=e.src.slice(e.pos,t)),e.pos=t,!0)};},{}],50:[function(e,r,t){r.exports=function(e){var r,t,n=0,o=e.tokens,s=e.tokens.length;for(r=t=0;r<s;r++)o[r].nesting<0&&n--,o[r].level=n,o[r].nesting>0&&n++,"text"===o[r].type&&r+1<s&&"text"===o[r+1].type?o[r+1].content=o[r].content+o[r+1].content:(r!==t&&(o[t]=o[r]),t++);r!==t&&(o.length=t);};},{}],51:[function(e,r,t){function n(e,r,t){this.type=e,this.tag=r,this.attrs=null,this.map=null,this.nesting=t,this.level=0,this.children=null,this.content="",this.markup="",this.info="",this.meta=null,this.block=!1,this.hidden=!1;}n.prototype.attrIndex=function(e){var r,t,n;if(!this.attrs)return -1;for(r=this.attrs,t=0,n=r.length;t<n;t++)if(r[t][0]===e)return t;return -1},n.prototype.attrPush=function(e){this.attrs?this.attrs.push(e):this.attrs=[e];},n.prototype.attrSet=function(e,r){var t=this.attrIndex(e),n=[e,r];t<0?this.attrPush(n):this.attrs[t]=n;},n.prototype.attrGet=function(e){var r=this.attrIndex(e),t=null;return r>=0&&(t=this.attrs[r][1]),t},n.prototype.attrJoin=function(e,r){var t=this.attrIndex(e);t<0?this.attrPush([e,r]):this.attrs[t][1]=this.attrs[t][1]+" "+r;},r.exports=n;},{}],52:[function(e,r,t){r.exports={Aacute:"Á",aacute:"á",Abreve:"Ă",abreve:"ă",ac:"∾",acd:"∿",acE:"∾̳",Acirc:"Â",acirc:"â",acute:"´",Acy:"А",acy:"а",AElig:"Æ",aelig:"æ",af:"⁡",Afr:"𝔄",afr:"𝔞",Agrave:"À",agrave:"à",alefsym:"ℵ",aleph:"ℵ",Alpha:"Α",alpha:"α",Amacr:"Ā",amacr:"ā",amalg:"⨿",amp:"&",AMP:"&",andand:"⩕",And:"⩓",and:"∧",andd:"⩜",andslope:"⩘",andv:"⩚",ang:"∠",ange:"⦤",angle:"∠",angmsdaa:"⦨",angmsdab:"⦩",angmsdac:"⦪",angmsdad:"⦫",angmsdae:"⦬",angmsdaf:"⦭",angmsdag:"⦮",angmsdah:"⦯",angmsd:"∡",angrt:"∟",angrtvb:"⊾",angrtvbd:"⦝",angsph:"∢",angst:"Å",angzarr:"⍼",Aogon:"Ą",aogon:"ą",Aopf:"𝔸",aopf:"𝕒",apacir:"⩯",ap:"≈",apE:"⩰",ape:"≊",apid:"≋",apos:"'",ApplyFunction:"⁡",approx:"≈",approxeq:"≊",Aring:"Å",aring:"å",Ascr:"𝒜",ascr:"𝒶",Assign:"≔",ast:"*",asymp:"≈",asympeq:"≍",Atilde:"Ã",atilde:"ã",Auml:"Ä",auml:"ä",awconint:"∳",awint:"⨑",backcong:"≌",backepsilon:"϶",backprime:"‵",backsim:"∽",backsimeq:"⋍",Backslash:"∖",Barv:"⫧",barvee:"⊽",barwed:"⌅",Barwed:"⌆",barwedge:"⌅",bbrk:"⎵",bbrktbrk:"⎶",bcong:"≌",Bcy:"Б",bcy:"б",bdquo:"„",becaus:"∵",because:"∵",Because:"∵",bemptyv:"⦰",bepsi:"϶",bernou:"ℬ",Bernoullis:"ℬ",Beta:"Β",beta:"β",beth:"ℶ",between:"≬",Bfr:"𝔅",bfr:"𝔟",bigcap:"⋂",bigcirc:"◯",bigcup:"⋃",bigodot:"⨀",bigoplus:"⨁",bigotimes:"⨂",bigsqcup:"⨆",bigstar:"★",bigtriangledown:"▽",bigtriangleup:"△",biguplus:"⨄",bigvee:"⋁",bigwedge:"⋀",bkarow:"⤍",blacklozenge:"⧫",blacksquare:"▪",blacktriangle:"▴",blacktriangledown:"▾",blacktriangleleft:"◂",blacktriangleright:"▸",blank:"␣",blk12:"▒",blk14:"░",blk34:"▓",block:"█",bne:"=⃥",bnequiv:"≡⃥",bNot:"⫭",bnot:"⌐",Bopf:"𝔹",bopf:"𝕓",bot:"⊥",bottom:"⊥",bowtie:"⋈",boxbox:"⧉",boxdl:"┐",boxdL:"╕",boxDl:"╖",boxDL:"╗",boxdr:"┌",boxdR:"╒",boxDr:"╓",boxDR:"╔",boxh:"─",boxH:"═",boxhd:"┬",boxHd:"╤",boxhD:"╥",boxHD:"╦",boxhu:"┴",boxHu:"╧",boxhU:"╨",boxHU:"╩",boxminus:"⊟",boxplus:"⊞",boxtimes:"⊠",boxul:"┘",boxuL:"╛",boxUl:"╜",boxUL:"╝",boxur:"└",boxuR:"╘",boxUr:"╙",boxUR:"╚",boxv:"│",boxV:"║",boxvh:"┼",boxvH:"╪",boxVh:"╫",boxVH:"╬",boxvl:"┤",boxvL:"╡",boxVl:"╢",boxVL:"╣",boxvr:"├",boxvR:"╞",boxVr:"╟",boxVR:"╠",bprime:"‵",breve:"˘",Breve:"˘",brvbar:"¦",bscr:"𝒷",Bscr:"ℬ",bsemi:"⁏",bsim:"∽",bsime:"⋍",bsolb:"⧅",bsol:"\\",bsolhsub:"⟈",bull:"•",bullet:"•",bump:"≎",bumpE:"⪮",bumpe:"≏",Bumpeq:"≎",bumpeq:"≏",Cacute:"Ć",cacute:"ć",capand:"⩄",capbrcup:"⩉",capcap:"⩋",cap:"∩",Cap:"⋒",capcup:"⩇",capdot:"⩀",CapitalDifferentialD:"ⅅ",caps:"∩︀",caret:"⁁",caron:"ˇ",Cayleys:"ℭ",ccaps:"⩍",Ccaron:"Č",ccaron:"č",Ccedil:"Ç",ccedil:"ç",Ccirc:"Ĉ",ccirc:"ĉ",Cconint:"∰",ccups:"⩌",ccupssm:"⩐",Cdot:"Ċ",cdot:"ċ",cedil:"¸",Cedilla:"¸",cemptyv:"⦲",cent:"¢",centerdot:"·",CenterDot:"·",cfr:"𝔠",Cfr:"ℭ",CHcy:"Ч",chcy:"ч",check:"✓",checkmark:"✓",Chi:"Χ",chi:"χ",circ:"ˆ",circeq:"≗",circlearrowleft:"↺",circlearrowright:"↻",circledast:"⊛",circledcirc:"⊚",circleddash:"⊝",CircleDot:"⊙",circledR:"®",circledS:"Ⓢ",CircleMinus:"⊖",CirclePlus:"⊕",CircleTimes:"⊗",cir:"○",cirE:"⧃",cire:"≗",cirfnint:"⨐",cirmid:"⫯",cirscir:"⧂",ClockwiseContourIntegral:"∲",CloseCurlyDoubleQuote:"”",CloseCurlyQuote:"’",clubs:"♣",clubsuit:"♣",colon:":",Colon:"∷",Colone:"⩴",colone:"≔",coloneq:"≔",comma:",",commat:"@",comp:"∁",compfn:"∘",complement:"∁",complexes:"ℂ",cong:"≅",congdot:"⩭",Congruent:"≡",conint:"∮",Conint:"∯",ContourIntegral:"∮",copf:"𝕔",Copf:"ℂ",coprod:"∐",Coproduct:"∐",copy:"©",COPY:"©",copysr:"℗",CounterClockwiseContourIntegral:"∳",crarr:"↵",cross:"✗",Cross:"⨯",Cscr:"𝒞",cscr:"𝒸",csub:"⫏",csube:"⫑",csup:"⫐",csupe:"⫒",ctdot:"⋯",cudarrl:"⤸",cudarrr:"⤵",cuepr:"⋞",cuesc:"⋟",cularr:"↶",cularrp:"⤽",cupbrcap:"⩈",cupcap:"⩆",CupCap:"≍",cup:"∪",Cup:"⋓",cupcup:"⩊",cupdot:"⊍",cupor:"⩅",cups:"∪︀",curarr:"↷",curarrm:"⤼",curlyeqprec:"⋞",curlyeqsucc:"⋟",curlyvee:"⋎",curlywedge:"⋏",curren:"¤",curvearrowleft:"↶",curvearrowright:"↷",cuvee:"⋎",cuwed:"⋏",cwconint:"∲",cwint:"∱",cylcty:"⌭",dagger:"†",Dagger:"‡",daleth:"ℸ",darr:"↓",Darr:"↡",dArr:"⇓",dash:"‐",Dashv:"⫤",dashv:"⊣",dbkarow:"⤏",dblac:"˝",Dcaron:"Ď",dcaron:"ď",Dcy:"Д",dcy:"д",ddagger:"‡",ddarr:"⇊",DD:"ⅅ",dd:"ⅆ",DDotrahd:"⤑",ddotseq:"⩷",deg:"°",Del:"∇",Delta:"Δ",delta:"δ",demptyv:"⦱",dfisht:"⥿",Dfr:"𝔇",dfr:"𝔡",dHar:"⥥",dharl:"⇃",dharr:"⇂",DiacriticalAcute:"´",DiacriticalDot:"˙",DiacriticalDoubleAcute:"˝",DiacriticalGrave:"`",DiacriticalTilde:"˜",diam:"⋄",diamond:"⋄",Diamond:"⋄",diamondsuit:"♦",diams:"♦",die:"¨",DifferentialD:"ⅆ",digamma:"ϝ",disin:"⋲",div:"÷",divide:"÷",divideontimes:"⋇",divonx:"⋇",DJcy:"Ђ",djcy:"ђ",dlcorn:"⌞",dlcrop:"⌍",dollar:"$",Dopf:"𝔻",dopf:"𝕕",Dot:"¨",dot:"˙",DotDot:"⃜",doteq:"≐",doteqdot:"≑",DotEqual:"≐",dotminus:"∸",dotplus:"∔",dotsquare:"⊡",doublebarwedge:"⌆",DoubleContourIntegral:"∯",DoubleDot:"¨",DoubleDownArrow:"⇓",DoubleLeftArrow:"⇐",DoubleLeftRightArrow:"⇔",DoubleLeftTee:"⫤",DoubleLongLeftArrow:"⟸",DoubleLongLeftRightArrow:"⟺",DoubleLongRightArrow:"⟹",DoubleRightArrow:"⇒",DoubleRightTee:"⊨",DoubleUpArrow:"⇑",DoubleUpDownArrow:"⇕",DoubleVerticalBar:"∥",DownArrowBar:"⤓",downarrow:"↓",DownArrow:"↓",Downarrow:"⇓",DownArrowUpArrow:"⇵",DownBreve:"̑",downdownarrows:"⇊",downharpoonleft:"⇃",downharpoonright:"⇂",DownLeftRightVector:"⥐",DownLeftTeeVector:"⥞",DownLeftVectorBar:"⥖",DownLeftVector:"↽",DownRightTeeVector:"⥟",DownRightVectorBar:"⥗",DownRightVector:"⇁",DownTeeArrow:"↧",DownTee:"⊤",drbkarow:"⤐",drcorn:"⌟",drcrop:"⌌",Dscr:"𝒟",dscr:"𝒹",DScy:"Ѕ",dscy:"ѕ",dsol:"⧶",Dstrok:"Đ",dstrok:"đ",dtdot:"⋱",dtri:"▿",dtrif:"▾",duarr:"⇵",duhar:"⥯",dwangle:"⦦",DZcy:"Џ",dzcy:"џ",dzigrarr:"⟿",Eacute:"É",eacute:"é",easter:"⩮",Ecaron:"Ě",ecaron:"ě",Ecirc:"Ê",ecirc:"ê",ecir:"≖",ecolon:"≕",Ecy:"Э",ecy:"э",eDDot:"⩷",Edot:"Ė",edot:"ė",eDot:"≑",ee:"ⅇ",efDot:"≒",Efr:"𝔈",efr:"𝔢",eg:"⪚",Egrave:"È",egrave:"è",egs:"⪖",egsdot:"⪘",el:"⪙",Element:"∈",elinters:"⏧",ell:"ℓ",els:"⪕",elsdot:"⪗",Emacr:"Ē",emacr:"ē",empty:"∅",emptyset:"∅",EmptySmallSquare:"◻",emptyv:"∅",EmptyVerySmallSquare:"▫",emsp13:" ",emsp14:" ",emsp:" ",ENG:"Ŋ",eng:"ŋ",ensp:" ",Eogon:"Ę",eogon:"ę",Eopf:"𝔼",eopf:"𝕖",epar:"⋕",eparsl:"⧣",eplus:"⩱",epsi:"ε",Epsilon:"Ε",epsilon:"ε",epsiv:"ϵ",eqcirc:"≖",eqcolon:"≕",eqsim:"≂",eqslantgtr:"⪖",eqslantless:"⪕",Equal:"⩵",equals:"=",EqualTilde:"≂",equest:"≟",Equilibrium:"⇌",equiv:"≡",equivDD:"⩸",eqvparsl:"⧥",erarr:"⥱",erDot:"≓",escr:"ℯ",Escr:"ℰ",esdot:"≐",Esim:"⩳",esim:"≂",Eta:"Η",eta:"η",ETH:"Ð",eth:"ð",Euml:"Ë",euml:"ë",euro:"€",excl:"!",exist:"∃",Exists:"∃",expectation:"ℰ",exponentiale:"ⅇ",ExponentialE:"ⅇ",fallingdotseq:"≒",Fcy:"Ф",fcy:"ф",female:"♀",ffilig:"ﬃ",fflig:"ﬀ",ffllig:"ﬄ",Ffr:"𝔉",ffr:"𝔣",filig:"ﬁ",FilledSmallSquare:"◼",FilledVerySmallSquare:"▪",fjlig:"fj",flat:"♭",fllig:"ﬂ",fltns:"▱",fnof:"ƒ",Fopf:"𝔽",fopf:"𝕗",forall:"∀",ForAll:"∀",fork:"⋔",forkv:"⫙",Fouriertrf:"ℱ",fpartint:"⨍",frac12:"½",frac13:"⅓",frac14:"¼",frac15:"⅕",frac16:"⅙",frac18:"⅛",frac23:"⅔",frac25:"⅖",frac34:"¾",frac35:"⅗",frac38:"⅜",frac45:"⅘",frac56:"⅚",frac58:"⅝",frac78:"⅞",frasl:"⁄",frown:"⌢",fscr:"𝒻",Fscr:"ℱ",gacute:"ǵ",Gamma:"Γ",gamma:"γ",Gammad:"Ϝ",gammad:"ϝ",gap:"⪆",Gbreve:"Ğ",gbreve:"ğ",Gcedil:"Ģ",Gcirc:"Ĝ",gcirc:"ĝ",Gcy:"Г",gcy:"г",Gdot:"Ġ",gdot:"ġ",ge:"≥",gE:"≧",gEl:"⪌",gel:"⋛",geq:"≥",geqq:"≧",geqslant:"⩾",gescc:"⪩",ges:"⩾",gesdot:"⪀",gesdoto:"⪂",gesdotol:"⪄",gesl:"⋛︀",gesles:"⪔",Gfr:"𝔊",gfr:"𝔤",gg:"≫",Gg:"⋙",ggg:"⋙",gimel:"ℷ",GJcy:"Ѓ",gjcy:"ѓ",gla:"⪥",gl:"≷",glE:"⪒",glj:"⪤",gnap:"⪊",gnapprox:"⪊",gne:"⪈",gnE:"≩",gneq:"⪈",gneqq:"≩",gnsim:"⋧",Gopf:"𝔾",gopf:"𝕘",grave:"`",GreaterEqual:"≥",GreaterEqualLess:"⋛",GreaterFullEqual:"≧",GreaterGreater:"⪢",GreaterLess:"≷",GreaterSlantEqual:"⩾",GreaterTilde:"≳",Gscr:"𝒢",gscr:"ℊ",gsim:"≳",gsime:"⪎",gsiml:"⪐",gtcc:"⪧",gtcir:"⩺",gt:">",GT:">",Gt:"≫",gtdot:"⋗",gtlPar:"⦕",gtquest:"⩼",gtrapprox:"⪆",gtrarr:"⥸",gtrdot:"⋗",gtreqless:"⋛",gtreqqless:"⪌",gtrless:"≷",gtrsim:"≳",gvertneqq:"≩︀",gvnE:"≩︀",Hacek:"ˇ",hairsp:" ",half:"½",hamilt:"ℋ",HARDcy:"Ъ",hardcy:"ъ",harrcir:"⥈",harr:"↔",hArr:"⇔",harrw:"↭",Hat:"^",hbar:"ℏ",Hcirc:"Ĥ",hcirc:"ĥ",hearts:"♥",heartsuit:"♥",hellip:"…",hercon:"⊹",hfr:"𝔥",Hfr:"ℌ",HilbertSpace:"ℋ",hksearow:"⤥",hkswarow:"⤦",hoarr:"⇿",homtht:"∻",hookleftarrow:"↩",hookrightarrow:"↪",hopf:"𝕙",Hopf:"ℍ",horbar:"―",HorizontalLine:"─",hscr:"𝒽",Hscr:"ℋ",hslash:"ℏ",Hstrok:"Ħ",hstrok:"ħ",HumpDownHump:"≎",HumpEqual:"≏",hybull:"⁃",hyphen:"‐",Iacute:"Í",iacute:"í",ic:"⁣",Icirc:"Î",icirc:"î",Icy:"И",icy:"и",Idot:"İ",IEcy:"Е",iecy:"е",iexcl:"¡",iff:"⇔",ifr:"𝔦",Ifr:"ℑ",Igrave:"Ì",igrave:"ì",ii:"ⅈ",iiiint:"⨌",iiint:"∭",iinfin:"⧜",iiota:"℩",IJlig:"Ĳ",ijlig:"ĳ",Imacr:"Ī",imacr:"ī",image:"ℑ",ImaginaryI:"ⅈ",imagline:"ℐ",imagpart:"ℑ",imath:"ı",Im:"ℑ",imof:"⊷",imped:"Ƶ",Implies:"⇒",incare:"℅",in:"∈",infin:"∞",infintie:"⧝",inodot:"ı",intcal:"⊺",int:"∫",Int:"∬",integers:"ℤ",Integral:"∫",intercal:"⊺",Intersection:"⋂",intlarhk:"⨗",intprod:"⨼",InvisibleComma:"⁣",InvisibleTimes:"⁢",IOcy:"Ё",iocy:"ё",Iogon:"Į",iogon:"į",Iopf:"𝕀",iopf:"𝕚",Iota:"Ι",iota:"ι",iprod:"⨼",iquest:"¿",iscr:"𝒾",Iscr:"ℐ",isin:"∈",isindot:"⋵",isinE:"⋹",isins:"⋴",isinsv:"⋳",isinv:"∈",it:"⁢",Itilde:"Ĩ",itilde:"ĩ",Iukcy:"І",iukcy:"і",Iuml:"Ï",iuml:"ï",Jcirc:"Ĵ",jcirc:"ĵ",Jcy:"Й",jcy:"й",Jfr:"𝔍",jfr:"𝔧",jmath:"ȷ",Jopf:"𝕁",jopf:"𝕛",Jscr:"𝒥",jscr:"𝒿",Jsercy:"Ј",jsercy:"ј",Jukcy:"Є",jukcy:"є",Kappa:"Κ",kappa:"κ",kappav:"ϰ",Kcedil:"Ķ",kcedil:"ķ",Kcy:"К",kcy:"к",Kfr:"𝔎",kfr:"𝔨",kgreen:"ĸ",KHcy:"Х",khcy:"х",KJcy:"Ќ",kjcy:"ќ",Kopf:"𝕂",kopf:"𝕜",Kscr:"𝒦",kscr:"𝓀",lAarr:"⇚",Lacute:"Ĺ",lacute:"ĺ",laemptyv:"⦴",lagran:"ℒ",Lambda:"Λ",lambda:"λ",lang:"⟨",Lang:"⟪",langd:"⦑",langle:"⟨",lap:"⪅",Laplacetrf:"ℒ",laquo:"«",larrb:"⇤",larrbfs:"⤟",larr:"←",Larr:"↞",lArr:"⇐",larrfs:"⤝",larrhk:"↩",larrlp:"↫",larrpl:"⤹",larrsim:"⥳",larrtl:"↢",latail:"⤙",lAtail:"⤛",lat:"⪫",late:"⪭",lates:"⪭︀",lbarr:"⤌",lBarr:"⤎",lbbrk:"❲",lbrace:"{",lbrack:"[",lbrke:"⦋",lbrksld:"⦏",lbrkslu:"⦍",Lcaron:"Ľ",lcaron:"ľ",Lcedil:"Ļ",lcedil:"ļ",lceil:"⌈",lcub:"{",Lcy:"Л",lcy:"л",ldca:"⤶",ldquo:"“",ldquor:"„",ldrdhar:"⥧",ldrushar:"⥋",ldsh:"↲",le:"≤",lE:"≦",LeftAngleBracket:"⟨",LeftArrowBar:"⇤",leftarrow:"←",LeftArrow:"←",Leftarrow:"⇐",LeftArrowRightArrow:"⇆",leftarrowtail:"↢",LeftCeiling:"⌈",LeftDoubleBracket:"⟦",LeftDownTeeVector:"⥡",LeftDownVectorBar:"⥙",LeftDownVector:"⇃",LeftFloor:"⌊",leftharpoondown:"↽",leftharpoonup:"↼",leftleftarrows:"⇇",leftrightarrow:"↔",LeftRightArrow:"↔",Leftrightarrow:"⇔",leftrightarrows:"⇆",leftrightharpoons:"⇋",leftrightsquigarrow:"↭",LeftRightVector:"⥎",LeftTeeArrow:"↤",LeftTee:"⊣",LeftTeeVector:"⥚",leftthreetimes:"⋋",LeftTriangleBar:"⧏",LeftTriangle:"⊲",LeftTriangleEqual:"⊴",LeftUpDownVector:"⥑",LeftUpTeeVector:"⥠",LeftUpVectorBar:"⥘",LeftUpVector:"↿",LeftVectorBar:"⥒",LeftVector:"↼",lEg:"⪋",leg:"⋚",leq:"≤",leqq:"≦",leqslant:"⩽",lescc:"⪨",les:"⩽",lesdot:"⩿",lesdoto:"⪁",lesdotor:"⪃",lesg:"⋚︀",lesges:"⪓",lessapprox:"⪅",lessdot:"⋖",lesseqgtr:"⋚",lesseqqgtr:"⪋",LessEqualGreater:"⋚",LessFullEqual:"≦",LessGreater:"≶",lessgtr:"≶",LessLess:"⪡",lesssim:"≲",LessSlantEqual:"⩽",LessTilde:"≲",lfisht:"⥼",lfloor:"⌊",Lfr:"𝔏",lfr:"𝔩",lg:"≶",lgE:"⪑",lHar:"⥢",lhard:"↽",lharu:"↼",lharul:"⥪",lhblk:"▄",LJcy:"Љ",ljcy:"љ",llarr:"⇇",ll:"≪",Ll:"⋘",llcorner:"⌞",Lleftarrow:"⇚",llhard:"⥫",lltri:"◺",Lmidot:"Ŀ",lmidot:"ŀ",lmoustache:"⎰",lmoust:"⎰",lnap:"⪉",lnapprox:"⪉",lne:"⪇",lnE:"≨",lneq:"⪇",lneqq:"≨",lnsim:"⋦",loang:"⟬",loarr:"⇽",lobrk:"⟦",longleftarrow:"⟵",LongLeftArrow:"⟵",Longleftarrow:"⟸",longleftrightarrow:"⟷",LongLeftRightArrow:"⟷",Longleftrightarrow:"⟺",longmapsto:"⟼",longrightarrow:"⟶",LongRightArrow:"⟶",Longrightarrow:"⟹",looparrowleft:"↫",looparrowright:"↬",lopar:"⦅",Lopf:"𝕃",lopf:"𝕝",loplus:"⨭",lotimes:"⨴",lowast:"∗",lowbar:"_",LowerLeftArrow:"↙",LowerRightArrow:"↘",loz:"◊",lozenge:"◊",lozf:"⧫",lpar:"(",lparlt:"⦓",lrarr:"⇆",lrcorner:"⌟",lrhar:"⇋",lrhard:"⥭",lrm:"‎",lrtri:"⊿",lsaquo:"‹",lscr:"𝓁",Lscr:"ℒ",lsh:"↰",Lsh:"↰",lsim:"≲",lsime:"⪍",lsimg:"⪏",lsqb:"[",lsquo:"‘",lsquor:"‚",Lstrok:"Ł",lstrok:"ł",ltcc:"⪦",ltcir:"⩹",lt:"<",LT:"<",Lt:"≪",ltdot:"⋖",lthree:"⋋",ltimes:"⋉",ltlarr:"⥶",ltquest:"⩻",ltri:"◃",ltrie:"⊴",ltrif:"◂",ltrPar:"⦖",lurdshar:"⥊",luruhar:"⥦",lvertneqq:"≨︀",lvnE:"≨︀",macr:"¯",male:"♂",malt:"✠",maltese:"✠",Map:"⤅",map:"↦",mapsto:"↦",mapstodown:"↧",mapstoleft:"↤",mapstoup:"↥",marker:"▮",mcomma:"⨩",Mcy:"М",mcy:"м",mdash:"—",mDDot:"∺",measuredangle:"∡",MediumSpace:" ",Mellintrf:"ℳ",Mfr:"𝔐",mfr:"𝔪",mho:"℧",micro:"µ",midast:"*",midcir:"⫰",mid:"∣",middot:"·",minusb:"⊟",minus:"−",minusd:"∸",minusdu:"⨪",MinusPlus:"∓",mlcp:"⫛",mldr:"…",mnplus:"∓",models:"⊧",Mopf:"𝕄",mopf:"𝕞",mp:"∓",mscr:"𝓂",Mscr:"ℳ",mstpos:"∾",Mu:"Μ",mu:"μ",multimap:"⊸",mumap:"⊸",nabla:"∇",Nacute:"Ń",nacute:"ń",nang:"∠⃒",nap:"≉",napE:"⩰̸",napid:"≋̸",napos:"ŉ",napprox:"≉",natural:"♮",naturals:"ℕ",natur:"♮",nbsp:" ",nbump:"≎̸",nbumpe:"≏̸",ncap:"⩃",Ncaron:"Ň",ncaron:"ň",Ncedil:"Ņ",ncedil:"ņ",ncong:"≇",ncongdot:"⩭̸",ncup:"⩂",Ncy:"Н",ncy:"н",ndash:"–",nearhk:"⤤",nearr:"↗",neArr:"⇗",nearrow:"↗",ne:"≠",nedot:"≐̸",NegativeMediumSpace:"​",NegativeThickSpace:"​",NegativeThinSpace:"​",NegativeVeryThinSpace:"​",nequiv:"≢",nesear:"⤨",nesim:"≂̸",NestedGreaterGreater:"≫",NestedLessLess:"≪",NewLine:"\n",nexist:"∄",nexists:"∄",Nfr:"𝔑",nfr:"𝔫",ngE:"≧̸",nge:"≱",ngeq:"≱",ngeqq:"≧̸",ngeqslant:"⩾̸",nges:"⩾̸",nGg:"⋙̸",ngsim:"≵",nGt:"≫⃒",ngt:"≯",ngtr:"≯",nGtv:"≫̸",nharr:"↮",nhArr:"⇎",nhpar:"⫲",ni:"∋",nis:"⋼",nisd:"⋺",niv:"∋",NJcy:"Њ",njcy:"њ",nlarr:"↚",nlArr:"⇍",nldr:"‥",nlE:"≦̸",nle:"≰",nleftarrow:"↚",nLeftarrow:"⇍",nleftrightarrow:"↮",nLeftrightarrow:"⇎",nleq:"≰",nleqq:"≦̸",nleqslant:"⩽̸",nles:"⩽̸",nless:"≮",nLl:"⋘̸",nlsim:"≴",nLt:"≪⃒",nlt:"≮",nltri:"⋪",nltrie:"⋬",nLtv:"≪̸",nmid:"∤",NoBreak:"⁠",NonBreakingSpace:" ",nopf:"𝕟",Nopf:"ℕ",Not:"⫬",not:"¬",NotCongruent:"≢",NotCupCap:"≭",NotDoubleVerticalBar:"∦",NotElement:"∉",NotEqual:"≠",NotEqualTilde:"≂̸",NotExists:"∄",NotGreater:"≯",NotGreaterEqual:"≱",NotGreaterFullEqual:"≧̸",NotGreaterGreater:"≫̸",NotGreaterLess:"≹",NotGreaterSlantEqual:"⩾̸",NotGreaterTilde:"≵",NotHumpDownHump:"≎̸",NotHumpEqual:"≏̸",notin:"∉",notindot:"⋵̸",notinE:"⋹̸",notinva:"∉",notinvb:"⋷",notinvc:"⋶",NotLeftTriangleBar:"⧏̸",NotLeftTriangle:"⋪",NotLeftTriangleEqual:"⋬",NotLess:"≮",NotLessEqual:"≰",NotLessGreater:"≸",NotLessLess:"≪̸",NotLessSlantEqual:"⩽̸",NotLessTilde:"≴",NotNestedGreaterGreater:"⪢̸",NotNestedLessLess:"⪡̸",notni:"∌",notniva:"∌",notnivb:"⋾",notnivc:"⋽",NotPrecedes:"⊀",NotPrecedesEqual:"⪯̸",NotPrecedesSlantEqual:"⋠",NotReverseElement:"∌",NotRightTriangleBar:"⧐̸",NotRightTriangle:"⋫",NotRightTriangleEqual:"⋭",NotSquareSubset:"⊏̸",NotSquareSubsetEqual:"⋢",NotSquareSuperset:"⊐̸",NotSquareSupersetEqual:"⋣",NotSubset:"⊂⃒",NotSubsetEqual:"⊈",NotSucceeds:"⊁",NotSucceedsEqual:"⪰̸",NotSucceedsSlantEqual:"⋡",NotSucceedsTilde:"≿̸",NotSuperset:"⊃⃒",NotSupersetEqual:"⊉",NotTilde:"≁",NotTildeEqual:"≄",NotTildeFullEqual:"≇",NotTildeTilde:"≉",NotVerticalBar:"∤",nparallel:"∦",npar:"∦",nparsl:"⫽⃥",npart:"∂̸",npolint:"⨔",npr:"⊀",nprcue:"⋠",nprec:"⊀",npreceq:"⪯̸",npre:"⪯̸",nrarrc:"⤳̸",nrarr:"↛",nrArr:"⇏",nrarrw:"↝̸",nrightarrow:"↛",nRightarrow:"⇏",nrtri:"⋫",nrtrie:"⋭",nsc:"⊁",nsccue:"⋡",nsce:"⪰̸",Nscr:"𝒩",nscr:"𝓃",nshortmid:"∤",nshortparallel:"∦",nsim:"≁",nsime:"≄",nsimeq:"≄",nsmid:"∤",nspar:"∦",nsqsube:"⋢",nsqsupe:"⋣",nsub:"⊄",nsubE:"⫅̸",nsube:"⊈",nsubset:"⊂⃒",nsubseteq:"⊈",nsubseteqq:"⫅̸",nsucc:"⊁",nsucceq:"⪰̸",nsup:"⊅",nsupE:"⫆̸",nsupe:"⊉",nsupset:"⊃⃒",nsupseteq:"⊉",nsupseteqq:"⫆̸",ntgl:"≹",Ntilde:"Ñ",ntilde:"ñ",ntlg:"≸",ntriangleleft:"⋪",ntrianglelefteq:"⋬",ntriangleright:"⋫",ntrianglerighteq:"⋭",Nu:"Ν",nu:"ν",num:"#",numero:"№",numsp:" ",nvap:"≍⃒",nvdash:"⊬",nvDash:"⊭",nVdash:"⊮",nVDash:"⊯",nvge:"≥⃒",nvgt:">⃒",nvHarr:"⤄",nvinfin:"⧞",nvlArr:"⤂",nvle:"≤⃒",nvlt:"<⃒",nvltrie:"⊴⃒",nvrArr:"⤃",nvrtrie:"⊵⃒",nvsim:"∼⃒",nwarhk:"⤣",nwarr:"↖",nwArr:"⇖",nwarrow:"↖",nwnear:"⤧",Oacute:"Ó",oacute:"ó",oast:"⊛",Ocirc:"Ô",ocirc:"ô",ocir:"⊚",Ocy:"О",ocy:"о",odash:"⊝",Odblac:"Ő",odblac:"ő",odiv:"⨸",odot:"⊙",odsold:"⦼",OElig:"Œ",oelig:"œ",ofcir:"⦿",Ofr:"𝔒",ofr:"𝔬",ogon:"˛",Ograve:"Ò",ograve:"ò",ogt:"⧁",ohbar:"⦵",ohm:"Ω",oint:"∮",olarr:"↺",olcir:"⦾",olcross:"⦻",oline:"‾",olt:"⧀",Omacr:"Ō",omacr:"ō",Omega:"Ω",omega:"ω",Omicron:"Ο",omicron:"ο",omid:"⦶",ominus:"⊖",Oopf:"𝕆",oopf:"𝕠",opar:"⦷",OpenCurlyDoubleQuote:"“",OpenCurlyQuote:"‘",operp:"⦹",oplus:"⊕",orarr:"↻",Or:"⩔",or:"∨",ord:"⩝",order:"ℴ",orderof:"ℴ",ordf:"ª",ordm:"º",origof:"⊶",oror:"⩖",orslope:"⩗",orv:"⩛",oS:"Ⓢ",Oscr:"𝒪",oscr:"ℴ",Oslash:"Ø",oslash:"ø",osol:"⊘",Otilde:"Õ",otilde:"õ",otimesas:"⨶",Otimes:"⨷",otimes:"⊗",Ouml:"Ö",ouml:"ö",ovbar:"⌽",OverBar:"‾",OverBrace:"⏞",OverBracket:"⎴",OverParenthesis:"⏜",para:"¶",parallel:"∥",par:"∥",parsim:"⫳",parsl:"⫽",part:"∂",PartialD:"∂",Pcy:"П",pcy:"п",percnt:"%",period:".",permil:"‰",perp:"⊥",pertenk:"‱",Pfr:"𝔓",pfr:"𝔭",Phi:"Φ",phi:"φ",phiv:"ϕ",phmmat:"ℳ",phone:"☎",Pi:"Π",pi:"π",pitchfork:"⋔",piv:"ϖ",planck:"ℏ",planckh:"ℎ",plankv:"ℏ",plusacir:"⨣",plusb:"⊞",pluscir:"⨢",plus:"+",plusdo:"∔",plusdu:"⨥",pluse:"⩲",PlusMinus:"±",plusmn:"±",plussim:"⨦",plustwo:"⨧",pm:"±",Poincareplane:"ℌ",pointint:"⨕",popf:"𝕡",Popf:"ℙ",pound:"£",prap:"⪷",Pr:"⪻",pr:"≺",prcue:"≼",precapprox:"⪷",prec:"≺",preccurlyeq:"≼",Precedes:"≺",PrecedesEqual:"⪯",PrecedesSlantEqual:"≼",PrecedesTilde:"≾",preceq:"⪯",precnapprox:"⪹",precneqq:"⪵",precnsim:"⋨",pre:"⪯",prE:"⪳",precsim:"≾",prime:"′",Prime:"″",primes:"ℙ",prnap:"⪹",prnE:"⪵",prnsim:"⋨",prod:"∏",Product:"∏",profalar:"⌮",profline:"⌒",profsurf:"⌓",prop:"∝",Proportional:"∝",Proportion:"∷",propto:"∝",prsim:"≾",prurel:"⊰",Pscr:"𝒫",pscr:"𝓅",Psi:"Ψ",psi:"ψ",puncsp:" ",Qfr:"𝔔",qfr:"𝔮",qint:"⨌",qopf:"𝕢",Qopf:"ℚ",qprime:"⁗",Qscr:"𝒬",qscr:"𝓆",quaternions:"ℍ",quatint:"⨖",quest:"?",questeq:"≟",quot:'"',QUOT:'"',rAarr:"⇛",race:"∽̱",Racute:"Ŕ",racute:"ŕ",radic:"√",raemptyv:"⦳",rang:"⟩",Rang:"⟫",rangd:"⦒",range:"⦥",rangle:"⟩",raquo:"»",rarrap:"⥵",rarrb:"⇥",rarrbfs:"⤠",rarrc:"⤳",rarr:"→",Rarr:"↠",rArr:"⇒",rarrfs:"⤞",rarrhk:"↪",rarrlp:"↬",rarrpl:"⥅",rarrsim:"⥴",Rarrtl:"⤖",rarrtl:"↣",rarrw:"↝",ratail:"⤚",rAtail:"⤜",ratio:"∶",rationals:"ℚ",rbarr:"⤍",rBarr:"⤏",RBarr:"⤐",rbbrk:"❳",rbrace:"}",rbrack:"]",rbrke:"⦌",rbrksld:"⦎",rbrkslu:"⦐",Rcaron:"Ř",rcaron:"ř",Rcedil:"Ŗ",rcedil:"ŗ",rceil:"⌉",rcub:"}",Rcy:"Р",rcy:"р",rdca:"⤷",rdldhar:"⥩",rdquo:"”",rdquor:"”",rdsh:"↳",real:"ℜ",realine:"ℛ",realpart:"ℜ",reals:"ℝ",Re:"ℜ",rect:"▭",reg:"®",REG:"®",ReverseElement:"∋",ReverseEquilibrium:"⇋",ReverseUpEquilibrium:"⥯",rfisht:"⥽",rfloor:"⌋",rfr:"𝔯",Rfr:"ℜ",rHar:"⥤",rhard:"⇁",rharu:"⇀",rharul:"⥬",Rho:"Ρ",rho:"ρ",rhov:"ϱ",RightAngleBracket:"⟩",RightArrowBar:"⇥",rightarrow:"→",RightArrow:"→",Rightarrow:"⇒",RightArrowLeftArrow:"⇄",rightarrowtail:"↣",RightCeiling:"⌉",RightDoubleBracket:"⟧",RightDownTeeVector:"⥝",RightDownVectorBar:"⥕",RightDownVector:"⇂",RightFloor:"⌋",rightharpoondown:"⇁",rightharpoonup:"⇀",rightleftarrows:"⇄",rightleftharpoons:"⇌",rightrightarrows:"⇉",rightsquigarrow:"↝",RightTeeArrow:"↦",RightTee:"⊢",RightTeeVector:"⥛",rightthreetimes:"⋌",RightTriangleBar:"⧐",RightTriangle:"⊳",RightTriangleEqual:"⊵",RightUpDownVector:"⥏",RightUpTeeVector:"⥜",RightUpVectorBar:"⥔",RightUpVector:"↾",RightVectorBar:"⥓",RightVector:"⇀",ring:"˚",risingdotseq:"≓",rlarr:"⇄",rlhar:"⇌",rlm:"‏",rmoustache:"⎱",rmoust:"⎱",rnmid:"⫮",roang:"⟭",roarr:"⇾",robrk:"⟧",ropar:"⦆",ropf:"𝕣",Ropf:"ℝ",roplus:"⨮",rotimes:"⨵",RoundImplies:"⥰",rpar:")",rpargt:"⦔",rppolint:"⨒",rrarr:"⇉",Rrightarrow:"⇛",rsaquo:"›",rscr:"𝓇",Rscr:"ℛ",rsh:"↱",Rsh:"↱",rsqb:"]",rsquo:"’",rsquor:"’",rthree:"⋌",rtimes:"⋊",rtri:"▹",rtrie:"⊵",rtrif:"▸",rtriltri:"⧎",RuleDelayed:"⧴",ruluhar:"⥨",rx:"℞",Sacute:"Ś",sacute:"ś",sbquo:"‚",scap:"⪸",Scaron:"Š",scaron:"š",Sc:"⪼",sc:"≻",sccue:"≽",sce:"⪰",scE:"⪴",Scedil:"Ş",scedil:"ş",Scirc:"Ŝ",scirc:"ŝ",scnap:"⪺",scnE:"⪶",scnsim:"⋩",scpolint:"⨓",scsim:"≿",Scy:"С",scy:"с",sdotb:"⊡",sdot:"⋅",sdote:"⩦",searhk:"⤥",searr:"↘",seArr:"⇘",searrow:"↘",sect:"§",semi:";",seswar:"⤩",setminus:"∖",setmn:"∖",sext:"✶",Sfr:"𝔖",sfr:"𝔰",sfrown:"⌢",sharp:"♯",SHCHcy:"Щ",shchcy:"щ",SHcy:"Ш",shcy:"ш",ShortDownArrow:"↓",ShortLeftArrow:"←",shortmid:"∣",shortparallel:"∥",ShortRightArrow:"→",ShortUpArrow:"↑",shy:"­",Sigma:"Σ",sigma:"σ",sigmaf:"ς",sigmav:"ς",sim:"∼",simdot:"⩪",sime:"≃",simeq:"≃",simg:"⪞",simgE:"⪠",siml:"⪝",simlE:"⪟",simne:"≆",simplus:"⨤",simrarr:"⥲",slarr:"←",SmallCircle:"∘",smallsetminus:"∖",smashp:"⨳",smeparsl:"⧤",smid:"∣",smile:"⌣",smt:"⪪",smte:"⪬",smtes:"⪬︀",SOFTcy:"Ь",softcy:"ь",solbar:"⌿",solb:"⧄",sol:"/",Sopf:"𝕊",sopf:"𝕤",spades:"♠",spadesuit:"♠",spar:"∥",sqcap:"⊓",sqcaps:"⊓︀",sqcup:"⊔",sqcups:"⊔︀",Sqrt:"√",sqsub:"⊏",sqsube:"⊑",sqsubset:"⊏",sqsubseteq:"⊑",sqsup:"⊐",sqsupe:"⊒",sqsupset:"⊐",sqsupseteq:"⊒",square:"□",Square:"□",SquareIntersection:"⊓",SquareSubset:"⊏",SquareSubsetEqual:"⊑",SquareSuperset:"⊐",SquareSupersetEqual:"⊒",SquareUnion:"⊔",squarf:"▪",squ:"□",squf:"▪",srarr:"→",Sscr:"𝒮",sscr:"𝓈",ssetmn:"∖",ssmile:"⌣",sstarf:"⋆",Star:"⋆",star:"☆",starf:"★",straightepsilon:"ϵ",straightphi:"ϕ",strns:"¯",sub:"⊂",Sub:"⋐",subdot:"⪽",subE:"⫅",sube:"⊆",subedot:"⫃",submult:"⫁",subnE:"⫋",subne:"⊊",subplus:"⪿",subrarr:"⥹",subset:"⊂",Subset:"⋐",subseteq:"⊆",subseteqq:"⫅",SubsetEqual:"⊆",subsetneq:"⊊",subsetneqq:"⫋",subsim:"⫇",subsub:"⫕",subsup:"⫓",succapprox:"⪸",succ:"≻",succcurlyeq:"≽",Succeeds:"≻",SucceedsEqual:"⪰",SucceedsSlantEqual:"≽",SucceedsTilde:"≿",succeq:"⪰",succnapprox:"⪺",succneqq:"⪶",succnsim:"⋩",succsim:"≿",SuchThat:"∋",sum:"∑",Sum:"∑",sung:"♪",sup1:"¹",sup2:"²",sup3:"³",sup:"⊃",Sup:"⋑",supdot:"⪾",supdsub:"⫘",supE:"⫆",supe:"⊇",supedot:"⫄",Superset:"⊃",SupersetEqual:"⊇",suphsol:"⟉",suphsub:"⫗",suplarr:"⥻",supmult:"⫂",supnE:"⫌",supne:"⊋",supplus:"⫀",supset:"⊃",Supset:"⋑",supseteq:"⊇",supseteqq:"⫆",supsetneq:"⊋",supsetneqq:"⫌",supsim:"⫈",supsub:"⫔",supsup:"⫖",swarhk:"⤦",swarr:"↙",swArr:"⇙",swarrow:"↙",swnwar:"⤪",szlig:"ß",Tab:"\t",target:"⌖",Tau:"Τ",tau:"τ",tbrk:"⎴",Tcaron:"Ť",tcaron:"ť",Tcedil:"Ţ",tcedil:"ţ",Tcy:"Т",tcy:"т",tdot:"⃛",telrec:"⌕",Tfr:"𝔗",tfr:"𝔱",there4:"∴",therefore:"∴",Therefore:"∴",Theta:"Θ",theta:"θ",thetasym:"ϑ",thetav:"ϑ",thickapprox:"≈",thicksim:"∼",ThickSpace:"  ",ThinSpace:" ",thinsp:" ",thkap:"≈",thksim:"∼",THORN:"Þ",thorn:"þ",tilde:"˜",Tilde:"∼",TildeEqual:"≃",TildeFullEqual:"≅",TildeTilde:"≈",timesbar:"⨱",timesb:"⊠",times:"×",timesd:"⨰",tint:"∭",toea:"⤨",topbot:"⌶",topcir:"⫱",top:"⊤",Topf:"𝕋",topf:"𝕥",topfork:"⫚",tosa:"⤩",tprime:"‴",trade:"™",TRADE:"™",triangle:"▵",triangledown:"▿",triangleleft:"◃",trianglelefteq:"⊴",triangleq:"≜",triangleright:"▹",trianglerighteq:"⊵",tridot:"◬",trie:"≜",triminus:"⨺",TripleDot:"⃛",triplus:"⨹",trisb:"⧍",tritime:"⨻",trpezium:"⏢",Tscr:"𝒯",tscr:"𝓉",TScy:"Ц",tscy:"ц",TSHcy:"Ћ",tshcy:"ћ",Tstrok:"Ŧ",tstrok:"ŧ",twixt:"≬",twoheadleftarrow:"↞",twoheadrightarrow:"↠",Uacute:"Ú",uacute:"ú",uarr:"↑",Uarr:"↟",uArr:"⇑",Uarrocir:"⥉",Ubrcy:"Ў",ubrcy:"ў",Ubreve:"Ŭ",ubreve:"ŭ",Ucirc:"Û",ucirc:"û",Ucy:"У",ucy:"у",udarr:"⇅",Udblac:"Ű",udblac:"ű",udhar:"⥮",ufisht:"⥾",Ufr:"𝔘",ufr:"𝔲",Ugrave:"Ù",ugrave:"ù",uHar:"⥣",uharl:"↿",uharr:"↾",uhblk:"▀",ulcorn:"⌜",ulcorner:"⌜",ulcrop:"⌏",ultri:"◸",Umacr:"Ū",umacr:"ū",uml:"¨",UnderBar:"_",UnderBrace:"⏟",UnderBracket:"⎵",UnderParenthesis:"⏝",Union:"⋃",UnionPlus:"⊎",Uogon:"Ų",uogon:"ų",Uopf:"𝕌",uopf:"𝕦",UpArrowBar:"⤒",uparrow:"↑",UpArrow:"↑",Uparrow:"⇑",UpArrowDownArrow:"⇅",updownarrow:"↕",UpDownArrow:"↕",Updownarrow:"⇕",UpEquilibrium:"⥮",upharpoonleft:"↿",upharpoonright:"↾",uplus:"⊎",UpperLeftArrow:"↖",UpperRightArrow:"↗",upsi:"υ",Upsi:"ϒ",upsih:"ϒ",Upsilon:"Υ",upsilon:"υ",UpTeeArrow:"↥",UpTee:"⊥",upuparrows:"⇈",urcorn:"⌝",urcorner:"⌝",urcrop:"⌎",Uring:"Ů",uring:"ů",urtri:"◹",Uscr:"𝒰",uscr:"𝓊",utdot:"⋰",Utilde:"Ũ",utilde:"ũ",utri:"▵",utrif:"▴",uuarr:"⇈",Uuml:"Ü",uuml:"ü",uwangle:"⦧",vangrt:"⦜",varepsilon:"ϵ",varkappa:"ϰ",varnothing:"∅",varphi:"ϕ",varpi:"ϖ",varpropto:"∝",varr:"↕",vArr:"⇕",varrho:"ϱ",varsigma:"ς",varsubsetneq:"⊊︀",varsubsetneqq:"⫋︀",varsupsetneq:"⊋︀",varsupsetneqq:"⫌︀",vartheta:"ϑ",vartriangleleft:"⊲",vartriangleright:"⊳",vBar:"⫨",Vbar:"⫫",vBarv:"⫩",Vcy:"В",vcy:"в",vdash:"⊢",vDash:"⊨",Vdash:"⊩",VDash:"⊫",Vdashl:"⫦",veebar:"⊻",vee:"∨",Vee:"⋁",veeeq:"≚",vellip:"⋮",verbar:"|",Verbar:"‖",vert:"|",Vert:"‖",VerticalBar:"∣",VerticalLine:"|",VerticalSeparator:"❘",VerticalTilde:"≀",VeryThinSpace:" ",Vfr:"𝔙",vfr:"𝔳",vltri:"⊲",vnsub:"⊂⃒",vnsup:"⊃⃒",Vopf:"𝕍",vopf:"𝕧",vprop:"∝",vrtri:"⊳",Vscr:"𝒱",vscr:"𝓋",vsubnE:"⫋︀",vsubne:"⊊︀",vsupnE:"⫌︀",vsupne:"⊋︀",Vvdash:"⊪",vzigzag:"⦚",Wcirc:"Ŵ",wcirc:"ŵ",wedbar:"⩟",wedge:"∧",Wedge:"⋀",wedgeq:"≙",weierp:"℘",Wfr:"𝔚",wfr:"𝔴",Wopf:"𝕎",wopf:"𝕨",wp:"℘",wr:"≀",wreath:"≀",Wscr:"𝒲",wscr:"𝓌",xcap:"⋂",xcirc:"◯",xcup:"⋃",xdtri:"▽",Xfr:"𝔛",xfr:"𝔵",xharr:"⟷",xhArr:"⟺",Xi:"Ξ",xi:"ξ",xlarr:"⟵",xlArr:"⟸",xmap:"⟼",xnis:"⋻",xodot:"⨀",Xopf:"𝕏",xopf:"𝕩",xoplus:"⨁",xotime:"⨂",xrarr:"⟶",xrArr:"⟹",Xscr:"𝒳",xscr:"𝓍",xsqcup:"⨆",xuplus:"⨄",xutri:"△",xvee:"⋁",xwedge:"⋀",Yacute:"Ý",yacute:"ý",YAcy:"Я",yacy:"я",Ycirc:"Ŷ",ycirc:"ŷ",Ycy:"Ы",ycy:"ы",yen:"¥",Yfr:"𝔜",yfr:"𝔶",YIcy:"Ї",yicy:"ї",Yopf:"𝕐",yopf:"𝕪",Yscr:"𝒴",yscr:"𝓎",YUcy:"Ю",yucy:"ю",yuml:"ÿ",Yuml:"Ÿ",Zacute:"Ź",zacute:"ź",Zcaron:"Ž",zcaron:"ž",Zcy:"З",zcy:"з",Zdot:"Ż",zdot:"ż",zeetrf:"ℨ",ZeroWidthSpace:"​",Zeta:"Ζ",zeta:"ζ",zfr:"𝔷",Zfr:"ℨ",ZHcy:"Ж",zhcy:"ж",zigrarr:"⇝",zopf:"𝕫",Zopf:"ℤ",Zscr:"𝒵",zscr:"𝓏",zwj:"‍",zwnj:"‌"};},{}],53:[function(e,r,t){function n(e){var r=Array.prototype.slice.call(arguments,1);return r.forEach(function(r){r&&Object.keys(r).forEach(function(t){e[t]=r[t];});}),e}function o(e){return Object.prototype.toString.call(e)}function s(e){return "[object Function]"===o(e)}function i(e){return e.replace(/[.?*+^$[\]\\(){}|-]/g,"\\$&")}var a={fuzzyLink:!0,fuzzyEmail:!0,fuzzyIP:!1},l={"http:":{validate:function(e,r,t){var n=e.slice(r);return t.re.http||(t.re.http=new RegExp("^\\/\\/"+t.re.src_auth+t.re.src_host_port_strict+t.re.src_path,"i")),t.re.http.test(n)?n.match(t.re.http)[0].length:0}},"https:":"http:","ftp:":"http:","//":{validate:function(e,r,t){var n=e.slice(r);return t.re.no_http||(t.re.no_http=new RegExp("^"+t.re.src_auth+"(?:localhost|(?:(?:"+t.re.src_domain+")\\.)+"+t.re.src_domain_root+")"+t.re.src_port+t.re.src_host_terminator+t.re.src_path,"i")),t.re.no_http.test(n)?r>=3&&":"===e[r-3]?0:r>=3&&"/"===e[r-3]?0:n.match(t.re.no_http)[0].length:0}},"mailto:":{validate:function(e,r,t){var n=e.slice(r);return t.re.mailto||(t.re.mailto=new RegExp("^"+t.re.src_email_name+"@"+t.re.src_host_strict,"i")),t.re.mailto.test(n)?n.match(t.re.mailto)[0].length:0}}},c="a[cdefgilmnoqrstuwxz]|b[abdefghijmnorstvwyz]|c[acdfghiklmnoruvwxyz]|d[ejkmoz]|e[cegrstu]|f[ijkmor]|g[abdefghilmnpqrstuwy]|h[kmnrtu]|i[delmnoqrst]|j[emop]|k[eghimnprwyz]|l[abcikrstuvy]|m[acdeghklmnopqrstuvwxyz]|n[acefgilopruz]|om|p[aefghklmnrstwy]|qa|r[eosuw]|s[abcdeghijklmnortuvxyz]|t[cdfghjklmnortvwz]|u[agksyz]|v[aceginu]|w[fs]|y[et]|z[amw]",u="biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|рф".split("|");function p(r){var t=r.re=e("./lib/re")(r.__opts__),n=r.__tlds__.slice();function a(e){return e.replace("%TLDS%",t.src_tlds)}r.onCompile(),r.__tlds_replaced__||n.push(c),n.push(t.src_xn),t.src_tlds=n.join("|"),t.email_fuzzy=RegExp(a(t.tpl_email_fuzzy),"i"),t.link_fuzzy=RegExp(a(t.tpl_link_fuzzy),"i"),t.link_no_ip_fuzzy=RegExp(a(t.tpl_link_no_ip_fuzzy),"i"),t.host_fuzzy_test=RegExp(a(t.tpl_host_fuzzy_test),"i");var l=[];function u(e,r){throw new Error('(LinkifyIt) Invalid schema "'+e+'": '+r)}r.__compiled__={},Object.keys(r.__schemas__).forEach(function(e){var t=r.__schemas__[e];if(null!==t){var n,i={validate:null,link:null};if(r.__compiled__[e]=i,"[object Object]"===o(t))return function(e){return "[object RegExp]"===o(e)}(t.validate)?i.validate=(n=t.validate,function(e,r){var t=e.slice(r);return n.test(t)?t.match(n)[0].length:0}):s(t.validate)?i.validate=t.validate:u(e,t),void(s(t.normalize)?i.normalize=t.normalize:t.normalize?u(e,t):i.normalize=function(e,r){r.normalize(e);});!function(e){return "[object String]"===o(e)}(t)?u(e,t):l.push(e);}}),l.forEach(function(e){r.__compiled__[r.__schemas__[e]]&&(r.__compiled__[e].validate=r.__compiled__[r.__schemas__[e]].validate,r.__compiled__[e].normalize=r.__compiled__[r.__schemas__[e]].normalize);}),r.__compiled__[""]={validate:null,normalize:function(e,r){r.normalize(e);}};var p=Object.keys(r.__compiled__).filter(function(e){return e.length>0&&r.__compiled__[e]}).map(i).join("|");r.re.schema_test=RegExp("(^|(?!_)(?:[><｜]|"+t.src_ZPCc+"))("+p+")","i"),r.re.schema_search=RegExp("(^|(?!_)(?:[><｜]|"+t.src_ZPCc+"))("+p+")","ig"),r.re.pretest=RegExp("("+r.re.schema_test.source+")|("+r.re.host_fuzzy_test.source+")|@","i"),function(e){e.__index__=-1,e.__text_cache__="";}(r);}function h(e,r){var t=e.__index__,n=e.__last_index__,o=e.__text_cache__.slice(t,n);this.schema=e.__schema__.toLowerCase(),this.index=t+r,this.lastIndex=n+r,this.raw=o,this.text=o,this.url=o;}function f(e,r){var t=new h(e,r);return e.__compiled__[t.schema].normalize(t,e),t}function d(e,r){if(!(this instanceof d))return new d(e,r);var t;r||(t=e,Object.keys(t||{}).reduce(function(e,r){return e||a.hasOwnProperty(r)},!1)&&(r=e,e={})),this.__opts__=n({},a,r),this.__index__=-1,this.__last_index__=-1,this.__schema__="",this.__text_cache__="",this.__schemas__=n({},l,e),this.__compiled__={},this.__tlds__=u,this.__tlds_replaced__=!1,this.re={},p(this);}d.prototype.add=function(e,r){return this.__schemas__[e]=r,p(this),this},d.prototype.set=function(e){return this.__opts__=n(this.__opts__,e),this},d.prototype.test=function(e){if(this.__text_cache__=e,this.__index__=-1,!e.length)return !1;var r,t,n,o,s,i,a,l;if(this.re.schema_test.test(e))for((a=this.re.schema_search).lastIndex=0;null!==(r=a.exec(e));)if(o=this.testSchemaAt(e,r[2],a.lastIndex)){this.__schema__=r[2],this.__index__=r.index+r[1].length,this.__last_index__=r.index+r[0].length+o;break}return this.__opts__.fuzzyLink&&this.__compiled__["http:"]&&(l=e.search(this.re.host_fuzzy_test))>=0&&(this.__index__<0||l<this.__index__)&&null!==(t=e.match(this.__opts__.fuzzyIP?this.re.link_fuzzy:this.re.link_no_ip_fuzzy))&&(s=t.index+t[1].length,(this.__index__<0||s<this.__index__)&&(this.__schema__="",this.__index__=s,this.__last_index__=t.index+t[0].length)),this.__opts__.fuzzyEmail&&this.__compiled__["mailto:"]&&e.indexOf("@")>=0&&null!==(n=e.match(this.re.email_fuzzy))&&(s=n.index+n[1].length,i=n.index+n[0].length,(this.__index__<0||s<this.__index__||s===this.__index__&&i>this.__last_index__)&&(this.__schema__="mailto:",this.__index__=s,this.__last_index__=i)),this.__index__>=0},d.prototype.pretest=function(e){return this.re.pretest.test(e)},d.prototype.testSchemaAt=function(e,r,t){return this.__compiled__[r.toLowerCase()]?this.__compiled__[r.toLowerCase()].validate(e,t,this):0},d.prototype.match=function(e){var r=0,t=[];this.__index__>=0&&this.__text_cache__===e&&(t.push(f(this,r)),r=this.__last_index__);for(var n=r?e.slice(r):e;this.test(n);)t.push(f(this,r)),n=n.slice(this.__last_index__),r+=this.__last_index__;return t.length?t:null},d.prototype.tlds=function(e,r){return e=Array.isArray(e)?e:[e],r?(this.__tlds__=this.__tlds__.concat(e).sort().filter(function(e,r,t){return e!==t[r-1]}).reverse(),p(this),this):(this.__tlds__=e.slice(),this.__tlds_replaced__=!0,p(this),this)},d.prototype.normalize=function(e){e.schema||(e.url="http://"+e.url),"mailto:"!==e.schema||/^mailto:/i.test(e.url)||(e.url="mailto:"+e.url);},d.prototype.onCompile=function(){},r.exports=d;},{"./lib/re":54}],54:[function(e,r,t){r.exports=function(r){var t={};return t.src_Any=e("uc.micro/properties/Any/regex").source,t.src_Cc=e("uc.micro/categories/Cc/regex").source,t.src_Z=e("uc.micro/categories/Z/regex").source,t.src_P=e("uc.micro/categories/P/regex").source,t.src_ZPCc=[t.src_Z,t.src_P,t.src_Cc].join("|"),t.src_ZCc=[t.src_Z,t.src_Cc].join("|"),t.src_pseudo_letter="(?:(?![><｜]|"+t.src_ZPCc+")"+t.src_Any+")",t.src_ip4="(?:(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)",t.src_auth="(?:(?:(?!"+t.src_ZCc+"|[@/\\[\\]()]).)+@)?",t.src_port="(?::(?:6(?:[0-4]\\d{3}|5(?:[0-4]\\d{2}|5(?:[0-2]\\d|3[0-5])))|[1-5]?\\d{1,4}))?",t.src_host_terminator="(?=$|[><｜]|"+t.src_ZPCc+")(?!-|_|:\\d|\\.-|\\.(?!$|"+t.src_ZPCc+"))",t.src_path="(?:[/?#](?:(?!"+t.src_ZCc+"|[><｜]|[()[\\]{}.,\"'?!\\-]).|\\[(?:(?!"+t.src_ZCc+"|\\]).)*\\]|\\((?:(?!"+t.src_ZCc+"|[)]).)*\\)|\\{(?:(?!"+t.src_ZCc+'|[}]).)*\\}|\\"(?:(?!'+t.src_ZCc+'|["]).)+\\"|\\\'(?:(?!'+t.src_ZCc+"|[']).)+\\'|\\'(?="+t.src_pseudo_letter+"|[-]).|\\.{2,4}[a-zA-Z0-9%/]|\\.(?!"+t.src_ZCc+"|[.]).|"+(r&&r["---"]?"\\-(?!--(?:[^-]|$))(?:-*)|":"\\-+|")+"\\,(?!"+t.src_ZCc+").|\\!(?!"+t.src_ZCc+"|[!]).|\\?(?!"+t.src_ZCc+"|[?]).)+|\\/)?",t.src_email_name='[\\-;:&=\\+\\$,\\.a-zA-Z0-9_][\\-;:&=\\+\\$,\\"\\.a-zA-Z0-9_]*',t.src_xn="xn--[a-z0-9\\-]{1,59}",t.src_domain_root="(?:"+t.src_xn+"|"+t.src_pseudo_letter+"{1,63})",t.src_domain="(?:"+t.src_xn+"|(?:"+t.src_pseudo_letter+")|(?:"+t.src_pseudo_letter+"(?:-|"+t.src_pseudo_letter+"){0,61}"+t.src_pseudo_letter+"))",t.src_host="(?:(?:(?:(?:"+t.src_domain+")\\.)*"+t.src_domain+"))",t.tpl_host_fuzzy="(?:"+t.src_ip4+"|(?:(?:(?:"+t.src_domain+")\\.)+(?:%TLDS%)))",t.tpl_host_no_ip_fuzzy="(?:(?:(?:"+t.src_domain+")\\.)+(?:%TLDS%))",t.src_host_strict=t.src_host+t.src_host_terminator,t.tpl_host_fuzzy_strict=t.tpl_host_fuzzy+t.src_host_terminator,t.src_host_port_strict=t.src_host+t.src_port+t.src_host_terminator,t.tpl_host_port_fuzzy_strict=t.tpl_host_fuzzy+t.src_port+t.src_host_terminator,t.tpl_host_port_no_ip_fuzzy_strict=t.tpl_host_no_ip_fuzzy+t.src_port+t.src_host_terminator,t.tpl_host_fuzzy_test="localhost|www\\.|\\.\\d{1,3}\\.|(?:\\.(?:%TLDS%)(?:"+t.src_ZPCc+"|>|$))",t.tpl_email_fuzzy='(^|[><｜]|"|\\(|'+t.src_ZCc+")("+t.src_email_name+"@"+t.tpl_host_fuzzy_strict+")",t.tpl_link_fuzzy="(^|(?![.:/\\-_@])(?:[$+<=>^`|｜]|"+t.src_ZPCc+"))((?![$+<=>^`|｜])"+t.tpl_host_port_fuzzy_strict+t.src_path+")",t.tpl_link_no_ip_fuzzy="(^|(?![.:/\\-_@])(?:[$+<=>^`|｜]|"+t.src_ZPCc+"))((?![$+<=>^`|｜])"+t.tpl_host_port_no_ip_fuzzy_strict+t.src_path+")",t};},{"uc.micro/categories/Cc/regex":61,"uc.micro/categories/P/regex":63,"uc.micro/categories/Z/regex":64,"uc.micro/properties/Any/regex":66}],55:[function(e,r,t){var n={};function o(e,r){var t;return "string"!=typeof r&&(r=o.defaultChars),t=function(e){var r,t,o=n[e];if(o)return o;for(o=n[e]=[],r=0;r<128;r++)t=String.fromCharCode(r),o.push(t);for(r=0;r<e.length;r++)t=e.charCodeAt(r),o[t]="%"+("0"+t.toString(16).toUpperCase()).slice(-2);return o}(r),e.replace(/(%[a-f0-9]{2})+/gi,function(e){var r,n,o,s,i,a,l,c="";for(r=0,n=e.length;r<n;r+=3)(o=parseInt(e.slice(r+1,r+3),16))<128?c+=t[o]:192==(224&o)&&r+3<n&&128==(192&(s=parseInt(e.slice(r+4,r+6),16)))?(c+=(l=o<<6&1984|63&s)<128?"��":String.fromCharCode(l),r+=3):224==(240&o)&&r+6<n&&(s=parseInt(e.slice(r+4,r+6),16),i=parseInt(e.slice(r+7,r+9),16),128==(192&s)&&128==(192&i))?(c+=(l=o<<12&61440|s<<6&4032|63&i)<2048||l>=55296&&l<=57343?"���":String.fromCharCode(l),r+=6):240==(248&o)&&r+9<n&&(s=parseInt(e.slice(r+4,r+6),16),i=parseInt(e.slice(r+7,r+9),16),a=parseInt(e.slice(r+10,r+12),16),128==(192&s)&&128==(192&i)&&128==(192&a))?((l=o<<18&1835008|s<<12&258048|i<<6&4032|63&a)<65536||l>1114111?c+="����":(l-=65536,c+=String.fromCharCode(55296+(l>>10),56320+(1023&l))),r+=9):c+="�";return c})}o.defaultChars=";/?:@&=+$,#",o.componentChars="",r.exports=o;},{}],56:[function(e,r,t){var n={};function o(e,r,t){var s,i,a,l,c,u="";for("string"!=typeof r&&(t=r,r=o.defaultChars),void 0===t&&(t=!0),c=function(e){var r,t,o=n[e];if(o)return o;for(o=n[e]=[],r=0;r<128;r++)t=String.fromCharCode(r),/^[0-9a-z]$/i.test(t)?o.push(t):o.push("%"+("0"+r.toString(16).toUpperCase()).slice(-2));for(r=0;r<e.length;r++)o[e.charCodeAt(r)]=e[r];return o}(r),s=0,i=e.length;s<i;s++)if(a=e.charCodeAt(s),t&&37===a&&s+2<i&&/^[0-9a-f]{2}$/i.test(e.slice(s+1,s+3)))u+=e.slice(s,s+3),s+=2;else if(a<128)u+=c[a];else if(a>=55296&&a<=57343){if(a>=55296&&a<=56319&&s+1<i&&(l=e.charCodeAt(s+1))>=56320&&l<=57343){u+=encodeURIComponent(e[s]+e[s+1]),s++;continue}u+="%EF%BF%BD";}else u+=encodeURIComponent(e[s]);return u}o.defaultChars=";/?:@&=+$,-_.!~*'()#",o.componentChars="-_.!~*'()",r.exports=o;},{}],57:[function(e,r,t){r.exports=function(e){var r="";return r+=e.protocol||"",r+=e.slashes?"//":"",r+=e.auth?e.auth+"@":"",e.hostname&&-1!==e.hostname.indexOf(":")?r+="["+e.hostname+"]":r+=e.hostname||"",r+=e.port?":"+e.port:"",r+=e.pathname||"",r+=e.search||"",r+=e.hash||""};},{}],58:[function(e,r,t){r.exports.encode=e("./encode"),r.exports.decode=e("./decode"),r.exports.format=e("./format"),r.exports.parse=e("./parse");},{"./decode":55,"./encode":56,"./format":57,"./parse":59}],59:[function(e,r,t){function n(){this.protocol=null,this.slashes=null,this.auth=null,this.port=null,this.hostname=null,this.hash=null,this.search=null,this.pathname=null;}var o=/^([a-z0-9.+-]+:)/i,s=/:[0-9]*$/,i=/^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,a=["{","}","|","\\","^","`"].concat(["<",">",'"',"`"," ","\r","\n","\t"]),l=["'"].concat(a),c=["%","/","?",";","#"].concat(l),u=["/","?","#"],p=/^[+a-z0-9A-Z_-]{0,63}$/,h=/^([+a-z0-9A-Z_-]{0,63})(.*)$/,f={javascript:!0,"javascript:":!0},d={http:!0,https:!0,ftp:!0,gopher:!0,file:!0,"http:":!0,"https:":!0,"ftp:":!0,"gopher:":!0,"file:":!0};n.prototype.parse=function(e,r){var t,n,s,a,l,m=e;if(m=m.trim(),!r&&1===e.split("#").length){var _=i.exec(m);if(_)return this.pathname=_[1],_[2]&&(this.search=_[2]),this}var g=o.exec(m);if(g&&(g=g[0],s=g.toLowerCase(),this.protocol=g,m=m.substr(g.length)),(r||g||m.match(/^\/\/[^@\/]+@[^@\/]+/))&&(!(l="//"===m.substr(0,2))||g&&f[g]||(m=m.substr(2),this.slashes=!0)),!f[g]&&(l||g&&!d[g])){var k,b,v=-1;for(t=0;t<u.length;t++)-1!==(a=m.indexOf(u[t]))&&(-1===v||a<v)&&(v=a);for(-1!==(b=-1===v?m.lastIndexOf("@"):m.lastIndexOf("@",v))&&(k=m.slice(0,b),m=m.slice(b+1),this.auth=k),v=-1,t=0;t<c.length;t++)-1!==(a=m.indexOf(c[t]))&&(-1===v||a<v)&&(v=a);-1===v&&(v=m.length),":"===m[v-1]&&v--;var y=m.slice(0,v);m=m.slice(v),this.parseHost(y),this.hostname=this.hostname||"";var x="["===this.hostname[0]&&"]"===this.hostname[this.hostname.length-1];if(!x){var C=this.hostname.split(/\./);for(t=0,n=C.length;t<n;t++){var A=C[t];if(A&&!A.match(p)){for(var w="",D=0,E=A.length;D<E;D++)A.charCodeAt(D)>127?w+="x":w+=A[D];if(!w.match(p)){var q=C.slice(0,t),F=C.slice(t+1),S=A.match(h);S&&(q.push(S[1]),F.unshift(S[2])),F.length&&(m=F.join(".")+m),this.hostname=q.join(".");break}}}}this.hostname.length>255&&(this.hostname=""),x&&(this.hostname=this.hostname.substr(1,this.hostname.length-2));}var L=m.indexOf("#");-1!==L&&(this.hash=m.substr(L),m=m.slice(0,L));var z=m.indexOf("?");return -1!==z&&(this.search=m.substr(z),m=m.slice(0,z)),m&&(this.pathname=m),d[s]&&this.hostname&&!this.pathname&&(this.pathname=""),this},n.prototype.parseHost=function(e){var r=s.exec(e);r&&(":"!==(r=r[0])&&(this.port=r.substr(1)),e=e.substr(0,e.length-r.length)),e&&(this.hostname=e);},r.exports=function(e,r){if(e&&e instanceof n)return e;var t=new n;return t.parse(e,r),t};},{}],60:[function(r,t,n){(function(e){!function(r){var o="object"==typeof n&&n&&!n.nodeType&&n,s="object"==typeof t&&t&&!t.nodeType&&t,i="object"==typeof e&&e;i.global!==i&&i.window!==i&&i.self!==i||(r=i);var a,l,c=2147483647,u=36,p=1,h=26,f=38,d=700,m=72,_=128,g="-",k=/^xn--/,b=/[^\x20-\x7E]/,v=/[\x2E\u3002\uFF0E\uFF61]/g,y={overflow:"Overflow: input needs wider integers to process","not-basic":"Illegal input >= 0x80 (not a basic code point)","invalid-input":"Invalid input"},x=u-p,C=Math.floor,A=String.fromCharCode;function w(e){throw new RangeError(y[e])}function D(e,r){for(var t=e.length,n=[];t--;)n[t]=r(e[t]);return n}function E(e,r){var t=e.split("@"),n="";t.length>1&&(n=t[0]+"@",e=t[1]);var o=(e=e.replace(v,".")).split("."),s=D(o,r).join(".");return n+s}function q(e){for(var r,t,n=[],o=0,s=e.length;o<s;)(r=e.charCodeAt(o++))>=55296&&r<=56319&&o<s?56320==(64512&(t=e.charCodeAt(o++)))?n.push(((1023&r)<<10)+(1023&t)+65536):(n.push(r),o--):n.push(r);return n}function F(e){return D(e,function(e){var r="";return e>65535&&(r+=A((e-=65536)>>>10&1023|55296),e=56320|1023&e),r+=A(e)}).join("")}function S(e,r){return e+22+75*(e<26)-((0!=r)<<5)}function L(e,r,t){var n=0;for(e=t?C(e/d):e>>1,e+=C(e/r);e>x*h>>1;n+=u)e=C(e/x);return C(n+(x+1)*e/(e+f))}function z(e){var r,t,n,o,s,i,a,l,f,d,k,b=[],v=e.length,y=0,x=_,A=m;for((t=e.lastIndexOf(g))<0&&(t=0),n=0;n<t;++n)e.charCodeAt(n)>=128&&w("not-basic"),b.push(e.charCodeAt(n));for(o=t>0?t+1:0;o<v;){for(s=y,i=1,a=u;o>=v&&w("invalid-input"),k=e.charCodeAt(o++),((l=k-48<10?k-22:k-65<26?k-65:k-97<26?k-97:u)>=u||l>C((c-y)/i))&&w("overflow"),y+=l*i,!(l<(f=a<=A?p:a>=A+h?h:a-A));a+=u)i>C(c/(d=u-f))&&w("overflow"),i*=d;r=b.length+1,A=L(y-s,r,0==s),C(y/r)>c-x&&w("overflow"),x+=C(y/r),y%=r,b.splice(y++,0,x);}return F(b)}function T(e){var r,t,n,o,s,i,a,l,f,d,k,b,v,y,x,D=[];for(e=q(e),b=e.length,r=_,t=0,s=m,i=0;i<b;++i)(k=e[i])<128&&D.push(A(k));for(n=o=D.length,o&&D.push(g);n<b;){for(a=c,i=0;i<b;++i)(k=e[i])>=r&&k<a&&(a=k);for(a-r>C((c-t)/(v=n+1))&&w("overflow"),t+=(a-r)*v,r=a,i=0;i<b;++i)if((k=e[i])<r&&++t>c&&w("overflow"),k==r){for(l=t,f=u;!(l<(d=f<=s?p:f>=s+h?h:f-s));f+=u)x=l-d,y=u-d,D.push(A(S(d+x%y,0))),l=C(x/y);D.push(A(S(l,0))),s=L(t,v,n==o),t=0,++n;}++t,++r;}return D.join("")}if(a={version:"1.4.1",ucs2:{decode:q,encode:F},decode:z,encode:T,toASCII:function(e){return E(e,function(e){return b.test(e)?"xn--"+T(e):e})},toUnicode:function(e){return E(e,function(e){return k.test(e)?z(e.slice(4).toLowerCase()):e})}},o&&s)if(t.exports==o)s.exports=a;else for(l in a)a.hasOwnProperty(l)&&(o[l]=a[l]);else r.punycode=a;}(this);}).call(this,void 0!==e?e:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{});},{}],61:[function(e,r,t){r.exports=/[\0-\x1F\x7F-\x9F]/;},{}],62:[function(e,r,t){r.exports=/[\xAD\u0600-\u0605\u061C\u06DD\u070F\u08E2\u180E\u200B-\u200F\u202A-\u202E\u2060-\u2064\u2066-\u206F\uFEFF\uFFF9-\uFFFB]|\uD804[\uDCBD\uDCCD]|\uD82F[\uDCA0-\uDCA3]|\uD834[\uDD73-\uDD7A]|\uDB40[\uDC01\uDC20-\uDC7F]/;},{}],63:[function(e,r,t){r.exports=/[!-#%-\*,-\/:;\?@\[-\]_\{\}\xA1\xA7\xAB\xB6\xB7\xBB\xBF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166D\u166E\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2010-\u2027\u2030-\u2043\u2045-\u2051\u2053-\u205E\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4E\u3001-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]|\uD800[\uDD00-\uDD02\uDF9F\uDFD0]|\uD801\uDD6F|\uD802[\uDC57\uDD1F\uDD3F\uDE50-\uDE58\uDE7F\uDEF0-\uDEF6\uDF39-\uDF3F\uDF99-\uDF9C]|\uD803[\uDF55-\uDF59]|\uD804[\uDC47-\uDC4D\uDCBB\uDCBC\uDCBE-\uDCC1\uDD40-\uDD43\uDD74\uDD75\uDDC5-\uDDC8\uDDCD\uDDDB\uDDDD-\uDDDF\uDE38-\uDE3D\uDEA9]|\uD805[\uDC4B-\uDC4F\uDC5B\uDC5D\uDCC6\uDDC1-\uDDD7\uDE41-\uDE43\uDE60-\uDE6C\uDF3C-\uDF3E]|\uD806[\uDC3B\uDE3F-\uDE46\uDE9A-\uDE9C\uDE9E-\uDEA2]|\uD807[\uDC41-\uDC45\uDC70\uDC71\uDEF7\uDEF8]|\uD809[\uDC70-\uDC74]|\uD81A[\uDE6E\uDE6F\uDEF5\uDF37-\uDF3B\uDF44]|\uD81B[\uDE97-\uDE9A]|\uD82F\uDC9F|\uD836[\uDE87-\uDE8B]|\uD83A[\uDD5E\uDD5F]/;},{}],64:[function(e,r,t){r.exports=/[ \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000]/;},{}],65:[function(e,r,t){t.Any=e("./properties/Any/regex"),t.Cc=e("./categories/Cc/regex"),t.Cf=e("./categories/Cf/regex"),t.P=e("./categories/P/regex"),t.Z=e("./categories/Z/regex");},{"./categories/Cc/regex":61,"./categories/Cf/regex":62,"./categories/P/regex":63,"./categories/Z/regex":64,"./properties/Any/regex":66}],66:[function(e,r,t){r.exports=/[\0-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/;},{}],67:[function(e,r,t){r.exports=e("./lib/");},{"./lib/":9}]},{},[67])(67);}(t={exports:{}},t.exports),t.exports);function o(e,r){var t,n,o,s,i=e.pos,a=e.src.charCodeAt(i);if(r)return !1;if(43!==a)return !1;if(o=(n=e.scanDelims(e.pos,!0)).length,s=String.fromCharCode(a),o<2)return !1;for(o%2&&(e.push("text","",0).content=s,o--),t=0;t<o;t+=2)e.push("text","",0).content=s+s,e.delimiters.push({marker:a,jump:t,token:e.tokens.length-1,level:e.level,end:-1,open:n.can_open,close:n.can_close});return e.pos+=n.length,!0}function s(e){var r,t,n,o,s,i=[],a=e.delimiters,l=e.delimiters.length;for(r=0;r<l;r++)43===(n=a[r]).marker&&-1!==n.end&&(o=a[n.end],(s=e.tokens[n.token]).type="u_open",s.tag="u",s.nesting=1,s.markup="++",s.content="",(s=e.tokens[o.token]).type="u_close",s.tag="u",s.nesting=-1,s.markup="++",s.content="","text"===e.tokens[o.token-1].type&&"+"===e.tokens[o.token-1].content&&i.push(o.token-1));for(;i.length;){for(t=(r=i.pop())+1;t<e.tokens.length&&"u_close"===e.tokens[t].type;)t++;r!==--t&&(s=e.tokens[t],e.tokens[t]=e.tokens[r],e.tokens[r]=s);}}var i=function(e){e.inline.ruler.after("emphasis","underline",o),e.inline.ruler2.after("emphasis","underline",s);};return new(function(){function e(){this._md=n("commonmark"),this._md.use(i);}return e.prototype.toHTML=function(e){return this._md.render(e)},e}())});
  });

  /**
   * This class leverages the {@link RtfConverter} library to perform Rich Text to
   * HTML conversions.
   */

  var RichTextFormatterImpl =
  /*#__PURE__*/
  function () {
    function RichTextFormatterImpl() {
      _classCallCheck(this, RichTextFormatterImpl);
    }

    _createClass(RichTextFormatterImpl, [{
      key: "format",

      /**
       * Generates an HTML representation of the provided Rich Text field value. Note that
       * the HTML will contain a wrapper div. This is to support click analytics for Rich Text
       * links.
       *
       * @param {string} fieldValue A Rich Text field value.
       * @param {string} fieldName The name of the field, to be included in the payload of a click
       *                           analytics event. This parameter is optional.
       * @param {Object|string} targetConfig Configuration object specifying the 'target' behavior for
       *                          the various types of links. If a string is provided, it is assumed that
       *                          is the 'target' behavior across all types of links. This parameter is optional.
       * @returns {string} The HTML representation of the field value, serialized as a string.
       */
      value: function format(fieldValue, fieldName, targetConfig) {
        var _this = this;

        if (typeof fieldValue !== 'string') {
          throw new AnswersCoreError("Rich text \"".concat(fieldValue, "\" needs to be a string. Currently is a ").concat(_typeof(fieldValue)));
        }

        var pluginName = this._generatePluginName();

        rtfConverter_min.addPlugin(iterator, pluginName, 'link_open', function (tokens, idx) {
          return _this._urlTransformer(tokens, idx, targetConfig);
        });
        fieldName = fieldName || '';
        var html = "<div class=\"js-yxt-rtfValue\" data-field-name=\"".concat(fieldName, "\">\n") + "".concat(rtfConverter_min.toHTML(fieldValue)) + '</div>'; // Because all invocations of this method share the same {@link RtfConverter}, we must make sure to
        // disable the plugin added above. Otherwise, it will be applied in all subsequent conversions.

        rtfConverter_min.disablePlugin(pluginName);
        return html;
      }
      /**
       * An inline token parser for use with the {@link iterator} Markdown-it plugin.
       * This token parser adds a cta-type data attribute to any link it encounters.
       */

    }, {
      key: "_urlTransformer",
      value: function _urlTransformer(tokens, idx, targetConfig) {
        targetConfig = targetConfig || {};
        var target;

        if (typeof targetConfig === 'string') {
          target = targetConfig;
        }

        var href = tokens[idx].attrGet('href');
        var ctaType;

        if (href.startsWith('mailto')) {
          ctaType = 'EMAIL';
          target = target || targetConfig.email;
        } else if (href.startsWith('tel')) {
          ctaType = 'TAP_TO_CALL';
          target = target || targetConfig.phone;
        } else {
          ctaType = 'VIEW_WEBSITE';
          target = target || targetConfig.url;
        }

        tokens[idx].attrSet('data-cta-type', ctaType);
        target && tokens[idx].attrSet('target', target);
      }
      /**
       * A function that generates a unique UUID to serve as the name for a
       * Markdown-it plugin.
       *
       * @returns {string} the UUID.
       */

    }, {
      key: "_generatePluginName",
      value: function _generatePluginName() {
        function s4() {
          return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
        }

        return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();
      }
    }]);

    return RichTextFormatterImpl;
  }();

  var RichTextFormatter = new RichTextFormatterImpl();

  function isValidContext(context) {
    // should be both valid JSON and a map
    var parsed;

    try {
      parsed = JSON.parse(context);
    } catch (e) {
      return false;
    }

    if (!parsed) {
      return false;
    }

    return _typeof(parsed) === 'object' && !Array.isArray(parsed);
  }

  /** @typedef {import('./core/services/searchservice').default} SearchService */

  /** @typedef {import('./core/services/autocompleteservice').default} AutoCompleteService */

  /** @typedef {import('./core/services/questionanswerservice').default} QuestionAnswerService */

  /** @typedef {import('./core/services/errorreporterservice').default} ErrorReporterService */

  /** @typedef {import('./core/services/analyticsreporterservice').default} AnalyticsReporterService */

  /**
   * @typedef Services
   * @property {SearchService} searchService
   * @property {AutoCompleteService} autoCompleteService
   * @property {QuestionAnswerService} questionAnswerService
   * @property {ErrorReporterService} errorReporterService
   */

  var DEFAULTS = {
    locale: 'en'
  };
  /**
   * The main Answers interface
   */

  var Answers =
  /*#__PURE__*/
  function () {
    function Answers() {
      _classCallCheck(this, Answers);

      if (!Answers.setInstance(this)) {
        return Answers.getInstance();
      }
      /**
       * A reference to the Component base class for custom
       * components to extend
       */


      this.Component = Component;
      /**
       * A reference to the AnalyticsEvent base class for reporting
       * custom analytics
       */

      this.AnalyticsEvent = AnalyticsEvent;
      /**
       * A reference to the FilterNodeFactory class for creating {@link FilterNode}s.
       */

      this.FilterNodeFactory = FilterNodeFactory;
      /**
       * A reference of the renderer to use for the components
       * This is provided during initialization.
       * @type {Renderer}
       */

      this.renderer = new Renderers.Handlebars();
      /**
       * A reference to the formatRichText function.
       * @type {Function}
       */

      this.formatRichText = function (markdown, eventOptionsFieldName, targetConfig) {
        return RichTextFormatter.format(markdown, eventOptionsFieldName, targetConfig);
      };
      /**
       * A local reference to the component manager
       * @type {ComponentManager}
       */


      this.components = ComponentManager.getInstance();
      /**
       * A local reference to the core api
       * @type {Core}
       */

      this.core = null;
      /**
       * A callback function to invoke once the library is ready.
       * Typically fired after templates are fetched from server for rendering.
       */

      this._onReady = function () {};
      /**
       * @type {boolean}
       * @private
       */


      this._eligibleForAnalytics = false;
      /**
       * @type {Services}
       * @private
       */

      this._services = null;
      /**
       * @type {AnalyticsReporterService}
       * @private
       */

      this._analyticsReporterService = null;
    }

    _createClass(Answers, [{
      key: "init",

      /**
       * Initializes the SDK with the provided configuration. Note that before onReady
       * is ever called, a check to the relevant Answers Status page is made.
       *
       * @param {Object} config The Answers configuration.
       * @param {Object} statusPage An override for the baseUrl and endpoint of the
       *                            experience's Answers Status page.
       */
      value: function init(config, statusPage) {
        var _this = this;

        var parsedConfig = this.parseConfig(config);
        this.validateConfig(parsedConfig);
        parsedConfig.search = new SearchConfig(parsedConfig.search);
        parsedConfig.verticalPages = new VerticalPagesConfig(parsedConfig.verticalPages);
        var globalStorage = new GlobalStorage();
        var persistentStorage = new PersistentStorage({
          updateListener: parsedConfig.onStateChange,
          resetListener: function resetListener(data) {
            return globalStorage.setAll(data);
          }
        });
        globalStorage.setAll(persistentStorage.getAll());
        globalStorage.set(StorageKeys.SEARCH_CONFIG, parsedConfig.search);
        globalStorage.set(StorageKeys.VERTICAL_PAGES_CONFIG, parsedConfig.verticalPages);
        globalStorage.set(StorageKeys.LOCALE, parsedConfig.locale);
        globalStorage.set(StorageKeys.SESSIONS_OPT_IN, parsedConfig.sessionTrackingEnabled);
        parsedConfig.noResults && globalStorage.set(StorageKeys.NO_RESULTS_CONFIG, parsedConfig.noResults);
        var context = globalStorage.getState(StorageKeys.API_CONTEXT);

        if (context && !isValidContext(context)) {
          persistentStorage["delete"](StorageKeys.API_CONTEXT, true);
          globalStorage["delete"](StorageKeys.API_CONTEXT);
          console.error("Context parameter \"".concat(context, "\" is invalid, omitting from the search."));
        }

        if (globalStorage.getState(StorageKeys.REFERRER_PAGE_URL) === null) {
          globalStorage.set(StorageKeys.REFERRER_PAGE_URL, urlWithoutQueryParamsAndHash(document.referrer));
        }

        this._masterSwitchApi = statusPage ? new MasterSwitchApi(_objectSpread({
          apiKey: parsedConfig.apiKey
        }, statusPage), globalStorage) : MasterSwitchApi.from(parsedConfig.apiKey, parsedConfig.experienceKey, globalStorage);
        this._services = parsedConfig.mock ? getMockServices() : getServices(parsedConfig, globalStorage);
        this._eligibleForAnalytics = parsedConfig.businessId != null; // TODO(amullings): Initialize with other services

        if (this._eligibleForAnalytics && parsedConfig.mock) {
          this._analyticsReporterService = new NoopAnalyticsReporter();
        } else if (this._eligibleForAnalytics) {
          this._analyticsReporterService = new AnalyticsReporter(parsedConfig.experienceKey, parsedConfig.experienceVersion, parsedConfig.businessId, parsedConfig.analyticsOptions, parsedConfig.environment); // listen to query id updates

          globalStorage.on('update', StorageKeys.QUERY_ID, function (id) {
            return _this._analyticsReporterService.setQueryId(id);
          });
          this.components.setAnalyticsReporter(this._analyticsReporterService);
          initScrollListener(this._analyticsReporterService);
        }

        this.core = new Core({
          apiKey: parsedConfig.apiKey,
          globalStorage: globalStorage,
          persistentStorage: persistentStorage,
          experienceKey: parsedConfig.experienceKey,
          fieldFormatters: parsedConfig.fieldFormatters,
          experienceVersion: parsedConfig.experienceVersion,
          locale: parsedConfig.locale,
          searchService: this._services.searchService,
          autoCompleteService: this._services.autoCompleteService,
          questionAnswerService: this._services.questionAnswerService,
          analyticsReporter: this._analyticsReporterService,
          onVerticalSearch: parsedConfig.onVerticalSearch,
          onUniversalSearch: parsedConfig.onUniversalSearch
        });

        if (parsedConfig.onStateChange && typeof parsedConfig.onStateChange === 'function') {
          parsedConfig.onStateChange(persistentStorage.getAll(), window.location.search.substr(1));
        }

        this.components.setCore(this.core).setRenderer(this.renderer);

        this._setDefaultInitialSearch(parsedConfig.search);

        this._onReady = parsedConfig.onReady || function () {};

        if (parsedConfig.useTemplates === false || parsedConfig.templateBundle) {
          if (parsedConfig.templateBundle) {
            this.renderer.init(parsedConfig.templateBundle);
          }

          this._handlePonyfillCssVariables(parsedConfig.disableCssVariablesPonyfill, this._invokeOnReady.bind(this));

          return this;
        } // Templates are currently downloaded separately from the CORE and UI bundle.
        // Future enhancement is to ship the components with templates in a separate bundle.


        this.templates = new DefaultTemplatesLoader(function (templates) {
          _this.renderer.init(templates);

          _this._handlePonyfillCssVariables(parsedConfig.disableCssVariablesPonyfill, _this._invokeOnReady.bind(_this));
        });
        return this;
      }
      /**
       * Checks the experience's Answer Status page before invoking onReady. If the status is
       * disabled, onReady is not called.
       */

    }, {
      key: "_invokeOnReady",
      value: function _invokeOnReady() {
        var _this2 = this;

        this._masterSwitchApi.isDisabled().then(function (isDisabled) {
          return !isDisabled && _this2._onReady();
        }, function () {
          return _this2._onReady();
        });
      }
      /**
       * Calls the CSS vars ponyfill, if opted-in, and invokes the callback
       * regardless of if there was an error/success. If opted-out, only invokes the callback.
       * @param {boolean} option to opt out of the css variables ponyfill
       * @param callback {Function} always called after function
       */

    }, {
      key: "_handlePonyfillCssVariables",
      value: function _handlePonyfillCssVariables(ponyfillDisabled, callback) {
        if (!ponyfillDisabled) {
          this.ponyfillCssVariables({
            onFinally: function onFinally() {
              callback();
            }
          });
        } else {
          callback();
        }
      }
    }, {
      key: "domReady",
      value: function domReady(cb) {
        DOM.onReady(cb);
      }
    }, {
      key: "onReady",
      value: function onReady(cb) {
        this._onReady = cb;
        return this;
      }
      /**
       * Parses the config provided by the user. In the parsed config, any options not supplied by the
       * user are given default values.
       * @param {Object} config The user supplied config.
       */

    }, {
      key: "parseConfig",
      value: function parseConfig(config) {
        var parsedConfig = Object.assign({}, DEFAULTS, config);
        var sessionTrackingEnabled = true;

        if (typeof config.sessionTrackingEnabled === 'boolean') {
          sessionTrackingEnabled = config.sessionTrackingEnabled;
        }

        parsedConfig.sessionTrackingEnabled = sessionTrackingEnabled;
        var sandboxPrefix = "".concat(SANDBOX, "-");
        parsedConfig.apiKey.includes(sandboxPrefix) ? parsedConfig.environment = SANDBOX : parsedConfig.environment = PRODUCTION;
        parsedConfig.apiKey = parsedConfig.apiKey.replace(sandboxPrefix, '');
        return parsedConfig;
      }
      /**
       * Validates the Answers config object to ensure things like api key and experience key are
       * properly set.
       * @param {Object} config The Answers config.
       */

    }, {
      key: "validateConfig",
      value: function validateConfig(config) {
        // TODO (tmeyer): Extract this method into it's own class. Investigate the use of JSON schema
        // to validate these configs.
        if (typeof config.apiKey !== 'string') {
          throw new Error('Missing required `apiKey`. Type must be {string}');
        }

        if (typeof config.experienceKey !== 'string') {
          throw new Error('Missing required `experienceKey`. Type must be {string}');
        }

        if (config.onVerticalSearch && typeof config.onVerticalSearch !== 'function') {
          throw new Error('onVerticalSearch must be a function. Current type is: ' + _typeof(config.onVerticalSearch));
        }

        if (config.onUniversalSearch && typeof config.onUniversalSearch !== 'function') {
          throw new Error('onUniversalSearch must be a function. Current type is: ' + _typeof(config.onUniversalSearch));
        }
      }
      /**
       * Register a custom component type so it can be created via
       * addComponent and used as a child component
       * @param {Component} componentClass
       */

    }, {
      key: "registerComponentType",
      value: function registerComponentType(componentClass) {
        this.components.register(componentClass);
      }
    }, {
      key: "addComponent",
      value: function addComponent(type, opts) {
        if (typeof opts === 'string') {
          opts = {
            container: opts
          };
        }

        try {
          this.components.create(type, opts).mount();
        } catch (e) {
          throw new AnswersComponentError('Failed to add component', type, e);
        }

        return this;
      }
      /**
       * Remove the component - and all of its children - with the given name
       * @param {string} name The name of the component to remove
       */

    }, {
      key: "removeComponent",
      value: function removeComponent(name) {
        this.components.removeByName(name);
      }
    }, {
      key: "createComponent",
      value: function createComponent(opts) {
        return this.components.create('Component', opts).mount();
      }
    }, {
      key: "registerHelper",
      value: function registerHelper(name, cb) {
        this.renderer.registerHelper(name, cb);
        return this;
      }
      /**
       * Compile and add a template to the current renderer
       * @param {string} templateName The unique name for the template
       * @param {string} template The handlebars template string
       */

    }, {
      key: "registerTemplate",
      value: function registerTemplate(templateName, template) {
        this.renderer.registerTemplate(templateName, template);
      }
      /**
       * Opt in or out of convertion tracking analytics
       * @param {boolean} optIn
       */

    }, {
      key: "setConversionsOptIn",
      value: function setConversionsOptIn(optIn) {
        if (this._eligibleForAnalytics) {
          this._analyticsReporterService.setConversionTrackingEnabled(optIn);
        }
      }
      /**
       * Opt in or out of session cookies
       * @param {boolean} optIn
       */

    }, {
      key: "setSessionsOptIn",
      value: function setSessionsOptIn(optIn) {
        this.core.globalStorage.set(StorageKeys.SESSIONS_OPT_IN, optIn);
      }
      /**
       * Sets a search query on initialization for vertical searchers that have a
       * defaultInitialSearch provided, if the user hasn't already provided their
       * own via URL param.
       * @param {SearchConfig} searchConfig
       * @private
       */

    }, {
      key: "_setDefaultInitialSearch",
      value: function _setDefaultInitialSearch(searchConfig) {
        if (searchConfig.defaultInitialSearch == null || !searchConfig.verticalKey) {
          return;
        }

        var prepopulatedQuery = this.core.globalStorage.getState(StorageKeys.QUERY);

        if (prepopulatedQuery != null) {
          return;
        }

        this.core.globalStorage.set('queryTrigger', 'initialize');
        this.core.setQuery(searchConfig.defaultInitialSearch);
      }
      /**
       * Sets the geolocation tag in global storage, overriding other inputs. Do not use in conjunction
       * with other components that will set the geolocation internally.
       * @param {number} lat
       * @param {number} long
       */

    }, {
      key: "setGeolocation",
      value: function setGeolocation(lat, lng) {
        this.core.globalStorage.set(StorageKeys.GEOLOCATION, {
          lat: lat,
          lng: lng,
          radius: 0
        });
      }
      /*
       * Updates the css styles with new current variables. This is useful when the css
       * variables are updated dynamically (e.g. through js) or if the css variables are
       * added after the ANSWERS.init
       *
       * To solve issues with non-zero max-age cache controls for link/script assets in IE11,
       * we add a cache busting parameter so that XMLHttpRequests succeed.
       *
       * @param {Object} config Additional config to pass to the ponyfill
       */

    }, {
      key: "ponyfillCssVariables",
      value: function ponyfillCssVariables() {
        var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        cssVars({
          onlyLegacy: true,
          onError: config.onError || function () {},
          onSuccess: config.onSuccess || function () {},
          onFinally: config.onFinally || function () {},
          onBeforeSend: function onBeforeSend(xhr, node, url) {
            try {
              var uriWithCacheBust = new URL(url);
              var params = new SearchParams(uriWithCacheBust.search);
              params.set('_', new Date().getTime());
              uriWithCacheBust.search = params.toString();
              xhr.open('GET', uriWithCacheBust.toString());
            } catch (e) {// Catch the error and continue if the URL provided in the asset is not a valid URL
            }
          }
        });
      }
      /*
       * Adds context as a parameter for the query API calls.
       * @param {Object} context The context object passed in the API calls
       */

    }, {
      key: "setContext",
      value: function setContext(context) {
        var contextString = JSON.stringify(context);

        if (!isValidContext(contextString)) {
          console.error("Context parameter \"".concat(context, "\" is invalid, omitting from the search."));
          return;
        }

        this.core.globalStorage.set(StorageKeys.API_CONTEXT, contextString);
      }
    }], [{
      key: "setInstance",
      value: function setInstance(instance) {
        if (!this.instance) {
          this.instance = instance;
          return true;
        }

        return false;
      }
    }, {
      key: "getInstance",
      value: function getInstance() {
        return this.instance;
      }
    }]);

    return Answers;
  }();
  /**
   * @param {Object} config
   * @param {GlobalStorage} globalStorage
   * @returns {Services}
   */


  function getServices(config, globalStorage) {
    return {
      searchService: new SearchApi({
        apiKey: config.apiKey,
        experienceKey: config.experienceKey,
        experienceVersion: config.experienceVersion,
        locale: config.locale,
        environment: config.environment
      }),
      autoCompleteService: new AutoCompleteApi({
        apiKey: config.apiKey,
        experienceKey: config.experienceKey,
        experienceVersion: config.experienceVersion,
        locale: config.locale,
        environment: config.environment
      }, globalStorage),
      questionAnswerService: new QuestionAnswerApi({
        apiKey: config.apiKey,
        environment: config.environment
      }, globalStorage),
      errorReporterService: new ErrorReporter({
        apiKey: config.apiKey,
        experienceKey: config.experienceKey,
        experienceVersion: config.experienceVersion,
        printVerbose: config.debug,
        sendToServer: !config.suppressErrorReports,
        environment: config.environment
      }, globalStorage)
    };
  }
  /**
   * @returns {Services}
   */


  function getMockServices() {
    return {
      searchService: new MockSearchService(),
      autoCompleteService: new MockAutoCompleteService(),
      questionAnswerService: new MockQuestionAnswerService(),
      errorReporterService: new ConsoleErrorReporter()
    };
  }
  /**
   * Initialize the scroll event listener to send analytics events
   * when the user scrolls to the bottom. Debounces scroll events so
   * they are processed after the user stops scrolling
   */


  function initScrollListener(reporter) {
    var DEBOUNCE_TIME = 100;
    var timeout = null;

    var sendEvent = function sendEvent() {
      if (window.innerHeight + window.pageYOffset >= document.body.scrollHeight) {
        var event = new AnalyticsEvent('SCROLL_TO_BOTTOM_OF_PAGE');

        if (reporter.getQueryId()) {
          reporter.report(event);
        }
      }
    };

    document.addEventListener('scroll', function () {
      clearTimeout(timeout);
      timeout = setTimeout(sendEvent, DEBOUNCE_TIME);
    });
  }

  var ANSWERS = new Answers();

  return ANSWERS;

}));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5zd2Vycy11bWQuanMiLCJzb3VyY2VzIjpbInNyYy9jb3JlL3N0b3JhZ2Uvc2VhcmNoc3RhdGVzLmpzIiwic3JjL2NvcmUvbW9kZWxzL3Jlc3VsdC5qcyIsInNyYy9jb3JlL21vZGVscy9oaWdobGlnaHRlZHZhbHVlLmpzIiwic3JjL2NvcmUvZXJyb3JzL2Vycm9ycy5qcyIsInNyYy9jb3JlL21vZGVscy9yZXN1bHRmYWN0b3J5LmpzIiwic3JjL2NvcmUvbW9kZWxzL3NlY3Rpb24uanMiLCJzcmMvY29yZS9tb2RlbHMvdW5pdmVyc2FscmVzdWx0cy5qcyIsInNyYy9jb3JlL21vZGVscy9kaXJlY3RhbnN3ZXIuanMiLCJzcmMvY29yZS9tb2RlbHMvbmF2aWdhdGlvbi5qcyIsInNyYy9jb3JlL21vZGVscy92ZXJ0aWNhbHJlc3VsdHMuanMiLCJzcmMvY29yZS9tb2RlbHMvc3BlbGxjaGVjay5qcyIsInNyYy9jb3JlL3N0b3JhZ2Uvc3RvcmFnZWtleXMuanMiLCJzcmMvY29yZS9tb2RlbHMvZHluYW1pY2ZpbHRlcnMuanMiLCJzcmMvY29yZS9tb2RlbHMvc2VhcmNoaW50ZW50cy5qcyIsInNyYy9jb3JlL21vZGVscy9sb2NhdGlvbmJpYXMuanMiLCJzcmMvY29yZS9tb2RlbHMvYWx0ZXJuYXRpdmV2ZXJ0aWNhbHMuanMiLCJzcmMvY29yZS9zdG9yYWdlL3Jlc3VsdHNjb250ZXh0LmpzIiwic3JjL2NvcmUvc2VhcmNoL3NlYXJjaGRhdGF0cmFuc2Zvcm1lci5qcyIsInNyYy9jb3JlL21vZGVscy9xdWVzdGlvbnN1Ym1pc3Npb24uanMiLCJzcmMvY29yZS9hbmFseXRpY3MvYW5hbHl0aWNzZXZlbnQuanMiLCJzcmMvY29yZS9maWx0ZXJzL2ZpbHRlcmNvbWJpbmF0b3JzLmpzIiwic3JjL2NvcmUvbW9kZWxzL2ZpbHRlci5qcyIsInNyYy9jb3JlL2ZpbHRlcnMvZmlsdGVydHlwZS5qcyIsInNyYy9jb3JlL2ZpbHRlcnMvZmlsdGVybWV0YWRhdGEuanMiLCJzcmMvY29yZS9maWx0ZXJzL2ZpbHRlcm5vZGUuanMiLCJzcmMvY29yZS9maWx0ZXJzL3NpbXBsZWZpbHRlcm5vZGUuanMiLCJzcmMvY29yZS9maWx0ZXJzL2NvbWJpbmVkZmlsdGVybm9kZS5qcyIsInNyYy9jb3JlL2ZpbHRlcnMvZmlsdGVybm9kZWZhY3RvcnkuanMiLCJzcmMvY29yZS9tb2RlbHMvZmFjZXQuanMiLCJzcmMvY29yZS9maWx0ZXJzL2ZpbHRlcnJlZ2lzdHJ5LmpzIiwic3JjL2NvcmUvY29yZS5qcyIsIm5vZGVfbW9kdWxlcy9jc3MtdmFycy1wb255ZmlsbC9kaXN0L2Nzcy12YXJzLXBvbnlmaWxsLmVzbS5qcyIsInNyYy91aS9kb20vZG9tLmpzIiwic3JjL3VpL2RvbS9zZWFyY2hwYXJhbXMuanMiLCJzcmMvdWkvcmVuZGVyaW5nL3JlbmRlcmVyLmpzIiwic3JjL3VpL2ljb25zL2ljb24uanMiLCJzcmMvdWkvaWNvbnMvdGh1bWIuanMiLCJzcmMvdWkvaWNvbnMvcmVjZWlwdC5qcyIsInNyYy91aS9pY29ucy9wYW50aGVvbi5qcyIsInNyYy91aS9pY29ucy9taWMuanMiLCJzcmMvdWkvaWNvbnMvZGlyZWN0aW9ucy5qcyIsInNyYy91aS9pY29ucy9jYWxlbmRhci5qcyIsInNyYy91aS9pY29ucy9jYWxsb3V0LmpzIiwic3JjL3VpL2ljb25zL2luZm8uanMiLCJzcmMvdWkvaWNvbnMvYnJpZWZjYXNlLmpzIiwic3JjL3VpL2ljb25zL2thYm9iLmpzIiwic3JjL3VpL2ljb25zL3BlcnNvbi5qcyIsInNyYy91aS9pY29ucy9tYWduaWZ5aW5nX2dsYXNzLmpzIiwic3JjL3VpL2ljb25zL29mZmljZS5qcyIsInNyYy91aS9pY29ucy9saW5rLmpzIiwic3JjL3VpL2ljb25zL3dpbmRvdy5qcyIsInNyYy91aS9pY29ucy9waG9uZS5qcyIsInNyYy91aS9pY29ucy90YWcuanMiLCJzcmMvdWkvaWNvbnMvZG9jdW1lbnQuanMiLCJzcmMvdWkvaWNvbnMvY2hldnJvbi5qcyIsInNyYy91aS9pY29ucy9zdXBwb3J0LmpzIiwic3JjL3VpL2ljb25zL3lleHQuanMiLCJzcmMvdWkvaWNvbnMvcGluLmpzIiwic3JjL3VpL2ljb25zL2dlYXIuanMiLCJzcmMvdWkvaWNvbnMvbGlnaHRfYnVsYi5qcyIsInNyYy91aS9pY29ucy9zdGFyLmpzIiwic3JjL3VpL2ljb25zL2Nsb3NlLmpzIiwic3JjL3VpL2ljb25zL2VsZW1lbnRzLmpzIiwic3JjL3VpL2ljb25zL3lleHRfYW5pbWF0ZWRfcmV2ZXJzZS5qcyIsInNyYy91aS9pY29ucy95ZXh0X2FuaW1hdGVkX2ZvcndhcmQuanMiLCJzcmMvdWkvaWNvbnMvZW1haWwuanMiLCJzcmMvdWkvaWNvbnMvaW5kZXguanMiLCJzcmMvdWkvcmVuZGVyaW5nL2hhbmRsZWJhcnNyZW5kZXJlci5qcyIsInNyYy91aS9yZW5kZXJpbmcvY29uc3QuanMiLCJzcmMvY29yZS9jb25zdGFudHMuanMiLCJzcmMvdWkvcmVuZGVyaW5nL2RlZmF1bHR0ZW1wbGF0ZXNsb2FkZXIuanMiLCJzcmMvdWkvaW5kZXguanMiLCJzcmMvY29yZS9ldmVudGVtaXR0ZXIvZXZlbnRlbWl0dGVyLmpzIiwic3JjL3VpL2NvbXBvbmVudHMvc3RhdGUuanMiLCJub2RlX21vZHVsZXMvd2hhdHdnLWZldGNoL2ZldGNoLmpzIiwic3JjL2NvcmUvaHR0cC9odHRwcmVxdWVzdGVyLmpzIiwic3JjL3VpL2NvbXBvbmVudHMvY29tcG9uZW50dHlwZXMuanMiLCJzcmMvY29yZS91dGlscy91cmx1dGlscy5qcyIsInNyYy9jb3JlL2h0dHAvYXBpcmVxdWVzdC5qcyIsInNyYy9jb3JlL3NlYXJjaC9zZWFyY2hhcGkuanMiLCJzcmMvY29yZS9hbmFseXRpY3MvYW5hbHl0aWNzcmVwb3J0ZXIuanMiLCJzcmMvY29yZS9hbmFseXRpY3Mvbm9vcGFuYWx5dGljc3JlcG9ydGVyLmpzIiwic3JjL2NvcmUvc3RvcmFnZS9tb2R1bGVkYXRhLmpzIiwic3JjL2NvcmUvc3RvcmFnZS9nbG9iYWxzdG9yYWdlLmpzIiwic3JjL2NvcmUvaW5kZXguanMiLCJzcmMvdWkvY29tcG9uZW50cy9jb21wb25lbnQuanMiLCJzcmMvY29yZS9lcnJvcnMvZXJyb3JyZXBvcnRlci5qcyIsInNyYy9jb3JlL2Vycm9ycy9jb25zb2xlZXJyb3JyZXBvcnRlci5qcyIsInNyYy91aS9zdG9yYWdlL3BlcnNpc3RlbnRzdG9yYWdlLmpzIiwic3JjL2NvcmUvbW9kZWxzL3NlYXJjaGNvbmZpZy5qcyIsInNyYy9jb3JlL21vZGVscy9hdXRvY29tcGxldGVkYXRhLmpzIiwic3JjL2NvcmUvc2VhcmNoL2F1dG9jb21wbGV0ZWRhdGF0cmFuc2Zvcm1lci5qcyIsInNyYy9jb3JlL3NlYXJjaC9hdXRvY29tcGxldGVhcGkuanMiLCJzcmMvY29yZS9zZWFyY2gvbW9ja2F1dG9jb21wbGV0ZXNlcnZpY2UuanMiLCJzcmMvY29yZS9zZWFyY2gvcXVlc3Rpb25hbnN3ZXJhcGkuanMiLCJzcmMvY29yZS9zZWFyY2gvbW9ja3F1ZXN0aW9uYW5zd2Vyc2VydmljZS5qcyIsInNyYy9jb3JlL3NlYXJjaC9tb2Nrc2VhcmNoc2VydmljZS5qcyIsInNyYy91aS90b29scy90YWJvcmRlci5qcyIsInNyYy91aS9jb21wb25lbnRzL25hdmlnYXRpb24vbmF2aWdhdGlvbmNvbXBvbmVudC5qcyIsInNyYy91aS9jb21wb25lbnRzL3NlYXJjaC9zZWFyY2hjb21wb25lbnQuanMiLCJzcmMvdWkvdG9vbHMvc2VhcmNocGFyYW1zcGFyc2VyLmpzIiwic3JjL3VpL2NvbXBvbmVudHMvc2VhcmNoL2ZpbHRlcnNlYXJjaGNvbXBvbmVudC5qcyIsInNyYy91aS9jb21wb25lbnRzL3NlYXJjaC9hdXRvY29tcGxldGVjb21wb25lbnQuanMiLCJzcmMvdWkvY29tcG9uZW50cy9zZWFyY2gvc3BlbGxjaGVja2NvbXBvbmVudC5qcyIsInNyYy91aS9jb21wb25lbnRzL3NlYXJjaC9sb2NhdGlvbmJpYXNjb21wb25lbnQuanMiLCJzcmMvdWkvY29tcG9uZW50cy9maWx0ZXJzL2ZpbHRlcmJveGNvbXBvbmVudC5qcyIsIm5vZGVfbW9kdWxlcy9qcy1sZXZlbnNodGVpbi9pbmRleC5qcyIsInNyYy9jb3JlL3V0aWxzL2FycmF5dXRpbHMuanMiLCJzcmMvdWkvY29tcG9uZW50cy9maWx0ZXJzL2ZpbHRlcm9wdGlvbnNjb21wb25lbnQuanMiLCJzcmMvdWkvY29tcG9uZW50cy9maWx0ZXJzL3JhbmdlZmlsdGVyY29tcG9uZW50LmpzIiwic3JjL3VpL2NvbXBvbmVudHMvZmlsdGVycy9kYXRlcmFuZ2VmaWx0ZXJjb21wb25lbnQuanMiLCJzcmMvdWkvY29tcG9uZW50cy9maWx0ZXJzL2ZhY2V0c2NvbXBvbmVudC5qcyIsInNyYy91aS9jb21wb25lbnRzL2ZpbHRlcnMvZ2VvbG9jYXRpb25jb21wb25lbnQuanMiLCJzcmMvdWkvY29tcG9uZW50cy9maWx0ZXJzL3NvcnRvcHRpb25zY29tcG9uZW50LmpzIiwic3JjL3VpL2NvbXBvbmVudHMvcmVzdWx0cy9kaXJlY3RhbnN3ZXJjb21wb25lbnQuanMiLCJzcmMvY29yZS9tb2RlbHMvYWx0ZXJuYXRpdmV2ZXJ0aWNhbC5qcyIsInNyYy91aS9jb21wb25lbnRzL3Jlc3VsdHMvYWx0ZXJuYXRpdmV2ZXJ0aWNhbHNjb21wb25lbnQuanMiLCJzcmMvdWkvY29tcG9uZW50cy9tYXAvcHJvdmlkZXJzL21hcHByb3ZpZGVyLmpzIiwic3JjL3VpL2NvbXBvbmVudHMvbWFwL3Byb3ZpZGVycy9nb29nbGVtYXBwcm92aWRlci5qcyIsInNyYy91aS9jb21wb25lbnRzL21hcC9wcm92aWRlcnMvbWFwYm94bWFwcHJvdmlkZXIuanMiLCJzcmMvdWkvY29tcG9uZW50cy9tYXAvbWFwY29tcG9uZW50LmpzIiwic3JjL3VpL2NvbXBvbmVudHMvY2FyZHMvY29uc3RzLmpzIiwic3JjL3VpL2NvbXBvbmVudHMvY2FyZHMvY2FyZGNvbXBvbmVudC5qcyIsInNyYy9jb3JlL3V0aWxzL2ZpbHRlcm5vZGV1dGlscy5qcyIsInNyYy91aS9jb21wb25lbnRzL3Jlc3VsdHMvcmVzdWx0c2hlYWRlcmNvbXBvbmVudC5qcyIsInNyYy9jb3JlL3V0aWxzL2NvbmZpZ3V0aWxzLmpzIiwic3JjL3VpL2NvbXBvbmVudHMvcmVzdWx0cy92ZXJ0aWNhbHJlc3VsdHNjb21wb25lbnQuanMiLCJzcmMvdWkvY29tcG9uZW50cy9yZXN1bHRzL2FjY29yZGlvbnJlc3VsdHNjb21wb25lbnQuanMiLCJzcmMvdWkvY29tcG9uZW50cy9yZXN1bHRzL3VuaXZlcnNhbHJlc3VsdHNjb21wb25lbnQuanMiLCJzcmMvdWkvY29tcG9uZW50cy9yZXN1bHRzL3BhZ2luYXRpb25jb21wb25lbnQuanMiLCJzcmMvdWkvY29tcG9uZW50cy9jdGFzL2N0YWNvbGxlY3Rpb25jb21wb25lbnQuanMiLCJzcmMvdWkvY29tcG9uZW50cy9jYXJkcy9zdGFuZGFyZGNhcmRjb21wb25lbnQuanMiLCJzcmMvdWkvY29tcG9uZW50cy9jYXJkcy9hY2NvcmRpb25jYXJkY29tcG9uZW50LmpzIiwic3JjL3VpL2NvbXBvbmVudHMvY2FyZHMvbGVnYWN5Y2FyZGNvbXBvbmVudC5qcyIsInNyYy91aS9jb21wb25lbnRzL3F1ZXN0aW9ucy9xdWVzdGlvbnN1Ym1pc3Npb25jb21wb25lbnQuanMiLCJzcmMvdWkvY29tcG9uZW50cy9pY29ucy9pY29uY29tcG9uZW50LmpzIiwic3JjL3VpL2NvbXBvbmVudHMvY3Rhcy9jdGFjb21wb25lbnQuanMiLCJzcmMvdWkvY29tcG9uZW50cy9yZWdpc3RyeS5qcyIsInNyYy91aS9jb21wb25lbnRzL2NvbXBvbmVudG1hbmFnZXIuanMiLCJzcmMvY29yZS9tb2RlbHMvdmVydGljYWxwYWdlc2NvbmZpZy5qcyIsInNyYy9jb3JlL3V0aWxzL21hc3RlcnN3aXRjaGFwaS5qcyIsIm5vZGVfbW9kdWxlcy9AeWV4dC9ydGYtY29udmVydGVyL2xpYi9ydGYtY29udmVydGVyLm1pbi5qcyIsInNyYy9jb3JlL3V0aWxzL3JpY2h0ZXh0Zm9ybWF0dGVyLmpzIiwic3JjL2NvcmUvdXRpbHMvYXBpY29udGV4dC5qcyIsInNyYy9hbnN3ZXJzLXVtZC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiogQG1vZHVsZSBTZWFyY2hTdGF0ZXMgKi9cblxuLyoqXG4gKiBTZWFyY2hTdGF0ZXMgaXMgYW4gRU5VTSBmb3IgdGhlIHZhcmlvdXMgc3RhZ2VzIG9mIHNlYXJjaGluZyxcbiAqIHVzZWQgdG8gc2hvdyBkaWZmZXJlbnQgdGVtcGxhdGVzXG4gKiBAZW51bSB7c3RyaW5nfVxuICovXG5leHBvcnQgZGVmYXVsdCB7XG4gIFBSRV9TRUFSQ0g6ICdwcmUtc2VhcmNoJyxcbiAgU0VBUkNIX0xPQURJTkc6ICdzZWFyY2gtbG9hZGluZycsXG4gIFNFQVJDSF9DT01QTEVURTogJ3NlYXJjaC1jb21wbGV0ZSdcbn07XG4iLCIvKiogQG1vZHVsZSBSZXN1bHQgKi9cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmVzdWx0IHtcbiAgY29uc3RydWN0b3IgKGRhdGEgPSB7fSkge1xuICAgIC8qKlxuICAgICAqIFRoZSByYXcgcHJvZmlsZSBkYXRhXG4gICAgICogQHR5cGUge09iamVjdH1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuX3JhdyA9IGRhdGEucmF3IHx8IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgZm9ybWF0dGVkIHByb2ZpbGUgZGF0YVxuICAgICAqIEB0eXBlIHtPYmplY3R9XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLl9mb3JtYXR0ZWQgPSBkYXRhLmZvcm1hdHRlZDtcblxuICAgIC8qKlxuICAgICAqIFRoZSBoaWdobGlnaHRlZCBwcm9maWxlIGRhdGEgd2l0aCBoaWdobGlnaHRzIGFwcGxpZWQgdG8gYXBwbGljYWJsZSBmaWVsZHNcbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5faGlnaGxpZ2h0ZWQgPSBkYXRhLmhpZ2hsaWdodGVkO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGluZGV4IG51bWJlciBvZiB0aGUgcmVzdWx0XG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLm9yZGluYWwgPSBkYXRhLm9yZGluYWwgfHwgbnVsbDtcblxuICAgIC8qKlxuICAgICAqIFRoZSB0aXRsZSBvZiB0aGUgcmVzdWx0IGNhcmRcbiAgICAgKiBAdHlwZSB7c3RyaW5nfG51bGx9XG4gICAgICovXG4gICAgdGhpcy50aXRsZSA9IGRhdGEudGl0bGUgfHwgbnVsbDtcblxuICAgIC8qKlxuICAgICAqIFRoZSBib2R5IG9mIHRoZSBkZXRhaWxzIHNlY3Rpb24gb2YgdGhlIHJlc3VsdCBjYXJkLCBjYW4gY29udGFpbiBIVE1MXG4gICAgICogQHR5cGUge3N0cmluZ3wgbnVsbH1cbiAgICAgKi9cbiAgICB0aGlzLmRldGFpbHMgPSBkYXRhLmRldGFpbHMgfHwgbnVsbDtcblxuICAgIC8qKlxuICAgICAqIFRoZSBkZXN0aW5hdGlvbiBsaW5rIGZvciB0aGUgdGl0bGUgb2YgdGhlIHJlc3VsdCBjYXJkXG4gICAgICogQHR5cGUge3N0cmluZ3xudWxsfVxuICAgICAqL1xuICAgIHRoaXMubGluayA9IGRhdGEubGluayB8fCBudWxsO1xuXG4gICAgLyoqXG4gICAgICogVGhlIEVudGl0eSBJRCwgb3Igb3RoZXIgdW5pcXVlIGlkZW50aWZpZXIsIHVzZWQgZm9yIHRvIHBvd2VyIGludGVyYWN0aXZpdHlcbiAgICAgKiBAdHlwZSB7c3RyaW5nfG51bGx9XG4gICAgICovXG4gICAgdGhpcy5pZCA9IGRhdGEuaWQgfHwgbnVsbDtcblxuICAgIC8qKlxuICAgICAqIFRoZSBzdWJ0aXRsZSBvbiB0aGUgcmVzdWx0IGNhcmRcbiAgICAgKiBAdHlwZSB7c3RyaW5nfG51bGx9XG4gICAgICovXG4gICAgdGhpcy5zdWJ0aXRsZSA9IGRhdGEuc3VidGl0bGUgfHwgbnVsbDtcblxuICAgIC8qKlxuICAgICAqIFRoZSBjbGFzcyBtb2RpZmllciwgdXN1YWxseSBkZXJpdmVkIGZyb20gdGhlIHZlcnRpY2FsIGNvbmZpZ3VyYXRpb24gSURcbiAgICAgKiBVc2VkIHRvIGFwcGx5IGRpZmZlcmVudCBzdHlsaW5nIHRvIGRpZmZlcmVudCByZXN1bHQgY2FyZCB0eXBlc1xuICAgICAqIEB0eXBlIHtzdHJpbmd8bnVsbH1cbiAgICAgKi9cbiAgICB0aGlzLm1vZGlmaWVyID0gZGF0YS5tb2RpZmllciB8fCBudWxsO1xuXG4gICAgLyoqXG4gICAgICogQSBsYXJnZSBkYXRlLCBvZiB0aGUgZm9ybWF0IHsgbW9udGg6ICdKYW4nLCBkYXk6ICcwMScgfVxuICAgICAqIEB0eXBlIHtPYmplY3R8bnVsbH1cbiAgICAgKi9cbiAgICB0aGlzLmJpZ0RhdGUgPSBkYXRhLmJpZ0RhdGUgfHwgbnVsbDtcblxuICAgIC8qKlxuICAgICAqIEFuIGltYWdlIHByb2ZpbGUgb2JqZWN0LCBleHBlY3RlZCB0byBoYXZlIGEgdXJsIHByb3BlcnR5XG4gICAgICogQHR5cGUge09iamVjdHxudWxsfVxuICAgICAqL1xuICAgIHRoaXMuaW1hZ2UgPSBkYXRhLmltYWdlIHx8IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBBbiBhcnJheSBvZiBjYWxscyB0byBhY3Rpb24sIG9mIHRoZSBmb3JtYXQ6XG4gICAgICogeyBpY29uOiAnJywgdXJsOiAnJywgdGV4dDogJycsIGV2ZW50VHlwZTogJycsIGV2ZW50T3B0aW9uczoge319XG4gICAgICogQHR5cGUge0FycmF5fVxuICAgICAqL1xuICAgIHRoaXMuY2FsbHNUb0FjdGlvbiA9IGRhdGEuY2FsbHNUb0FjdGlvbiB8fCBbXTtcblxuICAgIC8qKlxuICAgICAqIERldGVybWluZXMgaWYgYW4gYWNjb3JkaWFuIHJlc3VsdCBzaG91bGQgYmUgY29sbGFwc2VkIGJ5IGRlZmF1bHRcbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICB0aGlzLmNvbGxhcHNlZCA9IGRhdGEuY29sbGFwc2VkID09PSB1bmRlZmluZWQgPyB0cnVlIDogZGF0YS5jb2xsYXBzZWQ7XG5cbiAgICAvKipcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIHRoaXMuZGlzdGFuY2UgPSBkYXRhLmRpc3RhbmNlIHx8IG51bGw7XG4gIH1cbn1cbiIsIi8qKiBAbW9kdWxlIEhpZ2hsaWdodGVkVmFsdWUgKi9cblxuLyoqXG4gKiBNb2RlbCByZXByZXNlbnRpbmcgYSBoaWdobGlnaHRlZCB2YWx1ZS5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSGlnaGxpZ2h0ZWRWYWx1ZSB7XG4gIGNvbnN0cnVjdG9yIChkYXRhID0ge30pIHtcbiAgICB0aGlzLnZhbHVlID0gZGF0YS52YWx1ZSB8fCBkYXRhLnNob3J0VmFsdWUgfHwgJyc7XG4gICAgdGhpcy5tYXRjaGVkU3Vic3RyaW5ncyA9IGRhdGEubWF0Y2hlZFN1YnN0cmluZ3MgfHwgW107XG4gIH1cblxuICAvKipcbiAgICogZ2V0IGhpZ2hsaWdodGVkIHZhbHVlIHN0cmluZ1xuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKi9cbiAgZ2V0ICgpIHtcbiAgICB0aGlzLl9zb3J0TWF0Y2hlZFN1YnN0cmluZ3MoKTtcbiAgICByZXR1cm4gdGhpcy5idWlsZEhpZ2hsaWdodGVkVmFsdWUodGhpcy52YWx1ZSwgdGhpcy5tYXRjaGVkU3Vic3RyaW5ncyk7XG4gIH1cblxuICAvKipcbiAgICogZ2V0IGludmVydGVkIGhpZ2hsaWdodGVkIHZhbHVlIHN0cmluZ1xuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKi9cbiAgZ2V0SW52ZXJ0ZWQgKCkge1xuICAgIHRoaXMuX3NvcnRNYXRjaGVkU3Vic3RyaW5ncygpO1xuICAgIGNvbnN0IGludmVydGVkU3Vic3RyaW5ncyA9IHRoaXMuX2dldEludmVydGVkU3Vic3RyaW5ncyh0aGlzLm1hdGNoZWRTdWJzdHJpbmdzLCB0aGlzLnZhbHVlLmxlbmd0aCk7XG4gICAgcmV0dXJuIHRoaXMuYnVpbGRIaWdobGlnaHRlZFZhbHVlKHRoaXMudmFsdWUsIGludmVydGVkU3Vic3RyaW5ncyk7XG4gIH1cblxuICAvKipcbiAgICogaW50cm9kdWNlcyBoaWdobGlnaHRpbmcgdG8gaW5wdXQgZGF0YSBhY2NvcmRpbmcgdG8gaGlnaGxpZ2h0aW5nIHNwZWNpZmllcnNcbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IHZhbCBpbnB1dCBvYmplY3QgdG8gYXBwbHkgaGlnaGxpZ2h0aW5nIHRvXG4gICAqXG4gICAqICBleGFtcGxlIG9iamVjdCA6XG4gICAqICB7XG4gICAqICAgIG5hbWU6ICdBVE0nLFxuICAgKiAgICBmZWF0dXJlZE1lc3NhZ2U6IHtcbiAgICogICAgICBkZXNjcmlwdGlvbjogJ1NhdmUgdGltZSAmIGJhbmsgb24geW91ciB0ZXJtcyBhdCBvdmVyIDEsODAwIEFUTXMnXG4gICAqICAgIH1cbiAgICogIH1cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IGhpZ2hsaWdodGVkU3Vic3RyaW5ncyBoaWdobGlnaHRpbmcgc3BlY2lmaWVycyB0byBhcHBseSB0byBpbnB1dCBvYmplY3RcbiAgICpcbiAgICogIGV4YW1wbGUgb2JqZWN0IDpcbiAgICogIHtcbiAgICogICAgbmFtZToge1xuICAgKiAgICAgIG1hdGNoZWRTdWJzdHJpbmdzOiBbe1xuICAgKiAgICAgICAgbGVuZ3RoOiAzLFxuICAgKiAgICAgICAgb2Zmc2V0OiAwXG4gICAqICAgICAgfV0sXG4gICAqICAgICAgdmFsdWU6ICdBVE0nXG4gICAqICAgIH0sXG4gICAqICAgIGZlYXR1cmVkTWVzc2FnZToge1xuICAgKiAgICAgIGRlc2NyaXB0aW9uOiB7XG4gICAqICAgICAgICBtYXRjaGVkU3Vic3RyaW5nczogW3tcbiAgICogICAgICAgICAgbGVuZ3RoOiA0LFxuICAgKiAgICAgICAgICBvZmZzZXQ6IDQ1XG4gICAqICAgICAgICB9XSxcbiAgICogICAgICAgIHZhbHVlOiAnU2F2ZSB0aW1lICYgYmFuayBvbiB5b3VyIHRlcm1zIGF0IG92ZXIgMSw4MDAgQVRNcydcbiAgICogICAgICB9XG4gICAqICAgIH1cbiAgICogIH1cbiAgICpcbiAgICogQHJldHVybnMge3N0cmluZ30gY29weSBvZiBpbnB1dCB2YWx1ZSB3aXRoIGhpZ2hsaWdodGluZyBhcHBsaWVkXG4gICAqXG4gICAqICBleGFtcGxlIG9iamVjdCA6XG4gICAqICB7XG4gICAqICAgIG5hbWU6ICc8c3Ryb25nPkFUTTwvc3Ryb25nPicsXG4gICAqICAgIGZlYXR1cmVkTWVzc2FnZToge1xuICAgKiAgICAgIGRlc2NyaXB0aW9uOiAnU2F2ZSB0aW1lICYgYmFuayBvbiB5b3VyIHRlcm1zIGF0IG92ZXIgMSw4MDAgPHN0cm9uZz5BVE1zPC9zdHJvbmc+J1xuICAgKiAgICB9XG4gICAqICB9XG4gICAqXG4gICAqL1xuICBidWlsZEhpZ2hsaWdodGVkVmFsdWUgKHZhbCwgaGlnaGxpZ2h0ZWRTdWJzdHJpbmdzKSB7XG4gICAgbGV0IGhpZ2hsaWdodGVkVmFsdWUgPSAnJztcbiAgICBsZXQgbmV4dFN0YXJ0ID0gMDtcblxuICAgIGlmIChoaWdobGlnaHRlZFN1YnN0cmluZ3MubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gdmFsO1xuICAgIH1cblxuICAgIGZvciAobGV0IGogPSAwOyBqIDwgaGlnaGxpZ2h0ZWRTdWJzdHJpbmdzLmxlbmd0aDsgaisrKSB7XG4gICAgICBsZXQgc3RhcnQgPSBOdW1iZXIoaGlnaGxpZ2h0ZWRTdWJzdHJpbmdzW2pdLm9mZnNldCk7XG4gICAgICBsZXQgZW5kID0gc3RhcnQgKyBoaWdobGlnaHRlZFN1YnN0cmluZ3Nbal0ubGVuZ3RoO1xuXG4gICAgICBoaWdobGlnaHRlZFZhbHVlICs9IFt2YWwuc2xpY2UobmV4dFN0YXJ0LCBzdGFydCksICc8c3Ryb25nPicsIHZhbC5zbGljZShzdGFydCwgZW5kKSwgJzwvc3Ryb25nPiddLmpvaW4oJycpO1xuXG4gICAgICBpZiAoaiA9PT0gaGlnaGxpZ2h0ZWRTdWJzdHJpbmdzLmxlbmd0aCAtIDEgJiYgZW5kIDwgdmFsLmxlbmd0aCkge1xuICAgICAgICBoaWdobGlnaHRlZFZhbHVlICs9IHZhbC5zbGljZShlbmQpO1xuICAgICAgfVxuXG4gICAgICBuZXh0U3RhcnQgPSBlbmQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIGhpZ2hsaWdodGVkVmFsdWU7XG4gIH1cblxuICBfc29ydE1hdGNoZWRTdWJzdHJpbmdzICgpIHtcbiAgICB0aGlzLm1hdGNoZWRTdWJzdHJpbmdzLnNvcnQoKGEsIGIpID0+IHtcbiAgICAgIGlmIChhLm9mZnNldCA8IGIub2Zmc2V0KSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICAgIH1cblxuICAgICAgaWYgKGEub2Zmc2V0ID4gYi5vZmZzZXQpIHtcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAwO1xuICAgIH0pO1xuICB9XG5cbiAgX2dldEludmVydGVkU3Vic3RyaW5ncyAobWF0Y2hlZFN1YnN0cmluZ3MsIHZhbHVlTGVuZ3RoKSB7XG4gICAgY29uc3QgaW52ZXJ0ZWRTdWJzdHJpbmdzID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtYXRjaGVkU3Vic3RyaW5ncy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3Qgc3Vic3RyaW5nID0gbWF0Y2hlZFN1YnN0cmluZ3NbaV07XG4gICAgICBjb25zdCBuZXh0T2Zmc2V0ID0gc3Vic3RyaW5nLm9mZnNldCArIHN1YnN0cmluZy5sZW5ndGg7XG4gICAgICBpZiAoaSA9PT0gMCAmJiBzdWJzdHJpbmcub2Zmc2V0ICE9PSAwKSB7XG4gICAgICAgIGludmVydGVkU3Vic3RyaW5ncy5wdXNoKHsgb2Zmc2V0OiAwLCBsZW5ndGg6IHN1YnN0cmluZy5vZmZzZXQgfSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh2YWx1ZUxlbmd0aCA+IG5leHRPZmZzZXQpIHtcbiAgICAgICAgaW52ZXJ0ZWRTdWJzdHJpbmdzLnB1c2goe1xuICAgICAgICAgIG9mZnNldDogbmV4dE9mZnNldCxcbiAgICAgICAgICBsZW5ndGg6IGkgPCBtYXRjaGVkU3Vic3RyaW5ncy5sZW5ndGggLSAxXG4gICAgICAgICAgICA/IG1hdGNoZWRTdWJzdHJpbmdzW2kgKyAxXS5vZmZzZXQgLSBuZXh0T2Zmc2V0XG4gICAgICAgICAgICA6IHZhbHVlTGVuZ3RoIC0gbmV4dE9mZnNldFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGludmVydGVkU3Vic3RyaW5ncztcbiAgfVxufVxuIiwiLyoqIEBtb2R1bGUgRXJyb3JzICovXG5cbi8qKlxuICogQW5zd2Vyc0Jhc2VFcnJvciBpcyBhbiBleHRlbnNpb24gb2YgdGhlIGJhc2UgRXJyb3Igb2JqZWN0LlxuICogVGhpcyBpcyB0aGUgb2JqZWN0IHRoYXQgaXMgdXNlZCB0byB3aGVuIHJlcG9ydGluZyB0byB0aGUgc2VydmVyLlxuICogQGV4dGVuZHMgRXJyb3JcbiAqXG4gKiBFcnJvciBjb2RlcyBmYWxsIGludG8gb25lIG9mIGZvdXIgY2F0ZWdvcmllczpcbiAqIDFYWCBlcnJvcnM6IEJhc2ljIGVycm9yc1xuICogMlhYIGVycm9yczogVUkgZXJyb3JzXG4gKiAzWFggZXJyb3JzOiBFbmRwb2ludCBlcnJvcnNcbiAqIDRYWCBlcnJvcnM6IENvcmUgZXJyb3JzXG4gKi9cbmV4cG9ydCBjbGFzcyBBbnN3ZXJzQmFzZUVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICBjb25zdHJ1Y3RvciAoZXJyb3JDb2RlLCBtZXNzYWdlLCBib3VuZGFyeSA9ICd1bmtub3duJywgY2F1c2VkQnkpIHtcbiAgICBzdXBlcihtZXNzYWdlKTtcbiAgICB0aGlzLmVycm9yQ29kZSA9IGVycm9yQ29kZTtcbiAgICB0aGlzLmVycm9yTWVzc2FnZSA9IG1lc3NhZ2U7XG4gICAgdGhpcy5ib3VuZGFyeSA9IGJvdW5kYXJ5O1xuICAgIHRoaXMucmVwb3J0ZWQgPSBmYWxzZTtcblxuICAgIGlmIChjYXVzZWRCeSkge1xuICAgICAgdGhpcy5jYXVzZWRCeSA9IGNhdXNlZEJ5IGluc3RhbmNlb2YgQW5zd2Vyc0Jhc2VFcnJvclxuICAgICAgICA/IGNhdXNlZEJ5XG4gICAgICAgIDogQW5zd2Vyc0Jhc2VFcnJvci5mcm9tKGNhdXNlZEJ5KTtcbiAgICAgIHRoaXMuc3RhY2sgPSBgJHt0aGlzLnN0YWNrfVxcbkNhdXNlZCBCeTogJHt0aGlzLmNhdXNlZEJ5LnN0YWNrfWA7XG4gICAgfVxuICB9XG5cbiAgdG9Kc29uICgpIHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodGhpcyk7XG4gIH1cblxuICB0b1N0cmluZyAoKSB7XG4gICAgbGV0IHN0cmluZyA9IGAke3RoaXMuZXJyb3JNZXNzYWdlfSAoJHt0aGlzLmJvdW5kYXJ5fSlgO1xuICAgIGlmICh0aGlzLmNhdXNlZEJ5KSB7XG4gICAgICBzdHJpbmcgKz0gYFxcbiAgQ2F1c2VkIEJ5OiAke3RoaXMuY2F1c2VkQnkudG9TdHJpbmcoKX1gO1xuICAgIH1cbiAgICByZXR1cm4gc3RyaW5nO1xuICB9XG5cbiAgc3RhdGljIGZyb20gKGJ1aWx0aW5FcnJvciwgYm91bmRhcnkpIHtcbiAgICBjb25zdCBlcnJvciA9IG5ldyBBbnN3ZXJzQmFzaWNFcnJvcihidWlsdGluRXJyb3IubWVzc2FnZSwgYm91bmRhcnkpO1xuICAgIGVycm9yLnN0YWNrID0gYnVpbHRpbkVycm9yLnN0YWNrO1xuICAgIHJldHVybiBlcnJvcjtcbiAgfVxufVxuXG4vKipcbiAqIEFuc3dlcnNCYXNpY0Vycm9yIGlzIGEgd3JhcHBlciBhcm91bmQgYWxsIHRoZSBidWlsdC1pbiBlcnJvcnNcbiAqIGUuZy4gdW5kZWZpbmVkIHZhcmlhYmxlcywgaW5jb3JyZWN0IHN5bnRheCwgdHlwZXMsIG1pc3NpbmcgbWV0aG9kcywgZXRjLlxuICogQGV4dGVuZHMgQW5zd2Vyc0Jhc2VFcnJvclxuICovXG5leHBvcnQgY2xhc3MgQW5zd2Vyc0Jhc2ljRXJyb3IgZXh0ZW5kcyBBbnN3ZXJzQmFzZUVycm9yIHtcbiAgY29uc3RydWN0b3IgKG1lc3NhZ2UsIGJvdW5kYXJ5LCBjYXVzZWRCeSkge1xuICAgIHN1cGVyKDEwMCwgbWVzc2FnZSwgYm91bmRhcnksIGNhdXNlZEJ5KTtcbiAgfVxufVxuXG4vKipcbiAqIEFuc3dlcnNVaUVycm9yIHVzZWQgZm9yIHRoaW5ncyBsaWtlIERPTSBlcnJvcnMuXG4gKiBAZXh0ZW5kcyBBbnN3ZXJzQmFzZUVycm9yXG4gKi9cbmV4cG9ydCBjbGFzcyBBbnN3ZXJzQ29uZmlnRXJyb3IgZXh0ZW5kcyBBbnN3ZXJzQmFzZUVycm9yIHtcbiAgY29uc3RydWN0b3IgKG1lc3NhZ2UsIGJvdW5kYXJ5LCBjYXVzZWRCeSkge1xuICAgIHN1cGVyKDEwMSwgbWVzc2FnZSwgYm91bmRhcnksIGNhdXNlZEJ5KTtcbiAgfVxufVxuXG4vKipcbiAqIEFuc3dlcnNVaUVycm9yIHVzZWQgZm9yIHRoaW5ncyBsaWtlIERPTSBlcnJvcnMuXG4gKiBAZXh0ZW5kcyBBbnN3ZXJzQmFzZUVycm9yXG4gKi9cbmV4cG9ydCBjbGFzcyBBbnN3ZXJzVWlFcnJvciBleHRlbmRzIEFuc3dlcnNCYXNlRXJyb3Ige1xuICBjb25zdHJ1Y3RvciAobWVzc2FnZSwgYm91bmRhcnksIGNhdXNlZEJ5KSB7XG4gICAgc3VwZXIoMjAwLCBtZXNzYWdlLCBib3VuZGFyeSwgY2F1c2VkQnkpO1xuICB9XG59XG5cbi8qKlxuICogQW5zd2Vyc0NvbXBvbmVudEVycm9yIGlzIHVzZWQgZm9yIENvbXBvbmVudCBvcmllbnRlZCBlcnJvcnNcbiAqIGUuZy4gZmFpbHVyZSB0byByZW5kZXIsIG9yIGNhdGNoaW5nIHVua25vd25zLlxuICogQGV4dGVuZHMgQW5zd2Vyc0Jhc2VFcnJvclxuICovXG5leHBvcnQgY2xhc3MgQW5zd2Vyc0NvbXBvbmVudEVycm9yIGV4dGVuZHMgQW5zd2Vyc0Jhc2VFcnJvciB7XG4gIGNvbnN0cnVjdG9yIChtZXNzYWdlLCBjb21wb25lbnQsIGNhdXNlZEJ5KSB7XG4gICAgc3VwZXIoMjAxLCBtZXNzYWdlLCBjb21wb25lbnQsIGNhdXNlZEJ5KTtcbiAgfVxufVxuXG4vKipcbiAqIEFuc3dlcnNFbmRwb2ludEVycm9yIHJlcHJlc2VudHMgYWxsIG5ldHdvcmsgcmVsYXRlZCBlcnJvcnMuXG4gKiBAZXh0ZW5kcyBBbnN3ZXJzQmFzZUVycm9yXG4gKi9cbmV4cG9ydCBjbGFzcyBBbnN3ZXJzRW5kcG9pbnRFcnJvciBleHRlbmRzIEFuc3dlcnNCYXNlRXJyb3Ige1xuICBjb25zdHJ1Y3RvciAobWVzc2FnZSwgYm91bmRhcnksIGNhdXNlZEJ5KSB7XG4gICAgc3VwZXIoMzAwLCBtZXNzYWdlLCBib3VuZGFyeSwgY2F1c2VkQnkpO1xuICB9XG59XG5cbi8qKlxuICogQW5zd2Vyc0NvcmVFcnJvciByZXByZXNlbnRzIGVycm9ycyBmb3IgcHJlY29uZGl0aW9uIGZhaWx1cmVzIGluIHRoZSBjb3JlIGxpYnJhcnlcbiAqIEBleHRlbmRzIEFuc3dlcnNCYXNlRXJyb3JcbiAqL1xuZXhwb3J0IGNsYXNzIEFuc3dlcnNDb3JlRXJyb3IgZXh0ZW5kcyBBbnN3ZXJzQmFzZUVycm9yIHtcbiAgY29uc3RydWN0b3IgKG1lc3NhZ2UsIGJvdW5kYXJ5LCBjYXVzZWRCeSkge1xuICAgIHN1cGVyKDQwMCwgbWVzc2FnZSwgYm91bmRhcnksIGNhdXNlZEJ5KTtcbiAgfVxufVxuXG4vKipcbiAqIEFuc3dlcnNTdG9yYWdlRXJyb3IgcmVwcmVzZW50cyBzdG9yYWdlIHJlbGF0ZWQgZXJyb3JzXG4gKiBAZXh0ZW5kcyBBbnN3ZXJzQmFzZUVycm9yXG4gKi9cbmV4cG9ydCBjbGFzcyBBbnN3ZXJzU3RvcmFnZUVycm9yIGV4dGVuZHMgQW5zd2Vyc0Jhc2VFcnJvciB7XG4gIGNvbnN0cnVjdG9yIChtZXNzYWdlLCBzdG9yYWdlS2V5LCBkYXRhLCBjYXVzZWRCeSkge1xuICAgIHN1cGVyKDQwMSwgbWVzc2FnZSwgJ1N0b3JhZ2UnLCBjYXVzZWRCeSk7XG4gICAgdGhpcy5zdG9yYWdlS2V5ID0gc3RvcmFnZUtleTtcbiAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICB9XG59XG5cbi8qKlxuICogQW5zd2Vyc0FuYWx5dGljc0Vycm9yIGlzIHVzZWQgZm9yIGVycm9ycyB3aGVuIHJlcG9ydGluZyBhbmFseXRpY3NcbiAqIEBleHRlbmRzIEFuc3dlcnNCYXNlRXJyb3JcbiAqL1xuZXhwb3J0IGNsYXNzIEFuc3dlcnNBbmFseXRpY3NFcnJvciBleHRlbmRzIEFuc3dlcnNCYXNlRXJyb3Ige1xuICBjb25zdHJ1Y3RvciAobWVzc2FnZSwgZXZlbnQsIGNhdXNlZEJ5KSB7XG4gICAgc3VwZXIoNDAyLCBtZXNzYWdlLCAnQW5hbHl0aWNzJywgY2F1c2VkQnkpO1xuICAgIHRoaXMuZXZlbnQgPSBldmVudDtcbiAgfVxufVxuIiwiLyoqIEBtb2R1bGUgUmVzdWx0RmFjdG9yeSAqL1xuXG5pbXBvcnQgUmVzdWx0IGZyb20gJy4vcmVzdWx0JztcbmltcG9ydCBIaWdobGlnaHRlZFZhbHVlIGZyb20gJy4vaGlnaGxpZ2h0ZWR2YWx1ZSc7XG5pbXBvcnQgeyBBbnN3ZXJzQ29yZUVycm9yIH0gZnJvbSAnLi4vZXJyb3JzL2Vycm9ycyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJlc3VsdEZhY3Rvcnkge1xuICAvKipcbiAgICogQ29udmVydHMgYW4gQVBJIHJlc3VsdCBvYmplY3QgaW50byBhIFJlc3VsdCB2aWV3IG1vZGVsLlxuICAgKiBJbmNsdWRlcyBkZWZhdWx0IG1hcHBpbmdzIG9mIEdvb2dsZUN1c3RvbVNlYXJjaEVuZ2luZSByZXN1bHRzIHRvXG4gICAqIHRoZSBmaWVsZHMgZXhwb3NlZCBieSB0aGUgdGVtcGxhdGUuXG4gICAqIEBwYXJhbSByZXN1bHRzRGF0YSAge0FycmF5fSBleHBlY3RlZCBmb3JtYXQ6IHsgZGF0YTogeyAuLi4gfSwgaGlnaGxpZ2h0ZWRGaWVsZHM6IHsgLi4uIH19XG4gICAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsIGZ1bmN0aW9uPn0gZm9ybWF0dGVycyBUaGUgZm9ybWF0dGVycyB0byBhcHBseSB0byB0aGUgcmVzdWx0XG4gICAqIEBwYXJhbSB7c3RyaW5nfSB2ZXJ0aWNhbElkIFRoZSB2ZXJ0aWNhbCBvZiB0aGVzZSByZXN1bHRzXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzb3VyY2UgQmFja2VuZCBzb3VyY2Ugb2YgdGhlc2UgcmVzdWx0c1xuICAgKiBAcmV0dXJucyB7UmVzdWx0W119XG4gICAqL1xuICBzdGF0aWMgZnJvbSAocmVzdWx0c0RhdGEsIGZvcm1hdHRlcnMsIHZlcnRpY2FsSWQsIHNvdXJjZSkge1xuICAgIGxldCByZXN1bHRzID0gW107XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJlc3VsdHNEYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBkYXRhID0gcmVzdWx0c0RhdGFbaV0uZGF0YSB8fCByZXN1bHRzRGF0YVtpXTtcbiAgICAgIGNvbnN0IGRpc3RhbmNlID0gcmVzdWx0c0RhdGFbaV0uZGlzdGFuY2U7XG5cbiAgICAgIHN3aXRjaCAoc291cmNlKSB7XG4gICAgICAgIGNhc2UgJ0dPT0dMRV9DU0UnOlxuICAgICAgICAgIHJlc3VsdHMucHVzaChSZXN1bHRGYWN0b3J5LmZyb21Hb29nbGVDdXN0b21TZWFyY2hFbmdpbmUoZGF0YSkpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdCSU5HX0NTRSc6XG4gICAgICAgICAgcmVzdWx0cy5wdXNoKFJlc3VsdEZhY3RvcnkuZnJvbUJpbmdDdXN0b21TZWFyY2hFbmdpbmUoZGF0YSkpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdaRU5ERVNLJzpcbiAgICAgICAgICByZXN1bHRzLnB1c2goUmVzdWx0RmFjdG9yeS5mcm9tWmVuZGVza1NlYXJjaEVuZ2luZShkYXRhKSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ0FMR09MSUEnOlxuICAgICAgICAgIHJlc3VsdHMucHVzaChSZXN1bHRGYWN0b3J5LmZyb21BbGdvbGlhU2VhcmNoRW5naW5lKGRhdGEpKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnS05PV0xFREdFX01BTkFHRVInOlxuICAgICAgICAgIGNvbnN0IGhpZ2hsaWdodGVkRmllbGRzID0gcmVzdWx0c0RhdGFbaV0uaGlnaGxpZ2h0ZWRGaWVsZHMgfHwge307XG5cbiAgICAgICAgICByZXN1bHRzLnB1c2goUmVzdWx0RmFjdG9yeS5mcm9tS25vd2xlZGdlTWFuYWdlcihcbiAgICAgICAgICAgIGRhdGEsIGZvcm1hdHRlcnMsIHZlcnRpY2FsSWQsIGhpZ2hsaWdodGVkRmllbGRzLCBpLCBkaXN0YW5jZSkpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJlc3VsdHMucHVzaChSZXN1bHRGYWN0b3J5LmZyb21HZW5lcmljKGRhdGEsIGkpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0cztcbiAgfVxuXG4gIC8qKlxuICAgKiBBcHBsaWVzIGZpZWxkIGZvcm1hdHRlcnMgdG8gS25vd2xlZGdlIE1hbmFnZXIgRW50aXR5IFByb2ZpbGUgRGF0YVxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gZW50aXR5UHJvZmlsZURhdGEgRW50aXR5IFByb2ZpbGUgRGF0YVxuICAgKiBAcGFyYW0ge09iamVjdH0gZm9ybWF0dGVycyBEZXZlbG9wZXIgc3BlY2lmaWVkIEZpZWxkIEZvcm1hdHRlcnNcbiAgICogQHBhcmFtIHtzdHJpbmd9IHZlcnRpY2FsSWQgSWRlbnRpZmllciBmb3IgVmVydGljYWxcbiAgICogQHBhcmFtIHtPYmplY3R9IGhpZ2hsaWdodGVkRW50aXR5UHJvZmlsZURhdGEgU3Vic2V0IG9mIEVudGl0eSBQcm9maWxlIERhdGEgd2l0aCBoaWdobGlnaHRpbmcgYXBwbGllZFxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSBTdWJzZXQgb2YgRW50aXR5IFByb2ZpbGUgRGF0YSBGaWVsZHMgd2l0aCBmaWVsZCBmb3JtYXR0ZXJzIGFwcGxpZWRcbiAgICovXG4gIHN0YXRpYyBjb21wdXRlRm9ybWF0dGVkRGF0YSAoZW50aXR5UHJvZmlsZURhdGEsIGZvcm1hdHRlcnMsIHZlcnRpY2FsSWQsIGhpZ2hsaWdodGVkRW50aXR5UHJvZmlsZURhdGEpIHtcbiAgICAvLyBpZiBubyBmaWVsZCBmb3JtYXR0ZXJzIHNwZWNpZmllZCwgbm90aGluZyB0byBmb3JtYXRcbiAgICBpZiAoT2JqZWN0LmtleXMoZm9ybWF0dGVycykubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4ge307XG4gICAgfVxuXG4gICAgY29uc3QgZm9ybWF0dGVkRGF0YSA9IHt9O1xuXG4gICAgT2JqZWN0LmVudHJpZXMoZW50aXR5UHJvZmlsZURhdGEpLmZvckVhY2goKFtmaWVsZE5hbWUsIGZpZWxkVmFsXSkgPT4ge1xuICAgICAgLy8gY2hlY2sgaWYgYSBmaWVsZCBmb3JtYXR0ZXIgZXhpc3RzIGZvciB0aGUgY3VycmVudCBlbnRpdHkgcHJvZmlsZSBmaWVsZFxuICAgICAgaWYgKGZvcm1hdHRlcnNbZmllbGROYW1lXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIC8vIHZlcmlmeSB0aGUgZmllbGQgZm9ybWF0dGVyIHByb3ZpZGVkIGlzIGEgZm9ybWF0dGVyIGZ1bmN0aW9uIGFzIGV4cGVjdGVkXG4gICAgICBpZiAodHlwZW9mIGZvcm1hdHRlcnNbZmllbGROYW1lXSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgQW5zd2Vyc0NvcmVFcnJvcignRmllbGQgZm9ybWF0dGVyIGlzIG5vdCBvZiBleHBlY3RlZCB0eXBlIGZ1bmN0aW9uJywgJ1Jlc3VsdEZhY3RvcnknKTtcbiAgICAgIH1cblxuICAgICAgLy8gaWYgaGlnaGxpZ2h0ZWQgdmVyc2lvbiBvZiBmaWVsZCB2YWx1ZSBpcyBhdmFpbGFibGUsIG1ha2UgaXQgYXZhaWxhYmxlIHRvIGZpZWxkIGZvcm1hdHRlclxuICAgICAgbGV0IGhpZ2hsaWdodGVkRmllbGRWYWwgPSBudWxsO1xuICAgICAgaWYgKGhpZ2hsaWdodGVkRW50aXR5UHJvZmlsZURhdGEgJiYgaGlnaGxpZ2h0ZWRFbnRpdHlQcm9maWxlRGF0YVtmaWVsZE5hbWVdKSB7XG4gICAgICAgIGhpZ2hsaWdodGVkRmllbGRWYWwgPSBoaWdobGlnaHRlZEVudGl0eVByb2ZpbGVEYXRhW2ZpZWxkTmFtZV07XG4gICAgICB9XG5cbiAgICAgIC8vIGNhbGwgZm9ybWF0dGVyIGZ1bmN0aW9uIGFzc29jaWF0ZWQgd2l0aCB0aGUgZmllbGQgbmFtZVxuICAgICAgLy8gdGhlIGlucHV0IG9iamVjdCBkZWZpbmVzIHRoZSBpbnRlcmZhY2UgdGhhdCBmaWVsZCBmb3JtYXR0ZXIgZnVuY3Rpb25zIHdvcmsgd2l0aFxuICAgICAgZm9ybWF0dGVkRGF0YVtmaWVsZE5hbWVdID0gZm9ybWF0dGVyc1tmaWVsZE5hbWVdKHtcbiAgICAgICAgZW50aXR5UHJvZmlsZURhdGE6IGVudGl0eVByb2ZpbGVEYXRhLFxuICAgICAgICBlbnRpdHlGaWVsZFZhbHVlOiBmaWVsZFZhbCxcbiAgICAgICAgaGlnaGxpZ2h0ZWRFbnRpdHlGaWVsZFZhbHVlOiBoaWdobGlnaHRlZEZpZWxkVmFsLFxuICAgICAgICB2ZXJ0aWNhbElkOiB2ZXJ0aWNhbElkLFxuICAgICAgICBpc0RpcmVjdEFuc3dlcjogZmFsc2VcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIGZvcm1hdHRlZERhdGE7XG4gIH1cblxuICAvKipcbiAgICogQXBwbGllcyBoaWdobGlnaHRpbmcgdG8gc3Vic3RyaW5ncyB3aXRoaW4gS25vd2xlZGdlIE1hbmFnZXIgRW50aXR5IEZpZWxkIFZhbHVlc1xuICAgKiBhY2NvcmRpbmcgdG8gaGlnaGxpZ2h0aW5nIHNwZWNpZmllcnMgcmV0dXJuZWQgZnJvbSB0aGUgS25vd2xlZGdlIE1hbmFnZXIgU2VhcmNoIEJhY2tlbmRcbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IGVudGl0eVByb2ZpbGVEYXRhIEVudGl0eSBQcm9maWxlIERhdGFcbiAgICogQHBhcmFtIHtPYmplY3R9IGhpZ2hsaWdodGVkRmllbGRzIEtNIHNwZWNpZmllZCBoaWdobGlnaHRpbmcgaW5zdHJ1Y3Rpb25zIHRvIGhpZ2hsaWdodCBjZXJ0YWluIEZpZWxkc1xuICAgKiBAcmV0dXJucyB7T2JqZWN0fSBTdWJzZXQgb2YgRW50aXR5IFByb2ZpbGUgRGF0YSBGaWVsZHMgd2l0aCBoaWdobGlnaHRpbmcgYXBwbGllZFxuICAgKi9cbiAgc3RhdGljIGNvbXB1dGVIaWdobGlnaHRlZERhdGEgKGVudGl0eVByb2ZpbGVEYXRhLCBoaWdobGlnaHRlZEZpZWxkcykge1xuICAgIC8vIGlmIG5vIGhpZ2hsaWdodGVkIGZpZWxkcyBzcGVjaWZpZWQsIG5vdGhpbmcgdG8gaGlnaGxpZ2h0XG4gICAgaWYgKE9iamVjdC5rZXlzKGhpZ2hsaWdodGVkRmllbGRzKS5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiB7fTtcbiAgICB9XG5cbiAgICBjb25zdCBoaWdobGlnaHRlZERhdGEgPSB7fTtcblxuICAgIC8vIGl0ZXJhdGUgdGhyb3VnaCBlbnRpdHkgZmllbGRzIHRoYXQgaGF2ZSBoaWdobGlnaHRpbmcgaW5zdHJ1Y3Rpb25zXG4gICAgT2JqZWN0LmVudHJpZXMoaGlnaGxpZ2h0ZWRGaWVsZHMpLmZvckVhY2goKFtoaWdobGlnaHRlZEZpZWxkTmFtZV0pID0+IHtcbiAgICAgIC8vIHZlcmlmeSB0aGF0IHRoZSBoaWdobGlnaHRlZCBmaWVsZCBuYW1lIGNvcnJlc3BvbmRzIHRvIGFuIGV4aXN0aW5nIGVudGl0eSBwcm9maWxlIGZpZWxkXG4gICAgICBpZiAoZW50aXR5UHJvZmlsZURhdGFbaGlnaGxpZ2h0ZWRGaWVsZE5hbWVdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEFuc3dlcnNDb3JlRXJyb3IoJ0hpZ2hsaWdodGVkIEZpZWxkIE5hbWUgZG9lcyBub3QgZXhpc3QgaW4gRW50aXR5IFByb2ZpbGUnLCAnUmVzdWx0RmFjdG9yeScpO1xuICAgICAgfVxuXG4gICAgICBsZXQgaGlnaGxpZ2h0ZWRGaWVsZCA9IGhpZ2hsaWdodGVkRmllbGRzW2hpZ2hsaWdodGVkRmllbGROYW1lXTtcblxuICAgICAgLy8gY2hlY2sgZm9yIG5lc3RlZCBmaWVsZHNcbiAgICAgIGlmICh0eXBlb2YgaGlnaGxpZ2h0ZWRGaWVsZCA9PT0gJ29iamVjdCcgJiZcbiAgICAgICAgICBPYmplY3Qua2V5cyhoaWdobGlnaHRlZEZpZWxkKS5sZW5ndGggPiAwICYmXG4gICAgICAgICAgaGlnaGxpZ2h0ZWRGaWVsZFsnbWF0Y2hlZFN1YnN0cmluZ3MnXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIC8vIHJlY3Vyc2UgdG8gY2hpbGRyZW4gZmllbGRzXG4gICAgICAgIGhpZ2hsaWdodGVkRGF0YVtoaWdobGlnaHRlZEZpZWxkTmFtZV0gPSBSZXN1bHRGYWN0b3J5LmNvbXB1dGVIaWdobGlnaHRlZERhdGEoXG4gICAgICAgICAgZW50aXR5UHJvZmlsZURhdGFbaGlnaGxpZ2h0ZWRGaWVsZE5hbWVdLFxuICAgICAgICAgIGhpZ2hsaWdodGVkRmllbGRzW2hpZ2hsaWdodGVkRmllbGROYW1lXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZXQgaGlnaGxpZ2h0ZWREYXRhVmFsdWUgPSBuZXcgSGlnaGxpZ2h0ZWRWYWx1ZShlbnRpdHlQcm9maWxlRGF0YSkuYnVpbGRIaWdobGlnaHRlZFZhbHVlKFxuICAgICAgICAgIGhpZ2hsaWdodGVkRmllbGQudmFsdWUsXG4gICAgICAgICAgaGlnaGxpZ2h0ZWRGaWVsZC5tYXRjaGVkU3Vic3RyaW5ncyk7XG4gICAgICAgIGhpZ2hsaWdodGVkRGF0YVtoaWdobGlnaHRlZEZpZWxkTmFtZV0gPSBoaWdobGlnaHRlZERhdGFWYWx1ZTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBoaWdobGlnaHRlZERhdGE7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgYW4gQVBJIHJlc3VsdCBvYmplY3QgaW50byBhIGdlbmVyaWMgcmVzdWx0IHZpZXcgbW9kZWwuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleFxuICAgKiBAcmV0dXJucyB7UmVzdWx0fVxuICAgKi9cbiAgc3RhdGljIGZyb21HZW5lcmljIChkYXRhLCBpbmRleCkge1xuICAgIHJldHVybiBuZXcgUmVzdWx0KHtcbiAgICAgIHJhdzogZGF0YSxcbiAgICAgIHRpdGxlOiBkYXRhLm5hbWUsXG4gICAgICBkZXRhaWxzOiB0aGlzLnRydW5jYXRlKGRhdGEuZGVzY3JpcHRpb24pLFxuICAgICAgbGluazogZGF0YS53ZWJzaXRlLFxuICAgICAgaWQ6IGRhdGEuaWQsXG4gICAgICBvcmRpbmFsOiBpbmRleCArIDFcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyBhbiBBUEkgcmVzdWx0IG9iamVjdCBpbnRvIGEgS25vd2xlZGdlIE1hbmFnZXIgcmVzdWx0IHZpZXcgbW9kZWwuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBmb3JtYXR0ZXJzXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB2ZXJ0aWNhbElkXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBoaWdobGlnaHRlZEZpZWxkc1xuICAgKiBAcGFyYW0ge251bWJlcn0gaW5kZXhcbiAgICogQHBhcmFtIHtudW1iZXJ9IGRpc3RhbmNlXG4gICAqIEByZXR1cm5zIHtSZXN1bHR9XG4gICAqL1xuICBzdGF0aWMgZnJvbUtub3dsZWRnZU1hbmFnZXIgKGRhdGEsIGZvcm1hdHRlcnMsIHZlcnRpY2FsSWQsIGhpZ2hsaWdodGVkRmllbGRzLCBpbmRleCwgZGlzdGFuY2UpIHtcbiAgICAvLyBjb21wdXRlIGhpZ2hsaWdodGVkIGVudGl0eSBwcm9maWxlIGRhdGFcbiAgICBsZXQgaGlnaGxpZ2h0ZWRFbnRpdHlQcm9maWxlRGF0YSA9IFJlc3VsdEZhY3RvcnkuY29tcHV0ZUhpZ2hsaWdodGVkRGF0YShkYXRhLCBoaWdobGlnaHRlZEZpZWxkcyk7XG4gICAgLy8gY29tcHV0ZSBmb3JtYXR0ZWQgZW50aXR5IHByb2ZpbGUgZGF0YVxuICAgIGNvbnN0IGZvcm1hdHRlZEVudGl0eVByb2ZpbGVEYXRhID0gUmVzdWx0RmFjdG9yeS5jb21wdXRlRm9ybWF0dGVkRGF0YShcbiAgICAgIGRhdGEsIGZvcm1hdHRlcnMsIHZlcnRpY2FsSWQsIGhpZ2hsaWdodGVkRW50aXR5UHJvZmlsZURhdGEpO1xuXG4gICAgLy8gc2V0IHJlc3VsdCBkZXRhaWxzIGNoZWNraW5nIHRoZSBmb2xsb3dpbmcgaW4gb3JkZXIgb2YgcHJpb3JpdHkgOiBmb3JtYXR0ZWQsIGhpZ2hsaWdodGVkLCByYXdcbiAgICBsZXQgcmVzdWx0RGV0YWlscyA9IG51bGw7XG4gICAgaWYgKGZvcm1hdHRlZEVudGl0eVByb2ZpbGVEYXRhLmRlc2NyaXB0aW9uICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJlc3VsdERldGFpbHMgPSBmb3JtYXR0ZWRFbnRpdHlQcm9maWxlRGF0YS5kZXNjcmlwdGlvbjtcbiAgICB9IGVsc2UgaWYgKGhpZ2hsaWdodGVkRW50aXR5UHJvZmlsZURhdGEuZGVzY3JpcHRpb24gIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmVzdWx0RGV0YWlscyA9IHRoaXMudHJ1bmNhdGUoaGlnaGxpZ2h0ZWRFbnRpdHlQcm9maWxlRGF0YS5kZXNjcmlwdGlvbik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdERldGFpbHMgPSB0aGlzLnRydW5jYXRlKGRhdGEuZGVzY3JpcHRpb24pO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgUmVzdWx0KHtcbiAgICAgIHJhdzogZGF0YSxcbiAgICAgIGZvcm1hdHRlZDogZm9ybWF0dGVkRW50aXR5UHJvZmlsZURhdGEsXG4gICAgICBoaWdobGlnaHRlZDogaGlnaGxpZ2h0ZWRFbnRpdHlQcm9maWxlRGF0YSxcbiAgICAgIHRpdGxlOiBmb3JtYXR0ZWRFbnRpdHlQcm9maWxlRGF0YS5uYW1lIHx8IGRhdGEubmFtZSxcbiAgICAgIGRldGFpbHM6IHJlc3VsdERldGFpbHMsXG4gICAgICBsaW5rOiBkYXRhLndlYnNpdGUsXG4gICAgICBpZDogZGF0YS5pZCxcbiAgICAgIG9yZGluYWw6IGluZGV4ICsgMSxcbiAgICAgIGRpc3RhbmNlOiBkaXN0YW5jZVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIGFuIEFQSSByZXN1bHQgb2JqZWN0IGludG8gYSByZXN1bHQgdmlldyBtb2RlbC5cbiAgICogTWFwcyB2aWV3IG1vZGVsIGZpZWxkcyBiYXNlZCBvbiB0aGUgQVBJIGRhdGEgZm9yIGEgR29vZ2xlIEN1c3RvbSBTZWFyY2ggRW5naW5lIG9iamVjdC5cbiAgICogQHBhcmFtIHtPYmplY3R9IGRhdGFcbiAgICogQHJldHVybnMge1Jlc3VsdH1cbiAgICovXG4gIHN0YXRpYyBmcm9tR29vZ2xlQ3VzdG9tU2VhcmNoRW5naW5lIChkYXRhKSB7XG4gICAgcmV0dXJuIG5ldyBSZXN1bHQoe1xuICAgICAgcmF3OiBkYXRhLFxuICAgICAgdGl0bGU6IGRhdGEuaHRtbFRpdGxlLnJlcGxhY2UoLyg8KFtePl0rKT4pL2lnLCAnJyksXG4gICAgICBkZXRhaWxzOiBkYXRhLmh0bWxTbmlwcGV0LFxuICAgICAgbGluazogZGF0YS5saW5rXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgYW4gQVBJIHJlc3VsdCBvYmplY3QgaW50byBhIHJlc3VsdCB2aWV3IG1vZGVsLlxuICAgKiBNYXBzIHZpZXcgbW9kZWwgZmllbGRzIGJhc2VkIG9uIHRoZSBBUEkgZGF0YSBmb3IgYSBCaW5nIEN1c3RvbSBTZWFyY2ggRW5naW5lIG9iamVjdC5cbiAgICogQHBhcmFtIHtPYmplY3R9IGRhdGFcbiAgICogQHJldHVybnMge1Jlc3VsdH1cbiAgICovXG4gIHN0YXRpYyBmcm9tQmluZ0N1c3RvbVNlYXJjaEVuZ2luZSAoZGF0YSkge1xuICAgIHJldHVybiBuZXcgUmVzdWx0KHtcbiAgICAgIHJhdzogZGF0YSxcbiAgICAgIHRpdGxlOiBkYXRhLm5hbWUsXG4gICAgICBkZXRhaWxzOiBkYXRhLnNuaXBwZXQsXG4gICAgICBsaW5rOiBkYXRhLnVybFxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIGFuIEFQSSByZXN1bHQgb2JqZWN0IGludG8gYSByZXN1bHQgdmlldyBtb2RlbC5cbiAgICogTWFwcyB2aWV3IG1vZGVsIGZpZWxkcyBiYXNlZCBvbiB0aGUgQVBJIGRhdGEgZm9yIGEgWmVuZGVzayBTZWFyY2ggRW5naW5lIG9iamVjdC5cbiAgICogQHBhcmFtIHtPYmplY3R9IGRhdGFcbiAgICogQHJldHVybnMge1Jlc3VsdH1cbiAgICovXG4gIHN0YXRpYyBmcm9tWmVuZGVza1NlYXJjaEVuZ2luZSAoZGF0YSkge1xuICAgIHJldHVybiBuZXcgUmVzdWx0KHtcbiAgICAgIHJhdzogZGF0YSxcbiAgICAgIHRpdGxlOiBkYXRhLnRpdGxlLFxuICAgICAgZGV0YWlsczogZGF0YS5zbmlwcGV0LFxuICAgICAgbGluazogZGF0YS5odG1sX3VybFxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIGFuIEFQSSByZXN1bHQgb2JqZWN0IGludG8gYSByZXN1bHQgdmlldyBtb2RlbC5cbiAgICogTWFwcyB2aWV3IG1vZGVsIGZpZWxkcyBiYXNlZCBvbiB0aGUgQVBJIGRhdGEgZm9yIGEgQWxnb2xpYSBTZWFyY2ggRW5naW5lIG9iamVjdC5cbiAgICogRGV0YWlscyBmaWVsZCBpcyBzZXQgdG8gb2JqZWN0SUQgc2luY2UgcmVzcG9uc2UgaGFzIG9ubHkgb25lIGdlbmVyYWwgZmllbGQgb2JqZWN0SUQuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhXG4gICAqIEByZXR1cm5zIHtSZXN1bHR9XG4gICAqL1xuICBzdGF0aWMgZnJvbUFsZ29saWFTZWFyY2hFbmdpbmUgKGRhdGEpIHtcbiAgICByZXR1cm4gbmV3IFJlc3VsdCh7XG4gICAgICByYXc6IGRhdGEsXG4gICAgICBkZXRhaWxzOiBkYXRhLm9iamVjdElELFxuICAgICAgaWQ6IGRhdGEub2JqZWN0SURcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUcnVuY2F0ZXMgc3RyaW5ncyB0byAyNTAgY2hhcmFjdGVycywgYXR0ZW1wdGluZyB0byBwcmVzZXJ2ZSB3aG9sZSB3b3Jkc1xuICAgKiBAcGFyYW0gc3RyIHtzdHJpbmd9IHRoZSBzdHJpbmcgdG8gdHJ1bmNhdGVcbiAgICogQHBhcmFtIGxpbWl0IHtOdW1iZXJ9IHRoZSBtYXhpbXVtIGNoYXJhY3RlciBsZW5ndGggdG8gcmV0dXJuXG4gICAqIEBwYXJhbSB0cmFpbGluZyB7c3RyaW5nfSBhIHRyYWlsaW5nIHN0cmluZyB0byBkZW5vdGUgdHJ1bmNhdGlvbiwgZS5nLiAnLi4uJ1xuICAgKiBAcGFyYW0gc2VwIHtzdHJpbmd9IHRoZSB3b3JkIHNlcGFyYXRvclxuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKi9cbiAgc3RhdGljIHRydW5jYXRlIChzdHIsIGxpbWl0ID0gMjUwLCB0cmFpbGluZyA9ICcuLi4nLCBzZXAgPSAnICcpIHtcbiAgICBpZiAoIXN0ciB8fCBzdHIubGVuZ3RoIDw9IGxpbWl0KSB7XG4gICAgICByZXR1cm4gc3RyO1xuICAgIH1cblxuICAgIC8vIFRPRE8gKGJtY2dpbm5pcyk6IHNwbGl0IHB1bmN0dWF0aW9uIHRvbyBzbyB3ZSBkb24ndCBlbmQgdXAgd2l0aCBcImZvbywuLi5cIlxuICAgIGNvbnN0IHdvcmRzID0gc3RyLnNwbGl0KHNlcCk7XG4gICAgY29uc3QgbWF4ID0gbGltaXQgLSB0cmFpbGluZy5sZW5ndGg7XG4gICAgbGV0IHRydW5jYXRlZCA9ICcnO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB3b3Jkcy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3Qgd29yZCA9IHdvcmRzW2ldO1xuICAgICAgaWYgKHRydW5jYXRlZC5sZW5ndGggKyB3b3JkLmxlbmd0aCA+IG1heCB8fFxuICAgICAgICAoaSAhPT0gMCAmJiB0cnVuY2F0ZWQubGVuZ3RoICsgd29yZC5sZW5ndGggKyBzZXAubGVuZ3RoID4gbWF4KSkge1xuICAgICAgICB0cnVuY2F0ZWQgKz0gdHJhaWxpbmc7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICB0cnVuY2F0ZWQgKz0gaSA9PT0gMCA/IHdvcmQgOiBzZXAgKyB3b3JkO1xuICAgIH1cblxuICAgIHJldHVybiB0cnVuY2F0ZWQ7XG4gIH1cbn1cbiIsIi8qKiBAbW9kdWxlIFNlY3Rpb24gKi9cblxuaW1wb3J0IFNlYXJjaFN0YXRlcyBmcm9tICcuLi9zdG9yYWdlL3NlYXJjaHN0YXRlcyc7XG5pbXBvcnQgUmVzdWx0RmFjdG9yeSBmcm9tICcuL3Jlc3VsdGZhY3RvcnknO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTZWN0aW9uIHtcbiAgY29uc3RydWN0b3IgKGRhdGEsIHVybCwgZm9ybWF0dGVycykge1xuICAgIHRoaXMuc2VhcmNoU3RhdGUgPSBTZWFyY2hTdGF0ZXMuU0VBUkNIX0NPTVBMRVRFO1xuICAgIHRoaXMudmVydGljYWxDb25maWdJZCA9IGRhdGEudmVydGljYWxDb25maWdJZCB8fCBudWxsO1xuICAgIHRoaXMucmVzdWx0c0NvdW50ID0gZGF0YS5yZXN1bHRzQ291bnQgfHwgMDtcbiAgICB0aGlzLmVuY29kZWRTdGF0ZSA9IGRhdGEuZW5jb2RlZFN0YXRlIHx8ICcnO1xuICAgIHRoaXMuYXBwbGllZFF1ZXJ5RmlsdGVycyA9IEFwcGxpZWRRdWVyeUZpbHRlci5mcm9tKGRhdGEuYXBwbGllZFF1ZXJ5RmlsdGVycyk7XG4gICAgdGhpcy5mYWNldHMgPSBkYXRhLmZhY2V0cyB8fCBudWxsO1xuICAgIHRoaXMucmVzdWx0cyA9IFJlc3VsdEZhY3RvcnkuZnJvbShkYXRhLnJlc3VsdHMsIGZvcm1hdHRlcnMsIHRoaXMudmVydGljYWxDb25maWdJZCwgZGF0YS5zb3VyY2UpO1xuICAgIHRoaXMubWFwID0gU2VjdGlvbi5wYXJzZU1hcChkYXRhLnJlc3VsdHMpO1xuICAgIHRoaXMudmVydGljYWxVUkwgPSB1cmwgfHwgbnVsbDtcbiAgICB0aGlzLnJlc3VsdHNDb250ZXh0ID0gZGF0YS5yZXN1bHRzQ29udGV4dDtcbiAgfVxuXG4gIHN0YXRpYyBwYXJzZU1hcCAocmVzdWx0cykge1xuICAgIGxldCBtYXBNYXJrZXJzID0gW107XG5cbiAgICBsZXQgY2VudGVyQ29vcmRpbmF0ZXMgPSB7fTtcblxuICAgIGZvciAobGV0IGogPSAwOyBqIDwgcmVzdWx0cy5sZW5ndGg7IGorKykge1xuICAgICAgLy8gVE9ETyhiaWxseSkgUmVtb3ZlIGxlZ2FjeSBmYWxsYmFjayBmcm9tIGFsbCBkYXRhIGZvcm1hdFxuICAgICAgbGV0IHJlc3VsdCA9IHJlc3VsdHNbal0uZGF0YSB8fCByZXN1bHRzW2pdO1xuICAgICAgaWYgKHJlc3VsdCAmJiByZXN1bHQueWV4dERpc3BsYXlDb29yZGluYXRlKSB7XG4gICAgICAgIGlmICghY2VudGVyQ29vcmRpbmF0ZXMubGF0aXR1ZGUpIHtcbiAgICAgICAgICBjZW50ZXJDb29yZGluYXRlcyA9IHtcbiAgICAgICAgICAgIGxhdGl0dWRlOiByZXN1bHQueWV4dERpc3BsYXlDb29yZGluYXRlLmxhdGl0dWRlLFxuICAgICAgICAgICAgbG9uZ2l0dWRlOiByZXN1bHQueWV4dERpc3BsYXlDb29yZGluYXRlLmxvbmdpdHVkZVxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgbWFwTWFya2Vycy5wdXNoKHtcbiAgICAgICAgICBpdGVtOiByZXN1bHQsXG4gICAgICAgICAgbGFiZWw6IG1hcE1hcmtlcnMubGVuZ3RoICsgMSxcbiAgICAgICAgICBsYXRpdHVkZTogcmVzdWx0LnlleHREaXNwbGF5Q29vcmRpbmF0ZS5sYXRpdHVkZSxcbiAgICAgICAgICBsb25naXR1ZGU6IHJlc3VsdC55ZXh0RGlzcGxheUNvb3JkaW5hdGUubG9uZ2l0dWRlXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAnbWFwQ2VudGVyJzogY2VudGVyQ29vcmRpbmF0ZXMsXG4gICAgICAnbWFwTWFya2Vycyc6IG1hcE1hcmtlcnNcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIHNlY3Rpb24gZnJvbSB0aGUgcHJvdmlkZWQgZGF0YVxuICAgKiBAcGFyYW0ge09iamVjdHxBcnJheX0gbW9kdWxlcyBUaGUgcmVzdWx0IG1vZHVsZXNcbiAgICogQHBhcmFtIHtPYmplY3R9IHVybHMgVGhlIHRhYiB1cmxzXG4gICAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsIGZ1bmN0aW9uPn0gZm9ybWF0dGVycyBGaWVsZCBmb3JtYXR0ZXJzIGZvciByZXN1bHRzXG4gICAqL1xuICBzdGF0aWMgZnJvbSAobW9kdWxlcywgdXJscywgZm9ybWF0dGVycykge1xuICAgIGxldCBzZWN0aW9ucyA9IFtdO1xuICAgIGlmICghbW9kdWxlcykge1xuICAgICAgcmV0dXJuIHNlY3Rpb25zO1xuICAgIH1cblxuICAgIGlmICghQXJyYXkuaXNBcnJheShtb2R1bGVzKSkge1xuICAgICAgcmV0dXJuIG5ldyBTZWN0aW9uKG1vZHVsZXMsIG51bGwsIGZvcm1hdHRlcnMpO1xuICAgIH1cblxuICAgIC8vIE91ciBzZWN0aW9ucyBzaG91bGQgY29udGFpbiBhIHByb3BlcnR5IG9mIG1hcE1hcmtlciBvYmplY3RzXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtb2R1bGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBzZWN0aW9ucy5wdXNoKFxuICAgICAgICBuZXcgU2VjdGlvbihcbiAgICAgICAgICBtb2R1bGVzW2ldLFxuICAgICAgICAgIHVybHNbbW9kdWxlc1tpXS52ZXJ0aWNhbENvbmZpZ0lkXSxcbiAgICAgICAgICBmb3JtYXR0ZXJzXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNlY3Rpb25zO1xuICB9XG59XG5cbmNsYXNzIEFwcGxpZWRRdWVyeUZpbHRlciB7XG4gIC8vIFN1cHBvcnQgbGVnYWN5IG1vZGVsIGFuZCBuZXcgbW9kZWwgdW50aWwgZnVsbHkgbWlncmF0ZWQuXG4gIC8vIFRPRE8oYmlsbHkpIFJlbW92ZSB0aGUgbGVmdCBleHByZXNzaW9uIGR1cmluZyBhc3NpZ25tZW50IHdoZW4gbWlncmF0ZWQuXG4gIC8vIFRPRE8oU1BSLTIzOTQpOiBjb252ZXJ0IHRoaXMgaW50byBhIEZpbHRlck5vZGUgaGVyZSBpbnN0ZWFkIG9mIGluIFZlcnRpY2FsUmVzdWx0c1xuICBjb25zdHJ1Y3RvciAoYXBwbGllZFF1ZXJ5RmlsdGVyKSB7XG4gICAgdGhpcy5rZXkgPSBhcHBsaWVkUXVlcnlGaWx0ZXIua2V5IHx8IGFwcGxpZWRRdWVyeUZpbHRlci5kaXNwbGF5S2V5O1xuICAgIHRoaXMudmFsdWUgPSBhcHBsaWVkUXVlcnlGaWx0ZXIudmFsdWUgfHwgYXBwbGllZFF1ZXJ5RmlsdGVyLmRpc3BsYXlWYWx1ZTtcbiAgICB0aGlzLmZpbHRlciA9IGFwcGxpZWRRdWVyeUZpbHRlci5maWx0ZXI7XG4gICAgdGhpcy5maWVsZElkID0gT2JqZWN0LmtleXMoYXBwbGllZFF1ZXJ5RmlsdGVyLmZpbHRlcilbMF07XG4gIH1cblxuICBzdGF0aWMgZnJvbSAoYXBwbGllZFF1ZXJ5RmlsdGVycykge1xuICAgIGxldCBmaWx0ZXJzID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcHBsaWVkUXVlcnlGaWx0ZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBmaWx0ZXJzLnB1c2gobmV3IEFwcGxpZWRRdWVyeUZpbHRlcihhcHBsaWVkUXVlcnlGaWx0ZXJzW2ldKSk7XG4gICAgfVxuICAgIHJldHVybiBmaWx0ZXJzO1xuICB9XG59XG4iLCIvKiogQG1vZHVsZSBVbml2ZXJzYWxSZXN1bHRzICovXG5cbmltcG9ydCBTZWN0aW9uIGZyb20gJy4vc2VjdGlvbic7XG5pbXBvcnQgU2VhcmNoU3RhdGVzIGZyb20gJy4uL3N0b3JhZ2Uvc2VhcmNoc3RhdGVzJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVW5pdmVyc2FsUmVzdWx0cyB7XG4gIGNvbnN0cnVjdG9yIChkYXRhKSB7XG4gICAgdGhpcy5xdWVyeUlkID0gZGF0YS5xdWVyeUlkIHx8IG51bGw7XG4gICAgdGhpcy5zZWN0aW9ucyA9IGRhdGEuc2VjdGlvbnMgfHwgW107XG5cbiAgICAvKipcbiAgICAgKiBUaGUgY3VycmVudCBzdGF0ZSBvZiB0aGUgc2VhcmNoLCB1c2VkIHRvIHJlbmRlciBkaWZmZXJlbnQgdGVtcGxhdGVzIGJlZm9yZSwgZHVyaW5nLFxuICAgICAqIGFuZCBhZnRlciBsb2FkaW5nXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLnNlYXJjaFN0YXRlID0gZGF0YS5zZWFyY2hTdGF0ZSB8fCBTZWFyY2hTdGF0ZXMuU0VBUkNIX0NPTVBMRVRFO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSB1bml2ZXJzYWwgcmVzdWx0cyBmcm9tIHNlcnZlciBkYXRhXG4gICAqIEBwYXJhbSB7T2JqZWN0fSByZXNwb25zZSBUaGUgc2VydmVyIHJlc3BvbnNlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSB1cmxzIFRoZSB0YWIgdXJsc1xuICAgKiBAcGFyYW0ge09iamVjdC48c3RyaW5nLCBmdW5jdGlvbj59IGZvcm1hdHRlcnMgVGhlIGZpZWxkIGZvcm1hdHRlcnMgdG8gdXNlXG4gICAqL1xuICBzdGF0aWMgZnJvbSAocmVzcG9uc2UsIHVybHMsIGZvcm1hdHRlcnMpIHtcbiAgICByZXR1cm4gbmV3IFVuaXZlcnNhbFJlc3VsdHMoe1xuICAgICAgcXVlcnlJZDogcmVzcG9uc2UucXVlcnlJZCxcbiAgICAgIHNlY3Rpb25zOiBTZWN0aW9uLmZyb20ocmVzcG9uc2UubW9kdWxlcywgdXJscywgZm9ybWF0dGVycylcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3QgYSBVbml2ZXJ2YWxSZXN1bHRzIG9iamVjdCByZXByZXNlbnRpbmcgbG9hZGluZyByZXN1bHRzXG4gICAqIEByZXR1cm4ge1VuaXZlcnNhbFJlc3VsdHN9XG4gICAqL1xuICBzdGF0aWMgc2VhcmNoTG9hZGluZyAoKSB7XG4gICAgcmV0dXJuIG5ldyBVbml2ZXJzYWxSZXN1bHRzKHsgc2VhcmNoU3RhdGU6IFNlYXJjaFN0YXRlcy5TRUFSQ0hfTE9BRElORyB9KTtcbiAgfVxufVxuIiwiLyoqIEBtb2R1bGUgRGlyZWN0QW5zd2VyICovXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIERpcmVjdEFuc3dlciB7XG4gIGNvbnN0cnVjdG9yIChkaXJlY3RBbnN3ZXIgPSB7fSkge1xuICAgIE9iamVjdC5hc3NpZ24odGhpcywgZGlyZWN0QW5zd2VyKTtcbiAgICBPYmplY3QuZnJlZXplKHRoaXMpO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIERpcmVjdEFuc3dlciBtb2RlbCBmcm9tIHRoZSBnaXZlbiBzZXJ2ZXIgZGF0YSBhbmQgZm9ybWF0dGVyc1xuICAgKiBAcGFyYW0ge09iamVjdH0gcmVzcG9uc2UgVGhlIHNlcnZlciBkaXJlY3QgYW5zd2VyXG4gICAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsIGZ1bmN0aW9uPn0gZm9ybWF0dGVycyBUaGUgZm9ybWF0dGVycyB0byBhcHBseSB0byB0aGlzIGRpcmVjdCBhbnN3ZXJcbiAgICovXG4gIHN0YXRpYyBmcm9tIChyZXNwb25zZSwgZm9ybWF0dGVycykge1xuICAgIGNvbnN0IGRhdGEgPSB7IC4uLnJlc3BvbnNlIH07XG4gICAgY29uc3QgeyBhbnN3ZXIsIHJlbGF0ZWRJdGVtIH0gPSBkYXRhO1xuXG4gICAgaWYgKGFuc3dlciAmJiBmb3JtYXR0ZXJzW2Fuc3dlci5maWVsZEFwaU5hbWVdKSB7XG4gICAgICBhbnN3ZXIudmFsdWUgPSBmb3JtYXR0ZXJzW2Fuc3dlci5maWVsZEFwaU5hbWVdKFxuICAgICAgICBhbnN3ZXIudmFsdWUsXG4gICAgICAgIHJlbGF0ZWRJdGVtLmRhdGEuZmllbGRWYWx1ZXMsXG4gICAgICAgIHJlbGF0ZWRJdGVtLnZlcnRpY2FsQ29uZmlnSWQsXG4gICAgICAgIHRydWUpO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgRGlyZWN0QW5zd2VyKGRhdGEpO1xuICB9XG59XG4iLCIvKiogQG1vZHVsZSBOYXZpZ2F0aW9uICovXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE5hdmlnYXRpb24ge1xuICBjb25zdHJ1Y3RvciAodGFiT3JkZXIpIHtcbiAgICB0aGlzLnRhYk9yZGVyID0gdGFiT3JkZXIgfHwgW107XG4gICAgT2JqZWN0LmZyZWV6ZSh0aGlzKTtcbiAgfVxuXG4gIHN0YXRpYyBmcm9tIChtb2R1bGVzKSB7XG4gICAgbGV0IG5hdiA9IFtdO1xuICAgIGlmICghbW9kdWxlcyB8fCAhQXJyYXkuaXNBcnJheShtb2R1bGVzKSkge1xuICAgICAgcmV0dXJuIG5hdjtcbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtb2R1bGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBuYXYucHVzaChtb2R1bGVzW2ldLnZlcnRpY2FsQ29uZmlnSWQpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IE5hdmlnYXRpb24obmF2KTtcbiAgfVxufVxuIiwiLyoqIEBtb2R1bGUgVmVydGljYWxSZXN1bHRzICovXG5cbmltcG9ydCB7IEFuc3dlcnNDb3JlRXJyb3IgfSBmcm9tICcuLi9lcnJvcnMvZXJyb3JzJztcbmltcG9ydCBTZWN0aW9uIGZyb20gJy4vc2VjdGlvbic7XG5pbXBvcnQgU2VhcmNoU3RhdGVzIGZyb20gJy4uL3N0b3JhZ2Uvc2VhcmNoc3RhdGVzJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVmVydGljYWxSZXN1bHRzIHtcbiAgY29uc3RydWN0b3IgKGRhdGEgPSB7fSkge1xuICAgIE9iamVjdC5hc3NpZ24odGhpcywgeyBzZWFyY2hTdGF0ZTogU2VhcmNoU3RhdGVzLlNFQVJDSF9DT01QTEVURSB9LCBkYXRhKTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBjb250ZXh0IG9mIHRoZSByZXN1bHRzLCB1c2VkIHRvIHByb3ZpZGUgbW9yZSBpbmZvcm1hdGlvbiBhYm91dCB3aHlcbiAgICAgKiB0aGVzZSBzcGVjaWZpYyByZXN1bHRzIHdlcmUgcmV0dXJuZWQuXG4gICAgICogQHR5cGUge1Jlc3VsdHNDb250ZXh0fVxuICAgICAqL1xuICAgIHRoaXMucmVzdWx0c0NvbnRleHQgPSBkYXRhLnJlc3VsdHNDb250ZXh0O1xuXG4gICAgT2JqZWN0LmZyZWV6ZSh0aGlzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBcHBlbmQgdGhlIHByb3ZpZGVkIHJlc3VsdHMgdG8gdGhlIGN1cnJlbnQgcmVzdWx0c1xuICAgKiBAcGFyYW0ge1ZlcnRpY2FsUmVzdWx0c30gcmVzdWx0cyB0aGUgcmVzdWx0cyB0byBhcHBlbmQgdG8gdGhlIGN1cnJlbnQgcmVzdWx0c1xuICAgKi9cbiAgYXBwZW5kIChyZXN1bHRzKSB7XG4gICAgaWYgKHJlc3VsdHMucmVzdWx0c0NvbnRleHQgIT09IHRoaXMucmVzdWx0c0NvbnRleHQpIHtcbiAgICAgIHRocm93IG5ldyBBbnN3ZXJzQ29yZUVycm9yKCdDYW5ub3QgbWVyZ2UgcmVzdWx0cyB3aXRoIGRpZmZlcmVudCBjb250ZXh0cycsICdWZXJ0aWNhbFJlc3VsdHMnKTtcbiAgICB9XG4gICAgY29uc3QgbWVyZ2VkID0geyAuLi50aGlzIH07XG4gICAgbWVyZ2VkLnJlc3VsdHNDb250ZXh0ID0gdGhpcy5yZXN1bHRzQ29udGV4dDtcbiAgICBtZXJnZWQucmVzdWx0cyA9IHRoaXMucmVzdWx0cy5jb25jYXQocmVzdWx0cy5yZXN1bHRzKTtcbiAgICBtZXJnZWQubWFwLm1hcE1hcmtlcnMgPSB0aGlzLm1hcC5tYXBNYXJrZXJzLmNvbmNhdChyZXN1bHRzLm1hcC5tYXBNYXJrZXJzKTtcbiAgICByZXR1cm4gbmV3IFZlcnRpY2FsUmVzdWx0cyhtZXJnZWQpO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSB2ZXJ0aWNhbCByZXN1bHRzIGZyb20gc2VydmVyIGRhdGFcbiAgICogQHBhcmFtIHtPYmplY3R9IHJlc3BvbnNlIFRoZSBzZXJ2ZXIgcmVzcG9uc2VcbiAgICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywgZnVuY3Rpb24+fSBmb3JtYXR0ZXJzIFRoZSBmaWVsZCBmb3JtYXR0ZXJzIHRvIHVzZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gdmVydGljYWxLZXkgdGhlIHZlcnRpY2FsIGtleVxuICAgKi9cbiAgc3RhdGljIGZyb20gKHJlc3BvbnNlLCBmb3JtYXR0ZXJzLCB2ZXJ0aWNhbEtleSkge1xuICAgIGNvbnN0IGRhdGEgPSBTZWN0aW9uLmZyb20ocmVzcG9uc2UsIG51bGwsIGZvcm1hdHRlcnMpO1xuICAgIHJldHVybiBuZXcgVmVydGljYWxSZXN1bHRzKHsgLi4uZGF0YSxcbiAgICAgIHZlcnRpY2FsQ29uZmlnSWQ6IHZlcnRpY2FsS2V5XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQ29uc3RydWN0IGEgVmVydGljYWxSZXN1bHRzIG9iamVjdCByZXByZXNlbnRpbmcgbG9hZGluZyByZXN1bHRzXG4gICAqIEByZXR1cm4ge1ZlcnRpY2FsUmVzdWx0c31cbiAgICovXG4gIHN0YXRpYyBzZWFyY2hMb2FkaW5nICgpIHtcbiAgICByZXR1cm4gbmV3IFZlcnRpY2FsUmVzdWx0cyh7IHNlYXJjaFN0YXRlOiBTZWFyY2hTdGF0ZXMuU0VBUkNIX0xPQURJTkcgfSk7XG4gIH1cblxuICBzdGF0aWMgYXJlRHVwbGljYXRlTmFtZXNBbGxvd2VkICgpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufVxuIiwiLyoqIEBtb2R1bGUgU3BlbGxDaGVjayAqL1xuXG4vKipcbiAqIFNwZWxsQ2hlY2sgaXMgdGhlIGNvcmUgc3RhdGUgbW9kZWxcbiAqIHRvIHBvd2VyIHRoZSBTcGVsbENoZWNrIGNvbXBvbmVudFxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTcGVsbENoZWNrIHtcbiAgY29uc3RydWN0b3IgKGRhdGEpIHtcbiAgICAvKipcbiAgICAgKiBUaGUgb3JpZ2luYWwgcXVlcnlcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMucXVlcnkgPSBkYXRhLnF1ZXJ5IHx8IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgY29ycmVjdGVkIHF1ZXJ5XG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLmNvcnJlY3RlZFF1ZXJ5ID0gZGF0YS5jb3JyZWN0ZWRRdWVyeSB8fCBudWxsO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHNwZWxsIGNoZWNrIHR5cGVcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMudHlwZSA9IGRhdGEudHlwZSB8fCBudWxsO1xuXG4gICAgLyoqXG4gICAgICogU2hvdWxkIHNob3cgc3BlbGwgY2hlY2sgb3Igbm90XG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICovXG4gICAgdGhpcy5zaG91bGRTaG93ID0gdGhpcy5jb3JyZWN0ZWRRdWVyeSAhPT0gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBzcGVsbCBjaGVjayBtb2RlbCBmcm9tIHRoZSBwcm92aWRlZCBkYXRhXG4gICAqIEBwYXJhbSB7T2JqZWN0fSByZXNwb25zZSBUaGUgc3BlbGwgY2hlY2sgcmVzcG9uc2VcbiAgICovXG4gIHN0YXRpYyBmcm9tIChyZXNwb25zZSkge1xuICAgIGlmICghcmVzcG9uc2UpIHtcbiAgICAgIHJldHVybiB7fTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IFNwZWxsQ2hlY2soe1xuICAgICAgcXVlcnk6IHJlc3BvbnNlLm9yaWdpbmFsUXVlcnksXG4gICAgICBjb3JyZWN0ZWRRdWVyeTogcmVzcG9uc2UuY29ycmVjdGVkUXVlcnksXG4gICAgICB0eXBlOiByZXNwb25zZS50eXBlXG4gICAgfSk7XG4gIH1cbn1cbiIsIi8qKiBAbW9kdWxlIFN0b3JhZ2VLZXlzICovXG5cbi8qKlxuICogU3RvcmFnZUtleXMgaXMgYW4gRU5VTSBhcmUgY29uc2lkZXJlZCB0aGUgcm9vdCBjb250ZXh0XG4gKiBmb3IgaG93IGRhdGEgaXMgc3RvcmVkIGFuZCBzY29wZWQgaW4gdGhlIHN0b3JhZ2UuXG4gKlxuICogQGVudW0ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGRlZmF1bHQge1xuICBOQVZJR0FUSU9OOiAnbmF2aWdhdGlvbicsXG4gIFVOSVZFUlNBTF9SRVNVTFRTOiAndW5pdmVyc2FsLXJlc3VsdHMnLFxuICBWRVJUSUNBTF9SRVNVTFRTOiAndmVydGljYWwtcmVzdWx0cycsXG4gIEFMVEVSTkFUSVZFX1ZFUlRJQ0FMUzogJ2FsdGVybmF0aXZlLXZlcnRpY2FscycsXG4gIEFVVE9DT01QTEVURTogJ2F1dG9jb21wbGV0ZScsXG4gIERJUkVDVF9BTlNXRVI6ICdkaXJlY3QtYW5zd2VyJyxcbiAgRklMVEVSOiAnZmlsdGVyJywgLy8gREVQUkVDQVRFRFxuICBTVEFUSUNfRklMVEVSX05PREU6ICdzdGF0aWMtZmlsdGVyLW5vZGUnLFxuICBRVUVSWTogJ3F1ZXJ5JyxcbiAgUVVFUllfSUQ6ICdxdWVyeS1pZCcsXG4gIEZBQ0VUX0ZJTFRFUl9OT0RFOiAnZmFjZXQtZmlsdGVyLW5vZGUnLFxuICBEWU5BTUlDX0ZJTFRFUlM6ICdkeW5hbWljLWZpbHRlcnMnLFxuICBQQVJBTVM6ICdwYXJhbXMnLFxuICBHRU9MT0NBVElPTjogJ2dlb2xvY2F0aW9uJyxcbiAgSU5URU5UUzogJ2ludGVudHMnLFxuICBRVUVTVElPTl9TVUJNSVNTSU9OOiAncXVlc3Rpb24tc3VibWlzc2lvbicsXG4gIFNFQVJDSF9DT05GSUc6ICdzZWFyY2gtY29uZmlnJyxcbiAgU0VBUkNIX09GRlNFVDogJ3NlYXJjaC1vZmZzZXQnLFxuICBTUEVMTF9DSEVDSzogJ3NwZWxsLWNoZWNrJyxcbiAgTE9DQVRJT05fQklBUzogJ2xvY2F0aW9uLWJpYXMnLFxuICBTRVNTSU9OU19PUFRfSU46ICdzZXNzaW9ucy1vcHQtaW4nLFxuICBWRVJUSUNBTF9QQUdFU19DT05GSUc6ICd2ZXJ0aWNhbC1wYWdlcy1jb25maWcnLFxuICBMT0NBTEU6ICdsb2NhbGUnLFxuICBTT1JUX0JZUzogJ3NvcnQtYnlzJyxcbiAgTk9fUkVTVUxUU19DT05GSUc6ICduby1yZXN1bHRzLWNvbmZpZycsXG4gIExPQ0FUSU9OX1JBRElVUzogJ2xvY2F0aW9uLXJhZGl1cycsXG4gIFJFU1VMVFNfSEVBREVSOiAncmVzdWx0cy1oZWFkZXInLFxuICBBUElfQ09OVEVYVDogJ2NvbnRleHQnLFxuICBSRUZFUlJFUl9QQUdFX1VSTDogJ3JlZmVycmVyUGFnZVVybCdcbn07XG4iLCIvKiogQG1vZHVsZSBEeW5hbWljRmlsdGVycyAqL1xuXG4vKipcbiAqIE1vZGVsIHJlcHJlc2VudGluZyBhIHNldCBvZiBkeW5hbWljIGZpbHRlcnNcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRHluYW1pY0ZpbHRlcnMge1xuICBjb25zdHJ1Y3RvciAoZGF0YSkge1xuICAgIC8qKlxuICAgICAqIFRoZSBsaXN0IG9mIGZpbHRlcnMgdGhpcyBtb2RlbCBob2xkc1xuICAgICAqIEB0eXBlIHt7bGFiZWw6IHN0cmluZywgZmllbGRJZDogc3RyaW5nLCBvcHRpb25zOiBvYmplY3RbXX19XG4gICAgICovXG4gICAgdGhpcy5maWx0ZXJzID0gZGF0YS5maWx0ZXJzIHx8IFtdO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHtAbGluayBSZXN1bHRzQ29udGV4dH0gb2YgdGhlIGZhY2V0cy5cbiAgICAgKiBAdHlwZSB7UmVzdWx0c0NvbnRleHR9XG4gICAgICovXG4gICAgdGhpcy5yZXN1bHRzQ29udGV4dCA9IGRhdGEucmVzdWx0c0NvbnRleHQ7XG4gICAgT2JqZWN0LmZyZWV6ZSh0aGlzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBPcmdhbml6ZSAnZmFjZXRzJyBmcm9tIHRoZSBhcGkgcmVzcG9uc2UgaW50byBkeW5hbWljIGZpbHRlcnNcbiAgICogQHBhcmFtIHtPYmplY3R9IHJlc3BvbnNlIGR5bmFtaWMgZmlsdGVyIHJlc3BvbnNlIGZyb20gdGhlIGFwaVxuICAgKiBAcmV0dXJucyB7RHluYW1pY0ZpbHRlcnN9XG4gICAqL1xuICBzdGF0aWMgZnJvbSAocmVzcG9uc2UpIHtcbiAgICBjb25zdCBmYWNldHMgPSByZXNwb25zZS5mYWNldHMgfHwgW107XG4gICAgY29uc3QgZHluYW1pY0ZpbHRlcnMgPSBmYWNldHMubWFwKGYgPT4gKHtcbiAgICAgIGxhYmVsOiBmWydkaXNwbGF5TmFtZSddLFxuICAgICAgZmllbGRJZDogZlsnZmllbGRJZCddLFxuICAgICAgb3B0aW9uczogZi5vcHRpb25zLm1hcChvID0+ICh7XG4gICAgICAgIGxhYmVsOiBvWydkaXNwbGF5TmFtZSddLFxuICAgICAgICBjb3VudExhYmVsOiBvWydjb3VudCddLFxuICAgICAgICBzZWxlY3RlZDogb1snc2VsZWN0ZWQnXSxcbiAgICAgICAgZmlsdGVyOiBvWydmaWx0ZXInXVxuICAgICAgfSkpXG4gICAgfSkpO1xuXG4gICAgcmV0dXJuIG5ldyBEeW5hbWljRmlsdGVycyh7XG4gICAgICBmaWx0ZXJzOiBkeW5hbWljRmlsdGVycyxcbiAgICAgIHJlc3VsdHNDb250ZXh0OiByZXNwb25zZS5yZXN1bHRzQ29udGV4dFxuICAgIH0pO1xuICB9XG59XG4iLCIvKiogQG1vZHVsZSBTZWFyY2hJbnRlbnRzICovXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNlYXJjaEludGVudHMge1xuICBjb25zdHJ1Y3RvciAoaW50ZW50cykge1xuICAgIC8qKlxuICAgICAqIFRoZSBpbnRlbnQgdG8gZmluZCByZXN1bHRzIGJhc2VkIG9uIHRoZSB1c2VyJ3MgbG9jYXRpb25cbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICB0aGlzLm5lYXJNZSA9IGludGVudHMubmVhck1lO1xuXG4gICAgT2JqZWN0LmZyZWV6ZSh0aGlzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgU2VhcmNoSW50ZW50cyBmcm9tIHNlcnZlciByZXNwb25zZVxuICAgKiBAcGFyYW0ge09iamVjdH0gcmVzcG9uc2UgVGhlIHNlcnZlciByZXNwb25zZSBpbnRlbnRzXG4gICAqIEByZXR1cm5zIHtTZWFyY2hJbnRlbnRzfVxuICAgKi9cbiAgc3RhdGljIGZyb20gKHJlc3BvbnNlKSB7XG4gICAgY29uc3QgaW50ZW50cyA9IHJlc3BvbnNlIHx8IFtdO1xuXG4gICAgcmV0dXJuIG5ldyBTZWFyY2hJbnRlbnRzKHtcbiAgICAgIG5lYXJNZTogaW50ZW50cy5pbmNsdWRlcygnTkVBUl9NRScpXG4gICAgfSk7XG4gIH1cbn1cbiIsIi8qKiBAbW9kdWxlIExvY2F0aW9uQmlhcyAqL1xuXG4vKipcbiAqIExvY2F0aW9uQmlhcyBpcyB0aGUgY29yZSBzdGF0ZSBtb2RlbFxuICogdG8gcG93ZXIgdGhlIExvY2F0aW9uQmlhcyBjb21wb25lbnRcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTG9jYXRpb25CaWFzIHtcbiAgY29uc3RydWN0b3IgKGRhdGEpIHtcbiAgICAvKipcbiAgICAgKiBUaGUgbG9jYXRpb24gYmlhcyBhY2N1cmFjeSB3aGljaCBhcmUgSVAsIERFVklDRSBhbmQgVU5LTldPTlxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgdGhpcy5hY2N1cmFjeSA9IGRhdGEuYWNjdXJhY3kgfHwgbnVsbDtcblxuICAgIC8qKlxuICAgICAqIFRoZSBsYXRpdHVkZSB1c2VkIGZvciBsb2NhdGlvbiBiaWFzXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLmxhdGl0dWRlID0gZGF0YS5sYXRpdHVkZSB8fCBudWxsO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGxvbmdpdHVkZSB1c2VkIGZvciBsb2NhdGlvbiBiaWFzXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLmxvbmdpdHVkZSA9IGRhdGEubG9uZ2l0dWRlIHx8IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgbG9jYXRpb24gZGlzcGxheSBuYW1lXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLmxvY2F0aW9uRGlzcGxheU5hbWUgPSBkYXRhLmxvY2F0aW9uRGlzcGxheU5hbWUgfHwgbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBsb2NhdGlvbiBiaWFzIG1vZGVsIGZyb20gdGhlIHByb3ZpZGVkIGRhdGFcbiAgICogQHBhcmFtIHtPYmplY3R9IHJlc3BvbnNlIFRoZSBsb2NhdGlvbiBiaWFzIHJlc3BvbnNlXG4gICAqL1xuICBzdGF0aWMgZnJvbSAocmVzcG9uc2UpIHtcbiAgICBpZiAoIXJlc3BvbnNlKSB7XG4gICAgICByZXR1cm4gbmV3IExvY2F0aW9uQmlhcyh7XG4gICAgICAgIGFjY3VyYWN5OiAnVU5LTk9XTidcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgTG9jYXRpb25CaWFzKHtcbiAgICAgIGFjY3VyYWN5OiByZXNwb25zZS5hY2N1cmFjeSxcbiAgICAgIGxhdGl0dWRlOiByZXNwb25zZS5sYXRpdHVkZSxcbiAgICAgIGxvbmdpdHVkZTogcmVzcG9uc2UubG9uZ2l0dWRlLFxuICAgICAgbG9jYXRpb25EaXNwbGF5TmFtZTogcmVzcG9uc2UubG9jYXRpb25EaXNwbGF5TmFtZVxuICAgIH0pO1xuICB9XG59XG4iLCIvKiogQG1vZHVsZSBBbHRlcm5hdGl2ZVZlcnRpY2FscyAqL1xuXG5pbXBvcnQgU2VjdGlvbiBmcm9tICcuL3NlY3Rpb24nO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBbHRlcm5hdGl2ZVZlcnRpY2FscyB7XG4gIGNvbnN0cnVjdG9yIChkYXRhKSB7XG4gICAgLyoqXG4gICAgICogQWx0ZXJuYXRpdmUgdmVydGljYWxzIHRoYXQgaGF2ZSByZXN1bHRzIGZvciB0aGUgY3VycmVudCBxdWVyeVxuICAgICAqIEB0eXBlIHtTZWN0aW9ufVxuICAgICAqL1xuICAgIHRoaXMuYWx0ZXJuYXRpdmVWZXJ0aWNhbHMgPSBkYXRhIHx8IFtdO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhbHRlcm5hdGl2ZSB2ZXJ0aWNhbHMgZnJvbSBzZXJ2ZXIgZGF0YVxuICAgKiBAcGFyYW0ge09iamVjdH0gcmVzcG9uc2UgVGhlIHNlcnZlciByZXNwb25zZVxuICAgKiBAcGFyYW0ge09iamVjdC48c3RyaW5nLCBmdW5jdGlvbj59IGZvcm1hdHRlcnMgVGhlIGZpZWxkIGZvcm1hdHRlcnMgdG8gdXNlXG4gICAqL1xuICBzdGF0aWMgZnJvbSAocmVzcG9uc2UsIGZvcm1hdHRlcnMpIHtcbiAgICBjb25zdCBhbHRlcm5hdGl2ZVZlcnRpY2FscyA9IHJlc3BvbnNlLmFsdGVybmF0aXZlVmVydGljYWxzO1xuICAgIGlmICghYWx0ZXJuYXRpdmVWZXJ0aWNhbHMgfHwgIWFsdGVybmF0aXZlVmVydGljYWxzLm1vZHVsZXMpIHtcbiAgICAgIHJldHVybiBuZXcgQWx0ZXJuYXRpdmVWZXJ0aWNhbHMoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IEFsdGVybmF0aXZlVmVydGljYWxzKFNlY3Rpb24uZnJvbShhbHRlcm5hdGl2ZVZlcnRpY2Fscy5tb2R1bGVzLCB7fSwgZm9ybWF0dGVycykpO1xuICB9XG59XG4iLCIvKiogQG1vZHVsZSBSZXN1bHRzQ29udGV4dCAqL1xuXG4vKipcbiAqIFJlc3VsdHNDb250ZXh0IGlzIGFuIEVOVU0gdGhhdCBwcm92aWRlcyBjb250ZXh0XG4gKiBmb3IgdGhlIHJlc3VsdHMgdGhhdCB3ZSBhcmUgc3RvcmluZyBmcm9tIHNlcnZlclxuICogZGF0YVxuICogQGVudW0ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGRlZmF1bHQge1xuICBOT1JNQUw6ICdub3JtYWwnLFxuICBOT19SRVNVTFRTOiAnbm8tcmVzdWx0cydcbn07XG4iLCIvKiogQG1vZHVsZSBTZWFyY2hEYXRhVHJhbnNmb3JtZXIgKi9cblxuaW1wb3J0IFVuaXZlcnNhbFJlc3VsdHMgZnJvbSAnLi4vbW9kZWxzL3VuaXZlcnNhbHJlc3VsdHMnO1xuaW1wb3J0IERpcmVjdEFuc3dlciBmcm9tICcuLi9tb2RlbHMvZGlyZWN0YW5zd2VyJztcbmltcG9ydCBOYXZpZ2F0aW9uIGZyb20gJy4uL21vZGVscy9uYXZpZ2F0aW9uJztcbmltcG9ydCBWZXJ0aWNhbFJlc3VsdHMgZnJvbSAnLi4vbW9kZWxzL3ZlcnRpY2FscmVzdWx0cyc7XG5pbXBvcnQgU3BlbGxDaGVjayBmcm9tICcuLi9tb2RlbHMvc3BlbGxjaGVjayc7XG5pbXBvcnQgU3RvcmFnZUtleXMgZnJvbSAnLi4vc3RvcmFnZS9zdG9yYWdla2V5cyc7XG5pbXBvcnQgRHluYW1pY0ZpbHRlcnMgZnJvbSAnLi4vbW9kZWxzL2R5bmFtaWNmaWx0ZXJzJztcbmltcG9ydCBTZWFyY2hJbnRlbnRzIGZyb20gJy4uL21vZGVscy9zZWFyY2hpbnRlbnRzJztcbmltcG9ydCBMb2NhdGlvbkJpYXMgZnJvbSAnLi4vbW9kZWxzL2xvY2F0aW9uYmlhcyc7XG5pbXBvcnQgQWx0ZXJuYXRpdmVWZXJ0aWNhbHMgZnJvbSAnLi4vbW9kZWxzL2FsdGVybmF0aXZldmVydGljYWxzJztcbmltcG9ydCBSZXN1bHRzQ29udGV4dCBmcm9tICcuLi9zdG9yYWdlL3Jlc3VsdHNjb250ZXh0JztcblxuLyoqXG4gKiBBIERhdGEgVHJhbnNmb3JtZXIgdGhhdCB0YWtlcyB0aGUgcmVzcG9uc2Ugb2JqZWN0IGZyb20gYSBTZWFyY2ggcmVxdWVzdFxuICogQW5kIHRyYW5zZm9ybXMgaW4gdG8gYSBmcm9udC1lbmQgb3JpZW50ZWQgZGF0YSBzdHJ1Y3R1cmUgdGhhdCBvdXJcbiAqIGNvbXBvbmVudCBsaWJyYXJ5IGFuZCBjb3JlIHN0b3JhZ2UgdW5kZXJzdGFuZC5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2VhcmNoRGF0YVRyYW5zZm9ybWVyIHtcbiAgc3RhdGljIHRyYW5zZm9ybSAoZGF0YSwgdXJscyA9IHt9LCBmb3JtYXR0ZXJzKSB7XG4gICAgbGV0IHJlc3BvbnNlID0gZGF0YS5yZXNwb25zZTtcbiAgICByZXR1cm4ge1xuICAgICAgW1N0b3JhZ2VLZXlzLlFVRVJZX0lEXTogcmVzcG9uc2UucXVlcnlJZCxcbiAgICAgIFtTdG9yYWdlS2V5cy5OQVZJR0FUSU9OXTogTmF2aWdhdGlvbi5mcm9tKHJlc3BvbnNlLm1vZHVsZXMpLFxuICAgICAgW1N0b3JhZ2VLZXlzLkRJUkVDVF9BTlNXRVJdOiBEaXJlY3RBbnN3ZXIuZnJvbShyZXNwb25zZS5kaXJlY3RBbnN3ZXIsIGZvcm1hdHRlcnMpLFxuICAgICAgW1N0b3JhZ2VLZXlzLlVOSVZFUlNBTF9SRVNVTFRTXTogVW5pdmVyc2FsUmVzdWx0cy5mcm9tKHJlc3BvbnNlLCB1cmxzLCBmb3JtYXR0ZXJzKSxcbiAgICAgIFtTdG9yYWdlS2V5cy5JTlRFTlRTXTogU2VhcmNoSW50ZW50cy5mcm9tKHJlc3BvbnNlLnNlYXJjaEludGVudHMpLFxuICAgICAgW1N0b3JhZ2VLZXlzLlNQRUxMX0NIRUNLXTogU3BlbGxDaGVjay5mcm9tKHJlc3BvbnNlLnNwZWxsQ2hlY2spLFxuICAgICAgW1N0b3JhZ2VLZXlzLkxPQ0FUSU9OX0JJQVNdOiBMb2NhdGlvbkJpYXMuZnJvbShyZXNwb25zZS5sb2NhdGlvbkJpYXMpXG4gICAgfTtcbiAgfVxuXG4gIHN0YXRpYyB0cmFuc2Zvcm1WZXJ0aWNhbCAoZGF0YSwgZm9ybWF0dGVycywgdmVydGljYWxLZXkpIHtcbiAgICBjb25zdCByZXNwb25zZSA9IFNlYXJjaERhdGFUcmFuc2Zvcm1lci5fcGFyc2VWZXJ0aWNhbFJlc3BvbnNlKGRhdGEucmVzcG9uc2UpO1xuICAgIHJldHVybiB7XG4gICAgICBbU3RvcmFnZUtleXMuUVVFUllfSURdOiByZXNwb25zZS5xdWVyeUlkLFxuICAgICAgW1N0b3JhZ2VLZXlzLk5BVklHQVRJT05dOiBuZXcgTmF2aWdhdGlvbigpLCAvLyBWZXJ0aWNhbCBkb2Vzbid0IHJlc3BvbmQgd2l0aCBvcmRlcmluZywgc28gdXNlIGVtcHR5IG5hdi5cbiAgICAgIFtTdG9yYWdlS2V5cy5WRVJUSUNBTF9SRVNVTFRTXTogVmVydGljYWxSZXN1bHRzLmZyb20ocmVzcG9uc2UsIGZvcm1hdHRlcnMsIHZlcnRpY2FsS2V5KSxcbiAgICAgIFtTdG9yYWdlS2V5cy5EWU5BTUlDX0ZJTFRFUlNdOiBEeW5hbWljRmlsdGVycy5mcm9tKHJlc3BvbnNlKSxcbiAgICAgIFtTdG9yYWdlS2V5cy5JTlRFTlRTXTogU2VhcmNoSW50ZW50cy5mcm9tKHJlc3BvbnNlLnNlYXJjaEludGVudHMpLFxuICAgICAgW1N0b3JhZ2VLZXlzLlNQRUxMX0NIRUNLXTogU3BlbGxDaGVjay5mcm9tKHJlc3BvbnNlLnNwZWxsQ2hlY2spLFxuICAgICAgW1N0b3JhZ2VLZXlzLkFMVEVSTkFUSVZFX1ZFUlRJQ0FMU106IEFsdGVybmF0aXZlVmVydGljYWxzLmZyb20ocmVzcG9uc2UsIGZvcm1hdHRlcnMpLFxuICAgICAgW1N0b3JhZ2VLZXlzLkxPQ0FUSU9OX0JJQVNdOiBMb2NhdGlvbkJpYXMuZnJvbShyZXNwb25zZS5sb2NhdGlvbkJpYXMpXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGb3JtIHJlc3BvbnNlIGFzIGlmIHRoZSByZXN1bHRzIGZyb20gYGFsbFJlc3VsdHNGb3JWZXJ0aWNhbGAgd2VyZSB0aGUgYWN0dWFsXG4gICAqIHJlc3VsdHMgaW4gYHJlc3VsdHNgXG4gICAqIEBwYXJhbSB7T2JqZWN0fSByZXNwb25zZSBUaGUgc2VydmVyIHJlc3BvbnNlXG4gICAqL1xuICBzdGF0aWMgX3BhcnNlVmVydGljYWxSZXNwb25zZSAocmVzcG9uc2UpIHtcbiAgICBjb25zdCBoYXNSZXN1bHRzID0gcmVzcG9uc2UucmVzdWx0cyAmJiByZXNwb25zZS5yZXN1bHRzQ291bnQgPiAwO1xuICAgIGNvbnN0IHJlc3VsdHNDb250ZXh0ID0gaGFzUmVzdWx0cyA/IFJlc3VsdHNDb250ZXh0Lk5PUk1BTCA6IFJlc3VsdHNDb250ZXh0Lk5PX1JFU1VMVFM7XG5cbiAgICBpZiAocmVzdWx0c0NvbnRleHQgPT09IFJlc3VsdHNDb250ZXh0Lk5PX1JFU1VMVFMpIHtcbiAgICAgIGNvbnN0IHsgcmVzdWx0cywgcmVzdWx0c0NvdW50LCBmYWNldHMgfSA9IHJlc3BvbnNlLmFsbFJlc3VsdHNGb3JWZXJ0aWNhbCB8fCB7fTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnJlc3BvbnNlLFxuICAgICAgICByZXN1bHRzOiByZXN1bHRzIHx8IFtdLFxuICAgICAgICByZXN1bHRzQ291bnQ6IHJlc3VsdHNDb3VudCB8fCAwLFxuICAgICAgICByZXN1bHRzQ29udGV4dCxcbiAgICAgICAgZmFjZXRzXG4gICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgLi4ucmVzcG9uc2UsXG4gICAgICByZXN1bHRzQ29udGV4dFxuICAgIH07XG4gIH1cbn1cbiIsIi8qKiBAbW9kdWxlIFF1ZXN0aW9uU3VibWlzc2lvbiAqL1xuXG4vKipcbiAqIFF1ZXN0aW9uU3VibWlzc2lvbiBpcyB0aGUgY29yZSBzdGF0ZSBtb2RlbFxuICogdG8gcG93ZXIgdGhlIFF1ZXN0aW9uU3VibWlzc2lvbiBjb21wb25lbnRcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUXVlc3Rpb25TdWJtaXNzaW9uIHtcbiAgY29uc3RydWN0b3IgKHF1ZXN0aW9uID0ge30sIGVycm9ycykge1xuICAgIC8qKlxuICAgICAqIFRoZSBhdXRob3Igb2YgdGhlIHF1ZXN0aW9uXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLm5hbWUgPSBxdWVzdGlvbi5uYW1lIHx8IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgZW1haWwgYWRkcmVzcyBvZiB0aGUgcXVlc3Rpb25cbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMuZW1haWwgPSBxdWVzdGlvbi5lbWFpbCB8fCBudWxsO1xuXG4gICAgLyoqXG4gICAgICogVHJ1ZSBpZiB0aGUgcHJpdmFjeSBwb2xpY3kgd2FzIGFwcHJvdmVkXG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICovXG4gICAgdGhpcy5wcml2YWN5UG9saWN5ID0gcXVlc3Rpb24ucHJpdmFjeVBvbGljeSB8fCBudWxsO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHF1ZXN0aW9uIHRvIGJlIHNlbnQgdG8gdGhlIHNlcnZlclxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgdGhpcy5xdWVzdGlvblRleHQgPSBxdWVzdGlvbi5xdWVzdGlvblRleHQgfHwgbnVsbDtcblxuICAgIC8qKlxuICAgICAqIEFsdGVybmF0aXZlIHF1ZXN0aW9uIG1ldGEgaW5mb3JtYXRpb25cbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMucXVlc3Rpb25EZXNjcmlwdGlvbiA9IHF1ZXN0aW9uLnF1ZXN0aW9uRGVzY3JpcHRpb24gfHwgbnVsbDtcblxuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgdGhlIGZvcm0gaXMgZXhwYW5kZWQgb3Igbm90LiBEZWZhdWx0cyB0byB0cnVlLlxuICAgICAqL1xuICAgIHRoaXMucXVlc3Rpb25FeHBhbmRlZCA9IHR5cGVvZiBxdWVzdGlvbi5leHBhbmRlZCAhPT0gJ2Jvb2xlYW4nIHx8IHF1ZXN0aW9uLmV4cGFuZGVkO1xuXG4gICAgLyoqXG4gICAgICogQ29udGFpbnMgYW55IGVycm9ycyBhYm91dCB0aGUgcXVlc3Rpb24gc3VibWlzc2lvblxuICAgICAqIEB0eXBlIHtvYmplY3R9XG4gICAgICovXG4gICAgdGhpcy5lcnJvcnMgPSBlcnJvcnMgfHwgbnVsbDtcblxuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgdGhlIGZvcm0gaGFzIGJlZW4gc3VibWl0dGVkIG9yIG5vdC4gRGVmYXVsdHMgdG8gZmFsc2UuXG4gICAgICovXG4gICAgdGhpcy5xdWVzdGlvblN1Ym1pdHRlZCA9IHF1ZXN0aW9uLnN1Ym1pdHRlZCB8fCBmYWxzZTtcblxuICAgIE9iamVjdC5mcmVlemUodGhpcyk7XG4gIH1cblxuICBzdGF0aWMgc3VibWl0dGVkICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcXVlc3Rpb25TdWJtaXR0ZWQ6IHRydWUsXG4gICAgICBxdWVzdGlvbkV4cGFuZGVkOiB0cnVlXG4gICAgfTtcbiAgfVxuXG4gIHN0YXRpYyBlcnJvcnMgKHF1ZXN0aW9uLCBlcnJvcnMpIHtcbiAgICByZXR1cm4gUXVlc3Rpb25TdWJtaXNzaW9uKHF1ZXN0aW9uLCBlcnJvcnMpO1xuICB9XG59XG4iLCIvKipcbiAqIE1vZGVsIGZvciB0aGUgYW5hbHl0aWNzIGV2ZW50IHR5cGVcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQW5hbHl0aWNzRXZlbnQge1xuICBjb25zdHJ1Y3RvciAodHlwZSwgbGFiZWwpIHtcbiAgICAvKipcbiAgICAgKiBUaGUgdHlwZSBvZiBldmVudCB0byByZXBvcnRcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMuZXZlbnRUeXBlID0gdHlwZS50b1VwcGVyQ2FzZSgpO1xuXG4gICAgLyoqXG4gICAgICogQW4gb3B0aW9uYWwgbGFiZWwgdG8gYmUgcHJvdmlkZWQgZm9yIHRoZSBldmVudFxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgaWYgKGxhYmVsKSB7XG4gICAgICB0aGlzLmxhYmVsID0gbGFiZWw7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgdGhlIHByb3ZpZGVkIG9wdGlvbnMgdG8gdGhlIGV2ZW50XG4gICAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zIEFkZGl0aW9uYWwgb3B0aW9ucyBmb3IgdGhlIGV2ZW50XG4gICAqL1xuICBhZGRPcHRpb25zIChvcHRpb25zKSB7XG4gICAgT2JqZWN0LmFzc2lnbih0aGlzLCBvcHRpb25zKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm4gdGhlIGV2ZW50IGluIHRoZSBhcGkgZm9ybWF0LCB0eXBpY2FsbHkgZm9yIHJlcG9ydGluZyB0byB0aGUgYXBpXG4gICAqL1xuICB0b0FwaUV2ZW50ICgpIHtcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgdGhpcyk7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRpbmcgYW4gYW5hbHl0aWNzIGV2ZW50IGZyb20gcmF3IGRhdGEuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhXG4gICAqL1xuICBzdGF0aWMgZnJvbURhdGEgKGRhdGEpIHtcbiAgICBjb25zdCB7IHR5cGUsIGxhYmVsLCAuLi5ldmVudE9wdGlvbnMgfSA9IGRhdGE7XG4gICAgY29uc3QgYW5hbHl0aWNzRXZlbnQgPSBuZXcgQW5hbHl0aWNzRXZlbnQodHlwZSwgbGFiZWwpO1xuICAgIGFuYWx5dGljc0V2ZW50LmFkZE9wdGlvbnMoZXZlbnRPcHRpb25zKTtcbiAgICByZXR1cm4gYW5hbHl0aWNzRXZlbnQ7XG4gIH1cbn1cbiIsIi8qKiBAbW9kdWxlIEZpbHRlckNvbWJpbmF0b3JzICovXG5cbi8qKlxuICogRmlsdGVyQ29tYmluYXRvcnMgYXJlIGVudW1zIGZvciB2YWxpZCB3YXlzIHRvIGNvbWJpbmUge0BsaW5rIEZpbHRlcn1zLlxuICovXG5jb25zdCBGaWx0ZXJDb21iaW5hdG9ycyA9IHtcbiAgQU5EOiAnJGFuZCcsXG4gIE9SOiAnJG9yJ1xufTtcblxuZXhwb3J0IGRlZmF1bHQgRmlsdGVyQ29tYmluYXRvcnM7XG4iLCIvKiogQG1vZHVsZSBGaWx0ZXIgKi9cblxuaW1wb3J0IEZpbHRlckNvbWJpbmF0b3JzIGZyb20gJy4uL2ZpbHRlcnMvZmlsdGVyY29tYmluYXRvcnMnO1xuXG4vKipcbiAqIFJlcHJlc2VudHMgYW4gYXBpIGZpbHRlciBhbmQgcHJvdmlkZXMgc3RhdGljIG1ldGhvZHMgZm9yIGVhc2lseSBjb25zdHJ1Y3RpbmcgRmlsdGVycy5cbiAqIFNlZSBodHRwczovL2RldmVsb3Blci55ZXh0LmNvbS9kb2NzL2FwaS1yZWZlcmVuY2UvI29wZXJhdGlvbi9saXN0RW50aXRpZXMgZm9yIHN0cnVjdHVyZSBkZXRhaWxzXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEZpbHRlciB7XG4gIGNvbnN0cnVjdG9yIChkYXRhID0ge30pIHtcbiAgICBPYmplY3QuYXNzaWduKHRoaXMsIGRhdGEpO1xuICAgIE9iamVjdC5mcmVlemUodGhpcyk7XG4gIH1cblxuICAvKipcbiAgICogQSBmaWx0ZXIgc2hvdWxkIGhhdmUgZXhhY3RseSBPTkUga2V5LiBUaGF0IGtleSBpcyBFSVRIRVIgdGhlIGZpZWxkIG5hbWUgdG8gZmlsdGVyIGJ5LCBvclxuICAgKiBhIHNwZWNpYWwgc3RyaW5nIHN1Y2ggYXMgJG9yIG9yICRhbmQuXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuICBnZXRGaWx0ZXJLZXkgKCkge1xuICAgIGlmIChPYmplY3Qua2V5cyh0aGlzKS5sZW5ndGggPiAwKSB7XG4gICAgICByZXR1cm4gT2JqZWN0LmtleXModGhpcylbMF07XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhbiBlbXB0eSBmaWx0ZXJcbiAgICovXG4gIHN0YXRpYyBlbXB0eSAoKSB7XG4gICAgcmV0dXJuIG5ldyBGaWx0ZXIoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBXcmFwIGZpbHRlciBkYXRhIGluIGEgRmlsdGVyIGNsYXNzXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBmaWx0ZXJcbiAgICovXG4gIHN0YXRpYyBmcm9tIChmaWx0ZXIpIHtcbiAgICByZXR1cm4gbmV3IEZpbHRlcihmaWx0ZXIpO1xuICB9XG5cbiAgLyoqXG4gICAqIFBhcnNlIGEgSlNPTiBmb3JtYXQgZmlsdGVyIHJldHVybmVkIGZyb20gdGhlIHNlcnZlciBpbnRvIGEgRmlsdGVyXG4gICAqIEBwYXJhbSB7Kn0gcmVzcG9uc2VGaWx0ZXIgQSBmaWx0ZXIgaW4gSlNPTiBmb3JtYXQgcmV0dXJuZWQgZnJvbSB0aGUgYmFja2VuZFxuICAgKiBAcmV0dXJucyB7RmlsdGVyfVxuICAgKi9cbiAgc3RhdGljIGZyb21SZXNwb25zZSAocmVzcG9uc2VGaWx0ZXIpIHtcbiAgICByZXR1cm4gbmV3IEZpbHRlcihKU09OLnBhcnNlKHJlc3BvbnNlRmlsdGVyKSk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJuIGEgbmV3IEZpbHRlciByZXByZXNlbnRpbmcgdGhlIE9SIG9mIGFsbCBwcm92aWRlZCBmaWx0ZXJzXG4gICAqIEBwYXJhbSAgey4uLkZpbHRlcn0gZmlsdGVycyBUaGUgZmlsdGVycyB0byBPUiB0b2dldGhlclxuICAgKiBAcmV0dXJucyB7RmlsdGVyfVxuICAgKi9cbiAgc3RhdGljIG9yICguLi5maWx0ZXJzKSB7XG4gICAgcmV0dXJuIG5ldyBGaWx0ZXIoe1xuICAgICAgWyBGaWx0ZXJDb21iaW5hdG9ycy5PUiBdOiBmaWx0ZXJzXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJuIGEgbmV3IEZpbHRlciByZXByZXNlbnRpbmcgdGhlIEFORCBvZiBhbGwgcHJvdmlkZWQgZmlsdGVyc1xuICAgKiBAcGFyYW0gIHsuLi5GaWx0ZXJ9IGZpbHRlcnMgVGhlIGZpbHRlcnMgdG8gQU5EIHRvZ2V0aGVyXG4gICAqIEByZXR1cm5zIHtGaWx0ZXJ9XG4gICAqL1xuICBzdGF0aWMgYW5kICguLi5maWx0ZXJzKSB7XG4gICAgcmV0dXJuIG5ldyBGaWx0ZXIoe1xuICAgICAgWyBGaWx0ZXJDb21iaW5hdG9ycy5BTkQgXTogZmlsdGVyc1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEhlbHBlciBtZXRob2QgZm9yIGNyZWF0aW5nIGEgcmFuZ2UgZmlsdGVyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBmaWVsZCBmaWVsZCBpZCBvZiB0aGUgZmlsdGVyXG4gICAqIEBwYXJhbSB7bnVtYmVyfHN0cmluZ30gbWluIG1pbmltdW0gdmFsdWVcbiAgICogQHBhcmFtIHtudW1iZXJ8c3RyaW5nfSBtYXggbWF4aW11bSB2YWx1ZVxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGlzRXhjbHVzaXZlIHdoZXRoZXIgdGhpcyBpcyBhbiBpbmNsdXNpdmUgb3IgZXhjbHVzaXZlIHJhbmdlXG4gICAqIEByZXR1cm5zIHtGaWx0ZXJ9XG4gICAqL1xuICBzdGF0aWMgcmFuZ2UgKGZpZWxkLCBtaW4sIG1heCwgaXNFeGNsdXNpdmUpIHtcbiAgICBjb25zdCBmYWxzeU1pbiA9IG1pbiA9PT0gbnVsbCB8fCBtaW4gPT09IHVuZGVmaW5lZCB8fCBtaW4gPT09ICcnO1xuICAgIGNvbnN0IGZhbHN5TWF4ID0gbWF4ID09PSBudWxsIHx8IG1heCA9PT0gdW5kZWZpbmVkIHx8IG1heCA9PT0gJyc7XG4gICAgaWYgKGZhbHN5TWluICYmIGZhbHN5TWF4KSB7XG4gICAgICByZXR1cm4gRmlsdGVyLmVtcHR5KCk7XG4gICAgfSBlbHNlIGlmIChmYWxzeU1heCkge1xuICAgICAgcmV0dXJuIGlzRXhjbHVzaXZlXG4gICAgICAgID8gRmlsdGVyLmdyZWF0ZXJUaGFuKGZpZWxkLCBtaW4pXG4gICAgICAgIDogRmlsdGVyLmdyZWF0ZXJUaGFuRXF1YWwoZmllbGQsIG1pbik7XG4gICAgfSBlbHNlIGlmIChmYWxzeU1pbikge1xuICAgICAgcmV0dXJuIGlzRXhjbHVzaXZlXG4gICAgICAgID8gRmlsdGVyLmxlc3NUaGFuKGZpZWxkLCBtYXgpXG4gICAgICAgIDogRmlsdGVyLmxlc3NUaGFuRXF1YWwoZmllbGQsIG1heCk7XG4gICAgfSBlbHNlIGlmIChtaW4gPT09IG1heCkge1xuICAgICAgcmV0dXJuIGlzRXhjbHVzaXZlXG4gICAgICAgID8gRmlsdGVyLmVtcHR5KClcbiAgICAgICAgOiBGaWx0ZXIuZXF1YWwoZmllbGQsIG1pbik7XG4gICAgfVxuICAgIHJldHVybiBpc0V4Y2x1c2l2ZVxuICAgICAgPyBGaWx0ZXIuZXhjbHVzaXZlUmFuZ2UoZmllbGQsIG1pbiwgbWF4KVxuICAgICAgOiBGaWx0ZXIuaW5jbHVzaXZlUmFuZ2UoZmllbGQsIG1pbiwgbWF4KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBuZXcgXCJlcXVhbCB0b1wiIGZpbHRlciBmb3IgYSBmaWVsZFxuICAgKiBAcGFyYW0ge3N0cmluZ30gZmllbGQgVGhlIHN1YmplY3QgZmllbGQgb2YgdGhlIGZpbHRlclxuICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0aGUgZmllbGQgc2hvdWxkIGJlIGVxdWFsIHRvXG4gICAqIEByZXR1cm5zIHtGaWx0ZXJ9XG4gICAqL1xuICBzdGF0aWMgZXF1YWwgKGZpZWxkLCB2YWx1ZSkge1xuICAgIHJldHVybiBGaWx0ZXIuX2Zyb21NYXRjaGVyKGZpZWxkLCAnJGVxJywgdmFsdWUpO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIG5ldyBcImxlc3MgdGhhblwiIGZpbHRlciBmb3IgYSBmaWVsZFxuICAgKiBAcGFyYW0ge3N0cmluZ30gZmllbGQgVGhlIHN1YmplY3QgZmllbGQgb2YgdGhlIGZpbHRlclxuICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0aGUgZmllbGQgc2hvdWxkIGJlIGxlc3MgdGhhblxuICAgKiBAcmV0dXJucyB7RmlsdGVyfVxuICAgKi9cbiAgc3RhdGljIGxlc3NUaGFuIChmaWVsZCwgdmFsdWUpIHtcbiAgICByZXR1cm4gRmlsdGVyLl9mcm9tTWF0Y2hlcihmaWVsZCwgJyRsdCcsIHZhbHVlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBuZXcgXCJsZXNzIHRoYW4gb3IgZXF1YWwgdG9cIiBmaWx0ZXIgZm9yIGEgZmllbGRcbiAgICogQHBhcmFtIHtzdHJpbmd9IGZpZWxkIFRoZSBzdWJqZWN0IGZpZWxkIG9mIHRoZSBmaWx0ZXJcbiAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdGhlIGZpZWxkIHNob3VsZCBiZSBsZXNzIHRoYW4gb3IgZXF1YWwgdG9cbiAgICogQHJldHVybnMge0ZpbHRlcn1cbiAgICovXG4gIHN0YXRpYyBsZXNzVGhhbkVxdWFsIChmaWVsZCwgdmFsdWUpIHtcbiAgICByZXR1cm4gRmlsdGVyLl9mcm9tTWF0Y2hlcihmaWVsZCwgJyRsZScsIHZhbHVlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBuZXcgXCJncmVhdGVyIHRoYW5cIiBmaWx0ZXIgZm9yIGEgZmllbGRcbiAgICogQHBhcmFtIHtzdHJpbmd9IGZpZWxkIFRoZSBzdWJqZWN0IGZpZWxkIG9mIHRoZSBmaWx0ZXJcbiAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdGhlIGZpZWxkIHNob3VsZCBiZSBncmVhdGVyIHRoYW5cbiAgICogQHJldHVybnMge0ZpbHRlcn1cbiAgICovXG4gIHN0YXRpYyBncmVhdGVyVGhhbiAoZmllbGQsIHZhbHVlKSB7XG4gICAgcmV0dXJuIEZpbHRlci5fZnJvbU1hdGNoZXIoZmllbGQsICckZ3QnLCB2YWx1ZSk7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGEgbmV3IFwiZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvXCIgZmlsdGVyIGZvciBhIGZpZWxkXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBmaWVsZCBUaGUgc3ViamVjdCBmaWVsZCBvZiB0aGUgZmlsdGVyXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRoZSBmaWVsZCBzaG91bGQgYmUgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvXG4gICAqIEByZXR1cm5zIHtGaWx0ZXJ9XG4gICAqL1xuICBzdGF0aWMgZ3JlYXRlclRoYW5FcXVhbCAoZmllbGQsIHZhbHVlKSB7XG4gICAgcmV0dXJuIEZpbHRlci5fZnJvbU1hdGNoZXIoZmllbGQsICckZ2UnLCB2YWx1ZSk7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGEgbmV3IGluY2x1c2l2ZSByYW5nZSBmaWx0ZXJcbiAgICogQHBhcmFtIHtzdHJpbmd9IGZpZWxkIFRoZSBzdWJqZWN0IGZpZWxkIG9mIHRoZSBmaWx0ZXJcbiAgICogQHBhcmFtIHsqfSBtaW4gVGhlIG1pbmltdW0gdmFsdWVcbiAgICogQHBhcmFtIHsqfSBtYXggVGhlIG1heGltdW0gdmFsdWVcbiAgICogQHJldHVybnMge0ZpbHRlcn1cbiAgICovXG4gIHN0YXRpYyBpbmNsdXNpdmVSYW5nZSAoZmllbGQsIG1pbiwgbWF4KSB7XG4gICAgcmV0dXJuIG5ldyBGaWx0ZXIoe1xuICAgICAgW2ZpZWxkXToge1xuICAgICAgICAnJGdlJzogbWluLFxuICAgICAgICAnJGxlJzogbWF4XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGEgbmV3IGV4Y2x1c2l2ZSByYW5nZSBmaWx0ZXJcbiAgICogQHBhcmFtIHtzdHJpbmd9IGZpZWxkIFRoZSBzdWJqZWN0IGZpZWxkIG9mIHRoZSBmaWx0ZXJcbiAgICogQHBhcmFtIHsqfSBtaW4gVGhlIG1pbmltdW0gdmFsdWVcbiAgICogQHBhcmFtIHsqfSBtYXggVGhlIG1heGltdW0gdmFsdWVcbiAgICogQHJldHVybnMge0ZpbHRlcn1cbiAgICovXG4gIHN0YXRpYyBleGNsdXNpdmVSYW5nZSAoZmllbGQsIG1pbiwgbWF4KSB7XG4gICAgcmV0dXJuIG5ldyBGaWx0ZXIoe1xuICAgICAgW2ZpZWxkXToge1xuICAgICAgICAnJGd0JzogbWluLFxuICAgICAgICAnJGx0JzogbWF4XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGEgbmV3IHBvc2l0aW9uIGZpbHRlclxuICAgKiBAcGFyYW0ge251bWJlcn0gbGF0IFRoZSBsYXRpdHVkZSBvZiB0aGUgcG9zaXRpb25cbiAgICogQHBhcmFtIHtudW1iZXJ9IGxuZyBUaGUgbG9uZ2l0dWRlIG9mIHRoZSBwb3NpdGlvblxuICAgKiBAcGFyYW0ge251bWJlcn0gcmFkaXVzIFRoZSBzZWFyY2ggcmFkaXVzIChpbiBtZXRlcnMpXG4gICAqL1xuICBzdGF0aWMgcG9zaXRpb24gKGxhdCwgbG5nLCByYWRpdXMpIHtcbiAgICByZXR1cm4gRmlsdGVyLl9mcm9tTWF0Y2hlcignYnVpbHRpbi5sb2NhdGlvbicsICckbmVhcicsIHsgbGF0LCBsbmcsIHJhZGl1cyB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBuZXcgZmlsdGVyIHdpdGggdGhlIGdpdmVuIG1hdGNoZXJcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGZpZWxkIFRoZSBzdWJqZWN0IGZpZWxkIG9mIHRoZSBmaWx0ZXJcbiAgICogQHBhcmFtIHtzdHJpbmd9IG1hdGNoZXIgVGhlIG1hdGNoZXIgZm9yIHRoZSBmaWxlclxuICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSBmb3IgdGhlIGZpbHRlclxuICAgKiBAcmV0dXJucyB7RmlsdGVyfVxuICAgKi9cbiAgc3RhdGljIF9mcm9tTWF0Y2hlciAoZmllbGQsIG1hdGNoZXIsIHZhbHVlKSB7XG4gICAgcmV0dXJuIG5ldyBGaWx0ZXIoe1xuICAgICAgW2ZpZWxkXToge1xuICAgICAgICBbbWF0Y2hlcl06IHZhbHVlXG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cbiIsIi8qKiBAbW9kdWxlIEZpbHRlclR5cGVzICovXG5cbi8qKlxuICogRmlsdGVyVHlwZSBpcyBhbiBFTlVNIGZvciB0aGUgZGlmZmVyZW50IHR5cGVzIG9mIGZpbHRlcnMgaW4gdGhlIFNESy5cbiAqIEBlbnVtIHtzdHJpbmd9XG4gKi9cbmNvbnN0IEZpbHRlclR5cGUgPSB7XG4gIFNUQVRJQzogJ2ZpbHRlci10eXBlLXN0YXRpYycsXG4gIEZBQ0VUOiAnZmlsdGVyLXR5cGUtZmFjZXQnLFxuICBSQURJVVM6ICdmaWx0ZXItdHlwZS1yYWRpdXMnLFxuICBOTFA6ICdmaWx0ZXItdHlwZS1ubHAnXG59O1xuXG5leHBvcnQgZGVmYXVsdCBGaWx0ZXJUeXBlO1xuIiwiLyoqIEBtb2R1bGUgRmlsdGVyTWV0YWRhdGEgKi9cblxuaW1wb3J0IEZpbHRlclR5cGUgZnJvbSAnLi9maWx0ZXJ0eXBlJztcblxuLyoqXG4gKiBGaWx0ZXJNZXRhZGF0YSBpcyBhIGNvbnRhaW5lciBmb3IgYWRkaXRpb25hbCBkaXNwbGF5IGRhdGEgZm9yIGEge0BsaW5rIEZpbHRlcn0uXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEZpbHRlck1ldGFkYXRhIHtcbiAgY29uc3RydWN0b3IgKG1ldGFkYXRhID0ge30pIHtcbiAgICBjb25zdCB7IGZpZWxkTmFtZSwgZGlzcGxheVZhbHVlLCBmaWx0ZXJUeXBlIH0gPSBtZXRhZGF0YTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBkaXNwbGF5IG5hbWUgZm9yIHRoZSBmaWVsZCBiZWluZyBmaWx0ZXJlZCBvbi5cbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMuZmllbGROYW1lID0gZmllbGROYW1lO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGRpc3BsYXkgdmFsdWUgZm9yIHRoZSB2YWx1ZXMgYmVpbmcgZmlsdGVyZWQgb24uXG4gICAgICogRXZlbiBpZiB0aGVyZSBhcmUgbXVsdGlwbGUgdmFsdWVzIHdpdGhpbiB0aGUgZGF0YSBvZiBhIGZpbHRlcixcbiAgICAgKiB0aGVyZSBzaG91bGQgb25seSBiZSBvbmUgZGlzcGxheSB2YWx1ZSBmb3IgdGhlIHdob2xlIGZpbHRlci5cbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMuZGlzcGxheVZhbHVlID0gZGlzcGxheVZhbHVlO1xuXG4gICAgLyoqXG4gICAgICogV2hhdCB0eXBlIG9mIGZpbHRlciB0aGlzIGlzLlxuICAgICAqIEB0eXBlIHtGaWx0ZXJUeXBlfVxuICAgICAqL1xuICAgIHRoaXMuZmlsdGVyVHlwZSA9IGZpbHRlclR5cGUgfHwgRmlsdGVyVHlwZS5TVEFUSUM7XG4gICAgT2JqZWN0LmZyZWV6ZSh0aGlzKTtcbiAgfVxufVxuIiwiLyoqIEBtb2R1bGUgRmlsdGVyTm9kZSAqL1xuXG4vKipcbiAqIEEgRmlsdGVyTm9kZSByZXByZXNlbnRzIGEgc2luZ2xlIG5vZGUgaW4gYSBmaWx0ZXIgdHJlZS5cbiAqIEVhY2ggZmlsdGVyIG5vZGUgaGFzIGFuIGFzc29jaWF0ZWQgZmlsdGVyLCBjb250YWluaW5nIHRoZSBmaWx0ZXJcbiAqIGRhdGEgdG8gc2VuZCBpbiBhIHJlcXVlc3QsIGFueSBhZGRpdGlvbmFsIGZpbHRlciBtZXRhZGF0YSBmb3IgZGlzcGxheSxcbiAqIGFuZCBhbnkgY2hpbGRyZW4gbm9kZXMuXG4gKlxuICogSW1wbGVtZW50ZWQgYnkge0BsaW5rIFNpbXBsZUZpbHRlck5vZGV9IGFuZCB7QGxpbmsgQ29tYmluZWRGaWx0ZXJOb2RlfS5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRmlsdGVyTm9kZSB7XG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoaXMgbm9kZSdzIGZpbHRlci5cbiAgICogQHJldHVybnMge0ZpbHRlcn1cbiAgICovXG4gIGdldEZpbHRlciAoKSB7fVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBtZXRhZGF0YSBmb3IgdGhpcyBub2RlJ3MgZmlsdGVyLlxuICAgKiBAcmV0dXJucyB7RmlsdGVyTWV0YWRhdGF9XG4gICAqL1xuICBnZXRNZXRhZGF0YSAoKSB7fVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBjaGlsZHJlbiBvZiB0aGlzIG5vZGUuXG4gICAqIEByZXR1cm5zIHtBcnJheTxGaWx0ZXJOb2RlPn1cbiAgICovXG4gIGdldENoaWxkcmVuICgpIHt9XG5cbiAgLyoqXG4gICAqIFJlY3Vyc2l2ZWx5IGdldCBhbGwgb2YgdGhlIGxlYWYgU2ltcGxlRmlsdGVyTm9kZXMuXG4gICAqIEByZXR1cm5zIHtBcnJheTxTaW1wbGVGaWx0ZXJOb2RlPn1cbiAgICovXG4gIGdldFNpbXBsZURlc2NlbmRhbnRzICgpIHt9XG5cbiAgLyoqXG4gICAqIFJlbW92ZSB0aGlzIEZpbHRlck5vZGUgZnJvbSB0aGUgRmlsdGVyUmVnaXN0cnkuXG4gICAqL1xuICByZW1vdmUgKCkge31cbn1cbiIsIi8qKiBAbW9kdWxlIFNpbXBsZUZpbHRlck5vZGUgKi9cblxuaW1wb3J0IEZpbHRlciBmcm9tICcuLi9tb2RlbHMvZmlsdGVyJztcbmltcG9ydCBGaWx0ZXJNZXRhZGF0YSBmcm9tICcuL2ZpbHRlcm1ldGFkYXRhJztcbmltcG9ydCBGaWx0ZXJOb2RlIGZyb20gJy4vZmlsdGVybm9kZSc7XG5cbi8qKlxuICogQSBTaW1wbGVGaWx0ZXJOb2RlIHJlcHJlc2VudHMgYSBzaW5nbGUsIGF0b21pYyBmaWx0ZXIuXG4gKiBBbiBhdG9taWMgZmlsdGVyIGlzIGEgZmlsdGVyIHRoYXQgZmlsdGVycyBieSBhIHNpbmdsZSB2YWx1ZSBvbiBhIHNpbmdsZSBmaWVsZCBpZCxcbiAqIGFuZCBkb2VzIG5vdCBjb250YWluIGFueSBjaGlsZHJlbiBmaWx0ZXJzLlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTaW1wbGVGaWx0ZXJOb2RlIGV4dGVuZHMgRmlsdGVyTm9kZSB7XG4gIGNvbnN0cnVjdG9yIChmaWx0ZXJOb2RlID0ge30pIHtcbiAgICBzdXBlcigpO1xuICAgIGNvbnN0IHsgZmlsdGVyLCBtZXRhZGF0YSwgcmVtb3ZlIH0gPSBmaWx0ZXJOb2RlO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGZpbHRlciBkYXRhLlxuICAgICAqIEB0eXBlIHtGaWx0ZXJ9XG4gICAgICovXG4gICAgdGhpcy5maWx0ZXIgPSBGaWx0ZXIuZnJvbShmaWx0ZXIpO1xuXG4gICAgLyoqXG4gICAgICogRGlzcGxheSBtZXRhZGF0YSBhc3NvY2lhdGVkIHdpdGggdGhlIGZpbHRlciBkYXRhLlxuICAgICAqIEB0eXBlIHtGaWx0ZXJNZXRhZGF0YX1cbiAgICAgKi9cbiAgICB0aGlzLm1ldGFkYXRhID0gbmV3IEZpbHRlck1ldGFkYXRhKG1ldGFkYXRhKTtcblxuICAgIC8qKlxuICAgICAqIFJlbW92ZSBjYWxsYmFjayBmdW5jdGlvbi5cbiAgICAgKiBAdHlwZSB7RnVuY3Rpb259XG4gICAgICovXG4gICAgdGhpcy5fcmVtb3ZlID0gcmVtb3ZlIHx8IGZ1bmN0aW9uICgpIHt9O1xuICAgIE9iamVjdC5mcmVlemUodGhpcyk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgZmlsdGVyIGFzc29jaWF0ZWQgd2l0aCB0aGlzIG5vZGUuXG4gICAqIEB0eXBlIHtGaWx0ZXJ9XG4gICAqL1xuICBnZXRGaWx0ZXIgKCkge1xuICAgIHJldHVybiB0aGlzLmZpbHRlcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBjaGlsZHJlbiBhc3NvY2lhdGVkIHdpdGggdGhpcyBub2RlIChubyBjaGlsZHJlbikuXG4gICAqIEByZXR1cm5zIHtBcnJheTxGaWx0ZXJOb2RlPn1cbiAgICovXG4gIGdldENoaWxkcmVuICgpIHtcbiAgICByZXR1cm4gW107XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgZmlsdGVyIG1ldGFkYXRhIGZvciB0aGlzIG5vZGUncyBmaWx0ZXIuXG4gICAqIEByZXR1cm5zIHtGaWx0ZXJNZXRhZGF0YX1cbiAgICovXG4gIGdldE1ldGFkYXRhICgpIHtcbiAgICByZXR1cm4gdGhpcy5tZXRhZGF0YTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWN1cnNpdmVseSBnZXQgYWxsIG9mIHRoZSBsZWFmIFNpbXBsZUZpbHRlck5vZGVzLlxuICAgKiBTaW5jZSBTaW1wbGVGaWx0ZXJOb2RlcyBoYXZlIG5vIGNoaWxkcmVuIHRoaXMganVzdCByZXR1cm5zIGl0c2VsZi5cbiAgICogQHJldHVybnMge0FycmF5PFNpbXBsZUZpbHRlck5vZGU+fVxuICAgKi9cbiAgZ2V0U2ltcGxlRGVzY2VuZGFudHMgKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZXMgdGhpcyBmaWx0ZXIgbm9kZSBmcm9tIHRoZSBGaWx0ZXJSZWdpc3RyeS5cbiAgICovXG4gIHJlbW92ZSAoKSB7XG4gICAgdGhpcy5fcmVtb3ZlKCk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB3aGV0aGVyIHRoaXMgU2ltcGxlRmlsdGVyTm9kZSdzIGZpbHRlciBpcyBlcXVhbCB0byBhbm90aGVyIFNpbXBsZUZpbHRlck5vZGUnc1xuICAgKiBAcGFyYW0ge1NpbXBsZUZpbHRlck5vZGV9IG5vZGVcbiAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAqL1xuICBoYXNTYW1lRmlsdGVyQXMgKG90aGVyTm9kZSkge1xuICAgIGNvbnN0IHRoaXNGaWx0ZXIgPSB0aGlzLmdldEZpbHRlcigpO1xuICAgIGNvbnN0IG90aGVyRmlsdGVyID0gb3RoZXJOb2RlLmdldEZpbHRlcigpO1xuICAgIGNvbnN0IHRoaXNGaWVsZElkID0gdGhpc0ZpbHRlci5nZXRGaWx0ZXJLZXkoKTtcbiAgICBjb25zdCBvdGhlckZpZWxkSWQgPSBvdGhlckZpbHRlci5nZXRGaWx0ZXJLZXkoKTtcbiAgICBpZiAodGhpc0ZpZWxkSWQgIT09IG90aGVyRmllbGRJZCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBjb25zdCB0aGlzTWF0Y2hlcnNUb1ZhbHVlcyA9IHRoaXNGaWx0ZXJbdGhpc0ZpZWxkSWRdO1xuICAgIGNvbnN0IG90aGVyTWF0Y2hlcnNUb1ZhbHVlcyA9IG90aGVyRmlsdGVyW290aGVyRmllbGRJZF07XG4gICAgY29uc3QgdGhpc01hdGNoZXJzID0gT2JqZWN0LmtleXModGhpc01hdGNoZXJzVG9WYWx1ZXMpO1xuICAgIGNvbnN0IG90aGVyTWF0Y2hlcnMgPSBPYmplY3Qua2V5cyhvdGhlck1hdGNoZXJzVG9WYWx1ZXMpO1xuICAgIGlmICh0aGlzTWF0Y2hlcnMubGVuZ3RoICE9PSBvdGhlck1hdGNoZXJzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdGhpc01hdGNoZXJzLmV2ZXJ5KG0gPT5cbiAgICAgIG90aGVyTWF0Y2hlcnNUb1ZhbHVlcy5oYXNPd25Qcm9wZXJ0eShtKSAmJlxuICAgICAgb3RoZXJNYXRjaGVyc1RvVmFsdWVzW21dID09PSB0aGlzTWF0Y2hlcnNUb1ZhbHVlc1ttXVxuICAgICk7XG4gIH1cbn1cbiIsIi8qKiBAbW9kdWxlIENvbWJpbmVkRmlsdGVyTm9kZSAqL1xuXG5pbXBvcnQgRmlsdGVyIGZyb20gJy4uL21vZGVscy9maWx0ZXInO1xuaW1wb3J0IEZpbHRlckNvbWJpbmF0b3JzIGZyb20gJy4vZmlsdGVyY29tYmluYXRvcnMnO1xuaW1wb3J0IEZpbHRlck5vZGUgZnJvbSAnLi9maWx0ZXJub2RlJztcblxuLyoqXG4gKiBBIENvbWJpbmVkRmlsdGVyTm9kZSByZXByZXNlbnRzIGEgY29tYmluZWQgZmlsdGVyLlxuICogQSBjb21iaW5lZCBmaWx0ZXIgaXMgYSBzZXQgb2YgZmlsdGVycyBjb21iaW5lZCB3aXRoIGEge0BsaW5rIEZpbHRlckNvbWJpbmF0b3JzfVxuICogKCRhbmQgb3IgJG9yKS4gU2luY2UgYSBjb21iaW5lZCBmaWx0ZXIgaXMganVzdCBhIHNldCBvZiBvdGhlciBmaWx0ZXJzLFxuICogaXQgZG9lcyBub3QgaGF2ZSBpdHMgb3duIHtAbGluayBGaWx0ZXJNZXRhZGF0YX0sIGFuZCBpdHMgZmlsdGVyIGlzIGRlcnZpZWQgZnJvbVxuICogaXRzIGNoaWxkcmVuLlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb21iaW5lZEZpbHRlck5vZGUgZXh0ZW5kcyBGaWx0ZXJOb2RlIHtcbiAgY29uc3RydWN0b3IgKGZpbHRlck5vZGUgPSB7fSkge1xuICAgIHN1cGVyKCk7XG4gICAgY29uc3QgeyBjb21iaW5hdG9yLCBjaGlsZHJlbiB9ID0gZmlsdGVyTm9kZTtcblxuICAgIC8qKlxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgdGhpcy5jb21iaW5hdG9yID0gY29tYmluYXRvcjtcblxuICAgIC8qKlxuICAgICAqIEB0eXBlIHtBcnJheTxGaWx0ZXJOb2RlPn1cbiAgICAgKi9cbiAgICB0aGlzLmNoaWxkcmVuID0gY2hpbGRyZW4gfHwgW107XG4gICAgT2JqZWN0LmZyZWV6ZSh0aGlzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBmaWx0ZXIgY3JlYXRlZCBieSBjb21iaW5pbmcgdGhpcyBub2RlJ3MgY2hpbGRyZW4uXG4gICAqIEB0eXBlIHtGaWx0ZXJ9XG4gICAqL1xuICBnZXRGaWx0ZXIgKCkge1xuICAgIGNvbnN0IGZpbHRlcnMgPSB0aGlzLmNoaWxkcmVuLm1hcChjaGlsZE5vZGUgPT4gY2hpbGROb2RlLmdldEZpbHRlcigpKTtcbiAgICBzd2l0Y2ggKHRoaXMuY29tYmluYXRvcikge1xuICAgICAgY2FzZSAoRmlsdGVyQ29tYmluYXRvcnMuQU5EKTpcbiAgICAgICAgcmV0dXJuIEZpbHRlci5hbmQoLi4uZmlsdGVycyk7XG4gICAgICBjYXNlIChGaWx0ZXJDb21iaW5hdG9ycy5PUik6XG4gICAgICAgIHJldHVybiBGaWx0ZXIub3IoLi4uZmlsdGVycyk7XG4gICAgfVxuICAgIHJldHVybiBGaWx0ZXIuZW1wdHkoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBtZXRhZGF0YSBhc3NvY2lhdGVkIHdpdGggdGhpcyBub2RlJ3MgZmlsdGVyLlxuICAgKiBCZWNhdXNlIGEgY29tYmluZWQgZmlsdGVyJ3MgcHVycG9zZSBpcyBzb2xlbHkgdG8gam9pbiB0b2dldGhlciBvdGhlciBmaWx0ZXJzLFxuICAgKiBhbmQgZG9lcyBub3QgaGF2ZSBpdHMgb3duIGZpbHRlciwgdGhpcyB2YWx1ZSBpcyBhbHdheXMgbnVsbC5cbiAgICogQHJldHVybnMge251bGx9XG4gICAqL1xuICBnZXRNZXRhZGF0YSAoKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGlzIG5vZGUncyBjaGlsZHJlbi5cbiAgICogQHJldHVybnMge0FycmF5PEZpbHRlck5vZGU+fVxuICAgKi9cbiAgZ2V0Q2hpbGRyZW4gKCkge1xuICAgIHJldHVybiB0aGlzLmNoaWxkcmVuO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlY3Vyc2l2ZWx5IGdldCBhbGwgb2YgdGhlIGxlYWYgU2ltcGxlRmlsdGVyTm9kZXMuXG4gICAqIEByZXR1cm5zIHtBcnJheTxTaW1wbGVGaWx0ZXJOb2RlPn1cbiAgICovXG4gIGdldFNpbXBsZURlc2NlbmRhbnRzICgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRDaGlsZHJlbigpLmZsYXRNYXAoZm4gPT4gZm4uZ2V0U2ltcGxlRGVzY2VuZGFudHMoKSk7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlcyB0aGlzIGZpbHRlciBub2RlIGZyb20gdGhlIEZpbHRlclJlZ2lzdHJ5IGJ5IGNhbGxpbmcgcmVtb3ZlIG9uIGVhY2ggb2YgaXRzXG4gICAqIGNoaWxkIEZpbHRlck5vZGVzLlxuICAgKi9cbiAgcmVtb3ZlICgpIHtcbiAgICB0aGlzLmNoaWxkcmVuLmZvckVhY2goY2hpbGQgPT4ge1xuICAgICAgY2hpbGQucmVtb3ZlKCk7XG4gICAgfSk7XG4gIH1cbn1cbiIsIi8qKiBAbW9kdWxlIEZpbHRlck5vZGVGYWN0b3J5ICovXG5cbmltcG9ydCBGaWx0ZXJDb21iaW5hdG9ycyBmcm9tICcuL2ZpbHRlcmNvbWJpbmF0b3JzJztcbmltcG9ydCBTaW1wbGVGaWx0ZXJOb2RlIGZyb20gJy4vc2ltcGxlZmlsdGVybm9kZSc7XG5pbXBvcnQgQ29tYmluZWRGaWx0ZXJOb2RlIGZyb20gJy4vY29tYmluZWRmaWx0ZXJub2RlJztcblxuLyoqXG4gKiBGaWx0ZXJOb2RlRmFjdG9yeSBpcyBhIGNsYXNzIGNvbnRhaW5pbmcgc3RhdGljIGhlbHBlciBtZXRob2RzIGZvclxuICogZ2VuZXJhdGluZyBGaWx0ZXJOb2Rlcy5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRmlsdGVyTm9kZUZhY3Rvcnkge1xuICAvKipcbiAgICogQ3JlYXRlIGFuIEFORCBmaWx0ZXIgbm9kZSwgd2l0aCBzcGVjaWZpZWQgY2hpbGRyZW4uXG4gICAqIEBwYXJhbSAgey4uLkZpbHRlck5vZGV9IGNoaWxkcmVuTm9kZXNcbiAgICogQHJldHVybnMge0ZpbHRlck5vZGV9XG4gICAqL1xuICBzdGF0aWMgYW5kICguLi5jaGlsZHJlbk5vZGVzKSB7XG4gICAgcmV0dXJuIEZpbHRlck5vZGVGYWN0b3J5Ll9jb21iaW5lKEZpbHRlckNvbWJpbmF0b3JzLkFORCwgY2hpbGRyZW5Ob2Rlcyk7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGFuIE9SIGZpbHRlciBub2RlLCB3aXRoIHNwZWNpZmllZCBjaGlsZHJlbi5cbiAgICogQHBhcmFtICB7Li4uRmlsdGVyTm9kZX0gY2hpbGRyZW5Ob2Rlc1xuICAgKiBAcmV0dXJucyB7RmlsdGVyTm9kZX1cbiAgICovXG4gIHN0YXRpYyBvciAoLi4uY2hpbGRyZW5Ob2Rlcykge1xuICAgIHJldHVybiBGaWx0ZXJOb2RlRmFjdG9yeS5fY29tYmluZShGaWx0ZXJDb21iaW5hdG9ycy5PUiwgY2hpbGRyZW5Ob2Rlcyk7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIGNvbWJpbmVkIGZpbHRlciBub2RlIHdpdGggdGhlIGdpdmVuIGNvbWJpbmF0b3IgYW5kIGNoaWxkcmVuLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gY29tYmluYXRvclxuICAgKiBAcGFyYW0ge0FycmF5PEZpbHRlck5vZGU+fSBmaWx0ZXJOb2Rlc1xuICAgKiBAcmV0dXJucyB7RmlsdGVyTm9kZX1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHN0YXRpYyBfY29tYmluZSAoY29tYmluYXRvciwgZmlsdGVyTm9kZXMpIHtcbiAgICBjb25zdCBjaGlsZHJlbiA9IGZpbHRlck5vZGVzLmZpbHRlcihmbiA9PiBmbi5nZXRGaWx0ZXIoKS5nZXRGaWx0ZXJLZXkoKSk7XG4gICAgaWYgKCFjaGlsZHJlbi5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBuZXcgU2ltcGxlRmlsdGVyTm9kZSgpO1xuICAgIH1cbiAgICBpZiAoY2hpbGRyZW4ubGVuZ3RoID09PSAxKSB7XG4gICAgICByZXR1cm4gY2hpbGRyZW5bMF07XG4gICAgfVxuICAgIHJldHVybiBuZXcgQ29tYmluZWRGaWx0ZXJOb2RlKHtcbiAgICAgIGNvbWJpbmF0b3I6IGNvbWJpbmF0b3IsXG4gICAgICBjaGlsZHJlbjogY2hpbGRyZW5cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgZmlsdGVyTm9kZSBmcm9tIHRoZSBnaXZlbiBkYXRhLlxuICAgKiBAcGFyYW0ge09iamVjdHxGaWx0ZXJOb2RlfSBmaWx0ZXJOb2RlXG4gICAqIEByZXR1cm5zIHtGaWx0ZXJOb2RlfVxuICAgKi9cbiAgc3RhdGljIGZyb20gKGZpbHRlck5vZGUgPSB7fSkge1xuICAgIGlmIChmaWx0ZXJOb2RlLmNoaWxkcmVuICYmIGZpbHRlck5vZGUuY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gbmV3IENvbWJpbmVkRmlsdGVyTm9kZShmaWx0ZXJOb2RlKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBTaW1wbGVGaWx0ZXJOb2RlKGZpbHRlck5vZGUpO1xuICB9XG59XG4iLCIvKiogQG1vZHVsZSBGYWNldCAqL1xuXG4vKipcbiAqIE1vZGVsIHJlcHJlc2VudGluZyBhIGZhY2V0IGZpbHRlciB3aXRoIHRoZSBmb3JtYXQgb2ZcbiAqIHtcbiAqICAgXCJmaWVsZF9uYW1lXCI6IFsgRmlsdGVycy4uLiBdLFxuICogICAuLi5cbiAqIH1cbiAqXG4gKiBAc2VlIHtAbGluayBGaWx0ZXJ9XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEZhY2V0IHtcbiAgY29uc3RydWN0b3IgKGRhdGEgPSB7fSkge1xuICAgIE9iamVjdC5hc3NpZ24odGhpcywgZGF0YSk7XG4gICAgT2JqZWN0LmZyZWV6ZSh0aGlzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBmYWNldCBmaWx0ZXIgZnJvbSBhIGxpc3Qgb2YgRmlsdGVyc1xuICAgKiBAcGFyYW0ge0FycmF5PHN0cmluZz59IGF2YWlsYWJsZUZpZWxkSWRzIGFycmF5IG9mIGV4cGVjdGVkIGZpZWxkIGlkc1xuICAgKiBAcGFyYW0gIHsuLi5GaWx0ZXJ9IGZpbHRlcnMgVGhlIGZpbHRlcnMgdG8gdXNlIGluIHRoaXMgZmFjZXRcbiAgICogQHJldHVybnMge0ZhY2V0fVxuICAgKi9cbiAgc3RhdGljIGZyb21GaWx0ZXJzIChhdmFpbGFibGVGaWVsZElkcywgLi4uZmlsdGVycykge1xuICAgIGNvbnN0IGdyb3VwcyA9IHt9O1xuICAgIGF2YWlsYWJsZUZpZWxkSWRzLmZvckVhY2goZmllbGRJZCA9PiB7XG4gICAgICBncm91cHNbZmllbGRJZF0gPSBbXTtcbiAgICB9KTtcbiAgICBjb25zdCBmbGF0RmlsdGVycyA9IGZpbHRlcnMuZmxhdE1hcChmID0+IGYuJG9yIHx8IGYpO1xuICAgIGZsYXRGaWx0ZXJzLmZvckVhY2goZiA9PiB7XG4gICAgICBjb25zdCBrZXkgPSBmLmdldEZpbHRlcktleSgpO1xuICAgICAgaWYgKCFncm91cHNba2V5XSkge1xuICAgICAgICBncm91cHNba2V5XSA9IFtdO1xuICAgICAgfVxuICAgICAgZ3JvdXBzW2tleV0ucHVzaChmKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBuZXcgRmFjZXQoZ3JvdXBzKTtcbiAgfVxufVxuIiwiLyoqIEBtb2R1bGUgRmlsdGVyUmVnaXN0cnkgKi9cblxuaW1wb3J0IEZpbHRlck5vZGVGYWN0b3J5IGZyb20gJy4vZmlsdGVybm9kZWZhY3RvcnknO1xuaW1wb3J0IEZhY2V0IGZyb20gJy4uL21vZGVscy9mYWNldCc7XG5pbXBvcnQgU3RvcmFnZUtleXMgZnJvbSAnLi4vc3RvcmFnZS9zdG9yYWdla2V5cyc7XG5cbi8qKlxuICogRmlsdGVyUmVnaXN0cnkgaXMgYSBzdHJ1Y3R1cmUgdGhhdCBtYW5hZ2VzIHN0YXRpYyB7QGxpbmsgRmlsdGVyfXMgYW5kIHtAbGluayBGYWNldH0gZmlsdGVycy5cbiAqXG4gKiBTdGF0aWMgZmlsdGVycyBhbmQgZmFjZXQgZmlsdGVycyBhcmUgc3RvcmVkIHdpdGhpbiBnbG9iYWwgc3RvcmFnZSB1c2luZyBGaWx0ZXJOb2Rlcy5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRmlsdGVyUmVnaXN0cnkge1xuICBjb25zdHJ1Y3RvciAoZ2xvYmFsU3RvcmFnZSwgYXZhaWxhYmxlRmllbGRJZHMgPSBbXSkge1xuICAgIC8qKlxuICAgICAqIEZpbHRlclJlZ2lzdHJ5IHVzZXMge0BsaW5rIEdsb2JhbFN0b3JhZ2V9IGZvciBzdG9yaW5nIEZpbHRlck5vZGVzLlxuICAgICAqIEVhY2ggbm9kZSBpcyBnaXZlbiBhIHVuaXF1ZSBrZXkgaW4gZ2xvYmFsIHN0b3JhZ2UuXG4gICAgICovXG4gICAgdGhpcy5nbG9iYWxTdG9yYWdlID0gZ2xvYmFsU3RvcmFnZTtcblxuICAgIC8qKlxuICAgICAqIEFsbCBhdmFpbGFibGUgZmllbGQgaWRzIGZvciB0aGUgY3VycmVudCBmYWNldCBmaWx0ZXJzLCBpbmNsdWRpbmdcbiAgICAgKiBmaWVsZCBpZHMgZm9yIHVudXNlZCBidXQgYXZhaWxhYmxlIGZpbHRlcnMuXG4gICAgICogQHR5cGUge0FycmF5PHN0cmluZz59XG4gICAgICovXG4gICAgdGhpcy5hdmFpbGFibGVGaWVsZElkcyA9IGF2YWlsYWJsZUZpZWxkSWRzO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gYXJyYXkgY29udGFpbmluZyBhbGwgb2YgdGhlIGZpbHRlcm5vZGVzIHN0b3JlZCBpbiBnbG9iYWwgc3RvcmFnZS5cbiAgICogQHJldHVybnMge0FycmF5PEZpbHRlck5vZGU+fVxuICAgKi9cbiAgZ2V0QWxsRmlsdGVyTm9kZXMgKCkge1xuICAgIGNvbnN0IGdsb2JhbFN0b3JhZ2VGaWx0ZXJOb2RlcyA9IFtcbiAgICAgIC4uLnRoaXMuZ2V0U3RhdGljRmlsdGVyTm9kZXMoKSxcbiAgICAgIC4uLnRoaXMuZ2V0RmFjZXRGaWx0ZXJOb2RlcygpXG4gICAgXTtcbiAgICBjb25zdCBsb2NhdGlvblJhZGl1c0ZpbHRlck5vZGUgPSB0aGlzLmdldEZpbHRlck5vZGVCeUtleShTdG9yYWdlS2V5cy5MT0NBVElPTl9SQURJVVMpO1xuICAgIGlmIChsb2NhdGlvblJhZGl1c0ZpbHRlck5vZGUpIHtcbiAgICAgIGdsb2JhbFN0b3JhZ2VGaWx0ZXJOb2Rlcy5wdXNoKGxvY2F0aW9uUmFkaXVzRmlsdGVyTm9kZSk7XG4gICAgfVxuICAgIHJldHVybiBnbG9iYWxTdG9yYWdlRmlsdGVyTm9kZXM7XG4gIH1cblxuICAvKipcbiAgICogR2V0IGFsbCBvZiB0aGUge0BsaW5rIEZpbHRlck5vZGV9cyBmb3Igc3RhdGljIGZpbHRlcnMuXG4gICAqIEByZXR1cm5zIHtBcnJheTxGaWx0ZXJOb2RlPn1cbiAgICovXG4gIGdldFN0YXRpY0ZpbHRlck5vZGVzICgpIHtcbiAgICByZXR1cm4gdGhpcy5nbG9iYWxTdG9yYWdlLmdldEFsbChTdG9yYWdlS2V5cy5TVEFUSUNfRklMVEVSX05PREUpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBhbGwgb2YgdGhlIGFjdGl2ZSB7QGxpbmsgRmlsdGVyTm9kZX1zIGZvciBmYWNldHMuXG4gICAqIEByZXR1cm5zIHtBcnJheTxGaWx0ZXJOb2RlPn1cbiAgICovXG4gIGdldEZhY2V0RmlsdGVyTm9kZXMgKCkge1xuICAgIHJldHVybiB0aGlzLmdsb2JhbFN0b3JhZ2UuZ2V0U3RhdGUoU3RvcmFnZUtleXMuRkFDRVRfRklMVEVSX05PREUpIHx8IFtdO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIGZpbHRlciBzdHJpbmcgdG8gc2VuZCBpbiBhIHNlYXJjaCBxdWVyeS5cbiAgICogVE9ETzogbW92ZSBwYXlsb2FkIG1ldGhvZCBsb2dpYyBpbnRvIGNvcmUuanMsIHNpbmNlIGl0IGlzIG9ubHkgdXNlZCB0aGVyZS5cbiAgICogQHJldHVybnMge3N0cmluZ31cbiAgICovXG4gIGdldFN0YXRpY0ZpbHRlclBheWxvYWQgKCkge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh0aGlzLl9nZXRTdGF0aWNGaWx0ZXJQYXlsb2FkKCkpO1xuICB9XG5cbiAgX2dldFN0YXRpY0ZpbHRlclBheWxvYWQgKCkge1xuICAgIGNvbnN0IGZpbHRlck5vZGVzID0gdGhpcy5nZXRTdGF0aWNGaWx0ZXJOb2RlcygpO1xuICAgIGNvbnN0IHRvdGFsTm9kZSA9IEZpbHRlck5vZGVGYWN0b3J5LmFuZCguLi5maWx0ZXJOb2Rlcyk7XG4gICAgcmV0dXJuIHRvdGFsTm9kZS5nZXRGaWx0ZXIoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBmYWNldCBmaWx0ZXIgc3RyaW5nIHRvIHNlbmQgaW4gYSBzZWFyY2ggcXVlcnkuXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAqL1xuICBnZXRGYWNldEZpbHRlclBheWxvYWQgKCkge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh0aGlzLl9nZXRGYWNldEZpbHRlclBheWxvYWQoKSk7XG4gIH1cblxuICBfZ2V0RmFjZXRGaWx0ZXJQYXlsb2FkICgpIHtcbiAgICBjb25zdCBnZXRGaWx0ZXJzID0gZm4gPT4gZm4uZ2V0Q2hpbGRyZW4oKS5sZW5ndGhcbiAgICAgID8gZm4uZ2V0Q2hpbGRyZW4oKS5mbGF0TWFwKGdldEZpbHRlcnMpXG4gICAgICA6IGZuLmdldEZpbHRlcigpO1xuICAgIGNvbnN0IGZpbHRlcnMgPSB0aGlzLmdldEZhY2V0RmlsdGVyTm9kZXMoKS5mbGF0TWFwKGdldEZpbHRlcnMpO1xuICAgIHJldHVybiBGYWNldC5mcm9tRmlsdGVycyh0aGlzLmF2YWlsYWJsZUZpZWxkSWRzLCAuLi5maWx0ZXJzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIEZpbHRlck5vZGUgd2l0aCB0aGUgY29ycmVzcG9uZGluZyBrZXkuIERlZmF1bHRzIHRvIG51bGwuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXlcbiAgICovXG4gIGdldEZpbHRlck5vZGVCeUtleSAoa2V5KSB7XG4gICAgcmV0dXJuIHRoaXMuZ2xvYmFsU3RvcmFnZS5nZXRTdGF0ZShrZXkpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIHNwZWNpZmllZCB7QGxpbmsgRmlsdGVyTm9kZX0gdW5kZXIgdGhlIGdpdmVuIGtleS5cbiAgICogV2lsbCByZXBsYWNlIGEgcHJlZXhpc3Rpbmcgbm9kZSBpZiB0aGVyZSBpcyBvbmUuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXlcbiAgICogQHBhcmFtIHtGaWx0ZXJOb2RlfSBmaWx0ZXJOb2RlXG4gICAqL1xuICBzZXRTdGF0aWNGaWx0ZXJOb2RlcyAoa2V5LCBmaWx0ZXJOb2RlKSB7XG4gICAgdGhpcy5nbG9iYWxTdG9yYWdlLnNldChgJHtTdG9yYWdlS2V5cy5TVEFUSUNfRklMVEVSX05PREV9LiR7a2V5fWAsIGZpbHRlck5vZGUpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIGZpbHRlciBub2RlcyB1c2VkIGZvciB0aGUgY3VycmVudCBmYWNldCBmaWx0ZXJzLlxuICAgKlxuICAgKiBCZWNhdXNlIHRoZSBzZWFyY2ggcmVzcG9uc2Ugb25seSBzZW5kcyBiYWNrIG9uZVxuICAgKiBzZXQgb2YgZmFjZXQgZmlsdGVycywgdGhlcmUgY2FuIG9ubHkgYmUgb25lIGFjdGl2ZSBmYWNldCBmaWx0ZXIgbm9kZVxuICAgKiBhdCBhIHRpbWUuXG4gICAqIEBwYXJhbSB7QXJyYXk8c3RyaW5nPn0gYXZhaWxhYmxlRmllbGRJZHNcbiAgICogQHBhcmFtIHtBcnJheTxGaWx0ZXJOb2RlPn0gZmlsdGVyTm9kZXNcbiAgICovXG4gIHNldEZhY2V0RmlsdGVyTm9kZXMgKGF2YWlsYWJsZUZpZWxkSWRzID0gW10sIGZpbHRlck5vZGVzID0gW10pIHtcbiAgICB0aGlzLmF2YWlsYWJsZUZpZWxkSWRzID0gYXZhaWxhYmxlRmllbGRJZHM7XG4gICAgdGhpcy5nbG9iYWxTdG9yYWdlLnNldChTdG9yYWdlS2V5cy5GQUNFVF9GSUxURVJfTk9ERSwgZmlsdGVyTm9kZXMpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIGxvY2F0aW9uUmFkaXVzIGZpbHRlck5vZGUuIFRoZXJlIG1heSBvbmx5IGJlIG9uZSBsb2NhdGlvblJhZGl1cyBhY3RpdmVcbiAgICogYXQgYSB0aW1lLlxuICAgKiBAcGFyYW0ge0ZpbHRlck5vZGV9IGZpbHRlck5vZGVcbiAgICovXG4gIHNldExvY2F0aW9uUmFkaXVzRmlsdGVyTm9kZSAoZmlsdGVyTm9kZSkge1xuICAgIHRoaXMuZ2xvYmFsU3RvcmFnZS5zZXQoU3RvcmFnZUtleXMuTE9DQVRJT05fUkFESVVTLCBmaWx0ZXJOb2RlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmUgdGhlIHN0YXRpYyBGaWx0ZXJOb2RlIHdpdGggdGhpcyBuYW1lc3BhY2UuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXlcbiAgICovXG4gIGNsZWFyU3RhdGljRmlsdGVyTm9kZSAoa2V5KSB7XG4gICAgdGhpcy5nbG9iYWxTdG9yYWdlLmRlbGV0ZShgJHtTdG9yYWdlS2V5cy5TVEFUSUNfRklMVEVSX05PREV9LiR7a2V5fWApO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZSBhbGwgZmFjZXQgRmlsdGVyTm9kZXMuXG4gICAqL1xuICBjbGVhckZhY2V0RmlsdGVyTm9kZXMgKCkge1xuICAgIHRoaXMuZ2xvYmFsU3RvcmFnZS5kZWxldGUoU3RvcmFnZUtleXMuRkFDRVRfRklMVEVSX05PREUpO1xuICB9XG59XG4iLCIvKiogQG1vZHVsZSBDb3JlICovXG5cbmltcG9ydCBTZWFyY2hEYXRhVHJhbnNmb3JtZXIgZnJvbSAnLi9zZWFyY2gvc2VhcmNoZGF0YXRyYW5zZm9ybWVyJztcblxuaW1wb3J0IFN0b3JhZ2VLZXlzIGZyb20gJy4vc3RvcmFnZS9zdG9yYWdla2V5cyc7XG5pbXBvcnQgVmVydGljYWxSZXN1bHRzIGZyb20gJy4vbW9kZWxzL3ZlcnRpY2FscmVzdWx0cyc7XG5pbXBvcnQgVW5pdmVyc2FsUmVzdWx0cyBmcm9tICcuL21vZGVscy91bml2ZXJzYWxyZXN1bHRzJztcbmltcG9ydCBRdWVzdGlvblN1Ym1pc3Npb24gZnJvbSAnLi9tb2RlbHMvcXVlc3Rpb25zdWJtaXNzaW9uJztcbmltcG9ydCBBbmFseXRpY3NFdmVudCBmcm9tICcuL2FuYWx5dGljcy9hbmFseXRpY3NldmVudCc7XG5pbXBvcnQgRmlsdGVyUmVnaXN0cnkgZnJvbSAnLi9maWx0ZXJzL2ZpbHRlcnJlZ2lzdHJ5JztcblxuLyoqIEB0eXBlZGVmIHtpbXBvcnQoJy4vc2VydmljZXMvc2VhcmNoc2VydmljZScpLmRlZmF1bHR9IFNlYXJjaFNlcnZpY2UgKi9cbi8qKiBAdHlwZWRlZiB7aW1wb3J0KCcuL3NlcnZpY2VzL2F1dG9jb21wbGV0ZXNlcnZpY2UnKS5kZWZhdWx0fSBBdXRvQ29tcGxldGVTZXJ2aWNlICovXG4vKiogQHR5cGVkZWYge2ltcG9ydCgnLi9zZXJ2aWNlcy9xdWVzdGlvbmFuc3dlcnNlcnZpY2UnKS5kZWZhdWx0fSBRdWVzdGlvbkFuc3dlclNlcnZpY2UgKi9cblxuLyoqXG4gKiBDb3JlIGlzIHRoZSBtYWluIGFwcGxpY2F0aW9uIGNvbnRhaW5lciBmb3IgYWxsIG9mIHRoZSBuZXR3b3JrIGFuZCBzdG9yYWdlXG4gKiByZWxhdGVkIGJlaGF2aW9ycyBvZiB0aGUgYXBwbGljYXRpb24uXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvcmUge1xuICBjb25zdHJ1Y3RvciAoY29uZmlnID0ge30pIHtcbiAgICAvKipcbiAgICAgKiBBIHJlZmVyZW5jZSB0byB0aGUgY2xpZW50IEFQSSBLZXkgdXNlZCBmb3IgYWxsIHJlcXVlc3RzXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuX2FwaUtleSA9IGNvbmZpZy5hcGlLZXk7XG5cbiAgICAvKipcbiAgICAgKiBBIHJlZmVyZW5jZSB0byB0aGUgY2xpZW50IEFuc3dlcnMgS2V5IHVzZWQgZm9yIGFsbCByZXF1ZXN0c1xuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLl9leHBlcmllbmNlS2V5ID0gY29uZmlnLmV4cGVyaWVuY2VLZXk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYW5zd2VycyBjb25maWcgdmVyc2lvbiB0byB1c2UgZm9yIGFsbCByZXF1ZXN0c1xuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLl9leHBlcmllbmNlVmVyc2lvbiA9IGNvbmZpZy5leHBlcmllbmNlVmVyc2lvbjtcblxuICAgIC8qKlxuICAgICAqIEEgcmVmZXJlbmNlIHRvIHRoZSBjbGllbnQgbG9jYWxlIHVzZWQgZm9yIGFsbCByZXF1ZXN0cy4gSWYgbm90IHNwZWNpZmllZCwgZGVmYXVsdHMgdG8gXCJlblwiIChmb3JcbiAgICAgKiBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSkuXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuX2xvY2FsZSA9IGNvbmZpZy5sb2NhbGU7XG5cbiAgICAvKipcbiAgICAgKiBBIG1hcCBvZiBmaWVsZCBmb3JtYXR0ZXJzIHVzZWQgdG8gZm9ybWF0IHJlc3VsdHMsIGlmIHByZXNlbnRcbiAgICAgKiBAdHlwZSB7T2JqZWN0LjxzdHJpbmcsIGZ1bmN0aW9uPn1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuX2ZpZWxkRm9ybWF0dGVycyA9IGNvbmZpZy5maWVsZEZvcm1hdHRlcnMgfHwge307XG5cbiAgICAvKipcbiAgICAgKiBBIHJlZmVyZW5jZSB0byB0aGUgY29yZSBkYXRhIHN0b3JhZ2UgdGhhdCBwb3dlcnMgdGhlIFVJXG4gICAgICogQHR5cGUge0dsb2JhbFN0b3JhZ2V9XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLmdsb2JhbFN0b3JhZ2UgPSBjb25maWcuZ2xvYmFsU3RvcmFnZTtcblxuICAgIC8qKlxuICAgICAqIEEgcmVmZXJlbmNlIHRvIHRoZSBjb3JlIHBlcnNpc3RlbnQgc3RvcmFnZVxuICAgICAqIEB0eXBlIHtQZXJzaXN0ZW50U3RvcmFnZX1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMucGVyc2lzdGVudFN0b3JhZ2UgPSBjb25maWcucGVyc2lzdGVudFN0b3JhZ2U7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgZmlsdGVyUmVnaXN0cnkgaXMgaW4gY2hhcmdlIG9mIHNldHRpbmcsIHJlbW92aW5nLCBhbmQgcmV0cmlldmluZyBmaWx0ZXJzXG4gICAgICogYW5kIGZhY2V0IGZpbHRlcnMgZnJvbSBnbG9iYWwgc3RvcmFnZS5cbiAgICAgKiBAdHlwZSB7RmlsdGVyUmVnaXN0cnl9XG4gICAgICovXG4gICAgdGhpcy5maWx0ZXJSZWdpc3RyeSA9IG5ldyBGaWx0ZXJSZWdpc3RyeSh0aGlzLmdsb2JhbFN0b3JhZ2UpO1xuXG4gICAgLyoqXG4gICAgICogQW4gYWJzdHJhY3Rpb24gY29udGFpbmluZyB0aGUgaW50ZWdyYXRpb24gd2l0aCB0aGUgUkVTVGZ1bCBzZWFyY2ggQVBJXG4gICAgICogRm9yIGJvdGggdmVydGljYWwgYW5kIHVuaXZlcnNhbCBzZWFyY2hcbiAgICAgKiBAdHlwZSB7U2VhcmNoU2VydmljZX1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuX3NlYXJjaGVyID0gY29uZmlnLnNlYXJjaFNlcnZpY2U7XG5cbiAgICAvKipcbiAgICAgKiBBbiBhYnN0cmFjdGlvbiBjb250YWluaW5nIHRoZSBpbnRlZ3JhdGlvbiB3aXRoIHRoZSBSRVNUZnVsIGF1dG9jb21wbGV0ZSBBUElcbiAgICAgKiBGb3IgZmlsdGVyIHNlYXJjaCwgdmVydGljYWwgYXV0b2NvbXBsZXRlLCBhbmQgdW5pdmVyc2FsIGF1dG9jb21wbGV0ZVxuICAgICAqIEB0eXBlIHtBdXRvQ29tcGxldGVTZXJ2aWNlfVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5fYXV0b0NvbXBsZXRlID0gY29uZmlnLmF1dG9Db21wbGV0ZVNlcnZpY2U7XG5cbiAgICAvKipcbiAgICAgKiBBbiBhYnN0cmFjdGlvbiBmb3IgaW50ZXJhY3Rpbmcgd2l0aCB0aGUgUSZBIHJlc3QgaW50ZXJmYWNlXG4gICAgICogQHR5cGUge1F1ZXN0aW9uQW5zd2VyU2VydmljZX1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuX3F1ZXN0aW9uQW5zd2VyID0gY29uZmlnLnF1ZXN0aW9uQW5zd2VyU2VydmljZTtcblxuICAgIC8qKlxuICAgICAqIEEgbG9jYWwgcmVmZXJlbmNlIHRvIHRoZSBhbmFseXRpY3MgcmVwb3J0ZXIsIHVzZWQgdG8gcmVwb3J0IGV2ZW50cyBmb3IgdGhpcyBjb21wb25lbnRcbiAgICAgKiBAdHlwZSB7QW5hbHl0aWNzUmVwb3J0ZXJ9XG4gICAgICovXG4gICAgdGhpcy5fYW5hbHl0aWNzUmVwb3J0ZXIgPSBjb25maWcuYW5hbHl0aWNzUmVwb3J0ZXI7XG5cbiAgICAvKipcbiAgICAgKiBBIHVzZXItZ2l2ZW4gZnVuY3Rpb24gdGhhdCByZXR1cm5zIGFuIGFuYWx5dGljcyBldmVudCB0byBmaXJlIGFmdGVyIGEgdW5pdmVyc2FsIHNlYXJjaC5cbiAgICAgKiBAdHlwZSB7RnVuY3Rpb259XG4gICAgICovXG4gICAgdGhpcy5vblVuaXZlcnNhbFNlYXJjaCA9IGNvbmZpZy5vblVuaXZlcnNhbFNlYXJjaCB8fCBmdW5jdGlvbiAoKSB7fTtcblxuICAgIC8qKlxuICAgICAqIEEgdXNlci1naXZlbiBmdW5jdGlvbiB0aGF0IHJldHVybnMgYW4gYW5hbHl0aWNzIGV2ZW50IHRvIGZpcmUgYWZ0ZXIgYSB2ZXJ0aWNhbCBzZWFyY2guXG4gICAgICogQHR5cGUge0Z1bmN0aW9ufVxuICAgICAqL1xuICAgIHRoaXMub25WZXJ0aWNhbFNlYXJjaCA9IGNvbmZpZy5vblZlcnRpY2FsU2VhcmNoIHx8IGZ1bmN0aW9uICgpIHt9O1xuICB9XG5cbiAgLyoqXG4gICAqIFNlYXJjaCBpbiB0aGUgY29udGV4dCBvZiBhIHZlcnRpY2FsXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB2ZXJ0aWNhbEtleSB2ZXJ0aWNhbCBJRCBmb3IgdGhlIHNlYXJjaFxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyBhZGRpdGlvbmFsIHNldHRpbmdzIGZvciB0aGUgc2VhcmNoLlxuICAgKiBAcGFyYW0ge09iamVjdH0gcXVlcnkgVGhlIHF1ZXJ5IGRldGFpbHNcbiAgICogQHBhcmFtIHtzdHJpbmd9IHF1ZXJ5LmlucHV0IFRoZSBpbnB1dCB0byBzZWFyY2ggZm9yXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBxdWVyeS5pZCBUaGUgcXVlcnkgSUQgdG8gdXNlLiBJZiBwYWdpbmcgd2l0aGluIGEgcXVlcnksIHRoZSBzYW1lIElEIHNob3VsZCBiZSB1c2VkXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gcXVlcnkuYXBwZW5kIElmIHRydWUsIGFkZHMgdGhlIHJlc3VsdHMgb2YgdGhpcyBxdWVyeSB0byB0aGUgZW5kIG9mIHRoZSBjdXJyZW50IHJlc3VsdHMsIGRlZmF1bHRzIGZhbHNlXG4gICAqL1xuICB2ZXJ0aWNhbFNlYXJjaCAodmVydGljYWxLZXksIG9wdGlvbnMgPSB7fSwgcXVlcnkgPSB7fSkge1xuICAgIGlmICghcXVlcnkuYXBwZW5kKSB7XG4gICAgICB0aGlzLmdsb2JhbFN0b3JhZ2Uuc2V0KFN0b3JhZ2VLZXlzLlZFUlRJQ0FMX1JFU1VMVFMsIFZlcnRpY2FsUmVzdWx0cy5zZWFyY2hMb2FkaW5nKCkpO1xuICAgICAgdGhpcy5nbG9iYWxTdG9yYWdlLnNldChTdG9yYWdlS2V5cy5TUEVMTF9DSEVDSywge30pO1xuICAgICAgdGhpcy5nbG9iYWxTdG9yYWdlLnNldChTdG9yYWdlS2V5cy5MT0NBVElPTl9CSUFTLCB7fSk7XG4gICAgfVxuXG4gICAgY29uc3QgeyByZXNldFBhZ2luYXRpb24sIHVzZUZhY2V0cyB9ID0gb3B0aW9ucztcbiAgICBpZiAocmVzZXRQYWdpbmF0aW9uKSB7XG4gICAgICB0aGlzLnBlcnNpc3RlbnRTdG9yYWdlLmRlbGV0ZShTdG9yYWdlS2V5cy5TRUFSQ0hfT0ZGU0VUKTtcbiAgICAgIHRoaXMuZ2xvYmFsU3RvcmFnZS5kZWxldGUoU3RvcmFnZUtleXMuU0VBUkNIX09GRlNFVCk7XG4gICAgfVxuXG4gICAgaWYgKCF1c2VGYWNldHMpIHtcbiAgICAgIHRoaXMuZmlsdGVyUmVnaXN0cnkuc2V0RmFjZXRGaWx0ZXJOb2RlcyhbXSwgW10pO1xuICAgIH1cblxuICAgIGNvbnN0IHsgc2V0UXVlcnlQYXJhbXMgfSA9IG9wdGlvbnM7XG4gICAgY29uc3QgY29udGV4dCA9IHRoaXMuZ2xvYmFsU3RvcmFnZS5nZXRTdGF0ZShTdG9yYWdlS2V5cy5BUElfQ09OVEVYVCk7XG4gICAgY29uc3QgcmVmZXJyZXJQYWdlVXJsID0gdGhpcy5nbG9iYWxTdG9yYWdlLmdldFN0YXRlKFN0b3JhZ2VLZXlzLlJFRkVSUkVSX1BBR0VfVVJMKTtcblxuICAgIGlmIChzZXRRdWVyeVBhcmFtcykge1xuICAgICAgaWYgKGNvbnRleHQpIHtcbiAgICAgICAgdGhpcy5wZXJzaXN0ZW50U3RvcmFnZS5zZXQoU3RvcmFnZUtleXMuQVBJX0NPTlRFWFQsIGNvbnRleHQsIHRydWUpO1xuICAgICAgfVxuICAgICAgaWYgKHJlZmVycmVyUGFnZVVybCAhPT0gbnVsbCkge1xuICAgICAgICB0aGlzLnBlcnNpc3RlbnRTdG9yYWdlLnNldChTdG9yYWdlS2V5cy5SRUZFUlJFUl9QQUdFX1VSTCwgcmVmZXJyZXJQYWdlVXJsLCB0cnVlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBzZWFyY2hDb25maWcgPSB0aGlzLmdsb2JhbFN0b3JhZ2UuZ2V0U3RhdGUoU3RvcmFnZUtleXMuU0VBUkNIX0NPTkZJRykgfHwge307XG4gICAgaWYgKCFzZWFyY2hDb25maWcudmVydGljYWxLZXkpIHtcbiAgICAgIHRoaXMuZ2xvYmFsU3RvcmFnZS5zZXQoU3RvcmFnZUtleXMuU0VBUkNIX0NPTkZJRywge1xuICAgICAgICAuLi5zZWFyY2hDb25maWcsXG4gICAgICAgIHZlcnRpY2FsS2V5OiB2ZXJ0aWNhbEtleVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgY29uc3QgbG9jYXRpb25SYWRpdXNGaWx0ZXJOb2RlID0gdGhpcy5nZXRMb2NhdGlvblJhZGl1c0ZpbHRlck5vZGUoKTtcblxuICAgIHJldHVybiB0aGlzLl9zZWFyY2hlclxuICAgICAgLnZlcnRpY2FsU2VhcmNoKHZlcnRpY2FsS2V5LCB7XG4gICAgICAgIGxpbWl0OiB0aGlzLmdsb2JhbFN0b3JhZ2UuZ2V0U3RhdGUoU3RvcmFnZUtleXMuU0VBUkNIX0NPTkZJRykubGltaXQsXG4gICAgICAgIGdlb2xvY2F0aW9uOiB0aGlzLmdsb2JhbFN0b3JhZ2UuZ2V0U3RhdGUoU3RvcmFnZUtleXMuR0VPTE9DQVRJT04pLFxuICAgICAgICBpbnB1dDogdGhpcy5nbG9iYWxTdG9yYWdlLmdldFN0YXRlKFN0b3JhZ2VLZXlzLlFVRVJZKSB8fCAnJyxcbiAgICAgICAgLi4ucXVlcnksXG4gICAgICAgIGZpbHRlcjogdGhpcy5maWx0ZXJSZWdpc3RyeS5nZXRTdGF0aWNGaWx0ZXJQYXlsb2FkKCksXG4gICAgICAgIGZhY2V0RmlsdGVyOiB0aGlzLmZpbHRlclJlZ2lzdHJ5LmdldEZhY2V0RmlsdGVyUGF5bG9hZCgpLFxuICAgICAgICBvZmZzZXQ6IHRoaXMuZ2xvYmFsU3RvcmFnZS5nZXRTdGF0ZShTdG9yYWdlS2V5cy5TRUFSQ0hfT0ZGU0VUKSB8fCAwLFxuICAgICAgICBpc0R5bmFtaWNGaWx0ZXJzRW5hYmxlZDogdGhpcy5faXNEeW5hbWljRmlsdGVyc0VuYWJsZWQsXG4gICAgICAgIHNraXBTcGVsbENoZWNrOiB0aGlzLmdsb2JhbFN0b3JhZ2UuZ2V0U3RhdGUoJ3NraXBTcGVsbENoZWNrJyksXG4gICAgICAgIHF1ZXJ5VHJpZ2dlcjogdGhpcy5nbG9iYWxTdG9yYWdlLmdldFN0YXRlKCdxdWVyeVRyaWdnZXInKSxcbiAgICAgICAgc2Vzc2lvblRyYWNraW5nRW5hYmxlZDogdGhpcy5nbG9iYWxTdG9yYWdlLmdldFN0YXRlKFN0b3JhZ2VLZXlzLlNFU1NJT05TX09QVF9JTiksXG4gICAgICAgIHNvcnRCeXM6IHRoaXMuZ2xvYmFsU3RvcmFnZS5nZXRTdGF0ZShTdG9yYWdlS2V5cy5TT1JUX0JZUyksXG4gICAgICAgIGxvY2F0aW9uUmFkaXVzOiBsb2NhdGlvblJhZGl1c0ZpbHRlck5vZGUgPyBsb2NhdGlvblJhZGl1c0ZpbHRlck5vZGUuZ2V0RmlsdGVyKCkudmFsdWUgOiBudWxsLFxuICAgICAgICBjb250ZXh0OiBjb250ZXh0LFxuICAgICAgICByZWZlcnJlclBhZ2VVcmw6IHJlZmVycmVyUGFnZVVybFxuICAgICAgfSlcbiAgICAgIC50aGVuKHJlc3BvbnNlID0+IFNlYXJjaERhdGFUcmFuc2Zvcm1lci50cmFuc2Zvcm1WZXJ0aWNhbChyZXNwb25zZSwgdGhpcy5fZmllbGRGb3JtYXR0ZXJzLCB2ZXJ0aWNhbEtleSkpXG4gICAgICAudGhlbihkYXRhID0+IHtcbiAgICAgICAgdGhpcy5nbG9iYWxTdG9yYWdlLnNldChTdG9yYWdlS2V5cy5RVUVSWV9JRCwgZGF0YVtTdG9yYWdlS2V5cy5RVUVSWV9JRF0pO1xuICAgICAgICB0aGlzLmdsb2JhbFN0b3JhZ2Uuc2V0KFN0b3JhZ2VLZXlzLk5BVklHQVRJT04sIGRhdGFbU3RvcmFnZUtleXMuTkFWSUdBVElPTl0pO1xuICAgICAgICB0aGlzLmdsb2JhbFN0b3JhZ2Uuc2V0KFN0b3JhZ2VLZXlzLklOVEVOVFMsIGRhdGFbU3RvcmFnZUtleXMuSU5URU5UU10pO1xuICAgICAgICB0aGlzLmdsb2JhbFN0b3JhZ2Uuc2V0KFN0b3JhZ2VLZXlzLkFMVEVSTkFUSVZFX1ZFUlRJQ0FMUywgZGF0YVtTdG9yYWdlS2V5cy5BTFRFUk5BVElWRV9WRVJUSUNBTFNdKTtcblxuICAgICAgICBpZiAocXVlcnkuYXBwZW5kKSB7XG4gICAgICAgICAgY29uc3QgbWVyZ2VkUmVzdWx0cyA9IHRoaXMuZ2xvYmFsU3RvcmFnZS5nZXRTdGF0ZShTdG9yYWdlS2V5cy5WRVJUSUNBTF9SRVNVTFRTKVxuICAgICAgICAgICAgLmFwcGVuZChkYXRhW1N0b3JhZ2VLZXlzLlZFUlRJQ0FMX1JFU1VMVFNdKTtcbiAgICAgICAgICB0aGlzLmdsb2JhbFN0b3JhZ2Uuc2V0KFN0b3JhZ2VLZXlzLlZFUlRJQ0FMX1JFU1VMVFMsIG1lcmdlZFJlc3VsdHMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuZ2xvYmFsU3RvcmFnZS5zZXQoU3RvcmFnZUtleXMuVkVSVElDQUxfUkVTVUxUUywgZGF0YVtTdG9yYWdlS2V5cy5WRVJUSUNBTF9SRVNVTFRTXSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZGF0YVtTdG9yYWdlS2V5cy5EWU5BTUlDX0ZJTFRFUlNdKSB7XG4gICAgICAgICAgdGhpcy5nbG9iYWxTdG9yYWdlLnNldChTdG9yYWdlS2V5cy5EWU5BTUlDX0ZJTFRFUlMsIGRhdGFbU3RvcmFnZUtleXMuRFlOQU1JQ19GSUxURVJTXSk7XG4gICAgICAgICAgdGhpcy5nbG9iYWxTdG9yYWdlLnNldChTdG9yYWdlS2V5cy5SRVNVTFRTX0hFQURFUiwgZGF0YVtTdG9yYWdlS2V5cy5EWU5BTUlDX0ZJTFRFUlNdKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0YVtTdG9yYWdlS2V5cy5TUEVMTF9DSEVDS10pIHtcbiAgICAgICAgICB0aGlzLmdsb2JhbFN0b3JhZ2Uuc2V0KFN0b3JhZ2VLZXlzLlNQRUxMX0NIRUNLLCBkYXRhW1N0b3JhZ2VLZXlzLlNQRUxMX0NIRUNLXSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRhdGFbU3RvcmFnZUtleXMuTE9DQVRJT05fQklBU10pIHtcbiAgICAgICAgICB0aGlzLmdsb2JhbFN0b3JhZ2Uuc2V0KFN0b3JhZ2VLZXlzLkxPQ0FUSU9OX0JJQVMsIGRhdGFbU3RvcmFnZUtleXMuTE9DQVRJT05fQklBU10pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZ2xvYmFsU3RvcmFnZS5kZWxldGUoJ3NraXBTcGVsbENoZWNrJyk7XG4gICAgICAgIHRoaXMuZ2xvYmFsU3RvcmFnZS5kZWxldGUoJ3F1ZXJ5VHJpZ2dlcicpO1xuXG4gICAgICAgIGNvbnN0IGV4cG9zZWRQYXJhbXMgPSB7XG4gICAgICAgICAgdmVydGljYWxLZXk6IHZlcnRpY2FsS2V5LFxuICAgICAgICAgIHF1ZXJ5U3RyaW5nOiBxdWVyeS5pbnB1dCxcbiAgICAgICAgICByZXN1bHRzQ291bnQ6IHRoaXMuZ2xvYmFsU3RvcmFnZS5nZXRTdGF0ZShTdG9yYWdlS2V5cy5WRVJUSUNBTF9SRVNVTFRTKS5yZXN1bHRzQ291bnQsXG4gICAgICAgICAgcmVzdWx0c0NvbnRleHQ6IGRhdGFbU3RvcmFnZUtleXMuVkVSVElDQUxfUkVTVUxUU10ucmVzdWx0c0NvbnRleHRcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgYW5hbHl0aWNzRXZlbnQgPSB0aGlzLm9uVmVydGljYWxTZWFyY2goZXhwb3NlZFBhcmFtcyk7XG4gICAgICAgIGlmICh0eXBlb2YgYW5hbHl0aWNzRXZlbnQgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgdGhpcy5fYW5hbHl0aWNzUmVwb3J0ZXIucmVwb3J0KEFuYWx5dGljc0V2ZW50LmZyb21EYXRhKGFuYWx5dGljc0V2ZW50KSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFBhZ2Ugd2l0aGluIHRoZSByZXN1bHRzIG9mIHRoZSBsYXN0IHF1ZXJ5XG4gICAqIFRPRE86IFNob3VsZCBpZCBiZSBpbiBhbGwgc2VhcmNoZXM/IEN1cnJlbnRseSBpcyBvbmx5IGluIHNlYXJjaGVzIGRvbmUgYnkgdGhlIHBhZ2luYXRpb25cbiAgICogY29tcG9uZW50XG4gICAqIEBwYXJhbSB7c3RyaW5nfSB2ZXJ0aWNhbEtleSBUaGUgdmVydGljYWwga2V5IHRvIHVzZSBpbiB0aGUgc2VhcmNoXG4gICAqL1xuICB2ZXJ0aWNhbFBhZ2UgKHZlcnRpY2FsS2V5KSB7XG4gICAgdGhpcy52ZXJ0aWNhbFNlYXJjaCh2ZXJ0aWNhbEtleSwgeyB1c2VGYWNldHM6IHRydWUsIHNldFF1ZXJ5UGFyYW1zOiB0cnVlIH0sIHtcbiAgICAgIGlkOiB0aGlzLmdsb2JhbFN0b3JhZ2UuZ2V0U3RhdGUoU3RvcmFnZUtleXMuUVVFUllfSUQpXG4gICAgfSk7XG4gIH1cblxuICBzZWFyY2ggKHF1ZXJ5U3RyaW5nLCB1cmxzLCBvcHRpb25zID0ge30pIHtcbiAgICBjb25zdCB7IHNldFF1ZXJ5UGFyYW1zIH0gPSBvcHRpb25zO1xuICAgIGNvbnN0IGNvbnRleHQgPSB0aGlzLmdsb2JhbFN0b3JhZ2UuZ2V0U3RhdGUoU3RvcmFnZUtleXMuQVBJX0NPTlRFWFQpO1xuICAgIGNvbnN0IHJlZmVycmVyUGFnZVVybCA9IHRoaXMuZ2xvYmFsU3RvcmFnZS5nZXRTdGF0ZShTdG9yYWdlS2V5cy5SRUZFUlJFUl9QQUdFX1VSTCk7XG5cbiAgICBpZiAoc2V0UXVlcnlQYXJhbXMpIHtcbiAgICAgIGlmIChjb250ZXh0KSB7XG4gICAgICAgIHRoaXMucGVyc2lzdGVudFN0b3JhZ2Uuc2V0KFN0b3JhZ2VLZXlzLkFQSV9DT05URVhULCBjb250ZXh0LCB0cnVlKTtcbiAgICAgIH1cbiAgICAgIGlmIChyZWZlcnJlclBhZ2VVcmwgIT09IG51bGwpIHtcbiAgICAgICAgdGhpcy5wZXJzaXN0ZW50U3RvcmFnZS5zZXQoU3RvcmFnZUtleXMuUkVGRVJSRVJfUEFHRV9VUkwsIHJlZmVycmVyUGFnZVVybCwgdHJ1ZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5nbG9iYWxTdG9yYWdlLnNldChTdG9yYWdlS2V5cy5ESVJFQ1RfQU5TV0VSLCB7fSk7XG4gICAgdGhpcy5nbG9iYWxTdG9yYWdlLnNldChTdG9yYWdlS2V5cy5VTklWRVJTQUxfUkVTVUxUUywgVW5pdmVyc2FsUmVzdWx0cy5zZWFyY2hMb2FkaW5nKCkpO1xuICAgIHRoaXMuZ2xvYmFsU3RvcmFnZS5zZXQoU3RvcmFnZUtleXMuUVVFU1RJT05fU1VCTUlTU0lPTiwge30pO1xuICAgIHRoaXMuZ2xvYmFsU3RvcmFnZS5zZXQoU3RvcmFnZUtleXMuU1BFTExfQ0hFQ0ssIHt9KTtcbiAgICB0aGlzLmdsb2JhbFN0b3JhZ2Uuc2V0KFN0b3JhZ2VLZXlzLkxPQ0FUSU9OX0JJQVMsIHt9KTtcblxuICAgIHJldHVybiB0aGlzLl9zZWFyY2hlclxuICAgICAgLnVuaXZlcnNhbFNlYXJjaChxdWVyeVN0cmluZywge1xuICAgICAgICBnZW9sb2NhdGlvbjogdGhpcy5nbG9iYWxTdG9yYWdlLmdldFN0YXRlKFN0b3JhZ2VLZXlzLkdFT0xPQ0FUSU9OKSxcbiAgICAgICAgc2tpcFNwZWxsQ2hlY2s6IHRoaXMuZ2xvYmFsU3RvcmFnZS5nZXRTdGF0ZSgnc2tpcFNwZWxsQ2hlY2snKSxcbiAgICAgICAgcXVlcnlUcmlnZ2VyOiB0aGlzLmdsb2JhbFN0b3JhZ2UuZ2V0U3RhdGUoJ3F1ZXJ5VHJpZ2dlcicpLFxuICAgICAgICBzZXNzaW9uVHJhY2tpbmdFbmFibGVkOiB0aGlzLmdsb2JhbFN0b3JhZ2UuZ2V0U3RhdGUoU3RvcmFnZUtleXMuU0VTU0lPTlNfT1BUX0lOKSxcbiAgICAgICAgY29udGV4dDogY29udGV4dCxcbiAgICAgICAgcmVmZXJyZXJQYWdlVXJsOiByZWZlcnJlclBhZ2VVcmxcbiAgICAgIH0pXG4gICAgICAudGhlbihyZXNwb25zZSA9PiBTZWFyY2hEYXRhVHJhbnNmb3JtZXIudHJhbnNmb3JtKHJlc3BvbnNlLCB1cmxzLCB0aGlzLl9maWVsZEZvcm1hdHRlcnMpKVxuICAgICAgLnRoZW4oZGF0YSA9PiB7XG4gICAgICAgIHRoaXMuZ2xvYmFsU3RvcmFnZS5zZXQoU3RvcmFnZUtleXMuUVVFUllfSUQsIGRhdGFbU3RvcmFnZUtleXMuUVVFUllfSURdKTtcbiAgICAgICAgdGhpcy5nbG9iYWxTdG9yYWdlLnNldChTdG9yYWdlS2V5cy5OQVZJR0FUSU9OLCBkYXRhW1N0b3JhZ2VLZXlzLk5BVklHQVRJT05dKTtcbiAgICAgICAgdGhpcy5nbG9iYWxTdG9yYWdlLnNldChTdG9yYWdlS2V5cy5ESVJFQ1RfQU5TV0VSLCBkYXRhW1N0b3JhZ2VLZXlzLkRJUkVDVF9BTlNXRVJdKTtcbiAgICAgICAgdGhpcy5nbG9iYWxTdG9yYWdlLnNldChTdG9yYWdlS2V5cy5VTklWRVJTQUxfUkVTVUxUUywgZGF0YVtTdG9yYWdlS2V5cy5VTklWRVJTQUxfUkVTVUxUU10sIHVybHMpO1xuICAgICAgICB0aGlzLmdsb2JhbFN0b3JhZ2Uuc2V0KFN0b3JhZ2VLZXlzLklOVEVOVFMsIGRhdGFbU3RvcmFnZUtleXMuSU5URU5UU10pO1xuICAgICAgICB0aGlzLmdsb2JhbFN0b3JhZ2Uuc2V0KFN0b3JhZ2VLZXlzLlNQRUxMX0NIRUNLLCBkYXRhW1N0b3JhZ2VLZXlzLlNQRUxMX0NIRUNLXSk7XG4gICAgICAgIHRoaXMuZ2xvYmFsU3RvcmFnZS5zZXQoU3RvcmFnZUtleXMuTE9DQVRJT05fQklBUywgZGF0YVtTdG9yYWdlS2V5cy5MT0NBVElPTl9CSUFTXSk7XG4gICAgICAgIHRoaXMuZ2xvYmFsU3RvcmFnZS5kZWxldGUoJ3NraXBTcGVsbENoZWNrJyk7XG4gICAgICAgIHRoaXMuZ2xvYmFsU3RvcmFnZS5kZWxldGUoJ3F1ZXJ5VHJpZ2dlcicpO1xuXG4gICAgICAgIGNvbnN0IGV4cG9zZWRQYXJhbXMgPSB7XG4gICAgICAgICAgcXVlcnlTdHJpbmc6IHF1ZXJ5U3RyaW5nLFxuICAgICAgICAgIHNlY3Rpb25zQ291bnQ6IGRhdGFbU3RvcmFnZUtleXMuVU5JVkVSU0FMX1JFU1VMVFNdLnNlY3Rpb25zLmxlbmd0aFxuICAgICAgICB9O1xuICAgICAgICBjb25zdCBhbmFseXRpY3NFdmVudCA9IHRoaXMub25Vbml2ZXJzYWxTZWFyY2goZXhwb3NlZFBhcmFtcyk7XG4gICAgICAgIGlmICh0eXBlb2YgYW5hbHl0aWNzRXZlbnQgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgdGhpcy5fYW5hbHl0aWNzUmVwb3J0ZXIucmVwb3J0KEFuYWx5dGljc0V2ZW50LmZyb21EYXRhKGFuYWx5dGljc0V2ZW50KSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEdpdmVuIGFuIGlucHV0LCBxdWVyeSBmb3IgYSBsaXN0IG9mIHNpbWlsYXIgcmVzdWx0cyBhbmQgc2V0IGludG8gc3RvcmFnZVxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gaW5wdXQgICAgIHRoZSBzdHJpbmcgdG8gYXV0b2NvbXBsZXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lc3BhY2UgdGhlIG5hbWVzcGFjZSB0byB1c2UgZm9yIHRoZSBzdG9yYWdlIGtleVxuICAgKi9cbiAgYXV0b0NvbXBsZXRlVW5pdmVyc2FsIChpbnB1dCwgbmFtZXNwYWNlKSB7XG4gICAgcmV0dXJuIHRoaXMuX2F1dG9Db21wbGV0ZVxuICAgICAgLnF1ZXJ5VW5pdmVyc2FsKGlucHV0KVxuICAgICAgLnRoZW4oZGF0YSA9PiB7XG4gICAgICAgIHRoaXMuZ2xvYmFsU3RvcmFnZS5zZXQoYCR7U3RvcmFnZUtleXMuQVVUT0NPTVBMRVRFfS4ke25hbWVzcGFjZX1gLCBkYXRhKTtcbiAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHaXZlbiBhbiBpbnB1dCwgcXVlcnkgZm9yIGEgbGlzdCBvZiBzaW1pbGFyIHJlc3VsdHMgaW4gdGhlIHByb3ZpZGVkIHZlcnRpY2FsXG4gICAqIGFuZCBzZXQgaW50byBzdG9yYWdlXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpbnB1dCAgICAgICB0aGUgc3RyaW5nIHRvIGF1dG9jb21wbGV0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZXNwYWNlIHRoZSBuYW1lc3BhY2UgdG8gdXNlIGZvciB0aGUgc3RvcmFnZSBrZXlcbiAgICogQHBhcmFtIHtzdHJpbmd9IHZlcnRpY2FsS2V5IHRoZSB2ZXJ0aWNhbCBrZXkgZm9yIHRoZSBleHBlcmllbmNlXG4gICAqL1xuICBhdXRvQ29tcGxldGVWZXJ0aWNhbCAoaW5wdXQsIG5hbWVzcGFjZSwgdmVydGljYWxLZXkpIHtcbiAgICByZXR1cm4gdGhpcy5fYXV0b0NvbXBsZXRlXG4gICAgICAucXVlcnlWZXJ0aWNhbChpbnB1dCwgdmVydGljYWxLZXkpXG4gICAgICAudGhlbihkYXRhID0+IHtcbiAgICAgICAgdGhpcy5nbG9iYWxTdG9yYWdlLnNldChgJHtTdG9yYWdlS2V5cy5BVVRPQ09NUExFVEV9LiR7bmFtZXNwYWNlfWAsIGRhdGEpO1xuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEdpdmVuIGFuIGlucHV0LCBwcm92aWRlIGEgbGlzdCBvZiBzdWl0YWJsZSBmaWx0ZXJzIGZvciBhdXRvY29tcGxldGlvblxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gaW5wdXQgIHRoZSBzdHJpbmcgdG8gc2VhcmNoIGZvciBmaWx0ZXJzIHdpdGhcbiAgICogQHBhcmFtIHtvYmplY3R9IGNvbmZpZyAgdGhlIGNvbmZpZyB0byBzZXJhY2ggZm9yIGZpbHRlcnMgd2l0aFxuICAgKiBAcGFyYW0ge3N0cmluZ30gY29uZmlnLm5hbWVzcGFjZSAgdGhlIG5hbWVzcGFjZSB0byB1c2UgZm9yIHRoZSBzdG9yYWdlIGtleVxuICAgKiBAcGFyYW0ge3N0cmluZ30gY29uZmlnLnZlcnRpY2FsS2V5IHRoZSB2ZXJ0aWNhbCBrZXkgZm9yIHRoZSBjb25maWdcbiAgICogQHBhcmFtIHtvYmplY3R9IGNvbmZpZy5zZWFyY2hQYXJhbWV0ZXJzICB0aGUgc2VhcmNoIHBhcmFtZXRlcnMgZm9yIHRoZSBjb25maWcgdjJcbiAgICovXG4gIGF1dG9Db21wbGV0ZUZpbHRlciAoaW5wdXQsIGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLl9hdXRvQ29tcGxldGVcbiAgICAgIC5xdWVyeUZpbHRlcihpbnB1dCwgY29uZmlnKVxuICAgICAgLnRoZW4oZGF0YSA9PiB7XG4gICAgICAgIHRoaXMuZ2xvYmFsU3RvcmFnZS5zZXQoYCR7U3RvcmFnZUtleXMuQVVUT0NPTVBMRVRFfS4ke2NvbmZpZy5uYW1lc3BhY2V9YCwgZGF0YSk7XG4gICAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTdWJtaXRzIGEgcXVlc3Rpb24gdG8gdGhlIHNlcnZlciBhbmQgdXBkYXRlcyB0aGUgdW5kZXJseWluZyBxdWVzdGlvbiBtb2RlbFxuICAgKiBAcGFyYW0ge29iamVjdH0gcXVlc3Rpb24gVGhlIHF1ZXN0aW9uIG9iamVjdCB0byBzdWJtaXQgdG8gdGhlIHNlcnZlclxuICAgKiBAcGFyYW0ge251bWJlcn0gcXVlc3Rpb24uZW50aXR5SWQgVGhlIGVudGl0eSB0byBhc3NvY2lhdGUgd2l0aCB0aGUgcXVlc3Rpb24gKHJlcXVpcmVkKVxuICAgKiBAcGFyYW0ge3N0cmluZ30gcXVlc3Rpb24ubGFudWFnZSBUaGUgbGFuZ3VhZ2Ugb2YgdGhlIHF1ZXN0aW9uXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBxdWVzdGlvbi5zaXRlIFRoZSBcInB1Ymxpc2hlclwiIG9mIHRoZSAoZS5nLiAnRklSU1RfUEFSVFknKVxuICAgKiBAcGFyYW0ge3N0cmluZ30gcXVlc3Rpb24ubmFtZSBUaGUgbmFtZSBvZiB0aGUgYXV0aG9yXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBxdWVzdGlvbi5lbWFpbCBUaGUgZW1haWwgYWRkcmVzcyBvZiB0aGUgYXV0aG9yXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBxdWVzdGlvbi5xdWVzdGlvblRleHQgVGhlIHF1ZXN0aW9uXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBxdWVzdGlvbi5xdWVzdGlvbkRlc2NyaXB0aW9uIEFkZGl0aW9uYWwgaW5mb3JtYXRpb24gYWJvdXQgdGhlIHF1ZXN0aW9uXG4gICAqL1xuICBzdWJtaXRRdWVzdGlvbiAocXVlc3Rpb24pIHtcbiAgICByZXR1cm4gdGhpcy5fcXVlc3Rpb25BbnN3ZXJcbiAgICAgIC5zdWJtaXRRdWVzdGlvbihxdWVzdGlvbilcbiAgICAgIC50aGVuKGRhdGEgPT4ge1xuICAgICAgICB0aGlzLmdsb2JhbFN0b3JhZ2Uuc2V0KFxuICAgICAgICAgIFN0b3JhZ2VLZXlzLlFVRVNUSU9OX1NVQk1JU1NJT04sXG4gICAgICAgICAgUXVlc3Rpb25TdWJtaXNzaW9uLnN1Ym1pdHRlZCgpKTtcbiAgICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFN0b3JlcyB0aGUgZ2l2ZW4gc29ydEJ5IGludG8gc3RvcmFnZSwgdG8gYmUgdXNlZCBmb3IgdGhlIG5leHQgc2VhcmNoXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBzb3J0QnlPcHRpb25zXG4gICAqL1xuICBzZXRTb3J0QnlzICguLi5zb3J0QnlPcHRpb25zKSB7XG4gICAgY29uc3Qgc29ydEJ5cyA9IHNvcnRCeU9wdGlvbnMubWFwKG9wdGlvbiA9PiB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBvcHRpb24udHlwZSxcbiAgICAgICAgZmllbGQ6IG9wdGlvbi5maWVsZCxcbiAgICAgICAgZGlyZWN0aW9uOiBvcHRpb24uZGlyZWN0aW9uXG4gICAgICB9O1xuICAgIH0pO1xuICAgIHRoaXMuZ2xvYmFsU3RvcmFnZS5zZXQoU3RvcmFnZUtleXMuU09SVF9CWVMsIEpTT04uc3RyaW5naWZ5KHNvcnRCeXMpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDbGVhcnMgdGhlIHNvcnRCeXMga2V5IGluIGdsb2JhbCBzdG9yYWdlLlxuICAgKi9cbiAgY2xlYXJTb3J0QnlzICgpIHtcbiAgICB0aGlzLmdsb2JhbFN0b3JhZ2UuZGVsZXRlKFN0b3JhZ2VLZXlzLlNPUlRfQllTKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTdG9yZXMgdGhlIGdpdmVuIHF1ZXJ5IGludG8gc3RvcmFnZSwgdG8gYmUgdXNlZCBmb3IgdGhlIG5leHQgc2VhcmNoXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBxdWVyeSB0aGUgcXVlcnkgdG8gc3RvcmVcbiAgICovXG4gIHNldFF1ZXJ5IChxdWVyeSkge1xuICAgIHRoaXMuZ2xvYmFsU3RvcmFnZS5zZXQoU3RvcmFnZUtleXMuUVVFUlksIHF1ZXJ5KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTdG9yZXMgdGhlIHByb3ZpZGVkIHF1ZXJ5IElELCB0byBiZSB1c2VkIGluIGFuYWx5dGljc1xuICAgKiBAcGFyYW0ge3N0cmluZ30gcXVlcnlJZCBUaGUgcXVlcnkgaWQgdG8gc3RvcmVcbiAgICovXG4gIHNldFF1ZXJ5SWQgKHF1ZXJ5SWQpIHtcbiAgICB0aGlzLmdsb2JhbFN0b3JhZ2Uuc2V0KFN0b3JhZ2VLZXlzLlFVRVJZX0lELCBxdWVyeUlkKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgYWxsIG9mIHRoZSB7QGxpbmsgRmlsdGVyTm9kZX1zIGZvciBzdGF0aWMgZmlsdGVycy5cbiAgICogQHJldHVybnMge0FycmF5PEZpbHRlck5vZGU+fVxuICAgKi9cbiAgZ2V0U3RhdGljRmlsdGVyTm9kZXMgKCkge1xuICAgIHJldHVybiB0aGlzLmZpbHRlclJlZ2lzdHJ5LmdldFN0YXRpY0ZpbHRlck5vZGVzKCk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IGFsbCBvZiB0aGUgYWN0aXZlIHtAbGluayBGaWx0ZXJOb2RlfXMgZm9yIGZhY2V0cy5cbiAgICogQHJldHVybnMge0FycmF5PEZpbHRlck5vZGU+fVxuICAgKi9cbiAgZ2V0RmFjZXRGaWx0ZXJOb2RlcyAoKSB7XG4gICAgcmV0dXJuIHRoaXMuZmlsdGVyUmVnaXN0cnkuZ2V0RmFjZXRGaWx0ZXJOb2RlcygpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUge0BsaW5rIEZpbHRlck5vZGV9IGFmZmVjdGluZyB0aGUgbG9jYXRpb25SYWRpdXMgdXJsIHBhcmFtZXRlci5cbiAgICogQHJldHVybnMge0ZpbHRlck5vZGV9XG4gICAqL1xuICBnZXRMb2NhdGlvblJhZGl1c0ZpbHRlck5vZGUgKCkge1xuICAgIHJldHVybiB0aGlzLmZpbHRlclJlZ2lzdHJ5LmdldEZpbHRlck5vZGVCeUtleShTdG9yYWdlS2V5cy5MT0NBVElPTl9SQURJVVMpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIGZpbHRlciBub2RlcyB1c2VkIGZvciB0aGUgY3VycmVudCBmYWNldCBmaWx0ZXJzLlxuICAgKlxuICAgKiBCZWNhdXNlIHRoZSBzZWFyY2ggcmVzcG9uc2Ugb25seSBzZW5kcyBiYWNrIG9uZVxuICAgKiBzZXQgb2YgZmFjZXQgZmlsdGVycywgdGhlcmUgY2FuIG9ubHkgYmUgb25lIGFjdGl2ZSBmYWNldCBmaWx0ZXIgbm9kZVxuICAgKiBhdCBhIHRpbWUuXG4gICAqIEBwYXJhbSB7QXJyYXk8c3RyaW5nPn0gYXZhaWxhYmxlRmllbGRJZHNcbiAgICogQHBhcmFtIHtBcnJheTxGaWx0ZXJOb2RlPn0gZmlsdGVyTm9kZXNcbiAgICovXG4gIHNldEZhY2V0RmlsdGVyTm9kZXMgKGF2YWlsYWJsZUZpZWxkaWRzID0gW10sIGZpbHRlck5vZGVzID0gW10pIHtcbiAgICB0aGlzLmZpbHRlclJlZ2lzdHJ5LnNldEZhY2V0RmlsdGVyTm9kZXMoYXZhaWxhYmxlRmllbGRpZHMsIGZpbHRlck5vZGVzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBzcGVjaWZpZWQge0BsaW5rIEZpbHRlck5vZGV9IHVuZGVyIHRoZSBnaXZlbiBrZXkuXG4gICAqIFdpbGwgcmVwbGFjZSBhIHByZWV4aXN0aW5nIG5vZGUgaWYgdGhlcmUgaXMgb25lLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZXNwYWNlXG4gICAqIEBwYXJhbSB7RmlsdGVyTm9kZX0gZmlsdGVyTm9kZVxuICAgKi9cbiAgc2V0U3RhdGljRmlsdGVyTm9kZXMgKG5hbWVzcGFjZSwgZmlsdGVyTm9kZSkge1xuICAgIHRoaXMuZmlsdGVyUmVnaXN0cnkuc2V0U3RhdGljRmlsdGVyTm9kZXMobmFtZXNwYWNlLCBmaWx0ZXJOb2RlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBsb2NhdGlvblJhZGl1cyBmaWx0ZXJOb2RlLlxuICAgKiBAcGFyYW0ge0ZpbHRlck5vZGV9IGZpbHRlck5vZGVcbiAgICovXG4gIHNldExvY2F0aW9uUmFkaXVzRmlsdGVyTm9kZSAoZmlsdGVyTm9kZSkge1xuICAgIHRoaXMuZmlsdGVyUmVnaXN0cnkuc2V0TG9jYXRpb25SYWRpdXNGaWx0ZXJOb2RlKGZpbHRlck5vZGUpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZSB0aGUgc3RhdGljIEZpbHRlck5vZGUgd2l0aCB0aGlzIG5hbWVzcGFjZS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWVzcGFjZVxuICAgKi9cbiAgY2xlYXJTdGF0aWNGaWx0ZXJOb2RlIChuYW1lc3BhY2UpIHtcbiAgICB0aGlzLmZpbHRlclJlZ2lzdHJ5LmNsZWFyU3RhdGljRmlsdGVyTm9kZShuYW1lc3BhY2UpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZSBhbGwgZmFjZXQgRmlsdGVyTm9kZXMuXG4gICAqL1xuICBjbGVhckZhY2V0RmlsdGVyTm9kZXMgKCkge1xuICAgIHRoaXMuZmlsdGVyUmVnaXN0cnkuY2xlYXJGYWNldEZpbHRlck5vZGVzKCk7XG4gIH1cblxuICAvKipcbiAgICogQ2xlYXJzIHRoZSBsb2NhdGlvblJhZGl1cyBmaWx0ZXJOb2RlLlxuICAgKi9cbiAgY2xlYXJMb2NhdGlvblJhZGl1c0ZpbHRlck5vZGUgKCkge1xuICAgIHRoaXMuZmlsdGVyUmVnaXN0cnkuY2xlYXJMb2NhdGlvblJhZGl1c0ZpbHRlck5vZGUoKTtcbiAgfVxuXG4gIGVuYWJsZUR5bmFtaWNGaWx0ZXJzICgpIHtcbiAgICB0aGlzLl9pc0R5bmFtaWNGaWx0ZXJzRW5hYmxlZCA9IHRydWU7XG4gIH1cblxuICBvbiAoZXZ0LCBtb2R1bGVJZCwgY2IpIHtcbiAgICByZXR1cm4gdGhpcy5nbG9iYWxTdG9yYWdlLm9uKGV2dCwgbW9kdWxlSWQsIGNiKTtcbiAgfVxufVxuIiwiLyohXG4gKiBjc3MtdmFycy1wb255ZmlsbFxuICogdjIuMy4xXG4gKiBodHRwczovL2poaWxkZW5iaWRkbGUuZ2l0aHViLmlvL2Nzcy12YXJzLXBvbnlmaWxsL1xuICogKGMpIDIwMTgtMjAyMCBKb2huIEhpbGRlbmJpZGRsZSA8aHR0cDovL2hpbGRlbmJpZGRsZS5jb20+XG4gKiBNSVQgbGljZW5zZVxuICovXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgICBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24odGFyZ2V0KSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICAgICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgfTtcbiAgICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikge1xuICAgIHJldHVybiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5KGFycikgfHwgX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFycikgfHwgX25vbkl0ZXJhYmxlU3ByZWFkKCk7XG59XG5cbmZ1bmN0aW9uIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkoYXJyKTtcbn1cblxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheShpdGVyKSB7XG4gICAgaWYgKHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgJiYgU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChpdGVyKSkgcmV0dXJuIEFycmF5LmZyb20oaXRlcik7XG59XG5cbmZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHtcbiAgICBpZiAoIW8pIHJldHVybjtcbiAgICBpZiAodHlwZW9mIG8gPT09IFwic3RyaW5nXCIpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pO1xuICAgIHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTtcbiAgICBpZiAobiA9PT0gXCJPYmplY3RcIiAmJiBvLmNvbnN0cnVjdG9yKSBuID0gby5jb25zdHJ1Y3Rvci5uYW1lO1xuICAgIGlmIChuID09PSBcIk1hcFwiIHx8IG4gPT09IFwiU2V0XCIpIHJldHVybiBBcnJheS5mcm9tKG8pO1xuICAgIGlmIChuID09PSBcIkFyZ3VtZW50c1wiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTtcbn1cblxuZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHtcbiAgICBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDtcbiAgICBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShsZW4pOyBpIDwgbGVuOyBpKyspIGFycjJbaV0gPSBhcnJbaV07XG4gICAgcmV0dXJuIGFycjI7XG59XG5cbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVNwcmVhZCgpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIHNwcmVhZCBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTtcbn1cblxuLyohXG4gKiBnZXQtY3NzLWRhdGFcbiAqIHYxLjguMFxuICogaHR0cHM6Ly9naXRodWIuY29tL2poaWxkZW5iaWRkbGUvZ2V0LWNzcy1kYXRhXG4gKiAoYykgMjAxOC0yMDIwIEpvaG4gSGlsZGVuYmlkZGxlIDxodHRwOi8vaGlsZGVuYmlkZGxlLmNvbT5cbiAqIE1JVCBsaWNlbnNlXG4gKi8gZnVuY3Rpb24gZ2V0VXJscyh1cmxzKSB7XG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICAgIHZhciBzZXR0aW5ncyA9IHtcbiAgICAgICAgbWltZVR5cGU6IG9wdGlvbnMubWltZVR5cGUgfHwgbnVsbCxcbiAgICAgICAgb25CZWZvcmVTZW5kOiBvcHRpb25zLm9uQmVmb3JlU2VuZCB8fCBGdW5jdGlvbi5wcm90b3R5cGUsXG4gICAgICAgIG9uU3VjY2Vzczogb3B0aW9ucy5vblN1Y2Nlc3MgfHwgRnVuY3Rpb24ucHJvdG90eXBlLFxuICAgICAgICBvbkVycm9yOiBvcHRpb25zLm9uRXJyb3IgfHwgRnVuY3Rpb24ucHJvdG90eXBlLFxuICAgICAgICBvbkNvbXBsZXRlOiBvcHRpb25zLm9uQ29tcGxldGUgfHwgRnVuY3Rpb24ucHJvdG90eXBlXG4gICAgfTtcbiAgICB2YXIgdXJsQXJyYXkgPSBBcnJheS5pc0FycmF5KHVybHMpID8gdXJscyA6IFsgdXJscyBdO1xuICAgIHZhciB1cmxRdWV1ZSA9IEFycmF5LmFwcGx5KG51bGwsIEFycmF5KHVybEFycmF5Lmxlbmd0aCkpLm1hcCgoZnVuY3Rpb24oeCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9KSk7XG4gICAgZnVuY3Rpb24gaXNWYWxpZENzcygpIHtcbiAgICAgICAgdmFyIGNzc1RleHQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IFwiXCI7XG4gICAgICAgIHZhciBpc0hUTUwgPSBjc3NUZXh0LnRyaW0oKS5jaGFyQXQoMCkgPT09IFwiPFwiO1xuICAgICAgICByZXR1cm4gIWlzSFRNTDtcbiAgICB9XG4gICAgZnVuY3Rpb24gb25FcnJvcih4aHIsIHVybEluZGV4KSB7XG4gICAgICAgIHNldHRpbmdzLm9uRXJyb3IoeGhyLCB1cmxBcnJheVt1cmxJbmRleF0sIHVybEluZGV4KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gb25TdWNjZXNzKHJlc3BvbnNlVGV4dCwgdXJsSW5kZXgpIHtcbiAgICAgICAgdmFyIHJldHVyblZhbCA9IHNldHRpbmdzLm9uU3VjY2VzcyhyZXNwb25zZVRleHQsIHVybEFycmF5W3VybEluZGV4XSwgdXJsSW5kZXgpO1xuICAgICAgICByZXNwb25zZVRleHQgPSByZXR1cm5WYWwgPT09IGZhbHNlID8gXCJcIiA6IHJldHVyblZhbCB8fCByZXNwb25zZVRleHQ7XG4gICAgICAgIHVybFF1ZXVlW3VybEluZGV4XSA9IHJlc3BvbnNlVGV4dDtcbiAgICAgICAgaWYgKHVybFF1ZXVlLmluZGV4T2YobnVsbCkgPT09IC0xKSB7XG4gICAgICAgICAgICBzZXR0aW5ncy5vbkNvbXBsZXRlKHVybFF1ZXVlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB2YXIgcGFyc2VyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImFcIik7XG4gICAgdXJsQXJyYXkuZm9yRWFjaCgoZnVuY3Rpb24odXJsLCBpKSB7XG4gICAgICAgIHBhcnNlci5zZXRBdHRyaWJ1dGUoXCJocmVmXCIsIHVybCk7XG4gICAgICAgIHBhcnNlci5ocmVmID0gU3RyaW5nKHBhcnNlci5ocmVmKTtcbiAgICAgICAgdmFyIGlzSUVsdGU5ID0gQm9vbGVhbihkb2N1bWVudC5hbGwgJiYgIXdpbmRvdy5hdG9iKTtcbiAgICAgICAgdmFyIGlzSUVsdGU5Q09SUyA9IGlzSUVsdGU5ICYmIHBhcnNlci5ob3N0LnNwbGl0KFwiOlwiKVswXSAhPT0gbG9jYXRpb24uaG9zdC5zcGxpdChcIjpcIilbMF07XG4gICAgICAgIGlmIChpc0lFbHRlOUNPUlMpIHtcbiAgICAgICAgICAgIHZhciBpc1NhbWVQcm90b2NvbCA9IHBhcnNlci5wcm90b2NvbCA9PT0gbG9jYXRpb24ucHJvdG9jb2w7XG4gICAgICAgICAgICBpZiAoaXNTYW1lUHJvdG9jb2wpIHtcbiAgICAgICAgICAgICAgICB2YXIgeGRyID0gbmV3IFhEb21haW5SZXF1ZXN0O1xuICAgICAgICAgICAgICAgIHhkci5vcGVuKFwiR0VUXCIsIHVybCk7XG4gICAgICAgICAgICAgICAgeGRyLnRpbWVvdXQgPSAwO1xuICAgICAgICAgICAgICAgIHhkci5vbnByb2dyZXNzID0gRnVuY3Rpb24ucHJvdG90eXBlO1xuICAgICAgICAgICAgICAgIHhkci5vbnRpbWVvdXQgPSBGdW5jdGlvbi5wcm90b3R5cGU7XG4gICAgICAgICAgICAgICAgeGRyLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNWYWxpZENzcyh4ZHIucmVzcG9uc2VUZXh0KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgb25TdWNjZXNzKHhkci5yZXNwb25zZVRleHQsIGkpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgb25FcnJvcih4ZHIsIGkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB4ZHIub25lcnJvciA9IGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgICAgICAgICBvbkVycm9yKHhkciwgaSk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgeGRyLnNlbmQoKTtcbiAgICAgICAgICAgICAgICB9KSwgMCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihcIkludGVybmV0IEV4cGxvcmVyIDkgQ3Jvc3MtT3JpZ2luIChDT1JTKSByZXF1ZXN0cyBtdXN0IHVzZSB0aGUgc2FtZSBwcm90b2NvbCAoXCIuY29uY2F0KHVybCwgXCIpXCIpKTtcbiAgICAgICAgICAgICAgICBvbkVycm9yKG51bGwsIGkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdDtcbiAgICAgICAgICAgIHhoci5vcGVuKFwiR0VUXCIsIHVybCk7XG4gICAgICAgICAgICBpZiAoc2V0dGluZ3MubWltZVR5cGUgJiYgeGhyLm92ZXJyaWRlTWltZVR5cGUpIHtcbiAgICAgICAgICAgICAgICB4aHIub3ZlcnJpZGVNaW1lVHlwZShzZXR0aW5ncy5taW1lVHlwZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzZXR0aW5ncy5vbkJlZm9yZVNlbmQoeGhyLCB1cmwsIGkpO1xuICAgICAgICAgICAgeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGlmICh4aHIucmVhZHlTdGF0ZSA9PT0gNCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoeGhyLnN0YXR1cyA9PT0gMjAwICYmIGlzVmFsaWRDc3MoeGhyLnJlc3BvbnNlVGV4dCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uU3VjY2Vzcyh4aHIucmVzcG9uc2VUZXh0LCBpKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uRXJyb3IoeGhyLCBpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB4aHIuc2VuZCgpO1xuICAgICAgICB9XG4gICAgfSkpO1xufVxuXG4vKipcbiAqIEdldHMgQ1NTIGRhdGEgZnJvbSA8c3R5bGU+IGFuZCA8bGluaz4gbm9kZXMgKGluY2x1ZGluZyBAaW1wb3J0cyksIHRoZW5cbiAqIHJldHVybnMgZGF0YSBpbiBvcmRlciBwcm9jZXNzZWQgYnkgRE9NLiBBbGxvd3Mgc3BlY2lmeWluZyBub2RlcyB0b1xuICogaW5jbHVkZS9leGNsdWRlIGFuZCBmaWx0ZXJpbmcgQ1NTIGRhdGEgdXNpbmcgUmVnRXguXG4gKlxuICogQHByZXNlcnZlXG4gKiBAcGFyYW0ge29iamVjdH0gICBbb3B0aW9uc10gVGhlIG9wdGlvbnMgb2JqZWN0XG4gKiBAcGFyYW0ge29iamVjdH0gICBbb3B0aW9ucy5yb290RWxlbWVudD1kb2N1bWVudF0gUm9vdCBlbGVtZW50IHRvIHRyYXZlcnNlIGZvclxuICogICAgICAgICAgICAgICAgICAgPGxpbms+IGFuZCA8c3R5bGU+IG5vZGVzLlxuICogQHBhcmFtIHtzdHJpbmd9ICAgW29wdGlvbnMuaW5jbHVkZV0gQ1NTIHNlbGVjdG9yIG1hdGNoaW5nIDxsaW5rPiBhbmQgPHN0eWxlPlxuICogICAgICAgICAgICAgICAgICAgbm9kZXMgdG8gaW5jbHVkZVxuICogQHBhcmFtIHtzdHJpbmd9ICAgW29wdGlvbnMuZXhjbHVkZV0gQ1NTIHNlbGVjdG9yIG1hdGNoaW5nIDxsaW5rPiBhbmQgPHN0eWxlPlxuICogICAgICAgICAgICAgICAgICAgbm9kZXMgdG8gZXhjbHVkZVxuICogQHBhcmFtIHtvYmplY3R9ICAgW29wdGlvbnMuZmlsdGVyXSBSZWd1bGFyIGV4cHJlc3Npb24gdXNlZCB0byBmaWx0ZXIgbm9kZSBDU1NcbiAqICAgICAgICAgICAgICAgICAgIGRhdGEuIEVhY2ggYmxvY2sgb2YgQ1NTIGRhdGEgaXMgdGVzdGVkIGFnYWluc3QgdGhlIGZpbHRlcixcbiAqICAgICAgICAgICAgICAgICAgIGFuZCBvbmx5IG1hdGNoaW5nIGRhdGEgaXMgaW5jbHVkZWQuXG4gKiBAcGFyYW0ge2Jvb2xlYW59ICBbb3B0aW9ucy5za2lwRGlzYWJsZWQ9dHJ1ZV0gRGV0ZXJtaW5lcyBpZiBkaXNhYmxlZFxuICogICAgICAgICAgICAgICAgICAgc3R5bGVzaGVldHMgd2lsbCBiZSBza2lwcGVkIHdoaWxlIGNvbGxlY3RpbmcgQ1NTIGRhdGEuXG4gKiBAcGFyYW0ge2Jvb2xlYW59ICBbb3B0aW9ucy51c2VDU1NPTT1mYWxzZV0gRGV0ZXJtaW5lcyBpZiBDU1MgZGF0YSB3aWxsIGJlXG4gKiAgICAgICAgICAgICAgICAgICBjb2xsZWN0ZWQgZnJvbSBhIHN0eWxlc2hlZXQncyBydW50aW1lIHZhbHVlcyBpbnN0ZWFkIG9mIGl0c1xuICogICAgICAgICAgICAgICAgICAgdGV4dCBjb250ZW50LiBUaGlzIGlzIHJlcXVpcmVkIHRvIGdldCBhY2N1cmF0ZSBDU1MgZGF0YVxuICogICAgICAgICAgICAgICAgICAgd2hlbiBhIHN0eWxlc2hlZXQgaGFzIGJlZW4gbW9kaWZpZWQgdXNpbmcgdGhlIGRlbGV0ZVJ1bGUoKVxuICogICAgICAgICAgICAgICAgICAgb3IgaW5zZXJ0UnVsZSgpIG1ldGhvZHMgYmVjYXVzZSB0aGVzZSBtb2RpZmljYXRpb25zIHdpbGxcbiAqICAgICAgICAgICAgICAgICAgIG5vdCBiZSByZWZsZWN0ZWQgaW4gdGhlIHN0eWxlc2hlZXQncyB0ZXh0IGNvbnRlbnQuXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBbb3B0aW9ucy5vbkJlZm9yZVNlbmRdIENhbGxiYWNrIGJlZm9yZSBYSFIgaXMgc2VudC4gUGFzc2VzXG4gKiAgICAgICAgICAgICAgICAgICAxKSB0aGUgWEhSIG9iamVjdCwgMikgc291cmNlIG5vZGUgcmVmZXJlbmNlLCBhbmQgMykgdGhlXG4gKiAgICAgICAgICAgICAgICAgICBzb3VyY2UgVVJMIGFzIGFyZ3VtZW50cy5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IFtvcHRpb25zLm9uU3VjY2Vzc10gQ2FsbGJhY2sgb24gZWFjaCBDU1Mgbm9kZSByZWFkLiBQYXNzZXNcbiAqICAgICAgICAgICAgICAgICAgIDEpIENTUyB0ZXh0LCAyKSBzb3VyY2Ugbm9kZSByZWZlcmVuY2UsIGFuZCAzKSB0aGUgc291cmNlXG4gKiAgICAgICAgICAgICAgICAgICBVUkwgYXMgYXJndW1lbnRzLlxuICogQHBhcmFtIHtmdW5jdGlvbn0gW29wdGlvbnMub25FcnJvcl0gQ2FsbGJhY2sgb24gZWFjaCBlcnJvci4gUGFzc2VzIDEpIHRoZSBYSFJcbiAqICAgICAgICAgICAgICAgICAgIG9iamVjdCBmb3IgaW5zcGVjdGlvbiwgMikgc291cmUgbm9kZSByZWZlcmVuY2UsIGFuZCAzKSB0aGVcbiAqICAgICAgICAgICAgICAgICAgIHNvdXJjZSBVUkwgdGhhdCBmYWlsZWQgKGVpdGhlciBhIDxsaW5rPiBocmVmIG9yIGFuIEBpbXBvcnQpXG4gKiAgICAgICAgICAgICAgICAgICBhcyBhcmd1bWVudHNcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IFtvcHRpb25zLm9uQ29tcGxldGVdIENhbGxiYWNrIGFmdGVyIGFsbCBub2RlcyBoYXZlIGJlZW5cbiAqICAgICAgICAgICAgICAgICAgIHByb2Nlc3NlZC4gUGFzc2VzIDEpIGNvbmNhdGVuYXRlZCBDU1MgdGV4dCwgMikgYW4gYXJyYXkgb2ZcbiAqICAgICAgICAgICAgICAgICAgIENTUyB0ZXh0IGluIERPTSBvcmRlciwgYW5kIDMpIGFuIGFycmF5IG9mIG5vZGVzIGluIERPTVxuICogICAgICAgICAgICAgICAgICAgb3JkZXIgYXMgYXJndW1lbnRzLlxuICpcbiAqIEBleGFtcGxlXG4gKlxuICogICBnZXRDc3NEYXRhKHtcbiAqICAgICByb290RWxlbWVudCA6IGRvY3VtZW50LFxuICogICAgIGluY2x1ZGUgICAgIDogJ3N0eWxlLGxpbmtbcmVsPVwic3R5bGVzaGVldFwiXScsXG4gKiAgICAgZXhjbHVkZSAgICAgOiAnW2hyZWY9XCJza2lwLmNzc1wiXScsXG4gKiAgICAgZmlsdGVyICAgICAgOiAvcmVkLyxcbiAqICAgICBza2lwRGlzYWJsZWQ6IHRydWUsXG4gKiAgICAgdXNlQ1NTT00gICAgOiBmYWxzZSxcbiAqICAgICBvbkJlZm9yZVNlbmQoeGhyLCBub2RlLCB1cmwpIHtcbiAqICAgICAgIC8vIC4uLlxuICogICAgIH1cbiAqICAgICBvblN1Y2Nlc3MoY3NzVGV4dCwgbm9kZSwgdXJsKSB7XG4gKiAgICAgICAvLyAuLi5cbiAqICAgICB9XG4gKiAgICAgb25FcnJvcih4aHIsIG5vZGUsIHVybCkge1xuICogICAgICAgLy8gLi4uXG4gKiAgICAgfSxcbiAqICAgICBvbkNvbXBsZXRlKGNzc1RleHQsIGNzc0FycmF5LCBub2RlQXJyYXkpIHtcbiAqICAgICAgIC8vIC4uLlxuICogICAgIH1cbiAqICAgfSk7XG4gKi8gZnVuY3Rpb24gZ2V0Q3NzRGF0YShvcHRpb25zKSB7XG4gICAgdmFyIHJlZ2V4ID0ge1xuICAgICAgICBjc3NDb21tZW50czogL1xcL1xcKltcXHNcXFNdKz9cXCpcXC8vZyxcbiAgICAgICAgY3NzSW1wb3J0czogLyg/OkBpbXBvcnRcXHMqKSg/OnVybFxcKFxccyopPyg/OlsnXCJdKShbXidcIl0qKSg/OlsnXCJdKSg/OlxccypcXCkpPyg/OlteO10qOykvZ1xuICAgIH07XG4gICAgdmFyIHNldHRpbmdzID0ge1xuICAgICAgICByb290RWxlbWVudDogb3B0aW9ucy5yb290RWxlbWVudCB8fCBkb2N1bWVudCxcbiAgICAgICAgaW5jbHVkZTogb3B0aW9ucy5pbmNsdWRlIHx8ICdzdHlsZSxsaW5rW3JlbD1cInN0eWxlc2hlZXRcIl0nLFxuICAgICAgICBleGNsdWRlOiBvcHRpb25zLmV4Y2x1ZGUgfHwgbnVsbCxcbiAgICAgICAgZmlsdGVyOiBvcHRpb25zLmZpbHRlciB8fCBudWxsLFxuICAgICAgICBza2lwRGlzYWJsZWQ6IG9wdGlvbnMuc2tpcERpc2FibGVkICE9PSBmYWxzZSxcbiAgICAgICAgdXNlQ1NTT006IG9wdGlvbnMudXNlQ1NTT00gfHwgZmFsc2UsXG4gICAgICAgIG9uQmVmb3JlU2VuZDogb3B0aW9ucy5vbkJlZm9yZVNlbmQgfHwgRnVuY3Rpb24ucHJvdG90eXBlLFxuICAgICAgICBvblN1Y2Nlc3M6IG9wdGlvbnMub25TdWNjZXNzIHx8IEZ1bmN0aW9uLnByb3RvdHlwZSxcbiAgICAgICAgb25FcnJvcjogb3B0aW9ucy5vbkVycm9yIHx8IEZ1bmN0aW9uLnByb3RvdHlwZSxcbiAgICAgICAgb25Db21wbGV0ZTogb3B0aW9ucy5vbkNvbXBsZXRlIHx8IEZ1bmN0aW9uLnByb3RvdHlwZVxuICAgIH07XG4gICAgdmFyIHNvdXJjZU5vZGVzID0gQXJyYXkuYXBwbHkobnVsbCwgc2V0dGluZ3Mucm9vdEVsZW1lbnQucXVlcnlTZWxlY3RvckFsbChzZXR0aW5ncy5pbmNsdWRlKSkuZmlsdGVyKChmdW5jdGlvbihub2RlKSB7XG4gICAgICAgIHJldHVybiAhbWF0Y2hlc1NlbGVjdG9yKG5vZGUsIHNldHRpbmdzLmV4Y2x1ZGUpO1xuICAgIH0pKTtcbiAgICB2YXIgY3NzQXJyYXkgPSBBcnJheS5hcHBseShudWxsLCBBcnJheShzb3VyY2VOb2Rlcy5sZW5ndGgpKS5tYXAoKGZ1bmN0aW9uKHgpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSkpO1xuICAgIGZ1bmN0aW9uIGhhbmRsZUNvbXBsZXRlKCkge1xuICAgICAgICB2YXIgaXNDb21wbGV0ZSA9IGNzc0FycmF5LmluZGV4T2YobnVsbCkgPT09IC0xO1xuICAgICAgICBpZiAoaXNDb21wbGV0ZSkge1xuICAgICAgICAgICAgdmFyIGNzc1RleHQgPSBjc3NBcnJheS5qb2luKFwiXCIpO1xuICAgICAgICAgICAgc2V0dGluZ3Mub25Db21wbGV0ZShjc3NUZXh0LCBjc3NBcnJheSwgc291cmNlTm9kZXMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGhhbmRsZVN1Y2Nlc3MoY3NzVGV4dCwgY3NzSW5kZXgsIG5vZGUsIHNvdXJjZVVybCkge1xuICAgICAgICB2YXIgcmV0dXJuVmFsID0gc2V0dGluZ3Mub25TdWNjZXNzKGNzc1RleHQsIG5vZGUsIHNvdXJjZVVybCk7XG4gICAgICAgIGNzc1RleHQgPSByZXR1cm5WYWwgIT09IHVuZGVmaW5lZCAmJiBCb29sZWFuKHJldHVyblZhbCkgPT09IGZhbHNlID8gXCJcIiA6IHJldHVyblZhbCB8fCBjc3NUZXh0O1xuICAgICAgICByZXNvbHZlSW1wb3J0cyhjc3NUZXh0LCBub2RlLCBzb3VyY2VVcmwsIChmdW5jdGlvbihyZXNvbHZlZENzc1RleHQsIGVycm9yRGF0YSkge1xuICAgICAgICAgICAgaWYgKGNzc0FycmF5W2Nzc0luZGV4XSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGVycm9yRGF0YS5mb3JFYWNoKChmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzZXR0aW5ncy5vbkVycm9yKGRhdGEueGhyLCBub2RlLCBkYXRhLnVybCk7XG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgIGlmICghc2V0dGluZ3MuZmlsdGVyIHx8IHNldHRpbmdzLmZpbHRlci50ZXN0KHJlc29sdmVkQ3NzVGV4dCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY3NzQXJyYXlbY3NzSW5kZXhdID0gcmVzb2x2ZWRDc3NUZXh0O1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNzc0FycmF5W2Nzc0luZGV4XSA9IFwiXCI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGhhbmRsZUNvbXBsZXRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcGFyc2VJbXBvcnREYXRhKGNzc1RleHQsIGJhc2VVcmwpIHtcbiAgICAgICAgdmFyIGlnbm9yZVJ1bGVzID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBbXTtcbiAgICAgICAgdmFyIGltcG9ydERhdGEgPSB7fTtcbiAgICAgICAgaW1wb3J0RGF0YS5ydWxlcyA9IChjc3NUZXh0LnJlcGxhY2UocmVnZXguY3NzQ29tbWVudHMsIFwiXCIpLm1hdGNoKHJlZ2V4LmNzc0ltcG9ydHMpIHx8IFtdKS5maWx0ZXIoKGZ1bmN0aW9uKHJ1bGUpIHtcbiAgICAgICAgICAgIHJldHVybiBpZ25vcmVSdWxlcy5pbmRleE9mKHJ1bGUpID09PSAtMTtcbiAgICAgICAgfSkpO1xuICAgICAgICBpbXBvcnREYXRhLnVybHMgPSBpbXBvcnREYXRhLnJ1bGVzLm1hcCgoZnVuY3Rpb24ocnVsZSkge1xuICAgICAgICAgICAgcmV0dXJuIHJ1bGUucmVwbGFjZShyZWdleC5jc3NJbXBvcnRzLCBcIiQxXCIpO1xuICAgICAgICB9KSk7XG4gICAgICAgIGltcG9ydERhdGEuYWJzb2x1dGVVcmxzID0gaW1wb3J0RGF0YS51cmxzLm1hcCgoZnVuY3Rpb24odXJsKSB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0RnVsbFVybCh1cmwsIGJhc2VVcmwpO1xuICAgICAgICB9KSk7XG4gICAgICAgIGltcG9ydERhdGEuYWJzb2x1dGVSdWxlcyA9IGltcG9ydERhdGEucnVsZXMubWFwKChmdW5jdGlvbihydWxlLCBpKSB7XG4gICAgICAgICAgICB2YXIgb2xkVXJsID0gaW1wb3J0RGF0YS51cmxzW2ldO1xuICAgICAgICAgICAgdmFyIG5ld1VybCA9IGdldEZ1bGxVcmwoaW1wb3J0RGF0YS5hYnNvbHV0ZVVybHNbaV0sIGJhc2VVcmwpO1xuICAgICAgICAgICAgcmV0dXJuIHJ1bGUucmVwbGFjZShvbGRVcmwsIG5ld1VybCk7XG4gICAgICAgIH0pKTtcbiAgICAgICAgcmV0dXJuIGltcG9ydERhdGE7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJlc29sdmVJbXBvcnRzKGNzc1RleHQsIG5vZGUsIGJhc2VVcmwsIGNhbGxiYWNrRm4pIHtcbiAgICAgICAgdmFyIF9fZXJyb3JEYXRhID0gYXJndW1lbnRzLmxlbmd0aCA+IDQgJiYgYXJndW1lbnRzWzRdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNF0gOiBbXTtcbiAgICAgICAgdmFyIF9fZXJyb3JSdWxlcyA9IGFyZ3VtZW50cy5sZW5ndGggPiA1ICYmIGFyZ3VtZW50c1s1XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzVdIDogW107XG4gICAgICAgIHZhciBpbXBvcnREYXRhID0gcGFyc2VJbXBvcnREYXRhKGNzc1RleHQsIGJhc2VVcmwsIF9fZXJyb3JSdWxlcyk7XG4gICAgICAgIGlmIChpbXBvcnREYXRhLnJ1bGVzLmxlbmd0aCkge1xuICAgICAgICAgICAgZ2V0VXJscyhpbXBvcnREYXRhLmFic29sdXRlVXJscywge1xuICAgICAgICAgICAgICAgIG9uQmVmb3JlU2VuZDogZnVuY3Rpb24gb25CZWZvcmVTZW5kKHhociwgdXJsLCB1cmxJbmRleCkge1xuICAgICAgICAgICAgICAgICAgICBzZXR0aW5ncy5vbkJlZm9yZVNlbmQoeGhyLCBub2RlLCB1cmwpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgb25TdWNjZXNzOiBmdW5jdGlvbiBvblN1Y2Nlc3MoY3NzVGV4dCwgdXJsLCB1cmxJbmRleCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcmV0dXJuVmFsID0gc2V0dGluZ3Mub25TdWNjZXNzKGNzc1RleHQsIG5vZGUsIHVybCk7XG4gICAgICAgICAgICAgICAgICAgIGNzc1RleHQgPSByZXR1cm5WYWwgPT09IGZhbHNlID8gXCJcIiA6IHJldHVyblZhbCB8fCBjc3NUZXh0O1xuICAgICAgICAgICAgICAgICAgICB2YXIgcmVzcG9uc2VJbXBvcnREYXRhID0gcGFyc2VJbXBvcnREYXRhKGNzc1RleHQsIHVybCwgX19lcnJvclJ1bGVzKTtcbiAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2VJbXBvcnREYXRhLnJ1bGVzLmZvckVhY2goKGZ1bmN0aW9uKHJ1bGUsIGkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNzc1RleHQgPSBjc3NUZXh0LnJlcGxhY2UocnVsZSwgcmVzcG9uc2VJbXBvcnREYXRhLmFic29sdXRlUnVsZXNbaV0pO1xuICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjc3NUZXh0O1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgb25FcnJvcjogZnVuY3Rpb24gb25FcnJvcih4aHIsIHVybCwgdXJsSW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgX19lcnJvckRhdGEucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICB4aHI6IHhocixcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybDogdXJsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBfX2Vycm9yUnVsZXMucHVzaChpbXBvcnREYXRhLnJ1bGVzW3VybEluZGV4XSk7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmVJbXBvcnRzKGNzc1RleHQsIG5vZGUsIGJhc2VVcmwsIGNhbGxiYWNrRm4sIF9fZXJyb3JEYXRhLCBfX2Vycm9yUnVsZXMpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgb25Db21wbGV0ZTogZnVuY3Rpb24gb25Db21wbGV0ZShyZXNwb25zZUFycmF5KSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlQXJyYXkuZm9yRWFjaCgoZnVuY3Rpb24oaW1wb3J0VGV4dCwgaSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY3NzVGV4dCA9IGNzc1RleHQucmVwbGFjZShpbXBvcnREYXRhLnJ1bGVzW2ldLCBpbXBvcnRUZXh0KTtcbiAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlSW1wb3J0cyhjc3NUZXh0LCBub2RlLCBiYXNlVXJsLCBjYWxsYmFja0ZuLCBfX2Vycm9yRGF0YSwgX19lcnJvclJ1bGVzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhbGxiYWNrRm4oY3NzVGV4dCwgX19lcnJvckRhdGEpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChzb3VyY2VOb2Rlcy5sZW5ndGgpIHtcbiAgICAgICAgc291cmNlTm9kZXMuZm9yRWFjaCgoZnVuY3Rpb24obm9kZSwgaSkge1xuICAgICAgICAgICAgdmFyIGxpbmtIcmVmID0gbm9kZS5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpO1xuICAgICAgICAgICAgdmFyIGxpbmtSZWwgPSBub2RlLmdldEF0dHJpYnV0ZShcInJlbFwiKTtcbiAgICAgICAgICAgIHZhciBpc0xpbmsgPSBub2RlLm5vZGVOYW1lID09PSBcIkxJTktcIiAmJiBsaW5rSHJlZiAmJiBsaW5rUmVsICYmIGxpbmtSZWwudG9Mb3dlckNhc2UoKS5pbmRleE9mKFwic3R5bGVzaGVldFwiKSAhPT0gLTE7XG4gICAgICAgICAgICB2YXIgaXNTa2lwID0gc2V0dGluZ3Muc2tpcERpc2FibGVkID09PSBmYWxzZSA/IGZhbHNlIDogbm9kZS5kaXNhYmxlZDtcbiAgICAgICAgICAgIHZhciBpc1N0eWxlID0gbm9kZS5ub2RlTmFtZSA9PT0gXCJTVFlMRVwiO1xuICAgICAgICAgICAgaWYgKGlzTGluayAmJiAhaXNTa2lwKSB7XG4gICAgICAgICAgICAgICAgZ2V0VXJscyhsaW5rSHJlZiwge1xuICAgICAgICAgICAgICAgICAgICBtaW1lVHlwZTogXCJ0ZXh0L2Nzc1wiLFxuICAgICAgICAgICAgICAgICAgICBvbkJlZm9yZVNlbmQ6IGZ1bmN0aW9uIG9uQmVmb3JlU2VuZCh4aHIsIHVybCwgdXJsSW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldHRpbmdzLm9uQmVmb3JlU2VuZCh4aHIsIG5vZGUsIHVybCk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIG9uU3VjY2VzczogZnVuY3Rpb24gb25TdWNjZXNzKGNzc1RleHQsIHVybCwgdXJsSW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzb3VyY2VVcmwgPSBnZXRGdWxsVXJsKGxpbmtIcmVmKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZVN1Y2Nlc3MoY3NzVGV4dCwgaSwgbm9kZSwgc291cmNlVXJsKTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgb25FcnJvcjogZnVuY3Rpb24gb25FcnJvcih4aHIsIHVybCwgdXJsSW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNzc0FycmF5W2ldID0gXCJcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldHRpbmdzLm9uRXJyb3IoeGhyLCBub2RlLCB1cmwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlQ29tcGxldGUoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChpc1N0eWxlICYmICFpc1NraXApIHtcbiAgICAgICAgICAgICAgICB2YXIgY3NzVGV4dCA9IG5vZGUudGV4dENvbnRlbnQ7XG4gICAgICAgICAgICAgICAgaWYgKHNldHRpbmdzLnVzZUNTU09NKSB7XG4gICAgICAgICAgICAgICAgICAgIGNzc1RleHQgPSBBcnJheS5hcHBseShudWxsLCBub2RlLnNoZWV0LmNzc1J1bGVzKS5tYXAoKGZ1bmN0aW9uKHJ1bGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBydWxlLmNzc1RleHQ7XG4gICAgICAgICAgICAgICAgICAgIH0pKS5qb2luKFwiXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBoYW5kbGVTdWNjZXNzKGNzc1RleHQsIGksIG5vZGUsIGxvY2F0aW9uLmhyZWYpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjc3NBcnJheVtpXSA9IFwiXCI7XG4gICAgICAgICAgICAgICAgaGFuZGxlQ29tcGxldGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHNldHRpbmdzLm9uQ29tcGxldGUoXCJcIiwgW10pO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZ2V0RnVsbFVybCh1cmwsIGJhc2UpIHtcbiAgICB2YXIgZCA9IGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudChcIlwiKTtcbiAgICB2YXIgYiA9IGQuY3JlYXRlRWxlbWVudChcImJhc2VcIik7XG4gICAgdmFyIGEgPSBkLmNyZWF0ZUVsZW1lbnQoXCJhXCIpO1xuICAgIGQuaGVhZC5hcHBlbmRDaGlsZChiKTtcbiAgICBkLmJvZHkuYXBwZW5kQ2hpbGQoYSk7XG4gICAgYi5ocmVmID0gYmFzZSB8fCBkb2N1bWVudC5iYXNlVVJJIHx8IChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiYmFzZVwiKSB8fCB7fSkuaHJlZiB8fCBsb2NhdGlvbi5ocmVmO1xuICAgIGEuaHJlZiA9IHVybDtcbiAgICByZXR1cm4gYS5ocmVmO1xufVxuXG5mdW5jdGlvbiBtYXRjaGVzU2VsZWN0b3IoZWxtLCBzZWxlY3Rvcikge1xuICAgIHZhciBtYXRjaGVzID0gZWxtLm1hdGNoZXMgfHwgZWxtLm1hdGNoZXNTZWxlY3RvciB8fCBlbG0ud2Via2l0TWF0Y2hlc1NlbGVjdG9yIHx8IGVsbS5tb3pNYXRjaGVzU2VsZWN0b3IgfHwgZWxtLm1zTWF0Y2hlc1NlbGVjdG9yIHx8IGVsbS5vTWF0Y2hlc1NlbGVjdG9yO1xuICAgIHJldHVybiBtYXRjaGVzLmNhbGwoZWxtLCBzZWxlY3Rvcik7XG59XG5cbnZhciBiYWxhbmNlZE1hdGNoID0gYmFsYW5jZWQ7XG5cbmZ1bmN0aW9uIGJhbGFuY2VkKGEsIGIsIHN0cikge1xuICAgIGlmIChhIGluc3RhbmNlb2YgUmVnRXhwKSBhID0gbWF5YmVNYXRjaChhLCBzdHIpO1xuICAgIGlmIChiIGluc3RhbmNlb2YgUmVnRXhwKSBiID0gbWF5YmVNYXRjaChiLCBzdHIpO1xuICAgIHZhciByID0gcmFuZ2UoYSwgYiwgc3RyKTtcbiAgICByZXR1cm4gciAmJiB7XG4gICAgICAgIHN0YXJ0OiByWzBdLFxuICAgICAgICBlbmQ6IHJbMV0sXG4gICAgICAgIHByZTogc3RyLnNsaWNlKDAsIHJbMF0pLFxuICAgICAgICBib2R5OiBzdHIuc2xpY2UoclswXSArIGEubGVuZ3RoLCByWzFdKSxcbiAgICAgICAgcG9zdDogc3RyLnNsaWNlKHJbMV0gKyBiLmxlbmd0aClcbiAgICB9O1xufVxuXG5mdW5jdGlvbiBtYXliZU1hdGNoKHJlZywgc3RyKSB7XG4gICAgdmFyIG0gPSBzdHIubWF0Y2gocmVnKTtcbiAgICByZXR1cm4gbSA/IG1bMF0gOiBudWxsO1xufVxuXG5iYWxhbmNlZC5yYW5nZSA9IHJhbmdlO1xuXG5mdW5jdGlvbiByYW5nZShhLCBiLCBzdHIpIHtcbiAgICB2YXIgYmVncywgYmVnLCBsZWZ0LCByaWdodCwgcmVzdWx0O1xuICAgIHZhciBhaSA9IHN0ci5pbmRleE9mKGEpO1xuICAgIHZhciBiaSA9IHN0ci5pbmRleE9mKGIsIGFpICsgMSk7XG4gICAgdmFyIGkgPSBhaTtcbiAgICBpZiAoYWkgPj0gMCAmJiBiaSA+IDApIHtcbiAgICAgICAgYmVncyA9IFtdO1xuICAgICAgICBsZWZ0ID0gc3RyLmxlbmd0aDtcbiAgICAgICAgd2hpbGUgKGkgPj0gMCAmJiAhcmVzdWx0KSB7XG4gICAgICAgICAgICBpZiAoaSA9PSBhaSkge1xuICAgICAgICAgICAgICAgIGJlZ3MucHVzaChpKTtcbiAgICAgICAgICAgICAgICBhaSA9IHN0ci5pbmRleE9mKGEsIGkgKyAxKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoYmVncy5sZW5ndGggPT0gMSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IFsgYmVncy5wb3AoKSwgYmkgXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYmVnID0gYmVncy5wb3AoKTtcbiAgICAgICAgICAgICAgICBpZiAoYmVnIDwgbGVmdCkge1xuICAgICAgICAgICAgICAgICAgICBsZWZ0ID0gYmVnO1xuICAgICAgICAgICAgICAgICAgICByaWdodCA9IGJpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBiaSA9IHN0ci5pbmRleE9mKGIsIGkgKyAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGkgPSBhaSA8IGJpICYmIGFpID49IDAgPyBhaSA6IGJpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChiZWdzLmxlbmd0aCkge1xuICAgICAgICAgICAgcmVzdWx0ID0gWyBsZWZ0LCByaWdodCBdO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIHBhcnNlQ3NzKGNzcykge1xuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgICB2YXIgZGVmYXVsdHMgPSB7XG4gICAgICAgIHByZXNlcnZlU3RhdGljOiB0cnVlLFxuICAgICAgICByZW1vdmVDb21tZW50czogZmFsc2VcbiAgICB9O1xuICAgIHZhciBzZXR0aW5ncyA9IF9leHRlbmRzKHt9LCBkZWZhdWx0cywgb3B0aW9ucyk7XG4gICAgdmFyIGVycm9ycyA9IFtdO1xuICAgIGZ1bmN0aW9uIGVycm9yKG1zZykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDU1MgcGFyc2UgZXJyb3I6IFwiLmNvbmNhdChtc2cpKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gbWF0Y2gocmUpIHtcbiAgICAgICAgdmFyIG0gPSByZS5leGVjKGNzcyk7XG4gICAgICAgIGlmIChtKSB7XG4gICAgICAgICAgICBjc3MgPSBjc3Muc2xpY2UobVswXS5sZW5ndGgpO1xuICAgICAgICAgICAgcmV0dXJuIG07XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gb3BlbigpIHtcbiAgICAgICAgcmV0dXJuIG1hdGNoKC9ee1xccyovKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gY2xvc2UoKSB7XG4gICAgICAgIHJldHVybiBtYXRjaCgvXn0vKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gd2hpdGVzcGFjZSgpIHtcbiAgICAgICAgbWF0Y2goL15cXHMqLyk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNvbW1lbnQoKSB7XG4gICAgICAgIHdoaXRlc3BhY2UoKTtcbiAgICAgICAgaWYgKGNzc1swXSAhPT0gXCIvXCIgfHwgY3NzWzFdICE9PSBcIipcIikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBpID0gMjtcbiAgICAgICAgd2hpbGUgKGNzc1tpXSAmJiAoY3NzW2ldICE9PSBcIipcIiB8fCBjc3NbaSArIDFdICE9PSBcIi9cIikpIHtcbiAgICAgICAgICAgIGkrKztcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWNzc1tpXSkge1xuICAgICAgICAgICAgcmV0dXJuIGVycm9yKFwiZW5kIG9mIGNvbW1lbnQgaXMgbWlzc2luZ1wiKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgc3RyID0gY3NzLnNsaWNlKDIsIGkpO1xuICAgICAgICBjc3MgPSBjc3Muc2xpY2UoaSArIDIpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHlwZTogXCJjb21tZW50XCIsXG4gICAgICAgICAgICBjb21tZW50OiBzdHJcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZnVuY3Rpb24gY29tbWVudHMoKSB7XG4gICAgICAgIHZhciBjbW50cyA9IFtdO1xuICAgICAgICB2YXIgYztcbiAgICAgICAgd2hpbGUgKGMgPSBjb21tZW50KCkpIHtcbiAgICAgICAgICAgIGNtbnRzLnB1c2goYyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNldHRpbmdzLnJlbW92ZUNvbW1lbnRzID8gW10gOiBjbW50cztcbiAgICB9XG4gICAgZnVuY3Rpb24gc2VsZWN0b3IoKSB7XG4gICAgICAgIHdoaXRlc3BhY2UoKTtcbiAgICAgICAgd2hpbGUgKGNzc1swXSA9PT0gXCJ9XCIpIHtcbiAgICAgICAgICAgIGVycm9yKFwiZXh0cmEgY2xvc2luZyBicmFja2V0XCIpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBtID0gbWF0Y2goL14oKFwiKD86XFxcXFwifFteXCJdKSpcInwnKD86XFxcXCd8W14nXSkqJ3xbXntdKSspLyk7XG4gICAgICAgIGlmIChtKSB7XG4gICAgICAgICAgICByZXR1cm4gbVswXS50cmltKCkucmVwbGFjZSgvXFwvXFwqKFteKl18W1xcclxcbl18KFxcKisoW14qL118W1xcclxcbl0pKSkqXFwqXFwvKy9nLCBcIlwiKS5yZXBsYWNlKC9cIig/OlxcXFxcInxbXlwiXSkqXCJ8Jyg/OlxcXFwnfFteJ10pKicvZywgKGZ1bmN0aW9uKG0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbS5yZXBsYWNlKC8sL2csIFwi4oCMXCIpO1xuICAgICAgICAgICAgfSkpLnNwbGl0KC9cXHMqKD8hW14oXSpcXCkpLFxccyovKS5tYXAoKGZ1bmN0aW9uKHMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcy5yZXBsYWNlKC9cXHUyMDBDL2csIFwiLFwiKTtcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBkZWNsYXJhdGlvbigpIHtcbiAgICAgICAgaWYgKGNzc1swXSA9PT0gXCJAXCIpIHtcbiAgICAgICAgICAgIHJldHVybiBhdF9ydWxlKCk7XG4gICAgICAgIH1cbiAgICAgICAgbWF0Y2goL14oWztcXHNdKikrLyk7XG4gICAgICAgIHZhciBjb21tZW50X3JlZ2V4cCA9IC9cXC9cXCpbXipdKlxcKisoW14vKl1bXipdKlxcKispKlxcLy9nO1xuICAgICAgICB2YXIgcHJvcCA9IG1hdGNoKC9eKFxcKj9bLSMvKlxcXFxcXHddKyhcXFtbMC05YS16Xy1dK1xcXSk/KVxccyovKTtcbiAgICAgICAgaWYgKCFwcm9wKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgcHJvcCA9IHByb3BbMF0udHJpbSgpO1xuICAgICAgICBpZiAoIW1hdGNoKC9eOlxccyovKSkge1xuICAgICAgICAgICAgcmV0dXJuIGVycm9yKFwicHJvcGVydHkgbWlzc2luZyAnOidcIik7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHZhbCA9IG1hdGNoKC9eKCg/OlxcL1xcKi4qP1xcKlxcL3wnKD86XFxcXCd8LikqPyd8XCIoPzpcXFxcXCJ8LikqP1wifFxcKChcXHMqJyg/OlxcXFwnfC4pKj8nfFwiKD86XFxcXFwifC4pKj9cInxbXildKj8pXFxzKlxcKXxbXn07XSkrKS8pO1xuICAgICAgICB2YXIgcmV0ID0ge1xuICAgICAgICAgICAgdHlwZTogXCJkZWNsYXJhdGlvblwiLFxuICAgICAgICAgICAgcHJvcGVydHk6IHByb3AucmVwbGFjZShjb21tZW50X3JlZ2V4cCwgXCJcIiksXG4gICAgICAgICAgICB2YWx1ZTogdmFsID8gdmFsWzBdLnJlcGxhY2UoY29tbWVudF9yZWdleHAsIFwiXCIpLnRyaW0oKSA6IFwiXCJcbiAgICAgICAgfTtcbiAgICAgICAgbWF0Y2goL15bO1xcc10qLyk7XG4gICAgICAgIHJldHVybiByZXQ7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGRlY2xhcmF0aW9ucygpIHtcbiAgICAgICAgaWYgKCFvcGVuKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBlcnJvcihcIm1pc3NpbmcgJ3snXCIpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBkO1xuICAgICAgICB2YXIgZGVjbHMgPSBjb21tZW50cygpO1xuICAgICAgICB3aGlsZSAoZCA9IGRlY2xhcmF0aW9uKCkpIHtcbiAgICAgICAgICAgIGRlY2xzLnB1c2goZCk7XG4gICAgICAgICAgICBkZWNscyA9IGRlY2xzLmNvbmNhdChjb21tZW50cygpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWNsb3NlKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBlcnJvcihcIm1pc3NpbmcgJ30nXCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkZWNscztcbiAgICB9XG4gICAgZnVuY3Rpb24ga2V5ZnJhbWUoKSB7XG4gICAgICAgIHdoaXRlc3BhY2UoKTtcbiAgICAgICAgdmFyIHZhbHMgPSBbXTtcbiAgICAgICAgdmFyIG07XG4gICAgICAgIHdoaWxlIChtID0gbWF0Y2goL14oKFxcZCtcXC5cXGQrfFxcLlxcZCt8XFxkKyklP3xbYS16XSspXFxzKi8pKSB7XG4gICAgICAgICAgICB2YWxzLnB1c2gobVsxXSk7XG4gICAgICAgICAgICBtYXRjaCgvXixcXHMqLyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZhbHMubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHR5cGU6IFwia2V5ZnJhbWVcIixcbiAgICAgICAgICAgICAgICB2YWx1ZXM6IHZhbHMsXG4gICAgICAgICAgICAgICAgZGVjbGFyYXRpb25zOiBkZWNsYXJhdGlvbnMoKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBhdF9rZXlmcmFtZXMoKSB7XG4gICAgICAgIHZhciBtID0gbWF0Y2goL15AKFstXFx3XSspP2tleWZyYW1lc1xccyovKTtcbiAgICAgICAgaWYgKCFtKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHZlbmRvciA9IG1bMV07XG4gICAgICAgIG0gPSBtYXRjaCgvXihbLVxcd10rKVxccyovKTtcbiAgICAgICAgaWYgKCFtKSB7XG4gICAgICAgICAgICByZXR1cm4gZXJyb3IoXCJAa2V5ZnJhbWVzIG1pc3NpbmcgbmFtZVwiKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbmFtZSA9IG1bMV07XG4gICAgICAgIGlmICghb3BlbigpKSB7XG4gICAgICAgICAgICByZXR1cm4gZXJyb3IoXCJAa2V5ZnJhbWVzIG1pc3NpbmcgJ3snXCIpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBmcmFtZTtcbiAgICAgICAgdmFyIGZyYW1lcyA9IGNvbW1lbnRzKCk7XG4gICAgICAgIHdoaWxlIChmcmFtZSA9IGtleWZyYW1lKCkpIHtcbiAgICAgICAgICAgIGZyYW1lcy5wdXNoKGZyYW1lKTtcbiAgICAgICAgICAgIGZyYW1lcyA9IGZyYW1lcy5jb25jYXQoY29tbWVudHMoKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFjbG9zZSgpKSB7XG4gICAgICAgICAgICByZXR1cm4gZXJyb3IoXCJAa2V5ZnJhbWVzIG1pc3NpbmcgJ30nXCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0eXBlOiBcImtleWZyYW1lc1wiLFxuICAgICAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgICAgIHZlbmRvcjogdmVuZG9yLFxuICAgICAgICAgICAga2V5ZnJhbWVzOiBmcmFtZXNcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZnVuY3Rpb24gYXRfcGFnZSgpIHtcbiAgICAgICAgdmFyIG0gPSBtYXRjaCgvXkBwYWdlICovKTtcbiAgICAgICAgaWYgKG0pIHtcbiAgICAgICAgICAgIHZhciBzZWwgPSBzZWxlY3RvcigpIHx8IFtdO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0eXBlOiBcInBhZ2VcIixcbiAgICAgICAgICAgICAgICBzZWxlY3RvcnM6IHNlbCxcbiAgICAgICAgICAgICAgICBkZWNsYXJhdGlvbnM6IGRlY2xhcmF0aW9ucygpXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGF0X3BhZ2VfbWFyZ2luX2JveCgpIHtcbiAgICAgICAgdmFyIG0gPSBtYXRjaCgvQCh0b3B8Ym90dG9tfGxlZnR8cmlnaHQpLShsZWZ0fGNlbnRlcnxyaWdodHx0b3B8bWlkZGxlfGJvdHRvbSktPyhjb3JuZXIpP1xccyovKTtcbiAgICAgICAgaWYgKG0pIHtcbiAgICAgICAgICAgIHZhciBuYW1lID0gXCJcIi5jb25jYXQobVsxXSwgXCItXCIpLmNvbmNhdChtWzJdKSArIChtWzNdID8gXCItXCIuY29uY2F0KG1bM10pIDogXCJcIik7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHR5cGU6IFwicGFnZS1tYXJnaW4tYm94XCIsXG4gICAgICAgICAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgICAgICAgICBkZWNsYXJhdGlvbnM6IGRlY2xhcmF0aW9ucygpXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGF0X2ZvbnRmYWNlKCkge1xuICAgICAgICB2YXIgbSA9IG1hdGNoKC9eQGZvbnQtZmFjZVxccyovKTtcbiAgICAgICAgaWYgKG0pIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdHlwZTogXCJmb250LWZhY2VcIixcbiAgICAgICAgICAgICAgICBkZWNsYXJhdGlvbnM6IGRlY2xhcmF0aW9ucygpXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGF0X3N1cHBvcnRzKCkge1xuICAgICAgICB2YXIgbSA9IG1hdGNoKC9eQHN1cHBvcnRzICooW157XSspLyk7XG4gICAgICAgIGlmIChtKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHR5cGU6IFwic3VwcG9ydHNcIixcbiAgICAgICAgICAgICAgICBzdXBwb3J0czogbVsxXS50cmltKCksXG4gICAgICAgICAgICAgICAgcnVsZXM6IHJ1bGVzKClcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gYXRfaG9zdCgpIHtcbiAgICAgICAgdmFyIG0gPSBtYXRjaCgvXkBob3N0XFxzKi8pO1xuICAgICAgICBpZiAobSkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0eXBlOiBcImhvc3RcIixcbiAgICAgICAgICAgICAgICBydWxlczogcnVsZXMoKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBhdF9tZWRpYSgpIHtcbiAgICAgICAgdmFyIG0gPSBtYXRjaCgvXkBtZWRpYShbXntdKykqLyk7XG4gICAgICAgIGlmIChtKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHR5cGU6IFwibWVkaWFcIixcbiAgICAgICAgICAgICAgICBtZWRpYTogKG1bMV0gfHwgXCJcIikudHJpbSgpLFxuICAgICAgICAgICAgICAgIHJ1bGVzOiBydWxlcygpXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGF0X2N1c3RvbV9tKCkge1xuICAgICAgICB2YXIgbSA9IG1hdGNoKC9eQGN1c3RvbS1tZWRpYVxccysoLS1bXlxcc10rKVxccyooW157O10rKTsvKTtcbiAgICAgICAgaWYgKG0pIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdHlwZTogXCJjdXN0b20tbWVkaWFcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBtWzFdLnRyaW0oKSxcbiAgICAgICAgICAgICAgICBtZWRpYTogbVsyXS50cmltKClcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gYXRfZG9jdW1lbnQoKSB7XG4gICAgICAgIHZhciBtID0gbWF0Y2goL15AKFstXFx3XSspP2RvY3VtZW50ICooW157XSspLyk7XG4gICAgICAgIGlmIChtKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHR5cGU6IFwiZG9jdW1lbnRcIixcbiAgICAgICAgICAgICAgICBkb2N1bWVudDogbVsyXS50cmltKCksXG4gICAgICAgICAgICAgICAgdmVuZG9yOiBtWzFdID8gbVsxXS50cmltKCkgOiBudWxsLFxuICAgICAgICAgICAgICAgIHJ1bGVzOiBydWxlcygpXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGF0X3goKSB7XG4gICAgICAgIHZhciBtID0gbWF0Y2goL15AKGltcG9ydHxjaGFyc2V0fG5hbWVzcGFjZSlcXHMqKFteO10rKTsvKTtcbiAgICAgICAgaWYgKG0pIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdHlwZTogbVsxXSxcbiAgICAgICAgICAgICAgICBuYW1lOiBtWzJdLnRyaW0oKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBhdF9ydWxlKCkge1xuICAgICAgICB3aGl0ZXNwYWNlKCk7XG4gICAgICAgIGlmIChjc3NbMF0gPT09IFwiQFwiKSB7XG4gICAgICAgICAgICB2YXIgcmV0ID0gYXRfeCgpIHx8IGF0X2ZvbnRmYWNlKCkgfHwgYXRfbWVkaWEoKSB8fCBhdF9rZXlmcmFtZXMoKSB8fCBhdF9zdXBwb3J0cygpIHx8IGF0X2RvY3VtZW50KCkgfHwgYXRfY3VzdG9tX20oKSB8fCBhdF9ob3N0KCkgfHwgYXRfcGFnZSgpIHx8IGF0X3BhZ2VfbWFyZ2luX2JveCgpO1xuICAgICAgICAgICAgaWYgKHJldCAmJiAhc2V0dGluZ3MucHJlc2VydmVTdGF0aWMpIHtcbiAgICAgICAgICAgICAgICB2YXIgaGFzVmFyRnVuYyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGlmIChyZXQuZGVjbGFyYXRpb25zKSB7XG4gICAgICAgICAgICAgICAgICAgIGhhc1ZhckZ1bmMgPSByZXQuZGVjbGFyYXRpb25zLnNvbWUoKGZ1bmN0aW9uKGRlY2wpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAvdmFyXFwoLy50ZXN0KGRlY2wudmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFyciA9IHJldC5rZXlmcmFtZXMgfHwgcmV0LnJ1bGVzIHx8IFtdO1xuICAgICAgICAgICAgICAgICAgICBoYXNWYXJGdW5jID0gYXJyLnNvbWUoKGZ1bmN0aW9uKG9iaikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChvYmouZGVjbGFyYXRpb25zIHx8IFtdKS5zb21lKChmdW5jdGlvbihkZWNsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC92YXJcXCgvLnRlc3QoZGVjbC52YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhhc1ZhckZ1bmMgPyByZXQgOiB7fTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gcnVsZSgpIHtcbiAgICAgICAgaWYgKCFzZXR0aW5ncy5wcmVzZXJ2ZVN0YXRpYykge1xuICAgICAgICAgICAgdmFyIGJhbGFuY2VkTWF0Y2gkMSA9IGJhbGFuY2VkTWF0Y2goXCJ7XCIsIFwifVwiLCBjc3MpO1xuICAgICAgICAgICAgaWYgKGJhbGFuY2VkTWF0Y2gkMSkge1xuICAgICAgICAgICAgICAgIHZhciBoYXNWYXJEZWNsID0gLzooPzpyb290fGhvc3QpKD8hWy46IyhdKS8udGVzdChiYWxhbmNlZE1hdGNoJDEucHJlKSAmJiAvLS1cXFMqXFxzKjovLnRlc3QoYmFsYW5jZWRNYXRjaCQxLmJvZHkpO1xuICAgICAgICAgICAgICAgIHZhciBoYXNWYXJGdW5jID0gL3ZhclxcKC8udGVzdChiYWxhbmNlZE1hdGNoJDEuYm9keSk7XG4gICAgICAgICAgICAgICAgaWYgKCFoYXNWYXJEZWNsICYmICFoYXNWYXJGdW5jKSB7XG4gICAgICAgICAgICAgICAgICAgIGNzcyA9IGNzcy5zbGljZShiYWxhbmNlZE1hdGNoJDEuZW5kICsgMSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7fTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHNlbCA9IHNlbGVjdG9yKCkgfHwgW107XG4gICAgICAgIHZhciBkZWNscyA9IHNldHRpbmdzLnByZXNlcnZlU3RhdGljID8gZGVjbGFyYXRpb25zKCkgOiBkZWNsYXJhdGlvbnMoKS5maWx0ZXIoKGZ1bmN0aW9uKGRlY2wpIHtcbiAgICAgICAgICAgIHZhciBoYXNWYXJEZWNsID0gc2VsLnNvbWUoKGZ1bmN0aW9uKHMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gLzooPzpyb290fGhvc3QpKD8hWy46IyhdKS8udGVzdChzKTtcbiAgICAgICAgICAgIH0pKSAmJiAvXi0tXFxTLy50ZXN0KGRlY2wucHJvcGVydHkpO1xuICAgICAgICAgICAgdmFyIGhhc1ZhckZ1bmMgPSAvdmFyXFwoLy50ZXN0KGRlY2wudmFsdWUpO1xuICAgICAgICAgICAgcmV0dXJuIGhhc1ZhckRlY2wgfHwgaGFzVmFyRnVuYztcbiAgICAgICAgfSkpO1xuICAgICAgICBpZiAoIXNlbC5sZW5ndGgpIHtcbiAgICAgICAgICAgIGVycm9yKFwic2VsZWN0b3IgbWlzc2luZ1wiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHlwZTogXCJydWxlXCIsXG4gICAgICAgICAgICBzZWxlY3RvcnM6IHNlbCxcbiAgICAgICAgICAgIGRlY2xhcmF0aW9uczogZGVjbHNcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcnVsZXMoY29yZSkge1xuICAgICAgICBpZiAoIWNvcmUgJiYgIW9wZW4oKSkge1xuICAgICAgICAgICAgcmV0dXJuIGVycm9yKFwibWlzc2luZyAneydcIik7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG5vZGU7XG4gICAgICAgIHZhciBydWxlcyA9IGNvbW1lbnRzKCk7XG4gICAgICAgIHdoaWxlIChjc3MubGVuZ3RoICYmIChjb3JlIHx8IGNzc1swXSAhPT0gXCJ9XCIpICYmIChub2RlID0gYXRfcnVsZSgpIHx8IHJ1bGUoKSkpIHtcbiAgICAgICAgICAgIGlmIChub2RlLnR5cGUpIHtcbiAgICAgICAgICAgICAgICBydWxlcy5wdXNoKG5vZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcnVsZXMgPSBydWxlcy5jb25jYXQoY29tbWVudHMoKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFjb3JlICYmICFjbG9zZSgpKSB7XG4gICAgICAgICAgICByZXR1cm4gZXJyb3IoXCJtaXNzaW5nICd9J1wiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcnVsZXM7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IFwic3R5bGVzaGVldFwiLFxuICAgICAgICBzdHlsZXNoZWV0OiB7XG4gICAgICAgICAgICBydWxlczogcnVsZXModHJ1ZSksXG4gICAgICAgICAgICBlcnJvcnM6IGVycm9yc1xuICAgICAgICB9XG4gICAgfTtcbn1cblxuZnVuY3Rpb24gcGFyc2VWYXJzKGNzc0RhdGEpIHtcbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gICAgdmFyIGRlZmF1bHRzID0ge1xuICAgICAgICBwYXJzZUhvc3Q6IGZhbHNlLFxuICAgICAgICBzdG9yZToge30sXG4gICAgICAgIG9uV2FybmluZzogZnVuY3Rpb24gb25XYXJuaW5nKCkge31cbiAgICB9O1xuICAgIHZhciBzZXR0aW5ncyA9IF9leHRlbmRzKHt9LCBkZWZhdWx0cywgb3B0aW9ucyk7XG4gICAgdmFyIHJlVmFyRGVjbFNlbGVjdG9ycyA9IG5ldyBSZWdFeHAoXCI6XCIuY29uY2F0KHNldHRpbmdzLnBhcnNlSG9zdCA/IFwiaG9zdFwiIDogXCJyb290XCIsIFwiJFwiKSk7XG4gICAgaWYgKHR5cGVvZiBjc3NEYXRhID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIGNzc0RhdGEgPSBwYXJzZUNzcyhjc3NEYXRhLCBzZXR0aW5ncyk7XG4gICAgfVxuICAgIGNzc0RhdGEuc3R5bGVzaGVldC5ydWxlcy5mb3JFYWNoKChmdW5jdGlvbihydWxlKSB7XG4gICAgICAgIGlmIChydWxlLnR5cGUgIT09IFwicnVsZVwiIHx8ICFydWxlLnNlbGVjdG9ycy5zb21lKChmdW5jdGlvbihzKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVWYXJEZWNsU2VsZWN0b3JzLnRlc3Qocyk7XG4gICAgICAgIH0pKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHJ1bGUuZGVjbGFyYXRpb25zLmZvckVhY2goKGZ1bmN0aW9uKGRlY2wsIGkpIHtcbiAgICAgICAgICAgIHZhciBwcm9wID0gZGVjbC5wcm9wZXJ0eTtcbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IGRlY2wudmFsdWU7XG4gICAgICAgICAgICBpZiAocHJvcCAmJiBwcm9wLmluZGV4T2YoXCItLVwiKSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHNldHRpbmdzLnN0b3JlW3Byb3BdID0gdmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pKTtcbiAgICB9KSk7XG4gICAgcmV0dXJuIHNldHRpbmdzLnN0b3JlO1xufVxuXG5mdW5jdGlvbiBzdHJpbmdpZnlDc3ModHJlZSkge1xuICAgIHZhciBkZWxpbSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogXCJcIjtcbiAgICB2YXIgY2IgPSBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZDtcbiAgICB2YXIgcmVuZGVyTWV0aG9kcyA9IHtcbiAgICAgICAgY2hhcnNldDogZnVuY3Rpb24gY2hhcnNldChub2RlKSB7XG4gICAgICAgICAgICByZXR1cm4gXCJAY2hhcnNldCBcIiArIG5vZGUubmFtZSArIFwiO1wiO1xuICAgICAgICB9LFxuICAgICAgICBjb21tZW50OiBmdW5jdGlvbiBjb21tZW50KG5vZGUpIHtcbiAgICAgICAgICAgIHJldHVybiBub2RlLmNvbW1lbnQuaW5kZXhPZihcIl9fQ1NTVkFSU1BPTllGSUxMXCIpID09PSAwID8gXCIvKlwiICsgbm9kZS5jb21tZW50ICsgXCIqL1wiIDogXCJcIjtcbiAgICAgICAgfSxcbiAgICAgICAgXCJjdXN0b20tbWVkaWFcIjogZnVuY3Rpb24gY3VzdG9tTWVkaWEobm9kZSkge1xuICAgICAgICAgICAgcmV0dXJuIFwiQGN1c3RvbS1tZWRpYSBcIiArIG5vZGUubmFtZSArIFwiIFwiICsgbm9kZS5tZWRpYSArIFwiO1wiO1xuICAgICAgICB9LFxuICAgICAgICBkZWNsYXJhdGlvbjogZnVuY3Rpb24gZGVjbGFyYXRpb24obm9kZSkge1xuICAgICAgICAgICAgcmV0dXJuIG5vZGUucHJvcGVydHkgKyBcIjpcIiArIG5vZGUudmFsdWUgKyBcIjtcIjtcbiAgICAgICAgfSxcbiAgICAgICAgZG9jdW1lbnQ6IGZ1bmN0aW9uIGRvY3VtZW50KG5vZGUpIHtcbiAgICAgICAgICAgIHJldHVybiBcIkBcIiArIChub2RlLnZlbmRvciB8fCBcIlwiKSArIFwiZG9jdW1lbnQgXCIgKyBub2RlLmRvY3VtZW50ICsgXCJ7XCIgKyB2aXNpdChub2RlLnJ1bGVzKSArIFwifVwiO1xuICAgICAgICB9LFxuICAgICAgICBcImZvbnQtZmFjZVwiOiBmdW5jdGlvbiBmb250RmFjZShub2RlKSB7XG4gICAgICAgICAgICByZXR1cm4gXCJAZm9udC1mYWNlXCIgKyBcIntcIiArIHZpc2l0KG5vZGUuZGVjbGFyYXRpb25zKSArIFwifVwiO1xuICAgICAgICB9LFxuICAgICAgICBob3N0OiBmdW5jdGlvbiBob3N0KG5vZGUpIHtcbiAgICAgICAgICAgIHJldHVybiBcIkBob3N0XCIgKyBcIntcIiArIHZpc2l0KG5vZGUucnVsZXMpICsgXCJ9XCI7XG4gICAgICAgIH0sXG4gICAgICAgIGltcG9ydDogZnVuY3Rpb24gX2ltcG9ydChub2RlKSB7XG4gICAgICAgICAgICByZXR1cm4gXCJAaW1wb3J0IFwiICsgbm9kZS5uYW1lICsgXCI7XCI7XG4gICAgICAgIH0sXG4gICAgICAgIGtleWZyYW1lOiBmdW5jdGlvbiBrZXlmcmFtZShub2RlKSB7XG4gICAgICAgICAgICByZXR1cm4gbm9kZS52YWx1ZXMuam9pbihcIixcIikgKyBcIntcIiArIHZpc2l0KG5vZGUuZGVjbGFyYXRpb25zKSArIFwifVwiO1xuICAgICAgICB9LFxuICAgICAgICBrZXlmcmFtZXM6IGZ1bmN0aW9uIGtleWZyYW1lcyhub2RlKSB7XG4gICAgICAgICAgICByZXR1cm4gXCJAXCIgKyAobm9kZS52ZW5kb3IgfHwgXCJcIikgKyBcImtleWZyYW1lcyBcIiArIG5vZGUubmFtZSArIFwie1wiICsgdmlzaXQobm9kZS5rZXlmcmFtZXMpICsgXCJ9XCI7XG4gICAgICAgIH0sXG4gICAgICAgIG1lZGlhOiBmdW5jdGlvbiBtZWRpYShub2RlKSB7XG4gICAgICAgICAgICByZXR1cm4gXCJAbWVkaWEgXCIgKyBub2RlLm1lZGlhICsgXCJ7XCIgKyB2aXNpdChub2RlLnJ1bGVzKSArIFwifVwiO1xuICAgICAgICB9LFxuICAgICAgICBuYW1lc3BhY2U6IGZ1bmN0aW9uIG5hbWVzcGFjZShub2RlKSB7XG4gICAgICAgICAgICByZXR1cm4gXCJAbmFtZXNwYWNlIFwiICsgbm9kZS5uYW1lICsgXCI7XCI7XG4gICAgICAgIH0sXG4gICAgICAgIHBhZ2U6IGZ1bmN0aW9uIHBhZ2Uobm9kZSkge1xuICAgICAgICAgICAgcmV0dXJuIFwiQHBhZ2UgXCIgKyAobm9kZS5zZWxlY3RvcnMubGVuZ3RoID8gbm9kZS5zZWxlY3RvcnMuam9pbihcIiwgXCIpIDogXCJcIikgKyBcIntcIiArIHZpc2l0KG5vZGUuZGVjbGFyYXRpb25zKSArIFwifVwiO1xuICAgICAgICB9LFxuICAgICAgICBcInBhZ2UtbWFyZ2luLWJveFwiOiBmdW5jdGlvbiBwYWdlTWFyZ2luQm94KG5vZGUpIHtcbiAgICAgICAgICAgIHJldHVybiBcIkBcIiArIG5vZGUubmFtZSArIFwie1wiICsgdmlzaXQobm9kZS5kZWNsYXJhdGlvbnMpICsgXCJ9XCI7XG4gICAgICAgIH0sXG4gICAgICAgIHJ1bGU6IGZ1bmN0aW9uIHJ1bGUobm9kZSkge1xuICAgICAgICAgICAgdmFyIGRlY2xzID0gbm9kZS5kZWNsYXJhdGlvbnM7XG4gICAgICAgICAgICBpZiAoZGVjbHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5vZGUuc2VsZWN0b3JzLmpvaW4oXCIsXCIpICsgXCJ7XCIgKyB2aXNpdChkZWNscykgKyBcIn1cIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgc3VwcG9ydHM6IGZ1bmN0aW9uIHN1cHBvcnRzKG5vZGUpIHtcbiAgICAgICAgICAgIHJldHVybiBcIkBzdXBwb3J0cyBcIiArIG5vZGUuc3VwcG9ydHMgKyBcIntcIiArIHZpc2l0KG5vZGUucnVsZXMpICsgXCJ9XCI7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGZ1bmN0aW9uIHZpc2l0KG5vZGVzKSB7XG4gICAgICAgIHZhciBidWYgPSBcIlwiO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgbiA9IG5vZGVzW2ldO1xuICAgICAgICAgICAgaWYgKGNiKSB7XG4gICAgICAgICAgICAgICAgY2Iobik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgdHh0ID0gcmVuZGVyTWV0aG9kc1tuLnR5cGVdKG4pO1xuICAgICAgICAgICAgaWYgKHR4dCkge1xuICAgICAgICAgICAgICAgIGJ1ZiArPSB0eHQ7XG4gICAgICAgICAgICAgICAgaWYgKHR4dC5sZW5ndGggJiYgbi5zZWxlY3RvcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgYnVmICs9IGRlbGltO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYnVmO1xuICAgIH1cbiAgICByZXR1cm4gdmlzaXQodHJlZS5zdHlsZXNoZWV0LnJ1bGVzKTtcbn1cblxuZnVuY3Rpb24gd2Fsa0Nzcyhub2RlLCBmbikge1xuICAgIG5vZGUucnVsZXMuZm9yRWFjaCgoZnVuY3Rpb24ocnVsZSkge1xuICAgICAgICBpZiAocnVsZS5ydWxlcykge1xuICAgICAgICAgICAgd2Fsa0NzcyhydWxlLCBmbik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJ1bGUua2V5ZnJhbWVzKSB7XG4gICAgICAgICAgICBydWxlLmtleWZyYW1lcy5mb3JFYWNoKChmdW5jdGlvbihrZXlmcmFtZSkge1xuICAgICAgICAgICAgICAgIGlmIChrZXlmcmFtZS50eXBlID09PSBcImtleWZyYW1lXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgZm4oa2V5ZnJhbWUuZGVjbGFyYXRpb25zLCBydWxlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFydWxlLmRlY2xhcmF0aW9ucykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGZuKHJ1bGUuZGVjbGFyYXRpb25zLCBub2RlKTtcbiAgICB9KSk7XG59XG5cbnZhciBWQVJfUFJPUF9JREVOVElGSUVSID0gXCItLVwiO1xuXG52YXIgVkFSX0ZVTkNfSURFTlRJRklFUiA9IFwidmFyXCI7XG5cbmZ1bmN0aW9uIHRyYW5zZm9ybUNzcyhjc3NEYXRhKSB7XG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICAgIHZhciBkZWZhdWx0cyA9IHtcbiAgICAgICAgcHJlc2VydmVTdGF0aWM6IHRydWUsXG4gICAgICAgIHByZXNlcnZlVmFyczogZmFsc2UsXG4gICAgICAgIHZhcmlhYmxlczoge30sXG4gICAgICAgIG9uV2FybmluZzogZnVuY3Rpb24gb25XYXJuaW5nKCkge31cbiAgICB9O1xuICAgIHZhciBzZXR0aW5ncyA9IF9leHRlbmRzKHt9LCBkZWZhdWx0cywgb3B0aW9ucyk7XG4gICAgaWYgKHR5cGVvZiBjc3NEYXRhID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIGNzc0RhdGEgPSBwYXJzZUNzcyhjc3NEYXRhLCBzZXR0aW5ncyk7XG4gICAgfVxuICAgIHdhbGtDc3MoY3NzRGF0YS5zdHlsZXNoZWV0LCAoZnVuY3Rpb24oZGVjbGFyYXRpb25zLCBub2RlKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGVjbGFyYXRpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgZGVjbCA9IGRlY2xhcmF0aW9uc1tpXTtcbiAgICAgICAgICAgIHZhciB0eXBlID0gZGVjbC50eXBlO1xuICAgICAgICAgICAgdmFyIHByb3AgPSBkZWNsLnByb3BlcnR5O1xuICAgICAgICAgICAgdmFyIHZhbHVlID0gZGVjbC52YWx1ZTtcbiAgICAgICAgICAgIGlmICh0eXBlICE9PSBcImRlY2xhcmF0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghc2V0dGluZ3MucHJlc2VydmVWYXJzICYmIHByb3AgJiYgcHJvcC5pbmRleE9mKFZBUl9QUk9QX0lERU5USUZJRVIpID09PSAwKSB7XG4gICAgICAgICAgICAgICAgZGVjbGFyYXRpb25zLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgICAgICBpLS07XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodmFsdWUuaW5kZXhPZihWQVJfRlVOQ19JREVOVElGSUVSICsgXCIoXCIpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgIHZhciByZXNvbHZlZFZhbHVlID0gcmVzb2x2ZVZhbHVlKHZhbHVlLCBzZXR0aW5ncyk7XG4gICAgICAgICAgICAgICAgaWYgKHJlc29sdmVkVmFsdWUgIT09IGRlY2wudmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZWRWYWx1ZSA9IGZpeE5lc3RlZENhbGMocmVzb2x2ZWRWYWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghc2V0dGluZ3MucHJlc2VydmVWYXJzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWNsLnZhbHVlID0gcmVzb2x2ZWRWYWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlY2xhcmF0aW9ucy5zcGxpY2UoaSwgMCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHR5cGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvcGVydHk6IHByb3AsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHJlc29sdmVkVmFsdWVcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgaSsrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSkpO1xuICAgIHJldHVybiBzdHJpbmdpZnlDc3MoY3NzRGF0YSk7XG59XG5cbmZ1bmN0aW9uIGZpeE5lc3RlZENhbGModmFsdWUpIHtcbiAgICB2YXIgcmVDYWxjVmFsID0gL2NhbGNcXCgoW14pXSspXFwpL2c7XG4gICAgKHZhbHVlLm1hdGNoKHJlQ2FsY1ZhbCkgfHwgW10pLmZvckVhY2goKGZ1bmN0aW9uKG1hdGNoKSB7XG4gICAgICAgIHZhciBuZXdWYWwgPSBcImNhbGNcIi5jb25jYXQobWF0Y2guc3BsaXQoXCJjYWxjXCIpLmpvaW4oXCJcIikpO1xuICAgICAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UobWF0Y2gsIG5ld1ZhbCk7XG4gICAgfSkpO1xuICAgIHJldHVybiB2YWx1ZTtcbn1cblxuZnVuY3Rpb24gcmVzb2x2ZVZhbHVlKHZhbHVlKSB7XG4gICAgdmFyIHNldHRpbmdzID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgICB2YXIgX19yZWN1cnNpdmVGYWxsYmFjayA9IGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkO1xuICAgIGlmICh2YWx1ZS5pbmRleE9mKFwidmFyKFwiKSA9PT0gLTEpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICB2YXIgdmFsdWVEYXRhID0gYmFsYW5jZWRNYXRjaChcIihcIiwgXCIpXCIsIHZhbHVlKTtcbiAgICBmdW5jdGlvbiByZXNvbHZlRnVuYyh2YWx1ZSkge1xuICAgICAgICB2YXIgbmFtZSA9IHZhbHVlLnNwbGl0KFwiLFwiKVswXS5yZXBsYWNlKC9bXFxzXFxuXFx0XS9nLCBcIlwiKTtcbiAgICAgICAgdmFyIGZhbGxiYWNrID0gKHZhbHVlLm1hdGNoKC8oPzpcXHMqLFxccyopezF9KC4qKT8vKSB8fCBbXSlbMV07XG4gICAgICAgIHZhciBtYXRjaCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzZXR0aW5ncy52YXJpYWJsZXMsIG5hbWUpID8gU3RyaW5nKHNldHRpbmdzLnZhcmlhYmxlc1tuYW1lXSkgOiB1bmRlZmluZWQ7XG4gICAgICAgIHZhciByZXBsYWNlbWVudCA9IG1hdGNoIHx8IChmYWxsYmFjayA/IFN0cmluZyhmYWxsYmFjaykgOiB1bmRlZmluZWQpO1xuICAgICAgICB2YXIgdW5yZXNvbHZlZEZhbGxiYWNrID0gX19yZWN1cnNpdmVGYWxsYmFjayB8fCB2YWx1ZTtcbiAgICAgICAgaWYgKCFtYXRjaCkge1xuICAgICAgICAgICAgc2V0dGluZ3Mub25XYXJuaW5nKCd2YXJpYWJsZSBcIicuY29uY2F0KG5hbWUsICdcIiBpcyB1bmRlZmluZWQnKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlcGxhY2VtZW50ICYmIHJlcGxhY2VtZW50ICE9PSBcInVuZGVmaW5lZFwiICYmIHJlcGxhY2VtZW50Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHJldHVybiByZXNvbHZlVmFsdWUocmVwbGFjZW1lbnQsIHNldHRpbmdzLCB1bnJlc29sdmVkRmFsbGJhY2spO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIFwidmFyKFwiLmNvbmNhdCh1bnJlc29sdmVkRmFsbGJhY2ssIFwiKVwiKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoIXZhbHVlRGF0YSkge1xuICAgICAgICBpZiAodmFsdWUuaW5kZXhPZihcInZhcihcIikgIT09IC0xKSB7XG4gICAgICAgICAgICBzZXR0aW5ncy5vbldhcm5pbmcoJ21pc3NpbmcgY2xvc2luZyBcIilcIiBpbiB0aGUgdmFsdWUgXCInLmNvbmNhdCh2YWx1ZSwgJ1wiJykpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9IGVsc2UgaWYgKHZhbHVlRGF0YS5wcmUuc2xpY2UoLTMpID09PSBcInZhclwiKSB7XG4gICAgICAgIHZhciBpc0VtcHR5VmFyRnVuYyA9IHZhbHVlRGF0YS5ib2R5LnRyaW0oKS5sZW5ndGggPT09IDA7XG4gICAgICAgIGlmIChpc0VtcHR5VmFyRnVuYykge1xuICAgICAgICAgICAgc2V0dGluZ3Mub25XYXJuaW5nKFwidmFyKCkgbXVzdCBjb250YWluIGEgbm9uLXdoaXRlc3BhY2Ugc3RyaW5nXCIpO1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlRGF0YS5wcmUuc2xpY2UoMCwgLTMpICsgcmVzb2x2ZUZ1bmModmFsdWVEYXRhLmJvZHkpICsgcmVzb2x2ZVZhbHVlKHZhbHVlRGF0YS5wb3N0LCBzZXR0aW5ncyk7XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdmFsdWVEYXRhLnByZSArIFwiKFwiLmNvbmNhdChyZXNvbHZlVmFsdWUodmFsdWVEYXRhLmJvZHksIHNldHRpbmdzKSwgXCIpXCIpICsgcmVzb2x2ZVZhbHVlKHZhbHVlRGF0YS5wb3N0LCBzZXR0aW5ncyk7XG4gICAgfVxufVxuXG52YXIgaXNCcm93c2VyID0gdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIjtcblxudmFyIGlzTmF0aXZlU3VwcG9ydCA9IGlzQnJvd3NlciAmJiB3aW5kb3cuQ1NTICYmIHdpbmRvdy5DU1Muc3VwcG9ydHMgJiYgd2luZG93LkNTUy5zdXBwb3J0cyhcIigtLWE6IDApXCIpO1xuXG52YXIgY291bnRlcnMgPSB7XG4gICAgZ3JvdXA6IDAsXG4gICAgam9iOiAwXG59O1xuXG52YXIgZGVmYXVsdHMgPSB7XG4gICAgcm9vdEVsZW1lbnQ6IGlzQnJvd3NlciA/IGRvY3VtZW50IDogbnVsbCxcbiAgICBzaGFkb3dET006IGZhbHNlLFxuICAgIGluY2x1ZGU6IFwic3R5bGUsbGlua1tyZWw9c3R5bGVzaGVldF1cIixcbiAgICBleGNsdWRlOiBcIlwiLFxuICAgIHZhcmlhYmxlczoge30sXG4gICAgb25seUxlZ2FjeTogdHJ1ZSxcbiAgICBwcmVzZXJ2ZVN0YXRpYzogdHJ1ZSxcbiAgICBwcmVzZXJ2ZVZhcnM6IGZhbHNlLFxuICAgIHNpbGVudDogZmFsc2UsXG4gICAgdXBkYXRlRE9NOiB0cnVlLFxuICAgIHVwZGF0ZVVSTHM6IHRydWUsXG4gICAgd2F0Y2g6IG51bGwsXG4gICAgb25CZWZvcmVTZW5kOiBmdW5jdGlvbiBvbkJlZm9yZVNlbmQoKSB7fSxcbiAgICBvbkVycm9yOiBmdW5jdGlvbiBvbkVycm9yKCkge30sXG4gICAgb25XYXJuaW5nOiBmdW5jdGlvbiBvbldhcm5pbmcoKSB7fSxcbiAgICBvblN1Y2Nlc3M6IGZ1bmN0aW9uIG9uU3VjY2VzcygpIHt9LFxuICAgIG9uQ29tcGxldGU6IGZ1bmN0aW9uIG9uQ29tcGxldGUoKSB7fSxcbiAgICBvbkZpbmFsbHk6IGZ1bmN0aW9uIG9uRmluYWxseSgpIHt9XG59O1xuXG52YXIgcmVnZXggPSB7XG4gICAgY3NzQ29tbWVudHM6IC9cXC9cXCpbXFxzXFxTXSs/XFwqXFwvL2csXG4gICAgY3NzS2V5ZnJhbWVzOiAvQCg/Oi1cXHcqLSk/a2V5ZnJhbWVzLyxcbiAgICBjc3NNZWRpYVF1ZXJpZXM6IC9AbWVkaWFbXntdK1xceyhbXFxzXFxTXSs/fSlcXHMqfS9nLFxuICAgIGNzc1VybHM6IC91cmxcXCgoPyFbJ1wiXT8oPzpkYXRhfGh0dHB8XFwvXFwvKTopWydcIl0/KFteJ1wiKV0qKVsnXCJdP1xcKS9nLFxuICAgIGNzc1ZhckRlY2xSdWxlczogLyg/OjooPzpyb290fGhvc3QpKD8hWy46IyhdKVtcXHMsXSpbXntdKntcXHMqW159XSp9KS9nLFxuICAgIGNzc1ZhckRlY2xzOiAvKD86W1xccztdKikoLXsyfVxcd1tcXHctXSopKD86XFxzKjpcXHMqKShbXjtdKik7L2csXG4gICAgY3NzVmFyRnVuYzogL3ZhclxcKFxccyotLVtcXHctXS8sXG4gICAgY3NzVmFyczogLyg/Oig/OjooPzpyb290fGhvc3QpKD8hWy46IyhdKVtcXHMsXSpbXntdKntcXHMqW147XSo7KlxccyopfCg/OnZhclxcKFxccyopKSgtLVteOildKykoPzpcXHMqWzopXSkvXG59O1xuXG52YXIgdmFyaWFibGVTdG9yZSA9IHtcbiAgICBkb206IHt9LFxuICAgIGpvYjoge30sXG4gICAgdXNlcjoge31cbn07XG5cbnZhciBjc3NWYXJzSXNSdW5uaW5nID0gZmFsc2U7XG5cbnZhciBjc3NWYXJzT2JzZXJ2ZXIgPSBudWxsO1xuXG52YXIgY3NzVmFyc1NyY05vZGVDb3VudCA9IDA7XG5cbnZhciBkZWJvdW5jZVRpbWVyID0gbnVsbDtcblxudmFyIGlzU2hhZG93RE9NUmVhZHkgPSBmYWxzZTtcblxuLyoqXG4gKiBGZXRjaGVzLCBwYXJzZXMsIGFuZCB0cmFuc2Zvcm1zIENTUyBjdXN0b20gcHJvcGVydGllcyBmcm9tIHNwZWNpZmllZFxuICogPHN0eWxlPiBhbmQgPGxpbms+IGVsZW1lbnRzIGludG8gc3RhdGljIHZhbHVlcywgdGhlbiBhcHBlbmRzIGEgbmV3IDxzdHlsZT5cbiAqIGVsZW1lbnQgd2l0aCBzdGF0aWMgdmFsdWVzIHRvIHRoZSBET00gdG8gcHJvdmlkZSBDU1MgY3VzdG9tIHByb3BlcnR5XG4gKiBjb21wYXRpYmlsaXR5IGZvciBsZWdhY3kgYnJvd3NlcnMuIEFsc28gcHJvdmlkZXMgYSBzaW5nbGUgaW50ZXJmYWNlIGZvclxuICogbGl2ZSB1cGRhdGVzIG9mIHJ1bnRpbWUgdmFsdWVzIGluIGJvdGggbW9kZXJuIGFuZCBsZWdhY3kgYnJvd3NlcnMuXG4gKlxuICogQHByZXNlcnZlXG4gKiBAcGFyYW0ge29iamVjdH0gICBbb3B0aW9uc10gT3B0aW9ucyBvYmplY3RcbiAqIEBwYXJhbSB7b2JqZWN0fSAgIFtvcHRpb25zLnJvb3RFbGVtZW50PWRvY3VtZW50XSBSb290IGVsZW1lbnQgdG8gdHJhdmVyc2UgZm9yXG4gKiAgICAgICAgICAgICAgICAgICA8bGluaz4gYW5kIDxzdHlsZT4gbm9kZXNcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gIFtvcHRpb25zLnNoYWRvd0RPTT1mYWxzZV0gRGV0ZXJtaW5lcyBpZiBzaGFkb3cgRE9NIDxsaW5rPlxuICogICAgICAgICAgICAgICAgICAgYW5kIDxzdHlsZT4gbm9kZXMgd2lsbCBiZSBwcm9jZXNzZWQuXG4gKiBAcGFyYW0ge3N0cmluZ30gICBbb3B0aW9ucy5pbmNsdWRlPVwic3R5bGUsbGlua1tyZWw9c3R5bGVzaGVldF1cIl0gQ1NTIHNlbGVjdG9yXG4gKiAgICAgICAgICAgICAgICAgICBtYXRjaGluZyA8bGluayByZT1cInN0eWxlc2hlZXRcIj4gYW5kIDxzdHlsZT4gbm9kZXMgdG9cbiAqICAgICAgICAgICAgICAgICAgIHByb2Nlc3NcbiAqIEBwYXJhbSB7c3RyaW5nfSAgIFtvcHRpb25zLmV4Y2x1ZGVdIENTUyBzZWxlY3RvciBtYXRjaGluZyA8bGlua1xuICogICAgICAgICAgICAgICAgICAgcmVsPVwic3R5bGVoc2VldFwiPiBhbmQgPHN0eWxlPiBub2RlcyB0byBleGNsdWRlIGZyb20gdGhvc2VcbiAqICAgICAgICAgICAgICAgICAgIG1hdGNoZXMgYnkgb3B0aW9ucy5pbmNsdWRlXG4gKiBAcGFyYW0ge29iamVjdH0gICBbb3B0aW9ucy52YXJpYWJsZXNdIEEgbWFwIG9mIGN1c3RvbSBwcm9wZXJ0eSBuYW1lL3ZhbHVlXG4gKiAgICAgICAgICAgICAgICAgICBwYWlycy4gUHJvcGVydHkgbmFtZXMgY2FuIG9taXQgb3IgaW5jbHVkZSB0aGUgbGVhZGluZ1xuICogICAgICAgICAgICAgICAgICAgZG91YmxlLWh5cGhlbiAo4oCUKSwgYW5kIHZhbHVlcyBzcGVjaWZpZWQgd2lsbCBvdmVycmlkZVxuICogICAgICAgICAgICAgICAgICAgcHJldmlvdXMgdmFsdWVzXG4gKiBAcGFyYW0ge2Jvb2xlYW59ICBbb3B0aW9ucy5vbmx5TGVnYWN5PXRydWVdIERldGVybWluZXMgaWYgdGhlIHBvbnlmaWxsIHdpbGxcbiAqICAgICAgICAgICAgICAgICAgIG9ubHkgZ2VuZXJhdGUgbGVnYWN5LWNvbXBhdGlibGUgQ1NTIGluIGJyb3dzZXJzIHRoYXQgbGFja1xuICogICAgICAgICAgICAgICAgICAgbmF0aXZlIHN1cHBvcnQgKGkuZS4sIGxlZ2FjeSBicm93c2VycylcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gIFtvcHRpb25zLnByZXNlcnZlU3RhdGljPXRydWVdIERldGVybWluZXMgaWYgQ1NTXG4gKiAgICAgICAgICAgICAgICAgICBkZWNsYXJhdGlvbnMgdGhhdCBkbyBub3QgcmVmZXJlbmNlIGEgY3VzdG9tIHByb3BlcnR5IHdpbGxcbiAqICAgICAgICAgICAgICAgICAgIGJlIHByZXNlcnZlZCBpbiB0aGUgdHJhbnNmb3JtZWQgQ1NTXG4gKiBAcGFyYW0ge2Jvb2xlYW59ICBbb3B0aW9ucy5wcmVzZXJ2ZVZhcnM9ZmFsc2VdIERldGVybWluZXMgaWYgQ1NTIGN1c3RvbVxuICogICAgICAgICAgICAgICAgICAgcHJvcGVydHkgZGVjbGFyYXRpb25zIHdpbGwgYmUgcHJlc2VydmVkIGluIHRoZSB0cmFuc2Zvcm1lZFxuICogICAgICAgICAgICAgICAgICAgQ1NTXG4gKiBAcGFyYW0ge2Jvb2xlYW59ICBbb3B0aW9ucy5zaWxlbnQ9ZmFsc2VdIERldGVybWluZXMgaWYgd2FybmluZyBhbmQgZXJyb3JcbiAqICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VzIHdpbGwgYmUgZGlzcGxheWVkIG9uIHRoZSBjb25zb2xlXG4gKiBAcGFyYW0ge2Jvb2xlYW59ICBbb3B0aW9ucy51cGRhdGVET009dHJ1ZV0gRGV0ZXJtaW5lcyBpZiB0aGUgcG9ueWZpbGwgd2lsbFxuICogICAgICAgICAgICAgICAgICAgdXBkYXRlIHRoZSBET00gYWZ0ZXIgcHJvY2Vzc2luZyBDU1MgY3VzdG9tIHByb3BlcnRpZXNcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gIFtvcHRpb25zLnVwZGF0ZVVSTHM9dHJ1ZV0gRGV0ZXJtaW5lcyBpZiB0aGUgcG9ueWZpbGwgd2lsbFxuICogICAgICAgICAgICAgICAgICAgY29udmVydCByZWxhdGl2ZSB1cmwoKSBwYXRocyB0byBhYnNvbHV0ZSB1cmxzXG4gKiBAcGFyYW0ge2Jvb2xlYW59ICBbb3B0aW9ucy53YXRjaD1mYWxzZV0gRGV0ZXJtaW5lcyBpZiBhIE11dGF0aW9uT2JzZXJ2ZXIgd2lsbFxuICogICAgICAgICAgICAgICAgICAgYmUgY3JlYXRlZCB0aGF0IHdpbGwgZXhlY3V0ZSB0aGUgcG9ueWZpbGwgd2hlbiBhIDxsaW5rPiBvclxuICogICAgICAgICAgICAgICAgICAgPHN0eWxlPiBET00gbXV0YXRpb24gaXMgb2JzZXJ2ZWRcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IFtvcHRpb25zLm9uQmVmb3JlU2VuZF0gQ2FsbGJhY2sgYmVmb3JlIFhIUiBpcyBzZW50LiBQYXNzZXNcbiAqICAgICAgICAgICAgICAgICAgIDEpIHRoZSBYSFIgb2JqZWN0LCAyKSBzb3VyY2Ugbm9kZSByZWZlcmVuY2UsIGFuZCAzKSB0aGVcbiAqICAgICAgICAgICAgICAgICAgIHNvdXJjZSBVUkwgYXMgYXJndW1lbnRzXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBbb3B0aW9ucy5vbkVycm9yXSBDYWxsYmFjayBhZnRlciBhIENTUyBwYXJzaW5nIGVycm9yIGhhc1xuICogICAgICAgICAgICAgICAgICAgb2NjdXJyZWQgb3IgYW4gWEhSIHJlcXVlc3QgaGFzIGZhaWxlZC4gUGFzc2VzIDEpIGFuIGVycm9yXG4gKiAgICAgICAgICAgICAgICAgICBtZXNzYWdlLCBhbmQgMikgc291cmNlIG5vZGUgcmVmZXJlbmNlLCAzKSB4aHIsIGFuZCA0IHVybCBhc1xuICogICAgICAgICAgICAgICAgICAgYXJndW1lbnRzLlxuICogQHBhcmFtIHtmdW5jdGlvbn0gW29wdGlvbnMub25XYXJuaW5nXSBDYWxsYmFjayBhZnRlciBlYWNoIENTUyBwYXJzaW5nIHdhcm5pbmdcbiAqICAgICAgICAgICAgICAgICAgIGhhcyBvY2N1cnJlZC4gUGFzc2VzIDEpIGEgd2FybmluZyBtZXNzYWdlIGFzIGFuIGFyZ3VtZW50LlxuICogQHBhcmFtIHtmdW5jdGlvbn0gW29wdGlvbnMub25TdWNjZXNzXSBDYWxsYmFjayBhZnRlciBDU1MgZGF0YSBoYXMgYmVlblxuICogICAgICAgICAgICAgICAgICAgY29sbGVjdGVkIGZyb20gZWFjaCBub2RlIGFuZCBiZWZvcmUgQ1NTIGN1c3RvbSBwcm9wZXJ0aWVzXG4gKiAgICAgICAgICAgICAgICAgICBoYXZlIGJlZW4gdHJhbnNmb3JtZWQuIEFsbG93cyBtb2RpZnlpbmcgdGhlIENTUyBkYXRhIGJlZm9yZVxuICogICAgICAgICAgICAgICAgICAgaXQgaXMgdHJhbnNmb3JtZWQgYnkgcmV0dXJuaW5nIGFueSBzdHJpbmcgdmFsdWUgKG9yIGZhbHNlXG4gKiAgICAgICAgICAgICAgICAgICB0byBza2lwKS4gUGFzc2VzIDEpIENTUyB0ZXh0LCAyKSBzb3VyY2Ugbm9kZSByZWZlcmVuY2UsIGFuZFxuICogICAgICAgICAgICAgICAgICAgMykgdGhlIHNvdXJjZSBVUkwgYXMgYXJndW1lbnRzLlxuICogQHBhcmFtIHtmdW5jdGlvbn0gW29wdGlvbnMub25Db21wbGV0ZV0gQ2FsbGJhY2sgYWZ0ZXIgYWxsIENTUyBoYXMgYmVlblxuICogICAgICAgICAgICAgICAgICAgcHJvY2Vzc2VkLCBsZWdhY3ktY29tcGF0aWJsZSBDU1MgaGFzIGJlZW4gZ2VuZXJhdGVkLCBhbmRcbiAqICAgICAgICAgICAgICAgICAgIChvcHRpb25hbGx5KSB0aGUgRE9NIGhhcyBiZWVuIHVwZGF0ZWQuIFBhc3NlcyAxKSBhIENTU1xuICogICAgICAgICAgICAgICAgICAgc3RyaW5nIHdpdGggQ1NTIHZhcmlhYmxlIHZhbHVlcyByZXNvbHZlZCwgMikgYW4gYXJyYXkgb2ZcbiAqICAgICAgICAgICAgICAgICAgIG91dHB1dCA8c3R5bGU+IG5vZGUgcmVmZXJlbmNlcyB0aGF0IGhhdmUgYmVlbiBhcHBlbmRlZCB0b1xuICogICAgICAgICAgICAgICAgICAgdGhlIERPTSwgMykgYW4gb2JqZWN0IGNvbnRhaW5pbmcgYWxsIGN1c3RvbSBwcm9wZXJpZXMgbmFtZXNcbiAqICAgICAgICAgICAgICAgICAgIGFuZCB2YWx1ZXMsIGFuZCA0KSB0aGUgcG9ueWZpbGwgZXhlY3V0aW9uIHRpbWUgaW5cbiAqICAgICAgICAgICAgICAgICAgIG1pbGxpc2Vjb25kcy5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IFtvcHRpb25zLm9uRmluYWxseV0gQ2FsbGJhY2sgaW4gbW9kZXJuIGFuZCBsZWdhY3kgYnJvd3NlcnNcbiAqICAgICAgICAgICAgICAgICAgIGFmdGVyIHRoZSBwb255ZmlsbCBoYXMgZmluaXNoZWQgYWxsIHRhc2tzLiBQYXNzZXMgMSkgYVxuICogICAgICAgICAgICAgICAgICAgYm9vbGVhbiBpbmRpY2F0aW5nIGlmIHRoZSBsYXN0IHBvbnlmaWxsIGNhbGwgcmVzdWx0ZWQgaW4gYVxuICogICAgICAgICAgICAgICAgICAgc3R5bGUgY2hhbmdlLCAyKSBhIGJvb2xlYW4gaW5kaWNhdGluZyBpZiB0aGUgY3VycmVudFxuICogICAgICAgICAgICAgICAgICAgYnJvd3NlciBwcm92aWRlcyBuYXRpdmUgc3VwcG9ydCBmb3IgQ1NTIGN1c3RvbSBwcm9wZXJ0aWVzLFxuICogICAgICAgICAgICAgICAgICAgYW5kIDMpIHRoZSBwb255ZmlsbCBleGVjdXRpb24gdGltZSBpbiBtaWxsaXNlY29uZHMuXG4gKiBAZXhhbXBsZVxuICpcbiAqICAgY3NzVmFycyh7XG4gKiAgICAgcm9vdEVsZW1lbnQgICA6IGRvY3VtZW50LFxuICogICAgIHNoYWRvd0RPTSAgICAgOiBmYWxzZSxcbiAqICAgICBpbmNsdWRlICAgICAgIDogJ3N0eWxlLGxpbmtbcmVsPVwic3R5bGVzaGVldFwiXScsXG4gKiAgICAgZXhjbHVkZSAgICAgICA6ICcnLFxuICogICAgIHZhcmlhYmxlcyAgICAgOiB7fSxcbiAqICAgICBvbmx5TGVnYWN5ICAgIDogdHJ1ZSxcbiAqICAgICBwcmVzZXJ2ZVN0YXRpYzogdHJ1ZSxcbiAqICAgICBwcmVzZXJ2ZVZhcnMgIDogZmFsc2UsXG4gKiAgICAgc2lsZW50ICAgICAgICA6IGZhbHNlLFxuICogICAgIHVwZGF0ZURPTSAgICAgOiB0cnVlLFxuICogICAgIHVwZGF0ZVVSTHMgICAgOiB0cnVlLFxuICogICAgIHdhdGNoICAgICAgICAgOiBmYWxzZSxcbiAqICAgICBvbkJlZm9yZVNlbmQoeGhyLCBub2RlLCB1cmwpIHt9LFxuICogICAgIG9uRXJyb3IobWVzc2FnZSwgbm9kZSwgeGhyLCB1cmwpIHt9LFxuICogICAgIG9uV2FybmluZyhtZXNzYWdlKSB7fSxcbiAqICAgICBvblN1Y2Nlc3MoY3NzVGV4dCwgbm9kZSwgdXJsKSB7fSxcbiAqICAgICBvbkNvbXBsZXRlKGNzc1RleHQsIHN0eWxlTm9kZSwgY3NzVmFyaWFibGVzLCBiZW5jaG1hcmspIHt9LFxuICogICAgIG9uRmluYWxseShoYXNDaGFuZ2VkLCBoYXNOYXRpdmVTdXBwb3J0LCBiZW5jaG1hcmspXG4gKiAgIH0pO1xuICovIGZ1bmN0aW9uIGNzc1ZhcnMoKSB7XG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICAgIHZhciBtc2dQcmVmaXggPSBcImNzc1ZhcnMoKTogXCI7XG4gICAgdmFyIHNldHRpbmdzID0gX2V4dGVuZHMoe30sIGRlZmF1bHRzLCBvcHRpb25zKTtcbiAgICBmdW5jdGlvbiBoYW5kbGVFcnJvcihtZXNzYWdlLCBzb3VyY2VOb2RlLCB4aHIsIHVybCkge1xuICAgICAgICBpZiAoIXNldHRpbmdzLnNpbGVudCAmJiB3aW5kb3cuY29uc29sZSkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIlwiLmNvbmNhdChtc2dQcmVmaXgpLmNvbmNhdChtZXNzYWdlLCBcIlxcblwiKSwgc291cmNlTm9kZSk7XG4gICAgICAgIH1cbiAgICAgICAgc2V0dGluZ3Mub25FcnJvcihtZXNzYWdlLCBzb3VyY2VOb2RlLCB4aHIsIHVybCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGhhbmRsZVdhcm5pbmcobWVzc2FnZSkge1xuICAgICAgICBpZiAoIXNldHRpbmdzLnNpbGVudCAmJiB3aW5kb3cuY29uc29sZSkge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKFwiXCIuY29uY2F0KG1zZ1ByZWZpeCkuY29uY2F0KG1lc3NhZ2UpKTtcbiAgICAgICAgfVxuICAgICAgICBzZXR0aW5ncy5vbldhcm5pbmcobWVzc2FnZSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGhhbmRsZUZpbmFsbHkoaGFzQ2hhbmdlZCkge1xuICAgICAgICBzZXR0aW5ncy5vbkZpbmFsbHkoQm9vbGVhbihoYXNDaGFuZ2VkKSwgaXNOYXRpdmVTdXBwb3J0LCBnZXRUaW1lU3RhbXAoKSAtIHNldHRpbmdzLl9fYmVuY2htYXJrKTtcbiAgICB9XG4gICAgaWYgKCFpc0Jyb3dzZXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoc2V0dGluZ3Mud2F0Y2gpIHtcbiAgICAgICAgc2V0dGluZ3Mud2F0Y2ggPSBkZWZhdWx0cy53YXRjaDtcbiAgICAgICAgYWRkTXV0YXRpb25PYnNlcnZlcihzZXR0aW5ncyk7XG4gICAgICAgIGNzc1ZhcnMoc2V0dGluZ3MpO1xuICAgICAgICByZXR1cm47XG4gICAgfSBlbHNlIGlmIChzZXR0aW5ncy53YXRjaCA9PT0gZmFsc2UgJiYgY3NzVmFyc09ic2VydmVyKSB7XG4gICAgICAgIGNzc1ZhcnNPYnNlcnZlci5kaXNjb25uZWN0KCk7XG4gICAgICAgIGNzc1ZhcnNPYnNlcnZlciA9IG51bGw7XG4gICAgfVxuICAgIGlmICghc2V0dGluZ3MuX19iZW5jaG1hcmspIHtcbiAgICAgICAgaWYgKGNzc1ZhcnNJc1J1bm5pbmcgPT09IHNldHRpbmdzLnJvb3RFbGVtZW50KSB7XG4gICAgICAgICAgICBjc3NWYXJzRGVib3VuY2VkKG9wdGlvbnMpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHNldHRpbmdzLl9fYmVuY2htYXJrID0gZ2V0VGltZVN0YW1wKCk7XG4gICAgICAgIHNldHRpbmdzLmV4Y2x1ZGUgPSBbIGNzc1ZhcnNPYnNlcnZlciA/ICdbZGF0YS1jc3N2YXJzXTpub3QoW2RhdGEtY3NzdmFycz1cIlwiXSknIDogJ1tkYXRhLWNzc3ZhcnM9XCJvdXRcIl0nLCBzZXR0aW5ncy5leGNsdWRlIF0uZmlsdGVyKChmdW5jdGlvbihzZWxlY3Rvcikge1xuICAgICAgICAgICAgcmV0dXJuIHNlbGVjdG9yO1xuICAgICAgICB9KSkuam9pbihcIixcIik7XG4gICAgICAgIHNldHRpbmdzLnZhcmlhYmxlcyA9IGZpeFZhck5hbWVzKHNldHRpbmdzLnZhcmlhYmxlcyk7XG4gICAgICAgIGlmICghY3NzVmFyc09ic2VydmVyKSB7XG4gICAgICAgICAgICB2YXIgb3V0Tm9kZXMgPSBBcnJheS5hcHBseShudWxsLCBzZXR0aW5ncy5yb290RWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS1jc3N2YXJzPVwib3V0XCJdJykpO1xuICAgICAgICAgICAgb3V0Tm9kZXMuZm9yRWFjaCgoZnVuY3Rpb24ob3V0Tm9kZSkge1xuICAgICAgICAgICAgICAgIHZhciBkYXRhR3JvdXAgPSBvdXROb2RlLmdldEF0dHJpYnV0ZShcImRhdGEtY3NzdmFycy1ncm91cFwiKTtcbiAgICAgICAgICAgICAgICB2YXIgc3JjTm9kZSA9IGRhdGFHcm91cCA/IHNldHRpbmdzLnJvb3RFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLWNzc3ZhcnM9XCJzcmNcIl1bZGF0YS1jc3N2YXJzLWdyb3VwPVwiJy5jb25jYXQoZGF0YUdyb3VwLCAnXCJdJykpIDogbnVsbDtcbiAgICAgICAgICAgICAgICBpZiAoIXNyY05vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgb3V0Tm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG91dE5vZGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIGlmIChjc3NWYXJzU3JjTm9kZUNvdW50KSB7XG4gICAgICAgICAgICAgICAgdmFyIHNyY05vZGVzID0gc2V0dGluZ3Mucm9vdEVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEtY3NzdmFyc106bm90KFtkYXRhLWNzc3ZhcnM9XCJvdXRcIl0pJyk7XG4gICAgICAgICAgICAgICAgaWYgKHNyY05vZGVzLmxlbmd0aCA8IGNzc1ZhcnNTcmNOb2RlQ291bnQpIHtcbiAgICAgICAgICAgICAgICAgICAgY3NzVmFyc1NyY05vZGVDb3VudCA9IHNyY05vZGVzLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgdmFyaWFibGVTdG9yZS5kb20gPSB7fTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGRvY3VtZW50LnJlYWR5U3RhdGUgIT09IFwibG9hZGluZ1wiKSB7XG4gICAgICAgIGlmIChpc05hdGl2ZVN1cHBvcnQgJiYgc2V0dGluZ3Mub25seUxlZ2FjeSkge1xuICAgICAgICAgICAgdmFyIGhhc1ZhckNoYW5nZSA9IGZhbHNlO1xuICAgICAgICAgICAgaWYgKHNldHRpbmdzLnVwZGF0ZURPTSkge1xuICAgICAgICAgICAgICAgIHZhciB0YXJnZXRFbG0gPSBzZXR0aW5ncy5yb290RWxlbWVudC5ob3N0IHx8IChzZXR0aW5ncy5yb290RWxlbWVudCA9PT0gZG9jdW1lbnQgPyBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgOiBzZXR0aW5ncy5yb290RWxlbWVudCk7XG4gICAgICAgICAgICAgICAgT2JqZWN0LmtleXMoc2V0dGluZ3MudmFyaWFibGVzKS5mb3JFYWNoKChmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHZhclZhbHVlID0gc2V0dGluZ3MudmFyaWFibGVzW2tleV07XG4gICAgICAgICAgICAgICAgICAgIGhhc1ZhckNoYW5nZSA9IGhhc1ZhckNoYW5nZSB8fCB2YXJWYWx1ZSAhPT0gZ2V0Q29tcHV0ZWRTdHlsZSh0YXJnZXRFbG0pLmdldFByb3BlcnR5VmFsdWUoa2V5KTtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0RWxtLnN0eWxlLnNldFByb3BlcnR5KGtleSwgdmFyVmFsdWUpO1xuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGhhbmRsZUZpbmFsbHkoaGFzVmFyQ2hhbmdlKTtcbiAgICAgICAgfSBlbHNlIGlmICghaXNTaGFkb3dET01SZWFkeSAmJiAoc2V0dGluZ3Muc2hhZG93RE9NIHx8IHNldHRpbmdzLnJvb3RFbGVtZW50LnNoYWRvd1Jvb3QgfHwgc2V0dGluZ3Mucm9vdEVsZW1lbnQuaG9zdCkpIHtcbiAgICAgICAgICAgIGdldENzc0RhdGEoe1xuICAgICAgICAgICAgICAgIHJvb3RFbGVtZW50OiBkZWZhdWx0cy5yb290RWxlbWVudCxcbiAgICAgICAgICAgICAgICBpbmNsdWRlOiBkZWZhdWx0cy5pbmNsdWRlLFxuICAgICAgICAgICAgICAgIGV4Y2x1ZGU6IHNldHRpbmdzLmV4Y2x1ZGUsXG4gICAgICAgICAgICAgICAgc2tpcERpc2FibGVkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBvblN1Y2Nlc3M6IGZ1bmN0aW9uIG9uU3VjY2Vzcyhjc3NUZXh0LCBub2RlLCB1cmwpIHtcbiAgICAgICAgICAgICAgICAgICAgY3NzVGV4dCA9IGNzc1RleHQucmVwbGFjZShyZWdleC5jc3NDb21tZW50cywgXCJcIikucmVwbGFjZShyZWdleC5jc3NNZWRpYVF1ZXJpZXMsIFwiXCIpO1xuICAgICAgICAgICAgICAgICAgICBjc3NUZXh0ID0gKGNzc1RleHQubWF0Y2gocmVnZXguY3NzVmFyRGVjbFJ1bGVzKSB8fCBbXSkuam9pbihcIlwiKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNzc1RleHQgfHwgZmFsc2U7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBvbkNvbXBsZXRlOiBmdW5jdGlvbiBvbkNvbXBsZXRlKGNzc1RleHQsIGNzc0FycmF5LCBub2RlQXJyYXkpIHtcbiAgICAgICAgICAgICAgICAgICAgcGFyc2VWYXJzKGNzc1RleHQsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0b3JlOiB2YXJpYWJsZVN0b3JlLmRvbSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uV2FybmluZzogaGFuZGxlV2FybmluZ1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgaXNTaGFkb3dET01SZWFkeSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGNzc1ZhcnMoc2V0dGluZ3MpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY3NzVmFyc0lzUnVubmluZyA9IHNldHRpbmdzLnJvb3RFbGVtZW50O1xuICAgICAgICAgICAgZ2V0Q3NzRGF0YSh7XG4gICAgICAgICAgICAgICAgcm9vdEVsZW1lbnQ6IHNldHRpbmdzLnJvb3RFbGVtZW50LFxuICAgICAgICAgICAgICAgIGluY2x1ZGU6IHNldHRpbmdzLmluY2x1ZGUsXG4gICAgICAgICAgICAgICAgZXhjbHVkZTogc2V0dGluZ3MuZXhjbHVkZSxcbiAgICAgICAgICAgICAgICBza2lwRGlzYWJsZWQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgIG9uQmVmb3JlU2VuZDogc2V0dGluZ3Mub25CZWZvcmVTZW5kLFxuICAgICAgICAgICAgICAgIG9uRXJyb3I6IGZ1bmN0aW9uIG9uRXJyb3IoeGhyLCBub2RlLCB1cmwpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3BvbnNlVXJsID0geGhyLnJlc3BvbnNlVVJMIHx8IGdldEZ1bGxVcmwkMSh1cmwsIGxvY2F0aW9uLmhyZWYpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgc3RhdHVzVGV4dCA9IHhoci5zdGF0dXNUZXh0ID8gXCIoXCIuY29uY2F0KHhoci5zdGF0dXNUZXh0LCBcIilcIikgOiBcIlVuc3BlY2lmaWVkIEVycm9yXCIgKyAoeGhyLnN0YXR1cyA9PT0gMCA/IFwiIChwb3NzaWJseSBDT1JTIHJlbGF0ZWQpXCIgOiBcIlwiKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVycm9yTXNnID0gXCJDU1MgWEhSIEVycm9yOiBcIi5jb25jYXQocmVzcG9uc2VVcmwsIFwiIFwiKS5jb25jYXQoeGhyLnN0YXR1cywgXCIgXCIpLmNvbmNhdChzdGF0dXNUZXh0KTtcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlRXJyb3IoZXJyb3JNc2csIG5vZGUsIHhociwgcmVzcG9uc2VVcmwpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgb25TdWNjZXNzOiBmdW5jdGlvbiBvblN1Y2Nlc3MoY3NzVGV4dCwgbm9kZSwgdXJsKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciByZXR1cm5WYWwgPSBzZXR0aW5ncy5vblN1Y2Nlc3MoY3NzVGV4dCwgbm9kZSwgdXJsKTtcbiAgICAgICAgICAgICAgICAgICAgY3NzVGV4dCA9IHJldHVyblZhbCAhPT0gdW5kZWZpbmVkICYmIEJvb2xlYW4ocmV0dXJuVmFsKSA9PT0gZmFsc2UgPyBcIlwiIDogcmV0dXJuVmFsIHx8IGNzc1RleHQ7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzZXR0aW5ncy51cGRhdGVVUkxzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjc3NUZXh0ID0gZml4UmVsYXRpdmVDc3NVcmxzKGNzc1RleHQsIHVybCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNzc1RleHQ7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBvbkNvbXBsZXRlOiBmdW5jdGlvbiBvbkNvbXBsZXRlKGNzc1RleHQsIGNzc0FycmF5KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBub2RlQXJyYXkgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IFtdO1xuICAgICAgICAgICAgICAgICAgICB2YXIgY3VycmVudFZhcnMgPSBfZXh0ZW5kcyh7fSwgdmFyaWFibGVTdG9yZS5kb20sIHZhcmlhYmxlU3RvcmUudXNlcik7XG4gICAgICAgICAgICAgICAgICAgIHZhciBoYXNWYXJDaGFuZ2UgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgdmFyaWFibGVTdG9yZS5qb2IgPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgbm9kZUFycmF5LmZvckVhY2goKGZ1bmN0aW9uKG5vZGUsIGkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBub2RlQ1NTID0gY3NzQXJyYXlbaV07XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVnZXguY3NzVmFycy50ZXN0KG5vZGVDU1MpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNzc1RyZWUgPSBwYXJzZUNzcyhub2RlQ1NTLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmVzZXJ2ZVN0YXRpYzogc2V0dGluZ3MucHJlc2VydmVTdGF0aWMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVDb21tZW50czogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2VWYXJzKGNzc1RyZWUsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcnNlSG9zdDogQm9vbGVhbihzZXR0aW5ncy5yb290RWxlbWVudC5ob3N0KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0b3JlOiB2YXJpYWJsZVN0b3JlLmRvbSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uV2FybmluZzogaGFuZGxlV2FybmluZ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5fX2Nzc1ZhcnMgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmVlOiBjc3NUcmVlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZUVycm9yKGVyci5tZXNzYWdlLCBub2RlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgX2V4dGVuZHModmFyaWFibGVTdG9yZS5qb2IsIHZhcmlhYmxlU3RvcmUuZG9tKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNldHRpbmdzLnVwZGF0ZURPTSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX2V4dGVuZHModmFyaWFibGVTdG9yZS51c2VyLCBzZXR0aW5ncy52YXJpYWJsZXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2V4dGVuZHModmFyaWFibGVTdG9yZS5qb2IsIHZhcmlhYmxlU3RvcmUudXNlcik7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfZXh0ZW5kcyh2YXJpYWJsZVN0b3JlLmpvYiwgdmFyaWFibGVTdG9yZS51c2VyLCBzZXR0aW5ncy52YXJpYWJsZXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2V4dGVuZHMoY3VycmVudFZhcnMsIHNldHRpbmdzLnZhcmlhYmxlcyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaGFzVmFyQ2hhbmdlID0gY291bnRlcnMuam9iID4gMCAmJiBCb29sZWFuKE9iamVjdC5rZXlzKHZhcmlhYmxlU3RvcmUuam9iKS5sZW5ndGggPiBPYmplY3Qua2V5cyhjdXJyZW50VmFycykubGVuZ3RoIHx8IEJvb2xlYW4oT2JqZWN0LmtleXMoY3VycmVudFZhcnMpLmxlbmd0aCAmJiBPYmplY3Qua2V5cyh2YXJpYWJsZVN0b3JlLmpvYikuc29tZSgoZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFyaWFibGVTdG9yZS5qb2Jba2V5XSAhPT0gY3VycmVudFZhcnNba2V5XTtcbiAgICAgICAgICAgICAgICAgICAgfSkpKSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChoYXNWYXJDaGFuZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc2V0Q3NzTm9kZXMoc2V0dGluZ3Mucm9vdEVsZW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY3NzVmFycyhzZXR0aW5ncyk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgb3V0Q3NzQXJyYXkgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvdXROb2RlQXJyYXkgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBoYXNLZXlmcmFtZXNXaXRoVmFycyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNldHRpbmdzLnVwZGF0ZURPTSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvdW50ZXJzLmpvYisrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZUFycmF5LmZvckVhY2goKGZ1bmN0aW9uKG5vZGUsIGkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaXNTa2lwID0gIW5vZGUuX19jc3NWYXJzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChub2RlLl9fY3NzVmFycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtQ3NzKG5vZGUuX19jc3NWYXJzLnRyZWUsIF9leHRlbmRzKHt9LCBzZXR0aW5ncywge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhcmlhYmxlczogdmFyaWFibGVTdG9yZS5qb2IsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25XYXJuaW5nOiBoYW5kbGVXYXJuaW5nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgb3V0Q3NzID0gc3RyaW5naWZ5Q3NzKG5vZGUuX19jc3NWYXJzLnRyZWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNldHRpbmdzLnVwZGF0ZURPTSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBub2RlQ1NTID0gY3NzQXJyYXlbaV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGhhc0NTU1ZhckZ1bmMgPSByZWdleC5jc3NWYXJGdW5jLnRlc3Qobm9kZUNTUyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFub2RlLmdldEF0dHJpYnV0ZShcImRhdGEtY3NzdmFyc1wiKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlLnNldEF0dHJpYnV0ZShcImRhdGEtY3NzdmFyc1wiLCBcInNyY1wiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG91dENzcy5sZW5ndGggJiYgaGFzQ1NTVmFyRnVuYykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGF0YUdyb3VwID0gbm9kZS5nZXRBdHRyaWJ1dGUoXCJkYXRhLWNzc3ZhcnMtZ3JvdXBcIikgfHwgKytjb3VudGVycy5ncm91cDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG91dENzc05vU3BhY2VzID0gb3V0Q3NzLnJlcGxhY2UoL1xccy9nLCBcIlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG91dE5vZGUgPSBzZXR0aW5ncy5yb290RWxlbWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1jc3N2YXJzPVwib3V0XCJdW2RhdGEtY3NzdmFycy1ncm91cD1cIicuY29uY2F0KGRhdGFHcm91cCwgJ1wiXScpKSB8fCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhc0tleWZyYW1lc1dpdGhWYXJzID0gaGFzS2V5ZnJhbWVzV2l0aFZhcnMgfHwgcmVnZXguY3NzS2V5ZnJhbWVzLnRlc3Qob3V0Q3NzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNldHRpbmdzLnByZXNlcnZlU3RhdGljKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlLnNoZWV0LmRpc2FibGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW91dE5vZGUuaGFzQXR0cmlidXRlKFwiZGF0YS1jc3N2YXJzXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdXROb2RlLnNldEF0dHJpYnV0ZShcImRhdGEtY3NzdmFyc1wiLCBcIm91dFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAob3V0Q3NzTm9TcGFjZXMgPT09IG5vZGUudGV4dENvbnRlbnQucmVwbGFjZSgvXFxzL2csIFwiXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc1NraXAgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG91dE5vZGUgJiYgb3V0Tm9kZS5wYXJlbnROb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5yZW1vdmVBdHRyaWJ1dGUoXCJkYXRhLWNzc3ZhcnMtZ3JvdXBcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3V0Tm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG91dE5vZGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG91dENzc05vU3BhY2VzICE9PSBvdXROb2RlLnRleHRDb250ZW50LnJlcGxhY2UoL1xccy9nLCBcIlwiKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWyBub2RlLCBvdXROb2RlIF0uZm9yRWFjaCgoZnVuY3Rpb24obikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG4uc2V0QXR0cmlidXRlKFwiZGF0YS1jc3N2YXJzLWpvYlwiLCBjb3VudGVycy5qb2IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG4uc2V0QXR0cmlidXRlKFwiZGF0YS1jc3N2YXJzLWdyb3VwXCIsIGRhdGFHcm91cCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdXROb2RlLnRleHRDb250ZW50ID0gb3V0Q3NzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3V0Q3NzQXJyYXkucHVzaChvdXRDc3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3V0Tm9kZUFycmF5LnB1c2gob3V0Tm9kZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW91dE5vZGUucGFyZW50Tm9kZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUob3V0Tm9kZSwgbm9kZS5uZXh0U2libGluZyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChub2RlLnRleHRDb250ZW50LnJlcGxhY2UoL1xccy9nLCBcIlwiKSAhPT0gb3V0Q3NzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG91dENzc0FycmF5LnB1c2gob3V0Q3NzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlRXJyb3IoZXJyLm1lc3NhZ2UsIG5vZGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc1NraXApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUoXCJkYXRhLWNzc3ZhcnNcIiwgXCJza2lwXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW5vZGUuaGFzQXR0cmlidXRlKFwiZGF0YS1jc3N2YXJzLWpvYlwiKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlLnNldEF0dHJpYnV0ZShcImRhdGEtY3NzdmFycy1qb2JcIiwgY291bnRlcnMuam9iKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjc3NWYXJzU3JjTm9kZUNvdW50ID0gc2V0dGluZ3Mucm9vdEVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEtY3NzdmFyc106bm90KFtkYXRhLWNzc3ZhcnM9XCJvdXRcIl0pJykubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNldHRpbmdzLnNoYWRvd0RPTSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlbG1zID0gWyBzZXR0aW5ncy5yb290RWxlbWVudCBdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoc2V0dGluZ3Mucm9vdEVsZW1lbnQucXVlcnlTZWxlY3RvckFsbChcIipcIikpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgZWxtOyBlbG0gPSBlbG1zW2ldOyArK2kpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVsbS5zaGFkb3dSb290ICYmIGVsbS5zaGFkb3dSb290LnF1ZXJ5U2VsZWN0b3IoXCJzdHlsZVwiKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNoYWRvd1NldHRpbmdzID0gX2V4dGVuZHMoe30sIHNldHRpbmdzLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm9vdEVsZW1lbnQ6IGVsbS5zaGFkb3dSb290XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNzc1ZhcnMoc2hhZG93U2V0dGluZ3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNldHRpbmdzLnVwZGF0ZURPTSAmJiBoYXNLZXlmcmFtZXNXaXRoVmFycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpeEtleWZyYW1lcyhzZXR0aW5ncy5yb290RWxlbWVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBjc3NWYXJzSXNSdW5uaW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXR0aW5ncy5vbkNvbXBsZXRlKG91dENzc0FycmF5LmpvaW4oXCJcIiksIG91dE5vZGVBcnJheSwgSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSh2YXJpYWJsZVN0b3JlLmpvYikpLCBnZXRUaW1lU3RhbXAoKSAtIHNldHRpbmdzLl9fYmVuY2htYXJrKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZUZpbmFsbHkob3V0Tm9kZUFycmF5Lmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsIChmdW5jdGlvbiBpbml0KGV2dCkge1xuICAgICAgICAgICAgY3NzVmFycyhvcHRpb25zKTtcbiAgICAgICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsIGluaXQpO1xuICAgICAgICB9KSk7XG4gICAgfVxufVxuXG5jc3NWYXJzLnJlc2V0ID0gZnVuY3Rpb24oKSB7XG4gICAgY291bnRlcnMuam9iID0gMDtcbiAgICBjb3VudGVycy5ncm91cCA9IDA7XG4gICAgY3NzVmFyc0lzUnVubmluZyA9IGZhbHNlO1xuICAgIGlmIChjc3NWYXJzT2JzZXJ2ZXIpIHtcbiAgICAgICAgY3NzVmFyc09ic2VydmVyLmRpc2Nvbm5lY3QoKTtcbiAgICAgICAgY3NzVmFyc09ic2VydmVyID0gbnVsbDtcbiAgICB9XG4gICAgY3NzVmFyc1NyY05vZGVDb3VudCA9IDA7XG4gICAgZGVib3VuY2VUaW1lciA9IG51bGw7XG4gICAgaXNTaGFkb3dET01SZWFkeSA9IGZhbHNlO1xuICAgIGZvciAodmFyIHByb3AgaW4gdmFyaWFibGVTdG9yZSkge1xuICAgICAgICB2YXJpYWJsZVN0b3JlW3Byb3BdID0ge307XG4gICAgfVxufTtcblxuZnVuY3Rpb24gYWRkTXV0YXRpb25PYnNlcnZlcihzZXR0aW5ncykge1xuICAgIGZ1bmN0aW9uIGlzRGlzYWJsZWQobm9kZSkge1xuICAgICAgICB2YXIgaXNEaXNhYmxlZEF0dHIgPSBub2RlLmhhc0F0dHJpYnV0ZShcImRpc2FibGVkXCIpO1xuICAgICAgICB2YXIgaXNEaXNhYmxlZFNoZWV0ID0gKG5vZGUuc2hlZXQgfHwge30pLmRpc2FibGVkO1xuICAgICAgICByZXR1cm4gaXNEaXNhYmxlZEF0dHIgfHwgaXNEaXNhYmxlZFNoZWV0O1xuICAgIH1cbiAgICBmdW5jdGlvbiBpc0xpbmsobm9kZSkge1xuICAgICAgICB2YXIgaXNTdHlsZXNoZWV0ID0gbm9kZS50YWdOYW1lID09PSBcIkxJTktcIiAmJiAobm9kZS5nZXRBdHRyaWJ1dGUoXCJyZWxcIikgfHwgXCJcIikuaW5kZXhPZihcInN0eWxlc2hlZXRcIikgIT09IC0xO1xuICAgICAgICByZXR1cm4gaXNTdHlsZXNoZWV0ICYmICFpc0Rpc2FibGVkKG5vZGUpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBpc1N0eWxlKG5vZGUpIHtcbiAgICAgICAgcmV0dXJuIG5vZGUudGFnTmFtZSA9PT0gXCJTVFlMRVwiICYmICFpc0Rpc2FibGVkKG5vZGUpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBpc1ZhbGlkQWRkTXV0YXRpb24obXV0YXRpb25Ob2Rlcykge1xuICAgICAgICByZXR1cm4gQXJyYXkuYXBwbHkobnVsbCwgbXV0YXRpb25Ob2Rlcykuc29tZSgoZnVuY3Rpb24obm9kZSkge1xuICAgICAgICAgICAgdmFyIGlzRWxtID0gbm9kZS5ub2RlVHlwZSA9PT0gMTtcbiAgICAgICAgICAgIHZhciBoYXNBdHRyID0gaXNFbG0gJiYgbm9kZS5oYXNBdHRyaWJ1dGUoXCJkYXRhLWNzc3ZhcnNcIik7XG4gICAgICAgICAgICB2YXIgaXNTdHlsZVdpdGhWYXJzID0gaXNTdHlsZShub2RlKSAmJiByZWdleC5jc3NWYXJzLnRlc3Qobm9kZS50ZXh0Q29udGVudCk7XG4gICAgICAgICAgICB2YXIgaXNWYWxpZCA9ICFoYXNBdHRyICYmIChpc0xpbmsobm9kZSkgfHwgaXNTdHlsZVdpdGhWYXJzKTtcbiAgICAgICAgICAgIHJldHVybiBpc1ZhbGlkO1xuICAgICAgICB9KSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGlzVmFsaWRSZW1vdmVNdXRhdGlvbihtdXRhdGlvbk5vZGVzKSB7XG4gICAgICAgIHJldHVybiBBcnJheS5hcHBseShudWxsLCBtdXRhdGlvbk5vZGVzKS5zb21lKChmdW5jdGlvbihub2RlKSB7XG4gICAgICAgICAgICB2YXIgaXNFbG0gPSBub2RlLm5vZGVUeXBlID09PSAxO1xuICAgICAgICAgICAgdmFyIGlzT3V0Tm9kZSA9IGlzRWxtICYmIG5vZGUuZ2V0QXR0cmlidXRlKFwiZGF0YS1jc3N2YXJzXCIpID09PSBcIm91dFwiO1xuICAgICAgICAgICAgdmFyIGlzU3JjTm9kZSA9IGlzRWxtICYmIG5vZGUuZ2V0QXR0cmlidXRlKFwiZGF0YS1jc3N2YXJzXCIpID09PSBcInNyY1wiO1xuICAgICAgICAgICAgdmFyIGlzVmFsaWQgPSBpc1NyY05vZGU7XG4gICAgICAgICAgICBpZiAoaXNTcmNOb2RlIHx8IGlzT3V0Tm9kZSkge1xuICAgICAgICAgICAgICAgIHZhciBkYXRhR3JvdXAgPSBub2RlLmdldEF0dHJpYnV0ZShcImRhdGEtY3NzdmFycy1ncm91cFwiKTtcbiAgICAgICAgICAgICAgICB2YXIgb3JwaGFuTm9kZSA9IHNldHRpbmdzLnJvb3RFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLWNzc3ZhcnMtZ3JvdXA9XCInLmNvbmNhdChkYXRhR3JvdXAsICdcIl0nKSk7XG4gICAgICAgICAgICAgICAgaWYgKGlzU3JjTm9kZSkge1xuICAgICAgICAgICAgICAgICAgICByZXNldENzc05vZGVzKHNldHRpbmdzLnJvb3RFbGVtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgdmFyaWFibGVTdG9yZS5kb20gPSB7fTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG9ycGhhbk5vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgb3JwaGFuTm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG9ycGhhbk5vZGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBpc1ZhbGlkO1xuICAgICAgICB9KSk7XG4gICAgfVxuICAgIGlmICghd2luZG93Lk11dGF0aW9uT2JzZXJ2ZXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoY3NzVmFyc09ic2VydmVyKSB7XG4gICAgICAgIGNzc1ZhcnNPYnNlcnZlci5kaXNjb25uZWN0KCk7XG4gICAgICAgIGNzc1ZhcnNPYnNlcnZlciA9IG51bGw7XG4gICAgfVxuICAgIGNzc1ZhcnNPYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKChmdW5jdGlvbihtdXRhdGlvbnMpIHtcbiAgICAgICAgdmFyIGhhc1ZhbGlkTXV0YXRpb24gPSBtdXRhdGlvbnMuc29tZSgoZnVuY3Rpb24obXV0YXRpb24pIHtcbiAgICAgICAgICAgIHZhciBpc1ZhbGlkID0gZmFsc2U7XG4gICAgICAgICAgICBpZiAobXV0YXRpb24udHlwZSA9PT0gXCJhdHRyaWJ1dGVzXCIpIHtcbiAgICAgICAgICAgICAgICBpc1ZhbGlkID0gaXNMaW5rKG11dGF0aW9uLnRhcmdldCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG11dGF0aW9uLnR5cGUgPT09IFwiY2hpbGRMaXN0XCIpIHtcbiAgICAgICAgICAgICAgICBpc1ZhbGlkID0gaXNWYWxpZEFkZE11dGF0aW9uKG11dGF0aW9uLmFkZGVkTm9kZXMpIHx8IGlzVmFsaWRSZW1vdmVNdXRhdGlvbihtdXRhdGlvbi5yZW1vdmVkTm9kZXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGlzVmFsaWQ7XG4gICAgICAgIH0pKTtcbiAgICAgICAgaWYgKGhhc1ZhbGlkTXV0YXRpb24pIHtcbiAgICAgICAgICAgIGNzc1ZhcnMoc2V0dGluZ3MpO1xuICAgICAgICB9XG4gICAgfSkpO1xuICAgIGNzc1ZhcnNPYnNlcnZlci5vYnNlcnZlKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCwge1xuICAgICAgICBhdHRyaWJ1dGVzOiB0cnVlLFxuICAgICAgICBhdHRyaWJ1dGVGaWx0ZXI6IFsgXCJkaXNhYmxlZFwiLCBcImhyZWZcIiBdLFxuICAgICAgICBjaGlsZExpc3Q6IHRydWUsXG4gICAgICAgIHN1YnRyZWU6IHRydWVcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gY3NzVmFyc0RlYm91bmNlZChzZXR0aW5ncykge1xuICAgIHZhciBkZWxheSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogMTAwO1xuICAgIGNsZWFyVGltZW91dChkZWJvdW5jZVRpbWVyKTtcbiAgICBkZWJvdW5jZVRpbWVyID0gc2V0VGltZW91dCgoZnVuY3Rpb24oKSB7XG4gICAgICAgIHNldHRpbmdzLl9fYmVuY2htYXJrID0gbnVsbDtcbiAgICAgICAgY3NzVmFycyhzZXR0aW5ncyk7XG4gICAgfSksIGRlbGF5KTtcbn1cblxuZnVuY3Rpb24gZml4S2V5ZnJhbWVzKHJvb3RFbGVtZW50KSB7XG4gICAgdmFyIGFuaW1hdGlvbk5hbWVQcm9wID0gWyBcImFuaW1hdGlvbi1uYW1lXCIsIFwiLW1vei1hbmltYXRpb24tbmFtZVwiLCBcIi13ZWJraXQtYW5pbWF0aW9uLW5hbWVcIiBdLmZpbHRlcigoZnVuY3Rpb24ocHJvcCkge1xuICAgICAgICByZXR1cm4gZ2V0Q29tcHV0ZWRTdHlsZShkb2N1bWVudC5ib2R5KVtwcm9wXTtcbiAgICB9KSlbMF07XG4gICAgaWYgKGFuaW1hdGlvbk5hbWVQcm9wKSB7XG4gICAgICAgIHZhciBhbGxOb2RlcyA9IHJvb3RFbGVtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiKlwiKTtcbiAgICAgICAgdmFyIGtleWZyYW1lTm9kZXMgPSBbXTtcbiAgICAgICAgdmFyIG5hbWVNYXJrZXIgPSBcIl9fQ1NTVkFSU1BPTllGSUxMLUtFWUZSQU1FU19fXCI7XG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBhbGxOb2Rlcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgdmFyIG5vZGUgPSBhbGxOb2Rlc1tpXTtcbiAgICAgICAgICAgIHZhciBhbmltYXRpb25OYW1lID0gZ2V0Q29tcHV0ZWRTdHlsZShub2RlKVthbmltYXRpb25OYW1lUHJvcF07XG4gICAgICAgICAgICBpZiAoYW5pbWF0aW9uTmFtZSAhPT0gXCJub25lXCIpIHtcbiAgICAgICAgICAgICAgICBub2RlLnN0eWxlW2FuaW1hdGlvbk5hbWVQcm9wXSArPSBuYW1lTWFya2VyO1xuICAgICAgICAgICAgICAgIGtleWZyYW1lTm9kZXMucHVzaChub2RlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB2b2lkIGRvY3VtZW50LmJvZHkub2Zmc2V0SGVpZ2h0O1xuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9sZW4gPSBrZXlmcmFtZU5vZGVzLmxlbmd0aDsgX2kgPCBfbGVuOyBfaSsrKSB7XG4gICAgICAgICAgICB2YXIgbm9kZVN0eWxlID0ga2V5ZnJhbWVOb2Rlc1tfaV0uc3R5bGU7XG4gICAgICAgICAgICBub2RlU3R5bGVbYW5pbWF0aW9uTmFtZVByb3BdID0gbm9kZVN0eWxlW2FuaW1hdGlvbk5hbWVQcm9wXS5yZXBsYWNlKG5hbWVNYXJrZXIsIFwiXCIpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5mdW5jdGlvbiBmaXhSZWxhdGl2ZUNzc1VybHMoY3NzVGV4dCwgYmFzZVVybCkge1xuICAgIHZhciBjc3NVcmxzID0gY3NzVGV4dC5yZXBsYWNlKHJlZ2V4LmNzc0NvbW1lbnRzLCBcIlwiKS5tYXRjaChyZWdleC5jc3NVcmxzKSB8fCBbXTtcbiAgICBjc3NVcmxzLmZvckVhY2goKGZ1bmN0aW9uKGNzc1VybCkge1xuICAgICAgICB2YXIgb2xkVXJsID0gY3NzVXJsLnJlcGxhY2UocmVnZXguY3NzVXJscywgXCIkMVwiKTtcbiAgICAgICAgdmFyIG5ld1VybCA9IGdldEZ1bGxVcmwkMShvbGRVcmwsIGJhc2VVcmwpO1xuICAgICAgICBjc3NUZXh0ID0gY3NzVGV4dC5yZXBsYWNlKGNzc1VybCwgY3NzVXJsLnJlcGxhY2Uob2xkVXJsLCBuZXdVcmwpKTtcbiAgICB9KSk7XG4gICAgcmV0dXJuIGNzc1RleHQ7XG59XG5cbmZ1bmN0aW9uIGZpeFZhck5hbWVzKCkge1xuICAgIHZhciB2YXJPYmogPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICAgIHZhciByZUxlYWRpbmdIeXBoZW5zID0gL14tezJ9LztcbiAgICByZXR1cm4gT2JqZWN0LmtleXModmFyT2JqKS5yZWR1Y2UoKGZ1bmN0aW9uKG9iaiwgdmFsdWUpIHtcbiAgICAgICAgdmFyIGtleSA9IHJlTGVhZGluZ0h5cGhlbnMudGVzdCh2YWx1ZSkgPyB2YWx1ZSA6IFwiLS1cIi5jb25jYXQodmFsdWUucmVwbGFjZSgvXi0rLywgXCJcIikpO1xuICAgICAgICBvYmpba2V5XSA9IHZhck9ialt2YWx1ZV07XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfSksIHt9KTtcbn1cblxuZnVuY3Rpb24gZ2V0RnVsbFVybCQxKHVybCkge1xuICAgIHZhciBiYXNlID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBsb2NhdGlvbi5ocmVmO1xuICAgIHZhciBkID0gZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50KFwiXCIpO1xuICAgIHZhciBiID0gZC5jcmVhdGVFbGVtZW50KFwiYmFzZVwiKTtcbiAgICB2YXIgYSA9IGQuY3JlYXRlRWxlbWVudChcImFcIik7XG4gICAgZC5oZWFkLmFwcGVuZENoaWxkKGIpO1xuICAgIGQuYm9keS5hcHBlbmRDaGlsZChhKTtcbiAgICBiLmhyZWYgPSBiYXNlO1xuICAgIGEuaHJlZiA9IHVybDtcbiAgICByZXR1cm4gYS5ocmVmO1xufVxuXG5mdW5jdGlvbiBnZXRUaW1lU3RhbXAoKSB7XG4gICAgcmV0dXJuIGlzQnJvd3NlciAmJiAod2luZG93LnBlcmZvcm1hbmNlIHx8IHt9KS5ub3cgPyB3aW5kb3cucGVyZm9ybWFuY2Uubm93KCkgOiAobmV3IERhdGUpLmdldFRpbWUoKTtcbn1cblxuZnVuY3Rpb24gcmVzZXRDc3NOb2Rlcyhyb290RWxlbWVudCkge1xuICAgIHZhciByZXNldE5vZGVzID0gQXJyYXkuYXBwbHkobnVsbCwgcm9vdEVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEtY3NzdmFycz1cInNraXBcIl0sW2RhdGEtY3NzdmFycz1cInNyY1wiXScpKTtcbiAgICByZXNldE5vZGVzLmZvckVhY2goKGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgICAgcmV0dXJuIG5vZGUuc2V0QXR0cmlidXRlKFwiZGF0YS1jc3N2YXJzXCIsIFwiXCIpO1xuICAgIH0pKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY3NzVmFycztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNzcy12YXJzLXBvbnlmaWxsLmVzbS5qcy5tYXBcbiIsIi8qKiBAbW9kdWxlIERPTSAqL1xuXG4vKiBnbG9iYWwgSFRNTEVsZW1lbnQsIEhUTUxEb2N1bWVudCwgV2luZG93LCBFbGVtZW50ICovXG5cbmxldCBkb2N1bWVudCA9IHdpbmRvdy5kb2N1bWVudDtcblxuLyoqXG4gKiBTdGF0aWMgaW50ZXJmYWNlIGZvciBpbnRlcmFjdGluZyB3aXRoIHRoZSBET00gQVBJLlxuICogQG5hbWVzcGFjZVxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBET00ge1xuICBzdGF0aWMgc2V0dXAgKGQsIHApIHtcbiAgICBkb2N1bWVudCA9IGQ7XG4gIH1cblxuICAvKipcbiAgICogY3JlYXRlIGEgSFRNTEVsZW1lbnQgZnJvbSBhbmQgSFRNTCBzdHJpbmdcbiAgICogQHBhcmFtIHtzdHJpbmd9IGh0bWwgVGhlIEhUTUwgdG8gcGFyc2UgdG8gYSBET00gbm9kZS5cbiAgICogQHJldHVybiB7SFRNTEVsZW1lbnR9XG4gICAqL1xuICBzdGF0aWMgY3JlYXRlIChodG1sKSB7XG4gICAgaWYgKCdjcmVhdGVSYW5nZScgaW4gZG9jdW1lbnQpIHtcbiAgICAgIC8vIHByZWZlciB0aGlzIGltcGxlbWVudGF0aW9uIGFzIGl0IGhhcyB3aWRlciBicm93c2VyIHN1cHBvcnRcbiAgICAgIC8vIGFuZCBpdCdzIGJldHRlciBwZXJmb3JtaW5nLlxuICAgICAgLy8gc2VlIGh0dHBzOi8vZGF2aWR3YWxzaC5uYW1lL2NvbnZlcnQtaHRtbC1zdGluZ3MtZG9tLW5vZGVzXG4gICAgICBjb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIGNvbnN0IGZyYWcgPSBkb2N1bWVudC5jcmVhdGVSYW5nZSgpLmNyZWF0ZUNvbnRleHR1YWxGcmFnbWVudChodG1sKTtcbiAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChmcmFnKTtcbiAgICAgIHJldHVybiBjb250YWluZXI7XG4gICAgfVxuXG4gICAgLy8gZmFsbGJhY2sgdG8gdGhpcyBiZWNhdXNlIG9mIGEgYnVnIGluIGpzZG9tIHRoYXQgY2F1c2VzIHRlc3RzIHRvIGZhaWxcbiAgICAvLyBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9qc2RvbS9qc2RvbS9pc3N1ZXMvMzk5XG4gICAgcmV0dXJuIG5ldyBET01QYXJzZXIoKS5wYXJzZUZyb21TdHJpbmcoaHRtbCwgJ3RleHQvaHRtbCcpLmJvZHk7XG4gIH1cblxuICAvKipcbiAgICogcXVlcnkgdGhlIERPTSBmb3IgYSBnaXZlbiBjc3Mgc2VsZWN0b3JcbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcGFyZW50IE9wdGlvbmFsIGNvbnRleHQgdG8gdXNlIGZvciBhIHNlYXJjaC4gRGVmYXVsdHMgdG8gZG9jdW1lbnQgaWYgbm90IHByb3ZpZGVkLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gc2VsZWN0b3IgdGhlIENTUyBzZWxlY3RvciB0byBxdWVyeSBmb3JcbiAgICpcbiAgICogQHJldHVybnMge0hUTUxFbGVtZW50fSB0aGUgRklSU1Qgbm9kZSBpdCBmaW5kcywgaWYgYW55XG4gICAqL1xuICBzdGF0aWMgcXVlcnkgKHBhcmVudCwgc2VsZWN0b3IpIHtcbiAgICAvLyBGYWNhZGUsIHNoaWZ0aW5nIHRoZSBzZWxlY3RvciB0byB0aGUgcGFyZW50IGFyZ3VtZW50IGlmIG9ubHkgb25lXG4gICAgLy8gYXJndW1lbnQgaXMgcHJvdmlkZWRcbiAgICBpZiAoc2VsZWN0b3IgPT09IHVuZGVmaW5lZCkge1xuICAgICAgc2VsZWN0b3IgPSBwYXJlbnQ7XG4gICAgICBwYXJlbnQgPSBkb2N1bWVudDtcbiAgICB9XG5cbiAgICBpZiAoc2VsZWN0b3IgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCB8fCBzZWxlY3RvciBpbnN0YW5jZW9mIFdpbmRvdyB8fCBzZWxlY3RvciBpbnN0YW5jZW9mIEhUTUxEb2N1bWVudCkge1xuICAgICAgcmV0dXJuIHNlbGVjdG9yO1xuICAgIH1cblxuICAgIHJldHVybiBwYXJlbnQucXVlcnlTZWxlY3RvcihzZWxlY3Rvcik7XG4gIH1cblxuICAvKipcbiAgICogcXVlcnkgdGhlIERPTSBmb3IgYSBnaXZlbiBjc3Mgc2VsZWN0b3JcbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcGFyZW50IE9wdGlvbmFsIGNvbnRleHQgdG8gdXNlIGZvciBhIHNlYXJjaC4gRGVmYXVsdHMgdG8gZG9jdW1lbnQgaWYgbm90IHByb3ZpZGVkLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gc2VsZWN0b3IgdGhlIENTUyBzZWxlY3RvciB0byBxdWVyeSBmb3JcbiAgICpcbiAgICogQHJldHVybnMge0FycmF5fSB0aGUgRklSU1Qgbm9kZSBpdCBmaW5kcywgaWYgYW55XG4gICAqL1xuICBzdGF0aWMgcXVlcnlBbGwgKHBhcmVudCwgc2VsZWN0b3IpIHtcbiAgICAvLyBGYWNhZGUsIHNoaWZ0aW5nIHRoZSBzZWxlY3RvciB0byB0aGUgcGFyZW50IGFyZ3VtZW50IGlmIG9ubHkgb25lXG4gICAgLy8gYXJndW1lbnQgaXMgcHJvdmlkZWRcbiAgICBpZiAoc2VsZWN0b3IgPT09IHVuZGVmaW5lZCkge1xuICAgICAgc2VsZWN0b3IgPSBwYXJlbnQ7XG4gICAgICBwYXJlbnQgPSBkb2N1bWVudDtcbiAgICB9XG5cbiAgICAvLyBoYW5kbGUgdGhlIGNhc2Ugd2hlcmUgY2xpZW50IGNvZGUgaXMgdXNpbmcgYSBwb2ludGVyIHRvIGEgZG9tIG5vZGUgYW5kIGl0J3MgbnVsbCwgZS5nLiB0aGlzLl9jb250YWluZXJcbiAgICBpZiAocGFyZW50ID09IG51bGwpIHtcbiAgICAgIHBhcmVudCA9IGRvY3VtZW50O1xuICAgIH1cblxuICAgIGlmIChzZWxlY3RvciBpbnN0YW5jZW9mIEhUTUxFbGVtZW50IHx8IHNlbGVjdG9yIGluc3RhbmNlb2YgSFRNTERvY3VtZW50IHx8IHNlbGVjdG9yIGluc3RhbmNlb2YgV2luZG93KSB7XG4gICAgICByZXR1cm4gW3NlbGVjdG9yXTtcbiAgICB9XG5cbiAgICByZXR1cm4gQXJyYXkuZnJvbShwYXJlbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3RvcikpO1xuICB9XG5cbiAgc3RhdGljIG9uUmVhZHkgKGNiKSB7XG4gICAgaWYgKGRvY3VtZW50LnJlYWR5U3RhdGUgPT09ICdjb21wbGV0ZScgfHwgZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gJ2xvYWRlZCcgfHwgZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gJ2ludGVyYWN0aXZlJykge1xuICAgICAgY2IoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBET00ub24oZG9jdW1lbnQsICdET01Db250ZW50TG9hZGVkJywgY2IpO1xuICB9XG5cbiAgLyoqXG4gICAqIGNyZWF0ZUVsZSB3aWxsIGNyZWF0ZSBhIHtIVE1MRWxlbWVudH0gYW5kIGFwcGx5IHRoZSBwcm9wZXJ0aWVzIGF0dHJpYnV0ZXMgdGhyb3VnaCBhbiBvYmplY3QgcHJvdmlkZWQuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBlbCBUaGUgZWxlbWVudCBgdGFnYCBuYW1lIHRvIGNvbnN0cnVjdFxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0c19kYXRhIE9wdGlvbmFsIGF0dHJpYnV0ZXMgdG8gYXBwbHkgdG8gdGhlIG5ldyBIVE1MRWxlbWVudFxuICAgKi9cbiAgc3RhdGljIGNyZWF0ZUVsIChlbCwgb3B0c19kYXRhID0ge30pIHtcbiAgICBsZXQgbm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoZWwpO1xuICAgIGxldCBwcm9wcyA9IE9iamVjdC5rZXlzKG9wdHNfZGF0YSk7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAocHJvcHNbaV0gPT09ICdjbGFzcycpIHtcbiAgICAgICAgRE9NLmFkZENsYXNzKG5vZGUsIG9wdHNfZGF0YVtwcm9wc1tpXV0pO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgbm9kZVtwcm9wc1tpXV0gPSBvcHRzX2RhdGFbcHJvcHNbaV1dO1xuICAgIH1cblxuICAgIHJldHVybiBub2RlO1xuICB9XG5cbiAgc3RhdGljIGFwcGVuZCAocGFyZW50LCBub2RlKSB7XG4gICAgaWYgKG5vZGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgbm9kZSA9IHBhcmVudDtcbiAgICAgIHBhcmVudCA9IGRvY3VtZW50O1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgcGFyZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgcGFyZW50ID0gRE9NLnF1ZXJ5KHBhcmVudCk7XG4gICAgfVxuXG4gICAgLy8gU3VwcG9ydCBIVE1MIGluamVjdGlvbiBhcyB3ZWxsIGFzIEhUTUxFbGVtZW50IGFwcGVuZHNcbiAgICBpZiAodHlwZW9mIG5vZGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICBwYXJlbnQuaW5zZXJ0QWRqYWNlbnRIVE1MKCdhZnRlckJlZ2luJywgbm9kZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHBhcmVudC5hcHBlbmRDaGlsZChub2RlKTtcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgYWRkQ2xhc3MgKG5vZGUsIGNsYXNzTmFtZSkge1xuICAgIGlmICghbm9kZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGxldCBjbGFzc2VzID0gY2xhc3NOYW1lLnNwbGl0KCcsJyk7XG4gICAgbGV0IGxlbiA9IGNsYXNzZXMubGVuZ3RoO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgbm9kZS5jbGFzc0xpc3QuYWRkKGNsYXNzZXNbaV0pO1xuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBlbXB0eSAocGFyZW50KSB7XG4gICAgcGFyZW50LmlubmVySFRNTCA9ICcnO1xuICB9XG5cbiAgc3RhdGljIGNzcyAoc2VsZWN0b3IsIHN0eWxlcykge1xuICAgIGxldCBub2RlID0gRE9NLnF1ZXJ5KHNlbGVjdG9yKTtcblxuICAgIGZvciAobGV0IHByb3AgaW4gc3R5bGVzKSB7XG4gICAgICBub2RlLnN0eWxlW3Byb3BdID0gc3R5bGVzW3Byb3BdO1xuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBhdHRyIChzZWxlY3RvciwgYXR0ciwgdmFsKSB7XG4gICAgRE9NLnF1ZXJ5KHNlbGVjdG9yKS5zZXRBdHRyaWJ1dGUoYXR0ciwgdmFsKTtcbiAgfVxuXG4gIHN0YXRpYyBhdHRyaWJ1dGVzIChzZWxlY3RvciwgYXR0cnMpIHtcbiAgICBPYmplY3QuZW50cmllcyhhdHRycylcbiAgICAgIC5mb3JFYWNoKChbYXR0ciwgdmFsXSkgPT4gdGhpcy5hdHRyKHNlbGVjdG9yLCBhdHRyLCB2YWwpKTtcbiAgfVxuXG4gIHN0YXRpYyB0cmlnZ2VyIChzZWxlY3RvciwgZXZlbnQsIHNldHRpbmdzKSB7XG4gICAgbGV0IGUgPSBET00uX2N1c3RvbUV2ZW50KGV2ZW50LCBzZXR0aW5ncyk7XG4gICAgRE9NLnF1ZXJ5KHNlbGVjdG9yKS5kaXNwYXRjaEV2ZW50KGUpO1xuICB9XG5cbiAgLy8gVE9ETyAoYWdyb3cpIGludmVzdGlnYXRlIHJlbW92aW5nIHRoaXNcbiAgLy8gRXZlbnQgY29uc3RydWN0b3IgcG9seWZpbGxcbiAgc3RhdGljIF9jdXN0b21FdmVudCAoZXZlbnQsIHNldHRpbmdzKSB7XG4gICAgY29uc3QgX3NldHRpbmdzID0ge1xuICAgICAgYnViYmxlczogdHJ1ZSxcbiAgICAgIGNhbmNlbGFibGU6IHRydWUsXG4gICAgICBkZXRhaWw6IG51bGwsXG4gICAgICAuLi5zZXR0aW5nc1xuICAgIH07XG4gICAgY29uc3QgZXZ0ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0N1c3RvbUV2ZW50Jyk7XG4gICAgZXZ0LmluaXRDdXN0b21FdmVudChldmVudCwgX3NldHRpbmdzLmJ1YmJsZXMsIF9zZXR0aW5ncy5jYW5jZWxhYmxlLCBfc2V0dGluZ3MuZGV0YWlsKTtcbiAgICByZXR1cm4gZXZ0O1xuICB9XG5cbiAgc3RhdGljIG9uIChzZWxlY3RvciwgZXZ0LCBoYW5kbGVyKSB7XG4gICAgRE9NLnF1ZXJ5KHNlbGVjdG9yKS5hZGRFdmVudExpc3RlbmVyKGV2dCwgaGFuZGxlcik7XG4gIH1cblxuICBzdGF0aWMgb25jZSAoc2VsZWN0b3IsIGV2dCwgaGFuZGxlcikge1xuICAgIERPTS5xdWVyeShzZWxlY3RvcikuYWRkRXZlbnRMaXN0ZW5lcihldnQsIGhhbmRsZXIsIHsgb25jZTogdHJ1ZSB9KTtcbiAgfVxuXG4gIHN0YXRpYyBvZmYgKHNlbGVjdG9yLCBldnQsIGhhbmRsZXIpIHtcbiAgICBET00ucXVlcnkoc2VsZWN0b3IpLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZ0LCBoYW5kbGVyKTtcbiAgfVxuXG4gIHN0YXRpYyBkZWxlZ2F0ZSAoY3R4dCwgc2VsZWN0b3IsIGV2dCwgaGFuZGxlcikge1xuICAgIGxldCBlbCA9IERPTS5xdWVyeShjdHh0KTtcbiAgICBlbC5hZGRFdmVudExpc3RlbmVyKGV2dCwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBsZXQgdGFyZ2V0ID0gZXZlbnQudGFyZ2V0O1xuICAgICAgd2hpbGUgKCF0YXJnZXQuaXNFcXVhbE5vZGUoZWwpKSB7XG4gICAgICAgIGlmIChET00ubWF0Y2hlcyh0YXJnZXQsIHNlbGVjdG9yKSkge1xuICAgICAgICAgIGhhbmRsZXIoZXZlbnQsIHRhcmdldCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgdGFyZ2V0ID0gdGFyZ2V0LnBhcmVudE5vZGU7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvLyBUT0RPIChhZ3JvdykgaW52ZXN0aWdhdGUgcmVtb3ZpbmcgdGhpc1xuICAvLyBFbGVtZW50Lm1hdGNoZXMgcG9seWZpbGxcbiAgc3RhdGljIG1hdGNoZXMgKGVsZW1lbnQsIHBvdGVudGlhbE1hdGNoKSB7XG4gICAgaWYgKEVsZW1lbnQucHJvdG90eXBlLm1hdGNoZXMpIHtcbiAgICAgIHJldHVybiBlbGVtZW50Lm1hdGNoZXMocG90ZW50aWFsTWF0Y2gpO1xuICAgIH1cbiAgICBpZiAoRWxlbWVudC5wcm90b3R5cGUubXNNYXRjaGVzU2VsZWN0b3IpIHtcbiAgICAgIHJldHVybiBlbGVtZW50Lm1zTWF0Y2hlc1NlbGVjdG9yKHBvdGVudGlhbE1hdGNoKTtcbiAgICB9XG4gICAgaWYgKEVsZW1lbnQucHJvdG90eXBlLndlYmtpdE1hdGNoZXNTZWxlY3Rvcikge1xuICAgICAgcmV0dXJuIGVsZW1lbnQud2Via2l0TWF0Y2hlc1NlbGVjdG9yKHBvdGVudGlhbE1hdGNoKTtcbiAgICB9XG4gIH1cbn1cbiIsIi8qKiBAbW9kdWxlIFNlYXJjaFBhcmFtcyAqL1xuXG4vKiBnbG9iYWwgd2luZG93ICovXG5cbi8qKlxuICogU2VhcmNoUGFyYW1zIGlzIGEgY2xhc3MgdG8gZ2V0IHRoZSBzZWFyY2ggcGFyYW1zIGluIGEgVVJMLlxuICogSXQgaXMgYSByZXBsYWNlbWVudCBmb3IgVVJMLnNlYXJjaFBhcmFtcyBhbmQgVVJMU2VhcmNoUGFyYW1zIGZvciBicm93c2VycyBsaWtlIElFMTFcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2VhcmNoUGFyYW1zIHtcbiAgY29uc3RydWN0b3IgKHVybCkge1xuICAgIC8qKlxuICAgICAqIE1hcHBpbmcgb2YgYWxsIHF1ZXJ5IHBhcmFtZXRlcnMgaW4gdGhlIGdpdmVuIHVybCwgcXVlcnkgcGFyYW0gLT4gdmFsdWVcbiAgICAgKiBPbmx5IHVzZWQgaWYgVVJMU2VhcmNoUGFyYW1zIGRvZXMgbm90IGV4aXN0IGluIHRoZSB3aW5kb3dcbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5fcGFyYW1zID0ge307XG5cbiAgICBpZiAod2luZG93ICYmIHdpbmRvdy5VUkxTZWFyY2hQYXJhbXMpIHtcbiAgICAgIHJldHVybiBuZXcgVVJMU2VhcmNoUGFyYW1zKHVybCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX3BhcmFtcyA9IHRoaXMucGFyc2UodXJsKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogcGFyc2UgY3JlYXRlcyBhIG1hcHBpbmcgb2YgYWxsIHF1ZXJ5IHBhcmFtcyBpbiBhIGdpdmVuIHVybFxuICAgKiBUaGUgcXVlcnkgcGFyYW0gdmFsdWVzIGFyZSBkZWNvZGVkIGJlZm9yZSBiZWluZyBwdXQgaW4gdGhlIG1hcFxuICAgKiBUaHJlZSB0eXBlcyBvZiBpbnB1dCBhcmUgc3VwcG9ydGVkXG4gICAqICAgKDEpIGZ1bGwgVVJMIGUuZy4gaHR0cDovL3d3dy55ZXh0LmNvbS8/cT1oZWxsb1xuICAgKiAgICgyKSBwYXJhbXMgd2l0aCA/IGUuZy4gP3E9aGVsbG9cbiAgICogICAoMSkgcGFyYW1zIHdpdGhvdXQgPyBlLmcuIHE9aGVsbG9cbiAgICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgdXJsXG4gICAqIEByZXR1cm5zIHtPYmplY3R9IG1hcHBpbmcgZnJvbSBxdWVyeSBwYXJhbSAtPiB2YWx1ZSB3aGVyZSB2YWx1ZSBpcyAnJyBpZiBubyB2YWx1ZSBpcyBwcm92aWRlZFxuICAgKi9cbiAgcGFyc2UgKHVybCkge1xuICAgIGxldCBwYXJhbXMgPSB7fTtcbiAgICBsZXQgc2VhcmNoID0gdXJsO1xuXG4gICAgaWYgKHNlYXJjaCA9PT0gJycpIHtcbiAgICAgIHJldHVybiBwYXJhbXM7XG4gICAgfVxuXG4gICAgLy8gTm9ybWFsaXplIGFsbCB1cmwgaW5wdXRzIHRvIHN0cmluZyBvZiBxdWVyeSBwYXJhbXMgc2VwYXJhdGVkIGJ5ICZcbiAgICBpZiAodXJsLmluZGV4T2YoJz8nKSA+IC0xKSB7XG4gICAgICBzZWFyY2ggPSB1cmwuc2xpY2UodXJsLmluZGV4T2YoJz8nKSArIDEpO1xuICAgIH1cblxuICAgIGNvbnN0IGVuY29kZWRQYXJhbXMgPSBzZWFyY2guc3BsaXQoJyYnKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGVuY29kZWRQYXJhbXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGtleVZhbCA9IGVuY29kZWRQYXJhbXNbaV0uc3BsaXQoJz0nKTtcbiAgICAgIGlmIChrZXlWYWwubGVuZ3RoID4gMSkge1xuICAgICAgICBwYXJhbXNba2V5VmFsWzBdXSA9IFNlYXJjaFBhcmFtcy5kZWNvZGUoa2V5VmFsWzFdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcmFtc1trZXlWYWxbMF1dID0gJyc7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHBhcmFtcztcbiAgfVxuXG4gIC8qKlxuICAgKiBnZXQgcmV0dXJucyB0aGUgdmFsdWUgb2YgdGhlIGdpdmVuIHF1ZXJ5IHBhcmFtXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBxdWVyeSB0aGUgcXVlcnkgcGFyYW0ga2V5IHRvIGdldCB0aGUgdmFsdWUgb2ZcbiAgICogQHJldHVybiB7c3RyaW5nfSBwYXJhbSB2YWx1ZSwgbnVsbCBvdGhlcndpc2VcbiAgICovXG4gIGdldCAocXVlcnkpIHtcbiAgICBpZiAodHlwZW9mIHRoaXMuX3BhcmFtc1tTdHJpbmcocXVlcnkpXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fcGFyYW1zW3F1ZXJ5XTtcbiAgfVxuXG4gIC8qKlxuICAgKiBzZXQgY2hhbmdlcyB0aGUgdmFsdWUgb2YgYSBnaXZlbiBxdWVyeSBwYXJhbVxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSB0aGUgcXVlcnkgcGFyYW0ga2V5XG4gICAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZSB0aGUgdmFsdWUgb2YgdGhlIHF1ZXJ5IHBhcmFtIHVwZGF0ZSB3aXRoXG4gICAqL1xuICBzZXQgKG5hbWUsIHZhbHVlKSB7XG4gICAgdGhpcy5fcGFyYW1zW1N0cmluZyhuYW1lKV0gPSBTdHJpbmcodmFsdWUpO1xuICB9XG5cbiAgLyoqXG4gICAqIGhhcyBjaGVja3MgdG8gc2VlIGlmIHRoZSBnaXZlbiBxdWVyeSBwYXJhbSBrZXkgZXhpc3RzIGluIHRoZSBwYXJhbXMgb2JqZWN0XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBxdWVyeSB0aGUgcXVlcnkgcGFyYW0gdG8gY2hlY2tcbiAgICogQHJldHVybiB7Ym9vbGVhbn0gdHJ1ZSBpZiB0aGUgcXVlcnkgcGFyYW0gaXMgaW4gdGhlIHBhcmFtcyBvYmplY3QsIGZhbHNlIG8vd1xuICAgKi9cbiAgaGFzIChxdWVyeSkge1xuICAgIHJldHVybiBxdWVyeSBpbiB0aGlzLl9wYXJhbXM7XG4gIH1cblxuICAvKipcbiAgICogZGVsZXRlIHJlbW92ZXMgdGhlIGdpdmVuIHF1ZXJ5IHBhcmFtIGFuZCBpdHMgYXNzb2NpYXRlZCB2YWx1ZSBmcm9tIHRoZSBwYXJhbXMgb2JqZWN0XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIHRoZSBxdWVyeSBwYXJhbSBrZXlcbiAgICovXG4gIGRlbGV0ZSAobmFtZSkge1xuICAgIGRlbGV0ZSB0aGlzLl9wYXJhbXNbU3RyaW5nKG5hbWUpXTtcbiAgfVxuXG4gIC8qKlxuICAgKiB0b1N0cmluZyByZXR1cm5zIGEgdXJsIHdpdGggYWxsIHRoZSBxdWVyeSBwYXJhbXMgaW4gdGhlIHBhcmFtcyBvYmplY3QgKHdpdGhvdXQgYSA/KVxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuICB0b1N0cmluZyAoKSB7XG4gICAgbGV0IHN0cmluZyA9IFtdO1xuICAgIGZvciAobGV0IGtleSBpbiB0aGlzLl9wYXJhbXMpIHtcbiAgICAgIHN0cmluZy5wdXNoKGAke2tleX09JHtTZWFyY2hQYXJhbXMuZW5jb2RlKHRoaXMuX3BhcmFtc1trZXldKX1gKTtcbiAgICB9XG4gICAgcmV0dXJuIHN0cmluZy5qb2luKCcmJyk7XG4gIH1cblxuICBlbnRyaWVzICgpIHtcbiAgICBsZXQgZW50cmllcyA9IFtdO1xuICAgIGZvciAobGV0IGtleSBpbiB0aGlzLl9wYXJhbXMpIHtcbiAgICAgIGVudHJpZXMucHVzaChba2V5LCB0aGlzLl9wYXJhbXNba2V5XV0pO1xuICAgIH1cbiAgICByZXR1cm4gZW50cmllcztcbiAgfVxuXG4gIC8qKlxuICAgKiBkZWNvZGUgcmV0dXJucyB0aGUgZGVjb2RlZCByZXByZXNlbnRhdGlvbiBvZiB0aGUgZ2l2ZW4gc3RyaW5nXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgdGhlIHN0cmluZyB0byBkZWNvZGVcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cbiAgc3RhdGljIGRlY29kZSAoc3RyaW5nKSB7XG4gICAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChzdHJpbmcucmVwbGFjZSgvWyArXS9nLCAnJTIwJykpO1xuICB9XG5cbiAgLyoqXG4gICAqIGRlY29kZSByZXR1cm5zIHRoZSBlbmNvZGVkIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBnaXZlbiBzdHJpbmcgKGUuZy4gKyAtPiAlMkIpXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgdGhlIHN0cmluZyB0byBlbmNvZGVcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cbiAgc3RhdGljIGVuY29kZSAoc3RyaW5nKSB7XG4gICAgbGV0IHJlcGxhY2UgPSB7XG4gICAgICAnISc6ICclMjEnLFxuICAgICAgXCInXCI6ICclMjcnLFxuICAgICAgJygnOiAnJTI4JyxcbiAgICAgICcpJzogJyUyOScsXG4gICAgICAnJTIwJzogJysnXG4gICAgfTtcbiAgICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHN0cmluZykucmVwbGFjZSgvWyEnKCldfCUyMC9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgIHJldHVybiByZXBsYWNlW21hdGNoXTtcbiAgICB9KTtcbiAgfVxufVxuIiwiLyoqIEBtb2R1bGUgUmVuZGVyZXIgKi9cblxuLyoqXG4gKiBSZW5kZXJlciBpcyBhbiBhYnN0cmFjdCBjbGFzcyB0aGF0IGFsbCBSZW5kZXJlcnMgc2hvdWxkIGV4dGVuZCBhbmQgaW1wbGVtZW50XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJlbmRlcmVyIHtcbiAgLyoqXG4gICAqIHJlbmRlciBpcyBhIGNvcmUgbWV0aG9kIGZvciBhbGwgcmVuZGVyZXJzLlxuICAgKiBBbGwgaW1wbGVtZW50YXRpb25zIHNob3VsZCBvdmVycmlkZSB0aGlzIGNsYXNzXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0ZW1wbGF0ZVxuICAgKiBAcGFyYW0ge29iamVjdH0gZGF0YVxuICAgKi9cbiAgcmVuZGVyICh0ZW1wbGF0ZSwgZGF0YSkge1xuICAgIHJldHVybiB0ZW1wbGF0ZTtcbiAgfVxuXG4gIHJlZ2lzdGVySGVscGVyIChuYW1lLCBjYikge1xuXG4gIH1cblxuICByZWdpc3RlclRlbXBsYXRlICh0ZW1wbGF0ZU5hbWUsIHRlbXBsYXRlKSB7XG5cbiAgfVxuXG4gIGNvbXBpbGUgKHRlbXBsYXRlKSB7XG5cbiAgfVxufVxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgU1ZHSWNvbiB7XG4gIC8qKlxuICAgKiBAcGFyYW0gY29uZmlnXG4gICAqIEBwYXJhbSBjb25maWcubmFtZVxuICAgKiBAcGFyYW0gY29uZmlnLnBhdGhcbiAgICogQHBhcmFtIGNvbmZpZy5jb21wbGV4Q29udGVudHNcbiAgICogQHBhcmFtIGNvbmZpZy52aWV3Qm94XG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKi9cbiAgY29uc3RydWN0b3IgKGNvbmZpZykge1xuICAgIC8qKlxuICAgICAqIHRoZSBuYW1lIG9mIHRoZSBpY29uXG4gICAgICovXG4gICAgdGhpcy5uYW1lID0gY29uZmlnLm5hbWU7XG4gICAgLyoqXG4gICAgICogYW4gc3ZnIHBhdGggZGVmaW5pdGlvblxuICAgICAqL1xuICAgIHRoaXMucGF0aCA9IGNvbmZpZy5wYXRoO1xuICAgIC8qKlxuICAgICAqIGlmIG5vdCB1c2luZyBhIHBhdGgsIGEgdGhlIG1hcmt1cCBmb3IgYSBjb21wbGV4IFNWR1xuICAgICAqL1xuICAgIHRoaXMuY29tcGxleENvbnRlbnRzID0gY29uZmlnLmNvbXBsZXhDb250ZW50cztcbiAgICAvKipcbiAgICAgKiB0aGUgdmlldyBib3ggZGVmaW5pdGlvbiwgZGVmYXVsdHMgdG8gMjR4MjRcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMudmlld0JveCA9IGNvbmZpZy52aWV3Qm94IHx8ICcwIDAgMjQgMjQnO1xuICAgIC8qKlxuICAgICAqIGFjdHVhbCBjb250ZW50cyB1c2VkXG4gICAgICovXG4gICAgdGhpcy5jb250ZW50cyA9IHRoaXMucGF0aERlZmluaXRpb24oKTtcbiAgfVxuXG4gIHBhdGhEZWZpbml0aW9uICgpIHtcbiAgICBpZiAodGhpcy5jb21wbGV4Q29udGVudHMpIHtcbiAgICAgIHJldHVybiB0aGlzLmNvbXBsZXhDb250ZW50cztcbiAgICB9XG5cbiAgICByZXR1cm4gYDxwYXRoIGQ9XCIke3RoaXMucGF0aH1cIj48L3BhdGg+YDtcbiAgfVxuXG4gIHBhcnNlQ29udGVudHMgKGNvbXBsZXhDb250ZW50c1BhcmFtcykge1xuICAgIGxldCBjb250ZW50cyA9IHRoaXMuY29udGVudHM7XG4gICAgaWYgKHR5cGVvZiBjb250ZW50cyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgY29udGVudHMgPSBjb250ZW50cyhjb21wbGV4Q29udGVudHNQYXJhbXMpO1xuICAgIH1cbiAgICByZXR1cm4gYDxzdmcgdmlld0JveD1cIiR7dGhpcy52aWV3Qm94fVwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj4ke2NvbnRlbnRzfTwvc3ZnPmA7XG4gIH1cblxuICAvKipcbiAgICogcmV0dXJucyB0aGUgc3ZnIG1hcmt1cFxuICAgKi9cbiAgbWFya3VwICgpIHtcbiAgICBpZiAodHlwZW9mIHRoaXMuY29udGVudHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJldHVybiBjb21wbGV4Q29udGVudHNQYXJhbXMgPT4gdGhpcy5wYXJzZUNvbnRlbnRzKGNvbXBsZXhDb250ZW50c1BhcmFtcyk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnBhcnNlQ29udGVudHMoKTtcbiAgfVxufVxuIiwiaW1wb3J0IFNWR0ljb24gZnJvbSAnLi9pY29uLmpzJztcbmV4cG9ydCBkZWZhdWx0IG5ldyBTVkdJY29uKHtcbiAgbmFtZTogJ3RodW1iJyxcbiAgdmlld0JveDogJzAgMCAyNCAyMicsXG4gIHBhdGg6ICdNMTUuMjczIDFINS40NTVjLS45MDYgMC0xLjY4LjU1LTIuMDA4IDEuMzQyTC4xNTMgMTAuMDk3QTIuMTkgMi4xOSAwIDAwMCAxMC45djIuMmMwIDEuMjEuOTgyIDIuMiAyLjE4MiAyLjJoNi44ODNMOC4wMyAyMC4zMjdsLS4wMzMuMzUyYzAgLjQ1MS4xODYuODY5LjQ4IDEuMTY2TDkuNjMzIDIzbDcuMTc4LTcuMjQ5YTIuMTYgMi4xNiAwIDAwLjY0NC0xLjU1MXYtMTFjMC0xLjIxLS45ODItMi4yLTIuMTgyLTIuMnptMCAxMy4ybC00LjczNSA0Ljc3NEwxMS43NSAxMy4xSDIuMTgydi0yLjJsMy4yNzMtNy43aDkuODE4djExek0xOS42MzYgMUgyNHYxMy4yaC00LjM2NFYxeidcbn0pO1xuIiwiaW1wb3J0IFNWR0ljb24gZnJvbSAnLi9pY29uLmpzJztcbmV4cG9ydCBkZWZhdWx0IG5ldyBTVkdJY29uKHtcbiAgbmFtZTogJ3JlY2VpcHQnLFxuICBwYXRoOiAnTTE0LjYwNiA5LjVjLS42NzEtLjUxNS0xLjU5MS0uODMzLTIuNjA2LS44MzMgMS4wMTUgMCAxLjkzNS4zMTggMi42MDYuODMzem0tNy45ODUgMEgxLjY1NUExLjY2IDEuNjYgMCAwMTAgNy44MzNWMy42NjdDMCAyLjc0Ny43NDEgMiAxLjY1NSAyaDIwLjY5QTEuNjYgMS42NiAwIDAxMjQgMy42Njd2NC4xNjZBMS42NiAxLjY2IDAgMDEyMi4zNDUgOS41aC00Ljk2NlYyMkg2LjYyMVY5LjVoMi43NzNINi42MnptMTAuNzU4LTEuNjY3aDQuOTY2VjMuNjY3SDEuNjU1djQuMTY2aDQuOTY2di0yLjVoMTAuNzU4djIuNXonXG59KTtcbiIsImltcG9ydCBTVkdJY29uIGZyb20gJy4vaWNvbi5qcyc7XG5leHBvcnQgZGVmYXVsdCBuZXcgU1ZHSWNvbih7XG4gIG5hbWU6ICdwYW50aGVvbicsXG4gIHBhdGg6ICdNOS45NDcgMTYuNTk4aC4yNTJWOS40MTJoLS4yNTJhLjQzMi40MzIgMCAwMS0uMjMtLjA2NWMtLjA3LS4wNDMtLjEwNi0uMDkzLS4xMDYtLjE1TDkuMTUgNy44MnYtLjE1YzAtLjA0NC4wMjgtLjA4LjA4NC0uMTA5YS42OTEuNjkxIDAgMDEuMTA1LS4wODYuMjU0LjI1NCAwIDAxLjE0Ni0uMDQzSDEzLjZjLjA1NiAwIC4xMDQuMDE1LjE0Ni4wNDMuMDQyLjAzLjA5MS4wNTguMTQ3LjA4NmEuMjcxLjI3MSAwIDAxLjA2My4xMDhjLjAxNC4wNDMuMDA3LjA5My0uMDIuMTVsLS40MiAxLjM3OGEuMzc0LjM3NCAwIDAxLS4xNDcuMTUuMzcuMzcgMCAwMS0uMTkuMDY1aC0uMjUxdjcuMTg2aC4yNTJhLjM3LjM3IDAgMDEuMTg5LjA2NWMuMDcuMDQzLjExOS4wOTMuMTQ3LjE1bC40MiAxLjM3OGMuMDI3LjAyOC4wMzQuMDcxLjAyLjEyOWEuMjc1LjI3NSAwIDAxLS4wNjMuMTI5IDEuMzY0IDEuMzY0IDAgMDAtLjE0Ny4wODYuMjU0LjI1NCAwIDAxLS4xNDYuMDQzSDkuNDg1YS4yNTQuMjU0IDAgMDEtLjE0Ni0uMDQzLjY5MS42OTEgMCAwMS0uMTA1LS4wODZjLS4wNTYtLjAyOS0uMDg0LS4wNzItLjA4NC0uMTN2LS4xMjhsLjQ2MS0xLjM3N2MwLS4wNTguMDM1LS4xMDguMTA1LS4xNTFhLjQzMi40MzIgMCAwMS4yMzEtLjA2NXptNS43OTIgMGguMjUyVjkuNDEyaC0uMjUyYS40MzIuNDMyIDAgMDEtLjIzLS4wNjUuMzc0LjM3NCAwIDAxLS4xNDgtLjE1bC0uNDItMS4zNzdjLS4wMjctLjAyOS0uMDM0LS4wNzItLjAyLS4xM2EuMjc1LjI3NSAwIDAxLjA2My0uMTI5Yy4wNTYtLjAyOC4xMDUtLjA1Ny4xNDYtLjA4NmEuMjU0LjI1NCAwIDAxLjE0Ny0uMDQzaDQuMTE0Yy4wNTUgMCAuMTA0LjAxNS4xNDYuMDQzYS42OTEuNjkxIDAgMDEuMTA1LjA4NmMuMDU2LjAzLjA4NC4wNzIuMDg0LjEzdi4xMjlsLS40MiAxLjM3N2EuMzc0LjM3NCAwIDAxLS4xNDYuMTUuNDMyLjQzMiAwIDAxLS4yMzEuMDY1aC0uMjF2Ny4xODZoLjIxYS40My40MyAwIDAxLjIzLjA2NWMuMDcuMDQzLjEyLjA5My4xNDguMTVsLjQyIDEuMzc4di4xNWMwIC4wNDMtLjAyOS4wOC0uMDg1LjEwOGEuNjkxLjY5MSAwIDAxLS4xMDUuMDg2LjI1NC4yNTQgMCAwMS0uMTQ2LjA0M2gtNC4xMTRhLjI1NC4yNTQgMCAwMS0uMTQ3LS4wNDMgMS4zNjQgMS4zNjQgMCAwMC0uMTQ2LS4wODYuMjcxLjI3MSAwIDAxLS4wNjMtLjEwOGMtLjAxNC0uMDQzLS4wMDctLjA5My4wMi0uMTVsLjQyLTEuMzc3YS4zNzQuMzc0IDAgMDEuMTQ3LS4xNTEuNDMyLjQzMiAwIDAxLjIzMS0uMDY1em0tMTEuNzk0LS4wODZoLjI1MlY5LjQ5OGgtLjI1MmEuMzM0LjMzNCAwIDAxLS4yMS0uMDY1LjM4Ni4zODYgMCAwMS0uMTI2LS4xOTNsLS40Mi0xLjM3N2EuMjQ4LjI0OCAwIDAxLS4wMi0uMTcyLjg1NC44NTQgMCAwMS4wNjMtLjE3M2MuMDI4LS4wNTcuMDctLjEuMTI2LS4xMjlhLjM2NS4zNjUgMCAwMS4xNjgtLjA0M2g0LjA3Yy4wNTcgMCAuMTEzLjAxNS4xNjkuMDQzYS4yNzguMjc4IDAgMDEuMTI2LjEzLjg1NC44NTQgMCAwMS4wNjIuMTcyLjI0OC4yNDggMCAwMS0uMDIuMTcybC0uNDIgMS4zNzdhLjM4Ni4zODYgMCAwMS0uMTI2LjE5My4zMzQuMzM0IDAgMDEtLjIxLjA2NWgtLjIxdjcuMDE0aC4yMWMuMDg0IDAgLjE1NC4wMjkuMjEuMDg2YS42NzMuNjczIDAgMDEuMTI2LjE3MmwuNDIgMS4zNzhhLjI0OC4yNDggMCAwMS4wMi4xNzIuODU0Ljg1NCAwIDAxLS4wNjIuMTcyLjI3OC4yNzggMCAwMS0uMTI2LjEyOS4zNjUuMzY1IDAgMDEtLjE2OC4wNDNIMy41MjZhLjM2NS4zNjUgMCAwMS0uMTY4LS4wNDMuMjc4LjI3OCAwIDAxLS4xMjYtLjEzLjg1NC44NTQgMCAwMS0uMDYzLS4xNzEuMjQ4LjI0OCAwIDAxLjAyLS4xNzJsLjQyLTEuMzc4YS42NzMuNjczIDAgMDEuMTI2LS4xNzIuMjgxLjI4MSAwIDAxLjIxLS4wODZ6TTEuNzYzIDYuNjU4YS43MTcuNzE3IDAgMDEtLjUwNC0uMTk0LjY0NC42NDQgMCAwMS0uMjEtLjQ5NXYtLjQzYS43My43MyAwIDAxLjEwNS0uMzg3LjY4LjY4IDAgMDEuMjczLS4yNTlDNC4zMDkgMy40MDIgNi41NCAyLjI3NiA4LjEyMSAxLjUxNSA5LjcwMi43NTUgMTAuNDkzLjM2MSAxMC40OTMuMzMyYy41MzEtLjI1OC45NzItLjM2NiAxLjMyMi0uMzIzLjM1LjA0My43MzQuMTY1IDEuMTU0LjM2Nmw4LjMxIDQuNTE4Yy4xNC4wNTguMjQ1LjE0NC4zMTUuMjU5YS43My43MyAwIDAxLjEwNS4zODd2LjQzYzAgLjIwMS0uMDcuMzY2LS4yMS40OTVhLjcxNy43MTcgMCAwMS0uNTA0LjE5NEgxLjc2M3ptLS43MTQgMTMuMzRhLjU0LjU0IDAgMDEuMTY4LS4zODcuNTE2LjUxNiAwIDAxLjM3OC0uMTcyaDE5LjY0MmMuMTY4IDAgLjMwOC4wNTcuNDIuMTcyYS41NDEuNTQxIDAgMDEuMTY4LjM4N3YuODE4YS41MjIuNTIyIDAgMDEtLjE2OC40MDguNjA1LjYwNSAwIDAxLS40Mi4xNTFIMS41OTVhLjU1MS41NTEgMCAwMS0uMzc4LS4xNS41MjIuNTIyIDAgMDEtLjE2OC0uNDF2LS44MTd6bTIxLjQwNSAyLjAyMmMuMTQgMCAuMjY2LjA1OC4zNzguMTczYS41OTIuNTkyIDAgMDEuMTY4LjQzdi44MThhLjU0MS41NDEgMCAwMS0uMTY4LjM4Ny41MTYuNTE2IDAgMDEtLjM3OC4xNzJMLjU0NiAyMy45NTdhLjUxNi41MTYgMCAwMS0uMzc4LS4xNzIuNTQxLjU0MSAwIDAxLS4xNjgtLjM4N3YtLjgxOGEuNTkuNTkgMCAwMS4xNjgtLjQzLjUxNi41MTYgMCAwMS4zNzgtLjE3M2wyMS45MDguMDQzeidcbn0pO1xuIiwiaW1wb3J0IFNWR0ljb24gZnJvbSAnLi9pY29uLmpzJztcbmV4cG9ydCBkZWZhdWx0IG5ldyBTVkdJY29uKHtcbiAgbmFtZTogJ21pYycsXG4gIHBhdGg6ICdNMTIgMTVjMS42NiAwIDIuOTktMS4zNCAyLjk5LTNMMTUgNmMwLTEuNjYtMS4zNC0zLTMtM1M5IDQuMzQgOSA2djZjMCAxLjY2IDEuMzQgMyAzIDN6bTUuMy0zYzAgMy0yLjU0IDUuMS01LjMgNS4xUzYuNyAxNSA2LjcgMTJINWMwIDMuNDEgMi43MiA2LjIzIDYgNi43MlYyMmgydi0zLjI4YzMuMjgtLjQ4IDYtMy4zIDYtNi43MmgtMS43eidcbn0pO1xuIiwiaW1wb3J0IFNWR0ljb24gZnJvbSAnLi9pY29uLmpzJztcbmV4cG9ydCBkZWZhdWx0IG5ldyBTVkdJY29uKHtcbiAgbmFtZTogJ2RpcmVjdGlvbnMnLFxuICBwYXRoOiAnTTIzLjY0OSAxMS4xNTRMMTIuODQ2LjM1YTEuMTk1IDEuMTk1IDAgMDAtMS42OTIgMEwuMzUgMTEuMTU0YTEuMTk1IDEuMTk1IDAgMDAwIDEuNjkyTDExLjE1NCAyMy42NWExLjE5NSAxLjE5NSAwIDAwMS42OTIgMEwyMy42NSAxMi44NDZjLjQ2OC0uNDU2LjQ2OC0xLjIxMiAwLTEuNjkyem0tOS4yNTQgMy44NTN2LTMuMDAxSDkuNTkzdjMuNmgtMi40di00LjhjMC0uNjYuNTQtMS4yIDEuMi0xLjJoNi4wMDJWNi42MDRsNC4yIDQuMi00LjIgNC4yMDJ6J1xufSk7XG4iLCJpbXBvcnQgU1ZHSWNvbiBmcm9tICcuL2ljb24uanMnO1xuZXhwb3J0IGRlZmF1bHQgbmV3IFNWR0ljb24oe1xuICBuYW1lOiAnY2FsZW5kYXInLFxuICBwYXRoOiAnTTE4LjExMSAxMy4ySDEydjZoNi4xMTF2LTZ6TTE2Ljg5IDB2Mi40SDcuMTFWMEg0LjY2N3YyLjRIMy40NDRjLTEuMzU2IDAtMi40MzIgMS4wOC0yLjQzMiAyLjRMMSAyMS42QzEgMjIuOTIgMi4wODggMjQgMy40NDQgMjRoMTcuMTEyQzIxLjkgMjQgMjMgMjIuOTIgMjMgMjEuNlY0LjhjMC0xLjMyLTEuMS0yLjQtMi40NDQtMi40aC0xLjIyM1YwSDE2Ljg5em0zLjY2NyAyMS42SDMuNDQ0VjguNGgxNy4xMTJ2MTMuMnonXG59KTtcbiIsImltcG9ydCBTVkdJY29uIGZyb20gJy4vaWNvbi5qcyc7XG5leHBvcnQgZGVmYXVsdCBuZXcgU1ZHSWNvbih7XG4gIG5hbWU6ICdjYWxsb3V0JyxcbiAgcGF0aDogJ00yMS45OSA0YzAtMS4xLS44OS0yLTEuOTktMkg0Yy0xLjEgMC0yIC45LTIgMnYxMmMwIDEuMS45IDIgMiAyaDE0bDQgNC0uMDEtMTh6J1xufSk7XG4iLCJpbXBvcnQgU1ZHSWNvbiBmcm9tICcuL2ljb24uanMnO1xuZXhwb3J0IGRlZmF1bHQgbmV3IFNWR0ljb24oe1xuICBuYW1lOiAnaW5mbycsXG4gIHBhdGg6ICdNMTIgOC40QTEuMiAxLjIgMCAxMDEyIDZhMS4yIDEuMiAwIDAwMCAyLjR6TTEyIDBjNi42MjQgMCAxMiA1LjM3NiAxMiAxMnMtNS4zNzYgMTItMTIgMTJTMCAxOC42MjQgMCAxMiA1LjM3NiAwIDEyIDB6bTAgMThjLjY2IDAgMS4yLS41NCAxLjItMS4yVjEyYzAtLjY2LS41NC0xLjItMS4yLTEuMi0uNjYgMC0xLjIuNTQtMS4yIDEuMnY0LjhjMCAuNjYuNTQgMS4yIDEuMiAxLjJ6J1xufSk7XG4iLCJpbXBvcnQgU1ZHSWNvbiBmcm9tICcuL2ljb24uanMnO1xuZXhwb3J0IGRlZmF1bHQgbmV3IFNWR0ljb24oe1xuICBuYW1lOiAnYnJpZWZjYXNlJyxcbiAgcGF0aDogJ00yMCA3aC00VjVjMC0xLjExLS44OS0yLTItMmgtNGMtMS4xMSAwLTIgLjg5LTIgMnYySDRjLTEuMTEgMC0xLjk5Ljg5LTEuOTkgMkwyIDIwYzAgMS4xMS44OSAyIDIgMmgxNmMxLjExIDAgMi0uODkgMi0yVjljMC0xLjExLS44OS0yLTItMnptLTYgMGgtNFY1aDR2MnonXG59KTtcbiIsImltcG9ydCBTVkdJY29uIGZyb20gJy4vaWNvbi5qcyc7XG5leHBvcnQgZGVmYXVsdCBuZXcgU1ZHSWNvbih7XG4gIG5hbWU6ICdrYWJvYicsXG4gIHZpZXdCb3g6ICcwIDAgMyAxMScsXG4gIGNvbXBsZXhDb250ZW50czogYDxjaXJjbGUgY3g9XCIxLjVcIiBjeT1cIjEuNVwiIHI9XCIxLjVcIi8+PGNpcmNsZSBjeD1cIjEuNVwiIGN5PVwiNS41XCIgcj1cIjEuNVwiLz48Y2lyY2xlIGN4PVwiMS41XCIgY3k9XCI5LjVcIiByPVwiMS41XCIvPmBcbn0pO1xuIiwiaW1wb3J0IFNWR0ljb24gZnJvbSAnLi9pY29uLmpzJztcbmV4cG9ydCBkZWZhdWx0IG5ldyBTVkdJY29uKHtcbiAgbmFtZTogJ3BlcnNvbicsXG4gIHZpZXdCb3g6ICcwIDAgMTggMTgnLFxuICBwYXRoOiAnTTkgOWMyLjQ4NiAwIDQuNS0yLjAxNCA0LjUtNC41UzExLjQ4NiAwIDkgMGE0LjQ5OSA0LjQ5OSAwIDAwLTQuNSA0LjVDNC41IDYuOTg2IDYuNTE0IDkgOSA5em0wIDIuMjVjLTMuMDA0IDAtOSAxLjUwOC05IDQuNXYxLjEyNUMwIDE3LjQ5NC41MDYgMTggMS4xMjUgMThoMTUuNzVjLjYxOSAwIDEuMTI1LS41MDYgMS4xMjUtMS4xMjVWMTUuNzVjMC0yLjk5Mi01Ljk5Ni00LjUtOS00LjV6J1xufSk7XG4iLCJpbXBvcnQgU1ZHSWNvbiBmcm9tICcuL2ljb24uanMnO1xuZXhwb3J0IGRlZmF1bHQgbmV3IFNWR0ljb24oe1xuICBuYW1lOiAnbWFnbmlmeWluZ19nbGFzcycsXG4gIHBhdGg6ICdNMTYuMTI0IDEzLjA1MWE1LjE1NCA1LjE1NCAwIDExMC0xMC4zMDggNS4xNTQgNS4xNTQgMCAwMTAgMTAuMzA4TTE2LjExNCAwYTcuODg2IDcuODg2IDAgMDAtNi40NiAxMi40MDdMMCAyMi4wNiAxLjk0IDI0bDkuNjUzLTkuNjUzQTcuODg2IDcuODg2IDAgMTAxNi4xMTMgMCdcbn0pO1xuIiwiaW1wb3J0IFNWR0ljb24gZnJvbSAnLi9pY29uLmpzJztcbmV4cG9ydCBkZWZhdWx0IG5ldyBTVkdJY29uKHtcbiAgbmFtZTogJ29mZmljZScsXG4gIHBhdGg6ICdNMTIgN1YzSDJ2MThoMjBWN0gxMnpNNiAxOUg0di0yaDJ2MnptMC00SDR2LTJoMnYyem0wLTRINFY5aDJ2MnptMC00SDRWNWgydjJ6bTQgMTJIOHYtMmgydjJ6bTAtNEg4di0yaDJ2MnptMC00SDhWOWgydjJ6bTAtNEg4VjVoMnYyem0xMCAxMmgtOHYtMmgydi0yaC0ydi0yaDJ2LTJoLTJWOWg4djEwem0tMi04aC0ydjJoMnYtMnptMCA0aC0ydjJoMnYtMnonXG59KTtcbiIsImltcG9ydCBTVkdJY29uIGZyb20gJy4vaWNvbi5qcyc7XG5leHBvcnQgZGVmYXVsdCBuZXcgU1ZHSWNvbih7XG4gIG5hbWU6ICdsaW5rJyxcbiAgcGF0aDogJ00yLjI4IDEyQTMuNzIzIDMuNzIzIDAgMDE2IDguMjhoNC44VjZINmMtMy4zMTIgMC02IDIuNjg4LTYgNnMyLjY4OCA2IDYgNmg0Ljh2LTIuMjhINkEzLjcyMyAzLjcyMyAwIDAxMi4yOCAxMnptNC45MiAxLjJoOS42di0yLjRINy4ydjIuNHpNMTggNmgtNC44djIuMjhIMThBMy43MjMgMy43MjMgMCAwMTIxLjcyIDEyIDMuNzIzIDMuNzIzIDAgMDExOCAxNS43MmgtNC44VjE4SDE4YzMuMzEyIDAgNi0yLjY4OCA2LTZzLTIuNjg4LTYtNi02eidcbn0pO1xuIiwiaW1wb3J0IFNWR0ljb24gZnJvbSAnLi9pY29uLmpzJztcbmV4cG9ydCBkZWZhdWx0IG5ldyBTVkdJY29uKHtcbiAgbmFtZTogJ3dpbmRvdycsXG4gIHBhdGg6ICdNMyAxM2g4VjNIM3YxMHptMCA4aDh2LTZIM3Y2em0xMCAwaDhWMTFoLTh2MTB6bTAtMTh2Nmg4VjNoLTh6J1xufSk7XG4iLCJpbXBvcnQgU1ZHSWNvbiBmcm9tICcuL2ljb24uanMnO1xuZXhwb3J0IGRlZmF1bHQgbmV3IFNWR0ljb24oe1xuICBuYW1lOiAncGhvbmUnLFxuICBwYXRoOiAnTTQuODI3IDEwLjM4N2EyMC4xOTggMjAuMTk4IDAgMDA4Ljc4NiA4Ljc4NmwyLjkzNC0yLjkzM2MuMzYtLjM2Ljg5My0uNDggMS4zNi0uMzJhMTUuMjEgMTUuMjEgMCAwMDQuNzYuNzZjLjczMyAwIDEuMzMzLjYgMS4zMzMgMS4zMzN2NC42NTRDMjQgMjMuNCAyMy40IDI0IDIyLjY2NyAyNCAxMC4xNDcgMjQgMCAxMy44NTMgMCAxLjMzMyAwIC42LjYgMCAxLjMzMyAwSDZjLjczMyAwIDEuMzMzLjYgMS4zMzMgMS4zMzMgMCAxLjY2Ny4yNjcgMy4yNjcuNzYgNC43Ni4xNDcuNDY3LjA0Ljk4Ny0uMzMzIDEuMzZsLTIuOTMzIDIuOTM0eidcbn0pO1xuIiwiaW1wb3J0IFNWR0ljb24gZnJvbSAnLi9pY29uLmpzJztcbmV4cG9ydCBkZWZhdWx0IG5ldyBTVkdJY29uKHtcbiAgbmFtZTogJ3RhZycsXG4gIHZpZXdCb3g6ICcwIDAgMTggMTgnLFxuICBwYXRoOiAnTTE3LjQ2OSA4LjYyMmwtOC4xLTguMUExLjc4OSAxLjc4OSAwIDAwOC4xIDBIMS44Qy44MSAwIDAgLjgxIDAgMS44djYuM2MwIC40OTUuMTk4Ljk0NS41MzEgMS4yNzhsOC4xIDguMWMuMzI0LjMyNC43NzQuNTIyIDEuMjY5LjUyMmExLjc2IDEuNzYgMCAwMDEuMjY5LS41MzFsNi4zLTYuM0ExLjc2IDEuNzYgMCAwMDE4IDkuOWMwLS40OTUtLjIwNy0uOTU0LS41MzEtMS4yNzh6TTMuMTUgNC41Yy0uNzQ3IDAtMS4zNS0uNjAzLTEuMzUtMS4zNSAwLS43NDcuNjAzLTEuMzUgMS4zNS0xLjM1Ljc0NyAwIDEuMzUuNjAzIDEuMzUgMS4zNSAwIC43NDctLjYwMyAxLjM1LTEuMzUgMS4zNXonXG59KTtcbiIsImltcG9ydCBTVkdJY29uIGZyb20gJy4vaWNvbi5qcyc7XG5leHBvcnQgZGVmYXVsdCBuZXcgU1ZHSWNvbih7XG4gIG5hbWU6ICdkb2N1bWVudCcsXG4gIHBhdGg6ICdNNCA2SDJ2MTRjMCAxLjEuOSAyIDIgMmgxNHYtMkg0VjZ6bTE2LTRIOGMtMS4xIDAtMiAuOS0yIDJ2MTJjMCAxLjEuOSAyIDIgMmgxMmMxLjEgMCAyLS45IDItMlY0YzAtMS4xLS45LTItMi0yem0tMSA5SDlWOWgxMHYyem0tNCA0SDl2LTJoNnYyem00LThIOVY1aDEwdjJ6J1xufSk7XG4iLCJpbXBvcnQgU1ZHSWNvbiBmcm9tICcuL2ljb24uanMnO1xuZXhwb3J0IGRlZmF1bHQgbmV3IFNWR0ljb24oe1xuICBuYW1lOiAnY2hldnJvbicsXG4gIHZpZXdCb3g6ICcwIDAgNyA5JyxcbiAgY29tcGxleENvbnRlbnRzOiBgPGcgZmlsbC1ydWxlPVwiZXZlbm9kZFwiIHRyYW5zZm9ybT1cInRyYW5zbGF0ZSgtMSAtOClcIj48cGF0aCBkPVwibTIuNjQxNzAwNCA4LTEuMTQxNzAwNCAxLjA1NzUgMy43MDg1MDIwMiAzLjQ0MjUtMy43MDg1MDIwMiAzLjQ0MjUgMS4xNDE3MDA0IDEuMDU3NSA0Ljg1ODI5OTYtNC41elwiLz48L2c+YFxufSk7XG4iLCJpbXBvcnQgU1ZHSWNvbiBmcm9tICcuL2ljb24uanMnO1xuZXhwb3J0IGRlZmF1bHQgbmV3IFNWR0ljb24oe1xuICBuYW1lOiAnc3VwcG9ydCcsXG4gIHBhdGg6ICdNMTIsMCBDNS4zNzYsMCAwLDUuMzc2IDAsMTIgQzAsMTguNjI0IDUuMzc2LDI0IDEyLDI0IEMxOC42MjQsMjQgMjQsMTguNjI0IDI0LDEyIEMyNCw1LjM3NiAxOC42MjQsMCAxMiwwIFogTTEzLDE5IEwxMSwxOSBMMTEsMTcgTDEzLDE3IEwxMywxOSBaIE0xNS4wNywxMS4yNSBMMTQuMTcsMTIuMTcgQzEzLjQ1LDEyLjkgMTMsMTMuNSAxMywxNSBMMTEsMTUgTDExLDE0LjUgQzExLDEzLjQgMTEuNDUsMTIuNCAxMi4xNywxMS42NyBMMTMuNDEsMTAuNDEgQzEzLjc4LDEwLjA1IDE0LDkuNTUgMTQsOSBDMTQsNy45IDEzLjEsNyAxMiw3IEMxMC45LDcgMTAsNy45IDEwLDkgTDgsOSBDOCw2Ljc5IDkuNzksNSAxMiw1IEMxNC4yMSw1IDE2LDYuNzkgMTYsOSBDMTYsOS44OCAxNS42NCwxMC42OCAxNS4wNywxMS4yNSBaJ1xufSk7XG4iLCJpbXBvcnQgU1ZHSWNvbiBmcm9tICcuL2ljb24uanMnO1xuZXhwb3J0IGRlZmF1bHQgbmV3IFNWR0ljb24oe1xuICBuYW1lOiAneWV4dCcsXG4gIHZpZXdCb3g6ICcwIDAgMzAgMzAnLFxuICBwYXRoOiAnTTI1LjUxNyAyOC4xNDJ2LjA5NWgtLjIwNHYuOTA1aC0uMDY2di0uOTA1aC0uMTk3di0uMDk1aC40Njd6bS42NjcgMGguMDY2djFoLS4wNjZ2LS44MjVsLS4yNC41OTVoLS4wMTNsLS4yNC0uNTk1di44MjVoLS4wNjZ2LTFoLjA2NmwuMjQ3LjYxLjI0Ni0uNjF6TTE1IDI4LjhjNy42MjIgMCAxMy44LTYuMTc4IDEzLjgtMTMuOCAwLTcuNjIyLTYuMTc4LTEzLjgtMTMuOC0xMy44QzcuMzc4IDEuMiAxLjIgNy4zNzggMS4yIDE1YzAgNy42MjIgNi4xNzggMTMuOCAxMy44IDEzLjh6TTE1IDBjOC4yODQgMCAxNSA2LjcxNiAxNSAxNSAwIDguMjg0LTYuNzE2IDE1LTE1IDE1LTguMjg0IDAtMTUtNi43MTYtMTUtMTVDMCA2LjcxNiA2LjcxNiAwIDE1IDB6bS40NSAxNi42NXYtMS4yaDYuNnYxLjJoLTIuN3Y1LjRoLTEuMnYtNS40aC0yLjd6bS0xLjU5OS0xLjM1bC44NDkuODQ5LTIuNjAxIDIuNjAxIDIuNjAxIDIuNjAxLS44NDkuODQ5LTIuNjAxLTIuNjAxTDguNjQ5IDIyLjJsLS44NDktLjg0OSAyLjYwMS0yLjYwMUw3LjggMTYuMTQ5bC44NDktLjg0OSAyLjYwMSAyLjYwMSAyLjYwMS0yLjYwMXpNMTguNjc1IDlhMi4xNzUgMi4xNzUgMCAwMC0xLjg0NyAzLjMyM2wyLjk5NS0yLjk5NUEyLjE2MyAyLjE2MyAwIDAwMTguNjc1IDl6bTAgNS41NWEzLjM3NSAzLjM3NSAwIDExMi44MzMtNS4yMDlsLTMuNzg5IDMuNzg4YTIuMTc1IDIuMTc1IDAgMDAzLjEzLTEuOTU0aDEuMjAxYTMuMzc1IDMuMzc1IDAgMDEtMy4zNzUgMy4zNzV6bS03LjQyNS0zLjczNEwxMy43OCA3LjhsLjkyLjc3MS0yLjg1IDMuMzk3djIuNTgyaC0xLjJ2LTIuNTgyTDcuOCA4LjU3bC45Mi0uNzcxIDIuNTMgMy4wMTZ6J1xufSk7XG4iLCJpbXBvcnQgU1ZHSWNvbiBmcm9tICcuL2ljb24uanMnO1xuZXhwb3J0IGRlZmF1bHQgbmV3IFNWR0ljb24oe1xuICBuYW1lOiAncGluJyxcbiAgdmlld0JveDogJzUgMCA5IDE4JyxcbiAgcGF0aDogJ205LjM3NSAwYy0zLjUyNDQ2NDI5IDAtNi4zNzUgMi44MTctNi4zNzUgNi4zIDAgNC43MjUgNi4zNzUgMTEuNyA2LjM3NSAxMS43czYuMzc1LTYuOTc1IDYuMzc1LTExLjdjMC0zLjQ4My0yLjg1MDUzNTctNi4zLTYuMzc1LTYuM3ptLjAwMDAwMDE4IDguNTUwMDAwMDdjLTEuMjU2Nzg1NzYgMC0yLjI3Njc4NTc5LTEuMDA4LTIuMjc2Nzg1NzktMi4yNXMxLjAyMDAwMDAzLTIuMjUgMi4yNzY3ODU3OS0yLjI1YzEuMjU2Nzg1NzIgMCAyLjI3Njc4NTgyIDEuMDA4IDIuMjc2Nzg1ODIgMi4yNXMtMS4wMjAwMDAxIDIuMjUtMi4yNzY3ODU4MiAyLjI1eidcbn0pO1xuIiwiaW1wb3J0IFNWR0ljb24gZnJvbSAnLi9pY29uLmpzJztcbmV4cG9ydCBkZWZhdWx0IG5ldyBTVkdJY29uKHtcbiAgbmFtZTogJ2dlYXInLFxuICBwYXRoOiAnTTEyIDEwYy0xLjEgMC0yIC45LTIgMnMuOSAyIDIgMiAyLS45IDItMi0uOS0yLTItMnptNy03SDVhMiAyIDAgMDAtMiAydjE0YTIgMiAwIDAwMiAyaDE0YTIgMiAwIDAwMi0yVjVhMiAyIDAgMDAtMi0yem0tMS43NSA5YzAgLjIzLS4wMi40Ni0uMDUuNjhsMS40OCAxLjE2Yy4xMy4xMS4xNy4zLjA4LjQ1bC0xLjQgMi40MmMtLjA5LjE1LS4yNy4yMS0uNDMuMTVsLTEuNzQtLjdjLS4zNi4yOC0uNzYuNTEtMS4xOC42OWwtLjI2IDEuODVjLS4wMy4xNy0uMTguMy0uMzUuM2gtMi44Yy0uMTcgMC0uMzItLjEzLS4zNS0uMjlsLS4yNi0xLjg1Yy0uNDMtLjE4LS44Mi0uNDEtMS4xOC0uNjlsLTEuNzQuN2MtLjE2LjA2LS4zNCAwLS40My0uMTVsLTEuNC0yLjQyYS4zNTMuMzUzIDAgMDEuMDgtLjQ1bDEuNDgtMS4xNmMtLjAzLS4yMy0uMDUtLjQ2LS4wNS0uNjkgMC0uMjMuMDItLjQ2LjA1LS42OGwtMS40OC0xLjE2YS4zNTMuMzUzIDAgMDEtLjA4LS40NWwxLjQtMi40MmMuMDktLjE1LjI3LS4yMS40My0uMTVsMS43NC43Yy4zNi0uMjguNzYtLjUxIDEuMTgtLjY5bC4yNi0xLjg1Yy4wMy0uMTcuMTgtLjMuMzUtLjNoMi44Yy4xNyAwIC4zMi4xMy4zNS4yOWwuMjYgMS44NWMuNDMuMTguODIuNDEgMS4xOC42OWwxLjc0LS43Yy4xNi0uMDYuMzQgMCAuNDMuMTVsMS40IDIuNDJjLjA5LjE1LjA1LjM0LS4wOC40NWwtMS40OCAxLjE2Yy4wMy4yMy4wNS40Ni4wNS42OXonXG59KTtcbiIsImltcG9ydCBTVkdJY29uIGZyb20gJy4vaWNvbi5qcyc7XG5leHBvcnQgZGVmYXVsdCBuZXcgU1ZHSWNvbih7XG4gIG5hbWU6ICdsaWdodF9idWxiJyxcbiAgdmlld0JveDogJzAgMCAzMiAzNScsXG4gIHBhdGg6ICdNMTEuNTg1IDMxLjA1Nmw4LjM4LS40OTN2LS45ODZsLTguMzguNDkzek0xMS41ODUgMzMuMDI4TDE1Ljc3NSAzNWw0LjE5LTEuOTcyVjMxLjU1bC04LjM4LjQ5M3YuOTg2em02LjkyNi0uNDA3bC0yLjczNiAxLjI5LTIuMTMtMS4wMDQgNC44NjYtLjI4NnpNMTUuNzc1IDcuMzk0Yy00LjYzIDAtOC4zOCAzLjIwNS04LjM4IDguMzggMCA1LjE3NyA0LjE5IDYuOTAyIDQuMTkgMTIuODE4di40OTNsOC4zOC0uNDkzYzAtNS45MTYgNC4xOS04LjE4OCA0LjE5LTEyLjgxN2E4LjM4IDguMzggMCAwMC04LjM4LTguMzh6bTUuNjE3IDEzLjQ4Yy0xLjAyNSAxLjgzNy0yLjE3NCAzLjg5Mi0yLjM4MSA2Ljc4NmwtNi40NC4zOGMtLjEyOS0zLjAxLTEuMjktNS4wMjEtMi4zMi02LjgwOC0uNDkzLS44LS45MjgtMS42MzYtMS4yOTktMi41aDEzLjU1NmMtLjMyNS43MDgtLjcwNCAxLjQwMy0xLjExNiAyLjE0MnptMS40NzktMy4xMjhIOC42MjdhNy43OTMgNy43OTMgMCAwMS0uMjQ3LTEuOTcxYzAtNC4zNTMgMy4wNDItNy4zOTUgNy4zOTUtNy4zOTVhNy4zOTQgNy4zOTQgMCAwMTcuMzk0IDcuMzk1IDYuNzM5IDYuNzM5IDAgMDEtLjMgMS45NzFoLjAwMnpNMjYuNjIgMTUuMjgyaDQuOTN2MWgtNC45M3pNMjMuMDk0IDcuNzU2bDIuMDkxLTIuMDkxLjY5OC42OTctMi4wOTIgMi4wOTJ6TTE1LjI4MiAwaDF2NC45M2gtMXpNNS42NjYgNi4zNjJsLjY5Ny0uNjk3IDIuMDkxIDIuMDkxLS42OTcuNjk3ek0wIDE1LjI4Mmg0LjkzdjFIMHonXG59KTtcbiIsImltcG9ydCBTVkdJY29uIGZyb20gJy4vaWNvbi5qcyc7XG5leHBvcnQgZGVmYXVsdCBuZXcgU1ZHSWNvbih7XG4gIG5hbWU6ICdzdGFyJyxcbiAgdmlld0JveDogJzAgMCAxOCAxOCcsXG4gIHBhdGg6ICdNOC45OTEgMEM0LjAyMyAwIDAgNC4wMzIgMCA5czQuMDIzIDkgOC45OTEgOUMxMy45NjggMTggMTggMTMuOTY4IDE4IDlzLTQuMDMyLTktOS4wMDktOXptMy44MTYgMTQuNEw5IDEyLjEwNSA1LjE5MyAxNC40bDEuMDA4LTQuMzI5LTMuMzU3LTIuOTA3IDQuNDI4LS4zNzhMOSAyLjdsMS43MjggNC4wNzcgNC40MjguMzc4LTMuMzU3IDIuOTA3eidcbn0pO1xuIiwiaW1wb3J0IFNWR0ljb24gZnJvbSAnLi9pY29uLmpzJztcbmV4cG9ydCBkZWZhdWx0IG5ldyBTVkdJY29uKHtcbiAgbmFtZTogJ2Nsb3NlJyxcbiAgdmlld0JveDogJzAgMSAyNCAyNCcsXG4gIGNvbXBsZXhDb250ZW50czogYFxuICAgIDxwYXRoIGQ9XCJNNyA4bDkuNzE2IDkuNzE2bTAtOS43MTZMNyAxNy43MTZcIlxuICAgICAgICAgIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiXG4gICAgICAgICAgc3Ryb2tlLXdpZHRoPVwiMlwiLz5cbiAgYFxufSk7XG4iLCJpbXBvcnQgU1ZHSWNvbiBmcm9tICcuL2ljb24uanMnO1xuZXhwb3J0IGRlZmF1bHQgbmV3IFNWR0ljb24oe1xuICBuYW1lOiAnZWxlbWVudHMnLFxuICBwYXRoOiAnTTEzLDE1IEwxMywxNyBMMjEsMTcgTDIxLDE5IEwxMywxOSBMMTMsMjEgTDExLDIxIEwxMSwxNSBMMTMsMTUgWiBNOSwxNyBMOSwxOSBMMywxOSBMMywxNyBMOSwxNyBaIE05LDE1IEw3LDE1IEw3LDEzIEwzLDEzIEwzLDExIEw3LDExIEw3LDkgTDksOSBMOSwxNSBaIE0yMSwxMSBMMjEsMTMgTDExLDEzIEwxMSwxMSBMMjEsMTEgWiBNMTcsMyBMMTcsNSBMMjEsNSBMMjEsNyBMMTcsNyBMMTcsOSBMMTUsOSBMMTUsMyBMMTcsMyBaIE0xMyw1IEwxMyw3IEwzLDcgTDMsNSBMMTMsNSBaJ1xufSk7XG4iLCJpbXBvcnQgU1ZHSWNvbiBmcm9tICcuL2ljb24uanMnO1xuZXhwb3J0IGRlZmF1bHQgbmV3IFNWR0ljb24oe1xuICBuYW1lOiAneWV4dF9hbmltYXRlZF9yZXZlcnNlJyxcbiAgdmlld0JveDogJzAgMCA3MiA3MicsXG4gIGNvbXBsZXhDb250ZW50czogKHBhcmFtcyA9IHt9KSA9PiB7XG4gICAgY29uc3QgaWNvblByZWZpeCA9IHBhcmFtcy5pY29uUHJlZml4IHx8ICd5eHQnO1xuICAgIHJldHVybiBgPGRlZnM+XG4gICAgICA8bWFzayBpZD1cIiR7aWNvblByZWZpeH1fcmV2ZXJzZV9NYXNrLTFcIj5cbiAgICAgICAgPHJlY3QgZmlsbD1cIiNmZmZcIiB3aWR0aD1cIjcyMFwiIGhlaWdodD1cIjcyMFwiIC8+XG4gICAgICA8L21hc2s+XG4gICAgICA8bWFzayBpZD1cIiR7aWNvblByZWZpeH1fcmV2ZXJzZV9NYXNrLTJcIj5cbiAgICAgICAgPHJlY3QgeD1cIi0xNDQuM1wiIHk9XCIxNDQuM1wiIGZpbGw9XCIjZmZmXCIgd2lkdGg9XCI3MjBcIiBoZWlnaHQ9XCI3MjBcIiAvPlxuICAgICAgICA8cGF0aCBkPVwiTS0wLjMgLjFjMCAwIDEuMyAxLjIgMS4zIDEuMmMwIDAgLjMtMS42IC4zLTEuNmMwIDAtMS42IC40LTEuNiAuNFwiIC8+XG4gICAgICAgIDxwYXRoIGZpbGw9XCIjZmZmXCIgZD1cIk0uMyAuN2MwIDAtMC4zIC4zLTAuMyAuM2MwIDAgMCAwIDAgMGMwIDAgLjMtMC4zIC4zLTAuM2MwIDAgMCAwIDAgMFwiIC8+XG4gICAgICAgIDxwYXRoIGQ9XCJNLjMgLjdjMCAwLTAuMSAwLTAuMSAwYzAgMCAuMSAuMSAuMSAuMWMwIDAgLjEtMC4xIC4xLTAuMWMwIDAtMC4xIDAtMC4xIDBtMjIyLjggNDY5LjFjMCAwLTcwLjUgNjkuNC03MC41IDY5LjRjMCAwIDM0LjEgMzMuNSAzNC4xIDMzLjVjMCAwIDY3LTcyLjkgNjctNzIuOWMwIDAtMzAuNi0zMC0zMC42LTMwXCIgLz5cbiAgICAgIDwvbWFzaz5cbiAgICAgIDxtYXNrIGlkPVwiJHtpY29uUHJlZml4fV9yZXZlcnNlX01hc2stM1wiPlxuICAgICAgICA8cmVjdCBmaWxsPVwiI2ZmZlwiIHdpZHRoPVwiNzIwXCIgaGVpZ2h0PVwiNzIwXCIgLz5cbiAgICAgICAgPHBhdGggZD1cIk00ODkuOCAyNzcuNGMwIDAgNzggMTguOCA3OCAxOC44YzAgMC05Ni4xIDYxLjUtOTYuMSA2MS41YzAgMCA1OS42LTQxLjEgNTkuNi00MS4xYzAgMCAxMC42LTUzLjggMTAuNi01My44YzAgMC0zOC4yIC42LTM4LjIgLjZjMCAwLTEzLjkgMTQtMTMuOSAxNG0tNjcuOC0xMDguMWMwIDAgNzMuOSAxLjMgNzMuOSAxLjNjMCAwLTMzLjggNTQuNS0zMy44IDU0LjVjMCAwIDE4LjYtMy4yIDE4LjYtMy4yYzAgMCAzNS40LTM2LjUgMzUuNC0zNi41YzAgMC02Mi0yNS45LTYyLTI1LjljMCAwLTMyLjEgOS44LTMyLjEgOS44XCIgLz5cbiAgICAgIDwvbWFzaz5cbiAgICAgIDxtYXNrIGlkPVwiJHtpY29uUHJlZml4fV9yZXZlcnNlX01hc2stNFwiPlxuICAgICAgICA8cmVjdCB4PVwiLTkxLjFcIiB5PVwiOTEuMVwiIGZpbGw9XCIjZmZmXCIgd2lkdGg9XCI3MjBcIiBoZWlnaHQ9XCI3MjBcIiAvPlxuICAgICAgICA8cGF0aCBkPVwiTS0wLjMgLjFjMCAwIDEuMyAxLjIgMS4zIDEuMmMwIDAgLjMtMS42IC4zLTEuNmMwIDAtMS42IC40LTEuNiAuNFwiIC8+XG4gICAgICAgIDxwYXRoIGZpbGw9XCIjZmZmXCIgZD1cIk0uMyAuN2MwIDAtMC4zIC4zLTAuMyAuM2MwIDAgMCAwIDAgMGMwIDAgLjMtMC4zIC4zLTAuM2MwIDAgMCAwIDAgMFwiIC8+XG4gICAgICAgIDxwYXRoIGQ9XCJNLjMgLjdjMCAwLTAuMSAwLTAuMSAwYzAgMCAuMSAuMSAuMSAuMWMwIDAgLjEtMC4xIC4xLTAuMWMwIDAtMC4xIDAtMC4xIDBtMjIyLjggNDY5LjFjMCAwLTcwLjUgNjkuNC03MC41IDY5LjRjMCAwIDM0LjEgMzMuNSAzNC4xIDMzLjVjMCAwIDY3LTcyLjkgNjctNzIuOWMwIDAtMzAuNi0zMC0zMC42LTMwXCIgLz5cbiAgICAgIDwvbWFzaz5cbiAgICAgIDxtYXNrIGlkPVwiJHtpY29uUHJlZml4fV9yZXZlcnNlX01hc2stNVwiPlxuICAgICAgICA8cmVjdCBmaWxsPVwiI2ZmZlwiIHdpZHRoPVwiNzIwXCIgaGVpZ2h0PVwiNzIwXCIgLz5cbiAgICAgICAgPHBhdGggZD1cIk00ODguNCAyOTEuNGMwIDAgNDAuNSAzOS4zIDQwLjUgMzkuM2MwIDAtNTcuMiAyNy01Ny4yIDI3YzAgMCA1OS42LTQxLjEgNTkuNi00MS4xYzAgMCAxMC42LTUzLjggMTAuNi01My44YzAgMC0zOC4yIC42LTM4LjIgLjZjMCAwLTE1LjMgMjgtMTUuMyAyOG0tOTAuNS05Ny40YzAgMCA1Mi0xMS4zIDUyLTExLjNjMCAwLTYgNDUuMi02IDQ1LjJjMCAwIDM2LjgtNiAzNi44LTZjMCAwIDM5LjMtMzEuOSAzOS4zLTMxLjljMCAwLTY1LjktMzAuNS02NS45LTMwLjVjMCAwLTU2LjIgMzQuNS01Ni4yIDM0LjVcIiAvPlxuICAgICAgPC9tYXNrPlxuICAgICAgPG1hc2sgaWQ9XCIke2ljb25QcmVmaXh9X3JldmVyc2VfTWFzay02XCI+XG4gICAgICAgIDxyZWN0IHg9XCItNjEuM1wiIHk9XCI2MS4zXCIgZmlsbD1cIiNmZmZcIiB3aWR0aD1cIjcyMFwiIGhlaWdodD1cIjcyMFwiIC8+XG4gICAgICA8L21hc2s+XG4gICAgICA8bWFzayBpZD1cIiR7aWNvblByZWZpeH1fcmV2ZXJzZV9NYXNrLTdcIj5cbiAgICAgICAgPHJlY3QgZmlsbD1cIiNmZmZcIiB3aWR0aD1cIjcyMFwiIGhlaWdodD1cIjcyMFwiIC8+XG4gICAgICAgIDxwYXRoIGQ9XCJNNDgxLjggMjk4LjRjMCAwIDI3LjUgMzkuOCAyNy41IDM5LjhjMCAwLTM3LjYgMTkuNS0zNy42IDE5LjVjMCAwIDU5LjYtNDEuMSA1OS42LTQxLjFjMCAwIDEwLjYtNTMuOCAxMC42LTUzLjhjMCAwLTM4LjIgLjYtMzguMiAuNmMwIDAtMjEuOSAzNS0yMS45IDM1bS0xMDguMS03OS43YzAgMCAzMC4yLTIzLjggMzAuMi0yMy44YzAgMCAyMS43IDM1LjkgMjEuNyAzNS45YzAgMCA1NS4xLTguOSA1NS4xLTguOWMwIDAgMzUuNC0zNi41IDM1LjQtMzYuNWMwIDAtNjItMjUuOS02Mi0yNS45YzAgMC04MC40IDU5LjItODAuNCA1OS4yXCIgLz5cbiAgICAgIDwvbWFzaz5cbiAgICAgIDxtYXNrIGlkPVwiJHtpY29uUHJlZml4fV9yZXZlcnNlX01hc2stOFwiPlxuICAgICAgICA8cmVjdCB4PVwiLTQyLjZcIiB5PVwiNDIuNlwiIGZpbGw9XCIjZmZmXCIgd2lkdGg9XCI3MjBcIiBoZWlnaHQ9XCI3MjBcIiAvPlxuICAgICAgPC9tYXNrPlxuICAgICAgPG1hc2sgaWQ9XCIke2ljb25QcmVmaXh9X3JldmVyc2VfTWFzay05XCI+XG4gICAgICAgIDxyZWN0IGZpbGw9XCIjZmZmXCIgd2lkdGg9XCI3MjBcIiBoZWlnaHQ9XCI3MjBcIiAvPlxuICAgICAgICA8cGF0aCBkPVwiTTQ3NS4yIDMwNS40YzAgMCAxNC41IDQwLjMgMTQuNSA0MC4zYzAgMC0xOCAxMi0xOCAxMmMwIDAgNTkuNi00MS4xIDU5LjYtNDEuMWMwIDAgMTAuNi01My44IDEwLjYtNTMuOGMwIDAtMzguMiAuNi0zOC4yIC42YzAgMC0yOC41IDQyLTI4LjUgNDJtLTExMy42LTc0LjNjMCAwIDE3LjktMTguNSAxNy45LTE4LjVjMCAwIDM2LjQgMjUuMyAzNi40IDI1LjNjMCAwIDY0LjgtMTYgNjQuOC0xNmMwIDAgMzkuMy0zMS45IDM5LjMtMzEuOWMwIDAtNjUuOS0zMC41LTY1LjktMzAuNWMwIDAtOTIuNSA3MS42LTkyLjUgNzEuNlwiIC8+XG4gICAgICA8L21hc2s+XG4gICAgICA8bWFzayBpZD1cIiR7aWNvblByZWZpeH1fcmV2ZXJzZV9NYXNrLTEwXCI+XG4gICAgICAgIDxyZWN0IHg9XCItMjkuNlwiIHk9XCIyOS42XCIgZmlsbD1cIiNmZmZcIiB3aWR0aD1cIjcyMFwiIGhlaWdodD1cIjcyMFwiIC8+XG4gICAgICA8L21hc2s+XG4gICAgICA8bWFzayBpZD1cIiR7aWNvblByZWZpeH1fcmV2ZXJzZV9NYXNrLTExXCI+XG4gICAgICAgIDxyZWN0IGZpbGw9XCIjZmZmXCIgd2lkdGg9XCI3MjBcIiBoZWlnaHQ9XCI3MjBcIiAvPlxuICAgICAgICA8cGF0aCBkPVwiTTQ2OC42IDMxMi40YzAgMCAxLjUgNDAuOCAxLjUgNDAuOGMwIDAgMS42IDQuNSAxLjYgNC41YzAgMCA1OS42LTQxLjEgNTkuNi00MS4xYzAgMCAxMC42LTUzLjggMTAuNi01My44YzAgMC0zOC4yIC42LTM4LjIgLjZjMCAwLTM1LjEgNDktMzUuMSA0OW0tMTA3LTgxLjNjMCAwIDE1LjEgNC45IDE1LjEgNC45YzAgMCAzOC4yIDEzLjMgMzguMiAxMy4zYzAgMCA2NS44LTI3LjQgNjUuOC0yNy40YzAgMCAzOS4zLTIxLjkgMzkuMy0yMS45YzAgMC02NS45LTQwLjUtNjUuOS00MC41YzAgMC05Mi41IDcxLjYtOTIuNSA3MS42XCIgLz5cbiAgICAgIDwvbWFzaz5cbiAgICAgIDxtYXNrIGlkPVwiJHtpY29uUHJlZml4fV9yZXZlcnNlX01hc2stMTJcIj5cbiAgICAgICAgPHJlY3QgeD1cIi0yMC4zXCIgeT1cIjIwLjNcIiBmaWxsPVwiI2ZmZlwiIHdpZHRoPVwiNzIwXCIgaGVpZ2h0PVwiNzIwXCIgLz5cbiAgICAgIDwvbWFzaz5cbiAgICAgIDxtYXNrIGlkPVwiJHtpY29uUHJlZml4fV9yZXZlcnNlX01hc2stMTNcIj5cbiAgICAgICAgPHJlY3QgZmlsbD1cIiNmZmZcIiB3aWR0aD1cIjcyMFwiIGhlaWdodD1cIjcyMFwiIC8+XG4gICAgICAgIDxwYXRoIGQ9XCJNNDU2LjYgMzExLjljMCAwLTcgMzUuNi03IDM1LjZjMCAwIDIyLjEgMTAuMiAyMi4xIDEwLjJjMCAwIDU5LjYtNDEuMSA1OS42LTQxLjFjMCAwIDEwLjYtNTMuOCAxMC42LTUzLjhjMCAwLTM4LjIgLjYtMzguMiAuNmMwIDAtNDcuMSA0OC41LTQ3LjEgNDguNW0tOTUtODAuOGMwIDAgMTIuMyAyOC4zIDEyLjMgMjguM2MwIDAgMzkuOSAxLjMgMzkuOSAxLjNjMCAwIDY2LjktMzguOCA2Ni45LTM4LjhjMCAwIDM5LjMtMjEuOSAzOS4zLTIxLjljMCAwLTY1LjktNDAuNS02NS45LTQwLjVjMCAwLTkyLjUgNzEuNi05Mi41IDcxLjZcIiAvPlxuICAgICAgPC9tYXNrPlxuICAgICAgPG1hc2sgaWQ9XCIke2ljb25QcmVmaXh9X3JldmVyc2VfTWFzay0xNFwiPlxuICAgICAgICA8cmVjdCB4PVwiLTEzLjRcIiB5PVwiMTMuNFwiIGZpbGw9XCIjZmZmXCIgd2lkdGg9XCI3MjBcIiBoZWlnaHQ9XCI3MjBcIiAvPlxuICAgICAgPC9tYXNrPlxuICAgICAgPG1hc2sgaWQ9XCIke2ljb25QcmVmaXh9X3JldmVyc2VfTWFzay0xNVwiPlxuICAgICAgICA8cmVjdCBmaWxsPVwiI2ZmZlwiIHdpZHRoPVwiNzIwXCIgaGVpZ2h0PVwiNzIwXCIgLz5cbiAgICAgICAgPHBhdGggZD1cIk00NDQuNiAzMTEuNGMwIDAtMTUuNiAzMC41LTE1LjYgMzAuNWMwIDAgNDIuNyAxNS44IDQyLjcgMTUuOGMwIDAgNTkuNi00MS4xIDU5LjYtNDEuMWMwIDAgMTAuNi01My44IDEwLjYtNTMuOGMwIDAtMzguMiAuNi0zOC4yIC42YzAgMC01OS4xIDQ4LTU5LjEgNDhtLTgzLTgwLjNjMCAwIDkuNSA1MS43IDkuNSA1MS43YzAgMCA0MS43LTEwLjggNDEuNy0xMC44YzAgMCA2Ny45LTUwLjEgNjcuOS01MC4xYzAgMCA1MC42LTMxLjkgNTAuNi0zMS45YzAgMC03Ny4yLTMwLjUtNzcuMi0zMC41YzAgMC05Mi41IDcxLjYtOTIuNSA3MS42XCIgLz5cbiAgICAgIDwvbWFzaz5cbiAgICAgIDxtYXNrIGlkPVwiJHtpY29uUHJlZml4fV9yZXZlcnNlX01hc2stMTZcIj5cbiAgICAgICAgPHJlY3QgeD1cIi03LjNcIiB5PVwiNy4zXCIgZmlsbD1cIiNmZmZcIiB3aWR0aD1cIjcyMFwiIGhlaWdodD1cIjcyMFwiIC8+XG4gICAgICA8L21hc2s+XG4gICAgICA8bWFzayBpZD1cIiR7aWNvblByZWZpeH1fcmV2ZXJzZV9NYXNrLTE3XCI+XG4gICAgICAgIDxyZWN0IGZpbGw9XCIjZmZmXCIgd2lkdGg9XCI3MjBcIiBoZWlnaHQ9XCI3MjBcIiAvPlxuICAgICAgICA8cGF0aCBkPVwiTTQzMi42IDMxMC45YzAgMC0yNC4yIDI1LjMtMjQuMiAyNS4zYzAgMCA2My4zIDIxLjUgNjMuMyAyMS41YzAgMCA1OS42LTQxLjEgNTkuNi00MS4xYzAgMCAxMC42LTUzLjggMTAuNi01My44YzAgMC0zOC4yIC42LTM4LjIgLjZjMCAwLTcxLjEgNDcuNS03MS4xIDQ3LjVtLTcxLTc5LjhjMCAwIDIwLjMgOTAuNCAyMC4zIDkwLjRjMCAwIDI5LTI5LjUgMjktMjkuNWMwIDAgNjkuOC03MC4xIDY5LjgtNzAuMWMwIDAgMzUuNC0zNi41IDM1LjQtMzYuNWMwIDAtNjItMjUuOS02Mi0yNS45YzAgMC05Mi41IDcxLjYtOTIuNSA3MS42XCIgLz5cbiAgICAgIDwvbWFzaz5cbiAgICAgIDxtYXNrIGlkPVwiJHtpY29uUHJlZml4fV9yZXZlcnNlX01hc2stMThcIj5cbiAgICAgICAgPHJlY3QgeD1cIi00XCIgeT1cIjRcIiBmaWxsPVwiI2ZmZlwiIHdpZHRoPVwiNzIwXCIgaGVpZ2h0PVwiNzIwXCIgLz5cbiAgICAgIDwvbWFzaz5cbiAgICAgIDxtYXNrIGlkPVwiJHtpY29uUHJlZml4fV9yZXZlcnNlX01hc2stMTlcIj5cbiAgICAgICAgPHJlY3QgZmlsbD1cIiNmZmZcIiB3aWR0aD1cIjcyMFwiIGhlaWdodD1cIjcyMFwiIC8+XG4gICAgICAgIDxwYXRoIGQ9XCJNNDMyLjYgMzEwLjljMCAwLTI0LjIgMjUuMy0yNC4yIDI1LjNjMCAwIDYzLjMgMjEuNSA2My4zIDIxLjVjMCAwIDU5LjYtNDEuMSA1OS42LTQxLjFjMCAwIDEwLjYtNTMuOCAxMC42LTUzLjhjMCAwLTM4LjIgLjYtMzguMiAuNmMwIDAtNzEuMSA0Ny41LTcxLjEgNDcuNW0tNzEtNzkuOGMwIDAgMjAuMyA5MC40IDIwLjMgOTAuNGMwIDAgMjktMjkuNSAyOS0yOS41YzAgMCA2OS44LTcwLjEgNjkuOC03MC4xYzAgMCAzOS4zLTMxLjkgMzkuMy0zMS45YzAgMC02NS45LTMwLjUtNjUuOS0zMC41YzAgMC05Mi41IDcxLjYtOTIuNSA3MS42XCIgLz5cbiAgICAgIDwvbWFzaz5cbiAgICAgIDxtYXNrIGlkPVwiJHtpY29uUHJlZml4fV9yZXZlcnNlX01hc2stMjBcIj5cbiAgICAgICAgPHJlY3QgZmlsbD1cIiNmZmZcIiB3aWR0aD1cIjcyMFwiIGhlaWdodD1cIjcyMFwiIC8+XG4gICAgICA8L21hc2s+XG4gICAgICA8Y2xpcFBhdGggaWQ9XCIke2ljb25QcmVmaXh9X3JldmVyc2VfQ2xpcFBhdGgtMVwiPlxuICAgICAgICA8cmVjdCB3aWR0aD1cIjcyMFwiIGhlaWdodD1cIjcyMFwiIC8+XG4gICAgICA8L2NsaXBQYXRoPlxuICAgIDwvZGVmcz5cbiAgICA8ZyB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoMCwwKSBzY2FsZSguMSwuMSlcIj5cbiAgICAgIDxnIG1hc2s9XCJ1cmwoIyR7aWNvblByZWZpeH1fcmV2ZXJzZV9NYXNrLTEpXCI+XG4gICAgICAgIDxwYXRoIGQ9XCJNMzc3LjUgMzk1LjNjMCAwIDY0LjggMCA2NC44IDBjMCAwIDAgMTI5LjYgMCAxMjkuNmMwIDAgMjguOCAwIDI4LjggMGMwIDAgMC0xMjkuNiAwLTEyOS42YzAgMCA2NC44IDAgNjQuOCAwYzAgMCAwLTI4LjggMC0yOC44YzAgMC0xNTguNCAwLTE1OC40IDBjMCAwIDAgMjguOCAwIDI4LjhaXCIgLz5cbiAgICAgICAgPHBhdGggZD1cIk0zMzguOSAzNjMuNmMwIDAtNjIuNSA2Mi40LTYyLjUgNjIuNGMwIDAtNjIuNC02Mi40LTYyLjQtNjIuNGMwIDAtMjAuNCAyMC40LTIwLjQgMjAuNGMwIDAgNjIuNSA2Mi40IDYyLjUgNjIuNGMwIDAtNjIuNSA2Mi40LTYyLjUgNjIuNGMwIDAgMjAuNCAyMC40IDIwLjQgMjAuNGMwIDAgNjIuNC02Mi40IDYyLjQtNjIuNGMwIDAgNjIuNSA2Mi40IDYyLjUgNjIuNGMwIDAgMjAuMy0yMC40IDIwLjMtMjAuNGMwIDAtNjIuNC02Mi40LTYyLjQtNjIuNGMwIDAgNjIuNC02Mi40IDYyLjQtNjIuNGMwIDAtMjAuMy0yMC40LTIwLjMtMjAuNFpcIiAvPlxuICAgICAgICA8cGF0aCBkPVwiTTQ1NC43IDM0NS44YzQ0LjggMCA4MS0zNi4zIDgxLTgxYzAgMC0yOC44IDAtMjguOCAwYzAgMjguOC0yMy4zIDUyLjItNTIuMiA1Mi4yYy04LjIgMC0xNi0xLjktMjIuOS01LjNjMCAwIDY5LjgtNjkuOSA2OS44LTY5LjljMCAwIDIxLjEtMjEgMjEuMS0yMWMtMTQuNC0yMi4zLTM5LjUtMzctNjgtMzdjLTQ0LjcgMC04MSAzNi4yLTgxIDgxYzAgNDQuNyAzNi4zIDgxIDgxIDgxWm0wLTEzMy4yYzEwLjIgMCAxOS42IDIuOSAyNy42IDcuOWMwIDAtNzEuOSA3MS44LTcxLjkgNzEuOGMtNS04LTcuOS0xNy40LTcuOS0yNy41YzAtMjguOSAyMy40LTUyLjIgNTIuMi01Mi4yWlwiIC8+XG4gICAgICAgIDxwYXRoIGQ9XCJNMjc2LjQgMjU1LjljMCAwLTYwLjctNzIuOC02MC43LTcyLjhjMCAwLTIyLjEgMTguNi0yMi4xIDE4LjZjMCAwIDY4LjQgODIgNjguNCA4MmMwIDAgMCA2Mi40IDAgNjIuNGMwIDAgMjguOCAwIDI4LjggMGMwIDAgMC02Mi42IDAtNjIuNmMwIDAgNjguNC04MS44IDY4LjQtODEuOGMwIDAtMjItMTguNi0yMi0xOC42YzAgMC02MC44IDcyLjgtNjAuOCA3Mi44WlwiIC8+XG4gICAgICA8L2c+XG4gICAgICA8cGF0aCBzdHJva2U9XCIjMDAwXCIgc3Ryb2tlLXdpZHRoPVwiMzBcIiBkPVwiTTAtMzUzLjdjMTk1LjIgMCAzNTMuNyAxNTguNSAzNTMuNyAzNTMuN2MwIDE5NS4yLTE1OC41IDM1My43LTM1My43IDM1My43Yy0xOTUuMiAwLTM1My43LTE1OC41LTM1My43LTM1My43YzAtMTk1LjIgMTU4LjUtMzUzLjcgMzUzLjctMzUzLjdaXCIgZmlsbD1cIm5vbmVcIiB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoMzU5LjgsMzYwLjQpIHNjYWxlKC45NzcsLjk3NylcIiAvPlxuICAgIDwvZz5cbiAgICA8ZyBvcGFjaXR5PVwiMFwiIHRyYW5zZm9ybT1cInRyYW5zbGF0ZSgwLDApIHNjYWxlKC4xLC4xKVwiPlxuICAgICAgPGcgZGlzcGxheT1cImJsb2NrXCIgbWFzaz1cInVybCgjJHtpY29uUHJlZml4fV9yZXZlcnNlX01hc2stMilcIiB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoMTQ0LjMsLTE0NC4zKVwiPlxuICAgICAgICA8cGF0aCBkPVwiTTIyNC4yIDQ3OC4zYzAgMC0yMTAuNiAyMTAuNS0yMTAuNiAyMTAuNWMwIDAgMjAuNCAyMC40IDIwLjQgMjAuNGMwIDAgMjEwLjctMjEwLjcgMjEwLjctMjEwLjdjLTExLjctMTEtNS45LTYtMjAuNS0yMC4yWlwiIC8+XG4gICAgICA8L2c+XG4gICAgICA8ZyBkaXNwbGF5PVwiYmxvY2tcIiBtYXNrPVwidXJsKCMke2ljb25QcmVmaXh9X3JldmVyc2VfTWFzay0zKVwiPlxuICAgICAgICA8cGF0aCBkPVwiTTM5MC42IDM5NS4yYzAgMCA1MS43IC4xIDUxLjcgLjFjMCAwIC4xIDEwMy42IC4xIDEwMy42YzAgMCAyOC43IDAgMjguNyAwYzAgMCAwLTEwMy42IDAtMTAzLjZjMCAwIDUyLTAuMSA1Mi0wLjFjMCAwIDAtMjguNCAwLTI4LjRjMCAwLTEzMi41IDAtMTMyLjUgMGMwIDAgMCAyOC40IDAgMjguNFpcIiAvPlxuICAgICAgICA8cGF0aCBkPVwiTTMyOSAzNzMuNGMwIC4xLTUyLjYgNTIuNi01Mi42IDUyLjZjMCAwLTYyLjQtNjIuNC02Mi40LTYyLjRjMCAwLTIwLjQgMjAuNC0yMC40IDIwLjRjMCAwIDYyLjUgNjIuNCA2Mi41IDYyLjRjMCAwLTYyLjUgNjIuNC02Mi41IDYyLjRjMCAwIDIwLjQgMjAuNCAyMC40IDIwLjRjMCAwIDYyLjQtNjIuNCA2Mi40LTYyLjRjMCAwIDYyLjUgNjIuNCA2Mi41IDYyLjRjMCAwIDIwLjMtMjAuNCAyMC4zLTIwLjRjMCAwLTYyLjQtNjIuNC02Mi40LTYyLjRjMCAwIDUyLjYtNTIuNiA1Mi42LTUyLjZjMCAwLTIwLjQtMjAuMy0yMC40LTIwLjNaXCIgLz5cbiAgICAgICAgPHBhdGggZD1cIk00NTQuNyAzNDUuOGM0NC44IDAgODEtMzYuMyA4MS04MWMwIDAtMjguOCAwLTI4LjggMGMwIDI4LjgtMjMuMyA1Mi4yLTUyLjIgNTIuMmMtOC4yIDAtMTYtMS45LTIyLjktNS4zYzAgMCA2OS44LTY5LjkgNjkuOC02OS45YzAgMCAyMS4xLTIxIDIxLjEtMjFjLTE0LjQtMjIuMy0zOS41LTM3LTY4LTM3Yy00NC43IDAtODEgMzYuMi04MSA4MWMwIDQ0LjcgMzYuMyA4MSA4MSA4MVptMC0xMzMuMmMxMC4yIDAgMTkuNiAyLjkgMjcuNiA3LjljMCAwLTcxLjkgNzEuOC03MS45IDcxLjhjLTUtOC03LjktMTcuNC03LjktMjcuNWMwLTI4LjkgMjMuNC01Mi4yIDUyLjItNTIuMlpcIiAvPlxuICAgICAgICA8cGF0aCBkPVwiTTI3Ni40IDI1NS45YzAgMC00OC43LTU4LjMtNDguNy01OC4zYzAgMC0yMS4xIDE5LTIxLjEgMTljMCAwIDU1LjUgNjcuMiA1NS41IDY3LjJjMCAwIC4zIDUwIC4zIDUwYzAgMCAyOC40IDAgMjguNCAwYzAgMCAwLTUwLjMgMC01MC4zYzAgMCA1NS40LTY2LjkgNTUuNC02Ni45YzAgMC0yMS0xOC42LTIxLTE4LjZjMCAwLTQ4LjggNTcuOS00OC44IDU3LjlaXCIgLz5cbiAgICAgIDwvZz5cbiAgICAgIDxwYXRoIHN0cm9rZT1cIiMwMDBcIiBzdHJva2Utd2lkdGg9XCIzMFwiIGQ9XCJNMC0zMzYuMmMxODUuNiAwIDMzNi4yIDE1MC42IDMzNi4yIDMzNi4yYzAgMTg1LjYtMTUwLjYgMzM2LjItMzM2LjIgMzM2LjJjLTE4NS42IDAtMzM2LjItMTUwLjYtMzM2LjItMzM2LjJjMC0xODUuNiAxNTAuNi0zMzYuMiAzMzYuMi0zMzYuMlpcIiBmaWxsPVwibm9uZVwiIGRpc3BsYXk9XCJibG9ja1wiIHRyYW5zZm9ybT1cInRyYW5zbGF0ZSgzNzAuOCwzNDcuNSkgc2NhbGUoLjk3NywuOTc3KVwiIC8+XG4gICAgPC9nPlxuICAgIDxnIG9wYWNpdHk9XCIwXCIgdHJhbnNmb3JtPVwidHJhbnNsYXRlKDAsMCkgc2NhbGUoLjEsLjEpXCI+XG4gICAgICA8ZyBtYXNrPVwidXJsKCMke2ljb25QcmVmaXh9X3JldmVyc2VfTWFzay00KVwiIHRyYW5zZm9ybT1cInRyYW5zbGF0ZSg5MS4xLC05MS4xKVwiPlxuICAgICAgICA8cGF0aCBkPVwiTTIyNC4yIDQ3OC4zYzAgMC0yMTAuNiAyMTAuNS0yMTAuNiAyMTAuNWMwIDAgMjAuNCAyMC40IDIwLjQgMjAuNGMwIDAgMjEwLjctMjEwLjcgMjEwLjctMjEwLjdjLTExLjctMTEtNS45LTYtMjAuNS0yMC4yWlwiIC8+XG4gICAgICA8L2c+XG4gICAgICA8ZyBtYXNrPVwidXJsKCMke2ljb25QcmVmaXh9X3JldmVyc2VfTWFzay01KVwiPlxuICAgICAgICA8cGF0aCBkPVwiTTQwOS43IDM5NS4xYzAgMCAzMi42IC4yIDMyLjYgLjJjMCAwIC4zIDY1LjUgLjMgNjUuNWMwIDAgMjguNSAwIDI4LjUgMGMwIDAgMC02NS41IDAtNjUuNWMwIDAgMzMuMS0wLjIgMzMuMS0wLjJjMCAwIDAtMjcuOCAwLTI3LjhjMCAwLTk0LjUgMC05NC41IDBjMCAwIDAgMjcuOCAwIDI3LjhaXCIgLz5cbiAgICAgICAgPHBhdGggZD1cIk0zMTkuNyAzODIuOGMwIDAtNDMuMyA0My4yLTQzLjMgNDMuMmMwIDAtNjIuNC02Mi40LTYyLjQtNjIuNGMwIDAtMjAuNCAyMC40LTIwLjQgMjAuNGMwIDAgNjIuNSA2Mi40IDYyLjUgNjIuNGMwIDAtNjIuNSA2Mi40LTYyLjUgNjIuNGMwIDAgMjAuNCAyMC40IDIwLjQgMjAuNGMwIDAgNjIuNC02Mi40IDYyLjQtNjIuNGMwIDAgNjIuNSA2Mi40IDYyLjUgNjIuNGMwIDAgMjAuMy0yMC40IDIwLjMtMjAuNGMwIDAtNjIuNC02Mi40LTYyLjQtNjIuNGMwIDAgNDMuNC00My4zIDQzLjQtNDMuM2MwIDAtMjAuNS0yMC4zLTIwLjUtMjAuM1pcIiAvPlxuICAgICAgICA8cGF0aCBkPVwiTTUwMi44IDE5OS42Yy0xMy40LTkuOS0zMC0xNS44LTQ4LjEtMTUuOGMtNDQuNyAwLTgxIDM2LjItODEgODFjMCA0NC43IDM2LjMgODEgODEgODFjNDQuOCAwIDgxLTM2LjMgODEtODFoLTI4LjhjMCAyOC44LTIzLjMgNTIuMi01Mi4yIDUyLjJjLTguMiAwLTE2LTEuOS0yMi45LTUuM2w2OS44LTY5LjlsLjMtMC4ybC0yMC4zLTIwLjRsLTcxLjIgNzEuMWMtNS04LTcuOS0xNy40LTcuOS0yNy41YzAtMjguOSAyMy40LTUyLjIgNTIuMi01Mi4yYzEwLjEgMCAxOS40IDIuOCAyNy40IDcuN1pcIiBmaWxsLXJ1bGU9XCJldmVub2RkXCIgLz5cbiAgICAgICAgPHBhdGggZD1cIk0yNzYuNCAyNTUuOWMwIDAtMzEuMS0zNy0zMS4xLTM3YzAgMC0xOS43IDE5LjUtMTkuNyAxOS41YzAgMCAzNi43IDQ1LjYgMzYuNyA0NS42YzAgMCAuNyAzMS44IC43IDMxLjhjMCAwIDI3LjcgMCAyNy43IDBjMCAwIDAtMzIuNCAwLTMyLjRjMCAwIDM2LjUtNDQuOSAzNi41LTQ0LjljMCAwLTE5LjYtMTguNi0xOS42LTE4LjZjMCAwLTMxLjIgMzYtMzEuMiAzNlpcIiAvPlxuICAgICAgPC9nPlxuICAgICAgPHBhdGggc3Ryb2tlPVwiIzAwMFwiIHN0cm9rZS13aWR0aD1cIjMwXCIgZD1cIk0wLTMxMGMxNzEuMSAwIDMxMCAxMzguOSAzMTAgMzEwYzAgMTcxLjEtMTM4LjkgMzEwLTMxMCAzMTBjLTE3MS4xIDAtMzEwLTEzOC45LTMxMC0zMTBjMC0xNzEuMSAxMzguOS0zMTAgMzEwLTMxMFpcIiBmaWxsPVwibm9uZVwiIHRyYW5zZm9ybT1cInRyYW5zbGF0ZSgzODcuOCwzMjguNykgc2NhbGUoLjk3NywuOTc3KVwiIC8+XG4gICAgPC9nPlxuICAgIDxnIG9wYWNpdHk9XCIwXCIgdHJhbnNmb3JtPVwidHJhbnNsYXRlKDAsMCkgc2NhbGUoLjEsLjEpXCI+XG4gICAgICA8ZyBkaXNwbGF5PVwiYmxvY2tcIiBtYXNrPVwidXJsKCMke2ljb25QcmVmaXh9X3JldmVyc2VfTWFzay02KVwiIHRyYW5zZm9ybT1cInRyYW5zbGF0ZSg2MS4zLC02MS4zKVwiPlxuICAgICAgICA8cGF0aCBkPVwiTTIyNC4yIDQ3OC4zYzAgMC0yMTAuNiAyMTAuNS0yMTAuNiAyMTAuNWMwIDAgMjAuNCAyMC40IDIwLjQgMjAuNGMwIDAgMjEwLjctMjEwLjcgMjEwLjctMjEwLjdjLTExLjctMTEtNS45LTYtMjAuNS0yMC4yWlwiIC8+XG4gICAgICA8L2c+XG4gICAgICA8ZyBtYXNrPVwidXJsKCMke2ljb25QcmVmaXh9X3JldmVyc2VfTWFzay03KVwiPlxuICAgICAgICA8cGF0aCBkPVwiTTQyMC40IDM5NWMwIDAgMjEuOSAuMyAyMS45IC4zYzAgMCAuNCA0NC4xIC40IDQ0LjFjMCAwIDI4LjQgMCAyOC40IDBjMCAwIDAtNDQuMSAwLTQ0LjFjMCAwIDIyLjYtMC4zIDIyLjYtMC4zYzAgMCAwLTI3LjUgMC0yNy41YzAgMC03My4zIDAtNzMuMyAwYzAgMCAwIDI3LjUgMCAyNy41WlwiIC8+XG4gICAgICAgIDxwYXRoIGQ9XCJNMzEzLjIgMzg5LjJjMCAwLTM2LjggMzYuOC0zNi44IDM2LjhjMCAwLTYyLjQtNjIuNC02Mi40LTYyLjRjMCAwLTIwLjQgMjAuNC0yMC40IDIwLjRjMCAwIDYyLjUgNjIuNCA2Mi41IDYyLjRjMCAwLTYyLjUgNjIuNC02Mi41IDYyLjRjMCAwIDIwLjQgMjAuNCAyMC40IDIwLjRjMCAwIDYyLjQtNjIuNCA2Mi40LTYyLjRjMCAwIDYyLjUgNjIuNCA2Mi41IDYyLjRjMCAwIDIwLjMtMjAuNCAyMC4zLTIwLjRjMCAwLTYyLjQtNjIuNC02Mi40LTYyLjRjMCAwIDM3LTM2LjkgMzctMzYuOWMwIDAtMjAuNi0yMC4zLTIwLjYtMjAuM1pcIiAvPlxuICAgICAgICA8cGF0aCBkPVwiTTUwMCAyMDBjLTEzLjQtOS45LTI3LjItMTYuMi00NS4zLTE2LjJjLTQ0LjcgMC04MSAzNi4yLTgxIDgxYzAgNDQuNyAzNi4zIDgxIDgxIDgxYzQ0LjggMCA4MS0zNi4zIDgxLTgxaC0yOC44YzAgMjguOC0yMy4zIDUyLjItNTIuMiA1Mi4yYy04LjIgMC0xNi0xLjktMjIuOS01LjNsNTcuNy01Ny43bC0yMC4zLTIwLjRsLTU4LjggNTguN2MtNS04LTcuOS0xNy40LTcuOS0yNy41YzAtMjguOSAyMy40LTUyLjIgNTIuMi01Mi4yYzEwLjEgMCAxOS40IDIuOCAyNy40IDcuN1pcIiBmaWxsLXJ1bGU9XCJldmVub2RkXCIgLz5cbiAgICAgICAgPHBhdGggZD1cIk0yNzYuNCAyNTUuOWMwIDAtMjEuMi0yNS4xLTIxLjItMjUuMWMwIDAtMTkgMTkuOC0xOSAxOS44YzAgMCAyNi4yIDMzLjUgMjYuMiAzMy41YzAgMCAxIDIxLjYgMSAyMS42YzAgMCAyNy4yIDAgMjcuMiAwYzAgMCAwLTIyLjMgMC0yMi4zYzAgMCAyNS45LTMyLjcgMjUuOS0zMi43YzAgMC0xOC44LTE4LjYtMTguOC0xOC42YzAgMC0yMS4zIDIzLjgtMjEuMyAyMy44WlwiIC8+XG4gICAgICA8L2c+XG4gICAgICA8cGF0aCBzdHJva2U9XCIjMDAwXCIgc3Ryb2tlLXdpZHRoPVwiMzBcIiBkPVwiTTAtMjk0LjNjMTYyLjQgMCAyOTQuMyAxMzEuOSAyOTQuMyAyOTQuM2MwIDE2Mi40LTEzMS45IDI5NC4zLTI5NC4zIDI5NC4zYy0xNjIuNCAwLTI5NC4zLTEzMS45LTI5NC4zLTI5NC4zYzAtMTYyLjQgMTMxLjktMjk0LjMgMjk0LjMtMjk0LjNaXCIgZmlsbD1cIm5vbmVcIiBkaXNwbGF5PVwiYmxvY2tcIiB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoMzk4LjcsMzE4LjIpIHNjYWxlKC45NzcsLjk3NylcIiAvPlxuICAgIDwvZz5cbiAgICA8ZyBvcGFjaXR5PVwiMFwiIHRyYW5zZm9ybT1cInRyYW5zbGF0ZSgwLDApIHNjYWxlKC4xLC4xKVwiPlxuICAgICAgPGcgbWFzaz1cInVybCgjJHtpY29uUHJlZml4fV9yZXZlcnNlX01hc2stOClcIiB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoNDIuNiwtNDIuNilcIj5cbiAgICAgICAgPHBhdGggZD1cIk0yMjQuMiA0NzguM2MwIDAtMjEwLjYgMjEwLjUtMjEwLjYgMjEwLjVjMCAwIDIwLjQgMjAuNCAyMC40IDIwLjRjMCAwIDIxMC43LTIxMC43IDIxMC43LTIxMC43Yy0xMS43LTExLTUuOS02LTIwLjUtMjAuMlpcIiAvPlxuICAgICAgPC9nPlxuICAgICAgPGcgZGlzcGxheT1cImJsb2NrXCIgbWFzaz1cInVybCgjJHtpY29uUHJlZml4fV9yZXZlcnNlX01hc2stOSlcIj5cbiAgICAgICAgPHBhdGggZD1cIk00MjcuMiAzOTQuOWMwIDAgMTUuMSAuNCAxNS4xIC40YzAgMCAuNCAzMC43IC40IDMwLjdjMCAwIDI4LjQgMCAyOC40IDBjMCAwIDAtMzAuNyAwLTMwLjdjMCAwIDE1LjktMC40IDE1LjktMC40YzAgMCAwLTI3LjIgMC0yNy4yYzAgMC01OS44IDAtNTkuOCAwYzAgMCAwIDI3LjIgMCAyNy4yWlwiIC8+XG4gICAgICAgIDxwYXRoIGQ9XCJNMzA3LjQgMzk1YzAgMC0zMSAzMS0zMSAzMWMwIDAtNTMuOS01NC01My45LTU0YzAgMC0yMC40IDIwLjQtMjAuNCAyMC40YzAgMCA1NCA1NCA1NCA1NGMwIDAtNjIuNSA2Mi40LTYyLjUgNjIuNGMwIDAgMjAuNCAyMC40IDIwLjQgMjAuNGMwIDAgNjIuNC02Mi40IDYyLjQtNjIuNGMwIDAgNTQgNTQgNTQgNTRjMCAwIDIwLjQtMjAuMyAyMC40LTIwLjNjMCAwLTU0LTU0LjEtNTQtNTQuMWMwIDAgMzEuMi0zMS4xIDMxLjItMzEuMWMwIDAtMjAuNi0yMC4zLTIwLjYtMjAuM1pcIiAvPlxuICAgICAgICA8cGF0aCBkPVwiTTUwMi44IDE5OS42Yy0xMy40LTkuOS0zMC4xLTE1LjgtNDguMS0xNS44Yy00NC43IDAtODEgMzYuMi04MSA4MWMwIDQ0LjcgMzYuMyA4MSA4MSA4MWM0NC44IDAgODEtMzYuMyA4MS04MWgtMjguOGMwIDI4LjgtMjMuMyA1Mi4yLTUyLjIgNTIuMmMtOC4yIDAtMTYtMS45LTIyLjktNS4zbDQ1LjUtNDUuNWwtMjAuNC0yMC40bC00Ni41IDQ2LjVjLTUtOC03LjktMTcuNC03LjktMjcuNWMwLTI4LjkgMjMuNC01Mi4yIDUyLjItNTIuMmMxMC4xIDAgMTkuNCAyLjggMjcuNCA3LjdaXCIgZmlsbC1ydWxlPVwiZXZlbm9kZFwiIC8+XG4gICAgICAgIDxwYXRoIGQ9XCJNMjc2LjQgMjU1LjljMCAwLTE1LTE3LjYtMTUtMTcuNmMwIDAtMTguNCAyMC0xOC40IDIwYzAgMCAxOS40IDI1LjggMTkuNCAyNS44YzAgMCAxLjIgMTUuMiAxLjIgMTUuMmMwIDAgMjcgMCAyNyAwYzAgMCAwLTE1LjkgMC0xNS45YzAgMCAxOS4xLTI0LjkgMTkuMS0yNC45YzAgMC0xOC4yLTE4LjctMTguMi0xOC43YzAgMC0xNS4xIDE2LjEtMTUuMSAxNi4xWlwiIC8+XG4gICAgICA8L2c+XG4gICAgICA8cGF0aCBzdHJva2U9XCIjMDAwXCIgc3Ryb2tlLXdpZHRoPVwiMzBcIiBkPVwiTTAtMjg0LjRjMTU3IDAgMjg0LjQgMTI3LjQgMjg0LjQgMjg0LjRjMCAxNTctMTI3LjQgMjg0LjQtMjg0LjQgMjg0LjRjLTE1NyAwLTI4NC40LTEyNy40LTI4NC40LTI4NC40YzAtMTU3IDEyNy40LTI4NC40IDI4NC40LTI4NC40WlwiIGZpbGw9XCJub25lXCIgdHJhbnNmb3JtPVwidHJhbnNsYXRlKDQwNi4xLDMxMS42KSBzY2FsZSguOTc3LC45NzcpXCIgLz5cbiAgICA8L2c+XG4gICAgPGcgb3BhY2l0eT1cIjBcIiB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoMCwwKSBzY2FsZSguMSwuMSlcIj5cbiAgICAgIDxnIGRpc3BsYXk9XCJibG9ja1wiIG1hc2s9XCJ1cmwoIyR7aWNvblByZWZpeH1fcmV2ZXJzZV9NYXNrLTEwKVwiIHRyYW5zZm9ybT1cInRyYW5zbGF0ZSgyOS42LC0yOS42KVwiPlxuICAgICAgICA8cGF0aCBkPVwiTTIyNC4yIDQ3OC4zYzAgMC0yMTAuNiAyMTAuNS0yMTAuNiAyMTAuNWMwIDAgMjAuNCAyMC40IDIwLjQgMjAuNGMwIDAgMjEwLjctMjEwLjcgMjEwLjctMjEwLjdjLTExLjctMTEtNS45LTYtMjAuNS0yMC4yWlwiIC8+XG4gICAgICA8L2c+XG4gICAgICA8ZyBkaXNwbGF5PVwiYmxvY2tcIiBtYXNrPVwidXJsKCMke2ljb25QcmVmaXh9X3JldmVyc2VfTWFzay0xMSlcIj5cbiAgICAgICAgPHBhdGggZD1cIk00MzYgMzkzLjVjMCAwIDguNyAuNCA4LjcgLjRjMCAwIC40IDE3LjggLjQgMTcuOGMwIDAgMjMuNiAwIDIzLjYgMGMwIDAgMC0xNy44IDAtMTcuOGMwIDAgOS40LTAuNCA5LjQtMC40YzAgMCAwLTIyLjYgMC0yMi42YzAgMC00Mi4xIDAtNDIuMSAwYzAgMCAwIDIyLjYgMCAyMi42WlwiIC8+XG4gICAgICAgIDxwYXRoIGQ9XCJNMjk3LjIgNDA1LjJjMCAwLTIwLjggMjAuOC0yMC44IDIwLjhjMCAwLTM1LjQtMzUuNi0zNS40LTM1LjZjMCAwLTIwLjMgMjAuNS0yMC4zIDIwLjVjMCAwIDM1LjQgMzUuNSAzNS40IDM1LjVjMCAwLTYyLjUgNjIuNC02Mi41IDYyLjRjMCAwIDIwLjQgMjAuNCAyMC40IDIwLjRjMCAwIDYyLjQtNjIuNCA2Mi40LTYyLjRjMCAwIDM1LjYgMzUuNSAzNS42IDM1LjVjMCAwIDIwLjItMjAuMiAyMC4yLTIwLjJjMCAwLTM1LjQtMzUuNy0zNS40LTM1LjdjMCAwIDIxLjEtMjEgMjEuMS0yMWMwIDAtMjAuNy0yMC4yLTIwLjctMjAuMlpcIiAvPlxuICAgICAgICA8cGF0aCBkPVwiTTUwMi44IDE5OS42Yy0xMy40LTkuOS0zMC4xLTE1LjgtNDguMS0xNS44Yy00NC43IDAtODEgMzYuMi04MSA4MWMwIDQ0LjcgMzYuMyA4MSA4MSA4MWM0NC44IDAgODEtMzYuMyA4MS04MWgtMjguOGMwIDI4LjgtMjMuMyA1Mi4yLTUyLjIgNTIuMmMtOC4yIDAtMTYtMS45LTIyLjktNS4zbDMzLjctMzMuN2wtMjAuNC0yMC4zbC0zNC43IDM0LjZjLTUtOC03LjktMTcuNC03LjktMjcuNWMwLTI4LjkgMjMuNC01Mi4yIDUyLjItNTIuMmMxMC4xIDAgMTkuNCAyLjggMjcuNCA3LjdaXCIgZmlsbC1ydWxlPVwiZXZlbm9kZFwiIC8+XG4gICAgICAgIDxwYXRoIGQ9XCJNMjc2LjQgMjU1LjljMCAwLTEwLjctMTIuNC0xMC43LTEyLjRjMCAwLTE4LjEgMjAuMS0xOC4xIDIwLjFjMCAwIDE0LjkgMjAuNiAxNC45IDIwLjZjMCAwIDEuMiAxMC43IDEuMiAxMC43YzAgMCAyNi44IDAgMjYuOCAwYzAgMCAwLTExLjUgMC0xMS41YzAgMCAxNC42LTE5LjYgMTQuNi0xOS42YzAgMC0xNy45LTE4LjYtMTcuOS0xOC42YzAgMC0xMC44IDEwLjctMTAuOCAxMC43WlwiIC8+XG4gICAgICA8L2c+XG4gICAgICA8cGF0aCBzdHJva2U9XCIjMDAwXCIgc3Ryb2tlLXdpZHRoPVwiMzBcIiBkPVwiTTAtMjc3LjVjMTUzLjEgMCAyNzcuNSAxMjQuNCAyNzcuNSAyNzcuNWMwIDE1My4xLTEyNC40IDI3Ny41LTI3Ny41IDI3Ny41Yy0xNTMuMSAwLTI3Ny41LTEyNC40LTI3Ny41LTI3Ny41YzAtMTUzLjEgMTI0LjQtMjc3LjUgMjc3LjUtMjc3LjVaXCIgZmlsbD1cIm5vbmVcIiBkaXNwbGF5PVwiYmxvY2tcIiB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoNDExLjIsMzA3LjEpIHNjYWxlKC45NzcsLjk3NylcIiAvPlxuICAgIDwvZz5cbiAgICA8ZyBvcGFjaXR5PVwiMFwiIHRyYW5zZm9ybT1cInRyYW5zbGF0ZSgwLDApIHNjYWxlKC4xLC4xKVwiPlxuICAgICAgPGcgZGlzcGxheT1cImJsb2NrXCIgbWFzaz1cInVybCgjJHtpY29uUHJlZml4fV9yZXZlcnNlX01hc2stMTIpXCIgdHJhbnNmb3JtPVwidHJhbnNsYXRlKDIwLjMsLTIwLjMpXCI+XG4gICAgICAgIDxwYXRoIGQ9XCJNMjI0LjIgNDc4LjNjMCAwLTIxMC42IDIxMC41LTIxMC42IDIxMC41YzAgMCAyMC40IDIwLjQgMjAuNCAyMC40YzAgMCAyMTAuNy0yMTAuNyAyMTAuNy0yMTAuN2MtMTEuNy0xMS01LjktNi0yMC41LTIwLjJaXCIgLz5cbiAgICAgIDwvZz5cbiAgICAgIDxnIGRpc3BsYXk9XCJibG9ja1wiIG1hc2s9XCJ1cmwoIyR7aWNvblByZWZpeH1fcmV2ZXJzZV9NYXNrLTEzKVwiPlxuICAgICAgICA8cGF0aCBkPVwiTTQ0NiAzOTAuOGMwIDAgMy41IC4yIDMuNSAuMmMwIDAgLjIgNy4zIC4yIDcuM2MuMSAwIDE0LjIgMCAxNC4yIDBjMCAwIDAtNy4zIDAtNy4zYzAgMCA0LTAuMiA0LTAuMmMwIDAgMC0xMy41IDAtMTMuNWMwIDAtMjEuOSAwLTIxLjkgMGMwIDAgMCAxMy41IDAgMTMuNVpcIiAvPlxuICAgICAgICA8cGF0aCBkPVwiTTI4Ny45IDQxNC40YzAgMC0xMS41IDExLjYtMTEuNSAxMS42YzAgMC0xOC41LTE4LjgtMTguNS0xOC44YzAgMC0yMC4zIDIwLjUtMjAuMyAyMC41YzAgMCAxOC41IDE4LjcgMTguNSAxOC43YzAgMC02Mi41IDYyLjQtNjIuNSA2Mi40YzAgMCAyMC40IDIwLjQgMjAuNCAyMC40YzAgMCA2Mi40LTYyLjQgNjIuNC02Mi40YzAgMCAxOC43IDE4LjcgMTguNyAxOC43YzAgMCAyMC4yLTIwIDIwLjItMjBjMCAwLTE4LjUtMTkuMS0xOC41LTE5LjFjMCAwIDExLjktMTEuOCAxMS45LTExLjhjMCAwLTIwLjgtMjAuMi0yMC44LTIwLjJaXCIgLz5cbiAgICAgICAgPHBhdGggZD1cIk01MDIuOCAxOTkuNmMtMTMuNC0xMC0zMC4xLTE1LjgtNDguMS0xNS44Yy00NC43IDAtODEgMzYuMi04MSA4MWMwIDQ0LjcgMzYuMyA4MSA4MSA4MWM0NC44IDAgODEtMzYuMyA4MS04MWgtMjguOGMwIDI4LjgtMjMuMyA1Mi4yLTUyLjIgNTIuMmMtOC4yIDAtMTYtMS45LTIyLjktNS4zbDIyLjQtMjIuNGwtMjAuNC0yMC40bC0yMy40IDIzLjRjLTUtOC03LjktMTcuNC03LjktMjcuNWMwLTI4LjkgMjMuNC01Mi4yIDUyLjItNTIuMmMxMC4xIDAgMTkuNCAyLjggMjcuNCA3LjdaXCIgZmlsbC1ydWxlPVwiZXZlbm9kZFwiIC8+XG4gICAgICAgIDxwYXRoIGQ9XCJNMjc2LjQgMjU5LjRjMCAwLTQuNS01LjItNC41LTUuMmMwIDAtMTAuNyAxMi4xLTEwLjcgMTIuMWMwIDAgNi45IDEwLjEgNi45IDEwLjFjMCAwIC44IDQuNSAuOCA0LjVjMCAwIDE2IDAgMTYgMGMwIDAgMC01IDAtNWMwIDAgNi43LTkuNCA2LjctOS40YzAgMC0xMC42LTExLjItMTAuNi0xMS4yYzAgMC00LjYgNC4xLTQuNiA0LjFaXCIgLz5cbiAgICAgIDwvZz5cbiAgICAgIDxwYXRoIHN0cm9rZT1cIiMwMDBcIiBzdHJva2Utd2lkdGg9XCIzMFwiIGQ9XCJNMC0yNzIuNWMxNTAuNCAwIDI3Mi41IDEyMi4xIDI3Mi41IDI3Mi41YzAgMTUwLjQtMTIyLjEgMjcyLjUtMjcyLjUgMjcyLjVjLTE1MC40IDAtMjcyLjUtMTIyLjEtMjcyLjUtMjcyLjVjMC0xNTAuNCAxMjIuMS0yNzIuNSAyNzIuNS0yNzIuNVpcIiBmaWxsPVwibm9uZVwiIGRpc3BsYXk9XCJibG9ja1wiIHRyYW5zZm9ybT1cInRyYW5zbGF0ZSg0MTQuOSwzMDMuNykgc2NhbGUoLjk3NywuOTc3KVwiIC8+XG4gICAgPC9nPlxuICAgIDxnIG9wYWNpdHk9XCIwXCIgdHJhbnNmb3JtPVwidHJhbnNsYXRlKDAsMCkgc2NhbGUoLjEsLjEpXCI+XG4gICAgICA8ZyBkaXNwbGF5PVwiYmxvY2tcIiBtYXNrPVwidXJsKCMke2ljb25QcmVmaXh9X3JldmVyc2VfTWFzay0xNClcIiB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoMTMuNCwtMTMuNClcIj5cbiAgICAgICAgPHBhdGggZD1cIk0yMjQuMiA0NzguM2MwIDAtMjEwLjYgMjEwLjUtMjEwLjYgMjEwLjVjMCAwIDIwLjQgMjAuNCAyMC40IDIwLjRjMCAwIDIxMC43LTIxMC43IDIxMC43LTIxMC43Yy0xMS43LTExLTUuOS02LTIwLjUtMjAuMlpcIiAvPlxuICAgICAgPC9nPlxuICAgICAgPGcgZGlzcGxheT1cImJsb2NrXCIgbWFzaz1cInVybCgjJHtpY29uUHJlZml4fV9yZXZlcnNlX01hc2stMTUpXCI+XG4gICAgICAgIDxwYXRoIGQ9XCJNNDUzLjYgMzg4LjFjMCAwIC43IDAgLjcgMGMwIDAgLjEgMS43IC4xIDEuN2MwIDAgNC43IDAgNC43IDBjMCAwIDAtMS43IDAtMS43YzAgMCAxIDAgMSAwYzAgMCAwLTQuNSAwLTQuNWMwIDAtNi41IDAtNi41IDBjMCAwIDAgNC41IDAgNC41WlwiIC8+XG4gICAgICAgIDxwYXRoIGQ9XCJNMjgwLjggNDIxLjVjMCAwLTQuNCA0LjUtNC40IDQuNWMwIDAtNS41LTUuOS01LjUtNS45YzAgMC0yMC4zIDIwLjYtMjAuMyAyMC42YzAgMCA1LjUgNS43IDUuNSA1LjdjMCAwLTYyLjUgNjIuNC02Mi41IDYyLjRjMCAwIDIwLjQgMjAuNCAyMC40IDIwLjRjMCAwIDYyLjQtNjIuNCA2Mi40LTYyLjRjMCAwIDUuOCA1LjcgNS44IDUuN2MwIDAgMjAuMS0xOS45IDIwLjEtMTkuOWMwIDAtNS41LTYuMi01LjUtNi4yYzAgMCA0LjgtNC42IDQuOC00LjZjMCAwLTIwLjgtMjAuMy0yMC44LTIwLjNaXCIgLz5cbiAgICAgICAgPHBhdGggZD1cIk01MDIuOCAxOTkuNmMtMTMuNC0xMC0zMC4xLTE1LjgtNDguMS0xNS44Yy00NC43IDAtODEgMzYuMi04MSA4MWMwIDQ0LjcgMzYuMyA4MSA4MSA4MWM0NC44IDAgODEtMzYuMyA4MS04MWgtMjguOGMwIDI4LjgtMjMuMyA1Mi4yLTUyLjIgNTIuMmMtOC4yIDAtMTYtMS45LTIyLjktNS4zbDExLjktMTEuOWwtMjAuNC0yMC4zbC0xMi45IDEyLjhjLTUtOC03LjktMTcuNC03LjktMjcuNWMwLTI4LjkgMjMuNC01Mi4yIDUyLjItNTIuMmMxMC4xIDAgMTkuNCAyLjggMjcuNCA3LjdaXCIgZmlsbC1ydWxlPVwiZXZlbm9kZFwiIC8+XG4gICAgICAgIDxwYXRoIGQ9XCJNMjc2LjQgMjYyLjljMCAwLTEtMS4yLTEtMS4yYzAgMC0zLjYgNC0zLjYgNGMwIDAgMS45IDIuOCAxLjkgMi44YzAgMCAuMiAxLjEgLjIgMS4xYzAgMCA1LjQgMCA1LjQgMGMwIDAgMC0xLjIgMC0xLjJjMCAwIDEuNy0yLjYgMS43LTIuNmMwIDAtMy41LTMuNy0zLjUtMy43YzAgMC0xLjEgLjgtMS4xIC44WlwiIC8+XG4gICAgICA8L2c+XG4gICAgICA8cGF0aCBzdHJva2U9XCIjMDAwXCIgc3Ryb2tlLXdpZHRoPVwiMzBcIiBkPVwiTTAtMjY4LjhjMTQ4LjQgMCAyNjguOCAxMjAuNCAyNjguOCAyNjguOGMwIDE0OC40LTEyMC40IDI2OC44LTI2OC44IDI2OC44Yy0xNDguNCAwLTI2OC44LTEyMC40LTI2OC44LTI2OC44YzAtMTQ4LjQgMTIwLjQtMjY4LjggMjY4LjgtMjY4LjhaXCIgZmlsbD1cIm5vbmVcIiBkaXNwbGF5PVwiYmxvY2tcIiB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoNDE3LjYsMzAxLjMpIHNjYWxlKC45NzcsLjk3NylcIiAvPlxuICAgIDwvZz5cbiAgICA8ZyBvcGFjaXR5PVwiMFwiIHRyYW5zZm9ybT1cInRyYW5zbGF0ZSgwLDApIHNjYWxlKC4xLC4xKVwiPlxuICAgICAgPGcgZGlzcGxheT1cImJsb2NrXCIgbWFzaz1cInVybCgjJHtpY29uUHJlZml4fV9yZXZlcnNlX01hc2stMTYpXCIgdHJhbnNmb3JtPVwidHJhbnNsYXRlKDcuMywtNy4zKVwiPlxuICAgICAgICA8cGF0aCBkPVwiTTIyNC4yIDQ3OC4zYzAgMC0yMTAuNiAyMTAuNS0yMTAuNiAyMTAuNWMwIDAgMjAuNCAyMC40IDIwLjQgMjAuNGMwIDAgMjEwLjctMjEwLjcgMjEwLjctMjEwLjdjLTExLjctMTEtNS45LTYtMjAuNS0yMC4yWlwiIC8+XG4gICAgICA8L2c+XG4gICAgICA8ZyBkaXNwbGF5PVwiYmxvY2tcIiBtYXNrPVwidXJsKCMke2ljb25QcmVmaXh9X3JldmVyc2VfTWFzay0xNylcIj5cbiAgICAgICAgPHBhdGggZD1cIk0yNzUuNCA0MjYuOWMwIDAtMTkuMyAxOS41LTE5LjMgMTkuNWMwIDAtNjIuNSA2Mi40LTYyLjUgNjIuNGMwIDAgMjAuNCAyMC40IDIwLjQgMjAuNGMwIDAgNjIuNC02Mi40IDYyLjQtNjIuNGMwIDAgMTkuOS0xOS43IDE5LjktMTkuN2MwIDAtMjAuOS0yMC4yLTIwLjktMjAuMlpcIiAvPlxuICAgICAgICA8cGF0aCBkPVwiTTQxMS40IDI5MS4zbDIwLjcgMjAuN2wuMS0wLjFjNi44IDMuMiAxNC41IDUuMSAyMi41IDUuMWMyOC45IDAgNTIuMi0yMy40IDUyLjItNTIuMmgyOC44YzAgNDQuNy0zNi4yIDgxLTgxIDgxYy00NC43IDAtODEtMzYuMy04MS04MWMwLTQ0LjggMzYuMy04MSA4MS04MWMxOCAwIDIxLjkgNi4zIDM1LjMgMTYuMmwtNy45IDIwLjNjLTgtNC45LTE3LjMtNy43LTI3LjQtNy43Yy0yOC44IDAtNTIuMiAyMy4zLTUyLjIgNTIuMmMwIDEwLjEgMi45IDE5LjUgNy45IDI3LjVaXCIgZmlsbC1ydWxlPVwiZXZlbm9kZFwiIC8+XG4gICAgICA8L2c+XG4gICAgICA8cGF0aCBzdHJva2U9XCIjMDAwXCIgc3Ryb2tlLXdpZHRoPVwiMzBcIiBkPVwiTTAtMjY1LjZjMTQ2LjYgMCAyNjUuNiAxMTkgMjY1LjYgMjY1LjZjMCAxNDYuNi0xMTkgMjY1LjYtMjY1LjYgMjY1LjZjLTE0Ni42IDAtMjY1LjYtMTE5LTI2NS42LTI2NS42YzAtMTQ2LjYgMTE5LTI2NS42IDI2NS42LTI2NS42WlwiIGZpbGw9XCJub25lXCIgZGlzcGxheT1cImJsb2NrXCIgdHJhbnNmb3JtPVwidHJhbnNsYXRlKDQyMCwyOTkuMSkgc2NhbGUoLjk3NywuOTc3KVwiIC8+XG4gICAgPC9nPlxuICAgIDxnIG9wYWNpdHk9XCIwXCIgdHJhbnNmb3JtPVwidHJhbnNsYXRlKDAsMCkgc2NhbGUoLjEsLjEpXCI+XG4gICAgICA8ZyBkaXNwbGF5PVwiYmxvY2tcIiBtYXNrPVwidXJsKCMke2ljb25QcmVmaXh9X3JldmVyc2VfTWFzay0xOClcIiB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoNCwtNClcIj5cbiAgICAgICAgPHBhdGggZD1cIk0yMjQuMiA0NzguM2MwIDAtMjEwLjYgMjEwLjUtMjEwLjYgMjEwLjVjMCAwIDIwLjQgMjAuNCAyMC40IDIwLjRjMCAwIDIxMC43LTIxMC43IDIxMC43LTIxMC43Yy0xMS43LTExLTUuOS02LTIwLjUtMjAuMlpcIiAvPlxuICAgICAgPC9nPlxuICAgICAgPGcgZGlzcGxheT1cImJsb2NrXCIgbWFzaz1cInVybCgjJHtpY29uUHJlZml4fV9yZXZlcnNlX01hc2stMTkpXCI+XG4gICAgICAgIDxwYXRoIGQ9XCJNMjY1LjQgNDM3LjFjMCAwLTkuMyA5LjMtOS4zIDkuM2MwIDAtNjIuNSA2Mi40LTYyLjUgNjIuNGMwIDAgMjAuNCAyMC40IDIwLjQgMjAuNGMwIDAgNjIuNC02Mi40IDYyLjQtNjIuNGMwIDAgOS44LTkuNiA5LjgtOS42YzAgMC0yMC44LTIwLjEtMjAuOC0yMC4xWlwiIC8+XG4gICAgICAgIDxwYXRoIGQ9XCJNNDAzIDI5OS4zbDIwLjkgMjAuOWw4LjMtOC4zYzYuOCAzLjIgMTQuNSA1LjEgMjIuNSA1LjFjMjguOSAwIDUyLjItMjMuNCA1Mi4yLTUyLjJoMjguOGMwIDQ0LjctMzYuMiA4MS04MSA4MWMtNDQuNyAwLTgxLTM2LjMtODEtODFjMC00NC44IDM2LjMtODEgODEtODFjMTggMCAzNC42IDUuOCA0OC4xIDE1LjhsLTIwLjcgMjAuN2MtOC00LjktMTcuMy03LjctMjcuNC03LjdjLTI4LjggMC01Mi4yIDIzLjMtNTIuMiA1Mi4yYzAgMTAgMi45IDE5LjMgNy44IDI3LjNaXCIgZmlsbC1ydWxlPVwiZXZlbm9kZFwiIC8+XG4gICAgICA8L2c+XG4gICAgICA8cGF0aCBzdHJva2U9XCIjMDAwXCIgc3Ryb2tlLXdpZHRoPVwiMzBcIiBkPVwiTTAtMjYzLjhjMTQ1LjYgMCAyNjMuOCAxMTguMiAyNjMuOCAyNjMuOGMwIDE0NS42LTExOC4yIDI2My44LTI2My44IDI2My44Yy0xNDUuNiAwLTI2My44LTExOC4yLTI2My44LTI2My44YzAtMTQ1LjYgMTE4LjItMjYzLjggMjYzLjgtMjYzLjhaXCIgZmlsbD1cIm5vbmVcIiBkaXNwbGF5PVwiYmxvY2tcIiB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoNDIxLjIsMjk3LjgpIHNjYWxlKC45NzcsLjk3NylcIiAvPlxuICAgIDwvZz5cbiAgICA8ZyBjbGlwLXBhdGg9XCJ1cmwoIyR7aWNvblByZWZpeH1fcmV2ZXJzZV9DbGlwUGF0aC0xKVwiIG9wYWNpdHk9XCIwXCIgdHJhbnNmb3JtPVwidHJhbnNsYXRlKDAsMCkgc2NhbGUoLjEsLjEpXCI+XG4gICAgICA8ZyBkaXNwbGF5PVwiYmxvY2tcIiBtYXNrPVwidXJsKCMke2ljb25QcmVmaXh9X3JldmVyc2VfTWFzay0yMClcIj5cbiAgICAgICAgPHBhdGggZD1cIk0yMjQuMiA0NzguM2MwIDAtMjEwLjYgMjEwLjUtMjEwLjYgMjEwLjVjMCAwIDIwLjQgMjAuNCAyMC40IDIwLjRjMCAwIDIxMC43LTIxMC43IDIxMC43LTIxMC43Yy0xMS43LTExLTUuOS02LTIwLjUtMjAuMlpcIiAvPlxuICAgICAgPC9nPlxuICAgICAgPHBhdGggc3Ryb2tlPVwiIzAwMFwiIHN0cm9rZS13aWR0aD1cIjMwXCIgZD1cIk0wLTI2MS43YzE0NC40IDAgMjYxLjcgMTE3LjMgMjYxLjcgMjYxLjdjMCAxNDQuNC0xMTcuMyAyNjEuNy0yNjEuNyAyNjEuN2MtMTQ0LjQgMC0yNjEuNy0xMTcuMy0yNjEuNy0yNjEuN2MwLTE0NC40IDExNy4zLTI2MS43IDI2MS43LTI2MS43WlwiIGZpbGw9XCJub25lXCIgZGlzcGxheT1cImJsb2NrXCIgdHJhbnNmb3JtPVwidHJhbnNsYXRlKDQyMi44LDI5Ni40KSBzY2FsZSguOTc3LC45NzcpXCIgLz5cbiAgICA8L2c+YDtcbiAgfVxufSk7XG4iLCJpbXBvcnQgU1ZHSWNvbiBmcm9tICcuL2ljb24uanMnO1xuZXhwb3J0IGRlZmF1bHQgbmV3IFNWR0ljb24oe1xuICBuYW1lOiAneWV4dF9hbmltYXRlZF9mb3J3YXJkJyxcbiAgdmlld0JveDogJzAgMCA3MiA3MicsXG4gIGNvbXBsZXhDb250ZW50czogKHBhcmFtcyA9IHt9KSA9PiB7XG4gICAgY29uc3QgaWNvblByZWZpeCA9IHBhcmFtcy5pY29uUHJlZml4IHx8ICd5eHQnO1xuICAgIHJldHVybiBgPGRlZnM+XG4gICAgICA8bWFzayBpZD1cIiR7aWNvblByZWZpeH1fZm9yd2FyZF9NYXNrLTFcIj5cbiAgICAgICAgPHJlY3QgZmlsbD1cIiNmZmZcIiB3aWR0aD1cIjcyMFwiIGhlaWdodD1cIjcyMFwiIC8+XG4gICAgICA8L21hc2s+XG4gICAgICA8bWFzayBpZD1cIiR7aWNvblByZWZpeH1fZm9yd2FyZF9NYXNrLTJcIj5cbiAgICAgICAgPHJlY3QgeD1cIi0xNDQuM1wiIHk9XCIxNDQuM1wiIGZpbGw9XCIjZmZmXCIgd2lkdGg9XCI3MjBcIiBoZWlnaHQ9XCI3MjBcIiAvPlxuICAgICAgICA8cGF0aCBkPVwiTS0wLjMgLjFjMCAwIDEuMyAxLjIgMS4zIDEuMmMwIDAgLjMtMS42IC4zLTEuNmMwIDAtMS42IC40LTEuNiAuNFwiIC8+XG4gICAgICAgIDxwYXRoIGZpbGw9XCIjZmZmXCIgZD1cIk0uMyAuN2MwIDAtMC4zIC4zLTAuMyAuM2MwIDAgMCAwIDAgMGMwIDAgLjMtMC4zIC4zLTAuM2MwIDAgMCAwIDAgMFwiIC8+XG4gICAgICAgIDxwYXRoIGQ9XCJNLjMgLjdjMCAwLTAuMSAwLTAuMSAwYzAgMCAuMSAuMSAuMSAuMWMwIDAgLjEtMC4xIC4xLTAuMWMwIDAtMC4xIDAtMC4xIDBtMjIyLjggNDY5LjFjMCAwLTcwLjUgNjkuNC03MC41IDY5LjRjMCAwIDM0LjEgMzMuNSAzNC4xIDMzLjVjMCAwIDY3LTcyLjkgNjctNzIuOWMwIDAtMzAuNi0zMC0zMC42LTMwXCIgLz5cbiAgICAgIDwvbWFzaz5cbiAgICAgIDxtYXNrIGlkPVwiJHtpY29uUHJlZml4fV9mb3J3YXJkX01hc2stM1wiPlxuICAgICAgICA8cmVjdCBmaWxsPVwiI2ZmZlwiIHdpZHRoPVwiNzIwXCIgaGVpZ2h0PVwiNzIwXCIgLz5cbiAgICAgICAgPHBhdGggZD1cIk00ODkuOCAyNzcuNGMwIDAgNzggMTguOCA3OCAxOC44YzAgMC05Ni4xIDYxLjUtOTYuMSA2MS41YzAgMCA1OS42LTQxLjEgNTkuNi00MS4xYzAgMCAxMC42LTUzLjggMTAuNi01My44YzAgMC0zOC4yIC42LTM4LjIgLjZjMCAwLTEzLjkgMTQtMTMuOSAxNG0tNjcuOC0xMDguMWMwIDAgNzMuOSAxLjMgNzMuOSAxLjNjMCAwLTMzLjggNTQuNS0zMy44IDU0LjVjMCAwIDE4LjYtMy4yIDE4LjYtMy4yYzAgMCAzNS40LTM2LjUgMzUuNC0zNi41YzAgMC02Mi0yNS45LTYyLTI1LjljMCAwLTMyLjEgOS44LTMyLjEgOS44XCIgLz5cbiAgICAgIDwvbWFzaz5cbiAgICAgIDxtYXNrIGlkPVwiJHtpY29uUHJlZml4fV9mb3J3YXJkX01hc2stNFwiPlxuICAgICAgICA8cmVjdCB4PVwiLTkxLjFcIiB5PVwiOTEuMVwiIGZpbGw9XCIjZmZmXCIgd2lkdGg9XCI3MjBcIiBoZWlnaHQ9XCI3MjBcIiAvPlxuICAgICAgICA8cGF0aCBkPVwiTS0wLjMgLjFjMCAwIDEuMyAxLjIgMS4zIDEuMmMwIDAgLjMtMS42IC4zLTEuNmMwIDAtMS42IC40LTEuNiAuNFwiIC8+XG4gICAgICAgIDxwYXRoIGZpbGw9XCIjZmZmXCIgZD1cIk0uMyAuN2MwIDAtMC4zIC4zLTAuMyAuM2MwIDAgMCAwIDAgMGMwIDAgLjMtMC4zIC4zLTAuM2MwIDAgMCAwIDAgMFwiIC8+XG4gICAgICAgIDxwYXRoIGQ9XCJNLjMgLjdjMCAwLTAuMSAwLTAuMSAwYzAgMCAuMSAuMSAuMSAuMWMwIDAgLjEtMC4xIC4xLTAuMWMwIDAtMC4xIDAtMC4xIDBtMjIyLjggNDY5LjFjMCAwLTcwLjUgNjkuNC03MC41IDY5LjRjMCAwIDM0LjEgMzMuNSAzNC4xIDMzLjVjMCAwIDY3LTcyLjkgNjctNzIuOWMwIDAtMzAuNi0zMC0zMC42LTMwXCIgLz5cbiAgICAgIDwvbWFzaz5cbiAgICAgIDxtYXNrIGlkPVwiJHtpY29uUHJlZml4fV9mb3J3YXJkX01hc2stNVwiPlxuICAgICAgICA8cmVjdCBmaWxsPVwiI2ZmZlwiIHdpZHRoPVwiNzIwXCIgaGVpZ2h0PVwiNzIwXCIgLz5cbiAgICAgICAgPHBhdGggZD1cIk00ODguNCAyOTEuNGMwIDAgNDAuNSAzOS4zIDQwLjUgMzkuM2MwIDAtNTcuMiAyNy01Ny4yIDI3YzAgMCA1OS42LTQxLjEgNTkuNi00MS4xYzAgMCAxMC42LTUzLjggMTAuNi01My44YzAgMC0zOC4yIC42LTM4LjIgLjZjMCAwLTE1LjMgMjgtMTUuMyAyOG0tOTAuNS05Ny40YzAgMCA1Mi0xMS4zIDUyLTExLjNjMCAwLTYgNDUuMi02IDQ1LjJjMCAwIDM2LjgtNiAzNi44LTZjMCAwIDM5LjMtMzEuOSAzOS4zLTMxLjljMCAwLTY1LjktMzAuNS02NS45LTMwLjVjMCAwLTU2LjIgMzQuNS01Ni4yIDM0LjVcIiAvPlxuICAgICAgPC9tYXNrPlxuICAgICAgPG1hc2sgaWQ9XCIke2ljb25QcmVmaXh9X2ZvcndhcmRfTWFzay02XCI+XG4gICAgICAgIDxyZWN0IHg9XCItNjEuM1wiIHk9XCI2MS4zXCIgZmlsbD1cIiNmZmZcIiB3aWR0aD1cIjcyMFwiIGhlaWdodD1cIjcyMFwiIC8+XG4gICAgICA8L21hc2s+XG4gICAgICA8bWFzayBpZD1cIiR7aWNvblByZWZpeH1fZm9yd2FyZF9NYXNrLTdcIj5cbiAgICAgICAgPHJlY3QgZmlsbD1cIiNmZmZcIiB3aWR0aD1cIjcyMFwiIGhlaWdodD1cIjcyMFwiIC8+XG4gICAgICAgIDxwYXRoIGQ9XCJNNDgxLjggMjk4LjRjMCAwIDI3LjUgMzkuOCAyNy41IDM5LjhjMCAwLTM3LjYgMTkuNS0zNy42IDE5LjVjMCAwIDU5LjYtNDEuMSA1OS42LTQxLjFjMCAwIDEwLjYtNTMuOCAxMC42LTUzLjhjMCAwLTM4LjIgLjYtMzguMiAuNmMwIDAtMjEuOSAzNS0yMS45IDM1bS0xMDguMS03OS43YzAgMCAzMC4yLTIzLjggMzAuMi0yMy44YzAgMCAyMS43IDM1LjkgMjEuNyAzNS45YzAgMCA1NS4xLTguOSA1NS4xLTguOWMwIDAgMzUuNC0zNi41IDM1LjQtMzYuNWMwIDAtNjItMjUuOS02Mi0yNS45YzAgMC04MC40IDU5LjItODAuNCA1OS4yXCIgLz5cbiAgICAgIDwvbWFzaz5cbiAgICAgIDxtYXNrIGlkPVwiJHtpY29uUHJlZml4fV9mb3J3YXJkX01hc2stOFwiPlxuICAgICAgICA8cmVjdCB4PVwiLTQyLjZcIiB5PVwiNDIuNlwiIGZpbGw9XCIjZmZmXCIgd2lkdGg9XCI3MjBcIiBoZWlnaHQ9XCI3MjBcIiAvPlxuICAgICAgPC9tYXNrPlxuICAgICAgPG1hc2sgaWQ9XCIke2ljb25QcmVmaXh9X2ZvcndhcmRfTWFzay05XCI+XG4gICAgICAgIDxyZWN0IGZpbGw9XCIjZmZmXCIgd2lkdGg9XCI3MjBcIiBoZWlnaHQ9XCI3MjBcIiAvPlxuICAgICAgICA8cGF0aCBkPVwiTTQ3NS4yIDMwNS40YzAgMCAxNC41IDQwLjMgMTQuNSA0MC4zYzAgMC0xOCAxMi0xOCAxMmMwIDAgNTkuNi00MS4xIDU5LjYtNDEuMWMwIDAgMTAuNi01My44IDEwLjYtNTMuOGMwIDAtMzguMiAuNi0zOC4yIC42YzAgMC0yOC41IDQyLTI4LjUgNDJtLTExMy42LTc0LjNjMCAwIDE3LjktMTguNSAxNy45LTE4LjVjMCAwIDM2LjQgMjUuMyAzNi40IDI1LjNjMCAwIDY0LjgtMTYgNjQuOC0xNmMwIDAgMzkuMy0zMS45IDM5LjMtMzEuOWMwIDAtNjUuOS0zMC41LTY1LjktMzAuNWMwIDAtOTIuNSA3MS42LTkyLjUgNzEuNlwiIC8+XG4gICAgICA8L21hc2s+XG4gICAgICA8bWFzayBpZD1cIiR7aWNvblByZWZpeH1fZm9yd2FyZF9NYXNrLTEwXCI+XG4gICAgICAgIDxyZWN0IHg9XCItMjkuNlwiIHk9XCIyOS42XCIgZmlsbD1cIiNmZmZcIiB3aWR0aD1cIjcyMFwiIGhlaWdodD1cIjcyMFwiIC8+XG4gICAgICA8L21hc2s+XG4gICAgICA8bWFzayBpZD1cIiR7aWNvblByZWZpeH1fZm9yd2FyZF9NYXNrLTExXCI+XG4gICAgICAgIDxyZWN0IGZpbGw9XCIjZmZmXCIgd2lkdGg9XCI3MjBcIiBoZWlnaHQ9XCI3MjBcIiAvPlxuICAgICAgICA8cGF0aCBkPVwiTTQ2OC42IDMxMi40YzAgMCAxLjUgNDAuOCAxLjUgNDAuOGMwIDAgMS42IDQuNSAxLjYgNC41YzAgMCA1OS42LTQxLjEgNTkuNi00MS4xYzAgMCAxMC42LTUzLjggMTAuNi01My44YzAgMC0zOC4yIC42LTM4LjIgLjZjMCAwLTM1LjEgNDktMzUuMSA0OW0tMTA3LTgxLjNjMCAwIDE1LjEgNC45IDE1LjEgNC45YzAgMCAzOC4yIDEzLjMgMzguMiAxMy4zYzAgMCA2NS44LTI3LjQgNjUuOC0yNy40YzAgMCAzOS4zLTIxLjkgMzkuMy0yMS45YzAgMC02NS45LTQwLjUtNjUuOS00MC41YzAgMC05Mi41IDcxLjYtOTIuNSA3MS42XCIgLz5cbiAgICAgIDwvbWFzaz5cbiAgICAgIDxtYXNrIGlkPVwiJHtpY29uUHJlZml4fV9mb3J3YXJkX01hc2stMTJcIj5cbiAgICAgICAgPHJlY3QgeD1cIi0yMC4zXCIgeT1cIjIwLjNcIiBmaWxsPVwiI2ZmZlwiIHdpZHRoPVwiNzIwXCIgaGVpZ2h0PVwiNzIwXCIgLz5cbiAgICAgIDwvbWFzaz5cbiAgICAgIDxtYXNrIGlkPVwiJHtpY29uUHJlZml4fV9mb3J3YXJkX01hc2stMTNcIj5cbiAgICAgICAgPHJlY3QgZmlsbD1cIiNmZmZcIiB3aWR0aD1cIjcyMFwiIGhlaWdodD1cIjcyMFwiIC8+XG4gICAgICAgIDxwYXRoIGQ9XCJNNDU2LjYgMzExLjljMCAwLTcgMzUuNi03IDM1LjZjMCAwIDIyLjEgMTAuMiAyMi4xIDEwLjJjMCAwIDU5LjYtNDEuMSA1OS42LTQxLjFjMCAwIDEwLjYtNTMuOCAxMC42LTUzLjhjMCAwLTM4LjIgLjYtMzguMiAuNmMwIDAtNDcuMSA0OC41LTQ3LjEgNDguNW0tOTUtODAuOGMwIDAgMTIuMyAyOC4zIDEyLjMgMjguM2MwIDAgMzkuOSAxLjMgMzkuOSAxLjNjMCAwIDY2LjktMzguOCA2Ni45LTM4LjhjMCAwIDM5LjMtMjEuOSAzOS4zLTIxLjljMCAwLTY1LjktNDAuNS02NS45LTQwLjVjMCAwLTkyLjUgNzEuNi05Mi41IDcxLjZcIiAvPlxuICAgICAgPC9tYXNrPlxuICAgICAgPG1hc2sgaWQ9XCIke2ljb25QcmVmaXh9X2ZvcndhcmRfTWFzay0xNFwiPlxuICAgICAgICA8cmVjdCB4PVwiLTEzLjRcIiB5PVwiMTMuNFwiIGZpbGw9XCIjZmZmXCIgd2lkdGg9XCI3MjBcIiBoZWlnaHQ9XCI3MjBcIiAvPlxuICAgICAgPC9tYXNrPlxuICAgICAgPG1hc2sgaWQ9XCIke2ljb25QcmVmaXh9X2ZvcndhcmRfTWFzay0xNVwiPlxuICAgICAgICA8cmVjdCBmaWxsPVwiI2ZmZlwiIHdpZHRoPVwiNzIwXCIgaGVpZ2h0PVwiNzIwXCIgLz5cbiAgICAgICAgPHBhdGggZD1cIk00NDQuNiAzMTEuNGMwIDAtMTUuNiAzMC41LTE1LjYgMzAuNWMwIDAgNDIuNyAxNS44IDQyLjcgMTUuOGMwIDAgNTkuNi00MS4xIDU5LjYtNDEuMWMwIDAgMTAuNi01My44IDEwLjYtNTMuOGMwIDAtMzguMiAuNi0zOC4yIC42YzAgMC01OS4xIDQ4LTU5LjEgNDhtLTgzLTgwLjNjMCAwIDkuNSA1MS43IDkuNSA1MS43YzAgMCA0MS43LTEwLjggNDEuNy0xMC44YzAgMCA2Ny45LTUwLjEgNjcuOS01MC4xYzAgMCA1MC42LTMxLjkgNTAuNi0zMS45YzAgMC03Ny4yLTMwLjUtNzcuMi0zMC41YzAgMC05Mi41IDcxLjYtOTIuNSA3MS42XCIgLz5cbiAgICAgIDwvbWFzaz5cbiAgICAgIDxtYXNrIGlkPVwiJHtpY29uUHJlZml4fV9mb3J3YXJkX01hc2stMTZcIj5cbiAgICAgICAgPHJlY3QgeD1cIi03LjNcIiB5PVwiNy4zXCIgZmlsbD1cIiNmZmZcIiB3aWR0aD1cIjcyMFwiIGhlaWdodD1cIjcyMFwiIC8+XG4gICAgICA8L21hc2s+XG4gICAgICA8bWFzayBpZD1cIiR7aWNvblByZWZpeH1fZm9yd2FyZF9NYXNrLTE3XCI+XG4gICAgICAgIDxyZWN0IGZpbGw9XCIjZmZmXCIgd2lkdGg9XCI3MjBcIiBoZWlnaHQ9XCI3MjBcIiAvPlxuICAgICAgICA8cGF0aCBkPVwiTTQzMi42IDMxMC45YzAgMC0yNC4yIDI1LjMtMjQuMiAyNS4zYzAgMCA2My4zIDIxLjUgNjMuMyAyMS41YzAgMCA1OS42LTQxLjEgNTkuNi00MS4xYzAgMCAxMC42LTUzLjggMTAuNi01My44YzAgMC0zOC4yIC42LTM4LjIgLjZjMCAwLTcxLjEgNDcuNS03MS4xIDQ3LjVtLTcxLTc5LjhjMCAwIDIwLjMgOTAuNCAyMC4zIDkwLjRjMCAwIDI5LTI5LjUgMjktMjkuNWMwIDAgNjkuOC03MC4xIDY5LjgtNzAuMWMwIDAgMzUuNC0zNi41IDM1LjQtMzYuNWMwIDAtNjItMjUuOS02Mi0yNS45YzAgMC05Mi41IDcxLjYtOTIuNSA3MS42XCIgLz5cbiAgICAgIDwvbWFzaz5cbiAgICAgIDxtYXNrIGlkPVwiJHtpY29uUHJlZml4fV9mb3J3YXJkX01hc2stMThcIj5cbiAgICAgICAgPHJlY3QgeD1cIi00XCIgeT1cIjRcIiBmaWxsPVwiI2ZmZlwiIHdpZHRoPVwiNzIwXCIgaGVpZ2h0PVwiNzIwXCIgLz5cbiAgICAgIDwvbWFzaz5cbiAgICAgIDxtYXNrIGlkPVwiJHtpY29uUHJlZml4fV9mb3J3YXJkX01hc2stMTlcIj5cbiAgICAgICAgPHJlY3QgZmlsbD1cIiNmZmZcIiB3aWR0aD1cIjcyMFwiIGhlaWdodD1cIjcyMFwiIC8+XG4gICAgICAgIDxwYXRoIGQ9XCJNNDMyLjYgMzEwLjljMCAwLTI0LjIgMjUuMy0yNC4yIDI1LjNjMCAwIDYzLjMgMjEuNSA2My4zIDIxLjVjMCAwIDU5LjYtNDEuMSA1OS42LTQxLjFjMCAwIDEwLjYtNTMuOCAxMC42LTUzLjhjMCAwLTM4LjIgLjYtMzguMiAuNmMwIDAtNzEuMSA0Ny41LTcxLjEgNDcuNW0tNzEtNzkuOGMwIDAgMjAuMyA5MC40IDIwLjMgOTAuNGMwIDAgMjktMjkuNSAyOS0yOS41YzAgMCA2OS44LTcwLjEgNjkuOC03MC4xYzAgMCAzOS4zLTMxLjkgMzkuMy0zMS45YzAgMC02NS45LTMwLjUtNjUuOS0zMC41YzAgMC05Mi41IDcxLjYtOTIuNSA3MS42XCIgLz5cbiAgICAgIDwvbWFzaz5cbiAgICAgIDxtYXNrIGlkPVwiJHtpY29uUHJlZml4fV9mb3J3YXJkX01hc2stMjBcIj5cbiAgICAgICAgPHJlY3QgZmlsbD1cIiNmZmZcIiB3aWR0aD1cIjcyMFwiIGhlaWdodD1cIjcyMFwiIC8+XG4gICAgICA8L21hc2s+XG4gICAgICA8Y2xpcFBhdGggaWQ9XCIke2ljb25QcmVmaXh9X2ZvcndhcmRfQ2xpcFBhdGgtMVwiPlxuICAgICAgICA8cmVjdCB3aWR0aD1cIjcyMFwiIGhlaWdodD1cIjcyMFwiIC8+XG4gICAgICA8L2NsaXBQYXRoPlxuICAgIDwvZGVmcz5cbiAgICA8ZyB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoMCwwKSBzY2FsZSguMSwuMSlcIj5cbiAgICAgIDxnIG1hc2s9XCJ1cmwoIyR7aWNvblByZWZpeH1fZm9yd2FyZF9NYXNrLTEpXCI+XG4gICAgICAgIDxwYXRoIGQ9XCJNMzc3LjUgMzk1LjNjMCAwIDY0LjggMCA2NC44IDBjMCAwIDAgMTI5LjYgMCAxMjkuNmMwIDAgMjguOCAwIDI4LjggMGMwIDAgMC0xMjkuNiAwLTEyOS42YzAgMCA2NC44IDAgNjQuOCAwYzAgMCAwLTI4LjggMC0yOC44YzAgMC0xNTguNCAwLTE1OC40IDBjMCAwIDAgMjguOCAwIDI4LjhaXCIgLz5cbiAgICAgICAgPHBhdGggZD1cIk0zMzguOSAzNjMuNmMwIDAtNjIuNSA2Mi40LTYyLjUgNjIuNGMwIDAtNjIuNC02Mi40LTYyLjQtNjIuNGMwIDAtMjAuNCAyMC40LTIwLjQgMjAuNGMwIDAgNjIuNSA2Mi40IDYyLjUgNjIuNGMwIDAtNjIuNSA2Mi40LTYyLjUgNjIuNGMwIDAgMjAuNCAyMC40IDIwLjQgMjAuNGMwIDAgNjIuNC02Mi40IDYyLjQtNjIuNGMwIDAgNjIuNSA2Mi40IDYyLjUgNjIuNGMwIDAgMjAuMy0yMC40IDIwLjMtMjAuNGMwIDAtNjIuNC02Mi40LTYyLjQtNjIuNGMwIDAgNjIuNC02Mi40IDYyLjQtNjIuNGMwIDAtMjAuMy0yMC40LTIwLjMtMjAuNFpcIiAvPlxuICAgICAgICA8cGF0aCBkPVwiTTQ1NC43IDM0NS44YzQ0LjggMCA4MS0zNi4zIDgxLTgxYzAgMC0yOC44IDAtMjguOCAwYzAgMjguOC0yMy4zIDUyLjItNTIuMiA1Mi4yYy04LjIgMC0xNi0xLjktMjIuOS01LjNjMCAwIDY5LjgtNjkuOSA2OS44LTY5LjljMCAwIDIxLjEtMjEgMjEuMS0yMWMtMTQuNC0yMi4zLTM5LjUtMzctNjgtMzdjLTQ0LjcgMC04MSAzNi4yLTgxIDgxYzAgNDQuNyAzNi4zIDgxIDgxIDgxWm0wLTEzMy4yYzEwLjIgMCAxOS42IDIuOSAyNy42IDcuOWMwIDAtNzEuOSA3MS44LTcxLjkgNzEuOGMtNS04LTcuOS0xNy40LTcuOS0yNy41YzAtMjguOSAyMy40LTUyLjIgNTIuMi01Mi4yWlwiIC8+XG4gICAgICAgIDxwYXRoIGQ9XCJNMjc2LjQgMjU1LjljMCAwLTYwLjctNzIuOC02MC43LTcyLjhjMCAwLTIyLjEgMTguNi0yMi4xIDE4LjZjMCAwIDY4LjQgODIgNjguNCA4MmMwIDAgMCA2Mi40IDAgNjIuNGMwIDAgMjguOCAwIDI4LjggMGMwIDAgMC02Mi42IDAtNjIuNmMwIDAgNjguNC04MS44IDY4LjQtODEuOGMwIDAtMjItMTguNi0yMi0xOC42YzAgMC02MC44IDcyLjgtNjAuOCA3Mi44WlwiIC8+XG4gICAgICA8L2c+XG4gICAgICA8cGF0aCBzdHJva2U9XCIjMDAwXCIgc3Ryb2tlLXdpZHRoPVwiMzBcIiBkPVwiTTAtMzUzLjdjMTk1LjIgMCAzNTMuNyAxNTguNSAzNTMuNyAzNTMuN2MwIDE5NS4yLTE1OC41IDM1My43LTM1My43IDM1My43Yy0xOTUuMiAwLTM1My43LTE1OC41LTM1My43LTM1My43YzAtMTk1LjIgMTU4LjUtMzUzLjcgMzUzLjctMzUzLjdaXCIgZmlsbD1cIm5vbmVcIiB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoMzU5LjgsMzYwLjQpIHNjYWxlKC45NzcsLjk3NylcIiAvPlxuICAgIDwvZz5cbiAgICA8ZyBvcGFjaXR5PVwiMFwiIHRyYW5zZm9ybT1cInRyYW5zbGF0ZSgwLDApIHNjYWxlKC4xLC4xKVwiPlxuICAgICAgPGcgZGlzcGxheT1cImJsb2NrXCIgbWFzaz1cInVybCgjJHtpY29uUHJlZml4fV9mb3J3YXJkX01hc2stMilcIiB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoMTQ0LjMsLTE0NC4zKVwiPlxuICAgICAgICA8cGF0aCBkPVwiTTIyNC4yIDQ3OC4zYzAgMC0yMTAuNiAyMTAuNS0yMTAuNiAyMTAuNWMwIDAgMjAuNCAyMC40IDIwLjQgMjAuNGMwIDAgMjEwLjctMjEwLjcgMjEwLjctMjEwLjdjLTExLjctMTEtNS45LTYtMjAuNS0yMC4yWlwiIC8+XG4gICAgICA8L2c+XG4gICAgICA8ZyBkaXNwbGF5PVwiYmxvY2tcIiBtYXNrPVwidXJsKCMke2ljb25QcmVmaXh9X2ZvcndhcmRfTWFzay0zKVwiPlxuICAgICAgICA8cGF0aCBkPVwiTTM5MC42IDM5NS4yYzAgMCA1MS43IC4xIDUxLjcgLjFjMCAwIC4xIDEwMy42IC4xIDEwMy42YzAgMCAyOC43IDAgMjguNyAwYzAgMCAwLTEwMy42IDAtMTAzLjZjMCAwIDUyLTAuMSA1Mi0wLjFjMCAwIDAtMjguNCAwLTI4LjRjMCAwLTEzMi41IDAtMTMyLjUgMGMwIDAgMCAyOC40IDAgMjguNFpcIiAvPlxuICAgICAgICA8cGF0aCBkPVwiTTMyOSAzNzMuNGMwIC4xLTUyLjYgNTIuNi01Mi42IDUyLjZjMCAwLTYyLjQtNjIuNC02Mi40LTYyLjRjMCAwLTIwLjQgMjAuNC0yMC40IDIwLjRjMCAwIDYyLjUgNjIuNCA2Mi41IDYyLjRjMCAwLTYyLjUgNjIuNC02Mi41IDYyLjRjMCAwIDIwLjQgMjAuNCAyMC40IDIwLjRjMCAwIDYyLjQtNjIuNCA2Mi40LTYyLjRjMCAwIDYyLjUgNjIuNCA2Mi41IDYyLjRjMCAwIDIwLjMtMjAuNCAyMC4zLTIwLjRjMCAwLTYyLjQtNjIuNC02Mi40LTYyLjRjMCAwIDUyLjYtNTIuNiA1Mi42LTUyLjZjMCAwLTIwLjQtMjAuMy0yMC40LTIwLjNaXCIgLz5cbiAgICAgICAgPHBhdGggZD1cIk00NTQuNyAzNDUuOGM0NC44IDAgODEtMzYuMyA4MS04MWMwIDAtMjguOCAwLTI4LjggMGMwIDI4LjgtMjMuMyA1Mi4yLTUyLjIgNTIuMmMtOC4yIDAtMTYtMS45LTIyLjktNS4zYzAgMCA2OS44LTY5LjkgNjkuOC02OS45YzAgMCAyMS4xLTIxIDIxLjEtMjFjLTE0LjQtMjIuMy0zOS41LTM3LTY4LTM3Yy00NC43IDAtODEgMzYuMi04MSA4MWMwIDQ0LjcgMzYuMyA4MSA4MSA4MVptMC0xMzMuMmMxMC4yIDAgMTkuNiAyLjkgMjcuNiA3LjljMCAwLTcxLjkgNzEuOC03MS45IDcxLjhjLTUtOC03LjktMTcuNC03LjktMjcuNWMwLTI4LjkgMjMuNC01Mi4yIDUyLjItNTIuMlpcIiAvPlxuICAgICAgICA8cGF0aCBkPVwiTTI3Ni40IDI1NS45YzAgMC00OC43LTU4LjMtNDguNy01OC4zYzAgMC0yMS4xIDE5LTIxLjEgMTljMCAwIDU1LjUgNjcuMiA1NS41IDY3LjJjMCAwIC4zIDUwIC4zIDUwYzAgMCAyOC40IDAgMjguNCAwYzAgMCAwLTUwLjMgMC01MC4zYzAgMCA1NS40LTY2LjkgNTUuNC02Ni45YzAgMC0yMS0xOC42LTIxLTE4LjZjMCAwLTQ4LjggNTcuOS00OC44IDU3LjlaXCIgLz5cbiAgICAgIDwvZz5cbiAgICAgIDxwYXRoIHN0cm9rZT1cIiMwMDBcIiBzdHJva2Utd2lkdGg9XCIzMFwiIGQ9XCJNMC0zMzYuMmMxODUuNiAwIDMzNi4yIDE1MC42IDMzNi4yIDMzNi4yYzAgMTg1LjYtMTUwLjYgMzM2LjItMzM2LjIgMzM2LjJjLTE4NS42IDAtMzM2LjItMTUwLjYtMzM2LjItMzM2LjJjMC0xODUuNiAxNTAuNi0zMzYuMiAzMzYuMi0zMzYuMlpcIiBmaWxsPVwibm9uZVwiIGRpc3BsYXk9XCJibG9ja1wiIHRyYW5zZm9ybT1cInRyYW5zbGF0ZSgzNzAuOCwzNDcuNSkgc2NhbGUoLjk3NywuOTc3KVwiIC8+XG4gICAgPC9nPlxuICAgIDxnIG9wYWNpdHk9XCIwXCIgdHJhbnNmb3JtPVwidHJhbnNsYXRlKDAsMCkgc2NhbGUoLjEsLjEpXCI+XG4gICAgICA8ZyBtYXNrPVwidXJsKCMke2ljb25QcmVmaXh9X2ZvcndhcmRfTWFzay00KVwiIHRyYW5zZm9ybT1cInRyYW5zbGF0ZSg5MS4xLC05MS4xKVwiPlxuICAgICAgICA8cGF0aCBkPVwiTTIyNC4yIDQ3OC4zYzAgMC0yMTAuNiAyMTAuNS0yMTAuNiAyMTAuNWMwIDAgMjAuNCAyMC40IDIwLjQgMjAuNGMwIDAgMjEwLjctMjEwLjcgMjEwLjctMjEwLjdjLTExLjctMTEtNS45LTYtMjAuNS0yMC4yWlwiIC8+XG4gICAgICA8L2c+XG4gICAgICA8ZyBtYXNrPVwidXJsKCMke2ljb25QcmVmaXh9X2ZvcndhcmRfTWFzay01KVwiPlxuICAgICAgICA8cGF0aCBkPVwiTTQwOS43IDM5NS4xYzAgMCAzMi42IC4yIDMyLjYgLjJjMCAwIC4zIDY1LjUgLjMgNjUuNWMwIDAgMjguNSAwIDI4LjUgMGMwIDAgMC02NS41IDAtNjUuNWMwIDAgMzMuMS0wLjIgMzMuMS0wLjJjMCAwIDAtMjcuOCAwLTI3LjhjMCAwLTk0LjUgMC05NC41IDBjMCAwIDAgMjcuOCAwIDI3LjhaXCIgLz5cbiAgICAgICAgPHBhdGggZD1cIk0zMTkuNyAzODIuOGMwIDAtNDMuMyA0My4yLTQzLjMgNDMuMmMwIDAtNjIuNC02Mi40LTYyLjQtNjIuNGMwIDAtMjAuNCAyMC40LTIwLjQgMjAuNGMwIDAgNjIuNSA2Mi40IDYyLjUgNjIuNGMwIDAtNjIuNSA2Mi40LTYyLjUgNjIuNGMwIDAgMjAuNCAyMC40IDIwLjQgMjAuNGMwIDAgNjIuNC02Mi40IDYyLjQtNjIuNGMwIDAgNjIuNSA2Mi40IDYyLjUgNjIuNGMwIDAgMjAuMy0yMC40IDIwLjMtMjAuNGMwIDAtNjIuNC02Mi40LTYyLjQtNjIuNGMwIDAgNDMuNC00My4zIDQzLjQtNDMuM2MwIDAtMjAuNS0yMC4zLTIwLjUtMjAuM1pcIiAvPlxuICAgICAgICA8cGF0aCBkPVwiTTUwMi44IDE5OS42Yy0xMy40LTkuOS0zMC0xNS44LTQ4LjEtMTUuOGMtNDQuNyAwLTgxIDM2LjItODEgODFjMCA0NC43IDM2LjMgODEgODEgODFjNDQuOCAwIDgxLTM2LjMgODEtODFoLTI4LjhjMCAyOC44LTIzLjMgNTIuMi01Mi4yIDUyLjJjLTguMiAwLTE2LTEuOS0yMi45LTUuM2w2OS44LTY5LjlsLjMtMC4ybC0yMC4zLTIwLjRsLTcxLjIgNzEuMWMtNS04LTcuOS0xNy40LTcuOS0yNy41YzAtMjguOSAyMy40LTUyLjIgNTIuMi01Mi4yYzEwLjEgMCAxOS40IDIuOCAyNy40IDcuN1pcIiBmaWxsLXJ1bGU9XCJldmVub2RkXCIgLz5cbiAgICAgICAgPHBhdGggZD1cIk0yNzYuNCAyNTUuOWMwIDAtMzEuMS0zNy0zMS4xLTM3YzAgMC0xOS43IDE5LjUtMTkuNyAxOS41YzAgMCAzNi43IDQ1LjYgMzYuNyA0NS42YzAgMCAuNyAzMS44IC43IDMxLjhjMCAwIDI3LjcgMCAyNy43IDBjMCAwIDAtMzIuNCAwLTMyLjRjMCAwIDM2LjUtNDQuOSAzNi41LTQ0LjljMCAwLTE5LjYtMTguNi0xOS42LTE4LjZjMCAwLTMxLjIgMzYtMzEuMiAzNlpcIiAvPlxuICAgICAgPC9nPlxuICAgICAgPHBhdGggc3Ryb2tlPVwiIzAwMFwiIHN0cm9rZS13aWR0aD1cIjMwXCIgZD1cIk0wLTMxMGMxNzEuMSAwIDMxMCAxMzguOSAzMTAgMzEwYzAgMTcxLjEtMTM4LjkgMzEwLTMxMCAzMTBjLTE3MS4xIDAtMzEwLTEzOC45LTMxMC0zMTBjMC0xNzEuMSAxMzguOS0zMTAgMzEwLTMxMFpcIiBmaWxsPVwibm9uZVwiIHRyYW5zZm9ybT1cInRyYW5zbGF0ZSgzODcuOCwzMjguNykgc2NhbGUoLjk3NywuOTc3KVwiIC8+XG4gICAgPC9nPlxuICAgIDxnIG9wYWNpdHk9XCIwXCIgdHJhbnNmb3JtPVwidHJhbnNsYXRlKDAsMCkgc2NhbGUoLjEsLjEpXCI+XG4gICAgICA8ZyBkaXNwbGF5PVwiYmxvY2tcIiBtYXNrPVwidXJsKCMke2ljb25QcmVmaXh9X2ZvcndhcmRfTWFzay02KVwiIHRyYW5zZm9ybT1cInRyYW5zbGF0ZSg2MS4zLC02MS4zKVwiPlxuICAgICAgICA8cGF0aCBkPVwiTTIyNC4yIDQ3OC4zYzAgMC0yMTAuNiAyMTAuNS0yMTAuNiAyMTAuNWMwIDAgMjAuNCAyMC40IDIwLjQgMjAuNGMwIDAgMjEwLjctMjEwLjcgMjEwLjctMjEwLjdjLTExLjctMTEtNS45LTYtMjAuNS0yMC4yWlwiIC8+XG4gICAgICA8L2c+XG4gICAgICA8ZyBtYXNrPVwidXJsKCMke2ljb25QcmVmaXh9X2ZvcndhcmRfTWFzay03KVwiPlxuICAgICAgICA8cGF0aCBkPVwiTTQyMC40IDM5NWMwIDAgMjEuOSAuMyAyMS45IC4zYzAgMCAuNCA0NC4xIC40IDQ0LjFjMCAwIDI4LjQgMCAyOC40IDBjMCAwIDAtNDQuMSAwLTQ0LjFjMCAwIDIyLjYtMC4zIDIyLjYtMC4zYzAgMCAwLTI3LjUgMC0yNy41YzAgMC03My4zIDAtNzMuMyAwYzAgMCAwIDI3LjUgMCAyNy41WlwiIC8+XG4gICAgICAgIDxwYXRoIGQ9XCJNMzEzLjIgMzg5LjJjMCAwLTM2LjggMzYuOC0zNi44IDM2LjhjMCAwLTYyLjQtNjIuNC02Mi40LTYyLjRjMCAwLTIwLjQgMjAuNC0yMC40IDIwLjRjMCAwIDYyLjUgNjIuNCA2Mi41IDYyLjRjMCAwLTYyLjUgNjIuNC02Mi41IDYyLjRjMCAwIDIwLjQgMjAuNCAyMC40IDIwLjRjMCAwIDYyLjQtNjIuNCA2Mi40LTYyLjRjMCAwIDYyLjUgNjIuNCA2Mi41IDYyLjRjMCAwIDIwLjMtMjAuNCAyMC4zLTIwLjRjMCAwLTYyLjQtNjIuNC02Mi40LTYyLjRjMCAwIDM3LTM2LjkgMzctMzYuOWMwIDAtMjAuNi0yMC4zLTIwLjYtMjAuM1pcIiAvPlxuICAgICAgICA8cGF0aCBkPVwiTTUwMCAyMDBjLTEzLjQtOS45LTI3LjItMTYuMi00NS4zLTE2LjJjLTQ0LjcgMC04MSAzNi4yLTgxIDgxYzAgNDQuNyAzNi4zIDgxIDgxIDgxYzQ0LjggMCA4MS0zNi4zIDgxLTgxaC0yOC44YzAgMjguOC0yMy4zIDUyLjItNTIuMiA1Mi4yYy04LjIgMC0xNi0xLjktMjIuOS01LjNsNTcuNy01Ny43bC0yMC4zLTIwLjRsLTU4LjggNTguN2MtNS04LTcuOS0xNy40LTcuOS0yNy41YzAtMjguOSAyMy40LTUyLjIgNTIuMi01Mi4yYzEwLjEgMCAxOS40IDIuOCAyNy40IDcuN1pcIiBmaWxsLXJ1bGU9XCJldmVub2RkXCIgLz5cbiAgICAgICAgPHBhdGggZD1cIk0yNzYuNCAyNTUuOWMwIDAtMjEuMi0yNS4xLTIxLjItMjUuMWMwIDAtMTkgMTkuOC0xOSAxOS44YzAgMCAyNi4yIDMzLjUgMjYuMiAzMy41YzAgMCAxIDIxLjYgMSAyMS42YzAgMCAyNy4yIDAgMjcuMiAwYzAgMCAwLTIyLjMgMC0yMi4zYzAgMCAyNS45LTMyLjcgMjUuOS0zMi43YzAgMC0xOC44LTE4LjYtMTguOC0xOC42YzAgMC0yMS4zIDIzLjgtMjEuMyAyMy44WlwiIC8+XG4gICAgICA8L2c+XG4gICAgICA8cGF0aCBzdHJva2U9XCIjMDAwXCIgc3Ryb2tlLXdpZHRoPVwiMzBcIiBkPVwiTTAtMjk0LjNjMTYyLjQgMCAyOTQuMyAxMzEuOSAyOTQuMyAyOTQuM2MwIDE2Mi40LTEzMS45IDI5NC4zLTI5NC4zIDI5NC4zYy0xNjIuNCAwLTI5NC4zLTEzMS45LTI5NC4zLTI5NC4zYzAtMTYyLjQgMTMxLjktMjk0LjMgMjk0LjMtMjk0LjNaXCIgZmlsbD1cIm5vbmVcIiBkaXNwbGF5PVwiYmxvY2tcIiB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoMzk4LjcsMzE4LjIpIHNjYWxlKC45NzcsLjk3NylcIiAvPlxuICAgIDwvZz5cbiAgICA8ZyBvcGFjaXR5PVwiMFwiIHRyYW5zZm9ybT1cInRyYW5zbGF0ZSgwLDApIHNjYWxlKC4xLC4xKVwiPlxuICAgICAgPGcgbWFzaz1cInVybCgjJHtpY29uUHJlZml4fV9mb3J3YXJkX01hc2stOClcIiB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoNDIuNiwtNDIuNilcIj5cbiAgICAgICAgPHBhdGggZD1cIk0yMjQuMiA0NzguM2MwIDAtMjEwLjYgMjEwLjUtMjEwLjYgMjEwLjVjMCAwIDIwLjQgMjAuNCAyMC40IDIwLjRjMCAwIDIxMC43LTIxMC43IDIxMC43LTIxMC43Yy0xMS43LTExLTUuOS02LTIwLjUtMjAuMlpcIiAvPlxuICAgICAgPC9nPlxuICAgICAgPGcgZGlzcGxheT1cImJsb2NrXCIgbWFzaz1cInVybCgjJHtpY29uUHJlZml4fV9mb3J3YXJkX01hc2stOSlcIj5cbiAgICAgICAgPHBhdGggZD1cIk00MjcuMiAzOTQuOWMwIDAgMTUuMSAuNCAxNS4xIC40YzAgMCAuNCAzMC43IC40IDMwLjdjMCAwIDI4LjQgMCAyOC40IDBjMCAwIDAtMzAuNyAwLTMwLjdjMCAwIDE1LjktMC40IDE1LjktMC40YzAgMCAwLTI3LjIgMC0yNy4yYzAgMC01OS44IDAtNTkuOCAwYzAgMCAwIDI3LjIgMCAyNy4yWlwiIC8+XG4gICAgICAgIDxwYXRoIGQ9XCJNMzA3LjQgMzk1YzAgMC0zMSAzMS0zMSAzMWMwIDAtNTMuOS01NC01My45LTU0YzAgMC0yMC40IDIwLjQtMjAuNCAyMC40YzAgMCA1NCA1NCA1NCA1NGMwIDAtNjIuNSA2Mi40LTYyLjUgNjIuNGMwIDAgMjAuNCAyMC40IDIwLjQgMjAuNGMwIDAgNjIuNC02Mi40IDYyLjQtNjIuNGMwIDAgNTQgNTQgNTQgNTRjMCAwIDIwLjQtMjAuMyAyMC40LTIwLjNjMCAwLTU0LTU0LjEtNTQtNTQuMWMwIDAgMzEuMi0zMS4xIDMxLjItMzEuMWMwIDAtMjAuNi0yMC4zLTIwLjYtMjAuM1pcIiAvPlxuICAgICAgICA8cGF0aCBkPVwiTTUwMi44IDE5OS42Yy0xMy40LTkuOS0zMC4xLTE1LjgtNDguMS0xNS44Yy00NC43IDAtODEgMzYuMi04MSA4MWMwIDQ0LjcgMzYuMyA4MSA4MSA4MWM0NC44IDAgODEtMzYuMyA4MS04MWgtMjguOGMwIDI4LjgtMjMuMyA1Mi4yLTUyLjIgNTIuMmMtOC4yIDAtMTYtMS45LTIyLjktNS4zbDQ1LjUtNDUuNWwtMjAuNC0yMC40bC00Ni41IDQ2LjVjLTUtOC03LjktMTcuNC03LjktMjcuNWMwLTI4LjkgMjMuNC01Mi4yIDUyLjItNTIuMmMxMC4xIDAgMTkuNCAyLjggMjcuNCA3LjdaXCIgZmlsbC1ydWxlPVwiZXZlbm9kZFwiIC8+XG4gICAgICAgIDxwYXRoIGQ9XCJNMjc2LjQgMjU1LjljMCAwLTE1LTE3LjYtMTUtMTcuNmMwIDAtMTguNCAyMC0xOC40IDIwYzAgMCAxOS40IDI1LjggMTkuNCAyNS44YzAgMCAxLjIgMTUuMiAxLjIgMTUuMmMwIDAgMjcgMCAyNyAwYzAgMCAwLTE1LjkgMC0xNS45YzAgMCAxOS4xLTI0LjkgMTkuMS0yNC45YzAgMC0xOC4yLTE4LjctMTguMi0xOC43YzAgMC0xNS4xIDE2LjEtMTUuMSAxNi4xWlwiIC8+XG4gICAgICA8L2c+XG4gICAgICA8cGF0aCBzdHJva2U9XCIjMDAwXCIgc3Ryb2tlLXdpZHRoPVwiMzBcIiBkPVwiTTAtMjg0LjRjMTU3IDAgMjg0LjQgMTI3LjQgMjg0LjQgMjg0LjRjMCAxNTctMTI3LjQgMjg0LjQtMjg0LjQgMjg0LjRjLTE1NyAwLTI4NC40LTEyNy40LTI4NC40LTI4NC40YzAtMTU3IDEyNy40LTI4NC40IDI4NC40LTI4NC40WlwiIGZpbGw9XCJub25lXCIgdHJhbnNmb3JtPVwidHJhbnNsYXRlKDQwNi4xLDMxMS42KSBzY2FsZSguOTc3LC45NzcpXCIgLz5cbiAgICA8L2c+XG4gICAgPGcgb3BhY2l0eT1cIjBcIiB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoMCwwKSBzY2FsZSguMSwuMSlcIj5cbiAgICAgIDxnIGRpc3BsYXk9XCJibG9ja1wiIG1hc2s9XCJ1cmwoIyR7aWNvblByZWZpeH1fZm9yd2FyZF9NYXNrLTEwKVwiIHRyYW5zZm9ybT1cInRyYW5zbGF0ZSgyOS42LC0yOS42KVwiPlxuICAgICAgICA8cGF0aCBkPVwiTTIyNC4yIDQ3OC4zYzAgMC0yMTAuNiAyMTAuNS0yMTAuNiAyMTAuNWMwIDAgMjAuNCAyMC40IDIwLjQgMjAuNGMwIDAgMjEwLjctMjEwLjcgMjEwLjctMjEwLjdjLTExLjctMTEtNS45LTYtMjAuNS0yMC4yWlwiIC8+XG4gICAgICA8L2c+XG4gICAgICA8ZyBkaXNwbGF5PVwiYmxvY2tcIiBtYXNrPVwidXJsKCMke2ljb25QcmVmaXh9X2ZvcndhcmRfTWFzay0xMSlcIj5cbiAgICAgICAgPHBhdGggZD1cIk00MzYgMzkzLjVjMCAwIDguNyAuNCA4LjcgLjRjMCAwIC40IDE3LjggLjQgMTcuOGMwIDAgMjMuNiAwIDIzLjYgMGMwIDAgMC0xNy44IDAtMTcuOGMwIDAgOS40LTAuNCA5LjQtMC40YzAgMCAwLTIyLjYgMC0yMi42YzAgMC00Mi4xIDAtNDIuMSAwYzAgMCAwIDIyLjYgMCAyMi42WlwiIC8+XG4gICAgICAgIDxwYXRoIGQ9XCJNMjk3LjIgNDA1LjJjMCAwLTIwLjggMjAuOC0yMC44IDIwLjhjMCAwLTM1LjQtMzUuNi0zNS40LTM1LjZjMCAwLTIwLjMgMjAuNS0yMC4zIDIwLjVjMCAwIDM1LjQgMzUuNSAzNS40IDM1LjVjMCAwLTYyLjUgNjIuNC02Mi41IDYyLjRjMCAwIDIwLjQgMjAuNCAyMC40IDIwLjRjMCAwIDYyLjQtNjIuNCA2Mi40LTYyLjRjMCAwIDM1LjYgMzUuNSAzNS42IDM1LjVjMCAwIDIwLjItMjAuMiAyMC4yLTIwLjJjMCAwLTM1LjQtMzUuNy0zNS40LTM1LjdjMCAwIDIxLjEtMjEgMjEuMS0yMWMwIDAtMjAuNy0yMC4yLTIwLjctMjAuMlpcIiAvPlxuICAgICAgICA8cGF0aCBkPVwiTTUwMi44IDE5OS42Yy0xMy40LTkuOS0zMC4xLTE1LjgtNDguMS0xNS44Yy00NC43IDAtODEgMzYuMi04MSA4MWMwIDQ0LjcgMzYuMyA4MSA4MSA4MWM0NC44IDAgODEtMzYuMyA4MS04MWgtMjguOGMwIDI4LjgtMjMuMyA1Mi4yLTUyLjIgNTIuMmMtOC4yIDAtMTYtMS45LTIyLjktNS4zbDMzLjctMzMuN2wtMjAuNC0yMC4zbC0zNC43IDM0LjZjLTUtOC03LjktMTcuNC03LjktMjcuNWMwLTI4LjkgMjMuNC01Mi4yIDUyLjItNTIuMmMxMC4xIDAgMTkuNCAyLjggMjcuNCA3LjdaXCIgZmlsbC1ydWxlPVwiZXZlbm9kZFwiIC8+XG4gICAgICAgIDxwYXRoIGQ9XCJNMjc2LjQgMjU1LjljMCAwLTEwLjctMTIuNC0xMC43LTEyLjRjMCAwLTE4LjEgMjAuMS0xOC4xIDIwLjFjMCAwIDE0LjkgMjAuNiAxNC45IDIwLjZjMCAwIDEuMiAxMC43IDEuMiAxMC43YzAgMCAyNi44IDAgMjYuOCAwYzAgMCAwLTExLjUgMC0xMS41YzAgMCAxNC42LTE5LjYgMTQuNi0xOS42YzAgMC0xNy45LTE4LjYtMTcuOS0xOC42YzAgMC0xMC44IDEwLjctMTAuOCAxMC43WlwiIC8+XG4gICAgICA8L2c+XG4gICAgICA8cGF0aCBzdHJva2U9XCIjMDAwXCIgc3Ryb2tlLXdpZHRoPVwiMzBcIiBkPVwiTTAtMjc3LjVjMTUzLjEgMCAyNzcuNSAxMjQuNCAyNzcuNSAyNzcuNWMwIDE1My4xLTEyNC40IDI3Ny41LTI3Ny41IDI3Ny41Yy0xNTMuMSAwLTI3Ny41LTEyNC40LTI3Ny41LTI3Ny41YzAtMTUzLjEgMTI0LjQtMjc3LjUgMjc3LjUtMjc3LjVaXCIgZmlsbD1cIm5vbmVcIiBkaXNwbGF5PVwiYmxvY2tcIiB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoNDExLjIsMzA3LjEpIHNjYWxlKC45NzcsLjk3NylcIiAvPlxuICAgIDwvZz5cbiAgICA8ZyBvcGFjaXR5PVwiMFwiIHRyYW5zZm9ybT1cInRyYW5zbGF0ZSgwLDApIHNjYWxlKC4xLC4xKVwiPlxuICAgICAgPGcgZGlzcGxheT1cImJsb2NrXCIgbWFzaz1cInVybCgjJHtpY29uUHJlZml4fV9mb3J3YXJkX01hc2stMTIpXCIgdHJhbnNmb3JtPVwidHJhbnNsYXRlKDIwLjMsLTIwLjMpXCI+XG4gICAgICAgIDxwYXRoIGQ9XCJNMjI0LjIgNDc4LjNjMCAwLTIxMC42IDIxMC41LTIxMC42IDIxMC41YzAgMCAyMC40IDIwLjQgMjAuNCAyMC40YzAgMCAyMTAuNy0yMTAuNyAyMTAuNy0yMTAuN2MtMTEuNy0xMS01LjktNi0yMC41LTIwLjJaXCIgLz5cbiAgICAgIDwvZz5cbiAgICAgIDxnIGRpc3BsYXk9XCJibG9ja1wiIG1hc2s9XCJ1cmwoIyR7aWNvblByZWZpeH1fZm9yd2FyZF9NYXNrLTEzKVwiPlxuICAgICAgICA8cGF0aCBkPVwiTTQ0NiAzOTAuOGMwIDAgMy41IC4yIDMuNSAuMmMwIDAgLjIgNy4zIC4yIDcuM2MuMSAwIDE0LjIgMCAxNC4yIDBjMCAwIDAtNy4zIDAtNy4zYzAgMCA0LTAuMiA0LTAuMmMwIDAgMC0xMy41IDAtMTMuNWMwIDAtMjEuOSAwLTIxLjkgMGMwIDAgMCAxMy41IDAgMTMuNVpcIiAvPlxuICAgICAgICA8cGF0aCBkPVwiTTI4Ny45IDQxNC40YzAgMC0xMS41IDExLjYtMTEuNSAxMS42YzAgMC0xOC41LTE4LjgtMTguNS0xOC44YzAgMC0yMC4zIDIwLjUtMjAuMyAyMC41YzAgMCAxOC41IDE4LjcgMTguNSAxOC43YzAgMC02Mi41IDYyLjQtNjIuNSA2Mi40YzAgMCAyMC40IDIwLjQgMjAuNCAyMC40YzAgMCA2Mi40LTYyLjQgNjIuNC02Mi40YzAgMCAxOC43IDE4LjcgMTguNyAxOC43YzAgMCAyMC4yLTIwIDIwLjItMjBjMCAwLTE4LjUtMTkuMS0xOC41LTE5LjFjMCAwIDExLjktMTEuOCAxMS45LTExLjhjMCAwLTIwLjgtMjAuMi0yMC44LTIwLjJaXCIgLz5cbiAgICAgICAgPHBhdGggZD1cIk01MDIuOCAxOTkuNmMtMTMuNC0xMC0zMC4xLTE1LjgtNDguMS0xNS44Yy00NC43IDAtODEgMzYuMi04MSA4MWMwIDQ0LjcgMzYuMyA4MSA4MSA4MWM0NC44IDAgODEtMzYuMyA4MS04MWgtMjguOGMwIDI4LjgtMjMuMyA1Mi4yLTUyLjIgNTIuMmMtOC4yIDAtMTYtMS45LTIyLjktNS4zbDIyLjQtMjIuNGwtMjAuNC0yMC40bC0yMy40IDIzLjRjLTUtOC03LjktMTcuNC03LjktMjcuNWMwLTI4LjkgMjMuNC01Mi4yIDUyLjItNTIuMmMxMC4xIDAgMTkuNCAyLjggMjcuNCA3LjdaXCIgZmlsbC1ydWxlPVwiZXZlbm9kZFwiIC8+XG4gICAgICAgIDxwYXRoIGQ9XCJNMjc2LjQgMjU5LjRjMCAwLTQuNS01LjItNC41LTUuMmMwIDAtMTAuNyAxMi4xLTEwLjcgMTIuMWMwIDAgNi45IDEwLjEgNi45IDEwLjFjMCAwIC44IDQuNSAuOCA0LjVjMCAwIDE2IDAgMTYgMGMwIDAgMC01IDAtNWMwIDAgNi43LTkuNCA2LjctOS40YzAgMC0xMC42LTExLjItMTAuNi0xMS4yYzAgMC00LjYgNC4xLTQuNiA0LjFaXCIgLz5cbiAgICAgIDwvZz5cbiAgICAgIDxwYXRoIHN0cm9rZT1cIiMwMDBcIiBzdHJva2Utd2lkdGg9XCIzMFwiIGQ9XCJNMC0yNzIuNWMxNTAuNCAwIDI3Mi41IDEyMi4xIDI3Mi41IDI3Mi41YzAgMTUwLjQtMTIyLjEgMjcyLjUtMjcyLjUgMjcyLjVjLTE1MC40IDAtMjcyLjUtMTIyLjEtMjcyLjUtMjcyLjVjMC0xNTAuNCAxMjIuMS0yNzIuNSAyNzIuNS0yNzIuNVpcIiBmaWxsPVwibm9uZVwiIGRpc3BsYXk9XCJibG9ja1wiIHRyYW5zZm9ybT1cInRyYW5zbGF0ZSg0MTQuOSwzMDMuNykgc2NhbGUoLjk3NywuOTc3KVwiIC8+XG4gICAgPC9nPlxuICAgIDxnIG9wYWNpdHk9XCIwXCIgdHJhbnNmb3JtPVwidHJhbnNsYXRlKDAsMCkgc2NhbGUoLjEsLjEpXCI+XG4gICAgICA8ZyBkaXNwbGF5PVwiYmxvY2tcIiBtYXNrPVwidXJsKCMke2ljb25QcmVmaXh9X2ZvcndhcmRfTWFzay0xNClcIiB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoMTMuNCwtMTMuNClcIj5cbiAgICAgICAgPHBhdGggZD1cIk0yMjQuMiA0NzguM2MwIDAtMjEwLjYgMjEwLjUtMjEwLjYgMjEwLjVjMCAwIDIwLjQgMjAuNCAyMC40IDIwLjRjMCAwIDIxMC43LTIxMC43IDIxMC43LTIxMC43Yy0xMS43LTExLTUuOS02LTIwLjUtMjAuMlpcIiAvPlxuICAgICAgPC9nPlxuICAgICAgPGcgZGlzcGxheT1cImJsb2NrXCIgbWFzaz1cInVybCgjJHtpY29uUHJlZml4fV9mb3J3YXJkX01hc2stMTUpXCI+XG4gICAgICAgIDxwYXRoIGQ9XCJNNDUzLjYgMzg4LjFjMCAwIC43IDAgLjcgMGMwIDAgLjEgMS43IC4xIDEuN2MwIDAgNC43IDAgNC43IDBjMCAwIDAtMS43IDAtMS43YzAgMCAxIDAgMSAwYzAgMCAwLTQuNSAwLTQuNWMwIDAtNi41IDAtNi41IDBjMCAwIDAgNC41IDAgNC41WlwiIC8+XG4gICAgICAgIDxwYXRoIGQ9XCJNMjgwLjggNDIxLjVjMCAwLTQuNCA0LjUtNC40IDQuNWMwIDAtNS41LTUuOS01LjUtNS45YzAgMC0yMC4zIDIwLjYtMjAuMyAyMC42YzAgMCA1LjUgNS43IDUuNSA1LjdjMCAwLTYyLjUgNjIuNC02Mi41IDYyLjRjMCAwIDIwLjQgMjAuNCAyMC40IDIwLjRjMCAwIDYyLjQtNjIuNCA2Mi40LTYyLjRjMCAwIDUuOCA1LjcgNS44IDUuN2MwIDAgMjAuMS0xOS45IDIwLjEtMTkuOWMwIDAtNS41LTYuMi01LjUtNi4yYzAgMCA0LjgtNC42IDQuOC00LjZjMCAwLTIwLjgtMjAuMy0yMC44LTIwLjNaXCIgLz5cbiAgICAgICAgPHBhdGggZD1cIk01MDIuOCAxOTkuNmMtMTMuNC0xMC0zMC4xLTE1LjgtNDguMS0xNS44Yy00NC43IDAtODEgMzYuMi04MSA4MWMwIDQ0LjcgMzYuMyA4MSA4MSA4MWM0NC44IDAgODEtMzYuMyA4MS04MWgtMjguOGMwIDI4LjgtMjMuMyA1Mi4yLTUyLjIgNTIuMmMtOC4yIDAtMTYtMS45LTIyLjktNS4zbDExLjktMTEuOWwtMjAuNC0yMC4zbC0xMi45IDEyLjhjLTUtOC03LjktMTcuNC03LjktMjcuNWMwLTI4LjkgMjMuNC01Mi4yIDUyLjItNTIuMmMxMC4xIDAgMTkuNCAyLjggMjcuNCA3LjdaXCIgZmlsbC1ydWxlPVwiZXZlbm9kZFwiIC8+XG4gICAgICAgIDxwYXRoIGQ9XCJNMjc2LjQgMjYyLjljMCAwLTEtMS4yLTEtMS4yYzAgMC0zLjYgNC0zLjYgNGMwIDAgMS45IDIuOCAxLjkgMi44YzAgMCAuMiAxLjEgLjIgMS4xYzAgMCA1LjQgMCA1LjQgMGMwIDAgMC0xLjIgMC0xLjJjMCAwIDEuNy0yLjYgMS43LTIuNmMwIDAtMy41LTMuNy0zLjUtMy43YzAgMC0xLjEgLjgtMS4xIC44WlwiIC8+XG4gICAgICA8L2c+XG4gICAgICA8cGF0aCBzdHJva2U9XCIjMDAwXCIgc3Ryb2tlLXdpZHRoPVwiMzBcIiBkPVwiTTAtMjY4LjhjMTQ4LjQgMCAyNjguOCAxMjAuNCAyNjguOCAyNjguOGMwIDE0OC40LTEyMC40IDI2OC44LTI2OC44IDI2OC44Yy0xNDguNCAwLTI2OC44LTEyMC40LTI2OC44LTI2OC44YzAtMTQ4LjQgMTIwLjQtMjY4LjggMjY4LjgtMjY4LjhaXCIgZmlsbD1cIm5vbmVcIiBkaXNwbGF5PVwiYmxvY2tcIiB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoNDE3LjYsMzAxLjMpIHNjYWxlKC45NzcsLjk3NylcIiAvPlxuICAgIDwvZz5cbiAgICA8ZyBvcGFjaXR5PVwiMFwiIHRyYW5zZm9ybT1cInRyYW5zbGF0ZSgwLDApIHNjYWxlKC4xLC4xKVwiPlxuICAgICAgPGcgZGlzcGxheT1cImJsb2NrXCIgbWFzaz1cInVybCgjJHtpY29uUHJlZml4fV9mb3J3YXJkX01hc2stMTYpXCIgdHJhbnNmb3JtPVwidHJhbnNsYXRlKDcuMywtNy4zKVwiPlxuICAgICAgICA8cGF0aCBkPVwiTTIyNC4yIDQ3OC4zYzAgMC0yMTAuNiAyMTAuNS0yMTAuNiAyMTAuNWMwIDAgMjAuNCAyMC40IDIwLjQgMjAuNGMwIDAgMjEwLjctMjEwLjcgMjEwLjctMjEwLjdjLTExLjctMTEtNS45LTYtMjAuNS0yMC4yWlwiIC8+XG4gICAgICA8L2c+XG4gICAgICA8ZyBkaXNwbGF5PVwiYmxvY2tcIiBtYXNrPVwidXJsKCMke2ljb25QcmVmaXh9X2ZvcndhcmRfTWFzay0xNylcIj5cbiAgICAgICAgPHBhdGggZD1cIk0yNzUuNCA0MjYuOWMwIDAtMTkuMyAxOS41LTE5LjMgMTkuNWMwIDAtNjIuNSA2Mi40LTYyLjUgNjIuNGMwIDAgMjAuNCAyMC40IDIwLjQgMjAuNGMwIDAgNjIuNC02Mi40IDYyLjQtNjIuNGMwIDAgMTkuOS0xOS43IDE5LjktMTkuN2MwIDAtMjAuOS0yMC4yLTIwLjktMjAuMlpcIiAvPlxuICAgICAgICA8cGF0aCBkPVwiTTQxMS40IDI5MS4zbDIwLjcgMjAuN2wuMS0wLjFjNi44IDMuMiAxNC41IDUuMSAyMi41IDUuMWMyOC45IDAgNTIuMi0yMy40IDUyLjItNTIuMmgyOC44YzAgNDQuNy0zNi4yIDgxLTgxIDgxYy00NC43IDAtODEtMzYuMy04MS04MWMwLTQ0LjggMzYuMy04MSA4MS04MWMxOCAwIDIxLjkgNi4zIDM1LjMgMTYuMmwtNy45IDIwLjNjLTgtNC45LTE3LjMtNy43LTI3LjQtNy43Yy0yOC44IDAtNTIuMiAyMy4zLTUyLjIgNTIuMmMwIDEwLjEgMi45IDE5LjUgNy45IDI3LjVaXCIgZmlsbC1ydWxlPVwiZXZlbm9kZFwiIC8+XG4gICAgICA8L2c+XG4gICAgICA8cGF0aCBzdHJva2U9XCIjMDAwXCIgc3Ryb2tlLXdpZHRoPVwiMzBcIiBkPVwiTTAtMjY1LjZjMTQ2LjYgMCAyNjUuNiAxMTkgMjY1LjYgMjY1LjZjMCAxNDYuNi0xMTkgMjY1LjYtMjY1LjYgMjY1LjZjLTE0Ni42IDAtMjY1LjYtMTE5LTI2NS42LTI2NS42YzAtMTQ2LjYgMTE5LTI2NS42IDI2NS42LTI2NS42WlwiIGZpbGw9XCJub25lXCIgZGlzcGxheT1cImJsb2NrXCIgdHJhbnNmb3JtPVwidHJhbnNsYXRlKDQyMCwyOTkuMSkgc2NhbGUoLjk3NywuOTc3KVwiIC8+XG4gICAgPC9nPlxuICAgIDxnIG9wYWNpdHk9XCIwXCIgdHJhbnNmb3JtPVwidHJhbnNsYXRlKDAsMCkgc2NhbGUoLjEsLjEpXCI+XG4gICAgICA8ZyBkaXNwbGF5PVwiYmxvY2tcIiBtYXNrPVwidXJsKCMke2ljb25QcmVmaXh9X2ZvcndhcmRfTWFzay0xOClcIiB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoNCwtNClcIj5cbiAgICAgICAgPHBhdGggZD1cIk0yMjQuMiA0NzguM2MwIDAtMjEwLjYgMjEwLjUtMjEwLjYgMjEwLjVjMCAwIDIwLjQgMjAuNCAyMC40IDIwLjRjMCAwIDIxMC43LTIxMC43IDIxMC43LTIxMC43Yy0xMS43LTExLTUuOS02LTIwLjUtMjAuMlpcIiAvPlxuICAgICAgPC9nPlxuICAgICAgPGcgZGlzcGxheT1cImJsb2NrXCIgbWFzaz1cInVybCgjJHtpY29uUHJlZml4fV9mb3J3YXJkX01hc2stMTkpXCI+XG4gICAgICAgIDxwYXRoIGQ9XCJNMjY1LjQgNDM3LjFjMCAwLTkuMyA5LjMtOS4zIDkuM2MwIDAtNjIuNSA2Mi40LTYyLjUgNjIuNGMwIDAgMjAuNCAyMC40IDIwLjQgMjAuNGMwIDAgNjIuNC02Mi40IDYyLjQtNjIuNGMwIDAgOS44LTkuNiA5LjgtOS42YzAgMC0yMC44LTIwLjEtMjAuOC0yMC4xWlwiIC8+XG4gICAgICAgIDxwYXRoIGQ9XCJNNDAzIDI5OS4zbDIwLjkgMjAuOWw4LjMtOC4zYzYuOCAzLjIgMTQuNSA1LjEgMjIuNSA1LjFjMjguOSAwIDUyLjItMjMuNCA1Mi4yLTUyLjJoMjguOGMwIDQ0LjctMzYuMiA4MS04MSA4MWMtNDQuNyAwLTgxLTM2LjMtODEtODFjMC00NC44IDM2LjMtODEgODEtODFjMTggMCAzNC42IDUuOCA0OC4xIDE1LjhsLTIwLjcgMjAuN2MtOC00LjktMTcuMy03LjctMjcuNC03LjdjLTI4LjggMC01Mi4yIDIzLjMtNTIuMiA1Mi4yYzAgMTAgMi45IDE5LjMgNy44IDI3LjNaXCIgZmlsbC1ydWxlPVwiZXZlbm9kZFwiIC8+XG4gICAgICA8L2c+XG4gICAgICA8cGF0aCBzdHJva2U9XCIjMDAwXCIgc3Ryb2tlLXdpZHRoPVwiMzBcIiBkPVwiTTAtMjYzLjhjMTQ1LjYgMCAyNjMuOCAxMTguMiAyNjMuOCAyNjMuOGMwIDE0NS42LTExOC4yIDI2My44LTI2My44IDI2My44Yy0xNDUuNiAwLTI2My44LTExOC4yLTI2My44LTI2My44YzAtMTQ1LjYgMTE4LjItMjYzLjggMjYzLjgtMjYzLjhaXCIgZmlsbD1cIm5vbmVcIiBkaXNwbGF5PVwiYmxvY2tcIiB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoNDIxLjIsMjk3LjgpIHNjYWxlKC45NzcsLjk3NylcIiAvPlxuICAgIDwvZz5cbiAgICA8ZyBjbGlwLXBhdGg9XCJ1cmwoIyR7aWNvblByZWZpeH1fZm9yd2FyZF9DbGlwUGF0aC0xKVwiIG9wYWNpdHk9XCIwXCIgdHJhbnNmb3JtPVwidHJhbnNsYXRlKDAsMCkgc2NhbGUoLjEsLjEpXCI+XG4gICAgICA8ZyBkaXNwbGF5PVwiYmxvY2tcIiBtYXNrPVwidXJsKCMke2ljb25QcmVmaXh9X2ZvcndhcmRfTWFzay0yMClcIj5cbiAgICAgICAgPHBhdGggZD1cIk0yMjQuMiA0NzguM2MwIDAtMjEwLjYgMjEwLjUtMjEwLjYgMjEwLjVjMCAwIDIwLjQgMjAuNCAyMC40IDIwLjRjMCAwIDIxMC43LTIxMC43IDIxMC43LTIxMC43Yy0xMS43LTExLTUuOS02LTIwLjUtMjAuMlpcIiAvPlxuICAgICAgPC9nPlxuICAgICAgPHBhdGggc3Ryb2tlPVwiIzAwMFwiIHN0cm9rZS13aWR0aD1cIjMwXCIgZD1cIk0wLTI2MS43YzE0NC40IDAgMjYxLjcgMTE3LjMgMjYxLjcgMjYxLjdjMCAxNDQuNC0xMTcuMyAyNjEuNy0yNjEuNyAyNjEuN2MtMTQ0LjQgMC0yNjEuNy0xMTcuMy0yNjEuNy0yNjEuN2MwLTE0NC40IDExNy4zLTI2MS43IDI2MS43LTI2MS43WlwiIGZpbGw9XCJub25lXCIgZGlzcGxheT1cImJsb2NrXCIgdHJhbnNmb3JtPVwidHJhbnNsYXRlKDQyMi44LDI5Ni40KSBzY2FsZSguOTc3LC45NzcpXCIgLz5cbiAgICA8L2c+YDtcbiAgfVxufSk7XG4iLCJpbXBvcnQgU1ZHSWNvbiBmcm9tICcuL2ljb24uanMnO1xuZXhwb3J0IGRlZmF1bHQgbmV3IFNWR0ljb24oe1xuICBuYW1lOiAnZW1haWwnLFxuICBwYXRoOiAnTTEyLC0zLjU1MjcxMzY4ZS0xNSBDOC44MTcxMiwtMy41NTI3MTM2OGUtMTUgNS43NjQ4LDEuMjY0NjggMy41MTQ4LDMuNTE0OCBDMS4yNjQ4LDUuNzY0OTIgMy41NTI3MTM2OGUtMTUsOC44MTczNiAzLjU1MjcxMzY4ZS0xNSwxMiBDMy41NTI3MTM2OGUtMTUsMTUuMTgyNjQgMS4yNjQ2OCwxOC4yMzUyIDMuNTE0OCwyMC40ODUyIEM1Ljc2NDkyLDIyLjczNTIgOC44MTczNiwyNCAxMiwyNCBDMTUuMTgyNjQsMjQgMTguMjM1MiwyMi43MzUzMiAyMC40ODUyLDIwLjQ4NTIgQzIyLjczNTIsMTguMjM1MDggMjQsMTUuMTgyNjQgMjQsMTIgQzI0LDguODE3MzYgMjIuNzM1MzIsNS43NjQ4IDIwLjQ4NTIsMy41MTQ4IEMxOC4yMzUwOCwxLjI2NDggMTUuMTgyNjQsLTMuNTUyNzEzNjhlLTE1IDEyLC0zLjU1MjcxMzY4ZS0xNSBaIE0xNy4yOCw3LjkyIEwxMiwxMS44NzA2NCBMNi43Miw3LjkyIEwxNy4yOCw3LjkyIFogTTE4LDE1LjY0Nzc2IEMxOCwxNS43NzQzMjE2IDE3Ljk0NDY4NzIsMTUuODk0MzEyIDE3Ljg1LDE1Ljk3NjgyNCBDMTcuNzU0Mzc0NCwxNi4wNTkzMjQgMTcuNjI3ODEyOCwxNi4wOTY4MjQgMTcuNTAzMTI4LDE2LjA3OTk0OTYgTDYuNDc5OTI4LDE2LjA3OTk0OTYgQzYuMzUyNDI4LDE2LjA5NDAxMjIgNi4yMjQ5MjgsMTYuMDQ5OTQ5NiA2LjEzMjEyLDE1Ljk2MTgyNCBDNi4wNDAyNDU2LDE1Ljg3Mjc2MjQgNS45OTE0OTQ0LDE1Ljc0NzEzNjggNS45OTk5MzI4LDE1LjYxODY5NiBMNS45OTk5MzI4LDkuMDQ3NzM2IEw1Ljk5OTkzMjgsOC40NDExODQgTDcuOTUzNjc2OCw5LjkwNzQ0IEwxMS42Mzk4MzY4LDEyLjY3MjI0IEMxMS44Mzk1MjQsMTIuODY4MTc4NCAxMi4xNjAxNTY4LDEyLjg2ODE3ODQgMTIuMzU5ODM2OCwxMi42NzIyNCBMMTcuODkzOTk2OCw4LjUxNzM2IEwxNy45ODQ5MzUyLDguNDQ5ODYgTDE3Ljk4NTg3MjYsOC40NTA3OTc2OCBDMTcuOTkxNDk3OCw4LjQ4NTQ4NDg4IDE3Ljk5NTI0NzgsOC41MjExMTA0OCAxNy45OTcxMjI2LDguNTU1Nzk3NjggTDE3Ljk5NzEyMjYsMTUuNjM4Njc3NyBMMTgsMTUuNjQ3NzYgWidcbn0pO1xuIiwiaW1wb3J0IHRodW1iSWNvbiBmcm9tICcuL3RodW1iLmpzJztcbmltcG9ydCByZWNlaXB0SWNvbiBmcm9tICcuL3JlY2VpcHQuanMnO1xuaW1wb3J0IHBhbnRoZW9uSWNvbiBmcm9tICcuL3BhbnRoZW9uLmpzJztcbmltcG9ydCBtaWNJY29uIGZyb20gJy4vbWljLmpzJztcbmltcG9ydCBkaXJlY3Rpb25zSWNvbiBmcm9tICcuL2RpcmVjdGlvbnMuanMnO1xuaW1wb3J0IGNhbGVuZGFySWNvbiBmcm9tICcuL2NhbGVuZGFyLmpzJztcbmltcG9ydCBjYWxsb3V0SWNvbiBmcm9tICcuL2NhbGxvdXQuanMnO1xuaW1wb3J0IGluZm9JY29uIGZyb20gJy4vaW5mby5qcyc7XG5pbXBvcnQgYnJpZWZjYXNlSWNvbiBmcm9tICcuL2JyaWVmY2FzZS5qcyc7XG5pbXBvcnQga2Fib2JJY29uIGZyb20gJy4va2Fib2IuanMnO1xuaW1wb3J0IHBlcnNvbkljb24gZnJvbSAnLi9wZXJzb24uanMnO1xuaW1wb3J0IG1hZ25pZnlpbmdHbGFzc0ljb24gZnJvbSAnLi9tYWduaWZ5aW5nX2dsYXNzLmpzJztcbmltcG9ydCBvZmZpY2VJY29uIGZyb20gJy4vb2ZmaWNlLmpzJztcbmltcG9ydCBsaW5rSWNvbiBmcm9tICcuL2xpbmsuanMnO1xuaW1wb3J0IHdpbmRvd0ljb24gZnJvbSAnLi93aW5kb3cuanMnO1xuaW1wb3J0IHBob25lSWNvbiBmcm9tICcuL3Bob25lLmpzJztcbmltcG9ydCB0YWdJY29uIGZyb20gJy4vdGFnLmpzJztcbmltcG9ydCBkb2N1bWVudEljb24gZnJvbSAnLi9kb2N1bWVudC5qcyc7XG5pbXBvcnQgY2hldnJvbkljb24gZnJvbSAnLi9jaGV2cm9uLmpzJztcbmltcG9ydCBzdXBwb3J0SWNvbiBmcm9tICcuL3N1cHBvcnQuanMnO1xuaW1wb3J0IHlleHRJY29uIGZyb20gJy4veWV4dC5qcyc7XG5pbXBvcnQgcGluSWNvbiBmcm9tICcuL3Bpbi5qcyc7XG5pbXBvcnQgZ2Vhckljb24gZnJvbSAnLi9nZWFyLmpzJztcbmltcG9ydCBsaWdodEJ1bGJJY29uIGZyb20gJy4vbGlnaHRfYnVsYi5qcyc7XG5pbXBvcnQgc3Rhckljb24gZnJvbSAnLi9zdGFyLmpzJztcbmltcG9ydCBjbG9zZSBmcm9tICcuL2Nsb3NlLmpzJztcbmltcG9ydCBlbGVtZW50cyBmcm9tICcuL2VsZW1lbnRzJztcbmltcG9ydCB5ZXh0QW5pbWF0ZWRGb3J3YXJkIGZyb20gJy4veWV4dF9hbmltYXRlZF9yZXZlcnNlJztcbmltcG9ydCB5ZXh0QW5pbWF0ZWRSZXZlcnNlIGZyb20gJy4veWV4dF9hbmltYXRlZF9mb3J3YXJkJztcbmltcG9ydCBlbWFpbCBmcm9tICcuL2VtYWlsJztcblxuY29uc3QgaWNvbnNBcnJheSA9IFtcbiAgdGh1bWJJY29uLFxuICByZWNlaXB0SWNvbixcbiAgcGFudGhlb25JY29uLFxuICBtaWNJY29uLFxuICBkaXJlY3Rpb25zSWNvbixcbiAgY2FsZW5kYXJJY29uLFxuICBjYWxsb3V0SWNvbixcbiAgaW5mb0ljb24sXG4gIGJyaWVmY2FzZUljb24sXG4gIGthYm9iSWNvbixcbiAgcGVyc29uSWNvbixcbiAgbWFnbmlmeWluZ0dsYXNzSWNvbixcbiAgb2ZmaWNlSWNvbixcbiAgbGlua0ljb24sXG4gIHdpbmRvd0ljb24sXG4gIHBob25lSWNvbixcbiAgdGFnSWNvbixcbiAgZG9jdW1lbnRJY29uLFxuICBjaGV2cm9uSWNvbixcbiAgc3VwcG9ydEljb24sXG4gIHlleHRJY29uLFxuICBwaW5JY29uLFxuICBnZWFySWNvbixcbiAgbGlnaHRCdWxiSWNvbixcbiAgZWxlbWVudHMsXG4gIGNsb3NlLFxuICB5ZXh0QW5pbWF0ZWRGb3J3YXJkLFxuICB5ZXh0QW5pbWF0ZWRSZXZlcnNlLFxuICBlbWFpbCxcbiAgc3Rhckljb25cbl07XG5cbmNvbnN0IEljb25zID0ge307XG5cbmljb25zQXJyYXkuZm9yRWFjaChpY29uID0+IHtcbiAgSWNvbnNbaWNvbi5uYW1lXSA9IGljb24ubWFya3VwKCk7XG59KTtcblxuSWNvbnMuZGVmYXVsdCA9IHN0YXJJY29uLm1hcmt1cCgpO1xuXG5leHBvcnQgZGVmYXVsdCBJY29ucztcbiIsIi8qKiBAbW9kdWxlIEhhbmRsZWJhcnNSZW5kZXJlciAqL1xuXG5pbXBvcnQgUmVuZGVyZXIgZnJvbSAnLi9yZW5kZXJlcic7XG5pbXBvcnQgSWNvbnMgZnJvbSAnLi4vaWNvbnMnO1xuaW1wb3J0IEhpZ2hsaWdodGVkVmFsdWUgZnJvbSAnLi4vLi4vY29yZS9tb2RlbHMvaGlnaGxpZ2h0ZWR2YWx1ZSc7XG5cbi8qKlxuICogSGFuZGxlYmFyc1JlbmRlcmVyIGlzIGEgd3JhcHBlciBhcm91bmQgdGhlIG5hdGl2YXRlIGhhbmRsZWJhcnMgcmVuZGVyZXIuXG4gKiBAZXh0ZW5kcyBSZW5kZXJlclxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBIYW5kbGViYXJzUmVuZGVyZXIgZXh0ZW5kcyBSZW5kZXJlciB7XG4gIGNvbnN0cnVjdG9yICh0ZW1wbGF0ZXMgPSB7fSwgb3B0cyA9IHt9KSB7XG4gICAgc3VwZXIoKTtcblxuICAgIC8qKlxuICAgICAqIEEgbG9jYWwgcmVmZXJlbmNlIHRvIHRoZSBoYW5kbGViYXJzIGNvbXBpbGVyXG4gICAgICogQHR5cGUge0hhbmRsZWJhcnN9XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLl9oYW5kbGViYXJzID0gdGVtcGxhdGVzLl9oYiB8fCBudWxsO1xuXG4gICAgLyoqXG4gICAgICogQSBsb2NhbCByZWZlcmVuY2UgdG8gdGhlIHByZS1jb21waWxlZCBoYW5kbGViYXJzIHRlbXBsYXRlc1xuICAgICAqIEB0eXBlIHtIYW5kbGViYXJzfVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5fdGVtcGxhdGVzID0gdGVtcGxhdGVzIHx8IHt9O1xuICB9XG5cbiAgaW5pdCAodGVtcGxhdGVzKSB7XG4gICAgLy8gQXNzaWduIHRoZSBoYW5kbGViYXJzIGNvbXBpbGVyIGFuZCB0ZW1wbGF0ZXMgYmFzZWQgb25cbiAgICAvLyBpbmZvcm1hdGlvbiBwcm92aWRlZCBmcm9tIGV4dGVybmFsIGRlcCAoaW4gZGVmYXVsdCBjYXNlLCBpdCBjb21lcyBmcm9tIGV4dGVybmFsIHNlcnZlciByZXF1ZXN0KVxuICAgIHRoaXMuX2hhbmRsZWJhcnMgPSB0ZW1wbGF0ZXMuX2hiO1xuICAgIHRoaXMuX3RlbXBsYXRlcyA9IHRlbXBsYXRlcztcblxuICAgIC8vIFRPRE8oYmlsbHkpIE9uY2Ugd2UgcmUtd3JpdGUgdGVtcGxhdGVzIHVzaW5nIHRoZSBuZXcgaGVscGVycyBsaWJyYXJ5XG4gICAgLy8gd2UgcHJvYmFibHkgZG9uJ3QgbmVlZCB0aGVzZSBjdXN0b20gaGVscGVycyBhbnltb3JlXG4gICAgdGhpcy5fcmVnaXN0ZXJDdXN0b21IZWxwZXJzKCk7XG4gIH1cblxuICAvKipcbiAgICogcmVnaXN0ZXJIZWxwZXIgaXMgYSBwdWJsaWMgaW50ZXJmYWNlIGZvciBleHRlcm5hbCBkZXBlbmRlbmNpZXMgdG9cbiAgICogcmVnaXN0ZXIgdGhlaXIgb3duIGN1c3RvbSBoZWxwZXJzIHRvIG91ciBpbnRlcm5hbCBIYW5kbGViYXJzIENvbXBpbGVyXG4gICAqL1xuICByZWdpc3RlckhlbHBlciAobmFtZSwgY2IpIHtcbiAgICB0aGlzLl9oYW5kbGViYXJzLnJlZ2lzdGVySGVscGVyKG5hbWUsIGNiKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTYWZlU3RyaW5nIGlzIGEgcHVibGljIGludGVyZmFjZSBmb3IgZXh0ZXJuYWwgZGVwZW5kZW5jaWVzIHRvXG4gICAqIG1hcmsgYSBzdHJpbmcgYXMgJ3NhZmUnLiBIYW5kbGViYXJzIHdpbGwgbm90IGVzY2FwZSBhIFNhZmVTdHJpbmdcbiAgICovXG4gIFNhZmVTdHJpbmcgKHN0cmluZykge1xuICAgIHJldHVybiBuZXcgdGhpcy5faGFuZGxlYmFycy5TYWZlU3RyaW5nKHN0cmluZyk7XG4gIH1cblxuICAvKipcbiAgICogRXNjYXBlRXhwcmVzc2lvbiBpcyBhIHB1YmxpYyBpbnRlcmZhY2UgZm9yIGV4dGVybmFsIGRlcGVuZGVuY2llcyB0b1xuICAgKiBlc2NhcGUgYSBzdHJpbmdcbiAgICovXG4gIGVzY2FwZUV4cHJlc3Npb24gKHN0cmluZykge1xuICAgIHJldHVybiB0aGlzLl9oYW5kbGViYXJzLmVzY2FwZUV4cHJlc3Npb24oc3RyaW5nKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBjb21waWxlIGEgaGFuZGxlYmFycyB0ZW1wbGF0ZSBzbyB0aGF0IGl0IGNhbiBiZSByZW5kZXJlZCxcbiAgICogdXNpbmcgdGhlIHtIYW5kbGViYXJzfSBjb21waWxlclxuICAgKiBAcGFyYW0ge3N0cmluZ30gdGVtcGxhdGUgVGhlIHRlbXBsYXRlIHN0cmluZyB0byBjb21waWxlXG4gICAqL1xuICBjb21waWxlICh0ZW1wbGF0ZSkge1xuICAgIGlmICh0eXBlb2YgdGVtcGxhdGUgIT09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9oYW5kbGViYXJzLmNvbXBpbGUodGVtcGxhdGUpO1xuICB9XG5cbiAgLyoqXG4gICAqIGNvbXBpbGUgYSB0ZW1wbGF0ZSBhbmQgdGhlbiBhZGQgaXQgdG8gdGhlIGN1cnJlbnQgdGVtcGxhdGUgYnVuZGxlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0ZW1wbGF0ZU5hbWUgVGhlIHVuaXF1ZSBuYW1lIGZvciB0aGUgdGVtcGxhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRlbXBsYXRlIFRoZSBoYW5kbGViYXJzIHRlbXBsYXRlIHN0cmluZ1xuICAgKi9cbiAgcmVnaXN0ZXJUZW1wbGF0ZSAodGVtcGxhdGVOYW1lLCB0ZW1wbGF0ZSkge1xuICAgIHRoaXMuX3RlbXBsYXRlc1t0ZW1wbGF0ZU5hbWVdID0gdGhpcy5jb21waWxlKHRlbXBsYXRlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiByZW5kZXIgd2lsbCByZW5kZXIgYSB0ZW1wbGF0ZSB3aXRoIGRhdGFcbiAgICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBQcm92aWRlIGVpdGhlciBhIHRlbXBsYXRlTmFtZSBvciBhIHByZS1jb21waWxlZCB0ZW1wbGF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gZGF0YSBUaGUgZGF0YSB0byBwcm92aWRlIHRvIHRoZSB0ZW1wbGF0ZVxuICAgKi9cbiAgcmVuZGVyIChjb25maWcsIGRhdGEpIHtcbiAgICAvLyBJZiBhIGN1c3RvbSB0ZW1wbGF0ZSBpcyBwcm92aWRlZCwgdXNlIGl0LFxuICAgIC8vIG90aGVyd2lzZSBmYWxsIGJhY2sgdG8gdGhlIHRlbXBsYXRlIG5hbWVcbiAgICAvLyBUT0RPKGJpbGx5KSBUaGlzIGludGVyZmFjZSBzaG91bGQgcHJvYmFibHkgYmUgbGVzcyB1Z2x5XG4gICAgaWYgKGNvbmZpZy50ZW1wbGF0ZSAhPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGNvbmZpZy50ZW1wbGF0ZShkYXRhKTtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgcmV0dXJuIHRoaXMuX3RlbXBsYXRlc1tjb25maWcudGVtcGxhdGVOYW1lXShkYXRhKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NhbiBub3QgZmluZC9yZW5kZXIgdGVtcGxhdGU6ICcgKyBjb25maWcudGVtcGxhdGVOYW1lLCBlKTtcbiAgICB9XG4gIH1cblxuICBfcmVnaXN0ZXJDdXN0b21IZWxwZXJzICgpIHtcbiAgICB0aGlzLnJlZ2lzdGVySGVscGVyKCdpZmVxJywgZnVuY3Rpb24gKGFyZzEsIGFyZzIsIG9wdGlvbnMpIHtcbiAgICAgIHJldHVybiAoYXJnMSA9PT0gYXJnMikgPyBvcHRpb25zLmZuKHRoaXMpIDogb3B0aW9ucy5pbnZlcnNlKHRoaXMpO1xuICAgIH0pO1xuXG4gICAgdGhpcy5yZWdpc3RlckhlbHBlcignaWZub3RlcScsIGZ1bmN0aW9uIChhcmcxLCBhcmcyLCBvcHRpb25zKSB7XG4gICAgICByZXR1cm4gKGFyZzEgIT09IGFyZzIpID8gb3B0aW9ucy5mbih0aGlzKSA6IG9wdGlvbnMuaW52ZXJzZSh0aGlzKTtcbiAgICB9KTtcblxuICAgIHRoaXMucmVnaXN0ZXJIZWxwZXIoe1xuICAgICAgZXE6IGZ1bmN0aW9uICh2MSwgdjIpIHtcbiAgICAgICAgcmV0dXJuIHYxID09PSB2MjtcbiAgICAgIH0sXG4gICAgICBuZTogZnVuY3Rpb24gKHYxLCB2Mikge1xuICAgICAgICByZXR1cm4gdjEgIT09IHYyO1xuICAgICAgfSxcbiAgICAgIGx0OiBmdW5jdGlvbiAodjEsIHYyKSB7XG4gICAgICAgIHJldHVybiB2MSA8IHYyO1xuICAgICAgfSxcbiAgICAgIGd0OiBmdW5jdGlvbiAodjEsIHYyKSB7XG4gICAgICAgIHJldHVybiB2MSA+IHYyO1xuICAgICAgfSxcbiAgICAgIGx0ZTogZnVuY3Rpb24gKHYxLCB2Mikge1xuICAgICAgICByZXR1cm4gdjEgPD0gdjI7XG4gICAgICB9LFxuICAgICAgZ3RlOiBmdW5jdGlvbiAodjEsIHYyKSB7XG4gICAgICAgIHJldHVybiB2MSA+PSB2MjtcbiAgICAgIH0sXG4gICAgICBhbmQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cykuZXZlcnkoQm9vbGVhbik7XG4gICAgICB9LFxuICAgICAgb3I6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMCwgLTEpLnNvbWUoQm9vbGVhbik7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICB0aGlzLnJlZ2lzdGVySGVscGVyKHtcbiAgICAgIGFkZDogKGExLCBhMikgPT4gYTEgKyBhMixcbiAgICAgIHN1YjogKGExLCBhMikgPT4gYTEgLSBhMixcbiAgICAgIG11bDogKGExLCBhMikgPT4gYTEgKiBhMixcbiAgICAgIGRpdjogKGExLCBhMikgPT4gYTEgLyBhMixcbiAgICAgIG1vZDogKGExLCBhMikgPT4gYTEgJSBhMlxuICAgIH0pO1xuXG4gICAgdGhpcy5yZWdpc3RlckhlbHBlcignZXZlcnknLCBmdW5jdGlvbiAoLi4uYXJncykge1xuICAgICAgY29uc3QgdmFsdWVzID0gYXJncy5zbGljZSgwLCBhcmdzLmxlbmd0aCAtIDEpO1xuICAgICAgY29uc3Qgb3B0aW9ucyA9IGFyZ3NbYXJncy5sZW5ndGggLSAxXTtcbiAgICAgIHJldHVybiAodmFsdWVzLmV2ZXJ5KHYgPT4gdikpID8gb3B0aW9ucy5mbih0aGlzKSA6IG9wdGlvbnMuaW52ZXJzZSh0aGlzKTtcbiAgICB9KTtcblxuICAgIHRoaXMucmVnaXN0ZXJIZWxwZXIoJ2Zvcm1hdFBob25lTnVtYmVyJywgZnVuY3Rpb24gKHBob25lTnVtYmVyU3RyaW5nKSB7XG4gICAgICB2YXIgY2xlYW5lZCA9ICgnJyArIHBob25lTnVtYmVyU3RyaW5nKS5yZXBsYWNlKC9cXEQvZywgJycpO1xuICAgICAgdmFyIG1hdGNoID0gY2xlYW5lZC5tYXRjaCgvXigxfCk/KFxcZHszfSkoXFxkezN9KShcXGR7NH0pJC8pO1xuICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgIHZhciBpbnRsQ29kZSA9IChtYXRjaFsxXSA/ICcrMSAnIDogJycpO1xuICAgICAgICByZXR1cm4gW2ludGxDb2RlLCAnKCcsIG1hdGNoWzJdLCAnKSAnLCBtYXRjaFszXSwgJy0nLCBtYXRjaFs0XV0uam9pbignJyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9KTtcblxuICAgIHRoaXMucmVnaXN0ZXJIZWxwZXIoJ2Fzc2lnbicsIGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSwgb3B0aW9ucykge1xuICAgICAgbGV0IGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICBvcHRpb25zID0gYXJnc1thcmdzLmxlbmd0aCAtIDFdO1xuXG4gICAgICBpZiAoIW9wdGlvbnMuZGF0YS5yb290KSB7XG4gICAgICAgIG9wdGlvbnMuZGF0YS5yb290ID0ge307XG4gICAgICB9XG5cbiAgICAgIGxldCB2ID0gJyc7XG4gICAgICBmb3IgKGxldCBpID0gMTsgaSA8IGFyZ3MubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgICAgIHYgPSB2ICsgYXJnc1tpXTtcbiAgICAgIH1cblxuICAgICAgb3B0aW9ucy5kYXRhLnJvb3RbbmFtZV0gPSB2O1xuICAgIH0pO1xuXG4gICAgdGhpcy5yZWdpc3RlckhlbHBlcignanNvbicsIGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSwgb3B0aW9ucykge1xuICAgICAgcmV0dXJuIG5hbWUgPT09IHVuZGVmaW5lZFxuICAgICAgICA/ICcnXG4gICAgICAgIDogSlNPTi5zdHJpbmdpZnkobmFtZSk7XG4gICAgfSk7XG5cbiAgICB0aGlzLnJlZ2lzdGVySGVscGVyKCdwbHVyYWwnLCBmdW5jdGlvbiAobnVtYmVyLCBzaW5ndWxhclRleHQsIHBsdXJhbFRleHQpIHtcbiAgICAgIHJldHVybiBudW1iZXIgPT09IDFcbiAgICAgICAgPyBzaW5ndWxhclRleHRcbiAgICAgICAgOiBwbHVyYWxUZXh0O1xuICAgIH0pO1xuXG4gICAgbGV0IHNlbGYgPSB0aGlzO1xuICAgIHNlbGYucmVnaXN0ZXJIZWxwZXIoJ2ljb24nLCBmdW5jdGlvbiAobmFtZSwgY29tcGxleENvbnRlbnRzUGFyYW1zLCBvcHRpb25zKSB7XG4gICAgICBsZXQgaWNvbiA9IEljb25zLmRlZmF1bHQ7XG4gICAgICBpZiAoIUljb25zW25hbWVdKSB7XG4gICAgICAgIHJldHVybiBzZWxmLlNhZmVTdHJpbmcoaWNvbik7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIEljb25zW25hbWVdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGljb24gPSBJY29uc1tuYW1lXShjb21wbGV4Q29udGVudHNQYXJhbXMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWNvbiA9IEljb25zW25hbWVdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHNlbGYuU2FmZVN0cmluZyhpY29uKTtcbiAgICB9KTtcblxuICAgIHNlbGYucmVnaXN0ZXJIZWxwZXIoJ2hpZ2hsaWdodFZhbHVlJywgZnVuY3Rpb24gKHZhbHVlLCBnZXRJbnZlcnRlZCkge1xuICAgICAgY29uc3QgZXNjYXBlZElucHV0ID0gc2VsZi5lc2NhcGVFeHByZXNzaW9uKHZhbHVlLnZhbHVlIHx8IHZhbHVlLnNob3J0VmFsdWUpO1xuXG4gICAgICBjb25zdCBoaWdobGlnaHRlZFZhbCA9IG5ldyBIaWdobGlnaHRlZFZhbHVlKHtcbiAgICAgICAgdmFsdWU6IGVzY2FwZWRJbnB1dCxcbiAgICAgICAgbWF0Y2hlZFN1YnN0cmluZ3M6IHZhbHVlLm1hdGNoZWRTdWJzdHJpbmdzXG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIGdldEludmVydGVkID8gc2VsZi5TYWZlU3RyaW5nKGhpZ2hsaWdodGVkVmFsLmdldEludmVydGVkKCkpXG4gICAgICAgIDogc2VsZi5TYWZlU3RyaW5nKGhpZ2hsaWdodGVkVmFsLmdldCgpKTtcbiAgICB9KTtcbiAgfVxufVxuIiwiLyoqIEBtb2R1bGUgKi9cblxuaW1wb3J0IFJlbmRlcmVyIGZyb20gJy4vcmVuZGVyZXInO1xuaW1wb3J0IEhhbmRsZWJhcnNSZW5kZXJlciBmcm9tICcuL2hhbmRsZWJhcnNyZW5kZXJlcic7XG5cbi8vIEluIHRoZSBmdXR1cmUsIHRoaXMgd2lsbCBjb250YWluIGFsbCBkaWZmZXJlbnQgdHlwZXMgb2YgcmVuZGVyZXJzXG4vLyBFLmcuIE11c3RhY2hlLCBTT1ksIEhhbmRsZUJhcnMsIFJlYWN0LCBldGMuXG5leHBvcnQgY29uc3QgUmVuZGVyZXJzID0ge1xuICBTT1k6IFJlbmRlcmVyLFxuICBIYW5kbGViYXJzOiBIYW5kbGViYXJzUmVuZGVyZXJcbn07XG4iLCIvKiogQG1vZHVsZSAqL1xuXG4vKiogVGhlIGN1cnJlbnQgbGliIHZlcnNpb24sIHJlcG9ydGVkIHdpdGggZXJyb3JzIGFuZCBhbmFseXRpY3MsIGluamVjdGVkIGJ5IHRoZSBidWlsZCBwcm9jZXNzICovXG5leHBvcnQgY29uc3QgTElCX1ZFUlNJT04gPSAnQEBMSUJfVkVSU0lPTic7XG5cbi8qKiBUaGUgaWRlbnRpZmllciBvZiB0aGUgcHJvZHVjdGlvbiBlbnZpcm9ubWVudCAqL1xuZXhwb3J0IGNvbnN0IFBST0RVQ1RJT04gPSAncHJvZHVjdGlvbic7XG5cbi8qKiBUaGUgaWRlbnRpZmllciBvZiB0aGUgc2FuZGJveCBlbnZpcm9ubWVudCAqL1xuZXhwb3J0IGNvbnN0IFNBTkRCT1ggPSAnc2FuZGJveCc7XG5cbi8qKiBUaGUgZGVmYXVsdCB1cmwgZm9yIGNvbXBpbGVkIGNvbXBvbmVudCB0ZW1wbGF0ZXMgKi9cbmV4cG9ydCBjb25zdCBDT01QSUxFRF9URU1QTEFURVNfVVJMID0gYGh0dHBzOi8vYXNzZXRzLnNpdGVzY2RuLm5ldC9hbnN3ZXJzLyR7TElCX1ZFUlNJT059L2Fuc3dlcnN0ZW1wbGF0ZXMuY29tcGlsZWQubWluLmpzYDtcbiIsIi8qKiBAbW9kdWxlIERlZmF1bHRUZW1wbGF0ZXNMb2FkZXIgKi9cblxuaW1wb3J0IERPTSBmcm9tICcuLi9kb20vZG9tJztcbmltcG9ydCB7IENPTVBJTEVEX1RFTVBMQVRFU19VUkwgfSBmcm9tICcuLi8uLi9jb3JlL2NvbnN0YW50cyc7XG5cbi8qKlxuICogRGVmYXVsdFRlbXBsYXRlc0xvYWRlciBleHBvc2VzIGFuIGludGVyZmFjZSBmb3IgbG9hZGluZyB0aGUgZGVmYXVsdCBzZXQgb2YgY29tcGlsZWQgdGVtcGxhdGVzXG4gKiBhc3luY2hyb25vdXNseSBmcm9tIHRoZSBzZXJ2ZXIuIE5vdGUgdGhhdCB0aGlzIGNsYXNzIGNhbm5vdCBiZSByZXB1cnBvc2VkIHRvIGZldGNoIGN1c3RvbVxuICogdGVtcGxhdGVzIGhvc3RlZCBieSBhIGNsaWVudC5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRGVmYXVsdFRlbXBsYXRlc0xvYWRlciB7XG4gIGNvbnN0cnVjdG9yIChvbkxvYWRlZCkge1xuICAgIGlmICghRGVmYXVsdFRlbXBsYXRlc0xvYWRlci5zZXRJbnN0YW5jZSh0aGlzKSkge1xuICAgICAgcmV0dXJuIERlZmF1bHRUZW1wbGF0ZXNMb2FkZXIuZ2V0SW5zdGFuY2UoKTtcbiAgICB9XG4gICAgdGhpcy5fdGVtcGxhdGVzID0ge307XG4gICAgdGhpcy5fb25Mb2FkZWQgPSBvbkxvYWRlZCB8fCBmdW5jdGlvbiAoKSB7fTtcbiAgICB0aGlzLl9mZXRjaFRlbXBsYXRlcygpO1xuICB9XG5cbiAgc3RhdGljIHNldEluc3RhbmNlIChpbnN0YW5jZSkge1xuICAgIGlmICghdGhpcy5pbnN0YW5jZSkge1xuICAgICAgdGhpcy5pbnN0YW5jZSA9IGluc3RhbmNlO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHN0YXRpYyBnZXRJbnN0YW5jZSAoKSB7XG4gICAgcmV0dXJuIHRoaXMuaW5zdGFuY2U7XG4gIH1cblxuICBfZmV0Y2hUZW1wbGF0ZXMgKCkge1xuICAgIC8vIElmIHRlbXBsYXRlIGhhdmUgYWxyZWFkeSBiZWVuIGxvYWRlZCwgZG8gbm90aGluZ1xuICAgIGxldCBub2RlID0gRE9NLnF1ZXJ5KCcjeWV4dC1hbnN3ZXJzLXRlbXBsYXRlcycpO1xuICAgIGlmIChub2RlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gSW5qZWN0IGEgc2NyaXB0IHRvIGZldGNoIHRoZSBjb21waWxlZCB0ZW1wbGF0ZXMsXG4gICAgLy8gd3JhcHBpbmcgaXQgYSBQcm9taXNlIGZvciBjbGVhbmxpbmVzc1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBsZXQgc2NyaXB0ID0gRE9NLmNyZWF0ZUVsKCdzY3JpcHQnLCB7XG4gICAgICAgIGlkOiAneWV4dC1hbnN3ZXJzLXRlbXBsYXRlcycsXG4gICAgICAgIG9ubG9hZDogcmVzb2x2ZSxcbiAgICAgICAgb25lcnJvcjogcmVqZWN0LFxuICAgICAgICBhc3luYzogdHJ1ZSxcbiAgICAgICAgc3JjOiBDT01QSUxFRF9URU1QTEFURVNfVVJMXG4gICAgICB9KTtcbiAgICAgIERPTS5hcHBlbmQoJ2JvZHknLCBzY3JpcHQpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIHJlZ2lzdGVyIHRoZSB0ZW1wbGF0ZXMgaW50ZXJuYWxseSBzbyB0aGF0IHRoZXkgY2FuIGJlIGxhdGVyIGNvbnN1bWVkXG4gICAqIChlLmcuIGJ5IGNvbXBvbmVudHMgYW5kIHJlbmRlcmVycykgd2l0aCBjb252aWVuaWVuY2UuXG4gICAqXG4gICAqIGBmZXRjaFRlbXBsYXRlc2Agd2lsbCBhdXRvbWF0aWNhbGx5IGNhbGwgdGhpcywgcHJvdmlkaW5nIHRoZSBjb21waWxlZCB0ZW1wbGF0ZXMgZnJvbSB0aGUgc2VydmVyLlxuICAgKi9cbiAgcmVnaXN0ZXIgKHRlbXBsYXRlcykge1xuICAgIHRoaXMuX3RlbXBsYXRlcyA9IHRlbXBsYXRlcztcblxuICAgIC8vIE5vdGlmeSBvdXIgY29uc3VtZXJzIHRoYXQgdGhlIHRlbXBsYXRlcyBhcmUgaGVyZSA6KVxuICAgIHRoaXMuX29uTG9hZGVkKHRoaXMuX3RlbXBsYXRlcyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBnZXQgKHRlbXBsYXRlTmFtZSkge1xuICAgIHJldHVybiB0aGlzLl90ZW1wbGF0ZXNbdGVtcGxhdGVOYW1lXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIFRoZSBpbnRlcm5hbCB0ZW1wbGF0ZSBjb2xsZWN0aW9uXG4gICAqL1xuICBnZXRUZW1wbGF0ZXMgKCkge1xuICAgIHJldHVybiB0aGlzLl90ZW1wbGF0ZXM7XG4gIH1cbn1cbiIsIi8qKiBAbW9kdWxlICovXG5cbmV4cG9ydCB7IGRlZmF1bHQgYXMgRE9NIH0gZnJvbSAnLi9kb20vZG9tJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgU2VhcmNoUGFyYW1zIH0gZnJvbSAnLi9kb20vc2VhcmNocGFyYW1zJztcblxuZXhwb3J0IHsgUmVuZGVyZXJzIH0gZnJvbSAnLi9yZW5kZXJpbmcvY29uc3QnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBEZWZhdWx0VGVtcGxhdGVzTG9hZGVyIH0gZnJvbSAnLi9yZW5kZXJpbmcvZGVmYXVsdHRlbXBsYXRlc2xvYWRlcic7XG4iLCIvKiogQG1vZHVsZSBFdmVudEVtaXR0ZXIgKi9cblxuLyoqXG4gKiBFdmVudEVtaXR0ZXIgaXMgYSBiYXNlIGNsYXNzIGZvciBhbnkgb2JqZWN0IHRoYXQgd2FudHMgdG8gZXhwb3NlXG4gKiBhIHB1Yi9zdWIgaW50ZXJmYWNlLCBmb3IgZW1pdHRpbmcgbWVzc2FnZXMgYW5kIHByb3ZpZGluZyBsaXN0ZW5lcnMuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEV2ZW50RW1pdHRlciB7XG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICAvKipcbiAgICAgKiBUaGUgc3Vic2NyaWJlcnMgb2YgbWVzc2FnZXNcbiAgICAgKiBAdHlwZSB7b2JqZWN0W119XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLl9saXN0ZW5lcnMgPSB7fTtcbiAgfVxuXG4gIC8qKlxuICAgKiBvbiBpcyB0aGUgcHVibGljIGludGVyZmFjZSBmb3Igc3Vic2NyaWJpbmcgZXZlbnRzIHRoYXQgYXJlIGVtaXR0ZWQuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBldnQgdGhlIGV2ZW50IG5hbWUgdG8gbGlzdGVuIHRvXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNiIFRoZSBjYWxsYmFjayB0byBpbnZva2Ugd2hlbiB0aGUge2V2dH0gaXMgZW1pdHRlZFxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IG9uY2UgT3B0aW9uYWwgdmFsdWUgd2hpY2ggd2lsbCBvbmx5IGhhbmRsZSB0aGUgbWVzc2FnZSBvbmNlXG4gICAqL1xuICBvbiAoZXZ0LCBjYiwgb25jZSkge1xuICAgIGlmICh0eXBlb2YgY2IgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignY2FsbGJhY2sgaGFuZGxlciBzaG91bGQgYmUgb2YgdHlwZSB7ZnVuY3Rpb259Jyk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2xpc3RlbmVyc1tldnRdID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMuX2xpc3RlbmVyc1tldnRdID0gW107XG4gICAgfVxuXG4gICAgdGhpcy5fbGlzdGVuZXJzW2V2dF0ucHVzaCh7XG4gICAgICBldmVudDogZXZ0LFxuICAgICAgY2I6IGNiLFxuICAgICAgb25jZTogb25jZSB8fCBmYWxzZVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogb25jZSBpcyB0aGUgcHVibGljIGludGVyZmFjZSBmb3Igc3Vic2NyaWJpbmcgZXZlbnRzIHRoYXQgYXJlIGVtaXR0ZWQuXG4gICAqIFRoZSBoYW5kbGVyIHdpbGwgb25seSBiZSB0cmlnZ2VyZWQgb25jZS5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGV2dCB0aGUgZXZlbnQgbmFtZSB0byBsaXN0ZW4gdG9cbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gY2IgVGhlIGNhbGxiYWNrIHRvIGludm9rZSB3aGVuIHRoZSB7ZXZ0fSBpcyBlbWl0dGVkXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gb25jZSBPcHRpb25hbCB2YWx1ZSB3aGljaCB3aWxsIG9ubHkgaGFuZGxlIHRoZSBtZXNzYWdlIG9uY2VcbiAgICovXG4gIG9uY2UgKGV2dCwgY2IpIHtcbiAgICByZXR1cm4gdGhpcy5vbihldnQsIGNiLCB0cnVlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBvZmYgaXMgdGhlIHB1YmxpYyBpbnRlcmZhY2UgZm9yIHVuc3Vic2NyaWJpbmcgZnJvbSBhbiBldmVudFxuICAgKiBAcGFyYW0ge3N0cmluZ30gZXZ0IHRoZSBldmVudCBuYW1lIHRvIHVuc3Vic2NyaWJlIGZyb21cbiAgICovXG4gIG9mZiAoZXZ0KSB7XG4gICAgZGVsZXRlIHRoaXMuX2xpc3RlbmVyc1tldnRdO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIGVtaXQgaXMgdGhlIHB1YmxpYyBpbnRlcmZhY2UgZm9yIGJyb2FkY2FzdGluZyBtZXNzYWdlcy9ldmVudHNcbiAgICogQHBhcmFtIHtzdHJpbmd9IGV2dCB0aGUgZXZlbnQgbmFtZSB0byBwdWJsaXNoIGZyb21cbiAgICogQHBhcmFtIHtPYmplY3R9IGRhdGEgdGhlIGRhdGEgdG8gc2VuZCBhbG9uZyB0byB0aGUgc3Vic2NyaWJlcnNcbiAgICovXG4gIGVtaXQgKGV2dCwgZGF0YSkge1xuICAgIGxldCBsaXN0ZW5lcnMgPSB0aGlzLl9saXN0ZW5lcnNbZXZ0XTtcbiAgICBpZiAobGlzdGVuZXJzID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBJbnZva2UgZWFjaCBvZiBhbGwgdGhlIGxpc3RlbmVyIGhhbmRsZXJzIGFuZCByZW1vdmUgdGhlIG9uZXMgdGhhdCBzaG91bGQgZmlyZSBvbmx5IG9uY2UuXG4gICAgbGV0IGtlZXAgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpc3RlbmVycy5sZW5ndGg7IGkrKykge1xuICAgICAgbGlzdGVuZXJzW2ldLmNiKGRhdGEpO1xuICAgICAgaWYgKGxpc3RlbmVyc1tpXS5vbmNlID09PSB0cnVlKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICAvLyBJbnN0ZWFkIG9mIGhhdmluZyBhICdkaXJ0eScgYXJyYXkgd2l0aCBkZWxldGVkIG9yICd1bmRlZmluZWQnIGVudHJpZXMsXG4gICAgICAvLyB3ZSBqdXN0IGNyZWF0ZSBhIGJyYW5kIG5ldyBhcnJheSB3aXRob3V0IHRoZSBsaXN0ZW5lcnMgdGhhdCB3ZXJlIHJlbW92ZWRcbiAgICAgIGtlZXAucHVzaChsaXN0ZW5lcnNbaV0pO1xuICAgIH1cblxuICAgIC8vIFVwZGF0ZSBvdXIgb2xkIGxpc3Qgb2YgbGlzdGVuZXJzIHRvIHRoZSBuZXdseSBjcmVhdGVkIGFycmF5XG4gICAgdGhpcy5fbGlzdGVuZXJzW2V2dF0gPSBrZWVwO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG59XG4iLCIvKiogQG1vZHVsZSBTdGF0ZSAqL1xuXG5pbXBvcnQgRXZlbnRFbWl0dGVyIGZyb20gJy4uLy4uL2NvcmUvZXZlbnRlbWl0dGVyL2V2ZW50ZW1pdHRlcic7XG5cbi8qKlxuICogU3RhdGUgY29udGFpbnMgdGhlIGRhdGEgZm9yIHRoZSBjb21wb25lbnRcbiAqIGFuZCBleHBvc2VzIGFuIHtFdmVudEVtaXR0ZXJ9IGludGVyZmFjZSBzbyB0aGF0IGV4dGVybmFsXG4gKiBkZXBlbmRlbmNpZXMgY2FuIGxpc3Rlbi9ob29rIHN1YnNjcmliZSB0byBtZXNzYWdlcy91cGRhdGVzLlxuICogQGV4dGVuZHMgRXZlbnRFbWl0dGVyXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFN0YXRlIGV4dGVuZHMgRXZlbnRFbWl0dGVyIHtcbiAgY29uc3RydWN0b3IgKGRhdGEpIHtcbiAgICBzdXBlcigpO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGluaXRpYWwgc3RhdGUgb2YgdGhlIGNvbXBvbmVudFxuICAgICAqIEB0eXBlIHtPYmplY3R9XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLl9zdGF0ZSA9IGRhdGEgfHwge307XG4gIH1cblxuICAvKipcbiAgICogU2V0IHRoZSBpbml0aWFsIHN0YXRlIG9mIHRoZSBjb21wb25lbnQuXG4gICAqIE5PVEUoYmlsbHkpOiBEb2VzIG5vdCBmaXJlIGFuIHVwZGF0ZSBtZXNzYWdlXG4gICAqL1xuICBpbml0IChwcm9wLCBvcHRWYWwpIHtcbiAgICB0aGlzLl9zZXQocHJvcCwgb3B0VmFsKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBzZXR0ZXIgZm9yIHRoZSBzdGF0ZVxuICAgKiBAcGFyYW0gcHJvcCB7c3RyaW5nfE9iamVjdH0gVGhlIHByb3BlcnR5IHRvIHNldFxuICAgKiBAcGFyYW0gb3B0VmFsIE9wdGlvbmFsLCBpZiBwcm9wIGlzIGEge3N0cmluZ30sIGl0IHdpbGwgYXNzaWduIHRoZSB2YWx1ZSB0byB0aGF0IHByb3BlcnR5XG4gICAqL1xuICBzZXQgKHByb3AsIG9wdFZhbCkge1xuICAgIHRoaXMuX3NldChwcm9wLCBvcHRWYWwpO1xuICAgIHRoaXMuZW1pdCgndXBkYXRlJyk7XG4gIH1cblxuICAvKipcbiAgICogc2V0dGVyIGZvciB0aGUgc3RhdGUgZW5hYmxlcyB5b3UgdG8gdXBkYXRlIGEgc2luZ2xlIHByb3BlcnR5LCBvciBjb21wbGV0ZSBzdGF0ZVxuICAgKiBkZXBlbmRpbmcgb24gdGhlIGFyZ3VtZW50cyBwcm92aWRlZC5cbiAgICogQHBhcmFtIHByb3Age3N0cmluZ3xPYmplY3R9IFRoZSBwcm9wZXJ0eSB0byBzZXRcbiAgICogQHBhcmFtIG9wdFZhbCBJZiBwcm9wIGlzIGEge3N0cmluZ30sIHByb3ZpZGUgaXRzIHZhbHVlXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfc2V0IChwcm9wLCBvcHRWYWwpIHtcbiAgICBpZiAob3B0VmFsID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMuX3N0YXRlID0gcHJvcDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fc3RhdGVbcHJvcF0gPSBvcHRWYWw7XG4gICAgfVxuICB9XG5cbiAgdXBkYXRlIChkYXRhKSB7XG4gICAgdGhpcy5fc3RhdGUgPSBkYXRhO1xuICAgIHRoaXMuZW1pdCgndXBkYXRlJyk7XG4gIH1cblxuICAvKipcbiAgICogUmV0cmlldmUgYSBwcm9wZXJ0aWVzIHZhbHVlIGZyb20gdGhlIHN0YXRlXG4gICAqIElmIG5vIHByb3BlcnR5IHByb3ZpZGVkLCByZXR1cm4gdGhlIGZ1bGwgc3RhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IG9wdFByb3Agb3B0aW9uYWwgcHJvcGVydHkgdG8gcmV0cmlldmVcbiAgICovXG4gIGdldCAob3B0UHJvcCkge1xuICAgIGlmIChvcHRQcm9wID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiB0aGlzLl9zdGF0ZTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX3N0YXRlW29wdFByb3BdO1xuICB9XG5cbiAgaGFzIChwcm9wKSB7XG4gICAgcmV0dXJuIHRoaXMuX3N0YXRlW3Byb3BdICE9PSB1bmRlZmluZWQ7XG4gIH1cblxuICBhc0pTT04gKCkge1xuICAgIHJldHVybiB0aGlzLl9zdGF0ZTtcbiAgfVxufVxuIiwidmFyIHN1cHBvcnQgPSB7XG4gIHNlYXJjaFBhcmFtczogJ1VSTFNlYXJjaFBhcmFtcycgaW4gc2VsZixcbiAgaXRlcmFibGU6ICdTeW1ib2wnIGluIHNlbGYgJiYgJ2l0ZXJhdG9yJyBpbiBTeW1ib2wsXG4gIGJsb2I6XG4gICAgJ0ZpbGVSZWFkZXInIGluIHNlbGYgJiZcbiAgICAnQmxvYicgaW4gc2VsZiAmJlxuICAgIChmdW5jdGlvbigpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIG5ldyBCbG9iKClcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgfSkoKSxcbiAgZm9ybURhdGE6ICdGb3JtRGF0YScgaW4gc2VsZixcbiAgYXJyYXlCdWZmZXI6ICdBcnJheUJ1ZmZlcicgaW4gc2VsZlxufVxuXG5mdW5jdGlvbiBpc0RhdGFWaWV3KG9iaikge1xuICByZXR1cm4gb2JqICYmIERhdGFWaWV3LnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKG9iailcbn1cblxuaWYgKHN1cHBvcnQuYXJyYXlCdWZmZXIpIHtcbiAgdmFyIHZpZXdDbGFzc2VzID0gW1xuICAgICdbb2JqZWN0IEludDhBcnJheV0nLFxuICAgICdbb2JqZWN0IFVpbnQ4QXJyYXldJyxcbiAgICAnW29iamVjdCBVaW50OENsYW1wZWRBcnJheV0nLFxuICAgICdbb2JqZWN0IEludDE2QXJyYXldJyxcbiAgICAnW29iamVjdCBVaW50MTZBcnJheV0nLFxuICAgICdbb2JqZWN0IEludDMyQXJyYXldJyxcbiAgICAnW29iamVjdCBVaW50MzJBcnJheV0nLFxuICAgICdbb2JqZWN0IEZsb2F0MzJBcnJheV0nLFxuICAgICdbb2JqZWN0IEZsb2F0NjRBcnJheV0nXG4gIF1cblxuICB2YXIgaXNBcnJheUJ1ZmZlclZpZXcgPVxuICAgIEFycmF5QnVmZmVyLmlzVmlldyB8fFxuICAgIGZ1bmN0aW9uKG9iaikge1xuICAgICAgcmV0dXJuIG9iaiAmJiB2aWV3Q2xhc3Nlcy5pbmRleE9mKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmopKSA+IC0xXG4gICAgfVxufVxuXG5mdW5jdGlvbiBub3JtYWxpemVOYW1lKG5hbWUpIHtcbiAgaWYgKHR5cGVvZiBuYW1lICE9PSAnc3RyaW5nJykge1xuICAgIG5hbWUgPSBTdHJpbmcobmFtZSlcbiAgfVxuICBpZiAoL1teYS16MC05XFwtIyQlJicqKy5eX2B8fl0vaS50ZXN0KG5hbWUpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCBjaGFyYWN0ZXIgaW4gaGVhZGVyIGZpZWxkIG5hbWUnKVxuICB9XG4gIHJldHVybiBuYW1lLnRvTG93ZXJDYXNlKClcbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplVmFsdWUodmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycpIHtcbiAgICB2YWx1ZSA9IFN0cmluZyh2YWx1ZSlcbiAgfVxuICByZXR1cm4gdmFsdWVcbn1cblxuLy8gQnVpbGQgYSBkZXN0cnVjdGl2ZSBpdGVyYXRvciBmb3IgdGhlIHZhbHVlIGxpc3RcbmZ1bmN0aW9uIGl0ZXJhdG9yRm9yKGl0ZW1zKSB7XG4gIHZhciBpdGVyYXRvciA9IHtcbiAgICBuZXh0OiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciB2YWx1ZSA9IGl0ZW1zLnNoaWZ0KClcbiAgICAgIHJldHVybiB7ZG9uZTogdmFsdWUgPT09IHVuZGVmaW5lZCwgdmFsdWU6IHZhbHVlfVxuICAgIH1cbiAgfVxuXG4gIGlmIChzdXBwb3J0Lml0ZXJhYmxlKSB7XG4gICAgaXRlcmF0b3JbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGl0ZXJhdG9yXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGl0ZXJhdG9yXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBIZWFkZXJzKGhlYWRlcnMpIHtcbiAgdGhpcy5tYXAgPSB7fVxuXG4gIGlmIChoZWFkZXJzIGluc3RhbmNlb2YgSGVhZGVycykge1xuICAgIGhlYWRlcnMuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSwgbmFtZSkge1xuICAgICAgdGhpcy5hcHBlbmQobmFtZSwgdmFsdWUpXG4gICAgfSwgdGhpcylcbiAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGhlYWRlcnMpKSB7XG4gICAgaGVhZGVycy5mb3JFYWNoKGZ1bmN0aW9uKGhlYWRlcikge1xuICAgICAgdGhpcy5hcHBlbmQoaGVhZGVyWzBdLCBoZWFkZXJbMV0pXG4gICAgfSwgdGhpcylcbiAgfSBlbHNlIGlmIChoZWFkZXJzKSB7XG4gICAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoaGVhZGVycykuZm9yRWFjaChmdW5jdGlvbihuYW1lKSB7XG4gICAgICB0aGlzLmFwcGVuZChuYW1lLCBoZWFkZXJzW25hbWVdKVxuICAgIH0sIHRoaXMpXG4gIH1cbn1cblxuSGVhZGVycy5wcm90b3R5cGUuYXBwZW5kID0gZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgbmFtZSA9IG5vcm1hbGl6ZU5hbWUobmFtZSlcbiAgdmFsdWUgPSBub3JtYWxpemVWYWx1ZSh2YWx1ZSlcbiAgdmFyIG9sZFZhbHVlID0gdGhpcy5tYXBbbmFtZV1cbiAgdGhpcy5tYXBbbmFtZV0gPSBvbGRWYWx1ZSA/IG9sZFZhbHVlICsgJywgJyArIHZhbHVlIDogdmFsdWVcbn1cblxuSGVhZGVycy5wcm90b3R5cGVbJ2RlbGV0ZSddID0gZnVuY3Rpb24obmFtZSkge1xuICBkZWxldGUgdGhpcy5tYXBbbm9ybWFsaXplTmFtZShuYW1lKV1cbn1cblxuSGVhZGVycy5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24obmFtZSkge1xuICBuYW1lID0gbm9ybWFsaXplTmFtZShuYW1lKVxuICByZXR1cm4gdGhpcy5oYXMobmFtZSkgPyB0aGlzLm1hcFtuYW1lXSA6IG51bGxcbn1cblxuSGVhZGVycy5wcm90b3R5cGUuaGFzID0gZnVuY3Rpb24obmFtZSkge1xuICByZXR1cm4gdGhpcy5tYXAuaGFzT3duUHJvcGVydHkobm9ybWFsaXplTmFtZShuYW1lKSlcbn1cblxuSGVhZGVycy5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgdGhpcy5tYXBbbm9ybWFsaXplTmFtZShuYW1lKV0gPSBub3JtYWxpemVWYWx1ZSh2YWx1ZSlcbn1cblxuSGVhZGVycy5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uKGNhbGxiYWNrLCB0aGlzQXJnKSB7XG4gIGZvciAodmFyIG5hbWUgaW4gdGhpcy5tYXApIHtcbiAgICBpZiAodGhpcy5tYXAuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgIGNhbGxiYWNrLmNhbGwodGhpc0FyZywgdGhpcy5tYXBbbmFtZV0sIG5hbWUsIHRoaXMpXG4gICAgfVxuICB9XG59XG5cbkhlYWRlcnMucHJvdG90eXBlLmtleXMgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGl0ZW1zID0gW11cbiAgdGhpcy5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBuYW1lKSB7XG4gICAgaXRlbXMucHVzaChuYW1lKVxuICB9KVxuICByZXR1cm4gaXRlcmF0b3JGb3IoaXRlbXMpXG59XG5cbkhlYWRlcnMucHJvdG90eXBlLnZhbHVlcyA9IGZ1bmN0aW9uKCkge1xuICB2YXIgaXRlbXMgPSBbXVxuICB0aGlzLmZvckVhY2goZnVuY3Rpb24odmFsdWUpIHtcbiAgICBpdGVtcy5wdXNoKHZhbHVlKVxuICB9KVxuICByZXR1cm4gaXRlcmF0b3JGb3IoaXRlbXMpXG59XG5cbkhlYWRlcnMucHJvdG90eXBlLmVudHJpZXMgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGl0ZW1zID0gW11cbiAgdGhpcy5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBuYW1lKSB7XG4gICAgaXRlbXMucHVzaChbbmFtZSwgdmFsdWVdKVxuICB9KVxuICByZXR1cm4gaXRlcmF0b3JGb3IoaXRlbXMpXG59XG5cbmlmIChzdXBwb3J0Lml0ZXJhYmxlKSB7XG4gIEhlYWRlcnMucHJvdG90eXBlW1N5bWJvbC5pdGVyYXRvcl0gPSBIZWFkZXJzLnByb3RvdHlwZS5lbnRyaWVzXG59XG5cbmZ1bmN0aW9uIGNvbnN1bWVkKGJvZHkpIHtcbiAgaWYgKGJvZHkuYm9keVVzZWQpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IFR5cGVFcnJvcignQWxyZWFkeSByZWFkJykpXG4gIH1cbiAgYm9keS5ib2R5VXNlZCA9IHRydWVcbn1cblxuZnVuY3Rpb24gZmlsZVJlYWRlclJlYWR5KHJlYWRlcikge1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgcmVhZGVyLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmVzb2x2ZShyZWFkZXIucmVzdWx0KVxuICAgIH1cbiAgICByZWFkZXIub25lcnJvciA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmVqZWN0KHJlYWRlci5lcnJvcilcbiAgICB9XG4gIH0pXG59XG5cbmZ1bmN0aW9uIHJlYWRCbG9iQXNBcnJheUJ1ZmZlcihibG9iKSB7XG4gIHZhciByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpXG4gIHZhciBwcm9taXNlID0gZmlsZVJlYWRlclJlYWR5KHJlYWRlcilcbiAgcmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKGJsb2IpXG4gIHJldHVybiBwcm9taXNlXG59XG5cbmZ1bmN0aW9uIHJlYWRCbG9iQXNUZXh0KGJsb2IpIHtcbiAgdmFyIHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKClcbiAgdmFyIHByb21pc2UgPSBmaWxlUmVhZGVyUmVhZHkocmVhZGVyKVxuICByZWFkZXIucmVhZEFzVGV4dChibG9iKVxuICByZXR1cm4gcHJvbWlzZVxufVxuXG5mdW5jdGlvbiByZWFkQXJyYXlCdWZmZXJBc1RleHQoYnVmKSB7XG4gIHZhciB2aWV3ID0gbmV3IFVpbnQ4QXJyYXkoYnVmKVxuICB2YXIgY2hhcnMgPSBuZXcgQXJyYXkodmlldy5sZW5ndGgpXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB2aWV3Lmxlbmd0aDsgaSsrKSB7XG4gICAgY2hhcnNbaV0gPSBTdHJpbmcuZnJvbUNoYXJDb2RlKHZpZXdbaV0pXG4gIH1cbiAgcmV0dXJuIGNoYXJzLmpvaW4oJycpXG59XG5cbmZ1bmN0aW9uIGJ1ZmZlckNsb25lKGJ1Zikge1xuICBpZiAoYnVmLnNsaWNlKSB7XG4gICAgcmV0dXJuIGJ1Zi5zbGljZSgwKVxuICB9IGVsc2Uge1xuICAgIHZhciB2aWV3ID0gbmV3IFVpbnQ4QXJyYXkoYnVmLmJ5dGVMZW5ndGgpXG4gICAgdmlldy5zZXQobmV3IFVpbnQ4QXJyYXkoYnVmKSlcbiAgICByZXR1cm4gdmlldy5idWZmZXJcbiAgfVxufVxuXG5mdW5jdGlvbiBCb2R5KCkge1xuICB0aGlzLmJvZHlVc2VkID0gZmFsc2VcblxuICB0aGlzLl9pbml0Qm9keSA9IGZ1bmN0aW9uKGJvZHkpIHtcbiAgICB0aGlzLl9ib2R5SW5pdCA9IGJvZHlcbiAgICBpZiAoIWJvZHkpIHtcbiAgICAgIHRoaXMuX2JvZHlUZXh0ID0gJydcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBib2R5ID09PSAnc3RyaW5nJykge1xuICAgICAgdGhpcy5fYm9keVRleHQgPSBib2R5XG4gICAgfSBlbHNlIGlmIChzdXBwb3J0LmJsb2IgJiYgQmxvYi5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihib2R5KSkge1xuICAgICAgdGhpcy5fYm9keUJsb2IgPSBib2R5XG4gICAgfSBlbHNlIGlmIChzdXBwb3J0LmZvcm1EYXRhICYmIEZvcm1EYXRhLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGJvZHkpKSB7XG4gICAgICB0aGlzLl9ib2R5Rm9ybURhdGEgPSBib2R5XG4gICAgfSBlbHNlIGlmIChzdXBwb3J0LnNlYXJjaFBhcmFtcyAmJiBVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoYm9keSkpIHtcbiAgICAgIHRoaXMuX2JvZHlUZXh0ID0gYm9keS50b1N0cmluZygpXG4gICAgfSBlbHNlIGlmIChzdXBwb3J0LmFycmF5QnVmZmVyICYmIHN1cHBvcnQuYmxvYiAmJiBpc0RhdGFWaWV3KGJvZHkpKSB7XG4gICAgICB0aGlzLl9ib2R5QXJyYXlCdWZmZXIgPSBidWZmZXJDbG9uZShib2R5LmJ1ZmZlcilcbiAgICAgIC8vIElFIDEwLTExIGNhbid0IGhhbmRsZSBhIERhdGFWaWV3IGJvZHkuXG4gICAgICB0aGlzLl9ib2R5SW5pdCA9IG5ldyBCbG9iKFt0aGlzLl9ib2R5QXJyYXlCdWZmZXJdKVxuICAgIH0gZWxzZSBpZiAoc3VwcG9ydC5hcnJheUJ1ZmZlciAmJiAoQXJyYXlCdWZmZXIucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoYm9keSkgfHwgaXNBcnJheUJ1ZmZlclZpZXcoYm9keSkpKSB7XG4gICAgICB0aGlzLl9ib2R5QXJyYXlCdWZmZXIgPSBidWZmZXJDbG9uZShib2R5KVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9ib2R5VGV4dCA9IGJvZHkgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYm9keSlcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuaGVhZGVycy5nZXQoJ2NvbnRlbnQtdHlwZScpKSB7XG4gICAgICBpZiAodHlwZW9mIGJvZHkgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRoaXMuaGVhZGVycy5zZXQoJ2NvbnRlbnQtdHlwZScsICd0ZXh0L3BsYWluO2NoYXJzZXQ9VVRGLTgnKVxuICAgICAgfSBlbHNlIGlmICh0aGlzLl9ib2R5QmxvYiAmJiB0aGlzLl9ib2R5QmxvYi50eXBlKSB7XG4gICAgICAgIHRoaXMuaGVhZGVycy5zZXQoJ2NvbnRlbnQtdHlwZScsIHRoaXMuX2JvZHlCbG9iLnR5cGUpXG4gICAgICB9IGVsc2UgaWYgKHN1cHBvcnQuc2VhcmNoUGFyYW1zICYmIFVSTFNlYXJjaFBhcmFtcy5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihib2R5KSkge1xuICAgICAgICB0aGlzLmhlYWRlcnMuc2V0KCdjb250ZW50LXR5cGUnLCAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkO2NoYXJzZXQ9VVRGLTgnKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmIChzdXBwb3J0LmJsb2IpIHtcbiAgICB0aGlzLmJsb2IgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciByZWplY3RlZCA9IGNvbnN1bWVkKHRoaXMpXG4gICAgICBpZiAocmVqZWN0ZWQpIHtcbiAgICAgICAgcmV0dXJuIHJlamVjdGVkXG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl9ib2R5QmxvYikge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMuX2JvZHlCbG9iKVxuICAgICAgfSBlbHNlIGlmICh0aGlzLl9ib2R5QXJyYXlCdWZmZXIpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShuZXcgQmxvYihbdGhpcy5fYm9keUFycmF5QnVmZmVyXSkpXG4gICAgICB9IGVsc2UgaWYgKHRoaXMuX2JvZHlGb3JtRGF0YSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NvdWxkIG5vdCByZWFkIEZvcm1EYXRhIGJvZHkgYXMgYmxvYicpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG5ldyBCbG9iKFt0aGlzLl9ib2R5VGV4dF0pKVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuYXJyYXlCdWZmZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgIGlmICh0aGlzLl9ib2R5QXJyYXlCdWZmZXIpIHtcbiAgICAgICAgcmV0dXJuIGNvbnN1bWVkKHRoaXMpIHx8IFByb21pc2UucmVzb2x2ZSh0aGlzLl9ib2R5QXJyYXlCdWZmZXIpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdGhpcy5ibG9iKCkudGhlbihyZWFkQmxvYkFzQXJyYXlCdWZmZXIpXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdGhpcy50ZXh0ID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHJlamVjdGVkID0gY29uc3VtZWQodGhpcylcbiAgICBpZiAocmVqZWN0ZWQpIHtcbiAgICAgIHJldHVybiByZWplY3RlZFxuICAgIH1cblxuICAgIGlmICh0aGlzLl9ib2R5QmxvYikge1xuICAgICAgcmV0dXJuIHJlYWRCbG9iQXNUZXh0KHRoaXMuX2JvZHlCbG9iKVxuICAgIH0gZWxzZSBpZiAodGhpcy5fYm9keUFycmF5QnVmZmVyKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHJlYWRBcnJheUJ1ZmZlckFzVGV4dCh0aGlzLl9ib2R5QXJyYXlCdWZmZXIpKVxuICAgIH0gZWxzZSBpZiAodGhpcy5fYm9keUZvcm1EYXRhKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NvdWxkIG5vdCByZWFkIEZvcm1EYXRhIGJvZHkgYXMgdGV4dCcpXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy5fYm9keVRleHQpXG4gICAgfVxuICB9XG5cbiAgaWYgKHN1cHBvcnQuZm9ybURhdGEpIHtcbiAgICB0aGlzLmZvcm1EYXRhID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy50ZXh0KCkudGhlbihkZWNvZGUpXG4gICAgfVxuICB9XG5cbiAgdGhpcy5qc29uID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMudGV4dCgpLnRoZW4oSlNPTi5wYXJzZSlcbiAgfVxuXG4gIHJldHVybiB0aGlzXG59XG5cbi8vIEhUVFAgbWV0aG9kcyB3aG9zZSBjYXBpdGFsaXphdGlvbiBzaG91bGQgYmUgbm9ybWFsaXplZFxudmFyIG1ldGhvZHMgPSBbJ0RFTEVURScsICdHRVQnLCAnSEVBRCcsICdPUFRJT05TJywgJ1BPU1QnLCAnUFVUJ11cblxuZnVuY3Rpb24gbm9ybWFsaXplTWV0aG9kKG1ldGhvZCkge1xuICB2YXIgdXBjYXNlZCA9IG1ldGhvZC50b1VwcGVyQ2FzZSgpXG4gIHJldHVybiBtZXRob2RzLmluZGV4T2YodXBjYXNlZCkgPiAtMSA/IHVwY2FzZWQgOiBtZXRob2Rcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFJlcXVlc3QoaW5wdXQsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge31cbiAgdmFyIGJvZHkgPSBvcHRpb25zLmJvZHlcblxuICBpZiAoaW5wdXQgaW5zdGFuY2VvZiBSZXF1ZXN0KSB7XG4gICAgaWYgKGlucHV0LmJvZHlVc2VkKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBbHJlYWR5IHJlYWQnKVxuICAgIH1cbiAgICB0aGlzLnVybCA9IGlucHV0LnVybFxuICAgIHRoaXMuY3JlZGVudGlhbHMgPSBpbnB1dC5jcmVkZW50aWFsc1xuICAgIGlmICghb3B0aW9ucy5oZWFkZXJzKSB7XG4gICAgICB0aGlzLmhlYWRlcnMgPSBuZXcgSGVhZGVycyhpbnB1dC5oZWFkZXJzKVxuICAgIH1cbiAgICB0aGlzLm1ldGhvZCA9IGlucHV0Lm1ldGhvZFxuICAgIHRoaXMubW9kZSA9IGlucHV0Lm1vZGVcbiAgICB0aGlzLnNpZ25hbCA9IGlucHV0LnNpZ25hbFxuICAgIGlmICghYm9keSAmJiBpbnB1dC5fYm9keUluaXQgIT0gbnVsbCkge1xuICAgICAgYm9keSA9IGlucHV0Ll9ib2R5SW5pdFxuICAgICAgaW5wdXQuYm9keVVzZWQgPSB0cnVlXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRoaXMudXJsID0gU3RyaW5nKGlucHV0KVxuICB9XG5cbiAgdGhpcy5jcmVkZW50aWFscyA9IG9wdGlvbnMuY3JlZGVudGlhbHMgfHwgdGhpcy5jcmVkZW50aWFscyB8fCAnc2FtZS1vcmlnaW4nXG4gIGlmIChvcHRpb25zLmhlYWRlcnMgfHwgIXRoaXMuaGVhZGVycykge1xuICAgIHRoaXMuaGVhZGVycyA9IG5ldyBIZWFkZXJzKG9wdGlvbnMuaGVhZGVycylcbiAgfVxuICB0aGlzLm1ldGhvZCA9IG5vcm1hbGl6ZU1ldGhvZChvcHRpb25zLm1ldGhvZCB8fCB0aGlzLm1ldGhvZCB8fCAnR0VUJylcbiAgdGhpcy5tb2RlID0gb3B0aW9ucy5tb2RlIHx8IHRoaXMubW9kZSB8fCBudWxsXG4gIHRoaXMuc2lnbmFsID0gb3B0aW9ucy5zaWduYWwgfHwgdGhpcy5zaWduYWxcbiAgdGhpcy5yZWZlcnJlciA9IG51bGxcblxuICBpZiAoKHRoaXMubWV0aG9kID09PSAnR0VUJyB8fCB0aGlzLm1ldGhvZCA9PT0gJ0hFQUQnKSAmJiBib2R5KSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQm9keSBub3QgYWxsb3dlZCBmb3IgR0VUIG9yIEhFQUQgcmVxdWVzdHMnKVxuICB9XG4gIHRoaXMuX2luaXRCb2R5KGJvZHkpXG59XG5cblJlcXVlc3QucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgUmVxdWVzdCh0aGlzLCB7Ym9keTogdGhpcy5fYm9keUluaXR9KVxufVxuXG5mdW5jdGlvbiBkZWNvZGUoYm9keSkge1xuICB2YXIgZm9ybSA9IG5ldyBGb3JtRGF0YSgpXG4gIGJvZHlcbiAgICAudHJpbSgpXG4gICAgLnNwbGl0KCcmJylcbiAgICAuZm9yRWFjaChmdW5jdGlvbihieXRlcykge1xuICAgICAgaWYgKGJ5dGVzKSB7XG4gICAgICAgIHZhciBzcGxpdCA9IGJ5dGVzLnNwbGl0KCc9JylcbiAgICAgICAgdmFyIG5hbWUgPSBzcGxpdC5zaGlmdCgpLnJlcGxhY2UoL1xcKy9nLCAnICcpXG4gICAgICAgIHZhciB2YWx1ZSA9IHNwbGl0LmpvaW4oJz0nKS5yZXBsYWNlKC9cXCsvZywgJyAnKVxuICAgICAgICBmb3JtLmFwcGVuZChkZWNvZGVVUklDb21wb25lbnQobmFtZSksIGRlY29kZVVSSUNvbXBvbmVudCh2YWx1ZSkpXG4gICAgICB9XG4gICAgfSlcbiAgcmV0dXJuIGZvcm1cbn1cblxuZnVuY3Rpb24gcGFyc2VIZWFkZXJzKHJhd0hlYWRlcnMpIHtcbiAgdmFyIGhlYWRlcnMgPSBuZXcgSGVhZGVycygpXG4gIC8vIFJlcGxhY2UgaW5zdGFuY2VzIG9mIFxcclxcbiBhbmQgXFxuIGZvbGxvd2VkIGJ5IGF0IGxlYXN0IG9uZSBzcGFjZSBvciBob3Jpem9udGFsIHRhYiB3aXRoIGEgc3BhY2VcbiAgLy8gaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzcyMzAjc2VjdGlvbi0zLjJcbiAgdmFyIHByZVByb2Nlc3NlZEhlYWRlcnMgPSByYXdIZWFkZXJzLnJlcGxhY2UoL1xccj9cXG5bXFx0IF0rL2csICcgJylcbiAgcHJlUHJvY2Vzc2VkSGVhZGVycy5zcGxpdCgvXFxyP1xcbi8pLmZvckVhY2goZnVuY3Rpb24obGluZSkge1xuICAgIHZhciBwYXJ0cyA9IGxpbmUuc3BsaXQoJzonKVxuICAgIHZhciBrZXkgPSBwYXJ0cy5zaGlmdCgpLnRyaW0oKVxuICAgIGlmIChrZXkpIHtcbiAgICAgIHZhciB2YWx1ZSA9IHBhcnRzLmpvaW4oJzonKS50cmltKClcbiAgICAgIGhlYWRlcnMuYXBwZW5kKGtleSwgdmFsdWUpXG4gICAgfVxuICB9KVxuICByZXR1cm4gaGVhZGVyc1xufVxuXG5Cb2R5LmNhbGwoUmVxdWVzdC5wcm90b3R5cGUpXG5cbmV4cG9ydCBmdW5jdGlvbiBSZXNwb25zZShib2R5SW5pdCwgb3B0aW9ucykge1xuICBpZiAoIW9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0ge31cbiAgfVxuXG4gIHRoaXMudHlwZSA9ICdkZWZhdWx0J1xuICB0aGlzLnN0YXR1cyA9IG9wdGlvbnMuc3RhdHVzID09PSB1bmRlZmluZWQgPyAyMDAgOiBvcHRpb25zLnN0YXR1c1xuICB0aGlzLm9rID0gdGhpcy5zdGF0dXMgPj0gMjAwICYmIHRoaXMuc3RhdHVzIDwgMzAwXG4gIHRoaXMuc3RhdHVzVGV4dCA9ICdzdGF0dXNUZXh0JyBpbiBvcHRpb25zID8gb3B0aW9ucy5zdGF0dXNUZXh0IDogJ09LJ1xuICB0aGlzLmhlYWRlcnMgPSBuZXcgSGVhZGVycyhvcHRpb25zLmhlYWRlcnMpXG4gIHRoaXMudXJsID0gb3B0aW9ucy51cmwgfHwgJydcbiAgdGhpcy5faW5pdEJvZHkoYm9keUluaXQpXG59XG5cbkJvZHkuY2FsbChSZXNwb25zZS5wcm90b3R5cGUpXG5cblJlc3BvbnNlLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFJlc3BvbnNlKHRoaXMuX2JvZHlJbml0LCB7XG4gICAgc3RhdHVzOiB0aGlzLnN0YXR1cyxcbiAgICBzdGF0dXNUZXh0OiB0aGlzLnN0YXR1c1RleHQsXG4gICAgaGVhZGVyczogbmV3IEhlYWRlcnModGhpcy5oZWFkZXJzKSxcbiAgICB1cmw6IHRoaXMudXJsXG4gIH0pXG59XG5cblJlc3BvbnNlLmVycm9yID0gZnVuY3Rpb24oKSB7XG4gIHZhciByZXNwb25zZSA9IG5ldyBSZXNwb25zZShudWxsLCB7c3RhdHVzOiAwLCBzdGF0dXNUZXh0OiAnJ30pXG4gIHJlc3BvbnNlLnR5cGUgPSAnZXJyb3InXG4gIHJldHVybiByZXNwb25zZVxufVxuXG52YXIgcmVkaXJlY3RTdGF0dXNlcyA9IFszMDEsIDMwMiwgMzAzLCAzMDcsIDMwOF1cblxuUmVzcG9uc2UucmVkaXJlY3QgPSBmdW5jdGlvbih1cmwsIHN0YXR1cykge1xuICBpZiAocmVkaXJlY3RTdGF0dXNlcy5pbmRleE9mKHN0YXR1cykgPT09IC0xKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0ludmFsaWQgc3RhdHVzIGNvZGUnKVxuICB9XG5cbiAgcmV0dXJuIG5ldyBSZXNwb25zZShudWxsLCB7c3RhdHVzOiBzdGF0dXMsIGhlYWRlcnM6IHtsb2NhdGlvbjogdXJsfX0pXG59XG5cbmV4cG9ydCB2YXIgRE9NRXhjZXB0aW9uID0gc2VsZi5ET01FeGNlcHRpb25cbnRyeSB7XG4gIG5ldyBET01FeGNlcHRpb24oKVxufSBjYXRjaCAoZXJyKSB7XG4gIERPTUV4Y2VwdGlvbiA9IGZ1bmN0aW9uKG1lc3NhZ2UsIG5hbWUpIHtcbiAgICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlXG4gICAgdGhpcy5uYW1lID0gbmFtZVxuICAgIHZhciBlcnJvciA9IEVycm9yKG1lc3NhZ2UpXG4gICAgdGhpcy5zdGFjayA9IGVycm9yLnN0YWNrXG4gIH1cbiAgRE9NRXhjZXB0aW9uLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoRXJyb3IucHJvdG90eXBlKVxuICBET01FeGNlcHRpb24ucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gRE9NRXhjZXB0aW9uXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmZXRjaChpbnB1dCwgaW5pdCkge1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgdmFyIHJlcXVlc3QgPSBuZXcgUmVxdWVzdChpbnB1dCwgaW5pdClcblxuICAgIGlmIChyZXF1ZXN0LnNpZ25hbCAmJiByZXF1ZXN0LnNpZ25hbC5hYm9ydGVkKSB7XG4gICAgICByZXR1cm4gcmVqZWN0KG5ldyBET01FeGNlcHRpb24oJ0Fib3J0ZWQnLCAnQWJvcnRFcnJvcicpKVxuICAgIH1cblxuICAgIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKVxuXG4gICAgZnVuY3Rpb24gYWJvcnRYaHIoKSB7XG4gICAgICB4aHIuYWJvcnQoKVxuICAgIH1cblxuICAgIHhoci5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICBzdGF0dXM6IHhoci5zdGF0dXMsXG4gICAgICAgIHN0YXR1c1RleHQ6IHhoci5zdGF0dXNUZXh0LFxuICAgICAgICBoZWFkZXJzOiBwYXJzZUhlYWRlcnMoeGhyLmdldEFsbFJlc3BvbnNlSGVhZGVycygpIHx8ICcnKVxuICAgICAgfVxuICAgICAgb3B0aW9ucy51cmwgPSAncmVzcG9uc2VVUkwnIGluIHhociA/IHhoci5yZXNwb25zZVVSTCA6IG9wdGlvbnMuaGVhZGVycy5nZXQoJ1gtUmVxdWVzdC1VUkwnKVxuICAgICAgdmFyIGJvZHkgPSAncmVzcG9uc2UnIGluIHhociA/IHhoci5yZXNwb25zZSA6IHhoci5yZXNwb25zZVRleHRcbiAgICAgIHJlc29sdmUobmV3IFJlc3BvbnNlKGJvZHksIG9wdGlvbnMpKVxuICAgIH1cblxuICAgIHhoci5vbmVycm9yID0gZnVuY3Rpb24oKSB7XG4gICAgICByZWplY3QobmV3IFR5cGVFcnJvcignTmV0d29yayByZXF1ZXN0IGZhaWxlZCcpKVxuICAgIH1cblxuICAgIHhoci5vbnRpbWVvdXQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJlamVjdChuZXcgVHlwZUVycm9yKCdOZXR3b3JrIHJlcXVlc3QgZmFpbGVkJykpXG4gICAgfVxuXG4gICAgeGhyLm9uYWJvcnQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJlamVjdChuZXcgRE9NRXhjZXB0aW9uKCdBYm9ydGVkJywgJ0Fib3J0RXJyb3InKSlcbiAgICB9XG5cbiAgICB4aHIub3BlbihyZXF1ZXN0Lm1ldGhvZCwgcmVxdWVzdC51cmwsIHRydWUpXG5cbiAgICBpZiAocmVxdWVzdC5jcmVkZW50aWFscyA9PT0gJ2luY2x1ZGUnKSB7XG4gICAgICB4aHIud2l0aENyZWRlbnRpYWxzID0gdHJ1ZVxuICAgIH0gZWxzZSBpZiAocmVxdWVzdC5jcmVkZW50aWFscyA9PT0gJ29taXQnKSB7XG4gICAgICB4aHIud2l0aENyZWRlbnRpYWxzID0gZmFsc2VcbiAgICB9XG5cbiAgICBpZiAoJ3Jlc3BvbnNlVHlwZScgaW4geGhyICYmIHN1cHBvcnQuYmxvYikge1xuICAgICAgeGhyLnJlc3BvbnNlVHlwZSA9ICdibG9iJ1xuICAgIH1cblxuICAgIHJlcXVlc3QuaGVhZGVycy5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBuYW1lKSB7XG4gICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihuYW1lLCB2YWx1ZSlcbiAgICB9KVxuXG4gICAgaWYgKHJlcXVlc3Quc2lnbmFsKSB7XG4gICAgICByZXF1ZXN0LnNpZ25hbC5hZGRFdmVudExpc3RlbmVyKCdhYm9ydCcsIGFib3J0WGhyKVxuXG4gICAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vIERPTkUgKHN1Y2Nlc3Mgb3IgZmFpbHVyZSlcbiAgICAgICAgaWYgKHhoci5yZWFkeVN0YXRlID09PSA0KSB7XG4gICAgICAgICAgcmVxdWVzdC5zaWduYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignYWJvcnQnLCBhYm9ydFhocilcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHhoci5zZW5kKHR5cGVvZiByZXF1ZXN0Ll9ib2R5SW5pdCA9PT0gJ3VuZGVmaW5lZCcgPyBudWxsIDogcmVxdWVzdC5fYm9keUluaXQpXG4gIH0pXG59XG5cbmZldGNoLnBvbHlmaWxsID0gdHJ1ZVxuXG5pZiAoIXNlbGYuZmV0Y2gpIHtcbiAgc2VsZi5mZXRjaCA9IGZldGNoXG4gIHNlbGYuSGVhZGVycyA9IEhlYWRlcnNcbiAgc2VsZi5SZXF1ZXN0ID0gUmVxdWVzdFxuICBzZWxmLlJlc3BvbnNlID0gUmVzcG9uc2Vcbn1cbiIsIi8qKiBAbW9kdWxlIEh0dHBSZXF1ZXN0ZXIgKi9cblxuLyogZ2xvYmFsIGZldGNoLCBYTUxIdHRwUmVxdWVzdCwgQWN0aXZlWE9iamVjdCAqL1xuXG5pbXBvcnQgeyBmZXRjaCBhcyBmZXRjaFBvbHlmaWxsIH0gZnJvbSAnd2hhdHdnLWZldGNoJztcblxuLyoqXG4gKiBUeXBlcyBvZiBIVFRQIHJlcXVlc3RzXG4gKi9cbmNvbnN0IE1ldGhvZHMgPSB7XG4gIEdFVDogJ2dldCcsXG4gIFBPU1Q6ICdwb3N0JyxcbiAgUFVUOiAncHV0JyxcbiAgREVMRVRFOiAnZGVsZXRlJ1xufTtcblxuLyoqXG4gKiBIdHRwUmVxdWVzdGVyIGlzIGEgd3JhcHBlciBhcm91bmQgdGhlIG5hdGl2ZSBpbXBsZW1lbnRhdGlvbiBvZiBBSkFYXG4gKiByZWxhdGVkIG1hdHRlcnMuIEl0J3MgdXNlZCB0byBtYWtlIGFsbCB0eXBlcyBvZiBuZXR3b3JrIHJlcXVlc3RzXG4gKiBhbmQgZXhwb3NlcyBhIHByb21pc2UgaW50ZXJmYWNlLlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBIdHRwUmVxdWVzdGVyIHtcbiAgLyoqXG4gICAqIENyZWF0ZSBhIEdFVCBIVFRQIHJlcXVlc3RcbiAgICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgdXJsIHRvIG1ha2UgYSByZXF1ZXN0IHRvXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhIFRoZSBkYXRhIHRvIHByb3ZpZGUgKGdldHMgZW5jb2RlZCBpbnRvIHRoZSBVUkwpXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIENvbmZpZ3VyYXRpb24gb3B0aW9ucyB0byB1c2UgZm9yIHRoZSByZXF1ZXN0XG4gICAqL1xuICBnZXQgKHVybCwgZGF0YSwgb3B0cykge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3QoTWV0aG9kcy5HRVQsIHRoaXMuZW5jb2RlUGFyYW1zKHVybCwgZGF0YSksIG9wdHMpO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIFBPU1QgSFRUUCByZXF1ZXN0XG4gICAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIHVybCB0byBtYWtlIGEgcmVxdWVzdCB0b1xuICAgKiBAcGFyYW0ge09iamVjdH0gdXJsUGFyYW1zIFRoZSBwYXJhbXMgdG8gZW5jb2RlIGludG8gdGhlIFVSTFxuICAgKiBAcGFyYW0ge09iamVjdH0ganNvbkJvZHkgVGhlIHJlcXVlc3QgYm9keSAoanNvbikgdG8gcHJvdmlkZSB3aXRoIHRoZSBQT1NUIHJlcXVlc3RcbiAgICogQHBhcmFtIHtPYmplY3R9IHJlcXVlc3RDb25maWcgQ29uZmlndXJhdGlvbiBvcHRpb25zIHRvIHVzZSBmb3IgdGhlIHJlcXVlc3RcbiAgICovXG4gIHBvc3QgKHVybCwgdXJsUGFyYW1zLCBqc29uQm9keSwgcmVxdWVzdENvbmZpZykge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3QoXG4gICAgICBNZXRob2RzLlBPU1QsXG4gICAgICB0aGlzLmVuY29kZVBhcmFtcyh1cmwsIHVybFBhcmFtcyksXG4gICAgICBPYmplY3QuYXNzaWduKHt9LCB7XG4gICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGpzb25Cb2R5KSxcbiAgICAgICAgY3JlZGVudGlhbHM6IHVuZGVmaW5lZFxuICAgICAgfSwgcmVxdWVzdENvbmZpZylcbiAgICApO1xuICB9XG5cbiAgcmVxdWVzdCAobWV0aG9kLCB1cmwsIG9wdHMpIHtcbiAgICBjb25zdCByZXFBcmdzID0gT2JqZWN0LmFzc2lnbih7fSwge1xuICAgICAgJ21ldGhvZCc6IG1ldGhvZCxcbiAgICAgICdjcmVkZW50aWFscyc6ICdpbmNsdWRlJ1xuICAgIH0sIG9wdHMpO1xuXG4gICAgcmV0dXJuIHRoaXMuX2ZldGNoKHVybCwgcmVxQXJncyk7XG4gIH1cblxuICAvLyBUT0RPIChhZ3JvdykgaW52ZXN0aWdhdGUgcmVtb3ZpbmcgdGhpc1xuICAvLyBVc2UgaW1wb3J0ZWQgZmV0Y2hQb2x5ZmlsbCBpZiBpdCBkb2VzIG5vdCBhbHJlYWR5IGV4aXN0IG9uIHdpbmRvd1xuICBfZmV0Y2ggKHVybCwgcmVxQXJncykge1xuICAgIGlmICghd2luZG93LmZldGNoKSB7XG4gICAgICByZXR1cm4gZmV0Y2hQb2x5ZmlsbCh1cmwsIHJlcUFyZ3MpO1xuICAgIH1cbiAgICByZXR1cm4gZmV0Y2godXJsLCByZXFBcmdzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZW5kIGEgYmVhY29uIHRvIHRoZSBwcm92aWRlZCB1cmwgd2hpY2ggd2lsbCBzZW5kIGEgbm9uLWJsb2NraW5nIHJlcXVlc3RcbiAgICogdG8gdGhlIHNlcnZlciB0aGF0IGlzIGd1YXJhbnRlZWQgdG8gc2VuZCBiZWZvcmUgcGFnZSBsb2FkLiBObyByZXNwb25zZSBpcyByZXR1cm5lZCxcbiAgICogc28gYmVhY29ucyBhcmUgcHJpbWFyaWx5IHVzZWQgZm9yIGFuYWx5dGljcyByZXBvcnRpbmcuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIHVybCB0byBzZW5kIHRoZSBiZWFjb24gdG9cbiAgICogQHBhcmFtIHtvYmplY3R9IGRhdGEgVGhlIGRhdGEgcGF5bG9hZCB0byBzZW5kIGluIHRoZSBiZWFjb25cbiAgICogQHJldHVybiB7Ym9vbGVhbn0gdHJ1ZSBpZiB0aGUgcmVxdWVzdCBpcyBzdWNjZXNzZnVsbHkgcXVldWVkXG4gICAqL1xuICBiZWFjb24gKHVybCwgZGF0YSkge1xuICAgIHJldHVybiB0aGlzLl9zZW5kQmVhY29uKHVybCwgSlNPTi5zdHJpbmdpZnkoZGF0YSkpO1xuICB9XG5cbiAgLy8gVE9ETyAoYWdyb3cpIGludmVzdGlnYXRlIHJlbW92aW5nIHRoaXNcbiAgLy8gTmF2aWdhdG9yLnNlbmRCZWFjb24gcG9seWZpbGxcbiAgLy8gQ29tYmluYXRpb24gb2YgdGhlIGNvbXBhY3QgRmluYW5jaWFsIFRpbWVzIHBvbHlmaWxsOlxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vRmluYW5jaWFsLVRpbWVzL3BvbHlmaWxsLWxpYnJhcnkvYmxvYi9tYXN0ZXIvcG9seWZpbGxzL25hdmlnYXRvci9zZW5kQmVhY29uL3BvbHlmaWxsLmpzXG4gIC8vIHdpdGggdGhlIGFzeW5jLWJ5LWRlZmF1bHQgYmVoYXZpb3Igb2YgTWlndWVsIE1vdGEncyBwb2x5ZmlsbDpcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL21pZ3VlbG1vdGEvTmF2aWdhdG9yLnNlbmRCZWFjb24vYmxvYi9tYXN0ZXIvc2VuZGJlYWNvbi5qc1xuICBfc2VuZEJlYWNvbiAodXJsLCBkYXRhKSB7XG4gICAgaWYgKHdpbmRvdy5uYXZpZ2F0b3IgJiYgd2luZG93Lm5hdmlnYXRvci5zZW5kQmVhY29uKSB7XG4gICAgICByZXR1cm4gd2luZG93Lm5hdmlnYXRvci5zZW5kQmVhY29uKHVybCwgZGF0YSk7XG4gICAgfVxuXG4gICAgdmFyIGV2ZW50ID0gd2luZG93LmV2ZW50ICYmIHdpbmRvdy5ldmVudC50eXBlO1xuICAgIHZhciBzeW5jID0gZXZlbnQgPT09ICd1bmxvYWQnIHx8IGV2ZW50ID09PSAnYmVmb3JldW5sb2FkJztcbiAgICB2YXIgeGhyID0gKCdYTUxIdHRwUmVxdWVzdCcgaW4gd2luZG93KSA/IG5ldyBYTUxIdHRwUmVxdWVzdCgpIDogbmV3IEFjdGl2ZVhPYmplY3QoJ01pY3Jvc29mdC5YTUxIVFRQJyk7XG4gICAgeGhyLm9wZW4oJ1BPU1QnLCB1cmwsICFzeW5jKTtcbiAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcignQWNjZXB0JywgJyovKicpO1xuICAgIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKCdDb250ZW50LVR5cGUnLCAndGV4dC9wbGFpbjtjaGFyc2V0PVVURi04Jyk7XG4gICAgfSBlbHNlIGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZGF0YSkgPT09ICdbb2JqZWN0IEJsb2JdJykge1xuICAgICAgaWYgKGRhdGEudHlwZSkge1xuICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcignQ29udGVudC1UeXBlJywgZGF0YS50eXBlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgeGhyLnNlbmQoZGF0YSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBlbmNvZGVQYXJhbXMgKHVybCwgcGFyYW1zKSB7XG4gICAgaWYgKHR5cGVvZiBwYXJhbXMgIT09ICdvYmplY3QnKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbGV0IGhhc1BhcmFtID0gdXJsLmluZGV4T2YoJz8nKSA+IC0xO1xuXG4gICAgbGV0IHNlYXJjaFF1ZXJ5ID0gJyc7XG4gICAgZm9yIChsZXQga2V5IGluIHBhcmFtcykge1xuICAgICAgaWYgKCFoYXNQYXJhbSkge1xuICAgICAgICBoYXNQYXJhbSA9IHRydWU7XG4gICAgICAgIHNlYXJjaFF1ZXJ5ICs9ICc/JztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNlYXJjaFF1ZXJ5ICs9ICcmJztcbiAgICAgIH1cblxuICAgICAgc2VhcmNoUXVlcnkgKz0ga2V5ICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KHBhcmFtc1trZXldKTtcbiAgICB9XG4gICAgcmV0dXJuIHVybCArIHNlYXJjaFF1ZXJ5O1xuICB9XG59XG4iLCIvKiogQG1vZHVsZSAqL1xuXG4vKipcbiAqIEFuIGVudW0gbGlzdGluZyB0aGUgZGlmZmVyZW50IENvbXBvbmVudCB0eXBlcyBzdXBwb3J0ZWQgaW4gdGhlIFNES1xuICogVE9ETzogYWRkIGFsbCBjb21wb25lbnQgdHlwZXNcbiAqIEB0eXBlIHtPYmplY3QuPHN0cmluZywgc3RyaW5nPn1cbiAqL1xuZXhwb3J0IGRlZmF1bHQge1xuICBGSUxURVJfQk9YOiAnRmlsdGVyQm94JyxcbiAgRklMVEVSX09QVElPTlM6ICdGaWx0ZXJPcHRpb25zJyxcbiAgUkFOR0VfRklMVEVSOiAnUmFuZ2VGaWx0ZXInLFxuICBEQVRFX1JBTkdFX0ZJTFRFUjogJ0RhdGVSYW5nZUZpbHRlcicsXG4gIEZBQ0VUUzogJ0ZhY2V0cycsXG4gIEdFT0xPQ0FUSU9OX0ZJTFRFUjogJ0dlb0xvY2F0aW9uRmlsdGVyJyxcbiAgU09SVF9PUFRJT05TOiAnU29ydE9wdGlvbnMnLFxuICBGSUxURVJfU0VBUkNIOiAnRmlsdGVyU2VhcmNoJ1xufTtcbiIsImltcG9ydCB7IFBST0RVQ1RJT04sIFNBTkRCT1ggfSBmcm9tICcuLi9jb25zdGFudHMnO1xuaW1wb3J0IFNlYXJjaFBhcmFtcyBmcm9tICcuLi8uLi91aS9kb20vc2VhcmNocGFyYW1zJztcbmltcG9ydCBTdG9yYWdlS2V5cyBmcm9tICcuLi9zdG9yYWdlL3N0b3JhZ2VrZXlzJztcbmltcG9ydCBDb21wb25lbnRUeXBlcyBmcm9tICcuLi8uLi91aS9jb21wb25lbnRzL2NvbXBvbmVudHR5cGVzJztcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBiYXNlIHVybCBmb3IgdGhlIGxpdmUgYXBpIGJhY2tlbmQgaW4gdGhlIGRlc2lyZWQgZW52aXJvbm1lbnQuXG4gKiBAcGFyYW0ge3N0cmluZ30gZW52IFRoZSBkZXNpcmVkIGVudmlyb25tZW50LlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0TGl2ZUFwaVVybCAoZW52ID0gUFJPRFVDVElPTikge1xuICByZXR1cm4gZW52ID09PSBTQU5EQk9YID8gJ2h0dHBzOi8vbGl2ZWFwaS1zYW5kYm94LnlleHQuY29tJyA6ICdodHRwczovL2xpdmVhcGkueWV4dC5jb20nO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGJhc2UgdXJsIGZvciB0aGUgbGl2ZSBhcGkgYmFja2VuZCBpbiB0aGUgZGVzaXJlZCBlbnZpcm9ubWVudC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBlbnYgVGhlIGRlc2lyZWQgZW52aXJvbm1lbnQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRDYWNoZWRMaXZlQXBpVXJsIChlbnYgPSBQUk9EVUNUSU9OKSB7XG4gIHJldHVybiBlbnYgPT09IFNBTkRCT1ggPyAnaHR0cHM6Ly9saXZlYXBpLXNhbmRib3gueWV4dC5jb20nIDogJ2h0dHBzOi8vbGl2ZWFwaS1jYWNoZWQueWV4dC5jb20nO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGJhc2UgdXJsIGZvciB0aGUga25vd2xlZGdlIGFwaSBiYWNrZW5kIGluIHRoZSBkZXNpcmVkIGVudmlyb25tZW50LlxuICogQHBhcmFtIHtzdHJpbmd9IGVudiBUaGUgZGVzaXJlZCBlbnZpcm9ubWVudC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEtub3dsZWRnZUFwaVVybCAoZW52ID0gUFJPRFVDVElPTikge1xuICByZXR1cm4gZW52ID09PSBTQU5EQk9YID8gJ2h0dHBzOi8vYXBpLXNhbmRib3gueWV4dC5jb20nIDogJ2h0dHBzOi8vYXBpLnlleHQuY29tJztcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBiYXNlIHVybCBmb3IgdGhlIGFuYWx5dGljcyBiYWNrZW5kIGluIHRoZSBkZXNpcmVkIGVudmlyb25tZW50LlxuICogQHBhcmFtIHtzdHJpbmd9IGVudiBUaGUgZGVzaXJlZCBlbnZpcm9ubWVudC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gY29udmVyc2lvblRyYWNraW5nRW5hYmxlZCBJZiBjb252ZXJzaW9uIHRyYWNraW5nIGhhcyBiZWVuIG9wdGVkIGludG8uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRBbmFseXRpY3NVcmwgKGVudiA9IFBST0RVQ1RJT04sIGNvbnZlcnNpb25UcmFja2luZ0VuYWJsZWQgPSBmYWxzZSkge1xuICBpZiAoY29udmVyc2lvblRyYWNraW5nRW5hYmxlZCkge1xuICAgIHJldHVybiBlbnYgPT09IFNBTkRCT1hcbiAgICAgID8gJ2h0dHBzOi8vc2FuZGJveC1yZWFsdGltZWFuYWx5dGljcy55ZXh0LmNvbSdcbiAgICAgIDogJ2h0dHBzOi8vcmVhbHRpbWVhbmFseXRpY3MueWV4dC5jb20nO1xuICB9XG4gIHJldHVybiBlbnYgPT09IFNBTkRCT1hcbiAgICA/ICdodHRwczovL3NhbmRib3gtYW5zd2Vycy55ZXh0LXBpeGVsLmNvbSdcbiAgICA6ICdodHRwczovL2Fuc3dlcnMueWV4dC1waXhlbC5jb20nO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIHBhc3NlZCBpbiB1cmwgd2l0aCB0aGUgcGFzc2VkIGluIHBhcmFtcyBhcHBlbmRlZCBhcyBxdWVyeSBwYXJhbXNcbiAqIE5vdGU6IHF1ZXJ5IHBhcmFtZXRlcnMgaW4gdGhlIHVybCBhcmUgc3RyaXBwZWQsIHlvdSBzaG91bGQgaW5jbHVkZSB0aG9zZSBxdWVyeSBwYXJhbWV0ZXJzXG4gKiBpbiBgcGFyYW1zYCBpZiB5b3Ugd2FudCB0byBrZWVwIHRoZW1cbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmxcbiAqIEBwYXJhbSB7U2VhcmNoUGFyYW1zfSBwYXJhbXMgdG8gYWRkIHRvIHRoZSB1cmxcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZXBsYWNlVXJsUGFyYW1zICh1cmwsIHBhcmFtcyA9IG5ldyBTZWFyY2hQYXJhbXMoKSkge1xuICByZXR1cm4gdXJsLnNwbGl0KCc/JylbMF0gKyAnPycgKyBwYXJhbXMudG9TdHJpbmcoKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBnaXZlbiB1cmwgd2l0aG91dCBxdWVyeSBwYXJhbXMgYW5kIGhhc2hlc1xuICogQHBhcmFtIHtzdHJpbmd9IHVybCBGdWxsIHVybCBlLmcuIGh0dHBzOi8veWV4dC5jb20vP3F1ZXJ5PWhlbGxvI0Zvb3RlclxuICogQHJldHVybnMge3N0cmluZ30gVXJsIHdpdGhvdXQgcXVlcnkgcGFyYW1zIGFuZCBoYXNoZXMgZS5nLiBodHRwczovL3lleHQuY29tL1xuICovXG5leHBvcnQgZnVuY3Rpb24gdXJsV2l0aG91dFF1ZXJ5UGFyYW1zQW5kSGFzaCAodXJsKSB7XG4gIHJldHVybiB1cmwuc3BsaXQoJz8nKVswXS5zcGxpdCgnIycpWzBdO1xufVxuXG4vKipcbiAqIHJldHVybnMgaWYgdHdvIFNlYXJjaFBhcmFtcyBvYmplY3RzIGhhdmUgdGhlIHNhbWUga2V5LHZhbHVlIGVudHJpZXNcbiAqIEBwYXJhbSB7U2VhcmNoUGFyYW1zfSBwYXJhbXMxXG4gKiBAcGFyYW0ge1NlYXJjaFBhcmFtc30gcGFyYW1zMlxuICogQHJldHVybiB7Ym9vbGVhbn0gdHJ1ZSBpZiBwYXJhbXMxIGFuZCBwYXJhbXMyIGhhdmUgdGhlIHNhbWUga2V5LHZhbHVlIGVudHJpZXMsIGZhbHNlIG90aGVyd2lzZVxuICovXG5leHBvcnQgZnVuY3Rpb24gZXF1aXZhbGVudFBhcmFtcyAocGFyYW1zMSwgcGFyYW1zMikge1xuICBjb25zdCBlbnRyaWVzMSA9IEFycmF5LmZyb20ocGFyYW1zMS5lbnRyaWVzKCkpO1xuICBjb25zdCBlbnRyaWVzMiA9IEFycmF5LmZyb20ocGFyYW1zMi5lbnRyaWVzKCkpO1xuXG4gIGlmIChlbnRyaWVzMS5sZW5ndGggIT09IGVudHJpZXMyLmxlbmd0aCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBmb3IgKGNvbnN0IFtrZXksIHZhbF0gb2YgcGFyYW1zMS5lbnRyaWVzKCkpIHtcbiAgICBpZiAodmFsICE9PSBwYXJhbXMyLmdldChrZXkpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBjb3B5IG9mIHRoZSBwcm92aWRlZCB7QGxpbmsgU2VhcmNoUGFyYW1zfSwgd2l0aCB0aGUgc3BlY2lmaWVkXG4gKiBhdHRyaWJ1dGVzIGZpbHRlcmVkIG91dFxuICogQHBhcmFtIHtTZWFyY2hQYXJhbXN9IHBhcmFtcyBUaGUgcGFyYW1ldGVycyB0byByZW1vdmUgZnJvbVxuICogQHBhcmFtIHtzdHJpbmdbXX0gcHJlZml4ZXMgVGhlIHByZWZpeGVzIG9mIHBhcmFtZXRlcnMgdG8gcmVtb3ZlXG4gKiBAcmV0dXJuIHtTZWFyY2hQYXJhbXN9IEEgbmV3IGluc3RhbmNlIG9mIFNlYXJjaFBhcmFtcyB3aXRob3V0IGVudHJpZXMgd2l0aFxuICogICBrZXlzIHRoYXQgc3RhcnQgd2l0aCB0aGUgZ2l2ZW4gcHJlZml4ZXNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZVBhcmFtc1dpdGhQcmVmaXhlcyAocGFyYW1zLCBwcmVmaXhlcykge1xuICBjb25zdCBuZXdQYXJhbXMgPSBuZXcgU2VhcmNoUGFyYW1zKCk7XG4gIGZvciAoY29uc3QgW2tleSwgdmFsXSBvZiBwYXJhbXMuZW50cmllcygpKSB7XG4gICAgY29uc3QgaW5jbHVkZUVudHJ5ID0gcHJlZml4ZXMuZXZlcnkocHJlZml4ID0+ICFrZXkuc3RhcnRzV2l0aChwcmVmaXgpKTtcbiAgICBpZiAoaW5jbHVkZUVudHJ5KSB7XG4gICAgICBuZXdQYXJhbXMuc2V0KGtleSwgdmFsKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG5ld1BhcmFtcztcbn1cblxuLyoqXG4gKiBSZW1vdmVzIHBhcmFtZXRlcnMgZm9yIGZpbHRlcnMsIGZhY2V0cywgc29ydCBvcHRpb25zLCBhbmQgcGFnaW5hdGlvblxuICogZnJvbSB0aGUgcHJvdmlkZWQge0BsaW5rIFNlYXJjaFBhcmFtc30uIFRoaXMgaXMgdXNlZnVsIGZvciBjb25zdHJ1Y3RpbmdcbiAqIGludGVyLWV4cGVyaWVuY2UgYW5zd2VycyBsaW5rcy5cbiAqIEBwYXJhbSB7U2VhcmNoUGFyYW1zfSBwYXJhbXMgVGhlIHBhcmFtZXRlcnMgdG8gcmVtb3ZlIGZyb21cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGdldENvbXBvbmVudE5hbWVzRm9yQ29tcG9uZW50VHlwZXMgR2l2ZW4gc3RyaW5nW11cbiAqICAgY29tcG9uZW50IHR5cGVzLCByZXR1cm5zIHN0cmluZ1tdIGNvbXBvbmVudCBuYW1lcyBmb3IgdGhvc2UgdHlwZXNcbiAqIEByZXR1cm4ge1NlYXJjaFBhcmFtc30gUGFyYW1ldGVycyB0aGF0IGhhdmUgZmlsdGVyZWQgb3V0IHBhcmFtcyB0aGF0XG4gKiAgIHNob3VsZCBub3QgcGVyc2lzdCBhY3Jvc3MgdGhlIGFuc3dlcnMgZXhwZXJpZW5jZVxuICovXG5leHBvcnQgZnVuY3Rpb24gZmlsdGVyUGFyYW1zRm9yRXhwZXJpZW5jZUxpbmsgKFxuICBwYXJhbXMsXG4gIGdldENvbXBvbmVudE5hbWVzRm9yQ29tcG9uZW50VHlwZXNcbikge1xuICBjb25zdCBjb21wb25lbnRUeXBlc1RvRXhjbHVkZSA9IFtcbiAgICBDb21wb25lbnRUeXBlcy5GQUNFVFMsXG4gICAgQ29tcG9uZW50VHlwZXMuRklMVEVSX0JPWCxcbiAgICBDb21wb25lbnRUeXBlcy5GSUxURVJfT1BUSU9OUyxcbiAgICBDb21wb25lbnRUeXBlcy5SQU5HRV9GSUxURVIsXG4gICAgQ29tcG9uZW50VHlwZXMuREFURV9SQU5HRV9GSUxURVIsXG4gICAgQ29tcG9uZW50VHlwZXMuU09SVF9PUFRJT05TLFxuICAgIENvbXBvbmVudFR5cGVzLkdFT0xPQ0FUSU9OX0ZJTFRFUixcbiAgICBDb21wb25lbnRUeXBlcy5GSUxURVJfU0VBUkNIXG4gIF07XG4gIGxldCBwYXJhbXNUb0ZpbHRlciA9IGNvbXBvbmVudFR5cGVzVG9FeGNsdWRlLmZsYXRNYXAodHlwZSA9PiB7XG4gICAgbGV0IHBhcmFtcyA9IGdldENvbXBvbmVudE5hbWVzRm9yQ29tcG9uZW50VHlwZXMoW3R5cGVdKTtcbiAgICBpZiAodHlwZSA9PT0gQ29tcG9uZW50VHlwZXMuR0VPTE9DQVRJT05fRklMVEVSIHx8IHR5cGUgPT09IENvbXBvbmVudFR5cGVzLkZJTFRFUl9TRUFSQ0gpIHtcbiAgICAgIHBhcmFtcyA9IHBhcmFtcy5tYXAocGFyYW0gPT4gYCR7U3RvcmFnZUtleXMuUVVFUll9LiR7cGFyYW19YCk7XG4gICAgfVxuICAgIHJldHVybiBwYXJhbXM7XG4gIH0pO1xuICBwYXJhbXNUb0ZpbHRlciA9IHBhcmFtc1RvRmlsdGVyLmNvbmNhdChbU3RvcmFnZUtleXMuRklMVEVSXSk7XG5cbiAgY29uc3QgbmV3UGFyYW1zID0gcmVtb3ZlUGFyYW1zV2l0aFByZWZpeGVzKHBhcmFtcywgcGFyYW1zVG9GaWx0ZXIpO1xuICBuZXdQYXJhbXMuZGVsZXRlKFN0b3JhZ2VLZXlzLlNFQVJDSF9PRkZTRVQpO1xuICByZXR1cm4gbmV3UGFyYW1zO1xufVxuIiwiLyoqIEBtb2R1bGUgQXBpUmVxdWVzdCAqL1xuXG5pbXBvcnQgSHR0cFJlcXVlc3RlciBmcm9tICcuL2h0dHByZXF1ZXN0ZXInO1xuaW1wb3J0IHsgTElCX1ZFUlNJT04sIFBST0RVQ1RJT04gfSBmcm9tICcuLi9jb25zdGFudHMnO1xuaW1wb3J0IFNlYXJjaFBhcmFtcyBmcm9tICcuLi8uLi91aS9kb20vc2VhcmNocGFyYW1zJzsgLy8gVE9ETyBpZGVhbGx5IHRoaXMgd291bGQgYmUgcGFzc2VkIGluIGFzIGEgcGFyYW1cbmltcG9ydCB7IEFuc3dlcnNCYXNpY0Vycm9yIH0gZnJvbSAnLi4vZXJyb3JzL2Vycm9ycyc7XG5pbXBvcnQgU3RvcmFnZUtleXMgZnJvbSAnLi4vc3RvcmFnZS9zdG9yYWdla2V5cyc7XG5pbXBvcnQgeyBnZXRMaXZlQXBpVXJsIH0gZnJvbSAnLi4vdXRpbHMvdXJsdXRpbHMnO1xuXG4vKipcbiAqIEFwaVJlcXVlc3QgaXMgdGhlIGJhc2UgY2xhc3MgZm9yIGFsbCBBUEkgcmVxdWVzdHMuXG4gKiBJdCBkZWZpbmVzIGFsbCBvZiB0aGUgY29yZSBwcm9wZXJ0aWVzIHJlcXVpcmVkIHRvIG1ha2UgYSByZXF1ZXN0XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFwaVJlcXVlc3Qge1xuICAvLyBUT0RPICh0bWV5ZXIpOiBDcmVhdGUgYW4gQXBpU2VydmljZSBpbnRlcmZhY2UgYW5kIHBhc3MgYW4gaW1wbGVtZW50YXRpb24gdG8gdGhlIGN1cnJlbnRcbiAgLy8gY29uc3VtZXJzIG9mIEFwaVJlcXVlc3QgYXMgYSBkZXBlbmRlbmN5LlxuICBjb25zdHJ1Y3RvciAob3B0cyA9IHt9LCBnbG9iYWxTdG9yYWdlKSB7XG4gICAgLyoqXG4gICAgICogQW4gYWJzdHJhY3Rpb24gdXNlZCBmb3IgbWFraW5nIG5ldHdvcmsgcmVxdWVzdCBhbmQgaGFuZGxpbmcgZXJyb3JzXG4gICAgICogQHR5cGUge0h0dHBSZXF1ZXN0ZXJ9XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLl9yZXF1ZXN0ZXIgPSBuZXcgSHR0cFJlcXVlc3RlcigpO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGVudmlyb25tZW50IHRoZSByZXF1ZXN0IHNob3VsZCBiZSBtYWRlIHRvXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuX2Vudmlyb25tZW50ID0gb3B0cy5lbnZpcm9ubWVudCB8fCBQUk9EVUNUSU9OO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2VVcmwgdG8gdXNlIGZvciBtYWtpbmcgYSByZXF1ZXN0XG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuX2Jhc2VVcmwgPSBvcHRzLmJhc2VVcmwgfHwgZ2V0TGl2ZUFwaVVybCh0aGlzLl9lbnZpcm9ubWVudCk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgZW5kcG9pbnQgdG8gdXNlIGluIHRoZSB1cmwgKGFwcGVuZGVkIHRvIHRoZSB7YmFzZVVybH0pXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuX2VuZHBvaW50ID0gb3B0cy5lbmRwb2ludCB8fCBudWxsO1xuXG4gICAgLyoqXG4gICAgICogVGhlIEFQSSBLZXkgdG8gdXNlIGZvciB0aGUgcmVxdWVzdFxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLl9hcGlLZXkgPSBvcHRzLmFwaUtleSB8fCBudWxsO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHZlcnNpb24gb2YgdGhlIEFQSSB0byBtYWtlIGEgcmVxdWVzdCB0b1xuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLl92ZXJzaW9uID0gb3B0cy52ZXJzaW9uIHx8IDIwMTkwMTAxO1xuXG4gICAgLyoqXG4gICAgICogQWRkaXRpb25hbCBkYXRhIHBhcmFtcyB0aGF0IGFyZSBzZW50IGFsb25nIHdpdGggdGhlIHJlcXVlc3RcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5fcGFyYW1zID0gb3B0cy5wYXJhbXMgfHwge307XG5cbiAgICBpZiAoIWdsb2JhbFN0b3JhZ2UpIHtcbiAgICAgIHRocm93IG5ldyBBbnN3ZXJzQmFzaWNFcnJvcignTXVzdCBpbmNsdWRlIGdsb2JhbCBzdG9yYWdlJywgJ0FwaVJlcXVlc3QnKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHR5cGUge0dsb2JhbFN0b3JhZ2V9XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLl9nbG9iYWxTdG9yYWdlID0gZ2xvYmFsU3RvcmFnZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBnZXQgY3JlYXRlcyBhIG5ldyBgR0VUYCByZXF1ZXN0IHRvIHRoZSBzZXJ2ZXIgdXNpbmcgdGhlIGNvbmZpZ3VyYXRpb24gb2YgdGhlIHJlcXVlc3QgY2xhc3NcbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgQW55IGNvbmZpZ3VyYXRpb24gb3B0aW9ucyB0byB1c2UgZm9yIHRoZSBHRVQgcmVxdWVzdC5cbiAgICogQHJldHVybnMge1Byb21pc2U8UmVzcG9uc2U+fVxuICAgKi9cbiAgZ2V0IChvcHRzKSB7XG4gICAgcmV0dXJuIHRoaXMuX3JlcXVlc3Rlci5nZXQoXG4gICAgICB0aGlzLl9iYXNlVXJsICsgdGhpcy5fZW5kcG9pbnQsXG4gICAgICBPYmplY3QuYXNzaWduKHt9LCB0aGlzLmJhc2VQYXJhbXMoKSwgdGhpcy5zYW5pdGl6ZVBhcmFtcyh0aGlzLl9wYXJhbXMpKSxcbiAgICAgIG9wdHNcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPFJlc3BvbnNlPn1cbiAgICovXG4gIHBvc3QgKG9wdHMpIHtcbiAgICByZXR1cm4gdGhpcy5fcmVxdWVzdGVyLnBvc3QoXG4gICAgICB0aGlzLl9iYXNlVXJsICsgdGhpcy5fZW5kcG9pbnQsXG4gICAgICB0aGlzLmJhc2VQYXJhbXMoKSAvKiB1cmxQYXJhbXMgKi8sXG4gICAgICB0aGlzLnNhbml0aXplUGFyYW1zKHRoaXMuX3BhcmFtcykgLyoganNvbkJvZHkgKi8sXG4gICAgICBvcHRzIC8qIHJlcXVlc3RDb25maWcgKi8pO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm5zIHtPYmplY3R9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBiYXNlUGFyYW1zICgpIHtcbiAgICBsZXQgYmFzZVBhcmFtcyA9IHtcbiAgICAgICd2JzogdGhpcy5fdmVyc2lvbixcbiAgICAgICdhcGlfa2V5JzogdGhpcy5fYXBpS2V5LFxuICAgICAgJ2pzTGliVmVyc2lvbic6IExJQl9WRVJTSU9OLFxuICAgICAgJ3Nlc3Npb25UcmFja2luZ0VuYWJsZWQnOiB0aGlzLl9nbG9iYWxTdG9yYWdlLmdldFN0YXRlKFN0b3JhZ2VLZXlzLlNFU1NJT05TX09QVF9JTilcbiAgICB9O1xuXG4gICAgY29uc3QgdXJsUGFyYW1zID0gbmV3IFNlYXJjaFBhcmFtcyh3aW5kb3cubG9jYXRpb24uc2VhcmNoLnN1YnN0cmluZygxKSk7XG4gICAgaWYgKHVybFBhcmFtcy5oYXMoJ2JldGEnKSkge1xuICAgICAgYmFzZVBhcmFtc1snYmV0YSddID0gdXJsUGFyYW1zLmdldCgnYmV0YScpO1xuICAgIH1cblxuICAgIHJldHVybiBiYXNlUGFyYW1zO1xuICB9XG5cbiAgc2FuaXRpemVQYXJhbXMgKHBhcmFtcyA9IHt9KSB7XG4gICAgLy8gUmVtb3ZlIGFueSBwYXJhbWF0ZXJzIHdob3MgdmFsdWUgaXMgYHVuZGVmaW5lZGAuXG4gICAgLy9cbiAgICAvLyBOT1RFKGJpbGx5KSBQcm9iYWJseSBiZXR0ZXIgdG8gYmUgZXhwbGljaXQgYWJvdXQgaG93IHRvIGhhbmRsZSB0aGlzIGF0IHRoZSByZXF1ZXN0IGJ1aWxkaW5nIGxldmVsLFxuICAgIC8vIGJ1dCBJIGNhbid0IHNlZSBhbnkgY2FzZXMgd2hlcmUgd2UnZCBldmVyIHdhbnQgdG8gc2VuZCAndW5kZWZpbmVkJyBhcyBhIHZhbHVlIHRvIHRoZSBzZXJ2ZXIuXG4gICAgLy8gU28gaXQncyBwcm9iYWJseSBmaW5lIHRvICdjbGVhbicgdGhlIHBhcmFtcyBvYmplY3QgaGVyZVxuICAgIE9iamVjdC5rZXlzKHBhcmFtcykuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgaWYgKHBhcmFtc1trZXldID09PSB1bmRlZmluZWQgfHwgcGFyYW1zW2tleV0gPT09IG51bGwpIHtcbiAgICAgICAgZGVsZXRlIHBhcmFtc1trZXldO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHBhcmFtcztcbiAgfVxufVxuIiwiLyoqIEBtb2R1bGUgU2VhcmNoQXBpICovXG5cbi8qKiBAdHlwZWRlZiB7aW1wb3J0KCcuL3NlYXJjaHNlcnZpY2UnKS5kZWZhdWx0fSBTZWFyY2hTZXJ2aWNlICovXG5cbmltcG9ydCBBcGlSZXF1ZXN0IGZyb20gJy4uL2h0dHAvYXBpcmVxdWVzdCc7XG5pbXBvcnQgeyBBbnN3ZXJzQmFzaWNFcnJvciwgQW5zd2Vyc0NvcmVFcnJvciB9IGZyb20gJy4uL2Vycm9ycy9lcnJvcnMnO1xuXG4vKipcbiAqIFNlYXJjaEFwaSBpcyB0aGUgQVBJIGZvciBkb2luZyB2YXJpb3VzIHR5cGVzIG9mIHNlYXJjaFxuICogb3ZlciB0aGUgbmV0d29yayAoZS5nLiB2ZXJ0aWNhbCBvciB1bml2ZXJzYWwpXG4gKlxuICogQGltcGxlbWVudHMge1NlYXJjaFNlcnZpY2V9XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNlYXJjaEFwaSB7XG4gIGNvbnN0cnVjdG9yIChjb25maWcgPSB7fSkge1xuICAgIC8qKlxuICAgICAqIEEgbG9jYWwgcmVmZXJlbmNlIHRvIHRoZSBBUEkgS2V5IHRvIHVzZSBmb3IgdGhlIHJlcXVlc3RcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgaWYgKCFjb25maWcuYXBpS2V5KSB7XG4gICAgICB0aHJvdyBuZXcgQW5zd2Vyc0Jhc2ljRXJyb3IoJ0FwaSBLZXkgaXMgcmVxdWlyZWQnLCAnU2VhcmNoJyk7XG4gICAgfVxuICAgIHRoaXMuX2FwaUtleSA9IGNvbmZpZy5hcGlLZXk7XG5cbiAgICAvKipcbiAgICAgKiBBIGxvY2FsIHJlZmVyZW5jZSB0byB0aGUgQW5zd2VycyBLZXkgdG8gdXNlIGZvciB0aGUgcmVxdWVzdFxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBpZiAoIWNvbmZpZy5leHBlcmllbmNlS2V5KSB7XG4gICAgICB0aHJvdyBuZXcgQW5zd2Vyc0Jhc2ljRXJyb3IoJ0Fuc3dlcnMgS2V5IGlzIHJlcXVpcmVkJywgJ1NlYXJjaCcpO1xuICAgIH1cbiAgICB0aGlzLl9leHBlcmllbmNlS2V5ID0gY29uZmlnLmV4cGVyaWVuY2VLZXk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYW5zd2VycyBjb25maWcgdmVyc2lvbiB0byB1c2UgZm9yIGFsbCByZXF1ZXN0c1xuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLl9leHBlcmllbmNlVmVyc2lvbiA9IGNvbmZpZy5leHBlcmllbmNlVmVyc2lvbjtcblxuICAgIC8qKlxuICAgICAqIFRoZSB2ZXJzaW9uIG9mIHRoZSBBUEkgdG8gbWFrZSBhIHJlcXVlc3QgdG9cbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5fdmVyc2lvbiA9IGNvbmZpZy52ZXJzaW9uIHx8IDIwMTkwMTAxIHx8IDIwMTkwMzAxO1xuXG4gICAgLyoqXG4gICAgICogQSBsb2NhbCByZWZlcmVuY2UgdG8gdGhlIGxvY2FsZSB0byB1c2UgZm9yIHRoZSByZXF1ZXN0XG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIGlmICghY29uZmlnLmxvY2FsZSkge1xuICAgICAgdGhyb3cgbmV3IEFuc3dlcnNCYXNpY0Vycm9yKCdMb2NhbGUgaXMgcmVxdWlyZWQnLCAnU2VhcmNoJyk7XG4gICAgfVxuICAgIHRoaXMuX2xvY2FsZSA9IGNvbmZpZy5sb2NhbGU7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgZW52aXJvbm1lbnQgb2YgdGhlIEFuc3dlcnMgZXhwZXJpZW5jZVxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLl9lbnZpcm9ubWVudCA9IGNvbmZpZy5lbnZpcm9ubWVudDtcbiAgfVxuXG4gIC8qKiBAaW5oZXJpdGRvYyAqL1xuICB2ZXJ0aWNhbFNlYXJjaCAodmVydGljYWxLZXksIHsgaW5wdXQsIGZpbHRlciwgZmFjZXRGaWx0ZXIsIGxpbWl0LCBvZmZzZXQsIGlkLCBnZW9sb2NhdGlvbiwgaXNEeW5hbWljRmlsdGVyc0VuYWJsZWQsIHNraXBTcGVsbENoZWNrLCBxdWVyeVRyaWdnZXIsIHNlc3Npb25UcmFja2luZ0VuYWJsZWQsIHNvcnRCeXMsIGxvY2F0aW9uUmFkaXVzLCBjb250ZXh0LCByZWZlcnJlclBhZ2VVcmwgfSkge1xuICAgIGlmIChsaW1pdCA+IDUwKSB7XG4gICAgICB0aHJvdyBuZXcgQW5zd2Vyc0NvcmVFcnJvcignUHJvdmlkZWQgc2VhcmNoIGxpbWl0IHVuc3VwcG9ydGVkJywgJ1NlYXJjaEFwaScpO1xuICAgIH1cbiAgICBjb25zdCByZXF1ZXN0Q29uZmlnID0ge1xuICAgICAgZW5kcG9pbnQ6ICcvdjIvYWNjb3VudHMvbWUvYW5zd2Vycy92ZXJ0aWNhbC9xdWVyeScsXG4gICAgICBhcGlLZXk6IHRoaXMuX2FwaUtleSxcbiAgICAgIHZlcnNpb246IHRoaXMuX3ZlcnNpb24sXG4gICAgICBlbnZpcm9ubWVudDogdGhpcy5fZW52aXJvbm1lbnQsXG4gICAgICBwYXJhbXM6IHtcbiAgICAgICAgJ2lucHV0JzogaW5wdXQsXG4gICAgICAgICdleHBlcmllbmNlS2V5JzogdGhpcy5fZXhwZXJpZW5jZUtleSxcbiAgICAgICAgJ3ZlcnNpb24nOiB0aGlzLl9leHBlcmllbmNlVmVyc2lvbixcbiAgICAgICAgJ2ZpbHRlcnMnOiBmaWx0ZXIsXG4gICAgICAgICdmYWNldEZpbHRlcnMnOiBmYWNldEZpbHRlcixcbiAgICAgICAgJ3ZlcnRpY2FsS2V5JzogdmVydGljYWxLZXksXG4gICAgICAgICdsaW1pdCc6IGxpbWl0LFxuICAgICAgICAnb2Zmc2V0Jzogb2Zmc2V0LFxuICAgICAgICAnbG9jYXRpb24nOiBnZW9sb2NhdGlvbiA/IGAke2dlb2xvY2F0aW9uLmxhdH0sJHtnZW9sb2NhdGlvbi5sbmd9YCA6IG51bGwsXG4gICAgICAgICdxdWVyeUlkJzogaWQsXG4gICAgICAgICdyZXRyaWV2ZUZhY2V0cyc6IGlzRHluYW1pY0ZpbHRlcnNFbmFibGVkLFxuICAgICAgICAnbG9jYWxlJzogdGhpcy5fbG9jYWxlLFxuICAgICAgICAnc2tpcFNwZWxsQ2hlY2snOiBza2lwU3BlbGxDaGVjayxcbiAgICAgICAgJ3F1ZXJ5VHJpZ2dlcic6IHF1ZXJ5VHJpZ2dlcixcbiAgICAgICAgJ3Nlc3Npb25UcmFja2luZ0VuYWJsZWQnOiBzZXNzaW9uVHJhY2tpbmdFbmFibGVkLFxuICAgICAgICAnc29ydEJ5cyc6IHNvcnRCeXMsXG4gICAgICAgICdsb2NhdGlvblJhZGl1cyc6IGxvY2F0aW9uUmFkaXVzLFxuICAgICAgICAnY29udGV4dCc6IGNvbnRleHQsXG4gICAgICAgICdyZWZlcnJlclBhZ2VVcmwnOiByZWZlcnJlclBhZ2VVcmxcbiAgICAgIH1cbiAgICB9O1xuICAgIGxldCByZXF1ZXN0ID0gbmV3IEFwaVJlcXVlc3QocmVxdWVzdENvbmZpZywgeyBnZXRTdGF0ZTogKCkgPT4gc2Vzc2lvblRyYWNraW5nRW5hYmxlZCB9KTtcblxuICAgIHJldHVybiByZXF1ZXN0LmdldCgpXG4gICAgICAudGhlbihyZXNwb25zZSA9PiByZXNwb25zZS5qc29uKCkpO1xuICB9XG5cbiAgLyoqIEBpbmhlcml0ZG9jICovXG4gIHVuaXZlcnNhbFNlYXJjaCAocXVlcnlTdHJpbmcsIHBhcmFtcykge1xuICAgIGNvbnN0IHJlcXVlc3RDb25maWcgPSB7XG4gICAgICBlbmRwb2ludDogJy92Mi9hY2NvdW50cy9tZS9hbnN3ZXJzL3F1ZXJ5JyxcbiAgICAgIGFwaUtleTogdGhpcy5fYXBpS2V5LFxuICAgICAgdmVyc2lvbjogdGhpcy5fdmVyc2lvbixcbiAgICAgIGVudmlyb25tZW50OiB0aGlzLl9lbnZpcm9ubWVudCxcbiAgICAgIHBhcmFtczoge1xuICAgICAgICAnaW5wdXQnOiBxdWVyeVN0cmluZyxcbiAgICAgICAgJ2V4cGVyaWVuY2VLZXknOiB0aGlzLl9leHBlcmllbmNlS2V5LFxuICAgICAgICAnbG9jYXRpb24nOiBwYXJhbXMuZ2VvbG9jYXRpb24gPyBgJHtwYXJhbXMuZ2VvbG9jYXRpb24ubGF0fSwke3BhcmFtcy5nZW9sb2NhdGlvbi5sbmd9YCA6IG51bGwsXG4gICAgICAgICd2ZXJzaW9uJzogdGhpcy5fZXhwZXJpZW5jZVZlcnNpb24sXG4gICAgICAgICdsb2NhbGUnOiB0aGlzLl9sb2NhbGUsXG4gICAgICAgICdza2lwU3BlbGxDaGVjayc6IHBhcmFtcy5za2lwU3BlbGxDaGVjayxcbiAgICAgICAgJ3F1ZXJ5VHJpZ2dlcic6IHBhcmFtcy5xdWVyeVRyaWdnZXIsXG4gICAgICAgICdjb250ZXh0JzogcGFyYW1zLmNvbnRleHQsXG4gICAgICAgICdyZWZlcnJlclBhZ2VVcmwnOiBwYXJhbXMucmVmZXJyZXJQYWdlVXJsXG4gICAgICB9XG4gICAgfTtcbiAgICBsZXQgcmVxdWVzdCA9IG5ldyBBcGlSZXF1ZXN0KHJlcXVlc3RDb25maWcsIHsgZ2V0U3RhdGU6ICgpID0+IHBhcmFtcy5zZXNzaW9uVHJhY2tpbmdFbmFibGVkIH0pO1xuXG4gICAgcmV0dXJuIHJlcXVlc3QuZ2V0KClcbiAgICAgIC50aGVuKHJlc3BvbnNlID0+IHJlc3BvbnNlLmpzb24oKSk7XG4gIH1cbn1cbiIsIi8qKiBAbW9kdWxlIEFuYWx5dGljc1JlcG9ydGVyICovXG5cbmltcG9ydCBBbmFseXRpY3NFdmVudCBmcm9tICcuL2FuYWx5dGljc2V2ZW50JztcbmltcG9ydCB7IEFuc3dlcnNBbmFseXRpY3NFcnJvciB9IGZyb20gJy4uL2Vycm9ycy9lcnJvcnMnO1xuaW1wb3J0IHsgUFJPRFVDVElPTiB9IGZyb20gJy4uL2NvbnN0YW50cyc7XG5pbXBvcnQgSHR0cFJlcXVlc3RlciBmcm9tICcuLi9odHRwL2h0dHByZXF1ZXN0ZXInO1xuaW1wb3J0IHsgZ2V0QW5hbHl0aWNzVXJsIH0gZnJvbSAnLi4vdXRpbHMvdXJsdXRpbHMnO1xuXG4vKiogQHR5cGVkZWYge2ltcG9ydCgnLi4vc2VydmljZXMvYW5hbHl0aWNzcmVwb3J0ZXJzZXJ2aWNlJykuZGVmYXVsdH0gQW5hbHl0aWNzUmVwb3J0ZXJTZXJ2aWNlICovXG5cbi8qKlxuICogQ2xhc3MgZm9yIHJlcG9ydGluZyBhbmFseXRpY3MgZXZlbnRzIHRvIHRoZSBzZXJ2ZXIgdmlhIEhUVFBcbiAqXG4gKiBAaW1wbGVtZW50cyB7QW5hbHl0aWNzUmVwb3J0ZXJTZXJ2aWNlfVxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBbmFseXRpY3NSZXBvcnRlciB7XG4gIGNvbnN0cnVjdG9yIChcbiAgICBleHBlcmllbmNlS2V5LFxuICAgIGV4cGVyaWVuY2VWZXJzaW9uLFxuICAgIGJ1c2luZXNzSWQsXG4gICAgZ2xvYmFsT3B0aW9ucyA9IHt9LFxuICAgIGVudmlyb25tZW50ID0gUFJPRFVDVElPTikge1xuICAgIC8qKlxuICAgICAqIFRoZSBpbnRlcm5hbCBidXNpbmVzcyBpZGVudGlmaWVyIHVzZWQgZm9yIHJlcG9ydGluZ1xuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy5fYnVzaW5lc3NJZCA9IGJ1c2luZXNzSWQ7XG5cbiAgICAvKipcbiAgICAgKiBPcHRpb25zIHRvIGluY2x1ZGUgd2l0aCBldmVyeSBhbmFseXRpYyBldmVudCByZXBvcnRlZCB0byB0aGUgc2VydmVyXG4gICAgICogQHR5cGUge29iamVjdH1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuX2dsb2JhbE9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCBnbG9iYWxPcHRpb25zLCB7IGV4cGVyaWVuY2VLZXkgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgZW52aXJvbm1lbnQgb2YgdGhlIEFuc3dlcnMgZXhwZXJpZW5jZVxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLl9lbnZpcm9ubWVudCA9IGVudmlyb25tZW50O1xuXG4gICAgLyoqXG4gICAgICogQmFzZSBVUkwgZm9yIHRoZSBhbmFseXRpY3MgQVBJXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuX2Jhc2VVcmwgPSBnZXRBbmFseXRpY3NVcmwodGhpcy5fZW52aXJvbm1lbnQpO1xuXG4gICAgLyoqXG4gICAgICogQm9vbGVhbiBpbmRpY2F0aW5nIGlmIG9wdGVkIGluIG9yIG91dCBvZiBjb252ZXJzaW9uIHRyYWNraW5nXG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLl9jb252ZXJzaW9uVHJhY2tpbmdFbmFibGVkID0gZmFsc2U7XG5cbiAgICBpZiAoZXhwZXJpZW5jZVZlcnNpb24pIHtcbiAgICAgIHRoaXMuX2dsb2JhbE9wdGlvbnMuZXhwZXJpZW5jZVZlcnNpb24gPSBleHBlcmllbmNlVmVyc2lvbjtcbiAgICB9XG4gIH1cblxuICBnZXRRdWVyeUlkICgpIHtcbiAgICByZXR1cm4gdGhpcy5fZ2xvYmFsT3B0aW9ucy5xdWVyeUlkO1xuICB9XG5cbiAgc2V0UXVlcnlJZCAocXVlcnlJZCkge1xuICAgIHRoaXMuX2dsb2JhbE9wdGlvbnMucXVlcnlJZCA9IHF1ZXJ5SWQ7XG4gIH1cblxuICAvKiogQGluaGVyaXRkb2MgKi9cbiAgcmVwb3J0IChldmVudCkge1xuICAgIGxldCBjb29raWVEYXRhID0ge307XG4gICAgaWYgKHRoaXMuX2NvbnZlcnNpb25UcmFja2luZ0VuYWJsZWQgJiYgdHlwZW9mIHl0YWcgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHl0YWcoJ29wdGluJywgdHJ1ZSk7XG4gICAgICBjb29raWVEYXRhID0geXRhZygneWZwYycsIG51bGwpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5fY29udmVyc2lvblRyYWNraW5nRW5hYmxlZCkge1xuICAgICAgdGhyb3cgbmV3IEFuc3dlcnNBbmFseXRpY3NFcnJvcignVHJpZWQgdG8gZW5hYmxlIGNvbnZlcnNpb24gdHJhY2tpbmcgd2l0aG91dCBpbmNsdWRpbmcgeXRhZycpO1xuICAgIH1cblxuICAgIGlmICghKGV2ZW50IGluc3RhbmNlb2YgQW5hbHl0aWNzRXZlbnQpKSB7XG4gICAgICB0aHJvdyBuZXcgQW5zd2Vyc0FuYWx5dGljc0Vycm9yKCdUcmllZCB0byBzZW5kIGludmFsaWQgYW5hbHl0aWNzIGV2ZW50JywgZXZlbnQpO1xuICAgIH1cblxuICAgIGV2ZW50LmFkZE9wdGlvbnModGhpcy5fZ2xvYmFsT3B0aW9ucyk7XG5cbiAgICByZXR1cm4gbmV3IEh0dHBSZXF1ZXN0ZXIoKS5iZWFjb24oXG4gICAgICBgJHt0aGlzLl9iYXNlVXJsfS9yZWFsdGltZWFuYWx5dGljcy9kYXRhL2Fuc3dlcnMvJHt0aGlzLl9idXNpbmVzc0lkfWAsXG4gICAgICB7IGRhdGE6IGV2ZW50LnRvQXBpRXZlbnQoKSwgLi4uY29va2llRGF0YSB9XG4gICAgKTtcbiAgfVxuXG4gIC8qKiBAaW5oZXJpdGRvYyAqL1xuICBzZXRDb252ZXJzaW9uVHJhY2tpbmdFbmFibGVkIChpc0VuYWJsZWQpIHtcbiAgICB0aGlzLl9jb252ZXJzaW9uVHJhY2tpbmdFbmFibGVkID0gaXNFbmFibGVkO1xuICAgIHRoaXMuX2Jhc2VVcmwgPSBnZXRBbmFseXRpY3NVcmwodGhpcy5fZW52aXJvbm1lbnQsIGlzRW5hYmxlZCk7XG4gIH1cbn1cbiIsIi8qKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi9zZXJ2aWNlcy9hbmFseXRpY3NyZXBvcnRlcnNlcnZpY2UnKS5kZWZhdWx0fSBBbmFseXRpY3NSZXBvcnRlclNlcnZpY2UgKi9cblxuLyoqXG4gKiBAaW1wbGVtZW50cyB7QW5hbHl0aWNzUmVwb3J0ZXJTZXJ2aWNlfVxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBOb29wQW5hbHl0aWNzUmVwb3J0ZXIge1xuICAvKiogQGluaGVyaXRkb2MgKi9cbiAgcmVwb3J0IChldmVudCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLyoqIEBpbmhlcml0ZG9jICovXG4gIHNldENvbnZlcnNpb25UcmFja2luZ0VuYWJsZWQgKGlzRW5hYmxlZCkge31cbn1cbiIsIi8qKiBAbW9kdWxlIE1vZHVsZURhdGEgKi9cblxuaW1wb3J0IEV2ZW50RW1pdHRlciBmcm9tICcuLi9ldmVudGVtaXR0ZXIvZXZlbnRlbWl0dGVyJztcblxuLyoqXG4gKiBNb2R1bGVEYXRhIGlzIHVzZWQgYXMgYSBnZW5lcmljIG1vZGVsIGZvciBTdG9yYWdlLlxuICogVHlwaWNhbGx5IGFuIGluc3RhbmNlIG9mIE1vZHVsZURhdGEgcG93ZXJzIGEgc2luZ2xlIGNvbXBvbmVudC5cblxuICogQSBkYXRhIG1vZGVsIHRoYXQgZXhwb3NlcyBhbiBldmVudCBlbWl0dGVyIGludGVyZmFjZS5cbiAqIEBleHRlbmRzIEV2ZW50RW1pdHRlclxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNb2R1bGVEYXRhIGV4dGVuZHMgRXZlbnRFbWl0dGVyIHtcbiAgY29uc3RydWN0b3IgKGlkLCBkYXRhID0ge30pIHtcbiAgICBzdXBlcigpO1xuXG4gICAgdGhpcy5faWQgPSBpZDtcbiAgICB0aGlzLl9oaXN0b3J5ID0gW107XG4gICAgdGhpcy5fZGF0YSA9IGRhdGE7XG4gICAgdGhpcy5zZXQoZGF0YSk7XG4gIH1cblxuICAvKipcbiAgICogcmVwbGFjZXMgdGhlIGN1cnJlbnRseSBoZWxkIGRhdGEgd2l0aCB0aGUgZ2l2ZW4gZGF0YVxuICAgKiBAcGFyYW0geyp9IGRhdGEgdGhlIGRhdGEgdG8gcmVwbGFjZSB0aGUgY3VycmVudCBkYXRhXG4gICAqL1xuICBzZXQgKGRhdGEpIHtcbiAgICB0aGlzLmNhcHR1cmVQcmV2aW91cygpO1xuXG4gICAgaWYgKHR5cGVvZiBkYXRhICE9PSAnb2JqZWN0JyB8fCBBcnJheS5pc0FycmF5KGRhdGEpIHx8IE9iamVjdC5rZXlzKGRhdGEpLmxlbmd0aCAhPT0gT2JqZWN0LmtleXModGhpcy5fZGF0YSkubGVuZ3RoKSB7XG4gICAgICB0aGlzLl9kYXRhID0gZGF0YTtcbiAgICAgIHRoaXMuZW1pdCgndXBkYXRlJywgdGhpcy5fZGF0YSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gY2hlY2sgZm9yIHNoYWxsb3cgZXF1YWxpdHlcbiAgICBmb3IgKGNvbnN0IGtleSBvZiBPYmplY3Qua2V5cyhkYXRhKSkge1xuICAgICAgaWYgKHRoaXMuX2RhdGFba2V5XSAhPT0gZGF0YVtrZXldKSB7XG4gICAgICAgIHRoaXMuX2RhdGEgPSBkYXRhO1xuICAgICAgICB0aGlzLmVtaXQoJ3VwZGF0ZScsIHRoaXMuX2RhdGEpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgY2FwdHVyZVByZXZpb3VzICgpIHtcbiAgICBpZiAodGhpcy5faGlzdG9yeSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLl9oaXN0b3J5ID0gW107XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2hpc3RvcnkubGVuZ3RoICsgMSA+IDUpIHtcbiAgICAgIHRoaXMuX2hpc3Rvcnkuc2hpZnQoKTtcbiAgICB9XG5cbiAgICAvLyBJZiBkYXRhIGlzIGV2ZXIgdW5kZWZpbmVkLCB3ZSBkZWZhdWx0IHRvIGVtcHR5IG9iamVjdFxuICAgIHRoaXMuX2hpc3RvcnkucHVzaChKU09OLnN0cmluZ2lmeSh0aGlzLl9kYXRhIHx8IHt9KSk7XG4gIH1cblxuICB1bmRvICgpIHtcbiAgICBsZXQgcHJldmlvdXMgPSB7fTtcbiAgICBpZiAodGhpcy5fcHJldmlvdXMubGVuZ3RoID4gMCkge1xuICAgICAgcHJldmlvdXMgPSBKU09OLnBhcnNlKHRoaXMuX3ByZXZpb3VzLnBvcCgpKTtcbiAgICB9XG5cbiAgICB0aGlzLl9kYXRhLnNldChwcmV2aW91cyk7XG4gIH1cblxuICByYXcgKCkge1xuICAgIHJldHVybiB0aGlzLl9kYXRhO1xuICB9XG59XG4iLCIvKiogQG1vZHVsZSBHbG9iYWxTdG9yYWdlICovXG5cbmltcG9ydCBNb2R1bGVEYXRhIGZyb20gJy4vbW9kdWxlZGF0YSc7XG5pbXBvcnQgeyBBbnN3ZXJzU3RvcmFnZUVycm9yIH0gZnJvbSAnLi4vZXJyb3JzL2Vycm9ycyc7XG5pbXBvcnQgU3RvcmFnZUtleXMgZnJvbSAnLi9zdG9yYWdla2V5cyc7XG5cbi8qKlxuICogU3RvcmFnZSBpcyBhIGNvbnRhaW5lciBhcm91bmQgYXBwbGljYXRpb24gc3RhdGUuXG4gKiBJdCBleHBvc2VzIGFuIGludGVyZmFjZSBmb3IgQ1JVRCBvcGVyYXRpb25zIGFzIHdlbGwgYXMgbGlzdGVuaW5nXG4gKiBmb3Igc3RhdGVmdWwgY2hhbmdlcy5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgR2xvYmFsU3RvcmFnZSB7XG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICB0aGlzLl9tb2R1bGVEYXRhQ29udGFpbmVyID0ge307XG4gICAgdGhpcy5fZnV0dXJlTGlzdGVuZXJzID0ge307XG4gIH1cblxuICAvKipcbiAgICogU2V0IHRoZSBkYXRhIGluIHN0b3JhZ2Ugd2l0aCB0aGUgZ2l2ZW4ga2V5IHRvIHRoZSBwcm92aWRlZCBkYXRhLFxuICAgKiBjb21wbGV0ZWx5IG92ZXJ3cml0aW5nIGFueSBleGlzdGluZyBkYXRhLlxuICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IHRoZSBzdG9yYWdlIGtleSB0byBzZXRcbiAgICogQHBhcmFtIHsqfSBkYXRhIHRoZSBkYXRhIHRvIHNldFxuICAgKi9cbiAgc2V0IChrZXksIGRhdGEpIHtcbiAgICB0aGlzLl9pbml0RGF0YUNvbnRhaW5lcihrZXksIGRhdGEpO1xuICAgIHRoaXMuX21vZHVsZURhdGFDb250YWluZXJba2V5XS5zZXQoZGF0YSk7XG4gIH1cblxuICAvKipcbiAgICogQWRkIGFsbCBrZXkvdmFsdWUgcGFpcnMgaW4gdGhlIHByb3ZpZGVkIG1hcCB0byB0aGUgc3RvcmFnZVxuICAgKiBAcGFyYW0geyp9IGRhdGEgVGhlIGtleS92YWx1ZSBwYWlycyB0byBzZXQgaW4gdGhlIHN0b3JhZ2VcbiAgICovXG4gIHNldEFsbCAoZGF0YSkge1xuICAgIGZvciAoY29uc3QgW2tleSwgdmFsXSBvZiBPYmplY3QuZW50cmllcyhkYXRhKSkge1xuICAgICAgaWYgKGtleSA9PT0gU3RvcmFnZUtleXMuUVVFUlkpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICB0aGlzLnNldChrZXksIHZhbCk7XG4gICAgfVxuXG4gICAgLy8gVXBkYXRlIHF1ZXJ5IGxhc3Qgc2luY2UgaXQgdHJpZ2dlcnMgYSBzZWFyY2hcbiAgICAvLyBUT0RPOiBtb3ZlIGxpc3RlbmVycyB1cCBzbyBhbGwgb2Ygc3RvcmFnZSBjYW4gYmUgdXBkYXRlZCBhdCB0aGUgc2FtZSB0aW1lXG4gICAgaWYgKGRhdGFbU3RvcmFnZUtleXMuUVVFUlldKSB7XG4gICAgICB0aGlzLnNldChTdG9yYWdlS2V5cy5RVUVSWSwgZGF0YVtTdG9yYWdlS2V5cy5RVUVSWV0pO1xuICAgIH1cbiAgfVxuXG4gIF9pbml0RGF0YUNvbnRhaW5lciAoa2V5LCBkYXRhKSB7XG4gICAgaWYgKGtleSA9PT0gdW5kZWZpbmVkIHx8IGtleSA9PT0gbnVsbCB8fCB0eXBlb2Yga2V5ICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IEFuc3dlcnNTdG9yYWdlRXJyb3IoJ0ludmFsaWQgc3RvcmFnZSBrZXkgcHJvdmlkZWQnLCBrZXksIGRhdGEpO1xuICAgIH1cbiAgICBpZiAoZGF0YSA9PT0gdW5kZWZpbmVkIHx8IGRhdGEgPT09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBBbnN3ZXJzU3RvcmFnZUVycm9yKCdObyBkYXRhIHByb3ZpZGVkJywga2V5LCBkYXRhKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fbW9kdWxlRGF0YUNvbnRhaW5lcltrZXldID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMuX21vZHVsZURhdGFDb250YWluZXJba2V5XSA9IG5ldyBNb2R1bGVEYXRhKGtleSk7XG4gICAgICB0aGlzLl9hcHBseUZ1dHVyZUxpc3RlbmVycyhrZXkpO1xuICAgIH1cbiAgfVxuXG4gIGdldFN0YXRlIChtb2R1bGVJZCkge1xuICAgIGlmICh0aGlzLl9tb2R1bGVEYXRhQ29udGFpbmVyW21vZHVsZUlkXSkge1xuICAgICAgcmV0dXJuIHRoaXMuX21vZHVsZURhdGFDb250YWluZXJbbW9kdWxlSWRdLnJhdygpO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGdldEFsbCAoa2V5KSB7XG4gICAgY29uc3QgZGF0YSA9IFtdO1xuICAgIGZvciAoY29uc3QgZGF0YUtleSBvZiBPYmplY3Qua2V5cyh0aGlzLl9tb2R1bGVEYXRhQ29udGFpbmVyKSkge1xuICAgICAgaWYgKGRhdGFLZXkuc3RhcnRzV2l0aChrZXkpICYmIHRoaXMuX21vZHVsZURhdGFDb250YWluZXJbZGF0YUtleV0ucmF3KCkgIT09IG51bGwpIHtcbiAgICAgICAgZGF0YS5wdXNoKHRoaXMuX21vZHVsZURhdGFDb250YWluZXJbZGF0YUtleV0ucmF3KCkpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmUgdGhlIGRhdGEgaW4gc3RvcmFnZSB3aXRoIHRoZSBnaXZlbiBrZXkgdG8gdGhlIHByb3ZpZGVkIGRhdGEsXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgdGhlIHN0b3JhZ2Uga2V5IHRvIGRlbGV0ZVxuICAgKi9cbiAgZGVsZXRlIChrZXkpIHtcbiAgICAvLyBOb3RlOiBEbyB3ZSBuZWVkIHRvIGNsZWFuIHVwIGxpc3RlbmVycyBoZXJlP1xuICAgIGRlbGV0ZSB0aGlzLl9tb2R1bGVEYXRhQ29udGFpbmVyW2tleV07XG4gIH1cblxuICBvbiAoZXZ0LCBtb2R1bGVJZCwgY2IpIHtcbiAgICBsZXQgbW9kdWxlRGF0YSA9IHRoaXMuX21vZHVsZURhdGFDb250YWluZXJbbW9kdWxlSWRdO1xuICAgIGlmIChtb2R1bGVEYXRhID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmICh0aGlzLl9mdXR1cmVMaXN0ZW5lcnNbbW9kdWxlSWRdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhpcy5fZnV0dXJlTGlzdGVuZXJzW21vZHVsZUlkXSA9IFtdO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9mdXR1cmVMaXN0ZW5lcnNbbW9kdWxlSWRdLnB1c2goe1xuICAgICAgICBldmVudDogZXZ0LFxuICAgICAgICBjYjogY2JcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5fbW9kdWxlRGF0YUNvbnRhaW5lclttb2R1bGVJZF0ub24oZXZ0LCBjYik7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBvZmYgKGV2dCwgbW9kdWxlSWQsIGNiKSB7XG4gICAgbGV0IG1vZHVsZURhdGEgPSB0aGlzLl9tb2R1bGVEYXRhQ29udGFpbmVyW21vZHVsZUlkXTtcbiAgICBpZiAobW9kdWxlRGF0YSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAodGhpcy5fZnV0dXJlTGlzdGVuZXJzW21vZHVsZUlkXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRoaXMuX2Z1dHVyZUxpc3RlbmVyc1ttb2R1bGVJZF0ucG9wKCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHRoaXMuX21vZHVsZURhdGFDb250YWluZXJbbW9kdWxlSWRdLm9mZihldnQsIGNiKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIF9hcHBseUZ1dHVyZUxpc3RlbmVycyAobW9kdWxlSWQpIHtcbiAgICBsZXQgZnV0dXJlcyA9IHRoaXMuX2Z1dHVyZUxpc3RlbmVyc1ttb2R1bGVJZF07XG4gICAgaWYgKCFmdXR1cmVzKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmdXR1cmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBsZXQgZnV0dXJlID0gZnV0dXJlc1tpXTtcbiAgICAgIHRoaXMub24oZnV0dXJlLmV2ZW50LCBtb2R1bGVJZCwgZnV0dXJlLmNiKTtcbiAgICB9XG4gICAgZGVsZXRlIHRoaXMuX2Z1dHVyZUxpc3RlbmVyc1ttb2R1bGVJZF07XG4gIH1cbn1cbiIsIi8qKiBAbW9kdWxlICovXG5cbmV4cG9ydCB7IGRlZmF1bHQgYXMgU2VhcmNoQXBpIH0gZnJvbSAnLi9zZWFyY2gvc2VhcmNoYXBpJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgQW5hbHl0aWNzUmVwb3J0ZXIgfSBmcm9tICcuL2FuYWx5dGljcy9hbmFseXRpY3NyZXBvcnRlcic7XG5leHBvcnQgeyBkZWZhdWx0IGFzIE5vb3BBbmFseXRpY3NSZXBvcnRlciB9IGZyb20gJy4vYW5hbHl0aWNzL25vb3BhbmFseXRpY3NyZXBvcnRlcic7XG5leHBvcnQgeyBkZWZhdWx0IGFzIE1vZHVsZURhdGEgfSBmcm9tICcuL3N0b3JhZ2UvbW9kdWxlZGF0YSc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIFN0b3JhZ2UgfSBmcm9tICcuL3N0b3JhZ2UvZ2xvYmFsc3RvcmFnZSc7XG4iLCIvKiogQG1vZHVsZSBDb21wb25lbnQgKi9cblxuaW1wb3J0IHsgUmVuZGVyZXJzIH0gZnJvbSAnLi4vcmVuZGVyaW5nL2NvbnN0JztcblxuaW1wb3J0IERPTSBmcm9tICcuLi9kb20vZG9tJztcbmltcG9ydCBTdGF0ZSBmcm9tICcuL3N0YXRlJztcbmltcG9ydCB7IEFuYWx5dGljc1JlcG9ydGVyIH0gZnJvbSAnLi4vLi4vY29yZSc7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbmltcG9ydCBBbmFseXRpY3NFdmVudCBmcm9tICcuLi8uLi9jb3JlL2FuYWx5dGljcy9hbmFseXRpY3NldmVudCc7XG5pbXBvcnQgeyBBbnN3ZXJzQ29tcG9uZW50RXJyb3IgfSBmcm9tICcuLi8uLi9jb3JlL2Vycm9ycy9lcnJvcnMnO1xuXG4vKipcbiAqIENvbXBvbmVudCBpcyBhbiBhYnN0cmFjdGlvbiB0aGF0IGVuY2Fwc3VsYXRlcyBzdGF0ZSwgYmVoYXZpb3IsXG4gKiBhbmQgdmlldyBmb3IgYSBwYXJ0aWN1bGFyIGNodW5rIG9mIGZ1bmN0aW9uYWxpdHkgb24gdGhlIHBhZ2UuXG4gKlxuICogVGhlIEFQSSBleHBvc2VzIGV2ZW50IGxpZmUgY3ljbGUgaG9va3MgZm9yIHdoZW4gdGhpbmdzIGFyZSByZW5kZXJlZCxcbiAqIG1vdW50ZWQsIGNyZWF0ZWQsIGV0Yy5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IgKGNvbmZpZyA9IHt9LCBzeXN0ZW1Db25maWcgPSB7fSkge1xuICAgIHRoaXMubW9kdWxlSWQgPSBudWxsO1xuXG4gICAgLyoqXG4gICAgICogVW5pcXVlIG5hbWUgb2YgdGhpcyBjb21wb25lbnQgaW5zdGFuY2VcbiAgICAgKiBVc2VkIHRvIGRpc3Rpbmd1aXNoIGJldHdlZW4gb3RoZXIgY29tcG9uZW50cyBvZiB0aGUgc2FtZSB0eXBlXG4gICAgICogQHR5cGUge1N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLm5hbWUgPSBjb25maWcubmFtZSB8fCB0aGlzLmNvbnN0cnVjdG9yLnR5cGU7XG5cbiAgICAvKipcbiAgICAgKiBDYWNoZSB0aGUgb3B0aW9ucyBzbyB0aGF0IHdlIGNhbiBwcm9wb2dhdGUgcHJvcGVybHkgdG8gY2hpbGQgY29tcG9uZW50c1xuICAgICAqIEB0eXBlIHtPYmplY3R9XG4gICAgICovXG4gICAgdGhpcy5fY29uZmlnID0gY29uZmlnO1xuXG4gICAgLyoqXG4gICAgICogQW4gaWRlbnRpZmllciB1c2VkIHRvIGNsYXNzaWZ5IHRoZSB0eXBlIG9mIGNvbXBvbmVudC5cbiAgICAgKiBUaGUgY29tcG9uZW50IG1hbmFnZXIgdXNlcyB0aGlzIGluZm9ybWF0aW9uIGluIG9yZGVyIHRvIHBlcnNpc3QgYW5kIG9yZ2FuaXplIGNvbXBvbmVudHNcbiAgICAgKiBAdHlwZSB7c3RyaW5nfENvbXBvbmVudFR5cGV9XG4gICAgICovXG4gICAgdGhpcy5fdHlwZSA9IHRoaXMuY29uc3RydWN0b3IubmFtZTtcblxuICAgIC8qKlxuICAgICAqIEEgbG9jYWwgcmVmZXJlbmNlIHRvIHRoZSBwYXJlbnQgY29tcG9uZW50LCBpZiBleGlzdHNcbiAgICAgKiBAdHlwZSB7Q29tcG9uZW50fVxuICAgICAqL1xuICAgIHRoaXMuX3BhcmVudENvbnRhaW5lciA9IGNvbmZpZy5wYXJlbnRDb250YWluZXIgfHwgbnVsbDtcblxuICAgIC8qKlxuICAgICAqIEEgY29udGFpbmVyIGZvciBhbGwgdGhlIGNoaWxkIGNvbXBvbmVudHNcbiAgICAgKiBAdHlwZSB7Q29tcG9uZW50W119XG4gICAgICovXG4gICAgdGhpcy5fY2hpbGRyZW4gPSBbXTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBzdGF0ZSAoZGF0YSkgb2YgdGhlIGNvbXBvbmVudCB0byBiZSBwcm92aWRlZCB0byB0aGUgdGVtcGxhdGUgZm9yIHJlbmRlcmluZ1xuICAgICAqIEB0eXBlIHtvYmplY3R9XG4gICAgICovXG4gICAgdGhpcy5fc3RhdGUgPSBuZXcgU3RhdGUoY29uZmlnLnN0YXRlKTtcblxuICAgIC8qKlxuICAgICAqIFRPRE8oYmlsbHkpIFRoaXMgc2hvdWxkIGJlICdzZXJ2aWNlcydcbiAgICAgKi9cbiAgICB0aGlzLmNvcmUgPSBzeXN0ZW1Db25maWcuY29yZSB8fCBudWxsO1xuXG4gICAgLyoqXG4gICAgICogQSBsb2NhbCByZWZlcmVuY2UgdG8gdGhlIGNvbXBvbmVudCBtYW5hZ2VyLCB3aGljaCBjb250YWlucyBhbGwgb2YgdGhlIGNvbXBvbmVudCBjbGFzc2VzXG4gICAgICogZWxpZ2libGUgdG8gYmUgY3JlYXRlZFxuICAgICAqIEB0eXBlIHtDb21wb25lbnRNYW5hZ2VyfVxuICAgICAqL1xuICAgIHRoaXMuY29tcG9uZW50TWFuYWdlciA9IHN5c3RlbUNvbmZpZy5jb21wb25lbnRNYW5hZ2VyIHx8IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBBIGxvY2FsIHJlZmVyZW5jZSB0byB0aGUgYW5hbHl0aWNzIHJlcG9ydGVyLCB1c2VkIHRvIHJlcG9ydCBldmVudHMgZm9yIHRoaXMgY29tcG9uZW50XG4gICAgICogQHR5cGUge0FuYWx5dGljc1JlcG9ydGVyfVxuICAgICAqL1xuICAgIHRoaXMuYW5hbHl0aWNzUmVwb3J0ZXIgPSBzeXN0ZW1Db25maWcuYW5hbHl0aWNzUmVwb3J0ZXIgfHwgbnVsbDtcblxuICAgIC8qKlxuICAgICAqIE9wdGlvbnMgdG8gaW5jbHVkZSB3aXRoIGFsbCBhbmFseXRpYyBldmVudHMgc2VudCBieSB0aGlzIGNvbXBvbmVudFxuICAgICAqIEB0eXBlIHtvYmplY3R9XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLl9hbmFseXRpY3NPcHRpb25zID0gY29uZmlnLmFuYWx5dGljc09wdGlvbnMgfHwge307XG5cbiAgICAvKipcbiAgICAgKiBBIHJlZmVyZW5jZSB0byB0aGUgRE9NIG5vZGUgdGhhdCB0aGUgY29tcG9uZW50IHdpbGwgYmUgYXBwZW5kZWQgdG8gd2hlbiBtb3VudGVkL3JlbmRlcmVkLlxuICAgICAqIEB0eXBlIHtIVE1MRWxlbWVudH1cbiAgICAgKi9cbiAgICBpZiAodGhpcy5fcGFyZW50Q29udGFpbmVyID09PSBudWxsKSB7XG4gICAgICBpZiAodHlwZW9mIGNvbmZpZy5jb250YWluZXIgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRoaXMuX2NvbnRhaW5lciA9IERPTS5xdWVyeShjb25maWcuY29udGFpbmVyKSB8fCBudWxsO1xuICAgICAgICBpZiAodGhpcy5fY29udGFpbmVyID09PSBudWxsKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgZmluZCBjb250YWluZXIgRE9NIG5vZGU6ICcgKyBjb25maWcuY29udGFpbmVyKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9jb250YWluZXIgPSBET00ucXVlcnkodGhpcy5fcGFyZW50Q29udGFpbmVyLCBjb25maWcuY29udGFpbmVyKTtcblxuICAgICAgLy8gSWYgd2UgaGF2ZSBhIHBhcmVudCwgYW5kIHRoZSBjb250YWluZXIgaXMgbWlzc2luZyBmcm9tIHRoZSBET00sXG4gICAgICAvLyB3ZSBjb25zdHJ1Y3QgdGhlIGNvbnRhaW5lciBhbmQgYXBwZW5kIGl0IHRvIHRoZSBwYXJlbnRcbiAgICAgIGlmICh0aGlzLl9jb250YWluZXIgPT09IG51bGwpIHtcbiAgICAgICAgdGhpcy5fY29udGFpbmVyID0gRE9NLmNyZWF0ZUVsKCdkaXYnLCB7XG4gICAgICAgICAgY2xhc3M6IGNvbmZpZy5jb250YWluZXIuc3Vic3RyaW5nKDEsIGNvbmZpZy5jb250YWluZXIubGVuZ3RoKVxuICAgICAgICB9KTtcbiAgICAgICAgRE9NLmFwcGVuZCh0aGlzLl9wYXJlbnRDb250YWluZXIsIHRoaXMuX2NvbnRhaW5lcik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBjdXN0b20gY2xhc3MgdG8gYmUgYXBwbGllZCB0byB7dGhpcy5fY29udGFpbmVyfSBub2RlXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLl9jbGFzc05hbWUgPSBjb25maWcuY2xhc3MgfHwgJ2NvbXBvbmVudCc7XG5cbiAgICAvKipcbiAgICAgKiBBIGN1c3RvbSByZW5kZXIgZnVuY3Rpb24gdG8gYmUgdXNlZCBpbnN0ZWFkIG9mIHVzaW5nIHRoZSBkZWZhdWx0IHJlbmRlcmVyXG4gICAgICogQHR5cGUge1JlbmRlcmVyfVxuICAgICAqL1xuICAgIHRoaXMuX3JlbmRlciA9IGNvbmZpZy5yZW5kZXIgfHwgbnVsbDtcblxuICAgIC8qKlxuICAgICAqIEEgbG9jYWwgcmVmZXJlbmNlIHRvIHRoZSBkZWZhdWx0IHtSZW5kZXJlcn0gdGhhdCB3aWxsIGJlIHVzZWQgZm9yIHJlbmRlcmluZyB0aGUgdGVtcGxhdGVcbiAgICAgKiBAdHlwZSB7UmVuZGVyZXJ9XG4gICAgICovXG4gICAgdGhpcy5fcmVuZGVyZXIgPSBzeXN0ZW1Db25maWcucmVuZGVyZXIgfHwgUmVuZGVyZXJzLkhhbmRsZWJhcnM7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgdGVtcGxhdGUgc3RyaW5nIHRvIHVzZSBmb3IgcmVuZGVyaW5nIHRoZSBjb21wb25lbnRcbiAgICAgKiBJZiB0aGlzIGlzIGxlZnQgZW1wdHksIHdlIGxvb2t1cCB0aGUgdGVtcGxhdGUgdGhlIGJhc2UgdGVtcGxhdGVzIHVzaW5nIHRoZSB0ZW1wbGF0ZU5hbWVcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMuX3RlbXBsYXRlID0gY29uZmlnLnRlbXBsYXRlID8gdGhpcy5fcmVuZGVyZXIuY29tcGlsZShjb25maWcudGVtcGxhdGUpIDogbnVsbDtcblxuICAgIC8qKlxuICAgICAqIFRoZSB0ZW1wbGF0ZU5hbWUgdG8gdXNlIGZvciByZW5kZXJpbmcgdGhlIGNvbXBvbmVudC5cbiAgICAgKiBUaGlzIGlzIG9ubHkgdXNlZCBpZiBfdGVtcGxhdGUgaXMgZW1wdHkuXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLl90ZW1wbGF0ZU5hbWUgPSBjb25maWcudGVtcGxhdGVOYW1lIHx8IHRoaXMuY29uc3RydWN0b3IuZGVmYXVsdFRlbXBsYXRlTmFtZShjb25maWcpO1xuXG4gICAgLyoqXG4gICAgICogQW4gaW50ZXJuYWwgc3RhdGUgaW5kaWNhdGluZyB3aGV0aGVyIG9yIG5vdCB0aGUgY29tcG9uZW50IGhhcyBiZWVuIG1vdW50ZWQgdG8gdGhlIERPTVxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqL1xuICAgIHRoaXMuX2lzTW91bnRlZCA9IGZhbHNlO1xuXG4gICAgLyoqXG4gICAgICogQSBsb2NhbCByZWZlcmVuY2UgdG8gdGhlIGNhbGxiYWNrLCB0aGF0cyB1c2VkIHRvIHRyYW5zZm9ybSB0aGUgaW50ZXJuYWwgZGF0YVxuICAgICAqIG1vZGVscyBvZiB0aGUgY29tcG9uZW50cywgYmVmb3JlIGl0IGdldHMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50IHN0YXRlLlxuICAgICAqIEJ5IGRlZmF1bHQsIG5vIHRyYW5zZm9ybWF0aW9uIGhhcHBlbnMuXG4gICAgICogQHR5cGUge2Z1bmN0aW9ufVxuICAgICAqL1xuICAgIHRoaXMudHJhbnNmb3JtRGF0YSA9IGNvbmZpZy50cmFuc2Zvcm1EYXRhIHx8IHRoaXMudHJhbnNmb3JtRGF0YSB8fCBmdW5jdGlvbiAoKSB7fTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBhIGxvY2FsIHJlZmVyZW5jZSB0byB0aGUgY2FsbGJhY2sgdGhhdCB3aWxsIGJlIGludm9rZWQgd2hlbiBhIGNvbXBvbmVudCBpcyBjcmVhdGVkLlxuICAgICAqIEB0eXBlIHtmdW5jdGlvbn1cbiAgICAgKi9cbiAgICB0aGlzLm9uQ3JlYXRlID0gY29uZmlnLm9uQ3JlYXRlT3ZlcnJpZGUgfHwgdGhpcy5vbkNyZWF0ZSB8fCBmdW5jdGlvbiAoKSB7fTtcbiAgICB0aGlzLm9uQ3JlYXRlID0gdGhpcy5vbkNyZWF0ZS5iaW5kKHRoaXMpO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGEgbG9jYWwgcmVmZXJlbmNlIHRvIHRoZSBjYWxsYmFjayB0aGF0IHdpbGwgYmUgaW52b2tlZCB3aGVuIGEgY29tcG9uZW50IGlzIE1vdW50ZWQuXG4gICAgICogQHR5cGUge2Z1bmN0aW9ufVxuICAgICAqL1xuICAgIHRoaXMub25Nb3VudCA9IGNvbmZpZy5vbk1vdW50T3ZlcnJpZGUgfHwgdGhpcy5vbk1vdW50IHx8IGZ1bmN0aW9uICgpIHt9O1xuICAgIHRoaXMub25Nb3VudCA9IHRoaXMub25Nb3VudC5iaW5kKHRoaXMpO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGEgbG9jYWwgcmVmZXJlbmNlIHRvIHRoZSBjYWxsYmFjayB0aGF0IHdpbGwgYmUgaW52b2tlZCB3aGVuIGEgY29tcG9uZW50cyBzdGF0ZSBpcyB1cGRhdGVkLlxuICAgICAqIEB0eXBlIHtmdW5jdGlvbn1cbiAgICAgKi9cbiAgICB0aGlzLm9uVXBkYXRlID0gY29uZmlnLm9uVXBkYXRlT3ZlcnJpZGUgfHwgdGhpcy5vblVwZGF0ZSB8fCBmdW5jdGlvbiAoKSB7IH07XG4gICAgdGhpcy5vblVwZGF0ZSA9IHRoaXMub25VcGRhdGUuYmluZCh0aGlzKTtcblxuICAgIC8qKlxuICAgICAqIEEgdXNlciBwcm92aWRlZCBvbkNyZWF0ZSBjYWxsYmFja1xuICAgICAqIEB0eXBlIHtmdW5jdGlvbn1cbiAgICAgKi9cbiAgICB0aGlzLnVzZXJPbkNyZWF0ZSA9IGNvbmZpZy5vbkNyZWF0ZSB8fCBmdW5jdGlvbiAoKSB7fTtcblxuICAgIC8qKlxuICAgICAqIEEgdXNlciBwcm92aWRlZCBvbk1vdW50IGNhbGxiYWNrXG4gICAgICogQHR5cGUge2Z1bmN0aW9ufVxuICAgICAqL1xuICAgIHRoaXMudXNlck9uTW91bnQgPSBjb25maWcub25Nb3VudCB8fCBmdW5jdGlvbiAoKSB7fTtcblxuICAgIC8qKlxuICAgICAqIEEgdXNlciBwcm92aWRlZCBvblVwZGF0ZSBjYWxsYmFja1xuICAgICAqIEB0eXBlIHtmdW5jdGlvbn1cbiAgICAgKi9cbiAgICB0aGlzLnVzZXJPblVwZGF0ZSA9IGNvbmZpZy5vblVwZGF0ZSB8fCBmdW5jdGlvbiAoKSB7fTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgdGVtcGxhdGUgdG8gcmVuZGVyXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgc3RhdGljIGRlZmF1bHRUZW1wbGF0ZU5hbWUgKGNvbmZpZykge1xuICAgIHJldHVybiAnZGVmYXVsdCc7XG4gIH1cblxuICBzdGF0aWMgZ2V0IHR5cGUgKCkge1xuICAgIHJldHVybiAnQ29tcG9uZW50JztcbiAgfVxuXG4gIHN0YXRpYyBhcmVEdXBsaWNhdGVOYW1lc0FsbG93ZWQgKCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGluaXQgKG9wdHMpIHtcbiAgICB0cnkge1xuICAgICAgdGhpcy5zZXRTdGF0ZShvcHRzLmRhdGEgfHwgb3B0cy5zdGF0ZSB8fCB7fSk7XG4gICAgICB0aGlzLm9uQ3JlYXRlKCk7XG4gICAgICB0aGlzLnVzZXJPbkNyZWF0ZSgpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHRocm93IG5ldyBBbnN3ZXJzQ29tcG9uZW50RXJyb3IoXG4gICAgICAgICdFcnJvciBpbml0aWFsaXppbmcgY29tcG9uZW50JyxcbiAgICAgICAgdGhpcy5jb25zdHJ1Y3Rvci50eXBlLFxuICAgICAgICBlKTtcbiAgICB9XG5cbiAgICB0aGlzLl9zdGF0ZS5vbigndXBkYXRlJywgKCkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgdGhpcy5vblVwZGF0ZSgpO1xuICAgICAgICB0aGlzLnVzZXJPblVwZGF0ZSgpO1xuICAgICAgICB0aGlzLnVuTW91bnQoKTtcbiAgICAgICAgdGhpcy5tb3VudCgpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICB0aHJvdyBuZXcgQW5zd2Vyc0NvbXBvbmVudEVycm9yKFxuICAgICAgICAgICdFcnJvciB1cGRhdGluZyBjb21wb25lbnQnLFxuICAgICAgICAgIHRoaXMuY29uc3RydWN0b3IudHlwZSxcbiAgICAgICAgICBlKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIERPTS5hZGRDbGFzcyh0aGlzLl9jb250YWluZXIsIHRoaXMuX2NsYXNzTmFtZSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBzZXRTdGF0ZSAoZGF0YSkge1xuICAgIGNvbnN0IG5ld1N0YXRlID0gT2JqZWN0LmFzc2lnbih7fSwgeyBfY29uZmlnOiB0aGlzLl9jb25maWcgfSwgZGF0YSk7XG4gICAgdGhpcy5fc3RhdGUuc2V0KG5ld1N0YXRlKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGdldFN0YXRlIChwcm9wKSB7XG4gICAgcmV0dXJuIHRoaXMuX3N0YXRlLmdldChwcm9wKTtcbiAgfVxuXG4gIGhhc1N0YXRlIChwcm9wKSB7XG4gICAgcmV0dXJuIHRoaXMuX3N0YXRlLmhhcyhwcm9wKTtcbiAgfVxuXG4gIHRyYW5zZm9ybURhdGEgKGRhdGEpIHtcbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuXG4gIGFkZENoaWxkIChkYXRhLCB0eXBlLCBvcHRzKSB7XG4gICAgbGV0IGNoaWxkQ29tcG9uZW50ID0gdGhpcy5jb21wb25lbnRNYW5hZ2VyLmNyZWF0ZShcbiAgICAgIHR5cGUsXG4gICAgICBPYmplY3QuYXNzaWduKHtcbiAgICAgICAgbmFtZTogZGF0YS5uYW1lLFxuICAgICAgICBwYXJlbnRDb250YWluZXI6IHRoaXMuX2NvbnRhaW5lcixcbiAgICAgICAgZGF0YTogZGF0YVxuICAgICAgfSwgb3B0cyB8fCB7fSwge1xuICAgICAgICBfcGFyZW50T3B0czogdGhpcy5fY29uZmlnXG4gICAgICB9KVxuICAgICk7XG5cbiAgICB0aGlzLl9jaGlsZHJlbi5wdXNoKGNoaWxkQ29tcG9uZW50KTtcbiAgICByZXR1cm4gY2hpbGRDb21wb25lbnQ7XG4gIH1cblxuICAvKipcbiAgICogVW5tb3VudCBhbmQgcmVtb3ZlIHRoaXMgY29tcG9uZW50IGFuZCBpdHMgY2hpbGRyZW4gZnJvbSB0aGUgbGlzdFxuICAgKiBvZiBhY3RpdmUgY29tcG9uZW50c1xuICAgKi9cbiAgcmVtb3ZlICgpIHtcbiAgICB0aGlzLl9jaGlsZHJlbi5mb3JFYWNoKGMgPT4gYy5yZW1vdmUoKSk7XG4gICAgdGhpcy5jb21wb25lbnRNYW5hZ2VyLnJlbW92ZSh0aGlzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgdGhlIHJlbmRlciBtZXRob2QgdG8gYmUgdXNlZCBmb3IgcmVuZGVyaW5nIHRoZSBjb21wb25lbnRcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gcmVuZGVyXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIHNldFJlbmRlciAocmVuZGVyKSB7XG4gICAgdGhpcy5fcmVuZGVyID0gcmVuZGVyO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCB0aGUgcmVuZGVyZXIgZm9yIHRoZSBjb21wb25lbnRcbiAgICogQHBhcmFtIHtSZW5kZXJlclR5cGV9IHJlbmRlcmVyXG4gICAqL1xuICBzZXRSZW5kZXJlciAocmVuZGVyZXIpIHtcbiAgICB0aGlzLl9yZW5kZXJlciA9IFJlbmRlcmVyc1tyZW5kZXJlcl07XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgdGVtcGxhdGUgZm9yIHRoZSBjb21wb25lbnQgdG8gdXNlIHdoZW4gcmVuZGVyaW5nXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0ZW1wbGF0ZVxuICAgKi9cbiAgc2V0VGVtcGxhdGUgKHRlbXBsYXRlKSB7XG4gICAgdGhpcy5fdGVtcGxhdGUgPSB0aGlzLl9yZW5kZXJlci5jb21waWxlKHRlbXBsYXRlKTtcbiAgfVxuXG4gIHVuTW91bnQgKCkge1xuICAgIGlmICghdGhpcy5fY29udGFpbmVyKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICB0aGlzLl9jaGlsZHJlbi5mb3JFYWNoKGNoaWxkID0+IHtcbiAgICAgIGNoaWxkLnVuTW91bnQoKTtcbiAgICB9KTtcblxuICAgIERPTS5lbXB0eSh0aGlzLl9jb250YWluZXIpO1xuICAgIHRoaXMuX2NoaWxkcmVuLmZvckVhY2goYyA9PiBjLnJlbW92ZSgpKTtcbiAgICB0aGlzLl9jaGlsZHJlbiA9IFtdO1xuICAgIHRoaXMub25Vbk1vdW50KCk7XG4gIH1cblxuICBtb3VudCAoY29udGFpbmVyKSB7XG4gICAgaWYgKGNvbnRhaW5lcikge1xuICAgICAgdGhpcy5fY29udGFpbmVyID0gY29udGFpbmVyO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5fY29udGFpbmVyKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBpZiAodGhpcy5iZWZvcmVNb3VudCgpID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgRE9NLmFwcGVuZCh0aGlzLl9jb250YWluZXIsIHRoaXMucmVuZGVyKHRoaXMuX3N0YXRlLmFzSlNPTigpKSk7XG5cbiAgICAvLyBQcm9jZXNzIHRoZSBET00gdG8gZGV0ZXJtaW5lIGlmIHdlIHNob3VsZCBjcmVhdGVcbiAgICAvLyBpbi1tZW1vcnkgc3ViLWNvbXBvbmVudHMgZm9yIHJlbmRlcmluZ1xuICAgIGNvbnN0IGRvbUNvbXBvbmVudHMgPSBET00ucXVlcnlBbGwodGhpcy5fY29udGFpbmVyLCAnW2RhdGEtY29tcG9uZW50XTpub3QoW2RhdGEtaXMtY29tcG9uZW50LW1vdW50ZWRdKScpO1xuICAgIGNvbnN0IGRhdGEgPSB0aGlzLnRyYW5zZm9ybURhdGEoSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSh0aGlzLl9zdGF0ZS5nZXQoKSkpKTtcbiAgICBkb21Db21wb25lbnRzLmZvckVhY2goYyA9PiB0aGlzLl9jcmVhdGVTdWJjb21wb25lbnQoYywgZGF0YSkpO1xuXG4gICAgdGhpcy5fY2hpbGRyZW4uZm9yRWFjaChjaGlsZCA9PiB7XG4gICAgICBjaGlsZC5tb3VudCgpO1xuICAgIH0pO1xuXG4gICAgLy8gQXR0YWNoIGFuYWx5dGljcyBob29rcyBhcyBuZWNlc3NhcnlcbiAgICBpZiAodGhpcy5hbmFseXRpY3NSZXBvcnRlcikge1xuICAgICAgbGV0IGRvbUhvb2tzID0gRE9NLnF1ZXJ5QWxsKHRoaXMuX2NvbnRhaW5lciwgJ1tkYXRhLWV2ZW50dHlwZV06bm90KFtkYXRhLWlzLWFuYWx5dGljcy1hdHRhY2hlZF0pJyk7XG4gICAgICBkb21Ib29rcy5mb3JFYWNoKHRoaXMuX2NyZWF0ZUFuYWx5dGljc0hvb2suYmluZCh0aGlzKSk7XG4gICAgfVxuXG4gICAgdGhpcy5faXNNb3VudGVkID0gdHJ1ZTtcbiAgICB0aGlzLm9uTW91bnQodGhpcyk7XG4gICAgdGhpcy51c2VyT25Nb3VudCh0aGlzKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIHJlbmRlciB0aGUgdGVtcGxhdGUgdXNpbmcgdGhlIHtSZW5kZXJlcn0gd2l0aCB0aGUgY3VycmVudCBzdGF0ZSBhbmQgdGVtcGxhdGUgb2YgdGhlIGNvbXBvbmVudFxuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKi9cbiAgcmVuZGVyIChkYXRhID0gdGhpcy5fc3RhdGUuZ2V0KCkpIHtcbiAgICB0aGlzLmJlZm9yZVJlbmRlcigpO1xuICAgIC8vIFRlbXBvcmFyeSBmaXggZm9yIHBhc3NpbmcgaW1tdXRhYmxlIGRhdGEgdG8gdHJhbnNmb3JtRGF0YSgpLlxuICAgIGRhdGEgPSB0aGlzLnRyYW5zZm9ybURhdGEoSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShkYXRhKSkpO1xuXG4gICAgbGV0IGh0bWwgPSAnJztcbiAgICAvLyBVc2UgZWl0aGVyIHRoZSBjdXN0b20gcmVuZGVyIGZ1bmN0aW9uIG9yIHRoZSBpbnRlcm5hbCByZW5kZXJlclxuICAgIC8vIGRlcGVuZGFudCBvbiB0aGUgY29tcG9uZW50IGNvbmZpZ3VyYXRpb25cbiAgICBpZiAodHlwZW9mIHRoaXMuX3JlbmRlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgaHRtbCA9IHRoaXMuX3JlbmRlcihkYXRhKTtcbiAgICAgIGlmICh0eXBlb2YgaHRtbCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZW5kZXIgbWV0aG9kIG11c3QgcmV0dXJuIEhUTUwgYXMgdHlwZSB7c3RyaW5nfScpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBSZW5kZXIgdGhlIGV4aXN0aW5nIHRlbXBsYXRlcyBhcyBhIHN0cmluZ1xuICAgICAgaHRtbCA9IHRoaXMuX3JlbmRlcmVyLnJlbmRlcih7XG4gICAgICAgIHRlbXBsYXRlOiB0aGlzLl90ZW1wbGF0ZSxcbiAgICAgICAgdGVtcGxhdGVOYW1lOiB0aGlzLl90ZW1wbGF0ZU5hbWVcbiAgICAgIH0sIGRhdGEpO1xuICAgIH1cblxuICAgIC8vIFdlIGNyZWF0ZSBhbiBIVE1MIERvY3VtZW50IGZyYWdtZW50IHdpdGggdGhlIHJlbmRlcmVkIHN0cmluZ1xuICAgIC8vIFNvIHRoYXQgd2UgY2FuIHF1ZXJ5IGl0IGZvciBwcm9jZXNzaW5nIG9mIHN1YiBjb21wb25lbnRzXG4gICAgbGV0IGVsID0gRE9NLmNyZWF0ZShodG1sKTtcblxuICAgIHRoaXMuYWZ0ZXJSZW5kZXIoKTtcbiAgICByZXR1cm4gZWwuaW5uZXJIVE1MO1xuICB9XG5cbiAgX2NyZWF0ZVN1YmNvbXBvbmVudCAoZG9tQ29tcG9uZW50LCBkYXRhKSB7XG4gICAgZG9tQ29tcG9uZW50LmRhdGFzZXQuaXNDb21wb25lbnRNb3VudGVkID0gdHJ1ZTtcbiAgICBjb25zdCBkYXRhc2V0ID0gZG9tQ29tcG9uZW50LmRhdGFzZXQ7XG4gICAgY29uc3QgdHlwZSA9IGRhdGFzZXQuY29tcG9uZW50O1xuICAgIGNvbnN0IHByb3AgPSBkYXRhc2V0LnByb3A7XG4gICAgbGV0IG9wdHMgPSBkYXRhc2V0Lm9wdHMgPyBKU09OLnBhcnNlKGRhdGFzZXQub3B0cykgOiB7fTtcblxuICAgIGxldCBjaGlsZERhdGEgPSBkYXRhW3Byb3BdIHx8IHt9O1xuXG4gICAgb3B0cyA9IHtcbiAgICAgIC4uLm9wdHMsXG4gICAgICBjb250YWluZXI6IGRvbUNvbXBvbmVudFxuICAgIH07XG5cbiAgICAvLyBUT0RPKGJpbGx5KSBSaWdodCBub3csIGlmIHdlIHByb3ZpZGUgYW4gYXJyYXkgYXMgdGhlIGRhdGEgcHJvcCxcbiAgICAvLyB0aGUgYmVoYXZpb3IgaXMgdG8gY3JlYXRlIG1hbnkgY29tcG9uZW50cyBmb3IgZWFjaCBpdGVtIGluIHRoZSBhcnJheS5cbiAgICAvLyBUSEFUIGludGVyZmFjZSBTSE9VTEQgY2hhbmdlIHRvIHVzZSBhIGRpZmZlcmVudCBwcm9wZXJ0eSB0aGF0IGRlZmluZXNcbiAgICAvLyB3aGV0aGVyIHRvIGFycmF5IGRhdGEgc2hvdWxkIGJlIHVzZWQgZm9yIGEgc2luZ2xlIGNvbXBvbmVudCBvclxuICAgIC8vIHRvIGNyZWF0ZSBtYW55IGNvbXBvbmVudHMgZm9yIGVhY2ggaXRlbS5cbiAgICAvLyBPdmVybG9hZGluZyBhbmQgaGF2aW5nIHRoaXMgc2lkZSBlZmZlY3QgaXMgdW5pbnR1aXRpdmUgYW5kIFdST05HXG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGNoaWxkRGF0YSkpIHtcbiAgICAgIC8vIFJlbmRlcmluZyBhIHN1YiBjb21wb25lbnQgc2hvdWxkIGJlIHdpdGhpbiB0aGUgY29udGV4dCxcbiAgICAgIC8vIG9mIHRoZSBub2RlIHRoYXQgd2UgcHJvY2Vzc2VkIGl0IGZyb21cbiAgICAgIHRoaXMuYWRkQ2hpbGQoY2hpbGREYXRhLCB0eXBlLCBvcHRzKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjaGlsZERhdGEucmV2ZXJzZSgpO1xuICAgIGNoaWxkRGF0YS5mb3JFYWNoKGRhdGEgPT4ge1xuICAgICAgdGhpcy5hZGRDaGlsZChkYXRhLCB0eXBlLCBvcHRzKTtcbiAgICB9KTtcbiAgfVxuXG4gIF9jcmVhdGVBbmFseXRpY3NIb29rIChkb21Db21wb25lbnQpIHtcbiAgICBkb21Db21wb25lbnQuZGF0YXNldC5pc0FuYWx5dGljc0F0dGFjaGVkID0gdHJ1ZTtcbiAgICBjb25zdCBkYXRhc2V0ID0gZG9tQ29tcG9uZW50LmRhdGFzZXQ7XG4gICAgY29uc3QgdHlwZSA9IGRhdGFzZXQuZXZlbnR0eXBlO1xuICAgIGNvbnN0IGxhYmVsID0gZGF0YXNldC5ldmVudGxhYmVsO1xuICAgIGNvbnN0IG1pZGRsZWNsaWNrID0gZGF0YXNldC5taWRkbGVjbGljaztcbiAgICBjb25zdCBvcHRpb25zID0gZGF0YXNldC5ldmVudG9wdGlvbnMgPyBKU09OLnBhcnNlKGRhdGFzZXQuZXZlbnRvcHRpb25zKSA6IHt9O1xuXG4gICAgRE9NLm9uKGRvbUNvbXBvbmVudCwgJ21vdXNlZG93bicsIGUgPT4ge1xuICAgICAgaWYgKGUuYnV0dG9uID09PSAwIHx8IChtaWRkbGVjbGljayAmJiBlLmJ1dHRvbiA9PT0gMSkpIHtcbiAgICAgICAgY29uc3QgZXZlbnQgPSBuZXcgQW5hbHl0aWNzRXZlbnQodHlwZSwgbGFiZWwpO1xuICAgICAgICBldmVudC5hZGRPcHRpb25zKHRoaXMuX2FuYWx5dGljc09wdGlvbnMpO1xuICAgICAgICBldmVudC5hZGRPcHRpb25zKG9wdGlvbnMpO1xuICAgICAgICB0aGlzLmFuYWx5dGljc1JlcG9ydGVyLnJlcG9ydChldmVudCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogb25DcmVhdGUgaXMgdHJpZ2dlcmVkIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBjb25zdHJ1Y3RlZFxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSB0aGUgY2FsbGJhY2sgdG8gaW52b2tlIHVwb24gZW1pdFxuICAgKi9cbiAgb25DcmVhdGUgKGNiKSB7XG5cbiAgfVxuXG4gIC8qKlxuICAgKiBvblVwZGF0ZSBpcyB0cmlnZ2VyZWQgd2hlbiB0aGUgc3RhdGUgb2YgdGhlIGNvbXBvbmVudCBjaGFuZ2VzXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IHRoZSBjYWxsYmFjayB0byBpbnZva2UgdXBvbiBlbWl0XG4gICAqL1xuICBvblVwZGF0ZSAoY2IpIHtcblxuICB9XG5cbiAgLyoqXG4gICAqIGJlZm9yZVJlbmRlciBldmVudCBpcyB0cmlnZ2VyZWQgYmVmb3JlIHRoZSBjb21wb25lbnQgaXMgcmVuZGVyZWRcbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gdGhlIGNhbGxiYWNrIHRvIGludm9rZSB1cG9uIGVtaXRcbiAgICovXG4gIGJlZm9yZVJlbmRlciAoY2IpIHtcblxuICB9XG5cbiAgLyoqXG4gICAqIGFmdGVyUmVuZGVyIGV2ZW50IGlzIHRyaWdnZXJlZCBhZnRlciB0aGUgY29tcG9uZW50IGlzIHJlbmRlcmVkXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IHRoZSBjYWxsYmFjayB0byBpbnZva2UgdXBvbiBlbWl0XG4gICAqL1xuICBhZnRlclJlbmRlciAoY2IpIHtcblxuICB9XG5cbiAgLyoqXG4gICAqIG9uTW91bnQgaXMgdHJpZ2dlcmVkIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBhcHBlbmRlZCB0byB0aGUgRE9NXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IHRoZSBjYWxsYmFjayB0byBpbnZva2UgdXBvbiBlbWl0XG4gICAqL1xuICBvbk1vdW50IChjYikge1xuXG4gIH1cblxuICAvKipcbiAgICogb25Vbk1vdW50IGlzIHRyaWdnZXJlZCB3aGVuIHRoZSBjb21wb25lbnQgaXMgcmVtb3ZlZCBmcm9tIHRoZSBET01cbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gdGhlIGNhbGxiYWNrIHRvIGludm9rZSB1cG9uIGVtaXRcbiAgICovXG4gIG9uVW5Nb3VudCAoY2IpIHtcblxuICB9XG5cbiAgLyoqXG4gICAqIGJlZm9yZU1vdW50IGlzIHRyaWdnZXJlZCBiZWZvcmUgdGhlIGNvbXBvbmVudCBpcyBtb3VudGVkIHRvIHRoZSBET01cbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gdGhlIGNhbGxiYWNrIHRvIGludm9rZSB1cG9uIGVtaXRcbiAgICovXG4gIGJlZm9yZU1vdW50IChjYikge1xuXG4gIH1cblxuICAvKipcbiAgICogb25EZXN0cm95IGlzIHRyaWdnZXJlZCB3aGVuIHRoZSBjb21wb25lbnQgaXMgZGVzdHJveWVkXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IHRoZSBjYWxsYmFjayB0byBpbnZva2UgdXBvbiBlbWl0XG4gICAqL1xuICBvbkRlc3Ryb3kgKGNiKSB7XG5cbiAgfVxufVxuIiwiLyoqIEBtb2R1bGUgRXJyb3JSZXBvcnRlciAqL1xuXG5pbXBvcnQgeyBBbnN3ZXJzQmFzZUVycm9yLCBBbnN3ZXJzQmFzaWNFcnJvciB9IGZyb20gJy4vZXJyb3JzJztcblxuaW1wb3J0IEFwaVJlcXVlc3QgZnJvbSAnLi4vaHR0cC9hcGlyZXF1ZXN0JztcbmltcG9ydCB7IExJQl9WRVJTSU9OIH0gZnJvbSAnLi4vY29uc3RhbnRzJztcblxuLyoqIEB0eXBlZGVmIHtpbXBvcnQoJy4uL3NlcnZpY2VzL2Vycm9ycmVwb3J0ZXJzZXJ2aWNlJykuZGVmYXVsdH0gRXJyb3JSZXBvcnRlclNlcnZpY2UgKi9cblxuLyoqXG4gKiBFcnJvclJlcG9ydGVyIGlzIHVzZWQgZm9yIHJlcG9ydGluZyBlcnJvcnMgdG8gdGhlIGNvbnNvbGUgYW5kIEFQSVxuICpcbiAqIEBpbXBsZW1lbnRzIHtFcnJvclJlcG9ydGVyU2VydmljZX1cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRXJyb3JSZXBvcnRlciB7XG4gIGNvbnN0cnVjdG9yIChjb25maWcsIGdsb2JhbFN0b3JhZ2UpIHtcbiAgICAvKipcbiAgICAgKiBUaGUgYXBpS2V5IHRvIHVzZSBmb3IgcmVwb3J0aW5nXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLmFwaUtleSA9IGNvbmZpZy5hcGlLZXk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgZXhwZXJpZW5jZUtleSB0byB1c2Ugd2hlbiByZXBvcnRpbmdcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMuZXhwZXJpZW5jZUtleSA9IGNvbmZpZy5leHBlcmllbmNlS2V5O1xuXG4gICAgLyoqXG4gICAgICogVGhlIGFuc3dlcnMgY29uZmlnIHZlcnNpb24gdXNlZCBmb3IgYXBpIHJlcXVlc3RzXG4gICAgICogQHR5cGUge3N0cmluZ3xudW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy5leHBlcmllbmNlVmVyc2lvbiA9IGNvbmZpZy5leHBlcmllbmNlVmVyc2lvbiB8fCAnY29uZmlnMS4wJztcblxuICAgIC8qKlxuICAgICAqIElmIHRydWUsIHByaW50IGVudGlyZSBlcnJvciBvYmplY3RzIHRvIHRoZSBjb25zb2xlIGZvciBpbnNwZWN0aW9uXG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICovXG4gICAgdGhpcy5wcmludFZlcmJvc2UgPSBjb25maWcucHJpbnRWZXJib3NlO1xuXG4gICAgLyoqXG4gICAgICogSWYgdHJ1ZSwgcmVwb3J0IHRoZSBlcnJvciB0aGUgc2VydmVyIGZvciBsb2dnaW5nIGFuZCBtb25pdG9yaW5nXG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICovXG4gICAgdGhpcy5zZW5kVG9TZXJ2ZXIgPSBjb25maWcuc2VuZFRvU2VydmVyO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGdsb2JhbCBzdG9yYWdlIGluc3RhbmNlIG9mIHRoZSBleHBlcmllbmNlXG4gICAgICogQHR5cGUge0dsb2JhbFN0b3JhZ2V9XG4gICAgICovXG4gICAgaWYgKHRoaXMuc2VuZFRvU2VydmVyICYmICFnbG9iYWxTdG9yYWdlKSB7XG4gICAgICB0aHJvdyBuZXcgQW5zd2Vyc0Jhc2ljRXJyb3IoXG4gICAgICAgICdNdXN0IGluY2x1ZGUgZ2xvYmFsU3RvcmFnZSB0byBzZW5kIGVycm9ycyB0byBzZXJ2ZXInLFxuICAgICAgICAnRXJyb3JSZXBvcnRlcicpO1xuICAgIH1cbiAgICB0aGlzLmdsb2JhbFN0b3JhZ2UgPSBnbG9iYWxTdG9yYWdlO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGVudmlyb25tZW50IG9mIHRoZSBBbnN3ZXJzIGV4cGVyaWVuY2VcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5lbnZpcm9ubWVudCA9IGNvbmZpZy5lbnZpcm9ubWVudDtcblxuICAgIC8vIEF0dGFjaCByZXBvcnRpbmcgbGlzdGVuZXJzIHRvIHdpbmRvd1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdlcnJvcicsIGUgPT4gdGhpcy5yZXBvcnQoZS5lcnJvcikpO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd1bmhhbmRsZWRyZWplY3Rpb24nLCBlID0+IHRoaXMucmVwb3J0KGUuZXJyb3IpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiByZXBvcnQgcHJldHR5IHByaW50cyB0aGUgZXJyb3IgdG8gdGhlIGNvbnNvbGUsIG9wdGlvbmFsbHlcbiAgICogcHJpbnRzIHRoZSBlbnRpcmUgZXJyb3IgaWYgYHByaW50VmVyYm9zZWAgaXMgdHJ1ZSwgYW5kIHNlbmRzIHRoZVxuICAgKiBlcnJvciB0byB0aGUgc2VydmVyIHRvIGJlIGxvZ2dlZCBpZiBgc2VuZFRvU2VydmVyYCBpcyB0cnVlXG4gICAqIEBwYXJhbSB7QW5zd2Vyc0Jhc2VFcnJvcn0gZXJyIFRoZSBlcnJvciB0byBiZSByZXBvcnRlZFxuICAgKiBAcmV0dXJucyB7QW5zd2Vyc0Jhc2VFcnJvcn0gVGhlIHJlcG9ydGVkIGVycm9yXG4gICAqL1xuICByZXBvcnQgKGVycikge1xuICAgIGlmICghKGVyciBpbnN0YW5jZW9mIEFuc3dlcnNCYXNlRXJyb3IpIHx8IGVyci5yZXBvcnRlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGVyci5yZXBvcnRlZCA9IHRydWU7XG5cbiAgICB0aGlzLnByaW50RXJyb3IoZXJyKTtcblxuICAgIGlmICh0aGlzLnNlbmRUb1NlcnZlcikge1xuICAgICAgY29uc3QgcmVxdWVzdENvbmZpZyA9IHtcbiAgICAgICAgZW5kcG9pbnQ6ICcvdjIvYWNjb3VudHMvbWUvYW5zd2Vycy9lcnJvcnMnLFxuICAgICAgICBhcGlLZXk6IHRoaXMuYXBpS2V5LFxuICAgICAgICB2ZXJzaW9uOiAyMDE5MDMwMSxcbiAgICAgICAgZW52aXJvbm1lbnQ6IHRoaXMuZW52aXJvbm1lbnQsXG4gICAgICAgIHBhcmFtczoge1xuICAgICAgICAgICdsaWJWZXJzaW9uJzogTElCX1ZFUlNJT04sXG4gICAgICAgICAgJ2V4cGVyaWVuY2VWZXJzaW9uJzogdGhpcy5leHBlcmllbmNlVmVyc2lvbixcbiAgICAgICAgICAnZXhwZXJpZW5jZUtleSc6IHRoaXMuZXhwZXJpZW5jZUtleSxcbiAgICAgICAgICAnZXJyb3InOiBlcnIudG9Kc29uKClcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIGNvbnN0IHJlcXVlc3QgPSBuZXcgQXBpUmVxdWVzdChyZXF1ZXN0Q29uZmlnLCB0aGlzLmdsb2JhbFN0b3JhZ2UpO1xuXG4gICAgICAvLyBUT0RPKGFtdWxsaW5ncyk6IFdlIHNob3VsZCBwcm9iYWJseSBjaGFuZ2UgdGhpcyBlbmRwb2ludCB0byBQT1NULFxuICAgICAgLy8gaWRlYWxseSB1c2luZyB0aGUgYmVhY29uIEFQSS4gU3RhY2sgdHJhY2VzIHdpbGwgbGlrZWx5IGVhc2lseSBoaXQgVVJMXG4gICAgICAvLyBsZW5ndGggbGltaXRzLlxuICAgICAgcmVxdWVzdC5nZXQoKVxuICAgICAgICAuY2F0Y2goY29uc29sZS5lcnIpO1xuICAgIH1cblxuICAgIHJldHVybiBlcnI7XG4gIH1cblxuICAvKipcbiAgICogcHJpbnRzIHRoZSBnaXZlbiBlcnJvciB0byB0aGUgYnJvd3NlciBjb25zb2xlXG4gICAqIEBwYXJhbSB7QW5zd2Vyc0Jhc2VFcnJvcn0gZXJyIFRoZSBlcnJvciB0byBiZSBwcmludGVkXG4gICAqL1xuICBwcmludEVycm9yIChlcnIpIHtcbiAgICBpZiAodGhpcy5wcmludFZlcmJvc2UpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoYGVycm9yOiAke2Vyci5lcnJvck1lc3NhZ2V9XG5jb2RlOiAke2Vyci5lcnJvckNvZGV9XG5ib3VuZGFyeTogJHtlcnIuYm91bmRhcnl9XG5zdGFjazogJHtlcnIuc3RhY2t9YCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoZXJyLnRvU3RyaW5nKCkpO1xuICAgIH1cbiAgfVxufVxuIiwiLyoqIEB0eXBlZGVmIHtpbXBvcnQoJy4uL3NlcnZpY2VzL2Vycm9ycmVwb3J0ZXJzZXJ2aWNlJykuZGVmYXVsdH0gRXJyb3JSZXBvcnRlclNlcnZpY2UgKi9cblxuLyoqXG4gKiBAaW1wbGVtZW50cyB7RXJyb3JSZXBvcnRlclNlcnZpY2V9XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvbnNvbGVFcnJvclJlcG9ydGVyIHtcbiAgLyoqIEBpbmhlcml0ZG9jICovXG4gIHJlcG9ydCAoZXJyKSB7XG4gICAgY29uc29sZS5lcnJvcihlcnIudG9TdHJpbmcoKSk7XG4gIH1cbn1cbiIsImltcG9ydCBTZWFyY2hQYXJhbXMgZnJvbSAnLi4vZG9tL3NlYXJjaHBhcmFtcyc7XG5pbXBvcnQgeyBBbnN3ZXJzU3RvcmFnZUVycm9yIH0gZnJvbSAnLi4vLi4vY29yZS9lcnJvcnMvZXJyb3JzJztcbmltcG9ydCB7IGVxdWl2YWxlbnRQYXJhbXMgfSBmcm9tICcuLi8uLi9jb3JlL3V0aWxzL3VybHV0aWxzJztcblxuLyoqIEBtb2R1bGUgUGVyc2lzdGVudFN0b3JhZ2UgKi9cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGVyc2lzdGVudFN0b3JhZ2Uge1xuICBjb25zdHJ1Y3RvciAoY29uZmlnID0ge30pIHtcbiAgICAvKipcbiAgICAgKiBUaGUgY3VycmVudCBwYXJhbXMgbW9kZWxcbiAgICAgKiBAdHlwZSB7U2VhcmNoUGFyYW1zfVxuICAgICAqL1xuICAgIHRoaXMuX3BhcmFtcyA9IG5ldyBTZWFyY2hQYXJhbXMod2luZG93LmxvY2F0aW9uLnNlYXJjaC5zdWJzdHJpbmcoMSkpO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGxpc3Qgb2YgbGlzdGVuZXJzIHRvIGV2ZXJ5IHN0b3JhZ2UgdXBkYXRlXG4gICAgICogQHR5cGUge2Z1bmN0aW9uW119XG4gICAgICovXG4gICAgdGhpcy5fdXBkYXRlTGlzdGVuZXIgPSBjb25maWcudXBkYXRlTGlzdGVuZXIgfHwgZnVuY3Rpb24gKCkge307XG5cbiAgICAvKipcbiAgICAgKiBUaGUgbGlzdCBvZiBsaXN0ZW5lcnMgdG8gc3RvcmFnZSByZXNldHNcbiAgICAgKiBAdHlwZSB7ZnVuY3Rpb25bXX1cbiAgICAgKi9cbiAgICB0aGlzLl9yZXNldExpc3RlbmVyID0gY29uZmlnLnJlc2V0TGlzdGVuZXIgfHwgZnVuY3Rpb24gKCkge307XG5cbiAgICB3aW5kb3cub25wb3BzdGF0ZSA9ICgpID0+IHtcbiAgICAgIHRoaXMuX3BhcmFtcyA9IG5ldyBTZWFyY2hQYXJhbXMod2luZG93LmxvY2F0aW9uLnNlYXJjaC5zdWJzdHJpbmcoMSkpO1xuICAgICAgdGhpcy5fY2FsbExpc3RlbmVyKHRoaXMuX3VwZGF0ZUxpc3RlbmVyKTtcbiAgICAgIHRoaXMuX2NhbGxMaXN0ZW5lcih0aGlzLl9yZXNldExpc3RlbmVyKTtcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIEluc2VydCB0aGUgZ2l2ZW4ga2V5L3ZhbHVlIHBhaXIgaW50byBzdG9yYWdlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSB0byBpbnNlcnQgdGhlIGRhdGEgaW5cbiAgICogQHBhcmFtIHsqfSBkYXRhIFRoZSBkYXRhIHRvIGluc2VydFxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHJlcGxhY2UgaGlzdG9yeSBpbnN0ZWFkIG9mIHB1c2hpbmcgbmV3IHN0YXRlXG4gICAqL1xuICBzZXQgKGtleSwgZGF0YSwgcmVwbGFjZUhpc3RvcnkgPSBmYWxzZSkge1xuICAgIGlmICh0eXBlb2Yga2V5ICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IEFuc3dlcnNTdG9yYWdlRXJyb3IoJ1N0b3JhZ2UgZGF0YSBrZXkgbXVzdCBiZSBhIHN0cmluZycsIGtleSwgZGF0YSk7XG4gICAgfVxuXG4gICAgbGV0IG5ld0RhdGEgPSBkYXRhO1xuICAgIGlmICh0eXBlb2YgZGF0YSAhPT0gJ3N0cmluZycpIHtcbiAgICAgIG5ld0RhdGEgPSBKU09OLnN0cmluZ2lmeShkYXRhKTtcbiAgICB9XG4gICAgdGhpcy5fcGFyYW1zLnNldChrZXksIG5ld0RhdGEpO1xuICAgIHRoaXMuX3VwZGF0ZUhpc3RvcnkocmVwbGFjZUhpc3RvcnkpO1xuICB9XG5cbiAgLyoqXG4gICAqIERlbGV0ZSB0aGUgZ2l2ZW4ga2V5IGZyb20gc3RvcmFnZVxuICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgdG8gZGVsZXRlXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gcmVwbGFjZSBoaXN0b3J5IGluc3RlYWQgb2YgcHVzaGluZyBuZXcgc3RhdGVcbiAgICovXG4gIGRlbGV0ZSAoa2V5LCByZXBsYWNlSGlzdG9yeSA9IGZhbHNlKSB7XG4gICAgdGhpcy5fcGFyYW1zLmRlbGV0ZShrZXkpO1xuICAgIHRoaXMuX3VwZGF0ZUhpc3RvcnkocmVwbGFjZUhpc3RvcnkpO1xuICB9XG5cbiAgX3VwZGF0ZUhpc3RvcnkgKHJlcGxhY2VIaXN0b3J5ID0gZmFsc2UpIHtcbiAgICBjb25zdCBjdXJyZW50UGFyYW1zID0gbmV3IFNlYXJjaFBhcmFtcyh3aW5kb3cubG9jYXRpb24uc2VhcmNoLnN1YnN0cmluZygxKSk7XG4gICAgaWYgKGVxdWl2YWxlbnRQYXJhbXModGhpcy5fcGFyYW1zLCBjdXJyZW50UGFyYW1zKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChyZXBsYWNlSGlzdG9yeSkge1xuICAgICAgd2luZG93Lmhpc3RvcnkucmVwbGFjZVN0YXRlKG51bGwsIG51bGwsIGA/JHt0aGlzLl9wYXJhbXMudG9TdHJpbmcoKX1gKTtcbiAgICB9IGVsc2Uge1xuICAgICAgd2luZG93Lmhpc3RvcnkucHVzaFN0YXRlKG51bGwsIG51bGwsIGA/JHt0aGlzLl9wYXJhbXMudG9TdHJpbmcoKX1gKTtcbiAgICB9XG4gICAgdGhpcy5fY2FsbExpc3RlbmVyKHRoaXMuX3VwZGF0ZUxpc3RlbmVyKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbnZva2UgdGhlIGdpdmVuIGxpc3Qgb2YgY2FsbGJhY2tzIHdpdGggdGhlIGN1cnJlbnQgc3RvcmFnZSBkYXRhXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb25bXX0gbGlzdGVuZXJzIFRoZSBjYWxsYmFja3MgdG8gaW52b2tlXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfY2FsbExpc3RlbmVyIChsaXN0ZW5lcikge1xuICAgIGxpc3RlbmVyKHRoaXMuZ2V0QWxsKCksIHRoaXMuX3BhcmFtcy50b1N0cmluZygpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgYWxsIHRoZSBrZXkvdmFsdWUgcGFpcnMgaW4gc3RvcmFnZVxuICAgKi9cbiAgZ2V0QWxsICgpIHtcbiAgICBjb25zdCBhbGxQYXJhbXMgPSB7fTtcbiAgICBmb3IgKGNvbnN0IFtrZXksIHZhbF0gb2YgdGhpcy5fcGFyYW1zLmVudHJpZXMoKSkge1xuICAgICAgYWxsUGFyYW1zW2tleV0gPSB2YWw7XG4gICAgfVxuICAgIHJldHVybiBhbGxQYXJhbXM7XG4gIH1cbn1cbiIsImltcG9ydCB7IEFuc3dlcnNDb25maWdFcnJvciB9IGZyb20gJy4uL2Vycm9ycy9lcnJvcnMnO1xuXG4vKiogQG1vZHVsZSBTZWFyY2hDb25maWcgKi9cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2VhcmNoQ29uZmlnIHtcbiAgY29uc3RydWN0b3IgKGNvbmZpZyA9IHt9KSB7XG4gICAgLyoqXG4gICAgICogVGhlIG1heCByZXN1bHRzIHBlciBzZWFyY2guXG4gICAgICogQWxzbyBkZWZpbmVzIHRoZSBudW1iZXIgb2YgcmVzdWx0cyBwZXIgcGFnZSwgaWYgcGFnaW5hdGlvbiBpcyBlbmFibGVkXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLmxpbWl0ID0gY29uZmlnLmxpbWl0IHx8IDIwO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHZlcnRpY2FsIGtleSB0byB1c2UgZm9yIGFsbCBzZWFyY2hlc1xuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgdGhpcy52ZXJ0aWNhbEtleSA9IGNvbmZpZy52ZXJ0aWNhbEtleSB8fCBudWxsO1xuXG4gICAgLyoqXG4gICAgICogQSBkZWZhdWx0IHNlYXJjaCB0byB1c2Ugb24gaW5pdGlhbGl6YXRpb24gZm9yIHZlcnRpY2FsIHNlYXJjaGVycywgd2hlbiB0aGUgdXNlciBoYXMndCBwcm92aWRlZCBhIHF1ZXJ5XG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLmRlZmF1bHRJbml0aWFsU2VhcmNoID0gY29uZmlnLmRlZmF1bHRJbml0aWFsU2VhcmNoO1xuXG4gICAgdGhpcy52YWxpZGF0ZSgpO1xuICAgIE9iamVjdC5mcmVlemUodGhpcyk7XG4gIH1cblxuICB2YWxpZGF0ZSAoKSB7XG4gICAgaWYgKHR5cGVvZiB0aGlzLmxpbWl0ICE9PSAnbnVtYmVyJyB8fCB0aGlzLmxpbWl0IDwgMSB8fCB0aGlzLmxpbWl0ID4gNTApIHtcbiAgICAgIHRocm93IG5ldyBBbnN3ZXJzQ29uZmlnRXJyb3IoJ1NlYXJjaCBMaW1pdCBtdXN0IGJlIGJldHdlZW4gMSBhbmQgNTAnLCAnU2VhcmNoQ29uZmlnJyk7XG4gICAgfVxuICB9XG59XG4iLCIvKiogQG1vZHVsZSBBdXRvQ29tcGxldGVEYXRhICovXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEF1dG9Db21wbGV0ZURhdGEge1xuICBjb25zdHJ1Y3RvciAoZGF0YSA9IHt9KSB7XG4gICAgdGhpcy5zZWN0aW9ucyA9IGRhdGEuc2VjdGlvbnMgfHwgW107XG4gICAgdGhpcy5xdWVyeUlkID0gZGF0YS5xdWVyeUlkIHx8ICcnO1xuICAgIHRoaXMuaW5wdXRJbnRlbnRzID0gZGF0YS5pbnB1dEludGVudHMgfHwgW107XG4gICAgT2JqZWN0LmZyZWV6ZSh0aGlzKTtcbiAgfVxuXG4gIHN0YXRpYyBmcm9tIChyZXNwb25zZSkge1xuICAgIGxldCBzZWN0aW9ucztcbiAgICBpZiAocmVzcG9uc2Uuc2VjdGlvbnMpIHtcbiAgICAgIHNlY3Rpb25zID0gcmVzcG9uc2Uuc2VjdGlvbnMubWFwKHMgPT4gKHtcbiAgICAgICAgbGFiZWw6IHMubGFiZWwsXG4gICAgICAgIHJlc3VsdHM6IHMucmVzdWx0cy5tYXAociA9PiBuZXcgQXV0b0NvbXBsZXRlUmVzdWx0KHIpKVxuICAgICAgfSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZWN0aW9ucyA9IFt7IHJlc3VsdHM6IHJlc3BvbnNlLnJlc3VsdHMubWFwKHIgPT4gbmV3IEF1dG9Db21wbGV0ZVJlc3VsdChyKSkgfV07XG4gICAgfVxuICAgIGxldCBpbnB1dEludGVudHMgPSByZXNwb25zZS5pbnB1dCA/IHJlc3BvbnNlLmlucHV0LnF1ZXJ5SW50ZW50cyA6IFtdO1xuICAgIHJldHVybiBuZXcgQXV0b0NvbXBsZXRlRGF0YSh7XG4gICAgICBzZWN0aW9ucyxcbiAgICAgIHF1ZXJ5SWQ6IHJlc3BvbnNlLnF1ZXJ5SWQsXG4gICAgICBpbnB1dEludGVudHMgfSk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIEF1dG9Db21wbGV0ZVJlc3VsdCB7XG4gIGNvbnN0cnVjdG9yIChkYXRhID0ge30pIHtcbiAgICB0aGlzLmZpbHRlciA9IGRhdGEuZmlsdGVyIHx8IHt9O1xuICAgIHRoaXMua2V5ID0gZGF0YS5rZXkgfHwgJyc7XG4gICAgdGhpcy5tYXRjaGVkU3Vic3RyaW5ncyA9IGRhdGEubWF0Y2hlZFN1YnN0cmluZ3MgfHwgW107XG4gICAgdGhpcy52YWx1ZSA9IGRhdGEudmFsdWUgfHwgJyc7XG4gICAgdGhpcy5zaG9ydFZhbHVlID0gZGF0YS5zaG9ydFZhbHVlIHx8IHRoaXMudmFsdWU7XG4gICAgdGhpcy5pbnRlbnRzID0gZGF0YS5xdWVyeUludGVudHMgfHwgW107XG4gICAgT2JqZWN0LmZyZWV6ZSh0aGlzKTtcbiAgfVxufVxuIiwiLyoqIEBtb2R1bGUgQXV0b0NvbXBsZXRlRGF0YVRyYW5zZm9ybWVyICovXG5cbmltcG9ydCBBdXRvQ29tcGxldGVEYXRhIGZyb20gJy4uL21vZGVscy9hdXRvY29tcGxldGVkYXRhJztcblxuLyoqXG4gKiBBIERhdGEgVHJhbnNmb3JtZXIgdGhhdCB0YWtlcyB0aGUgcmVzcG9uc2Ugb2JqZWN0IGZyb20gYSBBdXRvQ29tcGxldGUgcmVxdWVzdFxuICogQW5kIHRyYW5zZm9ybXMgaW4gdG8gYSBmcm9udC1lbmQgb3JpZW50ZWQgZGF0YSBzdHJ1Y3R1cmUgdGhhdCBvdXJcbiAqIGNvbXBvbmVudCBsaWJyYXJ5IGFuZCBjb3JlIHN0b3JhZ2UgdW5kZXJzdGFuZC5cbiAqXG4gKiBUT0RPKGJpbGx5KSBDcmVhdGUgb3VyIG93biBmcm9udC1lbmQgZGF0YSBtb2RlbHNcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQXV0b0NvbXBsZXRlRGF0YVRyYW5zZm9ybWVyIHtcbiAgc3RhdGljIGNsZWFuIChtb2R1bGVJZCwgZGF0YSkge1xuICAgIGlmIChkYXRhLnNlY3Rpb25zICYmIGRhdGEuc2VjdGlvbnMubGVuZ3RoID09PSAwKSB7XG4gICAgICBkZWxldGUgZGF0YS5zZWN0aW9ucztcbiAgICB9XG5cbiAgICBpZiAoZGF0YS5zZWN0aW9ucyAmJiBkYXRhLnNlY3Rpb25zLmxlbmd0aCA9PT0gMSAmJiBkYXRhLnNlY3Rpb25zWzBdLnJlc3VsdHMubGVuZ3RoID09PSAwKSB7XG4gICAgICBkZWxldGUgZGF0YS5zZWN0aW9ucztcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgW21vZHVsZUlkXTogZGF0YVxuICAgIH07XG4gIH1cblxuICBzdGF0aWMgdW5pdmVyc2FsIChyZXNwb25zZSkge1xuICAgIHJldHVybiBBdXRvQ29tcGxldGVEYXRhLmZyb20ocmVzcG9uc2UpO1xuICB9XG5cbiAgc3RhdGljIGZpbHRlciAocmVzcG9uc2UpIHtcbiAgICByZXR1cm4gQXV0b0NvbXBsZXRlRGF0YS5mcm9tKHJlc3BvbnNlKTtcbiAgfVxuXG4gIHN0YXRpYyB2ZXJ0aWNhbCAocmVzcG9uc2UpIHtcbiAgICByZXR1cm4gQXV0b0NvbXBsZXRlRGF0YS5mcm9tKHJlc3BvbnNlKTtcbiAgfVxufVxuIiwiLyoqIEBtb2R1bGUgQXV0b0NvbXBsZXRlQXBpICovXG5cbmltcG9ydCBBcGlSZXF1ZXN0IGZyb20gJy4uL2h0dHAvYXBpcmVxdWVzdCc7XG5pbXBvcnQgQXV0b0NvbXBsZXRlRGF0YVRyYW5zZm9ybWVyIGZyb20gJy4vYXV0b2NvbXBsZXRlZGF0YXRyYW5zZm9ybWVyJztcbmltcG9ydCB7IEFuc3dlcnNCYXNpY0Vycm9yLCBBbnN3ZXJzRW5kcG9pbnRFcnJvciB9IGZyb20gJy4uL2Vycm9ycy9lcnJvcnMnO1xuaW1wb3J0IHsgZ2V0Q2FjaGVkTGl2ZUFwaVVybCB9IGZyb20gJy4uL3V0aWxzL3VybHV0aWxzJztcblxuLyoqIEB0eXBlZGVmIHtpbXBvcnQoJy4vYXV0b2NvbXBsZXRlc2VydmljZScpLmRlZmF1bHR9IEF1dG9Db21wbGV0ZVNlcnZpY2UgKi9cblxuLyoqXG4gKiBBdXRvQ29tcGxldGVBcGkgZXhwb3NlcyBhbiBpbnRlcmZhY2UgZm9yIG5ldHdvcmsgcmVsYXRlZCBtYXR0ZXJzXG4gKiBmb3IgYWxsIHRoZSBhdXRvY29tcGxldGUgZW5kcG9pbnRzLlxuICpcbiAqIEBpbXBsZW1lbnRzIHtBdXRvQ29tcGxldGVTZXJ2aWNlfVxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBdXRvQ29tcGxldGVBcGkge1xuICBjb25zdHJ1Y3RvciAoY29uZmlnID0ge30sIGdsb2JhbFN0b3JhZ2UpIHtcbiAgICAvKipcbiAgICAgKiBUaGUgQVBJIEtleSB0byB1c2UgZm9yIHRoZSByZXF1ZXN0XG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIGlmICghY29uZmlnLmFwaUtleSkge1xuICAgICAgdGhyb3cgbmV3IEFuc3dlcnNCYXNpY0Vycm9yKCdBcGkgS2V5IGlzIHJlcXVpcmVkJywgJ0F1dG9Db21wbGV0ZScpO1xuICAgIH1cbiAgICB0aGlzLl9hcGlLZXkgPSBjb25maWcuYXBpS2V5O1xuXG4gICAgLyoqXG4gICAgICogVGhlIEFuc3dlcnMgS2V5IHRvIHVzZSBmb3IgdGhlIHJlcXVlc3RcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgaWYgKCFjb25maWcuZXhwZXJpZW5jZUtleSkge1xuICAgICAgdGhyb3cgbmV3IEFuc3dlcnNCYXNpY0Vycm9yKCdBbnN3ZXJzIEtleSBpcyByZXF1aXJlZCcsICdBdXRvQ29tcGxldGUnKTtcbiAgICB9XG4gICAgdGhpcy5fZXhwZXJpZW5jZUtleSA9IGNvbmZpZy5leHBlcmllbmNlS2V5O1xuXG4gICAgLyoqXG4gICAgICogVGhlIHZlcnNpb24gb2YgdGhlIEFQSSB0byBtYWtlIGEgcmVxdWVzdCB0b1xuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLl92ZXJzaW9uID0gY29uZmlnLnZlcnNpb24gfHwgMjAxOTAxMDEgfHwgMjAxOTAzMDE7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYW5zd2VycyBjb25maWcgdmVyc2lvbiB0byB1c2UgZm9yIGFsbCByZXF1ZXN0c1xuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLl9leHBlcmllbmNlVmVyc2lvbiA9IGNvbmZpZy5leHBlcmllbmNlVmVyc2lvbjtcblxuICAgIC8qKlxuICAgICAqIFRoZSBsb2NhbGUgdG8gdXNlIGZvciB0aGUgcmVxdWVzdFxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBpZiAoIWNvbmZpZy5sb2NhbGUpIHtcbiAgICAgIHRocm93IG5ldyBBbnN3ZXJzQmFzaWNFcnJvcignTG9jYWxlIGlzIHJlcXVpcmVkJywgJ0F1dG9Db21wbGV0ZScpO1xuICAgIH1cbiAgICB0aGlzLl9sb2NhbGUgPSBjb25maWcubG9jYWxlO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGdsb2JhbCBzdG9yYWdlIGluc3RhbmNlIG9mIHRoZSBleHBlcmllbmNlXG4gICAgICogQHR5cGUge0dsb2JhbFN0b3JhZ2V9XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBpZiAoIWdsb2JhbFN0b3JhZ2UpIHtcbiAgICAgIHRocm93IG5ldyBBbnN3ZXJzQmFzaWNFcnJvcignR2xvYmFsIHN0b3JhZ2UgaXMgcmVxdWlyZWQnLCAnQXV0b0NvbXBsZXRlJyk7XG4gICAgfVxuICAgIHRoaXMuX2dsb2JhbFN0b3JhZ2UgPSBnbG9iYWxTdG9yYWdlO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGVudmlyb25tZW50IG9mIHRoZSBBbnN3ZXJzIGV4cGVyaWVuY2VcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5fZW52aXJvbm1lbnQgPSBjb25maWcuZW52aXJvbm1lbnQ7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSB1cmwgZm9yIHRoZSBhdXRvY29tcGxldGUgQVBJIHJlcXVlc3RcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5fYmFzZVVybCA9IGdldENhY2hlZExpdmVBcGlVcmwodGhpcy5fZW52aXJvbm1lbnQpO1xuICB9XG5cbiAgLyoqIEBpbmhlcml0ZG9jICovXG4gIHF1ZXJ5RmlsdGVyIChpbnB1dCwgY29uZmlnKSB7XG4gICAgY29uc3QgcmVxdWVzdENvbmZpZyA9IHtcbiAgICAgIGVuZHBvaW50OiAnL3YyL2FjY291bnRzL21lL2Fuc3dlcnMvZmlsdGVyc2VhcmNoJyxcbiAgICAgIGFwaUtleTogdGhpcy5fYXBpS2V5LFxuICAgICAgdmVyc2lvbjogdGhpcy5fdmVyc2lvbixcbiAgICAgIGVudmlyb25tZW50OiB0aGlzLl9lbnZpcm9ubWVudCxcbiAgICAgIHBhcmFtczoge1xuICAgICAgICAnaW5wdXQnOiBpbnB1dCxcbiAgICAgICAgJ2V4cGVyaWVuY2VLZXknOiB0aGlzLl9leHBlcmllbmNlS2V5LFxuICAgICAgICAndmVyc2lvbic6IHRoaXMuX2V4cGVyaWVuY2VWZXJzaW9uLFxuICAgICAgICAndmVydGljYWxLZXknOiBjb25maWcudmVydGljYWxLZXksXG4gICAgICAgICdsb2NhbGUnOiB0aGlzLl9sb2NhbGUsXG4gICAgICAgICdzZWFyY2hfcGFyYW1ldGVycyc6IEpTT04uc3RyaW5naWZ5KGNvbmZpZy5zZWFyY2hQYXJhbWV0ZXJzKVxuICAgICAgfVxuICAgIH07XG4gICAgbGV0IHJlcXVlc3QgPSBuZXcgQXBpUmVxdWVzdChyZXF1ZXN0Q29uZmlnLCB0aGlzLl9nbG9iYWxTdG9yYWdlKTtcblxuICAgIHJldHVybiByZXF1ZXN0LmdldCgpXG4gICAgICAudGhlbihyZXNwb25zZSA9PiByZXNwb25zZS5qc29uKCkpXG4gICAgICAudGhlbihyZXNwb25zZSA9PiBBdXRvQ29tcGxldGVEYXRhVHJhbnNmb3JtZXIuZmlsdGVyKHJlc3BvbnNlLnJlc3BvbnNlKSlcbiAgICAgIC5jYXRjaChlcnJvciA9PiB7XG4gICAgICAgIHRocm93IG5ldyBBbnN3ZXJzRW5kcG9pbnRFcnJvcignRmlsdGVyIHNlYXJjaCByZXF1ZXN0IGZhaWxlZCcsICdBdXRvQ29tcGxldGUnLCBlcnJvcik7XG4gICAgICB9KTtcbiAgfVxuXG4gIC8qKiBAaW5oZXJpdGRvYyAqL1xuICBxdWVyeVZlcnRpY2FsIChpbnB1dCwgdmVydGljYWxLZXkpIHtcbiAgICBjb25zdCByZXF1ZXN0Q29uZmlnID0ge1xuICAgICAgZW5kcG9pbnQ6ICcvdjIvYWNjb3VudHMvbWUvYW5zd2Vycy92ZXJ0aWNhbC9hdXRvY29tcGxldGUnLFxuICAgICAgYXBpS2V5OiB0aGlzLl9hcGlLZXksXG4gICAgICB2ZXJzaW9uOiB0aGlzLl92ZXJzaW9uLFxuICAgICAgZW52aXJvbm1lbnQ6IHRoaXMuX2Vudmlyb25tZW50LFxuICAgICAgYmFzZVVybDogdGhpcy5fYmFzZVVybCxcbiAgICAgIHBhcmFtczoge1xuICAgICAgICAnaW5wdXQnOiBpbnB1dCxcbiAgICAgICAgJ2V4cGVyaWVuY2VLZXknOiB0aGlzLl9leHBlcmllbmNlS2V5LFxuICAgICAgICAndmVyc2lvbic6IHRoaXMuX2V4cGVyaWVuY2VWZXJzaW9uLFxuICAgICAgICAndmVydGljYWxLZXknOiB2ZXJ0aWNhbEtleSxcbiAgICAgICAgJ2xvY2FsZSc6IHRoaXMuX2xvY2FsZVxuICAgICAgfVxuICAgIH07XG4gICAgbGV0IHJlcXVlc3QgPSBuZXcgQXBpUmVxdWVzdChyZXF1ZXN0Q29uZmlnLCB0aGlzLl9nbG9iYWxTdG9yYWdlKTtcblxuICAgIHJldHVybiByZXF1ZXN0LmdldCgpXG4gICAgICAudGhlbihyZXNwb25zZSA9PiByZXNwb25zZS5qc29uKCkpXG4gICAgICAudGhlbihyZXNwb25zZSA9PiBBdXRvQ29tcGxldGVEYXRhVHJhbnNmb3JtZXIudmVydGljYWwocmVzcG9uc2UucmVzcG9uc2UpKVxuICAgICAgLmNhdGNoKGVycm9yID0+IHtcbiAgICAgICAgdGhyb3cgbmV3IEFuc3dlcnNFbmRwb2ludEVycm9yKCdWZXJ0aWNhbCBzZWFyY2ggcmVxdWVzdCBmYWlsZWQnLCAnQXV0b0NvbXBsZXRlJywgZXJyb3IpO1xuICAgICAgfSk7XG4gIH1cblxuICAvKiogQGluaGVyaXRkb2MgKi9cbiAgcXVlcnlVbml2ZXJzYWwgKHF1ZXJ5U3RyaW5nKSB7XG4gICAgY29uc3QgcmVxdWVzdENvbmZpZyA9IHtcbiAgICAgIGVuZHBvaW50OiAnL3YyL2FjY291bnRzL21lL2Fuc3dlcnMvYXV0b2NvbXBsZXRlJyxcbiAgICAgIGFwaUtleTogdGhpcy5fYXBpS2V5LFxuICAgICAgdmVyc2lvbjogdGhpcy5fdmVyc2lvbixcbiAgICAgIGVudmlyb25tZW50OiB0aGlzLl9lbnZpcm9ubWVudCxcbiAgICAgIGJhc2VVcmw6IHRoaXMuX2Jhc2VVcmwsXG4gICAgICBwYXJhbXM6IHtcbiAgICAgICAgJ2lucHV0JzogcXVlcnlTdHJpbmcsXG4gICAgICAgICdleHBlcmllbmNlS2V5JzogdGhpcy5fZXhwZXJpZW5jZUtleSxcbiAgICAgICAgJ3ZlcnNpb24nOiB0aGlzLl9leHBlcmllbmNlVmVyc2lvbixcbiAgICAgICAgJ2xvY2FsZSc6IHRoaXMuX2xvY2FsZVxuICAgICAgfVxuICAgIH07XG4gICAgbGV0IHJlcXVlc3QgPSBuZXcgQXBpUmVxdWVzdChyZXF1ZXN0Q29uZmlnLCB0aGlzLl9nbG9iYWxTdG9yYWdlKTtcblxuICAgIHJldHVybiByZXF1ZXN0LmdldCgpXG4gICAgICAudGhlbihyZXNwb25zZSA9PiByZXNwb25zZS5qc29uKCkpXG4gICAgICAudGhlbihyZXNwb25zZSA9PiBBdXRvQ29tcGxldGVEYXRhVHJhbnNmb3JtZXIudW5pdmVyc2FsKHJlc3BvbnNlLnJlc3BvbnNlKSlcbiAgICAgIC5jYXRjaChlcnJvciA9PiB7XG4gICAgICAgIHRocm93IG5ldyBBbnN3ZXJzRW5kcG9pbnRFcnJvcignVW5pdmVyc2FsIHNlYXJjaCByZXF1ZXN0IGZhaWxlZCcsICdBdXRvQ29tcGxldGUnLCBlcnJvcik7XG4gICAgICB9KTtcbiAgfVxufVxuIiwiaW1wb3J0IEF1dG9Db21wbGV0ZURhdGEsIHsgQXV0b0NvbXBsZXRlUmVzdWx0IH0gZnJvbSAnLi4vbW9kZWxzL2F1dG9jb21wbGV0ZWRhdGEnO1xuXG4vKiogQHR5cGVkZWYge2ltcG9ydCgnLi4vc2VydmljZXMvYXV0b2NvbXBsZXRlc2VydmljZScpLmRlZmF1bHR9IEF1dG9Db21wbGV0ZVNlcnZpY2UgKi9cblxuY29uc3QgdW5pdmVyc2FsT3B0aW9ucyA9IFtcbiAgJ3doYXQgaXMgeWV4dCcsXG4gICd3aG8gaXMgdGhlIGNlbyBvZiB5ZXh0J1xuXTtcblxuY29uc3QgdmVydGljYWxPcHRpb25zID0gW1xuICAnbmVhciBtZScsXG4gICdpbiBuZXcgeW9yaycsXG4gICdhdmFpbGFibGUgbm93J1xuXTtcblxuLyoqXG4gKiBNb2NrQXV0b0NvbXBsZXRlU2VydmljZSBzZXJ2ZXMgYXV0b2NvbXBsZXRlIHF1ZXJpZXMgd2l0aCBtb2NrIGRhdGFcbiAqXG4gKiBAaW1wbGVtZW50cyB7QXV0b0NvbXBsZXRlU2VydmljZX1cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTW9ja0F1dG9Db21wbGV0ZVNlcnZpY2Uge1xuICAvKiogQGluaGVyaXRkb2MgKi9cbiAgcXVlcnlGaWx0ZXIgKGlucHV0LCBjb25maWcpIHtcbiAgICAvLyBUT0RPKGFtdWxsaW5ncyk6IFNpbXVsYXRlIGZpbHRlciBzZWFyY2gsIHdpdGggc2VjdGlvbnNcbiAgICByZXR1cm4gZW1wdHlSZXN1bHRzKCk7XG4gIH1cblxuICAvKiogQGluaGVyaXRkb2MgKi9cbiAgcXVlcnlWZXJ0aWNhbCAoaW5wdXQsIHZlcnRpY2FsS2V5KSB7XG4gICAgcmV0dXJuIGZpbHRlck9wdGlvbnMoaW5wdXQsIHZlcnRpY2FsT3B0aW9uc1xuICAgICAgLm1hcChvcHQgPT4gYCR7dmVydGljYWxLZXl9ICR7b3B0fWApXG4gICAgICAuY29uY2F0KHVuaXZlcnNhbE9wdGlvbnMpXG4gICAgKTtcbiAgfVxuXG4gIC8qKiBAaW5oZXJpdGRvYyAqL1xuICBxdWVyeVVuaXZlcnNhbCAoaW5wdXQpIHtcbiAgICByZXR1cm4gZmlsdGVyT3B0aW9ucyhpbnB1dCwgdW5pdmVyc2FsT3B0aW9ucyk7XG4gIH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gaW5wdXQgUXVlcnkgc3RyaW5nXG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBvcHRpb25zIEhhcmRjb2RlZCBhdXRvY29tcGxldGUgb3B0aW9uc1xuICogQHJldHVybnMge1Byb21pc2U8QXV0b0NvbXBsZXRlRGF0YT59XG4gKi9cbmZ1bmN0aW9uIGZpbHRlck9wdGlvbnMgKGlucHV0LCBvcHRpb25zKSB7XG4gIGlmIChpbnB1dC5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gZW1wdHlSZXN1bHRzKCk7XG4gIH1cblxuICBjb25zdCBsb3dlcmNhc2UgPSBpbnB1dC50b0xvd2VyQ2FzZSgpO1xuICBjb25zdCByZXN1bHRzID0gb3B0aW9uc1xuICAgIC5maWx0ZXIob3B0ID0+IG9wdC5pbmNsdWRlcyhsb3dlcmNhc2UpKVxuICAgIC5tYXAob3B0ID0+IG5ldyBBdXRvQ29tcGxldGVSZXN1bHQoe1xuICAgICAgdmFsdWU6IG9wdCxcbiAgICAgIG1hdGNoZWRTdWJzdHJpbmdzOiBbe1xuICAgICAgICBvZmZzZXQ6IG9wdC5pbmRleE9mKGxvd2VyY2FzZSksXG4gICAgICAgIGxlbmd0aDogbG93ZXJjYXNlLmxlbmd0aFxuICAgICAgfV1cbiAgICB9KSk7XG4gIHJldHVybiBQcm9taXNlLnJlc29sdmUobmV3IEF1dG9Db21wbGV0ZURhdGEoe1xuICAgIHNlY3Rpb25zOiBbeyByZXN1bHRzIH1dLFxuICAgIHF1ZXJ5SWQ6IHJhbmRvbVN0cmluZygpXG4gIH0pKTtcbn1cblxuLyoqXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxBdXRvQ29tcGxldGVEYXRhPn1cbiAqL1xuZnVuY3Rpb24gZW1wdHlSZXN1bHRzICgpIHtcbiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShuZXcgQXV0b0NvbXBsZXRlRGF0YSh7XG4gICAgc2VjdGlvbnM6IFt7fV0sXG4gICAgcXVlcnlJZDogcmFuZG9tU3RyaW5nKClcbiAgfSkpO1xufVxuXG4vKipcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIHJhbmRvbVN0cmluZyAoKSB7XG4gIHJldHVybiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHJpbmcoMik7XG59XG4iLCIvKiogQG1vZHVsZSBRdWVzdGlvbkFuc3dlckFwaSAqL1xuXG5pbXBvcnQgQXBpUmVxdWVzdCBmcm9tICcuLi9odHRwL2FwaXJlcXVlc3QnO1xuaW1wb3J0IHsgUFJPRFVDVElPTiB9IGZyb20gJy4uL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBBbnN3ZXJzQmFzaWNFcnJvciwgQW5zd2Vyc0VuZHBvaW50RXJyb3IgfSBmcm9tICcuLi9lcnJvcnMvZXJyb3JzJztcbmltcG9ydCB7IGdldEtub3dsZWRnZUFwaVVybCB9IGZyb20gJy4uL3V0aWxzL3VybHV0aWxzJztcblxuLyoqIEB0eXBlZGVmIHtpbXBvcnQoJy4vcXVlc3Rpb25hbnN3ZXJzZXJ2aWNlJykuZGVmYXVsdH0gUXVlc3Rpb25BbnN3ZXJTZXJ2aWNlICovXG5cbi8qKlxuICogUXVlc3Rpb25BbnN3ZXJBcGkgc3VibWl0cyBxdWVzdGlvbnMgdmlhIHRoZSBRJkEgUkVTVCBBUElcbiAqXG4gKiBAaW1wbGVtZW50cyB7UXVlc3Rpb25BbnN3ZXJTZXJ2aWNlfVxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBRdWVzdGlvbkFuc3dlckFwaSB7XG4gIGNvbnN0cnVjdG9yIChjb25maWcgPSB7fSwgZ2xvYmFsU3RvcmFnZSkge1xuICAgIC8qKlxuICAgICAqIFRoZSBBUEkgS2V5IHRvIHVzZSBmb3IgdGhlIHJlcXVlc3RcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgaWYgKCFjb25maWcuYXBpS2V5KSB7XG4gICAgICB0aHJvdyBuZXcgQW5zd2Vyc0Jhc2ljRXJyb3IoJ0FwaSBLZXkgaXMgcmVxdWlyZWQnLCAnUXVlc3Rpb25BbnN3ZXJBcGknKTtcbiAgICB9XG4gICAgdGhpcy5fYXBpS2V5ID0gY29uZmlnLmFwaUtleTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBnbG9iYWwgc3RvcmFnZSBpbnN0YW5jZSBvZiB0aGUgZXhwZXJpZW5jZVxuICAgICAqIEB0eXBlIHtHbG9iYWxTdG9yYWdlfVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgaWYgKCFnbG9iYWxTdG9yYWdlKSB7XG4gICAgICB0aHJvdyBuZXcgQW5zd2Vyc0Jhc2ljRXJyb3IoJ0dsb2JhbCBzdG9yYWdlIGlzIHJlcXVpcmVkJywgJ1F1ZXN0aW9uQW5zd2VyQXBpJyk7XG4gICAgfVxuICAgIHRoaXMuX2dsb2JhbFN0b3JhZ2UgPSBnbG9iYWxTdG9yYWdlO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGVudmlyb25tZW50IG9mIHRoZSBBbnN3ZXJzIGV4cGVyaWVuY2VcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5fZW52aXJvbm1lbnQgPSBjb25maWcuZW52aXJvbm1lbnQgfHwgUFJPRFVDVElPTjtcbiAgfVxuXG4gIC8qKiBAaW5oZXJpdGRvYyAqL1xuICBzdWJtaXRRdWVzdGlvbiAocXVlc3Rpb24pIHtcbiAgICBjb25zdCByZXF1ZXN0Q29uZmlnID0ge1xuICAgICAgYmFzZVVybDogZ2V0S25vd2xlZGdlQXBpVXJsKHRoaXMuX2Vudmlyb25tZW50KSxcbiAgICAgIGVuZHBvaW50OiAnL3YyL2FjY291bnRzL21lL2NyZWF0ZVF1ZXN0aW9uJyxcbiAgICAgIGFwaUtleTogdGhpcy5fYXBpS2V5LFxuICAgICAgcGFyYW1zOiB7XG4gICAgICAgICdlbnRpdHlJZCc6IHF1ZXN0aW9uLmVudGl0eUlkLFxuICAgICAgICAnc2l0ZSc6IHF1ZXN0aW9uLnNpdGUsXG4gICAgICAgICduYW1lJzogcXVlc3Rpb24ubmFtZSxcbiAgICAgICAgJ2VtYWlsJzogcXVlc3Rpb24uZW1haWwsXG4gICAgICAgICdxdWVzdGlvblRleHQnOiBxdWVzdGlvbi5xdWVzdGlvblRleHQsXG4gICAgICAgICdxdWVzdGlvbkRlc2NyaXB0aW9uJzogcXVlc3Rpb24ucXVlc3Rpb25EZXNjcmlwdGlvbixcbiAgICAgICAgJ3F1ZXN0aW9uTGFuZ3VhZ2UnOiBxdWVzdGlvbi5xdWVzdGlvbkxhbmd1YWdlXG4gICAgICB9XG4gICAgfTtcbiAgICBsZXQgcmVxdWVzdCA9IG5ldyBBcGlSZXF1ZXN0KHJlcXVlc3RDb25maWcsIHRoaXMuX2dsb2JhbFN0b3JhZ2UpO1xuXG4gICAgcmV0dXJuIHJlcXVlc3QucG9zdCh7XG4gICAgICBtb2RlOiAnY29ycycsXG4gICAgICBoZWFkZXJzOiB7XG4gICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcbiAgICAgIH1cbiAgICB9KVxuICAgICAgLnRoZW4ocmVzcG9uc2UgPT4gcmVzcG9uc2UuanNvbigpKVxuICAgICAgLmNhdGNoKGVycm9yID0+IHtcbiAgICAgICAgdGhyb3cgbmV3IEFuc3dlcnNFbmRwb2ludEVycm9yKFxuICAgICAgICAgICdRdWVzdGlvbiBzdWJtaXQgZmFpbGVkJyxcbiAgICAgICAgICAnUXVlc3Rpb25BbnN3ZXJBcGknLFxuICAgICAgICAgIGVycm9yKTtcbiAgICAgIH0pO1xuICB9XG59XG4iLCIvKiogQG1vZHVsZSBNb2NrUXVlc3Rpb25BbnN3ZXJTZXJ2aWNlICovXG5cbi8qKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi9zZXJ2aWNlcy9xdWVzdGlvbmFuc3dlcnNlcnZpY2UnKS5kZWZhdWx0fSBRdWVzdGlvbkFuc3dlclNlcnZpY2UgKi9cblxuLyoqXG4gKiBAaW1wbGVtZW50cyB7UXVlc3Rpb25BbnN3ZXJTZXJ2aWNlfVxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNb2NrUXVlc3Rpb25BbnN3ZXJTZXJ2aWNlIHtcbiAgLyoqIEBpbmhlcml0ZG9jICovXG4gIHN1Ym1pdFF1ZXN0aW9uIChxdWVzdGlvbikge1xuICAgIC8vIFRPRE8oYW11bGxpbmdzKTogTWFrZSBhY3R1YWwgcmVzcG9uc2Ugb2JqZWN0IG9uY2Ugd2UncmUgdXNpbmcgaXQgZm9yXG4gICAgLy8gc29tZXRoaW5nXG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh7fSk7XG4gIH1cbn1cbiIsIi8qIGdsb2JhbCBmZXRjaCAqL1xuXG4vKiogQHR5cGVkZWYge2ltcG9ydCgnLi4vbW9kZWxzL3NlY3Rpb24nKS5kZWZhdWx0fSBTZWN0aW9uICovXG4vKiogQHR5cGVkZWYge2ltcG9ydCgnLi4vc2VydmljZXMvc2VhcmNoc2VydmljZScpLmRlZmF1bHR9IFNlYXJjaFNlcnZpY2UgKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBSZXN1bHREYXRhXG4gKiBAcHJvcGVydHkge09iamVjdH0gZGF0YVxuICogQHByb3BlcnR5IHtzdHJpbmcgfSBodG1sVGl0bGVcbiAqL1xuXG4vKipcbiAqIEBjYWxsYmFjayBSZXN1bHRzTW9kaWZpZXJcbiAqIEBwYXJhbSB7UmVzdWx0RGF0YVtdfSByZXN1bHRzXG4gKiBAcmV0dXJucyB7UmVzdWx0RGF0YVtdfVxuICovXG5cbi8qKlxuICogQGNhbGxiYWNrIE1vY2tEYXRhQ29uc3VtZXJcbiAqIEBwYXJhbSB7U2VjdGlvbltdfSBzZWN0aW9uc1xuICogQHJldHVybnMge1Byb21pc2U8T2JqZWN0Pn1cbiAqL1xuXG5jb25zdCBBUkJJVFJBUllfQlVTSU5FU1NfSUQgPSA5MTk4NzE7XG5cbi8qKlxuICogQGltcGxlbWVudHMge1NlYXJjaFNlcnZpY2V9XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1vY2tTZWFyY2hTZXJ2aWNlIHtcbiAgY29uc3RydWN0b3IgKCkge1xuICAgIC8qKlxuICAgICAqIEB0eXBlIHtQcm9taXNlPHN0cmluZz59XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLl9nZXRNb2NrRGF0YUpzb24gPSBmZXRjaCgnaHR0cHM6Ly9hc3NldHMuc2l0ZXNjZG4ubmV0L2Fuc3dlcnMvdGVzdGRhdGEvc2VhcmNoL21vY2tkYXRhX3YxLmpzb24nKVxuICAgICAgLnRoZW4ocmVzcCA9PiByZXNwLnRleHQoKSlcbiAgICAgIC5jYXRjaChjb25zb2xlLmVycm9yKTtcbiAgfVxuXG4gIC8qKiBAaW5oZXJpdGRvYyAqL1xuICB2ZXJ0aWNhbFNlYXJjaCAodmVydGljYWxLZXksIHsgaW5wdXQsIGZpbHRlciwgZmFjZXRGaWx0ZXIsIGxpbWl0LCBvZmZzZXQsIGlkLCBnZW9sb2NhdGlvbiwgaXNEeW5hbWljRmlsdGVyc0VuYWJsZWQsIHNraXBTcGVsbENoZWNrLCBxdWVyeVRyaWdnZXIgfSkge1xuICAgIHJldHVybiB0aGlzLnVzZU1vY2tEYXRhKHNlY3Rpb25zID0+IHtcbiAgICAgIGlmIChpbnB1dCA9PT0gJycpIHtcbiAgICAgICAgcmV0dXJuIGRlbGF5ZWRSZXNwb25zZShjb25zdHJ1Y3RWZXJ0aWNhbFJlc3BvbnNlKHtcbiAgICAgICAgICByZXN1bHRzOiBbXSxcbiAgICAgICAgICBhcHBsaWVkUXVlcnlGaWx0ZXJzOiBbXVxuICAgICAgICB9KSk7XG4gICAgICB9XG5cbiAgICAgIC8vIEVpdGhlciBmaW5kIGEgc2VjdGlvbiB3aXRoIG1hdGNoaW5nIElELCBvciBwaWNrIG9uZSBhdCByYW5kb21cbiAgICAgIGxldCBzZWN0aW9uID0gc2VjdGlvbnMuZmluZChcbiAgICAgICAgdmVydGljYWxNb2R1bGUgPT4gdmVydGljYWxLZXkgPT09IHZlcnRpY2FsTW9kdWxlWyd2ZXJ0aWNhbENvbmZpZ0lkJ11cbiAgICAgICk7XG4gICAgICBpZiAoc2VjdGlvbiA9PSBudWxsKSB7XG4gICAgICAgIHNlY3Rpb24gPSBzZWN0aW9uc1tNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBzZWN0aW9ucy5sZW5ndGgpXTtcbiAgICAgIH1cblxuICAgICAgbW9kaWZ5UmVzdWx0cyhzZWN0aW9uLCBnZXRSZXN1bHRzRmlsdGVyZXIoaW5wdXQpKTtcbiAgICAgIGlmIChvZmZzZXQgIT0gbnVsbCAmJiBsaW1pdCAhPSBudWxsKSB7XG4gICAgICAgIG1vZGlmeVJlc3VsdHMoc2VjdGlvbiwgZnVuY3Rpb24gbGltaXQgKHJlc3VsdHMpIHtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0cy5zbGljZShvZmZzZXQsIG9mZnNldCArIGxpbWl0KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHJlc3AgPSBjb25zdHJ1Y3RWZXJ0aWNhbFJlc3BvbnNlKHNlY3Rpb24pO1xuICAgICAgcmV0dXJuIGRlbGF5ZWRSZXNwb25zZShyZXNwKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKiBAaW5oZXJpdGRvYyAqL1xuICB1bml2ZXJzYWxTZWFyY2ggKHF1ZXJ5U3RyaW5nLCBwYXJhbXMpIHtcbiAgICByZXR1cm4gdGhpcy51c2VNb2NrRGF0YShzZWN0aW9ucyA9PiB7XG4gICAgICBpZiAocXVlcnlTdHJpbmcgPT09ICcnKSB7XG4gICAgICAgIHJldHVybiBkZWxheWVkUmVzcG9uc2UoY29uc3RydWN0VW5pdmVyc2FsUmVzcG9uc2UoW10pKTtcbiAgICAgIH1cblxuICAgICAgc2VjdGlvbnMuZm9yRWFjaChzZWN0aW9uID0+IHtcbiAgICAgICAgbW9kaWZ5UmVzdWx0cyhzZWN0aW9uLCBnZXRSZXN1bHRzRmlsdGVyZXIocXVlcnlTdHJpbmcpKTtcbiAgICAgIH0pO1xuXG4gICAgICBzZWN0aW9ucyA9IHNlY3Rpb25zLmZpbHRlcihzZWN0aW9uID0+IHtcbiAgICAgICAgcmV0dXJuIHNlY3Rpb24ucmVzdWx0cy5sZW5ndGggPiAwO1xuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IHJlc3AgPSBjb25zdHJ1Y3RVbml2ZXJzYWxSZXNwb25zZShzZWN0aW9ucyk7XG4gICAgICByZXR1cm4gZGVsYXllZFJlc3BvbnNlKHJlc3ApO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7TW9ja0RhdGFDb25zdW1lcn0gY29uc3VtZXJcbiAgICogQHJldHVybnMge1Byb21pc2U8T2JqZWN0Pn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHVzZU1vY2tEYXRhIChjb25zdW1lcikge1xuICAgIHJldHVybiB0aGlzLl9nZXRNb2NrRGF0YUpzb24udGhlbihKU09OLnBhcnNlKS50aGVuKGNvbnN1bWVyKTtcbiAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBxdWVyeVN0cmluZ1xuICogQHJldHVybiB7UmVzdWx0c01vZGlmaWVyfVxuICovXG5mdW5jdGlvbiBnZXRSZXN1bHRzRmlsdGVyZXIgKHF1ZXJ5U3RyaW5nKSB7XG4gIHJldHVybiByZXN1bHRzID0+IHJlc3VsdHMuZmlsdGVyKHJlc3VsdCA9PiB7XG4gICAgaWYgKHJlc3VsdC5odG1sVGl0bGUgJiYgcmVzdWx0Lmh0bWxUaXRsZS50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKHF1ZXJ5U3RyaW5nKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGZvciAoY29uc3QgcHJvcCBpbiByZXN1bHQuZGF0YSkge1xuICAgICAgY29uc3QgdmFsID0gcmVzdWx0LmRhdGFbcHJvcF07XG4gICAgICBpZiAodHlwZW9mIHZhbCA9PT0gJ3N0cmluZycgJiYgdmFsLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMocXVlcnlTdHJpbmcpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH0pO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7U2VjdGlvbn0gc2VjdGlvblxuICogQHBhcmFtIHtSZXN1bHRzTW9kaWZpZXJ9IG1vZGlmeUZuXG4gKi9cbmZ1bmN0aW9uIG1vZGlmeVJlc3VsdHMgKHNlY3Rpb24sIG1vZGlmeUZuKSB7XG4gIHNlY3Rpb24ucmVzdWx0cyA9IG1vZGlmeUZuKHNlY3Rpb24ucmVzdWx0cyk7XG59XG5cbi8qKlxuICogQHBhcmFtIHtTZWN0aW9uW119IHNlY3Rpb25zIEEgbGlzdCBvZiBtb2NrIHNlY3Rpb24gZGF0YVxuICogQHJldHVybnMge09iamVjdH0gQSBtb2NrIEFuc3dlcnNBcGkgcmVzcG9uc2VcbiAqL1xuZnVuY3Rpb24gY29uc3RydWN0VW5pdmVyc2FsUmVzcG9uc2UgKHNlY3Rpb25zKSB7XG4gIC8vIFRPRE8oYW11bGxpbmdzKTogc3BlbGxjaGVjaywgZ2VvLCBmaWx0ZXJzXG4gIC8vIFRPRE8oYW11bGxpbmdzKTogRmFrZSBlbmNvZGVkU3RhdGUgb25jZSB0aGUgU0RLIHVzZXMgaXRcbiAgc2VjdGlvbnMgPSBzZWN0aW9ucy5tYXAoZmlsbFNlY3Rpb25GaWVsZHMpO1xuICByZXR1cm4ge1xuICAgIG1ldGE6IHtcbiAgICAgIHV1aWQ6IHV1aWRWNCgpLFxuICAgICAgZXJyb3JzOiBbXVxuICAgIH0sXG4gICAgcmVzcG9uc2U6IHtcbiAgICAgIGJ1c2luZXNzSWQ6IEFSQklUUkFSWV9CVVNJTkVTU19JRCxcbiAgICAgIG1vZHVsZXM6IHNlY3Rpb25zLFxuICAgICAgZmFpbGVkVmVydGljYWxzOiBbXSxcbiAgICAgIHF1ZXJ5SWQ6IHV1aWRWNCgpLFxuICAgICAgc2VhcmNoSW50ZW50czogW11cbiAgICB9XG4gIH07XG59XG5cbi8qKlxuICogQHBhcmFtIHtTZWN0aW9ufSBzZWN0aW9uIEEgbW9jayBzZWN0aW9uIGRhdGFcbiAqIEByZXR1cm5zIHtPYmplY3R9IEEgbW9jayBBbnN3ZXJzQXBpIHJlc3BvbnNlXG4gKi9cbmZ1bmN0aW9uIGNvbnN0cnVjdFZlcnRpY2FsUmVzcG9uc2UgKHNlY3Rpb24pIHtcbiAgLy8gVE9ETyhhbXVsbGluZ3MpOiBzcGVsbGNoZWNrLCBnZW8sIGZpbHRlcnNcbiAgLy8gVE9ETyhhbXVsbGluZ3MpOiBGYWtlIGVuY29kZWRTdGF0ZSBvbmNlIHRoZSBTREsgdXNlcyBpdFxuICBzZWN0aW9uID0gZmlsbFNlY3Rpb25GaWVsZHMoc2VjdGlvbik7XG4gIHJldHVybiB7XG4gICAgbWV0YToge1xuICAgICAgdXVpZDogdXVpZFY0KCksXG4gICAgICBlcnJvcnM6IFtdXG4gICAgfSxcbiAgICByZXNwb25zZTogT2JqZWN0LmFzc2lnbihzZWN0aW9uLCB7XG4gICAgICBidXNpbmVzc0lkOiBBUkJJVFJBUllfQlVTSU5FU1NfSUQsXG4gICAgICBxdWVyeUlkOiB1dWlkVjQoKSxcbiAgICAgIHNlYXJjaEludGVudHM6IFtdXG4gICAgfSlcbiAgfTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge1NlY3Rpb259XG4gKiBAcmV0dXJucyB7U2VjdGlvbn1cbiAqL1xuZnVuY3Rpb24gZmlsbFNlY3Rpb25GaWVsZHMgKHNlY3Rpb24pIHtcbiAgcmV0dXJuIHtcbiAgICB2ZXJ0aWNhbENvbmZpZ0lkOiBzZWN0aW9uLnZlcnRpY2FsQ29uZmlnSWQsXG4gICAgcmVzdWx0c0NvdW50OiBzZWN0aW9uLnJlc3VsdHMubGVuZ3RoLFxuICAgIGVuY29kZWRTdGF0ZTogJycsXG4gICAgcmVzdWx0czogc2VjdGlvbi5yZXN1bHRzLFxuICAgIGFwcGxpZWRRdWVyeUZpbHRlcnM6IHNlY3Rpb24uYXBwbGllZFF1ZXJ5RmlsdGVycyxcbiAgICBxdWVyeUR1cmF0aW9uTWlsbGlzOiByYW5kb21JbnQoNTAsIDEwMDApLFxuICAgIGZhY2V0czogc2VjdGlvbi5mYWNldHMsXG4gICAgc291cmNlOiBzZWN0aW9uLnNvdXJjZVxuICB9O1xufVxuXG4vKipcbiAqIEBwYXJhbSB7T2JqZWN0fSByZXNwXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxPYmplY3Q+fVxuICovXG5mdW5jdGlvbiBkZWxheWVkUmVzcG9uc2UgKHJlc3ApIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgcmVzb2x2ZShyZXNwKTtcbiAgICB9LCByYW5kb21JbnQoMjUwLCAxMDAwKSk7XG4gIH0pO1xufVxuXG4vKipcbiAqIENvZGUtZ29sZi15IGJ1dCBsZWdpdCBiYXNpYyBVVUlEIHY0IGltcGxlbWVudGF0aW9uLiBOb3QgY3J5cHRvZ3JhcGhpY2FsbHkgc2VjdXJlLlxuICogRnJvbSBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9qZWQvOTgyODgzXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIHY0LWNvbXBsaWFudCBVVUlEXG4gKi9cbmZ1bmN0aW9uIHV1aWRWNCAoKSB7XG4gIHJldHVybiAoZnVuY3Rpb24gYiAoYSkgeyByZXR1cm4gYSA/IChhIF4gTWF0aC5yYW5kb20oKSAqIDE2ID4+IGEgLyA0KS50b1N0cmluZygxNikgOiAoWzFlN10gKyAtMWUzICsgLTRlMyArIC04ZTMgKyAtMWUxMSkucmVwbGFjZSgvWzAxOF0vZywgYik7IH0pKCk7XG59XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IG1pbiBpbmNsdXNpdmVcbiAqIEBwYXJhbSB7bnVtYmVyfSBtYXggZXhjbHVzaXZlXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBBIHJhbmRvbSBpbnRlZ2VyIGluIHRoZSBzcGVjaWZpZWQgcmFuZ2VcbiAqL1xuZnVuY3Rpb24gcmFuZG9tSW50IChtaW4sIG1heCkge1xuICByZXR1cm4gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKG1heCAtIG1pbikgKyBtaW4pO1xufVxuIiwiaW1wb3J0IFNlYXJjaFBhcmFtcyBmcm9tICcuLi9kb20vc2VhcmNocGFyYW1zJztcblxuZXhwb3J0IGZ1bmN0aW9uIGdldFVybFBhcmFtcyAoKSB7XG4gIHJldHVybiBuZXcgU2VhcmNoUGFyYW1zKHdpbmRvdy5sb2NhdGlvbi5zZWFyY2guc3Vic3RyaW5nKDEpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldERlZmF1bHRUYWJPcmRlciAodGFic0NvbmZpZywgdXJsUGFyYW1zKSB7XG4gIGxldCB0YWJPcmRlciA9IFtdO1xuICAvLyBVc2UgdGhlIG9yZGVyaW5nIGZyb20gdGhlIFVSTCBhcyB0aGUgcHJpbWFyeSBjb25maWd1cmF0aW9uXG4gIC8vIEFuZCB0aGVuIG1lcmdlIGl0IHdpdGggdGhlIGxvY2FsIGNvbmZpZ3VyYXRpb24sIGlmIHByb3ZpZGVkLlxuICBpZiAodXJsUGFyYW1zICYmIHVybFBhcmFtcy5oYXMoJ3RhYk9yZGVyJykpIHtcbiAgICB0YWJPcmRlciA9IHVybFBhcmFtcy5nZXQoJ3RhYk9yZGVyJykuc3BsaXQoJywnKTtcbiAgfVxuICBmb3IgKGNvbnN0IHRhYiBvZiB0YWJzQ29uZmlnKSB7XG4gICAgY29uc3QgdmVydGljYWxLZXlPclVybCA9IHRhYi52ZXJ0aWNhbEtleSB8fCB0YWIudXJsO1xuICAgIC8vIEF2b2lkIGR1cGxpY2F0ZXMgaWYgY29uZmlnIHdhcyBwcm92aWRlZCBmcm9tIFVSTFxuICAgIGlmICh0YWJPcmRlci5pbmNsdWRlcyh2ZXJ0aWNhbEtleU9yVXJsKSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLy8gaXNGaXJzdCBzaG91bGQgYWx3YXlzIGJlIHRoZSBmaXJzdCBlbGVtZW50IGluIHRoZSBsaXN0XG4gICAgaWYgKHRhYi5pc0ZpcnN0KSB7XG4gICAgICB0YWJPcmRlci51bnNoaWZ0KHZlcnRpY2FsS2V5T3JVcmwpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0YWJPcmRlci5wdXNoKHZlcnRpY2FsS2V5T3JVcmwpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdGFiT3JkZXI7XG59XG5cbi8qKlxuICogbWVyZ2VUYWJPcmRlciBtZXJnZXMgdHdvIGFycmF5cyBpbnRvIG9uZVxuICogYnkgYXBwZW5kaW5nIGFkZGl0aW9uYWwgdGFicyB0byB0aGUgZW5kIG9mIHRoZSBvcmlnaW5hbCBhcnJheVxuICogQHBhcmFtIHtzdHJpbmdbXX0gdGFiT3JkZXIgVGFiIG9yZGVyIHByb3ZpZGVkIGJ5IHRoZSBzZXJ2ZXJcbiAqIEBwYXJhbSB7c3RyaW5nW119IG90aGVyVGFiT3JkZXIgVGFiIG9yZGVyIHByb3ZpZGVkIGJ5IGNvbmZpZ3VyYXRpb25cbiAqIEByZXR1cm4ge3N0cmluZ1tdfVxuICovXG5leHBvcnQgZnVuY3Rpb24gbWVyZ2VUYWJPcmRlciAodGFiT3JkZXIsIG90aGVyVGFiT3JkZXIsIHRhYnMpIHtcbiAgZm9yIChjb25zdCB0YWJDb25maWcgb2Ygb3RoZXJUYWJPcmRlcikge1xuICAgIGlmICh0YWJPcmRlci5pbmNsdWRlcyh0YWJDb25maWcpKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgLy8gaXNGaXJzdCBzaG91bGQgYmUgYW4gb3ZlcnJpZGUgdG8gZHluYW1pYyB0YWIgb3JkZXJpbmcuXG4gICAgaWYgKHRhYnNbdGFiQ29uZmlnXSAmJiB0YWJzW3RhYkNvbmZpZ10uaXNGaXJzdCkge1xuICAgICAgdGFiT3JkZXIudW5zaGlmdCh0YWJDb25maWcpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0YWJPcmRlci5wdXNoKHRhYkNvbmZpZyk7XG4gICAgfVxuICB9XG4gIHJldHVybiB0YWJPcmRlcjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFRhYk9yZGVyICh0YWJzQ29uZmlnLCBkYXRhVGFiT3JkZXIpIHtcbiAgbGV0IHRhYk9yZGVyID0gZ2V0RGVmYXVsdFRhYk9yZGVyKHRhYnNDb25maWcsIGdldFVybFBhcmFtcygpKTtcbiAgLy8gV2Ugd2FudCB0byBwZXJzaXN0IHRoZSBwYXJhbXMgZnJvbSB0aGUgZXhpc3RpbmcgVVJMIHRvIHRoZSBuZXdcbiAgLy8gVVJMUyB3ZSBjcmVhdGUuXG4gIGlmICh0YWJPcmRlciAmJiBkYXRhVGFiT3JkZXIpIHtcbiAgICB0YWJPcmRlciA9IG1lcmdlVGFiT3JkZXIoZGF0YVRhYk9yZGVyLCB0YWJPcmRlciwgdGFic0NvbmZpZyk7XG4gIH1cbiAgcmV0dXJuIHRhYk9yZGVyO1xufVxuIiwiLyoqIEBtb2R1bGUgTmF2aWdhdGlvbkNvbXBvbmVudCAqL1xuXG4vKiBnbG9iYWwgTm9kZSAqL1xuXG5pbXBvcnQgQ29tcG9uZW50IGZyb20gJy4uL2NvbXBvbmVudCc7XG5pbXBvcnQgeyBBbnN3ZXJzQ29tcG9uZW50RXJyb3IgfSBmcm9tICcuLi8uLi8uLi9jb3JlL2Vycm9ycy9lcnJvcnMnO1xuaW1wb3J0IFN0b3JhZ2VLZXlzIGZyb20gJy4uLy4uLy4uL2NvcmUvc3RvcmFnZS9zdG9yYWdla2V5cyc7XG5pbXBvcnQgRE9NIGZyb20gJy4uLy4uL2RvbS9kb20nO1xuaW1wb3J0IHsgbWVyZ2VUYWJPcmRlciwgZ2V0RGVmYXVsdFRhYk9yZGVyLCBnZXRVcmxQYXJhbXMgfSBmcm9tICcuLi8uLi90b29scy90YWJvcmRlcic7XG5pbXBvcnQgeyBmaWx0ZXJQYXJhbXNGb3JFeHBlcmllbmNlTGluaywgcmVwbGFjZVVybFBhcmFtcyB9IGZyb20gJy4uLy4uLy4uL2NvcmUvdXRpbHMvdXJsdXRpbHMuanMnO1xuXG4vKipcbiAqIFRoZSBkZWJvdW5jZSBkdXJhdGlvbiBmb3IgcmVzaXplIGV2ZW50c1xuICogQHR5cGUge251bWJlcn1cbiAqL1xuY29uc3QgUkVTSVpFX0RFQk9VTkNFID0gMTAwO1xuXG4vKipcbiAqIFRoZSBicmVha3BvaW50IGZvciBtb2JpbGVcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKi9cbmNvbnN0IE1PQklMRV9CUkVBS1BPSU5UID0gNzY3O1xuXG4vKipcbiAqIEVudW0gb3B0aW9ucyBmb3IgbW9iaWxlIG92ZXJmbG93IGJlYWh2aW9yXG4gKiBAdHlwZSB7T2JqZWN0LjxzdHJpbmcsIHN0cmluZz59XG4gKi9cbmNvbnN0IE1PQklMRV9PVkVSRkxPV19CRUhBVklPUl9PUFRJT04gPSB7XG4gIENPTExBUFNFOiAnQ09MTEFQU0UnLFxuICBJTk5FUlNDUk9MTDogJ0lOTkVSU0NST0xMJ1xufTtcblxuLyoqXG4gKiBUaGUgVGFiIGlzIGEgbW9kZWwgdGhhdCBpcyB1c2VkIHRvIHBvd2VyIHRoZSBOYXZpZ2F0aW9uIHRhYnMgaW4gdGhlIHZpZXcuXG4gKiBJdCdzIGluaXRpYWxpemVkIHRocm91Z2ggdGhlIGNvbmZpZ3VyYXRpb24gcHJvdmlkZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAqL1xuZXhwb3J0IGNsYXNzIFRhYiB7XG4gIGNvbnN0cnVjdG9yIChjb25maWcpIHtcbiAgICAvKipcbiAgICAgKiBUaGUgbmFtZSBvZiB0aGUgdGFiIHRoYXQgaXMgZXhwb3NlZCBmb3IgdGhlIGxpbmtcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMubGFiZWwgPSBjb25maWcubGFiZWw7XG4gICAgaWYgKHR5cGVvZiB0aGlzLmxhYmVsICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IEFuc3dlcnNDb21wb25lbnRFcnJvcignbGFiZWwgaXMgYSByZXF1aXJlZCBjb25maWd1cmF0aW9uIG9wdGlvbiBmb3IgdGFiLicsICdOYXZpZ2F0aW9uQ29tcG9uZW50Jyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGNvbXBsZXRlIFVSTCwgaW5jbHVkaW5nIHRoZSBwYXJhbXNcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMudXJsID0gY29uZmlnLnVybDtcbiAgICBpZiAodHlwZW9mIHRoaXMudXJsICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IEFuc3dlcnNDb21wb25lbnRFcnJvcigndXJsIGlzIGEgcmVxdWlyZWQgY29uZmlndXJhdGlvbiBvcHRpb24gZm9yIHRhYi4nLCAnTmF2aWdhdGlvbkNvbXBvbmVudCcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBzZXJ2ZXJzaWRlIHZlcnRpY2FsIGNvbmZpZyBpZCB0aGF0IHRoaXMgaXMgcmVmZXJlbmNlZCB0by5cbiAgICAgKiBCeSBwcm92aWRpbmcgdGhpcywgZW5hYmxlcyBkeW5hbWljIHNvcnRpbmcgYmFzZWQgb24gcmVzdWx0cy5cbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMudmVydGljYWxLZXkgPSBjb25maWcudmVydGljYWxLZXkgfHwgbnVsbDtcblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIFVSTCB1c2VkIGZvciBjb25zdHJ1Y3RpbmcgdGhlIFVSTCB3aXRoIHBhcmFtc1xuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgdGhpcy5iYXNlVXJsID0gY29uZmlnLnVybDtcblxuICAgIC8qKlxuICAgICAqIERldGVybWluZXMgd2hldGhlciB0byBzaG93IHRoaXMgdGFiIGZpcnN0IGluIHRoZSBvcmRlclxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqL1xuICAgIHRoaXMuaXNGaXJzdCA9IGNvbmZpZy5pc0ZpcnN0IHx8IGZhbHNlO1xuXG4gICAgLyoqXG4gICAgICogRGV0ZXJtaW5lcyB3aGV0aGVyIG9yIG5vdCB0byBhcHBseSBhIHNwZWNpYWwgY2xhc3MgdG8gdGhlXG4gICAgICogbWFya3VwIHRvIGRldGVybWluZSBpZiBpdCdzIGFuIGFjdGl2ZSB0YWJcbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICB0aGlzLmlzQWN0aXZlID0gY29uZmlnLmlzQWN0aXZlIHx8IGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIGZyb20gd2lsbCBjb25zdHJ1Y3QgYSBtYXAgb2YgdmVydGljYWxLZXkgdG8ge1RhYn0gZnJvbVxuICAgKiBhIGNvbmZpZ3VyYXRpb24gZmlsZVxuICAgKiBAcGFyYW0ge29iamVjdH0gdGFic0NvbmZpZyB0aGUgY29uZmlndXJhdGlvbiB0byB1c2VcbiAgICovXG4gIHN0YXRpYyBmcm9tICh0YWJzQ29uZmlnKSB7XG4gICAgbGV0IHRhYnMgPSB7fTtcbiAgICAvLyBQYXJzZSB0aGUgb3B0aW9ucyBhbmQgYnVpbGQgb3V0IG91ciB0YWJzIGFuZFxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGFic0NvbmZpZy5sZW5ndGg7IGkrKykge1xuICAgICAgbGV0IHRhYiA9IHsgLi4udGFic0NvbmZpZ1tpXSB9O1xuXG4gICAgICAvLyBJZiBhIHRhYiBpcyBjb25maWd1cmVkIHRvIGJlIGhpZGRlbiBpbiB0aGlzIGNvbXBvbmVudCxcbiAgICAgIC8vIGRvIG5vdCBwcm9jZXNzIGl0XG4gICAgICBpZiAodGFiLmhpZGVJbk5hdmlnYXRpb24pIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIC8vIEZvciB0YWJzIHdpdGhvdXQgY29uZmlnIGlkcywgbWFwIHRoZWlyIFVSTCB0byB0aGUgY29uZmlnSURcbiAgICAgIC8vIHRvIGF2b2lkIGR1cGxpY2F0aW9uIG9mIHJlbmRlcnNcbiAgICAgIGlmICghdGFiLnZlcnRpY2FsS2V5ICYmICF0YWJzW3RhYi51cmxdKSB7XG4gICAgICAgIHRhYi52ZXJ0aWNhbEtleSA9IHRhYi51cmw7XG4gICAgICB9XG5cbiAgICAgIHRhYnNbdGFiLnZlcnRpY2FsS2V5XSA9IG5ldyBUYWIodGFiKTtcbiAgICB9XG4gICAgcmV0dXJuIHRhYnM7XG4gIH1cbn1cblxuLyoqXG4gKiBOYXZpZ2F0aW9uQ29tcG9uZW50IGV4cG9zZXMgYW4gaW50ZXJmYWNlIGZvciBidWlsZGluZyBhIGR5bmFtaWNcbiAqIG5hdmlnYXRpb24gdGhhdCBpcyBwb3dlcmVkIGJ5IHVuaXZlcnNhbCBzZWFyY2ggdXBkYXRlcy5cbiAqIEBleHRlbmRzIENvbXBvbmVudFxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBOYXZpZ2F0aW9uQ29tcG9uZW50IGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IgKGNvbmZpZyA9IHt9LCBzeXN0ZW1Db25maWcgPSB7fSkge1xuICAgIHN1cGVyKGNvbmZpZywgc3lzdGVtQ29uZmlnKTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBsYWJlbCB0byBzaG93IG9uIHRoZSBkcm9wZG93biBtZW51IGJ1dHRvbiB3aGVuIG92ZXJmbG93XG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLm92ZXJmbG93TGFiZWwgPSBjb25maWcub3ZlcmZsb3dMYWJlbCB8fCAnTW9yZSc7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgb3B0aW9uYWwgaWNvbiB0byBzaG93IG9uIHRoZSBkcm9wZG93biBtZW51IGJ1dHRvbiB3aGVuIG92ZXJmbG93XG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLm92ZXJmbG93SWNvbiA9IGNvbmZpZy5vdmVyZmxvd0ljb24gfHwgJ2thYm9iJztcblxuICAgIC8qKlxuICAgICAqIFRoZSBkYXRhIHN0b3JhZ2Uga2V5XG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLm1vZHVsZUlkID0gU3RvcmFnZUtleXMuTkFWSUdBVElPTjtcblxuICAgIC8qKlxuICAgICAqIFRhYnMgY29uZmlnIGZyb20gZ2xvYmFsIG5hdmlnYXRpb24gY29uZmlnXG4gICAgICogQHR5cGUge0FycmF5LjxvYmplY3Q+fVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5fdGFic0NvbmZpZyA9IGNvbmZpZy52ZXJ0aWNhbFBhZ2VzIHx8XG4gICAgICB0aGlzLmNvcmUuZ2xvYmFsU3RvcmFnZS5nZXRTdGF0ZShTdG9yYWdlS2V5cy5WRVJUSUNBTF9QQUdFU19DT05GSUcpLmdldCgpO1xuXG4gICAgLyoqXG4gICAgICogVW5vcmRlcmVkIG1hcCBvZiBlYWNoIHRhYiwga2V5ZWQgYnkgVlMgdmVydGljYWxLZXlcbiAgICAgKiBAdHlwZSB7T2JqZWN0LjxTdHJpbmcsIE9iamVjdD59XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLl90YWJzID0gVGFiLmZyb20odGhpcy5fdGFic0NvbmZpZyk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgb3JkZXIgb2YgdGhlIHRhYnMsIHBhcnNlZCBmcm9tIGNvbmZpZ3VyYXRpb24gb3IgVVJMLlxuICAgICAqIFRoaXMgZ2V0cyB1cGRhdGVkIGJhc2VkIG9uIHRoZSBzZXJ2ZXIgcmVzdWx0c1xuICAgICAqIEB0eXBlIHtBcnJheS48U3RyaW5nPn0gVGhlIGxpc3Qgb2YgVlMgdmVydGljYWxLZXlzXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLl90YWJPcmRlciA9IGdldERlZmF1bHRUYWJPcmRlcih0aGlzLl90YWJzQ29uZmlnLCBnZXRVcmxQYXJhbXMoKSk7XG5cbiAgICAvKipcbiAgICAgKiBCcmVha3BvaW50cyBhdCB3aGljaCBuYXZpZ2F0aW9uIGl0ZW1zIG1vdmUgdG8gdGhlIFwibW9yZVwiIGRyb3Bkb3duXG4gICAgICogQHR5cGUge251bWJlcltdfVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5fbmF2QnJlYWtwb2ludHMgPSBbXTtcblxuICAgIC8qKlxuICAgICAqICBUaGUgbW9iaWxlIG92ZXJmbG93IGJlaGF2aW9yIGNvbmZpZ1xuICAgICAqICBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMuX21vYmlsZU92ZXJmbG93QmVoYXZpb3IgPSBjb25maWcubW9iaWxlT3ZlcmZsb3dCZWhhdmlvciB8fCBNT0JJTEVfT1ZFUkZMT1dfQkVIQVZJT1JfT1BUSU9OLkNPTExBUFNFO1xuXG4gICAgLyoqXG4gICAgICogIFRoZSBBUklBIGxhYmVsXG4gICAgICogIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgdGhpcy5fYXJpYUxhYmVsID0gY29uZmlnLmFyaWFMYWJlbCB8fCAnU2VhcmNoIFBhZ2UgTmF2aWdhdGlvbic7XG5cbiAgICB0aGlzLmNoZWNrT3V0c2lkZUNsaWNrID0gdGhpcy5jaGVja091dHNpZGVDbGljay5iaW5kKHRoaXMpO1xuICAgIHRoaXMuY2hlY2tNb2JpbGVPdmVyZmxvd0JlaGF2aW9yID0gdGhpcy5jaGVja01vYmlsZU92ZXJmbG93QmVoYXZpb3IuYmluZCh0aGlzKTtcblxuICAgIHRoaXMuY29yZS5nbG9iYWxTdG9yYWdlLm9uKCd1cGRhdGUnLCBTdG9yYWdlS2V5cy5BUElfQ09OVEVYVCwgKCkgPT4ge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh0aGlzLmNvcmUuZ2xvYmFsU3RvcmFnZS5nZXRTdGF0ZShTdG9yYWdlS2V5cy5OQVZJR0FUSU9OKSB8fCB7fSk7XG4gICAgfSk7XG4gIH1cblxuICBzdGF0aWMgZ2V0IHR5cGUgKCkge1xuICAgIHJldHVybiAnTmF2aWdhdGlvbic7XG4gIH1cblxuICAvKipcbiAgICogVGhlIHRlbXBsYXRlIHRvIHJlbmRlclxuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHN0YXRpYyBkZWZhdWx0VGVtcGxhdGVOYW1lIChjb25maWcpIHtcbiAgICByZXR1cm4gJ25hdmlnYXRpb24vbmF2aWdhdGlvbic7XG4gIH1cblxuICBvbkNyZWF0ZSAoKSB7XG4gICAgLy8gVE9ETzogUmUtcmVuZGVyaW5nIGFuZCByZS1tb3VudGluZyB0aGUgY29tcG9uZW50IGV2ZXJ5IHRpbSBlIHRoZSB3aW5kb3cgY2hhbmdlcyBzaXplXG4gICAgLy8gaXMgbm90IGdyZWF0LlxuICAgIERPTS5vbih3aW5kb3csICdyZXNpemUnLCB0aGlzLmNoZWNrTW9iaWxlT3ZlcmZsb3dCZWhhdmlvcik7XG4gIH1cblxuICBvbkRlc3Ryb3kgKCkge1xuICAgIERPTS5vZmYod2luZG93LCAncmVzaXplJywgdGhpcy5jaGVja01vYmlsZU92ZXJmbG93QmVoYXZpb3IpO1xuICB9XG5cbiAgb25Nb3VudCAoKSB7XG4gICAgaWYgKHRoaXMuc2hvdWxkQ29sbGFwc2UoKSkge1xuICAgICAgdGhpcy5fbmF2QnJlYWtwb2ludHMgPSBbXTtcbiAgICAgIHRoaXMuYmluZE92ZXJmbG93SGFuZGxlcnMoKTtcbiAgICAgIHRoaXMucmVmaXROYXYoKTtcbiAgICAgIERPTS5vbihET00ucXVlcnkodGhpcy5fY29udGFpbmVyLCAnLnl4dC1OYXYtbW9yZScpLCAnY2xpY2snLCB0aGlzLnRvZ2dsZU1vcmVEcm9wZG93bi5iaW5kKHRoaXMpKTtcbiAgICB9XG4gIH1cblxuICBvblVuTW91bnQgKCkge1xuICAgIHRoaXMudW5iaW5kT3ZlcmZsb3dIYW5kbGVycygpO1xuICB9XG5cbiAgYmluZE92ZXJmbG93SGFuZGxlcnMgKCkge1xuICAgIERPTS5vbih3aW5kb3csICdjbGljaycsIHRoaXMuY2hlY2tPdXRzaWRlQ2xpY2spO1xuICB9XG5cbiAgdW5iaW5kT3ZlcmZsb3dIYW5kbGVycyAoKSB7XG4gICAgRE9NLm9mZih3aW5kb3csICdjbGljaycsIHRoaXMuY2hlY2tPdXRzaWRlQ2xpY2spO1xuICB9XG5cbiAgcmVmaXROYXYgKCkge1xuICAgIGNvbnN0IGNvbnRhaW5lciA9IERPTS5xdWVyeSh0aGlzLl9jb250YWluZXIsICcueXh0LU5hdi1jb250YWluZXInKTtcbiAgICBjb25zdCBtb3JlQnV0dG9uID0gRE9NLnF1ZXJ5KHRoaXMuX2NvbnRhaW5lciwgJy55eHQtTmF2LW1vcmUnKTtcbiAgICBjb25zdCBtYWluTGlua3MgPSBET00ucXVlcnkodGhpcy5fY29udGFpbmVyLCAnLnl4dC1OYXYtZXhwYW5kZWQnKTtcbiAgICBjb25zdCBjb2xsYXBzZWRMaW5rcyA9IERPTS5xdWVyeSh0aGlzLl9jb250YWluZXIsICcueXh0LU5hdi1tb2RhbCcpO1xuXG4gICAgY29uc3QgbmF2V2lkdGggPSBtb3JlQnV0dG9uLmNsYXNzTGlzdC5jb250YWlucygneXh0LU5hdi1pdGVtLS1tb3JlJylcbiAgICAgID8gY29udGFpbmVyLm9mZnNldFdpZHRoXG4gICAgICA6IGNvbnRhaW5lci5vZmZzZXRXaWR0aCAtIG1vcmVCdXR0b24ub2Zmc2V0V2lkdGg7XG4gICAgbGV0IG51bUJyZWFrcG9pbnRzID0gdGhpcy5fbmF2QnJlYWtwb2ludHMubGVuZ3RoO1xuXG4gICAgLy8gc3VtIGNoaWxkIHdpZHRocyBpbnN0ZWFkIG9mIHVzaW5nIHBhcmVudCdzIHdpZHRoIHRvIGF2b2lkXG4gICAgLy8gYnJvd3NlciBpbmNvbnNpc3RlbmNpZXNcbiAgICBsZXQgbWFpbkxpbmtzV2lkdGggPSAwO1xuICAgIGZvciAobGV0IGVsIG9mIG1haW5MaW5rcy5jaGlsZHJlbikge1xuICAgICAgbWFpbkxpbmtzV2lkdGggKz0gZWwub2Zmc2V0V2lkdGg7XG4gICAgfVxuXG4gICAgaWYgKG1haW5MaW5rc1dpZHRoID4gbmF2V2lkdGgpIHtcbiAgICAgIHRoaXMuX25hdkJyZWFrcG9pbnRzLnB1c2gobWFpbkxpbmtzV2lkdGgpO1xuICAgICAgY29uc3QgbGFzdExpbmsgPSBtYWluTGlua3MuY2hpbGRyZW4uaXRlbShtYWluTGlua3MuY2hpbGRyZW4ubGVuZ3RoIC0gMSk7XG4gICAgICBpZiAobGFzdExpbmsgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdGhpcy5fcHJlcGVuZChjb2xsYXBzZWRMaW5rcywgbGFzdExpbmspO1xuXG4gICAgICBpZiAobW9yZUJ1dHRvbi5jbGFzc0xpc3QuY29udGFpbnMoJ3l4dC1OYXYtaXRlbS0tbW9yZScpKSB7XG4gICAgICAgIG1vcmVCdXR0b24uY2xhc3NMaXN0LnJlbW92ZSgneXh0LU5hdi1pdGVtLS1tb3JlJyk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChudW1CcmVha3BvaW50cyAmJiBuYXZXaWR0aCA+IHRoaXMuX25hdkJyZWFrcG9pbnRzW251bUJyZWFrcG9pbnRzIC0gMV0pIHtcbiAgICAgICAgY29uc3QgZmlyc3RMaW5rID0gY29sbGFwc2VkTGlua3MuY2hpbGRyZW4uaXRlbSgwKTtcbiAgICAgICAgaWYgKGZpcnN0TGluayA9PT0gbnVsbCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBtYWluTGlua3MuYXBwZW5kKGZpcnN0TGluayk7XG4gICAgICAgIHRoaXMuX25hdkJyZWFrcG9pbnRzLnBvcCgpO1xuICAgICAgICBudW1CcmVha3BvaW50cy0tO1xuICAgICAgfVxuXG4gICAgICBpZiAoY29sbGFwc2VkTGlua3MuY2hpbGRyZW4ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIG1vcmVCdXR0b24uY2xhc3NMaXN0LmFkZCgneXh0LU5hdi1pdGVtLS1tb3JlJyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5jbG9zZU1vcmVEcm9wZG93bigpO1xuICAgIGlmIChtYWluTGlua3NXaWR0aCA+IG5hdldpZHRoIHx8XG4gICAgICAobnVtQnJlYWtwb2ludHMgPiAwICYmIG5hdldpZHRoID4gdGhpcy5fbmF2QnJlYWtwb2ludHNbbnVtQnJlYWtwb2ludHMgLSAxXSkpIHtcbiAgICAgIHRoaXMucmVmaXROYXYoKTtcbiAgICB9XG4gIH1cblxuICBjbG9zZU1vcmVEcm9wZG93biAoKSB7XG4gICAgY29uc3QgY29sbGFwc2VkID0gRE9NLnF1ZXJ5KHRoaXMuX2NvbnRhaW5lciwgJy55eHQtTmF2LW1vZGFsJyk7XG4gICAgY29sbGFwc2VkLmNsYXNzTGlzdC5yZW1vdmUoJ2lzLWFjdGl2ZScpO1xuICAgIGNvbnN0IG1vcmVCdXR0b24gPSBET00ucXVlcnkodGhpcy5fY29udGFpbmVyLCAnLnl4dC1OYXYtbW9yZScpO1xuICAgIG1vcmVCdXR0b24uc2V0QXR0cmlidXRlKCdhcmlhLWV4cGFuZGVkJywgZmFsc2UpO1xuICB9XG5cbiAgb3Blbk1vcmVEcm9wZG93biAoKSB7XG4gICAgY29uc3QgY29sbGFwc2VkID0gRE9NLnF1ZXJ5KHRoaXMuX2NvbnRhaW5lciwgJy55eHQtTmF2LW1vZGFsJyk7XG4gICAgY29sbGFwc2VkLmNsYXNzTGlzdC5hZGQoJ2lzLWFjdGl2ZScpO1xuICAgIGNvbnN0IG1vcmVCdXR0b24gPSBET00ucXVlcnkodGhpcy5fY29udGFpbmVyLCAnLnl4dC1OYXYtbW9yZScpO1xuICAgIG1vcmVCdXR0b24uc2V0QXR0cmlidXRlKCdhcmlhLWV4cGFuZGVkJywgdHJ1ZSk7XG4gIH1cblxuICB0b2dnbGVNb3JlRHJvcGRvd24gKCkge1xuICAgIGNvbnN0IGNvbGxhcHNlZCA9IERPTS5xdWVyeSh0aGlzLl9jb250YWluZXIsICcueXh0LU5hdi1tb2RhbCcpO1xuICAgIGNvbGxhcHNlZC5jbGFzc0xpc3QudG9nZ2xlKCdpcy1hY3RpdmUnKTtcbiAgICBjb25zdCBtb3JlQnV0dG9uID0gRE9NLnF1ZXJ5KHRoaXMuX2NvbnRhaW5lciwgJy55eHQtTmF2LW1vcmUnKTtcbiAgICBtb3JlQnV0dG9uLnNldEF0dHJpYnV0ZSgnYXJpYS1leHBhbmRlZCcsIGNvbGxhcHNlZC5jbGFzc0xpc3QuY29udGFpbnMoJ2lzLWFjdGl2ZScpKTtcbiAgfVxuXG4gIGNoZWNrT3V0c2lkZUNsaWNrIChlKSB7XG4gICAgaWYgKHRoaXMuX2Nsb3Nlc3QoZS50YXJnZXQsICcueXh0LU5hdi1jb250YWluZXInKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuY2xvc2VNb3JlRHJvcGRvd24oKTtcbiAgfVxuXG4gIGNoZWNrTW9iaWxlT3ZlcmZsb3dCZWhhdmlvciAoKSB7XG4gICAgaWYgKHRoaXMuX2NoZWNrTW9iaWxlT3ZlcmZsb3dCZWhhdmlvclRpbWVyKSB7XG4gICAgICBjbGVhclRpbWVvdXQodGhpcy5fY2hlY2tNb2JpbGVPdmVyZmxvd0JlaGF2aW9yVGltZXIpO1xuICAgIH1cblxuICAgIHRoaXMuX2NoZWNrTW9iaWxlT3ZlcmZsb3dCZWhhdmlvclRpbWVyID0gc2V0VGltZW91dCh0aGlzLnNldFN0YXRlLmJpbmQodGhpcyksIFJFU0laRV9ERUJPVU5DRSk7XG4gIH1cblxuICAvKipcbiAgICogU2luY2UgdGhlIHNlcnZlciBkYXRhIG9ubHkgcHJvdmlkZXMgYSBsaXN0IG9mXG4gICAqIFZTIHZlcnRpY2FsS2V5cywgd2UgbmVlZCB0byBjb21wdXRlIGFuZCB0cmFuc2Zvcm1cbiAgICogdGhlIGRhdGEgaW50byB0aGUgcHJvcGVyIGZvcm1hdCBmb3IgcmVuZGVyaW5nLlxuICAgKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHNldFN0YXRlIChkYXRhID0ge30pIHtcbiAgICBpZiAoZGF0YS50YWJPcmRlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLl90YWJPcmRlciA9IG1lcmdlVGFiT3JkZXIoZGF0YS50YWJPcmRlciwgdGhpcy5fdGFiT3JkZXIsIHRoaXMuX3RhYnMpO1xuICAgIH1cblxuICAgIGNvbnN0IHBhcmFtcyA9IGdldFVybFBhcmFtcygpO1xuICAgIHBhcmFtcy5zZXQoJ3RhYk9yZGVyJywgdGhpcy5fdGFiT3JkZXIpO1xuICAgIGNvbnN0IGNvbnRleHQgPSB0aGlzLmNvcmUuZ2xvYmFsU3RvcmFnZS5nZXRTdGF0ZShTdG9yYWdlS2V5cy5BUElfQ09OVEVYVCk7XG4gICAgaWYgKGNvbnRleHQpIHtcbiAgICAgIHBhcmFtcy5zZXQoU3RvcmFnZUtleXMuQVBJX0NPTlRFWFQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCByZWZlcnJlclBhZ2VVcmwgPSB0aGlzLmNvcmUuZ2xvYmFsU3RvcmFnZS5nZXRTdGF0ZShTdG9yYWdlS2V5cy5SRUZFUlJFUl9QQUdFX1VSTCk7XG4gICAgaWYgKHJlZmVycmVyUGFnZVVybCAhPT0gbnVsbCkge1xuICAgICAgcGFyYW1zLnNldChTdG9yYWdlS2V5cy5SRUZFUlJFUl9QQUdFX1VSTCwgcmVmZXJyZXJQYWdlVXJsKTtcbiAgICB9XG5cbiAgICBjb25zdCBmaWx0ZXJlZFBhcmFtcyA9IGZpbHRlclBhcmFtc0ZvckV4cGVyaWVuY2VMaW5rKFxuICAgICAgcGFyYW1zLFxuICAgICAgdHlwZXMgPT4gdGhpcy5jb21wb25lbnRNYW5hZ2VyLmdldENvbXBvbmVudE5hbWVzRm9yQ29tcG9uZW50VHlwZXModHlwZXMpXG4gICAgKTtcblxuICAgIC8vIFNpbmNlIHRoZSB0YWIgb3JkZXJpbmcgY2FuIGNoYW5nZSBiYXNlZCBvbiB0aGUgc2VydmVyIGRhdGFcbiAgICAvLyB3ZSBuZWVkIHRvIHVwZGF0ZSBlYWNoIHRhYnMgVVJMIHRvIGluY2x1ZGUgdGhlIG9yZGVyIGFzIHBhcnQgb2YgdGhlaXIgcGFyYW1zLlxuICAgIC8vIFRoaXMgaGVscHMgd2l0aCBwZXJzaXN0aW5nIHN0YXRlIGFjcm9zcyB2ZXJ0aWNhbHMuXG4gICAgbGV0IHRhYnMgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX3RhYk9yZGVyLmxlbmd0aDsgaSsrKSB7XG4gICAgICBsZXQgdGFiID0gdGhpcy5fdGFic1t0aGlzLl90YWJPcmRlcltpXV07XG4gICAgICBpZiAodGFiICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGFiLnVybCA9IHJlcGxhY2VVcmxQYXJhbXModGFiLmJhc2VVcmwsIGZpbHRlcmVkUGFyYW1zKTtcbiAgICAgICAgdGFicy5wdXNoKHRhYik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHN1cGVyLnNldFN0YXRlKHtcbiAgICAgIHRhYnM6IHRhYnMsXG4gICAgICBvdmVyZmxvd0xhYmVsOiB0aGlzLm92ZXJmbG93TGFiZWwsXG4gICAgICBvdmVyZmxvd0ljb246IHRoaXMub3ZlcmZsb3dJY29uLFxuICAgICAgc2hvd0NvbGxhcHNlOiB0aGlzLnNob3VsZENvbGxhcHNlKCksXG4gICAgICBhcmlhTGFiZWw6IHRoaXMuX2FyaWFMYWJlbFxuICAgIH0pO1xuICB9XG5cbiAgLy8gVE9ETyAoYWdyb3cpIGludmVzdGlnYXRlIHJlbW92aW5nIHRoaXNcbiAgLy8gUGFyZW50Tm9kZS5wcmVwZW5kIHBvbHlmaWxsXG4gIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9QYXJlbnROb2RlL3ByZXBlbmQjUG9seWZpbGxcbiAgX3ByZXBlbmQgKGNvbGxhcHNlZExpbmtzLCBsYXN0TGluaykge1xuICAgIGlmICghY29sbGFwc2VkTGlua3MuaGFzT3duUHJvcGVydHkoJ3ByZXBlbmQnKSkge1xuICAgICAgbGV0IGRvY0ZyYWcgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XG4gICAgICBsZXQgaXNOb2RlID0gbGFzdExpbmsgaW5zdGFuY2VvZiBOb2RlO1xuICAgICAgZG9jRnJhZy5hcHBlbmRDaGlsZChpc05vZGUgPyBsYXN0TGluayA6IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKFN0cmluZyhsYXN0TGluaykpKTtcblxuICAgICAgY29sbGFwc2VkTGlua3MuaW5zZXJ0QmVmb3JlKGRvY0ZyYWcsIGNvbGxhcHNlZExpbmtzLmZpcnN0Q2hpbGQpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbGxhcHNlZExpbmtzLnByZXBlbmQobGFzdExpbmspO1xuICB9XG5cbiAgLy8gVE9ETyAoYWdyb3cpIGludmVzdGlnYXRlIHJlbW92aW5nIHRoaXNcbiAgLy8gQWRhcHRlZCBmcm9tIEVsZW1lbnQuY2xvc2VzdCBwb2x5ZmlsbFxuICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvRWxlbWVudC9jbG9zZXN0I1BvbHlmaWxsXG4gIF9jbG9zZXN0IChlbCwgY2xvc2VzdEVsU2VsZWN0b3IpIHtcbiAgICBpZiAoIWVsLmhhc093blByb3BlcnR5KCdjbG9zZXN0JykpIHtcbiAgICAgIGRvIHtcbiAgICAgICAgaWYgKERPTS5tYXRjaGVzKGVsLCBjbG9zZXN0RWxTZWxlY3RvcikpIHJldHVybiBlbDtcbiAgICAgICAgZWwgPSBlbC5wYXJlbnRFbGVtZW50IHx8IGVsLnBhcmVudE5vZGU7XG4gICAgICB9IHdoaWxlIChlbCAhPT0gbnVsbCAmJiBlbC5ub2RlVHlwZSA9PT0gMSk7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIGVsLmNsb3Nlc3QoY2xvc2VzdEVsU2VsZWN0b3IpO1xuICB9XG5cbiAgc2hvdWxkQ29sbGFwc2UgKCkge1xuICAgIHN3aXRjaCAodGhpcy5fbW9iaWxlT3ZlcmZsb3dCZWhhdmlvcikge1xuICAgICAgY2FzZSBNT0JJTEVfT1ZFUkZMT1dfQkVIQVZJT1JfT1BUSU9OLkNPTExBUFNFOlxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIGNhc2UgTU9CSUxFX09WRVJGTE9XX0JFSEFWSU9SX09QVElPTi5JTk5FUlNDUk9MTDpcbiAgICAgICAgY29uc3QgY29udGFpbmVyID0gRE9NLnF1ZXJ5KHRoaXMuX2NvbnRhaW5lciwgJy55eHQtTmF2LWNvbnRhaW5lcicpIHx8IHRoaXMuX2NvbnRhaW5lcjtcbiAgICAgICAgY29uc3QgbmF2V2lkdGggPSBjb250YWluZXIub2Zmc2V0V2lkdGg7XG4gICAgICAgIHJldHVybiBuYXZXaWR0aCA+IE1PQklMRV9CUkVBS1BPSU5UO1xuICAgIH1cbiAgfVxufVxuIiwiLyoqIEBtb2R1bGUgU2VhcmNoQ29tcG9uZW50ICovXG5cbmltcG9ydCBDb21wb25lbnQgZnJvbSAnLi4vY29tcG9uZW50JztcbmltcG9ydCBET00gZnJvbSAnLi4vLi4vZG9tL2RvbSc7XG5pbXBvcnQgU3RvcmFnZUtleXMgZnJvbSAnLi4vLi4vLi4vY29yZS9zdG9yYWdlL3N0b3JhZ2VrZXlzJztcbmltcG9ydCBTZWFyY2hQYXJhbXMgZnJvbSAnLi4vLi4vZG9tL3NlYXJjaHBhcmFtcyc7XG5cbmNvbnN0IEljb25TdGF0ZSA9IHtcbiAgJ1lFWFQnOiAwLFxuICAnTUFHTklGWUlOR19HTEFTUyc6IDFcbn07XG5cbi8qKlxuICogU2VhcmNoQ29tcG9uZW50IGV4cG9zZXMgYW4gaW50ZXJmYWNlIGluIG9yZGVyIHRvIGNyZWF0ZVxuICogYSBVSSBTZWFyY2ggZXhwZXJpZW5jZSBmb3IgdmVydGljYWwgYW5kIHVuaXZlcnNhbCBzZWFyY2guXG4gKlxuICogQGV4dGVuZHMgQ29tcG9uZW50XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNlYXJjaENvbXBvbmVudCBleHRlbmRzIENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yIChjb25maWcgPSB7fSwgc3lzdGVtQ29uZmlnID0ge30pIHtcbiAgICBzdXBlcihjb25maWcsIHN5c3RlbUNvbmZpZyk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgb3B0aW9uYWwgdmVydGljYWwga2V5IGZvciB2ZXJ0aWNhbCBzZWFyY2ggY29uZmlndXJhdGlvblxuICAgICAqIElmIG5vdCBwcm92aWRlZCwgYXV0by1jb21wbGV0ZSBhbmQgc2VhcmNoIHdpbGwgYmUgYmFzZWQgb24gdW5pdmVyc2FsXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLl92ZXJ0aWNhbEtleSA9IGNvbmZpZy52ZXJ0aWNhbEtleSB8fCBudWxsO1xuXG4gICAgLyoqXG4gICAgICogUXVlcnkgc3VibWlzc2lvbiBjYW4gb3B0aW9uYWxseSBiZSBiYXNlZCBvbiBhIGZvcm0gYXMgY29udGV4dC4gTm90ZSB0aGF0IGlmXG4gICAgICogYSBmb3JtIGlzIG5vdCB1c2VkLCB0aGUgY29tcG9uZW50IGhhcyBubyBndWFyYW50ZWUgb2YgV0NBRyBjb21wbGlhbmNlLlxuICAgICAqL1xuICAgIHRoaXMuX3VzZUZvcm0gPSBjb25maWcudXNlRm9ybSAhPT0gdW5kZWZpbmVkID8gY29uZmlnLnVzZUZvcm0gOiB0cnVlO1xuXG4gICAgLyoqXG4gICAgICogUXVlcnkgc3VibWlzc2lvbiBpcyBiYXNlZCBvbiBhIGZvcm0gYXMgY29udGV4dC5cbiAgICAgKiBPcHRpb25hbGx5IHByb3ZpZGVkLCBvdGhlcndpc2UgZGVmYXVsdHMgdG8gbmF0aXZlIGZvcm0gbm9kZSB3aXRoaW4gY29udGFpbmVyXG4gICAgICogQHR5cGUge3N0cmluZ30gQ1NTIHNlbGVjdG9yXG4gICAgICovXG4gICAgdGhpcy5fZm9ybUVsID0gY29uZmlnLmZvcm1TZWxlY3RvciB8fCAnZm9ybSc7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgaW5wdXQgZWxlbWVudCB1c2VkIGZvciBzZWFyY2hpbmcgYW5kIHdpcmVzIHVwIHRoZSBrZXlib2FyZCBpbnRlcmFjdGlvblxuICAgICAqIE9wdGlvbmFsbHkgcHJvdmlkZWQuXG4gICAgICogQHR5cGUge3N0cmluZ30gQ1NTIHNlbGVjdG9yXG4gICAgICovXG4gICAgdGhpcy5faW5wdXRFbCA9IGNvbmZpZy5pbnB1dEVsIHx8ICcuanMteWV4dC1xdWVyeSc7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgdGl0bGUgdXNlZCwgcHJvdmlkZWQgdG8gdGhlIHRlbXBsYXRlIGFzIGEgZGF0YSBwb2ludFxuICAgICAqIE9wdGlvbmFsbHkgcHJvdmlkZWQuIElmIG5vdCBwcm92aWRlZCwgbm8gdGl0bGUgd2lsbCBiZSBpbmNsdWRlZC5cbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMudGl0bGUgPSBjb25maWcudGl0bGU7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgbGFiZWwgdGV4dCBpcyB1c2VkIGZvciBsYWJlbGluZyB0aGUgaW5wdXQgYm94LCBhbHNvIHByb3ZpZGVkIHRvIHRlbXBsYXRlLlxuICAgICAqIE9wdGlvbmFsbHkgcHJvdmlkZWRcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMubGFiZWxUZXh0ID0gY29uZmlnLmxhYmVsVGV4dCB8fCAnQ29uZHVjdCBhIHNlYXJjaCc7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgc3VibWl0IHRleHQgaXMgdXNlZCBmb3IgbGFiZWxpbmcgdGhlIHN1Ym1pdCBidXR0b24sIGFsc28gcHJvdmlkZWQgdG8gdGhlIHRlbXBsYXRlLlxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgdGhpcy5zdWJtaXRUZXh0ID0gY29uZmlnLnN1Ym1pdFRleHQgfHwgJ1N1Ym1pdCc7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgY2xlYXIgdGV4dCBpcyB1c2VkIGZvciBsYWJlbGluZyB0aGUgY2xlYXIgYnV0dG9uLCBhbHNvIHByb3ZpZGVkIHRvIHRoZSB0ZW1wbGF0ZS5cbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMuY2xlYXJUZXh0ID0gY29uZmlnLmNsZWFyVGV4dCB8fCAnQ2xlYXInO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHN1Ym1pdCBpY29uIGlzIGFuIGljb24gZm9yIHRoZSBzdWJtaXQgYnV0dG9uLCBpZiBwcm92aWRlZCBpdCB3aWxsIGJlIGRpc3BsYXllZCBhbmQgdGhlXG4gICAgICogc3VibWl0IHRleHQgd2lsbCBiZSB1c2VkIGZvciBzY3JlZW4gcmVhZGVycy5cbiAgICAgKiBAdHlwZSB7c3RyaW5nfG51bGx9XG4gICAgICovXG4gICAgdGhpcy5zdWJtaXRJY29uID0gY29uZmlnLnN1Ym1pdEljb24gfHwgbnVsbDtcblxuICAgIC8qKlxuICAgICAqIFRoZSBxdWVyeSB0ZXh0IHRvIHNob3cgYXMgdGhlIGZpcnN0IGl0ZW0gZm9yIGF1dG8gY29tcGxldGUuXG4gICAgICogT3B0aW9uYWxseSBwcm92aWRlZFxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgdGhpcy5wcm9tcHRIZWFkZXIgPSBjb25maWcucHJvbXB0SGVhZGVyIHx8IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBBdXRvIGZvY3VzZXMgdGhlIGlucHV0IGJveCBpZiBzZXQgdG8gdHJ1ZS5cbiAgICAgKiBPcHRpb25hbGx5IHByb3ZpZGVkLCBkZWZhdWx0cyB0byBmYWxzZS5cbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICB0aGlzLmF1dG9Gb2N1cyA9IGNvbmZpZy5hdXRvRm9jdXMgPT09IHRydWU7XG5cbiAgICAvKipcbiAgICAgKiBJZiB0cnVlLCBzaG93IGFuIFwieFwiIHRoYXQgYWxsb3dzIHRoZSB1c2VyIHRvIGNsZWFyIHRoZSBjdXJyZW50XG4gICAgICogcXVlcnlcbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICB0aGlzLmNsZWFyQnV0dG9uID0gY29uZmlnLmNsZWFyQnV0dG9uID09PSB1bmRlZmluZWRcbiAgICAgID8gdHJ1ZVxuICAgICAgOiBjb25maWcuY2xlYXJCdXR0b247XG5cbiAgICAvKipcbiAgICAgKiBXaGVuIGF1dG9mb2N1c2luZyBvbiBsb2FkLCBvcHRpb25hbGx5IG9wZW4gdGhlIGF1dG9jb21wbGV0ZVxuICAgICAqIChwcmVzZXQgcHJvbXB0cylcbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICB0aGlzLmF1dG9jb21wbGV0ZU9uTG9hZCA9IGNvbmZpZy5hdXRvY29tcGxldGVPbkxvYWQgfHwgZmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiBzdWJtaXRVUkwgd2lsbCBmb3JjZSB0aGUgc2VhcmNoIHF1ZXJ5IHN1Ym1pc3Npb24gdG8gZ2V0XG4gICAgICogcmVkaXJlY3RlZCB0byB0aGUgVVJMIHByb3ZpZGVkLlxuICAgICAqIE9wdGlvbmFsLCBkZWZhdWx0cyB0byBudWxsLlxuICAgICAqXG4gICAgICogSWYgbm8gcmVkaXJlY3RVcmwgcHJvdmlkZWQsIHdlIGtlZXAgdGhlIHBhZ2UgYXMgYSBzaW5nbGUgcGFnZSBhcHAuXG4gICAgICpcbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICB0aGlzLnJlZGlyZWN0VXJsID0gY29uZmlnLnJlZGlyZWN0VXJsIHx8IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiB0cnVlIGlmIHRoZXJlIGlzIGFub3RoZXIgc2VhcmNoIGJhciBwcmVzZW50IG9uIHRoZSBwYWdlLlxuICAgICAqIFR3aW5zIG9ubHkgdXBkYXRlIHRoZSBxdWVyeSwgYW5kIGRvIG5vdCBzZWFyY2hcbiAgICAgKi9cbiAgICB0aGlzLl9pc1R3aW4gPSBjb25maWcuaXNUd2luO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHF1ZXJ5IHN0cmluZyB0byB1c2UgZm9yIHRoZSBpbnB1dCBib3gsIHByb3ZpZGVkIHRvIHRlbXBsYXRlIGZvciByZW5kZXJpbmcuXG4gICAgICogT3B0aW9uYWxseSBwcm92aWRlZFxuICAgICAqIEB0eXBlIHtzdHJpbmd8bnVsbH1cbiAgICAgKi9cbiAgICB0aGlzLnF1ZXJ5ID0gY29uZmlnLnF1ZXJ5IHx8IHRoaXMuY29yZS5nbG9iYWxTdG9yYWdlLmdldFN0YXRlKFN0b3JhZ2VLZXlzLlFVRVJZKTtcbiAgICB0aGlzLmNvcmUuZ2xvYmFsU3RvcmFnZS5vbigndXBkYXRlJywgU3RvcmFnZUtleXMuUVVFUlksIHEgPT4ge1xuICAgICAgdGhpcy5xdWVyeSA9IHE7XG4gICAgICBpZiAodGhpcy5xdWVyeUVsKSB7XG4gICAgICAgIHRoaXMucXVlcnlFbC52YWx1ZSA9IHE7XG4gICAgICB9XG4gICAgICB0aGlzLmRlYm91bmNlZFNlYXJjaChxKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBtaW5pbXVtIHRpbWUgYWxsb3dlZCBpbiBtaWxsaXNlY29uZHMgYmV0d2VlbiBzZWFyY2hlcyB0byBwcmV2ZW50XG4gICAgICogbWFueSBkdXBsaWNhdGUgc2VhcmNoZXMgYmFjay10by1iYWNrXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuX3NlYXJjaENvb2xkb3duID0gY29uZmlnLnNlYXJjaENvb2xkb3duIHx8IDMwMDtcblxuICAgIC8qKlxuICAgICAqIFdoZW4gdHJ1ZSBhbmQgXCJuZWFyIG1lXCIgaW50ZW50IGlzIGV4cHJlc3NlZCwgcHJvbXB0IHRoZSB1c2VyIGZvciB0aGVpciBnZW9sb2NhdGlvblxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5fcHJvbXB0Rm9yTG9jYXRpb24gPSBjb25maWcucHJvbXB0Rm9yTG9jYXRpb24gPT09IHVuZGVmaW5lZFxuICAgICAgPyB0cnVlXG4gICAgICA6IEJvb2xlYW4oY29uZmlnLnByb21wdEZvckxvY2F0aW9uKTtcblxuICAgIC8qKlxuICAgICAqIENvbnRyb2xzIHNob3dpbmcgYW5kIGhpZGluZyB0aGUgc2VhcmNoIGNsZWFyIGJ1dHRvblxuICAgICAqL1xuICAgIHRoaXMuX3Nob3dDbGVhckJ1dHRvbiA9IHRoaXMuY2xlYXJCdXR0b24gJiYgdGhpcy5xdWVyeTtcblxuICAgIC8qKlxuICAgICAqIEZvciB2ZXJ0aWNhbCBzZWFyY2ggYmFycywgd2hldGhlciBvciBub3QgdG8gYWxsb3cgZW1wdHkgc2VhcmNoZXMuXG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLl9hbGxvd0VtcHR5U2VhcmNoID0gISFjb25maWcuYWxsb3dFbXB0eVNlYXJjaDtcblxuICAgIC8qKlxuICAgICAqIFRoZSBuYW1lIG9mIHRoZSBjaGlsZCBBdXRvQ29tcGxldGUgY29tcG9uZW50LlxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLl9hdXRvQ29tcGxldGVOYW1lID0gYCR7dGhpcy5uYW1lfS5hdXRvY29tcGxldGVgO1xuXG4gICAgLyoqXG4gICAgICogT3B0aW9ucyB0byBwYXNzIHRvIHRoZSBnZW9sb2NhdGlvbiBhcGkuXG4gICAgICogQHR5cGUge09iamVjdH1cbiAgICAgKi9cbiAgICB0aGlzLl9nZW9sb2NhdGlvbk9wdGlvbnMgPSB7XG4gICAgICBlbmFibGVIaWdoQWNjdXJhY3k6IGZhbHNlLFxuICAgICAgdGltZW91dDogMTAwMCxcbiAgICAgIG1heGltdW1BZ2U6IDMwMDAwMCxcbiAgICAgIC4uLmNvbmZpZy5nZW9sb2NhdGlvbk9wdGlvbnNcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogT3B0aW9ucyBmb3IgdGhlIGdlb2xvY2F0aW9uIHRpbWVvdXQgYWxlcnQuXG4gICAgICogQHR5cGUge09iamVjdH1cbiAgICAgKi9cbiAgICB0aGlzLl9nZW9sb2NhdGlvblRpbWVvdXRBbGVydCA9IHtcbiAgICAgIGVuYWJsZWQ6IGZhbHNlLFxuICAgICAgbWVzc2FnZTogJ1dlIGFyZSB1bmFibGUgdG8gZGV0ZXJtaW5lIHlvdXIgbG9jYXRpb24nLFxuICAgICAgLi4uY29uZmlnLmdlb2xvY2F0aW9uVGltZW91dEFsZXJ0XG4gICAgfTtcbiAgfVxuXG4gIHN0YXRpYyBnZXQgdHlwZSAoKSB7XG4gICAgcmV0dXJuICdTZWFyY2hCYXInO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSB0ZW1wbGF0ZSB0byByZW5kZXJcbiAgICogQHJldHVybnMge3N0cmluZ31cbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBzdGF0aWMgZGVmYXVsdFRlbXBsYXRlTmFtZSAoKSB7XG4gICAgcmV0dXJuICdzZWFyY2gvc2VhcmNoJztcbiAgfVxuXG4gIG9uQ3JlYXRlICgpIHtcbiAgICBpZiAodGhpcy5xdWVyeSAhPSBudWxsICYmICF0aGlzLnJlZGlyZWN0VXJsKSB7XG4gICAgICB0aGlzLmNvcmUuc2V0UXVlcnkodGhpcy5xdWVyeSk7XG4gICAgfVxuICB9XG5cbiAgb25Nb3VudCAoKSB7XG4gICAgdGhpcy5xdWVyeUVsID0gRE9NLnF1ZXJ5KHRoaXMuX2NvbnRhaW5lciwgdGhpcy5faW5wdXRFbCk7XG4gICAgaWYgKHRoaXMuYXV0b0ZvY3VzICYmICF0aGlzLnF1ZXJ5ICYmICF0aGlzLmF1dG9jb21wbGV0ZU9uTG9hZCkge1xuICAgICAgdGhpcy5mb2N1c0lucHV0RWxlbWVudCgpO1xuICAgIH1cblxuICAgIHRoaXMuaXNVc2luZ1lleHRBbmltYXRlZEljb24gPSAhdGhpcy5fY29uZmlnLmN1c3RvbUljb25VcmwgJiYgIXRoaXMuc3VibWl0SWNvbjtcbiAgICBpZiAodGhpcy5pc1VzaW5nWWV4dEFuaW1hdGVkSWNvbikge1xuICAgICAgdGhpcy5pbml0QW5pbWF0ZWRJY29uKCk7XG4gICAgfVxuXG4gICAgLy8gV2lyZSB1cCBvdXIgc2VhcmNoIGhhbmRsaW5nIGFuZCBhdXRvIGNvbXBsZXRlXG4gICAgdGhpcy5pbml0U2VhcmNoKHRoaXMuX2Zvcm1FbCk7XG4gICAgdGhpcy5pbml0QXV0b0NvbXBsZXRlKHRoaXMuX2lucHV0RWwpO1xuXG4gICAgaWYgKHRoaXMuY2xlYXJCdXR0b24pIHtcbiAgICAgIHRoaXMuaW5pdENsZWFyQnV0dG9uKCk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuYXV0b0ZvY3VzICYmICF0aGlzLnF1ZXJ5ICYmIHRoaXMuYXV0b2NvbXBsZXRlT25Mb2FkKSB7XG4gICAgICB0aGlzLmZvY3VzSW5wdXRFbGVtZW50KCk7XG4gICAgfVxuICB9XG5cbiAgcmVxdWVzdEljb25BbmltYXRpb25GcmFtZSAoaWNvblN0YXRlKSB7XG4gICAgaWYgKHRoaXMuaWNvblN0YXRlID09PSBpY29uU3RhdGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5pY29uU3RhdGUgPSBpY29uU3RhdGU7XG4gICAgaWYgKCF0aGlzLmlzUmVxdWVzdGluZ0FuaW1hdGlvbkZyYW1lKSB7XG4gICAgICB0aGlzLmlzUmVxdWVzdGluZ0FuaW1hdGlvbkZyYW1lID0gdHJ1ZTtcbiAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICB0aGlzLmZvcndhcmRJY29uLmNsYXNzTGlzdC5yZW1vdmUoJ3l4dC1TZWFyY2hCYXItQW5pbWF0ZWRJY29uLS1wYXVzZWQnKTtcbiAgICAgICAgdGhpcy5yZXZlcnNlSWNvbi5jbGFzc0xpc3QucmVtb3ZlKCd5eHQtU2VhcmNoQmFyLUFuaW1hdGVkSWNvbi0tcGF1c2VkJyk7XG4gICAgICAgIGlmICh0aGlzLmljb25TdGF0ZSA9PT0gSWNvblN0YXRlLk1BR05JRllJTkdfR0xBU1MpIHtcbiAgICAgICAgICB0aGlzLmZvcndhcmRJY29uLmNsYXNzTGlzdC5yZW1vdmUoJ3l4dC1TZWFyY2hCYXItQW5pbWF0ZWRJY29uLS1pbmFjdGl2ZScpO1xuICAgICAgICAgIHRoaXMucmV2ZXJzZUljb24uY2xhc3NMaXN0LmFkZCgneXh0LVNlYXJjaEJhci1BbmltYXRlZEljb24tLWluYWN0aXZlJyk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5pY29uU3RhdGUgPT09IEljb25TdGF0ZS5ZRVhUKSB7XG4gICAgICAgICAgdGhpcy5mb3J3YXJkSWNvbi5jbGFzc0xpc3QuYWRkKCd5eHQtU2VhcmNoQmFyLUFuaW1hdGVkSWNvbi0taW5hY3RpdmUnKTtcbiAgICAgICAgICB0aGlzLnJldmVyc2VJY29uLmNsYXNzTGlzdC5yZW1vdmUoJ3l4dC1TZWFyY2hCYXItQW5pbWF0ZWRJY29uLS1pbmFjdGl2ZScpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaXNSZXF1ZXN0aW5nQW5pbWF0aW9uRnJhbWUgPSBmYWxzZTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGFuaW1hdGVJY29uVG9NYWduaWZ5aW5nR2xhc3MgKCkge1xuICAgIGlmICh0aGlzLmljb25Jc0Zyb3plbikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLnJlcXVlc3RJY29uQW5pbWF0aW9uRnJhbWUoSWNvblN0YXRlLk1BR05JRllJTkdfR0xBU1MpO1xuICB9XG5cbiAgYW5pbWF0ZUljb25Ub1lleHQgKGUpIHtcbiAgICBsZXQgZm9jdXNTdGlsbEluU2VhcmNoYmFyID0gZmFsc2U7XG4gICAgaWYgKGUgJiYgZS5yZWxhdGVkVGFyZ2V0KSB7XG4gICAgICBmb2N1c1N0aWxsSW5TZWFyY2hiYXIgPSB0aGlzLl9jb250YWluZXIuY29udGFpbnMoZS5yZWxhdGVkVGFyZ2V0KTtcbiAgICB9XG4gICAgaWYgKHRoaXMuaWNvbklzRnJvemVuIHx8IGZvY3VzU3RpbGxJblNlYXJjaGJhcikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLnJlcXVlc3RJY29uQW5pbWF0aW9uRnJhbWUoSWNvblN0YXRlLllFWFQpO1xuICB9XG5cbiAgaW5pdEFuaW1hdGVkSWNvbiAoKSB7XG4gICAgdGhpcy5pY29uU3RhdGUgPSAodGhpcy5hdXRvRm9jdXMgJiYgIXRoaXMucXVlcnkpID8gSWNvblN0YXRlLk1BR05JRllJTkdfR0xBU1MgOiBJY29uU3RhdGUuWUVYVDtcbiAgICB0aGlzLmZvcndhcmRJY29uID0gRE9NLnF1ZXJ5KHRoaXMuX2NvbnRhaW5lciwgJy5qcy15eHQtQW5pbWF0ZWRGb3J3YXJkJyk7XG4gICAgdGhpcy5yZXZlcnNlSWNvbiA9IERPTS5xdWVyeSh0aGlzLl9jb250YWluZXIsICcuanMteXh0LUFuaW1hdGVkUmV2ZXJzZScpO1xuICAgIGNvbnN0IGNsaWNrYWJsZUVsZW1lbnRTZWxlY3RvcnMgPSBbJy5qcy15ZXh0LXN1Ym1pdCcsICcuanMteXh0LVNlYXJjaEJhci1jbGVhciddO1xuICAgIGZvciAoY29uc3Qgc2VsZWN0b3Igb2YgY2xpY2thYmxlRWxlbWVudFNlbGVjdG9ycykge1xuICAgICAgY29uc3QgY2xpY2thYmxlRWwgPSBET00ucXVlcnkodGhpcy5fY29udGFpbmVyLCBzZWxlY3Rvcik7XG4gICAgICBpZiAoY2xpY2thYmxlRWwpIHtcbiAgICAgICAgRE9NLm9uKGNsaWNrYWJsZUVsLCAnbW91c2Vkb3duJywgKCkgPT4ge1xuICAgICAgICAgIHRoaXMuaWNvbklzRnJvemVuID0gdHJ1ZTtcbiAgICAgICAgfSk7XG4gICAgICAgIERPTS5vbihjbGlja2FibGVFbCwgJ21vdXNldXAnLCAoKSA9PiB7XG4gICAgICAgICAgdGhpcy5pY29uSXNGcm96ZW4gPSBmYWxzZTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICAgIERPTS5vbih0aGlzLnF1ZXJ5RWwsICdmb2N1cycsICgpID0+IHtcbiAgICAgIHRoaXMuYW5pbWF0ZUljb25Ub01hZ25pZnlpbmdHbGFzcygpO1xuICAgIH0pO1xuICAgIERPTS5vbih0aGlzLl9jb250YWluZXIsICdmb2N1c291dCcsIGUgPT4ge1xuICAgICAgdGhpcy5hbmltYXRlSWNvblRvWWV4dChlKTtcbiAgICB9KTtcbiAgfVxuXG4gIHJlbW92ZSAoKSB7XG4gICAgdGhpcy5fYXV0b2NvbXBsZXRlLnJlbW92ZSgpO1xuICAgIHN1cGVyLnJlbW92ZSgpO1xuICB9XG5cbiAgaW5pdENsZWFyQnV0dG9uICgpIHtcbiAgICBjb25zdCBidXR0b24gPSBET00ucXVlcnkodGhpcy5fY29udGFpbmVyLCAnLmpzLXl4dC1TZWFyY2hCYXItY2xlYXInKTtcbiAgICB0aGlzLl9zaG93Q2xlYXJCdXR0b24gPSB0aGlzLl9zaG93Q2xlYXJCdXR0b24gfHwgdGhpcy5xdWVyeTtcbiAgICBidXR0b24uY2xhc3NMaXN0LnRvZ2dsZSgneXh0LVNlYXJjaEJhci0taGlkZGVuJywgIXRoaXMuX3Nob3dDbGVhckJ1dHRvbik7XG5cbiAgICBET00ub24oYnV0dG9uLCAnY2xpY2snLCAoKSA9PiB7XG4gICAgICB0aGlzLnF1ZXJ5ID0gJyc7XG4gICAgICB0aGlzLl9zaG93Q2xlYXJCdXR0b24gPSBmYWxzZTtcbiAgICAgIGJ1dHRvbi5jbGFzc0xpc3QuYWRkKCd5eHQtU2VhcmNoQmFyLS1oaWRkZW4nKTtcbiAgICAgIHRoaXMucXVlcnlFbC52YWx1ZSA9IHRoaXMucXVlcnk7XG5cbiAgICAgIHRoaXMuY29yZS5wZXJzaXN0ZW50U3RvcmFnZS5zZXQoU3RvcmFnZUtleXMuUVVFUlksIHRoaXMucXVlcnkpO1xuICAgICAgdGhpcy5jb3JlLnBlcnNpc3RlbnRTdG9yYWdlLmRlbGV0ZShTdG9yYWdlS2V5cy5TRUFSQ0hfT0ZGU0VUKTtcbiAgICAgIHRoaXMuY29yZS5nbG9iYWxTdG9yYWdlLmRlbGV0ZShTdG9yYWdlS2V5cy5TRUFSQ0hfT0ZGU0VUKTtcbiAgICAgIHRoaXMuY29yZS5zZXRRdWVyeSh0aGlzLnF1ZXJ5KTtcblxuICAgICAgLy8gRm9jdXMgdGhlIGlucHV0IGVsZW1lbnQgYWZ0ZXIgY2xlYXJpbmcgdGhlIHF1ZXJ5LCByZWdhcmRsZXNzIG9mIHdoZXRoZXJcbiAgICAgIC8vIG9yIG5vdCB0aGUgYXV0b0ZvY3VzIG9wdGlvbiBpcyBlbmFibGVkLlxuICAgICAgLy8gTk9URShhbXVsbGluZ3MpOiBUaGlzIGRlcGVuZHMgaGVhdmlseSBvbiB0aGUgZmFjdCB0aGF0IHRoZSByZS1yZW5kZXJzXG4gICAgICAvLyB0cmlnZ2VyZWQgYnkgc2V0U3RhdGUgYW5kIGNvcmUuc2V0UXVlcnkgaGFwcGVuIHN5bmNocm9ub3VzbHk7IGlmIHRoaXNcbiAgICAgIC8vIHN0b3BzIGJlaW5nIHRoZSBjYXNlIGF0IHNvbWUgcG9pbnQsIHdlJ2xsIG5lZWQgYW4gYWx0ZXJuYXRpdmUgc29sdXRpb25cbiAgICAgIHRoaXMuZm9jdXNJbnB1dEVsZW1lbnQoKTtcbiAgICB9KTtcblxuICAgIERPTS5vbih0aGlzLnF1ZXJ5RWwsICdpbnB1dCcsIGUgPT4ge1xuICAgICAgY29uc3QgaW5wdXQgPSBlLnRhcmdldC52YWx1ZTtcbiAgICAgIHRoaXMucXVlcnkgPSBpbnB1dDtcbiAgICAgIGlmICghdGhpcy5fc2hvd0NsZWFyQnV0dG9uICYmIGlucHV0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgdGhpcy5fc2hvd0NsZWFyQnV0dG9uID0gdHJ1ZTtcbiAgICAgICAgYnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoJ3l4dC1TZWFyY2hCYXItLWhpZGRlbicpO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLl9zaG93Q2xlYXJCdXR0b24gJiYgaW5wdXQubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHRoaXMuX3Nob3dDbGVhckJ1dHRvbiA9IGZhbHNlO1xuICAgICAgICBidXR0b24uY2xhc3NMaXN0LmFkZCgneXh0LVNlYXJjaEJhci0taGlkZGVuJyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogUmVnaXN0ZXJzIHRoZSBkaWZmZXJlbnQgZXZlbnQgaGFuZGxlcnMgdGhhdCBjYW4gaXNzdWUgYSBzZWFyY2guIE5vdGUgdGhhdFxuICAgKiBkaWZmZXJlbnQgaGFuZGxlcnMgYXJlIHVzZWQgZGVwZW5kaW5nIG9uIHdoZXRoZXIgb3Igbm90IGEgZm9ybSBpcyB1c2VkIGFzXG4gICAqIGNvbnRleHQuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBmb3JtU2VsZWN0b3IgQ1NTIHNlbGVjdG9yIHRvIGJpbmQgb3VyIGZvcm0gc3VibWl0IGhhbmRsaW5nIHRvXG4gICAqL1xuICBpbml0U2VhcmNoIChmb3JtU2VsZWN0b3IpIHtcbiAgICB0aGlzLl9mb3JtRWwgPSBmb3JtU2VsZWN0b3I7XG5cbiAgICB0aGlzLl9jb250YWluZXIuY2xhc3NMaXN0LmFkZCgneXh0LVNlYXJjaEJhci13cmFwcGVyJyk7XG5cbiAgICBpZiAodGhpcy5fdXNlRm9ybSkge1xuICAgICAgbGV0IGZvcm0gPSBET00ucXVlcnkodGhpcy5fY29udGFpbmVyLCBmb3JtU2VsZWN0b3IpO1xuICAgICAgaWYgKCFmb3JtKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAnQ291bGQgbm90IGluaXRpYWxpemUgU2VhcmNoQmFyOyBDYW4gbm90IGZpbmQge0hUTUxFbGVtZW50fSBgJyxcbiAgICAgICAgICB0aGlzLl9mb3JtRWwsICdgLicpO1xuICAgICAgfVxuXG4gICAgICBET00ub24oZm9ybSwgJ3N1Ym1pdCcsIChlKSA9PiB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgLy8gVE9ETyhvc2hpKSB3ZSBzaG91bGQgbm90IHVzZSB0aGUgc2FtZSBjc3Mgc2VsZWN0b3IgKHRoaXMuX2lucHV0RWwpXG4gICAgICAgIC8vIEZvciBib3RoIHRoZSBhdXRvY29tcGxldGUgQU5EIHRoZSBzZWFyY2ggYmFyIGlucHV0XG4gICAgICAgIC8vIFRoaXMgaXMgaW5jcmVkaWJseSBjb25mdXNpbmcsIGFuZCBhbHNvIG1ha2VzIHRoZSBmaXJzdCBET00ucXVlcnlcbiAgICAgICAgLy8gUmVseSBvbiB0aGUgb3JkZXIgb2YgdGhlIGlucHV0IGVsIGFuZCBhdXRvY29tcGxldGUgaW4gdGhlIHRlbXBsYXRlXG4gICAgICAgIGNvbnN0IGlucHV0RWwgPSBmb3JtLnF1ZXJ5U2VsZWN0b3IodGhpcy5faW5wdXRFbCk7XG4gICAgICAgIHRoaXMub25RdWVyeVN1Ym1pdChpbnB1dEVsKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBpbnB1dEVsID0gRE9NLnF1ZXJ5KHRoaXMuX2NvbnRhaW5lciwgdGhpcy5faW5wdXRFbCk7XG4gICAgICBpZiAoIWlucHV0RWwpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICdDb3VsZCBub3QgaW5pdGlhbGl6ZSBTZWFyY2hCYXI7IENhbiBub3QgZmluZCB7SFRNTEVsZW1lbnR9IGAnLFxuICAgICAgICAgIHRoaXMuX2lucHV0RWwsICdgLicpO1xuICAgICAgfVxuICAgICAgRE9NLm9uKGlucHV0RWwsICdrZXlkb3duJywgKGUpID0+IHtcbiAgICAgICAgaWYgKGUua2V5ID09PSAnRW50ZXInKSB7XG4gICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIHRoaXMub25RdWVyeVN1Ym1pdChpbnB1dEVsKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IHN1Ym1pdEJ1dHRvbiA9IERPTS5xdWVyeSh0aGlzLl9jb250YWluZXIsICcuanMteWV4dC1zdWJtaXQnKTtcbiAgICAgIERPTS5vbihzdWJtaXRCdXR0b24sICdjbGljaycsIChlKSA9PiB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgdGhpcy5vblF1ZXJ5U3VibWl0KGlucHV0RWwpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBoYW5kbGVyIGZvciBhIHF1ZXJ5IHN1Ym1pc3Npb24uIFRoaXMgbWV0aG9kIGZpcnN0IHNldHMgdGhlIG5ldyBxdWVyeSBpblxuICAgKiBwZXJzaXN0ZW50IGFuZCBnbG9iYWwgc3RvcmFnZSwgdGhhbiBwZXJmb3JtcyBhIGRlYm91bmNlZCBzZWFyY2guXG4gICAqXG4gICAqIEBwYXJhbSB7Tm9kZX0gaW5wdXRFbCBUaGUgaW5wdXQgZWxlbWVudCBjb250YWluaW5nIHRoZSBxdWVyeS5cbiAgICovXG4gIG9uUXVlcnlTdWJtaXQgKGlucHV0RWwpIHtcbiAgICBjb25zdCBxdWVyeSA9IGlucHV0RWwudmFsdWU7XG4gICAgdGhpcy5xdWVyeSA9IHF1ZXJ5O1xuICAgIGNvbnN0IHBhcmFtcyA9IG5ldyBTZWFyY2hQYXJhbXMod2luZG93LmxvY2F0aW9uLnNlYXJjaC5zdWJzdHJpbmcoMSkpO1xuICAgIHBhcmFtcy5zZXQoJ3F1ZXJ5JywgcXVlcnkpO1xuXG4gICAgY29uc3QgY29udGV4dCA9IHRoaXMuY29yZS5nbG9iYWxTdG9yYWdlLmdldFN0YXRlKFN0b3JhZ2VLZXlzLkFQSV9DT05URVhUKTtcbiAgICBpZiAoY29udGV4dCkge1xuICAgICAgcGFyYW1zLnNldChTdG9yYWdlS2V5cy5BUElfQ09OVEVYVCwgY29udGV4dCk7XG4gICAgfVxuXG4gICAgLy8gSWYgd2UgaGF2ZSBhIHJlZGlyZWN0VXJsLCB3ZSB3YW50IHRoZSBmb3JtIHRvIGJlXG4gICAgLy8gc2VyaWFsaXplZCBhbmQgc3VibWl0dGVkLlxuICAgIGlmICh0eXBlb2YgdGhpcy5yZWRpcmVjdFVybCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGlmICh0aGlzLl9hbGxvd0VtcHR5U2VhcmNoIHx8IHF1ZXJ5KSB7XG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gdGhpcy5yZWRpcmVjdFVybCArICc/JyArIHBhcmFtcy50b1N0cmluZygpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaW5wdXRFbC5ibHVyKCk7XG4gICAgRE9NLnF1ZXJ5KHRoaXMuX2NvbnRhaW5lciwgJy5qcy15ZXh0LXN1Ym1pdCcpLmJsdXIoKTtcbiAgICAvLyBUT0RPOiBtb3ZlIHRoaXMgaW50byBpbml0Q2xlYXJCdXR0b25cbiAgICBpZiAodGhpcy5jbGVhckJ1dHRvbikge1xuICAgICAgY29uc3QgYnV0dG9uID0gRE9NLnF1ZXJ5KHRoaXMuX2NvbnRhaW5lciwgJy5qcy15eHQtU2VhcmNoQmFyLWNsZWFyJyk7XG4gICAgICBpZiAodGhpcy5xdWVyeSkge1xuICAgICAgICB0aGlzLl9zaG93Q2xlYXJCdXR0b24gPSB0cnVlO1xuICAgICAgICBidXR0b24uY2xhc3NMaXN0LnJlbW92ZSgneXh0LVNlYXJjaEJhci0taGlkZGVuJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9zaG93Q2xlYXJCdXR0b24gPSBmYWxzZTtcbiAgICAgICAgYnV0dG9uLmNsYXNzTGlzdC5hZGQoJ3l4dC1TZWFyY2hCYXItLWhpZGRlbicpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAodGhpcy5pc1VzaW5nWWV4dEFuaW1hdGVkSWNvbikge1xuICAgICAgdGhpcy5hbmltYXRlSWNvblRvWWV4dCgpO1xuICAgIH1cblxuICAgIHRoaXMuY29yZS5wZXJzaXN0ZW50U3RvcmFnZS5zZXQoU3RvcmFnZUtleXMuUVVFUlksIHF1ZXJ5KTtcbiAgICB0aGlzLmNvcmUucGVyc2lzdGVudFN0b3JhZ2UuZGVsZXRlKFN0b3JhZ2VLZXlzLlNFQVJDSF9PRkZTRVQpO1xuICAgIHRoaXMuY29yZS5nbG9iYWxTdG9yYWdlLmRlbGV0ZShTdG9yYWdlS2V5cy5TRUFSQ0hfT0ZGU0VUKTtcbiAgICB0aGlzLmNvcmUuc2V0UXVlcnkocXVlcnkpO1xuICAgIHRoaXMuZGVib3VuY2VkU2VhcmNoKHF1ZXJ5KTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogQSBoZWxwZXIgbWV0aG9kIHRvIHdpcmUgdXAgb3VyIGF1dG8gY29tcGxldGUgb24gYW4gaW5wdXQgc2VsZWN0b3JcbiAgICogQHBhcmFtIHtzdHJpbmd9IGlucHV0U2VsZWN0b3IgQ1NTIHNlbGVjdG9yIHRvIGJpbmQgb3VyIGF1dG8gY29tcGxldGUgY29tcG9uZW50IHRvXG4gICAqL1xuICBpbml0QXV0b0NvbXBsZXRlIChpbnB1dFNlbGVjdG9yKSB7XG4gICAgdGhpcy5faW5wdXRFbCA9IGlucHV0U2VsZWN0b3I7XG5cbiAgICBpZiAodGhpcy5fYXV0b2NvbXBsZXRlKSB7XG4gICAgICB0aGlzLl9hdXRvY29tcGxldGUucmVtb3ZlKCk7XG4gICAgfVxuXG4gICAgdGhpcy5fYXV0b2NvbXBsZXRlID0gdGhpcy5jb21wb25lbnRNYW5hZ2VyLmNyZWF0ZSgnQXV0b0NvbXBsZXRlJywge1xuICAgICAgcGFyZW50Q29udGFpbmVyOiB0aGlzLl9jb250YWluZXIsXG4gICAgICBuYW1lOiB0aGlzLl9hdXRvQ29tcGxldGVOYW1lLFxuICAgICAgY29udGFpbmVyOiAnLnl4dC1TZWFyY2hCYXItYXV0b2NvbXBsZXRlJyxcbiAgICAgIGF1dG9Gb2N1czogdGhpcy5hdXRvRm9jdXMgJiYgIXRoaXMuYXV0b2NvbXBsZXRlT25Mb2FkLFxuICAgICAgdmVydGljYWxLZXk6IHRoaXMuX3ZlcnRpY2FsS2V5LFxuICAgICAgcHJvbXB0SGVhZGVyOiB0aGlzLnByb21wdEhlYWRlcixcbiAgICAgIG9yaWdpbmFsUXVlcnk6IHRoaXMucXVlcnksXG4gICAgICBpbnB1dEVsOiBpbnB1dFNlbGVjdG9yLFxuICAgICAgb25TdWJtaXQ6ICgpID0+IHtcbiAgICAgICAgaWYgKHRoaXMuX3VzZUZvcm0pIHtcbiAgICAgICAgICBET00udHJpZ2dlcihET00ucXVlcnkodGhpcy5fY29udGFpbmVyLCB0aGlzLl9mb3JtRWwpLCAnc3VibWl0Jyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc3QgaW5wdXRFbCA9IERPTS5xdWVyeSh0aGlzLl9jb250YWluZXIsIGlucHV0U2VsZWN0b3IpO1xuICAgICAgICAgIHRoaXMub25RdWVyeVN1Ym1pdChpbnB1dEVsKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIG9uQ2hhbmdlOiAoKSA9PiB7XG4gICAgICAgIERPTS50cmlnZ2VyKERPTS5xdWVyeSh0aGlzLl9jb250YWluZXIsIGlucHV0U2VsZWN0b3IpLCAnaW5wdXQnKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQZXJmb3JtcyBhIGRlYm91bmNlZCBxdWVyeSB1c2luZyB0aGUgcHJvdmlkZWQgc3RyaW5nIGlucHV0LiBTcGVjaWZpY2FsbHksIGEgbmV3IHNlYXJjaCBpcyBub3RcbiAgICogcGVyZm9ybWVkIGlmIHdlIHJlY2VudGx5IHNlYXJjaGVkLCBpZiB0aGVyZSdzIG5vIHF1ZXJ5IGZvciB1bml2ZXJzYWwgc2VhcmNoLCBvciBpZiB0aGlzXG4gICAqIGlzIGEgdHdpbiBzZWFyY2hiYXIuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBxdWVyeSBUaGUgc3RyaW5nIHRvIHF1ZXJ5IGFnYWluc3QuXG4gICAqIEByZXR1cm5zIHtQcm9taXNlfSBBIHByb21pc2UgdGhhdCB3aWxsIHBlcmZvcm0gdGhlIHF1ZXJ5IGFuZCB1cGRhdGUgZ2xvYmFsU3RvcmFnZSBhY2NvcmRpbmdseS5cbiAgICovXG4gIGRlYm91bmNlZFNlYXJjaCAocXVlcnkpIHtcbiAgICBpZiAodGhpcy5fdGhyb3R0bGVkIHx8XG4gICAgICAoIXF1ZXJ5ICYmICF0aGlzLl92ZXJ0aWNhbEtleSkgfHxcbiAgICAgICghcXVlcnkgJiYgdGhpcy5fdmVydGljYWxLZXkgJiYgIXRoaXMuX2FsbG93RW1wdHlTZWFyY2gpIHx8XG4gICAgICB0aGlzLl9pc1R3aW4pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLl90aHJvdHRsZWQgPSB0cnVlO1xuICAgIHNldFRpbWVvdXQoKCkgPT4geyB0aGlzLl90aHJvdHRsZWQgPSBmYWxzZTsgfSwgdGhpcy5fc2VhcmNoQ29vbGRvd24pO1xuXG4gICAgLy8gSWYgX3Byb21wdEZvckxvY2F0aW9uIGlzIGVuYWJsZWQsIHdlIHdpbGwgY29tcHV0ZSB0aGUgcXVlcnkncyBpbnRlbnQgYW5kLCBmcm9tIHRoZXJlLFxuICAgIC8vIGRldGVybWluZSBpZiBpdCdzIG5lY2Vzc2FyeSB0byBwcm9tcHQgdGhlIHVzZXIgZm9yIHRoZWlyIGxvY2F0aW9uIGluZm9ybWF0aW9uLiBJdCB3aWxsXG4gICAgLy8gYmUgdW5uZWNlc3NhcnkgaWYgdGhlIHF1ZXJ5IGRvZXMgbm90IGhhdmUgbmVhciBtZSBpbnRlbnQgb3Igd2UgYWxyZWFkeSBoYXZlIHRoZWlyIGxvY2F0aW9uXG4gICAgLy8gc3RvcmVkLlxuICAgIGlmICh0aGlzLl9wcm9tcHRGb3JMb2NhdGlvbikge1xuICAgICAgdGhpcy5mZXRjaFF1ZXJ5SW50ZW50cyhxdWVyeSlcbiAgICAgICAgLnRoZW4ocXVlcnlJbnRlbnRzID0+IHF1ZXJ5SW50ZW50cy5pbmNsdWRlcygnTkVBUl9NRScpKVxuICAgICAgICAudGhlbihxdWVyeUhhc05lYXJNZUludGVudCA9PiB7XG4gICAgICAgICAgaWYgKHF1ZXJ5SGFzTmVhck1lSW50ZW50ICYmICF0aGlzLmNvcmUuZ2xvYmFsU3RvcmFnZS5nZXRTdGF0ZShTdG9yYWdlS2V5cy5HRU9MT0NBVElPTikpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PlxuICAgICAgICAgICAgICBuYXZpZ2F0b3IuZ2VvbG9jYXRpb24uZ2V0Q3VycmVudFBvc2l0aW9uKFxuICAgICAgICAgICAgICAgIHBvc2l0aW9uID0+IHtcbiAgICAgICAgICAgICAgICAgIHRoaXMuY29yZS5nbG9iYWxTdG9yYWdlLnNldChTdG9yYWdlS2V5cy5HRU9MT0NBVElPTiwge1xuICAgICAgICAgICAgICAgICAgICBsYXQ6IHBvc2l0aW9uLmNvb3Jkcy5sYXRpdHVkZSxcbiAgICAgICAgICAgICAgICAgICAgbG5nOiBwb3NpdGlvbi5jb29yZHMubG9uZ2l0dWRlLFxuICAgICAgICAgICAgICAgICAgICByYWRpdXM6IHBvc2l0aW9uLmNvb3Jkcy5hY2N1cmFjeVxuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICByZXNvbHZlKHRoaXMuc2VhcmNoKHF1ZXJ5KSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICByZXNvbHZlKHRoaXMuc2VhcmNoKHF1ZXJ5KSk7XG4gICAgICAgICAgICAgICAgICBjb25zdCB7IGVuYWJsZWQsIG1lc3NhZ2UgfSA9IHRoaXMuX2dlb2xvY2F0aW9uVGltZW91dEFsZXJ0O1xuICAgICAgICAgICAgICAgICAgaWYgKGVuYWJsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgd2luZG93LmFsZXJ0KG1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdGhpcy5fZ2VvbG9jYXRpb25PcHRpb25zKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2VhcmNoKHF1ZXJ5KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5zZWFyY2gocXVlcnkpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBQZXJmb3JtcyBhIHF1ZXJ5IHVzaW5nIHRoZSBwcm92aWRlZCBzdHJpbmcgaW5wdXQuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBxdWVyeSBUaGUgc3RyaW5nIHRvIHF1ZXJ5IGFnYWluc3QuXG4gICAqIEByZXR1cm5zIHtQcm9taXNlfSBBIHByb21pc2UgdGhhdCB3aWxsIHBlcmZvcm0gdGhlIHF1ZXJ5IGFuZCB1cGRhdGUgZ2xvYmFsU3RvcmFnZSBhY2NvcmRpbmdseS5cbiAgICovXG4gIHNlYXJjaCAocXVlcnkpIHtcbiAgICBpZiAodGhpcy5fdmVydGljYWxLZXkpIHtcbiAgICAgIHRoaXMuY29yZS52ZXJ0aWNhbFNlYXJjaChcbiAgICAgICAgdGhpcy5fY29uZmlnLnZlcnRpY2FsS2V5LFxuICAgICAgICB7XG4gICAgICAgICAgcmVzZXRQYWdpbmF0aW9uOiB0cnVlLFxuICAgICAgICAgIHNldFF1ZXJ5UGFyYW1zOiB0cnVlXG4gICAgICAgIH0sXG4gICAgICAgIHsgaW5wdXQ6IHF1ZXJ5IH1cbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIE5PVEUoYmlsbHkpIFRlbXBvcmFyeSBoYWNrIGZvciBERU1PXG4gICAgICAvLyBSZW1vdmUgbWUgYWZ0ZXIgdGhlIGRlbW9cbiAgICAgIGxldCBuYXYgPSB0aGlzLmNvbXBvbmVudE1hbmFnZXJcbiAgICAgICAgLmdldEFjdGl2ZUNvbXBvbmVudCgnTmF2aWdhdGlvbicpO1xuXG4gICAgICBpZiAobmF2KSB7XG4gICAgICAgIGxldCB0YWJzID0gbmF2LmdldFN0YXRlKCd0YWJzJyk7XG4gICAgICAgIGxldCB1cmxzID0ge307XG5cbiAgICAgICAgaWYgKHRhYnMgJiYgQXJyYXkuaXNBcnJheSh0YWJzKSkge1xuICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGFicy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbGV0IHBhcmFtcyA9IG5ldyBTZWFyY2hQYXJhbXModGFic1tpXS51cmwuc3BsaXQoJz8nKVsxXSk7XG4gICAgICAgICAgICBwYXJhbXMuc2V0KCdxdWVyeScsIHF1ZXJ5KTtcblxuICAgICAgICAgICAgbGV0IHVybCA9IHRhYnNbaV0uYmFzZVVybDtcbiAgICAgICAgICAgIGlmIChwYXJhbXMudG9TdHJpbmcoKS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgIHVybCArPSAnPycgKyBwYXJhbXMudG9TdHJpbmcoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHVybHNbdGFic1tpXS5jb25maWdJZF0gPSB1cmw7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmNvcmUuc2VhcmNoKHF1ZXJ5LCB1cmxzLCB7IHNldFF1ZXJ5UGFyYW1zOiB0cnVlIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5jb3JlLnNlYXJjaChxdWVyeSwgdW5kZWZpbmVkLCB7IHNldFF1ZXJ5UGFyYW1zOiB0cnVlIH0pO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBBIGhlbHBlciBtZXRob2QgdGhhdCBjb21wdXRlcyB0aGUgaW50ZW50cyBvZiB0aGUgcHJvdmlkZWQgcXVlcnkuIElmIHRoZSBxdWVyeSB3YXMgZW50ZXJlZFxuICAgKiBtYW51YWxseSBpbnRvIHRoZSBzZWFyY2ggYmFyIG9yIHNlbGVjdGVkIHZpYSBhdXRvY29tcGxldGUsIGl0cyBpbnRlbnRzIHdpbGwgaGF2ZSBiZWVuIHN0b3JlZFxuICAgKiBhbHJlYWR5IGluIGdsb2JhbFN0b3JhZ2UuIE90aGVyd2lzZSwgYSBuZXcgQVBJIGNhbGwgd2lsbCBoYXZlIHRvIGJlIGlzc3VlZCB0byBkZXRlcm1pbmVcbiAgICogaW50ZW50LlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcXVlcnkgVGhlIHF1ZXJ5IHdob3NlIGludGVudCBpcyBuZWVkZWQuXG4gICAqIEByZXR1cm5zIHtQcm9taXNlfSBBIHByb21pc2UgY29udGFpbmluZyB0aGUgaW50ZW50cyBvZiB0aGUgcXVlcnkuXG4gICAqL1xuICBmZXRjaFF1ZXJ5SW50ZW50cyAocXVlcnkpIHtcbiAgICBjb25zdCBhdXRvY29tcGxldGVEYXRhID1cbiAgICAgIHRoaXMuY29yZS5nbG9iYWxTdG9yYWdlLmdldFN0YXRlKGAke1N0b3JhZ2VLZXlzLkFVVE9DT01QTEVURX0uJHt0aGlzLl9hdXRvQ29tcGxldGVOYW1lfWApO1xuICAgIGlmICghYXV0b2NvbXBsZXRlRGF0YSkge1xuICAgICAgY29uc3QgYXV0b2NvbXBsZXRlUmVxdWVzdCA9IHRoaXMuX3ZlcnRpY2FsS2V5XG4gICAgICAgID8gdGhpcy5jb3JlLmF1dG9Db21wbGV0ZVZlcnRpY2FsKFxuICAgICAgICAgIHF1ZXJ5LFxuICAgICAgICAgIHRoaXMuX2F1dG9Db21wbGV0ZU5hbWUsXG4gICAgICAgICAgdGhpcy5fdmVydGljYWxLZXkpXG4gICAgICAgIDogdGhpcy5jb3JlLmF1dG9Db21wbGV0ZVVuaXZlcnNhbChxdWVyeSwgdGhpcy5fYXV0b0NvbXBsZXRlTmFtZSk7XG4gICAgICByZXR1cm4gYXV0b2NvbXBsZXRlUmVxdWVzdC50aGVuKGRhdGEgPT4gZGF0YS5pbnB1dEludGVudHMpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBUaGVyZSBhcmUgdHdvIGFsdGVybmF0aXZlcyB0byBjb25zaWRlciBoZXJlLiBUaGUgdXNlciBjb3VsZCBoYXZlIHNlbGVjdGVkIHRoZSBxdWVyeVxuICAgICAgLy8gYXMgYW4gYXV0b2NvbXBsZXRlIG9wdGlvbiBvciBtYW51YWxseSBpbnB1dCBpdCB0aGVtc2VsdmVzLiBJZiB0aGUgZm9ybWVyLCB1c2UgdGhlIGludGVudHNcbiAgICAgIC8vIG9mIHRoZSBjb3JyZXNwb25kaW5nIGF1dG9jb21wbGV0ZSBvcHRpb24uIElmIHRoZSBsYXR0ZXIsIHVzZSB0aGUgaW5wdXRJbnRlbnRzIG9mIHRoZVxuICAgICAgLy8gYXV0b2NvbXBsZXRlRGF0YS5cbiAgICAgIGNvbnN0IHJlc3VsdHMgPSBhdXRvY29tcGxldGVEYXRhLnNlY3Rpb25zLmZsYXRNYXAoc2VjdGlvbiA9PiBzZWN0aW9uLnJlc3VsdHMpO1xuICAgICAgY29uc3QgbWF0Y2hpbmdSZXN1bHQgPSByZXN1bHRzLmZpbmQocmVzdWx0ID0+IHJlc3VsdC52YWx1ZSA9PT0gcXVlcnkpO1xuICAgICAgY29uc3QgcXVlcnlJbnRlbnRzID0gbWF0Y2hpbmdSZXN1bHQgPyBtYXRjaGluZ1Jlc3VsdC5pbnRlbnRzIDogYXV0b2NvbXBsZXRlRGF0YS5pbnB1dEludGVudHM7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHF1ZXJ5SW50ZW50cyk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEEgaGVscGVyIG1ldGhvZCB0aGF0IGNvbnN0cnVjdHMgdGhlIG1ldGEgaW5mb3JtYXRpb24gbmVlZGVkIGJ5IHRoZSBTRUFSQ0hfQ0xFQVJfQlVUVE9OXG4gICAqIGFuYWx5dGljcyBldmVudC5cbiAgICovXG4gIGV2ZW50T3B0aW9ucyAoKSB7XG4gICAgY29uc3QgcXVlcnlJZCA9IHRoaXMuY29yZS5nbG9iYWxTdG9yYWdlLmdldFN0YXRlKFN0b3JhZ2VLZXlzLlFVRVJZX0lEKTtcbiAgICBjb25zdCBvcHRpb25zID0gT2JqZWN0LmFzc2lnbihcbiAgICAgIHt9LFxuICAgICAgcXVlcnlJZCAmJiB7IHF1ZXJ5SWQgfSxcbiAgICAgIHRoaXMuX3ZlcnRpY2FsS2V5ICYmIHsgdmVydGljYWxLZXk6IHRoaXMuX3ZlcnRpY2FsS2V5IH1cbiAgICApO1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShvcHRpb25zKTtcbiAgfVxuXG4gIHNldFN0YXRlIChkYXRhKSB7XG4gICAgY29uc3QgZm9yd2FyZEljb25PcHRzID0ge1xuICAgICAgaWNvbk5hbWU6ICd5ZXh0X2FuaW1hdGVkX2ZvcndhcmQnLFxuICAgICAgY2xhc3NOYW1lczogJ0ljb24tLWxnJyxcbiAgICAgIGNvbXBsZXhDb250ZW50c1BhcmFtczoge1xuICAgICAgICBpY29uUHJlZml4OiB0aGlzLm5hbWVcbiAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IHJldmVyc2VJY29uT3B0cyA9IHtcbiAgICAgIGljb25OYW1lOiAneWV4dF9hbmltYXRlZF9yZXZlcnNlJyxcbiAgICAgIGNsYXNzTmFtZXM6ICdJY29uLS1sZycsXG4gICAgICBjb21wbGV4Q29udGVudHNQYXJhbXM6IHtcbiAgICAgICAgaWNvblByZWZpeDogdGhpcy5uYW1lXG4gICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gc3VwZXIuc2V0U3RhdGUoT2JqZWN0LmFzc2lnbih7XG4gICAgICB0aXRsZTogdGhpcy50aXRsZSxcbiAgICAgIGxhYmVsVGV4dDogdGhpcy5sYWJlbFRleHQsXG4gICAgICBzdWJtaXRJY29uOiB0aGlzLnN1Ym1pdEljb24sXG4gICAgICBzdWJtaXRUZXh0OiB0aGlzLnN1Ym1pdFRleHQsXG4gICAgICBjbGVhclRleHQ6IHRoaXMuY2xlYXJUZXh0LFxuICAgICAgc2hvd0NsZWFyQnV0dG9uOiB0aGlzLl9zaG93Q2xlYXJCdXR0b24sXG4gICAgICBxdWVyeTogdGhpcy5xdWVyeSB8fCAnJyxcbiAgICAgIGV2ZW50T3B0aW9uczogdGhpcy5ldmVudE9wdGlvbnMoKSxcbiAgICAgIGljb25JZDogdGhpcy5uYW1lLFxuICAgICAgZm9yd2FyZEljb25PcHRzOiBmb3J3YXJkSWNvbk9wdHMsXG4gICAgICByZXZlcnNlSWNvbk9wdHM6IHJldmVyc2VJY29uT3B0cyxcbiAgICAgIGF1dG9Gb2N1czogdGhpcy5hdXRvRm9jdXMgJiYgIXRoaXMucXVlcnksXG4gICAgICB1c2VGb3JtOiB0aGlzLl91c2VGb3JtXG4gICAgfSwgZGF0YSkpO1xuICB9XG5cbiAgZm9jdXNJbnB1dEVsZW1lbnQgKCkge1xuICAgIERPTS5xdWVyeSh0aGlzLl9jb250YWluZXIsIHRoaXMuX2lucHV0RWwpLmZvY3VzKCk7XG4gIH1cbn1cbiIsIi8qKiBAbW9kdWxlIFNlYXJjaFBhcmFtc1BhcnNlciAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBidWlsZFNlYXJjaFBhcmFtZXRlcnMgKHNlYXJjaFBhcmFtZXRlckNvbmZpZ3MpIHtcbiAgbGV0IHNlYXJjaFBhcmFtZXRlcnMgPSB7XG4gICAgc2VjdGlvbmVkOiBmYWxzZSxcbiAgICBmaWVsZHM6IFtdXG4gIH07XG4gIGlmIChzZWFyY2hQYXJhbWV0ZXJDb25maWdzID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gc2VhcmNoUGFyYW1ldGVycztcbiAgfVxuICBpZiAoc2VhcmNoUGFyYW1ldGVyQ29uZmlncy5zZWN0aW9uZWQpIHtcbiAgICBzZWFyY2hQYXJhbWV0ZXJzLnNlY3Rpb25lZCA9IHNlYXJjaFBhcmFtZXRlckNvbmZpZ3Muc2VjdGlvbmVkO1xuICB9XG4gIHNlYXJjaFBhcmFtZXRlcnMuZmllbGRzID0gYnVpbGRGaWVsZHMoc2VhcmNoUGFyYW1ldGVyQ29uZmlncy5maWVsZHMpO1xuICByZXR1cm4gc2VhcmNoUGFyYW1ldGVycztcbn1cblxuZnVuY3Rpb24gYnVpbGRGaWVsZHMgKGZpZWxkQ29uZmlncykge1xuICBpZiAoZmllbGRDb25maWdzID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gW107XG4gIH1cblxuICByZXR1cm4gZmllbGRDb25maWdzLm1hcChmYyA9PiAoeyBmZXRjaEVudGl0aWVzOiBmYWxzZSwgLi4uZmMgfSkpO1xufVxuIiwiLyoqIEBtb2R1bGUgRmlsdGVyU2VhcmNoQ29tcG9uZW50ICovXG5cbmltcG9ydCBDb21wb25lbnQgZnJvbSAnLi4vY29tcG9uZW50JztcbmltcG9ydCBET00gZnJvbSAnLi4vLi4vZG9tL2RvbSc7XG5pbXBvcnQgU3RvcmFnZUtleXMgZnJvbSAnLi4vLi4vLi4vY29yZS9zdG9yYWdlL3N0b3JhZ2VrZXlzJztcbmltcG9ydCBGaWx0ZXIgZnJvbSAnLi4vLi4vLi4vY29yZS9tb2RlbHMvZmlsdGVyJztcbmltcG9ydCBTZWFyY2hQYXJhbXMgZnJvbSAnLi4vLi4vZG9tL3NlYXJjaHBhcmFtcyc7XG5pbXBvcnQgYnVpbGRTZWFyY2hQYXJhbWV0ZXJzIGZyb20gJy4uLy4uL3Rvb2xzL3NlYXJjaHBhcmFtc3BhcnNlcic7XG5pbXBvcnQgRmlsdGVyTm9kZUZhY3RvcnkgZnJvbSAnLi4vLi4vLi4vY29yZS9maWx0ZXJzL2ZpbHRlcm5vZGVmYWN0b3J5JztcbmltcG9ydCBDb21wb25lbnRUeXBlcyBmcm9tICcuLi8uLi9jb21wb25lbnRzL2NvbXBvbmVudHR5cGVzJztcblxuLyoqXG4gKiBGaWx0ZXJTZWFyY2hDb21wb25lbnQgaXMgdXNlZCBmb3IgYXV0b2NvbXBsZXRlIHVzaW5nIHRoZSBGaWx0ZXJTZWFyY2ggYmFja2VuZC5cbiAqIEl0J2xsIGFsbG93IHlvdSB0byBwaWNrIHByZS1zZXQgZmlsdGVycyB0aGF0IGFyZSBzZXR1cCBvbiB0aGUgYmFja2VuZCB3aXRoaW5cbiAqIGEgdmVydGljYWwgc2VhcmNoIGNvbnRleHQuXG4gKlxuICogQGV4dGVuZHMgQ29tcG9uZW50XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEZpbHRlclNlYXJjaENvbXBvbmVudCBleHRlbmRzIENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yIChjb25maWcgPSB7fSwgc3lzdGVtQ29uZmlnID0ge30pIHtcbiAgICBzdXBlcihjb25maWcsIHN5c3RlbUNvbmZpZyk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgdmVydGljYWwga2V5IGZvciB2ZXJ0aWNhbCBzZWFyY2ggY29uZmlndXJhdGlvblxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgdGhpcy5fdmVydGljYWxLZXkgPSBjb25maWcudmVydGljYWxLZXkgfHwgbnVsbDtcblxuICAgIC8qKlxuICAgICAqIElmIHRydWUsIHN0b3JlIHRoZSBmaWx0ZXIgdmFsdWUgYnV0IGRvIG5vdCBzZWFyY2ggb24gY2hhbmdlXG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLl9zdG9yZU9uQ2hhbmdlID0gY29uZmlnLnN0b3JlT25DaGFuZ2UgfHwgZmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiBRdWVyeSBzdWJtaXNzaW9uIGlzIGJhc2VkIG9uIGEgZm9ybSBhcyBjb250ZXh0LlxuICAgICAqIE9wdGlvbmFsbHkgcHJvdmlkZWQsIG90aGVyd2lzZSBkZWZhdWx0cyB0byBuYXRpdmUgZm9ybSBub2RlIHdpdGhpbiBjb250YWluZXJcbiAgICAgKiBAdHlwZSB7c3RyaW5nfSBDU1Mgc2VsZWN0b3JcbiAgICAgKi9cbiAgICB0aGlzLl9mb3JtRWwgPSBjb25maWcuZm9ybVNlbGVjdG9yIHx8ICdmb3JtJztcblxuICAgIC8qKlxuICAgICAqIFRoZSBpbnB1dCBlbGVtZW50IHVzZWQgZm9yIHNlYXJjaGluZyBhbmQgd2lyZXMgdXAgdGhlIGtleWJvYXJkIGludGVyYWN0aW9uXG4gICAgICogT3B0aW9uYWxseSBwcm92aWRlZC5cbiAgICAgKiBAdHlwZSB7c3RyaW5nfSBDU1Mgc2VsZWN0b3JcbiAgICAgKi9cbiAgICB0aGlzLl9pbnB1dEVsID0gY29uZmlnLmlucHV0RWwgfHwgJy5qcy15ZXh0LXF1ZXJ5JztcblxuICAgIC8qKlxuICAgICAqIFRoZSB0aXRsZSB1c2VkLCBwcm92aWRlZCB0byB0aGUgdGVtcGxhdGUgYXMgYSBkYXRhIHBvaW50XG4gICAgICogT3B0aW9uYWxseSBwcm92aWRlZC5cbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMudGl0bGUgPSBjb25maWcudGl0bGU7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgc2VhcmNoIHRleHQgdXNlZCBmb3IgbGFiZWxpbmcgdGhlIGlucHV0IGJveCwgYWxzbyBwcm92aWRlZCB0byB0ZW1wbGF0ZS5cbiAgICAgKiBPcHRpb25hbGx5IHByb3ZpZGVkXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLnNlYXJjaFRleHQgPSBjb25maWcuc2VhcmNoVGV4dCB8fCAnV2hhdCBhcmUgeW91IGludGVyZXN0ZWQgaW4/JztcblxuICAgIC8qKlxuICAgICAqIFRoZSBxdWVyeSB0ZXh0IHRvIHNob3cgYXMgdGhlIGZpcnN0IGl0ZW0gZm9yIGF1dG8gY29tcGxldGUuXG4gICAgICogT3B0aW9uYWxseSBwcm92aWRlZFxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgdGhpcy5wcm9tcHRIZWFkZXIgPSBjb25maWcucHJvbXB0SGVhZGVyIHx8IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBBdXRvIGZvY3VzZXMgdGhlIGlucHV0IGJveCBpZiBzZXQgdG8gdHJ1ZS5cbiAgICAgKiBPcHRpb25hbGx5IHByb3ZpZGVkLCBkZWZhdWx0cyB0byBmYWxzZS5cbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICB0aGlzLmF1dG9Gb2N1cyA9IGNvbmZpZy5hdXRvRm9jdXMgPT09IHRydWU7XG5cbiAgICAvKipcbiAgICAgKiBzdWJtaXRVUkwgd2lsbCBmb3JjZSB0aGUgc2VhcmNoIHF1ZXJ5IHN1Ym1pc3Npb24gdG8gZ2V0XG4gICAgICogcmVkaXJlY3RlZCB0byB0aGUgVVJMIHByb3ZpZGVkLlxuICAgICAqIE9wdGlvbmFsLCBkZWZhdWx0cyB0byBudWxsLlxuICAgICAqXG4gICAgICogSWYgbm8gcmVkaXJlY3RVcmwgcHJvdmlkZWQsIHdlIGtlZXAgdGhlIHBhZ2UgYXMgYSBzaW5nbGUgcGFnZSBhcHAuXG4gICAgICpcbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICB0aGlzLnJlZGlyZWN0VXJsID0gY29uZmlnLnJlZGlyZWN0VXJsIHx8IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgcXVlcnkgc3RyaW5nIHRvIHVzZSBmb3IgdGhlIGlucHV0IGJveCwgcHJvdmlkZWQgdG8gdGVtcGxhdGUgZm9yIHJlbmRlcmluZy5cbiAgICAgKiBPcHRpb25hbGx5IHByb3ZpZGVkXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLnF1ZXJ5ID0gY29uZmlnLnF1ZXJ5IHx8IHRoaXMuY29yZS5nbG9iYWxTdG9yYWdlLmdldFN0YXRlKGAke1N0b3JhZ2VLZXlzLlFVRVJZfS4ke3RoaXMubmFtZX1gKSB8fCAnJztcbiAgICB0aGlzLmNvcmUuZ2xvYmFsU3RvcmFnZS5vbigndXBkYXRlJywgYCR7U3RvcmFnZUtleXMuUVVFUll9LiR7dGhpcy5uYW1lfWAsIHEgPT4ge1xuICAgICAgdGhpcy5xdWVyeSA9IHE7XG4gICAgICB0aGlzLnNlYXJjaCgpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGZpbHRlciBzdHJpbmcgdG8gdXNlIGZvciB0aGUgcHJvdmlkZWQgcXVlcnlcbiAgICAgKiBPcHRpb25hbGx5IHByb3ZpZGVkXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLmZpbHRlciA9IGNvbmZpZy5maWx0ZXIgfHwgdGhpcy5jb3JlLmdsb2JhbFN0b3JhZ2UuZ2V0U3RhdGUoYCR7U3RvcmFnZUtleXMuRklMVEVSfS4ke3RoaXMubmFtZX1gKTtcbiAgICBpZiAodHlwZW9mIHRoaXMuZmlsdGVyID09PSAnc3RyaW5nJykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgdGhpcy5maWx0ZXIgPSBKU09OLnBhcnNlKHRoaXMuZmlsdGVyKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgfVxuXG4gICAgaWYgKHRoaXMucXVlcnkgJiYgdGhpcy5maWx0ZXIpIHtcbiAgICAgIGNvbnN0IGZpbHRlck5vZGUgPSB0aGlzLl9idWlsZEZpbHRlck5vZGUodGhpcy5xdWVyeSwgdGhpcy5maWx0ZXIpO1xuICAgICAgdGhpcy5jb3JlLnNldFN0YXRpY0ZpbHRlck5vZGVzKHRoaXMubmFtZSwgZmlsdGVyTm9kZSk7XG4gICAgfVxuXG4gICAgdGhpcy5zZWFyY2hQYXJhbWV0ZXJzID0gYnVpbGRTZWFyY2hQYXJhbWV0ZXJzKGNvbmZpZy5zZWFyY2hQYXJhbWV0ZXJzKTtcbiAgfVxuXG4gIHN0YXRpYyBnZXQgdHlwZSAoKSB7XG4gICAgcmV0dXJuIENvbXBvbmVudFR5cGVzLkZJTFRFUl9TRUFSQ0g7XG4gIH1cblxuICAvKipcbiAgICogVGhlIHRlbXBsYXRlIHRvIHJlbmRlclxuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHN0YXRpYyBkZWZhdWx0VGVtcGxhdGVOYW1lICgpIHtcbiAgICByZXR1cm4gJ3NlYXJjaC9maWx0ZXJzZWFyY2gnO1xuICB9XG5cbiAgLy8gVE9ETyhvc2hpKTogU1BSLTE5MjUgY2hlY2sgdGhhdCBpdCBpcyBzYWZlIHRvIHJlbW92ZSB0aGlzLCBpdCBydW5zIGFuIGV4dHJhIHNlYXJjaFxuICAvLyBGb3Igbm8gb2J2aW91cyByZWFzb25zXG4gIG9uQ3JlYXRlICgpIHtcbiAgICBpZiAodGhpcy5xdWVyeSAmJiB0aGlzLmZpbHRlcikge1xuICAgICAgdGhpcy5zZWFyY2goKTtcbiAgICB9XG4gIH1cblxuICBvbk1vdW50ICgpIHtcbiAgICBpZiAodGhpcy5hdXRvQ29tcGxldGVDb21wb25lbnQpIHtcbiAgICAgIHRoaXMuYXV0b0NvbXBsZXRlQ29tcG9uZW50LnJlbW92ZSgpO1xuICAgIH1cbiAgICAvLyBXaXJlIHVwIG91ciBzZWFyY2ggaGFuZGxpbmcgYW5kIGF1dG8gY29tcGxldGVcbiAgICB0aGlzLmluaXRBdXRvQ29tcGxldGUodGhpcy5faW5wdXRFbCk7XG5cbiAgICBpZiAodGhpcy5hdXRvRm9jdXMgPT09IHRydWUgJiYgdGhpcy5xdWVyeS5sZW5ndGggPT09IDApIHtcbiAgICAgIERPTS5xdWVyeSh0aGlzLl9jb250YWluZXIsIHRoaXMuX2lucHV0RWwpLmZvY3VzKCk7XG4gICAgfVxuICB9XG5cbiAgX3JlbW92ZUZpbHRlck5vZGUgKCkge1xuICAgIHRoaXMucXVlcnkgPSAnJztcbiAgICB0aGlzLmNvcmUucGVyc2lzdGVudFN0b3JhZ2Uuc2V0KGAke1N0b3JhZ2VLZXlzLlFVRVJZfS4ke3RoaXMubmFtZX1gLCB0aGlzLnF1ZXJ5KTtcbiAgICB0aGlzLmNvcmUuY2xlYXJTdGF0aWNGaWx0ZXJOb2RlKHRoaXMubmFtZSk7XG4gICAgdGhpcy5zZXRTdGF0ZSgpO1xuICB9XG5cbiAgX2J1aWxkRmlsdGVyTm9kZSAocXVlcnksIGZpbHRlcikge1xuICAgIHJldHVybiBGaWx0ZXJOb2RlRmFjdG9yeS5mcm9tKHtcbiAgICAgIGZpbHRlcjogZmlsdGVyLFxuICAgICAgbWV0YWRhdGE6IHtcbiAgICAgICAgZmllbGROYW1lOiB0aGlzLnRpdGxlLFxuICAgICAgICBkaXNwbGF5VmFsdWU6IGAke3F1ZXJ5fWBcbiAgICAgIH0sXG4gICAgICByZW1vdmU6ICgpID0+IHRoaXMuX3JlbW92ZUZpbHRlck5vZGUoKVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgaGVscGVyIG1ldGhvZCB0byB3aXJlIHVwIG91ciBhdXRvIGNvbXBsZXRlIG9uIGFuIGlucHV0IHNlbGVjdG9yXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpbnB1dFNlbGVjdG9yIENTUyBzZWxlY3RvciB0byBiaW5kIG91ciBhdXRvIGNvbXBsZXRlIGNvbXBvbmVudCB0b1xuICAgKi9cbiAgaW5pdEF1dG9Db21wbGV0ZSAoaW5wdXRTZWxlY3Rvcikge1xuICAgIHRoaXMuX2lucHV0RWwgPSBpbnB1dFNlbGVjdG9yO1xuXG4gICAgdGhpcy5hdXRvQ29tcGxldGVDb21wb25lbnQgPSB0aGlzLmNvbXBvbmVudE1hbmFnZXIuY3JlYXRlKCdBdXRvQ29tcGxldGUnLCB7XG4gICAgICBwYXJlbnRDb250YWluZXI6IHRoaXMuX2NvbnRhaW5lcixcbiAgICAgIG5hbWU6IGAke3RoaXMubmFtZX0uYXV0b2NvbXBsZXRlYCxcbiAgICAgIGlzRmlsdGVyU2VhcmNoOiB0cnVlLFxuICAgICAgY29udGFpbmVyOiAnLnl4dC1TZWFyY2hCYXItYXV0b2NvbXBsZXRlJyxcbiAgICAgIHByb21wdEhlYWRlcjogdGhpcy5wcm9tcHRIZWFkZXIsXG4gICAgICBvcmlnaW5hbFF1ZXJ5OiB0aGlzLnF1ZXJ5LFxuICAgICAgaW5wdXRFbDogaW5wdXRTZWxlY3RvcixcbiAgICAgIHZlcnRpY2FsS2V5OiB0aGlzLl92ZXJ0aWNhbEtleSxcbiAgICAgIHNlYXJjaFBhcmFtZXRlcnM6IHRoaXMuc2VhcmNoUGFyYW1ldGVycyxcbiAgICAgIG9uU3VibWl0OiAocXVlcnksIGZpbHRlcikgPT4ge1xuICAgICAgICB0aGlzLmZpbHRlciA9IEZpbHRlci5mcm9tUmVzcG9uc2UoZmlsdGVyKTtcbiAgICAgICAgY29uc3QgZmlsdGVyTm9kZSA9IHRoaXMuX2J1aWxkRmlsdGVyTm9kZShxdWVyeSwgdGhpcy5maWx0ZXIpO1xuXG4gICAgICAgIGNvbnN0IHBhcmFtcyA9IG5ldyBTZWFyY2hQYXJhbXMod2luZG93LmxvY2F0aW9uLnNlYXJjaC5zdWJzdHJpbmcoMSkpO1xuICAgICAgICBwYXJhbXMuc2V0KGAke3RoaXMubmFtZX0ucXVlcnlgLCBxdWVyeSk7XG4gICAgICAgIHBhcmFtcy5zZXQoYCR7dGhpcy5uYW1lfS5maWx0ZXJgLCBmaWx0ZXIpO1xuXG4gICAgICAgIC8vIElmIHdlIGhhdmUgYSByZWRpcmVjdFVybCwgd2Ugd2FudCB0aGUgcGFyYW1zIHRvIGJlXG4gICAgICAgIC8vIHNlcmlhbGl6ZWQgYW5kIHN1Ym1pdHRlZC5cbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLnJlZGlyZWN0VXJsID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gdGhpcy5yZWRpcmVjdFVybCArICc/JyArIHBhcmFtcy50b1N0cmluZygpO1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHNhdmUgdGhlIGZpbHRlciB0byBzdG9yYWdlIGZvciB0aGUgbmV4dCBzZWFyY2hcbiAgICAgICAgdGhpcy5xdWVyeSA9IHF1ZXJ5O1xuICAgICAgICB0aGlzLmNvcmUucGVyc2lzdGVudFN0b3JhZ2Uuc2V0KGAke1N0b3JhZ2VLZXlzLlFVRVJZfS4ke3RoaXMubmFtZX1gLCB0aGlzLnF1ZXJ5KTtcbiAgICAgICAgdGhpcy5jb3JlLnBlcnNpc3RlbnRTdG9yYWdlLnNldChgJHtTdG9yYWdlS2V5cy5GSUxURVJ9LiR7dGhpcy5uYW1lfWAsIGZpbHRlck5vZGUuZ2V0RmlsdGVyKCkpO1xuICAgICAgICB0aGlzLmNvcmUuc2V0U3RhdGljRmlsdGVyTm9kZXModGhpcy5uYW1lLCBmaWx0ZXJOb2RlKTtcbiAgICAgICAgdGhpcy5zZWFyY2goKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQZXJmb3JtIHRoZSB2ZXJ0aWNhbCBzZWFyY2ggd2l0aCBhbGwgc2F2ZWQgZmlsdGVycyBhbmQgcXVlcnksXG4gICAqIG9wdGlvbmFsbHkgcmVkaXJlY3RpbmcgYmFzZWQgb24gY29uZmlnLiBVc2VzIHdpbmRvdy5zZXRUaW1lb3V0IHRvIGFsbG93XG4gICAqIG90aGVyIGZpbHRlcnMgdG8gZmluaXNoIHJlbmRlcmluZyBiZWZvcmUgc2VhcmNoaW5nLlxuICAgKi9cbiAgc2VhcmNoICgpIHtcbiAgICBpZiAodGhpcy5fc3RvcmVPbkNoYW5nZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB3aW5kb3cuc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICB0aGlzLmNvcmUudmVydGljYWxTZWFyY2godGhpcy5fY29uZmlnLnZlcnRpY2FsS2V5LCB7XG4gICAgICAgIHNldFF1ZXJ5UGFyYW1zOiB0cnVlLFxuICAgICAgICByZXNldFBhZ2luYXRpb246IHRydWUsXG4gICAgICAgIHVzZUZhY2V0czogdHJ1ZVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBzZXRTdGF0ZSAoZGF0YSkge1xuICAgIHJldHVybiBzdXBlci5zZXRTdGF0ZShPYmplY3QuYXNzaWduKHtcbiAgICAgIHRpdGxlOiB0aGlzLnRpdGxlLFxuICAgICAgc2VhcmNoVGV4dDogdGhpcy5zZWFyY2hUZXh0LFxuICAgICAgcXVlcnk6IHRoaXMucXVlcnlcbiAgICB9LCBkYXRhKSk7XG4gIH1cbn1cbiIsIi8qKiBAbW9kdWxlIEF1dG9Db21wbGV0ZUNvbXBvbmVudCAqL1xuXG5pbXBvcnQgQ29tcG9uZW50IGZyb20gJy4uL2NvbXBvbmVudCc7XG5pbXBvcnQgRE9NIGZyb20gJy4uLy4uL2RvbS9kb20nO1xuaW1wb3J0IFN0b3JhZ2VLZXlzIGZyb20gJy4uLy4uLy4uL2NvcmUvc3RvcmFnZS9zdG9yYWdla2V5cyc7XG5cbmNvbnN0IEtleXMgPSB7XG4gIEJBQ0tTUEFDRTogOCxcbiAgVEFCOiA5LFxuICBFTlRFUjogMTMsXG4gIFNISUZUOiAxNixcbiAgQ1RSTDogMTcsXG4gIEFMVDogMTgsXG4gIEVTQ0FQRTogMjcsXG5cbiAgTEVGVDogMzcsXG4gIFJJR0hUOiAzOSxcbiAgVVA6IDM4LFxuXG4gIERFTEVURTogNDYsXG4gIERPV046IDQwLFxuICBMRUZUX09TX0tFWTogOTEsXG4gIFJJR0hUX09TX0tFWTogOTIsXG4gIFNFTEVDVF9LRVk6IDkzXG59O1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBdXRvQ29tcGxldGVDb21wb25lbnQgZXh0ZW5kcyBDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvciAob3B0cyA9IHt9LCBzeXN0ZW1PcHRzID0ge30pIHtcbiAgICBzdXBlcihvcHRzLCBzeXN0ZW1PcHRzKTtcblxuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgYXV0b2NvbXBsZXRlIGlzIHNpbXBsZSBvciBmaWx0ZXJcbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICB0aGlzLmlzRmlsdGVyU2VhcmNoID0gb3B0cy5pc0ZpbHRlclNlYXJjaCB8fCBmYWxzZTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBgdmVydGljYWxLZXlgIG9mIHRoZSB2ZXJ0aWNhbCBzZWFyY2ggdG8gdXNlIGZvciBhdXRvLWNvbXBsZXRlXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLl92ZXJ0aWNhbEtleSA9IG9wdHMudmVydGljYWxLZXkgfHwgbnVsbDtcblxuICAgIC8qKlxuICAgICAqIEEgcmVmZXJlbmNlIHRvIHRoZSBpbnB1dCBlbCBzZWxlY3RvciBmb3IgYXV0byBjb21wbGV0ZVxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgdGhpcy5faW5wdXRFbCA9IG9wdHMuaW5wdXRFbCB8fCAnLmpzLXlleHQtcXVlcnknO1xuXG4gICAgLyoqXG4gICAgICogQSBzZWxlY3RvciBmb3IgdGhlIGF1dG9jb21wbGV0ZSBlbGVtZW50ZXNcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMuX2F1dG9jb21wbGV0ZUVscyA9IG9wdHMuYXV0b0NvbXBsZXRlRWxzIHx8ICcuanMteWV4dC1hdXRvY29tcGxldGUtb3B0aW9uJztcblxuICAgIC8qKlxuICAgICAqIEFuIGludGVybmFsIHJlZmVyZW5jZSBmb3IgdGhlIGRhdGEtc3RvcmFnZSB0byBsaXN0ZW4gZm9yIHVwZGF0ZXMgZnJvbSB0aGUgc2VydmVyXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLm1vZHVsZUlkID0gYCR7U3RvcmFnZUtleXMuQVVUT0NPTVBMRVRFfS4ke3RoaXMubmFtZX1gO1xuXG4gICAgLyoqXG4gICAgICogQW4gaW50ZXJuYWwgcmVmZXJlbmNlIHRvIHRoZSBpbnB1dCB2YWx1ZSB3aGVuIHR5cGluZy5cbiAgICAgKiBXZSB1c2UgdGhpcyBmb3IgcmVzZXR0aW5nIHRoZSBzdGF0ZSBvZiB0aGUgaW5wdXQgdmFsdWUgd2hlbiBvdGhlciBpbnRlcmFjdGlvbnMgKGUuZy4gcmVzdWx0IG5hdmlnYXRpb24pXG4gICAgICogY2hhbmdlIGJhc2VkIG9uIGludGVyYWN0aW9ucy4gRm9yIGluc3RhbmNlLCBoaXR0aW5nIGVzY2FwZSBzaG91bGQgcmVzZXQgdGhlIHZhbHVlIHRvIHRoZSBvcmlnaW5hbCB0eXBlZCBxdWVyeS5cbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMuX29yaWdpbmFsUXVlcnkgPSBvcHRzLm9yaWdpbmFsUXVlcnkgfHwgJyc7XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIGZvciBrZXlib2FyZCBuYXZpZ2F0aW9uIHRocm91Z2ggcmVzdWx0cy5cbiAgICAgKiBBbiBpbnRlcm5hbCByZWZlcmVuY2UgdG8gdGhlIGN1cnJlbnQgc2VjdGlvbiB3ZSdyZSBuYXZpZ2F0aW5nIGluLlxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy5fc2VjdGlvbkluZGV4ID0gMDtcblxuICAgIC8qKlxuICAgICAqIFVzZWQgZm9yIGtleWJvYXJkIG5hdmlnYXRpb24gdGhyb3VnaCByZXN1bHRzLlxuICAgICAqIEFuIGludGVybmFsIHJlZmVyZW5jZSB0byB0aGUgY3VycmVudCByZXN1bHQgaW5kZXggd2UncmUgbmF2aWdhdGluZyBvbi5cbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIHRoaXMuX3Jlc3VsdEluZGV4ID0gLTE7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgcXVlcnkgdGV4dCB0byBzaG93IGFzIHRoZSBmaXJzdCBpdGVtIGZvciBhdXRvIGNvbXBsZXRlLlxuICAgICAqIE9wdGlvbmFsbHkgcHJvdmlkZWRcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMucHJvbXB0SGVhZGVyID0gb3B0cy5wcm9tcHRIZWFkZXIgfHwgbnVsbDtcblxuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgdGhlIGlucHV0IGlzIGF1dG9jb21hdGljYWxseSBmb2N1c2VkIG9yIG5vdFxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqL1xuICAgIHRoaXMuX2F1dG9Gb2N1cyA9IG9wdHMuYXV0b0ZvY3VzIHx8IGZhbHNlO1xuXG4gICAgLyoqXG4gICAgICogQ2FsbGJhY2sgaW52b2tlZCB3aGVuIHRoZSBgRW50ZXJgIGtleSBpcyBwcmVzc2VkIG9uIGF1dG8gY29tcGxldGUuXG4gICAgICovXG4gICAgdGhpcy5fb25TdWJtaXQgPSBvcHRzLm9uU3VibWl0IHx8IGZ1bmN0aW9uICgpIHt9O1xuXG4gICAgLyoqXG4gICAgICogQ2FsbGJhY2sgaW52b2tlZCB3aGVuIGtleXMgYXJlIHVzZWQgdG8gbmF2aWdhdGUgdGhyb3VnaCB0aGUgYXV0byBjb21wbGV0ZS4gTm90ZSB0aGF0IHRoaXMgaXNcbiAgICAgKiBub3QgY2FsbGVkIHdoZW4gZWl0aGVyIHRoZSBgRW50ZXJgIGtleSBpcyBwcmVzc2VkIG9yIHRoZSBtb3VzZSBpcyB1c2VkIHRvIHNlbGVjdCBhblxuICAgICAqIGF1dG9jb21wbGV0ZSBvcHRpb24uXG4gICAgICovXG4gICAgdGhpcy5fb25DaGFuZ2UgPSBvcHRzLm9uQ2hhbmdlIHx8IGZ1bmN0aW9uICgpIHt9O1xuXG4gICAgdGhpcy5fc2VhcmNoUGFyYW1ldGVycyA9IG9wdHMuc2VhcmNoUGFyYW1ldGVycyB8fCBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBhbGlhc2VkIHVzZWQgYnkgdGhlIGNvbXBvbmVudCBtYW5hZ2VyIGZvciBjcmVhdGlvbi5cbiAgICovXG4gIHN0YXRpYyBnZXQgdHlwZSAoKSB7XG4gICAgcmV0dXJuICdBdXRvQ29tcGxldGUnO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSB0ZW1wbGF0ZSB0byByZW5kZXJcbiAgICogQHJldHVybnMge3N0cmluZ31cbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBzdGF0aWMgZGVmYXVsdFRlbXBsYXRlTmFtZSAoY29uZmlnKSB7XG4gICAgcmV0dXJuICdzZWFyY2gvYXV0b2NvbXBsZXRlJztcbiAgfVxuXG4gIC8qKlxuICAgKiBzZXRTdGF0ZSBpcyBvdmVycmlkZGVuIHNvIHRoYXQgd2UgY2FuIHByb3ZpZGUgYWRkaXRpb25hbCBtZXRhIGRhdGFcbiAgICogdG8gdGhlIHRlbXBsYXRlIChlLmcuIHRoZSBzZWN0aW9uSW5kZXggYW5kIHJlc3VsdEluZGV4KSwgc2luY2VcbiAgICogdGhvc2UgYXJlIGNsaWVudC1pbnRlcmFjdGlvbiBzcGVjaWZpYyB2YWx1ZXMgYW5kIGFyZW4ndCByZXR1cm5lZCBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqL1xuICBzZXRTdGF0ZSAoZGF0YSkge1xuICAgIGlmICghdGhpcy5pc1F1ZXJ5SW5wdXRGb2N1c2VkKCkpIHtcbiAgICAgIHRoaXMuX3NlY3Rpb25JbmRleCA9IDA7XG4gICAgICB0aGlzLl9yZXN1bHRJbmRleCA9IC0xO1xuICAgICAgZGF0YSA9IHt9O1xuICAgIH1cbiAgICBzdXBlci5zZXRTdGF0ZShPYmplY3QuYXNzaWduKHt9LCBkYXRhLCB7XG4gICAgICBoYXNSZXN1bHRzOiB0aGlzLmhhc1Jlc3VsdHMoZGF0YSksXG4gICAgICBzZWN0aW9uSW5kZXg6IHRoaXMuX3NlY3Rpb25JbmRleCxcbiAgICAgIHJlc3VsdEluZGV4OiB0aGlzLl9yZXN1bHRJbmRleCxcbiAgICAgIHByb21wdEhlYWRlcjogdGhpcy5fb3JpZ2luYWxRdWVyeS5sZW5ndGggPT09IDAgPyB0aGlzLnByb21wdEhlYWRlciA6IG51bGxcbiAgICB9KSk7XG4gIH1cblxuICBpc1F1ZXJ5SW5wdXRGb2N1c2VkICgpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAmJlxuICAgICAgZG9jdW1lbnQuYWN0aXZlRWxlbWVudC5jbGFzc05hbWUuaW5jbHVkZXModGhpcy5faW5wdXRFbC5zdWJzdHJpbmcoMSkpO1xuICB9XG5cbiAgLyoqXG4gICAqIHVwZGF0ZVN0YXRlIGlzIGEgaGVscGVyIHRvIGFwcGx5IHRoZSBjdXJyZW50IHN0YXRlIHdpdGggbmV3IGNsaWVudC1zdGF0ZS5cbiAgICovXG4gIHVwZGF0ZVN0YXRlICgpIHtcbiAgICB0aGlzLnNldFN0YXRlKHRoaXMuX3N0YXRlLmdldCgpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBvbkNyZWF0ZSBpcyB0cmlnZ2VyZWQgd2hlbiB0aGUgY29tcG9uZW50IGlzIGNvbnN0cnVjdGVkIGZyb20gdGhlIGZyYW1ld29yay5cbiAgICogT25jZSB3ZSdyZSBpbml0YWxpemVkLCB3ZSB3aXJlIHVwIGFsbCBvZiBvdXIgdXNlciBpbnRlcmFjdGlvbnNcbiAgICovXG4gIG9uQ3JlYXRlICgpIHtcbiAgICAvLyBVc2UgdGhlIGNvbnRleHQgb2YgdGhlIHBhcmVudCBjb21wb25lbnQgdG8gZmluZCB0aGUgaW5wdXQgbm9kZS5cbiAgICBsZXQgcXVlcnlJbnB1dCA9IERPTS5xdWVyeSh0aGlzLl9wYXJlbnRDb250YWluZXIsIHRoaXMuX2lucHV0RWwpO1xuICAgIGlmICghcXVlcnlJbnB1dCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdDb3VsZCBub3QgaW5pdGlhbGl6ZSBBdXRvQ29tcGxldGUuIENhbiBub3QgZmluZCB7SFRNTEVsZW1lbnR9IGAnLCB0aGlzLl9pbnB1dEVsLCAnYC4nKTtcbiAgICB9XG5cbiAgICAvLyBEaXNhYmxlIHRoZSBuYXRpdmUgYXV0b2NvbXBsZXRlLCBhdXRvY29ycmVjdCAmIHNwZWxsY2hlY2tcbiAgICBET00uYXR0cmlidXRlcyhxdWVyeUlucHV0LCB7XG4gICAgICBhdXRvY29tcGxldGU6ICdvZmYnLFxuICAgICAgYXV0b2NvcnJlY3Q6ICdvZmYnLFxuICAgICAgc3BlbGxjaGVjazogJ2ZhbHNlJ1xuICAgIH0pO1xuXG4gICAgLy8gVGhlIHVzZXIgZXhpdHMgdGhlIGlucHV0LCBzbyB3ZSB3YW50IHRvIHJlc2V0IHRoZSBzdGF0ZSBhbmQgY2xvc2VcbiAgICAvLyB0aGUgYXV0byBjb21wbGV0ZVxuICAgIC8vIFRPRE8oamRlbGVybWUpOiBDbG9zZSBsb2dpYyB0byBiZSBtb3ZlZCB0byBwYXJlbnRcbiAgICBET00ub24oZG9jdW1lbnQsICdjbGljaycsIGUgPT4ge1xuICAgICAgaWYgKERPTS5tYXRjaGVzKGUudGFyZ2V0LCAnLmpzLXl4dC1BdXRvQ29tcGxldGUtd3JhcHBlciAqJykgfHwgRE9NLm1hdGNoZXMoZS50YXJnZXQsIHRoaXMuX2lucHV0RWwpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICB9KTtcblxuICAgIC8vIFdoZW4gYSB1c2VyIGZvY3VzZXMgdGhlIGlucHV0LCB3ZSBzaG91bGQgcG9wdWxhdGUgdGhlIGF1dG9jb21wbGV0ZSBiYXNlZFxuICAgIC8vIG9uIHRoZSBjdXJyZW50IHZhbHVlXG4gICAgRE9NLm9uKHF1ZXJ5SW5wdXQsICdmb2N1cycsICgpID0+IHtcbiAgICAgIHRoaXMucmVzZXQoKTtcbiAgICAgIHRoaXMuYXV0b0NvbXBsZXRlKHF1ZXJ5SW5wdXQudmFsdWUpO1xuICAgIH0pO1xuXG4gICAgLy8gQWxsb3cgdGhlIHVzZXIgdG8gbmF2aWdhdGUgYmV0d2VlbiB0aGUgcmVzdWx0cyB1c2luZyB0aGUga2V5Ym9hcmRcbiAgICBET00ub24ocXVlcnlJbnB1dCwgJ2tleWRvd24nLCAoZSkgPT4ge1xuICAgICAgdGhpcy5oYW5kbGVOYXZpZ2F0ZVJlc3VsdHMoZS5rZXlDb2RlLCBlKTtcbiAgICAgIHRoaXMuaGFuZGxlU3VibWl0UmVzdWx0KGUua2V5Q29kZSwgcXVlcnlJbnB1dC52YWx1ZSwgZSk7XG4gICAgfSk7XG5cbiAgICBpZiAodGhpcy5fYXV0b0ZvY3VzKSB7XG4gICAgICBET00ub25jZShxdWVyeUlucHV0LCAnY2xpY2snLCAoKSA9PiB7XG4gICAgICAgIHRoaXMuYXV0b0NvbXBsZXRlKHF1ZXJ5SW5wdXQudmFsdWUpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gQWxsb3cgdGhlIHVzZXIgdG8gc2VsZWN0IGEgcmVzdWx0IHdpdGggdGhlIG1vdXNlXG4gICAgRE9NLmRlbGVnYXRlKHRoaXMuX2NvbnRhaW5lciwgJy5qcy15ZXh0LWF1dG9jb21wbGV0ZS1vcHRpb24nLCAnY2xpY2snLCAoZXZ0LCB0YXJnZXQpID0+IHtcbiAgICAgIGxldCBkYXRhID0gdGFyZ2V0LmRhdGFzZXQ7XG4gICAgICBsZXQgdmFsID0gZGF0YS5zaG9ydDtcblxuICAgICAgdGhpcy51cGRhdGVRdWVyeSh2YWwpO1xuICAgICAgdGhpcy5fb25TdWJtaXQodmFsLCBkYXRhLmZpbHRlcik7XG4gICAgICB0aGlzLmNsb3NlKCk7XG4gICAgfSk7XG5cbiAgICAvLyBXaGVuIHRoZSB1c2VyIGlzIHR5cGluZyBpbiB0aGUgaW5wdXQsIHByb2Nlc3MgdGhlIGF1dG8gY29tcGxldGUuXG4gICAgRE9NLm9uKHF1ZXJ5SW5wdXQsICdrZXl1cCcsIChlKSA9PiB7XG4gICAgICB0aGlzLmhhbmRsZVR5cGluZyhlLmtleUNvZGUsIHF1ZXJ5SW5wdXQudmFsdWUsIGUpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIGNsb3NlIHdpbGwgaGlkZSB0aGUgYXV0byBjb21wbGV0ZSByZXN1bHRzIGFuZCByZXNldCB0aGUgc3RhdGUuXG4gICAqL1xuICBjbG9zZSAoKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7fSk7XG4gICAgdGhpcy5yZXNldCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIHJlc2V0cyB0aGUgY2xpZW50IHN0YXRlIHRvIHRoZWlyIG9yaWdpbmFsIHZhbHVlcyBhbmQgdHJpZ2dlcnNcbiAgICogYSB0ZW1wbGF0ZS1yZXJlbmRlciB2aWEgdXBkYXRlU3RhdGVcbiAgICovXG4gIHJlc2V0ICgpIHtcbiAgICB0aGlzLl9zZWN0aW9uSW5kZXggPSAwO1xuICAgIHRoaXMuX3Jlc3VsdEluZGV4ID0gLTE7XG4gICAgdGhpcy51cGRhdGVTdGF0ZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEhlbHBlciBtZXRob2QgdG8gdXBkYXRlIHRoZSBpbnB1dCB0ZXh0XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRWYWx1ZSBPcHRpb24gdmFsdWUgcHJvdmlkZWQuXG4gICAqIElmIG5vIHZhbHVlIHByb3ZpZGVkLCB3ZSdsbCB0cnkgdG8gZmluZCBpdCBiYXNlZCBvbiB0aGUgc2VsZWN0aW9uIGluZGV4ZXMuXG4gICAqL1xuICB1cGRhdGVRdWVyeSAob3B0VmFsdWUpIHtcbiAgICAvLyBPbmx5IHdhbnQgdG8gdXBkYXRlIHRoZSBxdWVyeSBzdHJpbmcgaWYgdGhlcmVzIGEgdmFsdWUuXG4gICAgLy8gSWYgb25lIGlzIHByb3ZpZGVkLCBncmVhdC5cbiAgICAvLyBPdGhlcndpc2UsIGxldHMgdHJ5IHRvIGZpbmQgaXQgZnJvbSB0aGUgY3VycmVudCBzZWxlY3Rpb24gaW4gdGhlIHJlc3VsdHMuXG4gICAgaWYgKG9wdFZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGxldCBzZWN0aW9ucyA9IHRoaXMuX3N0YXRlLmdldCgnc2VjdGlvbnMnKTtcblxuICAgICAgbGV0IHJlc3VsdHMgPSBzZWN0aW9uc1t0aGlzLl9zZWN0aW9uSW5kZXhdLnJlc3VsdHM7XG4gICAgICBvcHRWYWx1ZSA9IHJlc3VsdHNbdGhpcy5fcmVzdWx0SW5kZXhdLnNob3J0VmFsdWU7XG4gICAgfVxuXG4gICAgbGV0IHF1ZXJ5RWwgPSBET00ucXVlcnkodGhpcy5fcGFyZW50Q29udGFpbmVyLCB0aGlzLl9pbnB1dEVsKTtcbiAgICBxdWVyeUVsLnZhbHVlID0gb3B0VmFsdWU7XG4gIH1cblxuICBoYW5kbGVUeXBpbmcgKGtleSwgdmFsdWUsIGUpIHtcbiAgICBsZXQgaWdub3JlZEtleXMgPSBbXG4gICAgICBLZXlzLkRPV04sXG4gICAgICBLZXlzLlVQLFxuICAgICAgS2V5cy5DVFJMLFxuICAgICAgS2V5cy5BTFQsXG4gICAgICBLZXlzLlNISUZULFxuICAgICAgS2V5cy5MRUZULFxuICAgICAgS2V5cy5SSUdIVCxcbiAgICAgIEtleXMuTEVGVF9PU19LRVksXG4gICAgICBLZXlzLlJJR0hUX09TX0tFWSxcbiAgICAgIEtleXMuRU5URVIsXG4gICAgICBLZXlzLlRBQixcbiAgICAgIEtleXMuU0VMRUNUX0tFWVxuICAgIF07XG5cbiAgICBpZiAoaWdub3JlZEtleXMuaW5kZXhPZihrZXkpID4gLTEpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBVc2VyIGVzY2FwZXMgb3V0IG9mIGF1dG8gY29tcGxldGUsIHNvIHdlIHJlc2V0IGl0IHRvIHRoZSBvcmlnaW5hbCBpbnB1dFxuICAgIGlmIChrZXkgPT09IEtleXMuRVNDQVBFKSB7XG4gICAgICB0aGlzLnVwZGF0ZVF1ZXJ5KHRoaXMuX29yaWdpbmFsUXVlcnkpO1xuICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIFVwZGF0ZSB0aGUgb3JpZ2luYWwgdmFsdWUgYmFzZWQgb24gdGhlIHVzZXIgaW5wdXRcbiAgICB0aGlzLl9vcmlnaW5hbFF1ZXJ5ID0gdmFsdWU7XG5cbiAgICB0aGlzLnJlc2V0KCk7XG4gICAgdGhpcy5hdXRvQ29tcGxldGUodmFsdWUpO1xuICB9XG5cbiAgYXV0b0NvbXBsZXRlIChpbnB1dCkge1xuICAgIGlmICh0aGlzLmlzRmlsdGVyU2VhcmNoKSB7XG4gICAgICB0aGlzLmNvcmUuYXV0b0NvbXBsZXRlRmlsdGVyKGlucHV0LCB7XG4gICAgICAgIG5hbWVzcGFjZTogdGhpcy5uYW1lLFxuICAgICAgICB2ZXJ0aWNhbEtleTogdGhpcy5fdmVydGljYWxLZXksXG4gICAgICAgIHNlYXJjaFBhcmFtZXRlcnM6IHRoaXMuX3NlYXJjaFBhcmFtZXRlcnNcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAodGhpcy5fdmVydGljYWxLZXkpIHtcbiAgICAgIHRoaXMuY29yZS5hdXRvQ29tcGxldGVWZXJ0aWNhbChpbnB1dCwgdGhpcy5uYW1lLCB0aGlzLl92ZXJ0aWNhbEtleSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuY29yZS5hdXRvQ29tcGxldGVVbml2ZXJzYWwoaW5wdXQsIHRoaXMubmFtZSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIHJldHVybnMgdHJ1ZSBpZiB3ZSBoYXZlIHJlc3VsdHMgaW4gYW55IHNlY3Rpb25cbiAgICogQHJldHVybnMgYm9vbGVhblxuICAgKi9cbiAgaGFzUmVzdWx0cyAoZGF0YSkge1xuICAgIGlmICghZGF0YSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBsZXQgc2VjdGlvbnMgPSBkYXRhWydzZWN0aW9ucyddO1xuICAgIGlmICghc2VjdGlvbnMpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNlY3Rpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBkYXRhID0gc2VjdGlvbnNbaV07XG4gICAgICBpZiAoIWRhdGEpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBjb25zdCByZXN1bHRzID0gZGF0YS5yZXN1bHRzO1xuICAgICAgaWYgKCFyZXN1bHRzKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAocmVzdWx0cy5sZW5ndGggPiAwKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGhhbmRsZU5hdmlnYXRlUmVzdWx0cyAoa2V5LCBlKSB7XG4gICAgbGV0IHNlY3Rpb25zID0gdGhpcy5fc3RhdGUuZ2V0KCdzZWN0aW9ucycpO1xuICAgIGlmIChzZWN0aW9ucyA9PT0gdW5kZWZpbmVkIHx8IHNlY3Rpb25zLmxlbmd0aCA8PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gVGFiYmluZyBvdXQgb3IgZW50ZXIgc2hvdWxkIGNsb3NlIHRoZSBhdXRvIGNvbXBsZXRlLlxuICAgIGlmIChrZXkgPT09IEtleXMuVEFCKSB7XG4gICAgICB0aGlzLmNsb3NlKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbGV0IHJlc3VsdHMgPSBzZWN0aW9uc1t0aGlzLl9zZWN0aW9uSW5kZXhdLnJlc3VsdHM7XG4gICAgaWYgKGtleSA9PT0gS2V5cy5VUCkge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgaWYgKHRoaXMuX3Jlc3VsdEluZGV4IDw9IDApIHtcbiAgICAgICAgaWYgKHRoaXMuX3NlY3Rpb25JbmRleCA+IDApIHtcbiAgICAgICAgICB0aGlzLl9zZWN0aW9uSW5kZXgtLTtcbiAgICAgICAgICB0aGlzLl9yZXN1bHRJbmRleCA9IHNlY3Rpb25zW3RoaXMuX3NlY3Rpb25JbmRleF0ucmVzdWx0cy5sZW5ndGggLSAxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMudXBkYXRlUXVlcnkodGhpcy5fb3JpZ2luYWxRdWVyeSk7XG4gICAgICAgICAgdGhpcy5yZXNldCgpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnVwZGF0ZVF1ZXJ5KCk7XG4gICAgICAgIHRoaXMudXBkYXRlU3RhdGUoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9yZXN1bHRJbmRleC0tO1xuICAgICAgdGhpcy51cGRhdGVTdGF0ZSgpO1xuICAgICAgdGhpcy51cGRhdGVRdWVyeSgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChrZXkgPT09IEtleXMuRE9XTikge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgaWYgKHRoaXMuX3Jlc3VsdEluZGV4ID49IHJlc3VsdHMubGVuZ3RoIC0gMSkge1xuICAgICAgICBpZiAodGhpcy5fc2VjdGlvbkluZGV4IDwgc2VjdGlvbnMubGVuZ3RoIC0gMSkge1xuICAgICAgICAgIHRoaXMuX3NlY3Rpb25JbmRleCsrO1xuICAgICAgICAgIHRoaXMuX3Jlc3VsdEluZGV4ID0gMDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnVwZGF0ZVF1ZXJ5KCk7XG4gICAgICAgIHRoaXMudXBkYXRlU3RhdGUoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9yZXN1bHRJbmRleCsrO1xuICAgICAgdGhpcy51cGRhdGVRdWVyeSgpO1xuICAgICAgdGhpcy51cGRhdGVTdGF0ZSgpO1xuICAgIH1cbiAgfVxuXG4gIGhhbmRsZVN1Ym1pdFJlc3VsdCAoa2V5LCB2YWx1ZSwgZSkge1xuICAgIGxldCBzZWN0aW9ucyA9IHRoaXMuX3N0YXRlLmdldCgnc2VjdGlvbnMnKTtcbiAgICBpZiAoc2VjdGlvbnMgPT09IHVuZGVmaW5lZCB8fCBzZWN0aW9ucy5sZW5ndGggPD0gMCkge1xuICAgICAgaWYgKHRoaXMuaXNGaWx0ZXJTZWFyY2gpIHtcbiAgICAgICAgdGhpcy5hdXRvQ29tcGxldGUodmFsdWUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIHN1Ym1pdCB0aGUgc2VhcmNoIG9uIGVudGVyXG4gICAgaWYgKGtleSA9PT0gS2V5cy5FTlRFUikge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICBpZiAodGhpcy5pc0ZpbHRlclNlYXJjaCAmJiB0aGlzLl9yZXN1bHRJbmRleCA9PT0gLTEpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBsZXQgZmlsdGVyID0gJyc7XG4gICAgICBpZiAodGhpcy5fc2VjdGlvbkluZGV4ID49IDAgJiYgdGhpcy5fcmVzdWx0SW5kZXggPj0gMCkge1xuICAgICAgICBmaWx0ZXIgPSBKU09OLnN0cmluZ2lmeShzZWN0aW9uc1t0aGlzLl9zZWN0aW9uSW5kZXhdLnJlc3VsdHNbdGhpcy5fcmVzdWx0SW5kZXhdLmZpbHRlcik7XG4gICAgICB9XG5cbiAgICAgIHRoaXMudXBkYXRlUXVlcnkodmFsdWUpO1xuICAgICAgdGhpcy5fb3JpZ2luYWxRdWVyeSA9IHZhbHVlO1xuICAgICAgdGhpcy5fb25TdWJtaXQodmFsdWUsIGZpbHRlcik7XG4gICAgICB0aGlzLmNsb3NlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX29uQ2hhbmdlKCk7XG4gICAgfVxuICB9XG59XG4iLCIvKiogQG1vZHVsZSBTcGVsbENoZWNrQ29tcG9uZW50ICovXG5cbmltcG9ydCBDb21wb25lbnQgZnJvbSAnLi4vY29tcG9uZW50JztcbmltcG9ydCBTZWFyY2hQYXJhbXMgZnJvbSAnLi4vLi4vZG9tL3NlYXJjaHBhcmFtcyc7XG5pbXBvcnQgU3RvcmFnZUtleXMgZnJvbSAnLi4vLi4vLi4vY29yZS9zdG9yYWdlL3N0b3JhZ2VrZXlzJztcblxuY29uc3QgREVGQVVMVF9DT05GSUcgPSB7XG4gIHN1Z2dlc3Rpb25IZWxwVGV4dDogJ0RpZCB5b3UgbWVhbjonXG59O1xuXG4vKipcbiAqIFNwZWxsQ2hlY2tDb21wb25lbnQgd2lsbCBzdXBwb3J0IGRpc3BsYXlpbmcgc3VnZ2VzdGlvbiwgYXV0b2NvcnJlY3QgYW5kIGNvbWJpbmVkKG1heWJlIGluIHRoZSBmdXR1cmUpXG4gKiBwcm92aWRlZCBmcm9tIHNwZWxsaW5nIGNvcnJlY3Rpb24uXG4gKlxuICogQGV4dGVuZHMgQ29tcG9uZW50XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNwZWxsQ2hlY2tDb21wb25lbnQgZXh0ZW5kcyBDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvciAoY29uZmlnID0ge30sIHN5c3RlbUNvbmZpZyA9IHt9KSB7XG4gICAgc3VwZXIoeyAuLi5ERUZBVUxUX0NPTkZJRywgLi4uY29uZmlnIH0sIHN5c3RlbUNvbmZpZyk7XG5cbiAgICB0aGlzLm1vZHVsZUlkID0gU3RvcmFnZUtleXMuU1BFTExfQ0hFQ0s7XG4gIH1cblxuICBzdGF0aWMgZ2V0IHR5cGUgKCkge1xuICAgIHJldHVybiAnU3BlbGxDaGVjayc7XG4gIH1cblxuICBzdGF0aWMgZGVmYXVsdFRlbXBsYXRlTmFtZSAoKSB7XG4gICAgcmV0dXJuICdzZWFyY2gvc3BlbGxjaGVjayc7XG4gIH1cblxuICBvbkNyZWF0ZSAoKSB7XG4gICAgdGhpcy5jb3JlLnBlcnNpc3RlbnRTdG9yYWdlLmRlbGV0ZSgnc2tpcFNwZWxsQ2hlY2snLCB0cnVlKTtcbiAgICB0aGlzLmNvcmUucGVyc2lzdGVudFN0b3JhZ2UuZGVsZXRlKCdxdWVyeVRyaWdnZXInLCB0cnVlKTtcbiAgfVxuXG4gIHNldFN0YXRlIChkYXRhLCB2YWwpIHtcbiAgICByZXR1cm4gc3VwZXIuc2V0U3RhdGUoT2JqZWN0LmFzc2lnbih7fSwgZGF0YSwge1xuICAgICAgc2hvdWxkU2hvdzogZGF0YS5jb3JyZWN0ZWRRdWVyeSAhPT0gdW5kZWZpbmVkLFxuICAgICAgY29ycmVjdGVkUXVlcnlVcmw6IHRoaXMuX2J1aWxkUmVkaXJlY3RRdWVyeVVybChkYXRhLmNvcnJlY3RlZFF1ZXJ5LCBkYXRhLnR5cGUpLFxuICAgICAgaGVscFRleHQ6IHRoaXMuX2dldEhlbHBUZXh0KGRhdGEudHlwZSlcbiAgICB9LCB2YWwpKTtcbiAgfVxuXG4gIF9idWlsZFJlZGlyZWN0UXVlcnlVcmwgKHF1ZXJ5LCB0eXBlKSB7XG4gICAgaWYgKHF1ZXJ5ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG4gICAgbGV0IHBhcmFtcyA9IG5ldyBTZWFyY2hQYXJhbXMod2luZG93LmxvY2F0aW9uLnNlYXJjaC5zdWJzdHJpbmcoMSkpO1xuICAgIHBhcmFtcy5zZXQoJ3F1ZXJ5JywgcXVlcnkudmFsdWUpO1xuICAgIHBhcmFtcy5zZXQoJ3NraXBTcGVsbENoZWNrJywgdHJ1ZSk7XG4gICAgcGFyYW1zLnNldCgncXVlcnlUcmlnZ2VyJywgdHlwZS50b0xvd2VyQ2FzZSgpKTtcbiAgICByZXR1cm4gJz8nICsgcGFyYW1zLnRvU3RyaW5nKCk7XG4gIH1cblxuICBfZ2V0SGVscFRleHQgKHR5cGUpIHtcbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgIGNhc2UgJ1NVR0dFU1QnOlxuICAgICAgICByZXR1cm4gdGhpcy5fY29uZmlnLnN1Z2dlc3Rpb25IZWxwVGV4dDtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiAnJztcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCBDb21wb25lbnQgZnJvbSAnLi4vY29tcG9uZW50JztcbmltcG9ydCBTdG9yYWdlS2V5cyBmcm9tICcuLi8uLi8uLi9jb3JlL3N0b3JhZ2Uvc3RvcmFnZWtleXMnO1xuaW1wb3J0IERPTSBmcm9tICcuLi8uLi9kb20vZG9tJztcblxuY29uc3QgREVGQVVMVF9DT05GSUcgPSB7XG4gIGlwQWNjdXJhY3lIZWxwVGV4dDogJ2Jhc2VkIG9uIHlvdXIgaW50ZXJuZXQgYWRkcmVzcycsXG4gIGRldmljZUFjY3VyYWN5SGVscFRleHQ6ICdiYXNlZCBvbiB5b3VyIGRldmljZScsXG4gIHVwZGF0ZUxvY2F0aW9uQnV0dG9uVGV4dDogJ1VwZGF0ZSB5b3VyIGxvY2F0aW9uJ1xufTtcblxuLyoqXG4gKiBMb2NhdGlvbkJpYXNDb21wb25lbnQgd2lsbCBzaG93IHRoZSB1c2VyIHdoZXJlIGlzIHVzZWQgZm9yIGxvY2F0aW9uIGJpYXMgYW5kIGFsbG93IHVzZXIgdG9cbiAqIGltcHJvdmUgYWNjdXJhY3kgd2l0aCBIVE1MNSBnZW9sb2NhdGlvbi5cbiAqXG4gKiBAZXh0ZW5kcyBDb21wb25lbnRcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTG9jYXRpb25CaWFzQ29tcG9uZW50IGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IgKGNvbmZpZyA9IHt9LCBzeXN0ZW1Db25maWcgPSB7fSkge1xuICAgIHN1cGVyKHsgLi4uREVGQVVMVF9DT05GSUcsIC4uLmNvbmZpZyB9LCBzeXN0ZW1Db25maWcpO1xuXG4gICAgLyoqXG4gICAgICogUmVjaWV2ZSB1cGRhdGVzIGZyb20gc3RvcmFnZSBiYXNlZCBvbiB0aGlzIGluZGV4XG4gICAgICogQHR5cGUge1N0b3JhZ2VLZXl9XG4gICAgICovXG4gICAgdGhpcy5tb2R1bGVJZCA9IFN0b3JhZ2VLZXlzLkxPQ0FUSU9OX0JJQVM7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgb3B0aW9uYWwgdmVydGljYWwga2V5IGZvciB2ZXJ0aWNhbCBzZWFyY2ggY29uZmlndXJhdGlvblxuICAgICAqIElmIG5vdCBwcm92aWRlZCwgd2hlbiBsb2NhdGlvbiB1cGRhdGVkLFxuICAgICAqIGEgdW5pdmVyc2FsIHNlYXJjaCB3aWxsIGJlIHRyaWdnZXJlZC5cbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIC8vIFRPRE86IFJlbW92ZSBjb25maWcudmVydGljYWxLZXlcbiAgICB0aGlzLl92ZXJ0aWNhbEtleSA9IGNvbmZpZy52ZXJ0aWNhbEtleSB8fCB0aGlzLmNvcmUuZ2xvYmFsU3RvcmFnZS5nZXRTdGF0ZShTdG9yYWdlS2V5cy5TRUFSQ0hfQ09ORklHKS52ZXJ0aWNhbEtleSB8fCBudWxsO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGVsZW1lbnQgdXNlZCBmb3IgdXBkYXRpbmcgbG9jYXRpb25cbiAgICAgKiBPcHRpb25hbGx5IHByb3ZpZGVkLlxuICAgICAqIEB0eXBlIHtzdHJpbmd9IENTUyBzZWxlY3RvclxuICAgICAqL1xuICAgIHRoaXMuX3VwZGF0ZUxvY2F0aW9uRWwgPSBjb25maWcudXBkYXRlTG9jYXRpb25FbCB8fCAnLmpzLWxvY2F0aW9uQmlhcy11cGRhdGUtbG9jYXRpb24nO1xuXG4gICAgdGhpcy5fbG9jYXRpb25EaXNwbGF5TmFtZSA9ICcnO1xuXG4gICAgdGhpcy5fYWNjdXJhY3kgPSAnJztcblxuICAgIHRoaXMuX2FsbG93VXBkYXRlID0gdHJ1ZTtcblxuICAgIC8qKlxuICAgICAqIE9wdGlvbnMgdG8gcGFzcyB0byB0aGUgZ2VvbG9jYXRpb24gYXBpLlxuICAgICAqIEB0eXBlIHtPYmplY3R9XG4gICAgICovXG4gICAgdGhpcy5fZ2VvbG9jYXRpb25PcHRpb25zID0ge1xuICAgICAgZW5hYmxlSGlnaEFjY3VyYWN5OiBmYWxzZSxcbiAgICAgIHRpbWVvdXQ6IDYwMDAsXG4gICAgICBtYXhpbXVtQWdlOiAzMDAwMDAsXG4gICAgICAuLi5jb25maWcuZ2VvbG9jYXRpb25PcHRpb25zXG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIE9wdGlvbnMgZm9yIHRoZSBnZW9sb2NhdGlvbiB0aW1lb3V0IGFsZXJ0LlxuICAgICAqIEB0eXBlIHtPYmplY3R9XG4gICAgICovXG4gICAgdGhpcy5fZ2VvbG9jYXRpb25UaW1lb3V0QWxlcnQgPSB7XG4gICAgICBlbmFibGVkOiBmYWxzZSxcbiAgICAgIG1lc3NhZ2U6ICdXZSBhcmUgdW5hYmxlIHRvIGRldGVybWluZSB5b3VyIGxvY2F0aW9uJyxcbiAgICAgIC4uLmNvbmZpZy5nZW9sb2NhdGlvblRpbWVvdXRBbGVydFxuICAgIH07XG4gIH1cblxuICBzdGF0aWMgZ2V0IHR5cGUgKCkge1xuICAgIHJldHVybiAnTG9jYXRpb25CaWFzJztcbiAgfVxuXG4gIHN0YXRpYyBkZWZhdWx0VGVtcGxhdGVOYW1lICgpIHtcbiAgICByZXR1cm4gJ3NlYXJjaC9sb2NhdGlvbmJpYXMnO1xuICB9XG5cbiAgb25Nb3VudCAoKSB7XG4gICAgaWYgKCF0aGlzLl9hbGxvd1VwZGF0ZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLl9kaXNhYmxlTG9jYXRpb25VcGRhdGVJZkdlb2xvY2F0aW9uRGVuaWVkKCk7XG4gICAgRE9NLm9uKHRoaXMuX3VwZGF0ZUxvY2F0aW9uRWwsICdjbGljaycsIChlKSA9PiB7XG4gICAgICBpZiAoJ2dlb2xvY2F0aW9uJyBpbiBuYXZpZ2F0b3IpIHtcbiAgICAgICAgbmF2aWdhdG9yLmdlb2xvY2F0aW9uLmdldEN1cnJlbnRQb3NpdGlvbigocG9zaXRpb24pID0+IHtcbiAgICAgICAgICB0aGlzLmNvcmUuZ2xvYmFsU3RvcmFnZS5zZXQoU3RvcmFnZUtleXMuR0VPTE9DQVRJT04sIHtcbiAgICAgICAgICAgIGxhdDogcG9zaXRpb24uY29vcmRzLmxhdGl0dWRlLFxuICAgICAgICAgICAgbG5nOiBwb3NpdGlvbi5jb29yZHMubG9uZ2l0dWRlLFxuICAgICAgICAgICAgcmFkaXVzOiBwb3NpdGlvbi5jb29yZHMuYWNjdXJhY3lcbiAgICAgICAgICB9KTtcbiAgICAgICAgICB0aGlzLl9kb1NlYXJjaCgpO1xuICAgICAgICB9LFxuICAgICAgICAoZXJyKSA9PiB0aGlzLl9oYW5kbGVHZW9sb2NhdGlvbkVycm9yKGVyciksXG4gICAgICAgIHRoaXMuX2dlb2xvY2F0aW9uT3B0aW9ucyk7XG4gICAgICB9XG4gICAgICAvLyBUT0RPOiBTaG91bGQgd2UgdGhyb3cgZXJyb3Igb3Igd2FybmluZyBoZXJlIGlmIG5vIGdlb2xvY2F0aW9uP1xuICAgIH0pO1xuICB9XG5cbiAgX2hhbmRsZUdlb2xvY2F0aW9uRXJyb3IgKGVycikge1xuICAgIGlmIChlcnIuY29kZSA9PT0gMSkge1xuICAgICAgdGhpcy5fZGlzYWJsZUxvY2F0aW9uVXBkYXRlKCk7XG4gICAgfVxuICAgIGNvbnN0IHsgZW5hYmxlZCwgbWVzc2FnZSB9ID0gdGhpcy5fZ2VvbG9jYXRpb25UaW1lb3V0QWxlcnQ7XG4gICAgaWYgKGVuYWJsZWQpIHtcbiAgICAgIHdpbmRvdy5hbGVydChtZXNzYWdlKTtcbiAgICB9XG4gIH1cblxuICBzZXRTdGF0ZSAoZGF0YSwgdmFsKSB7XG4gICAgdGhpcy5fbG9jYXRpb25EaXNwbGF5TmFtZSA9IGRhdGEubG9jYXRpb25EaXNwbGF5TmFtZTtcbiAgICB0aGlzLl9hY2N1cmFjeSA9IGRhdGEuYWNjdXJhY3k7XG4gICAgcmV0dXJuIHN1cGVyLnNldFN0YXRlKE9iamVjdC5hc3NpZ24oe30sIGRhdGEsIHtcbiAgICAgIGxvY2F0aW9uRGlzcGxheU5hbWU6IHRoaXMuX2dldExvY2F0aW9uRGlzcGxheU5hbWUoZGF0YSksXG4gICAgICBhY2N1cmFjeVRleHQ6IHRoaXMuX2dldEFjY3VyYWN5SGVscFRleHQoZGF0YS5hY2N1cmFjeSksXG4gICAgICBpc1ByZWNpc2VMb2NhdGlvbjogZGF0YS5hY2N1cmFjeSA9PT0gJ0RFVklDRScgJiYgdGhpcy5fYWxsb3dVcGRhdGUsXG4gICAgICBpc1Vua25vd25Mb2NhdGlvbjogZGF0YS5hY2N1cmFjeSA9PT0gJ1VOS05PV04nLFxuICAgICAgc2hvdWxkU2hvdzogZGF0YS5hY2N1cmFjeSAhPT0gdW5kZWZpbmVkLFxuICAgICAgYWxsb3dVcGRhdGU6IHRoaXMuX2FsbG93VXBkYXRlXG4gICAgfSwgdmFsKSk7XG4gIH1cblxuICBfZ2V0TG9jYXRpb25EaXNwbGF5TmFtZSAoZGF0YSkge1xuICAgIGlmIChkYXRhLmFjY3VyYWN5ID09PSAnVU5LTk9XTicpIHtcbiAgICAgIHJldHVybiAnVW5rbm93biBMb2NhdGlvbic7XG4gICAgfVxuICAgIHJldHVybiBkYXRhLmxvY2F0aW9uRGlzcGxheU5hbWU7XG4gIH1cblxuICBfZ2V0QWNjdXJhY3lIZWxwVGV4dCAoYWNjdXJhY3kpIHtcbiAgICBzd2l0Y2ggKGFjY3VyYWN5KSB7XG4gICAgICBjYXNlICdJUCc6XG4gICAgICAgIHJldHVybiB0aGlzLl9jb25maWcuaXBBY2N1cmFjeUhlbHBUZXh0O1xuICAgICAgY2FzZSAnREVWSUNFJzpcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbmZpZy5kZXZpY2VBY2N1cmFjeUhlbHBUZXh0O1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgfVxuXG4gIF9kb1NlYXJjaCAoKSB7XG4gICAgaWYgKHRoaXMuX3ZlcnRpY2FsS2V5KSB7XG4gICAgICB0aGlzLmNvcmUudmVydGljYWxTZWFyY2godGhpcy5fY29uZmlnLnZlcnRpY2FsS2V5LCB7XG4gICAgICAgIHNldFF1ZXJ5UGFyYW1zOiB0cnVlLFxuICAgICAgICB1c2VGYWNldHM6IHRydWVcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgcXVlcnkgPSB0aGlzLmNvcmUuZ2xvYmFsU3RvcmFnZS5nZXRTdGF0ZShTdG9yYWdlS2V5cy5RVUVSWSk7XG4gICAgICB0aGlzLmNvcmUuc2VhcmNoKHF1ZXJ5KTtcbiAgICB9XG4gIH1cblxuICBfZGlzYWJsZUxvY2F0aW9uVXBkYXRlSWZHZW9sb2NhdGlvbkRlbmllZCAoKSB7XG4gICAgaWYgKCdwZXJtaXNzaW9ucycgaW4gbmF2aWdhdG9yKSB7XG4gICAgICBuYXZpZ2F0b3IucGVybWlzc2lvbnMucXVlcnkoeyBuYW1lOiAnZ2VvbG9jYXRpb24nIH0pXG4gICAgICAgIC50aGVuKChyZXN1bHQpID0+IHtcbiAgICAgICAgICBpZiAocmVzdWx0LnN0YXRlID09PSAnZGVuaWVkJykge1xuICAgICAgICAgICAgdGhpcy5fZGlzYWJsZUxvY2F0aW9uVXBkYXRlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBfZGlzYWJsZUxvY2F0aW9uVXBkYXRlICgpIHtcbiAgICB0aGlzLmNvcmUuZ2xvYmFsU3RvcmFnZS5kZWxldGUoU3RvcmFnZUtleXMuR0VPTE9DQVRJT04pO1xuICAgIHRoaXMuX2FsbG93VXBkYXRlID0gZmFsc2U7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBsb2NhdGlvbkRpc3BsYXlOYW1lOiB0aGlzLl9sb2NhdGlvbkRpc3BsYXlOYW1lLFxuICAgICAgYWNjdXJhY3k6IHRoaXMuX2FjY3VyYWN5XG4gICAgfSk7XG4gIH1cbn1cbiIsIi8qKiBAbW9kdWxlIEZpbHRlckJveENvbXBvbmVudCAqL1xuXG5pbXBvcnQgQ29tcG9uZW50IGZyb20gJy4uL2NvbXBvbmVudCc7XG5pbXBvcnQgeyBBbnN3ZXJzQ29tcG9uZW50RXJyb3IgfSBmcm9tICcuLi8uLi8uLi9jb3JlL2Vycm9ycy9lcnJvcnMnO1xuaW1wb3J0IERPTSBmcm9tICcuLi8uLi9kb20vZG9tJztcbmltcG9ydCBDb21wb25lbnRUeXBlcyBmcm9tICcuLi8uLi9jb21wb25lbnRzL2NvbXBvbmVudHR5cGVzJztcblxuY2xhc3MgRmlsdGVyQm94Q29uZmlnIHtcbiAgY29uc3RydWN0b3IgKGNvbmZpZykge1xuICAgIC8qKlxuICAgICAqIFRoZSB0aXRsZSB0byBkaXNwbGF5IGFib3ZlIHRoZSBjb250cm9sc1xuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgdGhpcy50aXRsZSA9IGNvbmZpZy50aXRsZSB8fCAnRmlsdGVycyc7XG5cbiAgICAvKipcbiAgICAgKiBJZiB0cnVlLCBkaXNwbGF5IHRoZSBudW1iZXIgb2YgcmVzdWx0cyBuZXh0IHRvIGVhY2ggZmFjZXRcbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICB0aGlzLnNob3dDb3VudCA9IGNvbmZpZy5zaG93Q291bnQgPT09IHVuZGVmaW5lZCA/IHRydWUgOiBjb25maWcuc2hvd0NvdW50O1xuXG4gICAgLyoqXG4gICAgICogSWYgdHJ1ZSwgdHJpZ2dlciBhIHNlYXJjaCBvbiBlYWNoIGNoYW5nZSB0byBhIGZpbHRlclxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqL1xuICAgIHRoaXMuc2VhcmNoT25DaGFuZ2UgPSBjb25maWcuc2VhcmNoT25DaGFuZ2UgfHwgZmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiBJZiB0cnVlLCBzaG93IGEgYnV0dG9uIHRvIHJlc2V0IGZvciBlYWNoIGZhY2V0IGdyb3VwXG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICovXG4gICAgdGhpcy5yZXNldEZpbHRlciA9IGNvbmZpZy5yZXNldEZpbHRlciB8fCBmYWxzZTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBsYWJlbCB0byBzaG93IGZvciB0aGUgcmVzZXQgYnV0dG9uXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLnJlc2V0RmlsdGVyTGFiZWwgPSBjb25maWcucmVzZXRGaWx0ZXJMYWJlbCB8fCAncmVzZXQnO1xuXG4gICAgLyoqXG4gICAgICogSWYgdHJ1ZSwgc2hvdyBhIFwicmVzZXQgYWxsXCIgYnV0dG9uIHRvIHJlc2V0IGFsbCBmYWNldHNcbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICB0aGlzLnJlc2V0RmlsdGVycyA9IGNvbmZpZy5yZXNldEZpbHRlcnMgPT09IHVuZGVmaW5lZCA/ICFjb25maWcuc2VhcmNoT25DaGFuZ2UgOiBjb25maWcucmVzZXRGaWx0ZXJzO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGxhYmVsIHRvIHNob3cgZm9yIHRoZSBcInJlc2V0IGFsbFwiIGJ1dHRvblxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgdGhpcy5yZXNldEZpbHRlcnNMYWJlbCA9IGNvbmZpZy5yZXNldEZpbHRlcnNMYWJlbCB8fCAncmVzZXQgYWxsJztcblxuICAgIC8qKlxuICAgICAqIFRoZSBtYXggbnVtYmVyIG9mIGZhY2V0cyB0byBzaG93IGJlZm9yZSBkaXNwbGF5aW5nIFwic2hvdyBtb3JlXCIvXCJzaG93IGxlc3NcIlxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy5zaG93TW9yZUxpbWl0ID0gY29uZmlnLnNob3dNb3JlTGltaXQgfHwgNTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBsYWJlbCB0byBzaG93IGZvciBkaXNwbGF5aW5nIG1vcmUgZmFjZXRzXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLnNob3dNb3JlTGFiZWwgPSBjb25maWcuc2hvd01vcmVMYWJlbCB8fCAnc2hvdyBtb3JlJztcblxuICAgIC8qKlxuICAgICAqIFRoZSBsYWJlbCB0byBzaG93IGZvciBkaXNwbGF5aW5nIGxlc3MgZmFjZXRzXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLnNob3dMZXNzTGFiZWwgPSBjb25maWcuc2hvd0xlc3NMYWJlbCB8fCAnc2hvdyBsZXNzJztcblxuICAgIC8qKlxuICAgICAqIElmIHRydWUsIGVuYWJsZSBoaWRpbmcgZXhjZXNzIGZhY2V0cyBpbiBlYWNoIGdyb3VwIHdpdGggYSBcInNob3cgbW9yZVwiL1wic2hvdyBsZXNzXCIgYnV0dG9uXG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICovXG4gICAgdGhpcy5zaG93TW9yZSA9IGNvbmZpZy5zaG93TW9yZSA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IGNvbmZpZy5zaG93TW9yZTtcblxuICAgIC8qKlxuICAgICAqIElmIHRydWUsIGFsbG93IGV4cGFuZGluZyBhbmQgY29sbGFwc2luZyBlYWNoIGdyb3VwIG9mIGZhY2V0c1xuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqL1xuICAgIHRoaXMuZXhwYW5kID0gY29uZmlnLmV4cGFuZCA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IGNvbmZpZy5leHBhbmQ7XG5cbiAgICAvKipcbiAgICAgKiBJZiB0cnVlLCBkaXNwbGF5IHRoZSBudW1iZXIgb2YgY3VycmVudGx5IGFwcGxpZWQgZmlsdGVycyB3aGVuIGNvbGxhcHNlZFxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqL1xuICAgIHRoaXMuc2hvd051bWJlckFwcGxpZWQgPSBjb25maWcuc2hvd051bWJlckFwcGxpZWQgPT09IHVuZGVmaW5lZCA/IHRydWUgOiBjb25maWcuc2hvd051bWJlckFwcGxpZWQ7XG5cbiAgICAvKipcbiAgICAgKiBUZXh0IHRvIGRpc3BsYXkgb24gdGhlIGFwcGx5IGJ1dHRvblxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgdGhpcy5hcHBseUxhYmVsID0gY29uZmlnLmFwcGx5TGFiZWwgfHwgJ2FwcGx5JztcblxuICAgIC8qKlxuICAgICAqIFRoZSBzZWxlY3RvciBvZiB0aGUgYXBwbHkgYnV0dG9uXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLmFwcGx5QnV0dG9uU2VsZWN0b3IgPSBjb25maWcuYXBwbHlCdXR0b25TZWxlY3RvciB8fCAnLmpzLXlleHQtZmlsdGVyYm94LWFwcGx5JztcblxuICAgIC8qKlxuICAgICAqIFRoZSBsaXN0IG9mIGZpbHRlcnMgdG8gZGlzcGxheSBhbmQgY29udHJvbCwgaWdub3JpbmcgZW1wdHkgc2VjdGlvbnNcbiAgICAgKiBAdHlwZSB7b2JqZWN0W119XG4gICAgICovXG4gICAgdGhpcy5maWx0ZXJDb25maWdzID0gY29uZmlnLmZpbHRlcnMuZmlsdGVyKGYgPT4gZi5vcHRpb25zLmxlbmd0aCk7XG5cbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIG9yIG5vdCB0aGlzIGZpbHRlcmJveCBjb250YWlucyBmYWNldHMuIFRoaXMgYWZmZWN0cyB0aGVcbiAgICAgKiB0aGUgd2F5IHRoZSBmaWx0ZXJzIGFyZSB1c2VkIGluIHRoZSBzZWFyY2hcbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICB0aGlzLmlzRHluYW1pYyA9IGNvbmZpZy5pc0R5bmFtaWMgfHwgZmFsc2U7XG5cbiAgICB0aGlzLnZhbGlkYXRlKCk7XG4gIH1cblxuICB2YWxpZGF0ZSAoKSB7XG4gIH1cbn1cblxuLyoqXG4gKiBSZW5kZXJzIGEgc2V0IG9mIGZpbHRlcnMsIGFuZCBzZWFyY2hlcyB3aXRoIHRoZW0gd2hlbiBhcHBsaWVkLlxuICogTXVsdGlwbGUgRmlsdGVyQm94IGNvbXBvbmVudHMgd2lsbCBBTkQgdG9nZXRoZXIgYnV0IHdpbGwgbm90IHNoYXJlIHN0YXRlLlxuICogQGV4dGVuZHMgQ29tcG9uZW50XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEZpbHRlckJveENvbXBvbmVudCBleHRlbmRzIENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yIChjb25maWcgPSB7fSwgc3lzdGVtQ29uZmlnID0ge30pIHtcbiAgICBzdXBlcihjb25maWcsIHN5c3RlbUNvbmZpZyk7XG5cbiAgICB0aGlzLmNvbmZpZyA9IG5ldyBGaWx0ZXJCb3hDb25maWcoY29uZmlnKTtcblxuICAgIGlmICghY29uZmlnLmZpbHRlcnMgfHwgIShjb25maWcuZmlsdGVycyBpbnN0YW5jZW9mIEFycmF5KSkge1xuICAgICAgdGhyb3cgbmV3IEFuc3dlcnNDb21wb25lbnRFcnJvcihcbiAgICAgICAgJ0ZpbHRlckJveCByZXF1aXJlcyBmaWx0ZXJzIHRvIGJlIHByb3ZpZGVkIGFzIGFuIGFycmF5JyxcbiAgICAgICAgJ0ZpbHRlckJveCcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSB2ZXJ0aWNhbCBrZXkgZm9yIHRoZSBzZWFyY2hcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5fdmVydGljYWxLZXkgPSBjb25maWcudmVydGljYWxLZXkgfHwgbnVsbDtcblxuICAgIC8qKlxuICAgICAqIFRoZSBjb21wb25lbnRzIGNyZWF0ZWQgZm9yIGVhY2ggZmlsdGVyIGNvbmZpZ1xuICAgICAqIEB0eXBlIHtDb21wb25lbnRbXX1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuX2ZpbHRlckNvbXBvbmVudHMgPSBbXTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBjdXJyZW50IHN0YXRlIG9mIHRoZSBmaWx0ZXIgY29tcG9uZW50cyBpbiB0aGUgYm94XG4gICAgICogQHR5cGUge0FycmF5PEZpbHRlck5vZGU+fVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5fZmlsdGVyTm9kZXMgPSBbXTtcblxuICAgIHRoaXMuY29uZmlnLmZpbHRlckNvbmZpZ3MuZm9yRWFjaChjb25maWcgPT4ge1xuICAgICAgbGV0IGhpZGVDb3VudCA9IGNvbmZpZy5zaG93Q291bnQgPT09IHVuZGVmaW5lZCA/ICF0aGlzLmNvbmZpZy5zaG93Q291bnQgOiAhY29uZmlnLnNob3dDb3VudDtcblxuICAgICAgaWYgKGhpZGVDb3VudCkge1xuICAgICAgICBjb25maWcub3B0aW9ucy5mb3JFYWNoKG9wdGlvbiA9PiB7XG4gICAgICAgICAgb3B0aW9uLmNvdW50TGFiZWwgPSBudWxsO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHN0YXRpYyBnZXQgdHlwZSAoKSB7XG4gICAgcmV0dXJuIENvbXBvbmVudFR5cGVzLkZJTFRFUl9CT1g7XG4gIH1cblxuICBzdGF0aWMgZGVmYXVsdFRlbXBsYXRlTmFtZSAoKSB7XG4gICAgcmV0dXJuICdmaWx0ZXJzL2ZpbHRlcmJveCc7XG4gIH1cblxuICBzZXRTdGF0ZSAoZGF0YSkge1xuICAgIHN1cGVyLnNldFN0YXRlKE9iamVjdC5hc3NpZ24oe30sIGRhdGEsIHRoaXMuY29uZmlnLCB7XG4gICAgICBzaG93UmVzZXQ6IHRoaXMuY29uZmlnLnJlc2V0RmlsdGVycyxcbiAgICAgIHJlc2V0TGFiZWw6IHRoaXMuY29uZmlnLnJlc2V0RmlsdGVyc0xhYmVsLFxuICAgICAgc2hvd0FwcGx5QnV0dG9uOiAhdGhpcy5jb25maWcuc2VhcmNoT25DaGFuZ2VcbiAgICB9KSk7XG4gIH1cblxuICBvbk1vdW50ICgpIHtcbiAgICBpZiAodGhpcy5fZmlsdGVyQ29tcG9uZW50cy5sZW5ndGgpIHtcbiAgICAgIHRoaXMuX2ZpbHRlckNvbXBvbmVudHMuZm9yRWFjaChjID0+IGMucmVtb3ZlKCkpO1xuICAgICAgdGhpcy5fZmlsdGVyQ29tcG9uZW50cyA9IFtdO1xuICAgICAgdGhpcy5fZmlsdGVyTm9kZXMgPSBbXTtcbiAgICB9XG5cbiAgICAvLyBJbml0aWFsaXplIGZpbHRlcnMgZnJvbSBjb25maWdzXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmNvbmZpZy5maWx0ZXJDb25maWdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBjb25maWcgPSB0aGlzLmNvbmZpZy5maWx0ZXJDb25maWdzW2ldO1xuICAgICAgY29uc3QgY29tcG9uZW50ID0gdGhpcy5jb21wb25lbnRNYW5hZ2VyLmNyZWF0ZShjb25maWcudHlwZSwge1xuICAgICAgICAuLi50aGlzLmNvbmZpZyxcbiAgICAgICAgcGFyZW50Q29udGFpbmVyOiB0aGlzLl9jb250YWluZXIsXG4gICAgICAgIG5hbWU6IGAke3RoaXMubmFtZX0uZmlsdGVyJHtpfWAsXG4gICAgICAgIHN0b3JlT25DaGFuZ2U6IGZhbHNlLFxuICAgICAgICBjb250YWluZXI6IGAuanMteWV4dC1maWx0ZXJib3gtZmlsdGVyJHtpfWAsXG4gICAgICAgIHNob3dSZXNldDogdGhpcy5jb25maWcucmVzZXRGaWx0ZXIsXG4gICAgICAgIHJlc2V0TGFiZWw6IHRoaXMuY29uZmlnLnJlc2V0RmlsdGVyTGFiZWwsXG4gICAgICAgIGlzRHluYW1pYzogdGhpcy5jb25maWcuaXNEeW5hbWljLFxuICAgICAgICAuLi5jb25maWcsXG4gICAgICAgIHNob3dFeHBhbmQ6IGNvbmZpZy5zaG93RXhwYW5kID09PSB1bmRlZmluZWQgPyB0aGlzLmNvbmZpZy5leHBhbmQgOiBjb25maWcuc2hvd0V4cGFuZCxcbiAgICAgICAgb25DaGFuZ2U6IChmaWx0ZXJOb2RlLCBhbHdheXNTYXZlRmlsdGVyTm9kZXMsIGJsb2NrU2VhcmNoT25DaGFuZ2UpID0+IHtcbiAgICAgICAgICBjb25zdCBfc2F2ZUZpbHRlck5vZGVzID0gdGhpcy5jb25maWcuc2VhcmNoT25DaGFuZ2UgfHwgYWx3YXlzU2F2ZUZpbHRlck5vZGVzO1xuICAgICAgICAgIGNvbnN0IF9zZWFyY2hPbkNoYW5nZSA9IHRoaXMuY29uZmlnLnNlYXJjaE9uQ2hhbmdlICYmICFibG9ja1NlYXJjaE9uQ2hhbmdlO1xuICAgICAgICAgIHRoaXMub25GaWx0ZXJOb2RlQ2hhbmdlKGksIGZpbHRlck5vZGUsIF9zYXZlRmlsdGVyTm9kZXMsIF9zZWFyY2hPbkNoYW5nZSk7XG4gICAgICAgICAgY29uZmlnLm9uQ2hhbmdlICYmIGNvbmZpZy5vbkNoYW5nZSgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGlmICh0aGlzLmNvbmZpZy5pc0R5bmFtaWMgJiYgdHlwZW9mIGNvbXBvbmVudC5mbG9hdFNlbGVjdGVkID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGNvbXBvbmVudC5mbG9hdFNlbGVjdGVkKCk7XG4gICAgICB9XG4gICAgICBjb21wb25lbnQubW91bnQoKTtcbiAgICAgIHRoaXMuX2ZpbHRlckNvbXBvbmVudHMucHVzaChjb21wb25lbnQpO1xuICAgICAgdGhpcy5fZmlsdGVyTm9kZXNbaV0gPSBjb21wb25lbnQuZ2V0RmlsdGVyTm9kZSgpO1xuICAgIH1cbiAgICB0aGlzLl9zYXZlRmlsdGVyTm9kZXNUb1N0b3JhZ2UoKTtcblxuICAgIC8vIEluaXRpYWxpemUgYXBwbHkgYnV0dG9uXG4gICAgaWYgKCF0aGlzLmNvbmZpZy5zZWFyY2hPbkNoYW5nZSkge1xuICAgICAgY29uc3QgYnV0dG9uID0gRE9NLnF1ZXJ5KHRoaXMuX2NvbnRhaW5lciwgdGhpcy5jb25maWcuYXBwbHlCdXR0b25TZWxlY3Rvcik7XG5cbiAgICAgIGlmIChidXR0b24pIHtcbiAgICAgICAgRE9NLm9uKGJ1dHRvbiwgJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICAgIHRoaXMuX3NhdmVGaWx0ZXJOb2Rlc1RvU3RvcmFnZSgpO1xuICAgICAgICAgIHRoaXMuX3NlYXJjaCgpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBJbml0aWFsaXplIHJlc2V0IGJ1dHRvblxuICAgIGxldCByZXNldEVsID0gRE9NLnF1ZXJ5KHRoaXMuX2NvbnRhaW5lciwgJy5qcy15eHQtRmlsdGVyQm94LXJlc2V0Jyk7XG5cbiAgICBpZiAocmVzZXRFbCkge1xuICAgICAgRE9NLm9uKHJlc2V0RWwsICdjbGljaycsIHRoaXMucmVzZXRGaWx0ZXJzLmJpbmQodGhpcykpO1xuICAgIH1cbiAgfVxuXG4gIF9nZXRWYWxpZEZpbHRlck5vZGVzICgpIHtcbiAgICByZXR1cm4gdGhpcy5fZmlsdGVyTm9kZXMuZmlsdGVyKGZuID0+IGZuLmdldEZpbHRlcigpLmdldEZpbHRlcktleSgpKTtcbiAgfVxuXG4gIHJlc2V0RmlsdGVycyAoKSB7XG4gICAgdGhpcy5fZmlsdGVyQ29tcG9uZW50cy5mb3JFYWNoKGZpbHRlciA9PiBmaWx0ZXIuY2xlYXJPcHRpb25zKCkpO1xuICB9XG5cbiAgLyoqXG4gICAqIEhhbmRsZSBjaGFuZ2VzIHRvIGNoaWxkIGZpbHRlciBjb21wb25lbnRzXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCBUaGUgaW5kZXggb2YgdGhlIGNoYW5nZWQgZmlsdGVyXG4gICAqIEBwYXJhbSB7RmlsdGVyTm9kZX0gZmlsdGVyTm9kZSBUaGUgbmV3IGZpbHRlciBub2RlXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gc2F2ZUZpbHRlck5vZGVzIFdoZXRoZXIgdG8gc2F2ZSBmaWx0ZXJub2RlcyB0byBzdG9yYWdlXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gc2VhcmNoT25DaGFuZ2UgV2hldGhlciB0byBjb25kdWN0IGEgc2VhcmNoXG4gICAqL1xuICBvbkZpbHRlck5vZGVDaGFuZ2UgKGluZGV4LCBmaWx0ZXJOb2RlLCBzYXZlRmlsdGVyTm9kZXMsIHNlYXJjaE9uQ2hhbmdlKSB7XG4gICAgdGhpcy5fZmlsdGVyTm9kZXNbaW5kZXhdID0gZmlsdGVyTm9kZTtcbiAgICBpZiAoc2F2ZUZpbHRlck5vZGVzIHx8IHNlYXJjaE9uQ2hhbmdlKSB7XG4gICAgICB0aGlzLl9zYXZlRmlsdGVyTm9kZXNUb1N0b3JhZ2UoKTtcbiAgICB9XG4gICAgaWYgKHNlYXJjaE9uQ2hhbmdlKSB7XG4gICAgICB0aGlzLl9zZWFyY2goKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlIGFsbCBmaWx0ZXIgY29tcG9uZW50cyBhbG9uZyB3aXRoIHRoaXMgY29tcG9uZW50XG4gICAqL1xuICByZW1vdmUgKCkge1xuICAgIHRoaXMuX2ZpbHRlckNvbXBvbmVudHMuZm9yRWFjaChjID0+IGMucmVtb3ZlKCkpO1xuICAgIHN1cGVyLnJlbW92ZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNhdmUgY3VycmVudCBmaWx0ZXJzIHRvIHN0b3JhZ2UgdG8gYmUgdXNlZCBpbiB0aGUgbmV4dCBzZWFyY2hcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9zYXZlRmlsdGVyTm9kZXNUb1N0b3JhZ2UgKCkge1xuICAgIGlmICh0aGlzLmNvbmZpZy5pc0R5bmFtaWMpIHtcbiAgICAgIGNvbnN0IGF2YWlsYWJsZUZpZWxkSWRzID0gdGhpcy5jb25maWcuZmlsdGVyQ29uZmlncy5tYXAoY29uZmlnID0+IGNvbmZpZy5maWVsZElkKTtcbiAgICAgIHRoaXMuY29yZS5zZXRGYWNldEZpbHRlck5vZGVzKGF2YWlsYWJsZUZpZWxkSWRzLCB0aGlzLl9nZXRWYWxpZEZpbHRlck5vZGVzKCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9maWx0ZXJDb21wb25lbnRzLmZvckVhY2goZmMgPT4gZmMuYXBwbHkoKSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFRyaWdnZXIgYSBzZWFyY2ggd2l0aCBhbGwgZmlsdGVycyBpbiBzdG9yYWdlXG4gICAqL1xuICBfc2VhcmNoICgpIHtcbiAgICB0aGlzLmNvcmUudmVydGljYWxTZWFyY2godGhpcy5fY29uZmlnLnZlcnRpY2FsS2V5LCB7XG4gICAgICBzZXRRdWVyeVBhcmFtczogdHJ1ZSxcbiAgICAgIHJlc2V0UGFnaW5hdGlvbjogdHJ1ZSxcbiAgICAgIHVzZUZhY2V0czogdHJ1ZVxuICAgIH0pO1xuICB9XG59XG4iLCIndXNlIHN0cmljdCc7XG5tb2R1bGUuZXhwb3J0cyA9IChmdW5jdGlvbigpXG57XG4gIGZ1bmN0aW9uIF9taW4oZDAsIGQxLCBkMiwgYngsIGF5KVxuICB7XG4gICAgcmV0dXJuIGQwIDwgZDEgfHwgZDIgPCBkMVxuICAgICAgICA/IGQwID4gZDJcbiAgICAgICAgICAgID8gZDIgKyAxXG4gICAgICAgICAgICA6IGQwICsgMVxuICAgICAgICA6IGJ4ID09PSBheVxuICAgICAgICAgICAgPyBkMVxuICAgICAgICAgICAgOiBkMSArIDE7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24oYSwgYilcbiAge1xuICAgIGlmIChhID09PSBiKSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG5cbiAgICBpZiAoYS5sZW5ndGggPiBiLmxlbmd0aCkge1xuICAgICAgdmFyIHRtcCA9IGE7XG4gICAgICBhID0gYjtcbiAgICAgIGIgPSB0bXA7XG4gICAgfVxuXG4gICAgdmFyIGxhID0gYS5sZW5ndGg7XG4gICAgdmFyIGxiID0gYi5sZW5ndGg7XG5cbiAgICB3aGlsZSAobGEgPiAwICYmIChhLmNoYXJDb2RlQXQobGEgLSAxKSA9PT0gYi5jaGFyQ29kZUF0KGxiIC0gMSkpKSB7XG4gICAgICBsYS0tO1xuICAgICAgbGItLTtcbiAgICB9XG5cbiAgICB2YXIgb2Zmc2V0ID0gMDtcblxuICAgIHdoaWxlIChvZmZzZXQgPCBsYSAmJiAoYS5jaGFyQ29kZUF0KG9mZnNldCkgPT09IGIuY2hhckNvZGVBdChvZmZzZXQpKSkge1xuICAgICAgb2Zmc2V0Kys7XG4gICAgfVxuXG4gICAgbGEgLT0gb2Zmc2V0O1xuICAgIGxiIC09IG9mZnNldDtcblxuICAgIGlmIChsYSA9PT0gMCB8fCBsYiA8IDMpIHtcbiAgICAgIHJldHVybiBsYjtcbiAgICB9XG5cbiAgICB2YXIgeCA9IDA7XG4gICAgdmFyIHk7XG4gICAgdmFyIGQwO1xuICAgIHZhciBkMTtcbiAgICB2YXIgZDI7XG4gICAgdmFyIGQzO1xuICAgIHZhciBkZDtcbiAgICB2YXIgZHk7XG4gICAgdmFyIGF5O1xuICAgIHZhciBieDA7XG4gICAgdmFyIGJ4MTtcbiAgICB2YXIgYngyO1xuICAgIHZhciBieDM7XG5cbiAgICB2YXIgdmVjdG9yID0gW107XG5cbiAgICBmb3IgKHkgPSAwOyB5IDwgbGE7IHkrKykge1xuICAgICAgdmVjdG9yLnB1c2goeSArIDEpO1xuICAgICAgdmVjdG9yLnB1c2goYS5jaGFyQ29kZUF0KG9mZnNldCArIHkpKTtcbiAgICB9XG5cbiAgICB2YXIgbGVuID0gdmVjdG9yLmxlbmd0aCAtIDE7XG5cbiAgICBmb3IgKDsgeCA8IGxiIC0gMzspIHtcbiAgICAgIGJ4MCA9IGIuY2hhckNvZGVBdChvZmZzZXQgKyAoZDAgPSB4KSk7XG4gICAgICBieDEgPSBiLmNoYXJDb2RlQXQob2Zmc2V0ICsgKGQxID0geCArIDEpKTtcbiAgICAgIGJ4MiA9IGIuY2hhckNvZGVBdChvZmZzZXQgKyAoZDIgPSB4ICsgMikpO1xuICAgICAgYngzID0gYi5jaGFyQ29kZUF0KG9mZnNldCArIChkMyA9IHggKyAzKSk7XG4gICAgICBkZCA9ICh4ICs9IDQpO1xuICAgICAgZm9yICh5ID0gMDsgeSA8IGxlbjsgeSArPSAyKSB7XG4gICAgICAgIGR5ID0gdmVjdG9yW3ldO1xuICAgICAgICBheSA9IHZlY3Rvclt5ICsgMV07XG4gICAgICAgIGQwID0gX21pbihkeSwgZDAsIGQxLCBieDAsIGF5KTtcbiAgICAgICAgZDEgPSBfbWluKGQwLCBkMSwgZDIsIGJ4MSwgYXkpO1xuICAgICAgICBkMiA9IF9taW4oZDEsIGQyLCBkMywgYngyLCBheSk7XG4gICAgICAgIGRkID0gX21pbihkMiwgZDMsIGRkLCBieDMsIGF5KTtcbiAgICAgICAgdmVjdG9yW3ldID0gZGQ7XG4gICAgICAgIGQzID0gZDI7XG4gICAgICAgIGQyID0gZDE7XG4gICAgICAgIGQxID0gZDA7XG4gICAgICAgIGQwID0gZHk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yICg7IHggPCBsYjspIHtcbiAgICAgIGJ4MCA9IGIuY2hhckNvZGVBdChvZmZzZXQgKyAoZDAgPSB4KSk7XG4gICAgICBkZCA9ICsreDtcbiAgICAgIGZvciAoeSA9IDA7IHkgPCBsZW47IHkgKz0gMikge1xuICAgICAgICBkeSA9IHZlY3Rvclt5XTtcbiAgICAgICAgdmVjdG9yW3ldID0gZGQgPSBfbWluKGR5LCBkMCwgZGQsIGJ4MCwgdmVjdG9yW3kgKyAxXSk7XG4gICAgICAgIGQwID0gZHk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGRkO1xuICB9O1xufSkoKTtcblxuIiwiXG4vKipcbiAqIEdyb3VwcyBhbiBhcnJheSBpbnRvIGFuIG9iamVjdCB1c2luZyBhIGdpdmVuIGtleSBhbmQgdmFsdWUgZnVuY3Rpb24sIGFuZCBhbiBpbml0aWFsIG9iamVjdFxuICogdG8gYWRkIHRvLiBCeSBkZWZhdWx0IHRoZSBrZXkgYW5kIHZhbHVlIGZ1bmN0aW9ucyB3aWxsIG5vdCBwZXJmb3JtIGFueSB0cmFuc2Zvcm1hdGlvbnNcbiAqIG9uIHRoZSBhcnJheSBlbGVtZW50cy5cbiAqIEBwYXJhbSB7QXJyYXk8YW55Pn0gYXJyIGFycmF5IHRvIGJlIGdyb3VwZWRcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGtleUZ1bmMgZnVuY3Rpb24gdGhhdCBldmFsdWF0ZXMgd2hhdCBrZXkgdG8gZ2l2ZSBhbiBhcnJheSBlbGVtZW50LlxuICogQHBhcmFtIHtGdW5jdGlvbn0gdmFsdWVGdW5jIGZ1bmN0aW9uIHRoYXQgZXZhbHVhdGVzIHdoYXQgdmFsdWUgdG8gZ2l2ZSBhbiBhcnJheSBlbGVtZW50LlxuICogQHBhcmFtIHtPYmplY3R9IGludGl0aWFsIHRoZSBpbml0aWFsIG9iamVjdCB0byBhZGQgdG8sIGRlZmF1bHRpbmcgdG8ge31cbiAqIEByZXR1cm5zIHtPYmplY3R9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBncm91cEFycmF5IChhcnIsIGtleUZ1bmMsIHZhbHVlRnVuYywgaW5pdGlhbCkge1xuICBrZXlGdW5jID0ga2V5RnVuYyB8fCAoa2V5ID0+IGtleSk7XG4gIHZhbHVlRnVuYyA9IHZhbHVlRnVuYyB8fCAodmFsdWUgPT4gdmFsdWUpO1xuICByZXR1cm4gYXJyLnJlZHVjZSgoZ3JvdXBzLCBlbGVtZW50LCBpZHgpID0+IHtcbiAgICBjb25zdCBrZXkgPSBrZXlGdW5jKGVsZW1lbnQsIGlkeCk7XG4gICAgY29uc3QgdmFsdWUgPSB2YWx1ZUZ1bmMoZWxlbWVudCwgaWR4KTtcbiAgICBpZiAoIWdyb3Vwc1trZXldKSB7XG4gICAgICBncm91cHNba2V5XSA9IFsgdmFsdWUgXTtcbiAgICB9IGVsc2Uge1xuICAgICAgZ3JvdXBzW2tleV0ucHVzaCh2YWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiBncm91cHM7XG4gIH0sIGluaXRpYWwgfHwge30pO1xufVxuIiwiLyoqIEBtb2R1bGUgRmlsdGVyT3B0aW9uc0NvbXBvbmVudCAqL1xuXG4vKiBnbG9iYWwgRXZlbnQgKi9cblxuaW1wb3J0IENvbXBvbmVudCBmcm9tICcuLi9jb21wb25lbnQnO1xuaW1wb3J0IHsgQW5zd2Vyc0NvbXBvbmVudEVycm9yIH0gZnJvbSAnLi4vLi4vLi4vY29yZS9lcnJvcnMvZXJyb3JzJztcbmltcG9ydCBGaWx0ZXIgZnJvbSAnLi4vLi4vLi4vY29yZS9tb2RlbHMvZmlsdGVyJztcbmltcG9ydCBET00gZnJvbSAnLi4vLi4vZG9tL2RvbSc7XG5pbXBvcnQgSGlnaGxpZ2h0ZWRWYWx1ZSBmcm9tICcuLi8uLi8uLi9jb3JlL21vZGVscy9oaWdobGlnaHRlZHZhbHVlJztcbmltcG9ydCBsZXZlbnNodGVpbiBmcm9tICdqcy1sZXZlbnNodGVpbic7XG5pbXBvcnQgRmlsdGVyTm9kZUZhY3RvcnkgZnJvbSAnLi4vLi4vLi4vY29yZS9maWx0ZXJzL2ZpbHRlcm5vZGVmYWN0b3J5JztcbmltcG9ydCBGaWx0ZXJNZXRhZGF0YSBmcm9tICcuLi8uLi8uLi9jb3JlL2ZpbHRlcnMvZmlsdGVybWV0YWRhdGEnO1xuaW1wb3J0IHsgZ3JvdXBBcnJheSB9IGZyb20gJy4uLy4uLy4uL2NvcmUvdXRpbHMvYXJyYXl1dGlscyc7XG5pbXBvcnQgRmlsdGVyVHlwZSBmcm9tICcuLi8uLi8uLi9jb3JlL2ZpbHRlcnMvZmlsdGVydHlwZSc7XG5pbXBvcnQgQ29tcG9uZW50VHlwZXMgZnJvbSAnLi4vLi4vY29tcG9uZW50cy9jb21wb25lbnR0eXBlcyc7XG5cbi8qKlxuICogVGhlIGN1cnJlbnRseSBzdXBwb3J0ZWQgY29udHJvbHNcbiAqIEB0eXBlIHtzdHJpbmdbXX1cbiAqL1xuY29uc3QgU1VQUE9SVEVEX0NPTlRST0xTID0gW1xuICAnc2luZ2xlb3B0aW9uJyxcbiAgJ211bHRpb3B0aW9uJ1xuXTtcblxuLyoqXG4gKiBUaGUgY3VycmVudGx5IHN1cHBvcnRlZCBvcHRpb24gdHlwZXMuXG4gKi9cbmNvbnN0IE9wdGlvblR5cGVzID0ge1xuICBSQURJVVNfRklMVEVSOiAnUkFESVVTX0ZJTFRFUicsXG4gIFNUQVRJQ19GSUxURVI6ICdTVEFUSUNfRklMVEVSJ1xufTtcblxuY2xhc3MgRmlsdGVyT3B0aW9uc0NvbmZpZyB7XG4gIGNvbnN0cnVjdG9yIChjb25maWcpIHtcbiAgICAvKipcbiAgICAgKiBUaGUgdHlwZSBvZiBjb250cm9sIHRvIGRpc3BsYXlcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMuY29udHJvbCA9IGNvbmZpZy5jb250cm9sO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHR5cGUgb2YgZmlsdGVyaW5nIHRvIGFwcGx5IHRvIHRoZSBvcHRpb25zLlxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgdGhpcy5vcHRpb25UeXBlID0gY29uZmlnLm9wdGlvblR5cGUgfHwgT3B0aW9uVHlwZXMuU1RBVElDX0ZJTFRFUjtcblxuICAgIC8qKlxuICAgICAqIFRoZSBsaXN0IG9mIGZpbHRlciBvcHRpb25zIHRvIGRpc3BsYXkgd2l0aCBjaGVja2VkIHN0YXR1c1xuICAgICAqIEB0eXBlIHtvYmplY3RbXX1cbiAgICAgKi9cbiAgICB0aGlzLm9wdGlvbnMgPSBjb25maWcub3B0aW9ucy5tYXAobyA9PiAoeyAuLi5vIH0pKTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBsYWJlbCB0byBiZSB1c2VkIGluIHRoZSBsZWdlbmRcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMubGFiZWwgPSBjb25maWcubGFiZWwgfHwgJ0ZpbHRlcnMnO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGNhbGxiYWNrIGZ1bmN0aW9uIHRvIGNhbGwgd2hlbiBjaGFuZ2VkXG4gICAgICogQHR5cGUge2Z1bmN0aW9ufVxuICAgICAqL1xuICAgIHRoaXMub25DaGFuZ2UgPSBjb25maWcub25DaGFuZ2UgfHwgZnVuY3Rpb24gKCkgeyB9O1xuXG4gICAgLyoqXG4gICAgICogSWYgdHJ1ZSwgc3RvcmVzIHRoZSBmaWx0ZXIgdG8gc3RvcmFnZSBvbiBlYWNoIGNoYW5nZVxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqL1xuICAgIHRoaXMuc3RvcmVPbkNoYW5nZSA9IGNvbmZpZy5zdG9yZU9uQ2hhbmdlID09PSB1bmRlZmluZWQgPyB0cnVlIDogY29uZmlnLnN0b3JlT25DaGFuZ2U7XG5cbiAgICAvKipcbiAgICAgKiBJZiB0cnVlLCBzaG93IGEgYnV0dG9uIHRvIHJlc2V0IHRoZSBjdXJyZW50IGZpbHRlciBzZWxlY3Rpb25cbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICB0aGlzLnNob3dSZXNldCA9IGNvbmZpZy5zaG93UmVzZXQgJiYgdGhpcy5vcHRpb25zLmxlbmd0aCA+IDA7XG5cbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIHRoaXMgRmlsdGVyT3B0aW9ucyBpcyBwYXJ0IG9mIGEgZHluYW1pYyBGaWx0ZXJCb3ggY29tcG9uZW50IChpLmUuIGlzXG4gICAgICogcGFydCBvZiBhIEZhY2V0c0NvbXBvbmVudCkuIFVzZWQgdG8gY29ycmVjdGx5IHNldCB0aGUge0BsaW5rIEZpbHRlclR5cGV9IG9mXG4gICAgICogdGhlIGNyZWF0ZWQge0BsaW5rIEZpbHRlck5vZGV9LlxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqL1xuICAgIHRoaXMuaXNEeW5hbWljID0gY29uZmlnLmlzRHluYW1pYztcblxuICAgIC8qKlxuICAgICAqIFRoZSBsYWJlbCB0byBzaG93IGZvciB0aGUgcmVzZXQgYnV0dG9uXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLnJlc2V0TGFiZWwgPSBjb25maWcucmVzZXRMYWJlbCB8fCAncmVzZXQnO1xuXG4gICAgLyoqXG4gICAgICogVGhlIG1heCBudW1iZXIgb2YgZmFjZXRzIHRvIHNob3cgYmVmb3JlIGRpc3BsYXlpbmcgXCJzaG93IG1vcmVcIi9cInNob3cgbGVzc1wiXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLnNob3dNb3JlTGltaXQgPSBjb25maWcuc2hvd01vcmVMaW1pdCB8fCA1O1xuXG4gICAgLyoqXG4gICAgICogVGhlIGxhYmVsIHRvIHNob3cgZm9yIGRpc3BsYXlpbmcgbW9yZSBmYWNldHNcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMuc2hvd01vcmVMYWJlbCA9IGNvbmZpZy5zaG93TW9yZUxhYmVsIHx8ICdzaG93IG1vcmUnO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGxhYmVsIHRvIHNob3cgZm9yIGRpc3BsYXlpbmcgbGVzcyBmYWNldHNcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMuc2hvd0xlc3NMYWJlbCA9IGNvbmZpZy5zaG93TGVzc0xhYmVsIHx8ICdzaG93IGxlc3MnO1xuXG4gICAgLyoqXG4gICAgICogSWYgdHJ1ZSwgZW5hYmxlIGhpZGluZyBleGNlc3MgZmFjZXRzIHdpdGggYSBcInNob3cgbW9yZVwiL1wic2hvdyBsZXNzXCIgYnV0dG9uXG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICovXG4gICAgdGhpcy5zaG93TW9yZSA9IGNvbmZpZy5zaG93TW9yZSA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IGNvbmZpZy5zaG93TW9yZTtcbiAgICB0aGlzLnNob3dNb3JlID0gdGhpcy5zaG93TW9yZSAmJiB0aGlzLm9wdGlvbnMubGVuZ3RoID4gdGhpcy5zaG93TW9yZUxpbWl0O1xuXG4gICAgLyoqXG4gICAgICogSWYgdHJ1ZSwgYWxsb3cgZXhwYW5kaW5nIGFuZCBjb2xsYXBzaW5nIHRoZSBncm91cCBvZiBmYWNldHNcbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICB0aGlzLnNob3dFeHBhbmQgPSBjb25maWcuc2hvd0V4cGFuZCA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IGNvbmZpZy5zaG93RXhwYW5kO1xuXG4gICAgLyoqXG4gICAgICogSWYgdHJ1ZSwgZGlzcGxheSB0aGUgbnVtYmVyIG9mIGN1cnJlbnRseSBhcHBsaWVkIGZpbHRlcnMgd2hlbiBjb2xsYXBzZWRcbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICB0aGlzLnNob3dOdW1iZXJBcHBsaWVkID0gY29uZmlnLnNob3dOdW1iZXJBcHBsaWVkID09PSB1bmRlZmluZWQgPyB0cnVlIDogY29uZmlnLnNob3dOdW1iZXJBcHBsaWVkO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHNlbGVjdG9yIHVzZWQgZm9yIG9wdGlvbnMgaW4gdGhlIHRlbXBsYXRlXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLm9wdGlvblNlbGVjdG9yID0gY29uZmlnLm9wdGlvblNlbGVjdG9yIHx8ICcuanMteWV4dC1maWx0ZXItb3B0aW9uJztcblxuICAgIC8qKlxuICAgICAqIFRoZSBwbGFjZWhvbGRlciB0ZXh0IHVzZWQgZm9yIHRoZSBmaWx0ZXIgb3B0aW9uIHNlYXJjaCBpbnB1dFxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgdGhpcy5wbGFjZWhvbGRlclRleHQgPSBjb25maWcucGxhY2Vob2xkZXJUZXh0IHx8ICdTZWFyY2ggaGVyZS4uLic7XG5cbiAgICAvKipcbiAgICAgKiBJZiB0cnVlLCBkaXNwbGF5IHRoZSBmaWx0ZXIgb3B0aW9uIHNlYXJjaCBpbnB1dFxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqL1xuICAgIHRoaXMuc2VhcmNoYWJsZSA9IGNvbmZpZy5zZWFyY2hhYmxlIHx8IGZhbHNlO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGZvcm0gbGFiZWwgdGV4dCBmb3IgdGhlIHNlYXJjaCBpbnB1dFxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqL1xuICAgIHRoaXMuc2VhcmNoTGFiZWxUZXh0ID0gY29uZmlnLnNlYXJjaExhYmVsVGV4dCB8fCAnU2VhcmNoIGZvciBhIGZpbHRlciBvcHRpb24nO1xuXG4gICAgdGhpcy52YWxpZGF0ZSgpO1xuXG4gICAgaWYgKHR5cGVvZiBjb25maWcucHJldmlvdXNPcHRpb25zID09PSAnc3RyaW5nJykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uZmlnLnByZXZpb3VzT3B0aW9ucyA9IEpTT04ucGFyc2UoY29uZmlnLnByZXZpb3VzT3B0aW9ucyk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNvbmZpZy5wcmV2aW91c09wdGlvbnMgPSBbXTtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gcHJldmlvdXNPcHRpb25zIHdpbGwgYmUgbnVsbCBpZiB0aGVyZSB3ZXJlIG5vIHByZXZpb3VzT3B0aW9ucyBpbiBwZXJzaXN0ZW50U3RvcmFnZVxuICAgIGNvbnN0IHByZXZpb3VzT3B0aW9ucyA9IGNvbmZpZy5wcmV2aW91c09wdGlvbnM7XG4gICAgdGhpcy5vcHRpb25zID0gdGhpcy5zZXRTZWxlY3RlZE9wdGlvbnModGhpcy5vcHRpb25zLCBwcmV2aW91c09wdGlvbnMpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgc2VsZWN0ZWQgb3B0aW9ucyBvbiBsb2FkIGJhc2VkIG9uIG9wdGlvbnMgc3RvcmVkIGluIHBlcnNpc3RlbnQgc3RvcmFnZSBhbmQgb3B0aW9ucyB3aXRoIHNlbGVjdGVkOiB0cnVlLlxuICAgKiBJZiBubyBwcmV2aW91cyBvcHRpb25zIHdlcmUgc3RvcmVkIGluIHBlcnNpc3RlbnRTdG9yYWdlLCBkZWZhdWx0IHRvIG9wdGlvbnMgbWFya2VkXG4gICAqIGFzIHNlbGVjdGVkLiBJZiBtdWx0aXBsZSBvcHRpb25zIGFyZSBtYXJrZWQgYXMgc2VsZWN0ZWQgZm9yICdzaW5nbGVvcHRpb24nLCBvbmx5IHRoZVxuICAgKiBmaXJzdCBzaG91bGQgYmUgc2VsZWN0ZWQuXG4gICAqIEBwYXJhbSB7QXJyYXk8T2JqZWN0Pn0gb3B0aW9uc1xuICAgKiBAcGFyYW0ge0FycmF5PHN0cmluZz59IHByZXZpb3VzT3B0aW9uc1xuICAgKiBAcmV0dXJucyB7QXJyYXk8T2JqZWN0Pn1cbiAgICovXG4gIHNldFNlbGVjdGVkT3B0aW9ucyAob3B0aW9ucywgcHJldmlvdXNPcHRpb25zKSB7XG4gICAgaWYgKHByZXZpb3VzT3B0aW9ucyAmJiB0aGlzLmNvbnRyb2wgPT09ICdzaW5nbGVvcHRpb24nKSB7XG4gICAgICBsZXQgaGFzU2VlblNlbGVjdGVkT3B0aW9uID0gZmFsc2U7XG4gICAgICByZXR1cm4gb3B0aW9ucy5tYXAobyA9PiB7XG4gICAgICAgIGlmIChwcmV2aW91c09wdGlvbnMuaW5jbHVkZXMoby5sYWJlbCkgJiYgIWhhc1NlZW5TZWxlY3RlZE9wdGlvbikge1xuICAgICAgICAgIGhhc1NlZW5TZWxlY3RlZE9wdGlvbiA9IHRydWU7XG4gICAgICAgICAgcmV0dXJuIHsgLi4ubywgc2VsZWN0ZWQ6IHRydWUgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyAuLi5vLCBzZWxlY3RlZDogZmFsc2UgfTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAocHJldmlvdXNPcHRpb25zICYmIHRoaXMuY29udHJvbCA9PT0gJ211bHRpb3B0aW9uJykge1xuICAgICAgcmV0dXJuIG9wdGlvbnMubWFwKG8gPT4gKHtcbiAgICAgICAgLi4ubyxcbiAgICAgICAgc2VsZWN0ZWQ6IHByZXZpb3VzT3B0aW9ucy5pbmNsdWRlcyhvLmxhYmVsKVxuICAgICAgfSkpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5jb250cm9sID09PSAnc2luZ2xlb3B0aW9uJykge1xuICAgICAgbGV0IGhhc1NlZW5TZWxlY3RlZE9wdGlvbiA9IGZhbHNlO1xuICAgICAgcmV0dXJuIG9wdGlvbnMubWFwKG8gPT4ge1xuICAgICAgICBpZiAoaGFzU2VlblNlbGVjdGVkT3B0aW9uKSB7XG4gICAgICAgICAgcmV0dXJuIHsgLi4ubywgc2VsZWN0ZWQ6IGZhbHNlIH07XG4gICAgICAgIH0gZWxzZSBpZiAoby5zZWxlY3RlZCkge1xuICAgICAgICAgIGhhc1NlZW5TZWxlY3RlZE9wdGlvbiA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgLi4ubyB9O1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBvcHRpb25zO1xuICB9XG5cbiAgZ2V0SW5pdGlhbFNlbGVjdGVkQ291bnQgKCkge1xuICAgIHJldHVybiB0aGlzLm9wdGlvbnMucmVkdWNlKFxuICAgICAgKG51bVNlbGVjdGVkLCBvcHRpb24pID0+IG9wdGlvbi5zZWxlY3RlZCA/IG51bVNlbGVjdGVkICsgMSA6IG51bVNlbGVjdGVkLFxuICAgICAgMCk7XG4gIH1cblxuICB2YWxpZGF0ZSAoKSB7XG4gICAgaWYgKCF0aGlzLmNvbnRyb2wgfHwgIVNVUFBPUlRFRF9DT05UUk9MUy5pbmNsdWRlcyh0aGlzLmNvbnRyb2wpKSB7XG4gICAgICB0aHJvdyBuZXcgQW5zd2Vyc0NvbXBvbmVudEVycm9yKFxuICAgICAgICAnRmlsdGVyT3B0aW9ucyByZXF1aXJlcyBhIHZhbGlkIFwiY29udHJvbFwiIHRvIGJlIHByb3ZpZGVkJyxcbiAgICAgICAgJ0ZpbHRlck9wdGlvbnMnKTtcbiAgICB9XG5cbiAgICBpZiAoISh0aGlzLm9wdGlvblR5cGUgaW4gT3B0aW9uVHlwZXMpKSB7XG4gICAgICBjb25zdCBwb3NzaWJsZVR5cGVzID0gT2JqZWN0LnZhbHVlcyhPcHRpb25UeXBlcykuam9pbignLCAnKTtcbiAgICAgIHRocm93IG5ldyBBbnN3ZXJzQ29tcG9uZW50RXJyb3IoXG4gICAgICAgIGBJbnZhbGlkIG9wdGlvblR5cGUgJHt0aGlzLm9wdGlvblR5cGV9IHBhc3NlZCB0byBGaWx0ZXJPcHRpb25zLiBFeHBlY3RlZCBvbmUgb2YgJHtwb3NzaWJsZVR5cGVzfWAsXG4gICAgICAgICdGaWx0ZXJPcHRpb25zJyk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMub3B0aW9uVHlwZSA9PT0gT3B0aW9uVHlwZXMuUkFESVVTX0ZJTFRFUiAmJiB0aGlzLmNvbnRyb2wgIT09ICdzaW5nbGVvcHRpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgQW5zd2Vyc0NvbXBvbmVudEVycm9yKFxuICAgICAgICBgRmlsdGVyT3B0aW9ucyBvZiBvcHRpb25UeXBlICR7T3B0aW9uVHlwZXMuUkFESVVTX0ZJTFRFUn0gcmVxdWlyZXMgY29udHJvbCBcInNpbmdsZW9wdGlvblwiYCxcbiAgICAgICAgJ0ZpbHRlck9wdGlvbnMnKTtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMub3B0aW9ucykge1xuICAgICAgdGhyb3cgbmV3IEFuc3dlcnNDb21wb25lbnRFcnJvcihcbiAgICAgICAgJ0ZpbHRlck9wdGlvbnMgY29tcG9uZW50IHJlcXVpcmVzIG9wdGlvbnMgdG8gYmUgcHJvdmlkZWQnLFxuICAgICAgICAnRmlsdGVyT3B0aW9ucycpO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIFJlbmRlcnMgYSBzZXQgb2Ygb3B0aW9ucywgZWFjaCBvbmUgcmVwcmVzZW50aW5nIGEgZmlsdGVyIGluIGEgc2VhcmNoLlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBGaWx0ZXJPcHRpb25zQ29tcG9uZW50IGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IgKGNvbmZpZyA9IHt9LCBzeXN0ZW1Db25maWcgPSB7fSkge1xuICAgIHN1cGVyKGNvbmZpZywgc3lzdGVtQ29uZmlnKTtcblxuICAgIGxldCBwcmV2aW91c09wdGlvbnMgPSB0aGlzLmNvcmUuZ2xvYmFsU3RvcmFnZS5nZXRTdGF0ZSh0aGlzLm5hbWUpO1xuICAgIHRoaXMuY29yZS5nbG9iYWxTdG9yYWdlLmRlbGV0ZSh0aGlzLm5hbWUpO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGNvbXBvbmVudCBjb25maWdcbiAgICAgKiBAdHlwZSB7RmlsdGVyT3B0aW9uc0NvbmZpZ31cbiAgICAgKi9cbiAgICB0aGlzLmNvbmZpZyA9IG5ldyBGaWx0ZXJPcHRpb25zQ29uZmlnKHtcbiAgICAgIHByZXZpb3VzT3B0aW9ucyxcbiAgICAgIC4uLmNvbmZpZ1xuICAgIH0pO1xuXG4gICAgY29uc3Qgc2VsZWN0ZWRDb3VudCA9IHRoaXMuY29uZmlnLmdldEluaXRpYWxTZWxlY3RlZENvdW50KCk7XG5cbiAgICAvKipcbiAgICAgKiBUcnVlIGlmIHRoZSBvcHRpb24gbGlzdCBpcyBleHBhbmRlZCBhbmQgdmlzaWJsZVxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqL1xuICAgIHRoaXMuZXhwYW5kZWQgPSB0aGlzLmNvbmZpZy5zaG93RXhwYW5kID8gc2VsZWN0ZWRDb3VudCA+IDAgOiB0cnVlO1xuXG4gICAgLyoqXG4gICAgICogV2hldGhlciB0aGUgY3VycmVudCBpcyBjdXJyZW50bHkgc2hvd2luZyBtb3JlIG9yIGxlc3MuIElmIHRydWUsIGlzIGN1cnJlbnRseSBcInNob3cgbW9yZVwiLlxuICAgICAqIE9ubHkgdXNlZCBpZiBjb25maWcuc2hvd01vcmUgaXMgdHJ1ZS5cbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICB0aGlzLnNob3dNb3JlU3RhdGUgPSB0aGlzLmNvbmZpZy5zaG93TW9yZTtcblxuICAgIGlmICh0aGlzLmNvbmZpZy5zdG9yZU9uQ2hhbmdlKSB7XG4gICAgICB0aGlzLmFwcGx5KCk7XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIGdldCB0eXBlICgpIHtcbiAgICByZXR1cm4gQ29tcG9uZW50VHlwZXMuRklMVEVSX09QVElPTlM7XG4gIH1cblxuICAvKipcbiAgICogVGhlIHRlbXBsYXRlIHRvIHJlbmRlciwgYmFzZWQgb24gdGhlIGNvbnRyb2xcbiAgICogQHJldHVybnMge3N0cmluZ31cbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBzdGF0aWMgZGVmYXVsdFRlbXBsYXRlTmFtZSAoY29uZmlnKSB7XG4gICAgcmV0dXJuIGBjb250cm9scy9maWx0ZXJvcHRpb25zYDtcbiAgfVxuXG4gIHNldFN0YXRlIChkYXRhKSB7XG4gICAgY29uc3Qgc2VsZWN0ZWRDb3VudCA9IHRoaXMuX2dldFNlbGVjdGVkQ291bnQoKTtcbiAgICBzdXBlci5zZXRTdGF0ZShPYmplY3QuYXNzaWduKHt9LCBkYXRhLCB7XG4gICAgICBuYW1lOiB0aGlzLm5hbWUudG9Mb3dlckNhc2UoKSxcbiAgICAgIC4uLnRoaXMuY29uZmlnLFxuICAgICAgc2hvd01vcmVTdGF0ZTogdGhpcy5zaG93TW9yZVN0YXRlLFxuICAgICAgZGlzcGxheVJlc2V0OiB0aGlzLmNvbmZpZy5zaG93UmVzZXQgJiYgc2VsZWN0ZWRDb3VudCA+IDAsXG4gICAgICBleHBhbmRlZDogdGhpcy5leHBhbmRlZCxcbiAgICAgIHNlbGVjdGVkQ291bnQsXG4gICAgICBpc1NpbmdsZU9wdGlvbjogdGhpcy5jb25maWcuY29udHJvbCA9PT0gJ3NpbmdsZW9wdGlvbidcbiAgICB9KSk7XG4gIH1cblxuICBvbk1vdW50ICgpIHtcbiAgICBET00uZGVsZWdhdGUoXG4gICAgICBET00ucXVlcnkodGhpcy5fY29udGFpbmVyLCBgLnl4dC1GaWx0ZXJPcHRpb25zLW9wdGlvbnNgKSxcbiAgICAgIHRoaXMuY29uZmlnLm9wdGlvblNlbGVjdG9yLFxuICAgICAgJ2NsaWNrJyxcbiAgICAgIGV2ZW50ID0+IHtcbiAgICAgICAgbGV0IHNlbGVjdGVkQ291bnRFbCA9IERPTS5xdWVyeSh0aGlzLl9jb250YWluZXIsICcuanMteXh0LUZpbHRlck9wdGlvbnMtc2VsZWN0ZWRDb3VudCcpO1xuICAgICAgICBpZiAoc2VsZWN0ZWRDb3VudEVsKSB7XG4gICAgICAgICAgc2VsZWN0ZWRDb3VudEVsLmlubmVyVGV4dCA9IHRoaXMuX2dldFNlbGVjdGVkQ291bnQoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl91cGRhdGVPcHRpb24ocGFyc2VJbnQoZXZlbnQudGFyZ2V0LmRhdGFzZXQuaW5kZXgpLCBldmVudC50YXJnZXQuY2hlY2tlZCk7XG4gICAgICB9KTtcblxuICAgIC8vIEluaXRpYWxpemUgcmVzZXQgZWxlbWVudCBpZiBwcmVzZW50XG4gICAgY29uc3QgcmVzZXRFbCA9IERPTS5xdWVyeSh0aGlzLl9jb250YWluZXIsICcuanMteXh0LUZpbHRlck9wdGlvbnMtcmVzZXQnKTtcbiAgICBpZiAocmVzZXRFbCkge1xuICAgICAgRE9NLm9uKHJlc2V0RWwsICdjbGljaycsIHRoaXMuY2xlYXJPcHRpb25zLmJpbmQodGhpcykpO1xuICAgIH1cblxuICAgIC8vIHNob3cgbW9yZS9sZXNzIGJ1dHRvblxuICAgIGlmICh0aGlzLmNvbmZpZy5zaG93TW9yZSkge1xuICAgICAgY29uc3Qgc2hvd0xlc3NFbCA9IERPTS5xdWVyeSh0aGlzLl9jb250YWluZXIsICcuanMteXh0LUZpbHRlck9wdGlvbnMtc2hvd0xlc3MnKTtcbiAgICAgIGNvbnN0IHNob3dNb3JlRWwgPSBET00ucXVlcnkodGhpcy5fY29udGFpbmVyLCAnLmpzLXl4dC1GaWx0ZXJPcHRpb25zLXNob3dNb3JlJyk7XG4gICAgICBjb25zdCBvcHRpb25zT3ZlckxpbWl0RWxzID0gRE9NLnF1ZXJ5QWxsKHRoaXMuX2NvbnRhaW5lciwgJy5qcy15eHQtRmlsdGVyT3B0aW9ucy1hYm92ZVNob3dNb3JlTGltaXQnKTtcbiAgICAgIERPTS5vbihcbiAgICAgICAgc2hvd0xlc3NFbCxcbiAgICAgICAgJ2NsaWNrJyxcbiAgICAgICAgKCkgPT4ge1xuICAgICAgICAgIHRoaXMuc2hvd01vcmVTdGF0ZSA9IHRydWU7XG4gICAgICAgICAgc2hvd0xlc3NFbC5jbGFzc0xpc3QuYWRkKCdoaWRkZW4nKTtcbiAgICAgICAgICBzaG93TW9yZUVsLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGRlbicpO1xuICAgICAgICAgIGZvciAobGV0IG9wdGlvbkVsIG9mIG9wdGlvbnNPdmVyTGltaXRFbHMpIHtcbiAgICAgICAgICAgIG9wdGlvbkVsLmNsYXNzTGlzdC5hZGQoJ2hpZGRlbicpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICBET00ub24oXG4gICAgICAgIHNob3dNb3JlRWwsXG4gICAgICAgICdjbGljaycsXG4gICAgICAgICgpID0+IHtcbiAgICAgICAgICB0aGlzLnNob3dNb3JlU3RhdGUgPSBmYWxzZTtcbiAgICAgICAgICBzaG93TGVzc0VsLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGRlbicpO1xuICAgICAgICAgIHNob3dNb3JlRWwuY2xhc3NMaXN0LmFkZCgnaGlkZGVuJyk7XG4gICAgICAgICAgZm9yIChsZXQgb3B0aW9uRWwgb2Ygb3B0aW9uc092ZXJMaW1pdEVscykge1xuICAgICAgICAgICAgb3B0aW9uRWwuY2xhc3NMaXN0LnJlbW92ZSgnaGlkZGVuJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBzZWFyY2hhYmxlIG9wdGlvbiBsaXN0XG4gICAgaWYgKHRoaXMuY29uZmlnLnNlYXJjaGFibGUpIHtcbiAgICAgIGNvbnN0IGNsZWFyU2VhcmNoRWwgPSBET00ucXVlcnkodGhpcy5fY29udGFpbmVyLCAnLmpzLXl4dC1GaWx0ZXJPcHRpb25zLWNsZWFyU2VhcmNoJyk7XG4gICAgICBjb25zdCBzZWFyY2hJbnB1dEVsID0gRE9NLnF1ZXJ5KHRoaXMuX2NvbnRhaW5lciwgJy5qcy15eHQtRmlsdGVyT3B0aW9ucy1maWx0ZXInKTtcbiAgICAgIGNvbnN0IGZpbHRlck9wdGlvbkVscyA9IERPTS5xdWVyeUFsbCh0aGlzLl9jb250YWluZXIsICcuanMteXh0LUZpbHRlck9wdGlvbnMtb3B0aW9uJyk7XG4gICAgICBjb25zdCBmaWx0ZXJDb250YWluZXJFbCA9IERPTS5xdWVyeSh0aGlzLl9jb250YWluZXIsICcuanMteXh0LUZpbHRlck9wdGlvbnMtY29udGFpbmVyJyk7XG5cbiAgICAgIC8vIE9uIGNsZWFyU2VhcmNoRWwgY2xpY2ssIGNsZWFyIHNlYXJjaCBpbnB1dFxuICAgICAgaWYgKGNsZWFyU2VhcmNoRWwgJiYgc2VhcmNoSW5wdXRFbCkge1xuICAgICAgICBET00ub24oY2xlYXJTZWFyY2hFbCwgJ2NsaWNrJywgZXZlbnQgPT4ge1xuICAgICAgICAgIHNlYXJjaElucHV0RWwudmFsdWUgPSAnJztcbiAgICAgICAgICBzZWFyY2hJbnB1dEVsLmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KCdpbnB1dCcsIHtcbiAgICAgICAgICAgICdidWJibGVzJzogdHJ1ZSxcbiAgICAgICAgICAgICdjYW5jZWxhYmxlJzogdHJ1ZVxuICAgICAgICAgIH0pKTtcbiAgICAgICAgICBzZWFyY2hJbnB1dEVsLmZvY3VzKCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBET00ub24oXG4gICAgICAgIHNlYXJjaElucHV0RWwsXG4gICAgICAgICdpbnB1dCcsXG4gICAgICAgIGV2ZW50ID0+IHtcbiAgICAgICAgICBjb25zdCBmaWx0ZXIgPSBldmVudC50YXJnZXQudmFsdWU7XG5cbiAgICAgICAgICBpZiAoIWZpbHRlcikge1xuICAgICAgICAgICAgZmlsdGVyQ29udGFpbmVyRWwuY2xhc3NMaXN0LnJlbW92ZSgneXh0LUZpbHRlck9wdGlvbnMtY29udGFpbmVyLS1zZWFyY2hpbmcnKTtcbiAgICAgICAgICAgIGNsZWFyU2VhcmNoRWwuY2xhc3NMaXN0LmFkZCgnanMtaGlkZGVuJyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZpbHRlckNvbnRhaW5lckVsLmNsYXNzTGlzdC5hZGQoJ3l4dC1GaWx0ZXJPcHRpb25zLWNvbnRhaW5lci0tc2VhcmNoaW5nJyk7XG4gICAgICAgICAgICBjbGVhclNlYXJjaEVsLmNsYXNzTGlzdC5yZW1vdmUoJ2pzLWhpZGRlbicpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGZvciAobGV0IGZpbHRlck9wdGlvbiBvZiBmaWx0ZXJPcHRpb25FbHMpIHtcbiAgICAgICAgICAgIGNvbnN0IGxhYmVsRWwgPSBET00ucXVlcnkoZmlsdGVyT3B0aW9uLCAnLmpzLXl4dC1GaWx0ZXJPcHRpb25zLW9wdGlvbkxhYmVsLS1uYW1lJyk7XG4gICAgICAgICAgICBsZXQgbGFiZWxUZXh0ID0gbGFiZWxFbC50ZXh0Q29udGVudCB8fCBsYWJlbEVsLmlubmVyVGV4dCB8fCAnJztcbiAgICAgICAgICAgIGxhYmVsVGV4dCA9IGxhYmVsVGV4dC50cmltKCk7XG4gICAgICAgICAgICBpZiAoIWZpbHRlcikge1xuICAgICAgICAgICAgICBmaWx0ZXJPcHRpb24uY2xhc3NMaXN0LnJlbW92ZSgnaGlkZGVuU2VhcmNoJyk7XG4gICAgICAgICAgICAgIGZpbHRlck9wdGlvbi5jbGFzc0xpc3QucmVtb3ZlKCdkaXNwbGF5U2VhcmNoJyk7XG4gICAgICAgICAgICAgIGxhYmVsRWwuaW5uZXJIVE1MID0gbGFiZWxUZXh0O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgbGV0IG1hdGNoZWRTdWJzdHJpbmcgPSB0aGlzLl9nZXRNYXRjaGVkU3Vic3RyaW5nKGxhYmVsVGV4dC50b0xvd2VyQ2FzZSgpLCBmaWx0ZXIudG9Mb3dlckNhc2UoKSk7XG4gICAgICAgICAgICAgIGlmIChtYXRjaGVkU3Vic3RyaW5nKSB7XG4gICAgICAgICAgICAgICAgZmlsdGVyT3B0aW9uLmNsYXNzTGlzdC5hZGQoJ2Rpc3BsYXlTZWFyY2gnKTtcbiAgICAgICAgICAgICAgICBmaWx0ZXJPcHRpb24uY2xhc3NMaXN0LnJlbW92ZSgnaGlkZGVuU2VhcmNoJyk7XG4gICAgICAgICAgICAgICAgbGFiZWxFbC5pbm5lckhUTUwgPSBuZXcgSGlnaGxpZ2h0ZWRWYWx1ZSh7XG4gICAgICAgICAgICAgICAgICB2YWx1ZTogbGFiZWxUZXh0LFxuICAgICAgICAgICAgICAgICAgbWF0Y2hlZFN1YnN0cmluZ3M6IFttYXRjaGVkU3Vic3RyaW5nXVxuICAgICAgICAgICAgICAgIH0pLmdldCgpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGZpbHRlck9wdGlvbi5jbGFzc0xpc3QuYWRkKCdoaWRkZW5TZWFyY2gnKTtcbiAgICAgICAgICAgICAgICBmaWx0ZXJPcHRpb24uY2xhc3NMaXN0LnJlbW92ZSgnZGlzcGxheVNlYXJjaCcpO1xuICAgICAgICAgICAgICAgIGxhYmVsRWwuaW5uZXJIVE1MID0gbGFiZWxUZXh0O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICApO1xuICAgIH1cblxuICAgIC8vIGV4cGFuZCBidXR0b25cbiAgICBpZiAodGhpcy5jb25maWcuc2hvd0V4cGFuZCkge1xuICAgICAgY29uc3QgbGVnZW5kID0gRE9NLnF1ZXJ5KHRoaXMuX2NvbnRhaW5lciwgJy55eHQtRmlsdGVyT3B0aW9ucy1jbGlja2FibGVMZWdlbmQnKTtcbiAgICAgIERPTS5vbihcbiAgICAgICAgbGVnZW5kLFxuICAgICAgICAnbW91c2Vkb3duJyxcbiAgICAgICAgY2xpY2sgPT4ge1xuICAgICAgICAgIGlmIChjbGljay5idXR0b24gPT09IDApIHtcbiAgICAgICAgICAgIHRoaXMuZXhwYW5kZWQgPSAhdGhpcy5leHBhbmRlZDtcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICBET00ub24oXG4gICAgICAgIGxlZ2VuZCxcbiAgICAgICAgJ2tleWRvd24nLFxuICAgICAgICBrZXkgPT4ge1xuICAgICAgICAgIGlmIChrZXkua2V5ID09PSAnICcgfHwga2V5LmtleSA9PT0gJ0VudGVyJykge1xuICAgICAgICAgICAga2V5LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICB0aGlzLmV4cGFuZGVkID0gIXRoaXMuZXhwYW5kZWQ7XG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgY291bnQgb2YgY3VycmVudGx5IHNlbGVjdGVkIG9wdGlvbnNcbiAgICogQHJldHVybnMge251bWJlcn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9nZXRTZWxlY3RlZENvdW50ICgpIHtcbiAgICByZXR1cm4gdGhpcy5jb25maWcub3B0aW9ucy5maWx0ZXIobyA9PiBvLnNlbGVjdGVkKS5sZW5ndGg7XG4gIH1cblxuICAvKipcbiAgICogVG9nZ2xlcyB0aGUgZGlzcGxheSBvZiB0aGUgcmVzZXQgZWxlbWVudCBiYXNlZCBvbiB0aGUgc2VsZWN0ZWQgY291bnQuIElmIHRoZXJlIGFyZSBzZWxlY3RlZFxuICAgKiBvcHRpb25zLCBzaG93IHRoZSByZXNldCBlbGVtZW50LCBpZiBub3QsIGhpZGUgaXQuXG4gICAqXG4gICAqIE5vdGU6IHRoaXMgd2lsbCBub3QgaGF2ZSBhbnkgZWZmZWN0IGlmIHRoZSByZXNldCBlbGVtZW50IGlzbid0IGluIHRoZSBET00uXG4gICAqXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfdG9nZ2xlUmVzZXQgKCkge1xuICAgIGNvbnN0IHJlc2V0RWwgPSBET00ucXVlcnkodGhpcy5fY29udGFpbmVyLCAnLmpzLXl4dC1GaWx0ZXJPcHRpb25zLXJlc2V0Jyk7XG4gICAgY29uc3Qgc2VsZWN0ZWRDb3VudCA9IHRoaXMuX2dldFNlbGVjdGVkQ291bnQoKTtcbiAgICBpZiAoc2VsZWN0ZWRDb3VudCA+IDApIHtcbiAgICAgIHJlc2V0RWwuY2xhc3NMaXN0LnJlbW92ZSgnanMtaGlkZGVuJyk7XG4gICAgfSBlbHNlIGlmICghcmVzZXRFbC5jbGFzc0xpc3QuY29udGFpbnMoJ2pzLWhpZGRlbicpKSB7XG4gICAgICByZXNldEVsLmNsYXNzTGlzdC5hZGQoJ2pzLWhpZGRlbicpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBGaW5kcyB0aGUgbGVuZ3RoIGFuZCBvZmZzZXQgb2YgdGhlIHN1YnN0cmluZyB3aGVyZSAoc3RyaW5nKSBvcHRpb24gYW5kXG4gICAqIChzdHJpbmcpIGZpbHRlciBcIm1hdGNoXCIuXG4gICAqXG4gICAqIFwiTWF0Y2hcIiBpcyBkZWZpbmVkIGFzIGFuIGV4YWN0IHRleHQgbWF0Y2gsIG9yIC0tIGlmIHRoZSBsZW5ndGggb2YgZmlsdGVyXG4gICAqIGlzIGdyZWF0ZXIgdGhhbiB0aGUgYG1pbkZpbHRlclNpemVGb3JMZXZlbnNodGVpbmAgLS0gYSBcIm1hdGNoXCIgY2FuIG9jY3VyIGlmXG4gICAqIGFueSBcIm4gbGVuZ3RoXCIgc3Vic3RyaW5nIG9mIG9wdGlvbiAod2hlcmUgXCJuIGxlbmd0aFwiIGlzIHRoZSBsZW5ndGggb2YgZmlsdGVyKVxuICAgKiBpcyB3aXRoaW4gdGhlIGBtYXhMZXZlbnNodGVpbkRpc3RhbmNlYCBsZXZlbnNodGVpbiBkaXN0YW5jZSBvZiB0aGUgZmlsdGVyLlxuICAgKlxuICAgKiBOb3RlOiB0aGlzIGlzIGNhc2Ugc2Vuc2l0aXZlLlxuICAgKlxuICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2dldE1hdGNoZWRTdWJzdHJpbmcgKG9wdGlvbiwgZmlsdGVyKSB7XG4gICAgbGV0IG9mZnNldCA9IHRoaXMuX2dldE9mZnNldChvcHRpb24sIGZpbHRlcik7XG4gICAgaWYgKG9mZnNldCA+IC0xKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBsZW5ndGg6IGZpbHRlci5sZW5ndGgsXG4gICAgICAgIG9mZnNldDogb2Zmc2V0XG4gICAgICB9O1xuICAgIH1cblxuICAgIGNvbnN0IG1pbkZpbHRlclNpemVGb3JMZXZlbnNodGVpbiA9IDM7XG4gICAgY29uc3QgbWF4TGV2ZW5zaHRlaW5EaXN0YW5jZSA9IDE7XG4gICAgaWYgKGZpbHRlci5sZW5ndGggPiBtaW5GaWx0ZXJTaXplRm9yTGV2ZW5zaHRlaW4pIHtcbiAgICAgIC8vIEJyZWFrIG9wdGlvbiBpbnRvIFggZmlsdGVyLmxlbmd0aCBzaXplIHN1YnN0cmluZ3NcbiAgICAgIGxldCBzdWJzdHJpbmdzID0gW107XG4gICAgICBmb3IgKGxldCBzdGFydCA9IDA7IHN0YXJ0IDw9IChvcHRpb24ubGVuZ3RoIC0gZmlsdGVyLmxlbmd0aCk7IHN0YXJ0KyspIHtcbiAgICAgICAgc3Vic3RyaW5ncy5wdXNoKG9wdGlvbi5zdWJzdHIoc3RhcnQsIGZpbHRlci5sZW5ndGgpKTtcbiAgICAgIH1cblxuICAgICAgLy8gRmluZCB0aGUgc3Vic3RyaW5nIHRoYXQgaXMgdGhlIGNsb3Nlc3QgaW4gbGV2ZW5zaHRlaW4gZGlzdGFuY2UgdG8gZmlsdGVyXG4gICAgICBsZXQgbWluTGV2RGlzdCA9IGZpbHRlci5sZW5ndGg7XG4gICAgICBsZXQgbWluTGV2U3Vic3RyaW5nID0gZmlsdGVyO1xuICAgICAgZm9yIChsZXQgc3Vic3RyaW5nIG9mIHN1YnN0cmluZ3MpIHtcbiAgICAgICAgbGV0IGxldkRpc3QgPSB0aGlzLl9jYWxjTGV2ZW5zaHRlaW5EaXN0YW5jZShzdWJzdHJpbmcsIGZpbHRlcik7XG4gICAgICAgIGlmIChsZXZEaXN0IDwgbWluTGV2RGlzdCkge1xuICAgICAgICAgIG1pbkxldkRpc3QgPSBsZXZEaXN0O1xuICAgICAgICAgIG1pbkxldlN1YnN0cmluZyA9IHN1YnN0cmluZztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBJZiB0aGUgbWluIGxldmVuc2h0ZWluIGRpc3RhbmNlIGlzIGJlbG93IHRoZSBtYXgsIGNvdW50IGl0IGFzIGEgbWF0Y2hcbiAgICAgIGlmIChtaW5MZXZEaXN0IDw9IG1heExldmVuc2h0ZWluRGlzdGFuY2UpIHtcbiAgICAgICAgb2Zmc2V0ID0gdGhpcy5fZ2V0T2Zmc2V0KG9wdGlvbiwgbWluTGV2U3Vic3RyaW5nKTtcbiAgICAgICAgaWYgKG9mZnNldCA+IC0xKSB7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGxlbmd0aDogZmlsdGVyLmxlbmd0aCxcbiAgICAgICAgICAgIG9mZnNldDogb2Zmc2V0XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxjdWxhdGUgdGhlIGxldmVuc2h0ZWluIGRpc3RhbmNlIGZvciB0d28gc3RyaW5nc1xuICAgKiBAcmV0dXJucyB7bnVtYmVyfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2NhbGNMZXZlbnNodGVpbkRpc3RhbmNlIChhLCBiKSB7XG4gICAgcmV0dXJuIGxldmVuc2h0ZWluKGEsIGIpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIHN0YXJ0aW5nIGluZGV4IG9mIGZpcnN0IG9jY3VyYW5jZSBvZiB0aGUgKHN0cmluZykgZmlsdGVyIGluXG4gICAqIHRoZSAoc3RyaW5nKSBvcHRpb24sIG9yIC0xIGlmIG5vdCBwcmVzZW50XG4gICAqIEByZXR1cm5zIHtudW1iZXJ9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfZ2V0T2Zmc2V0IChvcHRpb24sIGZpbHRlcikge1xuICAgIHJldHVybiAob3B0aW9uICYmIGZpbHRlcikgPyBvcHRpb24uaW5kZXhPZihmaWx0ZXIpIDogLTE7XG4gIH1cblxuICAvKipcbiAgICogQ2xlYXJzIGFsbCBzZWxlY3RlZCBvcHRpb25zLlxuICAgKi9cbiAgY2xlYXJPcHRpb25zICgpIHtcbiAgICB0aGlzLmNvbmZpZy5vcHRpb25zID0gdGhpcy5jb25maWcub3B0aW9ucy5tYXAobyA9PiBPYmplY3QuYXNzaWduKHt9LCBvLCB7IHNlbGVjdGVkOiBmYWxzZSB9KSk7XG4gICAgdGhpcy51cGRhdGVMaXN0ZW5lcnMoKTtcbiAgICB0aGlzLnNldFN0YXRlKCk7XG4gIH1cblxuICAvKipcbiAgICogQ2FsbCB0aGUgY29uZmlnLm9uQ2hhbmdlIGNhbGxiYWNrIHdpdGggdGhlIEZpbHRlck5vZGUgY29ycmVzcG9uZGluZyB0byB0aGVcbiAgICogY29tcG9uZW50IHN0YXRlLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGFsd2F5c1NhdmVGaWx0ZXJOb2Rlc1xuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGJsb2NrU2VhcmNoT25DaGFuZ2VcbiAgICovXG4gIHVwZGF0ZUxpc3RlbmVycyAoYWx3YXlzU2F2ZUZpbHRlck5vZGVzLCBibG9ja1NlYXJjaE9uQ2hhbmdlKSB7XG4gICAgY29uc3QgZmlsdGVyTm9kZSA9IHRoaXMuZ2V0RmlsdGVyTm9kZSgpO1xuICAgIGlmICh0aGlzLmNvbmZpZy5zdG9yZU9uQ2hhbmdlKSB7XG4gICAgICB0aGlzLmFwcGx5KCk7XG4gICAgfVxuXG4gICAgdGhpcy5jb25maWcub25DaGFuZ2UoZmlsdGVyTm9kZSwgYWx3YXlzU2F2ZUZpbHRlck5vZGVzLCBibG9ja1NlYXJjaE9uQ2hhbmdlKTtcbiAgfVxuXG4gIF91cGRhdGVPcHRpb24gKGluZGV4LCBzZWxlY3RlZCkge1xuICAgIGlmICh0aGlzLmNvbmZpZy5jb250cm9sID09PSAnc2luZ2xlb3B0aW9uJykge1xuICAgICAgdGhpcy5jb25maWcub3B0aW9ucyA9IHRoaXMuY29uZmlnLm9wdGlvbnMubWFwKG8gPT4gT2JqZWN0LmFzc2lnbih7fSwgbywgeyBzZWxlY3RlZDogZmFsc2UgfSkpO1xuICAgIH1cblxuICAgIHRoaXMuY29uZmlnLm9wdGlvbnNbaW5kZXhdID0gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5jb25maWcub3B0aW9uc1tpbmRleF0sIHsgc2VsZWN0ZWQgfSk7XG5cbiAgICBpZiAodGhpcy5jb25maWcuc2hvd1Jlc2V0KSB7XG4gICAgICB0aGlzLl90b2dnbGVSZXNldCgpO1xuICAgIH1cbiAgICB0aGlzLnVwZGF0ZUxpc3RlbmVycygpO1xuICB9XG5cbiAgYXBwbHkgKCkge1xuICAgIHN3aXRjaCAodGhpcy5jb25maWcub3B0aW9uVHlwZSkge1xuICAgICAgY2FzZSBPcHRpb25UeXBlcy5SQURJVVNfRklMVEVSOlxuICAgICAgICB0aGlzLmNvcmUuc2V0TG9jYXRpb25SYWRpdXNGaWx0ZXJOb2RlKHRoaXMuZ2V0TG9jYXRpb25SYWRpdXNGaWx0ZXJOb2RlKCkpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgT3B0aW9uVHlwZXMuU1RBVElDX0ZJTFRFUjpcbiAgICAgICAgdGhpcy5jb3JlLnNldFN0YXRpY0ZpbHRlck5vZGVzKHRoaXMubmFtZSwgdGhpcy5nZXRGaWx0ZXJOb2RlKCkpO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IG5ldyBBbnN3ZXJzQ29tcG9uZW50RXJyb3IoYFVua25vd24gb3B0aW9uVHlwZSAke3RoaXMuY29uZmlnLm9wdGlvblR5cGV9YCwgJ0ZpbHRlck9wdGlvbnMnKTtcbiAgICB9XG4gIH1cblxuICBmbG9hdFNlbGVjdGVkICgpIHtcbiAgICB0aGlzLmNvbmZpZy5vcHRpb25zID0gdGhpcy5jb25maWcub3B0aW9ucy5zb3J0KChhLCBiKSA9PiBiLnNlbGVjdGVkIC0gYS5zZWxlY3RlZCk7XG4gIH1cblxuICBfYnVpbGRGaWx0ZXIgKG9wdGlvbikge1xuICAgIHJldHVybiBvcHRpb24uZmlsdGVyID8gb3B0aW9uLmZpbHRlciA6IEZpbHRlci5lcXVhbChvcHRpb24uZmllbGQsIG9wdGlvbi52YWx1ZSk7XG4gIH1cblxuICBfZ2V0RmlsdGVyVHlwZSAoKSB7XG4gICAgaWYgKHRoaXMuY29uZmlnLmlzRHluYW1pYykge1xuICAgICAgcmV0dXJuIEZpbHRlclR5cGUuRkFDRVQ7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmNvbmZpZy5vcHRpb25UeXBlID09PSAnUkFESVVTX0ZJTFRFUidcbiAgICAgID8gRmlsdGVyVHlwZS5SQURJVVNcbiAgICAgIDogRmlsdGVyVHlwZS5TVEFUSUM7XG4gIH1cblxuICBfYnVpbGRGaWx0ZXJNZXRhZGF0YSAob3B0aW9uKSB7XG4gICAgcmV0dXJuIG5ldyBGaWx0ZXJNZXRhZGF0YSh7XG4gICAgICBmaWVsZE5hbWU6IHRoaXMuY29uZmlnLmxhYmVsLFxuICAgICAgZGlzcGxheVZhbHVlOiBvcHRpb24ubGFiZWwsXG4gICAgICBmaWx0ZXJUeXBlOiB0aGlzLl9nZXRGaWx0ZXJUeXBlKClcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm4gdGhlIEZpbHRlck5vZGUgd2hlbiB0aGlzIGlzIGEgUkFESVVTX0ZJTFRFUi5cbiAgICogQHR5cGUge0ZpbHRlck5vZGV9XG4gICAqL1xuICBnZXRMb2NhdGlvblJhZGl1c0ZpbHRlck5vZGUgKCkge1xuICAgIGNvbnN0IHNlbGVjdGVkT3B0aW9uID0gdGhpcy5jb25maWcub3B0aW9ucy5maW5kKG8gPT4gby5zZWxlY3RlZCk7XG4gICAgaWYgKCFzZWxlY3RlZE9wdGlvbikge1xuICAgICAgcmV0dXJuIEZpbHRlck5vZGVGYWN0b3J5LmZyb20oKTtcbiAgICB9XG4gICAgY29uc3QgZmlsdGVyTm9kZSA9IHtcbiAgICAgIG1ldGFkYXRhOiB0aGlzLl9idWlsZEZpbHRlck1ldGFkYXRhKHNlbGVjdGVkT3B0aW9uKSxcbiAgICAgIGZpbHRlcjogeyB2YWx1ZTogc2VsZWN0ZWRPcHRpb24udmFsdWUgfSxcbiAgICAgIHJlbW92ZTogKCkgPT4gdGhpcy5fY2xlYXJTaW5nbGVPcHRpb24oc2VsZWN0ZWRPcHRpb24pXG4gICAgfTtcbiAgICBpZiAoc2VsZWN0ZWRPcHRpb24udmFsdWUgPT09IDApIHtcbiAgICAgIHJldHVybiBGaWx0ZXJOb2RlRmFjdG9yeS5mcm9tKHtcbiAgICAgICAgLi4uZmlsdGVyTm9kZSxcbiAgICAgICAgZmlsdGVyOiBGaWx0ZXIuZW1wdHkoKVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBGaWx0ZXJOb2RlRmFjdG9yeS5mcm9tKGZpbHRlck5vZGUpO1xuICAgIH1cbiAgfVxuXG4gIF9jbGVhclNpbmdsZU9wdGlvbiAob3B0aW9uKSB7XG4gICAgb3B0aW9uLnNlbGVjdGVkID0gZmFsc2U7XG4gICAgdGhpcy51cGRhdGVMaXN0ZW5lcnModHJ1ZSwgdHJ1ZSk7XG4gICAgdGhpcy5zZXRTdGF0ZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhpcyBjb21wb25lbnQncyBmaWx0ZXIgbm9kZSB3aGVuIGl0IGlzIGEgU1RBVElDX0ZJTFRFUi5cbiAgICogVGhpcyBtZXRob2QgaXMgZXhwb3NlZCBzbyB0aGF0IGNvbXBvbmVudHMgbGlrZSB7QGxpbmsgRmlsdGVyQm94Q29tcG9uZW50fVxuICAgKiBjYW4gYWNjZXNzIHRoZW0uXG4gICAqIEByZXR1cm5zIHtGaWx0ZXJOb2RlfVxuICAgKi9cbiAgZ2V0RmlsdGVyTm9kZSAoKSB7XG4gICAgY29uc3QgZmlsdGVyTm9kZXMgPSB0aGlzLmNvbmZpZy5vcHRpb25zXG4gICAgICAuZmlsdGVyKG8gPT4gby5zZWxlY3RlZClcbiAgICAgIC5tYXAobyA9PiBGaWx0ZXJOb2RlRmFjdG9yeS5mcm9tKHtcbiAgICAgICAgZmlsdGVyOiB0aGlzLl9idWlsZEZpbHRlcihvKSxcbiAgICAgICAgbWV0YWRhdGE6IHRoaXMuX2J1aWxkRmlsdGVyTWV0YWRhdGEobyksXG4gICAgICAgIHJlbW92ZTogKCkgPT4gdGhpcy5fY2xlYXJTaW5nbGVPcHRpb24obylcbiAgICAgIH0pKTtcblxuICAgIHRoaXMuY29yZS5wZXJzaXN0ZW50U3RvcmFnZS5zZXQodGhpcy5uYW1lLCB0aGlzLmNvbmZpZy5vcHRpb25zLmZpbHRlcihvID0+IG8uc2VsZWN0ZWQpLm1hcChvID0+IG8ubGFiZWwpKTtcbiAgICBjb25zdCBmaWVsZElkVG9GaWx0ZXJOb2RlcyA9IGdyb3VwQXJyYXkoZmlsdGVyTm9kZXMsIGZuID0+IGZuLmdldEZpbHRlcigpLmdldEZpbHRlcktleSgpKTtcblxuICAgIC8vIE9SIHRvZ2V0aGVyIGZpbHRlciBub2RlcyBmb3IgdGhlIHNhbWUgZmllbGQgaWQuXG4gICAgY29uc3QgdG90YWxGaWx0ZXJOb2RlcyA9IFtdO1xuICAgIGZvciAoY29uc3Qgc2FtZUlkTm9kZXMgb2YgT2JqZWN0LnZhbHVlcyhmaWVsZElkVG9GaWx0ZXJOb2RlcykpIHtcbiAgICAgIHRvdGFsRmlsdGVyTm9kZXMucHVzaChGaWx0ZXJOb2RlRmFjdG9yeS5vciguLi5zYW1lSWROb2RlcykpO1xuICAgIH1cblxuICAgIC8vIEFORCBhbGwgb2YgdGhlIE9SZWQgdG9nZXRoZXIgbm9kZXMuXG4gICAgcmV0dXJuIEZpbHRlck5vZGVGYWN0b3J5LmFuZCguLi50b3RhbEZpbHRlck5vZGVzKTtcbiAgfVxufVxuIiwiLyoqIEBtb2R1bGUgUmFuZ2VGaWx0ZXJDb21wb25lbnQgKi9cblxuaW1wb3J0IEZpbHRlciBmcm9tICcuLi8uLi8uLi9jb3JlL21vZGVscy9maWx0ZXInO1xuaW1wb3J0IERPTSBmcm9tICcuLi8uLi9kb20vZG9tJztcbmltcG9ydCBDb21wb25lbnQgZnJvbSAnLi4vY29tcG9uZW50JztcbmltcG9ydCBGaWx0ZXJOb2RlRmFjdG9yeSBmcm9tICcuLi8uLi8uLi9jb3JlL2ZpbHRlcnMvZmlsdGVybm9kZWZhY3RvcnknO1xuaW1wb3J0IEZpbHRlck1ldGFkYXRhIGZyb20gJy4uLy4uLy4uL2NvcmUvZmlsdGVycy9maWx0ZXJtZXRhZGF0YSc7XG5pbXBvcnQgQ29tcG9uZW50VHlwZXMgZnJvbSAnLi4vLi4vY29tcG9uZW50cy9jb21wb25lbnR0eXBlcyc7XG5cbmNvbnN0IERFRkFVTFRfQ09ORklHID0ge1xuICBtaW5QbGFjZWhvbGRlclRleHQ6ICdNaW4nLFxuICBtYXhQbGFjZWhvbGRlclRleHQ6ICdNYXgnXG59O1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSYW5nZUZpbHRlckNvbXBvbmVudCBleHRlbmRzIENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yIChjb25maWcgPSB7fSwgc3lzdGVtQ29uZmlnID0ge30pIHtcbiAgICBzdXBlcih7IC4uLkRFRkFVTFRfQ09ORklHLCAuLi5jb25maWcgfSwgc3lzdGVtQ29uZmlnKTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBmaWVsZCB0byBmaWx0ZXIgb25cbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5fZmllbGQgPSBjb25maWcuZmllbGQ7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgY2FsbGJhY2sgZnVuY3Rpb24gdG8gY2FsbCB3aGVuIHRoZSBmaWx0ZXIgdmFsdWUgY2hhbmdlc1xuICAgICAqIEB0eXBlIHtmdW5jdGlvbn1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuX29uQ2hhbmdlID0gY29uZmlnLm9uQ2hhbmdlIHx8IGZ1bmN0aW9uICgpIHt9O1xuXG4gICAgLyoqXG4gICAgICogSWYgdHJ1ZSwgc3RvcmVzIHRoZSBmaWx0ZXIgdG8gc3RvcmFnZSBvbiBlYWNoIGNoYW5nZVxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5fc3RvcmVPbkNoYW5nZSA9IGNvbmZpZy5zdG9yZU9uQ2hhbmdlID09PSB1bmRlZmluZWQgPyB0cnVlIDogY29uZmlnLnN0b3JlT25DaGFuZ2U7XG5cbiAgICBsZXQgbWluVmFsID0gdGhpcy5jb3JlLmdsb2JhbFN0b3JhZ2UuZ2V0U3RhdGUoYCR7dGhpcy5uYW1lfS5taW5gKTtcbiAgICBpZiAodHlwZW9mIG1pblZhbCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIG1pblZhbCA9IE51bWJlci5wYXJzZUludChtaW5WYWwpO1xuICAgICAgfSBjYXRjaCAoZSkge31cbiAgICB9XG4gICAgbGV0IG1heFZhbCA9IHRoaXMuY29yZS5nbG9iYWxTdG9yYWdlLmdldFN0YXRlKGAke3RoaXMubmFtZX0ubWF4YCk7XG4gICAgaWYgKHR5cGVvZiBtaW5WYWwgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0cnkge1xuICAgICAgICBtYXhWYWwgPSBOdW1iZXIucGFyc2VJbnQobWF4VmFsKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGN1cnJlbnQgcmFuZ2UgcmVwcmVzZW50ZWRcbiAgICAgKiBAdHlwZSB7b2JqZWN0fVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5fcmFuZ2UgPSB7XG4gICAgICBtaW46IHRoaXMuZ2V0Rmlyc3RWYWxpZFZhbHVlKG1pblZhbCwgY29uZmlnLmluaXRpYWxNaW4sIDApLFxuICAgICAgbWF4OiB0aGlzLmdldEZpcnN0VmFsaWRWYWx1ZShtYXhWYWwsIGNvbmZpZy5pbml0aWFsTWF4LCAxMClcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVGhlIHRpdGxlIHRvIGRpc3BsYXkgZm9yIHRoZSByYW5nZSBjb250cm9sXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuX3RpdGxlID0gY29uZmlnLnRpdGxlO1xuXG4gICAgLyoqXG4gICAgICogVGhlIG9wdGlvbmFsIGxhYmVsIHRvIGRpc3BsYXkgZm9yIHRoZSBtaW4gaW5wdXRcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5fbWluTGFiZWwgPSBjb25maWcubWluTGFiZWwgfHwgbnVsbDtcblxuICAgIC8qKlxuICAgICAqIFRoZSBvcHRpb25hbCBsYWJlbCB0byBkaXNwbGF5IGZvciB0aGUgbWF4IGlucHV0XG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuX21heExhYmVsID0gY29uZmlnLm1heExhYmVsIHx8IG51bGw7XG4gIH1cblxuICBnZXRGaXJzdFZhbGlkVmFsdWUgKC4uLnZhbHVlcykge1xuICAgIGZvciAoY29uc3QgdmFsdWUgb2YgdmFsdWVzKSB7XG4gICAgICBpZiAodmFsdWUgfHwgdmFsdWUgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBnZXQgdHlwZSAoKSB7XG4gICAgcmV0dXJuIENvbXBvbmVudFR5cGVzLlJBTkdFX0ZJTFRFUjtcbiAgfVxuXG4gIHN0YXRpYyBkZWZhdWx0VGVtcGxhdGVOYW1lICgpIHtcbiAgICByZXR1cm4gJ2NvbnRyb2xzL3JhbmdlJztcbiAgfVxuXG4gIHNldFN0YXRlIChkYXRhKSB7XG4gICAgc3VwZXIuc2V0U3RhdGUoT2JqZWN0LmFzc2lnbih7fSwgZGF0YSwge1xuICAgICAgbmFtZTogdGhpcy5uYW1lLFxuICAgICAgdGl0bGU6IHRoaXMuX3RpdGxlLFxuICAgICAgbWluTGFiZWw6IHRoaXMuX21pbkxhYmVsLFxuICAgICAgbWF4TGFiZWw6IHRoaXMuX21heExhYmVsLFxuICAgICAgbWluVmFsdWU6IHRoaXMuX3JhbmdlLm1pbixcbiAgICAgIG1heFZhbHVlOiB0aGlzLl9yYW5nZS5tYXhcbiAgICB9KSk7XG4gIH1cblxuICBvbkNyZWF0ZSAoKSB7XG4gICAgRE9NLmRlbGVnYXRlKHRoaXMuX2NvbnRhaW5lciwgJy5qcy15ZXh0LXJhbmdlJywgJ2NoYW5nZScsIGV2ZW50ID0+IHtcbiAgICAgIHRoaXMuX3VwZGF0ZVJhbmdlKGV2ZW50LnRhcmdldC5kYXRhc2V0LmtleSwgTnVtYmVyLnBhcnNlSW50KGV2ZW50LnRhcmdldC52YWx1ZSkpO1xuICAgIH0pO1xuICB9XG5cbiAgc2V0TWluICh2YWx1ZSkge1xuICAgIHRoaXMuX3VwZGF0ZVJhbmdlKCdtaW4nLCB2YWx1ZSk7XG4gIH1cblxuICBzZXRNYXggKHZhbHVlKSB7XG4gICAgdGhpcy5fdXBkYXRlUmFuZ2UoJ21heCcsIHZhbHVlKTtcbiAgfVxuXG4gIF9yZW1vdmVGaWx0ZXJOb2RlICgpIHtcbiAgICB0aGlzLl9yYW5nZSA9IHtcbiAgICAgIG1pbjogbnVsbCxcbiAgICAgIG1heDogbnVsbFxuICAgIH07XG4gICAgdGhpcy5zZXRTdGF0ZSgpO1xuICAgIHRoaXMuX29uQ2hhbmdlKEZpbHRlck5vZGVGYWN0b3J5LmZyb20oKSk7XG4gICAgdGhpcy5jb3JlLmNsZWFyU3RhdGljRmlsdGVyTm9kZSh0aGlzLm5hbWUpO1xuICAgIHRoaXMuY29yZS5wZXJzaXN0ZW50U3RvcmFnZS5kZWxldGUoYCR7dGhpcy5uYW1lfS5taW5gKTtcbiAgICB0aGlzLmNvcmUucGVyc2lzdGVudFN0b3JhZ2UuZGVsZXRlKGAke3RoaXMubmFtZX0ubWF4YCk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGlzIGNvbXBvbmVudCdzIGZpbHRlciBub2RlLlxuICAgKiBUaGlzIG1ldGhvZCBpcyBleHBvc2VkIHNvIHRoYXQgY29tcG9uZW50cyBsaWtlIHtAbGluayBGaWx0ZXJCb3hDb21wb25lbnR9XG4gICAqIGNhbiBhY2Nlc3MgdGhlbS5cbiAgICogQHJldHVybnMge0ZpbHRlck5vZGV9XG4gICAqL1xuICBnZXRGaWx0ZXJOb2RlICgpIHtcbiAgICByZXR1cm4gRmlsdGVyTm9kZUZhY3RvcnkuZnJvbSh7XG4gICAgICBmaWx0ZXI6IHRoaXMuX2J1aWxkRmlsdGVyKCksXG4gICAgICBtZXRhZGF0YTogdGhpcy5fYnVpbGRGaWx0ZXJNZXRhZGF0YSgpLFxuICAgICAgcmVtb3ZlOiAoKSA9PiB0aGlzLl9yZW1vdmVGaWx0ZXJOb2RlKClcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGUgdGhlIGN1cnJlbnQgcmFuZ2Ugc3RhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUgcmFuZ2Uga2V5IHRvIHVwZGF0ZVxuICAgKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgVGhlIG5ldyB2YWx1ZSBmb3IgdGhlIGtleVxuICAgKi9cbiAgX3VwZGF0ZVJhbmdlIChrZXksIHZhbHVlKSB7XG4gICAgdGhpcy5fcmFuZ2UgPSBPYmplY3QuYXNzaWduKHt9LCB0aGlzLl9yYW5nZSwgeyBba2V5XTogdmFsdWUgfSk7XG4gICAgdGhpcy5zZXRTdGF0ZSgpO1xuXG4gICAgY29uc3QgZmlsdGVyTm9kZSA9IHRoaXMuZ2V0RmlsdGVyTm9kZSgpO1xuICAgIGlmICh0aGlzLl9zdG9yZU9uQ2hhbmdlKSB7XG4gICAgICB0aGlzLmNvcmUuc2V0U3RhdGljRmlsdGVyTm9kZXModGhpcy5uYW1lLCBmaWx0ZXJOb2RlKTtcbiAgICB9XG4gICAgdGhpcy5jb3JlLnBlcnNpc3RlbnRTdG9yYWdlLnNldChgJHt0aGlzLm5hbWV9Lm1pbmAsIHRoaXMuX3JhbmdlLm1pbik7XG4gICAgdGhpcy5jb3JlLnBlcnNpc3RlbnRTdG9yYWdlLnNldChgJHt0aGlzLm5hbWV9Lm1heGAsIHRoaXMuX3JhbmdlLm1heCk7XG5cbiAgICB0aGlzLl9vbkNoYW5nZShmaWx0ZXJOb2RlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBCdWlsZCB0aGUgZmlsdGVyIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBjdXJyZW50IHN0YXRlXG4gICAqIEByZXR1cm5zIHtGaWx0ZXJ9XG4gICAqL1xuICBfYnVpbGRGaWx0ZXIgKCkge1xuICAgIGNvbnN0IHsgbWluLCBtYXggfSA9IHRoaXMuX3JhbmdlO1xuICAgIGNvbnN0IGZhbHN5TWluID0gIW1pbiAmJiBtaW4gIT09IDA7XG4gICAgY29uc3QgZmFsc3lNYXggPSAhbWF4ICYmIG1heCAhPT0gMDtcbiAgICBjb25zdCBfbWluID0gZmFsc3lNaW4gPyBudWxsIDogcGFyc2VJbnQobWluKTtcbiAgICBjb25zdCBfbWF4ID0gZmFsc3lNYXggPyBudWxsIDogcGFyc2VJbnQobWF4KTtcbiAgICByZXR1cm4gRmlsdGVyLnJhbmdlKHRoaXMuX2ZpZWxkLCBfbWluLCBfbWF4LCBmYWxzZSk7XG4gIH1cblxuICAvKipcbiAgICogSGVscGVyIG1ldGhvZCBmb3IgY3JlYXRpbmcgcmFuZ2UgZmlsdGVyIG1ldGFkYXRhXG4gICAqIEByZXR1cm5zIHtGaWx0ZXJNZXRhZGF0YX1cbiAgICovXG4gIF9idWlsZEZpbHRlck1ldGFkYXRhICgpIHtcbiAgICBjb25zdCB7IG1pbiwgbWF4IH0gPSB0aGlzLl9yYW5nZTtcbiAgICBjb25zdCBmYWxzeU1pbiA9ICFtaW4gJiYgbWluICE9PSAwO1xuICAgIGNvbnN0IGZhbHN5TWF4ID0gIW1heCAmJiBtYXggIT09IDA7XG4gICAgaWYgKGZhbHN5TWluICYmIGZhbHN5TWF4KSB7XG4gICAgICByZXR1cm4gbmV3IEZpbHRlck1ldGFkYXRhKHtcbiAgICAgICAgZmllbGROYW1lOiB0aGlzLl90aXRsZVxuICAgICAgfSk7XG4gICAgfVxuICAgIC8vIFRPRE8gYWRkIGNvbmZpZyBvcHRpb24gdG8gcmFuZ2UgZmlsdGVyIGNvbXBvbmVudCBmb3IgZXhjbHVzaXZlIHJhbmdlcy5cbiAgICAvLyBDdXJyZW50bHkgY2FuIG9ubHkgaGF2ZSBpbmNsdXNpdmUgcmFuZ2VzLlxuICAgIGNvbnN0IGlzRXhjbHVzaXZlID0gZmFsc2U7XG4gICAgbGV0IGRpc3BsYXlWYWx1ZTtcbiAgICBpZiAoZmFsc3lNYXgpIHtcbiAgICAgIGRpc3BsYXlWYWx1ZSA9IGlzRXhjbHVzaXZlXG4gICAgICAgID8gYD4gJHttaW59YFxuICAgICAgICA6IGDiiaUgJHttaW59YDtcbiAgICB9IGVsc2UgaWYgKGZhbHN5TWluKSB7XG4gICAgICBkaXNwbGF5VmFsdWUgPSBpc0V4Y2x1c2l2ZVxuICAgICAgICA/IGA8ICR7bWF4fWBcbiAgICAgICAgOiBg4omkICR7bWF4fWA7XG4gICAgfSBlbHNlIGlmIChtaW4gPT09IG1heCkge1xuICAgICAgZGlzcGxheVZhbHVlID0gaXNFeGNsdXNpdmUgPyAnJyA6IG1pbjtcbiAgICB9IGVsc2Uge1xuICAgICAgZGlzcGxheVZhbHVlID0gaXNFeGNsdXNpdmVcbiAgICAgICAgPyBgPiAke21pbn0sIDwgJHttYXh9YFxuICAgICAgICA6IGAke21pbn0gLSAke21heH1gO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IEZpbHRlck1ldGFkYXRhKHtcbiAgICAgIGZpZWxkTmFtZTogdGhpcy5fdGl0bGUsXG4gICAgICBkaXNwbGF5VmFsdWU6IGRpc3BsYXlWYWx1ZVxuICAgIH0pO1xuICB9XG59XG4iLCIvKiogQG1vZHVsZSBEYXRlRmlsdGVyQ29tcG9uZW50ICovXG5cbmltcG9ydCBDb21wb25lbnQgZnJvbSAnLi4vY29tcG9uZW50JztcbmltcG9ydCBGaWx0ZXIgZnJvbSAnLi4vLi4vLi4vY29yZS9tb2RlbHMvZmlsdGVyJztcbmltcG9ydCBET00gZnJvbSAnLi4vLi4vZG9tL2RvbSc7XG5pbXBvcnQgRmlsdGVyTm9kZUZhY3RvcnkgZnJvbSAnLi4vLi4vLi4vY29yZS9maWx0ZXJzL2ZpbHRlcm5vZGVmYWN0b3J5JztcbmltcG9ydCBGaWx0ZXJNZXRhZGF0YSBmcm9tICcuLi8uLi8uLi9jb3JlL2ZpbHRlcnMvZmlsdGVybWV0YWRhdGEnO1xuaW1wb3J0IENvbXBvbmVudFR5cGVzIGZyb20gJy4uLy4uL2NvbXBvbmVudHMvY29tcG9uZW50dHlwZXMnO1xuXG4vKipcbiAqIEEgZmlsdGVyIGZvciBhIHJhbmdlIG9mIGRhdGVzXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIERhdGVSYW5nZUZpbHRlckNvbXBvbmVudCBleHRlbmRzIENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yIChjb25maWcgPSB7fSwgc3lzdGVtQ29uZmlnID0ge30pIHtcbiAgICBzdXBlcihjb25maWcsIHN5c3RlbUNvbmZpZyk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYXBpIGZpZWxkIHRoaXMgZmlsdGVyIGNvbnRyb2xzXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuX2ZpZWxkID0gY29uZmlnLmZpZWxkO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHRpdGxlIHRvIGRpc3BsYXkgZm9yIHRoZSBkYXRlIHJhbmdlXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuX3RpdGxlID0gY29uZmlnLnRpdGxlO1xuXG4gICAgLyoqXG4gICAgICogVGhlIG9wdGlvbmFsIGxhYmVsIHRvIHNob3cgZm9yIHRoZSBtaW4gZGF0ZSBpbnB1dFxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLl9taW5MYWJlbCA9IGNvbmZpZy5taW5MYWJlbCB8fCBudWxsO1xuXG4gICAgLyoqXG4gICAgICogVGhlIG9wdGlvbmFsIGxhYmVsIHRvIHNob3cgZm9yIHRoZSBtYXggZGF0ZSBpbnB1dFxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLl9tYXhMYWJlbCA9IGNvbmZpZy5tYXhMYWJlbCB8fCBudWxsO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGNhbGxiYWNrIHVzZWQgd2hlbiBhIGRhdGUgaXMgY2hhbmdlZFxuICAgICAqIEB0eXBlIHtmdW5jdGlvbn1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuX29uQ2hhbmdlID0gY29uZmlnLm9uQ2hhbmdlIHx8IGZ1bmN0aW9uICgpIHt9O1xuXG4gICAgLyoqXG4gICAgICogSWYgdHJ1ZSwgc3RvcmVzIHRoZSBmaWx0ZXIgdG8gc3RvcmFnZSBvbiBlYWNoIGNoYW5nZVxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5fc3RvcmVPbkNoYW5nZSA9IGNvbmZpZy5zdG9yZU9uQ2hhbmdlID09PSB1bmRlZmluZWQgPyB0cnVlIDogY29uZmlnLnN0b3JlT25DaGFuZ2U7XG5cbiAgICAvKipcbiAgICAgKiBJZiB0cnVlLCB0aGlzIGZpbHRlciByZXByZXNlbnRzIGFuIGV4Y2x1c2l2ZSByYW5nZSwgcmF0aGVyIHRoYW4gYW4gaW5jbHVzaXZlIG9uZVxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5faXNFeGNsdXNpdmUgPSBjb25maWcuaXNFeGNsdXNpdmU7XG5cbiAgICBjb25zdCB0b2RheSA9IG5ldyBEYXRlKCk7XG4gICAgY29uc3QgdG9kYXlTdHJpbmcgPSBgJHt0b2RheS5nZXRGdWxsWWVhcigpfS0ke2Ake3RvZGF5LmdldE1vbnRoKCkgKyAxfWAucGFkU3RhcnQoMiwgJzAnKX0tJHtgJHt0b2RheS5nZXREYXRlKCl9YC5wYWRTdGFydCgyLCAnMCcpfWA7XG4gICAgY29uc3QgbWluRGF0ZSA9IHRoaXMuY29yZS5nbG9iYWxTdG9yYWdlLmdldFN0YXRlKGAke3RoaXMubmFtZX0ubWluYCk7XG4gICAgY29uc3QgbWF4RGF0ZSA9IHRoaXMuY29yZS5nbG9iYWxTdG9yYWdlLmdldFN0YXRlKGAke3RoaXMubmFtZX0ubWF4YCk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgY3VycmVudCBkYXRlIHJhbmdlXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLl9kYXRlID0ge1xuICAgICAgbWluOiBtaW5EYXRlIHx8IGNvbmZpZy5pbml0aWFsTWluIHx8IHRvZGF5U3RyaW5nLFxuICAgICAgbWF4OiBtYXhEYXRlIHx8IGNvbmZpZy5pbml0aWFsTWF4IHx8IHRvZGF5U3RyaW5nXG4gICAgfTtcbiAgfVxuXG4gIHN0YXRpYyBkZWZhdWx0VGVtcGxhdGVOYW1lICgpIHtcbiAgICByZXR1cm4gJ2NvbnRyb2xzL2RhdGUnO1xuICB9XG5cbiAgc3RhdGljIGdldCB0eXBlICgpIHtcbiAgICByZXR1cm4gQ29tcG9uZW50VHlwZXMuREFURV9SQU5HRV9GSUxURVI7XG4gIH1cblxuICBzZXRTdGF0ZSAoZGF0YSkge1xuICAgIHN1cGVyLnNldFN0YXRlKE9iamVjdC5hc3NpZ24oe30sIGRhdGEsIHtcbiAgICAgIG5hbWU6IHRoaXMubmFtZSxcbiAgICAgIHRpdGxlOiB0aGlzLl90aXRsZSxcbiAgICAgIG1pbkxhYmVsOiB0aGlzLl9taW5MYWJlbCxcbiAgICAgIG1heExhYmVsOiB0aGlzLl9tYXhMYWJlbCxcbiAgICAgIGRhdGVNaW46IHRoaXMuX2RhdGUubWluLFxuICAgICAgZGF0ZU1heDogdGhpcy5fZGF0ZS5tYXhcbiAgICB9KSk7XG4gIH1cblxuICBvbkNyZWF0ZSAoKSB7XG4gICAgRE9NLmRlbGVnYXRlKHRoaXMuX2NvbnRhaW5lciwgJy5qcy15ZXh0LWRhdGUnLCAnY2hhbmdlJywgKGV2ZW50KSA9PiB7XG4gICAgICB0aGlzLl91cGRhdGVSYW5nZShldmVudC50YXJnZXQuZGF0YXNldC5rZXksIGV2ZW50LnRhcmdldC52YWx1ZSk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogU2V0IHRoZSBtaW4gZGF0ZSB0byB0aGUgb25lIHByb3ZpZGVkXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBkYXRlIERhdGUgdG8gc2V0IGluIHl5eXktbW0tZGQgc3RyaW5nIGZvcm1hdFxuICAgKi9cbiAgc2V0TWluIChkYXRlKSB7XG4gICAgdGhpcy5fdXBkYXRlUmFuZ2UoJ21pbicsIGRhdGUpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCB0aGUgbWF4IGRhdGUgdG8gdGhlIG9uZSBwcm92aWRlZFxuICAgKiBAcGFyYW0ge3N0cmluZ30gZGF0ZSBEYXRlIHRvIHNldCBpbiB5eXl5LW1tLWRkIHN0cmluZyBmb3JtYXRcbiAgICovXG4gIHNldE1heCAoZGF0ZSkge1xuICAgIHRoaXMuX3VwZGF0ZVJhbmdlKCdtYXgnLCBkYXRlKTtcbiAgfVxuXG4gIF9yZW1vdmVGaWx0ZXJOb2RlICgpIHtcbiAgICB0aGlzLl9kYXRlID0ge1xuICAgICAgbWluOiBudWxsLFxuICAgICAgbWF4OiBudWxsXG4gICAgfTtcbiAgICB0aGlzLnNldFN0YXRlKCk7XG4gICAgdGhpcy5fb25DaGFuZ2UoRmlsdGVyTm9kZUZhY3RvcnkuZnJvbSgpKTtcbiAgICB0aGlzLmNvcmUuY2xlYXJTdGF0aWNGaWx0ZXJOb2RlKHRoaXMubmFtZSk7XG4gICAgdGhpcy5jb3JlLnBlcnNpc3RlbnRTdG9yYWdlLmRlbGV0ZShgJHt0aGlzLm5hbWV9Lm1pbmApO1xuICAgIHRoaXMuY29yZS5wZXJzaXN0ZW50U3RvcmFnZS5kZWxldGUoYCR7dGhpcy5uYW1lfS5tYXhgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoaXMgY29tcG9uZW50J3MgZmlsdGVyIG5vZGUuXG4gICAqIFRoaXMgbWV0aG9kIGlzIGV4cG9zZWQgc28gdGhhdCBjb21wb25lbnRzIGxpa2Uge0BsaW5rIEZpbHRlckJveENvbXBvbmVudH1cbiAgICogY2FuIGFjY2VzcyB0aGVtLlxuICAgKiBAcmV0dXJucyB7RmlsdGVyTm9kZX1cbiAgICovXG4gIGdldEZpbHRlck5vZGUgKCkge1xuICAgIHJldHVybiBGaWx0ZXJOb2RlRmFjdG9yeS5mcm9tKHtcbiAgICAgIGZpbHRlcjogdGhpcy5fYnVpbGRGaWx0ZXIoKSxcbiAgICAgIG1ldGFkYXRhOiB0aGlzLl9idWlsZEZpbHRlck1ldGFkYXRhKCksXG4gICAgICByZW1vdmU6ICgpID0+IHRoaXMuX3JlbW92ZUZpbHRlck5vZGUoKVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZXMgdGhlIGN1cnJlbnQgc3RhdGUgb2YgdGhlIGRhdGUgcmFuZ2VcbiAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IGZvciB0aGUgZGF0ZSB2YWx1ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWUgVGhlIHN0cmluZyBkYXRlIHZhbHVlXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfdXBkYXRlUmFuZ2UgKGtleSwgdmFsdWUpIHtcbiAgICB0aGlzLl9kYXRlID0gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5fZGF0ZSwgeyBba2V5XTogdmFsdWUgfSk7XG4gICAgdGhpcy5zZXRTdGF0ZSgpO1xuXG4gICAgY29uc3QgZmlsdGVyTm9kZSA9IHRoaXMuZ2V0RmlsdGVyTm9kZSgpO1xuICAgIGlmICh0aGlzLl9zdG9yZU9uQ2hhbmdlKSB7XG4gICAgICB0aGlzLmNvcmUuc2V0U3RhdGljRmlsdGVyTm9kZXModGhpcy5uYW1lLCBmaWx0ZXJOb2RlKTtcbiAgICB9XG4gICAgdGhpcy5jb3JlLnBlcnNpc3RlbnRTdG9yYWdlLnNldChgJHt0aGlzLm5hbWV9Lm1pbmAsIHRoaXMuX2RhdGUubWluKTtcbiAgICB0aGlzLmNvcmUucGVyc2lzdGVudFN0b3JhZ2Uuc2V0KGAke3RoaXMubmFtZX0ubWF4YCwgdGhpcy5fZGF0ZS5tYXgpO1xuXG4gICAgdGhpcy5fb25DaGFuZ2UoZmlsdGVyTm9kZSk7XG4gIH1cblxuICAvKipcbiAgICogQ29uc3RydWN0IGFuIGFwaSBmaWx0ZXIgd2l0aCB0aGUgY3VycmVudCBkYXRlIHN0YXRlXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfYnVpbGRGaWx0ZXIgKCkge1xuICAgIHJldHVybiBGaWx0ZXIucmFuZ2UodGhpcy5fZmllbGQsIHRoaXMuX2RhdGUubWluLCB0aGlzLl9kYXRlLm1heCwgdGhpcy5faXNFeGNsdXNpdmUpO1xuICB9XG5cbiAgLyoqXG4gICAqIEhlbHBlciBtZXRob2QgZm9yIGNyZWF0aW5nIGEgZGF0ZSByYW5nZSBmaWx0ZXIgbWV0YWRhdGFcbiAgICogQHJldHVybnMge0ZpbHRlck1ldGFkYXRhfVxuICAgKi9cbiAgX2J1aWxkRmlsdGVyTWV0YWRhdGEgKCkge1xuICAgIGNvbnN0IHsgbWluLCBtYXggfSA9IHRoaXMuX2RhdGU7XG5cbiAgICBpZiAoIW1pbiAmJiAhbWF4KSB7XG4gICAgICByZXR1cm4gbmV3IEZpbHRlck1ldGFkYXRhKHtcbiAgICAgICAgZmllbGROYW1lOiB0aGlzLl90aXRsZVxuICAgICAgfSk7XG4gICAgfVxuICAgIGxldCBkaXNwbGF5VmFsdWU7XG4gICAgaWYgKCFtYXgpIHtcbiAgICAgIGRpc3BsYXlWYWx1ZSA9IHRoaXMuX2lzRXhjbHVzaXZlXG4gICAgICAgID8gYEFmdGVyICR7bWlufWBcbiAgICAgICAgOiBgJHttaW59IG9yIGxhdGVyYDtcbiAgICB9IGVsc2UgaWYgKCFtaW4pIHtcbiAgICAgIGRpc3BsYXlWYWx1ZSA9IHRoaXMuX2lzRXhjbHVzaXZlXG4gICAgICAgID8gYEJlZm9yZSAke21heH1gXG4gICAgICAgIDogYCR7bWF4fSBhbmQgZWFybGllcmA7XG4gICAgfSBlbHNlIGlmIChtaW4gPT09IG1heCkge1xuICAgICAgZGlzcGxheVZhbHVlID0gdGhpcy5faXNFeGNsdXNpdmUgPyAnJyA6IG1pbjtcbiAgICB9IGVsc2Uge1xuICAgICAgZGlzcGxheVZhbHVlID0gYCR7bWlufSAtICR7bWF4fWA7XG4gICAgfVxuICAgIHJldHVybiBuZXcgRmlsdGVyTWV0YWRhdGEoe1xuICAgICAgZmllbGROYW1lOiB0aGlzLl90aXRsZSxcbiAgICAgIGRpc3BsYXlWYWx1ZTogZGlzcGxheVZhbHVlXG4gICAgfSk7XG4gIH1cbn1cbiIsIi8qKiBAbW9kdWxlIEZhY2V0c0NvbXBvbmVudCAqL1xuXG5pbXBvcnQgQ29tcG9uZW50IGZyb20gJy4uL2NvbXBvbmVudCc7XG5pbXBvcnQgU3RvcmFnZUtleXMgZnJvbSAnLi4vLi4vLi4vY29yZS9zdG9yYWdlL3N0b3JhZ2VrZXlzJztcbmltcG9ydCBSZXN1bHRzQ29udGV4dCBmcm9tICcuLi8uLi8uLi9jb3JlL3N0b3JhZ2UvcmVzdWx0c2NvbnRleHQnO1xuaW1wb3J0IENvbXBvbmVudFR5cGVzIGZyb20gJy4uLy4uL2NvbXBvbmVudHMvY29tcG9uZW50dHlwZXMnO1xuXG5jbGFzcyBGYWNldHNDb25maWcge1xuICBjb25zdHJ1Y3RvciAoY29uZmlnKSB7XG4gICAgLyoqXG4gICAgICogVGhlIHRpdGxlIHRvIGRpc3BsYXkgYWJvdmUgdGhlIGNvbnRyb2xzXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLnRpdGxlID0gY29uZmlnLnRpdGxlIHx8ICdGaWx0ZXJzJztcblxuICAgIC8qKlxuICAgICAqIElmIHRydWUsIGRpc3BsYXkgdGhlIG51bWJlciBvZiByZXN1bHRzIG5leHQgdG8gZWFjaCBmYWNldFxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqL1xuICAgIHRoaXMuc2hvd0NvdW50ID0gY29uZmlnLnNob3dDb3VudCA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IGNvbmZpZy5zaG93Q291bnQ7XG5cbiAgICAvKipcbiAgICAgKiBJZiB0cnVlLCB0cmlnZ2VyIGEgc2VhcmNoIG9uIGVhY2ggY2hhbmdlIHRvIGEgZmlsdGVyXG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICovXG4gICAgdGhpcy5zZWFyY2hPbkNoYW5nZSA9IGNvbmZpZy5zZWFyY2hPbkNoYW5nZSB8fCBmYWxzZTtcblxuICAgIC8qKlxuICAgICAqIElmIHRydWUsIHNob3cgYSBidXR0b24gdG8gcmVzZXQgZm9yIGVhY2ggZmFjZXQgZ3JvdXBcbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICB0aGlzLnJlc2V0RmFjZXQgPSBjb25maWcucmVzZXRGYWNldCB8fCBmYWxzZTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBsYWJlbCB0byBzaG93IGZvciB0aGUgcmVzZXQgYnV0dG9uXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLnJlc2V0RmFjZXRMYWJlbCA9IGNvbmZpZy5yZXNldEZhY2V0TGFiZWwgfHwgJ3Jlc2V0JztcblxuICAgIC8qKlxuICAgICAqIElmIHRydWUsIHNob3cgYSBcInJlc2V0IGFsbFwiIGJ1dHRvbiB0byByZXNldCBhbGwgZmFjZXRzXG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICovXG4gICAgdGhpcy5yZXNldEZhY2V0cyA9IGNvbmZpZy5yZXNldEZhY2V0cztcblxuICAgIC8qKlxuICAgICAqIFRoZSBsYWJlbCB0byBzaG93IGZvciB0aGUgXCJyZXNldCBhbGxcIiBidXR0b25cbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMucmVzZXRGYWNldHNMYWJlbCA9IGNvbmZpZy5yZXNldEZhY2V0c0xhYmVsIHx8ICdyZXNldCBhbGwnO1xuXG4gICAgLyoqXG4gICAgICogVGhlIG1heCBudW1iZXIgb2YgZmFjZXRzIHRvIHNob3cgYmVmb3JlIGRpc3BsYXlpbmcgXCJzaG93IG1vcmVcIi9cInNob3cgbGVzc1wiXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLnNob3dNb3JlTGltaXQgPSBjb25maWcuc2hvd01vcmVMaW1pdCB8fCA1O1xuXG4gICAgLyoqXG4gICAgICogVGhlIGxhYmVsIHRvIHNob3cgZm9yIGRpc3BsYXlpbmcgbW9yZSBmYWNldHNcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMuc2hvd01vcmVMYWJlbCA9IGNvbmZpZy5zaG93TW9yZUxhYmVsIHx8ICdzaG93IG1vcmUnO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGxhYmVsIHRvIHNob3cgZm9yIGRpc3BsYXlpbmcgbGVzcyBmYWNldHNcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMuc2hvd0xlc3NMYWJlbCA9IGNvbmZpZy5zaG93TGVzc0xhYmVsIHx8ICdzaG93IGxlc3MnO1xuXG4gICAgLyoqXG4gICAgICogSWYgdHJ1ZSwgZW5hYmxlIGhpZGluZyBleGNlc3MgZmFjZXRzIGluIGVhY2ggZ3JvdXAgd2l0aCBhIFwic2hvdyBtb3JlXCIvXCJzaG93IGxlc3NcIiBidXR0b25cbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICB0aGlzLnNob3dNb3JlID0gY29uZmlnLnNob3dNb3JlID09PSB1bmRlZmluZWQgPyB0cnVlIDogY29uZmlnLnNob3dNb3JlO1xuXG4gICAgLyoqXG4gICAgICogSWYgdHJ1ZSwgYWxsb3cgZXhwYW5kaW5nIGFuZCBjb2xsYXBzaW5nIGVhY2ggZ3JvdXAgb2YgZmFjZXRzXG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICovXG4gICAgdGhpcy5leHBhbmQgPSBjb25maWcuZXhwYW5kID09PSB1bmRlZmluZWQgPyB0cnVlIDogY29uZmlnLmV4cGFuZDtcblxuICAgIC8qKlxuICAgICAqIElmIHRydWUsIGRpc3BsYXkgdGhlIG51bWJlciBvZiBjdXJyZW50bHkgYXBwbGllZCBmaWx0ZXJzIHdoZW4gY29sbGFwc2VkXG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICovXG4gICAgdGhpcy5zaG93TnVtYmVyQXBwbGllZCA9IGNvbmZpZy5zaG93TnVtYmVyQXBwbGllZCA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IGNvbmZpZy5zaG93TnVtYmVyQXBwbGllZDtcblxuICAgIC8qKlxuICAgICAqIFRleHQgdG8gZGlzcGxheSBvbiB0aGUgYXBwbHkgYnV0dG9uXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLmFwcGx5TGFiZWwgPSBjb25maWcuYXBwbHlMYWJlbCB8fCAnYXBwbHknO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGNvbnRyb2xzIHRvIHVzZSBmb3IgZWFjaCBmaWVsZC4gRWFjaCB0eXBlIG9mIGZpbHRlciBoYXMgYSBkZWZhdWx0XG4gICAgICogJGVxIDogbXVsdGlvcHRpb24gKGNoZWNrYm94KVxuICAgICAqXG4gICAgICogREVQUkVDQVRFRDogcHJlZmVyIHB1dHRpbmcgdGhpcyBpbiBjb25maWcuZmllbGRzXG4gICAgICpcbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAqL1xuICAgIHRoaXMuZmllbGRDb250cm9scyA9IGNvbmZpZy5maWVsZENvbnRyb2xzIHx8IHt9O1xuXG4gICAgLyoqXG4gICAgICogVGhlIHBsYWNlaG9sZGVyIHRleHQgdXNlZCBmb3IgdGhlIGZpbHRlciBvcHRpb24gc2VhcmNoIGlucHV0XG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLnBsYWNlaG9sZGVyVGV4dCA9IGNvbmZpZy5wbGFjZWhvbGRlclRleHQgfHwgJ1NlYXJjaCBoZXJlLi4uJztcblxuICAgIC8qKlxuICAgICAqIElmIHRydWUsIGRpc3BsYXkgdGhlIGZpbHRlciBvcHRpb24gc2VhcmNoIGlucHV0XG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICovXG4gICAgdGhpcy5zZWFyY2hhYmxlID0gY29uZmlnLnNlYXJjaGFibGUgfHwgZmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgZm9ybSBsYWJlbCB0ZXh0IGZvciB0aGUgc2VhcmNoIGlucHV0XG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICovXG4gICAgdGhpcy5zZWFyY2hMYWJlbFRleHQgPSBjb25maWcuc2VhcmNoTGFiZWxUZXh0IHx8ICdTZWFyY2ggZm9yIGEgZmlsdGVyIG9wdGlvbic7XG5cbiAgICAvKipcbiAgICAgKiBBbiBvYmplY3QgdGhhdCBtYXBzIGZpZWxkIEFQSSBuYW1lcyB0byB0aGVpciBmaWx0ZXIgb3B0aW9ucyBvdmVycmlkZXMsXG4gICAgICogd2hpY2ggaGF2ZSB0aGUgc2FtZSBrZXlzIGFzIHRoZSBjb25maWcgb3B0aW9ucyBpbiBGaWx0ZXJPcHRpb25zIGNvbXBvbmVudC5cbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAqL1xuICAgIHRoaXMuZmllbGRzID0gY29uZmlnLmZpZWxkcyB8fCB7fTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBzZWxlY3RvciBvZiB0aGUgYXBwbHkgYnV0dG9uXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuYXBwbHlCdXR0b25TZWxlY3RvciA9IGNvbmZpZy5hcHBseUJ1dHRvblNlbGVjdG9yIHx8IG51bGw7XG5cbiAgICB0aGlzLnZhbGlkYXRlKCk7XG4gIH1cblxuICB2YWxpZGF0ZSAoKSB7XG4gIH1cbn1cblxuLyoqXG4gKiBEaXNwbGF5cyBhIHNldCBvZiBkeW5hbWljIGZpbHRlcnMgcmV0dXJuZWQgZnJvbSB0aGUgYmFja2VuZFxuICogQGV4dGVuZHMgQ29tcG9uZW50XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEZhY2V0c0NvbXBvbmVudCBleHRlbmRzIENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yIChjb25maWcgPSB7fSwgc3lzdGVtQ29uZmlnID0ge30pIHtcbiAgICBzdXBlcihjb25maWcsIHN5c3RlbUNvbmZpZyk7XG5cbiAgICB0aGlzLmNvbmZpZyA9IG5ldyBGYWNldHNDb25maWcoY29uZmlnKTtcblxuICAgIC8qKlxuICAgICAqIFRoZSB2ZXJ0aWNhbCBrZXkgZm9yIHRoZSBzZWFyY2hcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5fdmVydGljYWxLZXkgPSBjb25maWcudmVydGljYWxLZXk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgc2VsZWN0b3Igb2YgdGhlIGFwcGx5IGJ1dHRvblxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLl9hcHBseUJ1dHRvblNlbGVjdG9yID0gY29uZmlnLmFwcGx5QnV0dG9uU2VsZWN0b3IgfHwgbnVsbDtcblxuICAgIC8qKlxuICAgICAqIEFuIGludGVybmFsIHJlZmVyZW5jZSBmb3IgdGhlIGRhdGEgc3RvcmFnZSB0byBsaXN0ZW4gZm9yIHVwZGF0ZXMgZnJvbSB0aGUgc2VydmVyXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLm1vZHVsZUlkID0gU3RvcmFnZUtleXMuRFlOQU1JQ19GSUxURVJTO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGZpbHRlciBib3ggdGhhdCBkaXNwbGF5cyB0aGUgZHluYW1pYyBmaWx0ZXJzXG4gICAgICogQHR5cGUge0ZpbHRlckJveENvbXBvbmVudH1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuX2ZpbHRlcmJveCA9IG51bGw7XG4gIH1cblxuICBzdGF0aWMgZ2V0IHR5cGUgKCkge1xuICAgIHJldHVybiBDb21wb25lbnRUeXBlcy5GQUNFVFM7XG4gIH1cblxuICAvKipcbiAgICogVGhlIHRlbXBsYXRlIHRvIHJlbmRlclxuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHN0YXRpYyBkZWZhdWx0VGVtcGxhdGVOYW1lICgpIHtcbiAgICByZXR1cm4gJ2ZpbHRlcnMvZmFjZXRzJztcbiAgfVxuXG4gIHNldFN0YXRlIChkYXRhKSB7XG4gICAgcmV0dXJuIHN1cGVyLnNldFN0YXRlKHtcbiAgICAgIC4uLmRhdGEsXG4gICAgICBpc05vUmVzdWx0czogZGF0YS5yZXN1bHRzQ29udGV4dCA9PT0gUmVzdWx0c0NvbnRleHQuTk9fUkVTVUxUU1xuICAgIH0pO1xuICB9XG5cbiAgcmVtb3ZlICgpIHtcbiAgICBpZiAodGhpcy5fZmlsdGVyYm94KSB7XG4gICAgICB0aGlzLl9maWx0ZXJib3gucmVtb3ZlKCk7XG4gICAgfVxuICAgIHN1cGVyLnJlbW92ZSgpO1xuICB9XG5cbiAgb25Nb3VudCAoKSB7XG4gICAgdGhpcy5jb3JlLmVuYWJsZUR5bmFtaWNGaWx0ZXJzKCk7XG5cbiAgICBpZiAodGhpcy5fZmlsdGVyYm94KSB7XG4gICAgICB0aGlzLl9maWx0ZXJib3gucmVtb3ZlKCk7XG4gICAgfVxuXG4gICAgbGV0IHsgZmlsdGVycywgcmVzdWx0c0NvbnRleHQgfSA9IHRoaXMuX3N0YXRlLmdldCgpO1xuXG4gICAgaWYgKCFmaWx0ZXJzIHx8IHJlc3VsdHNDb250ZXh0ID09PSBSZXN1bHRzQ29udGV4dC5OT19SRVNVTFRTKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZmlsdGVycyA9IGZpbHRlcnMubWFwKGYgPT4ge1xuICAgICAgY29uc3QgZmllbGRPdmVycmlkZXMgPSB0aGlzLmNvbmZpZy5maWVsZHNbZi5maWVsZElkXSB8fCB7fTtcbiAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBmLCB7XG4gICAgICAgIHR5cGU6ICdGaWx0ZXJPcHRpb25zJyxcbiAgICAgICAgY29udHJvbDogdGhpcy5jb25maWcuZmllbGRDb250cm9sc1tmLmZpZWxkSWRdIHx8ICdtdWx0aW9wdGlvbicsXG4gICAgICAgIHNlYXJjaGFibGU6IHRoaXMuY29uZmlnLnNlYXJjaGFibGUsXG4gICAgICAgIHNlYXJjaExhYmVsVGV4dDogdGhpcy5jb25maWcuc2VhcmNoTGFiZWxUZXh0LFxuICAgICAgICBwbGFjZWhvbGRlclRleHQ6IHRoaXMuY29uZmlnLnBsYWNlaG9sZGVyVGV4dCxcbiAgICAgICAgc2hvd0V4cGFuZDogZmllbGRPdmVycmlkZXMuZXhwYW5kID09PSB1bmRlZmluZWQgPyB0aGlzLmNvbmZpZy5leHBhbmQgOiBmaWVsZE92ZXJyaWRlcy5leHBhbmQsXG4gICAgICAgIC4uLmZpZWxkT3ZlcnJpZGVzXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIC8vIFRPRE86IHBhc3MgYW4gYXBwbHkoKSBtZXRob2QgdG8gRmlsdGVyQm94LCB0aGF0IHdpbGwgb3ZlcnJpZGUgaXRzIGRlZmF1bHQgYmVoYXZpb3IsXG4gICAgLy8gYW5kIHJlbW92ZSB0aGUgaXNEeW5hbWljIGNvbmZpZyBvcHRpb24uXG4gICAgdGhpcy5fZmlsdGVyYm94ID0gdGhpcy5jb21wb25lbnRNYW5hZ2VyLmNyZWF0ZShcbiAgICAgICdGaWx0ZXJCb3gnLFxuICAgICAgT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5jb25maWcsIHtcbiAgICAgICAgcGFyZW50Q29udGFpbmVyOiB0aGlzLl9jb250YWluZXIsXG4gICAgICAgIG5hbWU6IGAke3RoaXMubmFtZX0uZmlsdGVyYm94YCxcbiAgICAgICAgY29udGFpbmVyOiAnLmpzLXl4dC1GYWNldHMnLFxuICAgICAgICB2ZXJ0aWNhbEtleTogdGhpcy5fdmVydGljYWxLZXksXG4gICAgICAgIHJlc2V0RmlsdGVyOiB0aGlzLmNvbmZpZy5yZXNldEZhY2V0LFxuICAgICAgICByZXNldEZpbHRlcnM6IHRoaXMuY29uZmlnLnJlc2V0RmFjZXRzLFxuICAgICAgICByZXNldEZpbHRlckxhYmVsOiB0aGlzLmNvbmZpZy5yZXNldEZhY2V0TGFiZWwsXG4gICAgICAgIHJlc2V0RmlsdGVyc0xhYmVsOiB0aGlzLmNvbmZpZy5yZXNldEZhY2V0c0xhYmVsLFxuICAgICAgICBpc0R5bmFtaWM6IHRydWUsXG4gICAgICAgIGZpbHRlcnNcbiAgICAgIH0pXG4gICAgKTtcblxuICAgIHRoaXMuX2ZpbHRlcmJveC5tb3VudCgpO1xuICB9XG59XG4iLCIvKiogQG1vZHVsZSBHZW9Mb2NhdGlvbkNvbXBvbmVudCAqL1xuXG5pbXBvcnQgQ29tcG9uZW50IGZyb20gJy4uL2NvbXBvbmVudCc7XG5pbXBvcnQgRE9NIGZyb20gJy4uLy4uL2RvbS9kb20nO1xuaW1wb3J0IEZpbHRlciBmcm9tICcuLi8uLi8uLi9jb3JlL21vZGVscy9maWx0ZXInO1xuaW1wb3J0IFN0b3JhZ2VLZXlzIGZyb20gJy4uLy4uLy4uL2NvcmUvc3RvcmFnZS9zdG9yYWdla2V5cyc7XG5pbXBvcnQgYnVpbGRTZWFyY2hQYXJhbWV0ZXJzIGZyb20gJy4uLy4uL3Rvb2xzL3NlYXJjaHBhcmFtc3BhcnNlcic7XG5pbXBvcnQgRmlsdGVyTm9kZUZhY3RvcnkgZnJvbSAnLi4vLi4vLi4vY29yZS9maWx0ZXJzL2ZpbHRlcm5vZGVmYWN0b3J5JztcbmltcG9ydCBDb21wb25lbnRUeXBlcyBmcm9tICcuLi8uLi9jb21wb25lbnRzL2NvbXBvbmVudHR5cGVzJztcblxuY29uc3QgTUVURVJTX1BFUl9NSUxFID0gMTYwOS4zNDQ7XG5cbmNvbnN0IERFRkFVTFRfQ09ORklHID0ge1xuICAvKipcbiAgICogVGhlIHJhZGl1cywgaW4gbWlsZXMsIGFyb3VuZCB0aGUgdXNlcidzIGxvY2F0aW9uIHRvIGZpbmQgcmVzdWx0cy5cbiAgICogSWYgbG9jYXRpb24gYWNjdXJhY3kgaXMgbG93LCBhIGxhcmdlciByYWRpdXMgbWF5IGJlIHVzZWQgYXV0b21hdGljYWxseVxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi9cbiAgcmFkaXVzOiA1MCxcblxuICAvKipcbiAgICogVGhlIHZlcnRpY2FsIGtleSB0byB1c2VcbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gIHZlcnRpY2FsS2V5OiBudWxsLFxuXG4gIC8qKlxuICAgKiBJZiB0cnVlLCBzdWJtaXRzIGEgc2VhcmNoIHdoZW4gdGhlIHZhbHVlIGlzIGNoYW5nZWRcbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqL1xuICBzZWFyY2hPbkNoYW5nZTogZmFsc2UsXG5cbiAgLyoqXG4gICAqIFRoZSB0aXRsZSB0byBkaXNwbGF5XG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuICB0aXRsZTogJ0xvY2F0aW9uJyxcblxuICAvKipcbiAgICogVGhlIGxhYmVsIHRvIGRpc3BsYXlcbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gIGxhYmVsOiAnTG9jYXRpb24nLFxuXG4gIC8qKlxuICAgKiBUaGUgaWNvbiB1cmwgdG8gc2hvdyBpbiB0aGUgZ2VvIGJ1dHRvblxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKi9cbiAgZ2VvQnV0dG9uSWNvbjogJycsXG5cbiAgLyoqXG4gICAqIFRoZSBhbHQgdGV4dCB0byBpbmNsdWRlIHdpdGggdGhlIGdlbyBidXR0b24gaWNvblxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKi9cbiAgZ2VvQnV0dG9uSWNvbkFsdFRleHQ6ICdVc2UgTXkgTG9jYXRpb24nLFxuXG4gIC8qKlxuICAgKiBUaGUgdGV4dCB0byBzaG93IGluIHRoZSBnZW8gYnV0dG9uXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuICBnZW9CdXR0b25UZXh0OiAnVXNlIE15IExvY2F0aW9uJyxcblxuICAvKipcbiAgICogVGhlIHRleHQgdG8gc2hvdyB3aGVuIGdlb2xvY2F0aW9uIGlzIGVuYWJsZWRcbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gIGVuYWJsZWRUZXh0OiAnQ3VycmVudCBMb2NhdGlvbicsXG5cbiAgLyoqXG4gICAqIFRoZSB0ZXh0IHRvIHNob3cgd2hlbiBsb2FkaW5nIHRoZSB1c2VyJ3MgbG9jYXRpb25cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gIGxvYWRpbmdUZXh0OiAnRmluZGluZyBZb3VyIExvY2F0aW9uLi4uJyxcblxuICAvKipcbiAgICogVGhlIHRleHQgdG8gc2hvdyBpZiB0aGUgdXNlcidzIGxvY2F0aW9uIGNhbm5vdCBiZSBmb3VuZFxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKi9cbiAgZXJyb3JUZXh0OiAnQ291bGQgTm90IEZpbmQgWW91ciBMb2NhdGlvbicsXG5cbiAgLyoqXG4gICAqIFRoZSBDU1Mgc2VsZWN0b3Igb2YgdGhlIHRvZ2dsZSBidXR0b25cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gIGJ1dHRvblNlbGVjdG9yOiAnLmpzLXl4dC1HZW9Mb2NhdGlvbkZpbHRlci1idXR0b24nLFxuXG4gIC8qKlxuICAgKiBUaGUgQ1NTIHNlbGVjdG9yIG9mIHRoZSBxdWVyeSBpbnB1dFxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKi9cbiAgaW5wdXRTZWxlY3RvcjogJy5qcy15eHQtR2VvTG9jYXRpb25GaWx0ZXItaW5wdXQnXG59O1xuXG4vKipcbiAqIFJlbmRlcnMgYSBidXR0b24gdGhhdCB3aGVuIGNsaWNrZWQgYWRkcyBhIHN0YXRpYyBmaWx0ZXIgcmVwcmVzZW50aW5nIHRoZSB1c2VyJ3MgbG9jYXRpb25cbiAqIEBleHRlbmRzIENvbXBvbmVudFxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBHZW9Mb2NhdGlvbkNvbXBvbmVudCBleHRlbmRzIENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yIChjb25maWcgPSB7fSwgc3lzdGVtQ29uZmlnID0ge30pIHtcbiAgICBzdXBlcih7IC4uLkRFRkFVTFRfQ09ORklHLCAuLi5jb25maWcgfSwgc3lzdGVtQ29uZmlnKTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBxdWVyeSBzdHJpbmcgdG8gdXNlIGZvciB0aGUgaW5wdXQgYm94LCBwcm92aWRlZCB0byB0ZW1wbGF0ZSBmb3IgcmVuZGVyaW5nLlxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgdGhpcy5xdWVyeSA9IHRoaXMuY29yZS5nbG9iYWxTdG9yYWdlLmdldFN0YXRlKGAke1N0b3JhZ2VLZXlzLlFVRVJZfS4ke3RoaXMubmFtZX1gKSB8fCAnJztcbiAgICB0aGlzLmNvcmUuZ2xvYmFsU3RvcmFnZS5vbigndXBkYXRlJywgYCR7U3RvcmFnZUtleXMuUVVFUll9LiR7dGhpcy5uYW1lfWAsIHEgPT4ge1xuICAgICAgdGhpcy5xdWVyeSA9IHE7XG4gICAgICB0aGlzLnNldFN0YXRlKCk7XG4gICAgfSk7XG5cbiAgICB0aGlzLnNlYXJjaFBhcmFtZXRlcnMgPSBidWlsZFNlYXJjaFBhcmFtZXRlcnMoY29uZmlnLnNlYXJjaFBhcmFtZXRlcnMpO1xuXG4gICAgLyoqXG4gICAgICogT3B0aW9ucyB0byBwYXNzIHRvIHRoZSBnZW9sb2NhdGlvbiBhcGkuXG4gICAgICogQHR5cGUge09iamVjdH1cbiAgICAgKi9cbiAgICB0aGlzLl9nZW9sb2NhdGlvbk9wdGlvbnMgPSB7XG4gICAgICBlbmFibGVIaWdoQWNjdXJhY3k6IGZhbHNlLFxuICAgICAgdGltZW91dDogNjAwMCxcbiAgICAgIG1heGltdW1BZ2U6IDMwMDAwMCxcbiAgICAgIC4uLmNvbmZpZy5nZW9sb2NhdGlvbk9wdGlvbnNcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogT3B0aW9ucyBmb3IgdGhlIGdlb2xvY2F0aW9uIHRpbWVvdXQgYWxlcnQuXG4gICAgICogQHR5cGUge09iamVjdH1cbiAgICAgKi9cbiAgICB0aGlzLl9nZW9sb2NhdGlvblRpbWVvdXRBbGVydCA9IHtcbiAgICAgIGVuYWJsZWQ6IGZhbHNlLFxuICAgICAgbWVzc2FnZTogJ1dlIGFyZSB1bmFibGUgdG8gZGV0ZXJtaW5lIHlvdXIgbG9jYXRpb24nLFxuICAgICAgLi4uY29uZmlnLmdlb2xvY2F0aW9uVGltZW91dEFsZXJ0XG4gICAgfTtcbiAgfVxuXG4gIHN0YXRpYyBnZXQgdHlwZSAoKSB7XG4gICAgcmV0dXJuIENvbXBvbmVudFR5cGVzLkdFT0xPQ0FUSU9OX0ZJTFRFUjtcbiAgfVxuXG4gIHN0YXRpYyBkZWZhdWx0VGVtcGxhdGVOYW1lICgpIHtcbiAgICByZXR1cm4gJ2NvbnRyb2xzL2dlb2xvY2F0aW9uJztcbiAgfVxuXG4gIHNldFN0YXRlIChkYXRhID0ge30pIHtcbiAgICBsZXQgcGxhY2Vob2xkZXIgPSAnJztcbiAgICBpZiAodGhpcy5fZW5hYmxlZCkge1xuICAgICAgcGxhY2Vob2xkZXIgPSB0aGlzLl9jb25maWcuZW5hYmxlZFRleHQ7XG4gICAgfVxuICAgIGlmIChkYXRhLmdlb0xvYWRpbmcpIHtcbiAgICAgIHBsYWNlaG9sZGVyID0gdGhpcy5fY29uZmlnLmxvYWRpbmdUZXh0O1xuICAgIH1cbiAgICBpZiAoZGF0YS5nZW9FcnJvcikge1xuICAgICAgcGxhY2Vob2xkZXIgPSB0aGlzLl9jb25maWcuZXJyb3JUZXh0O1xuICAgIH1cbiAgICBzdXBlci5zZXRTdGF0ZSh7XG4gICAgICAuLi5kYXRhLFxuICAgICAgdGl0bGU6IHRoaXMuX2NvbmZpZy50aXRsZSxcbiAgICAgIGdlb0VuYWJsZWQ6IHRoaXMuX2VuYWJsZWQsXG4gICAgICBxdWVyeTogdGhpcy5xdWVyeSxcbiAgICAgIGxhYmVsVGV4dDogdGhpcy5fY29uZmlnLmxhYmVsLFxuICAgICAgZW5hYmxlZFRleHQ6IHRoaXMuX2NvbmZpZy5lbmFibGVkVGV4dCxcbiAgICAgIGxvYWRpbmdUZXh0OiB0aGlzLl9jb25maWcubG9hZGluZ1RleHQsXG4gICAgICBlcnJvclRleHQ6IHRoaXMuX2NvbmZpZy5lcnJvclRleHQsXG4gICAgICBnZW9CdXR0b25JY29uOiB0aGlzLl9jb25maWcuZ2VvQnV0dG9uSWNvbixcbiAgICAgIGdlb1ZhbHVlOiB0aGlzLl9lbmFibGVkIHx8IGRhdGEuZ2VvTG9hZGluZyB8fCBkYXRhLmdlb0Vycm9yID8gJycgOiB0aGlzLnF1ZXJ5LFxuICAgICAgZ2VvUGxhY2Vob2xkZXI6IHBsYWNlaG9sZGVyLFxuICAgICAgZ2VvQnV0dG9uVGV4dDogdGhpcy5fY29uZmlnLmdlb0J1dHRvblRleHRcbiAgICB9KTtcbiAgfVxuXG4gIG9uTW91bnQgKCkge1xuICAgIGlmICh0aGlzLl9hdXRvY29tcGxldGUpIHtcbiAgICAgIHRoaXMuX2F1dG9jb21wbGV0ZS5yZW1vdmUoKTtcbiAgICB9XG5cbiAgICB0aGlzLl9pbml0QXV0b0NvbXBsZXRlKHRoaXMuX2NvbmZpZy5pbnB1dFNlbGVjdG9yKTtcbiAgICBET00ub24oXG4gICAgICBET00ucXVlcnkodGhpcy5fY29udGFpbmVyLCB0aGlzLl9jb25maWcuYnV0dG9uU2VsZWN0b3IpLFxuICAgICAgJ2NsaWNrJyxcbiAgICAgICgpID0+IHRoaXMuX3RvZ2dsZUdlb0ZpbHRlcigpXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIGhlbHBlciBtZXRob2QgdG8gd2lyZSB1cCBvdXIgYXV0byBjb21wbGV0ZSBvbiBhbiBpbnB1dCBzZWxlY3RvclxuICAgKiBAcGFyYW0ge3N0cmluZ30gaW5wdXRTZWxlY3RvciBDU1Mgc2VsZWN0b3IgdG8gYmluZCBvdXIgYXV0byBjb21wbGV0ZSBjb21wb25lbnQgdG9cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9pbml0QXV0b0NvbXBsZXRlIChpbnB1dFNlbGVjdG9yKSB7XG4gICAgaWYgKHRoaXMuX2F1dG9jb21wbGV0ZSkge1xuICAgICAgdGhpcy5fYXV0b2NvbXBsZXRlLnJlbW92ZSgpO1xuICAgIH1cblxuICAgIHRoaXMuX2F1dG9jb21wbGV0ZSA9IHRoaXMuY29tcG9uZW50TWFuYWdlci5jcmVhdGUoJ0F1dG9Db21wbGV0ZScsIHtcbiAgICAgIHBhcmVudENvbnRhaW5lcjogdGhpcy5fY29udGFpbmVyLFxuICAgICAgbmFtZTogYCR7dGhpcy5uYW1lfS5hdXRvY29tcGxldGVgLFxuICAgICAgaXNGaWx0ZXJTZWFyY2g6IHRydWUsXG4gICAgICBjb250YWluZXI6ICcuanMteXh0LUdlb0xvY2F0aW9uRmlsdGVyLWF1dG9jb21wbGV0ZScsXG4gICAgICBvcmlnaW5hbFF1ZXJ5OiB0aGlzLnF1ZXJ5LFxuICAgICAgaW5wdXRFbDogaW5wdXRTZWxlY3RvcixcbiAgICAgIHZlcnRpY2FsS2V5OiB0aGlzLl9jb25maWcudmVydGljYWxLZXksXG4gICAgICBzZWFyY2hQYXJhbWV0ZXJzOiB0aGlzLnNlYXJjaFBhcmFtZXRlcnMsXG4gICAgICBvblN1Ym1pdDogKHF1ZXJ5LCBmaWx0ZXIpID0+IHRoaXMuX2hhbmRsZVN1Ym1pdChxdWVyeSwgZmlsdGVyKVxuICAgIH0pO1xuICB9XG5cbiAgX2hhbmRsZVN1Ym1pdCAocXVlcnksIGZpbHRlcikge1xuICAgIHRoaXMucXVlcnkgPSBxdWVyeTtcbiAgICB0aGlzLl9zYXZlRGF0YVRvU3RvcmFnZShxdWVyeSwgRmlsdGVyLmZyb21SZXNwb25zZShmaWx0ZXIpLCBgJHtxdWVyeX1gKTtcbiAgICB0aGlzLl9lbmFibGVkID0gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogVG9nZ2xlcyB0aGUgc3RhdGljIGZpbHRlciByZXByZXNlbnRpbmcgdGhlIHVzZXIncyBsb2NhdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3RvZ2dsZUdlb0ZpbHRlciAoKSB7XG4gICAgaWYgKCFuYXZpZ2F0b3IuZ2VvbG9jYXRpb24pIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyBnZW9FcnJvcjogdHJ1ZSB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuX2VuYWJsZWQpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyBnZW9Mb2FkaW5nOiB0cnVlIH0pO1xuICAgICAgbmF2aWdhdG9yLmdlb2xvY2F0aW9uLmdldEN1cnJlbnRQb3NpdGlvbihcbiAgICAgICAgcG9zaXRpb24gPT4ge1xuICAgICAgICAgIGNvbnN0IGZpbHRlciA9IHRoaXMuX2J1aWxkRmlsdGVyKHBvc2l0aW9uKTtcbiAgICAgICAgICB0aGlzLl9zYXZlRGF0YVRvU3RvcmFnZSgnJywgZmlsdGVyLCAnQ3VycmVudCBMb2NhdGlvbicsIHBvc2l0aW9uKTtcbiAgICAgICAgICB0aGlzLl9lbmFibGVkID0gdHJ1ZTtcbiAgICAgICAgICB0aGlzLnNldFN0YXRlKHt9KTtcbiAgICAgICAgICB0aGlzLmNvcmUucGVyc2lzdGVudFN0b3JhZ2UuZGVsZXRlKGAke1N0b3JhZ2VLZXlzLlFVRVJZfS4ke3RoaXMubmFtZX1gKTtcbiAgICAgICAgICB0aGlzLmNvcmUucGVyc2lzdGVudFN0b3JhZ2UuZGVsZXRlKGAke1N0b3JhZ2VLZXlzLkZJTFRFUn0uJHt0aGlzLm5hbWV9YCk7XG4gICAgICAgIH0sXG4gICAgICAgICgpID0+IHRoaXMuX2hhbmRsZUdlb2xvY2F0aW9uRXJyb3IoKSxcbiAgICAgICAgdGhpcy5fZ2VvbG9jYXRpb25PcHRpb25zXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIF9oYW5kbGVHZW9sb2NhdGlvbkVycm9yICgpIHtcbiAgICB0aGlzLnNldFN0YXRlKHsgZ2VvRXJyb3I6IHRydWUgfSk7XG4gICAgY29uc3QgeyBlbmFibGVkLCBtZXNzYWdlIH0gPSB0aGlzLl9nZW9sb2NhdGlvblRpbWVvdXRBbGVydDtcbiAgICBpZiAoZW5hYmxlZCkge1xuICAgICAgd2luZG93LmFsZXJ0KG1lc3NhZ2UpO1xuICAgIH1cbiAgfVxuXG4gIF9yZW1vdmVGaWx0ZXJOb2RlICgpIHtcbiAgICB0aGlzLmNvcmUucGVyc2lzdGVudFN0b3JhZ2UuZGVsZXRlKGAke1N0b3JhZ2VLZXlzLlFVRVJZfS4ke3RoaXMubmFtZX1gKTtcbiAgICB0aGlzLmNvcmUucGVyc2lzdGVudFN0b3JhZ2UuZGVsZXRlKGAke1N0b3JhZ2VLZXlzLkZJTFRFUn0uJHt0aGlzLm5hbWV9YCk7XG4gICAgdGhpcy5fZW5hYmxlZCA9IGZhbHNlO1xuICAgIHRoaXMucXVlcnkgPSAnJztcbiAgICB0aGlzLmNvcmUuY2xlYXJTdGF0aWNGaWx0ZXJOb2RlKHRoaXMubmFtZSk7XG4gICAgdGhpcy5zZXRTdGF0ZSgpO1xuICB9XG5cbiAgX2J1aWxkRmlsdGVyTm9kZSAoZmlsdGVyLCBkaXNwbGF5VmFsdWUpIHtcbiAgICByZXR1cm4gRmlsdGVyTm9kZUZhY3RvcnkuZnJvbSh7XG4gICAgICBmaWx0ZXI6IGZpbHRlcixcbiAgICAgIG1ldGFkYXRhOiB7XG4gICAgICAgIGRpc3BsYXlWYWx1ZTogZGlzcGxheVZhbHVlLFxuICAgICAgICBmaWVsZE5hbWU6IHRoaXMuX2NvbmZpZy50aXRsZSB8fCB0aGlzLl9jb25maWcubGFiZWwgfHwgJ0xvY2F0aW9uJ1xuICAgICAgfSxcbiAgICAgIHJlbW92ZTogKCkgPT4gdGhpcy5fcmVtb3ZlRmlsdGVyTm9kZSgpXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogU2F2ZXMgdGhlIHByb3ZpZGVkIGZpbHRlciB1bmRlciB0aGlzIGNvbXBvbmVudCdzIG5hbWVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHF1ZXJ5IFRoZSBxdWVyeSB0byBzYXZlXG4gICAqIEBwYXJhbSB7RmlsdGVyfSBmaWx0ZXIgVGhlIGZpbHRlciB0byBzYXZlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBkaXNwbGF5VmFsdWUgVGhlIGRpc3BsYXkgdmFsdWUgZm9yIHRoZSBmaWx0ZXJcbiAgICogQHBhcmFtIHtPYmplY3R9IHBvc2l0aW9uIFRoZSBwb3NpdGlvbiB0byBzYXZlXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfc2F2ZURhdGFUb1N0b3JhZ2UgKHF1ZXJ5LCBmaWx0ZXIsIGRpc3BsYXlWYWx1ZSwgcG9zaXRpb24pIHtcbiAgICB0aGlzLmNvcmUucGVyc2lzdGVudFN0b3JhZ2Uuc2V0KGAke1N0b3JhZ2VLZXlzLlFVRVJZfS4ke3RoaXMubmFtZX1gLCBxdWVyeSk7XG4gICAgdGhpcy5jb3JlLnBlcnNpc3RlbnRTdG9yYWdlLnNldChgJHtTdG9yYWdlS2V5cy5GSUxURVJ9LiR7dGhpcy5uYW1lfWAsIGZpbHRlcik7XG4gICAgY29uc3QgZmlsdGVyTm9kZSA9IHRoaXMuX2J1aWxkRmlsdGVyTm9kZShmaWx0ZXIsIGRpc3BsYXlWYWx1ZSk7XG4gICAgdGhpcy5jb3JlLnNldFN0YXRpY0ZpbHRlck5vZGVzKHRoaXMubmFtZSwgZmlsdGVyTm9kZSk7XG5cbiAgICBpZiAocG9zaXRpb24pIHtcbiAgICAgIHRoaXMuY29yZS5nbG9iYWxTdG9yYWdlLnNldChTdG9yYWdlS2V5cy5HRU9MT0NBVElPTiwge1xuICAgICAgICBsYXQ6IHBvc2l0aW9uLmNvb3Jkcy5sYXRpdHVkZSxcbiAgICAgICAgbG5nOiBwb3NpdGlvbi5jb29yZHMubG9uZ2l0dWRlLFxuICAgICAgICByYWRpdXM6IHBvc2l0aW9uLmNvb3Jkcy5hY2N1cmFjeVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2NvbmZpZy5zZWFyY2hPbkNoYW5nZSkge1xuICAgICAgdGhpcy5jb3JlLnZlcnRpY2FsU2VhcmNoKHRoaXMuX2NvbmZpZy52ZXJ0aWNhbEtleSwge1xuICAgICAgICBzZXRRdWVyeVBhcmFtczogdHJ1ZSxcbiAgICAgICAgcmVzZXRQYWdpbmF0aW9uOiB0cnVlLFxuICAgICAgICB1c2VGYWNldHM6IHRydWVcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBHaXZlbiBhIHBvc2l0aW9uLCBjb25zdHJ1Y3QgYSBGaWx0ZXIgb2JqZWN0XG4gICAqIEBwYXJhbSB7UG9zdGl0aW9ufSBwb3NpdGlvbiBUaGUgcG9zaXRpb25cbiAgICogQHJldHVybnMge0ZpbHRlcn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9idWlsZEZpbHRlciAocG9zaXRpb24pIHtcbiAgICBjb25zdCB7IGxhdGl0dWRlLCBsb25naXR1ZGUsIGFjY3VyYWN5IH0gPSBwb3NpdGlvbi5jb29yZHM7XG4gICAgY29uc3QgcmFkaXVzID0gTWF0aC5tYXgoYWNjdXJhY3ksIHRoaXMuX2NvbmZpZy5yYWRpdXMgKiBNRVRFUlNfUEVSX01JTEUpO1xuICAgIHJldHVybiBGaWx0ZXIucG9zaXRpb24obGF0aXR1ZGUsIGxvbmdpdHVkZSwgcmFkaXVzKTtcbiAgfVxufVxuIiwiLyoqIEBtb2R1bGUgU29ydE9wdGlvbnNDb21wb25lbnQgKi9cblxuaW1wb3J0IENvbXBvbmVudCBmcm9tICcuLi9jb21wb25lbnQnO1xuaW1wb3J0IHsgQW5zd2Vyc0Jhc2ljRXJyb3IgfSBmcm9tICcuLi8uLi8uLi9jb3JlL2Vycm9ycy9lcnJvcnMnO1xuaW1wb3J0IERPTSBmcm9tICcuLi8uLi9kb20vZG9tJztcbmltcG9ydCBTdG9yYWdlS2V5cyBmcm9tICcuLi8uLi8uLi9jb3JlL3N0b3JhZ2Uvc3RvcmFnZWtleXMnO1xuaW1wb3J0IFJlc3VsdHNDb250ZXh0IGZyb20gJy4uLy4uLy4uL2NvcmUvc3RvcmFnZS9yZXN1bHRzY29udGV4dCc7XG5pbXBvcnQgU2VhcmNoU3RhdGVzIGZyb20gJy4uLy4uLy4uL2NvcmUvc3RvcmFnZS9zZWFyY2hzdGF0ZXMnO1xuaW1wb3J0IENvbXBvbmVudFR5cGVzIGZyb20gJy4uLy4uL2NvbXBvbmVudHMvY29tcG9uZW50dHlwZXMnO1xuXG4vKipcbiAqIFJlbmRlcnMgY29uZmlndXJhdGlvbiBvcHRpb25zIGZvciBzb3J0aW5nIFZlcnRpY2FsIFJlc3VsdHMuXG4gKiBUT0RPOiBob3cgdG8gZGVhbCB3aXRoIG11bHRpcGxlIGluc3RhbmNlcyBvZiB0aGlzIGNvbXBvbmVudCAoYW5kIGZpbHRlcnMgaW4gZ2VuZXJhbCksXG4gKiBpZGVhbGx5IFwiaWRlbnRpY2FsXCIgZmlsdGVycy9zb3J0cyB3b3VsZCBiZSBzeW5jZWQgdXAuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNvcnRPcHRpb25zQ29tcG9uZW50IGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IgKGNvbmZpZyA9IHt9LCBzeXN0ZW1Db25maWcgPSB7fSkge1xuICAgIHN1cGVyKGFzc2lnbkRlZmF1bHRzKGNvbmZpZyksIHN5c3RlbUNvbmZpZyk7XG4gICAgLy8gVE9ETyBTUFItMTkyOSBjZW50cmFsaXplIHRoaXMgbG9naWNcbiAgICB0aGlzLl9jb25maWcudmVydGljYWxLZXkgPSBjb25maWcudmVydGljYWxLZXkgfHwgdGhpcy5jb3JlLmdsb2JhbFN0b3JhZ2UuZ2V0U3RhdGUoU3RvcmFnZUtleXMuU0VBUkNIX0NPTkZJRykudmVydGljYWxLZXk7XG4gICAgdGhpcy5vcHRpb25zID0gdGhpcy5fY29uZmlnLm9wdGlvbnM7XG4gICAgdGhpcy5zZWxlY3RlZE9wdGlvbkluZGV4ID0gcGFyc2VJbnQodGhpcy5jb3JlLmdsb2JhbFN0b3JhZ2UuZ2V0U3RhdGUodGhpcy5uYW1lKSkgfHwgMDtcbiAgICB0aGlzLm9wdGlvbnNbdGhpcy5zZWxlY3RlZE9wdGlvbkluZGV4XS5pc1NlbGVjdGVkID0gdHJ1ZTtcbiAgICB0aGlzLmhpZGVFeGNlc3NPcHRpb25zID0gdGhpcy5fY29uZmlnLnNob3dNb3JlICYmIHRoaXMuc2VsZWN0ZWRPcHRpb25JbmRleCA8IHRoaXMuX2NvbmZpZy5zaG93TW9yZUxpbWl0O1xuICAgIHRoaXMuc2hvd1Jlc2V0ID0gdGhpcy5fY29uZmlnLnNob3dSZXNldCAmJiB0aGlzLnNlbGVjdGVkT3B0aW9uSW5kZXggIT09IDA7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIGNvbXBvbmVudCBsaXN0ZW5zIHRvIHVwZGF0ZXMgdG8gdmVydGljYWwgcmVzdWx0cywgYW5kIHNldHMgaXRzIHN0YXRlIHRvIGl0IHdoZW5cbiAgICAgKiBhbiB1cGRhdGUgb2NjdXJzLlxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgdGhpcy5jb3JlLmdsb2JhbFN0b3JhZ2Uub24oJ3VwZGF0ZScsIFN0b3JhZ2VLZXlzLlZFUlRJQ0FMX1JFU1VMVFMsIHZlcnRpY2FsUmVzdWx0cyA9PiB7XG4gICAgICBpZiAodmVydGljYWxSZXN1bHRzLnNlYXJjaFN0YXRlID09PSBTZWFyY2hTdGF0ZXMuU0VBUkNIX0NPTVBMRVRFKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUodmVydGljYWxSZXN1bHRzKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHNldFN0YXRlIChkYXRhID0ge30pIHtcbiAgICBsZXQgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICBpZiAodGhpcy5oaWRlRXhjZXNzT3B0aW9ucykge1xuICAgICAgb3B0aW9ucyA9IHRoaXMub3B0aW9ucy5zbGljZSgwLCB0aGlzLl9jb25maWcuc2hvd01vcmVMaW1pdCk7XG4gICAgfVxuICAgIHN1cGVyLnNldFN0YXRlKE9iamVjdC5hc3NpZ24oe30sIGRhdGEsIHtcbiAgICAgIG9wdGlvbnMsXG4gICAgICBoaWRlRXhjZXNzT3B0aW9uczogdGhpcy5oaWRlRXhjZXNzT3B0aW9ucyxcbiAgICAgIG5hbWU6IHRoaXMubmFtZSxcbiAgICAgIHNob3dSZXNldDogdGhpcy5zaG93UmVzZXQsXG4gICAgICBpc05vUmVzdWx0czogZGF0YS5yZXN1bHRzQ29udGV4dCA9PT0gUmVzdWx0c0NvbnRleHQuTk9fUkVTVUxUU1xuICAgIH0pKTtcbiAgfVxuXG4gIG9uTW91bnQgKCkge1xuICAgIC8vIEhhbmRsZSByYWRpbyBidXR0b24gc2VsZWN0aW9uc1xuICAgIGNvbnN0IGNvbnRhaW5lckVsID0gRE9NLnF1ZXJ5KHRoaXMuX2NvbnRhaW5lciwgJy55eHQtU29ydE9wdGlvbnMtZmllbGRTZXQnKTtcbiAgICBjb250YWluZXJFbCAmJiBET00ub24oXG4gICAgICBjb250YWluZXJFbCxcbiAgICAgICdjaGFuZ2UnLFxuICAgICAgZXZ0ID0+IHRoaXMuaGFuZGxlT3B0aW9uU2VsZWN0aW9uKHBhcnNlSW50KGV2dC50YXJnZXQudmFsdWUpKVxuICAgICk7XG5cbiAgICAvLyBSZWdpc3RlciBtb3JlL2xlc3MgYnV0dG9uXG4gICAgaWYgKHRoaXMuX2NvbmZpZy5zaG93TW9yZSkge1xuICAgICAgY29uc3QgdG9nZ2xlRWwgPSBET00ucXVlcnkodGhpcy5fY29udGFpbmVyLCAnLnl4dC1Tb3J0T3B0aW9ucy1zaG93VG9nZ2xlJyk7XG4gICAgICB0b2dnbGVFbCAmJiBET00ub24oXG4gICAgICAgIHRvZ2dsZUVsLFxuICAgICAgICAnY2xpY2snLCAoKSA9PiB7XG4gICAgICAgICAgdGhpcy5oaWRlRXhjZXNzT3B0aW9ucyA9ICF0aGlzLmhpZGVFeGNlc3NPcHRpb25zO1xuICAgICAgICAgIHRoaXMuc2V0U3RhdGUoKTtcbiAgICAgICAgfVxuICAgICAgKTtcbiAgICB9XG5cbiAgICAvLyBSZWdpc3RlciBzaG93IHJlc2V0IGJ1dHRvblxuICAgIGlmICh0aGlzLnNob3dSZXNldCkge1xuICAgICAgY29uc3QgcmVzZXRFbCA9IERPTS5xdWVyeSh0aGlzLl9jb250YWluZXIsICcueXh0LVNvcnRPcHRpb25zLXJlc2V0Jyk7XG4gICAgICByZXNldEVsICYmIERPTS5vbihcbiAgICAgICAgcmVzZXRFbCxcbiAgICAgICAgJ2NsaWNrJyxcbiAgICAgICAgKCkgPT4gdGhpcy5oYW5kbGVPcHRpb25TZWxlY3Rpb24oMClcbiAgICAgICk7XG4gICAgfVxuXG4gICAgLy8gUmVnaXN0ZXIgYXBwbHkgYnV0dG9uXG4gICAgaWYgKCF0aGlzLl9jb25maWcuc2VhcmNoT25DaGFuZ2UpIHtcbiAgICAgIGNvbnN0IGFwcGx5RWwgPSBET00ucXVlcnkodGhpcy5fY29udGFpbmVyLCAnLnl4dC1Tb3J0T3B0aW9ucy1hcHBseScpO1xuICAgICAgYXBwbHlFbCAmJiBET00ub24oXG4gICAgICAgIGFwcGx5RWwsXG4gICAgICAgICdjbGljaycsXG4gICAgICAgICgpID0+IHRoaXMuX3NvcnRSZXN1bHRzKClcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgaGFuZGxlT3B0aW9uU2VsZWN0aW9uIChvcHRpb25JbmRleCkge1xuICAgIHRoaXMuX3VwZGF0ZVNlbGVjdGVkT3B0aW9uKG9wdGlvbkluZGV4KTtcbiAgICBpZiAodGhpcy5fY29uZmlnLnNlYXJjaE9uQ2hhbmdlKSB7XG4gICAgICB0aGlzLl9zb3J0UmVzdWx0cygpO1xuICAgIH1cbiAgfVxuXG4gIF91cGRhdGVTZWxlY3RlZE9wdGlvbiAob3B0aW9uSW5kZXgpIHtcbiAgICB0aGlzLm9wdGlvbnNbdGhpcy5zZWxlY3RlZE9wdGlvbkluZGV4XS5pc1NlbGVjdGVkID0gZmFsc2U7XG4gICAgdGhpcy5vcHRpb25zW29wdGlvbkluZGV4XS5pc1NlbGVjdGVkID0gdHJ1ZTtcbiAgICB0aGlzLnNlbGVjdGVkT3B0aW9uSW5kZXggPSBvcHRpb25JbmRleDtcbiAgICB0aGlzLnNob3dSZXNldCA9IHRoaXMuX2NvbmZpZy5zaG93UmVzZXQgJiYgb3B0aW9uSW5kZXggIT09IDA7XG4gICAgdGhpcy5zZXRTdGF0ZSgpO1xuICB9XG5cbiAgX3NvcnRSZXN1bHRzICgpIHtcbiAgICBjb25zdCBvcHRpb25JbmRleCA9IHRoaXMuc2VsZWN0ZWRPcHRpb25JbmRleDtcbiAgICBjb25zdCBvcHRpb24gPSB0aGlzLm9wdGlvbnNbb3B0aW9uSW5kZXhdO1xuXG4gICAgLy8gc2VhcmNoT25DaGFuZ2UgcmVhbGx5IG1lYW5zIHNvcnQgb24gY2hhbmdlIGhlcmUsIGp1c3QgdGhhdCB0aGUgc29ydCBpcyBkb25lIHRocm91Z2ggYSBzZWFyY2gsXG4gICAgLy8gVGhpcyB3YXMgZG9uZSB0byBoYXZlIGEgY29uc2lzdGVudCBvcHRpb24gbmFtZSBiZXR3ZWVuIGZpbHRlcnMuXG4gICAgdGhpcy5jb3JlLnBlcnNpc3RlbnRTdG9yYWdlLnNldCh0aGlzLm5hbWUsIG9wdGlvbkluZGV4KTtcbiAgICBpZiAodGhpcy5fY29uZmlnLnN0b3JlT25DaGFuZ2UgJiYgb3B0aW9uSW5kZXggPT09IDApIHtcbiAgICAgIHRoaXMuY29yZS5jbGVhclNvcnRCeXMoKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuX2NvbmZpZy5zdG9yZU9uQ2hhbmdlKSB7XG4gICAgICB0aGlzLmNvcmUuc2V0U29ydEJ5cyhvcHRpb24pO1xuICAgIH1cbiAgICB0aGlzLl9zZWFyY2goKTtcbiAgICB0aGlzLl9jb25maWcub25DaGFuZ2Uob3B0aW9uKTtcbiAgICB0aGlzLnNldFN0YXRlKCk7XG4gIH1cblxuICAvKipcbiAgICogVHJpZ2dlciBhIHNlYXJjaCB3aXRoIGFsbCBmaWx0ZXJzIGluIHN0b3JhZ2VcbiAgICovXG4gIF9zZWFyY2ggKCkge1xuICAgIHRoaXMuY29yZS52ZXJ0aWNhbFNlYXJjaCh0aGlzLl9jb25maWcudmVydGljYWxLZXksIHtcbiAgICAgIHNldFF1ZXJ5UGFyYW1zOiB0cnVlLFxuICAgICAgcmVzZXRQYWdpbmF0aW9uOiB0cnVlLFxuICAgICAgdXNlRmFjZXRzOiB0cnVlXG4gICAgfSk7XG4gIH1cblxuICBzdGF0aWMgZ2V0IHR5cGUgKCkge1xuICAgIHJldHVybiBDb21wb25lbnRUeXBlcy5TT1JUX09QVElPTlM7XG4gIH1cblxuICBzdGF0aWMgZGVmYXVsdFRlbXBsYXRlTmFtZSAoKSB7XG4gICAgcmV0dXJuICdjb250cm9scy9zb3J0b3B0aW9ucyc7XG4gIH1cbn1cblxuZnVuY3Rpb24gYXNzaWduRGVmYXVsdHMgKGNvbmZpZykge1xuICBjb25zdCB1cGRhdGVkQ29uZmlnID0gT2JqZWN0LmFzc2lnbih7fSwgY29uZmlnKTtcblxuICAvLyBPcHRpb25hbCwgVGhlIGxhYmVsIHVzZWQgZm9yIHRoZSDigJxkZWZhdWx04oCdIHNvcnQgKGFrYSB0aGUgc29ydCBzcGVjaWZpZWQgYnkgdGhlIGV4cGVyaWVuY2UgY29uZmlnXCIpLlxuICB1cGRhdGVkQ29uZmlnLmRlZmF1bHRTb3J0TGFiZWwgPSBjb25maWcuZGVmYXVsdFNvcnRMYWJlbCB8fCAnQmVzdCBNYXRjaCc7XG5cbiAgLy8gQXJyYXkgb2Ygc2VhcmNoIG9wdGlvbnMsIHdoZXJlIGFuIG9wdGlvbiBoYXMgdHlwZSwgbGFiZWwsIGFuZCBpZiBpcyB0eXBlIEZJRUxEIGFsc28gYSBsYWJlbCBhbmQgZGlyZWN0aW9uXG4gIGlmICghY29uZmlnLm9wdGlvbnMpIHtcbiAgICB0aHJvdyBuZXcgQW5zd2Vyc0Jhc2ljRXJyb3IoJ2NvbmZpZy5vcHRpb25zIGFyZSByZXF1aXJlZCcsICdTb3J0T3B0aW9ucycpO1xuICB9XG4gIGNvbnN0IE9QVElPTl9UWVBFUyA9IFsnRklFTEQnLCAnUkVMRVZBTkNFJywgJ0VOVElUWV9ESVNUQU5DRSddO1xuICBpZiAoIUFycmF5LmlzQXJyYXkoY29uZmlnLm9wdGlvbnMpKSB7XG4gICAgdGhyb3cgbmV3IEFuc3dlcnNCYXNpY0Vycm9yKCdvcHRpb25zIG11c3QgYmUgYW4gYXJyYXkgb2Ygb2JqZWN0cycsICdTb3J0T3B0aW9ucycpO1xuICB9XG4gIHVwZGF0ZWRDb25maWcub3B0aW9ucyA9IGNvbmZpZy5vcHRpb25zLm1hcChvcHRpb24gPT4ge1xuICAgIGlmICghb3B0aW9uLmxhYmVsIHx8ICFvcHRpb24udHlwZSkge1xuICAgICAgdGhyb3cgbmV3IEFuc3dlcnNCYXNpY0Vycm9yKGBvcHRpb24ubGFiZWwgYW5kIG9wdGlvbi50eXBlIGFyZSByZXF1aXJlZCBvcHRpb24gJHtvcHRpb259YCwgJ1NvcnRPcHRpb25zJyk7XG4gICAgfVxuICAgIGNvbnN0IG5ld09wdGlvbiA9IHsgaXNTZWxlY3RlZDogZmFsc2UgfTtcbiAgICBuZXdPcHRpb24ubGFiZWwgPSBvcHRpb24ubGFiZWw7XG4gICAgbmV3T3B0aW9uLnR5cGUgPSBvcHRpb24udHlwZTtcbiAgICBjb25zdCBpc0ZpZWxkID0gT1BUSU9OX1RZUEVTLmluZGV4T2YobmV3T3B0aW9uLnR5cGUpID09PSAwO1xuICAgIGlmIChpc0ZpZWxkICYmIG9wdGlvbi5maWVsZCAmJiBvcHRpb24uZGlyZWN0aW9uKSB7XG4gICAgICBuZXdPcHRpb24uZmllbGQgPSBvcHRpb24uZmllbGQ7XG4gICAgICBuZXdPcHRpb24uZGlyZWN0aW9uID0gb3B0aW9uLmRpcmVjdGlvbjtcbiAgICB9IGVsc2UgaWYgKGlzRmllbGQpIHtcbiAgICAgIHRocm93IG5ldyBBbnN3ZXJzQmFzaWNFcnJvcihgb3B0aW9uLmZpZWxkIGFuZCBvcHRpb24uZGlyZWN0aW9uIGFyZSByZXF1aXJlZCBmb3Igb3B0aW9uOiAke29wdGlvbn1gLCAnU29ydE9wdGlvbnMnKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ld09wdGlvbjtcbiAgfSk7XG4gIC8vIEFkZCBkZWZhdWx0IG9wdGlvbiB0byB0aGUgZnJvbnQgb2YgdGhlIG9wdGlvbnMgYXJyYXlcbiAgdXBkYXRlZENvbmZpZy5vcHRpb25zLnVuc2hpZnQoe1xuICAgIGxhYmVsOiB1cGRhdGVkQ29uZmlnLmRlZmF1bHRTb3J0TGFiZWwsXG4gICAgaXNTZWxlY3RlZDogZmFsc2VcbiAgfSk7XG5cbiAgLy8gT3B0aW9uYWwsIHRoZSBzZWxlY3RvciB1c2VkIGZvciBvcHRpb25zIGluIHRoZSB0ZW1wbGF0ZVxuICB1cGRhdGVkQ29uZmlnLm9wdGlvblNlbGVjdG9yID0gY29uZmlnLm9wdGlvblNlbGVjdG9yIHx8ICd5eHQtU29ydE9wdGlvbnMtb3B0aW9uU2VsZWN0b3InO1xuXG4gIC8vIE9wdGlvbmFsLCBpZiB0cnVlLCB0cmlnZ2VycyBhIHNlYXJjaCBvbiBlYWNoIGNoYW5nZSB0byBhIGZpbHRlcixcbiAgLy8gaWYgZmFsc2UgdGhlIGNvbXBvbmVudCBhbHNvIHJlbmRlcnMgYW4gYXBwbHkgYnV0dG9uLCBkZWZhdWx0cyB0byBmYWxzZVxuICB1cGRhdGVkQ29uZmlnLnNlYXJjaE9uQ2hhbmdlID0gY29uZmlnLnNlYXJjaE9uQ2hhbmdlID09PSB1bmRlZmluZWQgPyB0cnVlIDogY29uZmlnLnNlYXJjaE9uQ2hhbmdlO1xuXG4gIC8vIE9wdGlvbmFsLCBzaG93IGEgcmVzZXQgYnV0dG9uLiBDbGlja2luZyBpdCB3aWxsIGFsd2F5cyByZXR1cm4gdGhlIHVzZXIgdG8gdGhlIGRlZmF1bHQgc29ydGluZyBvcHRpb24uXG4gIHVwZGF0ZWRDb25maWcuc2hvd1Jlc2V0ID0gY29uZmlnLnNob3dSZXNldCB8fCBmYWxzZTtcblxuICAvLyBPcHRpb25hbCwgdGhlIGxhYmVsIHRvIHVzZSBmb3IgdGhlIHJlc2V0IGJ1dHRvblxuICB1cGRhdGVkQ29uZmlnLnJlc2V0TGFiZWwgPSBjb25maWcucmVzZXRMYWJlbCB8fCAncmVzZXQnO1xuXG4gIC8vIE9wdGlvbmFsLCB0aGUgbWF4IG51bWJlciBvZiBmaWx0ZXIgb3B0aW9ucyB0byBzaG93IGJlZm9yZSBjb2xsYXBzaW5nIGV4dHJhc1xuICB1cGRhdGVkQ29uZmlnLnNob3dNb3JlTGltaXQgPSBjb25maWcuc2hvd01vcmVMaW1pdCB8fCA1O1xuXG4gIC8vIE9wdGlvbmFsLCBhbGxvdyBjb2xsYXBzaW5nIGV4Y2VzcyBzb3J0IG9wdGlvbnMgYWZ0ZXIgYSBsaW1pdFxuICB1cGRhdGVkQ29uZmlnLnNob3dNb3JlID0gY29uZmlnLnNob3dNb3JlID09PSB1bmRlZmluZWQgPyB0cnVlIDogY29uZmlnLnNob3dNb3JlO1xuICB1cGRhdGVkQ29uZmlnLnNob3dNb3JlID0gdXBkYXRlZENvbmZpZy5zaG93TW9yZSAmJiAodXBkYXRlZENvbmZpZy5vcHRpb25zLmxlbmd0aCA+IHVwZGF0ZWRDb25maWcuc2hvd01vcmVMaW1pdCk7XG5cbiAgLy8gT3B0aW9uYWwsIHRoZSBsYWJlbCB0byBzaG93IGZvciBkaXNwbGF5aW5nIG1vcmUgb3B0aW9uc1xuICB1cGRhdGVkQ29uZmlnLnNob3dNb3JlTGFiZWwgPSBjb25maWcuc2hvd01vcmVMYWJlbCB8fCAnU2hvdyBtb3JlJztcblxuICAvLyBPcHRpb25hbCwgdGhlIGxhYmVsIHRvIHNob3cgZm9yIGRpc3BsYXlpbmcgbGVzcyBvcHRpb25zXG4gIHVwZGF0ZWRDb25maWcuc2hvd0xlc3NMYWJlbCA9IGNvbmZpZy5zaG93TGVzc0xhYmVsIHx8ICdTaG93IGxlc3MnO1xuXG4gIC8vIE9wdGlvbmFsLCB0aGUgY2FsbGJhY2sgZnVuY3Rpb24gdG8gY2FsbCB3aGVuIGNoYW5nZWRcbiAgdXBkYXRlZENvbmZpZy5vbkNoYW5nZSA9IGNvbmZpZy5vbkNoYW5nZSB8fCBmdW5jdGlvbiAoKSB7fTtcblxuICAvLyBPcHRpb25hbCwgVG9wIHRpdGxlIGZvciB0aGUgc29ydGluZyBjb21wb25lbnRcbiAgdXBkYXRlZENvbmZpZy5sYWJlbCA9IGNvbmZpZy5sYWJlbCB8fCAnU29ydGluZyc7XG5cbiAgLy8gT3B0aW9uYWwsIHdoZW4gdHJ1ZSBjb21wb25lbnQgZG9lcyBub3QgdXBkYXRlIGdsb2JhbFN0b3JhZ2VcbiAgLy8gcG9zc2libHkgZGVsZWdhdGluZyB0aGF0IHRvIGEgaGlnaGVyLW9yZGVyL2NvbXBvc2l0ZSBjb21wb25lbnRcbiAgdXBkYXRlZENvbmZpZy5zdG9yZU9uQ2hhbmdlID0gY29uZmlnLnN0b3JlT25DaGFuZ2UgPT09IHVuZGVmaW5lZCA/IHRydWUgOiBjb25maWcuc3RvcmVPbkNoYW5nZTtcblxuICB1cGRhdGVkQ29uZmlnLmFwcGx5TGFiZWwgPSBjb25maWcuYXBwbHlMYWJlbCB8fCAnQXBwbHknO1xuXG4gIHVwZGF0ZWRDb25maWcudmVydGljYWxLZXkgPSBjb25maWcudmVydGljYWxLZXk7XG4gIGlmICghdXBkYXRlZENvbmZpZy52ZXJ0aWNhbEtleSkge1xuICAgIHRocm93IG5ldyBBbnN3ZXJzQmFzaWNFcnJvcigndmVydGljYWwga2V5IGlzIHJlcXVpcmVkJywgJ1NvcnRPcHRpb25zJyk7XG4gIH1cblxuICAvLyBub3RlOiBzaG93RXhwYW5kIGFuZCBzaG93TnVtYmVyQXBwbGllZCBleHBsaWNpdGx5IG5vdCBpbmNsdWRlZCwgb24gdGhlIGdyb3VuZHMgdGhhdFxuICAvLyBzb3J0aW5nIHNob3VsZCBhbHdheXMgYmUgZXhwb3NlZCB0byB0aGUgdXNlciBpZiBhZGRlZC5cblxuICByZXR1cm4gdXBkYXRlZENvbmZpZztcbn1cbiIsIi8qKiBAbW9kdWxlIERpcmVjdEFuc3dlckNvbXBvbmVudCAqL1xuXG5pbXBvcnQgQ29tcG9uZW50IGZyb20gJy4uL2NvbXBvbmVudCc7XG5pbXBvcnQgQW5hbHl0aWNzRXZlbnQgZnJvbSAnLi4vLi4vLi4vY29yZS9hbmFseXRpY3MvYW5hbHl0aWNzZXZlbnQnO1xuaW1wb3J0IFN0b3JhZ2VLZXlzIGZyb20gJy4uLy4uLy4uL2NvcmUvc3RvcmFnZS9zdG9yYWdla2V5cyc7XG5pbXBvcnQgRE9NIGZyb20gJy4uLy4uL2RvbS9kb20nO1xuXG4vKipcbiAqIEV2ZW50VHlwZXMgYXJlIGV4cGxpY2l0IHN0cmluZ3MgZGVmaW5lZFxuICogZm9yIHdoYXQgdGhlIHNlcnZlciBleHBlY3RzIGZvciBhbmFseXRpY3MuXG4gKlxuICogQGVudW1cbiAqL1xuY29uc3QgRXZlbnRUeXBlcyA9IHtcbiAgVEhVTUJTX1VQOiAnVEhVTUJTX1VQJyxcbiAgVEhVTUJTX0RPV046ICdUSFVNQlNfRE9XTidcbn07XG5cbmNvbnN0IERFRkFVTFRfQ09ORklHID0ge1xuICBwb3NpdGl2ZUZlZWRiYWNrU3JUZXh0OiAnVGhpcyBhbnN3ZXJlZCBteSBxdWVzdGlvbicsXG4gIG5lZ2F0aXZlRmVlZGJhY2tTclRleHQ6ICdUaGlzIGRpZCBub3QgYW5zd2VyIG15IHF1ZXN0aW9uJyxcbiAgZm9vdGVyVGV4dE9uU3VibWlzc2lvbjogJ1RoYW5rIHlvdSBmb3IgeW91ciBmZWVkYmFjayEnXG59O1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBEaXJlY3RBbnN3ZXJDb21wb25lbnQgZXh0ZW5kcyBDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvciAoY29uZmlnID0ge30sIHN5c3RlbUNvbmZpZyA9IHt9KSB7XG4gICAgc3VwZXIoeyAuLi5ERUZBVUxUX0NPTkZJRywgLi4uY29uZmlnIH0sIHN5c3RlbUNvbmZpZyk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgdXNlciBnaXZlbiBjb25maWcsIHdpdGhvdXQgYW55IGRlZmF1bHRzIGFwcGxpZWQuXG4gICAgICogQHR5cGUge09iamVjdH1cbiAgICAgKi9cbiAgICB0aGlzLl91c2VyQ29uZmlnID0geyAuLi5jb25maWcgfTtcblxuICAgIC8qKlxuICAgICAqIFJlY2lldmUgdXBkYXRlcyBmcm9tIHN0b3JhZ2UgYmFzZWQgb24gdGhpcyBpbmRleFxuICAgICAqIEB0eXBlIHtTdG9yYWdlS2V5fVxuICAgICAqL1xuICAgIHRoaXMubW9kdWxlSWQgPSBTdG9yYWdlS2V5cy5ESVJFQ1RfQU5TV0VSO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGZvcm0gdXNlZCBmb3Igc3VibWl0dGluZyB0aGUgZmVlZGJhY2tcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMuX2Zvcm1FbCA9IGNvbmZpZy5mb3JtRWwgfHwgJy5qcy1kaXJlY3RBbnN3ZXItZmVlZGJhY2stZm9ybSc7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYHRodW1icyB1cGAgY3NzIHNlbGVjdG9yIHRvIGJpbmQgdWkgaW50ZXJhY3Rpb24gdG8gZm9yIHJlcG9ydGluZ1xuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgdGhpcy5fdGh1bWJzVXBTZWxlY3RvciA9IGNvbmZpZy50aHVtYnNVcFNlbGVjdG9yIHx8ICcuanMtZGlyZWN0QW5zd2VyLXRodW1iVXAnO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGB0aHVtYnMgZG93bmAgY3NzIHNlbGVjdG9yIHRvIGJpbmQgdWkgaW50ZXJhY3Rpb24gdG8gZm9yIHJlcG9ydGluZ1xuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgdGhpcy5fdGh1bWJzRG93blNlbGVjdG9yID0gY29uZmlnLnRodW1ic0Rvd25TZWxlY3RvciB8fCAnLmpzLWRpcmVjdEFuc3dlci10aHVtYkRvd24nO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGRpc3BsYXkgdGV4dCBmb3IgdGhlIFZpZXcgRGV0YWlscyBjbGljayB0byBhY3Rpb24gbGlua1xuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgdGhpcy5fdmlld0RldGFpbHNUZXh0ID0gY29uZmlnLnZpZXdEZXRhaWxzVGV4dCB8fCAnVmlldyBEZXRhaWxzJztcblxuICAgIC8qKlxuICAgICAqIFRoZSBkZWZhdWx0IGN1c3RvbSBkaXJlY3QgYW5zd2VyIGNhcmQgdG8gdXNlLCB3aGVuIHRoZXJlIGFyZSBubyBtYXRjaGluZyBjYXJkIG92ZXJyaWRlcy5cbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMuX2RlZmF1bHRDYXJkID0gY29uZmlnLmRlZmF1bHRDYXJkO1xuXG4gICAgLyoqXG4gICAgICogQ2FyZCBvdmVycmlkZXMsIHdoaWNoIGNob29zZSBhIGN1c3RvbSBkaXJlY3QgYW5zd2VyIGNhcmQgYmFzZWQgb24gZmllbGROYW1lLCBmaWVsZFR5cGUsIGFuZCBlbnRpdHlUeXBlLlxuICAgICAqIEB0eXBlIHtBcnJheTxPYmplY3Q+fVxuICAgICAqL1xuICAgIHRoaXMuX2NhcmRPdmVycmlkZXMgPSBjb25maWcuY2FyZE92ZXJyaWRlcyB8fCBbXTtcbiAgfVxuXG4gIHN0YXRpYyBnZXQgdHlwZSAoKSB7XG4gICAgcmV0dXJuICdEaXJlY3RBbnN3ZXInO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSB0ZW1wbGF0ZSB0byByZW5kZXJcbiAgICogQHJldHVybnMge3N0cmluZ31cbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBzdGF0aWMgZGVmYXVsdFRlbXBsYXRlTmFtZSAoY29uZmlnKSB7XG4gICAgcmV0dXJuICdyZXN1bHRzL2RpcmVjdGFuc3dlcic7XG4gIH1cblxuICAvKipcbiAgICogYmVmb3JlTW91bnQsIG9ubHkgZGlzcGxheSB0aGUgZGlyZWN0IGFuc3dlciBjb21wb25lbnQgaWYgaXQgaGFzIGRhdGFcbiAgICovXG4gIGJlZm9yZU1vdW50ICgpIHtcbiAgICBpZiAoIXRoaXMuaGFzU3RhdGUoJ2Fuc3dlcicpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2sgd2hldGhlciBhIGdpdmVuIGNhcmRPdmVycmlkZSBtYXRjaGVzIGEgZ2l2ZW4gZGlyZWN0QW5zd2VyLlxuICAgKiBAcGFyYW0ge09iamVjdH0gZGlyZWN0QW5zd2VyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvdmVycmlkZVxuICAgKi9cbiAgX292ZXJyaWRlTWF0Y2hlc0Fuc3dlciAoZGlyZWN0QW5zd2VyLCBvdmVycmlkZSkge1xuICAgIGlmICghT2JqZWN0LmtleXMoZGlyZWN0QW5zd2VyKS5sZW5ndGgpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBjb25zdCBkaXJlY3RBbnN3ZXJQcm9wZXRpZXMgPSB7XG4gICAgICBlbnRpdHlUeXBlOiBkaXJlY3RBbnN3ZXIucmVsYXRlZEl0ZW0uZGF0YS50eXBlLFxuICAgICAgZmllbGROYW1lOiBkaXJlY3RBbnN3ZXIuYW5zd2VyLmZpZWxkTmFtZSxcbiAgICAgIGZpZWxkVHlwZTogZGlyZWN0QW5zd2VyLmFuc3dlci5maWVsZFR5cGVcbiAgICB9O1xuICAgIGZvciAobGV0IFtwcm9wZXJ0eVRvTWF0Y2gsIHByb3BlcnR5VmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKG92ZXJyaWRlKSkge1xuICAgICAgaWYgKHByb3BlcnR5VG9NYXRjaCA9PT0gJ2NhcmRUeXBlJykge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmIChkaXJlY3RBbnN3ZXJQcm9wZXRpZXNbcHJvcGVydHlUb01hdGNoXSAhPT0gcHJvcGVydHlWYWx1ZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGN1c3RvbSBjYXJkIHRoYXQgc2hvdWxkIGJlIHVzZWQgZm9yIHRoZSBnaXZlbiBkaXJlY3QgYW5zd2VyLlxuICAgKiBGaXJzdCwgY2hlY2tzIHVzZXIgZ2l2ZW4gY2FyZE92ZXJyaWRlcyBmb3IgYSBtYXRjaGluZyBvdmVycmlkZSwgaWYgdGhlcmUgYXJlIG5vbmVcbiAgICogdGhlbiByZXR1cm5zIHRoZSBkZWZhdWx0IGNhcmQuXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAqL1xuICBfZ2V0Q3VzdG9tQ2FyZCAoZGlyZWN0QW5zd2VyKSB7XG4gICAgY29uc3QgY2FyZE92ZXJyaWRlID0gdGhpcy5fY2FyZE92ZXJyaWRlcy5maW5kKG92ZXJyaWRlID0+IHtcbiAgICAgIHJldHVybiB0aGlzLl9vdmVycmlkZU1hdGNoZXNBbnN3ZXIoZGlyZWN0QW5zd2VyLCBvdmVycmlkZSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGNhcmRPdmVycmlkZSA/IGNhcmRPdmVycmlkZS5jYXJkVHlwZSA6IHRoaXMuX2RlZmF1bHRDYXJkO1xuICB9XG5cbiAgLyoqXG4gICAqIFdoZW4gdGhlIERPTSBpcyBjb25zdHJ1Y3RlZCxcbiAgICogd2Ugd2FudCB0byB3aXJlIHVwIHRoZSBiZWhhdmlvciBmb3IgaW50ZXJhY3Rpbmcgd2l0aCB0aGUgcXVhbGl0eSBmZWVkYmFjayByZXBvcnRpbmcgKHRodW1ic3VwL2Rvd24pXG4gICAqL1xuICBvbk1vdW50ICgpIHtcbiAgICBjb25zdCBjdXN0b21DYXJkID0gdGhpcy5nZXRTdGF0ZSgnY3VzdG9tQ2FyZCcpO1xuICAgIGNvbnN0IGZlZWRiYWNrU3VibWl0dGVkID0gdGhpcy5nZXRTdGF0ZSgnZmVlZGJhY2tTdWJtaXR0ZWQnKSA9PT0gdHJ1ZTtcbiAgICAvLyBBdm9pZCBiaW5kaW5ncyBpZiB0aGUgZmVlZGJhY2sgaGFzIHByZXZpb3VzbHkgYmVlbiBzdWJtaXR0ZWQgb3IgaXMgdXNpbmcgYSBjdXN0b20gY2FyZC5cbiAgICBpZiAoY3VzdG9tQ2FyZCB8fCBmZWVkYmFja1N1Ym1pdHRlZCkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gRm9yIFdDQUcgY29tcGxpYW5jZSwgdGhlIGZlZWRiYWNrIHNob3VsZCBiZSBhIHN1Ym1pdHRhYmxlIGZvcm1cbiAgICBET00ub24odGhpcy5fZm9ybUVsLCAnc3VibWl0JywgKGUpID0+IHtcbiAgICAgIGNvbnN0IGZvcm1FbCA9IGUudGFyZ2V0O1xuICAgICAgY29uc3QgY2hlY2tlZFZhbHVlID0gRE9NLnF1ZXJ5KGZvcm1FbCwgJ2lucHV0OmNoZWNrZWQnKS52YWx1ZSA9PT0gJ3RydWUnO1xuXG4gICAgICB0aGlzLnJlcG9ydFF1YWxpdHkoY2hlY2tlZFZhbHVlKTtcbiAgICAgIHRoaXMudXBkYXRlU3RhdGUoe1xuICAgICAgICAnZmVlZGJhY2tTdWJtaXR0ZWQnOiB0cnVlXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIC8vIElzIHRoaXMgYWN0dWFsbHkgbmVjZXNzYXJ5PyBJIGd1ZXNzIGl0J3Mgb25seSBuZWNlc3NhcnkgaWYgdGhlXG4gICAgLy8gc3VibWl0IGJ1dHRvbiBpcyBoaWRkZW4uXG4gICAgRE9NLm9uKHRoaXMuX3RodW1ic1VwU2VsZWN0b3IsICdjbGljaycsICgpID0+IHsgRE9NLnRyaWdnZXIodGhpcy5fZm9ybUVsLCAnc3VibWl0Jyk7IH0pO1xuICAgIERPTS5vbih0aGlzLl90aHVtYnNEb3duU2VsZWN0b3IsICdjbGljaycsICgpID0+IHsgRE9NLnRyaWdnZXIodGhpcy5fZm9ybUVsLCAnc3VibWl0Jyk7IH0pO1xuXG4gICAgY29uc3QgcnRmRWxlbWVudCA9IERPTS5xdWVyeSh0aGlzLl9jb250YWluZXIsICcuanMteXh0LXJ0ZlZhbHVlJyk7XG4gICAgcnRmRWxlbWVudCAmJiBET00ub24ocnRmRWxlbWVudCwgJ2NsaWNrJywgZSA9PiB0aGlzLl9oYW5kbGVSdGZDbGlja0FuYWx5dGljcyhlKSk7XG4gIH1cblxuICAvKipcbiAgICogQSBjbGljayBoYW5kbGVyIGZvciBsaW5rcyBpbiBhIFJpY2ggVGV4dCBEaXJlY3QgQW5zd2VyLiBXaGVuIHN1Y2ggYSBsaW5rXG4gICAqIGlzIGNsaWNrZWQsIGFuIHtAbGluayBBbmFseXRpY3NFdmVudH0gbmVlZHMgdG8gYmUgZmlyZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7TW91c2VFdmVudH0gZXZlbnQgVGhlIGNsaWNrIGV2ZW50LlxuICAgKi9cbiAgX2hhbmRsZVJ0ZkNsaWNrQW5hbHl0aWNzIChldmVudCkge1xuICAgIGlmICghZXZlbnQudGFyZ2V0LmRhdGFzZXQuY3RhVHlwZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBjdGFUeXBlID0gZXZlbnQudGFyZ2V0LmRhdGFzZXQuY3RhVHlwZTtcblxuICAgIGNvbnN0IHJlbGF0ZWRJdGVtID0gdGhpcy5nZXRTdGF0ZSgncmVsYXRlZEl0ZW0nKTtcbiAgICBjb25zdCBhbmFseXRpY3NPcHRpb25zID0ge1xuICAgICAgdmVydGljYWxLZXk6IHJlbGF0ZWRJdGVtLnZlcnRpY2FsQ29uZmlnSWQsXG4gICAgICBkaXJlY3RBbnN3ZXI6IHRydWUsXG4gICAgICBmaWVsZE5hbWU6IHRoaXMuZ2V0U3RhdGUoJ2Fuc3dlcicpLmZpZWxkQXBpTmFtZSxcbiAgICAgIHNlYXJjaGVyOiAnVU5JVkVSU0FMJyxcbiAgICAgIGVudGl0eUlkOiByZWxhdGVkSXRlbS5kYXRhLmlkLFxuICAgICAgdXJsOiBldmVudC50YXJnZXQuaHJlZlxuICAgIH07XG5cbiAgICBjb25zdCBhbmFseXRpY3NFdmVudCA9IG5ldyBBbmFseXRpY3NFdmVudChjdGFUeXBlKTtcbiAgICBhbmFseXRpY3NFdmVudC5hZGRPcHRpb25zKGFuYWx5dGljc09wdGlvbnMpO1xuICAgIHRoaXMuYW5hbHl0aWNzUmVwb3J0ZXIucmVwb3J0KGFuYWx5dGljc0V2ZW50KTtcbiAgfVxuXG4gIC8qKlxuICAgKiB1cGRhdGVTdGF0ZSBlbmFibGVzIGZvciBwYXJ0aWFsIHVwZGF0ZXMgKHRoZSBkZWx0YSBiZXR3ZWVuIHRoZSBvbGQgYW5kIG5ldylcbiAgICogQHR5cGUge29iamVjdH0gVGhlIG5ldyBzdGF0ZSB0byBhcHBseSB0byB0aGUgb2xkXG4gICAqL1xuICB1cGRhdGVTdGF0ZSAoc3RhdGUgPSB7fSkge1xuICAgIGNvbnN0IG5ld1N0YXRlID0gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5nZXRTdGF0ZSgpLCBzdGF0ZSk7XG4gICAgdGhpcy5zZXRTdGF0ZShuZXdTdGF0ZSk7XG4gIH1cblxuICBzZXRTdGF0ZSAoZGF0YSkge1xuICAgIHJldHVybiBzdXBlci5zZXRTdGF0ZShPYmplY3QuYXNzaWduKHt9LCBkYXRhLCB7XG4gICAgICBldmVudE9wdGlvbnM6IHRoaXMuZXZlbnRPcHRpb25zKGRhdGEpLFxuICAgICAgdmlld0RldGFpbHNUZXh0OiB0aGlzLl92aWV3RGV0YWlsc1RleHQsXG4gICAgICBkaXJlY3RBbnN3ZXI6IGRhdGEsXG4gICAgICBjdXN0b21DYXJkOiB0aGlzLl9nZXRDdXN0b21DYXJkKGRhdGEpXG4gICAgfSkpO1xuICB9XG5cbiAgZXZlbnRPcHRpb25zIChkYXRhKSB7XG4gICAgaWYgKCFkYXRhIHx8IE9iamVjdC5rZXlzKGRhdGEpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICB2ZXJ0aWNhbENvbmZpZ0lkOiBkYXRhLnJlbGF0ZWRJdGVtLnZlcnRpY2FsQ29uZmlnSWQsXG4gICAgICBzZWFyY2hlcjogJ1VOSVZFUlNBTCcsXG4gICAgICBlbnRpdHlJZDogZGF0YS5yZWxhdGVkSXRlbS5kYXRhLmlkLFxuICAgICAgY3RhTGFiZWw6IHRoaXMuX3ZpZXdEZXRhaWxzVGV4dC50b1VwcGVyQ2FzZSgpLnJlcGxhY2UoJyAnLCAnXycpXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogcmVwb3J0UXVhbGl0eSB3aWxsIHNlbmQgdGhlIHF1YWxpdHkgZmVlZGJhY2sgdG8gYW5hbHl0aWNzXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gaXNHb29kIHRydWUgaWYgdGhlIGFuc3dlciBpcyB3aGF0IHlvdSB3ZXJlIGxvb2tpbmcgZm9yXG4gICAqL1xuICByZXBvcnRRdWFsaXR5IChpc0dvb2QpIHtcbiAgICBjb25zdCBldmVudFR5cGUgPSBpc0dvb2QgPT09IHRydWUgPyBFdmVudFR5cGVzLlRIVU1CU19VUCA6IEV2ZW50VHlwZXMuVEhVTUJTX0RPV047XG4gICAgY29uc3QgZXZlbnQgPSBuZXcgQW5hbHl0aWNzRXZlbnQoZXZlbnRUeXBlKVxuICAgICAgLmFkZE9wdGlvbnMoe1xuICAgICAgICAnZGlyZWN0QW5zd2VyJzogdHJ1ZVxuICAgICAgfSk7XG5cbiAgICB0aGlzLmFuYWx5dGljc1JlcG9ydGVyLnJlcG9ydChldmVudCk7XG4gIH1cblxuICBhZGRDaGlsZCAoZGF0YSwgdHlwZSwgb3B0cykge1xuICAgIGlmICh0eXBlID09PSB0aGlzLmdldFN0YXRlKCdjdXN0b21DYXJkJykpIHtcbiAgICAgIHJldHVybiBzdXBlci5hZGRDaGlsZCh0aGlzLmdldFN0YXRlKCdkaXJlY3RBbnN3ZXInKSwgdHlwZSwge1xuICAgICAgICAuLi50aGlzLl91c2VyQ29uZmlnLFxuICAgICAgICAuLi5vcHRzXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHN1cGVyLmFkZENoaWxkKGRhdGEsIHR5cGUsIG9wdHMpO1xuICB9XG59XG4iLCJpbXBvcnQgeyBBbnN3ZXJzQ29uZmlnRXJyb3IgfSBmcm9tICcuLi9lcnJvcnMvZXJyb3JzJztcblxuLyoqXG4gKiBUaGUgQWx0ZXJuYXRpdmVWZXJ0aWNhbCBpcyBhIG1vZGVsIHRoYXQgaXMgdXNlZCB0byBwb3dlciB0aGUgc2VhcmNoXG4gKiBzdWdnZXN0aW9ucyBpbmZvIGJveC4gSXQncyBpbml0aWFsaXplZCB0aHJvdWdoIHRoZSBjb25maWd1cmF0aW9uIHByb3ZpZGVkXG4gKiB0byB0aGUgY29tcG9uZW50LlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBbHRlcm5hdGl2ZVZlcnRpY2FsIHtcbiAgY29uc3RydWN0b3IgKGNvbmZpZykge1xuICAgIC8qKlxuICAgICAqIFRoZSBuYW1lIG9mIHRoZSB2ZXJ0aWNhbCB0aGF0IGlzIGV4cG9zZWQgZm9yIHRoZSBsaW5rXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLmxhYmVsID0gY29uZmlnLmxhYmVsO1xuICAgIGlmICh0eXBlb2YgdGhpcy5sYWJlbCAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBBbnN3ZXJzQ29uZmlnRXJyb3IoXG4gICAgICAgICdsYWJlbCBpcyBhIHJlcXVpcmVkIGNvbmZpZ3VyYXRpb24gb3B0aW9uIGZvciB2ZXJ0aWNhbFBhZ2UuJyxcbiAgICAgICAgJ0FsdGVybmF0aXZlVmVydGljYWwnXG4gICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBjb21wbGV0ZSBVUkwsIGluY2x1ZGluZyB0aGUgcGFyYW1zXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLnVybCA9IGNvbmZpZy51cmw7XG4gICAgaWYgKHR5cGVvZiB0aGlzLnVybCAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBBbnN3ZXJzQ29uZmlnRXJyb3IoXG4gICAgICAgICd1cmwgaXMgYSByZXF1aXJlZCBjb25maWd1cmF0aW9uIG9wdGlvbiBmb3IgdmVydGljYWxQYWdlLicsXG4gICAgICAgICdBbHRlcm5hdGl2ZVZlcnRpY2FsJ1xuICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBuYW1lIG9mIGFuIGljb24gZnJvbSB0aGUgZGVmYXVsdCBpY29uIHNldFxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgdGhpcy5pY29uTmFtZSA9IGNvbmZpZy5pY29uTmFtZTtcblxuICAgIC8qKlxuICAgICAqIFVSTCBvZiBhbiBpY29uXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLmljb25VcmwgPSBjb25maWcuaWNvblVybDtcblxuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgdGhlIHZlcnRpY2FsIGhhcyBhbiBpY29uXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLmhhc0ljb24gPSB0aGlzLmljb25OYW1lIHx8IHRoaXMuaWNvblVybDtcblxuICAgIC8qKlxuICAgICAqIFRoZSBudW1iZXIgb2YgcmVzdWx0cyB0byBkaXNwbGF5IG5leHQgdG8gZWFjaCBhbHRlcm5hdGl2ZVxuICAgICAqIHZlcnRpY2FsXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLnJlc3VsdHNDb3VudCA9IGNvbmZpZy5yZXN1bHRzQ291bnQ7XG4gIH1cbn1cbiIsIi8qKiBAbW9kdWxlIEFsdGVybmF0aXZlVmVydGljYWxzQ29tcG9uZW50ICovXG5cbmltcG9ydCBBbHRlcm5hdGl2ZVZlcnRpY2FsIGZyb20gJy4uLy4uLy4uL2NvcmUvbW9kZWxzL2FsdGVybmF0aXZldmVydGljYWwnO1xuaW1wb3J0IENvbXBvbmVudCBmcm9tICcuLi9jb21wb25lbnQnO1xuaW1wb3J0IFN0b3JhZ2VLZXlzIGZyb20gJy4uLy4uLy4uL2NvcmUvc3RvcmFnZS9zdG9yYWdla2V5cyc7XG5pbXBvcnQgeyByZXBsYWNlVXJsUGFyYW1zLCBmaWx0ZXJQYXJhbXNGb3JFeHBlcmllbmNlTGluayB9IGZyb20gJy4uLy4uLy4uL2NvcmUvdXRpbHMvdXJsdXRpbHMnO1xuaW1wb3J0IFNlYXJjaFBhcmFtcyBmcm9tICcuLi8uLi9kb20vc2VhcmNocGFyYW1zJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQWx0ZXJuYXRpdmVWZXJ0aWNhbHNDb21wb25lbnQgZXh0ZW5kcyBDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvciAob3B0cyA9IHt9LCBzeXN0ZW1PcHRzID0ge30pIHtcbiAgICBzdXBlcihvcHRzLCBzeXN0ZW1PcHRzKTtcblxuICAgIHRoaXMubW9kdWxlSWQgPSBTdG9yYWdlS2V5cy5BTFRFUk5BVElWRV9WRVJUSUNBTFM7XG5cbiAgICAvKipcbiAgICAgKiBBbHRlcm5hdGl2ZSB2ZXJ0aWNhbHMgdGhhdCBoYXZlIHJlc3VsdHMgZm9yIHRoZSBjdXJyZW50IHF1ZXJ5XG4gICAgICogVGhpcyBnZXRzIHVwZGF0ZWQgYmFzZWQgb24gdGhlIHNlcnZlciByZXN1bHRzXG4gICAgICogQHR5cGUge0FsdGVybmF0aXZlVmVydGljYWxzfVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5fYWx0ZXJuYXRpdmVWZXJ0aWNhbHMgPSAob3B0cy5kYXRhICYmIG9wdHMuZGF0YS5hbHRlcm5hdGl2ZVZlcnRpY2FscykgfHwgW107XG5cbiAgICAvKipcbiAgICAgKiBWZXJ0aWNhbCBwYWdlcyBjb25maWcgZnJvbSBnbG9iYWwgdmVydGljYWxzIGNvbmZpZ1xuICAgICAqIEB0eXBlIHtWZXJ0aWNhbFBhZ2VzQ29uZmlnfVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5fdmVydGljYWxzQ29uZmlnID0gb3B0cy52ZXJ0aWNhbHNDb25maWcgfHwgW107XG5cbiAgICAvKipcbiAgICAgKiBUaGUgbmFtZSBvZiB0aGUgdmVydGljYWwgdGhhdCBpcyBleHBvc2VkIGZvciB0aGUgbGlua1xuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgdGhpcy5fY3VycmVudFZlcnRpY2FsTGFiZWwgPSB0aGlzLmdldEN1cnJlbnRWZXJ0aWNhbExhYmVsKG9wdHMudmVydGljYWxzQ29uZmlnKSB8fCAnJztcblxuICAgIC8qKlxuICAgICAqIFRoZSBhbHRlcm5hdGl2ZSB2ZXJ0aWNhbCBzZWFyY2ggc3VnZ2VzdGlvbnMsIHBhcnNlZCBmcm9tIGFsdGVybmF0aXZlIHZlcnRpY2FscyBhbmRcbiAgICAgKiB0aGUgZ2xvYmFsIHZlcnRpY2FscyBjb25maWcuXG4gICAgICogVGhpcyBnZXRzIHVwZGF0ZWQgYmFzZWQgb24gdGhlIHNlcnZlciByZXN1bHRzXG4gICAgICogQHR5cGUge0FsdGVybmF0aXZlVmVydGljYWxbXX1cbiAgICAgKi9cbiAgICB0aGlzLnZlcnRpY2FsU3VnZ2VzdGlvbnMgPSB0aGlzLl9idWlsZFZlcnRpY2FsU3VnZ2VzdGlvbnMoXG4gICAgICB0aGlzLl9hbHRlcm5hdGl2ZVZlcnRpY2FscyxcbiAgICAgIHRoaXMuX3ZlcnRpY2Fsc0NvbmZpZyxcbiAgICAgIHRoaXMuY29yZS5nbG9iYWxTdG9yYWdlLmdldFN0YXRlKFN0b3JhZ2VLZXlzLkFQSV9DT05URVhUKSxcbiAgICAgIHRoaXMuY29yZS5nbG9iYWxTdG9yYWdlLmdldFN0YXRlKFN0b3JhZ2VLZXlzLlJFRkVSUkVSX1BBR0VfVVJMKVxuICAgICk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgdXJsIHRvIHRoZSB1bml2ZXJzYWwgcGFnZSB0byBsaW5rIGJhY2sgdG8gd2l0aCBjdXJyZW50IHF1ZXJ5XG4gICAgICogQHR5cGUge3N0cmluZ3xudWxsfVxuICAgICAqL1xuICAgIHRoaXMuX3VuaXZlcnNhbFVybCA9IG9wdHMudW5pdmVyc2FsVXJsIHx8ICcnO1xuXG4gICAgLyoqXG4gICAgICogV2hldGhlciBvciBub3QgcmVzdWx0cyBhcmUgZGlzcGxheWluZywgdXNlZCB0byBjb250cm9sIGxhbmd1YWdlIGluIHRoZSBpbmZvIGJveFxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqL1xuICAgIHRoaXMuX2lzU2hvd2luZ1Jlc3VsdHMgPSBvcHRzLmlzU2hvd2luZ1Jlc3VsdHMgfHwgZmFsc2U7XG5cbiAgICB0aGlzLmNvcmUuZ2xvYmFsU3RvcmFnZS5vbigndXBkYXRlJywgU3RvcmFnZUtleXMuQVBJX0NPTlRFWFQsICgpID0+IHtcbiAgICAgIHRoaXMudmVydGljYWxTdWdnZXN0aW9ucyA9IHRoaXMuX2J1aWxkVmVydGljYWxTdWdnZXN0aW9ucyhcbiAgICAgICAgdGhpcy5fYWx0ZXJuYXRpdmVWZXJ0aWNhbHMsXG4gICAgICAgIHRoaXMuX3ZlcnRpY2Fsc0NvbmZpZyxcbiAgICAgICAgdGhpcy5jb3JlLmdsb2JhbFN0b3JhZ2UuZ2V0U3RhdGUoU3RvcmFnZUtleXMuQVBJX0NPTlRFWFQpLFxuICAgICAgICB0aGlzLmNvcmUuZ2xvYmFsU3RvcmFnZS5nZXRTdGF0ZShTdG9yYWdlS2V5cy5SRUZFUlJFUl9QQUdFX1VSTClcbiAgICAgICk7XG4gICAgICB0aGlzLnNldFN0YXRlKHRoaXMuY29yZS5nbG9iYWxTdG9yYWdlLmdldFN0YXRlKFN0b3JhZ2VLZXlzLkFMRVJOQVRJVkVfVkVSVElDQUxTKSk7XG4gICAgfSk7XG4gIH1cblxuICBzdGF0aWMgZ2V0IHR5cGUgKCkge1xuICAgIHJldHVybiAnQWx0ZXJuYXRpdmVWZXJ0aWNhbHMnO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSB0ZW1wbGF0ZSB0byByZW5kZXJcbiAgICogQHJldHVybnMge3N0cmluZ31cbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBzdGF0aWMgZGVmYXVsdFRlbXBsYXRlTmFtZSAoY29uZmlnKSB7XG4gICAgcmV0dXJuICdyZXN1bHRzL2FsdGVybmF0aXZldmVydGljYWxzJztcbiAgfVxuXG4gIHN0YXRpYyBhcmVEdXBsaWNhdGVOYW1lc0FsbG93ZWQgKCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgc2V0U3RhdGUgKGRhdGEpIHtcbiAgICByZXR1cm4gc3VwZXIuc2V0U3RhdGUoT2JqZWN0LmFzc2lnbih7IHZlcnRpY2FsU3VnZ2VzdGlvbnM6IFtdIH0sIGRhdGEsIHtcbiAgICAgIHVuaXZlcnNhbFVybDogdGhpcy5fdW5pdmVyc2FsVXJsLFxuICAgICAgdmVydGljYWxTdWdnZXN0aW9uczogdGhpcy52ZXJ0aWNhbFN1Z2dlc3Rpb25zLFxuICAgICAgY3VycmVudFZlcnRpY2FsTGFiZWw6IHRoaXMuX2N1cnJlbnRWZXJ0aWNhbExhYmVsLFxuICAgICAgaXNTaG93aW5nUmVzdWx0czogdGhpcy5faXNTaG93aW5nUmVzdWx0cyxcbiAgICAgIHF1ZXJ5OiB0aGlzLmNvcmUuZ2xvYmFsU3RvcmFnZS5nZXRTdGF0ZShTdG9yYWdlS2V5cy5RVUVSWSlcbiAgICB9KSk7XG4gIH1cblxuICBnZXRDdXJyZW50VmVydGljYWxMYWJlbCAodmVydGljYWxzQ29uZmlnKSB7XG4gICAgY29uc3QgdGhpc1ZlcnRpY2FsID0gdmVydGljYWxzQ29uZmlnLmZpbmQoY29uZmlnID0+IHtcbiAgICAgIHJldHVybiBjb25maWcuaXNBY3RpdmUgfHwgZmFsc2U7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gdGhpc1ZlcnRpY2FsID8gdGhpc1ZlcnRpY2FsLmxhYmVsIDogJyc7XG4gIH1cblxuICAvKipcbiAgICogX2J1aWxkVmVydGljYWxTdWdnZXN0aW9ucyB3aWxsIGNvbnN0cnVjdCBhbiBhcnJheSBvZiB7QWx0ZXJuYXRpdmVWZXJ0aWNhbH1cbiAgICogZnJvbSBhbHRlcm5hdGl2ZSB2ZXJ0aWNhbHMgYW5kIHZlcnRpY2FsUGFnZXMgY29uZmlndXJhdGlvblxuICAgKiBAcGFyYW0ge29iamVjdH0gYWx0ZXJuYXRpdmVWZXJ0aWNhbHMgYWx0ZXJuYXRpdmVWZXJ0aWNhbHMgc2VydmVyIHJlc3BvbnNlXG4gICAqIEBwYXJhbSB7b2JqZWN0fSB2ZXJ0aWNhbHNDb25maWcgdGhlIGNvbmZpZ3VyYXRpb24gdG8gdXNlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjb250ZXh0IHRoZSBBUEkgY29udGV4dCBxdWVyeSBwYXJhbWV0ZXIgdG8gYWRkIHRvIHRoZSB1cmxzXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByZWZlcnJlclBhZ2VVcmwgdGhlIHJlZmVycmVyUGFnZVVybCBxdWVyeSBwYXJhbWV0ZXIgdG8gYWRkIHRvIHRoZSB1cmxzXG4gICAqL1xuICBfYnVpbGRWZXJ0aWNhbFN1Z2dlc3Rpb25zIChhbHRlcm5hdGl2ZVZlcnRpY2FscywgdmVydGljYWxzQ29uZmlnLCBjb250ZXh0LCByZWZlcnJlclBhZ2VVcmwpIHtcbiAgICBsZXQgdmVydGljYWxzID0gW107XG5cbiAgICBjb25zdCBwYXJhbXMgPSBuZXcgU2VhcmNoUGFyYW1zKHdpbmRvdy5sb2NhdGlvbi5zZWFyY2guc3Vic3RyaW5nKDEpKTtcbiAgICBpZiAoY29udGV4dCkge1xuICAgICAgcGFyYW1zLnNldChTdG9yYWdlS2V5cy5BUElfQ09OVEVYVCwgY29udGV4dCk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgcmVmZXJyZXJQYWdlVXJsID09PSAnc3RyaW5nJykge1xuICAgICAgcGFyYW1zLnNldChTdG9yYWdlS2V5cy5SRUZFUlJFUl9QQUdFX1VSTCwgcmVmZXJyZXJQYWdlVXJsKTtcbiAgICB9XG5cbiAgICBjb25zdCBmaWx0ZXJlZFBhcmFtcyA9IGZpbHRlclBhcmFtc0ZvckV4cGVyaWVuY2VMaW5rKFxuICAgICAgcGFyYW1zLFxuICAgICAgdHlwZXMgPT4gdGhpcy5jb21wb25lbnRNYW5hZ2VyLmdldENvbXBvbmVudE5hbWVzRm9yQ29tcG9uZW50VHlwZXModHlwZXMpXG4gICAgKTtcblxuICAgIGZvciAoY29uc3QgYWx0ZXJuYXRpdmVWZXJ0aWNhbCBvZiBhbHRlcm5hdGl2ZVZlcnRpY2Fscykge1xuICAgICAgY29uc3QgdmVydGljYWxLZXkgPSBhbHRlcm5hdGl2ZVZlcnRpY2FsLnZlcnRpY2FsQ29uZmlnSWQ7XG5cbiAgICAgIGNvbnN0IG1hdGNoaW5nVmVydGljYWxDb25maWcgPSB2ZXJ0aWNhbHNDb25maWcuZmluZChjb25maWcgPT4ge1xuICAgICAgICByZXR1cm4gY29uZmlnLnZlcnRpY2FsS2V5ID09PSB2ZXJ0aWNhbEtleTtcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoIW1hdGNoaW5nVmVydGljYWxDb25maWcgfHwgYWx0ZXJuYXRpdmVWZXJ0aWNhbC5yZXN1bHRzQ291bnQgPCAxKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICB2ZXJ0aWNhbHMucHVzaChuZXcgQWx0ZXJuYXRpdmVWZXJ0aWNhbCh7XG4gICAgICAgIGxhYmVsOiBtYXRjaGluZ1ZlcnRpY2FsQ29uZmlnLmxhYmVsLFxuICAgICAgICB1cmw6IHJlcGxhY2VVcmxQYXJhbXMobWF0Y2hpbmdWZXJ0aWNhbENvbmZpZy51cmwsIGZpbHRlcmVkUGFyYW1zKSxcbiAgICAgICAgaWNvbk5hbWU6IG1hdGNoaW5nVmVydGljYWxDb25maWcuaWNvbixcbiAgICAgICAgaWNvblVybDogbWF0Y2hpbmdWZXJ0aWNhbENvbmZpZy5pY29uVXJsLFxuICAgICAgICByZXN1bHRzQ291bnQ6IGFsdGVybmF0aXZlVmVydGljYWwucmVzdWx0c0NvdW50XG4gICAgICB9KSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZlcnRpY2FscztcbiAgfVxufVxuIiwiLyoqIEBtb2R1bGUgTWFwUHJvdmlkZXIgKi9cblxuaW1wb3J0IFJlc3VsdHNDb250ZXh0IGZyb20gJy4uLy4uLy4uLy4uL2NvcmUvc3RvcmFnZS9yZXN1bHRzY29udGV4dCc7XG5cbi8qKlxuICogQSBNYXBQcm92aWRlciBpcyBhbiBpbnRlcmZhY2UgdGhhdCByZXByZXNlbnRzIHRoYXQgc2hvdWxkIGJlIGltcGxlbWVudGVkXG4gKiBpbiBvcmRlciB0byBpbnRlZ3JhdGUgd2l0aCBhIFRoaXJkIFBhcnR5IE1hcCBwcm92aWRlciBmb3JcbiAqIGludGVyYWN0aXZlIG1hcHMuIE1hcFByb3ZpZGVycyBhcmUgdXNlZCBieSB0aGUgTWFwQ29tcG9uZW50LlxuICpcbiAqIEltcGxlbWVudGF0aW9ucyBzaG91bGQgZXh0ZW5kIHRoaXMgaW50ZXJmYWNlLlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNYXBQcm92aWRlciB7XG4gIGNvbnN0cnVjdG9yIChjb25maWcgPSB7fSkge1xuICAgIC8qKlxuICAgICAqIFRoZSBBUEkgS2V5IHVzZWQgZm9yIGludGVyYWN0aW5nIHdpdGggdGhlIG1hcCBwcm92aWRlclxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgdGhpcy5fYXBpS2V5ID0gY29uZmlnLmFwaUtleTtcblxuICAgIC8qKlxuICAgICAqIFRoZSB6b29tIGxldmVsIG9mIHRoZSBtYXAsIGRlZmF1bHRzIHRvIDE0XG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLl96b29tID0gY29uZmlnLnpvb20gfHwgMTQ7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgZGVmYXVsdCBjb29yZGluYXRlcyB0byBkaXNwbGF5IGlmIHRoZXJlIGFyZSBubyByZXN1bHRzIHJldHVybmVkXG4gICAgICogT25seSB1c2VkIGlmIHNob3dFbXB0eU1hcCBpcyBzZXQgdG8gdHJ1ZVxuICAgICAqIEB0eXBlIHtPYmplY3R9XG4gICAgICovXG4gICAgdGhpcy5fZGVmYXVsdFBvc2l0aW9uID0gY29uZmlnLmRlZmF1bHRQb3NpdGlvbiB8fCB7IGxhdDogMzcuMDkwMiwgbG5nOiAtOTUuNzEyOSB9O1xuXG4gICAgLyoqXG4gICAgICogQ29uZmlndXJhdGlvbiBmb3IgdGhlIGJlaGF2aW9yIHdoZW4gdGhlcmUgYXJlIG5vIHZlcnRpY2FsIHJlc3VsdHMuXG4gICAgICogQHR5cGUge09iamVjdH1cbiAgICAgKi9cbiAgICB0aGlzLl9ub1Jlc3VsdHMgPSBjb25maWcubm9SZXN1bHRzIHx8IHt9O1xuXG4gICAgLyoqXG4gICAgICogRGV0ZXJtaW5lcyBpZiBhbiBlbXB0eSBtYXAgc2hvdWxkIGJlIHNob3duIHdoZW4gdGhlcmUgYXJlIG5vIHJlc3VsdHNcbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICB0aGlzLl9zaG93RW1wdHlNYXAgPSBjb25maWcuc2hvd0VtcHR5TWFwIHx8IGZhbHNlO1xuXG4gICAgLyoqXG4gICAgICogQSByZWZlcmVuY2UgdG8gdGhlIHVuZGVybHlpbmcgbWFwIGluc3RhbmNlLCBjcmVhdGVkIGJ5IHRoZSBleHRlcm5hbCBsaWIuXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLl9tYXAgPSBudWxsO1xuXG4gICAgLyoqXG4gICAgICogVGVtcG9yYXJ5IGJvb2xlYW4gdHJhY2tpbmcgd2hldGhlciBvciBub3QgdGhlIGV4dGVybmFsIEpTIGxpYnJhcnkgaXMgbG9hZGVkIChzZWUgVE9ETyBiZWxvdylcbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICB0aGlzLl9pc0xvYWRlZCA9IGZhbHNlO1xuXG4gICAgLyoqXG4gICAgICogQ2FsbGJhY2sgdG8gaW52b2tlIHdoZW4gYSBwaW4gaXMgY2xpY2tlZC4gVGhlIGNsaWNrZWQgaXRlbShzKSBhcmUgcGFzc2VkIHRvIHRoZSBjYWxsYmFja1xuICAgICAqIEB0eXBlIHtmdW5jdGlvbn1cbiAgICAgKi9cbiAgICB0aGlzLl9vblBpbkNsaWNrID0gY29uZmlnLm9uUGluQ2xpY2sgfHwgbnVsbDtcblxuICAgIC8qKlxuICAgICAqIENhbGxiYWNrIHRvIGludm9rZSB3aGVuIGEgcGluIGlzIGhvdmVyZWQuIFRoZSBob3ZlcmVkIGl0ZW0gaXMgcGFzc2VkIHRvIHRoZSBjYWxsYmFja1xuICAgICAqIEB0eXBlIHtmdW5jdGlvbn1cbiAgICAgKi9cbiAgICB0aGlzLl9vblBpbk1vdXNlT3ZlciA9IGNvbmZpZy5vblBpbk1vdXNlT3ZlciB8fCBudWxsO1xuXG4gICAgLyoqXG4gICAgICogQ2FsbGJhY2sgdG8gaW52b2tlIHdoZW4gYSBwaW4gaXMgbm8gbG9uZ2VyIGhvdmVyZWQgYWZ0ZXIgYmVpbmcgaG92ZXJlZC5cbiAgICAgKiBUaGUgaG92ZXJlZCBpdGVtIGlzIHBhc3NlZCB0byB0aGUgY2FsbGJhY2tcbiAgICAgKiBAdHlwZSB7ZnVuY3Rpb259XG4gICAgICovXG4gICAgdGhpcy5fb25QaW5Nb3VzZU91dCA9IGNvbmZpZy5vblBpbk1vdXNlT3V0IHx8IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBDYWxsYmFjayB0byBpbnZva2Ugb25jZSB0aGUgSmF2YXNjcmlwdCBpcyBsb2FkZWRcbiAgICAgKiBAdHlwZSB7ZnVuY3Rpb259XG4gICAgICovXG4gICAgdGhpcy5fb25Mb2FkZWQgPSBjb25maWcub25Mb2FkZWQgfHwgZnVuY3Rpb24gKCkge307XG5cbiAgICAvKipcbiAgICAgKiBUaGUgY3VzdG9tIGNvbmZpZ3VyYXRpb24gb3ZlcnJpZGUgdG8gdXNlIGZvciB0aGUgbWFwIG1hcmtlcnNcbiAgICAgKiBAdHlwZSB7T2JqZWN0fEZ1bmN0aW9ufVxuICAgICAqL1xuICAgIHRoaXMuX3BpbkNvbmZpZyA9IHR5cGVvZiBjb25maWcucGluID09PSAnZnVuY3Rpb24nID8gY29uZmlnLnBpbiA6IE9iamVjdC5hc3NpZ24oTWFwUHJvdmlkZXIuREVGQVVMVF9QSU5fQ09ORklHLCBjb25maWcucGluKTtcblxuICAgIC8qKlxuICAgICAqIERldGVybWluZXMgd2hldGhlciBvciBub3QgdG8gY29sbGFwc2UgcGlucyBhdCB0aGUgc2FtZSBsYXQvbG5nXG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICovXG4gICAgdGhpcy5fY29sbGFwc2VQaW5zID0gY29uZmlnLmNvbGxhcHNlUGlucyB8fCBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgZGVmYXVsdCBjb25maWd1cmF0aW9uIHRvIHVzZSBmb3IgdGhlIG1hcCBtYXJrZXJzXG4gICAqIEB0eXBlIHtPYmplY3R9XG4gICAqIFRPRE8oYmlsbHkpIENyZWF0ZSBhIGNvbmZpZ3VyYXRpb24gbW9kZWxcbiAgICovXG4gIHN0YXRpYyBnZXQgREVGQVVMVF9QSU5fQ09ORklHICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaWNvbjoge1xuICAgICAgICBhbmNob3I6IG51bGwsIC8vIGUuZy4geyB4OiAxLCB5OiAxIH1cbiAgICAgICAgc3ZnOiBudWxsLFxuICAgICAgICB1cmw6IG51bGwsXG4gICAgICAgIHNjYWxlZFNpemU6IG51bGwgLy8gZS5nLiB7IHc6IDIwLCBoOiAyMCB9XG4gICAgICB9LFxuICAgICAgbGFiZWxUeXBlOiAnbnVtZXJpYydcbiAgICB9O1xuICB9XG5cbiAgc3RhdGljIHNob3VsZEhpZGVNYXAgKG1hcERhdGEsIHJlc3VsdHNDb250ZXh0LCBzaG93RW1wdHlNYXAsIHZpc2libGVGb3JOb1Jlc3VsdHMpIHtcbiAgICBpZiAocmVzdWx0c0NvbnRleHQgPT09IFJlc3VsdHNDb250ZXh0Lk5PX1JFU1VMVFMgJiYgdmlzaWJsZUZvck5vUmVzdWx0cyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gIXZpc2libGVGb3JOb1Jlc3VsdHM7XG4gICAgfVxuICAgIGNvbnN0IGhhc0VtcHR5TWFwID0gIW1hcERhdGEgfHwgbWFwRGF0YS5tYXBNYXJrZXJzLmxlbmd0aCA8PSAwO1xuICAgIHJldHVybiBoYXNFbXB0eU1hcCAmJiAhc2hvd0VtcHR5TWFwO1xuICB9XG5cbiAgb25Mb2FkZWQgKGNiKSB7XG4gICAgaWYgKHR5cGVvZiBjYiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuX29uTG9hZGVkID0gY2I7XG4gICAgaWYgKHRoaXMuaXNMb2FkZWQoKSkge1xuICAgICAgdGhpcy5fb25Mb2FkZWQoKTtcbiAgICB9XG4gIH1cblxuICBpc0xvYWRlZCAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2lzTG9hZGVkO1xuICB9XG5cbiAgbG9hZEpTICgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1VuaW1wbGVtZW50ZWQgTWV0aG9kOiBsb2FkSlMnKTtcbiAgfVxuXG4gIGluaXQgKG1hcERhdGEpIHtcbiAgICAvLyBUT0RPKGJpbGx5KSBUaGlzIHNob3VsZCBiZSBiYXNlZCBvZmYgYSBwcm9taXNlIHRoYXQgZ2V0cyBjcmVhdGVkIGZyb20gbG9hZEpTXG4gICAgdGhyb3cgbmV3IEVycm9yKCdVbmltcGxlbWVudGVkIE1ldGhvZDogaW5pdCcpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdpdmVuIGEgbGlzdCBvZiBtYXJrZXJzLCBjb21iaW5lIG1hcmtlcnMgd2l0aCB0aGUgc2FtZSBsYXQvbG5nIGludG8gYSBzaW5nbGUgbWFya2VyXG4gICAqIEBwYXJhbSB7b2JqZWN0W119IG1hcmtlcnMgVGhlIG1hcmtlcnMgdG8gY29sbGFwc2VcbiAgICovXG4gIF9jb2xsYXBzZU1hcmtlcnMgKG1hcmtlcnMpIHtcbiAgICBjb25zdCBsb2NhdGlvblRvSXRlbSA9IHt9O1xuICAgIG1hcmtlcnMuZm9yRWFjaChtID0+IHtcbiAgICAgIGxvY2F0aW9uVG9JdGVtW2Ake20ubGF0aXR1ZGV9JHttLmxvbmdpdHVkZX1gXVxuICAgICAgICA/IGxvY2F0aW9uVG9JdGVtW2Ake20ubGF0aXR1ZGV9JHttLmxvbmdpdHVkZX1gXS5wdXNoKG0pXG4gICAgICAgIDogbG9jYXRpb25Ub0l0ZW1bYCR7bS5sYXRpdHVkZX0ke20ubG9uZ2l0dWRlfWBdID0gW21dO1xuICAgIH0pO1xuXG4gICAgY29uc3QgY29sbGFwc2VkTWFya2VycyA9IFtdO1xuICAgIGZvciAobGV0IFssIG1hcmtlcnNdIG9mIE9iamVjdC5lbnRyaWVzKGxvY2F0aW9uVG9JdGVtKSkge1xuICAgICAgaWYgKG1hcmtlcnMubGVuZ3RoID4gMSkge1xuICAgICAgICBjb25zdCBjb2xsYXBzZWRNYXJrZXIgPSB7XG4gICAgICAgICAgaXRlbTogbWFya2Vycy5tYXAobSA9PiBtLml0ZW0pLFxuICAgICAgICAgIGxhYmVsOiBtYXJrZXJzLmxlbmd0aCxcbiAgICAgICAgICBsYXRpdHVkZTogbWFya2Vyc1swXS5sYXRpdHVkZSxcbiAgICAgICAgICBsb25naXR1ZGU6IG1hcmtlcnNbMF0ubG9uZ2l0dWRlXG4gICAgICAgIH07XG4gICAgICAgIGNvbGxhcHNlZE1hcmtlcnMucHVzaChjb2xsYXBzZWRNYXJrZXIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29sbGFwc2VkTWFya2Vycy5wdXNoKG1hcmtlcnNbMF0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBjb2xsYXBzZWRNYXJrZXJzO1xuICB9XG59XG4iLCIvKiogQG1vZHVsZSBHb29nbGVNYXBQcm92aWRlciAqL1xuXG5pbXBvcnQgTWFwUHJvdmlkZXIgZnJvbSAnLi9tYXBwcm92aWRlcic7XG5pbXBvcnQgRE9NIGZyb20gJy4uLy4uLy4uL2RvbS9kb20nO1xuXG4vKiBnbG9iYWwgZ29vZ2xlICovXG5cbi8qKlxuICogR29vZ2xlTWFwUHJvdmlkZXIgaXMgYW4gaW1wbGVtZW50YXRpb24gb2YgYSBNYXBQcm92aWRlclxuICogdGhhdCBoYW5kbGVzIHRoZSBpbnRlZ3JhdGlvbiB3aXRoIHRoZSB0aGlyZCBwYXJ0eSBBUEkgdG8gZXhwb3NlIG1hcHMuXG4gKiBAZXh0ZW5kcyBNYXBQcm92aWRlclxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBHb29nbGVNYXBQcm92aWRlciBleHRlbmRzIE1hcFByb3ZpZGVyIHtcbiAgY29uc3RydWN0b3IgKG9wdHMpIHtcbiAgICBzdXBlcihvcHRzKTtcblxuICAgIC8vIG5vcm1hbGl6ZSBiZWNhdXNlIGdvb2dsZSdzIHpvb20gaXMgZWZmZWN0aXZlbHkgMSB1bml0IG9mIGRpZmZlcmVuY2UgYXdheSBmcm9tIG1hcGJveCB6b29tXG4gICAgdGhpcy5fem9vbU9mZnNldCA9IDE7XG4gICAgdGhpcy5fem9vbSArPSB0aGlzLl96b29tT2Zmc2V0O1xuICAgIHRoaXMuX2NsaWVudElkID0gb3B0cy5jbGllbnRJZDtcbiAgICB0aGlzLl9zaWduYXR1cmUgPSBvcHRzLnNpZ25hdHVyZTtcblxuICAgIGlmICghdGhpcy5oYXNWYWxpZENsaWVudENyZWRlbnRpYWxzKCkgJiYgIXRoaXMuX2FwaUtleSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdHb29nbGVNYXBzUHJvdmlkZXI6IE1pc3NpbmcgYGFwaUtleWAgb3Ige2BjbGllbnRJZGAsIGBzaWduYXR1cmVgfScpO1xuICAgIH1cbiAgfVxuXG4gIGxvYWRKUyAoKSB7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgY29uc3Qgb25Mb2FkID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHR5cGVvZiBzZWxmLl9vbkxvYWRlZCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBzZWxmLl9vbkxvYWRlZCgpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBpZiAodHlwZW9mIGdvb2dsZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHNlbGYuX2lzTG9hZGVkID0gdHJ1ZTtcbiAgICAgIG9uTG9hZCgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGxldCBzY3JpcHQgPSBET00ucXVlcnkoJyN5ZXh0LW1hcC1qcycpO1xuICAgIGlmIChzY3JpcHQpIHtcbiAgICAgIGNvbnN0IG9uTG9hZEZ1bmMgPSBzY3JpcHQub25sb2FkO1xuICAgICAgc2NyaXB0Lm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgb25Mb2FkRnVuYygpO1xuICAgICAgICBvbkxvYWQoKTtcbiAgICAgIH07XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgc2NyaXB0ID0gRE9NLmNyZWF0ZUVsKCdzY3JpcHQnLCB7XG4gICAgICBpZDogJ3lleHQtbWFwLWpzJyxcbiAgICAgIG9ubG9hZDogKCkgPT4ge1xuICAgICAgICBzZWxmLl9pc0xvYWRlZCA9IHRydWU7XG4gICAgICAgIG9uTG9hZCgpO1xuICAgICAgfSxcbiAgICAgIGFzeW5jOiB0cnVlLFxuICAgICAgc3JjOiBgaHR0cHM6Ly9tYXBzLmdvb2dsZWFwaXMuY29tL21hcHMvYXBpL2pzPyR7c2VsZi5nZW5lcmF0ZUNyZWRlbnRpYWxzKCl9YFxuICAgIH0pO1xuXG4gICAgRE9NLmFwcGVuZCgnYm9keScsIHNjcmlwdCk7XG4gIH1cblxuICBnZW5lcmF0ZUNyZWRlbnRpYWxzICgpIHtcbiAgICBpZiAodGhpcy5oYXNWYWxpZENsaWVudENyZWRlbnRpYWxzKCkpIHtcbiAgICAgIHJldHVybiBgY2xpZW50PSR7dGhpcy5fY2xpZW50SWR9YDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGBrZXk9JHt0aGlzLl9hcGlLZXl9YDtcbiAgICB9XG4gIH1cblxuICBoYXNWYWxpZENsaWVudENyZWRlbnRpYWxzICgpIHtcbiAgICByZXR1cm4gdGhpcy5fY2xpZW50SWQ7XG4gIH1cblxuICBpbml0IChlbCwgbWFwRGF0YSwgcmVzdWx0c0NvbnRleHQpIHtcbiAgICBpZiAoTWFwUHJvdmlkZXIuc2hvdWxkSGlkZU1hcChtYXBEYXRhLCByZXN1bHRzQ29udGV4dCwgdGhpcy5fc2hvd0VtcHR5TWFwLCB0aGlzLl9ub1Jlc3VsdHMudmlzaWJsZSkpIHtcbiAgICAgIHRoaXMuX21hcCA9IG51bGw7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBOT1RFKGJpbGx5KSBUaGlzIHRpbWVvdXQgaXMgYSBoYWNrIGZvciBkZWFsaW5nIHdpdGggYXN5bmMgbmF0dXJlLlxuICAgIC8vIE9ubHkgaGVyZSBmb3IgZGVtbyBwdXJwb3Nlcywgc28gd2UnbGwgZml4IGxhdGVyLlxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgbGV0IGNvbnRhaW5lciA9IERPTS5xdWVyeShlbCk7XG4gICAgICB0aGlzLm1hcCA9IG5ldyBnb29nbGUubWFwcy5NYXAoY29udGFpbmVyLCB7XG4gICAgICAgIHpvb206IHRoaXMuX3pvb20sXG4gICAgICAgIGNlbnRlcjogdGhpcy5nZXRDZW50ZXJNYXJrZXIobWFwRGF0YSlcbiAgICAgIH0pO1xuXG4gICAgICAvLyBBcHBseSBvdXIgc2VhcmNoIGRhdGEgdG8gb3VyIEdvb2dsZU1hcFxuICAgICAgaWYgKG1hcERhdGEgJiYgbWFwRGF0YS5tYXBNYXJrZXJzLmxlbmd0aCkge1xuICAgICAgICBjb25zdCBjb2xsYXBzZWRNYXJrZXJzID0gdGhpcy5fY29sbGFwc2VQaW5zXG4gICAgICAgICAgPyB0aGlzLl9jb2xsYXBzZU1hcmtlcnMobWFwRGF0YS5tYXBNYXJrZXJzKVxuICAgICAgICAgIDogbWFwRGF0YS5tYXBNYXJrZXJzO1xuICAgICAgICBsZXQgZ29vZ2xlTWFwTWFya2VyQ29uZmlncyA9IEdvb2dsZU1hcE1hcmtlckNvbmZpZy5mcm9tKFxuICAgICAgICAgIGNvbGxhcHNlZE1hcmtlcnMsXG4gICAgICAgICAgdGhpcy5fcGluQ29uZmlnLFxuICAgICAgICAgIHRoaXMubWFwKTtcblxuICAgICAgICBsZXQgYm91bmRzID0gbmV3IGdvb2dsZS5tYXBzLkxhdExuZ0JvdW5kcygpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGdvb2dsZU1hcE1hcmtlckNvbmZpZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBsZXQgbWFya2VyID0gbmV3IGdvb2dsZS5tYXBzLk1hcmtlcihnb29nbGVNYXBNYXJrZXJDb25maWdzW2ldKTtcbiAgICAgICAgICBpZiAodGhpcy5fb25QaW5DbGljaykge1xuICAgICAgICAgICAgbWFya2VyLmFkZExpc3RlbmVyKCdjbGljaycsICgpID0+IHRoaXMuX29uUGluQ2xpY2soY29sbGFwc2VkTWFya2Vyc1tpXS5pdGVtKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh0aGlzLl9vblBpbk1vdXNlT3Zlcikge1xuICAgICAgICAgICAgbWFya2VyLmFkZExpc3RlbmVyKCdtb3VzZW92ZXInLCAoKSA9PiB0aGlzLl9vblBpbk1vdXNlT3Zlcihjb2xsYXBzZWRNYXJrZXJzW2ldLml0ZW0pKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHRoaXMuX29uUGluTW91c2VPdXQpIHtcbiAgICAgICAgICAgIG1hcmtlci5hZGRMaXN0ZW5lcignbW91c2VvdXQnLCAoKSA9PiB0aGlzLl9vblBpbk1vdXNlT3V0KGNvbGxhcHNlZE1hcmtlcnNbaV0uaXRlbSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBib3VuZHMuZXh0ZW5kKG1hcmtlci5wb3NpdGlvbik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZ29vZ2xlTWFwTWFya2VyQ29uZmlncy5sZW5ndGggPj0gMikge1xuICAgICAgICAgIHRoaXMubWFwLmZpdEJvdW5kcyhib3VuZHMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwgMTAwKTtcbiAgfVxuXG4gIGdldENlbnRlck1hcmtlciAobWFwRGF0YSkge1xuICAgIHJldHVybiBtYXBEYXRhICYmIG1hcERhdGEubWFwQ2VudGVyICYmIG1hcERhdGEubWFwQ2VudGVyLmxvbmdpdHVkZSAmJiBtYXBEYXRhLm1hcENlbnRlci5sYXRpdHVkZVxuICAgICAgPyB7IGxuZzogbWFwRGF0YS5tYXBDZW50ZXIubG9uZ2l0dWRlLCBsYXQ6IG1hcERhdGEubWFwQ2VudGVyLmxhdGl0dWRlIH1cbiAgICAgIDogeyBsbmc6IHRoaXMuX2RlZmF1bHRQb3NpdGlvbi5sbmcsIGxhdDogdGhpcy5fZGVmYXVsdFBvc2l0aW9uLmxhdCB9O1xuICB9XG59XG5cbi8vIFRPRE8oYmlsbHkpIE1vdmUgdG8gb3duIGNsYXNzXG5leHBvcnQgY2xhc3MgR29vZ2xlTWFwTWFya2VyQ29uZmlnIHtcbiAgY29uc3RydWN0b3IgKG9wdHMpIHtcbiAgICAvKipcbiAgICAgKiBBIHJlZmVyZW5jZSB0byB0aGUgZ29vZ2xlIG1hcCwgdGhhdCB0aGUgbWFya2VyIGlzIGFwcGVuZGVkIHRvXG4gICAgICogQHR5cGUge0dvb2dsZU1hcH1cbiAgICAgKi9cbiAgICB0aGlzLm1hcCA9IG9wdHMubWFwIHx8IHVuZGVmaW5lZDtcblxuICAgIC8qKlxuICAgICAqIFRoZSBjb29yZGluYXRlcyBvZiB0aGUgbWFya2VyIChsYXQvbG5nKVxuICAgICAqIEB0eXBlIHtPYmplY3R9XG4gICAgICovXG4gICAgdGhpcy5wb3NpdGlvbiA9IG9wdHMucG9zaXRpb24gfHwge1xuICAgICAgbGF0OiB1bmRlZmluZWQsXG4gICAgICBsbmc6IHVuZGVmaW5lZFxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBUaGUgcHJvcGVydGllcy9zZXR0aW5ncyBvZiB0aGUgaWNvbiB1c2VkIGZvciB0aGUgbWFya2VyXG4gICAgICogZS5nLiB7XG4gICAgICogICAgICAgIGFuY2hvcjogeyB4OiAwLCB5OiAwIH1cbiAgICAgKiAgICAgICAgdXJsOiAncGF0aC90by91cmwuanBnJ1xuICAgICAqICAgICAgICBzY2FsZWRTaXplOiB7IHc6IDAsIGg6IDAgfVxuICAgICAqICAgICAgIH1cbiAgICAgKlxuICAgICAqIEB0eXBlIHtvYmplY3R9XG4gICAgICovXG4gICAgdGhpcy5pY29uID0gb3B0cy5pY29uIHx8IHVuZGVmaW5lZDtcblxuICAgIC8qKlxuICAgICAqIFRoZSBsYWJlbCBvZiB0aGUgbWFya2VyIHRvIHVzZVxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgdGhpcy5sYWJlbCA9IG9wdHMubGFiZWwgfHwgdW5kZWZpbmVkO1xuICB9XG5cbiAgLyoqXG4gICAqIFNlcmlhbGl6ZXMgYW4gYXJyYXkgb2YgbWFya2VyIGNvbmZpZ3NcbiAgICogQHBhcmFtIHtHb29nbGVNYXBNYXJrZXJDb25maWdbXX0gZ29vZ2xlTWFwTWFya2VyQ29uZmlnc1xuICAgKiBAcmV0dXJucyB7c3RyaW5nW119XG4gICAqL1xuICBzdGF0aWMgc2VyaWFsaXplIChnb29nbGVNYXBNYXJrZXJDb25maWdzKSB7XG4gICAgbGV0IHNlcmlhbGl6ZWRNYXJrZXJzID0gW107XG4gICAgZ29vZ2xlTWFwTWFya2VyQ29uZmlncy5mb3JFYWNoKChtYXJrZXIpID0+IHtcbiAgICAgIHNlcmlhbGl6ZWRNYXJrZXJzLnB1c2goYG1hcmtlcnM9bGFiZWw6JHttYXJrZXIubGFiZWx9fCR7bWFya2VyLnBvc2l0aW9uLmxhdH0sJHttYXJrZXIucG9zaXRpb24ubG5nfWApO1xuICAgIH0pO1xuICAgIHJldHVybiBzZXJpYWxpemVkTWFya2Vycy5qb2luKCcmJyk7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgdGhlIHN0b3JhZ2UgZGF0YSBtb2RlbCBvZiBtYXJrZXJzIGludG8gR29vZ2xlQVBJTWFya2VyXG4gICAqIEBwYXJhbSB7b2JqZWN0W119IG1hcmtlcnMgVGhlIGRhdGEgb2YgdGhlIG1hcmtlclxuICAgKiBAcGFyYW0geyhPYmplY3R8ZnVuY3Rpb24pfSBwaW5Db25maWcgVGhlIGNvbmZpZ3VyYXRpb24gdG8gYXBwbHkgdG8gdGhlIG1hcmtlclxuICAgKiBAcGFyYW0ge0dvb2dsZU1hcH0gbWFwIHJlZmVyZW5jZSB0byB0aGUgZ29vZ2xlIG1hcCB0byBhcHBseSB0aGUgbWFya2VyIHRvXG4gICAqIEByZXR1cm5zIHtHb29nbGVNYXBNYXJrZXJDb25maWdbXX1cbiAgICovXG4gIHN0YXRpYyBmcm9tIChtYXJrZXJzLCBwaW5Db25maWcsIG1hcCkge1xuICAgIGxldCBnb29nbGVNYXBNYXJrZXJDb25maWdzID0gW107XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KG1hcmtlcnMpKSB7XG4gICAgICBtYXJrZXJzID0gW21hcmtlcnNdO1xuICAgIH1cblxuICAgIG1hcmtlcnMuZm9yRWFjaCgobWFya2VyKSA9PiB7XG4gICAgICAvLyBTdXBwb3J0IGNvbmZpZ3VyYXRpb24gYXMgYSBmdW5jdGlvblxuICAgICAgbGV0IHBpbkNvbmZpZ09iaiA9IHBpbkNvbmZpZztcbiAgICAgIGlmICh0eXBlb2YgcGluQ29uZmlnID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHBpbkNvbmZpZ09iaiA9IHBpbkNvbmZpZyhcbiAgICAgICAgICBtYXJrZXIuaXRlbSxcbiAgICAgICAgICBNYXBQcm92aWRlci5ERUZBVUxUX1BJTl9DT05GSUcsXG4gICAgICAgICAgbWFya2VyKTtcbiAgICAgIH1cblxuICAgICAgLy8gVHJhbnNmb3JtIG91ciBDb25maWd1cmF0aW9uIE9iamVjdCBpbnRvIHRoZSBleHBlY3RlZFxuICAgICAgLy8gR29vZ2xlIEFQSSBmb3JtYXQuXG4gICAgICBsZXQgaWNvbiA9IHt9O1xuICAgICAgaWYgKHBpbkNvbmZpZ09iai5hbmNob3IpIHtcbiAgICAgICAgaWNvbi5hbmNob3IgPSBnb29nbGUubWFwcy5Qb2ludChwaW5Db25maWdPYmouYW5jaG9yLngsIHBpbkNvbmZpZ09iai5hbmNob3IueSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChwaW5Db25maWdPYmouc2NhbGVkU2l6ZSkge1xuICAgICAgICBpY29uLnNjYWxlZFNpemUgPSBuZXcgZ29vZ2xlLm1hcHMuU2l6ZShwaW5Db25maWdPYmouc2NhbGVkU2l6ZS53LCBwaW5Db25maWdPYmouc2NhbGVkU2l6ZS5oKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHBpbkNvbmZpZ09iai51cmwpIHtcbiAgICAgICAgaWNvbi51cmwgPSBwaW5Db25maWdPYmoudXJsO1xuICAgICAgfVxuXG4gICAgICBpZiAocGluQ29uZmlnT2JqLnN2Zykge1xuICAgICAgICBpY29uLnVybCA9IGBkYXRhOmltYWdlL3N2Zyt4bWw7Y2hhcnNldD11dGYtOCwgJHtlbmNvZGVVUklDb21wb25lbnQocGluQ29uZmlnT2JqLnN2Zyl9YDtcbiAgICAgIH1cblxuICAgICAgbGV0IGxhYmVsO1xuICAgICAgaWYgKHBpbkNvbmZpZ09iai5sYWJlbCkge1xuICAgICAgICBsYWJlbCA9IHBpbkNvbmZpZ09iai5sYWJlbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxhYmVsID0gbWFya2VyLmxhYmVsLnRvU3RyaW5nKCk7XG4gICAgICB9XG5cbiAgICAgIC8vIE5PVEUoYmlsbHkpIEdvb2dsZSBtYXBzIGRvZXNuJ3QgaGFuZGxlIGVtcHR5IGljb24gb2JqZWN0cyBuaWNlbHlcbiAgICAgIC8vIE1ha2UgZ29vZ2xlIG1hcHMgaGFwcHkgaWYgbm8gc2V0dGluZ3MgZm9yIGljb24gYXJlIHByb3ZpZGVkO1xuICAgICAgaWYgKE9iamVjdC5rZXlzKGljb24pLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBpY29uID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICBnb29nbGVNYXBNYXJrZXJDb25maWdzLnB1c2goXG4gICAgICAgIG5ldyBHb29nbGVNYXBNYXJrZXJDb25maWcoe1xuICAgICAgICAgIG1hcDogbWFwLFxuICAgICAgICAgIHBvc2l0aW9uOiB7XG4gICAgICAgICAgICBsYXQ6IG1hcmtlci5sYXRpdHVkZSxcbiAgICAgICAgICAgIGxuZzogbWFya2VyLmxvbmdpdHVkZVxuICAgICAgICAgIH0sXG4gICAgICAgICAgaWNvbjogaWNvbixcbiAgICAgICAgICBsYWJlbDogbGFiZWxcbiAgICAgICAgfSlcbiAgICAgICk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gZ29vZ2xlTWFwTWFya2VyQ29uZmlncztcbiAgfVxufVxuIiwiLyoqIEBtb2R1bGUgTWFwQm94TWFwUHJvdmlkZXIgKi9cblxuaW1wb3J0IE1hcFByb3ZpZGVyIGZyb20gJy4vbWFwcHJvdmlkZXInO1xuaW1wb3J0IERPTSBmcm9tICcuLi8uLi8uLi9kb20vZG9tJztcblxuLyogZ2xvYmFsIG1hcGJveGdsICovXG5cbi8qKlxuICogTWFwQm94TWFwUHJvdmlkZXIgaXMgYW4gaW1wbGVtZW50YXRpb24gb2YgYSBNYXBQcm92aWRlclxuICogdGhhdCBoYW5kbGVzIHRoZSBpbnRlZ3JhdGlvbiB3aXRoIHRoZSB0aGlyZCBwYXJ0eSBBUEkgdG8gZXhwb3NlIG1hcHMuXG4gKiBAZXh0ZW5kcyBNYXBQcm92aWRlclxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNYXBCb3hNYXBQcm92aWRlciBleHRlbmRzIE1hcFByb3ZpZGVyIHtcbiAgLyoqXG4gICAqIExvYWQgdGhlIGV4dGVybmFsIEpTIExpYnJhcnlcbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gb25Mb2FkIEFuIG9wdGlvbmFsIGNhbGxiYWNrIHRvIGludm9rZSBvbmNlIHRoZSBKUyBpcyBsb2FkZWQuXG4gICAqL1xuICBsb2FkSlMgKG9uTG9hZCkge1xuICAgIGxldCBzY3JpcHQgPSBET00uY3JlYXRlRWwoJ3NjcmlwdCcsIHtcbiAgICAgIGlkOiAneWV4dC1tYXAtanMnLFxuICAgICAgb25sb2FkOiAoKSA9PiB7XG4gICAgICAgIHRoaXMuX2lzTG9hZGVkID0gdHJ1ZTtcbiAgICAgICAgbWFwYm94Z2wuYWNjZXNzVG9rZW4gPSB0aGlzLl9hcGlLZXk7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBvbkxvYWQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBvbkxvYWQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5fb25Mb2FkZWQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICB0aGlzLl9vbkxvYWRlZCgpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgYXN5bmM6IHRydWUsXG4gICAgICBzcmM6ICdodHRwczovL2FwaS5tYXBib3guY29tL21hcGJveC1nbC1qcy92MC40NC4xL21hcGJveC1nbC5qcydcbiAgICB9KTtcblxuICAgIGxldCBjc3MgPSBET00uY3JlYXRlRWwoJ2xpbmsnLCB7XG4gICAgICBpZDogJ3lleHQtbWFwLWNzcycsXG4gICAgICByZWw6ICdzdHlsZXNoZWV0JyxcbiAgICAgIGhyZWY6ICdodHRwczovL2FwaS5tYXBib3guY29tL21hcGJveC1nbC1qcy92MC40NC4xL21hcGJveC1nbC5jc3MnXG4gICAgfSk7XG5cbiAgICBET00uYXBwZW5kKCdib2R5JywgY3NzKTtcbiAgICBET00uYXBwZW5kKCdib2R5Jywgc2NyaXB0KTtcbiAgfVxuXG4gIGluaXQgKGVsLCBtYXBEYXRhLCByZXN1bHRzQ29udGV4dCkge1xuICAgIGlmIChNYXBQcm92aWRlci5zaG91bGRIaWRlTWFwKG1hcERhdGEsIHJlc3VsdHNDb250ZXh0LCB0aGlzLl9zaG93RW1wdHlNYXAsIHRoaXMuX25vUmVzdWx0cy52aXNpYmxlKSkge1xuICAgICAgdGhpcy5fbWFwID0gbnVsbDtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGxldCBjb250YWluZXIgPSBET00ucXVlcnkoZWwpO1xuICAgIHRoaXMuX21hcCA9IG5ldyBtYXBib3hnbC5NYXAoe1xuICAgICAgY29udGFpbmVyOiBjb250YWluZXIsXG4gICAgICB6b29tOiB0aGlzLl96b29tLFxuICAgICAgc3R5bGU6ICdtYXBib3g6Ly9zdHlsZXMvbWFwYm94L3N0cmVldHMtdjknLFxuICAgICAgY2VudGVyOiB0aGlzLmdldENlbnRlck1hcmtlcihtYXBEYXRhKVxuICAgIH0pO1xuXG4gICAgaWYgKG1hcERhdGEgJiYgbWFwRGF0YS5tYXBNYXJrZXJzLmxlbmd0aCkge1xuICAgICAgY29uc3QgY29sbGFwc2VkTWFya2VycyA9IHRoaXMuX2NvbGxhcHNlUGluc1xuICAgICAgICA/IHRoaXMuX2NvbGxhcHNlTWFya2VycyhtYXBEYXRhLm1hcE1hcmtlcnMpXG4gICAgICAgIDogbWFwRGF0YS5tYXBNYXJrZXJzO1xuICAgICAgY29uc3QgbWFwYm94TWFwTWFya2VyQ29uZmlncyA9IE1hcEJveE1hcmtlckNvbmZpZy5mcm9tKFxuICAgICAgICBjb2xsYXBzZWRNYXJrZXJzLFxuICAgICAgICB0aGlzLl9waW5Db25maWcsXG4gICAgICAgIHRoaXMuX21hcCk7XG5cbiAgICAgIGNvbnN0IGJvdW5kcyA9IG5ldyBtYXBib3hnbC5MbmdMYXRCb3VuZHMoKTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbWFwYm94TWFwTWFya2VyQ29uZmlncy5sZW5ndGg7IGkrKykge1xuICAgICAgICBsZXQgd3JhcHBlciA9IG1hcGJveE1hcE1hcmtlckNvbmZpZ3NbaV0ud3JhcHBlcjtcbiAgICAgICAgbGV0IGNvb3JkcyA9IG5ldyBtYXBib3hnbC5MbmdMYXQoXG4gICAgICAgICAgbWFwYm94TWFwTWFya2VyQ29uZmlnc1tpXS5wb3NpdGlvbi5sb25naXR1ZGUsXG4gICAgICAgICAgbWFwYm94TWFwTWFya2VyQ29uZmlnc1tpXS5wb3NpdGlvbi5sYXRpdHVkZSk7XG4gICAgICAgIGxldCBtYXJrZXIgPSBuZXcgbWFwYm94Z2wuTWFya2VyKHdyYXBwZXIpLnNldExuZ0xhdChjb29yZHMpO1xuICAgICAgICBib3VuZHMuZXh0ZW5kKG1hcmtlci5nZXRMbmdMYXQoKSk7XG4gICAgICAgIG1hcmtlci5hZGRUbyh0aGlzLl9tYXApO1xuICAgICAgICBpZiAodGhpcy5fb25QaW5DbGljaykge1xuICAgICAgICAgIG1hcmtlci5nZXRFbGVtZW50KCkuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB0aGlzLl9vblBpbkNsaWNrKGNvbGxhcHNlZE1hcmtlcnNbaV0uaXRlbSkpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9vblBpbk1vdXNlT3Zlcikge1xuICAgICAgICAgIG1hcmtlci5nZXRFbGVtZW50KCkuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VvdmVyJywgKCkgPT5cbiAgICAgICAgICAgIHRoaXMuX29uUGluTW91c2VPdmVyKGNvbGxhcHNlZE1hcmtlcnNbaV0uaXRlbSkpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9vblBpbk1vdXNlT3V0KSB7XG4gICAgICAgICAgbWFya2VyLmdldEVsZW1lbnQoKS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW91dCcsICgpID0+XG4gICAgICAgICAgICB0aGlzLl9vblBpbk1vdXNlT3V0KGNvbGxhcHNlZE1hcmtlcnNbaV0uaXRlbSkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAobWFwYm94TWFwTWFya2VyQ29uZmlncy5sZW5ndGggPj0gMikge1xuICAgICAgICB0aGlzLl9tYXAuZml0Qm91bmRzKGJvdW5kcywgeyBwYWRkaW5nOiA1MCB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBnZXRDZW50ZXJNYXJrZXIgKG1hcERhdGEpIHtcbiAgICByZXR1cm4gbWFwRGF0YSAmJiBtYXBEYXRhLm1hcENlbnRlciAmJiBtYXBEYXRhLm1hcENlbnRlci5sb25naXR1ZGUgJiYgbWFwRGF0YS5tYXBDZW50ZXIubGF0aXR1ZGVcbiAgICAgID8gW21hcERhdGEubWFwQ2VudGVyLmxvbmdpdHVkZSwgbWFwRGF0YS5tYXBDZW50ZXIubGF0aXR1ZGVdXG4gICAgICA6IHsgbG5nOiB0aGlzLl9kZWZhdWx0UG9zaXRpb24ubG5nLCBsYXQ6IHRoaXMuX2RlZmF1bHRQb3NpdGlvbi5sYXQgfTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgTWFwQm94TWFya2VyQ29uZmlnIHtcbiAgY29uc3RydWN0b3IgKG9wdHMpIHtcbiAgICAvKipcbiAgICAgKiBBIHJlZmVyZW5jZSB0byB0aGUgbWFwYm94IG1hcCwgdGhhdCB0aGUgbWFya2VyIGlzIGFwcGVuZGVkIHRvXG4gICAgICogQHR5cGUge01hcEJveH1cbiAgICAgKi9cbiAgICB0aGlzLm1hcCA9IG9wdHMubWFwIHx8IHVuZGVmaW5lZDtcblxuICAgIC8qKlxuICAgICAqIFRoZSBjb29yZGluYXRlcyBvZiB0aGUgbWFya2VyIChsYXQvbG5nKVxuICAgICAqIEB0eXBlIHtPYmplY3R9XG4gICAgICovXG4gICAgdGhpcy5wb3NpdGlvbiA9IG9wdHMucG9zaXRpb24gfHwge1xuICAgICAgbGF0aXR1ZGU6IHVuZGVmaW5lZCxcbiAgICAgIGxvbmdpdHVkZTogdW5kZWZpbmVkXG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBodG1sIGVsZW1lbnQgdG8gYmUgdXNlZCBhcyB0aGUgbWFwIG1hcmtlclxuICAgICAqIEB0eXBlIHtvYmplY3R9XG4gICAgICovXG4gICAgdGhpcy53cmFwcGVyID0gb3B0cy53cmFwcGVyIHx8IHVuZGVmaW5lZDtcblxuICAgIC8qKlxuICAgICAqIFRoZSBsYWJlbCBvZiB0aGUgbWFya2VyIHRvIHVzZVxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgdGhpcy5sYWJlbCA9IG9wdHMubGFiZWwgfHwgdW5kZWZpbmVkO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHVybCBvZiB0aGUgcGluIGZvciB0aGUgc3RhdGljIG1hcFxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgdGhpcy5zdGF0aWNNYXBQaW4gPSBvcHRzLnN0YXRpY01hcFBpbiB8fCB1bmRlZmluZWQ7XG4gIH1cblxuICAvKipcbiAgICogU2VyaWFsaXplcyBhbiBhcnJheSBvZiBtYXJrZXIgY29uZmlnc1xuICAgKiBAcGFyYW0ge01hcEJveE1hcmtlckNvbmZpZ1tdfSBtYXBib3hNYXBNYXJrZXJDb25maWdzXG4gICAqIEByZXR1cm5zIHtzdHJpbmdbXX1cbiAgICovXG4gIHN0YXRpYyBzZXJpYWxpemUgKG1hcGJveE1hcE1hcmtlckNvbmZpZ3MpIHtcbiAgICBsZXQgc2VyaWFsaXplZE1hcmtlcnMgPSBbXTtcbiAgICBtYXBib3hNYXBNYXJrZXJDb25maWdzLmZvckVhY2goKG1hcmtlcikgPT4ge1xuICAgICAgaWYgKG1hcmtlci5zdGF0aWNNYXBQaW4pIHtcbiAgICAgICAgc2VyaWFsaXplZE1hcmtlcnMucHVzaChgdXJsLSR7bWFya2VyLnN0YXRpY01hcFBpbn0oJHttYXJrZXIucG9zaXRpb24ubG9uZ2l0dWRlfSwke21hcmtlci5wb3NpdGlvbi5sYXRpdHVkZX0pYCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZXJpYWxpemVkTWFya2Vycy5wdXNoKGBwaW4tcy0ke21hcmtlci5sYWJlbH0oJHttYXJrZXIucG9zaXRpb24ubG9uZ2l0dWRlfSwke21hcmtlci5wb3NpdGlvbi5sYXRpdHVkZX0pYCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHNlcmlhbGl6ZWRNYXJrZXJzLmpvaW4oJywnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyB0aGUgc3RvcmFnZSBkYXRhIG1vZGVsIG9mIG1hcmtlcnMgaW50byBNYXBCb3hNYXJrZXJDb25maWdcbiAgICogQHBhcmFtIHtNYXBCb3h9IEEgcmVmZXJlbmNlIHRvIHRoZSBtYXBib3ggbWFwIHRvIGFwcGx5IHRoZSBtYXJrZXIgdG9cbiAgICogQHBhcmFtIHtvYmplY3RbXX0gbWFya2VycyBUaGUgZGF0YSBvZiB0aGUgbWFya2VyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwaW5Db25maWcgVGhlIGNvbmZpZ3VyYXRpb24gdG8gYXBwbHkgdG8gdGhlIG1hcmtlclxuICAgKiBAcmV0dXJucyB7TWFwQm94TWFya2VyQ29uZmlnW119XG4gICAqL1xuICBzdGF0aWMgZnJvbSAobWFya2VycywgcGluQ29uZmlnLCBtYXApIHtcbiAgICBsZXQgbWFwYm94TWFwTWFya2VyQ29uZmlncyA9IFtdO1xuICAgIGlmICghQXJyYXkuaXNBcnJheShtYXJrZXJzKSkge1xuICAgICAgbWFya2VycyA9IFttYXJrZXJzXTtcbiAgICB9XG5cbiAgICBtYXJrZXJzLmZvckVhY2goKG1hcmtlcikgPT4ge1xuICAgICAgLy8gU3VwcG9ydCBjb25maWd1cmF0aW9uIGFzIGEgZnVuY3Rpb25cbiAgICAgIGxldCBwaW5Db25maWdPYmogPSBwaW5Db25maWc7XG4gICAgICBpZiAodHlwZW9mIHBpbkNvbmZpZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBwaW5Db25maWdPYmogPSBwaW5Db25maWcoXG4gICAgICAgICAgbWFya2VyLml0ZW0sXG4gICAgICAgICAgTWFwUHJvdmlkZXIuREVGQVVMVF9QSU5fQ09ORklHLFxuICAgICAgICAgIG1hcmtlcik7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHdyYXBwZXIgPSBwaW5Db25maWdPYmoud3JhcHBlciA/IHBpbkNvbmZpZ09iai53cmFwcGVyIDogbnVsbDtcbiAgICAgIGNvbnN0IHN0YXRpY01hcFBpbiA9IHBpbkNvbmZpZ09iai5zdGF0aWNNYXBQaW4gPyBwaW5Db25maWdPYmouc3RhdGljTWFwUGluIDogbnVsbDtcblxuICAgICAgbWFwYm94TWFwTWFya2VyQ29uZmlncy5wdXNoKFxuICAgICAgICBuZXcgTWFwQm94TWFya2VyQ29uZmlnKHtcbiAgICAgICAgICBtYXA6IG1hcCxcbiAgICAgICAgICBwb3NpdGlvbjoge1xuICAgICAgICAgICAgbGF0aXR1ZGU6IG1hcmtlci5sYXRpdHVkZSxcbiAgICAgICAgICAgIGxvbmdpdHVkZTogbWFya2VyLmxvbmdpdHVkZVxuICAgICAgICAgIH0sXG4gICAgICAgICAgd3JhcHBlcjogd3JhcHBlcixcbiAgICAgICAgICBsYWJlbDogbWFya2VyLmxhYmVsLFxuICAgICAgICAgIHN0YXRpY01hcFBpbjogc3RhdGljTWFwUGluXG4gICAgICAgIH0pXG4gICAgICApO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIG1hcGJveE1hcE1hcmtlckNvbmZpZ3M7XG4gIH1cbn1cbiIsIi8qKiBAbW9kdWxlIE1hcENvbXBvbmVudCAqL1xuXG5pbXBvcnQgQ29tcG9uZW50IGZyb20gJy4uL2NvbXBvbmVudCc7XG5cbmltcG9ydCBHb29nbGVNYXBQcm92aWRlciBmcm9tICcuL3Byb3ZpZGVycy9nb29nbGVtYXBwcm92aWRlcic7XG5pbXBvcnQgTWFwQm94TWFwUHJvdmlkZXIgZnJvbSAnLi9wcm92aWRlcnMvbWFwYm94bWFwcHJvdmlkZXInO1xuXG5pbXBvcnQgU3RvcmFnZUtleXMgZnJvbSAnLi4vLi4vLi4vY29yZS9zdG9yYWdlL3N0b3JhZ2VrZXlzJztcbmltcG9ydCBSZXN1bHRzQ29udGV4dCBmcm9tICcuLi8uLi8uLi9jb3JlL3N0b3JhZ2UvcmVzdWx0c2NvbnRleHQnO1xuXG5jb25zdCBQcm92aWRlclR5cGVzID0ge1xuICAnZ29vZ2xlJzogR29vZ2xlTWFwUHJvdmlkZXIsXG4gICdtYXBib3gnOiBNYXBCb3hNYXBQcm92aWRlclxufTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTWFwQ29tcG9uZW50IGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IgKG9wdHMgPSB7fSwgc3lzdGVtT3B0cyA9IHt9KSB7XG4gICAgc3VwZXIob3B0cywgc3lzdGVtT3B0cyk7XG5cbiAgICAvKipcbiAgICAgKiBCaW5kIHRoaXMgY29tcG9uZW50IHRvIGxpc3RlbiB0byB0aGUgc3RvcmFnZSBiYXNlZCBvbiB0aGlzIGtleVxuICAgICAqL1xuICAgIHRoaXMubW9kdWxlSWQgPSBTdG9yYWdlS2V5cy5WRVJUSUNBTF9SRVNVTFRTO1xuXG4gICAgLyoqXG4gICAgICogQ29uZmlndXJhdGlvbiBmb3IgdGhlIGJlaGF2aW9yIHdoZW4gdGhlcmUgYXJlIG5vIHZlcnRpY2FsIHJlc3VsdHMuXG4gICAgICovXG4gICAgdGhpcy5fbm9SZXN1bHRzID0ge1xuICAgICAgZGlzcGxheUFsbFJlc3VsdHM6IGZhbHNlLFxuICAgICAgdmlzaWJsZTogdW5kZWZpbmVkLFxuICAgICAgdGVtcGxhdGU6ICcnLFxuICAgICAgLi4uKG9wdHMubm9SZXN1bHRzIHx8IHRoaXMuY29yZS5nbG9iYWxTdG9yYWdlLmdldFN0YXRlKFN0b3JhZ2VLZXlzLk5PX1JFU1VMVFNfQ09ORklHKSlcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQW4gYWxpYXNlZCB1c2VkIHRvIGRldGVybWluZSB0aGUgdHlwZSBvZiBtYXAgcHJvdmlkZXIgdG8gdXNlXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLl9tYXBQcm92aWRlciA9IG9wdHMubWFwUHJvdmlkZXI7XG4gICAgaWYgKCF0aGlzLl9tYXBQcm92aWRlciB8fCAhKHRoaXMuX21hcFByb3ZpZGVyLnRvTG93ZXJDYXNlKCkgaW4gUHJvdmlkZXJUeXBlcykpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignTWFwQ29tcG9uZW50OiBJbnZhbGlkIE1hcCBQcm92aWRlcjsgbXVzdCBiZSBgZ29vZ2xlYCBvciBgbWFwQm94YCcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgcmVmZXJlbmNlIHRvIGFuIGluc3RhbmNlIG9mIHRoZSB7TWFwUHJvdmlkZXJ9IHRoYXQncyBjb25zdHJ1Y3RlZFxuICAgICAqIEB0eXBlIHtNYXBQcm92aWRlcn1cbiAgICAgKi9cbiAgICB0aGlzLl9tYXAgPSBudWxsO1xuICB9XG5cbiAgc3RhdGljIGdldCB0eXBlICgpIHtcbiAgICByZXR1cm4gJ01hcCc7XG4gIH1cblxuICAvKipcbiAgICogVGhlIHRlbXBsYXRlIHRvIHJlbmRlclxuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHN0YXRpYyBkZWZhdWx0VGVtcGxhdGVOYW1lIChjb25maWcpIHtcbiAgICByZXR1cm4gJ3Jlc3VsdHMvbWFwJztcbiAgfVxuXG4gIC8vIFRPRE8oYmlsbHkpIE1ha2UgUHJvdmlkZXJUeXBlcyBhIGZhY3RvcnkgY2xhc3NcbiAgZ2V0UHJvdmlkZXJJbnN0YW5jZSAodHlwZSkge1xuICAgIGNvbnN0IF9jb25maWcgPSB7XG4gICAgICAuLi50aGlzLl9jb25maWcsXG4gICAgICBub1Jlc3VsdHM6IHRoaXMuX25vUmVzdWx0c1xuICAgIH07XG4gICAgcmV0dXJuIG5ldyBQcm92aWRlclR5cGVzW3R5cGUudG9Mb3dlckNhc2UoKV0oX2NvbmZpZyk7XG4gIH1cblxuICBvbkNyZWF0ZSAoKSB7XG4gICAgdGhpcy5fbWFwID0gdGhpcy5nZXRQcm92aWRlckluc3RhbmNlKHRoaXMuX21hcFByb3ZpZGVyKTtcbiAgICB0aGlzLl9tYXAubG9hZEpTKCk7XG4gIH1cblxuICBvbk1vdW50ICgpIHtcbiAgICB0aGlzLl9tYXAub25Mb2FkZWQoKCkgPT4ge1xuICAgICAgdGhpcy5fbWFwLmluaXQodGhpcy5fY29udGFpbmVyLCB0aGlzLmdldFN0YXRlKCdtYXAnKSwgdGhpcy5nZXRTdGF0ZSgncmVzdWx0c0NvbnRleHQnKSk7XG4gICAgfSk7XG4gIH1cblxuICBzZXRTdGF0ZSAoZGF0YSwgdmFsKSB7XG4gICAgaWYgKE9iamVjdC5rZXlzKGRhdGEpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgaWYgKGRhdGEucmVzdWx0c0NvbnRleHQgPT09IFJlc3VsdHNDb250ZXh0Lk5PX1JFU1VMVFMgJiYgIXRoaXMuX25vUmVzdWx0cy5kaXNwbGF5QWxsUmVzdWx0cykge1xuICAgICAgZGF0YSA9IHtcbiAgICAgICAgcmVzdWx0c0NvbnRleHQ6IGRhdGEucmVzdWx0c0NvbnRleHRcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHN1cGVyLnNldFN0YXRlKGRhdGEsIHZhbCk7XG4gIH1cbn1cbiIsImV4cG9ydCBjb25zdCBjYXJkVGVtcGxhdGVzID0ge1xuICAnU3RhbmRhcmQnOiAnY2FyZHMvc3RhbmRhcmQnLFxuICAnQWNjb3JkaW9uJzogJ2NhcmRzL2FjY29yZGlvbicsXG4gICdMZWdhY3knOiAnY2FyZHMvbGVnYWN5J1xufTtcblxuZXhwb3J0IGNvbnN0IGNhcmRUeXBlcyA9IHtcbiAgJ1N0YW5kYXJkJzogJ1N0YW5kYXJkQ2FyZCcsXG4gICdBY2NvcmRpb24nOiAnQWNjb3JkaW9uQ2FyZCcsXG4gICdMZWdhY3knOiAnTGVnYWN5Q2FyZCdcbn07XG4iLCIvKiogQG1vZHVsZSBDYXJkQ29tcG9uZW50ICovXG5cbmltcG9ydCBDb21wb25lbnQgZnJvbSAnLi4vY29tcG9uZW50JztcbmltcG9ydCBET00gZnJvbSAnLi4vLi4vZG9tL2RvbSc7XG5pbXBvcnQgeyBjYXJkVHlwZXMgfSBmcm9tICcuL2NvbnN0cyc7XG5pbXBvcnQgQW5hbHl0aWNzRXZlbnQgZnJvbSAnLi4vLi4vLi4vY29yZS9hbmFseXRpY3MvYW5hbHl0aWNzZXZlbnQnO1xuXG5jbGFzcyBDYXJkQ29uZmlnIHtcbiAgY29uc3RydWN0b3IgKGNvbmZpZyA9IHt9KSB7XG4gICAgT2JqZWN0LmFzc2lnbih0aGlzLCBjb25maWcpO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGNhcmQgdHlwZSB0byB1c2VcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMuY2FyZFR5cGUgPSBjb25maWcuY2FyZFR5cGUgfHwgJ1N0YW5kYXJkJztcblxuICAgIC8qKlxuICAgICAqIERhdGEgbWFwcGluZ3MgaXMgYSBmdW5jdGlvbiBzcGVjaWZpZWQgaW4gdGhlIGNvbmZpZ1xuICAgICAqIHRoYXQgcmV0dXJucyBjb25maWcgYmFzZWQgb24gdGhlIGRhdGEgcGFzc2VkIGludG8gY2FyZFxuICAgICAqIEB0eXBlIHtGdW5jdGlvbn1cbiAgICAgKi9cbiAgICB0aGlzLmRhdGFNYXBwaW5ncyA9IGNvbmZpZy5kYXRhTWFwcGluZ3MgfHwgKCgpID0+IHt9KTtcblxuICAgIC8qKlxuICAgICAqIEVpdGhlciBhIGZ1bmN0aW9uIHRoYXQgc3BpdHMgb3V0IGFuIGFycmF5IG9mIENUQSBjb25maWcgb2JqZWN0cyBvciBhbiBhcnJheSBvZiBDVEEgY29uZmlnIG9iamVjdHNcbiAgICAgKiBvciBhcGkgZmllbGRuYW1lc1xuICAgICAqIEB0eXBlIHtGdW5jdGlvbnxBcnJheTxPYmplY3R8c3RyaW5nPn1cbiAgICAgKi9cbiAgICB0aGlzLmNhbGxzVG9BY3Rpb24gPSBjb25maWcuY2FsbHNUb0FjdGlvbiB8fCBbXTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBpbmRleCBvZiB0aGUgY2FyZC5cbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIHRoaXMuX2luZGV4ID0gY29uZmlnLl9pbmRleCB8fCAwO1xuXG4gICAgLyoqXG4gICAgICogV2hldGhlciB0aGlzIGNhcmQgaXMgcGFydCBvZiBhIHVuaXZlcnNhbCBzZWFyY2hcbiAgICAgKi9cbiAgICB0aGlzLmlzVW5pdmVyc2FsID0gY29uZmlnLmlzVW5pdmVyc2FsIHx8IGZhbHNlO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENhcmRDb21wb25lbnQgZXh0ZW5kcyBDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvciAoY29uZmlnID0ge30sIHN5c3RlbUNvbmZpZyA9IHt9KSB7XG4gICAgc3VwZXIobmV3IENhcmRDb25maWcoY29uZmlnKSwgc3lzdGVtQ29uZmlnKTtcblxuICAgIC8qKlxuICAgICAqIGNvbmZpZy5kYXRhIGNvbWVzIGZyb20gdGhlIGRhdGEtcHJvcCBhdHRyaWJ1dGUgcGFzc2VkIGluXG4gICAgICogZnJvbSB0aGUgcGFyZW50IGNvbXBvbmVudC5cbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAqL1xuICAgIGNvbnN0IGRhdGEgPSBjb25maWcuZGF0YSB8fCB7fTtcblxuICAgIC8qKlxuICAgICAqIFRoZSByZXN1bHQgZGF0YSBmb3IgdGhpcyBjYXJkLlxuICAgICAqIEB0eXBlIHtSZXN1bHR9XG4gICAgICovXG4gICAgdGhpcy5yZXN1bHQgPSBkYXRhLnJlc3VsdCB8fCB7fTtcblxuICAgIC8qKlxuICAgICAqIFZlcnRpY2FsIGtleSBmb3IgdGhlIHNlYXJjaC5cbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMudmVydGljYWxLZXkgPSBkYXRhLnZlcnRpY2FsS2V5O1xuICB9XG5cbiAgb25Nb3VudCAoKSB7XG4gICAgY29uc3QgcnRmRWxlbWVudCA9IERPTS5xdWVyeSh0aGlzLl9jb250YWluZXIsICcuanMteXh0LXJ0ZlZhbHVlJyk7XG4gICAgaWYgKHJ0ZkVsZW1lbnQpIHtcbiAgICAgIGNvbnN0IGZpZWxkTmFtZSA9IHJ0ZkVsZW1lbnQuZGF0YXNldC5maWVsZE5hbWU7XG4gICAgICBET00ub24ocnRmRWxlbWVudCwgJ2NsaWNrJywgZSA9PiB0aGlzLl9oYW5kbGVSdGZDbGlja0FuYWx5dGljcyhlLCBmaWVsZE5hbWUpKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQSBjbGljayBoYW5kbGVyIGZvciBsaW5rcyBpbiBhIFJpY2ggVGV4dCBhdHRyaXVidGUuIFdoZW4gc3VjaCBhIGxpbmsgaXNcbiAgICogY2xpY2tlZCwgYW4ge0BsaW5rIEFuYWx5dGljc0V2ZW50fSBuZWVkcyB0byBiZSBmaXJlZC5cbiAgICpcbiAgICogQHBhcmFtIHtNb3VzZUV2ZW50fSBldmVudCBUaGUgY2xpY2sgZXZlbnQuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBmaWVsZE5hbWUgVGhlIG5hbWUgb2YgdGhlIFJpY2ggVGV4dCBmaWVsZCB1c2VkIGluIHRoZVxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJpdWJ0ZS5cbiAgICovXG4gIF9oYW5kbGVSdGZDbGlja0FuYWx5dGljcyAoZXZlbnQsIGZpZWxkTmFtZSkge1xuICAgIGNvbnN0IGN0YVR5cGUgPSBldmVudC50YXJnZXQuZGF0YXNldC5jdGFUeXBlO1xuICAgIGlmICghY3RhVHlwZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGFuYWx5dGljc09wdGlvbnMgPSB7XG4gICAgICBkaXJlY3RBbnN3ZXI6IGZhbHNlLFxuICAgICAgdmVydGljYWxLZXk6IHRoaXMuX2NvbmZpZy5kYXRhLnZlcnRpY2FsS2V5LFxuICAgICAgc2VhcmNoZXI6IHRoaXMuX2NvbmZpZy5pc1VuaXZlcnNhbCA/ICdVTklWRVJTQUwnIDogJ1ZFUlRJQ0FMJyxcbiAgICAgIGVudGl0eUlkOiB0aGlzLl9jb25maWcuZGF0YS5yZXN1bHQuaWQsXG4gICAgICB1cmw6IGV2ZW50LnRhcmdldC5ocmVmXG4gICAgfTtcbiAgICBpZiAoIWZpZWxkTmFtZSkge1xuICAgICAgY29uc29sZS53YXJuKCdGaWVsZCBuYW1lIG5vdCBwcm92aWRlZCBmb3IgUlRGIGNsaWNrIGFuYWx5dGljcycpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhbmFseXRpY3NPcHRpb25zLmZpZWxkTmFtZSA9IGZpZWxkTmFtZTtcbiAgICB9XG5cbiAgICBjb25zdCBhbmFseXRpY3NFdmVudCA9IG5ldyBBbmFseXRpY3NFdmVudChjdGFUeXBlKTtcbiAgICBhbmFseXRpY3NFdmVudC5hZGRPcHRpb25zKGFuYWx5dGljc09wdGlvbnMpO1xuICAgIHRoaXMuYW5hbHl0aWNzUmVwb3J0ZXIucmVwb3J0KGFuYWx5dGljc0V2ZW50KTtcbiAgfVxuXG4gIHNldFN0YXRlIChkYXRhKSB7XG4gICAgY29uc3QgY2FyZFR5cGUgPSB0aGlzLl9jb25maWcuY2FyZFR5cGU7XG5cbiAgICAvLyBVc2UgdGhlIGNhcmRUeXBlIGFzIGNvbXBvbmVudCBuYW1lIGlmIGl0IGlzIG5vdCBhIGJ1aWx0LWluIHR5cGVcbiAgICBjb25zdCBjYXJkQ29tcG9uZW50TmFtZSA9IGNhcmRUeXBlc1tjYXJkVHlwZV0gfHwgY2FyZFR5cGU7XG4gICAgcmV0dXJuIHN1cGVyLnNldFN0YXRlKHtcbiAgICAgIC4uLmRhdGEsXG4gICAgICByZXN1bHQ6IHRoaXMucmVzdWx0LFxuICAgICAgY2FyZFR5cGU6IGNhcmRDb21wb25lbnROYW1lXG4gICAgfSk7XG4gIH1cblxuICBhZGRDaGlsZCAoZGF0YSwgdHlwZSwgb3B0cykge1xuICAgIGNvbnN0IHVwZGF0ZWREYXRhID0ge1xuICAgICAgdmVydGljYWxLZXk6IHRoaXMudmVydGljYWxLZXksXG4gICAgICByZXN1bHQ6IGRhdGFcbiAgICB9O1xuICAgIGNvbnN0IG5ld09wdHMgPSB7XG4gICAgICBzaG93T3JkaW5hbDogdGhpcy5fY29uZmlnLnNob3dPcmRpbmFsLFxuICAgICAgZGF0YU1hcHBpbmdzOiB0aGlzLl9jb25maWcuZGF0YU1hcHBpbmdzLFxuICAgICAgY2FsbHNUb0FjdGlvbjogdGhpcy5fY29uZmlnLmNhbGxzVG9BY3Rpb24sXG4gICAgICB2ZXJ0aWNhbEtleTogdGhpcy5fY29uZmlnLnZlcnRpY2FsS2V5LFxuICAgICAgX2luZGV4OiB0aGlzLl9jb25maWcuX2luZGV4LFxuICAgICAgaXNVbml2ZXJzYWw6IHRoaXMuX2NvbmZpZy5pc1VuaXZlcnNhbCxcbiAgICAgIG1vZGlmaWVyOiB0aGlzLl9jb25maWcubW9kaWZpZXIsXG4gICAgICAuLi5vcHRzXG4gICAgfTtcbiAgICByZXR1cm4gc3VwZXIuYWRkQ2hpbGQodXBkYXRlZERhdGEsIHR5cGUsIG5ld09wdHMpO1xuICB9XG5cbiAgLyoqXG4gICAqIFVzZWQgYnkgY2hpbGRyZW4gY2FyZCBjb21wb25lbnRzIGxpa2UgU3RhbmRhcmRDYXJkQ29tcG9uZW50IHRvXG4gICAqIGFwcGx5IGdpdmVuIHRlbXBsYXRlIG1hcHBpbmdzIGFzIGNvbmZpZy5cbiAgICogQHBhcmFtIHtSZXN1bHR9IHJlc3VsdFxuICAgKiBAcGFyYW0ge09iamVjdHxGdW5jdGlvbn0gZGF0YU1hcHBpbmdzXG4gICAqL1xuICBzdGF0aWMgYXBwbHlEYXRhTWFwcGluZ3MgKHJlc3VsdCwgZGF0YU1hcHBpbmdzKSB7XG4gICAgY29uc3QgY29uZmlnID0ge307XG4gICAgaWYgKHR5cGVvZiBkYXRhTWFwcGluZ3MgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGRhdGFNYXBwaW5ncyA9IGRhdGFNYXBwaW5ncyhyZXN1bHQpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGRhdGFNYXBwaW5ncyA9PT0gJ29iamVjdCcpIHtcbiAgICAgIE9iamVjdC5lbnRyaWVzKGRhdGFNYXBwaW5ncykuZm9yRWFjaCgoW2F0dHJpYnV0ZSwgdmFsdWVdKSA9PiB7XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBjb25maWdbYXR0cmlidXRlXSA9IHZhbHVlKHJlc3VsdCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uZmlnW2F0dHJpYnV0ZV0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBjb25maWc7XG4gIH1cblxuICBzdGF0aWMgZ2V0IHR5cGUgKCkge1xuICAgIHJldHVybiAnQ2FyZCc7XG4gIH1cblxuICAvKipcbiAgICogVGhlIHRlbXBsYXRlIHRvIHJlbmRlclxuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHN0YXRpYyBkZWZhdWx0VGVtcGxhdGVOYW1lIChjb25maWcpIHtcbiAgICByZXR1cm4gJ2NhcmRzL2NhcmQnO1xuICB9XG5cbiAgc3RhdGljIGFyZUR1cGxpY2F0ZU5hbWVzQWxsb3dlZCAoKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn1cbiIsImltcG9ydCBGaWx0ZXJOb2RlRmFjdG9yeSBmcm9tICcuLi9maWx0ZXJzL2ZpbHRlcm5vZGVmYWN0b3J5JztcbmltcG9ydCBGaWx0ZXIgZnJvbSAnLi4vbW9kZWxzL2ZpbHRlcic7XG5pbXBvcnQgRmlsdGVyTWV0YWRhdGEgZnJvbSAnLi4vZmlsdGVycy9maWx0ZXJtZXRhZGF0YSc7XG5cbi8qKlxuICogQ29udmVydHMgYW4gYXJyYXkgb2Yge0BsaW5rIEFwcGxpZWRRdWVyeUZpbHRlcn1zIGludG8gZXF1aXZhbGVudCB7QGxpbmsgU2ltcGxlRmlsdGVyTm9kZX1zLlxuICogQHBhcmFtIHtBcnJheTxBcHBsaWVkUXVlcnlGaWx0ZXI+fSBubHBGaWx0ZXJzXG4gKiBAcmV0dXJucyB7QXJyYXk8U2ltcGxlRmlsdGVyTm9kZT59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb252ZXJ0TmxwRmlsdGVyc1RvRmlsdGVyTm9kZXMgKG5scEZpbHRlcnMpIHtcbiAgcmV0dXJuIG5scEZpbHRlcnMubWFwKG5scEZpbHRlciA9PiBGaWx0ZXJOb2RlRmFjdG9yeS5mcm9tKHtcbiAgICBmaWx0ZXI6IEZpbHRlci5mcm9tKG5scEZpbHRlci5maWx0ZXIpLFxuICAgIG1ldGFkYXRhOiBuZXcgRmlsdGVyTWV0YWRhdGEoe1xuICAgICAgZmllbGROYW1lOiBubHBGaWx0ZXIua2V5LFxuICAgICAgZGlzcGxheVZhbHVlOiBubHBGaWx0ZXIudmFsdWVcbiAgICB9KVxuICB9KSk7XG59XG5cbi8qKlxuICogRmxhdHRlbnMgYW4gYXJyYXkgb2Yge0BsaW5rIEZpbHRlck5vZGV9cyBpbnRvIGFuIGFycmF5XG4gKiBvZiB0aGVpciBjb25zdGl0dWVudCBsZWFmIHtAbGluayBTaW1wbGVGaWx0ZXJOb2RlfXMuXG4gKiBAcGFyYW0ge0FycmF5PEZpbHRlck5vZGU+fSBmaWx0ZXJOb2Rlc1xuICogQHJldHVybnMge0FycmF5PFNpbXBsZUZpbHRlck5vZGU+fVxuICovXG5leHBvcnQgZnVuY3Rpb24gZmxhdHRlbkZpbHRlck5vZGVzIChmaWx0ZXJOb2Rlcykge1xuICByZXR1cm4gZmlsdGVyTm9kZXMuZmxhdE1hcChmbiA9PiBmbi5nZXRTaW1wbGVEZXNjZW5kYW50cygpKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBnaXZlbiBhcnJheSBvZiB7QGxpbmsgRmlsdGVyTm9kZX1zLFxuICogcmVtb3ZpbmcgRmlsdGVyTm9kZXMgdGhhdCBhcmUgZW1wdHkgb3IgaGF2ZSBhIGZpZWxkIGlkIGxpc3RlZCBhcyBhIGhpZGRlbi5cbiAqIEBwYXJhbSB7QXJyYXk8RmlsdGVyTm9kZT59IGZpbHRlck5vZGVzXG4gKiBAcGFyYW0ge0FycmF5PHN0cmluZz59IGhpZGRlbkZpZWxkc1xuICogQHJldHVybnMge0FycmF5PEZpbHRlck5vZGU+fVxuICovXG5leHBvcnQgZnVuY3Rpb24gcHJ1bmVGaWx0ZXJOb2RlcyAoZmlsdGVyTm9kZXMsIGhpZGRlbkZpZWxkcykge1xuICByZXR1cm4gZmlsdGVyTm9kZXNcbiAgICAuZmlsdGVyKGZuID0+IHtcbiAgICAgIGNvbnN0IHsgZmllbGROYW1lLCBkaXNwbGF5VmFsdWUgfSA9IGZuLmdldE1ldGFkYXRhKCk7XG4gICAgICBpZiAoIWZpZWxkTmFtZSB8fCAhZGlzcGxheVZhbHVlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGZpZWxkSWQgPSBmbi5nZXRGaWx0ZXIoKS5nZXRGaWx0ZXJLZXkoKTtcbiAgICAgIHJldHVybiAhaGlkZGVuRmllbGRzLmluY2x1ZGVzKGZpZWxkSWQpO1xuICAgIH0pO1xufVxuIiwiLyoqIEBtb2R1bGUgQXBwbGllZEZpbHRlcnNDb21wb25lbnQgKi9cblxuaW1wb3J0IENvbXBvbmVudCBmcm9tICcuLi9jb21wb25lbnQnO1xuaW1wb3J0IFN0b3JhZ2VLZXlzIGZyb20gJy4uLy4uLy4uL2NvcmUvc3RvcmFnZS9zdG9yYWdla2V5cyc7XG5pbXBvcnQgRE9NIGZyb20gJy4uLy4uL2RvbS9kb20nO1xuaW1wb3J0IHsgZ3JvdXBBcnJheSB9IGZyb20gJy4uLy4uLy4uL2NvcmUvdXRpbHMvYXJyYXl1dGlscyc7XG5pbXBvcnQge1xuICBjb252ZXJ0TmxwRmlsdGVyc1RvRmlsdGVyTm9kZXMsXG4gIGZsYXR0ZW5GaWx0ZXJOb2RlcyxcbiAgcHJ1bmVGaWx0ZXJOb2Rlc1xufSBmcm9tICcuLi8uLi8uLi9jb3JlL3V0aWxzL2ZpbHRlcm5vZGV1dGlscyc7XG5cbmNvbnN0IERFRkFVTFRfQ09ORklHID0ge1xuICBzaG93UmVzdWx0Q291bnQ6IHRydWUsXG4gIHNob3dBcHBsaWVkRmlsdGVyczogdHJ1ZSxcbiAgc2hvd0ZpZWxkTmFtZXM6IGZhbHNlLFxuICByZXN1bHRzQ291bnRTZXBhcmF0b3I6ICd8JyxcbiAgdmVydGljYWxVUkw6IHVuZGVmaW5lZCxcbiAgc2hvd0NoYW5nZUZpbHRlcnM6IGZhbHNlLFxuICByZW1vdmFibGU6IGZhbHNlLFxuICBkZWxpbWl0ZXI6ICd8JyxcbiAgaXNVbml2ZXJzYWw6IGZhbHNlLFxuICBsYWJlbFRleHQ6ICdGaWx0ZXJzIGFwcGxpZWQgdG8gdGhpcyBzZWFyY2g6JyxcbiAgcmVtb3ZhYmxlTGFiZWxUZXh0OiAnUmVtb3ZlIHRoaXMgZmlsdGVyJyxcbiAgcmVzdWx0c0NvdW50VGVtcGxhdGU6ICcnLFxuICBoaWRkZW5GaWVsZHM6IFtdXG59O1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSZXN1bHRzSGVhZGVyQ29tcG9uZW50IGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IgKGNvbmZpZyA9IHt9LCBzeXN0ZW1Db25maWcgPSB7fSkge1xuICAgIHN1cGVyKHsgLi4uREVGQVVMVF9DT05GSUcsIC4uLmNvbmZpZyB9LCBzeXN0ZW1Db25maWcpO1xuXG4gICAgY29uc3QgZGF0YSA9IGNvbmZpZy5kYXRhIHx8IHt9O1xuXG4gICAgLyoqXG4gICAgICogVG90YWwgbnVtYmVyIG9mIHJlc3VsdHMuXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLnJlc3VsdHNDb3VudCA9IGRhdGEucmVzdWx0c0NvdW50IHx8IDA7XG5cbiAgICAvKipcbiAgICAgKiBOdW1iZXIgb2YgcmVzdWx0cyBkaXNwbGF5ZWQgb24gdGhlIHBhZ2UuXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLnJlc3VsdHNMZW5ndGggPSBkYXRhLnJlc3VsdHNMZW5ndGggfHwgMDtcblxuICAgIC8qKlxuICAgICAqIFRoZSBjb21waWxlZCBjdXN0b20gcmVzdWx0cyBjb3VudCB0ZW1wbGF0ZSwgaWYgdGhlIHVzZXIgc3BlY2lmaWVzIG9uZS5cbiAgICAgKiBAdHlwZSB7RnVuY3Rpb259XG4gICAgICovXG4gICAgdGhpcy5fY29tcGlsZWRSZXN1bHRzQ291bnRUZW1wbGF0ZSA9IHRoaXMuX3JlbmRlcmVyLmNvbXBpbGUodGhpcy5fY29uZmlnLnJlc3VsdHNDb3VudFRlbXBsYXRlKTtcblxuICAgIC8qKlxuICAgICAqIEFycmF5IG9mIG5scCBmaWx0ZXJzIGluIHRoZSBzZWFyY2ggcmVzcG9uc2UuXG4gICAgICogQHR5cGUge0FycmF5PEFwcGxpZWRRdWVyeUZpbHRlcj59XG4gICAgICovXG4gICAgdGhpcy5ubHBGaWx0ZXJOb2RlcyA9IGNvbnZlcnRObHBGaWx0ZXJzVG9GaWx0ZXJOb2RlcyhkYXRhLm5scEZpbHRlcnMgfHwgW10pO1xuXG4gICAgLyoqXG4gICAgICogVE9ETyAoU1BSLTI0NTUpOiBJZGVhbGx5LCB3ZSB3b3VsZCBiZSBhYmxlIHRvIHNldCBtb2R1bGVJZCB0byBEWU5BTUlDX0ZJTFRFUlMsIHRoZSBhY3R1YWwgZGF0YVxuICAgICAqIHdlIGFyZSBsaXN0ZW5pbmcgdG8gY2hhbmdlcyB0bywgaW5zdGVhZCBvZiB0aGlzIGJlc3Bva2UgUkVTVUxUU19IRUFERVIgc3RvcmFnZSBrZXkuXG4gICAgICogVGhlIGlzc3VlIGlzIHRoYXQgd2hlbiB0d28gY29tcG9uZW50cyBzaGFyZSBhIG1vZHVsZUlkLCBpZiB0aGF0IG1vZHVsZUlkIGxpc3RlbmVyIGlzIGV2ZXJcbiAgICAgKiB1bnJlZ2lzdGVyZWQgd2l0aCB0aGUgb2ZmKCkgbWV0aG9kLCBhbGwgbGlzdGVuZXJzIHRvIHRoYXQgbW9kdWxlSWQgYXJlIHVucmVnaXN0ZXJlZC5cbiAgICAgKiBXaXRoIGNoaWxkIGNvbXBvbmVudHMsIHRoaXMgaXMgc29tZXRoaW5nIHRoYXQgaGFwcGVucyB3aGVuZXZlciB0aGUgcGFyZW50IGNvbXBvbmVudCByZXJlbmRlcnMuXG4gICAgICovXG4gICAgdGhpcy5tb2R1bGVJZCA9IFN0b3JhZ2VLZXlzLlJFU1VMVFNfSEVBREVSO1xuICB9XG5cbiAgc3RhdGljIGFyZUR1cGxpY2F0ZU5hbWVzQWxsb3dlZCAoKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBvbk1vdW50ICgpIHtcbiAgICBjb25zdCByZW1vdmFibGVGaWx0ZXJUYWdzID1cbiAgICAgIERPTS5xdWVyeUFsbCh0aGlzLl9jb250YWluZXIsICcuanMteXh0LVJlc3VsdHNIZWFkZXItcmVtb3ZhYmxlRmlsdGVyVGFnJyk7XG4gICAgcmVtb3ZhYmxlRmlsdGVyVGFncy5mb3JFYWNoKHRhZyA9PiB7XG4gICAgICBET00ub24odGFnLCAnY2xpY2snLCAoKSA9PiB0aGlzLl9yZW1vdmVGaWx0ZXJUYWcodGFnKSk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQ2FsbCByZW1vdmUgY2FsbGJhY2sgZm9yIHRoZSB7QGxpbmsgRmlsdGVyTm9kZX0gY29ycmVzcG9uZGluZyB0byBhIHNwZWNpZmljXG4gICAqIHJlbW92YWJsZSBmaWx0ZXIgdGFnLlxuICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSB0YWdcbiAgICovXG4gIF9yZW1vdmVGaWx0ZXJUYWcgKHRhZykge1xuICAgIGNvbnN0IHsgZmlsdGVySWQgfSA9IHRhZy5kYXRhc2V0O1xuICAgIGNvbnN0IGZpbHRlck5vZGUgPSB0aGlzLmFwcGxpZWRGaWx0ZXJOb2Rlc1tmaWx0ZXJJZF07XG4gICAgZmlsdGVyTm9kZS5yZW1vdmUoKTtcbiAgICB0aGlzLmNvcmUudmVydGljYWxTZWFyY2godGhpcy5fY29uZmlnLnZlcnRpY2FsS2V5LCB7XG4gICAgICBzZXRRdWVyeVBhcmFtczogdHJ1ZSxcbiAgICAgIHJlc2V0UGFnaW5hdGlvbjogdHJ1ZSxcbiAgICAgIHVzZUZhY2V0czogdHJ1ZVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGN1cnJlbnRseSBhcHBsaWVkIG5scCBmaWx0ZXIgbm9kZXMsIHdpdGggbmxwIGZpbHRlciBub2RlcyB0aGF0XG4gICAqIGFyZSBkdXBsaWNhdGVzIG9mIG90aGVyIGZpbHRlciBub2RlcyByZW1vdmVkIG9yIGZpbHRlciBvbiBoaWRkZW5GaWVsZHMgcmVtb3ZlZC5cbiAgICogQHJldHVybnMge0FycmF5PEZpbHRlck5vZGU+fVxuICAgKi9cbiAgX2dldFBydW5lZE5scEZpbHRlck5vZGVzICgpIHtcbiAgICBjb25zdCBkdXBsaWNhdGVzUmVtb3ZlZCA9IHRoaXMubmxwRmlsdGVyTm9kZXMuZmlsdGVyKG5scE5vZGUgPT4ge1xuICAgICAgY29uc3QgaXNEdXBsaWNhdGUgPSB0aGlzLmFwcGxpZWRGaWx0ZXJOb2Rlcy5maW5kKGFwcGxpZWROb2RlID0+XG4gICAgICAgIGFwcGxpZWROb2RlLmhhc1NhbWVGaWx0ZXJBcyhubHBOb2RlKVxuICAgICAgKTtcbiAgICAgIHJldHVybiAhaXNEdXBsaWNhdGU7XG4gICAgfSk7XG4gICAgcmV0dXJuIHBydW5lRmlsdGVyTm9kZXMoZHVwbGljYXRlc1JlbW92ZWQsIHRoaXMuX2NvbmZpZy5oaWRkZW5GaWVsZHMpO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbWJpbmUgYWxsIG9mIHRoZSBhcHBsaWVkIGZpbHRlcnMgaW50byBhIGZvcm1hdCB0aGUgaGFuZGxlYmFyc1xuICAgKiB0ZW1wbGF0ZSBjYW4gd29yayB3aXRoLlxuICAgKiBLZXlzIGFyZSB0aGUgZmllbGROYW1lIG9mIHRoZSBmaWx0ZXIuIFZhbHVlcyBhcmUgYW4gYXJyYXkgb2Ygb2JqZWN0cyB3aXRoIGFcbiAgICogZGlzcGxheVZhbHVlIGFuZCBkYXRhRmlsdGVySWQuXG4gICAqIFRPRE8gKFNQUi0yMzUwKTogZ2l2ZSBldmVyeSBub2RlIGEgdW5pcXVlIGlkLCBhbmQgdXNlIHRoYXQgaW5zdGVhZCBvZiBpbmRleCBmb3JcbiAgICogZGF0YUZpbHRlcklkLlxuICAgKiBAcmV0dXJucyB7QXJyYXk8T2JqZWN0Pn1cbiAgICovXG4gIF9ncm91cEFwcGxpZWRGaWx0ZXJzICgpIHtcbiAgICBjb25zdCBnZXRGaWVsZE5hbWUgPSBmaWx0ZXJOb2RlID0+IGZpbHRlck5vZGUuZ2V0TWV0YWRhdGEoKS5maWVsZE5hbWU7XG4gICAgY29uc3QgcGFyc2VObHBGaWx0ZXJEaXNwbGF5ID0gZmlsdGVyTm9kZSA9PiAoe1xuICAgICAgZGlzcGxheVZhbHVlOiBmaWx0ZXJOb2RlLmdldE1ldGFkYXRhKCkuZGlzcGxheVZhbHVlXG4gICAgfSk7XG4gICAgY29uc3QgcGFyc2VSZW1vdmFibGVGaWx0ZXJEaXNwbGF5ID0gKGZpbHRlck5vZGUsIGluZGV4KSA9PiAoe1xuICAgICAgZGlzcGxheVZhbHVlOiBmaWx0ZXJOb2RlLmdldE1ldGFkYXRhKCkuZGlzcGxheVZhbHVlLFxuICAgICAgZGF0YUZpbHRlcklkOiBpbmRleCxcbiAgICAgIHJlbW92YWJsZTogdGhpcy5fY29uZmlnLnJlbW92YWJsZVxuICAgIH0pO1xuICAgIGNvbnN0IHJlbW92YWJsZU5vZGVzID0gZ3JvdXBBcnJheSh0aGlzLmFwcGxpZWRGaWx0ZXJOb2RlcywgZ2V0RmllbGROYW1lLCBwYXJzZVJlbW92YWJsZUZpbHRlckRpc3BsYXkpO1xuICAgIGNvbnN0IHBydW5lZE5scEZpbHRlck5vZGVzID0gdGhpcy5fZ2V0UHJ1bmVkTmxwRmlsdGVyTm9kZXMoKTtcbiAgICByZXR1cm4gZ3JvdXBBcnJheShwcnVuZWRObHBGaWx0ZXJOb2RlcywgZ2V0RmllbGROYW1lLCBwYXJzZU5scEZpbHRlckRpc3BsYXksIHJlbW92YWJsZU5vZGVzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGFuIGFycmF5IG9mIG9iamVjdCB0aGUgaGFuZGxlYmFycyBjYW4gdW5kZXJzdGFuZCBhbmQgcmVuZGVyXG4gICAqIHRoZSBhcHBsaWVkIGZpbHRlcnMgYmFyIGZyb20uIE91ciBoYW5kbGViYXJzIGNhbiBvbmx5IGxvb3AgdGhyb3VnaCBhcnJheXMsXG4gICAqIG5vdCBvYmplY3RzLCBzbyB3ZSBuZWVkIHRvIHJlZm9ybWF0IHRoZSBncm91cGVkIGFwcGxpZWQgZmlsdGVycy5cbiAgICogQHJldHVybnMge0FycmF5PE9iamVjdD59XG4gICAqL1xuICBfY3JlYXRlQXBwbGllZEZpbHRlcnNBcnJheSAoKSB7XG4gICAgY29uc3QgZ3JvdXBlZEZpbHRlcnMgPSB0aGlzLl9ncm91cEFwcGxpZWRGaWx0ZXJzKCk7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKGdyb3VwZWRGaWx0ZXJzKS5tYXAobGFiZWwgPT4gKHtcbiAgICAgIGxhYmVsOiBsYWJlbCxcbiAgICAgIGZpbHRlckRhdGFBcnJheTogZ3JvdXBlZEZpbHRlcnNbbGFiZWxdXG4gICAgfSkpO1xuICB9XG5cbiAgLyoqXG4gICAqIFB1bGxzIGFwcGxpZWQgZmlsdGVyIG5vZGVzIGZyb20ge0BsaW5rIEZpbHRlclJlZ2lzdHJ5fSwgdGhlbiByZXRyaXZlcyBhbiBhcnJheSBvZlxuICAgKiB0aGUgbGVhZiBub2RlcywgYW5kIHRoZW4gcmVtb3ZlcyBoaWRkZW4gb3IgZW1wdHkge0BsaW5rIEZpbHRlck5vZGV9cy4gVGhlbiBhcHBlbmRzXG4gICAqIHRoZSBjdXJyZW50bHkgYXBwbGllZCBubHAgZmlsdGVycy5cbiAgICovXG4gIF9jYWxjdWxhdGVBcHBsaWVkRmlsdGVyTm9kZXMgKCkge1xuICAgIGNvbnN0IGZpbHRlck5vZGVzID0gdGhpcy5jb3JlLmZpbHRlclJlZ2lzdHJ5LmdldEFsbEZpbHRlck5vZGVzKCk7XG4gICAgY29uc3Qgc2ltcGxlRmlsdGVyTm9kZXMgPSBmbGF0dGVuRmlsdGVyTm9kZXMoZmlsdGVyTm9kZXMpO1xuICAgIHJldHVybiBwcnVuZUZpbHRlck5vZGVzKHNpbXBsZUZpbHRlck5vZGVzLCB0aGlzLl9jb25maWcuaGlkZGVuRmllbGRzKTtcbiAgfVxuXG4gIHNldFN0YXRlIChkYXRhKSB7XG4gICAgY29uc3Qgb2Zmc2V0ID0gdGhpcy5jb3JlLmdsb2JhbFN0b3JhZ2UuZ2V0U3RhdGUoU3RvcmFnZUtleXMuU0VBUkNIX09GRlNFVCk7XG4gICAgdGhpcy5hcHBsaWVkRmlsdGVyTm9kZXMgPSB0aGlzLl9jYWxjdWxhdGVBcHBsaWVkRmlsdGVyTm9kZXMoKTtcbiAgICBjb25zdCBhcHBsaWVkRmlsdGVyc0FycmF5ID0gdGhpcy5fY3JlYXRlQXBwbGllZEZpbHRlcnNBcnJheSgpO1xuICAgIGNvbnN0IHNob3VsZFNob3dGaWx0ZXJzID0gYXBwbGllZEZpbHRlcnNBcnJheS5sZW5ndGggPiAwICYmIHRoaXMuX2NvbmZpZy5zaG93QXBwbGllZEZpbHRlcnM7XG4gICAgY29uc3QgcmVzdWx0c0NvdW50RGF0YSA9IHtcbiAgICAgIHJlc3VsdHNDb3VudDogdGhpcy5yZXN1bHRzQ291bnQsXG4gICAgICByZXN1bHRzQ291bnRTdGFydDogb2Zmc2V0ICsgMSxcbiAgICAgIHJlc3VsdHNDb3VudEVuZDogb2Zmc2V0ICsgdGhpcy5yZXN1bHRzTGVuZ3RoXG4gICAgfTtcbiAgICByZXR1cm4gc3VwZXIuc2V0U3RhdGUoe1xuICAgICAgLi4uZGF0YSxcbiAgICAgIC4uLnJlc3VsdHNDb3VudERhdGEsXG4gICAgICBzaG93UmVzdWx0U2VwYXJhdG9yOiB0aGlzLl9jb25maWcucmVzdWx0c0NvdW50U2VwYXJhdG9yICYmIHRoaXMuX2NvbmZpZy5zaG93UmVzdWx0Q291bnQgJiYgc2hvdWxkU2hvd0ZpbHRlcnMsXG4gICAgICBzaG91bGRTaG93RmlsdGVyczogc2hvdWxkU2hvd0ZpbHRlcnMsXG4gICAgICBhcHBsaWVkRmlsdGVyc0FycmF5OiBhcHBsaWVkRmlsdGVyc0FycmF5LFxuICAgICAgY3VzdG9tUmVzdWx0c0NvdW50OiB0aGlzLl9jb21waWxlZFJlc3VsdHNDb3VudFRlbXBsYXRlKHJlc3VsdHNDb3VudERhdGEpXG4gICAgfSk7XG4gIH1cblxuICBzdGF0aWMgZ2V0IHR5cGUgKCkge1xuICAgIHJldHVybiAnUmVzdWx0c0hlYWRlcic7XG4gIH1cblxuICAvKipcbiAgICogVGhlIHRlbXBsYXRlIHRvIHJlbmRlclxuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHN0YXRpYyBkZWZhdWx0VGVtcGxhdGVOYW1lIChjb25maWcpIHtcbiAgICByZXR1cm4gJ3Jlc3VsdHMvcmVzdWx0c2hlYWRlcic7XG4gIH1cbn1cbiIsIi8qKlxuICogVXNlZCB0byBwYXJzZSBjb25maWcgb3B0aW9ucywgZGVmYXVsdGluZyB0byBkaWZmZXJlbnQgc3lub255bXMgYW5kXG4gKiBmaW5hbGx5IGEgZGVmYXVsdCB2YWx1ZS4gT3B0aW9uIG5hbWVzIHdpdGggcGVyaW9kcyB3aWxsIGJlIHBhcnNlZFxuICogYXMgbXVsdGlwbGUgY2hpbGQgb2JqZWN0IGFjY2Vzc29ycywgaS5lLiB0cnlpbmcgdG8gYWNjZXNzICdmaXJzdC5zZWNvbmQub3B0aW9uJ1xuICogd2lsbCBmaXJzdCBsb29rIGZvciBjb25maWdbJ2ZpcnN0J11bJ3NlY29uZCddWydvcHRpb24nXS5cbiAqXG4gKiBUaGlzIGlzIG1vc3RseSBuZWVkZWQgZm9yIGJvb2xlYW4gY29uZmlnIHZhbHVlcywgc2luY2UgYm9vbGVhbiBvcGVyYXRvcnMsXG4gKiB3aGljaCB3ZSBjb21tb25seSB1c2UgZm9yIGRlZmF1bHRpbmcgY29uZmlnIG9wdGlvbnMsIGRvIG5vdCB3b3JrIHByb3Blcmx5XG4gKiBpbiB0aG9zZSBjYXNlcy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWdcbiAqIEBwYXJhbSB7QXJyYXk8c3RyaW5nPn1cbiAqIEBwYXJhbSB7YW55fSBkZWZhdWx0VmFsdWVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlZmF1bHRDb25maWdPcHRpb24gKGNvbmZpZywgc3lub255bXMsIGRlZmF1bHRWYWx1ZSkge1xuICBmb3IgKGxldCBuYW1lIG9mIHN5bm9ueW1zKSB7XG4gICAgY29uc3QgYWNjZXNzb3JzID0gbmFtZS5zcGxpdCgnLicpO1xuICAgIGxldCBwYXJlbnRDb25maWcgPSBjb25maWc7XG4gICAgbGV0IHNraXAgPSBmYWxzZTtcbiAgICBmb3IgKGxldCBjaGlsZENvbmZpZ0FjY2Vzc29yIG9mIGFjY2Vzc29ycy5zbGljZSgwLCAtMSkpIHtcbiAgICAgIGlmICghKGNoaWxkQ29uZmlnQWNjZXNzb3IgaW4gcGFyZW50Q29uZmlnKSkge1xuICAgICAgICBza2lwID0gdHJ1ZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBwYXJlbnRDb25maWcgPSBwYXJlbnRDb25maWdbY2hpbGRDb25maWdBY2Nlc3Nvcl07XG4gICAgfVxuICAgIGNvbnN0IGNvbmZpZ05hbWUgPSBhY2Nlc3NvcnNbYWNjZXNzb3JzLmxlbmd0aCAtIDFdO1xuICAgIGlmICghc2tpcCAmJiBjb25maWdOYW1lIGluIHBhcmVudENvbmZpZykge1xuICAgICAgcmV0dXJuIHBhcmVudENvbmZpZ1tjb25maWdOYW1lXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGRlZmF1bHRWYWx1ZTtcbn1cbiIsIi8qKiBAbW9kdWxlIFZlcnRpY2FsUmVzdWx0c0NvbXBvbmVudCAqL1xuXG5pbXBvcnQgQ29tcG9uZW50IGZyb20gJy4uL2NvbXBvbmVudCc7XG5cbmltcG9ydCBBbHRlcm5hdGl2ZVZlcnRpY2Fsc0NvbXBvbmVudCBmcm9tICcuL2FsdGVybmF0aXZldmVydGljYWxzY29tcG9uZW50JztcbmltcG9ydCBNYXBDb21wb25lbnQgZnJvbSAnLi4vbWFwL21hcGNvbXBvbmVudCc7XG5pbXBvcnQgUmVzdWx0c0NvbnRleHQgZnJvbSAnLi4vLi4vLi4vY29yZS9zdG9yYWdlL3Jlc3VsdHNjb250ZXh0JztcbmltcG9ydCBTdG9yYWdlS2V5cyBmcm9tICcuLi8uLi8uLi9jb3JlL3N0b3JhZ2Uvc3RvcmFnZWtleXMnO1xuaW1wb3J0IFNlYXJjaFN0YXRlcyBmcm9tICcuLi8uLi8uLi9jb3JlL3N0b3JhZ2Uvc2VhcmNoc3RhdGVzJztcbmltcG9ydCBDYXJkQ29tcG9uZW50IGZyb20gJy4uL2NhcmRzL2NhcmRjb21wb25lbnQnO1xuaW1wb3J0IFJlc3VsdHNIZWFkZXJDb21wb25lbnQgZnJvbSAnLi9yZXN1bHRzaGVhZGVyY29tcG9uZW50JztcbmltcG9ydCB7IHJlcGxhY2VVcmxQYXJhbXMsIGZpbHRlclBhcmFtc0ZvckV4cGVyaWVuY2VMaW5rIH0gZnJvbSAnLi4vLi4vLi4vY29yZS91dGlscy91cmx1dGlscyc7XG5pbXBvcnQgSWNvbnMgZnJvbSAnLi4vLi4vaWNvbnMvaW5kZXgnO1xuaW1wb3J0IHsgZGVmYXVsdENvbmZpZ09wdGlvbiB9IGZyb20gJy4uLy4uLy4uL2NvcmUvdXRpbHMvY29uZmlndXRpbHMnO1xuaW1wb3J0IHsgZ2V0VGFiT3JkZXIgfSBmcm9tICcuLi8uLi90b29scy90YWJvcmRlcic7XG5pbXBvcnQgU2VhcmNoUGFyYW1zIGZyb20gJy4uLy4uL2RvbS9zZWFyY2hwYXJhbXMnO1xuXG5jbGFzcyBWZXJ0aWNhbFJlc3VsdHNDb25maWcge1xuICBjb25zdHJ1Y3RvciAoY29uZmlnID0ge30pIHtcbiAgICBPYmplY3QuYXNzaWduKHRoaXMsIGNvbmZpZyk7XG5cbiAgICAvKipcbiAgICAgKiBpc1VuaXZlcnNhbCBpcyBzZXQgdG8gdHJ1ZSBpZiB0aGlzIGNvbXBvbmVudCBpcyBhZGRlZCBieSB0aGUgVW5pdmVyc2FsUmVzdWx0c0NvbXBvbmVudFxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5pc1VuaXZlcnNhbCA9IGNvbmZpZy5pc1VuaXZlcnNhbCB8fCBmYWxzZTtcblxuICAgIGNvbnN0IHBhcmVudE9wdHMgPSBjb25maWcuX3BhcmVudE9wdHMgfHwge307XG5cbiAgICAvKipcbiAgICAgKiBDdXN0b20gcmVuZGVyIGZ1bmN0aW9uXG4gICAgICogQHR5cGUge2Z1bmN0aW9ufVxuICAgICAqL1xuICAgIHRoaXMucmVuZGVySXRlbSA9IGNvbmZpZy5yZW5kZXJJdGVtIHx8IHBhcmVudE9wdHMucmVuZGVySXRlbTtcblxuICAgIC8qKlxuICAgICAqIEN1c3RvbSBpdGVtIHRlbXBsYXRlXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLml0ZW1UZW1wbGF0ZSA9IGNvbmZpZy5pdGVtVGVtcGxhdGUgfHwgcGFyZW50T3B0cy5pdGVtVGVtcGxhdGU7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgbWF4aW11bSBudW1iZXIgb2YgY29sdW1ucyB0byBkaXNwbGF5LCBzdXBwb3J0cyAxLCAyLCAzLCBvciA0LlxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy5tYXhOdW1iZXJPZkNvbHVtbnMgPSBjb25maWcubWF4TnVtYmVyT2ZDb2x1bW5zIHx8IDE7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgY29uZmlnIHRvIHBhc3MgdG8gdGhlIGNhcmRcbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAqL1xuICAgIHRoaXMuY2FyZCA9IGNvbmZpZy5jYXJkIHx8IHt9O1xuXG4gICAgLyoqXG4gICAgICogVmVydGljYWwgVVJMIGZvciB2aWV3IG1vcmUgbGlua1xuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgdGhpcy52ZXJ0aWNhbFVSTCA9IGNvbmZpZy52ZXJ0aWNhbFVSTDtcblxuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgdG8gZGlzcGxheSB0aGUgbnVtYmVyIG9mIHJlc3VsdHMuXG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICovXG4gICAgdGhpcy5zaG93UmVzdWx0Q291bnQgPSBjb25maWcuc2hvd1Jlc3VsdENvdW50ID09PSB1bmRlZmluZWQgPyB0cnVlIDogY29uZmlnLnNob3dSZXN1bHRDb3VudDtcblxuICAgIC8qKlxuICAgICAqIEEgY3VzdG9tIHJlc3VsdHMgY291bnQgdGVtcGxhdGUuXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLnJlc3VsdHNDb3VudFRlbXBsYXRlID0gY29uZmlnLnJlc3VsdHNDb3VudFRlbXBsYXRlIHx8ICcnO1xuXG4gICAgLyoqXG4gICAgICogQ29uZmlnIGZvciB0aGUgYXBwbGllZCBmaWx0ZXJzIGluIHRoZSByZXN1bHRzIGhlYWRlci5cbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAqL1xuICAgIHRoaXMuYXBwbGllZEZpbHRlcnMgPSB7XG4gICAgICAvKipcbiAgICAgICAqIElmIHByZXNlbnQsIHNob3cgdGhlIGZpbHRlcnMgdGhhdCB3ZXJlIHVsdGltYXRlbHkgYXBwbGllZCB0byB0aGlzIHF1ZXJ5XG4gICAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgICAqL1xuICAgICAgc2hvdzogZGVmYXVsdENvbmZpZ09wdGlvbihjb25maWcsIFsnYXBwbGllZEZpbHRlcnMuc2hvdycsICdzaG93QXBwbGllZEZpbHRlcnMnXSwgdHJ1ZSksXG5cbiAgICAgIC8qKlxuICAgICAgICogSWYgc2hvd1Jlc3VsdENvdW50IGFuZCBzaG93QXBwbGllZEZpbHRlcnMgYXJlIHRydWUsXG4gICAgICAgKiBkaXNwbGF5IHRoaXMgc2VwYXJhdG9yIGJldHdlZW4gdGhlIHJlc3VsdCBjb3VudCBhbmQgdGhlIGFwcGxpZWQgcXVlcnkgZmlsdGVyc1xuICAgICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgICAqL1xuICAgICAgcmVzdWx0c0NvdW50U2VwYXJhdG9yOiBkZWZhdWx0Q29uZmlnT3B0aW9uKGNvbmZpZywgWydhcHBsaWVkRmlsdGVycy5yZXN1bHRzQ291bnRTZXBhcmF0b3InLCAncmVzdWx0c0NvdW50U2VwYXJhdG9yJ10sICd8JyksXG5cbiAgICAgIC8qKlxuICAgICAgICogSWYgc2hvd0FwcGxpZWRGaWx0ZXJzIGlzIHRydWUsIHNob3cgdGhlIGZpZWxkIG5hbWUgaW4gdGhlIHN0cmluZyBmb2xsb3dlZCBieSBhIGNvbG9uLlxuICAgICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICAgKi9cbiAgICAgIHNob3dGaWVsZE5hbWVzOiBkZWZhdWx0Q29uZmlnT3B0aW9uKGNvbmZpZywgWydhcHBsaWVkRmlsdGVycy5zaG93RmllbGROYW1lcycsICdzaG93RmllbGROYW1lcyddLCBmYWxzZSksXG5cbiAgICAgIC8qKlxuICAgICAgICogQW55IGZpZWxkSWRzIGluIGhpZGRlbkZpZWxkcyB3aWxsIGJlIGhpZGRlbiBmcm9tIHRoZSBsaXN0IG9mIGFwcGllZCBmaWx0ZXJzLlxuICAgICAgICogQHR5cGUge0FycmF5PHN0cmluZz59XG4gICAgICAgKi9cbiAgICAgIGhpZGRlbkZpZWxkczogZGVmYXVsdENvbmZpZ09wdGlvbihjb25maWcsIFsnYXBwbGllZEZpbHRlcnMuaGlkZGVuRmllbGRzJywgJ2hpZGRlbkZpZWxkcyddLCBbJ2J1aWx0aW4uZW50aXR5VHlwZSddKSxcblxuICAgICAgLyoqXG4gICAgICAgKiBUaGUgY2hhcmFjdGVyIHRoYXQgc2hvdWxkIHNlcGFyYXRlIGVhY2ggZmllbGQgKGFuZCBpdHMgYXNzb2NpYXRlZCBmaWx0ZXJzKSB3aXRoaW4gdGhlIGFwcGxpZWQgZmlsdGVyIGJhclxuICAgICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgICAqL1xuICAgICAgZGVsaW1pdGVyOiBkZWZhdWx0Q29uZmlnT3B0aW9uKGNvbmZpZywgWydhcHBsaWVkRmlsdGVycy5kZWxpbWl0ZXInXSwgJ3wnKSxcblxuICAgICAgLyoqXG4gICAgICAgKiBJZiB0aGUgZmlsdGVycyBhcmUgc2hvd24sIHdoZXRoZXIgb3Igbm90IHRoZXkgc2hvdWxkIGJlIHJlbW92YWJsZSBmcm9tIHdpdGhpbiB0aGUgYXBwbGllZCBmaWx0ZXIgYmFyLlxuICAgICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICAgKi9cbiAgICAgIHJlbW92YWJsZTogZGVmYXVsdENvbmZpZ09wdGlvbihjb25maWcsIFsnYXBwbGllZEZpbHRlcnMucmVtb3ZhYmxlJ10sIGZhbHNlKSxcblxuICAgICAgLyoqXG4gICAgICAgKiBXaGV0aGVyIHRvIHNob3cgdGhlIGNoYW5nZSBmaWx0ZXJzIGxpbmsgb24gdW5pdmVyc2FsIHJlc3VsdHMuXG4gICAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgICAqKi9cbiAgICAgIHNob3dDaGFuZ2VGaWx0ZXJzOiBkZWZhdWx0Q29uZmlnT3B0aW9uKGNvbmZpZywgWydhcHBsaWVkRmlsdGVycy5zaG93Q2hhbmdlRmlsdGVycycsICdzaG93Q2hhbmdlRmlsdGVycyddLCBmYWxzZSksXG5cbiAgICAgIC8qKlxuICAgICAgICogVGhlIHRleHQgZm9yIHRoZSBjaGFuZ2UgZmlsdGVycyBsaW5rLlxuICAgICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgICAqL1xuICAgICAgY2hhbmdlRmlsdGVyc1RleHQ6IGRlZmF1bHRDb25maWdPcHRpb24oY29uZmlnLCBbJ2FwcGxpZWRGaWx0ZXJzLmNoYW5nZUZpbHRlcnNUZXh0JywgJ2NoYW5nZUZpbHRlcnNUZXh0J10pLFxuXG4gICAgICAvKipcbiAgICAgICAqIFRoZSBhcmlhLWxhYmVsIGdpdmVuIHRvIHRoZSBhcHBsaWVkIGZpbHRlcnMgYmFyLiBEZWZhdWx0cyB0byAnRmlsdGVycyBhcHBsaWVkIHRvIHRoaXMgc2VhcmNoOicuXG4gICAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAgICoqL1xuICAgICAgbGFiZWxUZXh0OiBkZWZhdWx0Q29uZmlnT3B0aW9uKGNvbmZpZywgWydhcHBsaWVkRmlsdGVycy5sYWJlbFRleHQnXSwgJ0ZpbHRlcnMgYXBwbGllZCB0byB0aGlzIHNlYXJjaDonKSxcblxuICAgICAgLyoqXG4gICAgICAgKiBUaGUgYXJpYS1sYWJlbCBnaXZlbiB0byB0aGUgcmVtb3ZhYmxlIGZpbHRlciBidXR0b25zLlxuICAgICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgICAqL1xuICAgICAgcmVtb3ZhYmxlTGFiZWxUZXh0OiBkZWZhdWx0Q29uZmlnT3B0aW9uKGNvbmZpZywgWydhcHBsaWVkRmlsdGVycy5yZW1vdmFibGVMYWJlbFRleHQnXSwgJ1JlbW92ZSB0aGlzIGZpbHRlcicpXG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFRleHQgZm9yIHRoZSB2aWV3IG1vcmUgYnV0dG9uLlxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgdGhpcy52aWV3TW9yZUxhYmVsID0gZGVmYXVsdENvbmZpZ09wdGlvbihjb25maWcsIFsndmlld01vcmVMYWJlbCcsICd2aWV3QWxsVGV4dCddLCAnVmlldyBNb3JlJyk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVmVydGljYWxSZXN1bHRzQ29tcG9uZW50IGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IgKGNvbmZpZyA9IHt9LCBzeXN0ZW1Db25maWcgPSB7fSkge1xuICAgIHN1cGVyKG5ldyBWZXJ0aWNhbFJlc3VsdHNDb25maWcoQVBQTFlfU1lOT05ZTVMoY29uZmlnKSksIHN5c3RlbUNvbmZpZyk7XG5cbiAgICBjb25zdCBub1Jlc3VsdHNDb25maWcgPSB0aGlzLl9jb25maWcubm9SZXN1bHRzIHx8XG4gICAgICB0aGlzLmNvcmUuZ2xvYmFsU3RvcmFnZS5nZXRTdGF0ZShTdG9yYWdlS2V5cy5OT19SRVNVTFRTX0NPTkZJRyk7XG4gICAgLyoqXG4gICAgICogQSBwYXJzZWQgdmVyc2lvbiBvZiB0aGUgbm9SZXN1bHRzIGNvbmZpZyBwcm92aWRlZCB0byB0aGUgY29tcG9uZW50LlxuICAgICAqIEFwcGxpZXMgc2Vuc2libGUgZGVmYXVsdHMgaWYgY2VydGFpbiB2YWx1ZXMgYXJlIG5vdCBzZXQuXG4gICAgICogQHR5cGUge09iamVjdH1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuX25vUmVzdWx0c0NvbmZpZyA9IE9iamVjdC5hc3NpZ24oXG4gICAgICB7IGRpc3BsYXlBbGxSZXN1bHRzOiBmYWxzZSwgdGVtcGxhdGU6ICcnIH0sIG5vUmVzdWx0c0NvbmZpZyk7XG5cbiAgICAvKipcbiAgICAgKiBCb29sZWFuIGluZGljYXRpbmcgaWYgbGVnYWN5IG5vIHJlc3VsdHMgZGlzcGxheSBzaG91bGQgYmUgdXNlZC5cbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuX3VzZUxlZ2FjeU5vUmVzdWx0cyA9IHRoaXMuX2NvbmZpZy5pc1VuaXZlcnNhbCB8fCAhbm9SZXN1bHRzQ29uZmlnO1xuXG4gICAgLyoqXG4gICAgICogX2Rpc3BsYXlBbGxSZXN1bHRzIGNvbnRyb2xzIGlmIGFsbCByZXN1bHRzIGZvciB0aGUgdmVydGljYWwgd2lsbCBkaXNwbGF5XG4gICAgICogd2hlbiB0aGVyZSBhcmUgbm8gcmVzdWx0cyBmb3IgYSBxdWVyeS5cbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuX2Rpc3BsYXlBbGxSZXN1bHRzID0gdGhpcy5fbm9SZXN1bHRzQ29uZmlnLmRpc3BsYXlBbGxSZXN1bHRzO1xuXG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIGEgY3VzdG9tIG5vIHJlc3VsdHMgdGVtcGxhdGUuXG4gICAgICpcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5fbm9SZXN1bHRzVGVtcGxhdGUgPSB0aGlzLl9ub1Jlc3VsdHNDb25maWcudGVtcGxhdGU7XG5cbiAgICB0aGlzLmNvcmUuZ2xvYmFsU3RvcmFnZS5vbigndXBkYXRlJywgU3RvcmFnZUtleXMuVkVSVElDQUxfUkVTVUxUUywgcmVzdWx0cyA9PiB7XG4gICAgICBpZiAocmVzdWx0cy5zZWFyY2hTdGF0ZSA9PT0gU2VhcmNoU3RhdGVzLlNFQVJDSF9DT01QTEVURSkge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHJlc3VsdHMpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVmVydGljYWwgY29uZmlnIGZyb20gY29uZmlnLCBpZiBub3QgcHJlc2VudCwgZmFsbCBiYWNrIHRvIGdsb2JhbCB2ZXJ0aWNhbFBhZ2VzQ29uZmlnXG4gICAgICogQHR5cGUge0FycmF5LjxvYmplY3Q+fVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5fdmVydGljYWxzQ29uZmlnID0gY29uZmlnLnZlcnRpY2FsUGFnZXMgfHwgdGhpcy5jb3JlLmdsb2JhbFN0b3JhZ2VcbiAgICAgIC5nZXRTdGF0ZShTdG9yYWdlS2V5cy5WRVJUSUNBTF9QQUdFU19DT05GSUcpXG4gICAgICAuZ2V0KCkgfHwgW107XG4gICAgLyoqXG4gICAgICogQHR5cGUge0FycmF5PFJlc3VsdD59XG4gICAgICovXG4gICAgdGhpcy5yZXN1bHRzID0gW107XG4gICAgdGhpcy5udW1Db2x1bW5zID0gdGhpcy5fY29uZmlnLm1heE51bWJlck9mQ29sdW1ucztcblxuICAgIC8qKlxuICAgICAqIENvbmZpZyBvcHRpb25zIHVzZWQgaW4gdGhlIHtAbGluayBSZXN1bHRzSGVhZGVyQ29tcG9uZW50fVxuICAgICAqL1xuICAgIHRoaXMucmVzdWx0c0hlYWRlck9wdHMgPSB7XG4gICAgICBzaG93RmllbGROYW1lczogdGhpcy5fY29uZmlnLmFwcGxpZWRGaWx0ZXJzLnNob3dGaWVsZE5hbWVzLFxuICAgICAgcmVzdWx0c0NvdW50U2VwYXJhdG9yOiB0aGlzLl9jb25maWcuYXBwbGllZEZpbHRlcnMucmVzdWx0c0NvdW50U2VwYXJhdG9yLFxuICAgICAgc2hvd0FwcGxpZWRGaWx0ZXJzOiB0aGlzLl9jb25maWcuYXBwbGllZEZpbHRlcnMuc2hvdyxcbiAgICAgIHNob3dDaGFuZ2VGaWx0ZXJzOiB0aGlzLl9jb25maWcuYXBwbGllZEZpbHRlcnMuc2hvd0NoYW5nZUZpbHRlcnMsXG4gICAgICBjaGFuZ2VGaWx0ZXJzVGV4dDogdGhpcy5fY29uZmlnLmFwcGxpZWRGaWx0ZXJzLmNoYW5nZUZpbHRlcnNUZXh0LFxuICAgICAgc2hvd1Jlc3VsdENvdW50OiB0aGlzLl9jb25maWcuc2hvd1Jlc3VsdENvdW50LFxuICAgICAgcmVtb3ZhYmxlOiB0aGlzLl9jb25maWcuYXBwbGllZEZpbHRlcnMucmVtb3ZhYmxlLFxuICAgICAgZGVsaW1pdGVyOiB0aGlzLl9jb25maWcuYXBwbGllZEZpbHRlcnMuZGVsaW1pdGVyLFxuICAgICAgbGFiZWxUZXh0OiB0aGlzLl9jb25maWcuYXBwbGllZEZpbHRlcnMubGFiZWxUZXh0LFxuICAgICAgcmVtb3ZhYmxlTGFiZWxUZXh0OiB0aGlzLl9jb25maWcuYXBwbGllZEZpbHRlcnMucmVtb3ZhYmxlTGFiZWxUZXh0LFxuICAgICAgaGlkZGVuRmllbGRzOiB0aGlzLl9jb25maWcuYXBwbGllZEZpbHRlcnMuaGlkZGVuRmllbGRzLFxuICAgICAgcmVzdWx0c0NvdW50VGVtcGxhdGU6IHRoaXMuX2NvbmZpZy5yZXN1bHRzQ291bnRUZW1wbGF0ZVxuICAgIH07XG4gIH1cblxuICBtb3VudCAoKSB7XG4gICAgaWYgKE9iamVjdC5rZXlzKHRoaXMuZ2V0U3RhdGUoKSkubGVuZ3RoID4gMCkge1xuICAgICAgc3VwZXIubW91bnQoKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBzdGF0aWMgYXJlRHVwbGljYXRlTmFtZXNBbGxvd2VkICgpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGdldFVuaXZlcnNhbFVybCAoKSB7XG4gICAgY29uc3QgdW5pdmVyc2FsQ29uZmlnID0gdGhpcy5fdmVydGljYWxzQ29uZmlnLmZpbmQoY29uZmlnID0+ICFjb25maWcudmVydGljYWxLZXkpIHx8IHt9O1xuICAgIGlmICghdW5pdmVyc2FsQ29uZmlnLnVybCkge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX2dldEV4cGVyaWVuY2VVUkwoXG4gICAgICB1bml2ZXJzYWxDb25maWcudXJsLFxuICAgICAgbmV3IFNlYXJjaFBhcmFtcyh3aW5kb3cubG9jYXRpb24uc2VhcmNoLnN1YnN0cmluZygxKSlcbiAgICApO1xuICB9XG5cbiAgZ2V0VmVydGljYWxVUkwgKGRhdGEgPSB7fSkge1xuICAgIGNvbnN0IHZlcnRpY2FsQ29uZmlnID0gdGhpcy5fdmVydGljYWxzQ29uZmlnLmZpbmQoXG4gICAgICBjb25maWcgPT4gY29uZmlnLnZlcnRpY2FsS2V5ID09PSB0aGlzLnZlcnRpY2FsS2V5XG4gICAgKSB8fCB7fTtcbiAgICBjb25zdCB2ZXJ0aWNhbFVSTCA9IHRoaXMuX2NvbmZpZy52ZXJ0aWNhbFVSTCB8fCB2ZXJ0aWNhbENvbmZpZy51cmwgfHxcbiAgICAgIGRhdGEudmVydGljYWxVUkwgfHwgdGhpcy52ZXJ0aWNhbEtleSArICcuaHRtbCc7XG5cbiAgICBjb25zdCBkYXRhVGFiT3JkZXIgPSB0aGlzLmNvcmUuZ2xvYmFsU3RvcmFnZS5nZXRTdGF0ZShTdG9yYWdlS2V5cy5OQVZJR0FUSU9OKVxuICAgICAgPyB0aGlzLmNvcmUuZ2xvYmFsU3RvcmFnZS5nZXRTdGF0ZShTdG9yYWdlS2V5cy5OQVZJR0FUSU9OKS50YWJPcmRlclxuICAgICAgOiBbXTtcbiAgICBjb25zdCB0YWJPcmRlciA9IGdldFRhYk9yZGVyKHRoaXMuX3ZlcnRpY2Fsc0NvbmZpZywgZGF0YVRhYk9yZGVyKTtcbiAgICBjb25zdCBwYXJhbXMgPSBuZXcgU2VhcmNoUGFyYW1zKHdpbmRvdy5sb2NhdGlvbi5zZWFyY2guc3Vic3RyaW5nKDEpKTtcbiAgICBwYXJhbXMuc2V0KCd0YWJPcmRlcicsIHRhYk9yZGVyKTtcblxuICAgIHJldHVybiB0aGlzLl9nZXRFeHBlcmllbmNlVVJMKHZlcnRpY2FsVVJMLCBwYXJhbXMpO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgcGFyYW1ldGVycyB0aGF0IGFyZSBkeW5hbWljYWxseSBzZXQuIFJlbW92ZXMgcGFyYW1ldGVycyBmb3IgZmFjZXRzLFxuICAgKiBmaWx0ZXJzLCBhbmQgcGFnaW5hdGlvbiwgd2hpY2ggc2hvdWxkIG5vdCBwZXJzaXN0IGFjcm9zcyB0aGUgZXhwZXJpZW5jZS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGJhc2VVcmwgVGhlIHVybCBhcHBlbmQgdGhlIGFwcHJvcHJpYXRlIHBhcmFtcyB0by4gTm90ZTpcbiAgICogICAgcGFyYW1zIGFscmVhZHkgb24gdGhlIGJhc2VVcmwgd2lsbCBiZSBzdHJpcHBlZFxuICAgKiBAcGFyYW0ge1NlYXJjaFBhcmFtc30gcGFyYW1zIFRoZSBwYXJhbWV0ZXJzIHRvIGluY2x1ZGUgaW4gdGhlIGV4cGVyaWVuY2UgVVJMXG4gICAqIEByZXR1cm4ge3N0cmluZ30gVGhlIGZvcm1hdHRlZCBleHBlcmllbmNlIFVSTCB3aXRoIGFwcHJvcHJpYXRlIHF1ZXJ5IHBhcmFtc1xuICAgKi9cbiAgX2dldEV4cGVyaWVuY2VVUkwgKGJhc2VVcmwsIHBhcmFtcykge1xuICAgIHBhcmFtcy5zZXQoU3RvcmFnZUtleXMuUVVFUlksIHRoaXMucXVlcnkpO1xuXG4gICAgY29uc3QgY29udGV4dCA9IHRoaXMuY29yZS5nbG9iYWxTdG9yYWdlLmdldFN0YXRlKFN0b3JhZ2VLZXlzLkFQSV9DT05URVhUKTtcbiAgICBpZiAoY29udGV4dCkge1xuICAgICAgcGFyYW1zLnNldChTdG9yYWdlS2V5cy5BUElfQ09OVEVYVCwgY29udGV4dCk7XG4gICAgfVxuICAgIGNvbnN0IHJlZmVycmVyUGFnZVVybCA9IHRoaXMuY29yZS5nbG9iYWxTdG9yYWdlLmdldFN0YXRlKFN0b3JhZ2VLZXlzLlJFRkVSUkVSX1BBR0VfVVJMKTtcbiAgICBpZiAocmVmZXJyZXJQYWdlVXJsICE9PSBudWxsKSB7XG4gICAgICBwYXJhbXMuc2V0KFN0b3JhZ2VLZXlzLlJFRkVSUkVSX1BBR0VfVVJMLCByZWZlcnJlclBhZ2VVcmwpO1xuICAgIH1cblxuICAgIGNvbnN0IGZpbHRlcmVkUGFyYW1zID0gZmlsdGVyUGFyYW1zRm9yRXhwZXJpZW5jZUxpbmsoXG4gICAgICBwYXJhbXMsXG4gICAgICB0eXBlcyA9PiB0aGlzLmNvbXBvbmVudE1hbmFnZXIuZ2V0Q29tcG9uZW50TmFtZXNGb3JDb21wb25lbnRUeXBlcyh0eXBlcylcbiAgICApO1xuXG4gICAgcmV0dXJuIHJlcGxhY2VVcmxQYXJhbXMoYmFzZVVybCwgZmlsdGVyZWRQYXJhbXMpO1xuICB9XG5cbiAgc2V0U3RhdGUgKGRhdGEgPSB7fSwgdmFsKSB7XG4gICAgLyoqXG4gICAgICogQHR5cGUge0FycmF5PFJlc3VsdD59XG4gICAgICovXG4gICAgdGhpcy5yZXN1bHRzID0gZGF0YS5yZXN1bHRzIHx8IFtdO1xuICAgIHRoaXMucmVzdWx0c0NvdW50ID0gZGF0YS5yZXN1bHRzQ291bnQ7XG4gICAgdGhpcy52ZXJ0aWNhbEtleSA9IGRhdGEudmVydGljYWxDb25maWdJZDtcbiAgICB0aGlzLnJlc3VsdHNDb250ZXh0ID0gZGF0YS5yZXN1bHRzQ29udGV4dDtcbiAgICBjb25zdCBzZWFyY2hTdGF0ZSA9IGRhdGEuc2VhcmNoU3RhdGUgfHwgU2VhcmNoU3RhdGVzLlBSRV9TRUFSQ0g7XG4gICAgY29uc3QgZGlzcGxheVJlc3VsdHNJZkV4aXN0ID0gdGhpcy5fY29uZmlnLmlzVW5pdmVyc2FsIHx8XG4gICAgICB0aGlzLl9kaXNwbGF5QWxsUmVzdWx0cyB8fFxuICAgICAgZGF0YS5yZXN1bHRzQ29udGV4dCA9PT0gUmVzdWx0c0NvbnRleHQuTk9STUFMO1xuICAgIHRoaXMucXVlcnkgPSB0aGlzLmNvcmUuZ2xvYmFsU3RvcmFnZS5nZXRTdGF0ZShTdG9yYWdlS2V5cy5RVUVSWSk7XG4gICAgcmV0dXJuIHN1cGVyLnNldFN0YXRlKE9iamVjdC5hc3NpZ24oeyByZXN1bHRzOiBbXSB9LCBkYXRhLCB7XG4gICAgICBpc1ByZVNlYXJjaDogc2VhcmNoU3RhdGUgPT09IFNlYXJjaFN0YXRlcy5QUkVfU0VBUkNILFxuICAgICAgaXNTZWFyY2hMb2FkaW5nOiBzZWFyY2hTdGF0ZSA9PT0gU2VhcmNoU3RhdGVzLlNFQVJDSF9MT0FESU5HLFxuICAgICAgaXNTZWFyY2hDb21wbGV0ZTogc2VhcmNoU3RhdGUgPT09IFNlYXJjaFN0YXRlcy5TRUFSQ0hfQ09NUExFVEUsXG4gICAgICBldmVudE9wdGlvbnM6IHRoaXMuZXZlbnRPcHRpb25zKCksXG4gICAgICB1bml2ZXJzYWxVcmw6IHRoaXMuZ2V0VW5pdmVyc2FsVXJsKCksXG4gICAgICB2ZXJ0aWNhbFVSTDogdGhpcy5nZXRWZXJ0aWNhbFVSTChkYXRhKSxcbiAgICAgIHF1ZXJ5OiB0aGlzLnF1ZXJ5LFxuICAgICAgY3VycmVudFZlcnRpY2FsTGFiZWw6IHRoaXMuX2N1cnJlbnRWZXJ0aWNhbExhYmVsLFxuICAgICAgcmVzdWx0c1ByZXNlbnQ6IGRpc3BsYXlSZXN1bHRzSWZFeGlzdCAmJiB0aGlzLnJlc3VsdHMubGVuZ3RoICE9PSAwLFxuICAgICAgc2hvd05vUmVzdWx0czogdGhpcy5yZXN1bHRzQ29udGV4dCA9PT0gUmVzdWx0c0NvbnRleHQuTk9fUkVTVUxUUyxcbiAgICAgIHBsYWNlaG9sZGVyczogbmV3IEFycmF5KHRoaXMuX2NvbmZpZy5tYXhOdW1iZXJPZkNvbHVtbnMgLSAxKSxcbiAgICAgIG51bUNvbHVtbnM6IE1hdGgubWluKHRoaXMuX2NvbmZpZy5tYXhOdW1iZXJPZkNvbHVtbnMsIHRoaXMucmVzdWx0cy5sZW5ndGgpLFxuICAgICAgdXNlTGVnYWN5Tm9SZXN1bHRzOiB0aGlzLl91c2VMZWdhY3lOb1Jlc3VsdHMsXG4gICAgICBpY29uSXNCdWlsdEluOiBJY29uc1t0aGlzLl9jb25maWcuaWNvbl0sXG4gICAgICBubHBGaWx0ZXJzOiBkYXRhLmFwcGxpZWRRdWVyeUZpbHRlcnMgfHwgW11cbiAgICB9KSwgdmFsKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBoZWxwZXIgdG8gY29uc3RydWN0IHRoZSBldmVudE9wdGlvbnMgb2JqZWN0IGZvciB0aGUgdmlldyBhbGwgbGlua1xuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKi9cbiAgZXZlbnRPcHRpb25zICgpIHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgdmVydGljYWxDb25maWdJZDogdGhpcy52ZXJ0aWNhbEtleVxuICAgIH0pO1xuICB9XG5cbiAgc3RhdGljIGdldCB0eXBlICgpIHtcbiAgICByZXR1cm4gJ1ZlcnRpY2FsUmVzdWx0cyc7XG4gIH1cblxuICAvKipcbiAgICogVGhlIHRlbXBsYXRlIHRvIHJlbmRlclxuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHN0YXRpYyBkZWZhdWx0VGVtcGxhdGVOYW1lIChjb25maWcpIHtcbiAgICByZXR1cm4gJ3Jlc3VsdHMvdmVydGljYWxyZXN1bHRzJztcbiAgfVxuXG4gIGFkZENoaWxkIChkYXRhLCB0eXBlLCBvcHRzKSB7XG4gICAgaWYgKHR5cGUgPT09IE1hcENvbXBvbmVudC50eXBlKSB7XG4gICAgICBjb25zdCBfb3B0cyA9IHtcbiAgICAgICAgbm9SZXN1bHRzOiB0aGlzLl9ub1Jlc3VsdHNDb25maWcsXG4gICAgICAgIC4uLnRoaXMuX2NvbmZpZy5tYXBDb25maWcsXG4gICAgICAgIC4uLm9wdHNcbiAgICAgIH07XG4gICAgICBjb25zdCBfZGF0YSA9IHtcbiAgICAgICAgcmVzdWx0c0NvbnRleHQ6IHRoaXMuZ2V0U3RhdGUoJ3Jlc3VsdHNDb250ZXh0JyksXG4gICAgICAgIG1hcDogZGF0YVxuICAgICAgfTtcbiAgICAgIHJldHVybiBzdXBlci5hZGRDaGlsZChfZGF0YSwgdHlwZSwgX29wdHMpO1xuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gQ2FyZENvbXBvbmVudC50eXBlKSB7XG4gICAgICBjb25zdCB1cGRhdGVkRGF0YSA9IHtcbiAgICAgICAgcmVzdWx0OiB0aGlzLnJlc3VsdHNbb3B0cy5faW5kZXhdLFxuICAgICAgICB2ZXJ0aWNhbEtleTogdGhpcy52ZXJ0aWNhbEtleVxuICAgICAgfTtcbiAgICAgIGNvbnN0IG5ld09wdHMgPSB7XG4gICAgICAgIHRhcmdldDogdGhpcy5fY29uZmlnLnRhcmdldCxcbiAgICAgICAgLi4udGhpcy5fY29uZmlnLmNhcmQsXG4gICAgICAgIGlzVW5pdmVyc2FsOiB0aGlzLl9jb25maWcuaXNVbml2ZXJzYWwsXG4gICAgICAgIHRlbXBsYXRlOiB0aGlzLl9jb25maWcuaXRlbVRlbXBsYXRlLFxuICAgICAgICByZW5kZXI6IHRoaXMuX2NvbmZpZy5yZW5kZXJJdGVtLFxuICAgICAgICBtb2RpZmllcjogdGhpcy5fY29uZmlnLm1vZGlmaWVyLFxuICAgICAgICAuLi5vcHRzXG4gICAgICB9O1xuICAgICAgcmV0dXJuIHN1cGVyLmFkZENoaWxkKHVwZGF0ZWREYXRhLCB0eXBlLCBuZXdPcHRzKTtcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09IEFsdGVybmF0aXZlVmVydGljYWxzQ29tcG9uZW50LnR5cGUpIHtcbiAgICAgIGNvbnN0IGhhc1Jlc3VsdHMgPSB0aGlzLnJlc3VsdHMgJiYgdGhpcy5yZXN1bHRzLmxlbmd0aCA+IDA7XG4gICAgICBkYXRhID0gdGhpcy5jb3JlLmdsb2JhbFN0b3JhZ2UuZ2V0U3RhdGUoU3RvcmFnZUtleXMuQUxURVJOQVRJVkVfVkVSVElDQUxTKTtcbiAgICAgIGNvbnN0IG5ld09wdHMgPSB7XG4gICAgICAgIHRlbXBsYXRlOiB0aGlzLl9ub1Jlc3VsdHNUZW1wbGF0ZSxcbiAgICAgICAgdW5pdmVyc2FsVXJsOiB0aGlzLmdldFVuaXZlcnNhbFVybCgpLFxuICAgICAgICB2ZXJ0aWNhbHNDb25maWc6IHRoaXMuX3ZlcnRpY2Fsc0NvbmZpZyxcbiAgICAgICAgaXNTaG93aW5nUmVzdWx0czogdGhpcy5fZGlzcGxheUFsbFJlc3VsdHMgJiYgaGFzUmVzdWx0cyxcbiAgICAgICAgLi4ub3B0c1xuICAgICAgfTtcbiAgICAgIHJldHVybiBzdXBlci5hZGRDaGlsZChkYXRhLCB0eXBlLCBuZXdPcHRzKTtcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09IFJlc3VsdHNIZWFkZXJDb21wb25lbnQudHlwZSkge1xuICAgICAgY29uc3QgcmVzdWx0c0hlYWRlckRhdGEgPSB7XG4gICAgICAgIHJlc3VsdHNMZW5ndGg6IHRoaXMucmVzdWx0cy5sZW5ndGgsXG4gICAgICAgIHJlc3VsdHNDb3VudDogdGhpcy5yZXN1bHRzQ291bnQsXG4gICAgICAgIG5scEZpbHRlcnM6IHRoaXMuZ2V0U3RhdGUoJ25scEZpbHRlcnMnKSxcbiAgICAgICAgLi4uZGF0YVxuICAgICAgfTtcbiAgICAgIGNvbnN0IF9vcHRzID0geyAuLi5vcHRzIH07XG4gICAgICBpZiAodGhpcy5yZXN1bHRzQ29udGV4dCA9PT0gUmVzdWx0c0NvbnRleHQuTk9fUkVTVUxUUykge1xuICAgICAgICBfb3B0cy5zaG93QXBwbGllZEZpbHRlcnMgPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzdXBlci5hZGRDaGlsZChyZXN1bHRzSGVhZGVyRGF0YSwgdHlwZSwge1xuICAgICAgICBpc1VuaXZlcnNhbDogdGhpcy5fY29uZmlnLmlzVW5pdmVyc2FsLFxuICAgICAgICB2ZXJ0aWNhbFVSTDogdGhpcy5nZXRWZXJ0aWNhbFVSTCgpLFxuICAgICAgICB2ZXJ0aWNhbEtleTogdGhpcy52ZXJ0aWNhbEtleSxcbiAgICAgICAgLi4udGhpcy5yZXN1bHRzSGVhZGVyT3B0cyxcbiAgICAgICAgLi4uX29wdHNcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gc3VwZXIuYWRkQ2hpbGQoZGF0YSwgdHlwZSwgb3B0cyk7XG4gIH1cbn1cblxuY29uc3QgQVBQTFlfU1lOT05ZTVMgPSAoY29uZmlnKSA9PiAoe1xuICBpY29uOiBjb25maWcuc2VjdGlvblRpdGxlSWNvbk5hbWUgfHwgY29uZmlnLnNlY3Rpb25UaXRsZUljb25VcmwsXG4gIHRpdGxlOiBjb25maWcuc2VjdGlvblRpdGxlLFxuICAuLi5jb25maWdcbn0pO1xuIiwiLyoqIEBtb2R1bGUgQWNjb3JkaW9uUmVzdWx0c0NvbXBvbmVudCAqL1xuaW1wb3J0IFZlcnRpY2FsUmVzdWx0c0NvbXBvbmVudCBmcm9tICcuL3ZlcnRpY2FscmVzdWx0c2NvbXBvbmVudCc7XG5pbXBvcnQgRE9NIGZyb20gJy4uLy4uL2RvbS9kb20nO1xuaW1wb3J0IEFuYWx5dGljc0V2ZW50IGZyb20gJy4uLy4uLy4uL2NvcmUvYW5hbHl0aWNzL2FuYWx5dGljc2V2ZW50JztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQWNjb3JkaW9uUmVzdWx0c0NvbXBvbmVudCBleHRlbmRzIFZlcnRpY2FsUmVzdWx0c0NvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yIChjb25maWcgPSB7fSwgc3lzdGVtQ29uZmlnID0ge30pIHtcbiAgICBzdXBlcihjb25maWcsIHN5c3RlbUNvbmZpZyk7XG5cbiAgICAvKipcbiAgICAgKiBiYXNlIHNlbGVjdG9yIHRvIHVzZSB3aGVuIGZpbmRpbmcgRE9NIHRhcmdldHNcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMuX3NlbGVjdG9yQmFzZSA9IGNvbmZpZy5zZWxlY3RvckJhc2UgfHwgJy5qcy15eHQtQWNjb3JkaW9uUmVzdWx0JztcblxuICAgIC8qKlxuICAgICAqIGNvbGxhcHNlZCBzdGF0ZSBjbGFzc1xuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgdGhpcy5jb2xsYXBzZWRDbGFzcyA9IGNvbmZpZy5jb2xsYXBzZWRDbGFzcyB8fCAnaXMtY29sbGFwc2VkJztcblxuICAgIC8qKlxuICAgICAqIHZlcnRpY2FsIGNvbmZpZyBpZCBpcyByZXF1aXJlZCBmb3IgYW5hbHl0aWNzXG4gICAgICogQHR5cGUge3N0cmluZ3xudWxsfVxuICAgICAqL1xuICAgIHRoaXMudmVydGljYWxDb25maWdJZCA9IGNvbmZpZy52ZXJ0aWNhbENvbmZpZ0lkIHx8IGNvbmZpZy5fcGFyZW50T3B0cy52ZXJ0aWNhbENvbmZpZ0lkIHx8IG51bGw7XG4gIH1cblxuICAvKipcbiAgICogdGhlIGNvbXBvbmVudCB0eXBlXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgc3RhdGljIGdldCB0eXBlICgpIHtcbiAgICByZXR1cm4gJ0FjY29yZGlvblJlc3VsdHMnO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSB0ZW1wbGF0ZSB0byByZW5kZXJcbiAgICogQHJldHVybnMge3N0cmluZ31cbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBzdGF0aWMgZGVmYXVsdFRlbXBsYXRlTmFtZSAoY29uZmlnKSB7XG4gICAgcmV0dXJuICdyZXN1bHRzL3Jlc3VsdHNhY2NvcmRpb24nO1xuICB9XG5cbiAgLyoqXG4gICAqIG92ZXJyaWRlcyBvbk1vdW50IHRvIGFkZCBiaW5kaW5ncyB0byBjaGFuZ2UgdGhlIGhlaWdodCBvbiBjbGlja1xuICAgKiBAcmV0dXJucyB7QWNjb3JkaW9uUmVzdWx0c0NvbXBvbmVudH1cbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBvbk1vdW50ICgpIHtcbiAgICBzdXBlci5vbk1vdW50KCk7XG5cbiAgICAvLyBOT1RFKGFtdWxsaW5ncyk6IFRoaXMgaXMgYSBoYWNrLCBzaW5jZSBjdXJyZW50bHkgY29tcG9uZW50cyB3aXRoIHNpYmxpbmdzXG4gICAgLy8gaGF2ZSBubyB3YXkgb2YgcmVmZXJyaW5nIHRvIHRoZWlyIG93biBlbGVtZW50LiBXZSBoYXZlIHRvIGdyYWIgdGhlIGZpcnN0XG4gICAgLy8gZWxlbWVudCBzaW5jZSBzZWN0aW9ucyBnZXQgYWRkZWQgaW4gcmV2ZXJzZS5cbiAgICBjb25zdCBzZWxmRWwgPSB0aGlzLl9jb250YWluZXIuZmlyc3RFbGVtZW50Q2hpbGQ7XG5cbiAgICBjb25zdCBhY2NvcmRpb25FbHMgPSBET00ucXVlcnlBbGwoc2VsZkVsLCB0aGlzLl9zZWxlY3RvckJhc2UpO1xuICAgIGFjY29yZGlvbkVscy5mb3JFYWNoKChhY2NvcmRpb25FbCkgPT4ge1xuICAgICAgY29uc3QgdG9nZ2xlRWwgPSBET00ucXVlcnkoYWNjb3JkaW9uRWwsIHRoaXMudG9nZ2xlU2VsZWN0b3IoKSk7XG4gICAgICBjb25zdCBjb250ZW50RWwgPSBET00ucXVlcnkoYWNjb3JkaW9uRWwsIHRoaXMuYm9keVNlbGVjdG9yKCkpO1xuICAgICAgdGhpcy5jaGFuZ2VIZWlnaHQoY29udGVudEVsLCBhY2NvcmRpb25FbCk7XG4gICAgICB0b2dnbGVFbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgdGhpcy5oYW5kbGVDbGljayhhY2NvcmRpb25FbCwgdG9nZ2xlRWwsIGNvbnRlbnRFbCk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgc2V0U3RhdGUgKGRhdGEpIHtcbiAgICByZXR1cm4gc3VwZXIuc2V0U3RhdGUoT2JqZWN0LmFzc2lnbih7fSwgZGF0YSwge1xuICAgICAgbW9kaWZpZXI6IHRoaXMudmVydGljYWxDb25maWdJZFxuICAgIH0pKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBjbGljayBoYW5kbGVyIGZvciB0aGUgYWNjb3JkaW9uIHRvZ2dsZSBidXR0b25cbiAgICogQHBhcmFtIHdyYXBwZXJFbCB7SFRNTEVsZW1lbnR9IHRoZSB0b2dnbGUgY29udGFpbmVyXG4gICAqIEBwYXJhbSB0b2dnbGVFbCB7SFRNTEVsZW1lbnR9IHRoZSBidXR0b25cbiAgICogQHBhcmFtIGNvbnRlbnRFbCB7SFRNTEVsZW1lbnR9IHRoZSB0b2dnbGUgdGFyZ2V0XG4gICAqL1xuICBoYW5kbGVDbGljayAod3JhcHBlckVsLCB0b2dnbGVFbCwgY29udGVudEVsKSB7XG4gICAgY29uc3QgZXZlbnQgPSBuZXcgQW5hbHl0aWNzRXZlbnQodGhpcy5pc0NvbGxhcHNlZCh3cmFwcGVyRWwpID8gJ1JPV19FWFBBTkQnIDogJ1JPV19DT0xMQVBTRScpXG4gICAgICAuYWRkT3B0aW9ucyh7XG4gICAgICAgIHZlcnRpY2FsQ29uZmlnSWQ6IHRoaXMudmVydGljYWxDb25maWdJZCxcbiAgICAgICAgZW50aXR5SWQ6IHRvZ2dsZUVsLmRhdGFzZXQuZW50aXR5SWRcbiAgICAgIH0pO1xuICAgIHdyYXBwZXJFbC5jbGFzc0xpc3QudG9nZ2xlKHRoaXMuY29sbGFwc2VkQ2xhc3MpO1xuICAgIHRoaXMuY2hhbmdlSGVpZ2h0KGNvbnRlbnRFbCwgd3JhcHBlckVsKTtcbiAgICB0b2dnbGVFbC5zZXRBdHRyaWJ1dGUoJ2FyaWEtZXhwYW5kZWQnLCB0aGlzLmlzQ29sbGFwc2VkKHdyYXBwZXJFbCkgPyAnZmFsc2UnIDogJ3RydWUnKTtcbiAgICB0aGlzLmFuYWx5dGljc1JlcG9ydGVyLnJlcG9ydChldmVudCk7XG4gIH1cblxuICAvKipcbiAgICogcmV0dXJucyB0cnVlIGlmIHRoZSBlbGVtZW50IGlzIGN1cnJlbnRseSBjb2xsYXBzZWRcbiAgICogQHBhcmFtIHdyYXBwZXJFbCB7SFRNTEVsZW1lbnR9IHRoZSB0b2dnbGUgY29udGFpbmVyXG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgaXNDb2xsYXBzZWQgKHdyYXBwZXJFbCkge1xuICAgIGlmICghd3JhcHBlckVsKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHdyYXBwZXJFbC5jbGFzc0xpc3QuY29udGFpbnModGhpcy5jb2xsYXBzZWRDbGFzcyk7XG4gIH1cblxuICAvKipcbiAgICogdG9nZ2xlcyB0aGUgaGVpZ2h0IGJldHdlZW4gMCBhbmQgdGhlIGNvbnRlbnQgaGVpZ2h0IGZvciBzbW9vdGggYW5pbWF0aW9uXG4gICAqIEBwYXJhbSB0YXJnZXRFbCB7SFRNTEVsZW1lbnR9XG4gICAqIEBwYXJhbSB3cmFwcGVyRWwge0hUTUxFbGVtZW50fVxuICAgKi9cbiAgY2hhbmdlSGVpZ2h0ICh0YXJnZXRFbCwgd3JhcHBlckVsKSB7XG4gICAgdGFyZ2V0RWwuc3R5bGUuaGVpZ2h0ID0gYCR7dGhpcy5pc0NvbGxhcHNlZCh3cmFwcGVyRWwpID8gMCA6IHRhcmdldEVsLnNjcm9sbEhlaWdodH1weGA7XG4gIH1cblxuICAvKipcbiAgICogaGVscGVyIGZvciBjb21wb3NpbmcgY2hpbGQgZWxlbWVudCBzZWxlY3RvcnNcbiAgICogQHBhcmFtIGNoaWxkIHtzdHJpbmd9XG4gICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAqL1xuICBidWlsZFNlbGVjdG9yIChjaGlsZCkge1xuICAgIHJldHVybiBgJHt0aGlzLl9zZWxlY3RvckJhc2V9JHtjaGlsZH1gO1xuICB9XG5cbiAgLyoqXG4gICAqIGhlbHBlciBmb3IgdGhlIHRvZ2dsZSBidXR0b24gc2VsZWN0b3JcbiAgICogQHJldHVybnMge3N0cmluZ31cbiAgICovXG4gIHRvZ2dsZVNlbGVjdG9yICgpIHtcbiAgICByZXR1cm4gdGhpcy5idWlsZFNlbGVjdG9yKCctdG9nZ2xlJyk7XG4gIH1cblxuICAvKipcbiAgICogaGVscGVyIGZvciB0aGUgY29udGVudCBlbGVtZW50IHNlbGVjdG9yXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAqL1xuICBib2R5U2VsZWN0b3IgKCkge1xuICAgIHJldHVybiB0aGlzLmJ1aWxkU2VsZWN0b3IoJy1ib2R5Jyk7XG4gIH1cbn1cbiIsIi8qKiBAbW9kdWxlIFVuaXZlcnNhbFJlc3VsdHNDb21wb25lbnQgKi9cblxuaW1wb3J0IENvbXBvbmVudCBmcm9tICcuLi9jb21wb25lbnQnO1xuXG5pbXBvcnQgU3RvcmFnZUtleXMgZnJvbSAnLi4vLi4vLi4vY29yZS9zdG9yYWdlL3N0b3JhZ2VrZXlzJztcbmltcG9ydCBTZWFyY2hTdGF0ZXMgZnJvbSAnLi4vLi4vLi4vY29yZS9zdG9yYWdlL3NlYXJjaHN0YXRlcyc7XG5pbXBvcnQgQWNjb3JkaW9uUmVzdWx0c0NvbXBvbmVudCBmcm9tICcuL2FjY29yZGlvbnJlc3VsdHNjb21wb25lbnQuanMnO1xuaW1wb3J0IHsgZGVmYXVsdENvbmZpZ09wdGlvbiB9IGZyb20gJy4uLy4uLy4uL2NvcmUvdXRpbHMvY29uZmlndXRpbHMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBVbml2ZXJzYWxSZXN1bHRzQ29tcG9uZW50IGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IgKGNvbmZpZyA9IHt9LCBzeXN0ZW1Db25maWcgPSB7fSkge1xuICAgIHN1cGVyKGNvbmZpZywgc3lzdGVtQ29uZmlnKTtcbiAgICB0aGlzLm1vZHVsZUlkID0gU3RvcmFnZUtleXMuVU5JVkVSU0FMX1JFU1VMVFM7XG4gICAgdGhpcy5fYXBwbGllZEZpbHRlcnMgPSB7XG4gICAgICBzaG93OiB0cnVlLFxuICAgICAgc2hvd0ZpZWxkTmFtZXM6IGZhbHNlLFxuICAgICAgaGlkZGVuRmllbGRzOiBbJ2J1aWx0aW4uZW50aXR5VHlwZSddLFxuICAgICAgcmVzdWx0c0NvdW50U2VwYXJhdG9yOiAnfCcsXG4gICAgICBzaG93Q2hhbmdlRmlsdGVyczogZmFsc2UsXG4gICAgICBkZWxpbWl0ZXI6ICd8JyxcbiAgICAgIGxhYmVsVGV4dDogJ0ZpbHRlcnMgYXBwbGllZCB0byB0aGlzIHNlYXJjaDonLFxuICAgICAgLi4uY29uZmlnLmFwcGxpZWRGaWx0ZXJzXG4gICAgfTtcblxuICAgIHRoaXMuY29yZS5nbG9iYWxTdG9yYWdlLm9uKCd1cGRhdGUnLCBTdG9yYWdlS2V5cy5BUElfQ09OVEVYVCwgKCkgPT4ge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh0aGlzLmNvcmUuZ2xvYmFsU3RvcmFnZS5nZXRTdGF0ZShTdG9yYWdlS2V5cy5VTklWRVJTQUxfUkVTVUxUUykgfHwge30pO1xuICAgIH0pO1xuICB9XG5cbiAgc3RhdGljIGdldCB0eXBlICgpIHtcbiAgICByZXR1cm4gJ1VuaXZlcnNhbFJlc3VsdHMnO1xuICB9XG5cbiAgc3RhdGljIGRlZmF1bHRUZW1wbGF0ZU5hbWUgKGNvbmZpZykge1xuICAgIHJldHVybiAncmVzdWx0cy91bml2ZXJzYWxyZXN1bHRzJztcbiAgfVxuXG4gIHN0YXRpYyBhcmVEdXBsaWNhdGVOYW1lc0FsbG93ZWQgKCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgc2V0U3RhdGUgKGRhdGEsIHZhbCkge1xuICAgIGNvbnN0IHNlY3Rpb25zID0gZGF0YS5zZWN0aW9ucyB8fCBbXTtcbiAgICBjb25zdCBzZWFyY2hTdGF0ZSA9IGRhdGEuc2VhcmNoU3RhdGUgfHwgU2VhcmNoU3RhdGVzLlBSRV9TRUFSQ0g7XG4gICAgcmV0dXJuIHN1cGVyLnNldFN0YXRlKE9iamVjdC5hc3NpZ24oZGF0YSwge1xuICAgICAgaXNQcmVTZWFyY2g6IHNlYXJjaFN0YXRlID09PSBTZWFyY2hTdGF0ZXMuUFJFX1NFQVJDSCxcbiAgICAgIGlzU2VhcmNoTG9hZGluZzogc2VhcmNoU3RhdGUgPT09IFNlYXJjaFN0YXRlcy5TRUFSQ0hfTE9BRElORyxcbiAgICAgIGlzU2VhcmNoQ29tcGxldGU6IHNlYXJjaFN0YXRlID09PSBTZWFyY2hTdGF0ZXMuU0VBUkNIX0NPTVBMRVRFLFxuICAgICAgc2hvd05vUmVzdWx0czogc2VjdGlvbnMubGVuZ3RoID09PSAwLFxuICAgICAgcXVlcnk6IHRoaXMuY29yZS5nbG9iYWxTdG9yYWdlLmdldFN0YXRlKFN0b3JhZ2VLZXlzLlFVRVJZKSxcbiAgICAgIHNlY3Rpb25zOiBzZWN0aW9uc1xuICAgIH0sIHZhbCkpO1xuICB9XG5cbiAgYWRkQ2hpbGQgKGRhdGEgPSB7fSwgdHlwZSwgb3B0cykge1xuICAgIGNvbnN0IHZlcnRpY2FscyA9IHRoaXMuX2NvbmZpZy52ZXJ0aWNhbHMgfHwgdGhpcy5fY29uZmlnLmNvbmZpZyB8fCB7fTtcbiAgICBjb25zdCB2ZXJ0aWNhbEtleSA9IGRhdGEudmVydGljYWxDb25maWdJZDtcbiAgICBjb25zdCBjaGlsZE9wdHMgPSB7XG4gICAgICAuLi5vcHRzLFxuICAgICAgLi4uVW5pdmVyc2FsUmVzdWx0c0NvbXBvbmVudC5nZXRDaGlsZENvbmZpZyhcbiAgICAgICAgdmVydGljYWxLZXksIHZlcnRpY2Fsc1t2ZXJ0aWNhbEtleV0gfHwge30sIHRoaXMuX2FwcGxpZWRGaWx0ZXJzKVxuICAgIH07XG4gICAgY29uc3QgY2hpbGRUeXBlID0gY2hpbGRPcHRzLnVzZUFjY29yZGlvbiA/IEFjY29yZGlvblJlc3VsdHNDb21wb25lbnQudHlwZSA6IHR5cGU7XG4gICAgcmV0dXJuIHN1cGVyLmFkZENoaWxkKGRhdGEsIGNoaWxkVHlwZSwgY2hpbGRPcHRzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBcHBsaWVzIHN5bm9ueW1zIGFuZCBkZWZhdWx0IGNvbmZpZyBmb3IgYSB2ZXJ0aWNhbCBpbiB1bml2ZXJzYWwgcmVzdWx0cy5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHZlcnRpY2FsS2V5XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWdcbiAgICogQHBhcmFtIHtPYmplY3R9IHRvcExldmVsQXBwbGllZEZpbHRlcnNcbiAgICogQHJldHVybnMge09iamVjdH1cbiAgICovXG4gIHN0YXRpYyBnZXRDaGlsZENvbmZpZyAodmVydGljYWxLZXksIGNvbmZpZywgdG9wTGV2ZWxBcHBsaWVkRmlsdGVycykge1xuICAgIHJldHVybiB7XG4gICAgICAvLyBUZWxscyB2ZXJ0aWNhbCByZXN1bHRzIGl0IGlzIGluIGEgdW5pdmVyc2FsIHJlc3VsdHMgcGFnZS5cbiAgICAgIGlzVW5pdmVyc2FsOiB0cnVlLFxuICAgICAgLy8gTGFiZWwgZm9yIHRoZSB2ZXJ0aWNhbCBpbiB0aGUgdGl0bGViYXIuXG4gICAgICB0aXRsZTogY29uZmlnLnNlY3Rpb25UaXRsZSB8fCB2ZXJ0aWNhbEtleSxcbiAgICAgIC8vIEljb24gaW4gdGhlIHRpdGxlYmFyXG4gICAgICBpY29uOiBjb25maWcuc2VjdGlvblRpdGxlSWNvbk5hbWUgfHwgY29uZmlnLnNlY3Rpb25UaXRsZUljb25VcmwgfHwgJ3N0YXInLFxuICAgICAgLy8gVXJsIHRoYXQgbGlua3MgdG8gdGhlIHZlcnRpY2FsIHNlYXJjaCBmb3IgdGhpcyB2ZXJ0aWNhbC5cbiAgICAgIHZlcnRpY2FsVVJMOiBjb25maWcudXJsLFxuICAgICAgLy8gU2hvdyBhIHZpZXcgbW9yZSBsaW5rIGJ5IGRlZmF1bHQsIHdoaWNoIGFsc28gbGlua3MgdG8gdmVydGljYWxVUkwuXG4gICAgICB2aWV3TW9yZTogdHJ1ZSxcbiAgICAgIC8vIEJ5IGRlZmF1bHQsIHRoZSB2aWV3IG1vcmUgbGluayBoYXMgYSBsYWJlbCBvZiAnVmlldyBNb3JlJy5cbiAgICAgIHZpZXdNb3JlTGFiZWw6IGRlZmF1bHRDb25maWdPcHRpb24oY29uZmlnLCBbJ3ZpZXdNb3JlTGFiZWwnLCAndmlld0FsbFRleHQnXSwgJ1ZpZXcgTW9yZScpLFxuICAgICAgLy8gV2hldGhlciB0byBzaG93IGEgcmVzdWx0IGNvdW50LlxuICAgICAgc2hvd1Jlc3VsdENvdW50OiBmYWxzZSxcbiAgICAgIC8vIFdoZXRoZXIgdG8gdXNlIEFjY29yZGlvblJlc3VsdHMgKERFUFJFQ0FURUQpXG4gICAgICB1c2VBY2NvcmRpb246IGZhbHNlLFxuICAgICAgLy8gT3ZlcnJpZGUgdmVydGljYWwgY29uZmlnIGRlZmF1bHRzIHdpdGggdXNlciBnaXZlbiBjb25maWcuXG4gICAgICAuLi5jb25maWcsXG4gICAgICAvLyBDb25maWcgZm9yIHRoZSBhcHBsaWVkIGZpbHRlcnMgYmFyLiBNdXN0IGJlIHBsYWNlZCBhZnRlciAuLi5jb25maWcgdG8gbm90IG92ZXJyaWRlIGRlZmF1bHRzLlxuICAgICAgYXBwbGllZEZpbHRlcnM6IHtcbiAgICAgICAgLy8gV2hldGhlciB0byBkaXNwbGF5IGFwcGxpZWQgZmlsdGVycy5cbiAgICAgICAgc2hvdzogZGVmYXVsdENvbmZpZ09wdGlvbihjb25maWcsIFsnYXBwbGllZEZpbHRlcnMuc2hvdycsICdzaG93QXBwbGllZEZpbHRlcnMnXSwgdG9wTGV2ZWxBcHBsaWVkRmlsdGVycy5zaG93KSxcbiAgICAgICAgLy8gV2hldGhlciB0byBzaG93IGZpZWxkIG5hbWVzLCBlLmcuIExvY2F0aW9uIGluIExvY2F0aW9uOiBWaXJnaW5pYS5cbiAgICAgICAgc2hvd0ZpZWxkTmFtZXM6IGRlZmF1bHRDb25maWdPcHRpb24oY29uZmlnLFxuICAgICAgICAgIFsnYXBwbGllZEZpbHRlcnMuc2hvd0ZpZWxkTmFtZXMnLCAnc2hvd0ZpZWxkTmFtZXMnXSwgdG9wTGV2ZWxBcHBsaWVkRmlsdGVycy5zaG93RmllbGROYW1lcyksXG4gICAgICAgIC8vIEhpZGUgZmlsdGVycyB3aXRoIHRoZXNlIGZpZWxkIGlkcy5cbiAgICAgICAgaGlkZGVuRmllbGRzOiBkZWZhdWx0Q29uZmlnT3B0aW9uKGNvbmZpZyxcbiAgICAgICAgICBbJ2FwcGxpZWRGaWx0ZXJzLmhpZGRlbkZpZWxkcycsICdoaWRkZW5GaWVsZHMnXSwgdG9wTGV2ZWxBcHBsaWVkRmlsdGVycy5oaWRkZW5GaWVsZHMpLFxuICAgICAgICAvLyBTeW1ib2wgcGxhY2VkIGJldHdlZW4gdGhlIHJlc3VsdCBjb3VudCBhbmQgdGhlIGFwcGxpZWQgZmlsdGVycy5cbiAgICAgICAgcmVzdWx0c0NvdW50U2VwYXJhdG9yOiBkZWZhdWx0Q29uZmlnT3B0aW9uKGNvbmZpZyxcbiAgICAgICAgICBbJ2FwcGxpZWRGaWx0ZXJzLnJlc3VsdHNDb3VudFNlcGFyYXRvcicsICdyZXN1bHRzQ291bnRTZXBhcmF0b3InXSwgdG9wTGV2ZWxBcHBsaWVkRmlsdGVycy5yZXN1bHRzQ291bnRTZXBhcmF0b3IpLFxuICAgICAgICAvLyBXaGV0aGVyIHRvIHNob3cgYSAnY2hhbmdlIGZpbHRlcnMnIGxpbmssIGxpbmtpbmcgYmFjayB0byB2ZXJ0aWNhbFVSTC5cbiAgICAgICAgc2hvd0NoYW5nZUZpbHRlcnM6IGRlZmF1bHRDb25maWdPcHRpb24oY29uZmlnLFxuICAgICAgICAgIFsnYXBwbGllZEZpbHRlcnMuc2hvd0NoYW5nZUZpbHRlcnMnLCAnc2hvd0NoYW5nZUZpbHRlcnMnXSwgdG9wTGV2ZWxBcHBsaWVkRmlsdGVycy5zaG93Q2hhbmdlRmlsdGVycyksXG4gICAgICAgIC8vIFRoZSB0ZXh0IGZvciB0aGUgY2hhbmdlIGZpbHRlcnMgbGluay5cbiAgICAgICAgY2hhbmdlRmlsdGVyc1RleHQ6IGRlZmF1bHRDb25maWdPcHRpb24oY29uZmlnLFxuICAgICAgICAgIFsnYXBwbGllZEZpbHRlcnMuY2hhbmdlRmlsdGVyc1RleHQnLCAnY2hhbmdlRmlsdGVyc1RleHQnXSwgdG9wTGV2ZWxBcHBsaWVkRmlsdGVycy5jaGFuZ2VGaWx0ZXJzVGV4dCksXG4gICAgICAgIC8vIFRoZSBzeW1ib2wgcGxhY2VkIGJldHdlZW4gZGlmZmVyZW50IGZpbHRlcnMgd2l0aCB0aGUgc2FtZSBmaWVsZE5hbWUuIGUuZy4gTG9jYXRpb246IFZpcmdpbmlhIHwgTmV3IFlvcmsgfCBNaWFtaS5cbiAgICAgICAgZGVsaW1pdGVyOiBkZWZhdWx0Q29uZmlnT3B0aW9uKGNvbmZpZywgWydhcHBsaWVkRmlsdGVycy5kZWxpbWl0ZXInXSwgdG9wTGV2ZWxBcHBsaWVkRmlsdGVycy5kZWxpbWl0ZXIpLFxuICAgICAgICAvLyBUaGUgYXJpYS1sYWJlbCBnaXZlbiB0byB0aGUgYXBwbGllZCBmaWx0ZXJzIGJhci5cbiAgICAgICAgbGFiZWxUZXh0OiBkZWZhdWx0Q29uZmlnT3B0aW9uKGNvbmZpZywgWydhcHBsaWVkRmlsdGVycy5sYWJlbFRleHQnXSwgdG9wTGV2ZWxBcHBsaWVkRmlsdGVycy5sYWJlbFRleHQpXG4gICAgICB9XG4gICAgfTtcbiAgfVxufVxuIiwiLyoqIEBtb2R1bGUgUGFnaW5hdGlvbkNvbXBvbmVudCAqL1xuXG5pbXBvcnQgQ29tcG9uZW50IGZyb20gJy4uL2NvbXBvbmVudCc7XG5pbXBvcnQgU3RvcmFnZUtleXMgZnJvbSAnLi4vLi4vLi4vY29yZS9zdG9yYWdlL3N0b3JhZ2VrZXlzJztcbmltcG9ydCBET00gZnJvbSAnLi4vLi4vZG9tL2RvbSc7XG5pbXBvcnQgeyBBbnN3ZXJzQ29tcG9uZW50RXJyb3IgfSBmcm9tICcuLi8uLi8uLi9jb3JlL2Vycm9ycy9lcnJvcnMnO1xuaW1wb3J0IFNlYXJjaFN0YXRlcyBmcm9tICcuLi8uLi8uLi9jb3JlL3N0b3JhZ2Uvc2VhcmNoc3RhdGVzJztcbmltcG9ydCBSZXN1bHRzQ29udGV4dCBmcm9tICcuLi8uLi8uLi9jb3JlL3N0b3JhZ2UvcmVzdWx0c2NvbnRleHQnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQYWdpbmF0aW9uQ29tcG9uZW50IGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IgKGNvbmZpZyA9IHt9LCBzeXN0ZW1Db25maWcgPSB7fSkge1xuICAgIHN1cGVyKGNvbmZpZywgc3lzdGVtQ29uZmlnKTtcblxuICAgIC8qKlxuICAgICAqIFRoZSB2ZXJ0aWNhbCBrZXkgdG8gdXNlIGZvciBzZWFyY2hlc1xuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLl92ZXJ0aWNhbEtleSA9IGNvbmZpZy52ZXJ0aWNhbEtleSB8fCB0aGlzLmNvcmUuZ2xvYmFsU3RvcmFnZS5nZXRTdGF0ZShTdG9yYWdlS2V5cy5TRUFSQ0hfQ09ORklHKS52ZXJ0aWNhbEtleTtcbiAgICBpZiAodHlwZW9mIHRoaXMuX3ZlcnRpY2FsS2V5ICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IEFuc3dlcnNDb21wb25lbnRFcnJvcihcbiAgICAgICAgJ3ZlcnRpY2FsS2V5IG5vdCBwcm92aWRlZCwgYnV0IG5lY2Vzc2FyeSBmb3IgcGFnaW5hdGlvbicsXG4gICAgICAgICdQYWdpbmF0aW9uQ29tcG9uZW50Jyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIG51bWJlciBvZiBwYWdlcyB2aXNpYmxlIGJlZm9yZS9hZnRlciB0aGUgY3VycmVudCBwYWdlIG9uIGRlc2t0b3AuXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuX21heFZpc2libGVQYWdlc0Rlc2t0b3AgPSBjb25maWcubWF4VmlzaWJsZVBhZ2VzRGVza3RvcCA9PT0gdW5kZWZpbmVkID8gMSA6IGNvbmZpZy5tYXhWaXNpYmxlUGFnZXNEZXNrdG9wO1xuXG4gICAgLyoqXG4gICAgICogVGhlIG51bWJlciBvZiBwYWdlcyB2aXNpYmxlIGJlZm9yZS9hZnRlciB0aGUgY3VycmVudCBwYWdlIG9uIG1vYmlsZS5cbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5fbWF4VmlzaWJsZVBhZ2VzTW9iaWxlID0gY29uZmlnLm1heFZpc2libGVQYWdlc01vYmlsZSA9PT0gdW5kZWZpbmVkID8gMSA6IGNvbmZpZy5tYXhWaXNpYmxlUGFnZXNNb2JpbGU7XG5cbiAgICAvKipcbiAgICAgKiBJZiB0cnVlLCBkaXNwbGF5cyB0aGUgZmlyc3QgYW5kIGxhc3QgcGFnZSBidXR0b25zXG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLl9zaG93Rmlyc3RBbmRMYXN0UGFnZUJ1dHRvbnMgPSBjb25maWcuc2hvd0ZpcnN0QW5kTGFzdEJ1dHRvbiA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IGNvbmZpZy5zaG93Rmlyc3RBbmRMYXN0QnV0dG9uO1xuXG4gICAgLyoqXG4gICAgICogREVQUkVDQVRFRFxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5fZmlyc3RQYWdlQnV0dG9uRW5hYmxlZCA9IGNvbmZpZy5zaG93Rmlyc3QgPT09IHVuZGVmaW5lZCA/IHRoaXMuX3Nob3dGaXJzdEFuZExhc3RQYWdlQnV0dG9ucyA6IGNvbmZpZy5zaG93Rmlyc3Q7XG5cbiAgICAvKipcbiAgICAgKiBERVBSRUNBVEVEXG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLl9sYXN0UGFnZUJ1dHRvbkVuYWJsZWQgPSBjb25maWcuc2hvd0xhc3QgPT09IHVuZGVmaW5lZCA/IHRoaXMuX3Nob3dGaXJzdEFuZExhc3RQYWdlQnV0dG9ucyA6IGNvbmZpZy5zaG93TGFzdDtcblxuICAgIC8qKlxuICAgICAqIElmIHRydWUsIGFsd2F5cyBkaXNwbGF5cyB0aGUgcGFnZSBudW1iZXJzIGZvciBmaXJzdCBhbmQgbGFzdCBwYWdlLlxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5fcGluRmlyc3RBbmRMYXN0UGFnZSA9IGNvbmZpZy5waW5GaXJzdEFuZExhc3RQYWdlID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IGNvbmZpZy5waW5GaXJzdEFuZExhc3RQYWdlO1xuXG4gICAgLyoqXG4gICAgICogSWNvbnMgb2JqZWN0IGZvciBmaXJzdCwgcHJldmlvdXMsIG5leHQsIGFuZCBsYXN0IHBhZ2UgaWNvbnMuXG4gICAgICogQHR5cGUge3tcbiAgICAgKiAgbmV4dEJ1dHRvbkljb246IChzdHJpbmcgfCB1bmRlZmluZWQpLFxuICAgICAqICBwcmV2aW91c0J1dHRvbkljb246IChzdHJpbmcgfCB1bmRlZmluZWQpLFxuICAgICAqICBmaXJzdEJ1dHRvbkljb246IChzdHJpbmcgfCB1bmRlZmluZWQpLFxuICAgICAqICBsYXN0QnV0dG9uSWNvbjogKHN0cmluZyB8IHVuZGVmaW5lZCksXG4gICAgICogfX1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuX2ljb25zID0gY29uZmlnLmljb25zO1xuXG4gICAgLyoqXG4gICAgICogT3B0aW9ucyB0byBpbmNsdWRlIHdpdGggYWxsIGFuYWx5dGljIGV2ZW50cyBzZW50IGJ5IHRoaXMgY29tcG9uZW50XG4gICAgICogQHR5cGUge29iamVjdH1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuX2FuYWx5dGljc09wdGlvbnMgPSB7XG4gICAgICB2ZXJ0aWNhbEtleTogdGhpcy5fdmVydGljYWxLZXlcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogTGFiZWwgZm9yIGEgcGFnZSBvZiByZXN1bHRzLlxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLl9wYWdlTGFiZWwgPSBjb25maWcucGFnZUxhYmVsID09PSB1bmRlZmluZWQgPyAnUGFnZScgOiBjb25maWcucGFnZUxhYmVsO1xuXG4gICAgLyoqXG4gICAgICogRnVuY3Rpb24gdGhhdCBpcyBpbnZva2VkIG9uIHBhZ2luYXRpb25cbiAgICAgKiBAdHlwZSB7ZnVuY3Rpb24oKToge319XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLl9vblBhZ2luYXRlID0gY29uZmlnLm9uUGFnaW5hdGUgfHwgdGhpcy5zY3JvbGxUb1RvcDtcblxuICAgIC8qKlxuICAgICAqIFRoZSBtYXhpbXVtIG51bWJlciBvZiByZXN1bHRzIHBlciBwYWdlXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuX2xpbWl0ID0gdGhpcy5jb3JlLmdsb2JhbFN0b3JhZ2UuZ2V0U3RhdGUoU3RvcmFnZUtleXMuU0VBUkNIX0NPTkZJRykubGltaXQ7XG5cbiAgICBjb25zdCBvZmZzZXQgPSB0aGlzLmNvcmUuZ2xvYmFsU3RvcmFnZS5nZXRTdGF0ZShTdG9yYWdlS2V5cy5TRUFSQ0hfT0ZGU0VUKSB8fCAwO1xuICAgIHRoaXMuY29yZS5nbG9iYWxTdG9yYWdlLnNldChTdG9yYWdlS2V5cy5TRUFSQ0hfT0ZGU0VULCBOdW1iZXIob2Zmc2V0KSk7XG4gICAgdGhpcy5jb3JlLmdsb2JhbFN0b3JhZ2Uub24oJ3VwZGF0ZScsIFN0b3JhZ2VLZXlzLlNFQVJDSF9PRkZTRVQsIG9mZnNldCA9PiB7XG4gICAgICBpZiAodHlwZW9mIG9mZnNldCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdGhpcy5jb3JlLmdsb2JhbFN0b3JhZ2Uuc2V0KFN0b3JhZ2VLZXlzLlNFQVJDSF9PRkZTRVQsIE51bWJlcihvZmZzZXQpKTtcbiAgICB9KTtcblxuICAgIHRoaXMuY29yZS5nbG9iYWxTdG9yYWdlLm9uKCd1cGRhdGUnLCBTdG9yYWdlS2V5cy5WRVJUSUNBTF9SRVNVTFRTLCByZXN1bHRzID0+IHtcbiAgICAgIGlmIChyZXN1bHRzLnNlYXJjaFN0YXRlID09PSBTZWFyY2hTdGF0ZXMuU0VBUkNIX0NPTVBMRVRFKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENvbmZpZ3VyYXRpb24gZm9yIHRoZSBiZWhhdmlvciB3aGVuIHRoZXJlIGFyZSBubyB2ZXJ0aWNhbCByZXN1bHRzLlxuICAgICAqL1xuICAgIHRoaXMuX25vUmVzdWx0cyA9IGNvbmZpZy5ub1Jlc3VsdHMgfHxcbiAgICAgIHRoaXMuY29yZS5nbG9iYWxTdG9yYWdlLmdldFN0YXRlKFN0b3JhZ2VLZXlzLk5PX1JFU1VMVFNfQ09ORklHKSB8fFxuICAgICAge307XG4gIH1cblxuICBzdGF0aWMgZ2V0IHR5cGUgKCkge1xuICAgIHJldHVybiAnUGFnaW5hdGlvbic7XG4gIH1cblxuICBzdGF0aWMgZGVmYXVsdFRlbXBsYXRlTmFtZSAoKSB7XG4gICAgcmV0dXJuICdyZXN1bHRzL3BhZ2luYXRpb24nO1xuICB9XG5cbiAgc2hvdWxkU2hvd0NvbnRyb2xzIChyZXN1bHRzLCBsaW1pdCkge1xuICAgIGNvbnN0IGhhc1Jlc3VsdHMgPSByZXN1bHRzLnNlYXJjaFN0YXRlID09PSAnc2VhcmNoLWNvbXBsZXRlJyAmJiByZXN1bHRzLnJlc3VsdHNDb3VudCA+IGxpbWl0O1xuICAgIGNvbnN0IGlzTm9ybWFsUmVzdWx0cyA9IHJlc3VsdHMucmVzdWx0c0NvbnRleHQgPT09IFJlc3VsdHNDb250ZXh0Lk5PUk1BTDtcbiAgICBjb25zdCBpc1Zpc2libGVGb3JOb1Jlc3VsdHMgPSAndmlzaWJsZScgaW4gdGhpcy5fbm9SZXN1bHRzXG4gICAgICA/IHRoaXMuX25vUmVzdWx0cy52aXNpYmxlXG4gICAgICA6IHRoaXMuX25vUmVzdWx0cy5kaXNwbGF5QWxsUmVzdWx0cztcbiAgICByZXR1cm4gaGFzUmVzdWx0cyAmJiAoaXNOb3JtYWxSZXN1bHRzIHx8IGlzVmlzaWJsZUZvck5vUmVzdWx0cyk7XG4gIH1cblxuICBvbk1vdW50ICgpIHtcbiAgICBjb25zdCByZXN1bHRzID0gdGhpcy5jb3JlLmdsb2JhbFN0b3JhZ2UuZ2V0U3RhdGUoU3RvcmFnZUtleXMuVkVSVElDQUxfUkVTVUxUUykgfHwge307XG4gICAgY29uc3QgbGltaXQgPSB0aGlzLmNvcmUuZ2xvYmFsU3RvcmFnZS5nZXRTdGF0ZShTdG9yYWdlS2V5cy5TRUFSQ0hfQ09ORklHKS5saW1pdDtcbiAgICBjb25zdCBzaG93Q29udHJvbHMgPSB0aGlzLnNob3VsZFNob3dDb250cm9scyhyZXN1bHRzLCBsaW1pdCk7XG4gICAgY29uc3Qgb2Zmc2V0ID0gdGhpcy5jb3JlLmdsb2JhbFN0b3JhZ2UuZ2V0U3RhdGUoU3RvcmFnZUtleXMuU0VBUkNIX09GRlNFVCkgfHwgMDtcbiAgICBpZiAoIXNob3dDb250cm9scykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHByZXZpb3VzUGFnZUJ1dHRvbiA9IERPTS5xdWVyeSh0aGlzLl9jb250YWluZXIsICcuanMteXh0LVBhZ2luYXRpb24tcHJldmlvdXMnKTtcbiAgICBjb25zdCBuZXh0UGFnZUJ1dHRvbiA9IERPTS5xdWVyeSh0aGlzLl9jb250YWluZXIsICcuanMteXh0LVBhZ2luYXRpb24tbmV4dCcpO1xuICAgIGNvbnN0IG1heFBhZ2UgPSBNYXRoLnRydW5jKChyZXN1bHRzLnJlc3VsdHNDb3VudCAtIDEpIC8gbGltaXQpO1xuXG4gICAgRE9NLm9uKHByZXZpb3VzUGFnZUJ1dHRvbiwgJ2NsaWNrJywgKCkgPT4gdGhpcy51cGRhdGVQYWdlKG9mZnNldCAtIGxpbWl0KSk7XG4gICAgRE9NLm9uKG5leHRQYWdlQnV0dG9uLCAnY2xpY2snLCAoKSA9PiB0aGlzLnVwZGF0ZVBhZ2Uob2Zmc2V0ICsgbGltaXQpKTtcblxuICAgIGlmICh0aGlzLl9maXJzdFBhZ2VCdXR0b25FbmFibGVkKSB7XG4gICAgICBjb25zdCBmaXJzdFBhZ2VCdXR0b24gPSBET00ucXVlcnkodGhpcy5fY29udGFpbmVyLCAnLmpzLXl4dC1QYWdpbmF0aW9uLWZpcnN0Jyk7XG4gICAgICBET00ub24oZmlyc3RQYWdlQnV0dG9uLCAnY2xpY2snLCAoKSA9PiB0aGlzLnVwZGF0ZVBhZ2UoMCkpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9sYXN0UGFnZUJ1dHRvbkVuYWJsZWQpIHtcbiAgICAgIGNvbnN0IGxhc3RQYWdlQnV0dG9uID0gRE9NLnF1ZXJ5KHRoaXMuX2NvbnRhaW5lciwgJy5qcy15eHQtUGFnaW5hdGlvbi1sYXN0Jyk7XG4gICAgICBET00ub24obGFzdFBhZ2VCdXR0b24sICdjbGljaycsICgpID0+IHRoaXMudXBkYXRlUGFnZShtYXhQYWdlICogbGltaXQpKTtcbiAgICB9XG5cbiAgICBET00ucXVlcnlBbGwoJy5qcy15eHQtUGFnaW5hdGlvbi1saW5rJykuZm9yRWFjaChub2RlID0+IHtcbiAgICAgIERPTS5vbihub2RlLCAnY2xpY2snLCAoKSA9PiB0aGlzLnVwZGF0ZVBhZ2UoKHBhcnNlSW50KG5vZGUuZGF0YXNldC5udW1iZXIpIC0gMSkgKiBsaW1pdCkpO1xuICAgIH0pO1xuICB9XG5cbiAgdXBkYXRlUGFnZSAob2Zmc2V0KSB7XG4gICAgY29uc3QgcmVzdWx0cyA9IHRoaXMuY29yZS5nbG9iYWxTdG9yYWdlLmdldFN0YXRlKFN0b3JhZ2VLZXlzLlZFUlRJQ0FMX1JFU1VMVFMpIHx8IHt9O1xuICAgIGNvbnN0IGN1cnJlbnRPZmZzZXQgPSB0aGlzLmNvcmUuZ2xvYmFsU3RvcmFnZS5nZXRTdGF0ZShTdG9yYWdlS2V5cy5TRUFSQ0hfT0ZGU0VUKSB8fCAwO1xuICAgIGNvbnN0IGN1cnJlbnRQYWdlTnVtYmVyID0gKGN1cnJlbnRPZmZzZXQgLyB0aGlzLl9saW1pdCkgKyAxO1xuICAgIGNvbnN0IG5ld1BhZ2VOdW1iZXIgPSAob2Zmc2V0IC8gdGhpcy5fbGltaXQpICsgMTtcbiAgICBjb25zdCBtYXhQYWdlQ291bnQgPSB0aGlzLl9jb21wdXRlTWF4UGFnZShyZXN1bHRzLnJlc3VsdHNDb3VudCk7XG4gICAgdGhpcy5fb25QYWdpbmF0ZShuZXdQYWdlTnVtYmVyLCBjdXJyZW50UGFnZU51bWJlciwgbWF4UGFnZUNvdW50KTtcbiAgICB0aGlzLmNvcmUuZ2xvYmFsU3RvcmFnZS5zZXQoU3RvcmFnZUtleXMuU0VBUkNIX09GRlNFVCwgb2Zmc2V0KTtcbiAgICB0aGlzLmNvcmUucGVyc2lzdGVudFN0b3JhZ2Uuc2V0KFN0b3JhZ2VLZXlzLlNFQVJDSF9PRkZTRVQsIG9mZnNldCk7XG4gICAgdGhpcy5jb3JlLnZlcnRpY2FsUGFnZSh0aGlzLl92ZXJ0aWNhbEtleSk7XG4gIH1cblxuICBzY3JvbGxUb1RvcCAoKSB7XG4gICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcCA9IDA7XG4gICAgLy8gU2FmYXJpXG4gICAgZG9jdW1lbnQuYm9keS5zY3JvbGxUb3AgPSAwO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbXB1dGVzIHRoZSBoaWdoZXN0IHBhZ2UgbnVtYmVyIGZvciBhIGdpdmVuIGFtb3VudCBvZiByZXN1bHRzXG4gICAqIEBwYXJhbSB7bnVtYmVyfSByZXN1bHRzQ291bnRcbiAgICovXG4gIF9jb21wdXRlTWF4UGFnZSAocmVzdWx0c0NvdW50KSB7XG4gICAgcmV0dXJuIE1hdGgudHJ1bmMoKHJlc3VsdHNDb3VudCAtIDEpIC8gdGhpcy5fbGltaXQpICsgMTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQYWdpbmF0aW9uIHNob3VsZCBldmVubHkgYWRkIHBhZ2UgbnVtYmVycyBpbiB0aGUgXCJmb3J3YXJkXCIgYW5kIFwiYmFja3dhcmRcIiBkaXJlY3Rpb25zLCB1bmxlc3NcbiAgICogb25lIHNpZGUgaGFzIHJlYWNoZWQgdGhlIG1heC9taW4gdmFsdWUsIGluIHdoaWNoIGNhc2UgdGhlIHJlbWFpbmluZyBzaWRlIHNob3VsZCBiZSB0aGUgb25seVxuICAgKiBvbmUgdG8gZ2V0IG1vcmUgcGFnZXMuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBwYWdlTnVtYmVyIHRoZSBjdXJyZW50IHBhZ2UncyBudW1iZXJcbiAgICogQHBhcmFtIHtudW1iZXJ9IG1heFBhZ2UgdGhlIGhpZ2hlc3QgcGFnZSBudW1iZXIsIGFjdHMgYXMgdGhlIHVwcGVyIGJvdW5kXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBsaW1pdCB0aGUgbWF4aW11bSB0b3RhbCBudW1iZXIgb2YgcGFnZXMgdGhhdCBhcmUgYWxsb2NhdGVkXG4gICAqIEByZXR1cm5zIHtBcnJheTxudW1iZXI+fSB0aGUgYmFja0xpbWl0IGFuZCBmcm9udExpbWl0LCByZXNwZWN0aXZlbHlcbiAgICovXG4gIF9hbGxvY2F0ZSAocGFnZU51bWJlciwgbWF4UGFnZSwgbGltaXQpIHtcbiAgICB2YXIgYmFja0xpbWl0ID0gcGFnZU51bWJlcjtcbiAgICB2YXIgZnJvbnRMaW1pdCA9IHBhZ2VOdW1iZXI7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaW1pdDsgaSsrKSB7XG4gICAgICBpZiAoaSAlIDIgPT09IDApIHtcbiAgICAgICAgaWYgKGJhY2tMaW1pdCA+IDApIHtcbiAgICAgICAgICBiYWNrTGltaXQtLTtcbiAgICAgICAgfSBlbHNlIGlmIChmcm9udExpbWl0IDwgbWF4UGFnZSkge1xuICAgICAgICAgIGZyb250TGltaXQrKztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGZyb250TGltaXQgPCBtYXhQYWdlKSB7XG4gICAgICAgICAgZnJvbnRMaW1pdCsrO1xuICAgICAgICB9IGVsc2UgaWYgKGJhY2tMaW1pdCA+IDApIHtcbiAgICAgICAgICBiYWNrTGltaXQtLTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBbYmFja0xpbWl0LCBmcm9udExpbWl0XTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGFuIG9iamVjdCByZXByZXNlbnRpbmcgdGhlIHZpZXcgc3RhdGUgb2YgdGhlIHBhZ2UgbnVtYmVycyBhbmQgZWxsaXBzZXNcbiAgICogQHBhcmFtIHtudW1iZXJ9IHBhZ2VOdW1iZXIgcmVmZXJzIHRvIHRoZSBwYWdlIG51bWJlciwgbm90IHRoZSBwYWdlIGluZGV4XG4gICAqIEBwYXJhbSB7bnVtYmVyfSBtYXhQYWdlIHRoZSBoaWdoZXN0IHBhZ2UgbnVtYmVyLCB3aGljaCBhbHNvIHJlcHJlc2VudHMgdGhlIHRvdGFsIHBhZ2UgY291bnRcbiAgICogQHJldHVybnMge09iamVjdH0gdGhlIHZpZXctbW9kZWwgZm9yIHRoZSBwYWdlIG51bWJlcnMgZGlzcGxheWVkIGluIHRoZSBjb21wb25lbnQsIGluY2x1ZGluZyB3aGV0aGVyIHRvIGRpc3BsYXkgZWxsaXBzZXNcbiAgICovXG4gIF9jcmVhdGVQYWdlTnVtYmVyVmlld3MgKHBhZ2VOdW1iZXIsIG1heFBhZ2UpIHtcbiAgICBjb25zdCBbbW9iaWxlQmFja0xpbWl0LCBtb2JpbGVGcm9udExpbWl0XSA9IHRoaXMuX2FsbG9jYXRlKHBhZ2VOdW1iZXIsIG1heFBhZ2UsIHRoaXMuX21heFZpc2libGVQYWdlc01vYmlsZSk7XG4gICAgY29uc3QgW2Rlc2t0b3BCYWNrTGltaXQsIGRlc2t0b3BGcm9udExpbWl0XSA9IHRoaXMuX2FsbG9jYXRlKHBhZ2VOdW1iZXIsIG1heFBhZ2UsIHRoaXMuX21heFZpc2libGVQYWdlc0Rlc2t0b3ApO1xuICAgIGNvbnN0IHBhZ2VOdW1iZXJWaWV3cyA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDw9IG1heFBhZ2U7IGkrKykge1xuICAgICAgY29uc3QgbnVtID0geyBudW1iZXI6IGkgfTtcbiAgICAgIGlmIChpID09PSBwYWdlTnVtYmVyKSB7XG4gICAgICAgIG51bS5hY3RpdmUgPSB0cnVlO1xuICAgICAgICBpZiAodGhpcy5fbWF4VmlzaWJsZVBhZ2VzRGVza3RvcCA+IDEpIHtcbiAgICAgICAgICBudW0uYWN0aXZlRGVza3RvcCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX21heFZpc2libGVQYWdlc01vYmlsZSA+IDEpIHtcbiAgICAgICAgICBudW0uYWN0aXZlTW9iaWxlID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGkgPD0gbW9iaWxlQmFja0xpbWl0IHx8IGkgPiBtb2JpbGVGcm9udExpbWl0KSB7XG4gICAgICAgICAgbnVtLm1vYmlsZUhpZGRlbiA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGkgPD0gZGVza3RvcEJhY2tMaW1pdCB8fCBpID4gZGVza3RvcEZyb250TGltaXQpIHtcbiAgICAgICAgICBudW0uZGVza3RvcEhpZGRlbiA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHBhZ2VOdW1iZXJWaWV3cy5wdXNoKG51bSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHBpbm5lZE51bWJlcnM6IHtcbiAgICAgICAgbW9iaWxlQmFjazogdGhpcy5fcGluRmlyc3RBbmRMYXN0UGFnZSAmJiBtb2JpbGVCYWNrTGltaXQgPiAwLFxuICAgICAgICBtb2JpbGVGcm9udDogdGhpcy5fcGluRmlyc3RBbmRMYXN0UGFnZSAmJiBtb2JpbGVGcm9udExpbWl0IDwgbWF4UGFnZSxcbiAgICAgICAgZGVza3RvcEJhY2s6IHRoaXMuX3BpbkZpcnN0QW5kTGFzdFBhZ2UgJiYgZGVza3RvcEJhY2tMaW1pdCA+IDAsXG4gICAgICAgIGRlc2t0b3BGcm9udDogdGhpcy5fcGluRmlyc3RBbmRMYXN0UGFnZSAmJiBkZXNrdG9wRnJvbnRMaW1pdCA8IG1heFBhZ2VcbiAgICAgIH0sXG4gICAgICBlbGxpcHNlczoge1xuICAgICAgICBtb2JpbGVCYWNrOiB0aGlzLl9waW5GaXJzdEFuZExhc3RQYWdlICYmIG1vYmlsZUJhY2tMaW1pdCA+IDEsXG4gICAgICAgIG1vYmlsZUZyb250OiB0aGlzLl9waW5GaXJzdEFuZExhc3RQYWdlICYmIG1vYmlsZUZyb250TGltaXQgPCBtYXhQYWdlIC0gMSxcbiAgICAgICAgZGVza3RvcEJhY2s6IHRoaXMuX3BpbkZpcnN0QW5kTGFzdFBhZ2UgJiYgZGVza3RvcEJhY2tMaW1pdCA+IDEsXG4gICAgICAgIGRlc2t0b3BGcm9udDogdGhpcy5fcGluRmlyc3RBbmRMYXN0UGFnZSAmJiBkZXNrdG9wRnJvbnRMaW1pdCA8IG1heFBhZ2UgLSAxXG4gICAgICB9LFxuICAgICAgcGFnZU51bWJlclZpZXdzXG4gICAgfTtcbiAgfVxuXG4gIHNldFN0YXRlIChkYXRhKSB7XG4gICAgY29uc3QgcmVzdWx0cyA9IHRoaXMuY29yZS5nbG9iYWxTdG9yYWdlLmdldFN0YXRlKFN0b3JhZ2VLZXlzLlZFUlRJQ0FMX1JFU1VMVFMpIHx8IHt9O1xuICAgIGNvbnN0IG9mZnNldCA9IHRoaXMuY29yZS5nbG9iYWxTdG9yYWdlLmdldFN0YXRlKFN0b3JhZ2VLZXlzLlNFQVJDSF9PRkZTRVQpIHx8IDA7XG4gICAgY29uc3QgcGFnZU51bWJlciA9IChvZmZzZXQgLyB0aGlzLl9saW1pdCkgKyAxO1xuICAgIGNvbnN0IGlzTW9yZVJlc3VsdHMgPSByZXN1bHRzLnJlc3VsdHNDb3VudCA+IG9mZnNldCArIHRoaXMuX2xpbWl0O1xuICAgIGNvbnN0IG1heFBhZ2UgPSB0aGlzLl9jb21wdXRlTWF4UGFnZShyZXN1bHRzLnJlc3VsdHNDb3VudCk7XG4gICAgY29uc3QgeyBwaW5uZWROdW1iZXJzLCBlbGxpcHNlcywgcGFnZU51bWJlclZpZXdzIH0gPSB0aGlzLl9jcmVhdGVQYWdlTnVtYmVyVmlld3MocGFnZU51bWJlciwgbWF4UGFnZSk7XG5cbiAgICByZXR1cm4gc3VwZXIuc2V0U3RhdGUoe1xuICAgICAgc2hvd0NvbnRyb2xzOiB0aGlzLnNob3VsZFNob3dDb250cm9scyhyZXN1bHRzLCB0aGlzLl9saW1pdCksXG4gICAgICBmaXJzdFBhZ2VCdXR0b25FbmFibGVkOiB0aGlzLl9maXJzdFBhZ2VCdXR0b25FbmFibGVkLFxuICAgICAgbGFzdFBhZ2VCdXR0b25FbmFibGVkOiB0aGlzLl9sYXN0UGFnZUJ1dHRvbkVuYWJsZWQsXG4gICAgICBwYWdlTnVtYmVyLFxuICAgICAgcGFnZUxhYmVsOiB0aGlzLl9wYWdlTGFiZWwsXG4gICAgICBzaG93Rmlyc3RQYWdlQnV0dG9uOiBwYWdlTnVtYmVyID4gMixcbiAgICAgIHNob3dQcmV2aW91c1BhZ2VCdXR0b246IHBhZ2VOdW1iZXIgPiAxLFxuICAgICAgc2hvd05leHRQYWdlQnV0dG9uOiBpc01vcmVSZXN1bHRzLFxuICAgICAgc2hvd0xhc3RQYWdlQnV0dG9uOiBwYWdlTnVtYmVyIDwgbWF4UGFnZSAtIDEsXG4gICAgICBpY29uczogdGhpcy5faWNvbnMsXG4gICAgICBwYWdlTnVtYmVyczogcGFnZU51bWJlclZpZXdzLFxuICAgICAgcGlubmVkTnVtYmVycyxcbiAgICAgIGVsbGlwc2VzLFxuICAgICAgcGluUGFnZXM6IHRoaXMuX3BpbkZpcnN0QW5kTGFzdFBhZ2UsXG4gICAgICBuZXh0UGFnZTogcGFnZU51bWJlciArIDEsXG4gICAgICBtYXhQYWdlLFxuICAgICAgLi4uZGF0YVxuICAgIH0pO1xuICB9XG59XG4iLCIvKiogQG1vZHVsZSBDVEFDb2xsZWN0aW9uQ29tcG9uZW50ICovXG5cbmltcG9ydCBDb21wb25lbnQgZnJvbSAnLi4vY29tcG9uZW50JztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ1RBQ29sbGVjdGlvbkNvbXBvbmVudCBleHRlbmRzIENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yIChjb25maWcgPSB7fSwgc3lzdGVtQ29uZmlnID0ge30pIHtcbiAgICBzdXBlcihjb25maWcsIHN5c3RlbUNvbmZpZyk7XG5cbiAgICBjb25zdCBkYXRhID0gdGhpcy5fY29uZmlnLmRhdGEgfHwge307XG5cbiAgICAvKipcbiAgICAgKiBSZXN1bHQgZGF0YVxuICAgICAqIEB0eXBlIHtSZXN1bHR9XG4gICAgICovXG4gICAgdGhpcy5yZXN1bHQgPSBkYXRhLnJlc3VsdCB8fCB7fTtcblxuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgdGhlIERPTSBzaG91bGQgaW5jbHVkZSBsZWdhY3kgY2xhc3MgbmFtZXNcbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICB0aGlzLmluY2x1ZGVMZWdhY3lDbGFzc2VzID0gdGhpcy5fY29uZmlnLmluY2x1ZGVMZWdhY3lDbGFzc2VzIHx8IGZhbHNlO1xuXG4gICAgLyoqXG4gICAgICogVmVydGljYWwga2V5IGZvciB0aGUgc2VhcmNoLlxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgdGhpcy52ZXJ0aWNhbEtleSA9IGRhdGEudmVydGljYWxLZXk7XG5cbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIHRoaXMgY3RhIGlzIHBhcnQgb2YgYSB1bml2ZXJzYWwgc2VhcmNoLlxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqL1xuICAgIHRoaXMuaXNVbml2ZXJzYWwgPSB0aGlzLl9jb25maWcuaXNVbml2ZXJzYWwgfHwgZmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiBFaXRoZXIgYSBmdW5jdGlvbiB0aGF0IHNwaXRzIG91dCBhbiBhcnJheSBvZiBDVEEgY29uZmlnIG9iamVjdHMgb3IgYW4gYXJyYXkgb2YgQ1RBIGNvbmZpZyBvYmplY3RzXG4gICAgICogb3IgYXBpIGZpZWxkbmFtZXNcbiAgICAgKiBAdHlwZSB7RnVuY3Rpb258QXJyYXk8T2JqZWN0fHN0cmluZz59XG4gICAgICovXG4gICAgY29uc3QgY2FsbHNUb0FjdGlvbiA9IHRoaXMuX2NvbmZpZy5jYWxsc1RvQWN0aW9uIHx8IFtdO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGNvbmZpZyBmb3IgZWFjaCBjYWxscyB0byBhY3Rpb24gY29tcG9uZW50IHRvIHJlbmRlci5cbiAgICAgKiBAdHlwZSB7QXJyYXk8T2JqZWN0Pn1cbiAgICAgKi9cbiAgICB0aGlzLmNhbGxzVG9BY3Rpb24gPSBDVEFDb2xsZWN0aW9uQ29tcG9uZW50LnJlc29sdmVDVEFNYXBwaW5nKHRoaXMucmVzdWx0Ll9yYXcsIC4uLmNhbGxzVG9BY3Rpb24pO1xuXG4gICAgLy8gQXNzaWduIGFueSBleHRyYSBjdGEgY29uZmlnIHRoYXQgZG9lcyBub3QgY29tZSBmcm9tIHRoZSBjdGEgbWFwcGluZ3MuXG4gICAgY29uc3QgX2N0YU1vZGlmaWVycyA9IHRoaXMuX2NvbmZpZy5fY3RhTW9kaWZpZXJzIHx8IFtdO1xuICAgIGlmICh0aGlzLmNhbGxzVG9BY3Rpb24ubGVuZ3RoID09PSAxKSB7XG4gICAgICBfY3RhTW9kaWZpZXJzLnB1c2goJ3NvbG8nKTtcbiAgICB9XG4gICAgdGhpcy5jYWxsc1RvQWN0aW9uID0gdGhpcy5jYWxsc1RvQWN0aW9uLm1hcChjdGEgPT4gKHtcbiAgICAgIGV2ZW50T3B0aW9uczogdGhpcy5kZWZhdWx0RXZlbnRPcHRpb25zKHRoaXMucmVzdWx0KSxcbiAgICAgIF9jdGFNb2RpZmllcnM6IF9jdGFNb2RpZmllcnMsXG4gICAgICBpbmNsdWRlTGVnYWN5Q2xhc3NlczogdGhpcy5pbmNsdWRlTGVnYWN5Q2xhc3NlcyxcbiAgICAgIC4uLmN0YVxuICAgIH0pKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBIYW5kbGVzIHJlc29sdmluZyBjdGFzIGZyb20gYSBjdGEgbWFwcGluZyB3aGljaCBhcmUgZWl0aGVyXG4gICAqIDEuIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGEgY3RhJ3MgY29uZmlnXG4gICAqIDIuIGFuIG9iamVjdCB0aGF0IGhhcyBhIHBlci1hdHRyaWJ1dGUgbWFwcGluZyBvZiBlaXRoZXIgYVxuICAgKiAgICBhKSBzdGF0aWMgdmFsdWVcbiAgICogICAgYikgZnVuY3Rpb24gdGhhdCB0YWtlcyBpbiByZXN1dCBkYXRhIGFuZCByZXR1cm5zIHRoZSBnaXZlbiBhdHRyaWJ1dGVzIHZhbHVlXG4gICAqIE5vdGU6IEludGVudGlvbmFsbHkgZG9lcyBub3QgYWxsb3cgbmVzdGluZyBmdW5jdGlvbnMuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSByZXN1bHRcbiAgICogQHBhcmFtIHtGdW5jdGlvbnwuLi4oT2JqZWN0fHN0cmluZyl9IGN0YXNcbiAgICogQHJldHVybnMge0FycmF5PE9iamVjdD59XG4gICAqL1xuICBzdGF0aWMgcmVzb2x2ZUNUQU1hcHBpbmcgKHJlc3VsdCwgLi4uY3Rhcykge1xuICAgIGxldCBwYXJzZWRDVEFzID0gW107XG4gICAgY3Rhcy5tYXAoY3RhTWFwcGluZyA9PiB7XG4gICAgICBpZiAodHlwZW9mIGN0YU1hcHBpbmcgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcGFyc2VkQ1RBcyA9IHBhcnNlZENUQXMuY29uY2F0KGN0YU1hcHBpbmcocmVzdWx0KSk7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBjdGFNYXBwaW5nID09PSAnb2JqZWN0Jykge1xuICAgICAgICBjb25zdCBjdGFPYmplY3QgPSB7IC4uLmN0YU1hcHBpbmcgfTtcbiAgICAgICAgZm9yIChsZXQgW2N0YUF0dHJpYnV0ZSwgYXR0cmlidXRlTWFwcGluZ10gb2YgT2JqZWN0LmVudHJpZXMoY3RhTWFwcGluZykpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIGF0dHJpYnV0ZU1hcHBpbmcgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGN0YU9iamVjdFtjdGFBdHRyaWJ1dGVdID0gYXR0cmlidXRlTWFwcGluZyhyZXN1bHQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBwYXJzZWRDVEFzLnB1c2goY3RhT2JqZWN0KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBwYXJzZWRDVEFzID0gcGFyc2VkQ1RBcy5maWx0ZXIoY3RhID0+IGN0YSk7XG5cbiAgICBwYXJzZWRDVEFzLmZvckVhY2goY3RhID0+IHtcbiAgICAgIGlmICghY3RhLmxhYmVsICYmICFjdGEudXJsKSB7XG4gICAgICAgIGNvbnNvbGUud2FybignQ2FsbCB0byBBY3Rpb246JywgY3RhLCAnaXMgbWlzc2luZyBib3RoIGEgbGFiZWwgYW5kIHVybCBhdHRyaWJ1dGUgYW5kIGlzIGJlaW5nIGF1dG9tYXRpY2FsbHkgaGlkZGVuJyk7XG4gICAgICB9IGVsc2UgaWYgKCFjdGEubGFiZWwpIHtcbiAgICAgICAgY29uc29sZS53YXJuKCdDYWxsIHRvIEFjdGlvbjonLCBjdGEsICdpcyBtaXNzaW5nIGEgbGFiZWwgYXR0cmlidXRlIGFuZCBpcyBiZWluZyBhdXRvbWF0aWNhbGx5IGhpZGRlbicpO1xuICAgICAgfSBlbHNlIGlmICghY3RhLnVybCkge1xuICAgICAgICBjb25zb2xlLndhcm4oJ0NhbGwgdG8gQWN0aW9uOicsIGN0YSwgJ2lzIG1pc3NpbmcgYSB1cmwgYXR0cmlidXRlIGFuZCBpcyBiZWluZyBhdXRvbWF0aWNhbGx5IGhpZGRlbicpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHBhcnNlZENUQXMuZmlsdGVyKGN0YSA9PiBjdGEudXJsICYmIGN0YS51cmwudHJpbSgpICYmIGN0YS5sYWJlbCAmJiBjdGEubGFiZWwudHJpbSgpKTtcbiAgfVxuXG4gIHN0YXRpYyBoYXNDVEFzIChyZXN1bHQsIGN0YXMpIHtcbiAgICByZXR1cm4gQ1RBQ29sbGVjdGlvbkNvbXBvbmVudC5yZXNvbHZlQ1RBTWFwcGluZyhyZXN1bHQsIC4uLmN0YXMpLmxlbmd0aCA+IDA7XG4gIH1cblxuICBkZWZhdWx0RXZlbnRPcHRpb25zIChyZXN1bHQpIHtcbiAgICBjb25zdCBldmVudE9wdGlvbnMgPSB7XG4gICAgICB2ZXJ0aWNhbEtleTogdGhpcy52ZXJ0aWNhbEtleSxcbiAgICAgIHNlYXJjaGVyOiB0aGlzLl9jb25maWcuaXNVbml2ZXJzYWwgPyAnVU5JVkVSU0FMJyA6ICdWRVJUSUNBTCdcbiAgICB9O1xuICAgIGlmIChyZXN1bHQuX3Jhdy5pZCkge1xuICAgICAgZXZlbnRPcHRpb25zLmVudGl0eUlkID0gcmVzdWx0Ll9yYXcuaWQ7XG4gICAgfVxuICAgIHJldHVybiBldmVudE9wdGlvbnM7XG4gIH1cblxuICBzZXRTdGF0ZSAoZGF0YSkge1xuICAgIHJldHVybiBzdXBlci5zZXRTdGF0ZSh7XG4gICAgICAuLi5kYXRhLFxuICAgICAgaW5jbHVkZUxlZ2FjeUNsYXNzZXM6IHRoaXMuaW5jbHVkZUxlZ2FjeUNsYXNzZXMsXG4gICAgICBjYWxsc1RvQWN0aW9uOiB0aGlzLmNhbGxzVG9BY3Rpb25cbiAgICB9KTtcbiAgfVxuXG4gIHN0YXRpYyBnZXQgdHlwZSAoKSB7XG4gICAgcmV0dXJuICdDVEFDb2xsZWN0aW9uJztcbiAgfVxuXG4gIHN0YXRpYyBkZWZhdWx0VGVtcGxhdGVOYW1lICgpIHtcbiAgICByZXR1cm4gJ2N0YXMvY3RhY29sbGVjdGlvbic7XG4gIH1cbn1cbiIsIi8qKiBAbW9kdWxlIFN0YW5kYXJkQ2FyZENvbXBvbmVudCAqL1xuXG5pbXBvcnQgQ29tcG9uZW50IGZyb20gJy4uL2NvbXBvbmVudCc7XG5pbXBvcnQgQ2FyZENvbXBvbmVudCBmcm9tICcuL2NhcmRjb21wb25lbnQnO1xuaW1wb3J0IHsgY2FyZFRlbXBsYXRlcywgY2FyZFR5cGVzIH0gZnJvbSAnLi9jb25zdHMnO1xuaW1wb3J0IERPTSBmcm9tICcuLi8uLi9kb20vZG9tJztcbmltcG9ydCBDVEFDb2xsZWN0aW9uQ29tcG9uZW50IGZyb20gJy4uL2N0YXMvY3RhY29sbGVjdGlvbmNvbXBvbmVudCc7XG5cbmNsYXNzIFN0YW5kYXJkQ2FyZENvbmZpZyB7XG4gIGNvbnN0cnVjdG9yIChjb25maWcgPSB7fSkge1xuICAgIE9iamVjdC5hc3NpZ24odGhpcywgY29uZmlnKTtcblxuICAgIGNvbnN0IGRhdGEgPSBjb25maWcuZGF0YSB8fCB7fTtcblxuICAgIC8qKlxuICAgICAqIFRoZSByZXN1bHQgZGF0YVxuICAgICAqIEB0eXBlIHtSZXN1bHR9XG4gICAgICovXG4gICAgY29uc3QgcmVzdWx0ID0gZGF0YS5yZXN1bHQgfHwge307XG5cbiAgICAvKipcbiAgICAgKiBUaGUgcmF3IHByb2ZpbGUgZGF0YVxuICAgICAqIEB0eXBlIHtPYmplY3R9XG4gICAgICovXG4gICAgY29uc3QgcmF3UmVzdWx0ID0gcmVzdWx0Ll9yYXcgfHwge307XG5cbiAgICAvKipcbiAgICAgKiBUaGUgZGF0YU1hcHBpbmdzIGF0dHJpYnV0ZSBvZiB0aGUgY29uZmlnXG4gICAgICogaXMgZWl0aGVyIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGFkZGl0aW9uYWwgY29uZmlnIGZvclxuICAgICAqIGEgY2FyZCBvciBhbiBvYmplY3QgdGhhdCBpcyB0aGUgYWRkaXRpb25hbCBjb25maWcuXG4gICAgICovXG4gICAgT2JqZWN0LmFzc2lnbih0aGlzLCBDYXJkQ29tcG9uZW50LmFwcGx5RGF0YU1hcHBpbmdzKHJhd1Jlc3VsdCwgY29uZmlnLmRhdGFNYXBwaW5ncyB8fCB7fSkpO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHJlc3VsdCBkYXRhXG4gICAgICogQHR5cGUge1Jlc3VsdH1cbiAgICAgKi9cbiAgICB0aGlzLnJlc3VsdCA9IGNvbmZpZy5kYXRhIHx8IHt9O1xuXG4gICAgLyoqXG4gICAgICogVGl0bGUgZm9yIHRoZSBjYXJkXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLnRpdGxlID0gdGhpcy50aXRsZSB8fCByZXN1bHQudGl0bGUgfHwgcmF3UmVzdWx0Lm5hbWUgfHwgJyc7XG5cbiAgICAvKipcbiAgICAgKiBEZXRhaWxzIGZvciB0aGUgY2FyZFxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgdGhpcy5kZXRhaWxzID0gdGhpcy5kZXRhaWxzID09PSBudWxsID8gbnVsbCA6ICh0aGlzLmRldGFpbHMgfHwgcmVzdWx0LmRldGFpbHMgfHwgcmF3UmVzdWx0LmRlc2NyaXB0aW9uIHx8ICcnKTtcblxuICAgIC8qKlxuICAgICAqIFVybCB3aGVuIHlvdSBjbGljayB0aGUgdGl0bGVcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMudXJsID0gdGhpcy51cmwgPT09IG51bGwgPyAnJyA6ICh0aGlzLnVybCB8fCByZXN1bHQubGluayB8fCByYXdSZXN1bHQud2Vic2l0ZSk7XG5cbiAgICAvKipcbiAgICAgKiBJZiBzaG93TW9yZUxpbWl0IGlzIHNldCwgdGhlIHRleHQgdGhhdCBkaXNwbGF5cyBiZW5lYXRoIGl0XG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLnNob3dNb3JlVGV4dCA9IHRoaXMuc2hvd01vcmVUZXh0IHx8ICdTaG93IE1vcmUnO1xuXG4gICAgLyoqXG4gICAgICogSWYgc2hvd01vcmVMaW1pdCBpcyBzZXQsIHRoZSB0ZXh0IHRoYXQgZGlzcGxheXMgYmVuZWF0aCBpdCB3aGVuIGFsbCB0ZXh0IGlzIHNob3duXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLnNob3dMZXNzVGV4dCA9IHRoaXMuc2hvd0xlc3NUZXh0IHx8ICdTaG93IExlc3MnO1xuXG4gICAgLyoqXG4gICAgICogQWRkIGEgc2hvdyBtb3JlIGxpbmsgaWYgdGhpcyBudW1iZXIgb2YgY2hhcmFjdGVycyBpcyBzaG93bixcbiAgICAgKiBhbmQgdHJ1bmNhdGUgdGhlIGxhc3QgMyBjaGFyYWN0ZXJzIHdpdGggYW4gZWxsaXBzZXMuXG4gICAgICogQ2xpY2tpbmcgc2hvdyBtb3JlIHNob3VsZCBleHBhbmQgdGhlIHJlc3VsdHMgKGJ1dCBubyDigJxzaG93IGxlc3PigJ0gbGluaykuXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLnNob3dNb3JlTGltaXQgPSB0aGlzLnNob3dNb3JlTGltaXQ7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgdGFyZ2V0IGF0dHJpYnV0ZSBmb3IgdGhlIHRpdGxlIGxpbmsuXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLnRhcmdldCA9IHRoaXMudGFyZ2V0O1xuXG4gICAgLyoqXG4gICAgICogSW1hZ2UgdXJsIHRvIGRpc3BsYXlcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMuaW1hZ2UgPSB0aGlzLmltYWdlO1xuXG4gICAgLyoqXG4gICAgICogU3VidGl0bGVcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMuc3VidGl0bGUgPSB0aGlzLnN1YnRpdGxlO1xuXG4gICAgLyoqXG4gICAgICogV2hldGhlciBhICdzaG93IG1vcmUnIHRvZ2dsZSBidXR0b24gbmVlZHMgdG8gYmUgcmVuZGVyZWQgYXQgYWxsXG4gICAgICovXG4gICAgY29uc3QgZGV0YWlsc092ZXJMaW1pdCA9IHRoaXMuZGV0YWlscy5sZW5ndGggPiB0aGlzLnNob3dNb3JlTGltaXQ7XG4gICAgdGhpcy5zaG93VG9nZ2xlID0gdGhpcy5zaG93TW9yZUxpbWl0ICYmIGRldGFpbHNPdmVyTGltaXQ7XG5cbiAgICAvKipcbiAgICAgKiBFaXRoZXIgYSBmdW5jdGlvbiB0aGF0IHNwaXRzIG91dCBhbiBhcnJheSBvZiBDVEEgY29uZmlnIG9iamVjdHMgb3IgYW4gYXJyYXkgb2YgQ1RBIGNvbmZpZyBvYmplY3RzXG4gICAgICogb3IgYXBpIGZpZWxkbmFtZXNcbiAgICAgKiBAdHlwZSB7RnVuY3Rpb258QXJyYXk8T2JqZWN0fHN0cmluZz59XG4gICAgICovXG4gICAgdGhpcy5jYWxsc1RvQWN0aW9uID0gdGhpcy5jYWxsc1RvQWN0aW9uIHx8IFtdO1xuXG4gICAgLyoqXG4gICAgICogV2hldGhlciB0byBzaG93IHRoZSBvcmRpbmFsIG9mIHRoZSBjYXJkIGluIHRoZSByZXN1bHRzLlxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqL1xuICAgIHRoaXMuc2hvd09yZGluYWwgPSB0aGlzLnNob3dPcmRpbmFsIHx8IGZhbHNlO1xuXG4gICAgLyoqXG4gICAgICogV2hldGhlciB0aGlzIGNhcmQgaXMgcGFydCBvZiBhIHVuaXZlcnNhbCBzZWFyY2guXG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICovXG4gICAgdGhpcy5pc1VuaXZlcnNhbCA9IHRoaXMuaXNVbml2ZXJzYWwgfHwgZmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgaW5kZXggb2YgdGhlIGNhcmQuXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLl9pbmRleCA9IGNvbmZpZy5faW5kZXggfHwgMDtcbiAgfVxufVxuXG4vKipcbiAqIENhcmQgY29tcG9uZW50cyBleHBlY3QgdG8gcmVjZWl2ZSBhIGRhdGEgY29uZmlnIG9wdGlvbiwgY29udGFpbmluZyBkYXRhIHJlZ2FyZGluZyBlbnRpdHkgcmVzdWx0XG4gKiBlYWNoIGNhcmQgaXMgYXNzaWduZWQgdG8sIGluY2x1ZGluZyBhbGwgZmllbGQgZGF0YSBpbiBkYXRhLl9yYXcuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFN0YW5kYXJkQ2FyZENvbXBvbmVudCBleHRlbmRzIENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yIChjb25maWcgPSB7fSwgc3lzdGVtQ29uZmlnID0ge30pIHtcbiAgICBzdXBlcihuZXcgU3RhbmRhcmRDYXJkQ29uZmlnKGNvbmZpZyksIHN5c3RlbUNvbmZpZyk7XG4gICAgdGhpcy5oaWRlRXhjZXNzRGV0YWlscyA9IHRoaXMuX2NvbmZpZy5zaG93VG9nZ2xlO1xuXG4gICAgLyoqXG4gICAgICogQHR5cGUge09iamVjdH1cbiAgICAgKi9cbiAgICBjb25zdCBkYXRhID0gY29uZmlnLmRhdGEgfHwge307XG5cbiAgICAvKipcbiAgICAgKiBWZXJ0aWNhbCBrZXkgZm9yIHRoZSBzZWFyY2guXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLnZlcnRpY2FsS2V5ID0gZGF0YS52ZXJ0aWNhbEtleTtcblxuICAgIC8qKlxuICAgICAqIFRoZSByZXN1bHQgZGF0YVxuICAgICAqIEB0eXBlIHtSZXN1bHR9XG4gICAgICovXG4gICAgdGhpcy5yZXN1bHQgPSBkYXRhLnJlc3VsdCB8fCB7fTtcbiAgfVxuXG4gIHNldFN0YXRlIChkYXRhKSB7XG4gICAgbGV0IGRldGFpbHMgPSB0aGlzLl9jb25maWcuZGV0YWlscztcbiAgICBpZiAodGhpcy5fY29uZmlnLnNob3dNb3JlTGltaXQpIHtcbiAgICAgIGRldGFpbHMgPSB0aGlzLmhpZGVFeGNlc3NEZXRhaWxzXG4gICAgICAgID8gYCR7dGhpcy5fY29uZmlnLmRldGFpbHMuc3Vic3RyaW5nKDAsIHRoaXMuX2NvbmZpZy5zaG93TW9yZUxpbWl0KX0uLi5gXG4gICAgICAgIDogdGhpcy5fY29uZmlnLmRldGFpbHM7XG4gICAgfVxuICAgIHJldHVybiBzdXBlci5zZXRTdGF0ZSh7XG4gICAgICAuLi5kYXRhLFxuICAgICAgaGlkZUV4Y2Vzc0RldGFpbHM6IHRoaXMuaGlkZUV4Y2Vzc0RldGFpbHMsXG4gICAgICByZXN1bHQ6IHRoaXMucmVzdWx0LFxuICAgICAgaGFzQ1RBczogQ1RBQ29sbGVjdGlvbkNvbXBvbmVudC5oYXNDVEFzKHRoaXMucmVzdWx0Ll9yYXcsIHRoaXMuX2NvbmZpZy5jYWxsc1RvQWN0aW9uKSxcbiAgICAgIGVudGl0eUlkOiB0aGlzLnJlc3VsdC5fcmF3LmlkLFxuICAgICAgdmVydGljYWxLZXk6IHRoaXMudmVydGljYWxLZXksXG4gICAgICBkZXRhaWxzXG4gICAgfSk7XG4gIH1cblxuICBvbk1vdW50ICgpIHtcbiAgICBpZiAodGhpcy5fY29uZmlnLnNob3dUb2dnbGUpIHtcbiAgICAgIGNvbnN0IGVsID0gRE9NLnF1ZXJ5KHRoaXMuX2NvbnRhaW5lciwgJy5qcy15eHQtU3RhbmRhcmRDYXJkLXRvZ2dsZScpO1xuICAgICAgRE9NLm9uKGVsLCAnY2xpY2snLCAoKSA9PiB7XG4gICAgICAgIHRoaXMuaGlkZUV4Y2Vzc0RldGFpbHMgPSAhdGhpcy5oaWRlRXhjZXNzRGV0YWlscztcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSgpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgYWRkQ2hpbGQgKGRhdGEsIHR5cGUsIG9wdHMpIHtcbiAgICBpZiAodHlwZSA9PT0gQ1RBQ29sbGVjdGlvbkNvbXBvbmVudC50eXBlKSB7XG4gICAgICBjb25zdCB1cGRhdGVkRGF0YSA9IHtcbiAgICAgICAgdmVydGljYWxLZXk6IHRoaXMudmVydGljYWxLZXksXG4gICAgICAgIHJlc3VsdDogZGF0YVxuICAgICAgfTtcbiAgICAgIHJldHVybiBzdXBlci5hZGRDaGlsZCh1cGRhdGVkRGF0YSwgdHlwZSwge1xuICAgICAgICBjYWxsc1RvQWN0aW9uOiB0aGlzLl9jb25maWcuY2FsbHNUb0FjdGlvbixcbiAgICAgICAgaXNVbml2ZXJzYWw6IHRoaXMuX2NvbmZpZy5pc1VuaXZlcnNhbCxcbiAgICAgICAgX2N0YU1vZGlmaWVyczogWydTdGFuZGFyZENhcmQnXSxcbiAgICAgICAgLi4ub3B0c1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBzdXBlci5hZGRDaGlsZChkYXRhLCB0eXBlLCBvcHRzKTtcbiAgfVxuXG4gIHN0YXRpYyBnZXQgdHlwZSAoKSB7XG4gICAgcmV0dXJuIGNhcmRUeXBlcy5TdGFuZGFyZDtcbiAgfVxuXG4gIHN0YXRpYyBkZWZhdWx0VGVtcGxhdGVOYW1lICgpIHtcbiAgICByZXR1cm4gY2FyZFRlbXBsYXRlcy5TdGFuZGFyZDtcbiAgfVxuXG4gIHN0YXRpYyBhcmVEdXBsaWNhdGVOYW1lc0FsbG93ZWQgKCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59XG4iLCIvKiogQG1vZHVsZSBBY2NvcmRpb25DYXJkQ29tcG9uZW50ICovXG5cbmltcG9ydCBDb21wb25lbnQgZnJvbSAnLi4vY29tcG9uZW50JztcbmltcG9ydCBDYXJkQ29tcG9uZW50IGZyb20gJy4vY2FyZGNvbXBvbmVudCc7XG5pbXBvcnQgeyBjYXJkVGVtcGxhdGVzLCBjYXJkVHlwZXMgfSBmcm9tICcuL2NvbnN0cyc7XG5pbXBvcnQgRE9NIGZyb20gJy4uLy4uL2RvbS9kb20nO1xuaW1wb3J0IEFuYWx5dGljc0V2ZW50IGZyb20gJy4uLy4uLy4uL2NvcmUvYW5hbHl0aWNzL2FuYWx5dGljc2V2ZW50JztcbmltcG9ydCBDVEFDb2xsZWN0aW9uQ29tcG9uZW50IGZyb20gJy4uL2N0YXMvY3RhY29sbGVjdGlvbmNvbXBvbmVudCc7XG5cbmNsYXNzIEFjY29yZGlvbkNhcmRDb25maWcge1xuICBjb25zdHJ1Y3RvciAoY29uZmlnID0ge30pIHtcbiAgICBPYmplY3QuYXNzaWduKHRoaXMsIGNvbmZpZyk7XG5cbiAgICBjb25zdCBkYXRhID0gY29uZmlnLmRhdGEgfHwge307XG5cbiAgICAvKipcbiAgICAgKiBUaGUgcmVzdWx0IGRhdGFcbiAgICAgKiBAdHlwZSB7UmVzdWx0fVxuICAgICAqL1xuICAgIGNvbnN0IHJlc3VsdCA9IGRhdGEucmVzdWx0IHx8IHt9O1xuXG4gICAgLyoqXG4gICAgICogVGhlIHJhdyBwcm9maWxlIGRhdGFcbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAqL1xuICAgIGNvbnN0IHJhd1Jlc3VsdCA9IHJlc3VsdC5fcmF3IHx8IHt9O1xuXG4gICAgLyoqXG4gICAgICogVGhlIGRhdGFNYXBwaW5ncyBhdHRyaWJ1dGUgb2YgdGhlIGNvbmZpZ1xuICAgICAqIGlzIGVpdGhlciBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhZGRpdGlvbmFsIGNvbmZpZyBmb3JcbiAgICAgKiBhIGNhcmQgb3IgYW4gb2JqZWN0IHRoYXQgaXMgdGhlIGFkZGl0aW9uYWwgY29uZmlnLlxuICAgICAqL1xuICAgIGNvbnN0IGRhdGFNYXBwaW5ncyA9IGNvbmZpZy5kYXRhTWFwcGluZ3MgfHwge307XG4gICAgT2JqZWN0LmFzc2lnbih0aGlzLCBDYXJkQ29tcG9uZW50LmFwcGx5RGF0YU1hcHBpbmdzKHJhd1Jlc3VsdCwgZGF0YU1hcHBpbmdzKSk7XG5cbiAgICAvKipcbiAgICAgKiBWZXJ0aWNhbCBrZXkgZm9yIHRoZSBjYXJkLCBhZGRlZCB0byBhbmFseXRpY3MgZXZlbnRzIHNlbnQgYnkgdGhpcyBjb21wb25lbnQuXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLnZlcnRpY2FsS2V5ID0gY29uZmlnLnZlcnRpY2FsS2V5O1xuXG4gICAgLyoqXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLnRpdGxlID0gdGhpcy50aXRsZSB8fCByZXN1bHQudGl0bGUgfHwgcmF3UmVzdWx0Lm5hbWUgfHwgJyc7XG5cbiAgICAvKipcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMuc3VidGl0bGUgPSB0aGlzLnN1YnRpdGxlO1xuXG4gICAgLyoqXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLmRldGFpbHMgPSB0aGlzLmRldGFpbHMgPT09IG51bGwgPyBudWxsIDogKHRoaXMuZGV0YWlscyB8fCByZXN1bHQuZGV0YWlscyB8fCByYXdSZXN1bHQuZGVzY3JpcHRpb24gfHwgJycpO1xuXG4gICAgLyoqXG4gICAgICogSWYgZXhwYW5kZWQgaXMgdHJ1ZSB0aGUgZmlyc3QgYWNjb3JkaW9uIGluIHZlcnRpY2FsL3VuaXZlcnNhbCByZXN1bHRzIHJlbmRlcnMgb24gcGFnZSBsb2FkIGV4cGFuZGVkLlxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqL1xuICAgIHRoaXMuZXhwYW5kZWQgPSB0aGlzLmV4cGFuZGVkIHx8IGZhbHNlO1xuXG4gICAgLyoqXG4gICAgICogRWl0aGVyIGEgZnVuY3Rpb24gdGhhdCBzcGl0cyBvdXQgYW4gYXJyYXkgb2YgQ1RBIGNvbmZpZyBvYmplY3RzIG9yIGFuIGFycmF5IG9mIENUQSBjb25maWcgb2JqZWN0c1xuICAgICAqIG9yIGFwaSBmaWVsZG5hbWVzXG4gICAgICogQHR5cGUge0Z1bmN0aW9ufEFycmF5PE9iamVjdHxzdHJpbmc+fVxuICAgICAqL1xuICAgIHRoaXMuY2FsbHNUb0FjdGlvbiA9IHRoaXMuY2FsbHNUb0FjdGlvbiB8fCBbXTtcblxuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgdGhpcyBjYXJkIGlzIHBhcnQgb2YgYSB1bml2ZXJzYWwgc2VhcmNoLiBVc2VkIGluIGFuYWx5dGljcy5cbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICB0aGlzLmlzVW5pdmVyc2FsID0gY29uZmlnLmlzVW5pdmVyc2FsIHx8IGZhbHNlO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFjY29yZGlvbkNhcmRDb21wb25lbnQgZXh0ZW5kcyBDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvciAoY29uZmlnID0ge30sIHN5c3RlbUNvbmZpZyA9IHt9KSB7XG4gICAgc3VwZXIobmV3IEFjY29yZGlvbkNhcmRDb25maWcoY29uZmlnKSwgc3lzdGVtQ29uZmlnKTtcblxuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgdGhlIGFjY29yZGlvbiBpcyBjb2xsYXBzZWQgb3Igbm90LlxuICAgICAqIERlZmF1bHRzIHRvIHRydWUgb25seSBpZiB0aGUgZXhwYW5kZWQgb3B0aW9uIGlzIHRydWVcbiAgICAgKiBhbmQgdGhpcyBpcyB0aGUgZmlyc3QgY2FyZCBpbiB0aGUgcmVzdWx0cy5cbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICB0aGlzLmlzRXhwYW5kZWQgPSB0aGlzLl9jb25maWcuZXhwYW5kZWQgJiYgY29uZmlnLl9pbmRleCA9PT0gMDtcblxuICAgIC8qKlxuICAgICAqIEB0eXBlIHtPYmplY3R9XG4gICAgICovXG4gICAgY29uc3QgZGF0YSA9IGNvbmZpZy5kYXRhIHx8IHt9O1xuXG4gICAgLyoqXG4gICAgICogVmVydGljYWwga2V5IGZvciB0aGUgY2FyZCwgYWRkZWQgdG8gYW5hbHl0aWNzIGV2ZW50cyBzZW50IGJ5IHRoaXMgY29tcG9uZW50LlxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgdGhpcy52ZXJ0aWNhbEtleSA9IGRhdGEudmVydGljYWxLZXk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgcmVzdWx0IGRhdGEsIHNlbnQgdG8gY2hpbGRyZW4gQ1RBIENvbXBvbmVudHMgdGhhdCBuZWVkIHRoaXMuXG4gICAgICogQHR5cGUge1Jlc3VsdH1cbiAgICAgKi9cbiAgICB0aGlzLnJlc3VsdCA9IGRhdGEucmVzdWx0IHx8IHt9O1xuICB9XG5cbiAgc2V0U3RhdGUgKGRhdGEpIHtcbiAgICBjb25zdCBpZCA9IHRoaXMucmVzdWx0LmlkIHx8IHRoaXMucmVzdWx0Lm9yZGluYWw7XG4gICAgcmV0dXJuIHN1cGVyLnNldFN0YXRlKHtcbiAgICAgIC4uLmRhdGEsXG4gICAgICByZXN1bHQ6IHRoaXMucmVzdWx0LFxuICAgICAgaXNFeHBhbmRlZDogdGhpcy5pc0V4cGFuZGVkLFxuICAgICAgaWQ6IGAke3RoaXMubmFtZX0tJHtpZH0tJHt0aGlzLnZlcnRpY2FsS2V5fWAsXG4gICAgICBoYXNDVEFzOiBDVEFDb2xsZWN0aW9uQ29tcG9uZW50Lmhhc0NUQXModGhpcy5yZXN1bHQuX3JhdywgdGhpcy5fY29uZmlnLmNhbGxzVG9BY3Rpb24pXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQ2xpY2sgaGFuZGxlciBmb3IgdGhlIGFjY29yZGlvbiB0b2dnbGUgYnV0dG9uXG4gICAqIFRoaXMgaXMgdXNlZCBvdmVyIHNldCBzdGF0ZSBiZWNhdXNlIGl0J3MgYSBsb3Qgc21vb3RoZXIsIHNpbmNlXG4gICAqIGl0IGRvZXNuJ3QgcmlwIHRoZSB3aG9sZSBjb21wb25lbnQgb2ZmIG9mIHRoZSBwYWdlIGFuZCByZW1vdW50IGl0LlxuICAgKiBBbHNvIHJlcG9ydHMgYW4gYW5hbHl0aWNzIGV2ZW50LlxuICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSB0b2dnbGVFbCB0aGUgdG9nZ2xlIGVsZW1lbnRcbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gYWNjb3JkaW9uQm9keUVsIHRoZSAuanMteXh0LUFjY29yZGlvbkNhcmQtYm9keSBlbGVtZW50XG4gICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGFjY29yZGlvbkVsIHRoZSByb290IGFjY29yZGlvbiBlbGVtZW50XG4gICAqL1xuICBoYW5kbGVDbGljayAodG9nZ2xlRWwsIGFjY29yZGlvbkJvZHlFbCwgYWNjb3JkaW9uRWwpIHtcbiAgICB0aGlzLmlzRXhwYW5kZWQgPSAhdGhpcy5pc0V4cGFuZGVkO1xuICAgIGFjY29yZGlvbkVsLmNsYXNzTGlzdC50b2dnbGUoJ3l4dC1BY2NvcmRpb25DYXJkLS1leHBhbmRlZCcpO1xuXG4gICAgYWNjb3JkaW9uQm9keUVsLnN0eWxlLmhlaWdodCA9IGAke3RoaXMuaXNFeHBhbmRlZCA/IGFjY29yZGlvbkJvZHlFbC5zY3JvbGxIZWlnaHQgOiAwfXB4YDtcblxuICAgIHRvZ2dsZUVsLnNldEF0dHJpYnV0ZSgnYXJpYS1leHBhbmRlZCcsIHRoaXMuaXNFeHBhbmRlZCA/ICd0cnVlJyA6ICdmYWxzZScpO1xuICAgIGFjY29yZGlvbkJvZHlFbC5zZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJywgdGhpcy5pc0V4cGFuZGVkID8gJ2ZhbHNlJyA6ICd0cnVlJyk7XG4gICAgY29uc3QgZXZlbnQgPSBuZXcgQW5hbHl0aWNzRXZlbnQodGhpcy5pc0V4cGFuZGVkID8gJ1JPV19FWFBBTkQnIDogJ1JPV19DT0xMQVBTRScpXG4gICAgICAuYWRkT3B0aW9ucyh7XG4gICAgICAgIHZlcnRpY2FsS2V5OiB0aGlzLnZlcnRpY2FsS2V5LFxuICAgICAgICBlbnRpdHlJZDogdGhpcy5yZXN1bHQuX3Jhdy5pZCxcbiAgICAgICAgc2VhcmNoZXI6IHRoaXMuX2NvbmZpZy5pc1VuaXZlcnNhbCA/ICdVTklWRVJTQUwnIDogJ1ZFUlRJQ0FMJ1xuICAgICAgfSk7XG4gICAgdGhpcy5hbmFseXRpY3NSZXBvcnRlci5yZXBvcnQoZXZlbnQpO1xuICB9XG5cbiAgb25Nb3VudCAoKSB7XG4gICAgaWYgKHRoaXMuX2NvbmZpZy5kZXRhaWxzKSB7XG4gICAgICBjb25zdCB0b2dnbGVFbCA9IERPTS5xdWVyeSh0aGlzLl9jb250YWluZXIsICcuanMteXh0LUFjY29yZGlvbkNhcmQtdG9nZ2xlJyk7XG4gICAgICBjb25zdCBhY2NvcmRpb25Cb2R5RWwgPSBET00ucXVlcnkodGhpcy5fY29udGFpbmVyLCAnLmpzLXl4dC1BY2NvcmRpb25DYXJkLWJvZHknKTtcbiAgICAgIGNvbnN0IGFjY29yZGlvbkVsID0gRE9NLnF1ZXJ5KHRoaXMuX2NvbnRhaW5lciwgJy5qcy15eHQtQWNjb3JkaW9uQ2FyZCcpO1xuICAgICAgYWNjb3JkaW9uQm9keUVsLnN0eWxlLmhlaWdodCA9IGAke3RoaXMuaXNFeHBhbmRlZCA/IGFjY29yZGlvbkJvZHlFbC5zY3JvbGxIZWlnaHQgOiAwfXB4YDtcbiAgICAgIERPTS5vbih0b2dnbGVFbCwgJ2NsaWNrJywgKCkgPT4gdGhpcy5oYW5kbGVDbGljayh0b2dnbGVFbCwgYWNjb3JkaW9uQm9keUVsLCBhY2NvcmRpb25FbCkpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBGb3IgcGFzc2luZyBmdW5jdGlvbnMgdG8gdGhlIGNvbmZpZyBvZiBjaGlsZHJlbiB7QGxpbmsgQ1RBQ29sbGVjdGlvbkNvbXBvbmVudH1cbiAgICovXG4gIGFkZENoaWxkIChkYXRhLCB0eXBlLCBvcHRzKSB7XG4gICAgaWYgKHR5cGUgPT09IENUQUNvbGxlY3Rpb25Db21wb25lbnQudHlwZSkge1xuICAgICAgY29uc3QgdXBkYXRlZERhdGEgPSB7XG4gICAgICAgIHZlcnRpY2FsS2V5OiB0aGlzLnZlcnRpY2FsS2V5LFxuICAgICAgICByZXN1bHQ6IGRhdGFcbiAgICAgIH07XG4gICAgICByZXR1cm4gc3VwZXIuYWRkQ2hpbGQodXBkYXRlZERhdGEsIHR5cGUsIHtcbiAgICAgICAgY2FsbHNUb0FjdGlvbjogdGhpcy5fY29uZmlnLmNhbGxzVG9BY3Rpb24sXG4gICAgICAgIF9jdGFNb2RpZmllcnM6IFsnQWNjb3JkaW9uQ2FyZCddLFxuICAgICAgICBpc1VuaXZlcnNhbDogdGhpcy5fY29uZmlnLmlzVW5pdmVyc2FsLFxuICAgICAgICAuLi5vcHRzXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHN1cGVyLmFkZENoaWxkKGRhdGEsIHR5cGUsIG9wdHMpO1xuICB9XG5cbiAgc3RhdGljIGdldCB0eXBlICgpIHtcbiAgICByZXR1cm4gY2FyZFR5cGVzLkFjY29yZGlvbjtcbiAgfVxuXG4gIHN0YXRpYyBkZWZhdWx0VGVtcGxhdGVOYW1lICgpIHtcbiAgICByZXR1cm4gY2FyZFRlbXBsYXRlcy5BY2NvcmRpb247XG4gIH1cblxuICBzdGF0aWMgYXJlRHVwbGljYXRlTmFtZXNBbGxvd2VkICgpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufVxuIiwiLyoqIEBtb2R1bGUgTGVnYWN5Q2FyZENvbXBvbmVudCAqL1xuXG5pbXBvcnQgQ29tcG9uZW50IGZyb20gJy4uL2NvbXBvbmVudCc7XG5pbXBvcnQgQ2FyZENvbXBvbmVudCBmcm9tICcuL2NhcmRjb21wb25lbnQnO1xuaW1wb3J0IHsgY2FyZFRlbXBsYXRlcywgY2FyZFR5cGVzIH0gZnJvbSAnLi9jb25zdHMnO1xuaW1wb3J0IENUQUNvbGxlY3Rpb25Db21wb25lbnQgZnJvbSAnLi4vY3Rhcy9jdGFjb2xsZWN0aW9uY29tcG9uZW50JztcblxuY2xhc3MgTGVnYWN5Q2FyZENvbmZpZyB7XG4gIGNvbnN0cnVjdG9yIChjb25maWcgPSB7fSkge1xuICAgIE9iamVjdC5hc3NpZ24odGhpcywgY29uZmlnKTtcblxuICAgIGNvbnN0IGRhdGEgPSBjb25maWcuZGF0YSB8fCB7fTtcblxuICAgIC8qKlxuICAgICAqIFRoZSByZXN1bHQgZGF0YVxuICAgICAqIEB0eXBlIHtSZXN1bHR9XG4gICAgICovXG4gICAgY29uc3QgcmVzdWx0ID0gZGF0YS5yZXN1bHQgfHwge307XG5cbiAgICAvKipcbiAgICAgKiBUaGUgcmF3IHByb2ZpbGUgZGF0YVxuICAgICAqIEB0eXBlIHtPYmplY3R9XG4gICAgICovXG4gICAgY29uc3QgcmF3UmVzdWx0ID0gcmVzdWx0Ll9yYXcgfHwge307XG5cbiAgICAvKipcbiAgICAgKiBUaGUgZGF0YU1hcHBpbmdzIGF0dHJpYnV0ZSBvZiB0aGUgY29uZmlnXG4gICAgICogaXMgZWl0aGVyIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGFkZGl0aW9uYWwgY29uZmlnIGZvclxuICAgICAqIGEgY2FyZCBvciBhbiBvYmplY3QgdGhhdCBpcyB0aGUgYWRkaXRpb25hbCBjb25maWcuXG4gICAgICovXG4gICAgT2JqZWN0LmFzc2lnbih0aGlzLCBDYXJkQ29tcG9uZW50LmFwcGx5RGF0YU1hcHBpbmdzKHJhd1Jlc3VsdCwgY29uZmlnLmRhdGFNYXBwaW5ncyB8fCB7fSkpO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHJlc3VsdCBkYXRhXG4gICAgICogQHR5cGUge1Jlc3VsdH1cbiAgICAgKi9cbiAgICB0aGlzLnJlc3VsdCA9IGNvbmZpZy5kYXRhIHx8IHt9O1xuXG4gICAgLyoqXG4gICAgICogVGl0bGUgZm9yIHRoZSBjYXJkXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLnRpdGxlID0gdGhpcy50aXRsZSB8fCByZXN1bHQudGl0bGUgfHwgcmF3UmVzdWx0Lm5hbWUgfHwgJyc7XG5cbiAgICAvKipcbiAgICAgKiBEZXRhaWxzIGZvciB0aGUgY2FyZFxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgdGhpcy5kZXRhaWxzID0gdGhpcy5kZXRhaWxzID09PSBudWxsID8gbnVsbCA6ICh0aGlzLmRldGFpbHMgfHwgcmVzdWx0LmRldGFpbHMgfHwgcmF3UmVzdWx0LmRlc2NyaXB0aW9uIHx8ICcnKTtcblxuICAgIC8qKlxuICAgICAqIFVybCB3aGVuIHlvdSBjbGljayB0aGUgdGl0bGVcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMudXJsID0gdGhpcy51cmwgPT09IG51bGwgPyAnJyA6ICh0aGlzLnVybCB8fCByZXN1bHQubGluayB8fCByYXdSZXN1bHQud2Vic2l0ZSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgdGFyZ2V0IGF0dHJpYnV0ZSBmb3IgdGhlIHRpdGxlIGxpbmsuXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLnRhcmdldCA9IHRoaXMudGFyZ2V0O1xuXG4gICAgLyoqXG4gICAgICogSW1hZ2UgdXJsIHRvIGRpc3BsYXlcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMuaW1hZ2UgPSB0aGlzLmltYWdlO1xuXG4gICAgLyoqXG4gICAgICogU3VidGl0bGVcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMuc3VidGl0bGUgPSB0aGlzLnN1YnRpdGxlO1xuXG4gICAgLyoqXG4gICAgICogRWl0aGVyIGEgZnVuY3Rpb24gdGhhdCBzcGl0cyBvdXQgYW4gYXJyYXkgb2YgQ1RBIGNvbmZpZyBvYmplY3RzIG9yIGFuIGFycmF5IG9mIENUQSBjb25maWcgb2JqZWN0c1xuICAgICAqIG9yIGFwaSBmaWVsZG5hbWVzXG4gICAgICogQHR5cGUge0Z1bmN0aW9ufEFycmF5PE9iamVjdHxzdHJpbmc+fVxuICAgICAqL1xuICAgIHRoaXMuY2FsbHNUb0FjdGlvbiA9IHRoaXMuY2FsbHNUb0FjdGlvbiB8fCBbXTtcblxuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgdG8gc2hvdyB0aGUgb3JkaW5hbCBvZiB0aGUgY2FyZCBpbiB0aGUgcmVzdWx0cy5cbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICB0aGlzLnNob3dPcmRpbmFsID0gdGhpcy5zaG93T3JkaW5hbCB8fCBmYWxzZTtcblxuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgdGhpcyBjYXJkIGlzIHBhcnQgb2YgYSB1bml2ZXJzYWwgc2VhcmNoLlxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqL1xuICAgIHRoaXMuaXNVbml2ZXJzYWwgPSB0aGlzLmlzVW5pdmVyc2FsIHx8IGZhbHNlO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGluZGV4IG9mIHRoZSBjYXJkLlxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy5faW5kZXggPSBjb25maWcuX2luZGV4IHx8IDA7XG4gIH1cbn1cblxuLyoqXG4gKiBDYXJkIGNvbXBvbmVudHMgZXhwZWN0IHRvIHJlY2VpdmUgYSBkYXRhIGNvbmZpZyBvcHRpb24sIGNvbnRhaW5pbmcgZGF0YSByZWdhcmRpbmcgZW50aXR5IHJlc3VsdFxuICogZWFjaCBjYXJkIGlzIGFzc2lnbmVkIHRvLCBpbmNsdWRpbmcgYWxsIGZpZWxkIGRhdGEgaW4gZGF0YS5fcmF3LlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBMZWdhY3lDYXJkQ29tcG9uZW50IGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IgKGNvbmZpZyA9IHt9LCBzeXN0ZW1Db25maWcgPSB7fSkge1xuICAgIHN1cGVyKG5ldyBMZWdhY3lDYXJkQ29uZmlnKGNvbmZpZyksIHN5c3RlbUNvbmZpZyk7XG4gICAgLyoqXG4gICAgICogQHR5cGUge09iamVjdH1cbiAgICAgKi9cbiAgICBjb25zdCBkYXRhID0gY29uZmlnLmRhdGEgfHwge307XG5cbiAgICAvKipcbiAgICAgKiBWZXJ0aWNhbCBrZXkgZm9yIHRoZSBzZWFyY2guXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLnZlcnRpY2FsS2V5ID0gZGF0YS52ZXJ0aWNhbEtleTtcblxuICAgIC8qKlxuICAgICAqIFRoZSByZXN1bHQgZGF0YVxuICAgICAqIEB0eXBlIHtSZXN1bHR9XG4gICAgICovXG4gICAgdGhpcy5yZXN1bHQgPSBkYXRhLnJlc3VsdCB8fCB7fTtcbiAgfVxuXG4gIHNldFN0YXRlIChkYXRhKSB7XG4gICAgcmV0dXJuIHN1cGVyLnNldFN0YXRlKHtcbiAgICAgIC4uLmRhdGEsXG4gICAgICBldmVudE9wdGlvbnM6IHRoaXMuX2xlZ2FjeUV2ZW50T3B0aW9ucyh0aGlzLnJlc3VsdC5fcmF3LmlkLCB0aGlzLnJlc3VsdC5saW5rKSxcbiAgICAgIHJlc3VsdDogdGhpcy5yZXN1bHQsXG4gICAgICBoYXNDVEFzOiBDVEFDb2xsZWN0aW9uQ29tcG9uZW50Lmhhc0NUQXModGhpcy5yZXN1bHQuX3JhdywgdGhpcy5fY29uZmlnLmNhbGxzVG9BY3Rpb24pLFxuICAgICAgZW50aXR5SWQ6IHRoaXMucmVzdWx0Ll9yYXcuaWQsXG4gICAgICB2ZXJ0aWNhbEtleTogdGhpcy52ZXJ0aWNhbEtleVxuICAgIH0pO1xuICB9XG5cbiAgX2xlZ2FjeUV2ZW50T3B0aW9ucyAoZW50aXR5SWQsIHVybCkge1xuICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICB2ZXJ0aWNhbENvbmZpZ0lkOiB0aGlzLnZlcnRpY2FsS2V5LFxuICAgICAgc2VhcmNoZXI6IHRoaXMuX2NvbmZpZy5pc1VuaXZlcnNhbCA/ICdVTklWRVJTQUwnIDogJ1ZFUlRJQ0FMJ1xuICAgIH07XG5cbiAgICBpZiAoZW50aXR5SWQpIHtcbiAgICAgIG9wdGlvbnMuZW50aXR5SWQgPSBlbnRpdHlJZDtcbiAgICB9IGVsc2Uge1xuICAgICAgb3B0aW9ucy51cmwgPSB1cmw7XG4gICAgfVxuXG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KG9wdGlvbnMpO1xuICB9XG5cbiAgYWRkQ2hpbGQgKGRhdGEsIHR5cGUsIG9wdHMpIHtcbiAgICBpZiAodHlwZSA9PT0gQ1RBQ29sbGVjdGlvbkNvbXBvbmVudC50eXBlKSB7XG4gICAgICBjb25zdCB1cGRhdGVkRGF0YSA9IHtcbiAgICAgICAgdmVydGljYWxLZXk6IHRoaXMudmVydGljYWxLZXksXG4gICAgICAgIHJlc3VsdDogZGF0YVxuICAgICAgfTtcbiAgICAgIHJldHVybiBzdXBlci5hZGRDaGlsZCh1cGRhdGVkRGF0YSwgdHlwZSwge1xuICAgICAgICBjYWxsc1RvQWN0aW9uOiB0aGlzLl9jb25maWcuY2FsbHNUb0FjdGlvbixcbiAgICAgICAgaXNVbml2ZXJzYWw6IHRoaXMuX2NvbmZpZy5pc1VuaXZlcnNhbCxcbiAgICAgICAgX2N0YU1vZGlmaWVyczogWydMZWdhY3lDYXJkJ10sXG4gICAgICAgIGluY2x1ZGVMZWdhY3lDbGFzc2VzOiB0cnVlLFxuICAgICAgICAuLi5vcHRzXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHN1cGVyLmFkZENoaWxkKGRhdGEsIHR5cGUsIG9wdHMpO1xuICB9XG5cbiAgc3RhdGljIGdldCB0eXBlICgpIHtcbiAgICByZXR1cm4gY2FyZFR5cGVzLkxlZ2FjeTtcbiAgfVxuXG4gIHN0YXRpYyBkZWZhdWx0VGVtcGxhdGVOYW1lICgpIHtcbiAgICByZXR1cm4gY2FyZFRlbXBsYXRlcy5MZWdhY3k7XG4gIH1cblxuICBzdGF0aWMgYXJlRHVwbGljYXRlTmFtZXNBbGxvd2VkICgpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufVxuIiwiLyoqIEBtb2R1bGUgUXVlc3Rpb25TdWJtaXNzaW9uQ29tcG9uZW50ICovXG5cbmltcG9ydCBDb21wb25lbnQgZnJvbSAnLi4vY29tcG9uZW50JztcbmltcG9ydCBET00gZnJvbSAnLi4vLi4vZG9tL2RvbSc7XG5pbXBvcnQgU3RvcmFnZUtleXMgZnJvbSAnLi4vLi4vLi4vY29yZS9zdG9yYWdlL3N0b3JhZ2VrZXlzJztcbmltcG9ydCBRdWVzdGlvblN1Ym1pc3Npb24gZnJvbSAnLi4vLi4vLi4vY29yZS9tb2RlbHMvcXVlc3Rpb25zdWJtaXNzaW9uJztcbmltcG9ydCB7IEFuc3dlcnNDb21wb25lbnRFcnJvciB9IGZyb20gJy4uLy4uLy4uL2NvcmUvZXJyb3JzL2Vycm9ycyc7XG5pbXBvcnQgQW5hbHl0aWNzRXZlbnQgZnJvbSAnLi4vLi4vLi4vY29yZS9hbmFseXRpY3MvYW5hbHl0aWNzZXZlbnQnO1xuaW1wb3J0IFNlYXJjaFN0YXRlcyBmcm9tICcuLi8uLi8uLi9jb3JlL3N0b3JhZ2Uvc2VhcmNoc3RhdGVzJztcblxuLyoqXG4gKiBDb25maWd1cmFibGUgb3B0aW9ucyBmb3IgdGhlIGNvbXBvbmVudFxuICogQHR5cGUge09iamVjdH1cbiAqL1xuY29uc3QgREVGQVVMVF9DT05GSUcgPSB7XG4gIC8qKlxuICAgKiBUaGUgZW50aXR5IGlkZW50aWZpZXIgdGhhdCB0aGUgcXVlc3Rpb24gaXMgYXNzb2NpYXRlZCB3aXRoLlxuICAgKiBUaGlzIGlzIHR5cGljYWxseSBhbiBvcmdhbml6YXRpb24gb2JqZWN0XG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqL1xuICAnZW50aXR5SWQnOiBudWxsLFxuXG4gIC8qKlxuICAgKiBUaGUgbWFpbiBDU1Mgc2VsZWN0b3IgdXNlZCB0byByZWZlcmVuY2UgdGhlIGZvcm0gZm9yIHRoZSBjb21wb25lbnQuXG4gICAqIEB0eXBlIHtzdHJpbmd9IENTUyBzZWxlY3RvclxuICAgKi9cbiAgJ2Zvcm1TZWxlY3Rvcic6ICdmb3JtJyxcblxuICAvKipcbiAgICogQW4gb3B0aW9uYWwgbGFiZWwgdG8gdXNlIGZvciB0aGUgZS1tYWlsIGFkZHJlc3MgaW5wdXRcbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gICdlbWFpbExhYmVsJzogJ0VtYWlsJyxcblxuICAvKipcbiAgICogQW4gb3B0aW9uYWwgbGFiZWwgdG8gdXNlIGZvciB0aGUgbmFtZSBpbnB1dFxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKi9cbiAgJ25hbWVMYWJlbCc6ICdOYW1lJyxcblxuICAvKipcbiAgICogQW4gb3B0aW9uYWwgbGFiZWwgdG8gdXNlIGZvciB0aGUgcXVlc3Rpb25cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gICdxdWVzdGlvbkxhYmVsJzogJ1F1ZXN0aW9uJyxcblxuICAvKipcbiAgICogQW4gb3B0aW9uYWwgbGFiZWwgdG8gdXNlIGZvciB0aGUgUHJpdmFjeSBQb2xpY3lcbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gICdwcml2YWN5UG9saWN5VGV4dCc6ICdCeSBzdWJtaXR0aW5nIG15IGVtYWlsIGFkZHJlc3MsIEkgY29uc2VudCB0byBiZWluZyBjb250YWN0ZWQgdmlhIGVtYWlsIGF0IHRoZSBhZGRyZXNzIHByb3ZpZGVkLicsXG5cbiAgLyoqXG4gICAqIFRoZSBsYWJlbCB0byB1c2UgZm9yIHRoZSBTdWJtaXQgYnV0dG9uXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuICAnYnV0dG9uTGFiZWwnOiAnU3VibWl0JyxcblxuICAvKipcbiAgICogVGhlIHRpdGxlIHRvIGRpc3BsYXkgaW4gdGhlIHRpdGxlIGJhclxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKi9cbiAgJ3NlY3Rpb25UaXRsZSc6ICdBc2sgYSBRdWVzdGlvbicsXG5cbiAgLyoqXG4gICAqIFRoZSBkZXNjcmlwdGlvbiB0byBkaXNwbGF5IGluIHRoZSB0aXRsZSBiYXJcbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gICd0ZWFzZXInOiAnQ2Fu4oCZdCBmaW5kIHdoYXQgeW91XFwncmUgbG9va2luZyBmb3I/IEFzayBhIHF1ZXN0aW9uIGJlbG93LicsXG5cbiAgLyoqXG4gICAqIFRoZSBuYW1lIG9mIHRoZSBpY29uIHRvIHVzZSBpbiB0aGUgdGl0bGUgYmFyXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuICAnc2VjdGlvblRpdGxlSWNvbk5hbWUnOiAnc3VwcG9ydCcsXG5cbiAgLyoqXG4gICAqIFRoZSB0ZXh0IHRvIGRpc3BsYXkgaW4gdGhlIGZlZWRiYWNrIGZvcm0gYWhlYWQgb2YgdGhlIFF1ZXN0aW9uIGlucHV0XG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuICAnZGVzY3JpcHRpb24nOiAnRW50ZXIgeW91ciBxdWVzdGlvbiBhbmQgY29udGFjdCBpbmZvcm1hdGlvbiwgYW5kIHdlXFwnbGwgZ2V0IGJhY2sgdG8geW91IHdpdGggYSByZXNwb25zZSBzaG9ydGx5LicsXG5cbiAgLyoqXG4gICAqIFRoZSBwbGFjZWhvbGRlciB0ZXh0IGZvciByZXF1aXJlZCBpbnB1dHNcbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gICdyZXF1aXJlZElucHV0UGxhY2Vob2xkZXInOiAnKHJlcXVpcmVkKScsXG5cbiAgLyoqXG4gICAqIFRoZSBwbGFjZWhvbGRlciB0ZXh0IGZvciB0aGUgcXVlc3Rpb24gdGV4dCBhcmVhXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuICAncXVlc3Rpb25JbnB1dFBsYWNlaG9sZGVyJzogJ0VudGVyIHlvdXIgcXVlc3Rpb24gaGVyZScsXG5cbiAgLyoqXG4gICAqIFRoZSBjb25maXJtYXRpb24gdGV4dCB0byBkaXNwbGF5IGFmdGVyIHN1Y2Nlc3NmdWxseSBzdWJtaXR0aW5nIGZlZWRiYWNrXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuICAncXVlc3Rpb25TdWJtaXNzaW9uQ29uZmlybWF0aW9uVGV4dCc6ICdUaGFuayB5b3UgZm9yIHlvdXIgcXVlc3Rpb24hJyxcblxuICAvKipcbiAgICogVGhlIGRlZmF1bHQgcHJpdmFjeSBwb2xpY3kgdXJsIGxhYmVsXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICovXG4gICdwcml2YWN5UG9saWN5VXJsTGFiZWwnOiAnTGVhcm4gbW9yZSBoZXJlLicsXG5cbiAgLyoqXG4gICAqIFRoZSBkZWZhdWx0IHByaXZhY3kgcG9saWN5IHVybFxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKi9cbiAgJ3ByaXZhY3lQb2xpY3lVcmwnOiAnJyxcblxuICAvKipcbiAgICogVGhlIGRlZmF1bHQgcHJpdmFjeSBwb2xpY3kgZXJyb3IgdGV4dCwgc2hvd24gd2hlbiB0aGUgdXNlciBkb2VzIG5vdCBhZ3JlZVxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKi9cbiAgJ3ByaXZhY3lQb2xpY3lFcnJvclRleHQnOiAnKiBZb3UgbXVzdCBhZ3JlZSB0byB0aGUgcHJpdmFjeSBwb2xpY3kgdG8gc3VibWl0IGEgcXVlc3Rpb24uJyxcblxuICAvKipcbiAgICogVGhlIGRlZmF1bHQgZW1haWwgZm9ybWF0IGVycm9yIHRleHQsIHNob3duIHdoZW4gdGhlIHVzZXIgc3VibWl0cyBhbiBpbnZhbGlkIGVtYWlsXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuICAnZW1haWxGb3JtYXRFcnJvclRleHQnOiAnKiBQbGVhc2UgZW50ZXIgYSB2YWxpZCBlbWFpbCBhZGRyZXNzLicsXG5cbiAgLyoqXG4gICAqIFRoZSBkZWZhdWx0IG5ldHdvcmsgZXJyb3IgdGV4dCwgc2hvd24gd2hlbiB0aGVyZSBpcyBhbiBpc3N1ZSB3aXRoIHRoZSBRQSBTdWJtaXNzaW9uXG4gICAqIHJlcXVlc3QuXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuICAnbmV0d29ya0Vycm9yVGV4dCc6ICdXZVxcJ3JlIHNvcnJ5LCBhbiBlcnJvciBvY2N1cnJlZC4nLFxuXG4gIC8qKlxuICAgKiBXaGV0aGVyIG9yIG5vdCB0aGlzIGNvbXBvbmVudCBpcyBleHBhbmRlZCBieSBkZWZhdWx0LlxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICovXG4gICdleHBhbmRlZCc6IHRydWVcbn07XG5cbi8qKlxuICogUXVlc3Rpb25TdWJtaXNzaW9uQ29tcG9uZW50IGlzIGEgY29tcG9uZW50IHRoYXQgY3JlYXRlcyBhIGZvcm1cbiAqIHRoYXRzIGRpc3BsYXllZCB3aGVuZXZlciBhIHF1ZXJ5IGlzIHJ1bi4gSXQgZW5hYmxlcyB0aGUgdXNlclxuICogdG8gc3VibWl0IHF1ZXN0aW9ucyB0aGF0IHRoZXkgY2FudCBmaW5kIHRoZSBhbnN3ZXIgZm9yLlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBRdWVzdGlvblN1Ym1pc3Npb25Db21wb25lbnQgZXh0ZW5kcyBDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvciAoY29uZmlnID0ge30sIHN5c3RlbUNvbmZpZyA9IHt9KSB7XG4gICAgc3VwZXIoT2JqZWN0LmFzc2lnbih7fSwgREVGQVVMVF9DT05GSUcsIGNvbmZpZyksIHN5c3RlbUNvbmZpZyk7XG5cbiAgICAvKipcbiAgICAgKiBSZWZlcmVuY2UgdG8gdGhlIHN0b3JhZ2UgbW9kZWxcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMubW9kdWxlSWQgPSBTdG9yYWdlS2V5cy5RVUVTVElPTl9TVUJNSVNTSU9OO1xuXG4gICAgLyoqXG4gICAgICogUmVmZXJlbmNlIHRvIHRoZSBsb2NhbGUgYXMgc2V0IGluIHRoZSBnbG9iYWwgY29uZmlnXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLmxvY2FsZSA9IHRoaXMuY29yZS5nbG9iYWxTdG9yYWdlLmdldFN0YXRlKFN0b3JhZ2VLZXlzLkxPQ0FMRSk7XG5cbiAgICAvKipcbiAgICAgKiBOT1RFKGJpbGx5KSBpZiB0aGlzIGlzIGEgcGF0dGVybiB3ZSB3YW50IHRvIGZvbGxvdyBmb3IgY29uZmlndXJhdGlvblxuICAgICAqIHdlIHNob3VsZCBiYWtlIGl0IGludG8gdGhlIGNvcmUgY2xhc3MuXG4gICAgICovXG4gICAgdGhpcy52YWxpZGF0ZUNvbmZpZygpO1xuXG4gICAgLyoqXG4gICAgICogVGhlIFF1ZXN0aW9uU3VibWlzc2lvbiBjb21wb25lbnQgc2hvdWxkIGJlIHJlbmRlcmVkIG9ubHkgb25jZSBhIHNlYXJjaCBoYXMgY29tcGxldGVkLiBJZiB0aGVcbiAgICAgKiBzZWFyY2ggcmVzdWx0cyBhcmUgc3RpbGwgbG9hZGluZywgdGhlIGNvbXBvbmVudCBzaG91bGQgbm90IGJlIGRpc3BsYXllZC5cbiAgICAgKi9cbiAgICBjb25zdCBvblJlc3VsdHNVcGRhdGUgPSByZXN1bHRzID0+IHtcbiAgICAgIGlmIChyZXN1bHRzLnNlYXJjaFN0YXRlICE9PSBTZWFyY2hTdGF0ZXMuU0VBUkNIX0xPQURJTkcpIHtcbiAgICAgICAgY29uc3QgcXVlc3Rpb25UZXh0ID0gdGhpcy5jb3JlLmdsb2JhbFN0b3JhZ2UuZ2V0U3RhdGUoU3RvcmFnZUtleXMuUVVFUlkpO1xuICAgICAgICB0aGlzLnNldFN0YXRlKG5ldyBRdWVzdGlvblN1Ym1pc3Npb24oe1xuICAgICAgICAgIHF1ZXN0aW9uVGV4dDogcXVlc3Rpb25UZXh0LFxuICAgICAgICAgIGV4cGFuZGVkOiB0aGlzLl9jb25maWcuZXhwYW5kZWRcbiAgICAgICAgfSkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy51bk1vdW50KCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHRoaXMuY29yZS5nbG9iYWxTdG9yYWdlLm9uKCd1cGRhdGUnLCBTdG9yYWdlS2V5cy5WRVJUSUNBTF9SRVNVTFRTLCBvblJlc3VsdHNVcGRhdGUpO1xuICAgIHRoaXMuY29yZS5nbG9iYWxTdG9yYWdlLm9uKCd1cGRhdGUnLCBTdG9yYWdlS2V5cy5VTklWRVJTQUxfUkVTVUxUUywgb25SZXN1bHRzVXBkYXRlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgdGVtcGxhdGUgdG8gcmVuZGVyXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgc3RhdGljIGRlZmF1bHRUZW1wbGF0ZU5hbWUgKGNvbmZpZykge1xuICAgIHJldHVybiAncXVlc3Rpb25zL3F1ZXN0aW9uc3VibWlzc2lvbic7XG4gIH1cblxuICAvKipcbiAgICogVGhlIHB1YmxpYyBpbnRlcmZhY2UgYWxpYXMgZm9yIHRoZSBjb21wb25lbnRcbiAgICogQHJldHVybnMge3N0cmluZ31cbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBzdGF0aWMgZ2V0IHR5cGUgKCkge1xuICAgIHJldHVybiAnUUFTdWJtaXNzaW9uJztcbiAgfVxuXG4gIC8qKlxuICAgKiB2YWxpZGF0aW9uQ29uZmlnIGNvbnRhaW5zIGEgYnVuY2ggb2YgcnVsZXNcbiAgICogdGhhdCBhcmUgdXNlZCB0byB2YWxpZGF0ZSBhZ2luc3QgY29uZmlndXJhdGlvbiBwcm92aWRlZCBieSB0aGUgdXNlclxuICAgKi9cbiAgdmFsaWRhdGVDb25maWcgKCkge1xuICAgIGlmICh0aGlzLl9jb25maWcuZW50aXR5SWQgPT09IG51bGwgfHwgdGhpcy5fY29uZmlnLmVudGl0eUlkID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBBbnN3ZXJzQ29tcG9uZW50RXJyb3IoXG4gICAgICAgICdgZW50aXR5SWRgIGlzIGEgcmVxdWlyZWQgY29uZmlndXJhdGlvbiBvcHRpb24gZm9yIFF1ZXN0aW9uIFN1Ym1pc3Npb24nLFxuICAgICAgICAnUXVlc3Rpb25TdWJtaXNzaW9uJyk7XG4gICAgfVxuICB9XG5cbiAgYmVmb3JlTW91bnQgKCkge1xuICAgIC8vIEF2b2lkIG1vdW50aW5nIHRoZSBjb21wb25lbnQgaWYgdGhlcmVzIG5vIGRhdGFcbiAgICAvLyBOb3RlLCAxIGJlY2F1c2UgYGNvbmZpZ2AgaXMgYWx3YXlzIHBhcnQgb2YgdGhlIHN0YXRlLlxuICAgIHJldHVybiBPYmplY3Qua2V5cyh0aGlzLmdldFN0YXRlKCkpLmxlbmd0aCA+IDE7XG4gIH1cblxuICBvbk1vdW50ICgpIHtcbiAgICBsZXQgdHJpZ2dlckVsID0gRE9NLnF1ZXJ5KHRoaXMuX2NvbnRhaW5lciwgJy5qcy1jb250ZW50LXZpc2liaWxpdHktdG9nZ2xlJyk7XG4gICAgaWYgKHRyaWdnZXJFbCAhPT0gbnVsbCkge1xuICAgICAgdGhpcy5iaW5kRm9ybVRvZ2dsZSh0cmlnZ2VyRWwpO1xuICAgIH1cblxuICAgIGxldCBmb3JtRWwgPSBET00ucXVlcnkodGhpcy5fY29udGFpbmVyLCB0aGlzLl9jb25maWcuZm9ybVNlbGVjdG9yKTtcbiAgICBpZiAoZm9ybUVsID09PSBudWxsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5iaW5kRm9ybUZvY3VzKGZvcm1FbCk7XG4gICAgdGhpcy5iaW5kRm9ybVN1Ym1pdChmb3JtRWwpO1xuICB9XG5cbiAgLyoqXG4gICAqIGJpbmRGb3JtRm9jdXMgd2lsbCB3aXJlIHVwIHRoZSBET00gZm9jdXMgZXZlbnQgdG8gc2VydmVyc2lkZSByZXBvcnRpbmdcbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZm9ybUVsXG4gICAqL1xuICBiaW5kRm9ybUZvY3VzIChmb3JtRWwpIHtcbiAgICBpZiAodGhpcy5hbmFseXRpY3NSZXBvcnRlciA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHF1ZXN0aW9uVGV4dCA9IERPTS5xdWVyeShmb3JtRWwsICcuanMtcXVlc3Rpb24tdGV4dCcpO1xuICAgIERPTS5vbihxdWVzdGlvblRleHQsICdmb2N1cycsICgpID0+IHtcbiAgICAgIHRoaXMuYW5hbHl0aWNzUmVwb3J0ZXIucmVwb3J0KHRoaXMuZ2V0QW5hbHl0aWNzRXZlbnQoJ1FVRVNUSU9OX0ZPQ1VTJykpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIGJpbmRGb3JtU3VibWl0IGhhbmRsZXMgc3VibWl0dGluZyB0aGUgcXVlc3Rpb24gdG8gdGhlIHNlcnZlcixcbiAgICogYW5kIHN1Ym1pdHMgYW4gZXZlbnQgdG8gc2VydmVyc2lkZSByZXBvcnRpbmdcbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZm9ybUVsXG4gICAqL1xuICBiaW5kRm9ybVN1Ym1pdCAoZm9ybUVsKSB7XG4gICAgRE9NLm9uKGZvcm1FbCwgJ3N1Ym1pdCcsIChlKSA9PiB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB0aGlzLmFuYWx5dGljc1JlcG9ydGVyLnJlcG9ydCh0aGlzLmdldEFuYWx5dGljc0V2ZW50KCdRVUVTVElPTl9TVUJNSVQnKSk7XG5cbiAgICAgIC8vIFRPRE8oYmlsbHkpIHdlIHByb2JhYmx5IHdhbnQgdG8gZGlzYWJsZSB0aGUgZm9ybSBmcm9tIGJlaW5nIHN1Ym1pdHRlZCB0d2ljZVxuICAgICAgY29uc3QgZXJyb3JzID0gdGhpcy52YWxpZGF0ZShmb3JtRWwpO1xuICAgICAgY29uc3QgZm9ybURhdGEgPSB0aGlzLnBhcnNlKGZvcm1FbCk7XG4gICAgICBpZiAoT2JqZWN0LmtleXMoZXJyb3JzKS5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2V0U3RhdGUobmV3IFF1ZXN0aW9uU3VibWlzc2lvbihmb3JtRGF0YSwgZXJyb3JzKSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuY29yZS5zdWJtaXRRdWVzdGlvbih7XG4gICAgICAgICdlbnRpdHlJZCc6IHRoaXMuX2NvbmZpZy5lbnRpdHlJZCxcbiAgICAgICAgJ3F1ZXN0aW9uTGFuZ3VhZ2UnOiB0aGlzLmxvY2FsZSxcbiAgICAgICAgJ3NpdGUnOiAnRklSU1RQQVJUWScsXG4gICAgICAgICduYW1lJzogZm9ybURhdGEubmFtZSxcbiAgICAgICAgJ2VtYWlsJzogZm9ybURhdGEuZW1haWwsXG4gICAgICAgICdxdWVzdGlvblRleHQnOiBmb3JtRGF0YS5xdWVzdGlvblRleHQsXG4gICAgICAgICdxdWVzdGlvbkRlc2NyaXB0aW9uJzogZm9ybURhdGEucXVlc3Rpb25EZXNjcmlwdGlvblxuICAgICAgfSlcbiAgICAgICAgLmNhdGNoKGVycm9yID0+IHtcbiAgICAgICAgICB0aGlzLnNldFN0YXRlKFxuICAgICAgICAgICAgbmV3IFF1ZXN0aW9uU3VibWlzc2lvbihmb3JtRGF0YSwge1xuICAgICAgICAgICAgICAnbmV0d29yayc6ICdXZVxcJ3JlIHNvcnJ5LCBhbiBlcnJvciBvY2N1cnJlZC4nXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICk7XG4gICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIGJpbmRGb3JtVG9nZ2xlIGhhbmRsZXMgZXhwYW5kaW5nIGFuZCBtaW1pbWl6aW5nIHRoZSBjb21wb25lbnQncyBmb3JtLlxuICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSB0cmlnZ2VyRWxcbiAgICovXG4gIGJpbmRGb3JtVG9nZ2xlICh0cmlnZ2VyRWwpIHtcbiAgICBET00ub24odHJpZ2dlckVsLCAnY2xpY2snLCAoZSkgPT4ge1xuICAgICAgY29uc3QgZm9ybURhdGEgPSB0aGlzLmdldFN0YXRlKCk7XG4gICAgICB0aGlzLnNldFN0YXRlKFxuICAgICAgICBuZXcgUXVlc3Rpb25TdWJtaXNzaW9uKHtcbiAgICAgICAgICAuLi5mb3JtRGF0YSxcbiAgICAgICAgICAnZXhwYW5kZWQnOiAhZm9ybURhdGEucXVlc3Rpb25FeHBhbmRlZCxcbiAgICAgICAgICAnc3VibWl0dGVkJzogZm9ybURhdGEucXVlc3Rpb25TdWJtaXR0ZWQgfSxcbiAgICAgICAgZm9ybURhdGEuZXJyb3JzKSk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogVGFrZXMgdGhlIGZvcm0sIGFuZCBidWlsZHMgYSBvYmplY3QgdGhhdCByZXByZXNlbnRzIHRoZSBpbnB1dCBuYW1lc1xuICAgKiBhbmQgdGV4dCBmaWVsZHMuXG4gICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGZvcm1FbFxuICAgKiBAcmV0dXJucyB7b2JqZWN0fVxuICAgKi9cbiAgcGFyc2UgKGZvcm1FbCkge1xuICAgIGNvbnN0IGlucHV0RmllbGRzID0gRE9NLnF1ZXJ5QWxsKGZvcm1FbCwgJy5qcy1xdWVzdGlvbi1maWVsZCcpO1xuICAgIGlmICghaW5wdXRGaWVsZHMgfHwgaW5wdXRGaWVsZHMubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4ge307XG4gICAgfVxuXG4gICAgbGV0IG9iaiA9IHt9O1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaW5wdXRGaWVsZHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGxldCB2YWwgPSBpbnB1dEZpZWxkc1tpXS52YWx1ZTtcbiAgICAgIGlmIChpbnB1dEZpZWxkc1tpXS50eXBlID09PSAnY2hlY2tib3gnKSB7XG4gICAgICAgIHZhbCA9IGlucHV0RmllbGRzW2ldLmNoZWNrZWQ7XG4gICAgICB9XG4gICAgICBvYmpbaW5wdXRGaWVsZHNbaV0ubmFtZV0gPSB2YWw7XG4gICAgfVxuXG4gICAgcmV0dXJuIG9iajtcbiAgfVxuXG4gIC8qKlxuICAgKiBWYWxpZGF0ZXMgdGhlIGZpZWxkcyBmb3IgY29ycmVjdCBmb3JtYXR0aW5nXG4gICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGZvcm1FbFxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSBlcnJvcnMgb2JqZWN0IGlmIGFueSBlcnJvcnMgZm91bmRcbiAgICovXG4gIHZhbGlkYXRlIChmb3JtRWwpIHtcbiAgICBsZXQgZXJyb3JzID0ge307XG4gICAgY29uc3QgZmllbGRzID0gRE9NLnF1ZXJ5QWxsKGZvcm1FbCwgJy5qcy1xdWVzdGlvbi1maWVsZCcpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZmllbGRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoIWZpZWxkc1tpXS5jaGVja1ZhbGlkaXR5KCkpIHtcbiAgICAgICAgaWYgKGkgPT09IDApIHtcbiAgICAgICAgICAvLyBzZXQgZm9jdXMgc3RhdGUgb24gZmlyc3QgZXJyb3JcbiAgICAgICAgICBmaWVsZHNbaV0uZm9jdXMoKTtcbiAgICAgICAgfVxuICAgICAgICBzd2l0Y2ggKGZpZWxkc1tpXS5uYW1lKSB7XG4gICAgICAgICAgY2FzZSAnZW1haWwnOlxuICAgICAgICAgICAgZXJyb3JzWydlbWFpbEVycm9yJ10gPSB0cnVlO1xuICAgICAgICAgICAgaWYgKCFmaWVsZHNbaV0udmFsaWRpdHkudmFsdWVNaXNzaW5nKSB7XG4gICAgICAgICAgICAgIGVycm9yc1snZW1haWxFcnJvclRleHQnXSA9IHRoaXMuX2NvbmZpZy5lbWFpbEZvcm1hdEVycm9yVGV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ25hbWUnOlxuICAgICAgICAgICAgZXJyb3JzWyduYW1lRXJyb3InXSA9IHRydWU7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICdwcml2YWN5UG9saWN5JzpcbiAgICAgICAgICAgIGVycm9yc1sncHJpdmFjeVBvbGljeUVycm9yVGV4dCddID0gdGhpcy5fY29uZmlnLnByaXZhY3lQb2xpY3lFcnJvclRleHQ7XG4gICAgICAgICAgICBlcnJvcnNbJ3ByaXZhY3lQb2xpY3lFcnJvciddID0gdHJ1ZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ3F1ZXN0aW9uVGV4dCc6XG4gICAgICAgICAgICBlcnJvcnNbJ3F1ZXN0aW9uVGV4dEVycm9yJ10gPSB0cnVlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGVycm9ycztcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGFuIG9wdGlvbnMgb2JqZWN0IGRlc2NyaWJpbmcgdGhlIGNvbnRleHQgb2YgYSByZXBvcnRhYmxlIGV2ZW50XG4gICAqL1xuICBnZXRBbmFseXRpY3NFdmVudCAoZXZlbnRUeXBlKSB7XG4gICAgY29uc3QgYW5hbHl0aWNzRXZlbnQgPSBuZXcgQW5hbHl0aWNzRXZlbnQoZXZlbnRUeXBlKTtcbiAgICBhbmFseXRpY3NFdmVudC5hZGRPcHRpb25zKHtcbiAgICAgIHZlcnRpY2FsQ29uZmlnSWQ6IHRoaXMuX3ZlcnRpY2FsS2V5LFxuICAgICAgc2VhcmNoZXI6IHRoaXMuX3ZlcnRpY2FsS2V5ID8gJ1ZFUlRJQ0FMJyA6ICdVTklWRVJTQUwnXG4gICAgfSk7XG4gICAgcmV0dXJuIGFuYWx5dGljc0V2ZW50O1xuICB9XG59XG4iLCIvKiogQG1vZHVsZSBJY29uQ29tcG9uZW50ICovXG5cbmltcG9ydCBDb21wb25lbnQgZnJvbSAnLi4vY29tcG9uZW50JztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSWNvbkNvbXBvbmVudCBleHRlbmRzIENvbXBvbmVudCB7XG4gIC8qKlxuICAgKiBJY29uQ29tcG9uZW50XG4gICAqIEBwYXJhbSBvcHRzXG4gICAqIEBwYXJhbSBvcHRzLmljb25OYW1lIHtzdHJpbmd9XG4gICAqIEBwYXJhbSBvcHRzLmljb25Vcmwge3N0cmluZ31cbiAgICovXG4gIGNvbnN0cnVjdG9yIChvcHRzID0ge30sIHN5c3RlbU9wdHMgPSB7fSkge1xuICAgIHN1cGVyKG9wdHMsIHN5c3RlbU9wdHMpO1xuXG4gICAgLyoqXG4gICAgICogbmFtZSBvZiBhbiBpY29uIGZyb20gdGhlIGRlZmF1bHQgaWNvbiBzZXRcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMuaWNvbk5hbWUgPSBvcHRzLmljb25OYW1lIHx8ICdkZWZhdWx0JztcblxuICAgIC8qKlxuICAgICAqIHRoZSB1cmwgdG8gYSBjdXN0b20gaW1hZ2UgaWNvblxuICAgICAqIEB0eXBlIHtudWxsfVxuICAgICAqL1xuICAgIHRoaXMuaWNvblVybCA9IG9wdHMuaWNvblVybCB8fCBudWxsO1xuXG4gICAgLyoqXG4gICAgICogQW4gYWRkaXRpb25hbCBzdHJpbmcgdG8gYXBwZW5kIHRvIHRoZSBpY29uJ3MgY3NzIGNsYXNzLiBNdWx0aXBsZVxuICAgICAqIGNsYXNzZXMgc2hvdWxkIGJlIHNwYWNlIGRlbGltaXRlZC5cbiAgICAgKi9cbiAgICB0aGlzLmNsYXNzTmFtZXMgPSBvcHRzLmNsYXNzTmFtZXMgfHwgbnVsbDtcblxuICAgIC8qKlxuICAgICAqIEEgdW5pcXVlIGlkIHRvIHBhc3MgdG8gdGhlIGljb24uXG4gICAgICogQHR5cGUge09iamVjdH1cbiAgICAgKi9cbiAgICB0aGlzLmNvbXBsZXhDb250ZW50c1BhcmFtcyA9IG9wdHMuY29tcGxleENvbnRlbnRzUGFyYW1zIHx8IHt9O1xuICB9XG5cbiAgc3RhdGljIGdldCB0eXBlICgpIHtcbiAgICByZXR1cm4gJ0ljb25Db21wb25lbnQnO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSB0ZW1wbGF0ZSB0byByZW5kZXJcbiAgICogQHJldHVybnMge3N0cmluZ31cbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBzdGF0aWMgZGVmYXVsdFRlbXBsYXRlTmFtZSAoY29uZmlnKSB7XG4gICAgcmV0dXJuICdpY29ucy9pY29uJztcbiAgfVxuXG4gIC8qKlxuICAgKiBhbGxvd2luZyBkdXBsaWNhdGVzXG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHN0YXRpYyBhcmVEdXBsaWNhdGVOYW1lc0FsbG93ZWQgKCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIG92ZXJyaWRlcyBkZWZhdWx0IGZ1bmN0aW9uYWxpdHkgdG8gcHJvdmlkZSBuYW1lIGFuZCBtYXJrdXBcbiAgICogQHBhcmFtIGRhdGFcbiAgICogQHJldHVybnMge0ljb25Db21wb25lbnR9XG4gICAqL1xuICBzZXRTdGF0ZSAoZGF0YSkge1xuICAgIHJldHVybiBzdXBlci5zZXRTdGF0ZShPYmplY3QuYXNzaWduKGRhdGEsIHtcbiAgICAgIGljb25Vcmw6IHRoaXMuaWNvblVybCxcbiAgICAgIGljb25OYW1lOiB0aGlzLmljb25OYW1lLFxuICAgICAgbmFtZTogdGhpcy5pY29uTmFtZSA/IHRoaXMuaWNvbk5hbWUgOiAnY3VzdG9tJyxcbiAgICAgIGNsYXNzTmFtZXM6IHRoaXMuY2xhc3NOYW1lcyxcbiAgICAgIGNvbXBsZXhDb250ZW50c1BhcmFtczogdGhpcy5jb21wbGV4Q29udGVudHNQYXJhbXNcbiAgICB9KSk7XG4gIH1cbn1cbiIsIi8qKiBAbW9kdWxlIENUQUNvbXBvbmVudCAqL1xuXG5pbXBvcnQgQ29tcG9uZW50IGZyb20gJy4uL2NvbXBvbmVudCc7XG5pbXBvcnQgQW5hbHl0aWNzRXZlbnQgZnJvbSAnLi4vLi4vLi4vY29yZS9hbmFseXRpY3MvYW5hbHl0aWNzZXZlbnQnO1xuaW1wb3J0IERPTSBmcm9tICcuLi8uLi9kb20vZG9tJztcblxuY2xhc3MgQ1RBQ29uZmlnIHtcbiAgY29uc3RydWN0b3IgKGNvbmZpZyA9IHt9KSB7XG4gICAgT2JqZWN0LmFzc2lnbih0aGlzLCBjb25maWcpO1xuXG4gICAgLyoqXG4gICAgICogTGFiZWwgYmVsb3cgdGhlIENUQSBpY29uXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLmxhYmVsID0gY29uZmlnLmxhYmVsO1xuXG4gICAgLyoqXG4gICAgICogQ1RBIGljb24sIG1hcHMgdG8gYSBzZXQgb2YgaWNvbnMuXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLmljb24gPSBjb25maWcuaWNvbjtcblxuICAgIC8qKlxuICAgICAqIFVybCB0byBjdXN0b20gaWNvbiwgaGFzIHByaW9yaXR5IG92ZXIgaWNvbi5cbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMuaWNvblVybCA9IGNvbmZpZy5pY29uVXJsO1xuXG4gICAgLyoqXG4gICAgICogV2hldGhlciB0aGUgRE9NIHNob3VsZCBpbmNsdWRlIGxlZ2FjeSBjbGFzcyBuYW1lc1xuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqL1xuICAgIHRoaXMuaW5jbHVkZUxlZ2FjeUNsYXNzZXMgPSBjb25maWcuaW5jbHVkZUxlZ2FjeUNsYXNzZXMgfHwgZmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiBDbGljayB0aHJvdWdoIHVybCBmb3IgdGhlIGljb24gYW5kIGxhYmVsXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLnVybCA9IGNvbmZpZy51cmw7XG5cbiAgICAvKipcbiAgICAgKiBBbmFseXRpY3MgZXZlbnQgdGhhdCBzaG91bGQgZmlyZTpcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMuYW5hbHl0aWNzRXZlbnRUeXBlID0gY29uZmlnLmFuYWx5dGljcyB8fCBjb25maWcuZXZlbnRUeXBlIHx8ICdDVEFfQ0xJQ0snO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHRhcmdldCBhdHRyaWJ1dGUgZm9yIHRoZSBDVEEgbGluay5cbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICB0aGlzLnRhcmdldCA9IGNvbmZpZy50YXJnZXQgfHwgJ19ibGFuayc7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgZXZlbnRPcHRpb25zIG5lZWRlZCBmb3IgdGhlIGV2ZW50IHRvIGZpcmUsIHBhc3NlZCBhcyBhIHN0cmluZyBvciBPYmplY3RcbiAgICAgKiBmcm9tIGNvbmZpZy5kYXRhTWFwcGluZ3MgfHwge30uXG4gICAgICogQHR5cGUge09iamVjdH1cbiAgICAgKi9cbiAgICBpZiAodHlwZW9mIGNvbmZpZy5ldmVudE9wdGlvbnMgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0aGlzLmV2ZW50T3B0aW9ucyA9IEpTT04ucGFyc2UoY29uZmlnLmV2ZW50T3B0aW9ucyk7XG4gICAgfVxuICAgIHRoaXMuZXZlbnRPcHRpb25zID0gdGhpcy5ldmVudE9wdGlvbnM7XG5cbiAgICAvKipcbiAgICAgKiBBZGRpdGlvbmFsIGNzcyBjbGFzc05hbWUgbW9kaWZpZXJzIGZvciB0aGUgY3RhXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLl9jdGFNb2RpZmllcnMgPSBjb25maWcuX2N0YU1vZGlmaWVycztcblxuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgdGhlIGN0YSBpcyB0aGUgb25seSBvbmUgaW4gaXRzIENUQUNvbGxlY3Rpb25Db21wb25lbnRcbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICB0aGlzLl9pc1NvbG8gPSBjb25maWcuX2lzU29sbyB8fCBmYWxzZTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDVEFDb21wb25lbnQgZXh0ZW5kcyBDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvciAoY29uZmlnID0ge30sIHN5c3RlbUNvbmZpZyA9IHt9KSB7XG4gICAgc3VwZXIobmV3IENUQUNvbmZpZyhjb25maWcpLCBzeXN0ZW1Db25maWcpO1xuICB9XG5cbiAgb25Nb3VudCAoKSB7XG4gICAgY29uc3QgZWwgPSBET00ucXVlcnkodGhpcy5fY29udGFpbmVyLCBgLmpzLXl4dC1DVEFgKTtcbiAgICBpZiAoZWwgJiYgdGhpcy5fY29uZmlnLmV2ZW50T3B0aW9ucykge1xuICAgICAgRE9NLm9uKGVsLCAnbW91c2Vkb3duJywgZSA9PiB7XG4gICAgICAgIGlmIChlLmJ1dHRvbiA9PT0gMCB8fCBlLmJ1dHRvbiA9PT0gMSkge1xuICAgICAgICAgIHRoaXMucmVwb3J0QW5hbHl0aWNzRXZlbnQoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgc2V0U3RhdGUgKGRhdGEpIHtcbiAgICByZXR1cm4gc3VwZXIuc2V0U3RhdGUoe1xuICAgICAgLi4uZGF0YSxcbiAgICAgIGhhc0ljb246IHRoaXMuX2NvbmZpZy5pY29uIHx8IHRoaXMuX2NvbmZpZy5pY29uVXJsXG4gICAgfSk7XG4gIH1cblxuICByZXBvcnRBbmFseXRpY3NFdmVudCAoKSB7XG4gICAgY29uc3QgYW5hbHl0aWNzRXZlbnQgPSBuZXcgQW5hbHl0aWNzRXZlbnQodGhpcy5fY29uZmlnLmFuYWx5dGljc0V2ZW50VHlwZSk7XG4gICAgYW5hbHl0aWNzRXZlbnQuYWRkT3B0aW9ucyh0aGlzLl9jb25maWcuZXZlbnRPcHRpb25zKTtcbiAgICB0aGlzLmFuYWx5dGljc1JlcG9ydGVyLnJlcG9ydChhbmFseXRpY3NFdmVudCk7XG4gIH1cblxuICBzdGF0aWMgZ2V0IHR5cGUgKCkge1xuICAgIHJldHVybiAnQ1RBJztcbiAgfVxuXG4gIHN0YXRpYyBkZWZhdWx0VGVtcGxhdGVOYW1lIChjb25maWcpIHtcbiAgICByZXR1cm4gJ2N0YXMvY3RhJztcbiAgfVxufVxuIiwiLyoqIEBtb2R1bGUgKi9cblxuaW1wb3J0IENvbXBvbmVudCBmcm9tICcuL2NvbXBvbmVudCc7XG5cbmltcG9ydCBOYXZpZ2F0aW9uQ29tcG9uZW50IGZyb20gJy4vbmF2aWdhdGlvbi9uYXZpZ2F0aW9uY29tcG9uZW50JztcblxuaW1wb3J0IFNlYXJjaENvbXBvbmVudCBmcm9tICcuL3NlYXJjaC9zZWFyY2hjb21wb25lbnQnO1xuaW1wb3J0IEZpbHRlclNlYXJjaENvbXBvbmVudCBmcm9tICcuL3NlYXJjaC9maWx0ZXJzZWFyY2hjb21wb25lbnQnO1xuaW1wb3J0IEF1dG9Db21wbGV0ZUNvbXBvbmVudCBmcm9tICcuL3NlYXJjaC9hdXRvY29tcGxldGVjb21wb25lbnQnO1xuaW1wb3J0IFNwZWxsQ2hlY2tDb21wb25lbnQgZnJvbSAnLi9zZWFyY2gvc3BlbGxjaGVja2NvbXBvbmVudCc7XG5pbXBvcnQgTG9jYXRpb25CaWFzQ29tcG9uZW50IGZyb20gJy4vc2VhcmNoL2xvY2F0aW9uYmlhc2NvbXBvbmVudCc7XG5cbmltcG9ydCBGaWx0ZXJCb3hDb21wb25lbnQgZnJvbSAnLi9maWx0ZXJzL2ZpbHRlcmJveGNvbXBvbmVudCc7XG5pbXBvcnQgRmlsdGVyT3B0aW9uc0NvbXBvbmVudCBmcm9tICcuL2ZpbHRlcnMvZmlsdGVyb3B0aW9uc2NvbXBvbmVudCc7XG5pbXBvcnQgUmFuZ2VGaWx0ZXJDb21wb25lbnQgZnJvbSAnLi9maWx0ZXJzL3JhbmdlZmlsdGVyY29tcG9uZW50JztcbmltcG9ydCBEYXRlUmFuZ2VGaWx0ZXJDb21wb25lbnQgZnJvbSAnLi9maWx0ZXJzL2RhdGVyYW5nZWZpbHRlcmNvbXBvbmVudCc7XG5pbXBvcnQgRmFjZXRzQ29tcG9uZW50IGZyb20gJy4vZmlsdGVycy9mYWNldHNjb21wb25lbnQnO1xuaW1wb3J0IEdlb0xvY2F0aW9uQ29tcG9uZW50IGZyb20gJy4vZmlsdGVycy9nZW9sb2NhdGlvbmNvbXBvbmVudCc7XG5pbXBvcnQgU29ydE9wdGlvbnNDb21wb25lbnQgZnJvbSAnLi9maWx0ZXJzL3NvcnRvcHRpb25zY29tcG9uZW50JztcblxuaW1wb3J0IERpcmVjdEFuc3dlckNvbXBvbmVudCBmcm9tICcuL3Jlc3VsdHMvZGlyZWN0YW5zd2VyY29tcG9uZW50JztcbmltcG9ydCBBY2NvcmRpb25SZXN1bHRzQ29tcG9uZW50IGZyb20gJy4vcmVzdWx0cy9hY2NvcmRpb25yZXN1bHRzY29tcG9uZW50LmpzJztcbmltcG9ydCBWZXJ0aWNhbFJlc3VsdHNDb21wb25lbnQgZnJvbSAnLi9yZXN1bHRzL3ZlcnRpY2FscmVzdWx0c2NvbXBvbmVudCc7XG5pbXBvcnQgVW5pdmVyc2FsUmVzdWx0c0NvbXBvbmVudCBmcm9tICcuL3Jlc3VsdHMvdW5pdmVyc2FscmVzdWx0c2NvbXBvbmVudCc7XG5pbXBvcnQgUGFnaW5hdGlvbkNvbXBvbmVudCBmcm9tICcuL3Jlc3VsdHMvcGFnaW5hdGlvbmNvbXBvbmVudCc7XG5cbmltcG9ydCBDYXJkQ29tcG9uZW50IGZyb20gJy4vY2FyZHMvY2FyZGNvbXBvbmVudCc7XG5pbXBvcnQgU3RhbmRhcmRDYXJkQ29tcG9uZW50IGZyb20gJy4vY2FyZHMvc3RhbmRhcmRjYXJkY29tcG9uZW50JztcbmltcG9ydCBBY2NvcmRpb25DYXJkQ29tcG9uZW50IGZyb20gJy4vY2FyZHMvYWNjb3JkaW9uY2FyZGNvbXBvbmVudCc7XG5pbXBvcnQgTGVnYWN5Q2FyZENvbXBvbmVudCBmcm9tICcuL2NhcmRzL2xlZ2FjeWNhcmRjb21wb25lbnQnO1xuXG5pbXBvcnQgQWx0ZXJuYXRpdmVWZXJ0aWNhbHNDb21wb25lbnQgZnJvbSAnLi9yZXN1bHRzL2FsdGVybmF0aXZldmVydGljYWxzY29tcG9uZW50JztcbmltcG9ydCBNYXBDb21wb25lbnQgZnJvbSAnLi9tYXAvbWFwY29tcG9uZW50JztcbmltcG9ydCBRdWVzdGlvblN1Ym1pc3Npb25Db21wb25lbnQgZnJvbSAnLi9xdWVzdGlvbnMvcXVlc3Rpb25zdWJtaXNzaW9uY29tcG9uZW50JztcblxuaW1wb3J0IEljb25Db21wb25lbnQgZnJvbSAnLi9pY29ucy9pY29uY29tcG9uZW50LmpzJztcbmltcG9ydCBDVEFDb21wb25lbnQgZnJvbSAnLi9jdGFzL2N0YWNvbXBvbmVudCc7XG5pbXBvcnQgQ1RBQ29sbGVjdGlvbkNvbXBvbmVudCBmcm9tICcuL2N0YXMvY3RhY29sbGVjdGlvbmNvbXBvbmVudCc7XG5pbXBvcnQgUmVzdWx0c0hlYWRlckNvbXBvbmVudCBmcm9tICcuL3Jlc3VsdHMvcmVzdWx0c2hlYWRlcmNvbXBvbmVudCc7XG5cbmNvbnN0IENPTVBPTkVOVF9DTEFTU19MSVNUID0gW1xuICAvLyBDb3JlIENvbXBvbmVudFxuICBDb21wb25lbnQsXG5cbiAgLy8gTmF2aWdhdGlvbiBDb21wb25lbnRzXG4gIE5hdmlnYXRpb25Db21wb25lbnQsXG5cbiAgLy8gU2VhcmNoIENvbXBvbmVudHNcbiAgU2VhcmNoQ29tcG9uZW50LFxuICBGaWx0ZXJTZWFyY2hDb21wb25lbnQsXG4gIEF1dG9Db21wbGV0ZUNvbXBvbmVudCxcbiAgU3BlbGxDaGVja0NvbXBvbmVudCxcbiAgTG9jYXRpb25CaWFzQ29tcG9uZW50LFxuXG4gIC8vIEZpbHRlciBDb21wb25lbnRzXG4gIEZpbHRlckJveENvbXBvbmVudCxcbiAgRmlsdGVyT3B0aW9uc0NvbXBvbmVudCxcbiAgUmFuZ2VGaWx0ZXJDb21wb25lbnQsXG4gIERhdGVSYW5nZUZpbHRlckNvbXBvbmVudCxcbiAgRmFjZXRzQ29tcG9uZW50LFxuICBHZW9Mb2NhdGlvbkNvbXBvbmVudCxcbiAgU29ydE9wdGlvbnNDb21wb25lbnQsXG5cbiAgLy8gUmVzdWx0cyBDb21wb25lbnRzXG4gIERpcmVjdEFuc3dlckNvbXBvbmVudCxcbiAgVW5pdmVyc2FsUmVzdWx0c0NvbXBvbmVudCxcbiAgVmVydGljYWxSZXN1bHRzQ29tcG9uZW50LFxuICBQYWdpbmF0aW9uQ29tcG9uZW50LFxuICBBY2NvcmRpb25SZXN1bHRzQ29tcG9uZW50LFxuICBNYXBDb21wb25lbnQsXG4gIEFsdGVybmF0aXZlVmVydGljYWxzQ29tcG9uZW50LFxuICBSZXN1bHRzSGVhZGVyQ29tcG9uZW50LFxuXG4gIC8vIENhcmQgQ29tcG9uZW50c1xuICBDYXJkQ29tcG9uZW50LFxuICBTdGFuZGFyZENhcmRDb21wb25lbnQsXG4gIEFjY29yZGlvbkNhcmRDb21wb25lbnQsXG4gIExlZ2FjeUNhcmRDb21wb25lbnQsXG5cbiAgLy8gUXVlc3Rpb25zIENvbXBvbmVudHNcbiAgUXVlc3Rpb25TdWJtaXNzaW9uQ29tcG9uZW50LFxuXG4gIC8vIEhlbHBlciBDb21wb25lbnRzXG4gIEljb25Db21wb25lbnQsXG4gIENUQUNvbXBvbmVudCxcbiAgQ1RBQ29sbGVjdGlvbkNvbXBvbmVudFxuXTtcblxuLyoqXG4gKiBUaGUgY29tcG9uZW50IHJlZ2lzdHJ5IGlzIGEgbWFwIHRoYXQgY29udGFpbnNcbiAqIGFsbCBhdmFpbGFibGUgY29tcG9uZW50IGNsYXNzZXMgdXNlZCBmb3IgY3JlYXRpb24gb3IgZXh0ZW5zaW9uLlxuICogRWFjaCBjb21wb25lbnQgY2xhc3MgaGFzIGEgdW5pcXVlIHR5cGUsIHdoaWNoIGlzIHVzZWQgYXMgdGhlIGtleSBmb3IgdGhlIHJlZ2lzdHJ5XG4gKiBAdHlwZSB7T2JqZWN0LjxzdHJpbmcsIENvbXBvbmVudD59XG4gKi9cbmV4cG9ydCBjb25zdCBDT01QT05FTlRfUkVHSVNUUlkgPSBDT01QT05FTlRfQ0xBU1NfTElTVC5yZWR1Y2UoKHJlZ2lzdHJ5LCBjbGF6eikgPT4ge1xuICByZWdpc3RyeVtjbGF6ei50eXBlXSA9IGNsYXp6O1xuICByZXR1cm4gcmVnaXN0cnk7XG59LCB7fSk7XG4iLCIvKiogQG1vZHVsZSBDb21wb25lbnRNYW5hZ2VyICovXG5cbmltcG9ydCB7IEFuc3dlcnNDb21wb25lbnRFcnJvciB9IGZyb20gJy4uLy4uL2NvcmUvZXJyb3JzL2Vycm9ycyc7XG5pbXBvcnQgRE9NIGZyb20gJy4uL2RvbS9kb20nO1xuaW1wb3J0IHsgQ09NUE9ORU5UX1JFR0lTVFJZIH0gZnJvbSAnLi9yZWdpc3RyeSc7XG5cbi8qKlxuICogQ29tcG9uZW50TWFuYWdlciBpcyBhIFNpbmdsZXRvbmUgdGhhdCBjb250YWlucyBib3RoIGFuIGludGVybmFsIHJlZ2lzdHJ5IG9mXG4gKiBlbGlnaWJsZSBjb21wb25lbnRzIHRvIGJlIGNyZWF0ZWQsIGFzIHdlbGwgYXMga2VlcHMgdHJhY2sgb2YgdGhlIGN1cnJlbnRcbiAqIGluc3RhbnRpYXRlZCBhbmQgYWN0aXZlIGNvbXBvbmVudHMuXG4gKlxuICogQUxMIGNvbXBvbmVudHMgc2hvdWxkIGJlIGNvbnN0cnVjdGVkIHVzaW5nIHRoZSB7Q29tcG9uZW50TWFuYWdlcn0gdmlhIGl0cyBgY3JlYXRlYCBtZXRob2QuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvbXBvbmVudE1hbmFnZXIge1xuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgLyoqXG4gICAgICogVGhlIGFjdGl2ZSBjb21wb25lbnRzIGlzIGFuIGludGVybmFsIGNvbnRhaW5lciB0byBrZWVwIHRyYWNrXG4gICAgICogb2YgYWxsIG9mIHRoZSBjb21wb25lbnRzIHRoYXQgaGF2ZSBiZWVuIGNvbnN0cnVjdGVkXG4gICAgICovXG4gICAgdGhpcy5fYWN0aXZlQ29tcG9uZW50cyA9IFtdO1xuXG4gICAgLyoqXG4gICAgICogQSBsb2NhbCByZWZlcmVuY2UgdG8gdGhlIGNvcmUgbGlicmFyeSBkZXBlbmRlbmN5XG4gICAgICpcbiAgICAgKiBUaGUgQ29yZSBjb250YWlucyBib3RoIHRoZSBzdG9yYWdlIEFORCBzZXJ2aWNlcyB0aGF0IGFyZSBuZWVkZWQgZm9yIHBlcmZvcm1pbmcgb3BlcmF0aW9uc1xuICAgICAqIGxpa2Ugc2VhcmNoIGFuZCBhdXRvIGNvbXBsZXRlLlxuICAgICAqXG4gICAgICogVGhlIHN0b3JhZ2UgaXMgdGhlIHNvdXJjZSBvZiB0cnV0aCBmb3IgdGhlIHN0YXRlIG9mIEFMTCBjb21wb25lbnRzLlxuICAgICAqIFdoZW5ldmVyIHRoZSBzdG9yYWdlIGlzIHVwZGF0ZWQsIHRoZSBzdGF0ZSBnZXRzIHB1c2hlZCBkb3duIHRvIHRoZSBuZWNlc3NhcnkgY29tcG9uZW50cy5cbiAgICAgKiBAdHlwZSB7Q29yZX1cbiAgICAgKi9cbiAgICB0aGlzLl9jb3JlID0gbnVsbDtcblxuICAgIC8qKlxuICAgICAqIFRoZSBwcmltYXJ5IHJlbmRlcmVyIHRvIHVzZSBmb3IgYWxsIGNvbXBvbmVudHNcbiAgICAgKiBAdHlwZSB7SGFuZGxlYmFyc1JlbmRlcmVyfVxuICAgICAqL1xuICAgIHRoaXMuX3JlbmRlcmVyID0gbnVsbDtcblxuICAgIC8qKlxuICAgICAqIEEgbG9jYWwgcmVmZXJlbmNlIHRvIHRoZSBhbmFseXRpY3MgcmVwb3J0ZXIgZGVwZW5kZW5jeVxuICAgICAqL1xuICAgIHRoaXMuX2FuYWx5dGljc1JlcG9ydGVyID0gbnVsbDtcblxuICAgIC8qKlxuICAgICAqIEEgbWFwcGluZyBmcm9tIGNvbXBvbmVudCB0eXBlcyB0byBjb21wb25lbnQgbmFtZXMsIGFzIHRoZXNlIG1heSBiZSBjb25maWd1cmVkIGJ5IGEgdXNlclxuICAgICAqL1xuICAgIHRoaXMuX2NvbXBvbmVudFR5cGVUb0NvbXBvbmVudE5hbWVzID0ge307XG4gIH1cblxuICBzdGF0aWMgZ2V0SW5zdGFuY2UgKCkge1xuICAgIGlmICghdGhpcy5pbnN0YW5jZSkge1xuICAgICAgdGhpcy5pbnN0YW5jZSA9IG5ldyBDb21wb25lbnRNYW5hZ2VyKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuaW5zdGFuY2U7XG4gIH1cblxuICBzZXRSZW5kZXJlciAocmVuZGVyZXIpIHtcbiAgICB0aGlzLl9yZW5kZXJlciA9IHJlbmRlcmVyO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgc2V0Q29yZSAoY29yZSkge1xuICAgIHRoaXMuX2NvcmUgPSBjb3JlO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgc2V0QW5hbHl0aWNzUmVwb3J0ZXIgKHJlcG9ydGVyKSB7XG4gICAgdGhpcy5fYW5hbHl0aWNzUmVwb3J0ZXIgPSByZXBvcnRlcjtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiByZWdpc3RlcnMgYSBjb21wb25lbnQgdG8gYmUgZWxpZ2libGUgZm9yIGNyZWF0aW9uIGFuZCBvdmVycmlkZS5cbiAgICogQHBhcmFtIHtDb21wb25lbnR9IFRoZSBDb21wb25lbnQgQ2xhc3MgdG8gcmVnaXN0ZXJcbiAgICovXG4gIHJlZ2lzdGVyIChjb21wb25lbnRDbGF6eikge1xuICAgIENPTVBPTkVOVF9SRUdJU1RSWVtjb21wb25lbnRDbGF6ei50eXBlXSA9IGNvbXBvbmVudENsYXp6O1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgY29tcG9uZW50cyB3aXRoIG5hbWVzIHNpbWlsYXIgdG8gdGhlIHBhc3NlZCBpbiBjb21wb25lbnQgY2xhc3MuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjb21wb25lbnRUeXBlXG4gICAqL1xuICBnZXRTaW1pbGFyQ29tcG9uZW50cyAoY29tcG9uZW50VHlwZSkge1xuICAgIGxldCBzaW1pbGFyQ29tcG9uZW50cyA9IE9iamVjdC5rZXlzKENPTVBPTkVOVF9SRUdJU1RSWSkuZmlsdGVyKHR5cGUgPT5cbiAgICAgIHR5cGUuc3RhcnRzV2l0aChjb21wb25lbnRUeXBlLnN1YnN0cmluZygwLCAyKSlcbiAgICApO1xuICAgIGlmIChzaW1pbGFyQ29tcG9uZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgIHNpbWlsYXJDb21wb25lbnRzID0gT2JqZWN0LmtleXMoQ09NUE9ORU5UX1JFR0lTVFJZKTtcbiAgICB9XG4gICAgcmV0dXJuIHNpbWlsYXJDb21wb25lbnRzO1xuICB9XG5cbiAgLyoqXG4gICAqIGNyZWF0ZSBpcyB0aGUgZW50cnkgcG9pbnQgZm9yIGNvbnN0cnVjdGluZyBhbnkgYW5kIGFsbCBjb21wb25lbnRzLlxuICAgKiBJdCB3aWxsIGluc3RhbnRpYXRlIGEgbmV3IGluc3RhbmNlIG9mIHRoZSBjb21wb25lbnQsIGFuZCBib3RoIGFwcGx5XG4gICAqIGluaXRpYWwgc3RhdGUgZnJvbSB0aGUgc3RvcmFnZSBhbmQgYmluZCBpdCB0byB0aGUgc3RvcmFnZSBmb3IgdXBkYXRlcy5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGNvbXBvbmVudFR5cGUgVGhlIGNvbXBvbmVudCB0eXBlIHRvIGNyZWF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyBUaGUgb3B0aW9ucyB0byBwaXBlIHRvIHRoZSBjb25zdHJ1Y3Rpb24gb2YgdGhlIGNvbXBvbmVudFxuICAgKi9cbiAgY3JlYXRlIChjb21wb25lbnRUeXBlLCBvcHRzKSB7XG4gICAgLy8gRXZlcnkgY29tcG9uZW50IG5lZWRzIGxvY2FsIGFjY2VzcyB0byB0aGUgY29tcG9uZW50IG1hbmFnZXJcbiAgICAvLyBiZWNhdXNlIHNvbWV0aW1lcyBjb21wb25lbnRzIGhhdmUgc3ViY29tcG9uZW50cyB0aGF0IG5lZWQgdG8gYmVcbiAgICAvLyBjb25zdHJ1Y3RlZCBkdXJpbmcgY3JlYXRpb25cbiAgICBsZXQgc3lzdGVtT3B0cyA9IHtcbiAgICAgIGNvcmU6IHRoaXMuX2NvcmUsXG4gICAgICByZW5kZXJlcjogdGhpcy5fcmVuZGVyZXIsXG4gICAgICBhbmFseXRpY3NSZXBvcnRlcjogdGhpcy5fYW5hbHl0aWNzUmVwb3J0ZXIsXG4gICAgICBjb21wb25lbnRNYW5hZ2VyOiB0aGlzXG4gICAgfTtcblxuICAgIGxldCBjb21wb25lbnRDbGFzcyA9IENPTVBPTkVOVF9SRUdJU1RSWVtjb21wb25lbnRUeXBlXTtcbiAgICBpZiAoIWNvbXBvbmVudENsYXNzKSB7XG4gICAgICB0aHJvdyBuZXcgQW5zd2Vyc0NvbXBvbmVudEVycm9yKFxuICAgICAgICBgQ29tcG9uZW50IHR5cGUgJHtjb21wb25lbnRUeXBlfSBpcyBub3QgcmVjb2duaXplZCBhcyBhIHZhbGlkIGNvbXBvbmVudC5gICtcbiAgICAgICAgYCBZb3UgbWlnaHQgaGF2ZSBtZWFudCAke3RoaXMuZ2V0U2ltaWxhckNvbXBvbmVudHMoY29tcG9uZW50VHlwZSkuam9pbignLCAnKX0/YCk7XG4gICAgfVxuXG4gICAgaWYgKFxuICAgICAgIWNvbXBvbmVudENsYXNzLmFyZUR1cGxpY2F0ZU5hbWVzQWxsb3dlZCgpICYmXG4gICAgICB0aGlzLl9hY3RpdmVDb21wb25lbnRzLnNvbWUoYyA9PiBjLm5hbWUgPT09IG9wdHMubmFtZSlcbiAgICApIHtcbiAgICAgIHRocm93IG5ldyBBbnN3ZXJzQ29tcG9uZW50RXJyb3IoXG4gICAgICAgIGBBbm90aGVyIGNvbXBvbmVudCB3aXRoIG5hbWUgJHtvcHRzLm5hbWV9IGFscmVhZHkgZXhpc3RzYCxcbiAgICAgICAgY29tcG9uZW50VHlwZSk7XG4gICAgfVxuXG4gICAgY29uc3QgY29uZmlnID0ge1xuICAgICAgaXNUd2luOiB0aGlzLl9hY3RpdmVDb21wb25lbnRzLnNvbWUoY29tcG9uZW50ID0+IGNvbXBvbmVudC5jb25zdHJ1Y3Rvci50eXBlID09PSBjb21wb25lbnRUeXBlKSxcbiAgICAgIC4uLm9wdHNcbiAgICB9O1xuXG4gICAgLy8gSW5zdGFudGlhdGUgb3VyIG5ldyBjb21wb25lbnQgYW5kIGtlZXAgdHJhY2sgb2YgaXRcbiAgICBsZXQgY29tcG9uZW50ID1cbiAgICAgIG5ldyBDT01QT05FTlRfUkVHSVNUUllbY29tcG9uZW50VHlwZV0oY29uZmlnLCBzeXN0ZW1PcHRzKVxuICAgICAgICAuaW5pdChjb25maWcpO1xuXG4gICAgdGhpcy5fYWN0aXZlQ29tcG9uZW50cy5wdXNoKGNvbXBvbmVudCk7XG4gICAgaWYgKCF0aGlzLl9jb21wb25lbnRUeXBlVG9Db21wb25lbnROYW1lc1tjb21wb25lbnRUeXBlXSkge1xuICAgICAgdGhpcy5fY29tcG9uZW50VHlwZVRvQ29tcG9uZW50TmFtZXNbY29tcG9uZW50VHlwZV0gPSBbXTtcbiAgICB9XG4gICAgdGhpcy5fY29tcG9uZW50VHlwZVRvQ29tcG9uZW50TmFtZXNbY29tcG9uZW50VHlwZV0ucHVzaChjb21wb25lbnQubmFtZSk7XG5cbiAgICAvLyBJZiB0aGVyZSBpcyBhIGdsb2JhbCBzdG9yYWdlIHRvIHBvd2VyIHN0YXRlLCBhcHBseSB0aGUgc3RhdGVcbiAgICAvLyBmcm9tIHRoZSBzdG9yYWdlIHRvIHRoZSBjb21wb25lbnQsIGFuZCB0aGVuIGJpbmQgdGhlIGNvbXBvbmVudFxuICAgIC8vIHN0YXRlIHRvIHRoZSBzdG9yYWdlIHZpYSBpdHMgdXBkYXRlc1xuICAgIGlmICh0aGlzLl9jb3JlICYmIHRoaXMuX2NvcmUuZ2xvYmFsU3RvcmFnZSAhPT0gbnVsbCkge1xuICAgICAgaWYgKGNvbXBvbmVudC5tb2R1bGVJZCA9PT0gdW5kZWZpbmVkIHx8IGNvbXBvbmVudC5tb2R1bGVJZCA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gY29tcG9uZW50O1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9jb3JlLmdsb2JhbFN0b3JhZ2VcbiAgICAgICAgLm9uKCd1cGRhdGUnLCBjb21wb25lbnQubW9kdWxlSWQsIChkYXRhKSA9PiB7XG4gICAgICAgICAgY29tcG9uZW50LnNldFN0YXRlKGRhdGEpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gY29tcG9uZW50O1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZSB0aGUgcHJvdmlkZWQgY29tcG9uZW50IGZyb20gdGhlIGxpc3Qgb2YgYWN0aXZlIGNvbXBvbmVudHMgYW5kIHJlbW92ZVxuICAgKiB0aGUgYXNzb2NpYXRlZCBzdG9yYWdlIGV2ZW50IGxpc3RlbmVyXG4gICAqIEBwYXJhbSB7Q29tcG9uZW50fSBjb21wb25lbnQgVGhlIGNvbXBvbmVudCB0byByZW1vdmVcbiAgICovXG4gIHJlbW92ZSAoY29tcG9uZW50KSB7XG4gICAgdGhpcy5fY29yZS5nbG9iYWxTdG9yYWdlLm9mZigndXBkYXRlJywgY29tcG9uZW50Lm1vZHVsZUlkKTtcblxuICAgIGNvbnN0IGluZGV4ID0gdGhpcy5fYWN0aXZlQ29tcG9uZW50cy5maW5kSW5kZXgoYyA9PiBjLm5hbWUgPT09IGNvbXBvbmVudC5uYW1lKTtcbiAgICB0aGlzLl9hY3RpdmVDb21wb25lbnRzLnNwbGljZShpbmRleCwgMSk7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlIHRoZSBjb21wb25lbnQgd2l0aCB0aGUgZ2l2ZW4gbmFtZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBUaGUgbmFtZSBvZiB0aGUgY29tcG5lbnQgdG8gcmVtb3ZlXG4gICAqL1xuICByZW1vdmVCeU5hbWUgKG5hbWUpIHtcbiAgICBjb25zdCBjb21wb25lbnQgPSB0aGlzLl9hY3RpdmVDb21wb25lbnRzLmZpbmQoYyA9PiBjLm5hbWUgPT09IG5hbWUpO1xuICAgIGNvbXBvbmVudC5yZW1vdmUoKTtcbiAgICBET00uZW1wdHkoY29tcG9uZW50Ll9jb250YWluZXIpO1xuICB9XG5cbiAgZ2V0QWN0aXZlQ29tcG9uZW50ICh0eXBlKSB7XG4gICAgcmV0dXJuIHRoaXMuX2FjdGl2ZUNvbXBvbmVudHMuZmluZChjID0+IGMuY29uc3RydWN0b3IudHlwZSA9PT0gdHlwZSk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhIGNvbmNhdGVuYXRlZCBsaXN0IG9mIGFsbCBuYW1lcyBhc3NvY2lhdGVkIHdpdGggdGhlIGdpdmVuIGNvbXBvbmVudCB0eXBlc1xuICAgKiBAcGFyYW0ge3N0cmluZ1tdfSB0eXBlIFRoZSB0eXBlcyBvZiB0aGUgY29tcG9uZW50XG4gICAqIEByZXR1cm5zIHtzdHJpbmdbXX0gVGhlIGNvbXBvbmVudCBuYW1lcyBmb3IgdGhlIGNvbXBvbmVudCB0eXBlc1xuICAgKi9cbiAgZ2V0Q29tcG9uZW50TmFtZXNGb3JDb21wb25lbnRUeXBlcyAodHlwZXMpIHtcbiAgICByZXR1cm4gdHlwZXMucmVkdWNlKChuYW1lcywgdHlwZSkgPT4ge1xuICAgICAgcmV0dXJuIG5hbWVzLmNvbmNhdCh0aGlzLl9jb21wb25lbnRUeXBlVG9Db21wb25lbnROYW1lc1t0eXBlXSB8fCBbXSk7XG4gICAgfSwgW10pO1xuICB9XG59XG4iLCIvKiogQG1vZHVsZSBWZXJ0aWNhbFBhZ2VzQ29uZmlnICovXG5cbmV4cG9ydCBjbGFzcyBWZXJ0aWNhbFBhZ2VDb25maWcge1xuICBjb25zdHJ1Y3RvciAoY29uZmlnID0ge30pIHtcbiAgICAvKipcbiAgICAgKiBUaGUgbmFtZSBvZiB0aGUgdGFiIHRoYXQgaXMgZXhwb3NlZCBmb3IgdGhlIGxpbmtcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMubGFiZWwgPSBjb25maWcubGFiZWwgfHwgbnVsbDtcblxuICAgIC8qKlxuICAgICAqIFRoZSBjb21wbGV0ZSBVUkwsIGluY2x1ZGluZyB0aGUgcGFyYW1zXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLnVybCA9IGNvbmZpZy51cmwgfHwgbnVsbDtcblxuICAgIC8qKlxuICAgICAqIFRoZSBzZXJ2ZXJzaWRlIHZlcnRpY2FsIGNvbmZpZyBpZCB0aGF0IHRoaXMgaXMgcmVmZXJlbmNlZCB0by5cbiAgICAgKiBCeSBwcm92aWRpbmcgdGhpcywgZW5hYmxlcyBkeW5hbWljIHNvcnRpbmcgYmFzZWQgb24gcmVzdWx0cy5cbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMudmVydGljYWxLZXkgPSBjb25maWcudmVydGljYWxLZXkgfHwgbnVsbDtcblxuICAgIC8qKlxuICAgICAqIERldGVybWluZXMgd2hldGhlciB0byBzaG93IHRoaXMgdGFiIGluIHRoZSBuYXZpZ2F0aW9uIGNvbXBvbmVudFxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqL1xuICAgIHRoaXMuaGlkZUluTmF2aWdhdGlvbiA9IGNvbmZpZy5oaWRlSW5OYXZpZ2F0aW9uIHx8IGZhbHNlO1xuXG4gICAgLyoqXG4gICAgICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRvIHNob3cgdGhpcyB0YWIgZmlyc3QgaW4gdGhlIG9yZGVyXG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICovXG4gICAgdGhpcy5pc0ZpcnN0ID0gY29uZmlnLmlzRmlyc3QgfHwgZmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiBEZXRlcm1pbmVzIHdoZXRoZXIgb3Igbm90IHRvIGFwcGx5IGEgc3BlY2lhbCBjbGFzcyB0byB0aGVcbiAgICAgKiBtYXJrdXAgdG8gZGV0ZXJtaW5lIGlmIGl0J3MgYW4gYWN0aXZlIHRhYlxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqL1xuICAgIHRoaXMuaXNBY3RpdmUgPSBjb25maWcuaXNBY3RpdmUgfHwgZmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiBVUkwgb2YgYW4gaWNvblxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgdGhpcy5pY29uVXJsID0gY29uZmlnLmljb25Vcmw7XG5cbiAgICAvKipcbiAgICAgKiBuYW1lIG9mIGFuIGljb24gZnJvbSB0aGUgZGVmYXVsdCBpY29uIHNldFxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgdGhpcy5pY29uID0gY29uZmlnLmljb247XG4gICAgT2JqZWN0LmZyZWV6ZSh0aGlzKTtcbiAgfVxuXG4gIHZhbGlkYXRlICgpIHtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBWZXJ0aWNhbFBhZ2VzQ29uZmlnIHtcbiAgY29uc3RydWN0b3IgKHBhZ2VzID0gW10pIHtcbiAgICB0aGlzLnZlcnRpY2FsUGFnZXNDb25maWcgPSBWZXJ0aWNhbFBhZ2VzQ29uZmlnLmZyb20ocGFnZXMpO1xuICB9XG5cbiAgLyoqXG4gICAqIFVzaW5nIGEgZ2V0dGVyIHRoYXQgY29waWVzIHRoZSBkYXRhIGluc3RlYWQgb2YgcHJvdmlkaW5nIGEgcmVmZXJlbmNlIHByZXZlbnRzIGl0IGZyb20gYmVpbmcgbXV0YXRlZC5cbiAgICogVGhpcyBpcyBpbXBvcnRhbnQgZm9yIGdsb2JhbCBjb25maWd1cmF0aW9uLlxuICAgKiBAcmV0dXJucyB7QXJyYXk8VmVydGljYWxQYWdlQ29uZmlnPn1cbiAgICovXG4gIGdldCAoKSB7XG4gICAgcmV0dXJuIHRoaXMudmVydGljYWxQYWdlc0NvbmZpZy5tYXAocGFnZSA9PiAoeyAuLi5wYWdlIH0pKTtcbiAgfVxuXG4gIHN0YXRpYyBmcm9tIChwYWdlcykge1xuICAgIHJldHVybiBwYWdlcy5tYXAocGFnZSA9PiBuZXcgVmVydGljYWxQYWdlQ29uZmlnKHBhZ2UpKTtcbiAgfVxufVxuIiwiaW1wb3J0IEFwaVJlcXVlc3QgZnJvbSAnLi4vaHR0cC9hcGlyZXF1ZXN0JztcblxuLyoqXG4gKiBUaGlzIGNsYXNzIHByb3ZpZGVzIGFjY2VzcyB0byB0aGUgQW5zd2VycyBTdGF0dXMgcGFnZS4gVGhpcyBwYWdlIGluZGljYXRlc1xuICogaWYgdGhlIGZyb250LWVuZCBmb3IgYSBwYXJ0aWN1bGFyIGV4cGVyaWVuY2Ugc2hvdWxkIGJlIHRlbXBvcmFyaWx5IGRpc2FibGVkXG4gKiBkdWUgdG8gYmFjay1lbmQgaXNzdWVzLlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNYXN0ZXJTd2l0Y2hBcGkge1xuICBjb25zdHJ1Y3RvciAocmVxdWVzdENvbmZpZywgZ2xvYmFsU3RvcmFnZSkge1xuICAgIHRoaXMuX3JlcXVlc3QgPSBuZXcgQXBpUmVxdWVzdChyZXF1ZXN0Q29uZmlnLCBnbG9iYWxTdG9yYWdlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgdGhlIGZyb250LWVuZCBmb3IgdGhlIGdpdmVuIGV4cGVyaWVuY2Ugc2hvdWxkIGJlIHRlbXBvcmFyaWx5IGRpc2FibGVkLlxuICAgKiBOb3RlIHRoYXQgdGhpcyBjaGVjayBlcnJzIG9uIHRoZSBzaWRlIG9mIGVuYWJsaW5nIHRoZSBmcm9udC1lbmQuIElmIHRoZSBuZXR3b3JrIGNhbGxcbiAgICogZG9lcyBub3QgY29tcGxldGUgc3VjY2Vzc2Z1bGx5LCBkdWUgdG8gdGltZW91dCBvciBvdGhlciBlcnJvciwgdGhvc2UgZmFpbHVyZXMgYXJlIGNhdWdodC5cbiAgICogSW4gdGhlc2UgZmFpbHVyZSBjYXNlcywgdGhlIGFzc3VtcHRpb24gaXMgdGhhdCB0aGluZ3MgYXJlIGVuYWJsZWQuXG4gICAqXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGJvb2xlYW4+fSBBIFByb21pc2UgY29udGFpbmluZyBhIGJvb2xlYW4gaW5kaWNhdGluZyBpZiB0aGUgZnJvbnQtZW5kXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG91bGQgYmUgZGlzYWJsZWQuXG4gICAqL1xuICBpc0Rpc2FibGVkICgpIHtcbiAgICAvLyBBIDEwMG1zIHRpbWVvdXQgaXMgZW5mb3JjZWQgb24gdGhlIHN0YXR1cyBjYWxsLlxuICAgIGNvbnN0IHRpbWVvdXQgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBzZXRUaW1lb3V0KHJlamVjdCwgMTAwKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBQcm9taXNlLnJhY2UoW3RoaXMuX3JlcXVlc3QuZ2V0KHsgY3JlZGVudGlhbHM6ICdvbWl0JyB9KSwgdGltZW91dF0pXG4gICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHJlc3BvbnNlLmpzb24oKSlcbiAgICAgICAgLnRoZW4oc3RhdHVzID0+IHN0YXR1cyAmJiBzdGF0dXMuZGlzYWJsZWQpXG4gICAgICAgIC50aGVuKGlzRGlzYWJsZWQgPT4gcmVzb2x2ZSghIWlzRGlzYWJsZWQpKVxuICAgICAgICAuY2F0Y2goKCkgPT4gcmVzb2x2ZShmYWxzZSkpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcge0BsaW5rIE1hc3RlclN3aXRjaEFwaX0gZnJvbSB0aGUgcHJvdmlkZWQgcGFyYW1ldGVycy5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGFwaUtleSBUaGUgYXBpS2V5IG9mIHRoZSBleHBlcmllbmNlLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZXhwZXJpZW5jZUtleSBUaGUgaWRlbnRpZmllciBvZiB0aGUgZXhwZXJpZW5jZS5cbiAgICogQHBhcmFtIHtHbG9iYWxTdG9yYWdlfSBnbG9iYWxTdG9yYWdlIFRoZSB7QGxpbmsgR2xvYmFsU3RvcmFnZX0gaW5zdGFuY2UuXG4gICAqIEByZXR1cm5zIHtNYXN0ZXJTd2l0Y2hBcGl9IFRoZSBuZXcge0BsaW5rIE1hc3RlclN3aXRjaEFwaX0gaW5zdGFuY2UuXG4gICAqL1xuICBzdGF0aWMgZnJvbSAoYXBpS2V5LCBleHBlcmllbmNlS2V5LCBnbG9iYWxTdG9yYWdlKSB7XG4gICAgY29uc3QgcmVxdWVzdENvbmZpZyA9IHtcbiAgICAgIGFwaUtleSxcbiAgICAgIGJhc2VVcmw6ICdodHRwczovL2Fuc3dlcnNzdGF0dXMucGFnZXNjZG4uY29tLycsXG4gICAgICBlbmRwb2ludDogYCR7YXBpS2V5fS8ke2V4cGVyaWVuY2VLZXl9L3N0YXR1cy5qc29uYFxuICAgIH07XG4gICAgcmV0dXJuIG5ldyBNYXN0ZXJTd2l0Y2hBcGkocmVxdWVzdENvbmZpZywgZ2xvYmFsU3RvcmFnZSk7XG4gIH1cbn1cbiIsIiFmdW5jdGlvbihlLHIpe1wib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzJiZcInVuZGVmaW5lZFwiIT10eXBlb2YgbW9kdWxlP21vZHVsZS5leHBvcnRzPXIoKTpcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKHIpOihlPWV8fHNlbGYpLlJ0ZkNvbnZlcnRlcj1yKCl9KHRoaXMsZnVuY3Rpb24oKXtcInVzZSBzdHJpY3RcIjt2YXIgZT1cInVuZGVmaW5lZFwiIT10eXBlb2YgZ2xvYmFsVGhpcz9nbG9iYWxUaGlzOlwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3c/d2luZG93OlwidW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWw/Z2xvYmFsOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBzZWxmP3NlbGY6e307ZnVuY3Rpb24gcigpe3Rocm93IG5ldyBFcnJvcihcIkR5bmFtaWMgcmVxdWlyZXMgYXJlIG5vdCBjdXJyZW50bHkgc3VwcG9ydGVkIGJ5IHJvbGx1cC1wbHVnaW4tY29tbW9uanNcIil9dmFyIHQsbj0oZnVuY3Rpb24odCxuKXt0LmV4cG9ydHM9ZnVuY3Rpb24gZSh0LG4sbyl7ZnVuY3Rpb24gcyhhLGwpe2lmKCFuW2FdKXtpZighdFthXSl7dmFyIGM9cjtpZighbCYmYylyZXR1cm4gYyhhLCEwKTtpZihpKXJldHVybiBpKGEsITApO3ZhciB1PW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrYStcIidcIik7dGhyb3cgdS5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLHV9dmFyIHA9blthXT17ZXhwb3J0czp7fX07dFthXVswXS5jYWxsKHAuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgcj10W2FdWzFdW2VdO3JldHVybiBzKHJ8fGUpfSxwLHAuZXhwb3J0cyxlLHQsbixvKX1yZXR1cm4gblthXS5leHBvcnRzfWZvcih2YXIgaT1yLGE9MDthPG8ubGVuZ3RoO2ErKylzKG9bYV0pO3JldHVybiBzfSh7MTpbZnVuY3Rpb24oZSxyLHQpe3IuZXhwb3J0cz1lKFwiZW50aXRpZXMvbGliL21hcHMvZW50aXRpZXMuanNvblwiKX0se1wiZW50aXRpZXMvbGliL21hcHMvZW50aXRpZXMuanNvblwiOjUyfV0sMjpbZnVuY3Rpb24oZSxyLHQpe3IuZXhwb3J0cz1bXCJhZGRyZXNzXCIsXCJhcnRpY2xlXCIsXCJhc2lkZVwiLFwiYmFzZVwiLFwiYmFzZWZvbnRcIixcImJsb2NrcXVvdGVcIixcImJvZHlcIixcImNhcHRpb25cIixcImNlbnRlclwiLFwiY29sXCIsXCJjb2xncm91cFwiLFwiZGRcIixcImRldGFpbHNcIixcImRpYWxvZ1wiLFwiZGlyXCIsXCJkaXZcIixcImRsXCIsXCJkdFwiLFwiZmllbGRzZXRcIixcImZpZ2NhcHRpb25cIixcImZpZ3VyZVwiLFwiZm9vdGVyXCIsXCJmb3JtXCIsXCJmcmFtZVwiLFwiZnJhbWVzZXRcIixcImgxXCIsXCJoMlwiLFwiaDNcIixcImg0XCIsXCJoNVwiLFwiaDZcIixcImhlYWRcIixcImhlYWRlclwiLFwiaHJcIixcImh0bWxcIixcImlmcmFtZVwiLFwibGVnZW5kXCIsXCJsaVwiLFwibGlua1wiLFwibWFpblwiLFwibWVudVwiLFwibWVudWl0ZW1cIixcIm1ldGFcIixcIm5hdlwiLFwibm9mcmFtZXNcIixcIm9sXCIsXCJvcHRncm91cFwiLFwib3B0aW9uXCIsXCJwXCIsXCJwYXJhbVwiLFwic2VjdGlvblwiLFwic291cmNlXCIsXCJzdW1tYXJ5XCIsXCJ0YWJsZVwiLFwidGJvZHlcIixcInRkXCIsXCJ0Zm9vdFwiLFwidGhcIixcInRoZWFkXCIsXCJ0aXRsZVwiLFwidHJcIixcInRyYWNrXCIsXCJ1bFwiXX0se31dLDM6W2Z1bmN0aW9uKGUscix0KXt2YXIgbj1cIjxbQS1aYS16XVtBLVphLXowLTlcXFxcLV0qKD86XFxcXHMrW2EtekEtWl86XVthLXpBLVowLTk6Ll8tXSooPzpcXFxccyo9XFxcXHMqKD86W15cXFwiJz08PmBcXFxceDAwLVxcXFx4MjBdK3wnW14nXSonfFxcXCJbXlxcXCJdKlxcXCIpKT8pKlxcXFxzKlxcXFwvPz5cIixvPVwiPFxcXFwvW0EtWmEtel1bQS1aYS16MC05XFxcXC1dKlxcXFxzKj5cIixzPW5ldyBSZWdFeHAoXCJeKD86XCIrbitcInxcIitvK1wifFxceDNjIS0tLS1cXHgzZXxcXHgzYyEtLSg/Oi0/W14+LV0pKD86LT9bXi1dKSotLVxceDNlfDxbP10uKj9bP10+fDwhW0EtWl0rXFxcXHMrW14+XSo+fDwhXFxcXFtDREFUQVxcXFxbW1xcXFxzXFxcXFNdKj9cXFxcXVxcXFxdPilcIiksaT1uZXcgUmVnRXhwKFwiXig/OlwiK24rXCJ8XCIrbytcIilcIik7ci5leHBvcnRzLkhUTUxfVEFHX1JFPXMsci5leHBvcnRzLkhUTUxfT1BFTl9DTE9TRV9UQUdfUkU9aX0se31dLDQ6W2Z1bmN0aW9uKGUscix0KXt2YXIgbj1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O2Z1bmN0aW9uIG8oZSxyKXtyZXR1cm4gbi5jYWxsKGUscil9ZnVuY3Rpb24gcyhlKXtyZXR1cm4hKGU+PTU1Mjk2JiZlPD01NzM0M3x8ZT49NjQ5NzYmJmU8PTY1MDA3fHw2NTUzNT09KDY1NTM1JmUpfHw2NTUzND09KDY1NTM1JmUpfHxlPj0wJiZlPD04fHwxMT09PWV8fGU+PTE0JiZlPD0zMXx8ZT49MTI3JiZlPD0xNTl8fGU+MTExNDExMSl9ZnVuY3Rpb24gaShlKXtpZihlPjY1NTM1KXt2YXIgcj01NTI5NisoKGUtPTY1NTM2KT4+MTApLHQ9NTYzMjArKDEwMjMmZSk7cmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUocix0KX1yZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShlKX12YXIgYT0vXFxcXChbIVwiIyQlJicoKSorLFxcLS5cXC86Ozw9Pj9AW1xcXFxcXF1eX2B7fH1+XSkvZyxsPW5ldyBSZWdFeHAoYS5zb3VyY2UrXCJ8XCIrLyYoW2EteiNdW2EtejAtOV17MSwzMX0pOy9naS5zb3VyY2UsXCJnaVwiKSxjPS9eIygoPzp4W2EtZjAtOV17MSw4fXxbMC05XXsxLDh9KSkvaSx1PWUoXCIuL2VudGl0aWVzXCIpLHA9L1smPD5cIl0vLGg9L1smPD5cIl0vZyxmPXtcIiZcIjpcIiZhbXA7XCIsXCI8XCI6XCImbHQ7XCIsXCI+XCI6XCImZ3Q7XCIsJ1wiJzpcIiZxdW90O1wifTtmdW5jdGlvbiBkKGUpe3JldHVybiBmW2VdfXZhciBtPS9bLj8qK14kW1xcXVxcXFwoKXt9fC1dL2csXz1lKFwidWMubWljcm8vY2F0ZWdvcmllcy9QL3JlZ2V4XCIpO3QubGliPXt9LHQubGliLm1kdXJsPWUoXCJtZHVybFwiKSx0LmxpYi51Y21pY3JvPWUoXCJ1Yy5taWNyb1wiKSx0LmFzc2lnbj1mdW5jdGlvbihlKXtyZXR1cm4gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDEpLmZvckVhY2goZnVuY3Rpb24ocil7aWYocil7aWYoXCJvYmplY3RcIiE9dHlwZW9mIHIpdGhyb3cgbmV3IFR5cGVFcnJvcihyK1wibXVzdCBiZSBvYmplY3RcIik7T2JqZWN0LmtleXMocikuZm9yRWFjaChmdW5jdGlvbih0KXtlW3RdPXJbdF19KX19KSxlfSx0LmlzU3RyaW5nPWZ1bmN0aW9uKGUpe3JldHVyblwiW29iamVjdCBTdHJpbmddXCI9PT1mdW5jdGlvbihlKXtyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGUpfShlKX0sdC5oYXM9byx0LnVuZXNjYXBlTWQ9ZnVuY3Rpb24oZSl7cmV0dXJuIGUuaW5kZXhPZihcIlxcXFxcIik8MD9lOmUucmVwbGFjZShhLFwiJDFcIil9LHQudW5lc2NhcGVBbGw9ZnVuY3Rpb24oZSl7cmV0dXJuIGUuaW5kZXhPZihcIlxcXFxcIik8MCYmZS5pbmRleE9mKFwiJlwiKTwwP2U6ZS5yZXBsYWNlKGwsZnVuY3Rpb24oZSxyLHQpe3JldHVybiByfHxmdW5jdGlvbihlLHIpe3ZhciB0PTA7cmV0dXJuIG8odSxyKT91W3JdOjM1PT09ci5jaGFyQ29kZUF0KDApJiZjLnRlc3QocikmJnModD1cInhcIj09PXJbMV0udG9Mb3dlckNhc2UoKT9wYXJzZUludChyLnNsaWNlKDIpLDE2KTpwYXJzZUludChyLnNsaWNlKDEpLDEwKSk/aSh0KTplfShlLHQpfSl9LHQuaXNWYWxpZEVudGl0eUNvZGU9cyx0LmZyb21Db2RlUG9pbnQ9aSx0LmVzY2FwZUh0bWw9ZnVuY3Rpb24oZSl7cmV0dXJuIHAudGVzdChlKT9lLnJlcGxhY2UoaCxkKTplfSx0LmFycmF5UmVwbGFjZUF0PWZ1bmN0aW9uKGUscix0KXtyZXR1cm5bXS5jb25jYXQoZS5zbGljZSgwLHIpLHQsZS5zbGljZShyKzEpKX0sdC5pc1NwYWNlPWZ1bmN0aW9uKGUpe3N3aXRjaChlKXtjYXNlIDk6Y2FzZSAzMjpyZXR1cm4hMH1yZXR1cm4hMX0sdC5pc1doaXRlU3BhY2U9ZnVuY3Rpb24oZSl7aWYoZT49ODE5MiYmZTw9ODIwMilyZXR1cm4hMDtzd2l0Y2goZSl7Y2FzZSA5OmNhc2UgMTA6Y2FzZSAxMTpjYXNlIDEyOmNhc2UgMTM6Y2FzZSAzMjpjYXNlIDE2MDpjYXNlIDU3NjA6Y2FzZSA4MjM5OmNhc2UgODI4NzpjYXNlIDEyMjg4OnJldHVybiEwfXJldHVybiExfSx0LmlzTWRBc2NpaVB1bmN0PWZ1bmN0aW9uKGUpe3N3aXRjaChlKXtjYXNlIDMzOmNhc2UgMzQ6Y2FzZSAzNTpjYXNlIDM2OmNhc2UgMzc6Y2FzZSAzODpjYXNlIDM5OmNhc2UgNDA6Y2FzZSA0MTpjYXNlIDQyOmNhc2UgNDM6Y2FzZSA0NDpjYXNlIDQ1OmNhc2UgNDY6Y2FzZSA0NzpjYXNlIDU4OmNhc2UgNTk6Y2FzZSA2MDpjYXNlIDYxOmNhc2UgNjI6Y2FzZSA2MzpjYXNlIDY0OmNhc2UgOTE6Y2FzZSA5MjpjYXNlIDkzOmNhc2UgOTQ6Y2FzZSA5NTpjYXNlIDk2OmNhc2UgMTIzOmNhc2UgMTI0OmNhc2UgMTI1OmNhc2UgMTI2OnJldHVybiEwO2RlZmF1bHQ6cmV0dXJuITF9fSx0LmlzUHVuY3RDaGFyPWZ1bmN0aW9uKGUpe3JldHVybiBfLnRlc3QoZSl9LHQuZXNjYXBlUkU9ZnVuY3Rpb24oZSl7cmV0dXJuIGUucmVwbGFjZShtLFwiXFxcXCQmXCIpfSx0Lm5vcm1hbGl6ZVJlZmVyZW5jZT1mdW5jdGlvbihlKXtyZXR1cm4gZT1lLnRyaW0oKS5yZXBsYWNlKC9cXHMrL2csXCIgXCIpLFwi4bm+XCI9PT1cIuG6nlwiLnRvTG93ZXJDYXNlKCkmJihlPWUucmVwbGFjZSgv4bqeL2csXCLDn1wiKSksZS50b0xvd2VyQ2FzZSgpLnRvVXBwZXJDYXNlKCl9fSx7XCIuL2VudGl0aWVzXCI6MSxtZHVybDo1OCxcInVjLm1pY3JvXCI6NjUsXCJ1Yy5taWNyby9jYXRlZ29yaWVzL1AvcmVnZXhcIjo2M31dLDU6W2Z1bmN0aW9uKGUscix0KXt0LnBhcnNlTGlua0xhYmVsPWUoXCIuL3BhcnNlX2xpbmtfbGFiZWxcIiksdC5wYXJzZUxpbmtEZXN0aW5hdGlvbj1lKFwiLi9wYXJzZV9saW5rX2Rlc3RpbmF0aW9uXCIpLHQucGFyc2VMaW5rVGl0bGU9ZShcIi4vcGFyc2VfbGlua190aXRsZVwiKX0se1wiLi9wYXJzZV9saW5rX2Rlc3RpbmF0aW9uXCI6NixcIi4vcGFyc2VfbGlua19sYWJlbFwiOjcsXCIuL3BhcnNlX2xpbmtfdGl0bGVcIjo4fV0sNjpbZnVuY3Rpb24oZSxyLHQpe3ZhciBuPWUoXCIuLi9jb21tb24vdXRpbHNcIikudW5lc2NhcGVBbGw7ci5leHBvcnRzPWZ1bmN0aW9uKGUscix0KXt2YXIgbyxzLGk9cixhPXtvazohMSxwb3M6MCxsaW5lczowLHN0cjpcIlwifTtpZig2MD09PWUuY2hhckNvZGVBdChyKSl7Zm9yKHIrKztyPHQ7KXtpZigxMD09PShvPWUuY2hhckNvZGVBdChyKSkpcmV0dXJuIGE7aWYoNjI9PT1vKXJldHVybiBhLnBvcz1yKzEsYS5zdHI9bihlLnNsaWNlKGkrMSxyKSksYS5vaz0hMCxhOzkyPT09byYmcisxPHQ/cis9MjpyKyt9cmV0dXJuIGF9Zm9yKHM9MDtyPHQmJjMyIT09KG89ZS5jaGFyQ29kZUF0KHIpKSYmIShvPDMyfHwxMjc9PT1vKTspaWYoOTI9PT1vJiZyKzE8dClyKz0yO2Vsc2V7aWYoNDA9PT1vJiZzKyssNDE9PT1vKXtpZigwPT09cylicmVhaztzLS19cisrfXJldHVybiBpPT09cj9hOjAhPT1zP2E6KGEuc3RyPW4oZS5zbGljZShpLHIpKSxhLmxpbmVzPTAsYS5wb3M9cixhLm9rPSEwLGEpfX0se1wiLi4vY29tbW9uL3V0aWxzXCI6NH1dLDc6W2Z1bmN0aW9uKGUscix0KXtyLmV4cG9ydHM9ZnVuY3Rpb24oZSxyLHQpe3ZhciBuLG8scyxpLGE9LTEsbD1lLnBvc01heCxjPWUucG9zO2ZvcihlLnBvcz1yKzEsbj0xO2UucG9zPGw7KXtpZig5Mz09PShzPWUuc3JjLmNoYXJDb2RlQXQoZS5wb3MpKSYmMD09LS1uKXtvPSEwO2JyZWFrfWlmKGk9ZS5wb3MsZS5tZC5pbmxpbmUuc2tpcFRva2VuKGUpLDkxPT09cylpZihpPT09ZS5wb3MtMSluKys7ZWxzZSBpZih0KXJldHVybiBlLnBvcz1jLC0xfXJldHVybiBvJiYoYT1lLnBvcyksZS5wb3M9YyxhfX0se31dLDg6W2Z1bmN0aW9uKGUscix0KXt2YXIgbj1lKFwiLi4vY29tbW9uL3V0aWxzXCIpLnVuZXNjYXBlQWxsO3IuZXhwb3J0cz1mdW5jdGlvbihlLHIsdCl7dmFyIG8scyxpPTAsYT1yLGw9e29rOiExLHBvczowLGxpbmVzOjAsc3RyOlwiXCJ9O2lmKHI+PXQpcmV0dXJuIGw7aWYoMzQhPT0ocz1lLmNoYXJDb2RlQXQocikpJiYzOSE9PXMmJjQwIT09cylyZXR1cm4gbDtmb3IocisrLDQwPT09cyYmKHM9NDEpO3I8dDspe2lmKChvPWUuY2hhckNvZGVBdChyKSk9PT1zKXJldHVybiBsLnBvcz1yKzEsbC5saW5lcz1pLGwuc3RyPW4oZS5zbGljZShhKzEscikpLGwub2s9ITAsbDsxMD09PW8/aSsrOjkyPT09byYmcisxPHQmJihyKyssMTA9PT1lLmNoYXJDb2RlQXQocikmJmkrKykscisrfXJldHVybiBsfX0se1wiLi4vY29tbW9uL3V0aWxzXCI6NH1dLDk6W2Z1bmN0aW9uKGUscix0KXt2YXIgbj1lKFwiLi9jb21tb24vdXRpbHNcIiksbz1lKFwiLi9oZWxwZXJzXCIpLHM9ZShcIi4vcmVuZGVyZXJcIiksaT1lKFwiLi9wYXJzZXJfY29yZVwiKSxhPWUoXCIuL3BhcnNlcl9ibG9ja1wiKSxsPWUoXCIuL3BhcnNlcl9pbmxpbmVcIiksYz1lKFwibGlua2lmeS1pdFwiKSx1PWUoXCJtZHVybFwiKSxwPWUoXCJwdW55Y29kZVwiKSxoPXtkZWZhdWx0OmUoXCIuL3ByZXNldHMvZGVmYXVsdFwiKSx6ZXJvOmUoXCIuL3ByZXNldHMvemVyb1wiKSxjb21tb25tYXJrOmUoXCIuL3ByZXNldHMvY29tbW9ubWFya1wiKX0sZj0vXih2YnNjcmlwdHxqYXZhc2NyaXB0fGZpbGV8ZGF0YSk6LyxkPS9eZGF0YTppbWFnZVxcLyhnaWZ8cG5nfGpwZWd8d2VicCk7LztmdW5jdGlvbiBtKGUpe3ZhciByPWUudHJpbSgpLnRvTG93ZXJDYXNlKCk7cmV0dXJuIWYudGVzdChyKXx8ISFkLnRlc3Qocil9dmFyIF89W1wiaHR0cDpcIixcImh0dHBzOlwiLFwibWFpbHRvOlwiXTtmdW5jdGlvbiBnKGUpe3ZhciByPXUucGFyc2UoZSwhMCk7aWYoci5ob3N0bmFtZSYmKCFyLnByb3RvY29sfHxfLmluZGV4T2Yoci5wcm90b2NvbCk+PTApKXRyeXtyLmhvc3RuYW1lPXAudG9BU0NJSShyLmhvc3RuYW1lKX1jYXRjaChlKXt9cmV0dXJuIHUuZW5jb2RlKHUuZm9ybWF0KHIpKX1mdW5jdGlvbiBrKGUpe3ZhciByPXUucGFyc2UoZSwhMCk7aWYoci5ob3N0bmFtZSYmKCFyLnByb3RvY29sfHxfLmluZGV4T2Yoci5wcm90b2NvbCk+PTApKXRyeXtyLmhvc3RuYW1lPXAudG9Vbmljb2RlKHIuaG9zdG5hbWUpfWNhdGNoKGUpe31yZXR1cm4gdS5kZWNvZGUodS5mb3JtYXQocikpfWZ1bmN0aW9uIGIoZSxyKXtpZighKHRoaXMgaW5zdGFuY2VvZiBiKSlyZXR1cm4gbmV3IGIoZSxyKTtyfHxuLmlzU3RyaW5nKGUpfHwocj1lfHx7fSxlPVwiZGVmYXVsdFwiKSx0aGlzLmlubGluZT1uZXcgbCx0aGlzLmJsb2NrPW5ldyBhLHRoaXMuY29yZT1uZXcgaSx0aGlzLnJlbmRlcmVyPW5ldyBzLHRoaXMubGlua2lmeT1uZXcgYyx0aGlzLnZhbGlkYXRlTGluaz1tLHRoaXMubm9ybWFsaXplTGluaz1nLHRoaXMubm9ybWFsaXplTGlua1RleHQ9ayx0aGlzLnV0aWxzPW4sdGhpcy5oZWxwZXJzPW4uYXNzaWduKHt9LG8pLHRoaXMub3B0aW9ucz17fSx0aGlzLmNvbmZpZ3VyZShlKSxyJiZ0aGlzLnNldChyKX1iLnByb3RvdHlwZS5zZXQ9ZnVuY3Rpb24oZSl7cmV0dXJuIG4uYXNzaWduKHRoaXMub3B0aW9ucyxlKSx0aGlzfSxiLnByb3RvdHlwZS5jb25maWd1cmU9ZnVuY3Rpb24oZSl7dmFyIHIsdD10aGlzO2lmKG4uaXNTdHJpbmcoZSkmJiEoZT1oW3I9ZV0pKXRocm93IG5ldyBFcnJvcignV3JvbmcgYG1hcmtkb3duLWl0YCBwcmVzZXQgXCInK3IrJ1wiLCBjaGVjayBuYW1lJyk7aWYoIWUpdGhyb3cgbmV3IEVycm9yKFwiV3JvbmcgYG1hcmtkb3duLWl0YCBwcmVzZXQsIGNhbid0IGJlIGVtcHR5XCIpO3JldHVybiBlLm9wdGlvbnMmJnQuc2V0KGUub3B0aW9ucyksZS5jb21wb25lbnRzJiZPYmplY3Qua2V5cyhlLmNvbXBvbmVudHMpLmZvckVhY2goZnVuY3Rpb24ocil7ZS5jb21wb25lbnRzW3JdLnJ1bGVzJiZ0W3JdLnJ1bGVyLmVuYWJsZU9ubHkoZS5jb21wb25lbnRzW3JdLnJ1bGVzKSxlLmNvbXBvbmVudHNbcl0ucnVsZXMyJiZ0W3JdLnJ1bGVyMi5lbmFibGVPbmx5KGUuY29tcG9uZW50c1tyXS5ydWxlczIpfSksdGhpc30sYi5wcm90b3R5cGUuZW5hYmxlPWZ1bmN0aW9uKGUscil7dmFyIHQ9W107QXJyYXkuaXNBcnJheShlKXx8KGU9W2VdKSxbXCJjb3JlXCIsXCJibG9ja1wiLFwiaW5saW5lXCJdLmZvckVhY2goZnVuY3Rpb24ocil7dD10LmNvbmNhdCh0aGlzW3JdLnJ1bGVyLmVuYWJsZShlLCEwKSl9LHRoaXMpLHQ9dC5jb25jYXQodGhpcy5pbmxpbmUucnVsZXIyLmVuYWJsZShlLCEwKSk7dmFyIG49ZS5maWx0ZXIoZnVuY3Rpb24oZSl7cmV0dXJuIHQuaW5kZXhPZihlKTwwfSk7aWYobi5sZW5ndGgmJiFyKXRocm93IG5ldyBFcnJvcihcIk1hcmtkb3duSXQuIEZhaWxlZCB0byBlbmFibGUgdW5rbm93biBydWxlKHMpOiBcIituKTtyZXR1cm4gdGhpc30sYi5wcm90b3R5cGUuZGlzYWJsZT1mdW5jdGlvbihlLHIpe3ZhciB0PVtdO0FycmF5LmlzQXJyYXkoZSl8fChlPVtlXSksW1wiY29yZVwiLFwiYmxvY2tcIixcImlubGluZVwiXS5mb3JFYWNoKGZ1bmN0aW9uKHIpe3Q9dC5jb25jYXQodGhpc1tyXS5ydWxlci5kaXNhYmxlKGUsITApKX0sdGhpcyksdD10LmNvbmNhdCh0aGlzLmlubGluZS5ydWxlcjIuZGlzYWJsZShlLCEwKSk7dmFyIG49ZS5maWx0ZXIoZnVuY3Rpb24oZSl7cmV0dXJuIHQuaW5kZXhPZihlKTwwfSk7aWYobi5sZW5ndGgmJiFyKXRocm93IG5ldyBFcnJvcihcIk1hcmtkb3duSXQuIEZhaWxlZCB0byBkaXNhYmxlIHVua25vd24gcnVsZShzKTogXCIrbik7cmV0dXJuIHRoaXN9LGIucHJvdG90eXBlLnVzZT1mdW5jdGlvbihlKXt2YXIgcj1bdGhpc10uY29uY2F0KEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywxKSk7cmV0dXJuIGUuYXBwbHkoZSxyKSx0aGlzfSxiLnByb3RvdHlwZS5wYXJzZT1mdW5jdGlvbihlLHIpe2lmKFwic3RyaW5nXCIhPXR5cGVvZiBlKXRocm93IG5ldyBFcnJvcihcIklucHV0IGRhdGEgc2hvdWxkIGJlIGEgU3RyaW5nXCIpO3ZhciB0PW5ldyB0aGlzLmNvcmUuU3RhdGUoZSx0aGlzLHIpO3JldHVybiB0aGlzLmNvcmUucHJvY2Vzcyh0KSx0LnRva2Vuc30sYi5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uKGUscil7cmV0dXJuIHI9cnx8e30sdGhpcy5yZW5kZXJlci5yZW5kZXIodGhpcy5wYXJzZShlLHIpLHRoaXMub3B0aW9ucyxyKX0sYi5wcm90b3R5cGUucGFyc2VJbmxpbmU9ZnVuY3Rpb24oZSxyKXt2YXIgdD1uZXcgdGhpcy5jb3JlLlN0YXRlKGUsdGhpcyxyKTtyZXR1cm4gdC5pbmxpbmVNb2RlPSEwLHRoaXMuY29yZS5wcm9jZXNzKHQpLHQudG9rZW5zfSxiLnByb3RvdHlwZS5yZW5kZXJJbmxpbmU9ZnVuY3Rpb24oZSxyKXtyZXR1cm4gcj1yfHx7fSx0aGlzLnJlbmRlcmVyLnJlbmRlcih0aGlzLnBhcnNlSW5saW5lKGUsciksdGhpcy5vcHRpb25zLHIpfSxyLmV4cG9ydHM9Yn0se1wiLi9jb21tb24vdXRpbHNcIjo0LFwiLi9oZWxwZXJzXCI6NSxcIi4vcGFyc2VyX2Jsb2NrXCI6MTAsXCIuL3BhcnNlcl9jb3JlXCI6MTEsXCIuL3BhcnNlcl9pbmxpbmVcIjoxMixcIi4vcHJlc2V0cy9jb21tb25tYXJrXCI6MTMsXCIuL3ByZXNldHMvZGVmYXVsdFwiOjE0LFwiLi9wcmVzZXRzL3plcm9cIjoxNSxcIi4vcmVuZGVyZXJcIjoxNixcImxpbmtpZnktaXRcIjo1MyxtZHVybDo1OCxwdW55Y29kZTo2MH1dLDEwOltmdW5jdGlvbihlLHIsdCl7dmFyIG49ZShcIi4vcnVsZXJcIiksbz1bW1widGFibGVcIixlKFwiLi9ydWxlc19ibG9jay90YWJsZVwiKSxbXCJwYXJhZ3JhcGhcIixcInJlZmVyZW5jZVwiXV0sW1wiY29kZVwiLGUoXCIuL3J1bGVzX2Jsb2NrL2NvZGVcIildLFtcImZlbmNlXCIsZShcIi4vcnVsZXNfYmxvY2svZmVuY2VcIiksW1wicGFyYWdyYXBoXCIsXCJyZWZlcmVuY2VcIixcImJsb2NrcXVvdGVcIixcImxpc3RcIl1dLFtcImJsb2NrcXVvdGVcIixlKFwiLi9ydWxlc19ibG9jay9ibG9ja3F1b3RlXCIpLFtcInBhcmFncmFwaFwiLFwicmVmZXJlbmNlXCIsXCJibG9ja3F1b3RlXCIsXCJsaXN0XCJdXSxbXCJoclwiLGUoXCIuL3J1bGVzX2Jsb2NrL2hyXCIpLFtcInBhcmFncmFwaFwiLFwicmVmZXJlbmNlXCIsXCJibG9ja3F1b3RlXCIsXCJsaXN0XCJdXSxbXCJsaXN0XCIsZShcIi4vcnVsZXNfYmxvY2svbGlzdFwiKSxbXCJwYXJhZ3JhcGhcIixcInJlZmVyZW5jZVwiLFwiYmxvY2txdW90ZVwiXV0sW1wicmVmZXJlbmNlXCIsZShcIi4vcnVsZXNfYmxvY2svcmVmZXJlbmNlXCIpXSxbXCJoZWFkaW5nXCIsZShcIi4vcnVsZXNfYmxvY2svaGVhZGluZ1wiKSxbXCJwYXJhZ3JhcGhcIixcInJlZmVyZW5jZVwiLFwiYmxvY2txdW90ZVwiXV0sW1wibGhlYWRpbmdcIixlKFwiLi9ydWxlc19ibG9jay9saGVhZGluZ1wiKV0sW1wiaHRtbF9ibG9ja1wiLGUoXCIuL3J1bGVzX2Jsb2NrL2h0bWxfYmxvY2tcIiksW1wicGFyYWdyYXBoXCIsXCJyZWZlcmVuY2VcIixcImJsb2NrcXVvdGVcIl1dLFtcInBhcmFncmFwaFwiLGUoXCIuL3J1bGVzX2Jsb2NrL3BhcmFncmFwaFwiKV1dO2Z1bmN0aW9uIHMoKXt0aGlzLnJ1bGVyPW5ldyBuO2Zvcih2YXIgZT0wO2U8by5sZW5ndGg7ZSsrKXRoaXMucnVsZXIucHVzaChvW2VdWzBdLG9bZV1bMV0se2FsdDoob1tlXVsyXXx8W10pLnNsaWNlKCl9KX1zLnByb3RvdHlwZS50b2tlbml6ZT1mdW5jdGlvbihlLHIsdCl7Zm9yKHZhciBuLG89dGhpcy5ydWxlci5nZXRSdWxlcyhcIlwiKSxzPW8ubGVuZ3RoLGk9cixhPSExLGw9ZS5tZC5vcHRpb25zLm1heE5lc3Rpbmc7aTx0JiYoZS5saW5lPWk9ZS5za2lwRW1wdHlMaW5lcyhpKSwhKGk+PXQpKSYmIShlLnNDb3VudFtpXTxlLmJsa0luZGVudCk7KXtpZihlLmxldmVsPj1sKXtlLmxpbmU9dDticmVha31mb3Iobj0wO248cyYmIW9bbl0oZSxpLHQsITEpO24rKyk7ZS50aWdodD0hYSxlLmlzRW1wdHkoZS5saW5lLTEpJiYoYT0hMCksKGk9ZS5saW5lKTx0JiZlLmlzRW1wdHkoaSkmJihhPSEwLGkrKyxlLmxpbmU9aSl9fSxzLnByb3RvdHlwZS5wYXJzZT1mdW5jdGlvbihlLHIsdCxuKXt2YXIgbztlJiYobz1uZXcgdGhpcy5TdGF0ZShlLHIsdCxuKSx0aGlzLnRva2VuaXplKG8sby5saW5lLG8ubGluZU1heCkpfSxzLnByb3RvdHlwZS5TdGF0ZT1lKFwiLi9ydWxlc19ibG9jay9zdGF0ZV9ibG9ja1wiKSxyLmV4cG9ydHM9c30se1wiLi9ydWxlclwiOjE3LFwiLi9ydWxlc19ibG9jay9ibG9ja3F1b3RlXCI6MTgsXCIuL3J1bGVzX2Jsb2NrL2NvZGVcIjoxOSxcIi4vcnVsZXNfYmxvY2svZmVuY2VcIjoyMCxcIi4vcnVsZXNfYmxvY2svaGVhZGluZ1wiOjIxLFwiLi9ydWxlc19ibG9jay9oclwiOjIyLFwiLi9ydWxlc19ibG9jay9odG1sX2Jsb2NrXCI6MjMsXCIuL3J1bGVzX2Jsb2NrL2xoZWFkaW5nXCI6MjQsXCIuL3J1bGVzX2Jsb2NrL2xpc3RcIjoyNSxcIi4vcnVsZXNfYmxvY2svcGFyYWdyYXBoXCI6MjYsXCIuL3J1bGVzX2Jsb2NrL3JlZmVyZW5jZVwiOjI3LFwiLi9ydWxlc19ibG9jay9zdGF0ZV9ibG9ja1wiOjI4LFwiLi9ydWxlc19ibG9jay90YWJsZVwiOjI5fV0sMTE6W2Z1bmN0aW9uKGUscix0KXt2YXIgbj1lKFwiLi9ydWxlclwiKSxvPVtbXCJub3JtYWxpemVcIixlKFwiLi9ydWxlc19jb3JlL25vcm1hbGl6ZVwiKV0sW1wiYmxvY2tcIixlKFwiLi9ydWxlc19jb3JlL2Jsb2NrXCIpXSxbXCJpbmxpbmVcIixlKFwiLi9ydWxlc19jb3JlL2lubGluZVwiKV0sW1wibGlua2lmeVwiLGUoXCIuL3J1bGVzX2NvcmUvbGlua2lmeVwiKV0sW1wicmVwbGFjZW1lbnRzXCIsZShcIi4vcnVsZXNfY29yZS9yZXBsYWNlbWVudHNcIildLFtcInNtYXJ0cXVvdGVzXCIsZShcIi4vcnVsZXNfY29yZS9zbWFydHF1b3Rlc1wiKV1dO2Z1bmN0aW9uIHMoKXt0aGlzLnJ1bGVyPW5ldyBuO2Zvcih2YXIgZT0wO2U8by5sZW5ndGg7ZSsrKXRoaXMucnVsZXIucHVzaChvW2VdWzBdLG9bZV1bMV0pfXMucHJvdG90eXBlLnByb2Nlc3M9ZnVuY3Rpb24oZSl7dmFyIHIsdCxuO2ZvcihuPXRoaXMucnVsZXIuZ2V0UnVsZXMoXCJcIikscj0wLHQ9bi5sZW5ndGg7cjx0O3IrKyluW3JdKGUpfSxzLnByb3RvdHlwZS5TdGF0ZT1lKFwiLi9ydWxlc19jb3JlL3N0YXRlX2NvcmVcIiksci5leHBvcnRzPXN9LHtcIi4vcnVsZXJcIjoxNyxcIi4vcnVsZXNfY29yZS9ibG9ja1wiOjMwLFwiLi9ydWxlc19jb3JlL2lubGluZVwiOjMxLFwiLi9ydWxlc19jb3JlL2xpbmtpZnlcIjozMixcIi4vcnVsZXNfY29yZS9ub3JtYWxpemVcIjozMyxcIi4vcnVsZXNfY29yZS9yZXBsYWNlbWVudHNcIjozNCxcIi4vcnVsZXNfY29yZS9zbWFydHF1b3Rlc1wiOjM1LFwiLi9ydWxlc19jb3JlL3N0YXRlX2NvcmVcIjozNn1dLDEyOltmdW5jdGlvbihlLHIsdCl7dmFyIG49ZShcIi4vcnVsZXJcIiksbz1bW1widGV4dFwiLGUoXCIuL3J1bGVzX2lubGluZS90ZXh0XCIpXSxbXCJuZXdsaW5lXCIsZShcIi4vcnVsZXNfaW5saW5lL25ld2xpbmVcIildLFtcImVzY2FwZVwiLGUoXCIuL3J1bGVzX2lubGluZS9lc2NhcGVcIildLFtcImJhY2t0aWNrc1wiLGUoXCIuL3J1bGVzX2lubGluZS9iYWNrdGlja3NcIildLFtcInN0cmlrZXRocm91Z2hcIixlKFwiLi9ydWxlc19pbmxpbmUvc3RyaWtldGhyb3VnaFwiKS50b2tlbml6ZV0sW1wiZW1waGFzaXNcIixlKFwiLi9ydWxlc19pbmxpbmUvZW1waGFzaXNcIikudG9rZW5pemVdLFtcImxpbmtcIixlKFwiLi9ydWxlc19pbmxpbmUvbGlua1wiKV0sW1wiaW1hZ2VcIixlKFwiLi9ydWxlc19pbmxpbmUvaW1hZ2VcIildLFtcImF1dG9saW5rXCIsZShcIi4vcnVsZXNfaW5saW5lL2F1dG9saW5rXCIpXSxbXCJodG1sX2lubGluZVwiLGUoXCIuL3J1bGVzX2lubGluZS9odG1sX2lubGluZVwiKV0sW1wiZW50aXR5XCIsZShcIi4vcnVsZXNfaW5saW5lL2VudGl0eVwiKV1dLHM9W1tcImJhbGFuY2VfcGFpcnNcIixlKFwiLi9ydWxlc19pbmxpbmUvYmFsYW5jZV9wYWlyc1wiKV0sW1wic3RyaWtldGhyb3VnaFwiLGUoXCIuL3J1bGVzX2lubGluZS9zdHJpa2V0aHJvdWdoXCIpLnBvc3RQcm9jZXNzXSxbXCJlbXBoYXNpc1wiLGUoXCIuL3J1bGVzX2lubGluZS9lbXBoYXNpc1wiKS5wb3N0UHJvY2Vzc10sW1widGV4dF9jb2xsYXBzZVwiLGUoXCIuL3J1bGVzX2lubGluZS90ZXh0X2NvbGxhcHNlXCIpXV07ZnVuY3Rpb24gaSgpe3ZhciBlO2Zvcih0aGlzLnJ1bGVyPW5ldyBuLGU9MDtlPG8ubGVuZ3RoO2UrKyl0aGlzLnJ1bGVyLnB1c2gob1tlXVswXSxvW2VdWzFdKTtmb3IodGhpcy5ydWxlcjI9bmV3IG4sZT0wO2U8cy5sZW5ndGg7ZSsrKXRoaXMucnVsZXIyLnB1c2goc1tlXVswXSxzW2VdWzFdKX1pLnByb3RvdHlwZS5za2lwVG9rZW49ZnVuY3Rpb24oZSl7dmFyIHIsdCxuPWUucG9zLG89dGhpcy5ydWxlci5nZXRSdWxlcyhcIlwiKSxzPW8ubGVuZ3RoLGk9ZS5tZC5vcHRpb25zLm1heE5lc3RpbmcsYT1lLmNhY2hlO2lmKHZvaWQgMD09PWFbbl0pe2lmKGUubGV2ZWw8aSlmb3IodD0wO3Q8cyYmKGUubGV2ZWwrKyxyPW9bdF0oZSwhMCksZS5sZXZlbC0tLCFyKTt0KyspO2Vsc2UgZS5wb3M9ZS5wb3NNYXg7cnx8ZS5wb3MrKyxhW25dPWUucG9zfWVsc2UgZS5wb3M9YVtuXX0saS5wcm90b3R5cGUudG9rZW5pemU9ZnVuY3Rpb24oZSl7Zm9yKHZhciByLHQsbj10aGlzLnJ1bGVyLmdldFJ1bGVzKFwiXCIpLG89bi5sZW5ndGgscz1lLnBvc01heCxpPWUubWQub3B0aW9ucy5tYXhOZXN0aW5nO2UucG9zPHM7KXtpZihlLmxldmVsPGkpZm9yKHQ9MDt0PG8mJiEocj1uW3RdKGUsITEpKTt0KyspO2lmKHIpe2lmKGUucG9zPj1zKWJyZWFrfWVsc2UgZS5wZW5kaW5nKz1lLnNyY1tlLnBvcysrXX1lLnBlbmRpbmcmJmUucHVzaFBlbmRpbmcoKX0saS5wcm90b3R5cGUucGFyc2U9ZnVuY3Rpb24oZSxyLHQsbil7dmFyIG8scyxpLGE9bmV3IHRoaXMuU3RhdGUoZSxyLHQsbik7Zm9yKHRoaXMudG9rZW5pemUoYSkscz10aGlzLnJ1bGVyMi5nZXRSdWxlcyhcIlwiKSxpPXMubGVuZ3RoLG89MDtvPGk7bysrKXNbb10oYSl9LGkucHJvdG90eXBlLlN0YXRlPWUoXCIuL3J1bGVzX2lubGluZS9zdGF0ZV9pbmxpbmVcIiksci5leHBvcnRzPWl9LHtcIi4vcnVsZXJcIjoxNyxcIi4vcnVsZXNfaW5saW5lL2F1dG9saW5rXCI6MzcsXCIuL3J1bGVzX2lubGluZS9iYWNrdGlja3NcIjozOCxcIi4vcnVsZXNfaW5saW5lL2JhbGFuY2VfcGFpcnNcIjozOSxcIi4vcnVsZXNfaW5saW5lL2VtcGhhc2lzXCI6NDAsXCIuL3J1bGVzX2lubGluZS9lbnRpdHlcIjo0MSxcIi4vcnVsZXNfaW5saW5lL2VzY2FwZVwiOjQyLFwiLi9ydWxlc19pbmxpbmUvaHRtbF9pbmxpbmVcIjo0MyxcIi4vcnVsZXNfaW5saW5lL2ltYWdlXCI6NDQsXCIuL3J1bGVzX2lubGluZS9saW5rXCI6NDUsXCIuL3J1bGVzX2lubGluZS9uZXdsaW5lXCI6NDYsXCIuL3J1bGVzX2lubGluZS9zdGF0ZV9pbmxpbmVcIjo0NyxcIi4vcnVsZXNfaW5saW5lL3N0cmlrZXRocm91Z2hcIjo0OCxcIi4vcnVsZXNfaW5saW5lL3RleHRcIjo0OSxcIi4vcnVsZXNfaW5saW5lL3RleHRfY29sbGFwc2VcIjo1MH1dLDEzOltmdW5jdGlvbihlLHIsdCl7ci5leHBvcnRzPXtvcHRpb25zOntodG1sOiEwLHhodG1sT3V0OiEwLGJyZWFrczohMSxsYW5nUHJlZml4OlwibGFuZ3VhZ2UtXCIsbGlua2lmeTohMSx0eXBvZ3JhcGhlcjohMSxxdW90ZXM6XCLigJzigJ3igJjigJlcIixoaWdobGlnaHQ6bnVsbCxtYXhOZXN0aW5nOjIwfSxjb21wb25lbnRzOntjb3JlOntydWxlczpbXCJub3JtYWxpemVcIixcImJsb2NrXCIsXCJpbmxpbmVcIl19LGJsb2NrOntydWxlczpbXCJibG9ja3F1b3RlXCIsXCJjb2RlXCIsXCJmZW5jZVwiLFwiaGVhZGluZ1wiLFwiaHJcIixcImh0bWxfYmxvY2tcIixcImxoZWFkaW5nXCIsXCJsaXN0XCIsXCJyZWZlcmVuY2VcIixcInBhcmFncmFwaFwiXX0saW5saW5lOntydWxlczpbXCJhdXRvbGlua1wiLFwiYmFja3RpY2tzXCIsXCJlbXBoYXNpc1wiLFwiZW50aXR5XCIsXCJlc2NhcGVcIixcImh0bWxfaW5saW5lXCIsXCJpbWFnZVwiLFwibGlua1wiLFwibmV3bGluZVwiLFwidGV4dFwiXSxydWxlczI6W1wiYmFsYW5jZV9wYWlyc1wiLFwiZW1waGFzaXNcIixcInRleHRfY29sbGFwc2VcIl19fX19LHt9XSwxNDpbZnVuY3Rpb24oZSxyLHQpe3IuZXhwb3J0cz17b3B0aW9uczp7aHRtbDohMSx4aHRtbE91dDohMSxicmVha3M6ITEsbGFuZ1ByZWZpeDpcImxhbmd1YWdlLVwiLGxpbmtpZnk6ITEsdHlwb2dyYXBoZXI6ITEscXVvdGVzOlwi4oCc4oCd4oCY4oCZXCIsaGlnaGxpZ2h0Om51bGwsbWF4TmVzdGluZzoxMDB9LGNvbXBvbmVudHM6e2NvcmU6e30sYmxvY2s6e30saW5saW5lOnt9fX19LHt9XSwxNTpbZnVuY3Rpb24oZSxyLHQpe3IuZXhwb3J0cz17b3B0aW9uczp7aHRtbDohMSx4aHRtbE91dDohMSxicmVha3M6ITEsbGFuZ1ByZWZpeDpcImxhbmd1YWdlLVwiLGxpbmtpZnk6ITEsdHlwb2dyYXBoZXI6ITEscXVvdGVzOlwi4oCc4oCd4oCY4oCZXCIsaGlnaGxpZ2h0Om51bGwsbWF4TmVzdGluZzoyMH0sY29tcG9uZW50czp7Y29yZTp7cnVsZXM6W1wibm9ybWFsaXplXCIsXCJibG9ja1wiLFwiaW5saW5lXCJdfSxibG9jazp7cnVsZXM6W1wicGFyYWdyYXBoXCJdfSxpbmxpbmU6e3J1bGVzOltcInRleHRcIl0scnVsZXMyOltcImJhbGFuY2VfcGFpcnNcIixcInRleHRfY29sbGFwc2VcIl19fX19LHt9XSwxNjpbZnVuY3Rpb24oZSxyLHQpe3ZhciBuPWUoXCIuL2NvbW1vbi91dGlsc1wiKS5hc3NpZ24sbz1lKFwiLi9jb21tb24vdXRpbHNcIikudW5lc2NhcGVBbGwscz1lKFwiLi9jb21tb24vdXRpbHNcIikuZXNjYXBlSHRtbCxpPXt9O2Z1bmN0aW9uIGEoKXt0aGlzLnJ1bGVzPW4oe30saSl9aS5jb2RlX2lubGluZT1mdW5jdGlvbihlLHIsdCxuLG8pe3ZhciBpPWVbcl07cmV0dXJuXCI8Y29kZVwiK28ucmVuZGVyQXR0cnMoaSkrXCI+XCIrcyhlW3JdLmNvbnRlbnQpK1wiPC9jb2RlPlwifSxpLmNvZGVfYmxvY2s9ZnVuY3Rpb24oZSxyLHQsbixvKXt2YXIgaT1lW3JdO3JldHVyblwiPHByZVwiK28ucmVuZGVyQXR0cnMoaSkrXCI+PGNvZGU+XCIrcyhlW3JdLmNvbnRlbnQpK1wiPC9jb2RlPjwvcHJlPlxcblwifSxpLmZlbmNlPWZ1bmN0aW9uKGUscix0LG4saSl7dmFyIGEsbCxjLHUscD1lW3JdLGg9cC5pbmZvP28ocC5pbmZvKS50cmltKCk6XCJcIixmPVwiXCI7cmV0dXJuIGgmJihmPWguc3BsaXQoL1xccysvZylbMF0pLDA9PT0oYT10LmhpZ2hsaWdodCYmdC5oaWdobGlnaHQocC5jb250ZW50LGYpfHxzKHAuY29udGVudCkpLmluZGV4T2YoXCI8cHJlXCIpP2ErXCJcXG5cIjpoPyhsPXAuYXR0ckluZGV4KFwiY2xhc3NcIiksYz1wLmF0dHJzP3AuYXR0cnMuc2xpY2UoKTpbXSxsPDA/Yy5wdXNoKFtcImNsYXNzXCIsdC5sYW5nUHJlZml4K2ZdKTpjW2xdWzFdKz1cIiBcIit0LmxhbmdQcmVmaXgrZix1PXthdHRyczpjfSxcIjxwcmU+PGNvZGVcIitpLnJlbmRlckF0dHJzKHUpK1wiPlwiK2ErXCI8L2NvZGU+PC9wcmU+XFxuXCIpOlwiPHByZT48Y29kZVwiK2kucmVuZGVyQXR0cnMocCkrXCI+XCIrYStcIjwvY29kZT48L3ByZT5cXG5cIn0saS5pbWFnZT1mdW5jdGlvbihlLHIsdCxuLG8pe3ZhciBzPWVbcl07cmV0dXJuIHMuYXR0cnNbcy5hdHRySW5kZXgoXCJhbHRcIildWzFdPW8ucmVuZGVySW5saW5lQXNUZXh0KHMuY2hpbGRyZW4sdCxuKSxvLnJlbmRlclRva2VuKGUscix0KX0saS5oYXJkYnJlYWs9ZnVuY3Rpb24oZSxyLHQpe3JldHVybiB0LnhodG1sT3V0P1wiPGJyIC8+XFxuXCI6XCI8YnI+XFxuXCJ9LGkuc29mdGJyZWFrPWZ1bmN0aW9uKGUscix0KXtyZXR1cm4gdC5icmVha3M/dC54aHRtbE91dD9cIjxiciAvPlxcblwiOlwiPGJyPlxcblwiOlwiXFxuXCJ9LGkudGV4dD1mdW5jdGlvbihlLHIpe3JldHVybiBzKGVbcl0uY29udGVudCl9LGkuaHRtbF9ibG9jaz1mdW5jdGlvbihlLHIpe3JldHVybiBlW3JdLmNvbnRlbnR9LGkuaHRtbF9pbmxpbmU9ZnVuY3Rpb24oZSxyKXtyZXR1cm4gZVtyXS5jb250ZW50fSxhLnByb3RvdHlwZS5yZW5kZXJBdHRycz1mdW5jdGlvbihlKXt2YXIgcix0LG47aWYoIWUuYXR0cnMpcmV0dXJuXCJcIjtmb3Iobj1cIlwiLHI9MCx0PWUuYXR0cnMubGVuZ3RoO3I8dDtyKyspbis9XCIgXCIrcyhlLmF0dHJzW3JdWzBdKSsnPVwiJytzKGUuYXR0cnNbcl1bMV0pKydcIic7cmV0dXJuIG59LGEucHJvdG90eXBlLnJlbmRlclRva2VuPWZ1bmN0aW9uKGUscix0KXt2YXIgbixvPVwiXCIscz0hMSxpPWVbcl07cmV0dXJuIGkuaGlkZGVuP1wiXCI6KGkuYmxvY2smJi0xIT09aS5uZXN0aW5nJiZyJiZlW3ItMV0uaGlkZGVuJiYobys9XCJcXG5cIiksbys9KC0xPT09aS5uZXN0aW5nP1wiPC9cIjpcIjxcIikraS50YWcsbys9dGhpcy5yZW5kZXJBdHRycyhpKSwwPT09aS5uZXN0aW5nJiZ0LnhodG1sT3V0JiYobys9XCIgL1wiKSxpLmJsb2NrJiYocz0hMCwxPT09aS5uZXN0aW5nJiZyKzE8ZS5sZW5ndGgmJihcImlubGluZVwiPT09KG49ZVtyKzFdKS50eXBlfHxuLmhpZGRlbj9zPSExOi0xPT09bi5uZXN0aW5nJiZuLnRhZz09PWkudGFnJiYocz0hMSkpKSxvKz1zP1wiPlxcblwiOlwiPlwiKX0sYS5wcm90b3R5cGUucmVuZGVySW5saW5lPWZ1bmN0aW9uKGUscix0KXtmb3IodmFyIG4sbz1cIlwiLHM9dGhpcy5ydWxlcyxpPTAsYT1lLmxlbmd0aDtpPGE7aSsrKW49ZVtpXS50eXBlLHZvaWQgMCE9PXNbbl0/bys9c1tuXShlLGkscix0LHRoaXMpOm8rPXRoaXMucmVuZGVyVG9rZW4oZSxpLHIpO3JldHVybiBvfSxhLnByb3RvdHlwZS5yZW5kZXJJbmxpbmVBc1RleHQ9ZnVuY3Rpb24oZSxyLHQpe2Zvcih2YXIgbj1cIlwiLG89MCxzPWUubGVuZ3RoO288cztvKyspXCJ0ZXh0XCI9PT1lW29dLnR5cGU/bis9ZVtvXS5jb250ZW50OlwiaW1hZ2VcIj09PWVbb10udHlwZSYmKG4rPXRoaXMucmVuZGVySW5saW5lQXNUZXh0KGVbb10uY2hpbGRyZW4scix0KSk7cmV0dXJuIG59LGEucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbihlLHIsdCl7dmFyIG4sbyxzLGk9XCJcIixhPXRoaXMucnVsZXM7Zm9yKG49MCxvPWUubGVuZ3RoO248bztuKyspXCJpbmxpbmVcIj09PShzPWVbbl0udHlwZSk/aSs9dGhpcy5yZW5kZXJJbmxpbmUoZVtuXS5jaGlsZHJlbixyLHQpOnZvaWQgMCE9PWFbc10/aSs9YVtlW25dLnR5cGVdKGUsbixyLHQsdGhpcyk6aSs9dGhpcy5yZW5kZXJUb2tlbihlLG4scix0KTtyZXR1cm4gaX0sci5leHBvcnRzPWF9LHtcIi4vY29tbW9uL3V0aWxzXCI6NH1dLDE3OltmdW5jdGlvbihlLHIsdCl7ZnVuY3Rpb24gbigpe3RoaXMuX19ydWxlc19fPVtdLHRoaXMuX19jYWNoZV9fPW51bGx9bi5wcm90b3R5cGUuX19maW5kX189ZnVuY3Rpb24oZSl7Zm9yKHZhciByPTA7cjx0aGlzLl9fcnVsZXNfXy5sZW5ndGg7cisrKWlmKHRoaXMuX19ydWxlc19fW3JdLm5hbWU9PT1lKXJldHVybiByO3JldHVybi0xfSxuLnByb3RvdHlwZS5fX2NvbXBpbGVfXz1mdW5jdGlvbigpe3ZhciBlPXRoaXMscj1bXCJcIl07ZS5fX3J1bGVzX18uZm9yRWFjaChmdW5jdGlvbihlKXtlLmVuYWJsZWQmJmUuYWx0LmZvckVhY2goZnVuY3Rpb24oZSl7ci5pbmRleE9mKGUpPDAmJnIucHVzaChlKX0pfSksZS5fX2NhY2hlX189e30sci5mb3JFYWNoKGZ1bmN0aW9uKHIpe2UuX19jYWNoZV9fW3JdPVtdLGUuX19ydWxlc19fLmZvckVhY2goZnVuY3Rpb24odCl7dC5lbmFibGVkJiYociYmdC5hbHQuaW5kZXhPZihyKTwwfHxlLl9fY2FjaGVfX1tyXS5wdXNoKHQuZm4pKX0pfSl9LG4ucHJvdG90eXBlLmF0PWZ1bmN0aW9uKGUscix0KXt2YXIgbj10aGlzLl9fZmluZF9fKGUpLG89dHx8e307aWYoLTE9PT1uKXRocm93IG5ldyBFcnJvcihcIlBhcnNlciBydWxlIG5vdCBmb3VuZDogXCIrZSk7dGhpcy5fX3J1bGVzX19bbl0uZm49cix0aGlzLl9fcnVsZXNfX1tuXS5hbHQ9by5hbHR8fFtdLHRoaXMuX19jYWNoZV9fPW51bGx9LG4ucHJvdG90eXBlLmJlZm9yZT1mdW5jdGlvbihlLHIsdCxuKXt2YXIgbz10aGlzLl9fZmluZF9fKGUpLHM9bnx8e307aWYoLTE9PT1vKXRocm93IG5ldyBFcnJvcihcIlBhcnNlciBydWxlIG5vdCBmb3VuZDogXCIrZSk7dGhpcy5fX3J1bGVzX18uc3BsaWNlKG8sMCx7bmFtZTpyLGVuYWJsZWQ6ITAsZm46dCxhbHQ6cy5hbHR8fFtdfSksdGhpcy5fX2NhY2hlX189bnVsbH0sbi5wcm90b3R5cGUuYWZ0ZXI9ZnVuY3Rpb24oZSxyLHQsbil7dmFyIG89dGhpcy5fX2ZpbmRfXyhlKSxzPW58fHt9O2lmKC0xPT09byl0aHJvdyBuZXcgRXJyb3IoXCJQYXJzZXIgcnVsZSBub3QgZm91bmQ6IFwiK2UpO3RoaXMuX19ydWxlc19fLnNwbGljZShvKzEsMCx7bmFtZTpyLGVuYWJsZWQ6ITAsZm46dCxhbHQ6cy5hbHR8fFtdfSksdGhpcy5fX2NhY2hlX189bnVsbH0sbi5wcm90b3R5cGUucHVzaD1mdW5jdGlvbihlLHIsdCl7dmFyIG49dHx8e307dGhpcy5fX3J1bGVzX18ucHVzaCh7bmFtZTplLGVuYWJsZWQ6ITAsZm46cixhbHQ6bi5hbHR8fFtdfSksdGhpcy5fX2NhY2hlX189bnVsbH0sbi5wcm90b3R5cGUuZW5hYmxlPWZ1bmN0aW9uKGUscil7QXJyYXkuaXNBcnJheShlKXx8KGU9W2VdKTt2YXIgdD1bXTtyZXR1cm4gZS5mb3JFYWNoKGZ1bmN0aW9uKGUpe3ZhciBuPXRoaXMuX19maW5kX18oZSk7aWYobjwwKXtpZihyKXJldHVybjt0aHJvdyBuZXcgRXJyb3IoXCJSdWxlcyBtYW5hZ2VyOiBpbnZhbGlkIHJ1bGUgbmFtZSBcIitlKX10aGlzLl9fcnVsZXNfX1tuXS5lbmFibGVkPSEwLHQucHVzaChlKX0sdGhpcyksdGhpcy5fX2NhY2hlX189bnVsbCx0fSxuLnByb3RvdHlwZS5lbmFibGVPbmx5PWZ1bmN0aW9uKGUscil7QXJyYXkuaXNBcnJheShlKXx8KGU9W2VdKSx0aGlzLl9fcnVsZXNfXy5mb3JFYWNoKGZ1bmN0aW9uKGUpe2UuZW5hYmxlZD0hMX0pLHRoaXMuZW5hYmxlKGUscil9LG4ucHJvdG90eXBlLmRpc2FibGU9ZnVuY3Rpb24oZSxyKXtBcnJheS5pc0FycmF5KGUpfHwoZT1bZV0pO3ZhciB0PVtdO3JldHVybiBlLmZvckVhY2goZnVuY3Rpb24oZSl7dmFyIG49dGhpcy5fX2ZpbmRfXyhlKTtpZihuPDApe2lmKHIpcmV0dXJuO3Rocm93IG5ldyBFcnJvcihcIlJ1bGVzIG1hbmFnZXI6IGludmFsaWQgcnVsZSBuYW1lIFwiK2UpfXRoaXMuX19ydWxlc19fW25dLmVuYWJsZWQ9ITEsdC5wdXNoKGUpfSx0aGlzKSx0aGlzLl9fY2FjaGVfXz1udWxsLHR9LG4ucHJvdG90eXBlLmdldFJ1bGVzPWZ1bmN0aW9uKGUpe3JldHVybiBudWxsPT09dGhpcy5fX2NhY2hlX18mJnRoaXMuX19jb21waWxlX18oKSx0aGlzLl9fY2FjaGVfX1tlXXx8W119LHIuZXhwb3J0cz1ufSx7fV0sMTg6W2Z1bmN0aW9uKGUscix0KXt2YXIgbj1lKFwiLi4vY29tbW9uL3V0aWxzXCIpLmlzU3BhY2U7ci5leHBvcnRzPWZ1bmN0aW9uKGUscix0LG8pe3ZhciBzLGksYSxsLGMsdSxwLGgsZixkLG0sXyxnLGssYix2LHkseCxDLEEsdz1lLmxpbmVNYXgsRD1lLmJNYXJrc1tyXStlLnRTaGlmdFtyXSxFPWUuZU1hcmtzW3JdO2lmKGUuc0NvdW50W3JdLWUuYmxrSW5kZW50Pj00KXJldHVybiExO2lmKDYyIT09ZS5zcmMuY2hhckNvZGVBdChEKyspKXJldHVybiExO2lmKG8pcmV0dXJuITA7Zm9yKGw9Zj1lLnNDb3VudFtyXStELShlLmJNYXJrc1tyXStlLnRTaGlmdFtyXSksMzI9PT1lLnNyYy5jaGFyQ29kZUF0KEQpPyhEKyssbCsrLGYrKyxzPSExLHY9ITApOjk9PT1lLnNyYy5jaGFyQ29kZUF0KEQpPyh2PSEwLChlLmJzQ291bnRbcl0rZiklND09Mz8oRCsrLGwrKyxmKysscz0hMSk6cz0hMCk6dj0hMSxkPVtlLmJNYXJrc1tyXV0sZS5iTWFya3Nbcl09RDtEPEUmJihpPWUuc3JjLmNoYXJDb2RlQXQoRCksbihpKSk7KTk9PT1pP2YrPTQtKGYrZS5ic0NvdW50W3JdKyhzPzE6MCkpJTQ6ZisrLEQrKztmb3IobT1bZS5ic0NvdW50W3JdXSxlLmJzQ291bnRbcl09ZS5zQ291bnRbcl0rMSsodj8xOjApLHU9RD49RSxrPVtlLnNDb3VudFtyXV0sZS5zQ291bnRbcl09Zi1sLGI9W2UudFNoaWZ0W3JdXSxlLnRTaGlmdFtyXT1ELWUuYk1hcmtzW3JdLHg9ZS5tZC5ibG9jay5ydWxlci5nZXRSdWxlcyhcImJsb2NrcXVvdGVcIiksZz1lLnBhcmVudFR5cGUsZS5wYXJlbnRUeXBlPVwiYmxvY2txdW90ZVwiLEE9ITEsaD1yKzE7aDx0JiYoZS5zQ291bnRbaF08ZS5ibGtJbmRlbnQmJihBPSEwKSxEPWUuYk1hcmtzW2hdK2UudFNoaWZ0W2hdLEU9ZS5lTWFya3NbaF0sIShEPj1FKSk7aCsrKWlmKDYyIT09ZS5zcmMuY2hhckNvZGVBdChEKyspfHxBKXtpZih1KWJyZWFrO2Zvcih5PSExLGE9MCxjPXgubGVuZ3RoO2E8YzthKyspaWYoeFthXShlLGgsdCwhMCkpe3k9ITA7YnJlYWt9aWYoeSl7ZS5saW5lTWF4PWgsMCE9PWUuYmxrSW5kZW50JiYoZC5wdXNoKGUuYk1hcmtzW2hdKSxtLnB1c2goZS5ic0NvdW50W2hdKSxiLnB1c2goZS50U2hpZnRbaF0pLGsucHVzaChlLnNDb3VudFtoXSksZS5zQ291bnRbaF0tPWUuYmxrSW5kZW50KTticmVha31kLnB1c2goZS5iTWFya3NbaF0pLG0ucHVzaChlLmJzQ291bnRbaF0pLGIucHVzaChlLnRTaGlmdFtoXSksay5wdXNoKGUuc0NvdW50W2hdKSxlLnNDb3VudFtoXT0tMX1lbHNle2ZvcihsPWY9ZS5zQ291bnRbaF0rRC0oZS5iTWFya3NbaF0rZS50U2hpZnRbaF0pLDMyPT09ZS5zcmMuY2hhckNvZGVBdChEKT8oRCsrLGwrKyxmKysscz0hMSx2PSEwKTo5PT09ZS5zcmMuY2hhckNvZGVBdChEKT8odj0hMCwoZS5ic0NvdW50W2hdK2YpJTQ9PTM/KEQrKyxsKyssZisrLHM9ITEpOnM9ITApOnY9ITEsZC5wdXNoKGUuYk1hcmtzW2hdKSxlLmJNYXJrc1toXT1EO0Q8RSYmKGk9ZS5zcmMuY2hhckNvZGVBdChEKSxuKGkpKTspOT09PWk/Zis9NC0oZitlLmJzQ291bnRbaF0rKHM/MTowKSklNDpmKyssRCsrO3U9RD49RSxtLnB1c2goZS5ic0NvdW50W2hdKSxlLmJzQ291bnRbaF09ZS5zQ291bnRbaF0rMSsodj8xOjApLGsucHVzaChlLnNDb3VudFtoXSksZS5zQ291bnRbaF09Zi1sLGIucHVzaChlLnRTaGlmdFtoXSksZS50U2hpZnRbaF09RC1lLmJNYXJrc1toXX1mb3IoXz1lLmJsa0luZGVudCxlLmJsa0luZGVudD0wLChDPWUucHVzaChcImJsb2NrcXVvdGVfb3BlblwiLFwiYmxvY2txdW90ZVwiLDEpKS5tYXJrdXA9XCI+XCIsQy5tYXA9cD1bciwwXSxlLm1kLmJsb2NrLnRva2VuaXplKGUscixoKSwoQz1lLnB1c2goXCJibG9ja3F1b3RlX2Nsb3NlXCIsXCJibG9ja3F1b3RlXCIsLTEpKS5tYXJrdXA9XCI+XCIsZS5saW5lTWF4PXcsZS5wYXJlbnRUeXBlPWcscFsxXT1lLmxpbmUsYT0wO2E8Yi5sZW5ndGg7YSsrKWUuYk1hcmtzW2Ercl09ZFthXSxlLnRTaGlmdFthK3JdPWJbYV0sZS5zQ291bnRbYStyXT1rW2FdLGUuYnNDb3VudFthK3JdPW1bYV07cmV0dXJuIGUuYmxrSW5kZW50PV8sITB9fSx7XCIuLi9jb21tb24vdXRpbHNcIjo0fV0sMTk6W2Z1bmN0aW9uKGUscix0KXtyLmV4cG9ydHM9ZnVuY3Rpb24oZSxyLHQpe3ZhciBuLG8scztpZihlLnNDb3VudFtyXS1lLmJsa0luZGVudDw0KXJldHVybiExO2ZvcihvPW49cisxO248dDspaWYoZS5pc0VtcHR5KG4pKW4rKztlbHNle2lmKCEoZS5zQ291bnRbbl0tZS5ibGtJbmRlbnQ+PTQpKWJyZWFrO289KytufXJldHVybiBlLmxpbmU9bywocz1lLnB1c2goXCJjb2RlX2Jsb2NrXCIsXCJjb2RlXCIsMCkpLmNvbnRlbnQ9ZS5nZXRMaW5lcyhyLG8sNCtlLmJsa0luZGVudCwhMCkscy5tYXA9W3IsZS5saW5lXSwhMH19LHt9XSwyMDpbZnVuY3Rpb24oZSxyLHQpe3IuZXhwb3J0cz1mdW5jdGlvbihlLHIsdCxuKXt2YXIgbyxzLGksYSxsLGMsdSxwPSExLGg9ZS5iTWFya3Nbcl0rZS50U2hpZnRbcl0sZj1lLmVNYXJrc1tyXTtpZihlLnNDb3VudFtyXS1lLmJsa0luZGVudD49NClyZXR1cm4hMTtpZihoKzM+ZilyZXR1cm4hMTtpZigxMjYhPT0obz1lLnNyYy5jaGFyQ29kZUF0KGgpKSYmOTYhPT1vKXJldHVybiExO2lmKGw9aCxoPWUuc2tpcENoYXJzKGgsbyksKHM9aC1sKTwzKXJldHVybiExO2lmKHU9ZS5zcmMuc2xpY2UobCxoKSxpPWUuc3JjLnNsaWNlKGgsZiksOTY9PT1vJiZpLmluZGV4T2YoU3RyaW5nLmZyb21DaGFyQ29kZShvKSk+PTApcmV0dXJuITE7aWYobilyZXR1cm4hMDtmb3IoYT1yOyEoKythPj10fHwoaD1sPWUuYk1hcmtzW2FdK2UudFNoaWZ0W2FdLGY9ZS5lTWFya3NbYV0saDxmJiZlLnNDb3VudFthXTxlLmJsa0luZGVudCkpOylpZihlLnNyYy5jaGFyQ29kZUF0KGgpPT09byYmIShlLnNDb3VudFthXS1lLmJsa0luZGVudD49NHx8KGg9ZS5za2lwQ2hhcnMoaCxvKSktbDxzfHwoaD1lLnNraXBTcGFjZXMoaCkpPGYpKXtwPSEwO2JyZWFrfXJldHVybiBzPWUuc0NvdW50W3JdLGUubGluZT1hKyhwPzE6MCksKGM9ZS5wdXNoKFwiZmVuY2VcIixcImNvZGVcIiwwKSkuaW5mbz1pLGMuY29udGVudD1lLmdldExpbmVzKHIrMSxhLHMsITApLGMubWFya3VwPXUsYy5tYXA9W3IsZS5saW5lXSwhMH19LHt9XSwyMTpbZnVuY3Rpb24oZSxyLHQpe3ZhciBuPWUoXCIuLi9jb21tb24vdXRpbHNcIikuaXNTcGFjZTtyLmV4cG9ydHM9ZnVuY3Rpb24oZSxyLHQsbyl7dmFyIHMsaSxhLGwsYz1lLmJNYXJrc1tyXStlLnRTaGlmdFtyXSx1PWUuZU1hcmtzW3JdO2lmKGUuc0NvdW50W3JdLWUuYmxrSW5kZW50Pj00KXJldHVybiExO2lmKDM1IT09KHM9ZS5zcmMuY2hhckNvZGVBdChjKSl8fGM+PXUpcmV0dXJuITE7Zm9yKGk9MSxzPWUuc3JjLmNoYXJDb2RlQXQoKytjKTszNT09PXMmJmM8dSYmaTw9NjspaSsrLHM9ZS5zcmMuY2hhckNvZGVBdCgrK2MpO3JldHVybiEoaT42fHxjPHUmJiFuKHMpfHwhbyYmKHU9ZS5za2lwU3BhY2VzQmFjayh1LGMpLChhPWUuc2tpcENoYXJzQmFjayh1LDM1LGMpKT5jJiZuKGUuc3JjLmNoYXJDb2RlQXQoYS0xKSkmJih1PWEpLGUubGluZT1yKzEsKGw9ZS5wdXNoKFwiaGVhZGluZ19vcGVuXCIsXCJoXCIrU3RyaW5nKGkpLDEpKS5tYXJrdXA9XCIjIyMjIyMjI1wiLnNsaWNlKDAsaSksbC5tYXA9W3IsZS5saW5lXSwobD1lLnB1c2goXCJpbmxpbmVcIixcIlwiLDApKS5jb250ZW50PWUuc3JjLnNsaWNlKGMsdSkudHJpbSgpLGwubWFwPVtyLGUubGluZV0sbC5jaGlsZHJlbj1bXSwobD1lLnB1c2goXCJoZWFkaW5nX2Nsb3NlXCIsXCJoXCIrU3RyaW5nKGkpLC0xKSkubWFya3VwPVwiIyMjIyMjIyNcIi5zbGljZSgwLGkpLDApKX19LHtcIi4uL2NvbW1vbi91dGlsc1wiOjR9XSwyMjpbZnVuY3Rpb24oZSxyLHQpe3ZhciBuPWUoXCIuLi9jb21tb24vdXRpbHNcIikuaXNTcGFjZTtyLmV4cG9ydHM9ZnVuY3Rpb24oZSxyLHQsbyl7dmFyIHMsaSxhLGwsYz1lLmJNYXJrc1tyXStlLnRTaGlmdFtyXSx1PWUuZU1hcmtzW3JdO2lmKGUuc0NvdW50W3JdLWUuYmxrSW5kZW50Pj00KXJldHVybiExO2lmKDQyIT09KHM9ZS5zcmMuY2hhckNvZGVBdChjKyspKSYmNDUhPT1zJiY5NSE9PXMpcmV0dXJuITE7Zm9yKGk9MTtjPHU7KXtpZigoYT1lLnNyYy5jaGFyQ29kZUF0KGMrKykpIT09cyYmIW4oYSkpcmV0dXJuITE7YT09PXMmJmkrK31yZXR1cm4hKGk8M3x8IW8mJihlLmxpbmU9cisxLChsPWUucHVzaChcImhyXCIsXCJoclwiLDApKS5tYXA9W3IsZS5saW5lXSxsLm1hcmt1cD1BcnJheShpKzEpLmpvaW4oU3RyaW5nLmZyb21DaGFyQ29kZShzKSksMCkpfX0se1wiLi4vY29tbW9uL3V0aWxzXCI6NH1dLDIzOltmdW5jdGlvbihlLHIsdCl7dmFyIG49ZShcIi4uL2NvbW1vbi9odG1sX2Jsb2Nrc1wiKSxvPWUoXCIuLi9jb21tb24vaHRtbF9yZVwiKS5IVE1MX09QRU5fQ0xPU0VfVEFHX1JFLHM9W1svXjwoc2NyaXB0fHByZXxzdHlsZSkoPz0oXFxzfD58JCkpL2ksLzxcXC8oc2NyaXB0fHByZXxzdHlsZSk+L2ksITBdLFsvXjwhLS0vLC8tLT4vLCEwXSxbL148XFw/LywvXFw/Pi8sITBdLFsvXjwhW0EtWl0vLC8+LywhMF0sWy9ePCFcXFtDREFUQVxcWy8sL1xcXVxcXT4vLCEwXSxbbmV3IFJlZ0V4cChcIl48Lz8oXCIrbi5qb2luKFwifFwiKStcIikoPz0oXFxcXHN8Lz8+fCQpKVwiLFwiaVwiKSwvXiQvLCEwXSxbbmV3IFJlZ0V4cChvLnNvdXJjZStcIlxcXFxzKiRcIiksL14kLywhMV1dO3IuZXhwb3J0cz1mdW5jdGlvbihlLHIsdCxuKXt2YXIgbyxpLGEsbCxjPWUuYk1hcmtzW3JdK2UudFNoaWZ0W3JdLHU9ZS5lTWFya3Nbcl07aWYoZS5zQ291bnRbcl0tZS5ibGtJbmRlbnQ+PTQpcmV0dXJuITE7aWYoIWUubWQub3B0aW9ucy5odG1sKXJldHVybiExO2lmKDYwIT09ZS5zcmMuY2hhckNvZGVBdChjKSlyZXR1cm4hMTtmb3IobD1lLnNyYy5zbGljZShjLHUpLG89MDtvPHMubGVuZ3RoJiYhc1tvXVswXS50ZXN0KGwpO28rKyk7aWYobz09PXMubGVuZ3RoKXJldHVybiExO2lmKG4pcmV0dXJuIHNbb11bMl07aWYoaT1yKzEsIXNbb11bMV0udGVzdChsKSlmb3IoO2k8dCYmIShlLnNDb3VudFtpXTxlLmJsa0luZGVudCk7aSsrKWlmKGM9ZS5iTWFya3NbaV0rZS50U2hpZnRbaV0sdT1lLmVNYXJrc1tpXSxsPWUuc3JjLnNsaWNlKGMsdSksc1tvXVsxXS50ZXN0KGwpKXswIT09bC5sZW5ndGgmJmkrKzticmVha31yZXR1cm4gZS5saW5lPWksKGE9ZS5wdXNoKFwiaHRtbF9ibG9ja1wiLFwiXCIsMCkpLm1hcD1bcixpXSxhLmNvbnRlbnQ9ZS5nZXRMaW5lcyhyLGksZS5ibGtJbmRlbnQsITApLCEwfX0se1wiLi4vY29tbW9uL2h0bWxfYmxvY2tzXCI6MixcIi4uL2NvbW1vbi9odG1sX3JlXCI6M31dLDI0OltmdW5jdGlvbihlLHIsdCl7ci5leHBvcnRzPWZ1bmN0aW9uKGUscix0KXt2YXIgbixvLHMsaSxhLGwsYyx1LHAsaCxmPXIrMSxkPWUubWQuYmxvY2sucnVsZXIuZ2V0UnVsZXMoXCJwYXJhZ3JhcGhcIik7aWYoZS5zQ291bnRbcl0tZS5ibGtJbmRlbnQ+PTQpcmV0dXJuITE7Zm9yKGg9ZS5wYXJlbnRUeXBlLGUucGFyZW50VHlwZT1cInBhcmFncmFwaFwiO2Y8dCYmIWUuaXNFbXB0eShmKTtmKyspaWYoIShlLnNDb3VudFtmXS1lLmJsa0luZGVudD4zKSl7aWYoZS5zQ291bnRbZl0+PWUuYmxrSW5kZW50JiYobD1lLmJNYXJrc1tmXStlLnRTaGlmdFtmXSxjPWUuZU1hcmtzW2ZdLGw8YyYmKDQ1PT09KHA9ZS5zcmMuY2hhckNvZGVBdChsKSl8fDYxPT09cCkmJihsPWUuc2tpcENoYXJzKGwscCksKGw9ZS5za2lwU3BhY2VzKGwpKT49YykpKXt1PTYxPT09cD8xOjI7YnJlYWt9aWYoIShlLnNDb3VudFtmXTwwKSl7Zm9yKG89ITEscz0wLGk9ZC5sZW5ndGg7czxpO3MrKylpZihkW3NdKGUsZix0LCEwKSl7bz0hMDticmVha31pZihvKWJyZWFrfX1yZXR1cm4hIXUmJihuPWUuZ2V0TGluZXMocixmLGUuYmxrSW5kZW50LCExKS50cmltKCksZS5saW5lPWYrMSwoYT1lLnB1c2goXCJoZWFkaW5nX29wZW5cIixcImhcIitTdHJpbmcodSksMSkpLm1hcmt1cD1TdHJpbmcuZnJvbUNoYXJDb2RlKHApLGEubWFwPVtyLGUubGluZV0sKGE9ZS5wdXNoKFwiaW5saW5lXCIsXCJcIiwwKSkuY29udGVudD1uLGEubWFwPVtyLGUubGluZS0xXSxhLmNoaWxkcmVuPVtdLChhPWUucHVzaChcImhlYWRpbmdfY2xvc2VcIixcImhcIitTdHJpbmcodSksLTEpKS5tYXJrdXA9U3RyaW5nLmZyb21DaGFyQ29kZShwKSxlLnBhcmVudFR5cGU9aCwhMCl9fSx7fV0sMjU6W2Z1bmN0aW9uKGUscix0KXt2YXIgbj1lKFwiLi4vY29tbW9uL3V0aWxzXCIpLmlzU3BhY2U7ZnVuY3Rpb24gbyhlLHIpe3ZhciB0LG8scyxpO3JldHVybiBvPWUuYk1hcmtzW3JdK2UudFNoaWZ0W3JdLHM9ZS5lTWFya3Nbcl0sNDIhPT0odD1lLnNyYy5jaGFyQ29kZUF0KG8rKykpJiY0NSE9PXQmJjQzIT09dD8tMTpvPHMmJihpPWUuc3JjLmNoYXJDb2RlQXQobyksIW4oaSkpPy0xOm99ZnVuY3Rpb24gcyhlLHIpe3ZhciB0LG89ZS5iTWFya3Nbcl0rZS50U2hpZnRbcl0scz1vLGk9ZS5lTWFya3Nbcl07aWYocysxPj1pKXJldHVybi0xO2lmKCh0PWUuc3JjLmNoYXJDb2RlQXQocysrKSk8NDh8fHQ+NTcpcmV0dXJuLTE7Zm9yKDs7KXtpZihzPj1pKXJldHVybi0xO2lmKCEoKHQ9ZS5zcmMuY2hhckNvZGVBdChzKyspKT49NDgmJnQ8PTU3KSl7aWYoNDE9PT10fHw0Nj09PXQpYnJlYWs7cmV0dXJuLTF9aWYocy1vPj0xMClyZXR1cm4tMX1yZXR1cm4gczxpJiYodD1lLnNyYy5jaGFyQ29kZUF0KHMpLCFuKHQpKT8tMTpzfXIuZXhwb3J0cz1mdW5jdGlvbihlLHIsdCxuKXt2YXIgaSxhLGwsYyx1LHAsaCxmLGQsbSxfLGcsayxiLHYseSx4LEMsQSx3LEQsRSxxLEYsUyxMLHosVCxJPSExLFI9ITA7aWYoZS5zQ291bnRbcl0tZS5ibGtJbmRlbnQ+PTQpcmV0dXJuITE7aWYoZS5saXN0SW5kZW50Pj0wJiZlLnNDb3VudFtyXS1lLmxpc3RJbmRlbnQ+PTQmJmUuc0NvdW50W3JdPGUuYmxrSW5kZW50KXJldHVybiExO2lmKG4mJlwicGFyYWdyYXBoXCI9PT1lLnBhcmVudFR5cGUmJmUudFNoaWZ0W3JdPj1lLmJsa0luZGVudCYmKEk9ITApLChxPXMoZSxyKSk+PTApe2lmKGg9ITAsUz1lLmJNYXJrc1tyXStlLnRTaGlmdFtyXSxrPU51bWJlcihlLnNyYy5zdWJzdHIoUyxxLVMtMSkpLEkmJjEhPT1rKXJldHVybiExfWVsc2V7aWYoISgocT1vKGUscikpPj0wKSlyZXR1cm4hMTtoPSExfWlmKEkmJmUuc2tpcFNwYWNlcyhxKT49ZS5lTWFya3Nbcl0pcmV0dXJuITE7aWYoZz1lLnNyYy5jaGFyQ29kZUF0KHEtMSksbilyZXR1cm4hMDtmb3IoXz1lLnRva2Vucy5sZW5ndGgsaD8oVD1lLnB1c2goXCJvcmRlcmVkX2xpc3Rfb3BlblwiLFwib2xcIiwxKSwxIT09ayYmKFQuYXR0cnM9W1tcInN0YXJ0XCIsa11dKSk6VD1lLnB1c2goXCJidWxsZXRfbGlzdF9vcGVuXCIsXCJ1bFwiLDEpLFQubWFwPW09W3IsMF0sVC5tYXJrdXA9U3RyaW5nLmZyb21DaGFyQ29kZShnKSx2PXIsRj0hMSx6PWUubWQuYmxvY2sucnVsZXIuZ2V0UnVsZXMoXCJsaXN0XCIpLEM9ZS5wYXJlbnRUeXBlLGUucGFyZW50VHlwZT1cImxpc3RcIjt2PHQ7KXtmb3IoRT1xLGI9ZS5lTWFya3Nbdl0scD15PWUuc0NvdW50W3ZdK3EtKGUuYk1hcmtzW3JdK2UudFNoaWZ0W3JdKTtFPGI7KXtpZig5PT09KGk9ZS5zcmMuY2hhckNvZGVBdChFKSkpeSs9NC0oeStlLmJzQ291bnRbdl0pJTQ7ZWxzZXtpZigzMiE9PWkpYnJlYWs7eSsrfUUrK31pZigodT0oYT1FKT49Yj8xOnktcCk+NCYmKHU9MSksYz1wK3UsKFQ9ZS5wdXNoKFwibGlzdF9pdGVtX29wZW5cIixcImxpXCIsMSkpLm1hcmt1cD1TdHJpbmcuZnJvbUNoYXJDb2RlKGcpLFQubWFwPWY9W3IsMF0sRD1lLnRpZ2h0LHc9ZS50U2hpZnRbcl0sQT1lLnNDb3VudFtyXSx4PWUubGlzdEluZGVudCxlLmxpc3RJbmRlbnQ9ZS5ibGtJbmRlbnQsZS5ibGtJbmRlbnQ9YyxlLnRpZ2h0PSEwLGUudFNoaWZ0W3JdPWEtZS5iTWFya3Nbcl0sZS5zQ291bnRbcl09eSxhPj1iJiZlLmlzRW1wdHkocisxKT9lLmxpbmU9TWF0aC5taW4oZS5saW5lKzIsdCk6ZS5tZC5ibG9jay50b2tlbml6ZShlLHIsdCwhMCksZS50aWdodCYmIUZ8fChSPSExKSxGPWUubGluZS1yPjEmJmUuaXNFbXB0eShlLmxpbmUtMSksZS5ibGtJbmRlbnQ9ZS5saXN0SW5kZW50LGUubGlzdEluZGVudD14LGUudFNoaWZ0W3JdPXcsZS5zQ291bnRbcl09QSxlLnRpZ2h0PUQsKFQ9ZS5wdXNoKFwibGlzdF9pdGVtX2Nsb3NlXCIsXCJsaVwiLC0xKSkubWFya3VwPVN0cmluZy5mcm9tQ2hhckNvZGUoZyksdj1yPWUubGluZSxmWzFdPXYsYT1lLmJNYXJrc1tyXSx2Pj10KWJyZWFrO2lmKGUuc0NvdW50W3ZdPGUuYmxrSW5kZW50KWJyZWFrO2lmKGUuc0NvdW50W3JdLWUuYmxrSW5kZW50Pj00KWJyZWFrO2ZvcihMPSExLGw9MCxkPXoubGVuZ3RoO2w8ZDtsKyspaWYoeltsXShlLHYsdCwhMCkpe0w9ITA7YnJlYWt9aWYoTClicmVhaztpZihoKXtpZigocT1zKGUsdikpPDApYnJlYWt9ZWxzZSBpZigocT1vKGUsdikpPDApYnJlYWs7aWYoZyE9PWUuc3JjLmNoYXJDb2RlQXQocS0xKSlicmVha31yZXR1cm4oVD1oP2UucHVzaChcIm9yZGVyZWRfbGlzdF9jbG9zZVwiLFwib2xcIiwtMSk6ZS5wdXNoKFwiYnVsbGV0X2xpc3RfY2xvc2VcIixcInVsXCIsLTEpKS5tYXJrdXA9U3RyaW5nLmZyb21DaGFyQ29kZShnKSxtWzFdPXYsZS5saW5lPXYsZS5wYXJlbnRUeXBlPUMsUiYmZnVuY3Rpb24oZSxyKXt2YXIgdCxuLG89ZS5sZXZlbCsyO2Zvcih0PXIrMixuPWUudG9rZW5zLmxlbmd0aC0yO3Q8bjt0KyspZS50b2tlbnNbdF0ubGV2ZWw9PT1vJiZcInBhcmFncmFwaF9vcGVuXCI9PT1lLnRva2Vuc1t0XS50eXBlJiYoZS50b2tlbnNbdCsyXS5oaWRkZW49ITAsZS50b2tlbnNbdF0uaGlkZGVuPSEwLHQrPTIpfShlLF8pLCEwfX0se1wiLi4vY29tbW9uL3V0aWxzXCI6NH1dLDI2OltmdW5jdGlvbihlLHIsdCl7ci5leHBvcnRzPWZ1bmN0aW9uKGUscil7dmFyIHQsbixvLHMsaSxhLGw9cisxLGM9ZS5tZC5ibG9jay5ydWxlci5nZXRSdWxlcyhcInBhcmFncmFwaFwiKSx1PWUubGluZU1heDtmb3IoYT1lLnBhcmVudFR5cGUsZS5wYXJlbnRUeXBlPVwicGFyYWdyYXBoXCI7bDx1JiYhZS5pc0VtcHR5KGwpO2wrKylpZighKGUuc0NvdW50W2xdLWUuYmxrSW5kZW50PjN8fGUuc0NvdW50W2xdPDApKXtmb3Iobj0hMSxvPTAscz1jLmxlbmd0aDtvPHM7bysrKWlmKGNbb10oZSxsLHUsITApKXtuPSEwO2JyZWFrfWlmKG4pYnJlYWt9cmV0dXJuIHQ9ZS5nZXRMaW5lcyhyLGwsZS5ibGtJbmRlbnQsITEpLnRyaW0oKSxlLmxpbmU9bCwoaT1lLnB1c2goXCJwYXJhZ3JhcGhfb3BlblwiLFwicFwiLDEpKS5tYXA9W3IsZS5saW5lXSwoaT1lLnB1c2goXCJpbmxpbmVcIixcIlwiLDApKS5jb250ZW50PXQsaS5tYXA9W3IsZS5saW5lXSxpLmNoaWxkcmVuPVtdLGk9ZS5wdXNoKFwicGFyYWdyYXBoX2Nsb3NlXCIsXCJwXCIsLTEpLGUucGFyZW50VHlwZT1hLCEwfX0se31dLDI3OltmdW5jdGlvbihlLHIsdCl7dmFyIG49ZShcIi4uL2NvbW1vbi91dGlsc1wiKS5ub3JtYWxpemVSZWZlcmVuY2Usbz1lKFwiLi4vY29tbW9uL3V0aWxzXCIpLmlzU3BhY2U7ci5leHBvcnRzPWZ1bmN0aW9uKGUscix0LHMpe3ZhciBpLGEsbCxjLHUscCxoLGYsZCxtLF8sZyxrLGIsdix5LHg9MCxDPWUuYk1hcmtzW3JdK2UudFNoaWZ0W3JdLEE9ZS5lTWFya3Nbcl0sdz1yKzE7aWYoZS5zQ291bnRbcl0tZS5ibGtJbmRlbnQ+PTQpcmV0dXJuITE7aWYoOTEhPT1lLnNyYy5jaGFyQ29kZUF0KEMpKXJldHVybiExO2Zvcig7KytDPEE7KWlmKDkzPT09ZS5zcmMuY2hhckNvZGVBdChDKSYmOTIhPT1lLnNyYy5jaGFyQ29kZUF0KEMtMSkpe2lmKEMrMT09PUEpcmV0dXJuITE7aWYoNTghPT1lLnNyYy5jaGFyQ29kZUF0KEMrMSkpcmV0dXJuITE7YnJlYWt9Zm9yKGM9ZS5saW5lTWF4LHY9ZS5tZC5ibG9jay5ydWxlci5nZXRSdWxlcyhcInJlZmVyZW5jZVwiKSxtPWUucGFyZW50VHlwZSxlLnBhcmVudFR5cGU9XCJyZWZlcmVuY2VcIjt3PGMmJiFlLmlzRW1wdHkodyk7dysrKWlmKCEoZS5zQ291bnRbd10tZS5ibGtJbmRlbnQ+M3x8ZS5zQ291bnRbd108MCkpe2ZvcihiPSExLHA9MCxoPXYubGVuZ3RoO3A8aDtwKyspaWYodltwXShlLHcsYywhMCkpe2I9ITA7YnJlYWt9aWYoYilicmVha31mb3Ioaz1lLmdldExpbmVzKHIsdyxlLmJsa0luZGVudCwhMSkudHJpbSgpLEE9ay5sZW5ndGgsQz0xO0M8QTtDKyspe2lmKDkxPT09KGk9ay5jaGFyQ29kZUF0KEMpKSlyZXR1cm4hMTtpZig5Mz09PWkpe2Q9QzticmVha30xMD09PWk/eCsrOjkyPT09aSYmKytDPEEmJjEwPT09ay5jaGFyQ29kZUF0KEMpJiZ4Kyt9aWYoZDwwfHw1OCE9PWsuY2hhckNvZGVBdChkKzEpKXJldHVybiExO2ZvcihDPWQrMjtDPEE7QysrKWlmKDEwPT09KGk9ay5jaGFyQ29kZUF0KEMpKSl4Kys7ZWxzZSBpZighbyhpKSlicmVhaztpZighKF89ZS5tZC5oZWxwZXJzLnBhcnNlTGlua0Rlc3RpbmF0aW9uKGssQyxBKSkub2spcmV0dXJuITE7aWYodT1lLm1kLm5vcm1hbGl6ZUxpbmsoXy5zdHIpLCFlLm1kLnZhbGlkYXRlTGluayh1KSlyZXR1cm4hMTtmb3IoQz1fLnBvcyx4Kz1fLmxpbmVzLGE9QyxsPXgsZz1DO0M8QTtDKyspaWYoMTA9PT0oaT1rLmNoYXJDb2RlQXQoQykpKXgrKztlbHNlIGlmKCFvKGkpKWJyZWFrO2ZvcihfPWUubWQuaGVscGVycy5wYXJzZUxpbmtUaXRsZShrLEMsQSksQzxBJiZnIT09QyYmXy5vaz8oeT1fLnN0cixDPV8ucG9zLHgrPV8ubGluZXMpOih5PVwiXCIsQz1hLHg9bCk7QzxBJiYoaT1rLmNoYXJDb2RlQXQoQyksbyhpKSk7KUMrKztpZihDPEEmJjEwIT09ay5jaGFyQ29kZUF0KEMpJiZ5KWZvcih5PVwiXCIsQz1hLHg9bDtDPEEmJihpPWsuY2hhckNvZGVBdChDKSxvKGkpKTspQysrO3JldHVybiEoQzxBJiYxMCE9PWsuY2hhckNvZGVBdChDKXx8IShmPW4oay5zbGljZSgxLGQpKSl8fCFzJiYodm9pZCAwPT09ZS5lbnYucmVmZXJlbmNlcyYmKGUuZW52LnJlZmVyZW5jZXM9e30pLHZvaWQgMD09PWUuZW52LnJlZmVyZW5jZXNbZl0mJihlLmVudi5yZWZlcmVuY2VzW2ZdPXt0aXRsZTp5LGhyZWY6dX0pLGUucGFyZW50VHlwZT1tLGUubGluZT1yK3grMSwwKSl9fSx7XCIuLi9jb21tb24vdXRpbHNcIjo0fV0sMjg6W2Z1bmN0aW9uKGUscix0KXt2YXIgbj1lKFwiLi4vdG9rZW5cIiksbz1lKFwiLi4vY29tbW9uL3V0aWxzXCIpLmlzU3BhY2U7ZnVuY3Rpb24gcyhlLHIsdCxuKXt2YXIgcyxpLGEsbCxjLHUscCxoO2Zvcih0aGlzLnNyYz1lLHRoaXMubWQ9cix0aGlzLmVudj10LHRoaXMudG9rZW5zPW4sdGhpcy5iTWFya3M9W10sdGhpcy5lTWFya3M9W10sdGhpcy50U2hpZnQ9W10sdGhpcy5zQ291bnQ9W10sdGhpcy5ic0NvdW50PVtdLHRoaXMuYmxrSW5kZW50PTAsdGhpcy5saW5lPTAsdGhpcy5saW5lTWF4PTAsdGhpcy50aWdodD0hMSx0aGlzLmRkSW5kZW50PS0xLHRoaXMubGlzdEluZGVudD0tMSx0aGlzLnBhcmVudFR5cGU9XCJyb290XCIsdGhpcy5sZXZlbD0wLHRoaXMucmVzdWx0PVwiXCIsaT10aGlzLnNyYyxoPSExLGE9bD11PXA9MCxjPWkubGVuZ3RoO2w8YztsKyspe2lmKHM9aS5jaGFyQ29kZUF0KGwpLCFoKXtpZihvKHMpKXt1KyssOT09PXM/cCs9NC1wJTQ6cCsrO2NvbnRpbnVlfWg9ITB9MTAhPT1zJiZsIT09Yy0xfHwoMTAhPT1zJiZsKyssdGhpcy5iTWFya3MucHVzaChhKSx0aGlzLmVNYXJrcy5wdXNoKGwpLHRoaXMudFNoaWZ0LnB1c2godSksdGhpcy5zQ291bnQucHVzaChwKSx0aGlzLmJzQ291bnQucHVzaCgwKSxoPSExLHU9MCxwPTAsYT1sKzEpfXRoaXMuYk1hcmtzLnB1c2goaS5sZW5ndGgpLHRoaXMuZU1hcmtzLnB1c2goaS5sZW5ndGgpLHRoaXMudFNoaWZ0LnB1c2goMCksdGhpcy5zQ291bnQucHVzaCgwKSx0aGlzLmJzQ291bnQucHVzaCgwKSx0aGlzLmxpbmVNYXg9dGhpcy5iTWFya3MubGVuZ3RoLTF9cy5wcm90b3R5cGUucHVzaD1mdW5jdGlvbihlLHIsdCl7dmFyIG89bmV3IG4oZSxyLHQpO3JldHVybiBvLmJsb2NrPSEwLHQ8MCYmdGhpcy5sZXZlbC0tLG8ubGV2ZWw9dGhpcy5sZXZlbCx0PjAmJnRoaXMubGV2ZWwrKyx0aGlzLnRva2Vucy5wdXNoKG8pLG99LHMucHJvdG90eXBlLmlzRW1wdHk9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuYk1hcmtzW2VdK3RoaXMudFNoaWZ0W2VdPj10aGlzLmVNYXJrc1tlXX0scy5wcm90b3R5cGUuc2tpcEVtcHR5TGluZXM9ZnVuY3Rpb24oZSl7Zm9yKHZhciByPXRoaXMubGluZU1heDtlPHImJiEodGhpcy5iTWFya3NbZV0rdGhpcy50U2hpZnRbZV08dGhpcy5lTWFya3NbZV0pO2UrKyk7cmV0dXJuIGV9LHMucHJvdG90eXBlLnNraXBTcGFjZXM9ZnVuY3Rpb24oZSl7Zm9yKHZhciByLHQ9dGhpcy5zcmMubGVuZ3RoO2U8dCYmKHI9dGhpcy5zcmMuY2hhckNvZGVBdChlKSxvKHIpKTtlKyspO3JldHVybiBlfSxzLnByb3RvdHlwZS5za2lwU3BhY2VzQmFjaz1mdW5jdGlvbihlLHIpe2lmKGU8PXIpcmV0dXJuIGU7Zm9yKDtlPnI7KWlmKCFvKHRoaXMuc3JjLmNoYXJDb2RlQXQoLS1lKSkpcmV0dXJuIGUrMTtyZXR1cm4gZX0scy5wcm90b3R5cGUuc2tpcENoYXJzPWZ1bmN0aW9uKGUscil7Zm9yKHZhciB0PXRoaXMuc3JjLmxlbmd0aDtlPHQmJnRoaXMuc3JjLmNoYXJDb2RlQXQoZSk9PT1yO2UrKyk7cmV0dXJuIGV9LHMucHJvdG90eXBlLnNraXBDaGFyc0JhY2s9ZnVuY3Rpb24oZSxyLHQpe2lmKGU8PXQpcmV0dXJuIGU7Zm9yKDtlPnQ7KWlmKHIhPT10aGlzLnNyYy5jaGFyQ29kZUF0KC0tZSkpcmV0dXJuIGUrMTtyZXR1cm4gZX0scy5wcm90b3R5cGUuZ2V0TGluZXM9ZnVuY3Rpb24oZSxyLHQsbil7dmFyIHMsaSxhLGwsYyx1LHAsaD1lO2lmKGU+PXIpcmV0dXJuXCJcIjtmb3IodT1uZXcgQXJyYXkoci1lKSxzPTA7aDxyO2grKyxzKyspe2ZvcihpPTAscD1sPXRoaXMuYk1hcmtzW2hdLGM9aCsxPHJ8fG4/dGhpcy5lTWFya3NbaF0rMTp0aGlzLmVNYXJrc1toXTtsPGMmJmk8dDspe2lmKGE9dGhpcy5zcmMuY2hhckNvZGVBdChsKSxvKGEpKTk9PT1hP2krPTQtKGkrdGhpcy5ic0NvdW50W2hdKSU0OmkrKztlbHNle2lmKCEobC1wPHRoaXMudFNoaWZ0W2hdKSlicmVhaztpKyt9bCsrfXVbc109aT50P25ldyBBcnJheShpLXQrMSkuam9pbihcIiBcIikrdGhpcy5zcmMuc2xpY2UobCxjKTp0aGlzLnNyYy5zbGljZShsLGMpfXJldHVybiB1LmpvaW4oXCJcIil9LHMucHJvdG90eXBlLlRva2VuPW4sci5leHBvcnRzPXN9LHtcIi4uL2NvbW1vbi91dGlsc1wiOjQsXCIuLi90b2tlblwiOjUxfV0sMjk6W2Z1bmN0aW9uKGUscix0KXt2YXIgbj1lKFwiLi4vY29tbW9uL3V0aWxzXCIpLmlzU3BhY2U7ZnVuY3Rpb24gbyhlLHIpe3ZhciB0PWUuYk1hcmtzW3JdK2UuYmxrSW5kZW50LG49ZS5lTWFya3Nbcl07cmV0dXJuIGUuc3JjLnN1YnN0cih0LG4tdCl9ZnVuY3Rpb24gcyhlKXt2YXIgcix0PVtdLG49MCxvPWUubGVuZ3RoLHM9MCxpPTAsYT0hMSxsPTA7Zm9yKHI9ZS5jaGFyQ29kZUF0KG4pO248bzspOTY9PT1yP2E/KGE9ITEsbD1uKTpzJTI9PTAmJihhPSEwLGw9bik6MTI0IT09cnx8cyUyIT0wfHxhfHwodC5wdXNoKGUuc3Vic3RyaW5nKGksbikpLGk9bisxKSw5Mj09PXI/cysrOnM9MCwrK249PT1vJiZhJiYoYT0hMSxuPWwrMSkscj1lLmNoYXJDb2RlQXQobik7cmV0dXJuIHQucHVzaChlLnN1YnN0cmluZyhpKSksdH1yLmV4cG9ydHM9ZnVuY3Rpb24oZSxyLHQsaSl7dmFyIGEsbCxjLHUscCxoLGYsZCxtLF8sZyxrO2lmKHIrMj50KXJldHVybiExO2lmKHA9cisxLGUuc0NvdW50W3BdPGUuYmxrSW5kZW50KXJldHVybiExO2lmKGUuc0NvdW50W3BdLWUuYmxrSW5kZW50Pj00KXJldHVybiExO2lmKChjPWUuYk1hcmtzW3BdK2UudFNoaWZ0W3BdKT49ZS5lTWFya3NbcF0pcmV0dXJuITE7aWYoMTI0IT09KGE9ZS5zcmMuY2hhckNvZGVBdChjKyspKSYmNDUhPT1hJiY1OCE9PWEpcmV0dXJuITE7Zm9yKDtjPGUuZU1hcmtzW3BdOyl7aWYoMTI0IT09KGE9ZS5zcmMuY2hhckNvZGVBdChjKSkmJjQ1IT09YSYmNTghPT1hJiYhbihhKSlyZXR1cm4hMTtjKyt9Zm9yKGw9byhlLHIrMSksaD1sLnNwbGl0KFwifFwiKSxtPVtdLHU9MDt1PGgubGVuZ3RoO3UrKyl7aWYoIShfPWhbdV0udHJpbSgpKSl7aWYoMD09PXV8fHU9PT1oLmxlbmd0aC0xKWNvbnRpbnVlO3JldHVybiExfWlmKCEvXjo/LSs6PyQvLnRlc3QoXykpcmV0dXJuITE7NTg9PT1fLmNoYXJDb2RlQXQoXy5sZW5ndGgtMSk/bS5wdXNoKDU4PT09Xy5jaGFyQ29kZUF0KDApP1wiY2VudGVyXCI6XCJyaWdodFwiKTo1OD09PV8uY2hhckNvZGVBdCgwKT9tLnB1c2goXCJsZWZ0XCIpOm0ucHVzaChcIlwiKX1pZigtMT09PShsPW8oZSxyKS50cmltKCkpLmluZGV4T2YoXCJ8XCIpKXJldHVybiExO2lmKGUuc0NvdW50W3JdLWUuYmxrSW5kZW50Pj00KXJldHVybiExO2lmKGg9cyhsLnJlcGxhY2UoL15cXHx8XFx8JC9nLFwiXCIpKSwoZj1oLmxlbmd0aCk+bS5sZW5ndGgpcmV0dXJuITE7aWYoaSlyZXR1cm4hMDtmb3IoKGQ9ZS5wdXNoKFwidGFibGVfb3BlblwiLFwidGFibGVcIiwxKSkubWFwPWc9W3IsMF0sKGQ9ZS5wdXNoKFwidGhlYWRfb3BlblwiLFwidGhlYWRcIiwxKSkubWFwPVtyLHIrMV0sKGQ9ZS5wdXNoKFwidHJfb3BlblwiLFwidHJcIiwxKSkubWFwPVtyLHIrMV0sdT0wO3U8aC5sZW5ndGg7dSsrKShkPWUucHVzaChcInRoX29wZW5cIixcInRoXCIsMSkpLm1hcD1bcixyKzFdLG1bdV0mJihkLmF0dHJzPVtbXCJzdHlsZVwiLFwidGV4dC1hbGlnbjpcIittW3VdXV0pLChkPWUucHVzaChcImlubGluZVwiLFwiXCIsMCkpLmNvbnRlbnQ9aFt1XS50cmltKCksZC5tYXA9W3IscisxXSxkLmNoaWxkcmVuPVtdLGQ9ZS5wdXNoKFwidGhfY2xvc2VcIixcInRoXCIsLTEpO2ZvcihkPWUucHVzaChcInRyX2Nsb3NlXCIsXCJ0clwiLC0xKSxkPWUucHVzaChcInRoZWFkX2Nsb3NlXCIsXCJ0aGVhZFwiLC0xKSwoZD1lLnB1c2goXCJ0Ym9keV9vcGVuXCIsXCJ0Ym9keVwiLDEpKS5tYXA9az1bcisyLDBdLHA9cisyO3A8dCYmIShlLnNDb3VudFtwXTxlLmJsa0luZGVudCkmJi0xIT09KGw9byhlLHApLnRyaW0oKSkuaW5kZXhPZihcInxcIikmJiEoZS5zQ291bnRbcF0tZS5ibGtJbmRlbnQ+PTQpO3ArKyl7Zm9yKGg9cyhsLnJlcGxhY2UoL15cXHx8XFx8JC9nLFwiXCIpKSxkPWUucHVzaChcInRyX29wZW5cIixcInRyXCIsMSksdT0wO3U8Zjt1KyspZD1lLnB1c2goXCJ0ZF9vcGVuXCIsXCJ0ZFwiLDEpLG1bdV0mJihkLmF0dHJzPVtbXCJzdHlsZVwiLFwidGV4dC1hbGlnbjpcIittW3VdXV0pLChkPWUucHVzaChcImlubGluZVwiLFwiXCIsMCkpLmNvbnRlbnQ9aFt1XT9oW3VdLnRyaW0oKTpcIlwiLGQuY2hpbGRyZW49W10sZD1lLnB1c2goXCJ0ZF9jbG9zZVwiLFwidGRcIiwtMSk7ZD1lLnB1c2goXCJ0cl9jbG9zZVwiLFwidHJcIiwtMSl9cmV0dXJuIGQ9ZS5wdXNoKFwidGJvZHlfY2xvc2VcIixcInRib2R5XCIsLTEpLGQ9ZS5wdXNoKFwidGFibGVfY2xvc2VcIixcInRhYmxlXCIsLTEpLGdbMV09a1sxXT1wLGUubGluZT1wLCEwfX0se1wiLi4vY29tbW9uL3V0aWxzXCI6NH1dLDMwOltmdW5jdGlvbihlLHIsdCl7ci5leHBvcnRzPWZ1bmN0aW9uKGUpe3ZhciByO2UuaW5saW5lTW9kZT8oKHI9bmV3IGUuVG9rZW4oXCJpbmxpbmVcIixcIlwiLDApKS5jb250ZW50PWUuc3JjLHIubWFwPVswLDFdLHIuY2hpbGRyZW49W10sZS50b2tlbnMucHVzaChyKSk6ZS5tZC5ibG9jay5wYXJzZShlLnNyYyxlLm1kLGUuZW52LGUudG9rZW5zKX19LHt9XSwzMTpbZnVuY3Rpb24oZSxyLHQpe3IuZXhwb3J0cz1mdW5jdGlvbihlKXt2YXIgcix0LG4sbz1lLnRva2Vucztmb3IodD0wLG49by5sZW5ndGg7dDxuO3QrKylcImlubGluZVwiPT09KHI9b1t0XSkudHlwZSYmZS5tZC5pbmxpbmUucGFyc2Uoci5jb250ZW50LGUubWQsZS5lbnYsci5jaGlsZHJlbil9fSx7fV0sMzI6W2Z1bmN0aW9uKGUscix0KXt2YXIgbj1lKFwiLi4vY29tbW9uL3V0aWxzXCIpLmFycmF5UmVwbGFjZUF0O2Z1bmN0aW9uIG8oZSl7cmV0dXJuL148XFwvYVxccyo+L2kudGVzdChlKX1yLmV4cG9ydHM9ZnVuY3Rpb24oZSl7dmFyIHIsdCxzLGksYSxsLGMsdSxwLGgsZixkLG0sXyxnLGssYix2LHk9ZS50b2tlbnM7aWYoZS5tZC5vcHRpb25zLmxpbmtpZnkpZm9yKHQ9MCxzPXkubGVuZ3RoO3Q8czt0KyspaWYoXCJpbmxpbmVcIj09PXlbdF0udHlwZSYmZS5tZC5saW5raWZ5LnByZXRlc3QoeVt0XS5jb250ZW50KSlmb3IoaT15W3RdLmNoaWxkcmVuLG09MCxyPWkubGVuZ3RoLTE7cj49MDtyLS0paWYoXCJsaW5rX2Nsb3NlXCIhPT0obD1pW3JdKS50eXBlKXtpZihcImh0bWxfaW5saW5lXCI9PT1sLnR5cGUmJih2PWwuY29udGVudCwvXjxhWz5cXHNdL2kudGVzdCh2KSYmbT4wJiZtLS0sbyhsLmNvbnRlbnQpJiZtKyspLCEobT4wKSYmXCJ0ZXh0XCI9PT1sLnR5cGUmJmUubWQubGlua2lmeS50ZXN0KGwuY29udGVudCkpe2ZvcihwPWwuY29udGVudCxiPWUubWQubGlua2lmeS5tYXRjaChwKSxjPVtdLGQ9bC5sZXZlbCxmPTAsdT0wO3U8Yi5sZW5ndGg7dSsrKV89Ylt1XS51cmwsZz1lLm1kLm5vcm1hbGl6ZUxpbmsoXyksZS5tZC52YWxpZGF0ZUxpbmsoZykmJihrPWJbdV0udGV4dCxrPWJbdV0uc2NoZW1hP1wibWFpbHRvOlwiIT09Ylt1XS5zY2hlbWF8fC9ebWFpbHRvOi9pLnRlc3Qoayk/ZS5tZC5ub3JtYWxpemVMaW5rVGV4dChrKTplLm1kLm5vcm1hbGl6ZUxpbmtUZXh0KFwibWFpbHRvOlwiK2spLnJlcGxhY2UoL15tYWlsdG86LyxcIlwiKTplLm1kLm5vcm1hbGl6ZUxpbmtUZXh0KFwiaHR0cDovL1wiK2spLnJlcGxhY2UoL15odHRwOlxcL1xcLy8sXCJcIiksKGg9Ylt1XS5pbmRleCk+ZiYmKChhPW5ldyBlLlRva2VuKFwidGV4dFwiLFwiXCIsMCkpLmNvbnRlbnQ9cC5zbGljZShmLGgpLGEubGV2ZWw9ZCxjLnB1c2goYSkpLChhPW5ldyBlLlRva2VuKFwibGlua19vcGVuXCIsXCJhXCIsMSkpLmF0dHJzPVtbXCJocmVmXCIsZ11dLGEubGV2ZWw9ZCsrLGEubWFya3VwPVwibGlua2lmeVwiLGEuaW5mbz1cImF1dG9cIixjLnB1c2goYSksKGE9bmV3IGUuVG9rZW4oXCJ0ZXh0XCIsXCJcIiwwKSkuY29udGVudD1rLGEubGV2ZWw9ZCxjLnB1c2goYSksKGE9bmV3IGUuVG9rZW4oXCJsaW5rX2Nsb3NlXCIsXCJhXCIsLTEpKS5sZXZlbD0tLWQsYS5tYXJrdXA9XCJsaW5raWZ5XCIsYS5pbmZvPVwiYXV0b1wiLGMucHVzaChhKSxmPWJbdV0ubGFzdEluZGV4KTtmPHAubGVuZ3RoJiYoKGE9bmV3IGUuVG9rZW4oXCJ0ZXh0XCIsXCJcIiwwKSkuY29udGVudD1wLnNsaWNlKGYpLGEubGV2ZWw9ZCxjLnB1c2goYSkpLHlbdF0uY2hpbGRyZW49aT1uKGkscixjKX19ZWxzZSBmb3Ioci0tO2lbcl0ubGV2ZWwhPT1sLmxldmVsJiZcImxpbmtfb3BlblwiIT09aVtyXS50eXBlOylyLS19fSx7XCIuLi9jb21tb24vdXRpbHNcIjo0fV0sMzM6W2Z1bmN0aW9uKGUscix0KXt2YXIgbj0vXFxyXFxuP3xcXG4vZyxvPS9cXDAvZztyLmV4cG9ydHM9ZnVuY3Rpb24oZSl7dmFyIHI7cj0ocj1lLnNyYy5yZXBsYWNlKG4sXCJcXG5cIikpLnJlcGxhY2UobyxcIu+/vVwiKSxlLnNyYz1yfX0se31dLDM0OltmdW5jdGlvbihlLHIsdCl7dmFyIG49L1xcKy18XFwuXFwufFxcP1xcP1xcP1xcP3whISEhfCwsfC0tLyxvPS9cXCgoY3x0bXxyfHApXFwpL2kscz0vXFwoKGN8dG18cnxwKVxcKS9naSxpPXtjOlwiwqlcIixyOlwiwq5cIixwOlwiwqdcIix0bTpcIuKEolwifTtmdW5jdGlvbiBhKGUscil7cmV0dXJuIGlbci50b0xvd2VyQ2FzZSgpXX1mdW5jdGlvbiBsKGUpe3ZhciByLHQsbj0wO2ZvcihyPWUubGVuZ3RoLTE7cj49MDtyLS0pXCJ0ZXh0XCIhPT0odD1lW3JdKS50eXBlfHxufHwodC5jb250ZW50PXQuY29udGVudC5yZXBsYWNlKHMsYSkpLFwibGlua19vcGVuXCI9PT10LnR5cGUmJlwiYXV0b1wiPT09dC5pbmZvJiZuLS0sXCJsaW5rX2Nsb3NlXCI9PT10LnR5cGUmJlwiYXV0b1wiPT09dC5pbmZvJiZuKyt9ZnVuY3Rpb24gYyhlKXt2YXIgcix0LG89MDtmb3Iocj1lLmxlbmd0aC0xO3I+PTA7ci0tKVwidGV4dFwiIT09KHQ9ZVtyXSkudHlwZXx8b3x8bi50ZXN0KHQuY29udGVudCkmJih0LmNvbnRlbnQ9dC5jb250ZW50LnJlcGxhY2UoL1xcKy0vZyxcIsKxXCIpLnJlcGxhY2UoL1xcLnsyLH0vZyxcIuKAplwiKS5yZXBsYWNlKC8oWz8hXSnigKYvZyxcIiQxLi5cIikucmVwbGFjZSgvKFs/IV0pezQsfS9nLFwiJDEkMSQxXCIpLnJlcGxhY2UoLyx7Mix9L2csXCIsXCIpLnJlcGxhY2UoLyhefFteLV0pLS0tKFteLV18JCkvZ20sXCIkMeKAlCQyXCIpLnJlcGxhY2UoLyhefFxccyktLShcXHN8JCkvZ20sXCIkMeKAkyQyXCIpLnJlcGxhY2UoLyhefFteLVxcc10pLS0oW14tXFxzXXwkKS9nbSxcIiQx4oCTJDJcIikpLFwibGlua19vcGVuXCI9PT10LnR5cGUmJlwiYXV0b1wiPT09dC5pbmZvJiZvLS0sXCJsaW5rX2Nsb3NlXCI9PT10LnR5cGUmJlwiYXV0b1wiPT09dC5pbmZvJiZvKyt9ci5leHBvcnRzPWZ1bmN0aW9uKGUpe3ZhciByO2lmKGUubWQub3B0aW9ucy50eXBvZ3JhcGhlcilmb3Iocj1lLnRva2Vucy5sZW5ndGgtMTtyPj0wO3ItLSlcImlubGluZVwiPT09ZS50b2tlbnNbcl0udHlwZSYmKG8udGVzdChlLnRva2Vuc1tyXS5jb250ZW50KSYmbChlLnRva2Vuc1tyXS5jaGlsZHJlbiksbi50ZXN0KGUudG9rZW5zW3JdLmNvbnRlbnQpJiZjKGUudG9rZW5zW3JdLmNoaWxkcmVuKSl9fSx7fV0sMzU6W2Z1bmN0aW9uKGUscix0KXt2YXIgbj1lKFwiLi4vY29tbW9uL3V0aWxzXCIpLmlzV2hpdGVTcGFjZSxvPWUoXCIuLi9jb21tb24vdXRpbHNcIikuaXNQdW5jdENoYXIscz1lKFwiLi4vY29tbW9uL3V0aWxzXCIpLmlzTWRBc2NpaVB1bmN0LGk9L1snXCJdLyxhPS9bJ1wiXS9nLGw9XCLigJlcIjtmdW5jdGlvbiBjKGUscix0KXtyZXR1cm4gZS5zdWJzdHIoMCxyKSt0K2Uuc3Vic3RyKHIrMSl9ZnVuY3Rpb24gdShlLHIpe3ZhciB0LGksdSxwLGgsZixkLG0sXyxnLGssYix2LHkseCxDLEEsdyxELEUscTtmb3IoRD1bXSx0PTA7dDxlLmxlbmd0aDt0Kyspe2ZvcihpPWVbdF0sZD1lW3RdLmxldmVsLEE9RC5sZW5ndGgtMTtBPj0wJiYhKERbQV0ubGV2ZWw8PWQpO0EtLSk7aWYoRC5sZW5ndGg9QSsxLFwidGV4dFwiPT09aS50eXBlKXt1PWkuY29udGVudCxoPTAsZj11Lmxlbmd0aDtlOmZvcig7aDxmJiYoYS5sYXN0SW5kZXg9aCxwPWEuZXhlYyh1KSk7KXtpZih4PUM9ITAsaD1wLmluZGV4KzEsdz1cIidcIj09PXBbMF0sXz0zMixwLmluZGV4LTE+PTApXz11LmNoYXJDb2RlQXQocC5pbmRleC0xKTtlbHNlIGZvcihBPXQtMTtBPj0wJiZcInNvZnRicmVha1wiIT09ZVtBXS50eXBlJiZcImhhcmRicmVha1wiIT09ZVtBXS50eXBlO0EtLSlpZihcInRleHRcIj09PWVbQV0udHlwZSl7Xz1lW0FdLmNvbnRlbnQuY2hhckNvZGVBdChlW0FdLmNvbnRlbnQubGVuZ3RoLTEpO2JyZWFrfWlmKGc9MzIsaDxmKWc9dS5jaGFyQ29kZUF0KGgpO2Vsc2UgZm9yKEE9dCsxO0E8ZS5sZW5ndGgmJlwic29mdGJyZWFrXCIhPT1lW0FdLnR5cGUmJlwiaGFyZGJyZWFrXCIhPT1lW0FdLnR5cGU7QSsrKWlmKFwidGV4dFwiPT09ZVtBXS50eXBlKXtnPWVbQV0uY29udGVudC5jaGFyQ29kZUF0KDApO2JyZWFrfWlmKGs9cyhfKXx8byhTdHJpbmcuZnJvbUNoYXJDb2RlKF8pKSxiPXMoZyl8fG8oU3RyaW5nLmZyb21DaGFyQ29kZShnKSksdj1uKF8pLCh5PW4oZykpP3g9ITE6YiYmKHZ8fGt8fCh4PSExKSksdj9DPSExOmsmJih5fHxifHwoQz0hMSkpLDM0PT09ZyYmJ1wiJz09PXBbMF0mJl8+PTQ4JiZfPD01NyYmKEM9eD0hMSkseCYmQyYmKHg9ITEsQz1iKSx4fHxDKXtpZihDKWZvcihBPUQubGVuZ3RoLTE7QT49MCYmKG09RFtBXSwhKERbQV0ubGV2ZWw8ZCkpO0EtLSlpZihtLnNpbmdsZT09PXcmJkRbQV0ubGV2ZWw9PT1kKXttPURbQV0sdz8oRT1yLm1kLm9wdGlvbnMucXVvdGVzWzJdLHE9ci5tZC5vcHRpb25zLnF1b3Rlc1szXSk6KEU9ci5tZC5vcHRpb25zLnF1b3Rlc1swXSxxPXIubWQub3B0aW9ucy5xdW90ZXNbMV0pLGkuY29udGVudD1jKGkuY29udGVudCxwLmluZGV4LHEpLGVbbS50b2tlbl0uY29udGVudD1jKGVbbS50b2tlbl0uY29udGVudCxtLnBvcyxFKSxoKz1xLmxlbmd0aC0xLG0udG9rZW49PT10JiYoaCs9RS5sZW5ndGgtMSksdT1pLmNvbnRlbnQsZj11Lmxlbmd0aCxELmxlbmd0aD1BO2NvbnRpbnVlIGV9eD9ELnB1c2goe3Rva2VuOnQscG9zOnAuaW5kZXgsc2luZ2xlOncsbGV2ZWw6ZH0pOkMmJncmJihpLmNvbnRlbnQ9YyhpLmNvbnRlbnQscC5pbmRleCxsKSl9ZWxzZSB3JiYoaS5jb250ZW50PWMoaS5jb250ZW50LHAuaW5kZXgsbCkpfX19fXIuZXhwb3J0cz1mdW5jdGlvbihlKXt2YXIgcjtpZihlLm1kLm9wdGlvbnMudHlwb2dyYXBoZXIpZm9yKHI9ZS50b2tlbnMubGVuZ3RoLTE7cj49MDtyLS0pXCJpbmxpbmVcIj09PWUudG9rZW5zW3JdLnR5cGUmJmkudGVzdChlLnRva2Vuc1tyXS5jb250ZW50KSYmdShlLnRva2Vuc1tyXS5jaGlsZHJlbixlKX19LHtcIi4uL2NvbW1vbi91dGlsc1wiOjR9XSwzNjpbZnVuY3Rpb24oZSxyLHQpe3ZhciBuPWUoXCIuLi90b2tlblwiKTtmdW5jdGlvbiBvKGUscix0KXt0aGlzLnNyYz1lLHRoaXMuZW52PXQsdGhpcy50b2tlbnM9W10sdGhpcy5pbmxpbmVNb2RlPSExLHRoaXMubWQ9cn1vLnByb3RvdHlwZS5Ub2tlbj1uLHIuZXhwb3J0cz1vfSx7XCIuLi90b2tlblwiOjUxfV0sMzc6W2Z1bmN0aW9uKGUscix0KXt2YXIgbj0vXjwoW2EtekEtWjAtOS4hIyQlJicqK1xcLz0/Xl9ge3x9fi1dK0BbYS16QS1aMC05XSg/OlthLXpBLVowLTktXXswLDYxfVthLXpBLVowLTldKT8oPzpcXC5bYS16QS1aMC05XSg/OlthLXpBLVowLTktXXswLDYxfVthLXpBLVowLTldKT8pKik+LyxvPS9ePChbYS16QS1aXVthLXpBLVowLTkrLlxcLV17MSwzMX0pOihbXjw+XFx4MDAtXFx4MjBdKik+LztyLmV4cG9ydHM9ZnVuY3Rpb24oZSxyKXt2YXIgdCxzLGksYSxsLGMsdT1lLnBvcztyZXR1cm4hKDYwIT09ZS5zcmMuY2hhckNvZGVBdCh1KXx8KHQ9ZS5zcmMuc2xpY2UodSkpLmluZGV4T2YoXCI+XCIpPDB8fChvLnRlc3QodCk/KHM9dC5tYXRjaChvKSxhPXNbMF0uc2xpY2UoMSwtMSksbD1lLm1kLm5vcm1hbGl6ZUxpbmsoYSksIWUubWQudmFsaWRhdGVMaW5rKGwpfHwocnx8KChjPWUucHVzaChcImxpbmtfb3BlblwiLFwiYVwiLDEpKS5hdHRycz1bW1wiaHJlZlwiLGxdXSxjLm1hcmt1cD1cImF1dG9saW5rXCIsYy5pbmZvPVwiYXV0b1wiLChjPWUucHVzaChcInRleHRcIixcIlwiLDApKS5jb250ZW50PWUubWQubm9ybWFsaXplTGlua1RleHQoYSksKGM9ZS5wdXNoKFwibGlua19jbG9zZVwiLFwiYVwiLC0xKSkubWFya3VwPVwiYXV0b2xpbmtcIixjLmluZm89XCJhdXRvXCIpLGUucG9zKz1zWzBdLmxlbmd0aCwwKSk6IW4udGVzdCh0KXx8KGk9dC5tYXRjaChuKSxhPWlbMF0uc2xpY2UoMSwtMSksbD1lLm1kLm5vcm1hbGl6ZUxpbmsoXCJtYWlsdG86XCIrYSksIWUubWQudmFsaWRhdGVMaW5rKGwpfHwocnx8KChjPWUucHVzaChcImxpbmtfb3BlblwiLFwiYVwiLDEpKS5hdHRycz1bW1wiaHJlZlwiLGxdXSxjLm1hcmt1cD1cImF1dG9saW5rXCIsYy5pbmZvPVwiYXV0b1wiLChjPWUucHVzaChcInRleHRcIixcIlwiLDApKS5jb250ZW50PWUubWQubm9ybWFsaXplTGlua1RleHQoYSksKGM9ZS5wdXNoKFwibGlua19jbG9zZVwiLFwiYVwiLC0xKSkubWFya3VwPVwiYXV0b2xpbmtcIixjLmluZm89XCJhdXRvXCIpLGUucG9zKz1pWzBdLmxlbmd0aCwwKSkpKX19LHt9XSwzODpbZnVuY3Rpb24oZSxyLHQpe3IuZXhwb3J0cz1mdW5jdGlvbihlLHIpe3ZhciB0LG4sbyxzLGksYSxsPWUucG9zLGM9ZS5zcmMuY2hhckNvZGVBdChsKTtpZig5NiE9PWMpcmV0dXJuITE7Zm9yKHQ9bCxsKyssbj1lLnBvc01heDtsPG4mJjk2PT09ZS5zcmMuY2hhckNvZGVBdChsKTspbCsrO2ZvcihvPWUuc3JjLnNsaWNlKHQsbCkscz1pPWw7LTEhPT0ocz1lLnNyYy5pbmRleE9mKFwiYFwiLGkpKTspe2ZvcihpPXMrMTtpPG4mJjk2PT09ZS5zcmMuY2hhckNvZGVBdChpKTspaSsrO2lmKGktcz09PW8ubGVuZ3RoKXJldHVybiByfHwoKGE9ZS5wdXNoKFwiY29kZV9pbmxpbmVcIixcImNvZGVcIiwwKSkubWFya3VwPW8sYS5jb250ZW50PWUuc3JjLnNsaWNlKGwscykucmVwbGFjZSgvXFxuL2csXCIgXCIpLnJlcGxhY2UoL14gKC4rKSAkLyxcIiQxXCIpKSxlLnBvcz1pLCEwfXJldHVybiByfHwoZS5wZW5kaW5nKz1vKSxlLnBvcys9by5sZW5ndGgsITB9fSx7fV0sMzk6W2Z1bmN0aW9uKGUscix0KXtmdW5jdGlvbiBuKGUscil7dmFyIHQsbixvLHMsaSxhLGwsYyx1PXt9LHA9ci5sZW5ndGg7Zm9yKHQ9MDt0PHA7dCsrKWlmKChvPXJbdF0pLmxlbmd0aD1vLmxlbmd0aHx8MCxvLmNsb3NlKXtmb3IodS5oYXNPd25Qcm9wZXJ0eShvLm1hcmtlcil8fCh1W28ubWFya2VyXT1bLTEsLTEsLTFdKSxpPXVbby5tYXJrZXJdW28ubGVuZ3RoJTNdLGE9LTEsbj10LW8uanVtcC0xO24+aTtuLT1zLmp1bXArMSlpZigocz1yW25dKS5tYXJrZXI9PT1vLm1hcmtlciYmKC0xPT09YSYmKGE9bikscy5vcGVuJiZzLmVuZDwwJiZzLmxldmVsPT09by5sZXZlbCYmKGw9ITEsKHMuY2xvc2V8fG8ub3BlbikmJihzLmxlbmd0aCtvLmxlbmd0aCklMz09MCYmKHMubGVuZ3RoJTM9PTAmJm8ubGVuZ3RoJTM9PTB8fChsPSEwKSksIWwpKSl7Yz1uPjAmJiFyW24tMV0ub3Blbj9yW24tMV0uanVtcCsxOjAsby5qdW1wPXQtbitjLG8ub3Blbj0hMSxzLmVuZD10LHMuanVtcD1jLHMuY2xvc2U9ITEsYT0tMTticmVha30tMSE9PWEmJih1W28ubWFya2VyXVsoby5sZW5ndGh8fDApJTNdPWEpfX1yLmV4cG9ydHM9ZnVuY3Rpb24oZSl7dmFyIHIsdD1lLnRva2Vuc19tZXRhLG89ZS50b2tlbnNfbWV0YS5sZW5ndGg7Zm9yKG4oMCxlLmRlbGltaXRlcnMpLHI9MDtyPG87cisrKXRbcl0mJnRbcl0uZGVsaW1pdGVycyYmbigwLHRbcl0uZGVsaW1pdGVycyl9fSx7fV0sNDA6W2Z1bmN0aW9uKGUscix0KXtmdW5jdGlvbiBuKGUscil7dmFyIHQsbixvLHMsaSxhLGw9ci5sZW5ndGg7Zm9yKHQ9bC0xO3Q+PTA7dC0tKTk1IT09KG49clt0XSkubWFya2VyJiY0MiE9PW4ubWFya2VyfHwtMSE9PW4uZW5kJiYobz1yW24uZW5kXSxhPXQ+MCYmclt0LTFdLmVuZD09PW4uZW5kKzEmJnJbdC0xXS50b2tlbj09PW4udG9rZW4tMSYmcltuLmVuZCsxXS50b2tlbj09PW8udG9rZW4rMSYmclt0LTFdLm1hcmtlcj09PW4ubWFya2VyLGk9U3RyaW5nLmZyb21DaGFyQ29kZShuLm1hcmtlciksKHM9ZS50b2tlbnNbbi50b2tlbl0pLnR5cGU9YT9cInN0cm9uZ19vcGVuXCI6XCJlbV9vcGVuXCIscy50YWc9YT9cInN0cm9uZ1wiOlwiZW1cIixzLm5lc3Rpbmc9MSxzLm1hcmt1cD1hP2kraTppLHMuY29udGVudD1cIlwiLChzPWUudG9rZW5zW28udG9rZW5dKS50eXBlPWE/XCJzdHJvbmdfY2xvc2VcIjpcImVtX2Nsb3NlXCIscy50YWc9YT9cInN0cm9uZ1wiOlwiZW1cIixzLm5lc3Rpbmc9LTEscy5tYXJrdXA9YT9pK2k6aSxzLmNvbnRlbnQ9XCJcIixhJiYoZS50b2tlbnNbclt0LTFdLnRva2VuXS5jb250ZW50PVwiXCIsZS50b2tlbnNbcltuLmVuZCsxXS50b2tlbl0uY29udGVudD1cIlwiLHQtLSkpfXIuZXhwb3J0cy50b2tlbml6ZT1mdW5jdGlvbihlLHIpe3ZhciB0LG4sbz1lLnBvcyxzPWUuc3JjLmNoYXJDb2RlQXQobyk7aWYocilyZXR1cm4hMTtpZig5NSE9PXMmJjQyIT09cylyZXR1cm4hMTtmb3Iobj1lLnNjYW5EZWxpbXMoZS5wb3MsNDI9PT1zKSx0PTA7dDxuLmxlbmd0aDt0KyspZS5wdXNoKFwidGV4dFwiLFwiXCIsMCkuY29udGVudD1TdHJpbmcuZnJvbUNoYXJDb2RlKHMpLGUuZGVsaW1pdGVycy5wdXNoKHttYXJrZXI6cyxsZW5ndGg6bi5sZW5ndGgsanVtcDp0LHRva2VuOmUudG9rZW5zLmxlbmd0aC0xLGVuZDotMSxvcGVuOm4uY2FuX29wZW4sY2xvc2U6bi5jYW5fY2xvc2V9KTtyZXR1cm4gZS5wb3MrPW4ubGVuZ3RoLCEwfSxyLmV4cG9ydHMucG9zdFByb2Nlc3M9ZnVuY3Rpb24oZSl7dmFyIHIsdD1lLnRva2Vuc19tZXRhLG89ZS50b2tlbnNfbWV0YS5sZW5ndGg7Zm9yKG4oZSxlLmRlbGltaXRlcnMpLHI9MDtyPG87cisrKXRbcl0mJnRbcl0uZGVsaW1pdGVycyYmbihlLHRbcl0uZGVsaW1pdGVycyl9fSx7fV0sNDE6W2Z1bmN0aW9uKGUscix0KXt2YXIgbj1lKFwiLi4vY29tbW9uL2VudGl0aWVzXCIpLG89ZShcIi4uL2NvbW1vbi91dGlsc1wiKS5oYXMscz1lKFwiLi4vY29tbW9uL3V0aWxzXCIpLmlzVmFsaWRFbnRpdHlDb2RlLGk9ZShcIi4uL2NvbW1vbi91dGlsc1wiKS5mcm9tQ29kZVBvaW50LGE9L14mIygoPzp4W2EtZjAtOV17MSw2fXxbMC05XXsxLDd9KSk7L2ksbD0vXiYoW2Etel1bYS16MC05XXsxLDMxfSk7L2k7ci5leHBvcnRzPWZ1bmN0aW9uKGUscil7dmFyIHQsYyx1PWUucG9zLHA9ZS5wb3NNYXg7aWYoMzghPT1lLnNyYy5jaGFyQ29kZUF0KHUpKXJldHVybiExO2lmKHUrMTxwKWlmKDM1PT09ZS5zcmMuY2hhckNvZGVBdCh1KzEpKXtpZihjPWUuc3JjLnNsaWNlKHUpLm1hdGNoKGEpKXJldHVybiByfHwodD1cInhcIj09PWNbMV1bMF0udG9Mb3dlckNhc2UoKT9wYXJzZUludChjWzFdLnNsaWNlKDEpLDE2KTpwYXJzZUludChjWzFdLDEwKSxlLnBlbmRpbmcrPXModCk/aSh0KTppKDY1NTMzKSksZS5wb3MrPWNbMF0ubGVuZ3RoLCEwfWVsc2UgaWYoKGM9ZS5zcmMuc2xpY2UodSkubWF0Y2gobCkpJiZvKG4sY1sxXSkpcmV0dXJuIHJ8fChlLnBlbmRpbmcrPW5bY1sxXV0pLGUucG9zKz1jWzBdLmxlbmd0aCwhMDtyZXR1cm4gcnx8KGUucGVuZGluZys9XCImXCIpLGUucG9zKyssITB9fSx7XCIuLi9jb21tb24vZW50aXRpZXNcIjoxLFwiLi4vY29tbW9uL3V0aWxzXCI6NH1dLDQyOltmdW5jdGlvbihlLHIsdCl7Zm9yKHZhciBuPWUoXCIuLi9jb21tb24vdXRpbHNcIikuaXNTcGFjZSxvPVtdLHM9MDtzPDI1NjtzKyspby5wdXNoKDApO1wiXFxcXCFcXFwiIyQlJicoKSorLC4vOjs8PT4/QFtdXl9ge3x9fi1cIi5zcGxpdChcIlwiKS5mb3JFYWNoKGZ1bmN0aW9uKGUpe29bZS5jaGFyQ29kZUF0KDApXT0xfSksci5leHBvcnRzPWZ1bmN0aW9uKGUscil7dmFyIHQscz1lLnBvcyxpPWUucG9zTWF4O2lmKDkyIT09ZS5zcmMuY2hhckNvZGVBdChzKSlyZXR1cm4hMTtpZigrK3M8aSl7aWYoKHQ9ZS5zcmMuY2hhckNvZGVBdChzKSk8MjU2JiYwIT09b1t0XSlyZXR1cm4gcnx8KGUucGVuZGluZys9ZS5zcmNbc10pLGUucG9zKz0yLCEwO2lmKDEwPT09dCl7Zm9yKHJ8fGUucHVzaChcImhhcmRicmVha1wiLFwiYnJcIiwwKSxzKys7czxpJiYodD1lLnNyYy5jaGFyQ29kZUF0KHMpLG4odCkpOylzKys7cmV0dXJuIGUucG9zPXMsITB9fXJldHVybiByfHwoZS5wZW5kaW5nKz1cIlxcXFxcIiksZS5wb3MrKywhMH19LHtcIi4uL2NvbW1vbi91dGlsc1wiOjR9XSw0MzpbZnVuY3Rpb24oZSxyLHQpe3ZhciBuPWUoXCIuLi9jb21tb24vaHRtbF9yZVwiKS5IVE1MX1RBR19SRTtyLmV4cG9ydHM9ZnVuY3Rpb24oZSxyKXt2YXIgdCxvLHMsaT1lLnBvcztyZXR1cm4hKCFlLm1kLm9wdGlvbnMuaHRtbHx8KHM9ZS5wb3NNYXgsNjAhPT1lLnNyYy5jaGFyQ29kZUF0KGkpfHxpKzI+PXN8fDMzIT09KHQ9ZS5zcmMuY2hhckNvZGVBdChpKzEpKSYmNjMhPT10JiY0NyE9PXQmJiFmdW5jdGlvbihlKXt2YXIgcj0zMnxlO3JldHVybiByPj05NyYmcjw9MTIyfSh0KXx8IShvPWUuc3JjLnNsaWNlKGkpLm1hdGNoKG4pKXx8KHJ8fChlLnB1c2goXCJodG1sX2lubGluZVwiLFwiXCIsMCkuY29udGVudD1lLnNyYy5zbGljZShpLGkrb1swXS5sZW5ndGgpKSxlLnBvcys9b1swXS5sZW5ndGgsMCkpKX19LHtcIi4uL2NvbW1vbi9odG1sX3JlXCI6M31dLDQ0OltmdW5jdGlvbihlLHIsdCl7dmFyIG49ZShcIi4uL2NvbW1vbi91dGlsc1wiKS5ub3JtYWxpemVSZWZlcmVuY2Usbz1lKFwiLi4vY29tbW9uL3V0aWxzXCIpLmlzU3BhY2U7ci5leHBvcnRzPWZ1bmN0aW9uKGUscil7dmFyIHQscyxpLGEsbCxjLHUscCxoLGYsZCxtLF8sZz1cIlwiLGs9ZS5wb3MsYj1lLnBvc01heDtpZigzMyE9PWUuc3JjLmNoYXJDb2RlQXQoZS5wb3MpKXJldHVybiExO2lmKDkxIT09ZS5zcmMuY2hhckNvZGVBdChlLnBvcysxKSlyZXR1cm4hMTtpZihjPWUucG9zKzIsKGw9ZS5tZC5oZWxwZXJzLnBhcnNlTGlua0xhYmVsKGUsZS5wb3MrMSwhMSkpPDApcmV0dXJuITE7aWYoKHU9bCsxKTxiJiY0MD09PWUuc3JjLmNoYXJDb2RlQXQodSkpe2Zvcih1Kys7dTxiJiYocz1lLnNyYy5jaGFyQ29kZUF0KHUpLG8ocyl8fDEwPT09cyk7dSsrKTtpZih1Pj1iKXJldHVybiExO2ZvcihfPXUsKGg9ZS5tZC5oZWxwZXJzLnBhcnNlTGlua0Rlc3RpbmF0aW9uKGUuc3JjLHUsZS5wb3NNYXgpKS5vayYmKGc9ZS5tZC5ub3JtYWxpemVMaW5rKGguc3RyKSxlLm1kLnZhbGlkYXRlTGluayhnKT91PWgucG9zOmc9XCJcIiksXz11O3U8YiYmKHM9ZS5zcmMuY2hhckNvZGVBdCh1KSxvKHMpfHwxMD09PXMpO3UrKyk7aWYoaD1lLm1kLmhlbHBlcnMucGFyc2VMaW5rVGl0bGUoZS5zcmMsdSxlLnBvc01heCksdTxiJiZfIT09dSYmaC5vaylmb3IoZj1oLnN0cix1PWgucG9zO3U8YiYmKHM9ZS5zcmMuY2hhckNvZGVBdCh1KSxvKHMpfHwxMD09PXMpO3UrKyk7ZWxzZSBmPVwiXCI7aWYodT49Ynx8NDEhPT1lLnNyYy5jaGFyQ29kZUF0KHUpKXJldHVybiBlLnBvcz1rLCExO3UrK31lbHNle2lmKHZvaWQgMD09PWUuZW52LnJlZmVyZW5jZXMpcmV0dXJuITE7aWYodTxiJiY5MT09PWUuc3JjLmNoYXJDb2RlQXQodSk/KF89dSsxLCh1PWUubWQuaGVscGVycy5wYXJzZUxpbmtMYWJlbChlLHUpKT49MD9hPWUuc3JjLnNsaWNlKF8sdSsrKTp1PWwrMSk6dT1sKzEsYXx8KGE9ZS5zcmMuc2xpY2UoYyxsKSksIShwPWUuZW52LnJlZmVyZW5jZXNbbihhKV0pKXJldHVybiBlLnBvcz1rLCExO2c9cC5ocmVmLGY9cC50aXRsZX1yZXR1cm4gcnx8KGk9ZS5zcmMuc2xpY2UoYyxsKSxlLm1kLmlubGluZS5wYXJzZShpLGUubWQsZS5lbnYsbT1bXSksKGQ9ZS5wdXNoKFwiaW1hZ2VcIixcImltZ1wiLDApKS5hdHRycz10PVtbXCJzcmNcIixnXSxbXCJhbHRcIixcIlwiXV0sZC5jaGlsZHJlbj1tLGQuY29udGVudD1pLGYmJnQucHVzaChbXCJ0aXRsZVwiLGZdKSksZS5wb3M9dSxlLnBvc01heD1iLCEwfX0se1wiLi4vY29tbW9uL3V0aWxzXCI6NH1dLDQ1OltmdW5jdGlvbihlLHIsdCl7dmFyIG49ZShcIi4uL2NvbW1vbi91dGlsc1wiKS5ub3JtYWxpemVSZWZlcmVuY2Usbz1lKFwiLi4vY29tbW9uL3V0aWxzXCIpLmlzU3BhY2U7ci5leHBvcnRzPWZ1bmN0aW9uKGUscil7dmFyIHQscyxpLGEsbCxjLHUscCxoLGY9XCJcIixkPWUucG9zLG09ZS5wb3NNYXgsXz1lLnBvcyxnPSEwO2lmKDkxIT09ZS5zcmMuY2hhckNvZGVBdChlLnBvcykpcmV0dXJuITE7aWYobD1lLnBvcysxLChhPWUubWQuaGVscGVycy5wYXJzZUxpbmtMYWJlbChlLGUucG9zLCEwKSk8MClyZXR1cm4hMTtpZigoYz1hKzEpPG0mJjQwPT09ZS5zcmMuY2hhckNvZGVBdChjKSl7Zm9yKGc9ITEsYysrO2M8bSYmKHM9ZS5zcmMuY2hhckNvZGVBdChjKSxvKHMpfHwxMD09PXMpO2MrKyk7aWYoYz49bSlyZXR1cm4hMTtmb3IoXz1jLCh1PWUubWQuaGVscGVycy5wYXJzZUxpbmtEZXN0aW5hdGlvbihlLnNyYyxjLGUucG9zTWF4KSkub2smJihmPWUubWQubm9ybWFsaXplTGluayh1LnN0ciksZS5tZC52YWxpZGF0ZUxpbmsoZik/Yz11LnBvczpmPVwiXCIpLF89YztjPG0mJihzPWUuc3JjLmNoYXJDb2RlQXQoYyksbyhzKXx8MTA9PT1zKTtjKyspO2lmKHU9ZS5tZC5oZWxwZXJzLnBhcnNlTGlua1RpdGxlKGUuc3JjLGMsZS5wb3NNYXgpLGM8bSYmXyE9PWMmJnUub2spZm9yKGg9dS5zdHIsYz11LnBvcztjPG0mJihzPWUuc3JjLmNoYXJDb2RlQXQoYyksbyhzKXx8MTA9PT1zKTtjKyspO2Vsc2UgaD1cIlwiOyhjPj1tfHw0MSE9PWUuc3JjLmNoYXJDb2RlQXQoYykpJiYoZz0hMCksYysrfWlmKGcpe2lmKHZvaWQgMD09PWUuZW52LnJlZmVyZW5jZXMpcmV0dXJuITE7aWYoYzxtJiY5MT09PWUuc3JjLmNoYXJDb2RlQXQoYyk/KF89YysxLChjPWUubWQuaGVscGVycy5wYXJzZUxpbmtMYWJlbChlLGMpKT49MD9pPWUuc3JjLnNsaWNlKF8sYysrKTpjPWErMSk6Yz1hKzEsaXx8KGk9ZS5zcmMuc2xpY2UobCxhKSksIShwPWUuZW52LnJlZmVyZW5jZXNbbihpKV0pKXJldHVybiBlLnBvcz1kLCExO2Y9cC5ocmVmLGg9cC50aXRsZX1yZXR1cm4gcnx8KGUucG9zPWwsZS5wb3NNYXg9YSxlLnB1c2goXCJsaW5rX29wZW5cIixcImFcIiwxKS5hdHRycz10PVtbXCJocmVmXCIsZl1dLGgmJnQucHVzaChbXCJ0aXRsZVwiLGhdKSxlLm1kLmlubGluZS50b2tlbml6ZShlKSxlLnB1c2goXCJsaW5rX2Nsb3NlXCIsXCJhXCIsLTEpKSxlLnBvcz1jLGUucG9zTWF4PW0sITB9fSx7XCIuLi9jb21tb24vdXRpbHNcIjo0fV0sNDY6W2Z1bmN0aW9uKGUscix0KXt2YXIgbj1lKFwiLi4vY29tbW9uL3V0aWxzXCIpLmlzU3BhY2U7ci5leHBvcnRzPWZ1bmN0aW9uKGUscil7dmFyIHQsbyxzPWUucG9zO2lmKDEwIT09ZS5zcmMuY2hhckNvZGVBdChzKSlyZXR1cm4hMTtmb3IodD1lLnBlbmRpbmcubGVuZ3RoLTEsbz1lLnBvc01heCxyfHwodD49MCYmMzI9PT1lLnBlbmRpbmcuY2hhckNvZGVBdCh0KT90Pj0xJiYzMj09PWUucGVuZGluZy5jaGFyQ29kZUF0KHQtMSk/KGUucGVuZGluZz1lLnBlbmRpbmcucmVwbGFjZSgvICskLyxcIlwiKSxlLnB1c2goXCJoYXJkYnJlYWtcIixcImJyXCIsMCkpOihlLnBlbmRpbmc9ZS5wZW5kaW5nLnNsaWNlKDAsLTEpLGUucHVzaChcInNvZnRicmVha1wiLFwiYnJcIiwwKSk6ZS5wdXNoKFwic29mdGJyZWFrXCIsXCJiclwiLDApKSxzKys7czxvJiZuKGUuc3JjLmNoYXJDb2RlQXQocykpOylzKys7cmV0dXJuIGUucG9zPXMsITB9fSx7XCIuLi9jb21tb24vdXRpbHNcIjo0fV0sNDc6W2Z1bmN0aW9uKGUscix0KXt2YXIgbj1lKFwiLi4vdG9rZW5cIiksbz1lKFwiLi4vY29tbW9uL3V0aWxzXCIpLmlzV2hpdGVTcGFjZSxzPWUoXCIuLi9jb21tb24vdXRpbHNcIikuaXNQdW5jdENoYXIsaT1lKFwiLi4vY29tbW9uL3V0aWxzXCIpLmlzTWRBc2NpaVB1bmN0O2Z1bmN0aW9uIGEoZSxyLHQsbil7dGhpcy5zcmM9ZSx0aGlzLmVudj10LHRoaXMubWQ9cix0aGlzLnRva2Vucz1uLHRoaXMudG9rZW5zX21ldGE9QXJyYXkobi5sZW5ndGgpLHRoaXMucG9zPTAsdGhpcy5wb3NNYXg9dGhpcy5zcmMubGVuZ3RoLHRoaXMubGV2ZWw9MCx0aGlzLnBlbmRpbmc9XCJcIix0aGlzLnBlbmRpbmdMZXZlbD0wLHRoaXMuY2FjaGU9e30sdGhpcy5kZWxpbWl0ZXJzPVtdLHRoaXMuX3ByZXZfZGVsaW1pdGVycz1bXX1hLnByb3RvdHlwZS5wdXNoUGVuZGluZz1mdW5jdGlvbigpe3ZhciBlPW5ldyBuKFwidGV4dFwiLFwiXCIsMCk7cmV0dXJuIGUuY29udGVudD10aGlzLnBlbmRpbmcsZS5sZXZlbD10aGlzLnBlbmRpbmdMZXZlbCx0aGlzLnRva2Vucy5wdXNoKGUpLHRoaXMucGVuZGluZz1cIlwiLGV9LGEucHJvdG90eXBlLnB1c2g9ZnVuY3Rpb24oZSxyLHQpe3RoaXMucGVuZGluZyYmdGhpcy5wdXNoUGVuZGluZygpO3ZhciBvPW5ldyBuKGUscix0KSxzPW51bGw7cmV0dXJuIHQ8MCYmKHRoaXMubGV2ZWwtLSx0aGlzLmRlbGltaXRlcnM9dGhpcy5fcHJldl9kZWxpbWl0ZXJzLnBvcCgpKSxvLmxldmVsPXRoaXMubGV2ZWwsdD4wJiYodGhpcy5sZXZlbCsrLHRoaXMuX3ByZXZfZGVsaW1pdGVycy5wdXNoKHRoaXMuZGVsaW1pdGVycyksdGhpcy5kZWxpbWl0ZXJzPVtdLHM9e2RlbGltaXRlcnM6dGhpcy5kZWxpbWl0ZXJzfSksdGhpcy5wZW5kaW5nTGV2ZWw9dGhpcy5sZXZlbCx0aGlzLnRva2Vucy5wdXNoKG8pLHRoaXMudG9rZW5zX21ldGEucHVzaChzKSxvfSxhLnByb3RvdHlwZS5zY2FuRGVsaW1zPWZ1bmN0aW9uKGUscil7dmFyIHQsbixhLGwsYyx1LHAsaCxmLGQ9ZSxtPSEwLF89ITAsZz10aGlzLnBvc01heCxrPXRoaXMuc3JjLmNoYXJDb2RlQXQoZSk7Zm9yKHQ9ZT4wP3RoaXMuc3JjLmNoYXJDb2RlQXQoZS0xKTozMjtkPGcmJnRoaXMuc3JjLmNoYXJDb2RlQXQoZCk9PT1rOylkKys7cmV0dXJuIGE9ZC1lLG49ZDxnP3RoaXMuc3JjLmNoYXJDb2RlQXQoZCk6MzIscD1pKHQpfHxzKFN0cmluZy5mcm9tQ2hhckNvZGUodCkpLGY9aShuKXx8cyhTdHJpbmcuZnJvbUNoYXJDb2RlKG4pKSx1PW8odCksKGg9byhuKSk/bT0hMTpmJiYodXx8cHx8KG09ITEpKSx1P189ITE6cCYmKGh8fGZ8fChfPSExKSkscj8obD1tLGM9Xyk6KGw9bSYmKCFffHxwKSxjPV8mJighbXx8ZikpLHtjYW5fb3BlbjpsLGNhbl9jbG9zZTpjLGxlbmd0aDphfX0sYS5wcm90b3R5cGUuVG9rZW49bixyLmV4cG9ydHM9YX0se1wiLi4vY29tbW9uL3V0aWxzXCI6NCxcIi4uL3Rva2VuXCI6NTF9XSw0ODpbZnVuY3Rpb24oZSxyLHQpe2Z1bmN0aW9uIG4oZSxyKXt2YXIgdCxuLG8scyxpLGE9W10sbD1yLmxlbmd0aDtmb3IodD0wO3Q8bDt0KyspMTI2PT09KG89clt0XSkubWFya2VyJiYtMSE9PW8uZW5kJiYocz1yW28uZW5kXSwoaT1lLnRva2Vuc1tvLnRva2VuXSkudHlwZT1cInNfb3BlblwiLGkudGFnPVwic1wiLGkubmVzdGluZz0xLGkubWFya3VwPVwifn5cIixpLmNvbnRlbnQ9XCJcIiwoaT1lLnRva2Vuc1tzLnRva2VuXSkudHlwZT1cInNfY2xvc2VcIixpLnRhZz1cInNcIixpLm5lc3Rpbmc9LTEsaS5tYXJrdXA9XCJ+flwiLGkuY29udGVudD1cIlwiLFwidGV4dFwiPT09ZS50b2tlbnNbcy50b2tlbi0xXS50eXBlJiZcIn5cIj09PWUudG9rZW5zW3MudG9rZW4tMV0uY29udGVudCYmYS5wdXNoKHMudG9rZW4tMSkpO2Zvcig7YS5sZW5ndGg7KXtmb3IodD1hLnBvcCgpLG49dCsxO248ZS50b2tlbnMubGVuZ3RoJiZcInNfY2xvc2VcIj09PWUudG9rZW5zW25dLnR5cGU7KW4rKzt0IT09LS1uJiYoaT1lLnRva2Vuc1tuXSxlLnRva2Vuc1tuXT1lLnRva2Vuc1t0XSxlLnRva2Vuc1t0XT1pKX19ci5leHBvcnRzLnRva2VuaXplPWZ1bmN0aW9uKGUscil7dmFyIHQsbixvLHMsaT1lLnBvcyxhPWUuc3JjLmNoYXJDb2RlQXQoaSk7aWYocilyZXR1cm4hMTtpZigxMjYhPT1hKXJldHVybiExO2lmKG49ZS5zY2FuRGVsaW1zKGUucG9zLCEwKSxvPW4ubGVuZ3RoLHM9U3RyaW5nLmZyb21DaGFyQ29kZShhKSxvPDIpcmV0dXJuITE7Zm9yKG8lMiYmKGUucHVzaChcInRleHRcIixcIlwiLDApLmNvbnRlbnQ9cyxvLS0pLHQ9MDt0PG87dCs9MillLnB1c2goXCJ0ZXh0XCIsXCJcIiwwKS5jb250ZW50PXMrcyxlLmRlbGltaXRlcnMucHVzaCh7bWFya2VyOmEsbGVuZ3RoOjAsanVtcDp0LHRva2VuOmUudG9rZW5zLmxlbmd0aC0xLGVuZDotMSxvcGVuOm4uY2FuX29wZW4sY2xvc2U6bi5jYW5fY2xvc2V9KTtyZXR1cm4gZS5wb3MrPW4ubGVuZ3RoLCEwfSxyLmV4cG9ydHMucG9zdFByb2Nlc3M9ZnVuY3Rpb24oZSl7dmFyIHIsdD1lLnRva2Vuc19tZXRhLG89ZS50b2tlbnNfbWV0YS5sZW5ndGg7Zm9yKG4oZSxlLmRlbGltaXRlcnMpLHI9MDtyPG87cisrKXRbcl0mJnRbcl0uZGVsaW1pdGVycyYmbihlLHRbcl0uZGVsaW1pdGVycyl9fSx7fV0sNDk6W2Z1bmN0aW9uKGUscix0KXtmdW5jdGlvbiBuKGUpe3N3aXRjaChlKXtjYXNlIDEwOmNhc2UgMzM6Y2FzZSAzNTpjYXNlIDM2OmNhc2UgMzc6Y2FzZSAzODpjYXNlIDQyOmNhc2UgNDM6Y2FzZSA0NTpjYXNlIDU4OmNhc2UgNjA6Y2FzZSA2MTpjYXNlIDYyOmNhc2UgNjQ6Y2FzZSA5MTpjYXNlIDkyOmNhc2UgOTM6Y2FzZSA5NDpjYXNlIDk1OmNhc2UgOTY6Y2FzZSAxMjM6Y2FzZSAxMjU6Y2FzZSAxMjY6cmV0dXJuITA7ZGVmYXVsdDpyZXR1cm4hMX19ci5leHBvcnRzPWZ1bmN0aW9uKGUscil7Zm9yKHZhciB0PWUucG9zO3Q8ZS5wb3NNYXgmJiFuKGUuc3JjLmNoYXJDb2RlQXQodCkpOyl0Kys7cmV0dXJuIHQhPT1lLnBvcyYmKHJ8fChlLnBlbmRpbmcrPWUuc3JjLnNsaWNlKGUucG9zLHQpKSxlLnBvcz10LCEwKX19LHt9XSw1MDpbZnVuY3Rpb24oZSxyLHQpe3IuZXhwb3J0cz1mdW5jdGlvbihlKXt2YXIgcix0LG49MCxvPWUudG9rZW5zLHM9ZS50b2tlbnMubGVuZ3RoO2ZvcihyPXQ9MDtyPHM7cisrKW9bcl0ubmVzdGluZzwwJiZuLS0sb1tyXS5sZXZlbD1uLG9bcl0ubmVzdGluZz4wJiZuKyssXCJ0ZXh0XCI9PT1vW3JdLnR5cGUmJnIrMTxzJiZcInRleHRcIj09PW9bcisxXS50eXBlP29bcisxXS5jb250ZW50PW9bcl0uY29udGVudCtvW3IrMV0uY29udGVudDoociE9PXQmJihvW3RdPW9bcl0pLHQrKyk7ciE9PXQmJihvLmxlbmd0aD10KX19LHt9XSw1MTpbZnVuY3Rpb24oZSxyLHQpe2Z1bmN0aW9uIG4oZSxyLHQpe3RoaXMudHlwZT1lLHRoaXMudGFnPXIsdGhpcy5hdHRycz1udWxsLHRoaXMubWFwPW51bGwsdGhpcy5uZXN0aW5nPXQsdGhpcy5sZXZlbD0wLHRoaXMuY2hpbGRyZW49bnVsbCx0aGlzLmNvbnRlbnQ9XCJcIix0aGlzLm1hcmt1cD1cIlwiLHRoaXMuaW5mbz1cIlwiLHRoaXMubWV0YT1udWxsLHRoaXMuYmxvY2s9ITEsdGhpcy5oaWRkZW49ITF9bi5wcm90b3R5cGUuYXR0ckluZGV4PWZ1bmN0aW9uKGUpe3ZhciByLHQsbjtpZighdGhpcy5hdHRycylyZXR1cm4tMTtmb3Iocj10aGlzLmF0dHJzLHQ9MCxuPXIubGVuZ3RoO3Q8bjt0KyspaWYoclt0XVswXT09PWUpcmV0dXJuIHQ7cmV0dXJuLTF9LG4ucHJvdG90eXBlLmF0dHJQdXNoPWZ1bmN0aW9uKGUpe3RoaXMuYXR0cnM/dGhpcy5hdHRycy5wdXNoKGUpOnRoaXMuYXR0cnM9W2VdfSxuLnByb3RvdHlwZS5hdHRyU2V0PWZ1bmN0aW9uKGUscil7dmFyIHQ9dGhpcy5hdHRySW5kZXgoZSksbj1bZSxyXTt0PDA/dGhpcy5hdHRyUHVzaChuKTp0aGlzLmF0dHJzW3RdPW59LG4ucHJvdG90eXBlLmF0dHJHZXQ9ZnVuY3Rpb24oZSl7dmFyIHI9dGhpcy5hdHRySW5kZXgoZSksdD1udWxsO3JldHVybiByPj0wJiYodD10aGlzLmF0dHJzW3JdWzFdKSx0fSxuLnByb3RvdHlwZS5hdHRySm9pbj1mdW5jdGlvbihlLHIpe3ZhciB0PXRoaXMuYXR0ckluZGV4KGUpO3Q8MD90aGlzLmF0dHJQdXNoKFtlLHJdKTp0aGlzLmF0dHJzW3RdWzFdPXRoaXMuYXR0cnNbdF1bMV0rXCIgXCIrcn0sci5leHBvcnRzPW59LHt9XSw1MjpbZnVuY3Rpb24oZSxyLHQpe3IuZXhwb3J0cz17QWFjdXRlOlwiw4FcIixhYWN1dGU6XCLDoVwiLEFicmV2ZTpcIsSCXCIsYWJyZXZlOlwixINcIixhYzpcIuKIvlwiLGFjZDpcIuKIv1wiLGFjRTpcIuKIvsyzXCIsQWNpcmM6XCLDglwiLGFjaXJjOlwiw6JcIixhY3V0ZTpcIsK0XCIsQWN5Olwi0JBcIixhY3k6XCLQsFwiLEFFbGlnOlwiw4ZcIixhZWxpZzpcIsOmXCIsYWY6XCLigaFcIixBZnI6XCLwnZSEXCIsYWZyOlwi8J2UnlwiLEFncmF2ZTpcIsOAXCIsYWdyYXZlOlwiw6BcIixhbGVmc3ltOlwi4oS1XCIsYWxlcGg6XCLihLVcIixBbHBoYTpcIs6RXCIsYWxwaGE6XCLOsVwiLEFtYWNyOlwixIBcIixhbWFjcjpcIsSBXCIsYW1hbGc6XCLiqL9cIixhbXA6XCImXCIsQU1QOlwiJlwiLGFuZGFuZDpcIuKplVwiLEFuZDpcIuKpk1wiLGFuZDpcIuKIp1wiLGFuZGQ6XCLiqZxcIixhbmRzbG9wZTpcIuKpmFwiLGFuZHY6XCLiqZpcIixhbmc6XCLiiKBcIixhbmdlOlwi4qakXCIsYW5nbGU6XCLiiKBcIixhbmdtc2RhYTpcIuKmqFwiLGFuZ21zZGFiOlwi4qapXCIsYW5nbXNkYWM6XCLipqpcIixhbmdtc2RhZDpcIuKmq1wiLGFuZ21zZGFlOlwi4qasXCIsYW5nbXNkYWY6XCLipq1cIixhbmdtc2RhZzpcIuKmrlwiLGFuZ21zZGFoOlwi4qavXCIsYW5nbXNkOlwi4oihXCIsYW5ncnQ6XCLiiJ9cIixhbmdydHZiOlwi4oq+XCIsYW5ncnR2YmQ6XCLipp1cIixhbmdzcGg6XCLiiKJcIixhbmdzdDpcIsOFXCIsYW5nemFycjpcIuKNvFwiLEFvZ29uOlwixIRcIixhb2dvbjpcIsSFXCIsQW9wZjpcIvCdlLhcIixhb3BmOlwi8J2VklwiLGFwYWNpcjpcIuKpr1wiLGFwOlwi4omIXCIsYXBFOlwi4qmwXCIsYXBlOlwi4omKXCIsYXBpZDpcIuKJi1wiLGFwb3M6XCInXCIsQXBwbHlGdW5jdGlvbjpcIuKBoVwiLGFwcHJveDpcIuKJiFwiLGFwcHJveGVxOlwi4omKXCIsQXJpbmc6XCLDhVwiLGFyaW5nOlwiw6VcIixBc2NyOlwi8J2SnFwiLGFzY3I6XCLwnZK2XCIsQXNzaWduOlwi4omUXCIsYXN0OlwiKlwiLGFzeW1wOlwi4omIXCIsYXN5bXBlcTpcIuKJjVwiLEF0aWxkZTpcIsODXCIsYXRpbGRlOlwiw6NcIixBdW1sOlwiw4RcIixhdW1sOlwiw6RcIixhd2NvbmludDpcIuKIs1wiLGF3aW50Olwi4qiRXCIsYmFja2Nvbmc6XCLiiYxcIixiYWNrZXBzaWxvbjpcIs+2XCIsYmFja3ByaW1lOlwi4oC1XCIsYmFja3NpbTpcIuKIvVwiLGJhY2tzaW1lcTpcIuKLjVwiLEJhY2tzbGFzaDpcIuKIllwiLEJhcnY6XCLiq6dcIixiYXJ2ZWU6XCLiir1cIixiYXJ3ZWQ6XCLijIVcIixCYXJ3ZWQ6XCLijIZcIixiYXJ3ZWRnZTpcIuKMhVwiLGJicms6XCLijrVcIixiYnJrdGJyazpcIuKOtlwiLGJjb25nOlwi4omMXCIsQmN5Olwi0JFcIixiY3k6XCLQsVwiLGJkcXVvOlwi4oCeXCIsYmVjYXVzOlwi4oi1XCIsYmVjYXVzZTpcIuKItVwiLEJlY2F1c2U6XCLiiLVcIixiZW1wdHl2Olwi4qawXCIsYmVwc2k6XCLPtlwiLGJlcm5vdTpcIuKErFwiLEJlcm5vdWxsaXM6XCLihKxcIixCZXRhOlwizpJcIixiZXRhOlwizrJcIixiZXRoOlwi4oS2XCIsYmV0d2VlbjpcIuKJrFwiLEJmcjpcIvCdlIVcIixiZnI6XCLwnZSfXCIsYmlnY2FwOlwi4ouCXCIsYmlnY2lyYzpcIuKXr1wiLGJpZ2N1cDpcIuKLg1wiLGJpZ29kb3Q6XCLiqIBcIixiaWdvcGx1czpcIuKogVwiLGJpZ290aW1lczpcIuKoglwiLGJpZ3NxY3VwOlwi4qiGXCIsYmlnc3RhcjpcIuKYhVwiLGJpZ3RyaWFuZ2xlZG93bjpcIuKWvVwiLGJpZ3RyaWFuZ2xldXA6XCLilrNcIixiaWd1cGx1czpcIuKohFwiLGJpZ3ZlZTpcIuKLgVwiLGJpZ3dlZGdlOlwi4ouAXCIsYmthcm93Olwi4qSNXCIsYmxhY2tsb3plbmdlOlwi4qerXCIsYmxhY2tzcXVhcmU6XCLilqpcIixibGFja3RyaWFuZ2xlOlwi4pa0XCIsYmxhY2t0cmlhbmdsZWRvd246XCLilr5cIixibGFja3RyaWFuZ2xlbGVmdDpcIuKXglwiLGJsYWNrdHJpYW5nbGVyaWdodDpcIuKWuFwiLGJsYW5rOlwi4pCjXCIsYmxrMTI6XCLilpJcIixibGsxNDpcIuKWkVwiLGJsazM0Olwi4paTXCIsYmxvY2s6XCLilohcIixibmU6XCI94oOlXCIsYm5lcXVpdjpcIuKJoeKDpVwiLGJOb3Q6XCLiq61cIixibm90Olwi4oyQXCIsQm9wZjpcIvCdlLlcIixib3BmOlwi8J2Vk1wiLGJvdDpcIuKKpVwiLGJvdHRvbTpcIuKKpVwiLGJvd3RpZTpcIuKLiFwiLGJveGJveDpcIuKniVwiLGJveGRsOlwi4pSQXCIsYm94ZEw6XCLilZVcIixib3hEbDpcIuKVllwiLGJveERMOlwi4pWXXCIsYm94ZHI6XCLilIxcIixib3hkUjpcIuKVklwiLGJveERyOlwi4pWTXCIsYm94RFI6XCLilZRcIixib3hoOlwi4pSAXCIsYm94SDpcIuKVkFwiLGJveGhkOlwi4pSsXCIsYm94SGQ6XCLilaRcIixib3hoRDpcIuKVpVwiLGJveEhEOlwi4pWmXCIsYm94aHU6XCLilLRcIixib3hIdTpcIuKVp1wiLGJveGhVOlwi4pWoXCIsYm94SFU6XCLilalcIixib3htaW51czpcIuKKn1wiLGJveHBsdXM6XCLiip5cIixib3h0aW1lczpcIuKKoFwiLGJveHVsOlwi4pSYXCIsYm94dUw6XCLilZtcIixib3hVbDpcIuKVnFwiLGJveFVMOlwi4pWdXCIsYm94dXI6XCLilJRcIixib3h1UjpcIuKVmFwiLGJveFVyOlwi4pWZXCIsYm94VVI6XCLilZpcIixib3h2Olwi4pSCXCIsYm94VjpcIuKVkVwiLGJveHZoOlwi4pS8XCIsYm94dkg6XCLilapcIixib3hWaDpcIuKVq1wiLGJveFZIOlwi4pWsXCIsYm94dmw6XCLilKRcIixib3h2TDpcIuKVoVwiLGJveFZsOlwi4pWiXCIsYm94Vkw6XCLilaNcIixib3h2cjpcIuKUnFwiLGJveHZSOlwi4pWeXCIsYm94VnI6XCLilZ9cIixib3hWUjpcIuKVoFwiLGJwcmltZTpcIuKAtVwiLGJyZXZlOlwiy5hcIixCcmV2ZTpcIsuYXCIsYnJ2YmFyOlwiwqZcIixic2NyOlwi8J2St1wiLEJzY3I6XCLihKxcIixic2VtaTpcIuKBj1wiLGJzaW06XCLiiL1cIixic2ltZTpcIuKLjVwiLGJzb2xiOlwi4qeFXCIsYnNvbDpcIlxcXFxcIixic29saHN1YjpcIuKfiFwiLGJ1bGw6XCLigKJcIixidWxsZXQ6XCLigKJcIixidW1wOlwi4omOXCIsYnVtcEU6XCLiqq5cIixidW1wZTpcIuKJj1wiLEJ1bXBlcTpcIuKJjlwiLGJ1bXBlcTpcIuKJj1wiLENhY3V0ZTpcIsSGXCIsY2FjdXRlOlwixIdcIixjYXBhbmQ6XCLiqYRcIixjYXBicmN1cDpcIuKpiVwiLGNhcGNhcDpcIuKpi1wiLGNhcDpcIuKIqVwiLENhcDpcIuKLklwiLGNhcGN1cDpcIuKph1wiLGNhcGRvdDpcIuKpgFwiLENhcGl0YWxEaWZmZXJlbnRpYWxEOlwi4oWFXCIsY2FwczpcIuKIqe+4gFwiLGNhcmV0Olwi4oGBXCIsY2Fyb246XCLLh1wiLENheWxleXM6XCLihK1cIixjY2FwczpcIuKpjVwiLENjYXJvbjpcIsSMXCIsY2Nhcm9uOlwixI1cIixDY2VkaWw6XCLDh1wiLGNjZWRpbDpcIsOnXCIsQ2NpcmM6XCLEiFwiLGNjaXJjOlwixIlcIixDY29uaW50Olwi4oiwXCIsY2N1cHM6XCLiqYxcIixjY3Vwc3NtOlwi4qmQXCIsQ2RvdDpcIsSKXCIsY2RvdDpcIsSLXCIsY2VkaWw6XCLCuFwiLENlZGlsbGE6XCLCuFwiLGNlbXB0eXY6XCLiprJcIixjZW50OlwiwqJcIixjZW50ZXJkb3Q6XCLCt1wiLENlbnRlckRvdDpcIsK3XCIsY2ZyOlwi8J2UoFwiLENmcjpcIuKErVwiLENIY3k6XCLQp1wiLGNoY3k6XCLRh1wiLGNoZWNrOlwi4pyTXCIsY2hlY2ttYXJrOlwi4pyTXCIsQ2hpOlwizqdcIixjaGk6XCLPh1wiLGNpcmM6XCLLhlwiLGNpcmNlcTpcIuKJl1wiLGNpcmNsZWFycm93bGVmdDpcIuKGulwiLGNpcmNsZWFycm93cmlnaHQ6XCLihrtcIixjaXJjbGVkYXN0Olwi4oqbXCIsY2lyY2xlZGNpcmM6XCLiippcIixjaXJjbGVkZGFzaDpcIuKKnVwiLENpcmNsZURvdDpcIuKKmVwiLGNpcmNsZWRSOlwiwq5cIixjaXJjbGVkUzpcIuKTiFwiLENpcmNsZU1pbnVzOlwi4oqWXCIsQ2lyY2xlUGx1czpcIuKKlVwiLENpcmNsZVRpbWVzOlwi4oqXXCIsY2lyOlwi4peLXCIsY2lyRTpcIuKng1wiLGNpcmU6XCLiiZdcIixjaXJmbmludDpcIuKokFwiLGNpcm1pZDpcIuKrr1wiLGNpcnNjaXI6XCLip4JcIixDbG9ja3dpc2VDb250b3VySW50ZWdyYWw6XCLiiLJcIixDbG9zZUN1cmx5RG91YmxlUXVvdGU6XCLigJ1cIixDbG9zZUN1cmx5UXVvdGU6XCLigJlcIixjbHViczpcIuKZo1wiLGNsdWJzdWl0Olwi4pmjXCIsY29sb246XCI6XCIsQ29sb246XCLiiLdcIixDb2xvbmU6XCLiqbRcIixjb2xvbmU6XCLiiZRcIixjb2xvbmVxOlwi4omUXCIsY29tbWE6XCIsXCIsY29tbWF0OlwiQFwiLGNvbXA6XCLiiIFcIixjb21wZm46XCLiiJhcIixjb21wbGVtZW50Olwi4oiBXCIsY29tcGxleGVzOlwi4oSCXCIsY29uZzpcIuKJhVwiLGNvbmdkb3Q6XCLiqa1cIixDb25ncnVlbnQ6XCLiiaFcIixjb25pbnQ6XCLiiK5cIixDb25pbnQ6XCLiiK9cIixDb250b3VySW50ZWdyYWw6XCLiiK5cIixjb3BmOlwi8J2VlFwiLENvcGY6XCLihIJcIixjb3Byb2Q6XCLiiJBcIixDb3Byb2R1Y3Q6XCLiiJBcIixjb3B5OlwiwqlcIixDT1BZOlwiwqlcIixjb3B5c3I6XCLihJdcIixDb3VudGVyQ2xvY2t3aXNlQ29udG91ckludGVncmFsOlwi4oizXCIsY3JhcnI6XCLihrVcIixjcm9zczpcIuKcl1wiLENyb3NzOlwi4qivXCIsQ3NjcjpcIvCdkp5cIixjc2NyOlwi8J2SuFwiLGNzdWI6XCLiq49cIixjc3ViZTpcIuKrkVwiLGNzdXA6XCLiq5BcIixjc3VwZTpcIuKrklwiLGN0ZG90Olwi4ouvXCIsY3VkYXJybDpcIuKkuFwiLGN1ZGFycnI6XCLipLVcIixjdWVwcjpcIuKLnlwiLGN1ZXNjOlwi4oufXCIsY3VsYXJyOlwi4oa2XCIsY3VsYXJycDpcIuKkvVwiLGN1cGJyY2FwOlwi4qmIXCIsY3VwY2FwOlwi4qmGXCIsQ3VwQ2FwOlwi4omNXCIsY3VwOlwi4oiqXCIsQ3VwOlwi4ouTXCIsY3VwY3VwOlwi4qmKXCIsY3VwZG90Olwi4oqNXCIsY3Vwb3I6XCLiqYVcIixjdXBzOlwi4oiq77iAXCIsY3VyYXJyOlwi4oa3XCIsY3VyYXJybTpcIuKkvFwiLGN1cmx5ZXFwcmVjOlwi4oueXCIsY3VybHllcXN1Y2M6XCLii59cIixjdXJseXZlZTpcIuKLjlwiLGN1cmx5d2VkZ2U6XCLii49cIixjdXJyZW46XCLCpFwiLGN1cnZlYXJyb3dsZWZ0Olwi4oa2XCIsY3VydmVhcnJvd3JpZ2h0Olwi4oa3XCIsY3V2ZWU6XCLii45cIixjdXdlZDpcIuKLj1wiLGN3Y29uaW50Olwi4oiyXCIsY3dpbnQ6XCLiiLFcIixjeWxjdHk6XCLijK1cIixkYWdnZXI6XCLigKBcIixEYWdnZXI6XCLigKFcIixkYWxldGg6XCLihLhcIixkYXJyOlwi4oaTXCIsRGFycjpcIuKGoVwiLGRBcnI6XCLih5NcIixkYXNoOlwi4oCQXCIsRGFzaHY6XCLiq6RcIixkYXNodjpcIuKKo1wiLGRia2Fyb3c6XCLipI9cIixkYmxhYzpcIsudXCIsRGNhcm9uOlwixI5cIixkY2Fyb246XCLEj1wiLERjeTpcItCUXCIsZGN5Olwi0LRcIixkZGFnZ2VyOlwi4oChXCIsZGRhcnI6XCLih4pcIixERDpcIuKFhVwiLGRkOlwi4oWGXCIsRERvdHJhaGQ6XCLipJFcIixkZG90c2VxOlwi4qm3XCIsZGVnOlwiwrBcIixEZWw6XCLiiIdcIixEZWx0YTpcIs6UXCIsZGVsdGE6XCLOtFwiLGRlbXB0eXY6XCLiprFcIixkZmlzaHQ6XCLipb9cIixEZnI6XCLwnZSHXCIsZGZyOlwi8J2UoVwiLGRIYXI6XCLipaVcIixkaGFybDpcIuKHg1wiLGRoYXJyOlwi4oeCXCIsRGlhY3JpdGljYWxBY3V0ZTpcIsK0XCIsRGlhY3JpdGljYWxEb3Q6XCLLmVwiLERpYWNyaXRpY2FsRG91YmxlQWN1dGU6XCLLnVwiLERpYWNyaXRpY2FsR3JhdmU6XCJgXCIsRGlhY3JpdGljYWxUaWxkZTpcIsucXCIsZGlhbTpcIuKLhFwiLGRpYW1vbmQ6XCLii4RcIixEaWFtb25kOlwi4ouEXCIsZGlhbW9uZHN1aXQ6XCLimaZcIixkaWFtczpcIuKZplwiLGRpZTpcIsKoXCIsRGlmZmVyZW50aWFsRDpcIuKFhlwiLGRpZ2FtbWE6XCLPnVwiLGRpc2luOlwi4ouyXCIsZGl2Olwiw7dcIixkaXZpZGU6XCLDt1wiLGRpdmlkZW9udGltZXM6XCLii4dcIixkaXZvbng6XCLii4dcIixESmN5Olwi0IJcIixkamN5Olwi0ZJcIixkbGNvcm46XCLijJ5cIixkbGNyb3A6XCLijI1cIixkb2xsYXI6XCIkXCIsRG9wZjpcIvCdlLtcIixkb3BmOlwi8J2VlVwiLERvdDpcIsKoXCIsZG90Olwiy5lcIixEb3REb3Q6XCLig5xcIixkb3RlcTpcIuKJkFwiLGRvdGVxZG90Olwi4omRXCIsRG90RXF1YWw6XCLiiZBcIixkb3RtaW51czpcIuKIuFwiLGRvdHBsdXM6XCLiiJRcIixkb3RzcXVhcmU6XCLiiqFcIixkb3VibGViYXJ3ZWRnZTpcIuKMhlwiLERvdWJsZUNvbnRvdXJJbnRlZ3JhbDpcIuKIr1wiLERvdWJsZURvdDpcIsKoXCIsRG91YmxlRG93bkFycm93Olwi4oeTXCIsRG91YmxlTGVmdEFycm93Olwi4oeQXCIsRG91YmxlTGVmdFJpZ2h0QXJyb3c6XCLih5RcIixEb3VibGVMZWZ0VGVlOlwi4qukXCIsRG91YmxlTG9uZ0xlZnRBcnJvdzpcIuKfuFwiLERvdWJsZUxvbmdMZWZ0UmlnaHRBcnJvdzpcIuKfulwiLERvdWJsZUxvbmdSaWdodEFycm93Olwi4p+5XCIsRG91YmxlUmlnaHRBcnJvdzpcIuKHklwiLERvdWJsZVJpZ2h0VGVlOlwi4oqoXCIsRG91YmxlVXBBcnJvdzpcIuKHkVwiLERvdWJsZVVwRG93bkFycm93Olwi4oeVXCIsRG91YmxlVmVydGljYWxCYXI6XCLiiKVcIixEb3duQXJyb3dCYXI6XCLipJNcIixkb3duYXJyb3c6XCLihpNcIixEb3duQXJyb3c6XCLihpNcIixEb3duYXJyb3c6XCLih5NcIixEb3duQXJyb3dVcEFycm93Olwi4oe1XCIsRG93bkJyZXZlOlwizJFcIixkb3duZG93bmFycm93czpcIuKHilwiLGRvd25oYXJwb29ubGVmdDpcIuKHg1wiLGRvd25oYXJwb29ucmlnaHQ6XCLih4JcIixEb3duTGVmdFJpZ2h0VmVjdG9yOlwi4qWQXCIsRG93bkxlZnRUZWVWZWN0b3I6XCLipZ5cIixEb3duTGVmdFZlY3RvckJhcjpcIuKlllwiLERvd25MZWZ0VmVjdG9yOlwi4oa9XCIsRG93blJpZ2h0VGVlVmVjdG9yOlwi4qWfXCIsRG93blJpZ2h0VmVjdG9yQmFyOlwi4qWXXCIsRG93blJpZ2h0VmVjdG9yOlwi4oeBXCIsRG93blRlZUFycm93Olwi4oanXCIsRG93blRlZTpcIuKKpFwiLGRyYmthcm93Olwi4qSQXCIsZHJjb3JuOlwi4oyfXCIsZHJjcm9wOlwi4oyMXCIsRHNjcjpcIvCdkp9cIixkc2NyOlwi8J2SuVwiLERTY3k6XCLQhVwiLGRzY3k6XCLRlVwiLGRzb2w6XCLip7ZcIixEc3Ryb2s6XCLEkFwiLGRzdHJvazpcIsSRXCIsZHRkb3Q6XCLii7FcIixkdHJpOlwi4pa/XCIsZHRyaWY6XCLilr5cIixkdWFycjpcIuKHtVwiLGR1aGFyOlwi4qWvXCIsZHdhbmdsZTpcIuKmplwiLERaY3k6XCLQj1wiLGR6Y3k6XCLRn1wiLGR6aWdyYXJyOlwi4p+/XCIsRWFjdXRlOlwiw4lcIixlYWN1dGU6XCLDqVwiLGVhc3RlcjpcIuKprlwiLEVjYXJvbjpcIsSaXCIsZWNhcm9uOlwixJtcIixFY2lyYzpcIsOKXCIsZWNpcmM6XCLDqlwiLGVjaXI6XCLiiZZcIixlY29sb246XCLiiZVcIixFY3k6XCLQrVwiLGVjeTpcItGNXCIsZUREb3Q6XCLiqbdcIixFZG90OlwixJZcIixlZG90OlwixJdcIixlRG90Olwi4omRXCIsZWU6XCLihYdcIixlZkRvdDpcIuKJklwiLEVmcjpcIvCdlIhcIixlZnI6XCLwnZSiXCIsZWc6XCLiqppcIixFZ3JhdmU6XCLDiFwiLGVncmF2ZTpcIsOoXCIsZWdzOlwi4qqWXCIsZWdzZG90Olwi4qqYXCIsZWw6XCLiqplcIixFbGVtZW50Olwi4oiIXCIsZWxpbnRlcnM6XCLij6dcIixlbGw6XCLihJNcIixlbHM6XCLiqpVcIixlbHNkb3Q6XCLiqpdcIixFbWFjcjpcIsSSXCIsZW1hY3I6XCLEk1wiLGVtcHR5Olwi4oiFXCIsZW1wdHlzZXQ6XCLiiIVcIixFbXB0eVNtYWxsU3F1YXJlOlwi4pe7XCIsZW1wdHl2Olwi4oiFXCIsRW1wdHlWZXJ5U21hbGxTcXVhcmU6XCLilqtcIixlbXNwMTM6XCLigIRcIixlbXNwMTQ6XCLigIVcIixlbXNwOlwi4oCDXCIsRU5HOlwixYpcIixlbmc6XCLFi1wiLGVuc3A6XCLigIJcIixFb2dvbjpcIsSYXCIsZW9nb246XCLEmVwiLEVvcGY6XCLwnZS8XCIsZW9wZjpcIvCdlZZcIixlcGFyOlwi4ouVXCIsZXBhcnNsOlwi4qejXCIsZXBsdXM6XCLiqbFcIixlcHNpOlwizrVcIixFcHNpbG9uOlwizpVcIixlcHNpbG9uOlwizrVcIixlcHNpdjpcIs+1XCIsZXFjaXJjOlwi4omWXCIsZXFjb2xvbjpcIuKJlVwiLGVxc2ltOlwi4omCXCIsZXFzbGFudGd0cjpcIuKqllwiLGVxc2xhbnRsZXNzOlwi4qqVXCIsRXF1YWw6XCLiqbVcIixlcXVhbHM6XCI9XCIsRXF1YWxUaWxkZTpcIuKJglwiLGVxdWVzdDpcIuKJn1wiLEVxdWlsaWJyaXVtOlwi4oeMXCIsZXF1aXY6XCLiiaFcIixlcXVpdkREOlwi4qm4XCIsZXF2cGFyc2w6XCLip6VcIixlcmFycjpcIuKlsVwiLGVyRG90Olwi4omTXCIsZXNjcjpcIuKEr1wiLEVzY3I6XCLihLBcIixlc2RvdDpcIuKJkFwiLEVzaW06XCLiqbNcIixlc2ltOlwi4omCXCIsRXRhOlwizpdcIixldGE6XCLOt1wiLEVUSDpcIsOQXCIsZXRoOlwiw7BcIixFdW1sOlwiw4tcIixldW1sOlwiw6tcIixldXJvOlwi4oKsXCIsZXhjbDpcIiFcIixleGlzdDpcIuKIg1wiLEV4aXN0czpcIuKIg1wiLGV4cGVjdGF0aW9uOlwi4oSwXCIsZXhwb25lbnRpYWxlOlwi4oWHXCIsRXhwb25lbnRpYWxFOlwi4oWHXCIsZmFsbGluZ2RvdHNlcTpcIuKJklwiLEZjeTpcItCkXCIsZmN5Olwi0YRcIixmZW1hbGU6XCLimYBcIixmZmlsaWc6XCLvrINcIixmZmxpZzpcIu+sgFwiLGZmbGxpZzpcIu+shFwiLEZmcjpcIvCdlIlcIixmZnI6XCLwnZSjXCIsZmlsaWc6XCLvrIFcIixGaWxsZWRTbWFsbFNxdWFyZTpcIuKXvFwiLEZpbGxlZFZlcnlTbWFsbFNxdWFyZTpcIuKWqlwiLGZqbGlnOlwiZmpcIixmbGF0Olwi4pmtXCIsZmxsaWc6XCLvrIJcIixmbHRuczpcIuKWsVwiLGZub2Y6XCLGklwiLEZvcGY6XCLwnZS9XCIsZm9wZjpcIvCdlZdcIixmb3JhbGw6XCLiiIBcIixGb3JBbGw6XCLiiIBcIixmb3JrOlwi4ouUXCIsZm9ya3Y6XCLiq5lcIixGb3VyaWVydHJmOlwi4oSxXCIsZnBhcnRpbnQ6XCLiqI1cIixmcmFjMTI6XCLCvVwiLGZyYWMxMzpcIuKFk1wiLGZyYWMxNDpcIsK8XCIsZnJhYzE1Olwi4oWVXCIsZnJhYzE2Olwi4oWZXCIsZnJhYzE4Olwi4oWbXCIsZnJhYzIzOlwi4oWUXCIsZnJhYzI1Olwi4oWWXCIsZnJhYzM0Olwiwr5cIixmcmFjMzU6XCLihZdcIixmcmFjMzg6XCLihZxcIixmcmFjNDU6XCLihZhcIixmcmFjNTY6XCLihZpcIixmcmFjNTg6XCLihZ1cIixmcmFjNzg6XCLihZ5cIixmcmFzbDpcIuKBhFwiLGZyb3duOlwi4oyiXCIsZnNjcjpcIvCdkrtcIixGc2NyOlwi4oSxXCIsZ2FjdXRlOlwix7VcIixHYW1tYTpcIs6TXCIsZ2FtbWE6XCLOs1wiLEdhbW1hZDpcIs+cXCIsZ2FtbWFkOlwiz51cIixnYXA6XCLiqoZcIixHYnJldmU6XCLEnlwiLGdicmV2ZTpcIsSfXCIsR2NlZGlsOlwixKJcIixHY2lyYzpcIsScXCIsZ2NpcmM6XCLEnVwiLEdjeTpcItCTXCIsZ2N5Olwi0LNcIixHZG90OlwixKBcIixnZG90OlwixKFcIixnZTpcIuKJpVwiLGdFOlwi4omnXCIsZ0VsOlwi4qqMXCIsZ2VsOlwi4oubXCIsZ2VxOlwi4omlXCIsZ2VxcTpcIuKJp1wiLGdlcXNsYW50Olwi4qm+XCIsZ2VzY2M6XCLiqqlcIixnZXM6XCLiqb5cIixnZXNkb3Q6XCLiqoBcIixnZXNkb3RvOlwi4qqCXCIsZ2VzZG90b2w6XCLiqoRcIixnZXNsOlwi4oub77iAXCIsZ2VzbGVzOlwi4qqUXCIsR2ZyOlwi8J2UilwiLGdmcjpcIvCdlKRcIixnZzpcIuKJq1wiLEdnOlwi4ouZXCIsZ2dnOlwi4ouZXCIsZ2ltZWw6XCLihLdcIixHSmN5Olwi0INcIixnamN5Olwi0ZNcIixnbGE6XCLiqqVcIixnbDpcIuKJt1wiLGdsRTpcIuKqklwiLGdsajpcIuKqpFwiLGduYXA6XCLiqopcIixnbmFwcHJveDpcIuKqilwiLGduZTpcIuKqiFwiLGduRTpcIuKJqVwiLGduZXE6XCLiqohcIixnbmVxcTpcIuKJqVwiLGduc2ltOlwi4ounXCIsR29wZjpcIvCdlL5cIixnb3BmOlwi8J2VmFwiLGdyYXZlOlwiYFwiLEdyZWF0ZXJFcXVhbDpcIuKJpVwiLEdyZWF0ZXJFcXVhbExlc3M6XCLii5tcIixHcmVhdGVyRnVsbEVxdWFsOlwi4omnXCIsR3JlYXRlckdyZWF0ZXI6XCLiqqJcIixHcmVhdGVyTGVzczpcIuKJt1wiLEdyZWF0ZXJTbGFudEVxdWFsOlwi4qm+XCIsR3JlYXRlclRpbGRlOlwi4omzXCIsR3NjcjpcIvCdkqJcIixnc2NyOlwi4oSKXCIsZ3NpbTpcIuKJs1wiLGdzaW1lOlwi4qqOXCIsZ3NpbWw6XCLiqpBcIixndGNjOlwi4qqnXCIsZ3RjaXI6XCLiqbpcIixndDpcIj5cIixHVDpcIj5cIixHdDpcIuKJq1wiLGd0ZG90Olwi4ouXXCIsZ3RsUGFyOlwi4qaVXCIsZ3RxdWVzdDpcIuKpvFwiLGd0cmFwcHJveDpcIuKqhlwiLGd0cmFycjpcIuKluFwiLGd0cmRvdDpcIuKLl1wiLGd0cmVxbGVzczpcIuKLm1wiLGd0cmVxcWxlc3M6XCLiqoxcIixndHJsZXNzOlwi4om3XCIsZ3Ryc2ltOlwi4omzXCIsZ3ZlcnRuZXFxOlwi4omp77iAXCIsZ3ZuRTpcIuKJqe+4gFwiLEhhY2VrOlwiy4dcIixoYWlyc3A6XCLigIpcIixoYWxmOlwiwr1cIixoYW1pbHQ6XCLihItcIixIQVJEY3k6XCLQqlwiLGhhcmRjeTpcItGKXCIsaGFycmNpcjpcIuKliFwiLGhhcnI6XCLihpRcIixoQXJyOlwi4oeUXCIsaGFycnc6XCLihq1cIixIYXQ6XCJeXCIsaGJhcjpcIuKEj1wiLEhjaXJjOlwixKRcIixoY2lyYzpcIsSlXCIsaGVhcnRzOlwi4pmlXCIsaGVhcnRzdWl0Olwi4pmlXCIsaGVsbGlwOlwi4oCmXCIsaGVyY29uOlwi4oq5XCIsaGZyOlwi8J2UpVwiLEhmcjpcIuKEjFwiLEhpbGJlcnRTcGFjZTpcIuKEi1wiLGhrc2Vhcm93Olwi4qSlXCIsaGtzd2Fyb3c6XCLipKZcIixob2FycjpcIuKHv1wiLGhvbXRodDpcIuKIu1wiLGhvb2tsZWZ0YXJyb3c6XCLihqlcIixob29rcmlnaHRhcnJvdzpcIuKGqlwiLGhvcGY6XCLwnZWZXCIsSG9wZjpcIuKEjVwiLGhvcmJhcjpcIuKAlVwiLEhvcml6b250YWxMaW5lOlwi4pSAXCIsaHNjcjpcIvCdkr1cIixIc2NyOlwi4oSLXCIsaHNsYXNoOlwi4oSPXCIsSHN0cm9rOlwixKZcIixoc3Ryb2s6XCLEp1wiLEh1bXBEb3duSHVtcDpcIuKJjlwiLEh1bXBFcXVhbDpcIuKJj1wiLGh5YnVsbDpcIuKBg1wiLGh5cGhlbjpcIuKAkFwiLElhY3V0ZTpcIsONXCIsaWFjdXRlOlwiw61cIixpYzpcIuKBo1wiLEljaXJjOlwiw45cIixpY2lyYzpcIsOuXCIsSWN5Olwi0JhcIixpY3k6XCLQuFwiLElkb3Q6XCLEsFwiLElFY3k6XCLQlVwiLGllY3k6XCLQtVwiLGlleGNsOlwiwqFcIixpZmY6XCLih5RcIixpZnI6XCLwnZSmXCIsSWZyOlwi4oSRXCIsSWdyYXZlOlwiw4xcIixpZ3JhdmU6XCLDrFwiLGlpOlwi4oWIXCIsaWlpaW50Olwi4qiMXCIsaWlpbnQ6XCLiiK1cIixpaW5maW46XCLip5xcIixpaW90YTpcIuKEqVwiLElKbGlnOlwixLJcIixpamxpZzpcIsSzXCIsSW1hY3I6XCLEqlwiLGltYWNyOlwixKtcIixpbWFnZTpcIuKEkVwiLEltYWdpbmFyeUk6XCLihYhcIixpbWFnbGluZTpcIuKEkFwiLGltYWdwYXJ0Olwi4oSRXCIsaW1hdGg6XCLEsVwiLEltOlwi4oSRXCIsaW1vZjpcIuKKt1wiLGltcGVkOlwixrVcIixJbXBsaWVzOlwi4oeSXCIsaW5jYXJlOlwi4oSFXCIsaW46XCLiiIhcIixpbmZpbjpcIuKInlwiLGluZmludGllOlwi4qedXCIsaW5vZG90OlwixLFcIixpbnRjYWw6XCLiirpcIixpbnQ6XCLiiKtcIixJbnQ6XCLiiKxcIixpbnRlZ2VyczpcIuKEpFwiLEludGVncmFsOlwi4oirXCIsaW50ZXJjYWw6XCLiirpcIixJbnRlcnNlY3Rpb246XCLii4JcIixpbnRsYXJoazpcIuKol1wiLGludHByb2Q6XCLiqLxcIixJbnZpc2libGVDb21tYTpcIuKBo1wiLEludmlzaWJsZVRpbWVzOlwi4oGiXCIsSU9jeTpcItCBXCIsaW9jeTpcItGRXCIsSW9nb246XCLErlwiLGlvZ29uOlwixK9cIixJb3BmOlwi8J2VgFwiLGlvcGY6XCLwnZWaXCIsSW90YTpcIs6ZXCIsaW90YTpcIs65XCIsaXByb2Q6XCLiqLxcIixpcXVlc3Q6XCLCv1wiLGlzY3I6XCLwnZK+XCIsSXNjcjpcIuKEkFwiLGlzaW46XCLiiIhcIixpc2luZG90Olwi4ou1XCIsaXNpbkU6XCLii7lcIixpc2luczpcIuKLtFwiLGlzaW5zdjpcIuKLs1wiLGlzaW52Olwi4oiIXCIsaXQ6XCLigaJcIixJdGlsZGU6XCLEqFwiLGl0aWxkZTpcIsSpXCIsSXVrY3k6XCLQhlwiLGl1a2N5Olwi0ZZcIixJdW1sOlwiw49cIixpdW1sOlwiw69cIixKY2lyYzpcIsS0XCIsamNpcmM6XCLEtVwiLEpjeTpcItCZXCIsamN5Olwi0LlcIixKZnI6XCLwnZSNXCIsamZyOlwi8J2Up1wiLGptYXRoOlwiyLdcIixKb3BmOlwi8J2VgVwiLGpvcGY6XCLwnZWbXCIsSnNjcjpcIvCdkqVcIixqc2NyOlwi8J2Sv1wiLEpzZXJjeTpcItCIXCIsanNlcmN5Olwi0ZhcIixKdWtjeTpcItCEXCIsanVrY3k6XCLRlFwiLEthcHBhOlwizppcIixrYXBwYTpcIs66XCIsa2FwcGF2Olwiz7BcIixLY2VkaWw6XCLEtlwiLGtjZWRpbDpcIsS3XCIsS2N5Olwi0JpcIixrY3k6XCLQulwiLEtmcjpcIvCdlI5cIixrZnI6XCLwnZSoXCIsa2dyZWVuOlwixLhcIixLSGN5Olwi0KVcIixraGN5Olwi0YVcIixLSmN5Olwi0IxcIixramN5Olwi0ZxcIixLb3BmOlwi8J2VglwiLGtvcGY6XCLwnZWcXCIsS3NjcjpcIvCdkqZcIixrc2NyOlwi8J2TgFwiLGxBYXJyOlwi4oeaXCIsTGFjdXRlOlwixLlcIixsYWN1dGU6XCLEulwiLGxhZW1wdHl2Olwi4qa0XCIsbGFncmFuOlwi4oSSXCIsTGFtYmRhOlwizptcIixsYW1iZGE6XCLOu1wiLGxhbmc6XCLin6hcIixMYW5nOlwi4p+qXCIsbGFuZ2Q6XCLippFcIixsYW5nbGU6XCLin6hcIixsYXA6XCLiqoVcIixMYXBsYWNldHJmOlwi4oSSXCIsbGFxdW86XCLCq1wiLGxhcnJiOlwi4oekXCIsbGFycmJmczpcIuKkn1wiLGxhcnI6XCLihpBcIixMYXJyOlwi4oaeXCIsbEFycjpcIuKHkFwiLGxhcnJmczpcIuKknVwiLGxhcnJoazpcIuKGqVwiLGxhcnJscDpcIuKGq1wiLGxhcnJwbDpcIuKkuVwiLGxhcnJzaW06XCLipbNcIixsYXJydGw6XCLihqJcIixsYXRhaWw6XCLipJlcIixsQXRhaWw6XCLipJtcIixsYXQ6XCLiqqtcIixsYXRlOlwi4qqtXCIsbGF0ZXM6XCLiqq3vuIBcIixsYmFycjpcIuKkjFwiLGxCYXJyOlwi4qSOXCIsbGJicms6XCLinbJcIixsYnJhY2U6XCJ7XCIsbGJyYWNrOlwiW1wiLGxicmtlOlwi4qaLXCIsbGJya3NsZDpcIuKmj1wiLGxicmtzbHU6XCLipo1cIixMY2Fyb246XCLEvVwiLGxjYXJvbjpcIsS+XCIsTGNlZGlsOlwixLtcIixsY2VkaWw6XCLEvFwiLGxjZWlsOlwi4oyIXCIsbGN1YjpcIntcIixMY3k6XCLQm1wiLGxjeTpcItC7XCIsbGRjYTpcIuKktlwiLGxkcXVvOlwi4oCcXCIsbGRxdW9yOlwi4oCeXCIsbGRyZGhhcjpcIuKlp1wiLGxkcnVzaGFyOlwi4qWLXCIsbGRzaDpcIuKGslwiLGxlOlwi4omkXCIsbEU6XCLiiaZcIixMZWZ0QW5nbGVCcmFja2V0Olwi4p+oXCIsTGVmdEFycm93QmFyOlwi4oekXCIsbGVmdGFycm93Olwi4oaQXCIsTGVmdEFycm93Olwi4oaQXCIsTGVmdGFycm93Olwi4oeQXCIsTGVmdEFycm93UmlnaHRBcnJvdzpcIuKHhlwiLGxlZnRhcnJvd3RhaWw6XCLihqJcIixMZWZ0Q2VpbGluZzpcIuKMiFwiLExlZnREb3VibGVCcmFja2V0Olwi4p+mXCIsTGVmdERvd25UZWVWZWN0b3I6XCLipaFcIixMZWZ0RG93blZlY3RvckJhcjpcIuKlmVwiLExlZnREb3duVmVjdG9yOlwi4oeDXCIsTGVmdEZsb29yOlwi4oyKXCIsbGVmdGhhcnBvb25kb3duOlwi4oa9XCIsbGVmdGhhcnBvb251cDpcIuKGvFwiLGxlZnRsZWZ0YXJyb3dzOlwi4oeHXCIsbGVmdHJpZ2h0YXJyb3c6XCLihpRcIixMZWZ0UmlnaHRBcnJvdzpcIuKGlFwiLExlZnRyaWdodGFycm93Olwi4oeUXCIsbGVmdHJpZ2h0YXJyb3dzOlwi4oeGXCIsbGVmdHJpZ2h0aGFycG9vbnM6XCLih4tcIixsZWZ0cmlnaHRzcXVpZ2Fycm93Olwi4oatXCIsTGVmdFJpZ2h0VmVjdG9yOlwi4qWOXCIsTGVmdFRlZUFycm93Olwi4oakXCIsTGVmdFRlZTpcIuKKo1wiLExlZnRUZWVWZWN0b3I6XCLipZpcIixsZWZ0dGhyZWV0aW1lczpcIuKLi1wiLExlZnRUcmlhbmdsZUJhcjpcIuKnj1wiLExlZnRUcmlhbmdsZTpcIuKKslwiLExlZnRUcmlhbmdsZUVxdWFsOlwi4oq0XCIsTGVmdFVwRG93blZlY3RvcjpcIuKlkVwiLExlZnRVcFRlZVZlY3RvcjpcIuKloFwiLExlZnRVcFZlY3RvckJhcjpcIuKlmFwiLExlZnRVcFZlY3RvcjpcIuKGv1wiLExlZnRWZWN0b3JCYXI6XCLipZJcIixMZWZ0VmVjdG9yOlwi4oa8XCIsbEVnOlwi4qqLXCIsbGVnOlwi4ouaXCIsbGVxOlwi4omkXCIsbGVxcTpcIuKJplwiLGxlcXNsYW50Olwi4qm9XCIsbGVzY2M6XCLiqqhcIixsZXM6XCLiqb1cIixsZXNkb3Q6XCLiqb9cIixsZXNkb3RvOlwi4qqBXCIsbGVzZG90b3I6XCLiqoNcIixsZXNnOlwi4oua77iAXCIsbGVzZ2VzOlwi4qqTXCIsbGVzc2FwcHJveDpcIuKqhVwiLGxlc3Nkb3Q6XCLii5ZcIixsZXNzZXFndHI6XCLii5pcIixsZXNzZXFxZ3RyOlwi4qqLXCIsTGVzc0VxdWFsR3JlYXRlcjpcIuKLmlwiLExlc3NGdWxsRXF1YWw6XCLiiaZcIixMZXNzR3JlYXRlcjpcIuKJtlwiLGxlc3NndHI6XCLiibZcIixMZXNzTGVzczpcIuKqoVwiLGxlc3NzaW06XCLiibJcIixMZXNzU2xhbnRFcXVhbDpcIuKpvVwiLExlc3NUaWxkZTpcIuKJslwiLGxmaXNodDpcIuKlvFwiLGxmbG9vcjpcIuKMilwiLExmcjpcIvCdlI9cIixsZnI6XCLwnZSpXCIsbGc6XCLiibZcIixsZ0U6XCLiqpFcIixsSGFyOlwi4qWiXCIsbGhhcmQ6XCLihr1cIixsaGFydTpcIuKGvFwiLGxoYXJ1bDpcIuKlqlwiLGxoYmxrOlwi4paEXCIsTEpjeTpcItCJXCIsbGpjeTpcItGZXCIsbGxhcnI6XCLih4dcIixsbDpcIuKJqlwiLExsOlwi4ouYXCIsbGxjb3JuZXI6XCLijJ5cIixMbGVmdGFycm93Olwi4oeaXCIsbGxoYXJkOlwi4qWrXCIsbGx0cmk6XCLil7pcIixMbWlkb3Q6XCLEv1wiLGxtaWRvdDpcIsWAXCIsbG1vdXN0YWNoZTpcIuKOsFwiLGxtb3VzdDpcIuKOsFwiLGxuYXA6XCLiqolcIixsbmFwcHJveDpcIuKqiVwiLGxuZTpcIuKqh1wiLGxuRTpcIuKJqFwiLGxuZXE6XCLiqodcIixsbmVxcTpcIuKJqFwiLGxuc2ltOlwi4oumXCIsbG9hbmc6XCLin6xcIixsb2FycjpcIuKHvVwiLGxvYnJrOlwi4p+mXCIsbG9uZ2xlZnRhcnJvdzpcIuKftVwiLExvbmdMZWZ0QXJyb3c6XCLin7VcIixMb25nbGVmdGFycm93Olwi4p+4XCIsbG9uZ2xlZnRyaWdodGFycm93Olwi4p+3XCIsTG9uZ0xlZnRSaWdodEFycm93Olwi4p+3XCIsTG9uZ2xlZnRyaWdodGFycm93Olwi4p+6XCIsbG9uZ21hcHN0bzpcIuKfvFwiLGxvbmdyaWdodGFycm93Olwi4p+2XCIsTG9uZ1JpZ2h0QXJyb3c6XCLin7ZcIixMb25ncmlnaHRhcnJvdzpcIuKfuVwiLGxvb3BhcnJvd2xlZnQ6XCLihqtcIixsb29wYXJyb3dyaWdodDpcIuKGrFwiLGxvcGFyOlwi4qaFXCIsTG9wZjpcIvCdlYNcIixsb3BmOlwi8J2VnVwiLGxvcGx1czpcIuKorVwiLGxvdGltZXM6XCLiqLRcIixsb3dhc3Q6XCLiiJdcIixsb3diYXI6XCJfXCIsTG93ZXJMZWZ0QXJyb3c6XCLihplcIixMb3dlclJpZ2h0QXJyb3c6XCLihphcIixsb3o6XCLil4pcIixsb3plbmdlOlwi4peKXCIsbG96ZjpcIuKnq1wiLGxwYXI6XCIoXCIsbHBhcmx0Olwi4qaTXCIsbHJhcnI6XCLih4ZcIixscmNvcm5lcjpcIuKMn1wiLGxyaGFyOlwi4oeLXCIsbHJoYXJkOlwi4qWtXCIsbHJtOlwi4oCOXCIsbHJ0cmk6XCLiir9cIixsc2FxdW86XCLigLlcIixsc2NyOlwi8J2TgVwiLExzY3I6XCLihJJcIixsc2g6XCLihrBcIixMc2g6XCLihrBcIixsc2ltOlwi4omyXCIsbHNpbWU6XCLiqo1cIixsc2ltZzpcIuKqj1wiLGxzcWI6XCJbXCIsbHNxdW86XCLigJhcIixsc3F1b3I6XCLigJpcIixMc3Ryb2s6XCLFgVwiLGxzdHJvazpcIsWCXCIsbHRjYzpcIuKqplwiLGx0Y2lyOlwi4qm5XCIsbHQ6XCI8XCIsTFQ6XCI8XCIsTHQ6XCLiiapcIixsdGRvdDpcIuKLllwiLGx0aHJlZTpcIuKLi1wiLGx0aW1lczpcIuKLiVwiLGx0bGFycjpcIuKltlwiLGx0cXVlc3Q6XCLiqbtcIixsdHJpOlwi4peDXCIsbHRyaWU6XCLiirRcIixsdHJpZjpcIuKXglwiLGx0clBhcjpcIuKmllwiLGx1cmRzaGFyOlwi4qWKXCIsbHVydWhhcjpcIuKlplwiLGx2ZXJ0bmVxcTpcIuKJqO+4gFwiLGx2bkU6XCLiiajvuIBcIixtYWNyOlwiwq9cIixtYWxlOlwi4pmCXCIsbWFsdDpcIuKcoFwiLG1hbHRlc2U6XCLinKBcIixNYXA6XCLipIVcIixtYXA6XCLihqZcIixtYXBzdG86XCLihqZcIixtYXBzdG9kb3duOlwi4oanXCIsbWFwc3RvbGVmdDpcIuKGpFwiLG1hcHN0b3VwOlwi4oalXCIsbWFya2VyOlwi4pauXCIsbWNvbW1hOlwi4qipXCIsTWN5Olwi0JxcIixtY3k6XCLQvFwiLG1kYXNoOlwi4oCUXCIsbUREb3Q6XCLiiLpcIixtZWFzdXJlZGFuZ2xlOlwi4oihXCIsTWVkaXVtU3BhY2U6XCLigZ9cIixNZWxsaW50cmY6XCLihLNcIixNZnI6XCLwnZSQXCIsbWZyOlwi8J2UqlwiLG1obzpcIuKEp1wiLG1pY3JvOlwiwrVcIixtaWRhc3Q6XCIqXCIsbWlkY2lyOlwi4quwXCIsbWlkOlwi4oijXCIsbWlkZG90OlwiwrdcIixtaW51c2I6XCLiip9cIixtaW51czpcIuKIklwiLG1pbnVzZDpcIuKIuFwiLG1pbnVzZHU6XCLiqKpcIixNaW51c1BsdXM6XCLiiJNcIixtbGNwOlwi4qubXCIsbWxkcjpcIuKAplwiLG1ucGx1czpcIuKIk1wiLG1vZGVsczpcIuKKp1wiLE1vcGY6XCLwnZWEXCIsbW9wZjpcIvCdlZ5cIixtcDpcIuKIk1wiLG1zY3I6XCLwnZOCXCIsTXNjcjpcIuKEs1wiLG1zdHBvczpcIuKIvlwiLE11OlwizpxcIixtdTpcIs68XCIsbXVsdGltYXA6XCLiirhcIixtdW1hcDpcIuKKuFwiLG5hYmxhOlwi4oiHXCIsTmFjdXRlOlwixYNcIixuYWN1dGU6XCLFhFwiLG5hbmc6XCLiiKDig5JcIixuYXA6XCLiiYlcIixuYXBFOlwi4qmwzLhcIixuYXBpZDpcIuKJi8y4XCIsbmFwb3M6XCLFiVwiLG5hcHByb3g6XCLiiYlcIixuYXR1cmFsOlwi4pmuXCIsbmF0dXJhbHM6XCLihJVcIixuYXR1cjpcIuKZrlwiLG5ic3A6XCLCoFwiLG5idW1wOlwi4omOzLhcIixuYnVtcGU6XCLiiY/MuFwiLG5jYXA6XCLiqYNcIixOY2Fyb246XCLFh1wiLG5jYXJvbjpcIsWIXCIsTmNlZGlsOlwixYVcIixuY2VkaWw6XCLFhlwiLG5jb25nOlwi4omHXCIsbmNvbmdkb3Q6XCLiqa3MuFwiLG5jdXA6XCLiqYJcIixOY3k6XCLQnVwiLG5jeTpcItC9XCIsbmRhc2g6XCLigJNcIixuZWFyaGs6XCLipKRcIixuZWFycjpcIuKGl1wiLG5lQXJyOlwi4oeXXCIsbmVhcnJvdzpcIuKGl1wiLG5lOlwi4omgXCIsbmVkb3Q6XCLiiZDMuFwiLE5lZ2F0aXZlTWVkaXVtU3BhY2U6XCLigItcIixOZWdhdGl2ZVRoaWNrU3BhY2U6XCLigItcIixOZWdhdGl2ZVRoaW5TcGFjZTpcIuKAi1wiLE5lZ2F0aXZlVmVyeVRoaW5TcGFjZTpcIuKAi1wiLG5lcXVpdjpcIuKJolwiLG5lc2VhcjpcIuKkqFwiLG5lc2ltOlwi4omCzLhcIixOZXN0ZWRHcmVhdGVyR3JlYXRlcjpcIuKJq1wiLE5lc3RlZExlc3NMZXNzOlwi4omqXCIsTmV3TGluZTpcIlxcblwiLG5leGlzdDpcIuKIhFwiLG5leGlzdHM6XCLiiIRcIixOZnI6XCLwnZSRXCIsbmZyOlwi8J2Uq1wiLG5nRTpcIuKJp8y4XCIsbmdlOlwi4omxXCIsbmdlcTpcIuKJsVwiLG5nZXFxOlwi4omnzLhcIixuZ2Vxc2xhbnQ6XCLiqb7MuFwiLG5nZXM6XCLiqb7MuFwiLG5HZzpcIuKLmcy4XCIsbmdzaW06XCLiibVcIixuR3Q6XCLiiavig5JcIixuZ3Q6XCLiia9cIixuZ3RyOlwi4omvXCIsbkd0djpcIuKJq8y4XCIsbmhhcnI6XCLihq5cIixuaEFycjpcIuKHjlwiLG5ocGFyOlwi4quyXCIsbmk6XCLiiItcIixuaXM6XCLii7xcIixuaXNkOlwi4ou6XCIsbml2Olwi4oiLXCIsTkpjeTpcItCKXCIsbmpjeTpcItGaXCIsbmxhcnI6XCLihppcIixubEFycjpcIuKHjVwiLG5sZHI6XCLigKVcIixubEU6XCLiiabMuFwiLG5sZTpcIuKJsFwiLG5sZWZ0YXJyb3c6XCLihppcIixuTGVmdGFycm93Olwi4oeNXCIsbmxlZnRyaWdodGFycm93Olwi4oauXCIsbkxlZnRyaWdodGFycm93Olwi4oeOXCIsbmxlcTpcIuKJsFwiLG5sZXFxOlwi4ommzLhcIixubGVxc2xhbnQ6XCLiqb3MuFwiLG5sZXM6XCLiqb3MuFwiLG5sZXNzOlwi4omuXCIsbkxsOlwi4ouYzLhcIixubHNpbTpcIuKJtFwiLG5MdDpcIuKJquKDklwiLG5sdDpcIuKJrlwiLG5sdHJpOlwi4ouqXCIsbmx0cmllOlwi4ousXCIsbkx0djpcIuKJqsy4XCIsbm1pZDpcIuKIpFwiLE5vQnJlYWs6XCLigaBcIixOb25CcmVha2luZ1NwYWNlOlwiwqBcIixub3BmOlwi8J2Vn1wiLE5vcGY6XCLihJVcIixOb3Q6XCLiq6xcIixub3Q6XCLCrFwiLE5vdENvbmdydWVudDpcIuKJolwiLE5vdEN1cENhcDpcIuKJrVwiLE5vdERvdWJsZVZlcnRpY2FsQmFyOlwi4oimXCIsTm90RWxlbWVudDpcIuKIiVwiLE5vdEVxdWFsOlwi4omgXCIsTm90RXF1YWxUaWxkZTpcIuKJgsy4XCIsTm90RXhpc3RzOlwi4oiEXCIsTm90R3JlYXRlcjpcIuKJr1wiLE5vdEdyZWF0ZXJFcXVhbDpcIuKJsVwiLE5vdEdyZWF0ZXJGdWxsRXF1YWw6XCLiiafMuFwiLE5vdEdyZWF0ZXJHcmVhdGVyOlwi4omrzLhcIixOb3RHcmVhdGVyTGVzczpcIuKJuVwiLE5vdEdyZWF0ZXJTbGFudEVxdWFsOlwi4qm+zLhcIixOb3RHcmVhdGVyVGlsZGU6XCLiibVcIixOb3RIdW1wRG93bkh1bXA6XCLiiY7MuFwiLE5vdEh1bXBFcXVhbDpcIuKJj8y4XCIsbm90aW46XCLiiIlcIixub3RpbmRvdDpcIuKLtcy4XCIsbm90aW5FOlwi4ou5zLhcIixub3RpbnZhOlwi4oiJXCIsbm90aW52YjpcIuKLt1wiLG5vdGludmM6XCLii7ZcIixOb3RMZWZ0VHJpYW5nbGVCYXI6XCLip4/MuFwiLE5vdExlZnRUcmlhbmdsZTpcIuKLqlwiLE5vdExlZnRUcmlhbmdsZUVxdWFsOlwi4ousXCIsTm90TGVzczpcIuKJrlwiLE5vdExlc3NFcXVhbDpcIuKJsFwiLE5vdExlc3NHcmVhdGVyOlwi4om4XCIsTm90TGVzc0xlc3M6XCLiiarMuFwiLE5vdExlc3NTbGFudEVxdWFsOlwi4qm9zLhcIixOb3RMZXNzVGlsZGU6XCLiibRcIixOb3ROZXN0ZWRHcmVhdGVyR3JlYXRlcjpcIuKqosy4XCIsTm90TmVzdGVkTGVzc0xlc3M6XCLiqqHMuFwiLG5vdG5pOlwi4oiMXCIsbm90bml2YTpcIuKIjFwiLG5vdG5pdmI6XCLii75cIixub3RuaXZjOlwi4ou9XCIsTm90UHJlY2VkZXM6XCLiioBcIixOb3RQcmVjZWRlc0VxdWFsOlwi4qqvzLhcIixOb3RQcmVjZWRlc1NsYW50RXF1YWw6XCLii6BcIixOb3RSZXZlcnNlRWxlbWVudDpcIuKIjFwiLE5vdFJpZ2h0VHJpYW5nbGVCYXI6XCLip5DMuFwiLE5vdFJpZ2h0VHJpYW5nbGU6XCLii6tcIixOb3RSaWdodFRyaWFuZ2xlRXF1YWw6XCLii61cIixOb3RTcXVhcmVTdWJzZXQ6XCLiio/MuFwiLE5vdFNxdWFyZVN1YnNldEVxdWFsOlwi4ouiXCIsTm90U3F1YXJlU3VwZXJzZXQ6XCLiipDMuFwiLE5vdFNxdWFyZVN1cGVyc2V0RXF1YWw6XCLii6NcIixOb3RTdWJzZXQ6XCLiioLig5JcIixOb3RTdWJzZXRFcXVhbDpcIuKKiFwiLE5vdFN1Y2NlZWRzOlwi4oqBXCIsTm90U3VjY2VlZHNFcXVhbDpcIuKqsMy4XCIsTm90U3VjY2VlZHNTbGFudEVxdWFsOlwi4ouhXCIsTm90U3VjY2VlZHNUaWxkZTpcIuKJv8y4XCIsTm90U3VwZXJzZXQ6XCLiioPig5JcIixOb3RTdXBlcnNldEVxdWFsOlwi4oqJXCIsTm90VGlsZGU6XCLiiYFcIixOb3RUaWxkZUVxdWFsOlwi4omEXCIsTm90VGlsZGVGdWxsRXF1YWw6XCLiiYdcIixOb3RUaWxkZVRpbGRlOlwi4omJXCIsTm90VmVydGljYWxCYXI6XCLiiKRcIixucGFyYWxsZWw6XCLiiKZcIixucGFyOlwi4oimXCIsbnBhcnNsOlwi4qu94oOlXCIsbnBhcnQ6XCLiiILMuFwiLG5wb2xpbnQ6XCLiqJRcIixucHI6XCLiioBcIixucHJjdWU6XCLii6BcIixucHJlYzpcIuKKgFwiLG5wcmVjZXE6XCLiqq/MuFwiLG5wcmU6XCLiqq/MuFwiLG5yYXJyYzpcIuKks8y4XCIsbnJhcnI6XCLihptcIixuckFycjpcIuKHj1wiLG5yYXJydzpcIuKGncy4XCIsbnJpZ2h0YXJyb3c6XCLihptcIixuUmlnaHRhcnJvdzpcIuKHj1wiLG5ydHJpOlwi4ourXCIsbnJ0cmllOlwi4outXCIsbnNjOlwi4oqBXCIsbnNjY3VlOlwi4ouhXCIsbnNjZTpcIuKqsMy4XCIsTnNjcjpcIvCdkqlcIixuc2NyOlwi8J2Tg1wiLG5zaG9ydG1pZDpcIuKIpFwiLG5zaG9ydHBhcmFsbGVsOlwi4oimXCIsbnNpbTpcIuKJgVwiLG5zaW1lOlwi4omEXCIsbnNpbWVxOlwi4omEXCIsbnNtaWQ6XCLiiKRcIixuc3BhcjpcIuKIplwiLG5zcXN1YmU6XCLii6JcIixuc3FzdXBlOlwi4oujXCIsbnN1YjpcIuKKhFwiLG5zdWJFOlwi4quFzLhcIixuc3ViZTpcIuKKiFwiLG5zdWJzZXQ6XCLiioLig5JcIixuc3Vic2V0ZXE6XCLiiohcIixuc3Vic2V0ZXFxOlwi4quFzLhcIixuc3VjYzpcIuKKgVwiLG5zdWNjZXE6XCLiqrDMuFwiLG5zdXA6XCLiioVcIixuc3VwRTpcIuKrhsy4XCIsbnN1cGU6XCLiiolcIixuc3Vwc2V0Olwi4oqD4oOSXCIsbnN1cHNldGVxOlwi4oqJXCIsbnN1cHNldGVxcTpcIuKrhsy4XCIsbnRnbDpcIuKJuVwiLE50aWxkZTpcIsORXCIsbnRpbGRlOlwiw7FcIixudGxnOlwi4om4XCIsbnRyaWFuZ2xlbGVmdDpcIuKLqlwiLG50cmlhbmdsZWxlZnRlcTpcIuKLrFwiLG50cmlhbmdsZXJpZ2h0Olwi4ourXCIsbnRyaWFuZ2xlcmlnaHRlcTpcIuKLrVwiLE51Olwizp1cIixudTpcIs69XCIsbnVtOlwiI1wiLG51bWVybzpcIuKEllwiLG51bXNwOlwi4oCHXCIsbnZhcDpcIuKJjeKDklwiLG52ZGFzaDpcIuKKrFwiLG52RGFzaDpcIuKKrVwiLG5WZGFzaDpcIuKKrlwiLG5WRGFzaDpcIuKKr1wiLG52Z2U6XCLiiaXig5JcIixudmd0OlwiPuKDklwiLG52SGFycjpcIuKkhFwiLG52aW5maW46XCLip55cIixudmxBcnI6XCLipIJcIixudmxlOlwi4omk4oOSXCIsbnZsdDpcIjzig5JcIixudmx0cmllOlwi4oq04oOSXCIsbnZyQXJyOlwi4qSDXCIsbnZydHJpZTpcIuKKteKDklwiLG52c2ltOlwi4oi84oOSXCIsbndhcmhrOlwi4qSjXCIsbndhcnI6XCLihpZcIixud0FycjpcIuKHllwiLG53YXJyb3c6XCLihpZcIixud25lYXI6XCLipKdcIixPYWN1dGU6XCLDk1wiLG9hY3V0ZTpcIsOzXCIsb2FzdDpcIuKKm1wiLE9jaXJjOlwiw5RcIixvY2lyYzpcIsO0XCIsb2NpcjpcIuKKmlwiLE9jeTpcItCeXCIsb2N5Olwi0L5cIixvZGFzaDpcIuKKnVwiLE9kYmxhYzpcIsWQXCIsb2RibGFjOlwixZFcIixvZGl2Olwi4qi4XCIsb2RvdDpcIuKKmVwiLG9kc29sZDpcIuKmvFwiLE9FbGlnOlwixZJcIixvZWxpZzpcIsWTXCIsb2ZjaXI6XCLipr9cIixPZnI6XCLwnZSSXCIsb2ZyOlwi8J2UrFwiLG9nb246XCLLm1wiLE9ncmF2ZTpcIsOSXCIsb2dyYXZlOlwiw7JcIixvZ3Q6XCLip4FcIixvaGJhcjpcIuKmtVwiLG9obTpcIs6pXCIsb2ludDpcIuKIrlwiLG9sYXJyOlwi4oa6XCIsb2xjaXI6XCLipr5cIixvbGNyb3NzOlwi4qa7XCIsb2xpbmU6XCLigL5cIixvbHQ6XCLip4BcIixPbWFjcjpcIsWMXCIsb21hY3I6XCLFjVwiLE9tZWdhOlwizqlcIixvbWVnYTpcIs+JXCIsT21pY3JvbjpcIs6fXCIsb21pY3JvbjpcIs6/XCIsb21pZDpcIuKmtlwiLG9taW51czpcIuKKllwiLE9vcGY6XCLwnZWGXCIsb29wZjpcIvCdlaBcIixvcGFyOlwi4qa3XCIsT3BlbkN1cmx5RG91YmxlUXVvdGU6XCLigJxcIixPcGVuQ3VybHlRdW90ZTpcIuKAmFwiLG9wZXJwOlwi4qa5XCIsb3BsdXM6XCLiipVcIixvcmFycjpcIuKGu1wiLE9yOlwi4qmUXCIsb3I6XCLiiKhcIixvcmQ6XCLiqZ1cIixvcmRlcjpcIuKEtFwiLG9yZGVyb2Y6XCLihLRcIixvcmRmOlwiwqpcIixvcmRtOlwiwrpcIixvcmlnb2Y6XCLiirZcIixvcm9yOlwi4qmWXCIsb3JzbG9wZTpcIuKpl1wiLG9ydjpcIuKpm1wiLG9TOlwi4pOIXCIsT3NjcjpcIvCdkqpcIixvc2NyOlwi4oS0XCIsT3NsYXNoOlwiw5hcIixvc2xhc2g6XCLDuFwiLG9zb2w6XCLiiphcIixPdGlsZGU6XCLDlVwiLG90aWxkZTpcIsO1XCIsb3RpbWVzYXM6XCLiqLZcIixPdGltZXM6XCLiqLdcIixvdGltZXM6XCLiipdcIixPdW1sOlwiw5ZcIixvdW1sOlwiw7ZcIixvdmJhcjpcIuKMvVwiLE92ZXJCYXI6XCLigL5cIixPdmVyQnJhY2U6XCLij55cIixPdmVyQnJhY2tldDpcIuKOtFwiLE92ZXJQYXJlbnRoZXNpczpcIuKPnFwiLHBhcmE6XCLCtlwiLHBhcmFsbGVsOlwi4oilXCIscGFyOlwi4oilXCIscGFyc2ltOlwi4quzXCIscGFyc2w6XCLiq71cIixwYXJ0Olwi4oiCXCIsUGFydGlhbEQ6XCLiiIJcIixQY3k6XCLQn1wiLHBjeTpcItC/XCIscGVyY250OlwiJVwiLHBlcmlvZDpcIi5cIixwZXJtaWw6XCLigLBcIixwZXJwOlwi4oqlXCIscGVydGVuazpcIuKAsVwiLFBmcjpcIvCdlJNcIixwZnI6XCLwnZStXCIsUGhpOlwizqZcIixwaGk6XCLPhlwiLHBoaXY6XCLPlVwiLHBobW1hdDpcIuKEs1wiLHBob25lOlwi4piOXCIsUGk6XCLOoFwiLHBpOlwiz4BcIixwaXRjaGZvcms6XCLii5RcIixwaXY6XCLPllwiLHBsYW5jazpcIuKEj1wiLHBsYW5ja2g6XCLihI5cIixwbGFua3Y6XCLihI9cIixwbHVzYWNpcjpcIuKoo1wiLHBsdXNiOlwi4oqeXCIscGx1c2NpcjpcIuKoolwiLHBsdXM6XCIrXCIscGx1c2RvOlwi4oiUXCIscGx1c2R1Olwi4qilXCIscGx1c2U6XCLiqbJcIixQbHVzTWludXM6XCLCsVwiLHBsdXNtbjpcIsKxXCIscGx1c3NpbTpcIuKoplwiLHBsdXN0d286XCLiqKdcIixwbTpcIsKxXCIsUG9pbmNhcmVwbGFuZTpcIuKEjFwiLHBvaW50aW50Olwi4qiVXCIscG9wZjpcIvCdlaFcIixQb3BmOlwi4oSZXCIscG91bmQ6XCLCo1wiLHByYXA6XCLiqrdcIixQcjpcIuKqu1wiLHByOlwi4om6XCIscHJjdWU6XCLiibxcIixwcmVjYXBwcm94Olwi4qq3XCIscHJlYzpcIuKJulwiLHByZWNjdXJseWVxOlwi4om8XCIsUHJlY2VkZXM6XCLiibpcIixQcmVjZWRlc0VxdWFsOlwi4qqvXCIsUHJlY2VkZXNTbGFudEVxdWFsOlwi4om8XCIsUHJlY2VkZXNUaWxkZTpcIuKJvlwiLHByZWNlcTpcIuKqr1wiLHByZWNuYXBwcm94Olwi4qq5XCIscHJlY25lcXE6XCLiqrVcIixwcmVjbnNpbTpcIuKLqFwiLHByZTpcIuKqr1wiLHByRTpcIuKqs1wiLHByZWNzaW06XCLiib5cIixwcmltZTpcIuKAslwiLFByaW1lOlwi4oCzXCIscHJpbWVzOlwi4oSZXCIscHJuYXA6XCLiqrlcIixwcm5FOlwi4qq1XCIscHJuc2ltOlwi4ouoXCIscHJvZDpcIuKIj1wiLFByb2R1Y3Q6XCLiiI9cIixwcm9mYWxhcjpcIuKMrlwiLHByb2ZsaW5lOlwi4oySXCIscHJvZnN1cmY6XCLijJNcIixwcm9wOlwi4oidXCIsUHJvcG9ydGlvbmFsOlwi4oidXCIsUHJvcG9ydGlvbjpcIuKIt1wiLHByb3B0bzpcIuKInVwiLHByc2ltOlwi4om+XCIscHJ1cmVsOlwi4oqwXCIsUHNjcjpcIvCdkqtcIixwc2NyOlwi8J2ThVwiLFBzaTpcIs6oXCIscHNpOlwiz4hcIixwdW5jc3A6XCLigIhcIixRZnI6XCLwnZSUXCIscWZyOlwi8J2UrlwiLHFpbnQ6XCLiqIxcIixxb3BmOlwi8J2VolwiLFFvcGY6XCLihJpcIixxcHJpbWU6XCLigZdcIixRc2NyOlwi8J2SrFwiLHFzY3I6XCLwnZOGXCIscXVhdGVybmlvbnM6XCLihI1cIixxdWF0aW50Olwi4qiWXCIscXVlc3Q6XCI/XCIscXVlc3RlcTpcIuKJn1wiLHF1b3Q6J1wiJyxRVU9UOidcIicsckFhcnI6XCLih5tcIixyYWNlOlwi4oi9zLFcIixSYWN1dGU6XCLFlFwiLHJhY3V0ZTpcIsWVXCIscmFkaWM6XCLiiJpcIixyYWVtcHR5djpcIuKms1wiLHJhbmc6XCLin6lcIixSYW5nOlwi4p+rXCIscmFuZ2Q6XCLippJcIixyYW5nZTpcIuKmpVwiLHJhbmdsZTpcIuKfqVwiLHJhcXVvOlwiwrtcIixyYXJyYXA6XCLipbVcIixyYXJyYjpcIuKHpVwiLHJhcnJiZnM6XCLipKBcIixyYXJyYzpcIuKks1wiLHJhcnI6XCLihpJcIixSYXJyOlwi4oagXCIsckFycjpcIuKHklwiLHJhcnJmczpcIuKknlwiLHJhcnJoazpcIuKGqlwiLHJhcnJscDpcIuKGrFwiLHJhcnJwbDpcIuKlhVwiLHJhcnJzaW06XCLipbRcIixSYXJydGw6XCLipJZcIixyYXJydGw6XCLihqNcIixyYXJydzpcIuKGnVwiLHJhdGFpbDpcIuKkmlwiLHJBdGFpbDpcIuKknFwiLHJhdGlvOlwi4oi2XCIscmF0aW9uYWxzOlwi4oSaXCIscmJhcnI6XCLipI1cIixyQmFycjpcIuKkj1wiLFJCYXJyOlwi4qSQXCIscmJicms6XCLinbNcIixyYnJhY2U6XCJ9XCIscmJyYWNrOlwiXVwiLHJicmtlOlwi4qaMXCIscmJya3NsZDpcIuKmjlwiLHJicmtzbHU6XCLippBcIixSY2Fyb246XCLFmFwiLHJjYXJvbjpcIsWZXCIsUmNlZGlsOlwixZZcIixyY2VkaWw6XCLFl1wiLHJjZWlsOlwi4oyJXCIscmN1YjpcIn1cIixSY3k6XCLQoFwiLHJjeTpcItGAXCIscmRjYTpcIuKkt1wiLHJkbGRoYXI6XCLipalcIixyZHF1bzpcIuKAnVwiLHJkcXVvcjpcIuKAnVwiLHJkc2g6XCLihrNcIixyZWFsOlwi4oScXCIscmVhbGluZTpcIuKEm1wiLHJlYWxwYXJ0Olwi4oScXCIscmVhbHM6XCLihJ1cIixSZTpcIuKEnFwiLHJlY3Q6XCLilq1cIixyZWc6XCLCrlwiLFJFRzpcIsKuXCIsUmV2ZXJzZUVsZW1lbnQ6XCLiiItcIixSZXZlcnNlRXF1aWxpYnJpdW06XCLih4tcIixSZXZlcnNlVXBFcXVpbGlicml1bTpcIuKlr1wiLHJmaXNodDpcIuKlvVwiLHJmbG9vcjpcIuKMi1wiLHJmcjpcIvCdlK9cIixSZnI6XCLihJxcIixySGFyOlwi4qWkXCIscmhhcmQ6XCLih4FcIixyaGFydTpcIuKHgFwiLHJoYXJ1bDpcIuKlrFwiLFJobzpcIs6hXCIscmhvOlwiz4FcIixyaG92Olwiz7FcIixSaWdodEFuZ2xlQnJhY2tldDpcIuKfqVwiLFJpZ2h0QXJyb3dCYXI6XCLih6VcIixyaWdodGFycm93Olwi4oaSXCIsUmlnaHRBcnJvdzpcIuKGklwiLFJpZ2h0YXJyb3c6XCLih5JcIixSaWdodEFycm93TGVmdEFycm93Olwi4oeEXCIscmlnaHRhcnJvd3RhaWw6XCLihqNcIixSaWdodENlaWxpbmc6XCLijIlcIixSaWdodERvdWJsZUJyYWNrZXQ6XCLin6dcIixSaWdodERvd25UZWVWZWN0b3I6XCLipZ1cIixSaWdodERvd25WZWN0b3JCYXI6XCLipZVcIixSaWdodERvd25WZWN0b3I6XCLih4JcIixSaWdodEZsb29yOlwi4oyLXCIscmlnaHRoYXJwb29uZG93bjpcIuKHgVwiLHJpZ2h0aGFycG9vbnVwOlwi4oeAXCIscmlnaHRsZWZ0YXJyb3dzOlwi4oeEXCIscmlnaHRsZWZ0aGFycG9vbnM6XCLih4xcIixyaWdodHJpZ2h0YXJyb3dzOlwi4oeJXCIscmlnaHRzcXVpZ2Fycm93Olwi4oadXCIsUmlnaHRUZWVBcnJvdzpcIuKGplwiLFJpZ2h0VGVlOlwi4oqiXCIsUmlnaHRUZWVWZWN0b3I6XCLipZtcIixyaWdodHRocmVldGltZXM6XCLii4xcIixSaWdodFRyaWFuZ2xlQmFyOlwi4qeQXCIsUmlnaHRUcmlhbmdsZTpcIuKKs1wiLFJpZ2h0VHJpYW5nbGVFcXVhbDpcIuKKtVwiLFJpZ2h0VXBEb3duVmVjdG9yOlwi4qWPXCIsUmlnaHRVcFRlZVZlY3RvcjpcIuKlnFwiLFJpZ2h0VXBWZWN0b3JCYXI6XCLipZRcIixSaWdodFVwVmVjdG9yOlwi4oa+XCIsUmlnaHRWZWN0b3JCYXI6XCLipZNcIixSaWdodFZlY3RvcjpcIuKHgFwiLHJpbmc6XCLLmlwiLHJpc2luZ2RvdHNlcTpcIuKJk1wiLHJsYXJyOlwi4oeEXCIscmxoYXI6XCLih4xcIixybG06XCLigI9cIixybW91c3RhY2hlOlwi4o6xXCIscm1vdXN0Olwi4o6xXCIscm5taWQ6XCLiq65cIixyb2FuZzpcIuKfrVwiLHJvYXJyOlwi4oe+XCIscm9icms6XCLin6dcIixyb3BhcjpcIuKmhlwiLHJvcGY6XCLwnZWjXCIsUm9wZjpcIuKEnVwiLHJvcGx1czpcIuKorlwiLHJvdGltZXM6XCLiqLVcIixSb3VuZEltcGxpZXM6XCLipbBcIixycGFyOlwiKVwiLHJwYXJndDpcIuKmlFwiLHJwcG9saW50Olwi4qiSXCIscnJhcnI6XCLih4lcIixScmlnaHRhcnJvdzpcIuKHm1wiLHJzYXF1bzpcIuKAulwiLHJzY3I6XCLwnZOHXCIsUnNjcjpcIuKEm1wiLHJzaDpcIuKGsVwiLFJzaDpcIuKGsVwiLHJzcWI6XCJdXCIscnNxdW86XCLigJlcIixyc3F1b3I6XCLigJlcIixydGhyZWU6XCLii4xcIixydGltZXM6XCLii4pcIixydHJpOlwi4pa5XCIscnRyaWU6XCLiirVcIixydHJpZjpcIuKWuFwiLHJ0cmlsdHJpOlwi4qeOXCIsUnVsZURlbGF5ZWQ6XCLip7RcIixydWx1aGFyOlwi4qWoXCIscng6XCLihJ5cIixTYWN1dGU6XCLFmlwiLHNhY3V0ZTpcIsWbXCIsc2JxdW86XCLigJpcIixzY2FwOlwi4qq4XCIsU2Nhcm9uOlwixaBcIixzY2Fyb246XCLFoVwiLFNjOlwi4qq8XCIsc2M6XCLiibtcIixzY2N1ZTpcIuKJvVwiLHNjZTpcIuKqsFwiLHNjRTpcIuKqtFwiLFNjZWRpbDpcIsWeXCIsc2NlZGlsOlwixZ9cIixTY2lyYzpcIsWcXCIsc2NpcmM6XCLFnVwiLHNjbmFwOlwi4qq6XCIsc2NuRTpcIuKqtlwiLHNjbnNpbTpcIuKLqVwiLHNjcG9saW50Olwi4qiTXCIsc2NzaW06XCLiib9cIixTY3k6XCLQoVwiLHNjeTpcItGBXCIsc2RvdGI6XCLiiqFcIixzZG90Olwi4ouFXCIsc2RvdGU6XCLiqaZcIixzZWFyaGs6XCLipKVcIixzZWFycjpcIuKGmFwiLHNlQXJyOlwi4oeYXCIsc2VhcnJvdzpcIuKGmFwiLHNlY3Q6XCLCp1wiLHNlbWk6XCI7XCIsc2Vzd2FyOlwi4qSpXCIsc2V0bWludXM6XCLiiJZcIixzZXRtbjpcIuKIllwiLHNleHQ6XCLinLZcIixTZnI6XCLwnZSWXCIsc2ZyOlwi8J2UsFwiLHNmcm93bjpcIuKMolwiLHNoYXJwOlwi4pmvXCIsU0hDSGN5Olwi0KlcIixzaGNoY3k6XCLRiVwiLFNIY3k6XCLQqFwiLHNoY3k6XCLRiFwiLFNob3J0RG93bkFycm93Olwi4oaTXCIsU2hvcnRMZWZ0QXJyb3c6XCLihpBcIixzaG9ydG1pZDpcIuKIo1wiLHNob3J0cGFyYWxsZWw6XCLiiKVcIixTaG9ydFJpZ2h0QXJyb3c6XCLihpJcIixTaG9ydFVwQXJyb3c6XCLihpFcIixzaHk6XCLCrVwiLFNpZ21hOlwizqNcIixzaWdtYTpcIs+DXCIsc2lnbWFmOlwiz4JcIixzaWdtYXY6XCLPglwiLHNpbTpcIuKIvFwiLHNpbWRvdDpcIuKpqlwiLHNpbWU6XCLiiYNcIixzaW1lcTpcIuKJg1wiLHNpbWc6XCLiqp5cIixzaW1nRTpcIuKqoFwiLHNpbWw6XCLiqp1cIixzaW1sRTpcIuKqn1wiLHNpbW5lOlwi4omGXCIsc2ltcGx1czpcIuKopFwiLHNpbXJhcnI6XCLipbJcIixzbGFycjpcIuKGkFwiLFNtYWxsQ2lyY2xlOlwi4oiYXCIsc21hbGxzZXRtaW51czpcIuKIllwiLHNtYXNocDpcIuKos1wiLHNtZXBhcnNsOlwi4qekXCIsc21pZDpcIuKIo1wiLHNtaWxlOlwi4oyjXCIsc210Olwi4qqqXCIsc210ZTpcIuKqrFwiLHNtdGVzOlwi4qqs77iAXCIsU09GVGN5Olwi0KxcIixzb2Z0Y3k6XCLRjFwiLHNvbGJhcjpcIuKMv1wiLHNvbGI6XCLip4RcIixzb2w6XCIvXCIsU29wZjpcIvCdlYpcIixzb3BmOlwi8J2VpFwiLHNwYWRlczpcIuKZoFwiLHNwYWRlc3VpdDpcIuKZoFwiLHNwYXI6XCLiiKVcIixzcWNhcDpcIuKKk1wiLHNxY2FwczpcIuKKk++4gFwiLHNxY3VwOlwi4oqUXCIsc3FjdXBzOlwi4oqU77iAXCIsU3FydDpcIuKImlwiLHNxc3ViOlwi4oqPXCIsc3FzdWJlOlwi4oqRXCIsc3FzdWJzZXQ6XCLiio9cIixzcXN1YnNldGVxOlwi4oqRXCIsc3FzdXA6XCLiipBcIixzcXN1cGU6XCLiipJcIixzcXN1cHNldDpcIuKKkFwiLHNxc3Vwc2V0ZXE6XCLiipJcIixzcXVhcmU6XCLilqFcIixTcXVhcmU6XCLilqFcIixTcXVhcmVJbnRlcnNlY3Rpb246XCLiipNcIixTcXVhcmVTdWJzZXQ6XCLiio9cIixTcXVhcmVTdWJzZXRFcXVhbDpcIuKKkVwiLFNxdWFyZVN1cGVyc2V0Olwi4oqQXCIsU3F1YXJlU3VwZXJzZXRFcXVhbDpcIuKKklwiLFNxdWFyZVVuaW9uOlwi4oqUXCIsc3F1YXJmOlwi4paqXCIsc3F1Olwi4pahXCIsc3F1ZjpcIuKWqlwiLHNyYXJyOlwi4oaSXCIsU3NjcjpcIvCdkq5cIixzc2NyOlwi8J2TiFwiLHNzZXRtbjpcIuKIllwiLHNzbWlsZTpcIuKMo1wiLHNzdGFyZjpcIuKLhlwiLFN0YXI6XCLii4ZcIixzdGFyOlwi4piGXCIsc3RhcmY6XCLimIVcIixzdHJhaWdodGVwc2lsb246XCLPtVwiLHN0cmFpZ2h0cGhpOlwiz5VcIixzdHJuczpcIsKvXCIsc3ViOlwi4oqCXCIsU3ViOlwi4ouQXCIsc3ViZG90Olwi4qq9XCIsc3ViRTpcIuKrhVwiLHN1YmU6XCLiioZcIixzdWJlZG90Olwi4quDXCIsc3VibXVsdDpcIuKrgVwiLHN1Ym5FOlwi4quLXCIsc3VibmU6XCLiiopcIixzdWJwbHVzOlwi4qq/XCIsc3VicmFycjpcIuKluVwiLHN1YnNldDpcIuKKglwiLFN1YnNldDpcIuKLkFwiLHN1YnNldGVxOlwi4oqGXCIsc3Vic2V0ZXFxOlwi4quFXCIsU3Vic2V0RXF1YWw6XCLiioZcIixzdWJzZXRuZXE6XCLiiopcIixzdWJzZXRuZXFxOlwi4quLXCIsc3Vic2ltOlwi4quHXCIsc3Vic3ViOlwi4quVXCIsc3Vic3VwOlwi4quTXCIsc3VjY2FwcHJveDpcIuKquFwiLHN1Y2M6XCLiibtcIixzdWNjY3VybHllcTpcIuKJvVwiLFN1Y2NlZWRzOlwi4om7XCIsU3VjY2VlZHNFcXVhbDpcIuKqsFwiLFN1Y2NlZWRzU2xhbnRFcXVhbDpcIuKJvVwiLFN1Y2NlZWRzVGlsZGU6XCLiib9cIixzdWNjZXE6XCLiqrBcIixzdWNjbmFwcHJveDpcIuKqulwiLHN1Y2NuZXFxOlwi4qq2XCIsc3VjY25zaW06XCLii6lcIixzdWNjc2ltOlwi4om/XCIsU3VjaFRoYXQ6XCLiiItcIixzdW06XCLiiJFcIixTdW06XCLiiJFcIixzdW5nOlwi4pmqXCIsc3VwMTpcIsK5XCIsc3VwMjpcIsKyXCIsc3VwMzpcIsKzXCIsc3VwOlwi4oqDXCIsU3VwOlwi4ouRXCIsc3VwZG90Olwi4qq+XCIsc3VwZHN1YjpcIuKrmFwiLHN1cEU6XCLiq4ZcIixzdXBlOlwi4oqHXCIsc3VwZWRvdDpcIuKrhFwiLFN1cGVyc2V0Olwi4oqDXCIsU3VwZXJzZXRFcXVhbDpcIuKKh1wiLHN1cGhzb2w6XCLin4lcIixzdXBoc3ViOlwi4quXXCIsc3VwbGFycjpcIuKlu1wiLHN1cG11bHQ6XCLiq4JcIixzdXBuRTpcIuKrjFwiLHN1cG5lOlwi4oqLXCIsc3VwcGx1czpcIuKrgFwiLHN1cHNldDpcIuKKg1wiLFN1cHNldDpcIuKLkVwiLHN1cHNldGVxOlwi4oqHXCIsc3Vwc2V0ZXFxOlwi4quGXCIsc3Vwc2V0bmVxOlwi4oqLXCIsc3Vwc2V0bmVxcTpcIuKrjFwiLHN1cHNpbTpcIuKriFwiLHN1cHN1YjpcIuKrlFwiLHN1cHN1cDpcIuKrllwiLHN3YXJoazpcIuKkplwiLHN3YXJyOlwi4oaZXCIsc3dBcnI6XCLih5lcIixzd2Fycm93Olwi4oaZXCIsc3dud2FyOlwi4qSqXCIsc3psaWc6XCLDn1wiLFRhYjpcIlxcdFwiLHRhcmdldDpcIuKMllwiLFRhdTpcIs6kXCIsdGF1Olwiz4RcIix0YnJrOlwi4o60XCIsVGNhcm9uOlwixaRcIix0Y2Fyb246XCLFpVwiLFRjZWRpbDpcIsWiXCIsdGNlZGlsOlwixaNcIixUY3k6XCLQolwiLHRjeTpcItGCXCIsdGRvdDpcIuKDm1wiLHRlbHJlYzpcIuKMlVwiLFRmcjpcIvCdlJdcIix0ZnI6XCLwnZSxXCIsdGhlcmU0Olwi4oi0XCIsdGhlcmVmb3JlOlwi4oi0XCIsVGhlcmVmb3JlOlwi4oi0XCIsVGhldGE6XCLOmFwiLHRoZXRhOlwizrhcIix0aGV0YXN5bTpcIs+RXCIsdGhldGF2Olwiz5FcIix0aGlja2FwcHJveDpcIuKJiFwiLHRoaWNrc2ltOlwi4oi8XCIsVGhpY2tTcGFjZTpcIuKBn+KAilwiLFRoaW5TcGFjZTpcIuKAiVwiLHRoaW5zcDpcIuKAiVwiLHRoa2FwOlwi4omIXCIsdGhrc2ltOlwi4oi8XCIsVEhPUk46XCLDnlwiLHRob3JuOlwiw75cIix0aWxkZTpcIsucXCIsVGlsZGU6XCLiiLxcIixUaWxkZUVxdWFsOlwi4omDXCIsVGlsZGVGdWxsRXF1YWw6XCLiiYVcIixUaWxkZVRpbGRlOlwi4omIXCIsdGltZXNiYXI6XCLiqLFcIix0aW1lc2I6XCLiiqBcIix0aW1lczpcIsOXXCIsdGltZXNkOlwi4qiwXCIsdGludDpcIuKIrVwiLHRvZWE6XCLipKhcIix0b3Bib3Q6XCLijLZcIix0b3BjaXI6XCLiq7FcIix0b3A6XCLiiqRcIixUb3BmOlwi8J2Vi1wiLHRvcGY6XCLwnZWlXCIsdG9wZm9yazpcIuKrmlwiLHRvc2E6XCLipKlcIix0cHJpbWU6XCLigLRcIix0cmFkZTpcIuKEolwiLFRSQURFOlwi4oSiXCIsdHJpYW5nbGU6XCLilrVcIix0cmlhbmdsZWRvd246XCLilr9cIix0cmlhbmdsZWxlZnQ6XCLil4NcIix0cmlhbmdsZWxlZnRlcTpcIuKKtFwiLHRyaWFuZ2xlcTpcIuKJnFwiLHRyaWFuZ2xlcmlnaHQ6XCLilrlcIix0cmlhbmdsZXJpZ2h0ZXE6XCLiirVcIix0cmlkb3Q6XCLil6xcIix0cmllOlwi4omcXCIsdHJpbWludXM6XCLiqLpcIixUcmlwbGVEb3Q6XCLig5tcIix0cmlwbHVzOlwi4qi5XCIsdHJpc2I6XCLip41cIix0cml0aW1lOlwi4qi7XCIsdHJwZXppdW06XCLij6JcIixUc2NyOlwi8J2Sr1wiLHRzY3I6XCLwnZOJXCIsVFNjeTpcItCmXCIsdHNjeTpcItGGXCIsVFNIY3k6XCLQi1wiLHRzaGN5Olwi0ZtcIixUc3Ryb2s6XCLFplwiLHRzdHJvazpcIsWnXCIsdHdpeHQ6XCLiiaxcIix0d29oZWFkbGVmdGFycm93Olwi4oaeXCIsdHdvaGVhZHJpZ2h0YXJyb3c6XCLihqBcIixVYWN1dGU6XCLDmlwiLHVhY3V0ZTpcIsO6XCIsdWFycjpcIuKGkVwiLFVhcnI6XCLihp9cIix1QXJyOlwi4oeRXCIsVWFycm9jaXI6XCLipYlcIixVYnJjeTpcItCOXCIsdWJyY3k6XCLRnlwiLFVicmV2ZTpcIsWsXCIsdWJyZXZlOlwixa1cIixVY2lyYzpcIsObXCIsdWNpcmM6XCLDu1wiLFVjeTpcItCjXCIsdWN5Olwi0YNcIix1ZGFycjpcIuKHhVwiLFVkYmxhYzpcIsWwXCIsdWRibGFjOlwixbFcIix1ZGhhcjpcIuKlrlwiLHVmaXNodDpcIuKlvlwiLFVmcjpcIvCdlJhcIix1ZnI6XCLwnZSyXCIsVWdyYXZlOlwiw5lcIix1Z3JhdmU6XCLDuVwiLHVIYXI6XCLipaNcIix1aGFybDpcIuKGv1wiLHVoYXJyOlwi4oa+XCIsdWhibGs6XCLiloBcIix1bGNvcm46XCLijJxcIix1bGNvcm5lcjpcIuKMnFwiLHVsY3JvcDpcIuKMj1wiLHVsdHJpOlwi4pe4XCIsVW1hY3I6XCLFqlwiLHVtYWNyOlwixatcIix1bWw6XCLCqFwiLFVuZGVyQmFyOlwiX1wiLFVuZGVyQnJhY2U6XCLij59cIixVbmRlckJyYWNrZXQ6XCLijrVcIixVbmRlclBhcmVudGhlc2lzOlwi4o+dXCIsVW5pb246XCLii4NcIixVbmlvblBsdXM6XCLiio5cIixVb2dvbjpcIsWyXCIsdW9nb246XCLFs1wiLFVvcGY6XCLwnZWMXCIsdW9wZjpcIvCdlaZcIixVcEFycm93QmFyOlwi4qSSXCIsdXBhcnJvdzpcIuKGkVwiLFVwQXJyb3c6XCLihpFcIixVcGFycm93Olwi4oeRXCIsVXBBcnJvd0Rvd25BcnJvdzpcIuKHhVwiLHVwZG93bmFycm93Olwi4oaVXCIsVXBEb3duQXJyb3c6XCLihpVcIixVcGRvd25hcnJvdzpcIuKHlVwiLFVwRXF1aWxpYnJpdW06XCLipa5cIix1cGhhcnBvb25sZWZ0Olwi4oa/XCIsdXBoYXJwb29ucmlnaHQ6XCLihr5cIix1cGx1czpcIuKKjlwiLFVwcGVyTGVmdEFycm93Olwi4oaWXCIsVXBwZXJSaWdodEFycm93Olwi4oaXXCIsdXBzaTpcIs+FXCIsVXBzaTpcIs+SXCIsdXBzaWg6XCLPklwiLFVwc2lsb246XCLOpVwiLHVwc2lsb246XCLPhVwiLFVwVGVlQXJyb3c6XCLihqVcIixVcFRlZTpcIuKKpVwiLHVwdXBhcnJvd3M6XCLih4hcIix1cmNvcm46XCLijJ1cIix1cmNvcm5lcjpcIuKMnVwiLHVyY3JvcDpcIuKMjlwiLFVyaW5nOlwixa5cIix1cmluZzpcIsWvXCIsdXJ0cmk6XCLil7lcIixVc2NyOlwi8J2SsFwiLHVzY3I6XCLwnZOKXCIsdXRkb3Q6XCLii7BcIixVdGlsZGU6XCLFqFwiLHV0aWxkZTpcIsWpXCIsdXRyaTpcIuKWtVwiLHV0cmlmOlwi4pa0XCIsdXVhcnI6XCLih4hcIixVdW1sOlwiw5xcIix1dW1sOlwiw7xcIix1d2FuZ2xlOlwi4qanXCIsdmFuZ3J0Olwi4qacXCIsdmFyZXBzaWxvbjpcIs+1XCIsdmFya2FwcGE6XCLPsFwiLHZhcm5vdGhpbmc6XCLiiIVcIix2YXJwaGk6XCLPlVwiLHZhcnBpOlwiz5ZcIix2YXJwcm9wdG86XCLiiJ1cIix2YXJyOlwi4oaVXCIsdkFycjpcIuKHlVwiLHZhcnJobzpcIs+xXCIsdmFyc2lnbWE6XCLPglwiLHZhcnN1YnNldG5lcTpcIuKKiu+4gFwiLHZhcnN1YnNldG5lcXE6XCLiq4vvuIBcIix2YXJzdXBzZXRuZXE6XCLiiovvuIBcIix2YXJzdXBzZXRuZXFxOlwi4quM77iAXCIsdmFydGhldGE6XCLPkVwiLHZhcnRyaWFuZ2xlbGVmdDpcIuKKslwiLHZhcnRyaWFuZ2xlcmlnaHQ6XCLiirNcIix2QmFyOlwi4quoXCIsVmJhcjpcIuKrq1wiLHZCYXJ2Olwi4qupXCIsVmN5Olwi0JJcIix2Y3k6XCLQslwiLHZkYXNoOlwi4oqiXCIsdkRhc2g6XCLiiqhcIixWZGFzaDpcIuKKqVwiLFZEYXNoOlwi4oqrXCIsVmRhc2hsOlwi4qumXCIsdmVlYmFyOlwi4oq7XCIsdmVlOlwi4oioXCIsVmVlOlwi4ouBXCIsdmVlZXE6XCLiiZpcIix2ZWxsaXA6XCLii65cIix2ZXJiYXI6XCJ8XCIsVmVyYmFyOlwi4oCWXCIsdmVydDpcInxcIixWZXJ0Olwi4oCWXCIsVmVydGljYWxCYXI6XCLiiKNcIixWZXJ0aWNhbExpbmU6XCJ8XCIsVmVydGljYWxTZXBhcmF0b3I6XCLinZhcIixWZXJ0aWNhbFRpbGRlOlwi4omAXCIsVmVyeVRoaW5TcGFjZTpcIuKAilwiLFZmcjpcIvCdlJlcIix2ZnI6XCLwnZSzXCIsdmx0cmk6XCLiirJcIix2bnN1YjpcIuKKguKDklwiLHZuc3VwOlwi4oqD4oOSXCIsVm9wZjpcIvCdlY1cIix2b3BmOlwi8J2Vp1wiLHZwcm9wOlwi4oidXCIsdnJ0cmk6XCLiirNcIixWc2NyOlwi8J2SsVwiLHZzY3I6XCLwnZOLXCIsdnN1Ym5FOlwi4quL77iAXCIsdnN1Ym5lOlwi4oqK77iAXCIsdnN1cG5FOlwi4quM77iAXCIsdnN1cG5lOlwi4oqL77iAXCIsVnZkYXNoOlwi4oqqXCIsdnppZ3phZzpcIuKmmlwiLFdjaXJjOlwixbRcIix3Y2lyYzpcIsW1XCIsd2VkYmFyOlwi4qmfXCIsd2VkZ2U6XCLiiKdcIixXZWRnZTpcIuKLgFwiLHdlZGdlcTpcIuKJmVwiLHdlaWVycDpcIuKEmFwiLFdmcjpcIvCdlJpcIix3ZnI6XCLwnZS0XCIsV29wZjpcIvCdlY5cIix3b3BmOlwi8J2VqFwiLHdwOlwi4oSYXCIsd3I6XCLiiYBcIix3cmVhdGg6XCLiiYBcIixXc2NyOlwi8J2SslwiLHdzY3I6XCLwnZOMXCIseGNhcDpcIuKLglwiLHhjaXJjOlwi4pevXCIseGN1cDpcIuKLg1wiLHhkdHJpOlwi4pa9XCIsWGZyOlwi8J2Um1wiLHhmcjpcIvCdlLVcIix4aGFycjpcIuKft1wiLHhoQXJyOlwi4p+6XCIsWGk6XCLOnlwiLHhpOlwizr5cIix4bGFycjpcIuKftVwiLHhsQXJyOlwi4p+4XCIseG1hcDpcIuKfvFwiLHhuaXM6XCLii7tcIix4b2RvdDpcIuKogFwiLFhvcGY6XCLwnZWPXCIseG9wZjpcIvCdlalcIix4b3BsdXM6XCLiqIFcIix4b3RpbWU6XCLiqIJcIix4cmFycjpcIuKftlwiLHhyQXJyOlwi4p+5XCIsWHNjcjpcIvCdkrNcIix4c2NyOlwi8J2TjVwiLHhzcWN1cDpcIuKohlwiLHh1cGx1czpcIuKohFwiLHh1dHJpOlwi4pazXCIseHZlZTpcIuKLgVwiLHh3ZWRnZTpcIuKLgFwiLFlhY3V0ZTpcIsOdXCIseWFjdXRlOlwiw71cIixZQWN5Olwi0K9cIix5YWN5Olwi0Y9cIixZY2lyYzpcIsW2XCIseWNpcmM6XCLFt1wiLFljeTpcItCrXCIseWN5Olwi0YtcIix5ZW46XCLCpVwiLFlmcjpcIvCdlJxcIix5ZnI6XCLwnZS2XCIsWUljeTpcItCHXCIseWljeTpcItGXXCIsWW9wZjpcIvCdlZBcIix5b3BmOlwi8J2VqlwiLFlzY3I6XCLwnZK0XCIseXNjcjpcIvCdk45cIixZVWN5Olwi0K5cIix5dWN5Olwi0Y5cIix5dW1sOlwiw79cIixZdW1sOlwixbhcIixaYWN1dGU6XCLFuVwiLHphY3V0ZTpcIsW6XCIsWmNhcm9uOlwixb1cIix6Y2Fyb246XCLFvlwiLFpjeTpcItCXXCIsemN5Olwi0LdcIixaZG90OlwixbtcIix6ZG90OlwixbxcIix6ZWV0cmY6XCLihKhcIixaZXJvV2lkdGhTcGFjZTpcIuKAi1wiLFpldGE6XCLOllwiLHpldGE6XCLOtlwiLHpmcjpcIvCdlLdcIixaZnI6XCLihKhcIixaSGN5Olwi0JZcIix6aGN5Olwi0LZcIix6aWdyYXJyOlwi4oedXCIsem9wZjpcIvCdlatcIixab3BmOlwi4oSkXCIsWnNjcjpcIvCdkrVcIix6c2NyOlwi8J2Tj1wiLHp3ajpcIuKAjVwiLHp3bmo6XCLigIxcIn19LHt9XSw1MzpbZnVuY3Rpb24oZSxyLHQpe2Z1bmN0aW9uIG4oZSl7dmFyIHI9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDEpO3JldHVybiByLmZvckVhY2goZnVuY3Rpb24ocil7ciYmT2JqZWN0LmtleXMocikuZm9yRWFjaChmdW5jdGlvbih0KXtlW3RdPXJbdF19KX0pLGV9ZnVuY3Rpb24gbyhlKXtyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGUpfWZ1bmN0aW9uIHMoZSl7cmV0dXJuXCJbb2JqZWN0IEZ1bmN0aW9uXVwiPT09byhlKX1mdW5jdGlvbiBpKGUpe3JldHVybiBlLnJlcGxhY2UoL1suPyorXiRbXFxdXFxcXCgpe318LV0vZyxcIlxcXFwkJlwiKX12YXIgYT17ZnV6enlMaW5rOiEwLGZ1enp5RW1haWw6ITAsZnV6enlJUDohMX0sbD17XCJodHRwOlwiOnt2YWxpZGF0ZTpmdW5jdGlvbihlLHIsdCl7dmFyIG49ZS5zbGljZShyKTtyZXR1cm4gdC5yZS5odHRwfHwodC5yZS5odHRwPW5ldyBSZWdFeHAoXCJeXFxcXC9cXFxcL1wiK3QucmUuc3JjX2F1dGgrdC5yZS5zcmNfaG9zdF9wb3J0X3N0cmljdCt0LnJlLnNyY19wYXRoLFwiaVwiKSksdC5yZS5odHRwLnRlc3Qobik/bi5tYXRjaCh0LnJlLmh0dHApWzBdLmxlbmd0aDowfX0sXCJodHRwczpcIjpcImh0dHA6XCIsXCJmdHA6XCI6XCJodHRwOlwiLFwiLy9cIjp7dmFsaWRhdGU6ZnVuY3Rpb24oZSxyLHQpe3ZhciBuPWUuc2xpY2Uocik7cmV0dXJuIHQucmUubm9faHR0cHx8KHQucmUubm9faHR0cD1uZXcgUmVnRXhwKFwiXlwiK3QucmUuc3JjX2F1dGgrXCIoPzpsb2NhbGhvc3R8KD86KD86XCIrdC5yZS5zcmNfZG9tYWluK1wiKVxcXFwuKStcIit0LnJlLnNyY19kb21haW5fcm9vdCtcIilcIit0LnJlLnNyY19wb3J0K3QucmUuc3JjX2hvc3RfdGVybWluYXRvcit0LnJlLnNyY19wYXRoLFwiaVwiKSksdC5yZS5ub19odHRwLnRlc3Qobik/cj49MyYmXCI6XCI9PT1lW3ItM10/MDpyPj0zJiZcIi9cIj09PWVbci0zXT8wOm4ubWF0Y2godC5yZS5ub19odHRwKVswXS5sZW5ndGg6MH19LFwibWFpbHRvOlwiOnt2YWxpZGF0ZTpmdW5jdGlvbihlLHIsdCl7dmFyIG49ZS5zbGljZShyKTtyZXR1cm4gdC5yZS5tYWlsdG98fCh0LnJlLm1haWx0bz1uZXcgUmVnRXhwKFwiXlwiK3QucmUuc3JjX2VtYWlsX25hbWUrXCJAXCIrdC5yZS5zcmNfaG9zdF9zdHJpY3QsXCJpXCIpKSx0LnJlLm1haWx0by50ZXN0KG4pP24ubWF0Y2godC5yZS5tYWlsdG8pWzBdLmxlbmd0aDowfX19LGM9XCJhW2NkZWZnaWxtbm9xcnN0dXd4el18YlthYmRlZmdoaWptbm9yc3R2d3l6XXxjW2FjZGZnaGlrbG1ub3J1dnd4eXpdfGRbZWprbW96XXxlW2NlZ3JzdHVdfGZbaWprbW9yXXxnW2FiZGVmZ2hpbG1ucHFyc3R1d3ldfGhba21ucnR1XXxpW2RlbG1ub3Fyc3RdfGpbZW1vcF18a1tlZ2hpbW5wcnd5el18bFthYmNpa3JzdHV2eV18bVthY2RlZ2hrbG1ub3BxcnN0dXZ3eHl6XXxuW2FjZWZnaWxvcHJ1el18b218cFthZWZnaGtsbW5yc3R3eV18cWF8cltlb3N1d118c1thYmNkZWdoaWprbG1ub3J0dXZ4eXpdfHRbY2RmZ2hqa2xtbm9ydHZ3el18dVthZ2tzeXpdfHZbYWNlZ2ludV18d1tmc118eVtldF18elthbXddXCIsdT1cImJpenxjb218ZWR1fGdvdnxuZXR8b3JnfHByb3x3ZWJ8eHh4fGFlcm98YXNpYXxjb29wfGluZm98bXVzZXVtfG5hbWV8c2hvcHzRgNGEXCIuc3BsaXQoXCJ8XCIpO2Z1bmN0aW9uIHAocil7dmFyIHQ9ci5yZT1lKFwiLi9saWIvcmVcIikoci5fX29wdHNfXyksbj1yLl9fdGxkc19fLnNsaWNlKCk7ZnVuY3Rpb24gYShlKXtyZXR1cm4gZS5yZXBsYWNlKFwiJVRMRFMlXCIsdC5zcmNfdGxkcyl9ci5vbkNvbXBpbGUoKSxyLl9fdGxkc19yZXBsYWNlZF9ffHxuLnB1c2goYyksbi5wdXNoKHQuc3JjX3huKSx0LnNyY190bGRzPW4uam9pbihcInxcIiksdC5lbWFpbF9mdXp6eT1SZWdFeHAoYSh0LnRwbF9lbWFpbF9mdXp6eSksXCJpXCIpLHQubGlua19mdXp6eT1SZWdFeHAoYSh0LnRwbF9saW5rX2Z1enp5KSxcImlcIiksdC5saW5rX25vX2lwX2Z1enp5PVJlZ0V4cChhKHQudHBsX2xpbmtfbm9faXBfZnV6enkpLFwiaVwiKSx0Lmhvc3RfZnV6enlfdGVzdD1SZWdFeHAoYSh0LnRwbF9ob3N0X2Z1enp5X3Rlc3QpLFwiaVwiKTt2YXIgbD1bXTtmdW5jdGlvbiB1KGUscil7dGhyb3cgbmV3IEVycm9yKCcoTGlua2lmeUl0KSBJbnZhbGlkIHNjaGVtYSBcIicrZSsnXCI6ICcrcil9ci5fX2NvbXBpbGVkX189e30sT2JqZWN0LmtleXMoci5fX3NjaGVtYXNfXykuZm9yRWFjaChmdW5jdGlvbihlKXt2YXIgdD1yLl9fc2NoZW1hc19fW2VdO2lmKG51bGwhPT10KXt2YXIgbixpPXt2YWxpZGF0ZTpudWxsLGxpbms6bnVsbH07aWYoci5fX2NvbXBpbGVkX19bZV09aSxcIltvYmplY3QgT2JqZWN0XVwiPT09byh0KSlyZXR1cm4gZnVuY3Rpb24oZSl7cmV0dXJuXCJbb2JqZWN0IFJlZ0V4cF1cIj09PW8oZSl9KHQudmFsaWRhdGUpP2kudmFsaWRhdGU9KG49dC52YWxpZGF0ZSxmdW5jdGlvbihlLHIpe3ZhciB0PWUuc2xpY2Uocik7cmV0dXJuIG4udGVzdCh0KT90Lm1hdGNoKG4pWzBdLmxlbmd0aDowfSk6cyh0LnZhbGlkYXRlKT9pLnZhbGlkYXRlPXQudmFsaWRhdGU6dShlLHQpLHZvaWQocyh0Lm5vcm1hbGl6ZSk/aS5ub3JtYWxpemU9dC5ub3JtYWxpemU6dC5ub3JtYWxpemU/dShlLHQpOmkubm9ybWFsaXplPWZ1bmN0aW9uKGUscil7ci5ub3JtYWxpemUoZSl9KTshZnVuY3Rpb24oZSl7cmV0dXJuXCJbb2JqZWN0IFN0cmluZ11cIj09PW8oZSl9KHQpP3UoZSx0KTpsLnB1c2goZSl9fSksbC5mb3JFYWNoKGZ1bmN0aW9uKGUpe3IuX19jb21waWxlZF9fW3IuX19zY2hlbWFzX19bZV1dJiYoci5fX2NvbXBpbGVkX19bZV0udmFsaWRhdGU9ci5fX2NvbXBpbGVkX19bci5fX3NjaGVtYXNfX1tlXV0udmFsaWRhdGUsci5fX2NvbXBpbGVkX19bZV0ubm9ybWFsaXplPXIuX19jb21waWxlZF9fW3IuX19zY2hlbWFzX19bZV1dLm5vcm1hbGl6ZSl9KSxyLl9fY29tcGlsZWRfX1tcIlwiXT17dmFsaWRhdGU6bnVsbCxub3JtYWxpemU6ZnVuY3Rpb24oZSxyKXtyLm5vcm1hbGl6ZShlKX19O3ZhciBwPU9iamVjdC5rZXlzKHIuX19jb21waWxlZF9fKS5maWx0ZXIoZnVuY3Rpb24oZSl7cmV0dXJuIGUubGVuZ3RoPjAmJnIuX19jb21waWxlZF9fW2VdfSkubWFwKGkpLmpvaW4oXCJ8XCIpO3IucmUuc2NoZW1hX3Rlc3Q9UmVnRXhwKFwiKF58KD8hXykoPzpbPjzvvZxdfFwiK3Quc3JjX1pQQ2MrXCIpKShcIitwK1wiKVwiLFwiaVwiKSxyLnJlLnNjaGVtYV9zZWFyY2g9UmVnRXhwKFwiKF58KD8hXykoPzpbPjzvvZxdfFwiK3Quc3JjX1pQQ2MrXCIpKShcIitwK1wiKVwiLFwiaWdcIiksci5yZS5wcmV0ZXN0PVJlZ0V4cChcIihcIityLnJlLnNjaGVtYV90ZXN0LnNvdXJjZStcIil8KFwiK3IucmUuaG9zdF9mdXp6eV90ZXN0LnNvdXJjZStcIil8QFwiLFwiaVwiKSxmdW5jdGlvbihlKXtlLl9faW5kZXhfXz0tMSxlLl9fdGV4dF9jYWNoZV9fPVwiXCJ9KHIpfWZ1bmN0aW9uIGgoZSxyKXt2YXIgdD1lLl9faW5kZXhfXyxuPWUuX19sYXN0X2luZGV4X18sbz1lLl9fdGV4dF9jYWNoZV9fLnNsaWNlKHQsbik7dGhpcy5zY2hlbWE9ZS5fX3NjaGVtYV9fLnRvTG93ZXJDYXNlKCksdGhpcy5pbmRleD10K3IsdGhpcy5sYXN0SW5kZXg9bityLHRoaXMucmF3PW8sdGhpcy50ZXh0PW8sdGhpcy51cmw9b31mdW5jdGlvbiBmKGUscil7dmFyIHQ9bmV3IGgoZSxyKTtyZXR1cm4gZS5fX2NvbXBpbGVkX19bdC5zY2hlbWFdLm5vcm1hbGl6ZSh0LGUpLHR9ZnVuY3Rpb24gZChlLHIpe2lmKCEodGhpcyBpbnN0YW5jZW9mIGQpKXJldHVybiBuZXcgZChlLHIpO3ZhciB0O3J8fCh0PWUsT2JqZWN0LmtleXModHx8e30pLnJlZHVjZShmdW5jdGlvbihlLHIpe3JldHVybiBlfHxhLmhhc093blByb3BlcnR5KHIpfSwhMSkmJihyPWUsZT17fSkpLHRoaXMuX19vcHRzX189bih7fSxhLHIpLHRoaXMuX19pbmRleF9fPS0xLHRoaXMuX19sYXN0X2luZGV4X189LTEsdGhpcy5fX3NjaGVtYV9fPVwiXCIsdGhpcy5fX3RleHRfY2FjaGVfXz1cIlwiLHRoaXMuX19zY2hlbWFzX189bih7fSxsLGUpLHRoaXMuX19jb21waWxlZF9fPXt9LHRoaXMuX190bGRzX189dSx0aGlzLl9fdGxkc19yZXBsYWNlZF9fPSExLHRoaXMucmU9e30scCh0aGlzKX1kLnByb3RvdHlwZS5hZGQ9ZnVuY3Rpb24oZSxyKXtyZXR1cm4gdGhpcy5fX3NjaGVtYXNfX1tlXT1yLHAodGhpcyksdGhpc30sZC5wcm90b3R5cGUuc2V0PWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLl9fb3B0c19fPW4odGhpcy5fX29wdHNfXyxlKSx0aGlzfSxkLnByb3RvdHlwZS50ZXN0PWZ1bmN0aW9uKGUpe2lmKHRoaXMuX190ZXh0X2NhY2hlX189ZSx0aGlzLl9faW5kZXhfXz0tMSwhZS5sZW5ndGgpcmV0dXJuITE7dmFyIHIsdCxuLG8scyxpLGEsbDtpZih0aGlzLnJlLnNjaGVtYV90ZXN0LnRlc3QoZSkpZm9yKChhPXRoaXMucmUuc2NoZW1hX3NlYXJjaCkubGFzdEluZGV4PTA7bnVsbCE9PShyPWEuZXhlYyhlKSk7KWlmKG89dGhpcy50ZXN0U2NoZW1hQXQoZSxyWzJdLGEubGFzdEluZGV4KSl7dGhpcy5fX3NjaGVtYV9fPXJbMl0sdGhpcy5fX2luZGV4X189ci5pbmRleCtyWzFdLmxlbmd0aCx0aGlzLl9fbGFzdF9pbmRleF9fPXIuaW5kZXgrclswXS5sZW5ndGgrbzticmVha31yZXR1cm4gdGhpcy5fX29wdHNfXy5mdXp6eUxpbmsmJnRoaXMuX19jb21waWxlZF9fW1wiaHR0cDpcIl0mJihsPWUuc2VhcmNoKHRoaXMucmUuaG9zdF9mdXp6eV90ZXN0KSk+PTAmJih0aGlzLl9faW5kZXhfXzwwfHxsPHRoaXMuX19pbmRleF9fKSYmbnVsbCE9PSh0PWUubWF0Y2godGhpcy5fX29wdHNfXy5mdXp6eUlQP3RoaXMucmUubGlua19mdXp6eTp0aGlzLnJlLmxpbmtfbm9faXBfZnV6enkpKSYmKHM9dC5pbmRleCt0WzFdLmxlbmd0aCwodGhpcy5fX2luZGV4X188MHx8czx0aGlzLl9faW5kZXhfXykmJih0aGlzLl9fc2NoZW1hX189XCJcIix0aGlzLl9faW5kZXhfXz1zLHRoaXMuX19sYXN0X2luZGV4X189dC5pbmRleCt0WzBdLmxlbmd0aCkpLHRoaXMuX19vcHRzX18uZnV6enlFbWFpbCYmdGhpcy5fX2NvbXBpbGVkX19bXCJtYWlsdG86XCJdJiZlLmluZGV4T2YoXCJAXCIpPj0wJiZudWxsIT09KG49ZS5tYXRjaCh0aGlzLnJlLmVtYWlsX2Z1enp5KSkmJihzPW4uaW5kZXgrblsxXS5sZW5ndGgsaT1uLmluZGV4K25bMF0ubGVuZ3RoLCh0aGlzLl9faW5kZXhfXzwwfHxzPHRoaXMuX19pbmRleF9ffHxzPT09dGhpcy5fX2luZGV4X18mJmk+dGhpcy5fX2xhc3RfaW5kZXhfXykmJih0aGlzLl9fc2NoZW1hX189XCJtYWlsdG86XCIsdGhpcy5fX2luZGV4X189cyx0aGlzLl9fbGFzdF9pbmRleF9fPWkpKSx0aGlzLl9faW5kZXhfXz49MH0sZC5wcm90b3R5cGUucHJldGVzdD1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5yZS5wcmV0ZXN0LnRlc3QoZSl9LGQucHJvdG90eXBlLnRlc3RTY2hlbWFBdD1mdW5jdGlvbihlLHIsdCl7cmV0dXJuIHRoaXMuX19jb21waWxlZF9fW3IudG9Mb3dlckNhc2UoKV0/dGhpcy5fX2NvbXBpbGVkX19bci50b0xvd2VyQ2FzZSgpXS52YWxpZGF0ZShlLHQsdGhpcyk6MH0sZC5wcm90b3R5cGUubWF0Y2g9ZnVuY3Rpb24oZSl7dmFyIHI9MCx0PVtdO3RoaXMuX19pbmRleF9fPj0wJiZ0aGlzLl9fdGV4dF9jYWNoZV9fPT09ZSYmKHQucHVzaChmKHRoaXMscikpLHI9dGhpcy5fX2xhc3RfaW5kZXhfXyk7Zm9yKHZhciBuPXI/ZS5zbGljZShyKTplO3RoaXMudGVzdChuKTspdC5wdXNoKGYodGhpcyxyKSksbj1uLnNsaWNlKHRoaXMuX19sYXN0X2luZGV4X18pLHIrPXRoaXMuX19sYXN0X2luZGV4X187cmV0dXJuIHQubGVuZ3RoP3Q6bnVsbH0sZC5wcm90b3R5cGUudGxkcz1mdW5jdGlvbihlLHIpe3JldHVybiBlPUFycmF5LmlzQXJyYXkoZSk/ZTpbZV0scj8odGhpcy5fX3RsZHNfXz10aGlzLl9fdGxkc19fLmNvbmNhdChlKS5zb3J0KCkuZmlsdGVyKGZ1bmN0aW9uKGUscix0KXtyZXR1cm4gZSE9PXRbci0xXX0pLnJldmVyc2UoKSxwKHRoaXMpLHRoaXMpOih0aGlzLl9fdGxkc19fPWUuc2xpY2UoKSx0aGlzLl9fdGxkc19yZXBsYWNlZF9fPSEwLHAodGhpcyksdGhpcyl9LGQucHJvdG90eXBlLm5vcm1hbGl6ZT1mdW5jdGlvbihlKXtlLnNjaGVtYXx8KGUudXJsPVwiaHR0cDovL1wiK2UudXJsKSxcIm1haWx0bzpcIiE9PWUuc2NoZW1hfHwvXm1haWx0bzovaS50ZXN0KGUudXJsKXx8KGUudXJsPVwibWFpbHRvOlwiK2UudXJsKX0sZC5wcm90b3R5cGUub25Db21waWxlPWZ1bmN0aW9uKCl7fSxyLmV4cG9ydHM9ZH0se1wiLi9saWIvcmVcIjo1NH1dLDU0OltmdW5jdGlvbihlLHIsdCl7ci5leHBvcnRzPWZ1bmN0aW9uKHIpe3ZhciB0PXt9O3JldHVybiB0LnNyY19Bbnk9ZShcInVjLm1pY3JvL3Byb3BlcnRpZXMvQW55L3JlZ2V4XCIpLnNvdXJjZSx0LnNyY19DYz1lKFwidWMubWljcm8vY2F0ZWdvcmllcy9DYy9yZWdleFwiKS5zb3VyY2UsdC5zcmNfWj1lKFwidWMubWljcm8vY2F0ZWdvcmllcy9aL3JlZ2V4XCIpLnNvdXJjZSx0LnNyY19QPWUoXCJ1Yy5taWNyby9jYXRlZ29yaWVzL1AvcmVnZXhcIikuc291cmNlLHQuc3JjX1pQQ2M9W3Quc3JjX1osdC5zcmNfUCx0LnNyY19DY10uam9pbihcInxcIiksdC5zcmNfWkNjPVt0LnNyY19aLHQuc3JjX0NjXS5qb2luKFwifFwiKSx0LnNyY19wc2V1ZG9fbGV0dGVyPVwiKD86KD8hWz48772cXXxcIit0LnNyY19aUENjK1wiKVwiK3Quc3JjX0FueStcIilcIix0LnNyY19pcDQ9XCIoPzooMjVbMC01XXwyWzAtNF1bMC05XXxbMDFdP1swLTldWzAtOV0/KVxcXFwuKXszfSgyNVswLTVdfDJbMC00XVswLTldfFswMV0/WzAtOV1bMC05XT8pXCIsdC5zcmNfYXV0aD1cIig/Oig/Oig/IVwiK3Quc3JjX1pDYytcInxbQC9cXFxcW1xcXFxdKCldKS4pK0ApP1wiLHQuc3JjX3BvcnQ9XCIoPzo6KD86Nig/OlswLTRdXFxcXGR7M318NSg/OlswLTRdXFxcXGR7Mn18NSg/OlswLTJdXFxcXGR8M1swLTVdKSkpfFsxLTVdP1xcXFxkezEsNH0pKT9cIix0LnNyY19ob3N0X3Rlcm1pbmF0b3I9XCIoPz0kfFs+PO+9nF18XCIrdC5zcmNfWlBDYytcIikoPyEtfF98OlxcXFxkfFxcXFwuLXxcXFxcLig/ISR8XCIrdC5zcmNfWlBDYytcIikpXCIsdC5zcmNfcGF0aD1cIig/OlsvPyNdKD86KD8hXCIrdC5zcmNfWkNjK1wifFs+PO+9nF18WygpW1xcXFxde30uLFxcXCInPyFcXFxcLV0pLnxcXFxcWyg/Oig/IVwiK3Quc3JjX1pDYytcInxcXFxcXSkuKSpcXFxcXXxcXFxcKCg/Oig/IVwiK3Quc3JjX1pDYytcInxbKV0pLikqXFxcXCl8XFxcXHsoPzooPyFcIit0LnNyY19aQ2MrJ3xbfV0pLikqXFxcXH18XFxcXFwiKD86KD8hJyt0LnNyY19aQ2MrJ3xbXCJdKS4pK1xcXFxcInxcXFxcXFwnKD86KD8hJyt0LnNyY19aQ2MrXCJ8WyddKS4pK1xcXFwnfFxcXFwnKD89XCIrdC5zcmNfcHNldWRvX2xldHRlcitcInxbLV0pLnxcXFxcLnsyLDR9W2EtekEtWjAtOSUvXXxcXFxcLig/IVwiK3Quc3JjX1pDYytcInxbLl0pLnxcIisociYmcltcIi0tLVwiXT9cIlxcXFwtKD8hLS0oPzpbXi1dfCQpKSg/Oi0qKXxcIjpcIlxcXFwtK3xcIikrXCJcXFxcLCg/IVwiK3Quc3JjX1pDYytcIikufFxcXFwhKD8hXCIrdC5zcmNfWkNjK1wifFshXSkufFxcXFw/KD8hXCIrdC5zcmNfWkNjK1wifFs/XSkuKSt8XFxcXC8pP1wiLHQuc3JjX2VtYWlsX25hbWU9J1tcXFxcLTs6Jj1cXFxcK1xcXFwkLFxcXFwuYS16QS1aMC05X11bXFxcXC07OiY9XFxcXCtcXFxcJCxcXFxcXCJcXFxcLmEtekEtWjAtOV9dKicsdC5zcmNfeG49XCJ4bi0tW2EtejAtOVxcXFwtXXsxLDU5fVwiLHQuc3JjX2RvbWFpbl9yb290PVwiKD86XCIrdC5zcmNfeG4rXCJ8XCIrdC5zcmNfcHNldWRvX2xldHRlcitcInsxLDYzfSlcIix0LnNyY19kb21haW49XCIoPzpcIit0LnNyY194bitcInwoPzpcIit0LnNyY19wc2V1ZG9fbGV0dGVyK1wiKXwoPzpcIit0LnNyY19wc2V1ZG9fbGV0dGVyK1wiKD86LXxcIit0LnNyY19wc2V1ZG9fbGV0dGVyK1wiKXswLDYxfVwiK3Quc3JjX3BzZXVkb19sZXR0ZXIrXCIpKVwiLHQuc3JjX2hvc3Q9XCIoPzooPzooPzooPzpcIit0LnNyY19kb21haW4rXCIpXFxcXC4pKlwiK3Quc3JjX2RvbWFpbitcIikpXCIsdC50cGxfaG9zdF9mdXp6eT1cIig/OlwiK3Quc3JjX2lwNCtcInwoPzooPzooPzpcIit0LnNyY19kb21haW4rXCIpXFxcXC4pKyg/OiVUTERTJSkpKVwiLHQudHBsX2hvc3Rfbm9faXBfZnV6enk9XCIoPzooPzooPzpcIit0LnNyY19kb21haW4rXCIpXFxcXC4pKyg/OiVUTERTJSkpXCIsdC5zcmNfaG9zdF9zdHJpY3Q9dC5zcmNfaG9zdCt0LnNyY19ob3N0X3Rlcm1pbmF0b3IsdC50cGxfaG9zdF9mdXp6eV9zdHJpY3Q9dC50cGxfaG9zdF9mdXp6eSt0LnNyY19ob3N0X3Rlcm1pbmF0b3IsdC5zcmNfaG9zdF9wb3J0X3N0cmljdD10LnNyY19ob3N0K3Quc3JjX3BvcnQrdC5zcmNfaG9zdF90ZXJtaW5hdG9yLHQudHBsX2hvc3RfcG9ydF9mdXp6eV9zdHJpY3Q9dC50cGxfaG9zdF9mdXp6eSt0LnNyY19wb3J0K3Quc3JjX2hvc3RfdGVybWluYXRvcix0LnRwbF9ob3N0X3BvcnRfbm9faXBfZnV6enlfc3RyaWN0PXQudHBsX2hvc3Rfbm9faXBfZnV6enkrdC5zcmNfcG9ydCt0LnNyY19ob3N0X3Rlcm1pbmF0b3IsdC50cGxfaG9zdF9mdXp6eV90ZXN0PVwibG9jYWxob3N0fHd3d1xcXFwufFxcXFwuXFxcXGR7MSwzfVxcXFwufCg/OlxcXFwuKD86JVRMRFMlKSg/OlwiK3Quc3JjX1pQQ2MrXCJ8PnwkKSlcIix0LnRwbF9lbWFpbF9mdXp6eT0nKF58Wz48772cXXxcInxcXFxcKHwnK3Quc3JjX1pDYytcIikoXCIrdC5zcmNfZW1haWxfbmFtZStcIkBcIit0LnRwbF9ob3N0X2Z1enp5X3N0cmljdCtcIilcIix0LnRwbF9saW5rX2Z1enp5PVwiKF58KD8hWy46L1xcXFwtX0BdKSg/OlskKzw9Pl5gfO+9nF18XCIrdC5zcmNfWlBDYytcIikpKCg/IVskKzw9Pl5gfO+9nF0pXCIrdC50cGxfaG9zdF9wb3J0X2Z1enp5X3N0cmljdCt0LnNyY19wYXRoK1wiKVwiLHQudHBsX2xpbmtfbm9faXBfZnV6enk9XCIoXnwoPyFbLjovXFxcXC1fQF0pKD86WyQrPD0+XmB8772cXXxcIit0LnNyY19aUENjK1wiKSkoKD8hWyQrPD0+XmB8772cXSlcIit0LnRwbF9ob3N0X3BvcnRfbm9faXBfZnV6enlfc3RyaWN0K3Quc3JjX3BhdGgrXCIpXCIsdH19LHtcInVjLm1pY3JvL2NhdGVnb3JpZXMvQ2MvcmVnZXhcIjo2MSxcInVjLm1pY3JvL2NhdGVnb3JpZXMvUC9yZWdleFwiOjYzLFwidWMubWljcm8vY2F0ZWdvcmllcy9aL3JlZ2V4XCI6NjQsXCJ1Yy5taWNyby9wcm9wZXJ0aWVzL0FueS9yZWdleFwiOjY2fV0sNTU6W2Z1bmN0aW9uKGUscix0KXt2YXIgbj17fTtmdW5jdGlvbiBvKGUscil7dmFyIHQ7cmV0dXJuXCJzdHJpbmdcIiE9dHlwZW9mIHImJihyPW8uZGVmYXVsdENoYXJzKSx0PWZ1bmN0aW9uKGUpe3ZhciByLHQsbz1uW2VdO2lmKG8pcmV0dXJuIG87Zm9yKG89bltlXT1bXSxyPTA7cjwxMjg7cisrKXQ9U3RyaW5nLmZyb21DaGFyQ29kZShyKSxvLnB1c2godCk7Zm9yKHI9MDtyPGUubGVuZ3RoO3IrKyl0PWUuY2hhckNvZGVBdChyKSxvW3RdPVwiJVwiKyhcIjBcIit0LnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpKS5zbGljZSgtMik7cmV0dXJuIG99KHIpLGUucmVwbGFjZSgvKCVbYS1mMC05XXsyfSkrL2dpLGZ1bmN0aW9uKGUpe3ZhciByLG4sbyxzLGksYSxsLGM9XCJcIjtmb3Iocj0wLG49ZS5sZW5ndGg7cjxuO3IrPTMpKG89cGFyc2VJbnQoZS5zbGljZShyKzEsciszKSwxNikpPDEyOD9jKz10W29dOjE5Mj09KDIyNCZvKSYmciszPG4mJjEyOD09KDE5MiYocz1wYXJzZUludChlLnNsaWNlKHIrNCxyKzYpLDE2KSkpPyhjKz0obD1vPDw2JjE5ODR8NjMmcyk8MTI4P1wi77+977+9XCI6U3RyaW5nLmZyb21DaGFyQ29kZShsKSxyKz0zKToyMjQ9PSgyNDAmbykmJnIrNjxuJiYocz1wYXJzZUludChlLnNsaWNlKHIrNCxyKzYpLDE2KSxpPXBhcnNlSW50KGUuc2xpY2Uocis3LHIrOSksMTYpLDEyOD09KDE5MiZzKSYmMTI4PT0oMTkyJmkpKT8oYys9KGw9bzw8MTImNjE0NDB8czw8NiY0MDMyfDYzJmkpPDIwNDh8fGw+PTU1Mjk2JiZsPD01NzM0Mz9cIu+/ve+/ve+/vVwiOlN0cmluZy5mcm9tQ2hhckNvZGUobCkscis9Nik6MjQwPT0oMjQ4Jm8pJiZyKzk8biYmKHM9cGFyc2VJbnQoZS5zbGljZShyKzQscis2KSwxNiksaT1wYXJzZUludChlLnNsaWNlKHIrNyxyKzkpLDE2KSxhPXBhcnNlSW50KGUuc2xpY2UocisxMCxyKzEyKSwxNiksMTI4PT0oMTkyJnMpJiYxMjg9PSgxOTImaSkmJjEyOD09KDE5MiZhKSk/KChsPW88PDE4JjE4MzUwMDh8czw8MTImMjU4MDQ4fGk8PDYmNDAzMnw2MyZhKTw2NTUzNnx8bD4xMTE0MTExP2MrPVwi77+977+977+977+9XCI6KGwtPTY1NTM2LGMrPVN0cmluZy5mcm9tQ2hhckNvZGUoNTUyOTYrKGw+PjEwKSw1NjMyMCsoMTAyMyZsKSkpLHIrPTkpOmMrPVwi77+9XCI7cmV0dXJuIGN9KX1vLmRlZmF1bHRDaGFycz1cIjsvPzpAJj0rJCwjXCIsby5jb21wb25lbnRDaGFycz1cIlwiLHIuZXhwb3J0cz1vfSx7fV0sNTY6W2Z1bmN0aW9uKGUscix0KXt2YXIgbj17fTtmdW5jdGlvbiBvKGUscix0KXt2YXIgcyxpLGEsbCxjLHU9XCJcIjtmb3IoXCJzdHJpbmdcIiE9dHlwZW9mIHImJih0PXIscj1vLmRlZmF1bHRDaGFycyksdm9pZCAwPT09dCYmKHQ9ITApLGM9ZnVuY3Rpb24oZSl7dmFyIHIsdCxvPW5bZV07aWYobylyZXR1cm4gbztmb3Iobz1uW2VdPVtdLHI9MDtyPDEyODtyKyspdD1TdHJpbmcuZnJvbUNoYXJDb2RlKHIpLC9eWzAtOWEtel0kL2kudGVzdCh0KT9vLnB1c2godCk6by5wdXNoKFwiJVwiKyhcIjBcIityLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpKS5zbGljZSgtMikpO2ZvcihyPTA7cjxlLmxlbmd0aDtyKyspb1tlLmNoYXJDb2RlQXQocildPWVbcl07cmV0dXJuIG99KHIpLHM9MCxpPWUubGVuZ3RoO3M8aTtzKyspaWYoYT1lLmNoYXJDb2RlQXQocyksdCYmMzc9PT1hJiZzKzI8aSYmL15bMC05YS1mXXsyfSQvaS50ZXN0KGUuc2xpY2UocysxLHMrMykpKXUrPWUuc2xpY2UocyxzKzMpLHMrPTI7ZWxzZSBpZihhPDEyOCl1Kz1jW2FdO2Vsc2UgaWYoYT49NTUyOTYmJmE8PTU3MzQzKXtpZihhPj01NTI5NiYmYTw9NTYzMTkmJnMrMTxpJiYobD1lLmNoYXJDb2RlQXQocysxKSk+PTU2MzIwJiZsPD01NzM0Myl7dSs9ZW5jb2RlVVJJQ29tcG9uZW50KGVbc10rZVtzKzFdKSxzKys7Y29udGludWV9dSs9XCIlRUYlQkYlQkRcIn1lbHNlIHUrPWVuY29kZVVSSUNvbXBvbmVudChlW3NdKTtyZXR1cm4gdX1vLmRlZmF1bHRDaGFycz1cIjsvPzpAJj0rJCwtXy4hfionKCkjXCIsby5jb21wb25lbnRDaGFycz1cIi1fLiF+KicoKVwiLHIuZXhwb3J0cz1vfSx7fV0sNTc6W2Z1bmN0aW9uKGUscix0KXtyLmV4cG9ydHM9ZnVuY3Rpb24oZSl7dmFyIHI9XCJcIjtyZXR1cm4gcis9ZS5wcm90b2NvbHx8XCJcIixyKz1lLnNsYXNoZXM/XCIvL1wiOlwiXCIscis9ZS5hdXRoP2UuYXV0aCtcIkBcIjpcIlwiLGUuaG9zdG5hbWUmJi0xIT09ZS5ob3N0bmFtZS5pbmRleE9mKFwiOlwiKT9yKz1cIltcIitlLmhvc3RuYW1lK1wiXVwiOnIrPWUuaG9zdG5hbWV8fFwiXCIscis9ZS5wb3J0P1wiOlwiK2UucG9ydDpcIlwiLHIrPWUucGF0aG5hbWV8fFwiXCIscis9ZS5zZWFyY2h8fFwiXCIscis9ZS5oYXNofHxcIlwifX0se31dLDU4OltmdW5jdGlvbihlLHIsdCl7ci5leHBvcnRzLmVuY29kZT1lKFwiLi9lbmNvZGVcIiksci5leHBvcnRzLmRlY29kZT1lKFwiLi9kZWNvZGVcIiksci5leHBvcnRzLmZvcm1hdD1lKFwiLi9mb3JtYXRcIiksci5leHBvcnRzLnBhcnNlPWUoXCIuL3BhcnNlXCIpfSx7XCIuL2RlY29kZVwiOjU1LFwiLi9lbmNvZGVcIjo1NixcIi4vZm9ybWF0XCI6NTcsXCIuL3BhcnNlXCI6NTl9XSw1OTpbZnVuY3Rpb24oZSxyLHQpe2Z1bmN0aW9uIG4oKXt0aGlzLnByb3RvY29sPW51bGwsdGhpcy5zbGFzaGVzPW51bGwsdGhpcy5hdXRoPW51bGwsdGhpcy5wb3J0PW51bGwsdGhpcy5ob3N0bmFtZT1udWxsLHRoaXMuaGFzaD1udWxsLHRoaXMuc2VhcmNoPW51bGwsdGhpcy5wYXRobmFtZT1udWxsfXZhciBvPS9eKFthLXowLTkuKy1dKzopL2kscz0vOlswLTldKiQvLGk9L14oXFwvXFwvPyg/IVxcLylbXlxcP1xcc10qKShcXD9bXlxcc10qKT8kLyxhPVtcIntcIixcIn1cIixcInxcIixcIlxcXFxcIixcIl5cIixcImBcIl0uY29uY2F0KFtcIjxcIixcIj5cIiwnXCInLFwiYFwiLFwiIFwiLFwiXFxyXCIsXCJcXG5cIixcIlxcdFwiXSksbD1bXCInXCJdLmNvbmNhdChhKSxjPVtcIiVcIixcIi9cIixcIj9cIixcIjtcIixcIiNcIl0uY29uY2F0KGwpLHU9W1wiL1wiLFwiP1wiLFwiI1wiXSxwPS9eWythLXowLTlBLVpfLV17MCw2M30kLyxoPS9eKFsrYS16MC05QS1aXy1dezAsNjN9KSguKikkLyxmPXtqYXZhc2NyaXB0OiEwLFwiamF2YXNjcmlwdDpcIjohMH0sZD17aHR0cDohMCxodHRwczohMCxmdHA6ITAsZ29waGVyOiEwLGZpbGU6ITAsXCJodHRwOlwiOiEwLFwiaHR0cHM6XCI6ITAsXCJmdHA6XCI6ITAsXCJnb3BoZXI6XCI6ITAsXCJmaWxlOlwiOiEwfTtuLnByb3RvdHlwZS5wYXJzZT1mdW5jdGlvbihlLHIpe3ZhciB0LG4scyxhLGwsbT1lO2lmKG09bS50cmltKCksIXImJjE9PT1lLnNwbGl0KFwiI1wiKS5sZW5ndGgpe3ZhciBfPWkuZXhlYyhtKTtpZihfKXJldHVybiB0aGlzLnBhdGhuYW1lPV9bMV0sX1syXSYmKHRoaXMuc2VhcmNoPV9bMl0pLHRoaXN9dmFyIGc9by5leGVjKG0pO2lmKGcmJihnPWdbMF0scz1nLnRvTG93ZXJDYXNlKCksdGhpcy5wcm90b2NvbD1nLG09bS5zdWJzdHIoZy5sZW5ndGgpKSwocnx8Z3x8bS5tYXRjaCgvXlxcL1xcL1teQFxcL10rQFteQFxcL10rLykpJiYoIShsPVwiLy9cIj09PW0uc3Vic3RyKDAsMikpfHxnJiZmW2ddfHwobT1tLnN1YnN0cigyKSx0aGlzLnNsYXNoZXM9ITApKSwhZltnXSYmKGx8fGcmJiFkW2ddKSl7dmFyIGssYix2PS0xO2Zvcih0PTA7dDx1Lmxlbmd0aDt0KyspLTEhPT0oYT1tLmluZGV4T2YodVt0XSkpJiYoLTE9PT12fHxhPHYpJiYodj1hKTtmb3IoLTEhPT0oYj0tMT09PXY/bS5sYXN0SW5kZXhPZihcIkBcIik6bS5sYXN0SW5kZXhPZihcIkBcIix2KSkmJihrPW0uc2xpY2UoMCxiKSxtPW0uc2xpY2UoYisxKSx0aGlzLmF1dGg9ayksdj0tMSx0PTA7dDxjLmxlbmd0aDt0KyspLTEhPT0oYT1tLmluZGV4T2YoY1t0XSkpJiYoLTE9PT12fHxhPHYpJiYodj1hKTstMT09PXYmJih2PW0ubGVuZ3RoKSxcIjpcIj09PW1bdi0xXSYmdi0tO3ZhciB5PW0uc2xpY2UoMCx2KTttPW0uc2xpY2UodiksdGhpcy5wYXJzZUhvc3QoeSksdGhpcy5ob3N0bmFtZT10aGlzLmhvc3RuYW1lfHxcIlwiO3ZhciB4PVwiW1wiPT09dGhpcy5ob3N0bmFtZVswXSYmXCJdXCI9PT10aGlzLmhvc3RuYW1lW3RoaXMuaG9zdG5hbWUubGVuZ3RoLTFdO2lmKCF4KXt2YXIgQz10aGlzLmhvc3RuYW1lLnNwbGl0KC9cXC4vKTtmb3IodD0wLG49Qy5sZW5ndGg7dDxuO3QrKyl7dmFyIEE9Q1t0XTtpZihBJiYhQS5tYXRjaChwKSl7Zm9yKHZhciB3PVwiXCIsRD0wLEU9QS5sZW5ndGg7RDxFO0QrKylBLmNoYXJDb2RlQXQoRCk+MTI3P3crPVwieFwiOncrPUFbRF07aWYoIXcubWF0Y2gocCkpe3ZhciBxPUMuc2xpY2UoMCx0KSxGPUMuc2xpY2UodCsxKSxTPUEubWF0Y2goaCk7UyYmKHEucHVzaChTWzFdKSxGLnVuc2hpZnQoU1syXSkpLEYubGVuZ3RoJiYobT1GLmpvaW4oXCIuXCIpK20pLHRoaXMuaG9zdG5hbWU9cS5qb2luKFwiLlwiKTticmVha319fX10aGlzLmhvc3RuYW1lLmxlbmd0aD4yNTUmJih0aGlzLmhvc3RuYW1lPVwiXCIpLHgmJih0aGlzLmhvc3RuYW1lPXRoaXMuaG9zdG5hbWUuc3Vic3RyKDEsdGhpcy5ob3N0bmFtZS5sZW5ndGgtMikpfXZhciBMPW0uaW5kZXhPZihcIiNcIik7LTEhPT1MJiYodGhpcy5oYXNoPW0uc3Vic3RyKEwpLG09bS5zbGljZSgwLEwpKTt2YXIgej1tLmluZGV4T2YoXCI/XCIpO3JldHVybi0xIT09eiYmKHRoaXMuc2VhcmNoPW0uc3Vic3RyKHopLG09bS5zbGljZSgwLHopKSxtJiYodGhpcy5wYXRobmFtZT1tKSxkW3NdJiZ0aGlzLmhvc3RuYW1lJiYhdGhpcy5wYXRobmFtZSYmKHRoaXMucGF0aG5hbWU9XCJcIiksdGhpc30sbi5wcm90b3R5cGUucGFyc2VIb3N0PWZ1bmN0aW9uKGUpe3ZhciByPXMuZXhlYyhlKTtyJiYoXCI6XCIhPT0ocj1yWzBdKSYmKHRoaXMucG9ydD1yLnN1YnN0cigxKSksZT1lLnN1YnN0cigwLGUubGVuZ3RoLXIubGVuZ3RoKSksZSYmKHRoaXMuaG9zdG5hbWU9ZSl9LHIuZXhwb3J0cz1mdW5jdGlvbihlLHIpe2lmKGUmJmUgaW5zdGFuY2VvZiBuKXJldHVybiBlO3ZhciB0PW5ldyBuO3JldHVybiB0LnBhcnNlKGUsciksdH19LHt9XSw2MDpbZnVuY3Rpb24ocix0LG4peyhmdW5jdGlvbihlKXshZnVuY3Rpb24ocil7dmFyIG89XCJvYmplY3RcIj09dHlwZW9mIG4mJm4mJiFuLm5vZGVUeXBlJiZuLHM9XCJvYmplY3RcIj09dHlwZW9mIHQmJnQmJiF0Lm5vZGVUeXBlJiZ0LGk9XCJvYmplY3RcIj09dHlwZW9mIGUmJmU7aS5nbG9iYWwhPT1pJiZpLndpbmRvdyE9PWkmJmkuc2VsZiE9PWl8fChyPWkpO3ZhciBhLGwsYz0yMTQ3NDgzNjQ3LHU9MzYscD0xLGg9MjYsZj0zOCxkPTcwMCxtPTcyLF89MTI4LGc9XCItXCIsaz0vXnhuLS0vLGI9L1teXFx4MjAtXFx4N0VdLyx2PS9bXFx4MkVcXHUzMDAyXFx1RkYwRVxcdUZGNjFdL2cseT17b3ZlcmZsb3c6XCJPdmVyZmxvdzogaW5wdXQgbmVlZHMgd2lkZXIgaW50ZWdlcnMgdG8gcHJvY2Vzc1wiLFwibm90LWJhc2ljXCI6XCJJbGxlZ2FsIGlucHV0ID49IDB4ODAgKG5vdCBhIGJhc2ljIGNvZGUgcG9pbnQpXCIsXCJpbnZhbGlkLWlucHV0XCI6XCJJbnZhbGlkIGlucHV0XCJ9LHg9dS1wLEM9TWF0aC5mbG9vcixBPVN0cmluZy5mcm9tQ2hhckNvZGU7ZnVuY3Rpb24gdyhlKXt0aHJvdyBuZXcgUmFuZ2VFcnJvcih5W2VdKX1mdW5jdGlvbiBEKGUscil7Zm9yKHZhciB0PWUubGVuZ3RoLG49W107dC0tOyluW3RdPXIoZVt0XSk7cmV0dXJuIG59ZnVuY3Rpb24gRShlLHIpe3ZhciB0PWUuc3BsaXQoXCJAXCIpLG49XCJcIjt0Lmxlbmd0aD4xJiYobj10WzBdK1wiQFwiLGU9dFsxXSk7dmFyIG89KGU9ZS5yZXBsYWNlKHYsXCIuXCIpKS5zcGxpdChcIi5cIikscz1EKG8scikuam9pbihcIi5cIik7cmV0dXJuIG4rc31mdW5jdGlvbiBxKGUpe2Zvcih2YXIgcix0LG49W10sbz0wLHM9ZS5sZW5ndGg7bzxzOykocj1lLmNoYXJDb2RlQXQobysrKSk+PTU1Mjk2JiZyPD01NjMxOSYmbzxzPzU2MzIwPT0oNjQ1MTImKHQ9ZS5jaGFyQ29kZUF0KG8rKykpKT9uLnB1c2goKCgxMDIzJnIpPDwxMCkrKDEwMjMmdCkrNjU1MzYpOihuLnB1c2gociksby0tKTpuLnB1c2gocik7cmV0dXJuIG59ZnVuY3Rpb24gRihlKXtyZXR1cm4gRChlLGZ1bmN0aW9uKGUpe3ZhciByPVwiXCI7cmV0dXJuIGU+NjU1MzUmJihyKz1BKChlLT02NTUzNik+Pj4xMCYxMDIzfDU1Mjk2KSxlPTU2MzIwfDEwMjMmZSkscis9QShlKX0pLmpvaW4oXCJcIil9ZnVuY3Rpb24gUyhlLHIpe3JldHVybiBlKzIyKzc1KihlPDI2KS0oKDAhPXIpPDw1KX1mdW5jdGlvbiBMKGUscix0KXt2YXIgbj0wO2ZvcihlPXQ/QyhlL2QpOmU+PjEsZSs9QyhlL3IpO2U+eCpoPj4xO24rPXUpZT1DKGUveCk7cmV0dXJuIEMobisoeCsxKSplLyhlK2YpKX1mdW5jdGlvbiB6KGUpe3ZhciByLHQsbixvLHMsaSxhLGwsZixkLGssYj1bXSx2PWUubGVuZ3RoLHk9MCx4PV8sQT1tO2ZvcigodD1lLmxhc3RJbmRleE9mKGcpKTwwJiYodD0wKSxuPTA7bjx0OysrbillLmNoYXJDb2RlQXQobik+PTEyOCYmdyhcIm5vdC1iYXNpY1wiKSxiLnB1c2goZS5jaGFyQ29kZUF0KG4pKTtmb3Iobz10PjA/dCsxOjA7bzx2Oyl7Zm9yKHM9eSxpPTEsYT11O28+PXYmJncoXCJpbnZhbGlkLWlucHV0XCIpLGs9ZS5jaGFyQ29kZUF0KG8rKyksKChsPWstNDg8MTA/ay0yMjprLTY1PDI2P2stNjU6ay05NzwyNj9rLTk3OnUpPj11fHxsPkMoKGMteSkvaSkpJiZ3KFwib3ZlcmZsb3dcIikseSs9bCppLCEobDwoZj1hPD1BP3A6YT49QStoP2g6YS1BKSk7YSs9dSlpPkMoYy8oZD11LWYpKSYmdyhcIm92ZXJmbG93XCIpLGkqPWQ7cj1iLmxlbmd0aCsxLEE9TCh5LXMsciwwPT1zKSxDKHkvcik+Yy14JiZ3KFwib3ZlcmZsb3dcIikseCs9Qyh5L3IpLHklPXIsYi5zcGxpY2UoeSsrLDAseCl9cmV0dXJuIEYoYil9ZnVuY3Rpb24gVChlKXt2YXIgcix0LG4sbyxzLGksYSxsLGYsZCxrLGIsdix5LHgsRD1bXTtmb3IoZT1xKGUpLGI9ZS5sZW5ndGgscj1fLHQ9MCxzPW0saT0wO2k8YjsrK2kpKGs9ZVtpXSk8MTI4JiZELnB1c2goQShrKSk7Zm9yKG49bz1ELmxlbmd0aCxvJiZELnB1c2goZyk7bjxiOyl7Zm9yKGE9YyxpPTA7aTxiOysraSkoaz1lW2ldKT49ciYmazxhJiYoYT1rKTtmb3IoYS1yPkMoKGMtdCkvKHY9bisxKSkmJncoXCJvdmVyZmxvd1wiKSx0Kz0oYS1yKSp2LHI9YSxpPTA7aTxiOysraSlpZigoaz1lW2ldKTxyJiYrK3Q+YyYmdyhcIm92ZXJmbG93XCIpLGs9PXIpe2ZvcihsPXQsZj11OyEobDwoZD1mPD1zP3A6Zj49cytoP2g6Zi1zKSk7Zis9dSl4PWwtZCx5PXUtZCxELnB1c2goQShTKGQreCV5LDApKSksbD1DKHgveSk7RC5wdXNoKEEoUyhsLDApKSkscz1MKHQsdixuPT1vKSx0PTAsKytufSsrdCwrK3J9cmV0dXJuIEQuam9pbihcIlwiKX1pZihhPXt2ZXJzaW9uOlwiMS40LjFcIix1Y3MyOntkZWNvZGU6cSxlbmNvZGU6Rn0sZGVjb2RlOnosZW5jb2RlOlQsdG9BU0NJSTpmdW5jdGlvbihlKXtyZXR1cm4gRShlLGZ1bmN0aW9uKGUpe3JldHVybiBiLnRlc3QoZSk/XCJ4bi0tXCIrVChlKTplfSl9LHRvVW5pY29kZTpmdW5jdGlvbihlKXtyZXR1cm4gRShlLGZ1bmN0aW9uKGUpe3JldHVybiBrLnRlc3QoZSk/eihlLnNsaWNlKDQpLnRvTG93ZXJDYXNlKCkpOmV9KX19LG8mJnMpaWYodC5leHBvcnRzPT1vKXMuZXhwb3J0cz1hO2Vsc2UgZm9yKGwgaW4gYSlhLmhhc093blByb3BlcnR5KGwpJiYob1tsXT1hW2xdKTtlbHNlIHIucHVueWNvZGU9YX0odGhpcyl9KS5jYWxsKHRoaXMsdm9pZCAwIT09ZT9lOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBzZWxmP3NlbGY6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdz93aW5kb3c6e30pfSx7fV0sNjE6W2Z1bmN0aW9uKGUscix0KXtyLmV4cG9ydHM9L1tcXDAtXFx4MUZcXHg3Ri1cXHg5Rl0vfSx7fV0sNjI6W2Z1bmN0aW9uKGUscix0KXtyLmV4cG9ydHM9L1tcXHhBRFxcdTA2MDAtXFx1MDYwNVxcdTA2MUNcXHUwNkREXFx1MDcwRlxcdTA4RTJcXHUxODBFXFx1MjAwQi1cXHUyMDBGXFx1MjAyQS1cXHUyMDJFXFx1MjA2MC1cXHUyMDY0XFx1MjA2Ni1cXHUyMDZGXFx1RkVGRlxcdUZGRjktXFx1RkZGQl18XFx1RDgwNFtcXHVEQ0JEXFx1RENDRF18XFx1RDgyRltcXHVEQ0EwLVxcdURDQTNdfFxcdUQ4MzRbXFx1REQ3My1cXHVERDdBXXxcXHVEQjQwW1xcdURDMDFcXHVEQzIwLVxcdURDN0ZdL30se31dLDYzOltmdW5jdGlvbihlLHIsdCl7ci5leHBvcnRzPS9bIS0jJS1cXCosLVxcLzo7XFw/QFxcWy1cXF1fXFx7XFx9XFx4QTFcXHhBN1xceEFCXFx4QjZcXHhCN1xceEJCXFx4QkZcXHUwMzdFXFx1MDM4N1xcdTA1NUEtXFx1MDU1RlxcdTA1ODlcXHUwNThBXFx1MDVCRVxcdTA1QzBcXHUwNUMzXFx1MDVDNlxcdTA1RjNcXHUwNUY0XFx1MDYwOVxcdTA2MEFcXHUwNjBDXFx1MDYwRFxcdTA2MUJcXHUwNjFFXFx1MDYxRlxcdTA2NkEtXFx1MDY2RFxcdTA2RDRcXHUwNzAwLVxcdTA3MERcXHUwN0Y3LVxcdTA3RjlcXHUwODMwLVxcdTA4M0VcXHUwODVFXFx1MDk2NFxcdTA5NjVcXHUwOTcwXFx1MDlGRFxcdTBBNzZcXHUwQUYwXFx1MEM4NFxcdTBERjRcXHUwRTRGXFx1MEU1QVxcdTBFNUJcXHUwRjA0LVxcdTBGMTJcXHUwRjE0XFx1MEYzQS1cXHUwRjNEXFx1MEY4NVxcdTBGRDAtXFx1MEZENFxcdTBGRDlcXHUwRkRBXFx1MTA0QS1cXHUxMDRGXFx1MTBGQlxcdTEzNjAtXFx1MTM2OFxcdTE0MDBcXHUxNjZEXFx1MTY2RVxcdTE2OUJcXHUxNjlDXFx1MTZFQi1cXHUxNkVEXFx1MTczNVxcdTE3MzZcXHUxN0Q0LVxcdTE3RDZcXHUxN0Q4LVxcdTE3REFcXHUxODAwLVxcdTE4MEFcXHUxOTQ0XFx1MTk0NVxcdTFBMUVcXHUxQTFGXFx1MUFBMC1cXHUxQUE2XFx1MUFBOC1cXHUxQUFEXFx1MUI1QS1cXHUxQjYwXFx1MUJGQy1cXHUxQkZGXFx1MUMzQi1cXHUxQzNGXFx1MUM3RVxcdTFDN0ZcXHUxQ0MwLVxcdTFDQzdcXHUxQ0QzXFx1MjAxMC1cXHUyMDI3XFx1MjAzMC1cXHUyMDQzXFx1MjA0NS1cXHUyMDUxXFx1MjA1My1cXHUyMDVFXFx1MjA3RFxcdTIwN0VcXHUyMDhEXFx1MjA4RVxcdTIzMDgtXFx1MjMwQlxcdTIzMjlcXHUyMzJBXFx1Mjc2OC1cXHUyNzc1XFx1MjdDNVxcdTI3QzZcXHUyN0U2LVxcdTI3RUZcXHUyOTgzLVxcdTI5OThcXHUyOUQ4LVxcdTI5REJcXHUyOUZDXFx1MjlGRFxcdTJDRjktXFx1MkNGQ1xcdTJDRkVcXHUyQ0ZGXFx1MkQ3MFxcdTJFMDAtXFx1MkUyRVxcdTJFMzAtXFx1MkU0RVxcdTMwMDEtXFx1MzAwM1xcdTMwMDgtXFx1MzAxMVxcdTMwMTQtXFx1MzAxRlxcdTMwMzBcXHUzMDNEXFx1MzBBMFxcdTMwRkJcXHVBNEZFXFx1QTRGRlxcdUE2MEQtXFx1QTYwRlxcdUE2NzNcXHVBNjdFXFx1QTZGMi1cXHVBNkY3XFx1QTg3NC1cXHVBODc3XFx1QThDRVxcdUE4Q0ZcXHVBOEY4LVxcdUE4RkFcXHVBOEZDXFx1QTkyRVxcdUE5MkZcXHVBOTVGXFx1QTlDMS1cXHVBOUNEXFx1QTlERVxcdUE5REZcXHVBQTVDLVxcdUFBNUZcXHVBQURFXFx1QUFERlxcdUFBRjBcXHVBQUYxXFx1QUJFQlxcdUZEM0VcXHVGRDNGXFx1RkUxMC1cXHVGRTE5XFx1RkUzMC1cXHVGRTUyXFx1RkU1NC1cXHVGRTYxXFx1RkU2M1xcdUZFNjhcXHVGRTZBXFx1RkU2QlxcdUZGMDEtXFx1RkYwM1xcdUZGMDUtXFx1RkYwQVxcdUZGMEMtXFx1RkYwRlxcdUZGMUFcXHVGRjFCXFx1RkYxRlxcdUZGMjBcXHVGRjNCLVxcdUZGM0RcXHVGRjNGXFx1RkY1QlxcdUZGNURcXHVGRjVGLVxcdUZGNjVdfFxcdUQ4MDBbXFx1REQwMC1cXHVERDAyXFx1REY5RlxcdURGRDBdfFxcdUQ4MDFcXHVERDZGfFxcdUQ4MDJbXFx1REM1N1xcdUREMUZcXHVERDNGXFx1REU1MC1cXHVERTU4XFx1REU3RlxcdURFRjAtXFx1REVGNlxcdURGMzktXFx1REYzRlxcdURGOTktXFx1REY5Q118XFx1RDgwM1tcXHVERjU1LVxcdURGNTldfFxcdUQ4MDRbXFx1REM0Ny1cXHVEQzREXFx1RENCQlxcdURDQkNcXHVEQ0JFLVxcdURDQzFcXHVERDQwLVxcdURENDNcXHVERDc0XFx1REQ3NVxcdUREQzUtXFx1RERDOFxcdUREQ0RcXHVERERCXFx1RERERC1cXHVERERGXFx1REUzOC1cXHVERTNEXFx1REVBOV18XFx1RDgwNVtcXHVEQzRCLVxcdURDNEZcXHVEQzVCXFx1REM1RFxcdURDQzZcXHVEREMxLVxcdURERDdcXHVERTQxLVxcdURFNDNcXHVERTYwLVxcdURFNkNcXHVERjNDLVxcdURGM0VdfFxcdUQ4MDZbXFx1REMzQlxcdURFM0YtXFx1REU0NlxcdURFOUEtXFx1REU5Q1xcdURFOUUtXFx1REVBMl18XFx1RDgwN1tcXHVEQzQxLVxcdURDNDVcXHVEQzcwXFx1REM3MVxcdURFRjdcXHVERUY4XXxcXHVEODA5W1xcdURDNzAtXFx1REM3NF18XFx1RDgxQVtcXHVERTZFXFx1REU2RlxcdURFRjVcXHVERjM3LVxcdURGM0JcXHVERjQ0XXxcXHVEODFCW1xcdURFOTctXFx1REU5QV18XFx1RDgyRlxcdURDOUZ8XFx1RDgzNltcXHVERTg3LVxcdURFOEJdfFxcdUQ4M0FbXFx1REQ1RVxcdURENUZdL30se31dLDY0OltmdW5jdGlvbihlLHIsdCl7ci5leHBvcnRzPS9bIFxceEEwXFx1MTY4MFxcdTIwMDAtXFx1MjAwQVxcdTIwMjhcXHUyMDI5XFx1MjAyRlxcdTIwNUZcXHUzMDAwXS99LHt9XSw2NTpbZnVuY3Rpb24oZSxyLHQpe3QuQW55PWUoXCIuL3Byb3BlcnRpZXMvQW55L3JlZ2V4XCIpLHQuQ2M9ZShcIi4vY2F0ZWdvcmllcy9DYy9yZWdleFwiKSx0LkNmPWUoXCIuL2NhdGVnb3JpZXMvQ2YvcmVnZXhcIiksdC5QPWUoXCIuL2NhdGVnb3JpZXMvUC9yZWdleFwiKSx0Llo9ZShcIi4vY2F0ZWdvcmllcy9aL3JlZ2V4XCIpfSx7XCIuL2NhdGVnb3JpZXMvQ2MvcmVnZXhcIjo2MSxcIi4vY2F0ZWdvcmllcy9DZi9yZWdleFwiOjYyLFwiLi9jYXRlZ29yaWVzL1AvcmVnZXhcIjo2MyxcIi4vY2F0ZWdvcmllcy9aL3JlZ2V4XCI6NjQsXCIuL3Byb3BlcnRpZXMvQW55L3JlZ2V4XCI6NjZ9XSw2NjpbZnVuY3Rpb24oZSxyLHQpe3IuZXhwb3J0cz0vW1xcMC1cXHVEN0ZGXFx1RTAwMC1cXHVGRkZGXXxbXFx1RDgwMC1cXHVEQkZGXVtcXHVEQzAwLVxcdURGRkZdfFtcXHVEODAwLVxcdURCRkZdKD8hW1xcdURDMDAtXFx1REZGRl0pfCg/OlteXFx1RDgwMC1cXHVEQkZGXXxeKVtcXHVEQzAwLVxcdURGRkZdL30se31dLDY3OltmdW5jdGlvbihlLHIsdCl7ci5leHBvcnRzPWUoXCIuL2xpYi9cIil9LHtcIi4vbGliL1wiOjl9XX0se30sWzY3XSkoNjcpfSh0PXtleHBvcnRzOnt9fSx0LmV4cG9ydHMpLHQuZXhwb3J0cyk7ZnVuY3Rpb24gbyhlLHIpe3ZhciB0LG4sbyxzLGk9ZS5wb3MsYT1lLnNyYy5jaGFyQ29kZUF0KGkpO2lmKHIpcmV0dXJuITE7aWYoNDMhPT1hKXJldHVybiExO2lmKG89KG49ZS5zY2FuRGVsaW1zKGUucG9zLCEwKSkubGVuZ3RoLHM9U3RyaW5nLmZyb21DaGFyQ29kZShhKSxvPDIpcmV0dXJuITE7Zm9yKG8lMiYmKGUucHVzaChcInRleHRcIixcIlwiLDApLmNvbnRlbnQ9cyxvLS0pLHQ9MDt0PG87dCs9MillLnB1c2goXCJ0ZXh0XCIsXCJcIiwwKS5jb250ZW50PXMrcyxlLmRlbGltaXRlcnMucHVzaCh7bWFya2VyOmEsanVtcDp0LHRva2VuOmUudG9rZW5zLmxlbmd0aC0xLGxldmVsOmUubGV2ZWwsZW5kOi0xLG9wZW46bi5jYW5fb3BlbixjbG9zZTpuLmNhbl9jbG9zZX0pO3JldHVybiBlLnBvcys9bi5sZW5ndGgsITB9ZnVuY3Rpb24gcyhlKXt2YXIgcix0LG4sbyxzLGk9W10sYT1lLmRlbGltaXRlcnMsbD1lLmRlbGltaXRlcnMubGVuZ3RoO2ZvcihyPTA7cjxsO3IrKyk0Mz09PShuPWFbcl0pLm1hcmtlciYmLTEhPT1uLmVuZCYmKG89YVtuLmVuZF0sKHM9ZS50b2tlbnNbbi50b2tlbl0pLnR5cGU9XCJ1X29wZW5cIixzLnRhZz1cInVcIixzLm5lc3Rpbmc9MSxzLm1hcmt1cD1cIisrXCIscy5jb250ZW50PVwiXCIsKHM9ZS50b2tlbnNbby50b2tlbl0pLnR5cGU9XCJ1X2Nsb3NlXCIscy50YWc9XCJ1XCIscy5uZXN0aW5nPS0xLHMubWFya3VwPVwiKytcIixzLmNvbnRlbnQ9XCJcIixcInRleHRcIj09PWUudG9rZW5zW28udG9rZW4tMV0udHlwZSYmXCIrXCI9PT1lLnRva2Vuc1tvLnRva2VuLTFdLmNvbnRlbnQmJmkucHVzaChvLnRva2VuLTEpKTtmb3IoO2kubGVuZ3RoOyl7Zm9yKHQ9KHI9aS5wb3AoKSkrMTt0PGUudG9rZW5zLmxlbmd0aCYmXCJ1X2Nsb3NlXCI9PT1lLnRva2Vuc1t0XS50eXBlOyl0Kys7ciE9PS0tdCYmKHM9ZS50b2tlbnNbdF0sZS50b2tlbnNbdF09ZS50b2tlbnNbcl0sZS50b2tlbnNbcl09cyl9fXZhciBpPWZ1bmN0aW9uKGUpe2UuaW5saW5lLnJ1bGVyLmFmdGVyKFwiZW1waGFzaXNcIixcInVuZGVybGluZVwiLG8pLGUuaW5saW5lLnJ1bGVyMi5hZnRlcihcImVtcGhhc2lzXCIsXCJ1bmRlcmxpbmVcIixzKX07cmV0dXJuIG5ldyhmdW5jdGlvbigpe2Z1bmN0aW9uIGUoKXt0aGlzLl9tZD1uKFwiY29tbW9ubWFya1wiKSx0aGlzLl9tZC51c2UoaSl9cmV0dXJuIGUucHJvdG90eXBlLnRvSFRNTD1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5fbWQucmVuZGVyKGUpfSxlfSgpKX0pOyIsImltcG9ydCBpdGVyYXRvciBmcm9tICdtYXJrZG93bi1pdC1mb3ItaW5saW5lJztcbmltcG9ydCBSdGZDb252ZXJ0ZXIgZnJvbSAnQHlleHQvcnRmLWNvbnZlcnRlcic7XG5pbXBvcnQgeyBBbnN3ZXJzQ29yZUVycm9yIH0gZnJvbSAnLi4vZXJyb3JzL2Vycm9ycyc7XG5cbi8qKlxuICogVGhpcyBjbGFzcyBsZXZlcmFnZXMgdGhlIHtAbGluayBSdGZDb252ZXJ0ZXJ9IGxpYnJhcnkgdG8gcGVyZm9ybSBSaWNoIFRleHQgdG9cbiAqIEhUTUwgY29udmVyc2lvbnMuXG4gKi9cbmNsYXNzIFJpY2hUZXh0Rm9ybWF0dGVySW1wbCB7XG4gIC8qKlxuICAgKiBHZW5lcmF0ZXMgYW4gSFRNTCByZXByZXNlbnRhdGlvbiBvZiB0aGUgcHJvdmlkZWQgUmljaCBUZXh0IGZpZWxkIHZhbHVlLiBOb3RlIHRoYXRcbiAgICogdGhlIEhUTUwgd2lsbCBjb250YWluIGEgd3JhcHBlciBkaXYuIFRoaXMgaXMgdG8gc3VwcG9ydCBjbGljayBhbmFseXRpY3MgZm9yIFJpY2ggVGV4dFxuICAgKiBsaW5rcy5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGZpZWxkVmFsdWUgQSBSaWNoIFRleHQgZmllbGQgdmFsdWUuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBmaWVsZE5hbWUgVGhlIG5hbWUgb2YgdGhlIGZpZWxkLCB0byBiZSBpbmNsdWRlZCBpbiB0aGUgcGF5bG9hZCBvZiBhIGNsaWNrXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5hbHl0aWNzIGV2ZW50LiBUaGlzIHBhcmFtZXRlciBpcyBvcHRpb25hbC5cbiAgICogQHBhcmFtIHtPYmplY3R8c3RyaW5nfSB0YXJnZXRDb25maWcgQ29uZmlndXJhdGlvbiBvYmplY3Qgc3BlY2lmeWluZyB0aGUgJ3RhcmdldCcgYmVoYXZpb3IgZm9yXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUgdmFyaW91cyB0eXBlcyBvZiBsaW5rcy4gSWYgYSBzdHJpbmcgaXMgcHJvdmlkZWQsIGl0IGlzIGFzc3VtZWQgdGhhdFxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgaXMgdGhlICd0YXJnZXQnIGJlaGF2aW9yIGFjcm9zcyBhbGwgdHlwZXMgb2YgbGlua3MuIFRoaXMgcGFyYW1ldGVyIGlzIG9wdGlvbmFsLlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgSFRNTCByZXByZXNlbnRhdGlvbiBvZiB0aGUgZmllbGQgdmFsdWUsIHNlcmlhbGl6ZWQgYXMgYSBzdHJpbmcuXG4gICAqL1xuICBmb3JtYXQgKGZpZWxkVmFsdWUsIGZpZWxkTmFtZSwgdGFyZ2V0Q29uZmlnKSB7XG4gICAgaWYgKHR5cGVvZiBmaWVsZFZhbHVlICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IEFuc3dlcnNDb3JlRXJyb3IoXG4gICAgICAgIGBSaWNoIHRleHQgXCIke2ZpZWxkVmFsdWV9XCIgbmVlZHMgdG8gYmUgYSBzdHJpbmcuIEN1cnJlbnRseSBpcyBhICR7dHlwZW9mIGZpZWxkVmFsdWV9YFxuICAgICAgKTtcbiAgICB9XG5cbiAgICBjb25zdCBwbHVnaW5OYW1lID0gdGhpcy5fZ2VuZXJhdGVQbHVnaW5OYW1lKCk7XG4gICAgUnRmQ29udmVydGVyLmFkZFBsdWdpbihcbiAgICAgIGl0ZXJhdG9yLFxuICAgICAgcGx1Z2luTmFtZSxcbiAgICAgICdsaW5rX29wZW4nLFxuICAgICAgKHRva2VucywgaWR4KSA9PiB0aGlzLl91cmxUcmFuc2Zvcm1lcih0b2tlbnMsIGlkeCwgdGFyZ2V0Q29uZmlnKSk7XG5cbiAgICBmaWVsZE5hbWUgPSBmaWVsZE5hbWUgfHwgJyc7XG4gICAgY29uc3QgaHRtbCA9XG4gICAgICBgPGRpdiBjbGFzcz1cImpzLXl4dC1ydGZWYWx1ZVwiIGRhdGEtZmllbGQtbmFtZT1cIiR7ZmllbGROYW1lfVwiPlxcbmAgK1xuICAgICAgYCR7UnRmQ29udmVydGVyLnRvSFRNTChmaWVsZFZhbHVlKX1gICtcbiAgICAgICc8L2Rpdj4nO1xuXG4gICAgLy8gQmVjYXVzZSBhbGwgaW52b2NhdGlvbnMgb2YgdGhpcyBtZXRob2Qgc2hhcmUgdGhlIHNhbWUge0BsaW5rIFJ0ZkNvbnZlcnRlcn0sIHdlIG11c3QgbWFrZSBzdXJlIHRvXG4gICAgLy8gZGlzYWJsZSB0aGUgcGx1Z2luIGFkZGVkIGFib3ZlLiBPdGhlcndpc2UsIGl0IHdpbGwgYmUgYXBwbGllZCBpbiBhbGwgc3Vic2VxdWVudCBjb252ZXJzaW9ucy5cbiAgICBSdGZDb252ZXJ0ZXIuZGlzYWJsZVBsdWdpbihwbHVnaW5OYW1lKTtcblxuICAgIHJldHVybiBodG1sO1xuICB9XG5cbiAgLyoqXG4gICAqIEFuIGlubGluZSB0b2tlbiBwYXJzZXIgZm9yIHVzZSB3aXRoIHRoZSB7QGxpbmsgaXRlcmF0b3J9IE1hcmtkb3duLWl0IHBsdWdpbi5cbiAgICogVGhpcyB0b2tlbiBwYXJzZXIgYWRkcyBhIGN0YS10eXBlIGRhdGEgYXR0cmlidXRlIHRvIGFueSBsaW5rIGl0IGVuY291bnRlcnMuXG4gICAqL1xuICBfdXJsVHJhbnNmb3JtZXIgKHRva2VucywgaWR4LCB0YXJnZXRDb25maWcpIHtcbiAgICB0YXJnZXRDb25maWcgPSB0YXJnZXRDb25maWcgfHwge307XG4gICAgbGV0IHRhcmdldDtcbiAgICBpZiAodHlwZW9mIHRhcmdldENvbmZpZyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRhcmdldCA9IHRhcmdldENvbmZpZztcbiAgICB9XG5cbiAgICBjb25zdCBocmVmID0gdG9rZW5zW2lkeF0uYXR0ckdldCgnaHJlZicpO1xuICAgIGxldCBjdGFUeXBlO1xuICAgIGlmIChocmVmLnN0YXJ0c1dpdGgoJ21haWx0bycpKSB7XG4gICAgICBjdGFUeXBlID0gJ0VNQUlMJztcbiAgICAgIHRhcmdldCA9IHRhcmdldCB8fCB0YXJnZXRDb25maWcuZW1haWw7XG4gICAgfSBlbHNlIGlmIChocmVmLnN0YXJ0c1dpdGgoJ3RlbCcpKSB7XG4gICAgICBjdGFUeXBlID0gJ1RBUF9UT19DQUxMJztcbiAgICAgIHRhcmdldCA9IHRhcmdldCB8fCB0YXJnZXRDb25maWcucGhvbmU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGN0YVR5cGUgPSAnVklFV19XRUJTSVRFJztcbiAgICAgIHRhcmdldCA9IHRhcmdldCB8fCB0YXJnZXRDb25maWcudXJsO1xuICAgIH1cblxuICAgIHRva2Vuc1tpZHhdLmF0dHJTZXQoJ2RhdGEtY3RhLXR5cGUnLCBjdGFUeXBlKTtcbiAgICB0YXJnZXQgJiYgdG9rZW5zW2lkeF0uYXR0clNldCgndGFyZ2V0JywgdGFyZ2V0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIGZ1bmN0aW9uIHRoYXQgZ2VuZXJhdGVzIGEgdW5pcXVlIFVVSUQgdG8gc2VydmUgYXMgdGhlIG5hbWUgZm9yIGFcbiAgICogTWFya2Rvd24taXQgcGx1Z2luLlxuICAgKlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSB0aGUgVVVJRC5cbiAgICovXG4gIF9nZW5lcmF0ZVBsdWdpbk5hbWUgKCkge1xuICAgIGZ1bmN0aW9uIHM0ICgpIHtcbiAgICAgIHJldHVybiBNYXRoLmZsb29yKCgxICsgTWF0aC5yYW5kb20oKSkgKiAweDEwMDAwKS50b1N0cmluZygxNikuc3Vic3RyaW5nKDEpO1xuICAgIH1cbiAgICByZXR1cm4gczQoKSArIHM0KCkgKyAnLScgKyBzNCgpICsgJy0nICsgczQoKSArICctJyArIHM0KCkgKyAnLScgKyBzNCgpICsgczQoKSArIHM0KCk7XG4gIH1cbn1cblxuY29uc3QgUmljaFRleHRGb3JtYXR0ZXIgPSBuZXcgUmljaFRleHRGb3JtYXR0ZXJJbXBsKCk7XG5leHBvcnQgZGVmYXVsdCBSaWNoVGV4dEZvcm1hdHRlcjtcbiIsImV4cG9ydCBmdW5jdGlvbiBpc1ZhbGlkQ29udGV4dCAoY29udGV4dCkge1xuICAvLyBzaG91bGQgYmUgYm90aCB2YWxpZCBKU09OIGFuZCBhIG1hcFxuICBsZXQgcGFyc2VkO1xuICB0cnkge1xuICAgIHBhcnNlZCA9IEpTT04ucGFyc2UoY29udGV4dCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAoIXBhcnNlZCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiB0eXBlb2YgcGFyc2VkID09PSAnb2JqZWN0JyAmJiAhQXJyYXkuaXNBcnJheShwYXJzZWQpO1xufVxuIiwiLyoqIEBtb2R1bGUgKi9cblxuaW1wb3J0IENvcmUgZnJvbSAnLi9jb3JlL2NvcmUnO1xuaW1wb3J0IGNzc1ZhcnMgZnJvbSAnY3NzLXZhcnMtcG9ueWZpbGwnO1xuXG5pbXBvcnQge1xuICBEZWZhdWx0VGVtcGxhdGVzTG9hZGVyLFxuICBSZW5kZXJlcnMsXG4gIERPTSxcbiAgU2VhcmNoUGFyYW1zXG59IGZyb20gJy4vdWkvaW5kZXgnO1xuaW1wb3J0IENvbXBvbmVudCBmcm9tICcuL3VpL2NvbXBvbmVudHMvY29tcG9uZW50JztcblxuaW1wb3J0IEVycm9yUmVwb3J0ZXIgZnJvbSAnLi9jb3JlL2Vycm9ycy9lcnJvcnJlcG9ydGVyJztcbmltcG9ydCBDb25zb2xlRXJyb3JSZXBvcnRlciBmcm9tICcuL2NvcmUvZXJyb3JzL2NvbnNvbGVlcnJvcnJlcG9ydGVyJztcbmltcG9ydCB7IEFuYWx5dGljc1JlcG9ydGVyLCBOb29wQW5hbHl0aWNzUmVwb3J0ZXIgfSBmcm9tICcuL2NvcmUnO1xuaW1wb3J0IFBlcnNpc3RlbnRTdG9yYWdlIGZyb20gJy4vdWkvc3RvcmFnZS9wZXJzaXN0ZW50c3RvcmFnZSc7XG5pbXBvcnQgR2xvYmFsU3RvcmFnZSBmcm9tICcuL2NvcmUvc3RvcmFnZS9nbG9iYWxzdG9yYWdlJztcbmltcG9ydCB7IEFuc3dlcnNDb21wb25lbnRFcnJvciB9IGZyb20gJy4vY29yZS9lcnJvcnMvZXJyb3JzJztcbmltcG9ydCBBbmFseXRpY3NFdmVudCBmcm9tICcuL2NvcmUvYW5hbHl0aWNzL2FuYWx5dGljc2V2ZW50JztcbmltcG9ydCBTdG9yYWdlS2V5cyBmcm9tICcuL2NvcmUvc3RvcmFnZS9zdG9yYWdla2V5cyc7XG5pbXBvcnQgU2VhcmNoQ29uZmlnIGZyb20gJy4vY29yZS9tb2RlbHMvc2VhcmNoY29uZmlnJztcbmltcG9ydCBBdXRvQ29tcGxldGVBcGkgZnJvbSAnLi9jb3JlL3NlYXJjaC9hdXRvY29tcGxldGVhcGknO1xuaW1wb3J0IE1vY2tBdXRvQ29tcGxldGVTZXJ2aWNlIGZyb20gJy4vY29yZS9zZWFyY2gvbW9ja2F1dG9jb21wbGV0ZXNlcnZpY2UnO1xuaW1wb3J0IFF1ZXN0aW9uQW5zd2VyQXBpIGZyb20gJy4vY29yZS9zZWFyY2gvcXVlc3Rpb25hbnN3ZXJhcGknO1xuaW1wb3J0IE1vY2tRdWVzdGlvbkFuc3dlclNlcnZpY2UgZnJvbSAnLi9jb3JlL3NlYXJjaC9tb2NrcXVlc3Rpb25hbnN3ZXJzZXJ2aWNlJztcbmltcG9ydCBTZWFyY2hBcGkgZnJvbSAnLi9jb3JlL3NlYXJjaC9zZWFyY2hhcGknO1xuaW1wb3J0IE1vY2tTZWFyY2hTZXJ2aWNlIGZyb20gJy4vY29yZS9zZWFyY2gvbW9ja3NlYXJjaHNlcnZpY2UnO1xuaW1wb3J0IENvbXBvbmVudE1hbmFnZXIgZnJvbSAnLi91aS9jb21wb25lbnRzL2NvbXBvbmVudG1hbmFnZXInO1xuaW1wb3J0IFZlcnRpY2FsUGFnZXNDb25maWcgZnJvbSAnLi9jb3JlL21vZGVscy92ZXJ0aWNhbHBhZ2VzY29uZmlnJztcbmltcG9ydCB7IFNBTkRCT1gsIFBST0RVQ1RJT04gfSBmcm9tICcuL2NvcmUvY29uc3RhbnRzJztcbmltcG9ydCBNYXN0ZXJTd2l0Y2hBcGkgZnJvbSAnLi9jb3JlL3V0aWxzL21hc3RlcnN3aXRjaGFwaSc7XG5pbXBvcnQgUmljaFRleHRGb3JtYXR0ZXIgZnJvbSAnLi9jb3JlL3V0aWxzL3JpY2h0ZXh0Zm9ybWF0dGVyJztcbmltcG9ydCB7IGlzVmFsaWRDb250ZXh0IH0gZnJvbSAnLi9jb3JlL3V0aWxzL2FwaWNvbnRleHQnO1xuaW1wb3J0IEZpbHRlck5vZGVGYWN0b3J5IGZyb20gJy4vY29yZS9maWx0ZXJzL2ZpbHRlcm5vZGVmYWN0b3J5JztcbmltcG9ydCB7IHVybFdpdGhvdXRRdWVyeVBhcmFtc0FuZEhhc2ggfSBmcm9tICcuL2NvcmUvdXRpbHMvdXJsdXRpbHMnO1xuXG4vKiogQHR5cGVkZWYge2ltcG9ydCgnLi9jb3JlL3NlcnZpY2VzL3NlYXJjaHNlcnZpY2UnKS5kZWZhdWx0fSBTZWFyY2hTZXJ2aWNlICovXG4vKiogQHR5cGVkZWYge2ltcG9ydCgnLi9jb3JlL3NlcnZpY2VzL2F1dG9jb21wbGV0ZXNlcnZpY2UnKS5kZWZhdWx0fSBBdXRvQ29tcGxldGVTZXJ2aWNlICovXG4vKiogQHR5cGVkZWYge2ltcG9ydCgnLi9jb3JlL3NlcnZpY2VzL3F1ZXN0aW9uYW5zd2Vyc2VydmljZScpLmRlZmF1bHR9IFF1ZXN0aW9uQW5zd2VyU2VydmljZSAqL1xuLyoqIEB0eXBlZGVmIHtpbXBvcnQoJy4vY29yZS9zZXJ2aWNlcy9lcnJvcnJlcG9ydGVyc2VydmljZScpLmRlZmF1bHR9IEVycm9yUmVwb3J0ZXJTZXJ2aWNlICovXG4vKiogQHR5cGVkZWYge2ltcG9ydCgnLi9jb3JlL3NlcnZpY2VzL2FuYWx5dGljc3JlcG9ydGVyc2VydmljZScpLmRlZmF1bHR9IEFuYWx5dGljc1JlcG9ydGVyU2VydmljZSAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIFNlcnZpY2VzXG4gKiBAcHJvcGVydHkge1NlYXJjaFNlcnZpY2V9IHNlYXJjaFNlcnZpY2VcbiAqIEBwcm9wZXJ0eSB7QXV0b0NvbXBsZXRlU2VydmljZX0gYXV0b0NvbXBsZXRlU2VydmljZVxuICogQHByb3BlcnR5IHtRdWVzdGlvbkFuc3dlclNlcnZpY2V9IHF1ZXN0aW9uQW5zd2VyU2VydmljZVxuICogQHByb3BlcnR5IHtFcnJvclJlcG9ydGVyU2VydmljZX0gZXJyb3JSZXBvcnRlclNlcnZpY2VcbiAqL1xuXG5jb25zdCBERUZBVUxUUyA9IHtcbiAgbG9jYWxlOiAnZW4nXG59O1xuXG4vKipcbiAqIFRoZSBtYWluIEFuc3dlcnMgaW50ZXJmYWNlXG4gKi9cbmNsYXNzIEFuc3dlcnMge1xuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgaWYgKCFBbnN3ZXJzLnNldEluc3RhbmNlKHRoaXMpKSB7XG4gICAgICByZXR1cm4gQW5zd2Vycy5nZXRJbnN0YW5jZSgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgcmVmZXJlbmNlIHRvIHRoZSBDb21wb25lbnQgYmFzZSBjbGFzcyBmb3IgY3VzdG9tXG4gICAgICogY29tcG9uZW50cyB0byBleHRlbmRcbiAgICAgKi9cbiAgICB0aGlzLkNvbXBvbmVudCA9IENvbXBvbmVudDtcblxuICAgIC8qKlxuICAgICAqIEEgcmVmZXJlbmNlIHRvIHRoZSBBbmFseXRpY3NFdmVudCBiYXNlIGNsYXNzIGZvciByZXBvcnRpbmdcbiAgICAgKiBjdXN0b20gYW5hbHl0aWNzXG4gICAgICovXG4gICAgdGhpcy5BbmFseXRpY3NFdmVudCA9IEFuYWx5dGljc0V2ZW50O1xuXG4gICAgLyoqXG4gICAgICogQSByZWZlcmVuY2UgdG8gdGhlIEZpbHRlck5vZGVGYWN0b3J5IGNsYXNzIGZvciBjcmVhdGluZyB7QGxpbmsgRmlsdGVyTm9kZX1zLlxuICAgICAqL1xuICAgIHRoaXMuRmlsdGVyTm9kZUZhY3RvcnkgPSBGaWx0ZXJOb2RlRmFjdG9yeTtcblxuICAgIC8qKlxuICAgICAqIEEgcmVmZXJlbmNlIG9mIHRoZSByZW5kZXJlciB0byB1c2UgZm9yIHRoZSBjb21wb25lbnRzXG4gICAgICogVGhpcyBpcyBwcm92aWRlZCBkdXJpbmcgaW5pdGlhbGl6YXRpb24uXG4gICAgICogQHR5cGUge1JlbmRlcmVyfVxuICAgICAqL1xuICAgIHRoaXMucmVuZGVyZXIgPSBuZXcgUmVuZGVyZXJzLkhhbmRsZWJhcnMoKTtcblxuICAgIC8qKlxuICAgICAqIEEgcmVmZXJlbmNlIHRvIHRoZSBmb3JtYXRSaWNoVGV4dCBmdW5jdGlvbi5cbiAgICAgKiBAdHlwZSB7RnVuY3Rpb259XG4gICAgICovXG4gICAgdGhpcy5mb3JtYXRSaWNoVGV4dCA9IChtYXJrZG93biwgZXZlbnRPcHRpb25zRmllbGROYW1lLCB0YXJnZXRDb25maWcpID0+XG4gICAgICBSaWNoVGV4dEZvcm1hdHRlci5mb3JtYXQobWFya2Rvd24sIGV2ZW50T3B0aW9uc0ZpZWxkTmFtZSwgdGFyZ2V0Q29uZmlnKTtcblxuICAgIC8qKlxuICAgICAqIEEgbG9jYWwgcmVmZXJlbmNlIHRvIHRoZSBjb21wb25lbnQgbWFuYWdlclxuICAgICAqIEB0eXBlIHtDb21wb25lbnRNYW5hZ2VyfVxuICAgICAqL1xuICAgIHRoaXMuY29tcG9uZW50cyA9IENvbXBvbmVudE1hbmFnZXIuZ2V0SW5zdGFuY2UoKTtcblxuICAgIC8qKlxuICAgICAqIEEgbG9jYWwgcmVmZXJlbmNlIHRvIHRoZSBjb3JlIGFwaVxuICAgICAqIEB0eXBlIHtDb3JlfVxuICAgICAqL1xuICAgIHRoaXMuY29yZSA9IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBBIGNhbGxiYWNrIGZ1bmN0aW9uIHRvIGludm9rZSBvbmNlIHRoZSBsaWJyYXJ5IGlzIHJlYWR5LlxuICAgICAqIFR5cGljYWxseSBmaXJlZCBhZnRlciB0ZW1wbGF0ZXMgYXJlIGZldGNoZWQgZnJvbSBzZXJ2ZXIgZm9yIHJlbmRlcmluZy5cbiAgICAgKi9cbiAgICB0aGlzLl9vblJlYWR5ID0gZnVuY3Rpb24gKCkge307XG5cbiAgICAvKipcbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuX2VsaWdpYmxlRm9yQW5hbHl0aWNzID0gZmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiBAdHlwZSB7U2VydmljZXN9XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLl9zZXJ2aWNlcyA9IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBAdHlwZSB7QW5hbHl0aWNzUmVwb3J0ZXJTZXJ2aWNlfVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5fYW5hbHl0aWNzUmVwb3J0ZXJTZXJ2aWNlID0gbnVsbDtcbiAgfVxuXG4gIHN0YXRpYyBzZXRJbnN0YW5jZSAoaW5zdGFuY2UpIHtcbiAgICBpZiAoIXRoaXMuaW5zdGFuY2UpIHtcbiAgICAgIHRoaXMuaW5zdGFuY2UgPSBpbnN0YW5jZTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBzdGF0aWMgZ2V0SW5zdGFuY2UgKCkge1xuICAgIHJldHVybiB0aGlzLmluc3RhbmNlO1xuICB9XG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIHRoZSBTREsgd2l0aCB0aGUgcHJvdmlkZWQgY29uZmlndXJhdGlvbi4gTm90ZSB0aGF0IGJlZm9yZSBvblJlYWR5XG4gICAqIGlzIGV2ZXIgY2FsbGVkLCBhIGNoZWNrIHRvIHRoZSByZWxldmFudCBBbnN3ZXJzIFN0YXR1cyBwYWdlIGlzIG1hZGUuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIEFuc3dlcnMgY29uZmlndXJhdGlvbi5cbiAgICogQHBhcmFtIHtPYmplY3R9IHN0YXR1c1BhZ2UgQW4gb3ZlcnJpZGUgZm9yIHRoZSBiYXNlVXJsIGFuZCBlbmRwb2ludCBvZiB0aGVcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwZXJpZW5jZSdzIEFuc3dlcnMgU3RhdHVzIHBhZ2UuXG4gICAqL1xuICBpbml0IChjb25maWcsIHN0YXR1c1BhZ2UpIHtcbiAgICBjb25zdCBwYXJzZWRDb25maWcgPSB0aGlzLnBhcnNlQ29uZmlnKGNvbmZpZyk7XG4gICAgdGhpcy52YWxpZGF0ZUNvbmZpZyhwYXJzZWRDb25maWcpO1xuXG4gICAgcGFyc2VkQ29uZmlnLnNlYXJjaCA9IG5ldyBTZWFyY2hDb25maWcocGFyc2VkQ29uZmlnLnNlYXJjaCk7XG4gICAgcGFyc2VkQ29uZmlnLnZlcnRpY2FsUGFnZXMgPSBuZXcgVmVydGljYWxQYWdlc0NvbmZpZyhwYXJzZWRDb25maWcudmVydGljYWxQYWdlcyk7XG5cbiAgICBjb25zdCBnbG9iYWxTdG9yYWdlID0gbmV3IEdsb2JhbFN0b3JhZ2UoKTtcbiAgICBjb25zdCBwZXJzaXN0ZW50U3RvcmFnZSA9IG5ldyBQZXJzaXN0ZW50U3RvcmFnZSh7XG4gICAgICB1cGRhdGVMaXN0ZW5lcjogcGFyc2VkQ29uZmlnLm9uU3RhdGVDaGFuZ2UsXG4gICAgICByZXNldExpc3RlbmVyOiBkYXRhID0+IGdsb2JhbFN0b3JhZ2Uuc2V0QWxsKGRhdGEpXG4gICAgfSk7XG4gICAgZ2xvYmFsU3RvcmFnZS5zZXRBbGwocGVyc2lzdGVudFN0b3JhZ2UuZ2V0QWxsKCkpO1xuICAgIGdsb2JhbFN0b3JhZ2Uuc2V0KFN0b3JhZ2VLZXlzLlNFQVJDSF9DT05GSUcsIHBhcnNlZENvbmZpZy5zZWFyY2gpO1xuICAgIGdsb2JhbFN0b3JhZ2Uuc2V0KFN0b3JhZ2VLZXlzLlZFUlRJQ0FMX1BBR0VTX0NPTkZJRywgcGFyc2VkQ29uZmlnLnZlcnRpY2FsUGFnZXMpO1xuICAgIGdsb2JhbFN0b3JhZ2Uuc2V0KFN0b3JhZ2VLZXlzLkxPQ0FMRSwgcGFyc2VkQ29uZmlnLmxvY2FsZSk7XG4gICAgZ2xvYmFsU3RvcmFnZS5zZXQoU3RvcmFnZUtleXMuU0VTU0lPTlNfT1BUX0lOLCBwYXJzZWRDb25maWcuc2Vzc2lvblRyYWNraW5nRW5hYmxlZCk7XG4gICAgcGFyc2VkQ29uZmlnLm5vUmVzdWx0cyAmJiBnbG9iYWxTdG9yYWdlLnNldChTdG9yYWdlS2V5cy5OT19SRVNVTFRTX0NPTkZJRywgcGFyc2VkQ29uZmlnLm5vUmVzdWx0cyk7XG5cbiAgICBjb25zdCBjb250ZXh0ID0gZ2xvYmFsU3RvcmFnZS5nZXRTdGF0ZShTdG9yYWdlS2V5cy5BUElfQ09OVEVYVCk7XG4gICAgaWYgKGNvbnRleHQgJiYgIWlzVmFsaWRDb250ZXh0KGNvbnRleHQpKSB7XG4gICAgICBwZXJzaXN0ZW50U3RvcmFnZS5kZWxldGUoU3RvcmFnZUtleXMuQVBJX0NPTlRFWFQsIHRydWUpO1xuICAgICAgZ2xvYmFsU3RvcmFnZS5kZWxldGUoU3RvcmFnZUtleXMuQVBJX0NPTlRFWFQpO1xuICAgICAgY29uc29sZS5lcnJvcihgQ29udGV4dCBwYXJhbWV0ZXIgXCIke2NvbnRleHR9XCIgaXMgaW52YWxpZCwgb21pdHRpbmcgZnJvbSB0aGUgc2VhcmNoLmApO1xuICAgIH1cblxuICAgIGlmIChnbG9iYWxTdG9yYWdlLmdldFN0YXRlKFN0b3JhZ2VLZXlzLlJFRkVSUkVSX1BBR0VfVVJMKSA9PT0gbnVsbCkge1xuICAgICAgZ2xvYmFsU3RvcmFnZS5zZXQoXG4gICAgICAgIFN0b3JhZ2VLZXlzLlJFRkVSUkVSX1BBR0VfVVJMLFxuICAgICAgICB1cmxXaXRob3V0UXVlcnlQYXJhbXNBbmRIYXNoKGRvY3VtZW50LnJlZmVycmVyKVxuICAgICAgKTtcbiAgICB9XG5cbiAgICB0aGlzLl9tYXN0ZXJTd2l0Y2hBcGkgPSBzdGF0dXNQYWdlXG4gICAgICA/IG5ldyBNYXN0ZXJTd2l0Y2hBcGkoeyBhcGlLZXk6IHBhcnNlZENvbmZpZy5hcGlLZXksIC4uLnN0YXR1c1BhZ2UgfSwgZ2xvYmFsU3RvcmFnZSlcbiAgICAgIDogTWFzdGVyU3dpdGNoQXBpLmZyb20ocGFyc2VkQ29uZmlnLmFwaUtleSwgcGFyc2VkQ29uZmlnLmV4cGVyaWVuY2VLZXksIGdsb2JhbFN0b3JhZ2UpO1xuXG4gICAgdGhpcy5fc2VydmljZXMgPSBwYXJzZWRDb25maWcubW9ja1xuICAgICAgPyBnZXRNb2NrU2VydmljZXMoKVxuICAgICAgOiBnZXRTZXJ2aWNlcyhwYXJzZWRDb25maWcsIGdsb2JhbFN0b3JhZ2UpO1xuXG4gICAgdGhpcy5fZWxpZ2libGVGb3JBbmFseXRpY3MgPSBwYXJzZWRDb25maWcuYnVzaW5lc3NJZCAhPSBudWxsO1xuICAgIC8vIFRPRE8oYW11bGxpbmdzKTogSW5pdGlhbGl6ZSB3aXRoIG90aGVyIHNlcnZpY2VzXG4gICAgaWYgKHRoaXMuX2VsaWdpYmxlRm9yQW5hbHl0aWNzICYmIHBhcnNlZENvbmZpZy5tb2NrKSB7XG4gICAgICB0aGlzLl9hbmFseXRpY3NSZXBvcnRlclNlcnZpY2UgPSBuZXcgTm9vcEFuYWx5dGljc1JlcG9ydGVyKCk7XG4gICAgfSBlbHNlIGlmICh0aGlzLl9lbGlnaWJsZUZvckFuYWx5dGljcykge1xuICAgICAgdGhpcy5fYW5hbHl0aWNzUmVwb3J0ZXJTZXJ2aWNlID0gbmV3IEFuYWx5dGljc1JlcG9ydGVyKFxuICAgICAgICBwYXJzZWRDb25maWcuZXhwZXJpZW5jZUtleSxcbiAgICAgICAgcGFyc2VkQ29uZmlnLmV4cGVyaWVuY2VWZXJzaW9uLFxuICAgICAgICBwYXJzZWRDb25maWcuYnVzaW5lc3NJZCxcbiAgICAgICAgcGFyc2VkQ29uZmlnLmFuYWx5dGljc09wdGlvbnMsXG4gICAgICAgIHBhcnNlZENvbmZpZy5lbnZpcm9ubWVudCk7XG5cbiAgICAgIC8vIGxpc3RlbiB0byBxdWVyeSBpZCB1cGRhdGVzXG4gICAgICBnbG9iYWxTdG9yYWdlLm9uKCd1cGRhdGUnLCBTdG9yYWdlS2V5cy5RVUVSWV9JRCwgaWQgPT5cbiAgICAgICAgdGhpcy5fYW5hbHl0aWNzUmVwb3J0ZXJTZXJ2aWNlLnNldFF1ZXJ5SWQoaWQpXG4gICAgICApO1xuXG4gICAgICB0aGlzLmNvbXBvbmVudHMuc2V0QW5hbHl0aWNzUmVwb3J0ZXIodGhpcy5fYW5hbHl0aWNzUmVwb3J0ZXJTZXJ2aWNlKTtcbiAgICAgIGluaXRTY3JvbGxMaXN0ZW5lcih0aGlzLl9hbmFseXRpY3NSZXBvcnRlclNlcnZpY2UpO1xuICAgIH1cblxuICAgIHRoaXMuY29yZSA9IG5ldyBDb3JlKHtcbiAgICAgIGFwaUtleTogcGFyc2VkQ29uZmlnLmFwaUtleSxcbiAgICAgIGdsb2JhbFN0b3JhZ2U6IGdsb2JhbFN0b3JhZ2UsXG4gICAgICBwZXJzaXN0ZW50U3RvcmFnZTogcGVyc2lzdGVudFN0b3JhZ2UsXG4gICAgICBleHBlcmllbmNlS2V5OiBwYXJzZWRDb25maWcuZXhwZXJpZW5jZUtleSxcbiAgICAgIGZpZWxkRm9ybWF0dGVyczogcGFyc2VkQ29uZmlnLmZpZWxkRm9ybWF0dGVycyxcbiAgICAgIGV4cGVyaWVuY2VWZXJzaW9uOiBwYXJzZWRDb25maWcuZXhwZXJpZW5jZVZlcnNpb24sXG4gICAgICBsb2NhbGU6IHBhcnNlZENvbmZpZy5sb2NhbGUsXG4gICAgICBzZWFyY2hTZXJ2aWNlOiB0aGlzLl9zZXJ2aWNlcy5zZWFyY2hTZXJ2aWNlLFxuICAgICAgYXV0b0NvbXBsZXRlU2VydmljZTogdGhpcy5fc2VydmljZXMuYXV0b0NvbXBsZXRlU2VydmljZSxcbiAgICAgIHF1ZXN0aW9uQW5zd2VyU2VydmljZTogdGhpcy5fc2VydmljZXMucXVlc3Rpb25BbnN3ZXJTZXJ2aWNlLFxuICAgICAgYW5hbHl0aWNzUmVwb3J0ZXI6IHRoaXMuX2FuYWx5dGljc1JlcG9ydGVyU2VydmljZSxcbiAgICAgIG9uVmVydGljYWxTZWFyY2g6IHBhcnNlZENvbmZpZy5vblZlcnRpY2FsU2VhcmNoLFxuICAgICAgb25Vbml2ZXJzYWxTZWFyY2g6IHBhcnNlZENvbmZpZy5vblVuaXZlcnNhbFNlYXJjaFxuICAgIH0pO1xuXG4gICAgaWYgKHBhcnNlZENvbmZpZy5vblN0YXRlQ2hhbmdlICYmIHR5cGVvZiBwYXJzZWRDb25maWcub25TdGF0ZUNoYW5nZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcGFyc2VkQ29uZmlnLm9uU3RhdGVDaGFuZ2UocGVyc2lzdGVudFN0b3JhZ2UuZ2V0QWxsKCksIHdpbmRvdy5sb2NhdGlvbi5zZWFyY2guc3Vic3RyKDEpKTtcbiAgICB9XG5cbiAgICB0aGlzLmNvbXBvbmVudHNcbiAgICAgIC5zZXRDb3JlKHRoaXMuY29yZSlcbiAgICAgIC5zZXRSZW5kZXJlcih0aGlzLnJlbmRlcmVyKTtcblxuICAgIHRoaXMuX3NldERlZmF1bHRJbml0aWFsU2VhcmNoKHBhcnNlZENvbmZpZy5zZWFyY2gpO1xuXG4gICAgdGhpcy5fb25SZWFkeSA9IHBhcnNlZENvbmZpZy5vblJlYWR5IHx8IGZ1bmN0aW9uICgpIHt9O1xuXG4gICAgaWYgKHBhcnNlZENvbmZpZy51c2VUZW1wbGF0ZXMgPT09IGZhbHNlIHx8IHBhcnNlZENvbmZpZy50ZW1wbGF0ZUJ1bmRsZSkge1xuICAgICAgaWYgKHBhcnNlZENvbmZpZy50ZW1wbGF0ZUJ1bmRsZSkge1xuICAgICAgICB0aGlzLnJlbmRlcmVyLmluaXQocGFyc2VkQ29uZmlnLnRlbXBsYXRlQnVuZGxlKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5faGFuZGxlUG9ueWZpbGxDc3NWYXJpYWJsZXMoXG4gICAgICAgIHBhcnNlZENvbmZpZy5kaXNhYmxlQ3NzVmFyaWFibGVzUG9ueWZpbGwsXG4gICAgICAgIHRoaXMuX2ludm9rZU9uUmVhZHkuYmluZCh0aGlzKSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBUZW1wbGF0ZXMgYXJlIGN1cnJlbnRseSBkb3dubG9hZGVkIHNlcGFyYXRlbHkgZnJvbSB0aGUgQ09SRSBhbmQgVUkgYnVuZGxlLlxuICAgIC8vIEZ1dHVyZSBlbmhhbmNlbWVudCBpcyB0byBzaGlwIHRoZSBjb21wb25lbnRzIHdpdGggdGVtcGxhdGVzIGluIGEgc2VwYXJhdGUgYnVuZGxlLlxuICAgIHRoaXMudGVtcGxhdGVzID0gbmV3IERlZmF1bHRUZW1wbGF0ZXNMb2FkZXIodGVtcGxhdGVzID0+IHtcbiAgICAgIHRoaXMucmVuZGVyZXIuaW5pdCh0ZW1wbGF0ZXMpO1xuICAgICAgdGhpcy5faGFuZGxlUG9ueWZpbGxDc3NWYXJpYWJsZXMoXG4gICAgICAgIHBhcnNlZENvbmZpZy5kaXNhYmxlQ3NzVmFyaWFibGVzUG9ueWZpbGwsXG4gICAgICAgIHRoaXMuX2ludm9rZU9uUmVhZHkuYmluZCh0aGlzKSk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgdGhlIGV4cGVyaWVuY2UncyBBbnN3ZXIgU3RhdHVzIHBhZ2UgYmVmb3JlIGludm9raW5nIG9uUmVhZHkuIElmIHRoZSBzdGF0dXMgaXNcbiAgICogZGlzYWJsZWQsIG9uUmVhZHkgaXMgbm90IGNhbGxlZC5cbiAgICovXG4gIF9pbnZva2VPblJlYWR5ICgpIHtcbiAgICB0aGlzLl9tYXN0ZXJTd2l0Y2hBcGkuaXNEaXNhYmxlZCgpXG4gICAgICAudGhlbihpc0Rpc2FibGVkID0+ICFpc0Rpc2FibGVkICYmIHRoaXMuX29uUmVhZHkoKSwgKCkgPT4gdGhpcy5fb25SZWFkeSgpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxscyB0aGUgQ1NTIHZhcnMgcG9ueWZpbGwsIGlmIG9wdGVkLWluLCBhbmQgaW52b2tlcyB0aGUgY2FsbGJhY2tcbiAgICogcmVnYXJkbGVzcyBvZiBpZiB0aGVyZSB3YXMgYW4gZXJyb3Ivc3VjY2Vzcy4gSWYgb3B0ZWQtb3V0LCBvbmx5IGludm9rZXMgdGhlIGNhbGxiYWNrLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IG9wdGlvbiB0byBvcHQgb3V0IG9mIHRoZSBjc3MgdmFyaWFibGVzIHBvbnlmaWxsXG4gICAqIEBwYXJhbSBjYWxsYmFjayB7RnVuY3Rpb259IGFsd2F5cyBjYWxsZWQgYWZ0ZXIgZnVuY3Rpb25cbiAgICovXG4gIF9oYW5kbGVQb255ZmlsbENzc1ZhcmlhYmxlcyAocG9ueWZpbGxEaXNhYmxlZCwgY2FsbGJhY2spIHtcbiAgICBpZiAoIXBvbnlmaWxsRGlzYWJsZWQpIHtcbiAgICAgIHRoaXMucG9ueWZpbGxDc3NWYXJpYWJsZXMoe1xuICAgICAgICBvbkZpbmFsbHk6ICgpID0+IHtcbiAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2FsbGJhY2soKTtcbiAgICB9XG4gIH1cblxuICBkb21SZWFkeSAoY2IpIHtcbiAgICBET00ub25SZWFkeShjYik7XG4gIH1cblxuICBvblJlYWR5IChjYikge1xuICAgIHRoaXMuX29uUmVhZHkgPSBjYjtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBQYXJzZXMgdGhlIGNvbmZpZyBwcm92aWRlZCBieSB0aGUgdXNlci4gSW4gdGhlIHBhcnNlZCBjb25maWcsIGFueSBvcHRpb25zIG5vdCBzdXBwbGllZCBieSB0aGVcbiAgICogdXNlciBhcmUgZ2l2ZW4gZGVmYXVsdCB2YWx1ZXMuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIHVzZXIgc3VwcGxpZWQgY29uZmlnLlxuICAgKi9cbiAgcGFyc2VDb25maWcgKGNvbmZpZykge1xuICAgIGNvbnN0IHBhcnNlZENvbmZpZyA9IE9iamVjdC5hc3NpZ24oe30sIERFRkFVTFRTLCBjb25maWcpO1xuICAgIGxldCBzZXNzaW9uVHJhY2tpbmdFbmFibGVkID0gdHJ1ZTtcbiAgICBpZiAodHlwZW9mIGNvbmZpZy5zZXNzaW9uVHJhY2tpbmdFbmFibGVkID09PSAnYm9vbGVhbicpIHtcbiAgICAgIHNlc3Npb25UcmFja2luZ0VuYWJsZWQgPSBjb25maWcuc2Vzc2lvblRyYWNraW5nRW5hYmxlZDtcbiAgICB9XG4gICAgcGFyc2VkQ29uZmlnLnNlc3Npb25UcmFja2luZ0VuYWJsZWQgPSBzZXNzaW9uVHJhY2tpbmdFbmFibGVkO1xuXG4gICAgY29uc3Qgc2FuZGJveFByZWZpeCA9IGAke1NBTkRCT1h9LWA7XG4gICAgcGFyc2VkQ29uZmlnLmFwaUtleS5pbmNsdWRlcyhzYW5kYm94UHJlZml4KVxuICAgICAgPyBwYXJzZWRDb25maWcuZW52aXJvbm1lbnQgPSBTQU5EQk9YXG4gICAgICA6IHBhcnNlZENvbmZpZy5lbnZpcm9ubWVudCA9IFBST0RVQ1RJT047XG4gICAgcGFyc2VkQ29uZmlnLmFwaUtleSA9IHBhcnNlZENvbmZpZy5hcGlLZXkucmVwbGFjZShzYW5kYm94UHJlZml4LCAnJyk7XG5cbiAgICByZXR1cm4gcGFyc2VkQ29uZmlnO1xuICB9XG5cbiAgLyoqXG4gICAqIFZhbGlkYXRlcyB0aGUgQW5zd2VycyBjb25maWcgb2JqZWN0IHRvIGVuc3VyZSB0aGluZ3MgbGlrZSBhcGkga2V5IGFuZCBleHBlcmllbmNlIGtleSBhcmVcbiAgICogcHJvcGVybHkgc2V0LlxuICAgKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBBbnN3ZXJzIGNvbmZpZy5cbiAgICovXG4gIHZhbGlkYXRlQ29uZmlnIChjb25maWcpIHtcbiAgICAvLyBUT0RPICh0bWV5ZXIpOiBFeHRyYWN0IHRoaXMgbWV0aG9kIGludG8gaXQncyBvd24gY2xhc3MuIEludmVzdGlnYXRlIHRoZSB1c2Ugb2YgSlNPTiBzY2hlbWFcbiAgICAvLyB0byB2YWxpZGF0ZSB0aGVzZSBjb25maWdzLlxuICAgIGlmICh0eXBlb2YgY29uZmlnLmFwaUtleSAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignTWlzc2luZyByZXF1aXJlZCBgYXBpS2V5YC4gVHlwZSBtdXN0IGJlIHtzdHJpbmd9Jyk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBjb25maWcuZXhwZXJpZW5jZUtleSAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignTWlzc2luZyByZXF1aXJlZCBgZXhwZXJpZW5jZUtleWAuIFR5cGUgbXVzdCBiZSB7c3RyaW5nfScpO1xuICAgIH1cblxuICAgIGlmIChjb25maWcub25WZXJ0aWNhbFNlYXJjaCAmJiB0eXBlb2YgY29uZmlnLm9uVmVydGljYWxTZWFyY2ggIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignb25WZXJ0aWNhbFNlYXJjaCBtdXN0IGJlIGEgZnVuY3Rpb24uIEN1cnJlbnQgdHlwZSBpczogJyArIHR5cGVvZiBjb25maWcub25WZXJ0aWNhbFNlYXJjaCk7XG4gICAgfVxuXG4gICAgaWYgKGNvbmZpZy5vblVuaXZlcnNhbFNlYXJjaCAmJiB0eXBlb2YgY29uZmlnLm9uVW5pdmVyc2FsU2VhcmNoICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ29uVW5pdmVyc2FsU2VhcmNoIG11c3QgYmUgYSBmdW5jdGlvbi4gQ3VycmVudCB0eXBlIGlzOiAnICsgdHlwZW9mIGNvbmZpZy5vblVuaXZlcnNhbFNlYXJjaCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJlZ2lzdGVyIGEgY3VzdG9tIGNvbXBvbmVudCB0eXBlIHNvIGl0IGNhbiBiZSBjcmVhdGVkIHZpYVxuICAgKiBhZGRDb21wb25lbnQgYW5kIHVzZWQgYXMgYSBjaGlsZCBjb21wb25lbnRcbiAgICogQHBhcmFtIHtDb21wb25lbnR9IGNvbXBvbmVudENsYXNzXG4gICAqL1xuICByZWdpc3RlckNvbXBvbmVudFR5cGUgKGNvbXBvbmVudENsYXNzKSB7XG4gICAgdGhpcy5jb21wb25lbnRzLnJlZ2lzdGVyKGNvbXBvbmVudENsYXNzKTtcbiAgfVxuXG4gIGFkZENvbXBvbmVudCAodHlwZSwgb3B0cykge1xuICAgIGlmICh0eXBlb2Ygb3B0cyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIG9wdHMgPSB7XG4gICAgICAgIGNvbnRhaW5lcjogb3B0c1xuICAgICAgfTtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgdGhpcy5jb21wb25lbnRzLmNyZWF0ZSh0eXBlLCBvcHRzKS5tb3VudCgpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHRocm93IG5ldyBBbnN3ZXJzQ29tcG9uZW50RXJyb3IoJ0ZhaWxlZCB0byBhZGQgY29tcG9uZW50JywgdHlwZSwgZSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZSB0aGUgY29tcG9uZW50IC0gYW5kIGFsbCBvZiBpdHMgY2hpbGRyZW4gLSB3aXRoIHRoZSBnaXZlbiBuYW1lXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFRoZSBuYW1lIG9mIHRoZSBjb21wb25lbnQgdG8gcmVtb3ZlXG4gICAqL1xuICByZW1vdmVDb21wb25lbnQgKG5hbWUpIHtcbiAgICB0aGlzLmNvbXBvbmVudHMucmVtb3ZlQnlOYW1lKG5hbWUpO1xuICB9XG5cbiAgY3JlYXRlQ29tcG9uZW50IChvcHRzKSB7XG4gICAgcmV0dXJuIHRoaXMuY29tcG9uZW50cy5jcmVhdGUoJ0NvbXBvbmVudCcsIG9wdHMpLm1vdW50KCk7XG4gIH1cblxuICByZWdpc3RlckhlbHBlciAobmFtZSwgY2IpIHtcbiAgICB0aGlzLnJlbmRlcmVyLnJlZ2lzdGVySGVscGVyKG5hbWUsIGNiKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBDb21waWxlIGFuZCBhZGQgYSB0ZW1wbGF0ZSB0byB0aGUgY3VycmVudCByZW5kZXJlclxuICAgKiBAcGFyYW0ge3N0cmluZ30gdGVtcGxhdGVOYW1lIFRoZSB1bmlxdWUgbmFtZSBmb3IgdGhlIHRlbXBsYXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0ZW1wbGF0ZSBUaGUgaGFuZGxlYmFycyB0ZW1wbGF0ZSBzdHJpbmdcbiAgICovXG4gIHJlZ2lzdGVyVGVtcGxhdGUgKHRlbXBsYXRlTmFtZSwgdGVtcGxhdGUpIHtcbiAgICB0aGlzLnJlbmRlcmVyLnJlZ2lzdGVyVGVtcGxhdGUodGVtcGxhdGVOYW1lLCB0ZW1wbGF0ZSk7XG4gIH1cblxuICAvKipcbiAgICogT3B0IGluIG9yIG91dCBvZiBjb252ZXJ0aW9uIHRyYWNraW5nIGFuYWx5dGljc1xuICAgKiBAcGFyYW0ge2Jvb2xlYW59IG9wdEluXG4gICAqL1xuICBzZXRDb252ZXJzaW9uc09wdEluIChvcHRJbikge1xuICAgIGlmICh0aGlzLl9lbGlnaWJsZUZvckFuYWx5dGljcykge1xuICAgICAgdGhpcy5fYW5hbHl0aWNzUmVwb3J0ZXJTZXJ2aWNlLnNldENvbnZlcnNpb25UcmFja2luZ0VuYWJsZWQob3B0SW4pO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBPcHQgaW4gb3Igb3V0IG9mIHNlc3Npb24gY29va2llc1xuICAgKiBAcGFyYW0ge2Jvb2xlYW59IG9wdEluXG4gICAqL1xuICBzZXRTZXNzaW9uc09wdEluIChvcHRJbikge1xuICAgIHRoaXMuY29yZS5nbG9iYWxTdG9yYWdlLnNldChTdG9yYWdlS2V5cy5TRVNTSU9OU19PUFRfSU4sIG9wdEluKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIGEgc2VhcmNoIHF1ZXJ5IG9uIGluaXRpYWxpemF0aW9uIGZvciB2ZXJ0aWNhbCBzZWFyY2hlcnMgdGhhdCBoYXZlIGFcbiAgICogZGVmYXVsdEluaXRpYWxTZWFyY2ggcHJvdmlkZWQsIGlmIHRoZSB1c2VyIGhhc24ndCBhbHJlYWR5IHByb3ZpZGVkIHRoZWlyXG4gICAqIG93biB2aWEgVVJMIHBhcmFtLlxuICAgKiBAcGFyYW0ge1NlYXJjaENvbmZpZ30gc2VhcmNoQ29uZmlnXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfc2V0RGVmYXVsdEluaXRpYWxTZWFyY2ggKHNlYXJjaENvbmZpZykge1xuICAgIGlmIChzZWFyY2hDb25maWcuZGVmYXVsdEluaXRpYWxTZWFyY2ggPT0gbnVsbCB8fCAhc2VhcmNoQ29uZmlnLnZlcnRpY2FsS2V5KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHByZXBvcHVsYXRlZFF1ZXJ5ID0gdGhpcy5jb3JlLmdsb2JhbFN0b3JhZ2UuZ2V0U3RhdGUoU3RvcmFnZUtleXMuUVVFUlkpO1xuICAgIGlmIChwcmVwb3B1bGF0ZWRRdWVyeSAhPSBudWxsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuY29yZS5nbG9iYWxTdG9yYWdlLnNldCgncXVlcnlUcmlnZ2VyJywgJ2luaXRpYWxpemUnKTtcbiAgICB0aGlzLmNvcmUuc2V0UXVlcnkoc2VhcmNoQ29uZmlnLmRlZmF1bHRJbml0aWFsU2VhcmNoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBnZW9sb2NhdGlvbiB0YWcgaW4gZ2xvYmFsIHN0b3JhZ2UsIG92ZXJyaWRpbmcgb3RoZXIgaW5wdXRzLiBEbyBub3QgdXNlIGluIGNvbmp1bmN0aW9uXG4gICAqIHdpdGggb3RoZXIgY29tcG9uZW50cyB0aGF0IHdpbGwgc2V0IHRoZSBnZW9sb2NhdGlvbiBpbnRlcm5hbGx5LlxuICAgKiBAcGFyYW0ge251bWJlcn0gbGF0XG4gICAqIEBwYXJhbSB7bnVtYmVyfSBsb25nXG4gICAqL1xuICBzZXRHZW9sb2NhdGlvbiAobGF0LCBsbmcpIHtcbiAgICB0aGlzLmNvcmUuZ2xvYmFsU3RvcmFnZS5zZXQoU3RvcmFnZUtleXMuR0VPTE9DQVRJT04sIHtcbiAgICAgIGxhdCwgbG5nLCByYWRpdXM6IDBcbiAgICB9KTtcbiAgfVxuXG4gIC8qXG4gICAqIFVwZGF0ZXMgdGhlIGNzcyBzdHlsZXMgd2l0aCBuZXcgY3VycmVudCB2YXJpYWJsZXMuIFRoaXMgaXMgdXNlZnVsIHdoZW4gdGhlIGNzc1xuICAgKiB2YXJpYWJsZXMgYXJlIHVwZGF0ZWQgZHluYW1pY2FsbHkgKGUuZy4gdGhyb3VnaCBqcykgb3IgaWYgdGhlIGNzcyB2YXJpYWJsZXMgYXJlXG4gICAqIGFkZGVkIGFmdGVyIHRoZSBBTlNXRVJTLmluaXRcbiAgICpcbiAgICogVG8gc29sdmUgaXNzdWVzIHdpdGggbm9uLXplcm8gbWF4LWFnZSBjYWNoZSBjb250cm9scyBmb3IgbGluay9zY3JpcHQgYXNzZXRzIGluIElFMTEsXG4gICAqIHdlIGFkZCBhIGNhY2hlIGJ1c3RpbmcgcGFyYW1ldGVyIHNvIHRoYXQgWE1MSHR0cFJlcXVlc3RzIHN1Y2NlZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgQWRkaXRpb25hbCBjb25maWcgdG8gcGFzcyB0byB0aGUgcG9ueWZpbGxcbiAgICovXG4gIHBvbnlmaWxsQ3NzVmFyaWFibGVzIChjb25maWcgPSB7fSkge1xuICAgIGNzc1ZhcnMoe1xuICAgICAgb25seUxlZ2FjeTogdHJ1ZSxcbiAgICAgIG9uRXJyb3I6IGNvbmZpZy5vbkVycm9yIHx8IGZ1bmN0aW9uICgpIHt9LFxuICAgICAgb25TdWNjZXNzOiBjb25maWcub25TdWNjZXNzIHx8IGZ1bmN0aW9uICgpIHt9LFxuICAgICAgb25GaW5hbGx5OiBjb25maWcub25GaW5hbGx5IHx8IGZ1bmN0aW9uICgpIHt9LFxuICAgICAgb25CZWZvcmVTZW5kOiAoeGhyLCBub2RlLCB1cmwpID0+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjb25zdCB1cmlXaXRoQ2FjaGVCdXN0ID0gbmV3IFVSTCh1cmwpO1xuICAgICAgICAgIGNvbnN0IHBhcmFtcyA9IG5ldyBTZWFyY2hQYXJhbXModXJpV2l0aENhY2hlQnVzdC5zZWFyY2gpO1xuICAgICAgICAgIHBhcmFtcy5zZXQoJ18nLCBuZXcgRGF0ZSgpLmdldFRpbWUoKSk7XG4gICAgICAgICAgdXJpV2l0aENhY2hlQnVzdC5zZWFyY2ggPSBwYXJhbXMudG9TdHJpbmcoKTtcbiAgICAgICAgICB4aHIub3BlbignR0VUJywgdXJpV2l0aENhY2hlQnVzdC50b1N0cmluZygpKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIC8vIENhdGNoIHRoZSBlcnJvciBhbmQgY29udGludWUgaWYgdGhlIFVSTCBwcm92aWRlZCBpbiB0aGUgYXNzZXQgaXMgbm90IGEgdmFsaWQgVVJMXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qXG4gICAqIEFkZHMgY29udGV4dCBhcyBhIHBhcmFtZXRlciBmb3IgdGhlIHF1ZXJ5IEFQSSBjYWxscy5cbiAgICogQHBhcmFtIHtPYmplY3R9IGNvbnRleHQgVGhlIGNvbnRleHQgb2JqZWN0IHBhc3NlZCBpbiB0aGUgQVBJIGNhbGxzXG4gICAqL1xuICBzZXRDb250ZXh0IChjb250ZXh0KSB7XG4gICAgY29uc3QgY29udGV4dFN0cmluZyA9IEpTT04uc3RyaW5naWZ5KGNvbnRleHQpO1xuICAgIGlmICghaXNWYWxpZENvbnRleHQoY29udGV4dFN0cmluZykpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoYENvbnRleHQgcGFyYW1ldGVyIFwiJHtjb250ZXh0fVwiIGlzIGludmFsaWQsIG9taXR0aW5nIGZyb20gdGhlIHNlYXJjaC5gKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLmNvcmUuZ2xvYmFsU3RvcmFnZS5zZXQoU3RvcmFnZUtleXMuQVBJX0NPTlRFWFQsIGNvbnRleHRTdHJpbmcpO1xuICB9XG59XG5cbi8qKlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZ1xuICogQHBhcmFtIHtHbG9iYWxTdG9yYWdlfSBnbG9iYWxTdG9yYWdlXG4gKiBAcmV0dXJucyB7U2VydmljZXN9XG4gKi9cbmZ1bmN0aW9uIGdldFNlcnZpY2VzIChjb25maWcsIGdsb2JhbFN0b3JhZ2UpIHtcbiAgcmV0dXJuIHtcbiAgICBzZWFyY2hTZXJ2aWNlOiBuZXcgU2VhcmNoQXBpKHtcbiAgICAgIGFwaUtleTogY29uZmlnLmFwaUtleSxcbiAgICAgIGV4cGVyaWVuY2VLZXk6IGNvbmZpZy5leHBlcmllbmNlS2V5LFxuICAgICAgZXhwZXJpZW5jZVZlcnNpb246IGNvbmZpZy5leHBlcmllbmNlVmVyc2lvbixcbiAgICAgIGxvY2FsZTogY29uZmlnLmxvY2FsZSxcbiAgICAgIGVudmlyb25tZW50OiBjb25maWcuZW52aXJvbm1lbnRcbiAgICB9KSxcbiAgICBhdXRvQ29tcGxldGVTZXJ2aWNlOiBuZXcgQXV0b0NvbXBsZXRlQXBpKFxuICAgICAge1xuICAgICAgICBhcGlLZXk6IGNvbmZpZy5hcGlLZXksXG4gICAgICAgIGV4cGVyaWVuY2VLZXk6IGNvbmZpZy5leHBlcmllbmNlS2V5LFxuICAgICAgICBleHBlcmllbmNlVmVyc2lvbjogY29uZmlnLmV4cGVyaWVuY2VWZXJzaW9uLFxuICAgICAgICBsb2NhbGU6IGNvbmZpZy5sb2NhbGUsXG4gICAgICAgIGVudmlyb25tZW50OiBjb25maWcuZW52aXJvbm1lbnRcbiAgICAgIH0sXG4gICAgICBnbG9iYWxTdG9yYWdlKSxcbiAgICBxdWVzdGlvbkFuc3dlclNlcnZpY2U6IG5ldyBRdWVzdGlvbkFuc3dlckFwaShcbiAgICAgIHsgYXBpS2V5OiBjb25maWcuYXBpS2V5LCBlbnZpcm9ubWVudDogY29uZmlnLmVudmlyb25tZW50IH0sXG4gICAgICBnbG9iYWxTdG9yYWdlKSxcbiAgICBlcnJvclJlcG9ydGVyU2VydmljZTogbmV3IEVycm9yUmVwb3J0ZXIoXG4gICAgICB7XG4gICAgICAgIGFwaUtleTogY29uZmlnLmFwaUtleSxcbiAgICAgICAgZXhwZXJpZW5jZUtleTogY29uZmlnLmV4cGVyaWVuY2VLZXksXG4gICAgICAgIGV4cGVyaWVuY2VWZXJzaW9uOiBjb25maWcuZXhwZXJpZW5jZVZlcnNpb24sXG4gICAgICAgIHByaW50VmVyYm9zZTogY29uZmlnLmRlYnVnLFxuICAgICAgICBzZW5kVG9TZXJ2ZXI6ICFjb25maWcuc3VwcHJlc3NFcnJvclJlcG9ydHMsXG4gICAgICAgIGVudmlyb25tZW50OiBjb25maWcuZW52aXJvbm1lbnRcbiAgICAgIH0sXG4gICAgICBnbG9iYWxTdG9yYWdlKVxuICB9O1xufVxuXG4vKipcbiAqIEByZXR1cm5zIHtTZXJ2aWNlc31cbiAqL1xuZnVuY3Rpb24gZ2V0TW9ja1NlcnZpY2VzICgpIHtcbiAgcmV0dXJuIHtcbiAgICBzZWFyY2hTZXJ2aWNlOiBuZXcgTW9ja1NlYXJjaFNlcnZpY2UoKSxcbiAgICBhdXRvQ29tcGxldGVTZXJ2aWNlOiBuZXcgTW9ja0F1dG9Db21wbGV0ZVNlcnZpY2UoKSxcbiAgICBxdWVzdGlvbkFuc3dlclNlcnZpY2U6IG5ldyBNb2NrUXVlc3Rpb25BbnN3ZXJTZXJ2aWNlKCksXG4gICAgZXJyb3JSZXBvcnRlclNlcnZpY2U6IG5ldyBDb25zb2xlRXJyb3JSZXBvcnRlcigpXG4gIH07XG59XG5cbi8qKlxuICogSW5pdGlhbGl6ZSB0aGUgc2Nyb2xsIGV2ZW50IGxpc3RlbmVyIHRvIHNlbmQgYW5hbHl0aWNzIGV2ZW50c1xuICogd2hlbiB0aGUgdXNlciBzY3JvbGxzIHRvIHRoZSBib3R0b20uIERlYm91bmNlcyBzY3JvbGwgZXZlbnRzIHNvXG4gKiB0aGV5IGFyZSBwcm9jZXNzZWQgYWZ0ZXIgdGhlIHVzZXIgc3RvcHMgc2Nyb2xsaW5nXG4gKi9cbmZ1bmN0aW9uIGluaXRTY3JvbGxMaXN0ZW5lciAocmVwb3J0ZXIpIHtcbiAgY29uc3QgREVCT1VOQ0VfVElNRSA9IDEwMDtcbiAgbGV0IHRpbWVvdXQgPSBudWxsO1xuXG4gIGNvbnN0IHNlbmRFdmVudCA9ICgpID0+IHtcbiAgICBpZiAoKHdpbmRvdy5pbm5lckhlaWdodCArIHdpbmRvdy5wYWdlWU9mZnNldCkgPj0gZG9jdW1lbnQuYm9keS5zY3JvbGxIZWlnaHQpIHtcbiAgICAgIGNvbnN0IGV2ZW50ID0gbmV3IEFuYWx5dGljc0V2ZW50KCdTQ1JPTExfVE9fQk9UVE9NX09GX1BBR0UnKTtcbiAgICAgIGlmIChyZXBvcnRlci5nZXRRdWVyeUlkKCkpIHtcbiAgICAgICAgcmVwb3J0ZXIucmVwb3J0KGV2ZW50KTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgKCkgPT4ge1xuICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICB0aW1lb3V0ID0gc2V0VGltZW91dChzZW5kRXZlbnQsIERFQk9VTkNFX1RJTUUpO1xuICB9KTtcbn1cblxuY29uc3QgQU5TV0VSUyA9IG5ldyBBbnN3ZXJzKCk7XG5leHBvcnQgZGVmYXVsdCBBTlNXRVJTO1xuIl0sIm5hbWVzIjpbIlBSRV9TRUFSQ0giLCJTRUFSQ0hfTE9BRElORyIsIlNFQVJDSF9DT01QTEVURSIsIlJlc3VsdCIsImRhdGEiLCJfcmF3IiwicmF3IiwiX2Zvcm1hdHRlZCIsImZvcm1hdHRlZCIsIl9oaWdobGlnaHRlZCIsImhpZ2hsaWdodGVkIiwib3JkaW5hbCIsInRpdGxlIiwiZGV0YWlscyIsImxpbmsiLCJpZCIsInN1YnRpdGxlIiwibW9kaWZpZXIiLCJiaWdEYXRlIiwiaW1hZ2UiLCJjYWxsc1RvQWN0aW9uIiwiY29sbGFwc2VkIiwidW5kZWZpbmVkIiwiZGlzdGFuY2UiLCJIaWdobGlnaHRlZFZhbHVlIiwidmFsdWUiLCJzaG9ydFZhbHVlIiwibWF0Y2hlZFN1YnN0cmluZ3MiLCJfc29ydE1hdGNoZWRTdWJzdHJpbmdzIiwiYnVpbGRIaWdobGlnaHRlZFZhbHVlIiwiaW52ZXJ0ZWRTdWJzdHJpbmdzIiwiX2dldEludmVydGVkU3Vic3RyaW5ncyIsImxlbmd0aCIsInZhbCIsImhpZ2hsaWdodGVkU3Vic3RyaW5ncyIsImhpZ2hsaWdodGVkVmFsdWUiLCJuZXh0U3RhcnQiLCJqIiwic3RhcnQiLCJOdW1iZXIiLCJvZmZzZXQiLCJlbmQiLCJzbGljZSIsImpvaW4iLCJzb3J0IiwiYSIsImIiLCJ2YWx1ZUxlbmd0aCIsImkiLCJzdWJzdHJpbmciLCJuZXh0T2Zmc2V0IiwicHVzaCIsIkFuc3dlcnNCYXNlRXJyb3IiLCJlcnJvckNvZGUiLCJtZXNzYWdlIiwiYm91bmRhcnkiLCJjYXVzZWRCeSIsImVycm9yTWVzc2FnZSIsInJlcG9ydGVkIiwiZnJvbSIsInN0YWNrIiwiSlNPTiIsInN0cmluZ2lmeSIsInN0cmluZyIsInRvU3RyaW5nIiwiYnVpbHRpbkVycm9yIiwiZXJyb3IiLCJBbnN3ZXJzQmFzaWNFcnJvciIsIkVycm9yIiwiQW5zd2Vyc0NvbmZpZ0Vycm9yIiwiQW5zd2Vyc0NvbXBvbmVudEVycm9yIiwiY29tcG9uZW50IiwiQW5zd2Vyc0VuZHBvaW50RXJyb3IiLCJBbnN3ZXJzQ29yZUVycm9yIiwiQW5zd2Vyc1N0b3JhZ2VFcnJvciIsInN0b3JhZ2VLZXkiLCJBbnN3ZXJzQW5hbHl0aWNzRXJyb3IiLCJldmVudCIsIlJlc3VsdEZhY3RvcnkiLCJyZXN1bHRzRGF0YSIsImZvcm1hdHRlcnMiLCJ2ZXJ0aWNhbElkIiwic291cmNlIiwicmVzdWx0cyIsImZyb21Hb29nbGVDdXN0b21TZWFyY2hFbmdpbmUiLCJmcm9tQmluZ0N1c3RvbVNlYXJjaEVuZ2luZSIsImZyb21aZW5kZXNrU2VhcmNoRW5naW5lIiwiZnJvbUFsZ29saWFTZWFyY2hFbmdpbmUiLCJoaWdobGlnaHRlZEZpZWxkcyIsImZyb21Lbm93bGVkZ2VNYW5hZ2VyIiwiZnJvbUdlbmVyaWMiLCJlbnRpdHlQcm9maWxlRGF0YSIsImhpZ2hsaWdodGVkRW50aXR5UHJvZmlsZURhdGEiLCJPYmplY3QiLCJrZXlzIiwiZm9ybWF0dGVkRGF0YSIsImVudHJpZXMiLCJmb3JFYWNoIiwiZmllbGROYW1lIiwiZmllbGRWYWwiLCJoaWdobGlnaHRlZEZpZWxkVmFsIiwiZW50aXR5RmllbGRWYWx1ZSIsImhpZ2hsaWdodGVkRW50aXR5RmllbGRWYWx1ZSIsImlzRGlyZWN0QW5zd2VyIiwiaGlnaGxpZ2h0ZWREYXRhIiwiaGlnaGxpZ2h0ZWRGaWVsZE5hbWUiLCJoaWdobGlnaHRlZEZpZWxkIiwiY29tcHV0ZUhpZ2hsaWdodGVkRGF0YSIsImhpZ2hsaWdodGVkRGF0YVZhbHVlIiwiaW5kZXgiLCJuYW1lIiwidHJ1bmNhdGUiLCJkZXNjcmlwdGlvbiIsIndlYnNpdGUiLCJmb3JtYXR0ZWRFbnRpdHlQcm9maWxlRGF0YSIsImNvbXB1dGVGb3JtYXR0ZWREYXRhIiwicmVzdWx0RGV0YWlscyIsImh0bWxUaXRsZSIsInJlcGxhY2UiLCJodG1sU25pcHBldCIsInNuaXBwZXQiLCJ1cmwiLCJodG1sX3VybCIsIm9iamVjdElEIiwic3RyIiwibGltaXQiLCJ0cmFpbGluZyIsInNlcCIsIndvcmRzIiwic3BsaXQiLCJtYXgiLCJ0cnVuY2F0ZWQiLCJ3b3JkIiwiU2VjdGlvbiIsInNlYXJjaFN0YXRlIiwiU2VhcmNoU3RhdGVzIiwidmVydGljYWxDb25maWdJZCIsInJlc3VsdHNDb3VudCIsImVuY29kZWRTdGF0ZSIsImFwcGxpZWRRdWVyeUZpbHRlcnMiLCJBcHBsaWVkUXVlcnlGaWx0ZXIiLCJmYWNldHMiLCJtYXAiLCJwYXJzZU1hcCIsInZlcnRpY2FsVVJMIiwicmVzdWx0c0NvbnRleHQiLCJtYXBNYXJrZXJzIiwiY2VudGVyQ29vcmRpbmF0ZXMiLCJyZXN1bHQiLCJ5ZXh0RGlzcGxheUNvb3JkaW5hdGUiLCJsYXRpdHVkZSIsImxvbmdpdHVkZSIsIml0ZW0iLCJsYWJlbCIsIm1vZHVsZXMiLCJ1cmxzIiwic2VjdGlvbnMiLCJBcnJheSIsImlzQXJyYXkiLCJhcHBsaWVkUXVlcnlGaWx0ZXIiLCJrZXkiLCJkaXNwbGF5S2V5IiwiZGlzcGxheVZhbHVlIiwiZmlsdGVyIiwiZmllbGRJZCIsImZpbHRlcnMiLCJVbml2ZXJzYWxSZXN1bHRzIiwicXVlcnlJZCIsInJlc3BvbnNlIiwiRGlyZWN0QW5zd2VyIiwiZGlyZWN0QW5zd2VyIiwiYXNzaWduIiwiZnJlZXplIiwiYW5zd2VyIiwicmVsYXRlZEl0ZW0iLCJmaWVsZEFwaU5hbWUiLCJmaWVsZFZhbHVlcyIsIk5hdmlnYXRpb24iLCJ0YWJPcmRlciIsIm5hdiIsIlZlcnRpY2FsUmVzdWx0cyIsIm1lcmdlZCIsImNvbmNhdCIsInZlcnRpY2FsS2V5IiwiU3BlbGxDaGVjayIsInF1ZXJ5IiwiY29ycmVjdGVkUXVlcnkiLCJ0eXBlIiwic2hvdWxkU2hvdyIsIm9yaWdpbmFsUXVlcnkiLCJOQVZJR0FUSU9OIiwiVU5JVkVSU0FMX1JFU1VMVFMiLCJWRVJUSUNBTF9SRVNVTFRTIiwiQUxURVJOQVRJVkVfVkVSVElDQUxTIiwiQVVUT0NPTVBMRVRFIiwiRElSRUNUX0FOU1dFUiIsIkZJTFRFUiIsIlNUQVRJQ19GSUxURVJfTk9ERSIsIlFVRVJZIiwiUVVFUllfSUQiLCJGQUNFVF9GSUxURVJfTk9ERSIsIkRZTkFNSUNfRklMVEVSUyIsIlBBUkFNUyIsIkdFT0xPQ0FUSU9OIiwiSU5URU5UUyIsIlFVRVNUSU9OX1NVQk1JU1NJT04iLCJTRUFSQ0hfQ09ORklHIiwiU0VBUkNIX09GRlNFVCIsIlNQRUxMX0NIRUNLIiwiTE9DQVRJT05fQklBUyIsIlNFU1NJT05TX09QVF9JTiIsIlZFUlRJQ0FMX1BBR0VTX0NPTkZJRyIsIkxPQ0FMRSIsIlNPUlRfQllTIiwiTk9fUkVTVUxUU19DT05GSUciLCJMT0NBVElPTl9SQURJVVMiLCJSRVNVTFRTX0hFQURFUiIsIkFQSV9DT05URVhUIiwiUkVGRVJSRVJfUEFHRV9VUkwiLCJEeW5hbWljRmlsdGVycyIsImR5bmFtaWNGaWx0ZXJzIiwiZiIsIm9wdGlvbnMiLCJvIiwiY291bnRMYWJlbCIsInNlbGVjdGVkIiwiU2VhcmNoSW50ZW50cyIsImludGVudHMiLCJuZWFyTWUiLCJpbmNsdWRlcyIsIkxvY2F0aW9uQmlhcyIsImFjY3VyYWN5IiwibG9jYXRpb25EaXNwbGF5TmFtZSIsIkFsdGVybmF0aXZlVmVydGljYWxzIiwiYWx0ZXJuYXRpdmVWZXJ0aWNhbHMiLCJOT1JNQUwiLCJOT19SRVNVTFRTIiwiU2VhcmNoRGF0YVRyYW5zZm9ybWVyIiwiU3RvcmFnZUtleXMiLCJzZWFyY2hJbnRlbnRzIiwic3BlbGxDaGVjayIsImxvY2F0aW9uQmlhcyIsIl9wYXJzZVZlcnRpY2FsUmVzcG9uc2UiLCJoYXNSZXN1bHRzIiwiUmVzdWx0c0NvbnRleHQiLCJhbGxSZXN1bHRzRm9yVmVydGljYWwiLCJRdWVzdGlvblN1Ym1pc3Npb24iLCJxdWVzdGlvbiIsImVycm9ycyIsImVtYWlsIiwicHJpdmFjeVBvbGljeSIsInF1ZXN0aW9uVGV4dCIsInF1ZXN0aW9uRGVzY3JpcHRpb24iLCJxdWVzdGlvbkV4cGFuZGVkIiwiZXhwYW5kZWQiLCJxdWVzdGlvblN1Ym1pdHRlZCIsInN1Ym1pdHRlZCIsIkFuYWx5dGljc0V2ZW50IiwiZXZlbnRUeXBlIiwidG9VcHBlckNhc2UiLCJldmVudE9wdGlvbnMiLCJhbmFseXRpY3NFdmVudCIsImFkZE9wdGlvbnMiLCJGaWx0ZXJDb21iaW5hdG9ycyIsIkFORCIsIk9SIiwiRmlsdGVyIiwicmVzcG9uc2VGaWx0ZXIiLCJwYXJzZSIsImZpZWxkIiwibWluIiwiaXNFeGNsdXNpdmUiLCJmYWxzeU1pbiIsImZhbHN5TWF4IiwiZW1wdHkiLCJncmVhdGVyVGhhbiIsImdyZWF0ZXJUaGFuRXF1YWwiLCJsZXNzVGhhbiIsImxlc3NUaGFuRXF1YWwiLCJlcXVhbCIsImV4Y2x1c2l2ZVJhbmdlIiwiaW5jbHVzaXZlUmFuZ2UiLCJfZnJvbU1hdGNoZXIiLCJsYXQiLCJsbmciLCJyYWRpdXMiLCJtYXRjaGVyIiwiRmlsdGVyVHlwZSIsIlNUQVRJQyIsIkZBQ0VUIiwiUkFESVVTIiwiTkxQIiwiRmlsdGVyTWV0YWRhdGEiLCJtZXRhZGF0YSIsImZpbHRlclR5cGUiLCJGaWx0ZXJOb2RlIiwiU2ltcGxlRmlsdGVyTm9kZSIsImZpbHRlck5vZGUiLCJyZW1vdmUiLCJfcmVtb3ZlIiwib3RoZXJOb2RlIiwidGhpc0ZpbHRlciIsImdldEZpbHRlciIsIm90aGVyRmlsdGVyIiwidGhpc0ZpZWxkSWQiLCJnZXRGaWx0ZXJLZXkiLCJvdGhlckZpZWxkSWQiLCJ0aGlzTWF0Y2hlcnNUb1ZhbHVlcyIsIm90aGVyTWF0Y2hlcnNUb1ZhbHVlcyIsInRoaXNNYXRjaGVycyIsIm90aGVyTWF0Y2hlcnMiLCJldmVyeSIsIm0iLCJoYXNPd25Qcm9wZXJ0eSIsIkNvbWJpbmVkRmlsdGVyTm9kZSIsImNvbWJpbmF0b3IiLCJjaGlsZHJlbiIsImNoaWxkTm9kZSIsImFuZCIsIm9yIiwiZ2V0Q2hpbGRyZW4iLCJmbGF0TWFwIiwiZm4iLCJnZXRTaW1wbGVEZXNjZW5kYW50cyIsImNoaWxkIiwiRmlsdGVyTm9kZUZhY3RvcnkiLCJjaGlsZHJlbk5vZGVzIiwiX2NvbWJpbmUiLCJmaWx0ZXJOb2RlcyIsIkZhY2V0IiwiYXZhaWxhYmxlRmllbGRJZHMiLCJncm91cHMiLCJmbGF0RmlsdGVycyIsIiRvciIsIkZpbHRlclJlZ2lzdHJ5IiwiZ2xvYmFsU3RvcmFnZSIsImdsb2JhbFN0b3JhZ2VGaWx0ZXJOb2RlcyIsImdldFN0YXRpY0ZpbHRlck5vZGVzIiwiZ2V0RmFjZXRGaWx0ZXJOb2RlcyIsImxvY2F0aW9uUmFkaXVzRmlsdGVyTm9kZSIsImdldEZpbHRlck5vZGVCeUtleSIsImdldEFsbCIsImdldFN0YXRlIiwiX2dldFN0YXRpY0ZpbHRlclBheWxvYWQiLCJ0b3RhbE5vZGUiLCJfZ2V0RmFjZXRGaWx0ZXJQYXlsb2FkIiwiZ2V0RmlsdGVycyIsImZyb21GaWx0ZXJzIiwic2V0IiwiQ29yZSIsImNvbmZpZyIsIl9hcGlLZXkiLCJhcGlLZXkiLCJfZXhwZXJpZW5jZUtleSIsImV4cGVyaWVuY2VLZXkiLCJfZXhwZXJpZW5jZVZlcnNpb24iLCJleHBlcmllbmNlVmVyc2lvbiIsIl9sb2NhbGUiLCJsb2NhbGUiLCJfZmllbGRGb3JtYXR0ZXJzIiwiZmllbGRGb3JtYXR0ZXJzIiwicGVyc2lzdGVudFN0b3JhZ2UiLCJmaWx0ZXJSZWdpc3RyeSIsIl9zZWFyY2hlciIsInNlYXJjaFNlcnZpY2UiLCJfYXV0b0NvbXBsZXRlIiwiYXV0b0NvbXBsZXRlU2VydmljZSIsIl9xdWVzdGlvbkFuc3dlciIsInF1ZXN0aW9uQW5zd2VyU2VydmljZSIsIl9hbmFseXRpY3NSZXBvcnRlciIsImFuYWx5dGljc1JlcG9ydGVyIiwib25Vbml2ZXJzYWxTZWFyY2giLCJvblZlcnRpY2FsU2VhcmNoIiwiYXBwZW5kIiwic2VhcmNoTG9hZGluZyIsInJlc2V0UGFnaW5hdGlvbiIsInVzZUZhY2V0cyIsInNldEZhY2V0RmlsdGVyTm9kZXMiLCJzZXRRdWVyeVBhcmFtcyIsImNvbnRleHQiLCJyZWZlcnJlclBhZ2VVcmwiLCJzZWFyY2hDb25maWciLCJnZXRMb2NhdGlvblJhZGl1c0ZpbHRlck5vZGUiLCJ2ZXJ0aWNhbFNlYXJjaCIsImdlb2xvY2F0aW9uIiwiaW5wdXQiLCJnZXRTdGF0aWNGaWx0ZXJQYXlsb2FkIiwiZmFjZXRGaWx0ZXIiLCJnZXRGYWNldEZpbHRlclBheWxvYWQiLCJpc0R5bmFtaWNGaWx0ZXJzRW5hYmxlZCIsIl9pc0R5bmFtaWNGaWx0ZXJzRW5hYmxlZCIsInNraXBTcGVsbENoZWNrIiwicXVlcnlUcmlnZ2VyIiwic2Vzc2lvblRyYWNraW5nRW5hYmxlZCIsInNvcnRCeXMiLCJsb2NhdGlvblJhZGl1cyIsInRoZW4iLCJ0cmFuc2Zvcm1WZXJ0aWNhbCIsIm1lcmdlZFJlc3VsdHMiLCJleHBvc2VkUGFyYW1zIiwicXVlcnlTdHJpbmciLCJyZXBvcnQiLCJmcm9tRGF0YSIsInVuaXZlcnNhbFNlYXJjaCIsInRyYW5zZm9ybSIsInNlY3Rpb25zQ291bnQiLCJuYW1lc3BhY2UiLCJxdWVyeVVuaXZlcnNhbCIsInF1ZXJ5VmVydGljYWwiLCJxdWVyeUZpbHRlciIsInN1Ym1pdFF1ZXN0aW9uIiwic29ydEJ5T3B0aW9ucyIsIm9wdGlvbiIsImRpcmVjdGlvbiIsImF2YWlsYWJsZUZpZWxkaWRzIiwic2V0U3RhdGljRmlsdGVyTm9kZXMiLCJzZXRMb2NhdGlvblJhZGl1c0ZpbHRlck5vZGUiLCJjbGVhclN0YXRpY0ZpbHRlck5vZGUiLCJjbGVhckZhY2V0RmlsdGVyTm9kZXMiLCJjbGVhckxvY2F0aW9uUmFkaXVzRmlsdGVyTm9kZSIsImV2dCIsIm1vZHVsZUlkIiwiY2IiLCJvbiIsIl90b0NvbnN1bWFibGVBcnJheSIsIl9hcnJheVdpdGhvdXRIb2xlcyIsIl9pdGVyYWJsZVRvQXJyYXkiLCJfbm9uSXRlcmFibGVTcHJlYWQiLCJkb2N1bWVudCIsIndpbmRvdyIsIkRPTSIsImQiLCJwIiwiaHRtbCIsImNvbnRhaW5lciIsImNyZWF0ZUVsZW1lbnQiLCJmcmFnIiwiY3JlYXRlUmFuZ2UiLCJjcmVhdGVDb250ZXh0dWFsRnJhZ21lbnQiLCJhcHBlbmRDaGlsZCIsIkRPTVBhcnNlciIsInBhcnNlRnJvbVN0cmluZyIsImJvZHkiLCJwYXJlbnQiLCJzZWxlY3RvciIsIkhUTUxFbGVtZW50IiwiV2luZG93IiwiSFRNTERvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJyZWFkeVN0YXRlIiwiZWwiLCJvcHRzX2RhdGEiLCJub2RlIiwicHJvcHMiLCJhZGRDbGFzcyIsImluc2VydEFkamFjZW50SFRNTCIsImNsYXNzTmFtZSIsImNsYXNzZXMiLCJsZW4iLCJjbGFzc0xpc3QiLCJhZGQiLCJpbm5lckhUTUwiLCJzdHlsZXMiLCJwcm9wIiwic3R5bGUiLCJhdHRyIiwic2V0QXR0cmlidXRlIiwiYXR0cnMiLCJzZXR0aW5ncyIsImUiLCJfY3VzdG9tRXZlbnQiLCJkaXNwYXRjaEV2ZW50IiwiX3NldHRpbmdzIiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJkZXRhaWwiLCJjcmVhdGVFdmVudCIsImluaXRDdXN0b21FdmVudCIsImhhbmRsZXIiLCJhZGRFdmVudExpc3RlbmVyIiwib25jZSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJjdHh0IiwidGFyZ2V0IiwiaXNFcXVhbE5vZGUiLCJtYXRjaGVzIiwicGFyZW50Tm9kZSIsImVsZW1lbnQiLCJwb3RlbnRpYWxNYXRjaCIsIkVsZW1lbnQiLCJwcm90b3R5cGUiLCJtc01hdGNoZXNTZWxlY3RvciIsIndlYmtpdE1hdGNoZXNTZWxlY3RvciIsIlNlYXJjaFBhcmFtcyIsIl9wYXJhbXMiLCJVUkxTZWFyY2hQYXJhbXMiLCJwYXJhbXMiLCJzZWFyY2giLCJpbmRleE9mIiwiZW5jb2RlZFBhcmFtcyIsImtleVZhbCIsImRlY29kZSIsIlN0cmluZyIsImVuY29kZSIsImRlY29kZVVSSUNvbXBvbmVudCIsImVuY29kZVVSSUNvbXBvbmVudCIsIm1hdGNoIiwiUmVuZGVyZXIiLCJ0ZW1wbGF0ZSIsInRlbXBsYXRlTmFtZSIsIlNWR0ljb24iLCJwYXRoIiwiY29tcGxleENvbnRlbnRzIiwidmlld0JveCIsImNvbnRlbnRzIiwicGF0aERlZmluaXRpb24iLCJjb21wbGV4Q29udGVudHNQYXJhbXMiLCJwYXJzZUNvbnRlbnRzIiwiaWNvblByZWZpeCIsImljb25zQXJyYXkiLCJ0aHVtYkljb24iLCJyZWNlaXB0SWNvbiIsInBhbnRoZW9uSWNvbiIsIm1pY0ljb24iLCJkaXJlY3Rpb25zSWNvbiIsImNhbGVuZGFySWNvbiIsImNhbGxvdXRJY29uIiwiaW5mb0ljb24iLCJicmllZmNhc2VJY29uIiwia2Fib2JJY29uIiwicGVyc29uSWNvbiIsIm1hZ25pZnlpbmdHbGFzc0ljb24iLCJvZmZpY2VJY29uIiwibGlua0ljb24iLCJ3aW5kb3dJY29uIiwicGhvbmVJY29uIiwidGFnSWNvbiIsImRvY3VtZW50SWNvbiIsImNoZXZyb25JY29uIiwic3VwcG9ydEljb24iLCJ5ZXh0SWNvbiIsInBpbkljb24iLCJnZWFySWNvbiIsImxpZ2h0QnVsYkljb24iLCJlbGVtZW50cyIsImNsb3NlIiwieWV4dEFuaW1hdGVkRm9yd2FyZCIsInlleHRBbmltYXRlZFJldmVyc2UiLCJzdGFySWNvbiIsIkljb25zIiwiaWNvbiIsIm1hcmt1cCIsIkhhbmRsZWJhcnNSZW5kZXJlciIsInRlbXBsYXRlcyIsIl9oYW5kbGViYXJzIiwiX2hiIiwiX3RlbXBsYXRlcyIsIl9yZWdpc3RlckN1c3RvbUhlbHBlcnMiLCJyZWdpc3RlckhlbHBlciIsIlNhZmVTdHJpbmciLCJlc2NhcGVFeHByZXNzaW9uIiwiY29tcGlsZSIsImFyZzEiLCJhcmcyIiwiaW52ZXJzZSIsImVxIiwidjEiLCJ2MiIsIm5lIiwibHQiLCJndCIsImx0ZSIsImd0ZSIsImNhbGwiLCJhcmd1bWVudHMiLCJCb29sZWFuIiwic29tZSIsImExIiwiYTIiLCJzdWIiLCJtdWwiLCJkaXYiLCJtb2QiLCJhcmdzIiwidmFsdWVzIiwidiIsInBob25lTnVtYmVyU3RyaW5nIiwiY2xlYW5lZCIsImludGxDb2RlIiwicm9vdCIsIm51bWJlciIsInNpbmd1bGFyVGV4dCIsInBsdXJhbFRleHQiLCJzZWxmIiwiZ2V0SW52ZXJ0ZWQiLCJlc2NhcGVkSW5wdXQiLCJoaWdobGlnaHRlZFZhbCIsImdldCIsIlJlbmRlcmVycyIsIlNPWSIsIkhhbmRsZWJhcnMiLCJMSUJfVkVSU0lPTiIsIlBST0RVQ1RJT04iLCJTQU5EQk9YIiwiQ09NUElMRURfVEVNUExBVEVTX1VSTCIsIkRlZmF1bHRUZW1wbGF0ZXNMb2FkZXIiLCJvbkxvYWRlZCIsInNldEluc3RhbmNlIiwiZ2V0SW5zdGFuY2UiLCJfb25Mb2FkZWQiLCJfZmV0Y2hUZW1wbGF0ZXMiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsInNjcmlwdCIsImNyZWF0ZUVsIiwib25sb2FkIiwib25lcnJvciIsImFzeW5jIiwic3JjIiwiaW5zdGFuY2UiLCJFdmVudEVtaXR0ZXIiLCJfbGlzdGVuZXJzIiwibGlzdGVuZXJzIiwia2VlcCIsIlN0YXRlIiwiX3N0YXRlIiwib3B0VmFsIiwiX3NldCIsImVtaXQiLCJvcHRQcm9wIiwiZmV0Y2giLCJNZXRob2RzIiwiR0VUIiwiUE9TVCIsIlBVVCIsIkRFTEVURSIsIkh0dHBSZXF1ZXN0ZXIiLCJvcHRzIiwicmVxdWVzdCIsImVuY29kZVBhcmFtcyIsInVybFBhcmFtcyIsImpzb25Cb2R5IiwicmVxdWVzdENvbmZpZyIsImNyZWRlbnRpYWxzIiwibWV0aG9kIiwicmVxQXJncyIsIl9mZXRjaCIsImZldGNoUG9seWZpbGwiLCJfc2VuZEJlYWNvbiIsIm5hdmlnYXRvciIsInNlbmRCZWFjb24iLCJzeW5jIiwieGhyIiwiWE1MSHR0cFJlcXVlc3QiLCJBY3RpdmVYT2JqZWN0Iiwib3BlbiIsInNldFJlcXVlc3RIZWFkZXIiLCJzZW5kIiwiaGFzUGFyYW0iLCJzZWFyY2hRdWVyeSIsIkZJTFRFUl9CT1giLCJGSUxURVJfT1BUSU9OUyIsIlJBTkdFX0ZJTFRFUiIsIkRBVEVfUkFOR0VfRklMVEVSIiwiRkFDRVRTIiwiR0VPTE9DQVRJT05fRklMVEVSIiwiU09SVF9PUFRJT05TIiwiRklMVEVSX1NFQVJDSCIsImdldExpdmVBcGlVcmwiLCJlbnYiLCJnZXRDYWNoZWRMaXZlQXBpVXJsIiwiZ2V0S25vd2xlZGdlQXBpVXJsIiwiZ2V0QW5hbHl0aWNzVXJsIiwiY29udmVyc2lvblRyYWNraW5nRW5hYmxlZCIsInJlcGxhY2VVcmxQYXJhbXMiLCJ1cmxXaXRob3V0UXVlcnlQYXJhbXNBbmRIYXNoIiwiZXF1aXZhbGVudFBhcmFtcyIsInBhcmFtczEiLCJwYXJhbXMyIiwiZW50cmllczEiLCJlbnRyaWVzMiIsInJlbW92ZVBhcmFtc1dpdGhQcmVmaXhlcyIsInByZWZpeGVzIiwibmV3UGFyYW1zIiwiaW5jbHVkZUVudHJ5IiwicHJlZml4Iiwic3RhcnRzV2l0aCIsImZpbHRlclBhcmFtc0ZvckV4cGVyaWVuY2VMaW5rIiwiZ2V0Q29tcG9uZW50TmFtZXNGb3JDb21wb25lbnRUeXBlcyIsImNvbXBvbmVudFR5cGVzVG9FeGNsdWRlIiwiQ29tcG9uZW50VHlwZXMiLCJwYXJhbXNUb0ZpbHRlciIsInBhcmFtIiwiQXBpUmVxdWVzdCIsIl9yZXF1ZXN0ZXIiLCJfZW52aXJvbm1lbnQiLCJlbnZpcm9ubWVudCIsIl9iYXNlVXJsIiwiYmFzZVVybCIsIl9lbmRwb2ludCIsImVuZHBvaW50IiwiX3ZlcnNpb24iLCJ2ZXJzaW9uIiwiX2dsb2JhbFN0b3JhZ2UiLCJiYXNlUGFyYW1zIiwic2FuaXRpemVQYXJhbXMiLCJwb3N0IiwibG9jYXRpb24iLCJoYXMiLCJTZWFyY2hBcGkiLCJqc29uIiwiQW5hbHl0aWNzUmVwb3J0ZXIiLCJidXNpbmVzc0lkIiwiZ2xvYmFsT3B0aW9ucyIsIl9idXNpbmVzc0lkIiwiX2dsb2JhbE9wdGlvbnMiLCJfY29udmVyc2lvblRyYWNraW5nRW5hYmxlZCIsImNvb2tpZURhdGEiLCJ5dGFnIiwiYmVhY29uIiwidG9BcGlFdmVudCIsImlzRW5hYmxlZCIsIk5vb3BBbmFseXRpY3NSZXBvcnRlciIsIk1vZHVsZURhdGEiLCJfaWQiLCJfaGlzdG9yeSIsIl9kYXRhIiwiY2FwdHVyZVByZXZpb3VzIiwic2hpZnQiLCJwcmV2aW91cyIsIl9wcmV2aW91cyIsInBvcCIsIkdsb2JhbFN0b3JhZ2UiLCJfbW9kdWxlRGF0YUNvbnRhaW5lciIsIl9mdXR1cmVMaXN0ZW5lcnMiLCJfaW5pdERhdGFDb250YWluZXIiLCJfYXBwbHlGdXR1cmVMaXN0ZW5lcnMiLCJkYXRhS2V5IiwibW9kdWxlRGF0YSIsIm9mZiIsImZ1dHVyZXMiLCJmdXR1cmUiLCJDb21wb25lbnQiLCJzeXN0ZW1Db25maWciLCJjb25zdHJ1Y3RvciIsIl9jb25maWciLCJfdHlwZSIsIl9wYXJlbnRDb250YWluZXIiLCJwYXJlbnRDb250YWluZXIiLCJfY2hpbGRyZW4iLCJzdGF0ZSIsImNvcmUiLCJjb21wb25lbnRNYW5hZ2VyIiwiX2FuYWx5dGljc09wdGlvbnMiLCJhbmFseXRpY3NPcHRpb25zIiwiX2NvbnRhaW5lciIsIl9jbGFzc05hbWUiLCJfcmVuZGVyIiwicmVuZGVyIiwiX3JlbmRlcmVyIiwicmVuZGVyZXIiLCJfdGVtcGxhdGUiLCJfdGVtcGxhdGVOYW1lIiwiZGVmYXVsdFRlbXBsYXRlTmFtZSIsIl9pc01vdW50ZWQiLCJ0cmFuc2Zvcm1EYXRhIiwib25DcmVhdGUiLCJvbkNyZWF0ZU92ZXJyaWRlIiwiYmluZCIsIm9uTW91bnQiLCJvbk1vdW50T3ZlcnJpZGUiLCJvblVwZGF0ZSIsIm9uVXBkYXRlT3ZlcnJpZGUiLCJ1c2VyT25DcmVhdGUiLCJ1c2VyT25Nb3VudCIsInVzZXJPblVwZGF0ZSIsInNldFN0YXRlIiwidW5Nb3VudCIsIm1vdW50IiwibmV3U3RhdGUiLCJjaGlsZENvbXBvbmVudCIsImNyZWF0ZSIsIl9wYXJlbnRPcHRzIiwiYyIsIm9uVW5Nb3VudCIsImJlZm9yZU1vdW50IiwiYXNKU09OIiwiZG9tQ29tcG9uZW50cyIsInF1ZXJ5QWxsIiwiX2NyZWF0ZVN1YmNvbXBvbmVudCIsImRvbUhvb2tzIiwiX2NyZWF0ZUFuYWx5dGljc0hvb2siLCJiZWZvcmVSZW5kZXIiLCJhZnRlclJlbmRlciIsImRvbUNvbXBvbmVudCIsImRhdGFzZXQiLCJpc0NvbXBvbmVudE1vdW50ZWQiLCJjaGlsZERhdGEiLCJhZGRDaGlsZCIsInJldmVyc2UiLCJpc0FuYWx5dGljc0F0dGFjaGVkIiwiZXZlbnR0eXBlIiwiZXZlbnRsYWJlbCIsIm1pZGRsZWNsaWNrIiwiZXZlbnRvcHRpb25zIiwiYnV0dG9uIiwiRXJyb3JSZXBvcnRlciIsInByaW50VmVyYm9zZSIsInNlbmRUb1NlcnZlciIsImVyciIsInByaW50RXJyb3IiLCJ0b0pzb24iLCJjb25zb2xlIiwiQ29uc29sZUVycm9yUmVwb3J0ZXIiLCJQZXJzaXN0ZW50U3RvcmFnZSIsIl91cGRhdGVMaXN0ZW5lciIsInVwZGF0ZUxpc3RlbmVyIiwiX3Jlc2V0TGlzdGVuZXIiLCJyZXNldExpc3RlbmVyIiwib25wb3BzdGF0ZSIsIl9jYWxsTGlzdGVuZXIiLCJyZXBsYWNlSGlzdG9yeSIsIm5ld0RhdGEiLCJfdXBkYXRlSGlzdG9yeSIsImN1cnJlbnRQYXJhbXMiLCJoaXN0b3J5IiwicmVwbGFjZVN0YXRlIiwicHVzaFN0YXRlIiwibGlzdGVuZXIiLCJhbGxQYXJhbXMiLCJTZWFyY2hDb25maWciLCJkZWZhdWx0SW5pdGlhbFNlYXJjaCIsInZhbGlkYXRlIiwiQXV0b0NvbXBsZXRlRGF0YSIsImlucHV0SW50ZW50cyIsInMiLCJyIiwiQXV0b0NvbXBsZXRlUmVzdWx0IiwicXVlcnlJbnRlbnRzIiwiQXV0b0NvbXBsZXRlRGF0YVRyYW5zZm9ybWVyIiwiQXV0b0NvbXBsZXRlQXBpIiwic2VhcmNoUGFyYW1ldGVycyIsInZlcnRpY2FsIiwidW5pdmVyc2FsIiwidW5pdmVyc2FsT3B0aW9ucyIsInZlcnRpY2FsT3B0aW9ucyIsIk1vY2tBdXRvQ29tcGxldGVTZXJ2aWNlIiwiZW1wdHlSZXN1bHRzIiwiZmlsdGVyT3B0aW9ucyIsIm9wdCIsImxvd2VyY2FzZSIsInRvTG93ZXJDYXNlIiwicmFuZG9tU3RyaW5nIiwiTWF0aCIsInJhbmRvbSIsIlF1ZXN0aW9uQW5zd2VyQXBpIiwiZW50aXR5SWQiLCJzaXRlIiwicXVlc3Rpb25MYW5ndWFnZSIsIm1vZGUiLCJoZWFkZXJzIiwiTW9ja1F1ZXN0aW9uQW5zd2VyU2VydmljZSIsIkFSQklUUkFSWV9CVVNJTkVTU19JRCIsIk1vY2tTZWFyY2hTZXJ2aWNlIiwiX2dldE1vY2tEYXRhSnNvbiIsInJlc3AiLCJ0ZXh0IiwidXNlTW9ja0RhdGEiLCJkZWxheWVkUmVzcG9uc2UiLCJjb25zdHJ1Y3RWZXJ0aWNhbFJlc3BvbnNlIiwic2VjdGlvbiIsImZpbmQiLCJ2ZXJ0aWNhbE1vZHVsZSIsImZsb29yIiwibW9kaWZ5UmVzdWx0cyIsImdldFJlc3VsdHNGaWx0ZXJlciIsImNvbnN0cnVjdFVuaXZlcnNhbFJlc3BvbnNlIiwiY29uc3VtZXIiLCJtb2RpZnlGbiIsImZpbGxTZWN0aW9uRmllbGRzIiwibWV0YSIsInV1aWQiLCJ1dWlkVjQiLCJmYWlsZWRWZXJ0aWNhbHMiLCJxdWVyeUR1cmF0aW9uTWlsbGlzIiwicmFuZG9tSW50Iiwic2V0VGltZW91dCIsImdldFVybFBhcmFtcyIsImdldERlZmF1bHRUYWJPcmRlciIsInRhYnNDb25maWciLCJ0YWIiLCJ2ZXJ0aWNhbEtleU9yVXJsIiwiaXNGaXJzdCIsInVuc2hpZnQiLCJtZXJnZVRhYk9yZGVyIiwib3RoZXJUYWJPcmRlciIsInRhYnMiLCJ0YWJDb25maWciLCJnZXRUYWJPcmRlciIsImRhdGFUYWJPcmRlciIsIlJFU0laRV9ERUJPVU5DRSIsIk1PQklMRV9CUkVBS1BPSU5UIiwiTU9CSUxFX09WRVJGTE9XX0JFSEFWSU9SX09QVElPTiIsIkNPTExBUFNFIiwiSU5ORVJTQ1JPTEwiLCJUYWIiLCJpc0FjdGl2ZSIsImhpZGVJbk5hdmlnYXRpb24iLCJOYXZpZ2F0aW9uQ29tcG9uZW50Iiwib3ZlcmZsb3dMYWJlbCIsIm92ZXJmbG93SWNvbiIsIl90YWJzQ29uZmlnIiwidmVydGljYWxQYWdlcyIsIl90YWJzIiwiX3RhYk9yZGVyIiwiX25hdkJyZWFrcG9pbnRzIiwiX21vYmlsZU92ZXJmbG93QmVoYXZpb3IiLCJtb2JpbGVPdmVyZmxvd0JlaGF2aW9yIiwiX2FyaWFMYWJlbCIsImFyaWFMYWJlbCIsImNoZWNrT3V0c2lkZUNsaWNrIiwiY2hlY2tNb2JpbGVPdmVyZmxvd0JlaGF2aW9yIiwic2hvdWxkQ29sbGFwc2UiLCJiaW5kT3ZlcmZsb3dIYW5kbGVycyIsInJlZml0TmF2IiwidG9nZ2xlTW9yZURyb3Bkb3duIiwidW5iaW5kT3ZlcmZsb3dIYW5kbGVycyIsIm1vcmVCdXR0b24iLCJtYWluTGlua3MiLCJjb2xsYXBzZWRMaW5rcyIsIm5hdldpZHRoIiwiY29udGFpbnMiLCJvZmZzZXRXaWR0aCIsIm51bUJyZWFrcG9pbnRzIiwibWFpbkxpbmtzV2lkdGgiLCJsYXN0TGluayIsIl9wcmVwZW5kIiwiZmlyc3RMaW5rIiwiY2xvc2VNb3JlRHJvcGRvd24iLCJ0b2dnbGUiLCJfY2xvc2VzdCIsIl9jaGVja01vYmlsZU92ZXJmbG93QmVoYXZpb3JUaW1lciIsImNsZWFyVGltZW91dCIsImZpbHRlcmVkUGFyYW1zIiwidHlwZXMiLCJzaG93Q29sbGFwc2UiLCJkb2NGcmFnIiwiY3JlYXRlRG9jdW1lbnRGcmFnbWVudCIsImlzTm9kZSIsIk5vZGUiLCJjcmVhdGVUZXh0Tm9kZSIsImluc2VydEJlZm9yZSIsImZpcnN0Q2hpbGQiLCJwcmVwZW5kIiwiY2xvc2VzdEVsU2VsZWN0b3IiLCJwYXJlbnRFbGVtZW50Iiwibm9kZVR5cGUiLCJjbG9zZXN0IiwiSWNvblN0YXRlIiwiU2VhcmNoQ29tcG9uZW50IiwiX3ZlcnRpY2FsS2V5IiwiX3VzZUZvcm0iLCJ1c2VGb3JtIiwiX2Zvcm1FbCIsImZvcm1TZWxlY3RvciIsIl9pbnB1dEVsIiwiaW5wdXRFbCIsImxhYmVsVGV4dCIsInN1Ym1pdFRleHQiLCJjbGVhclRleHQiLCJzdWJtaXRJY29uIiwicHJvbXB0SGVhZGVyIiwiYXV0b0ZvY3VzIiwiY2xlYXJCdXR0b24iLCJhdXRvY29tcGxldGVPbkxvYWQiLCJyZWRpcmVjdFVybCIsIl9pc1R3aW4iLCJpc1R3aW4iLCJxIiwicXVlcnlFbCIsImRlYm91bmNlZFNlYXJjaCIsIl9zZWFyY2hDb29sZG93biIsInNlYXJjaENvb2xkb3duIiwiX3Byb21wdEZvckxvY2F0aW9uIiwicHJvbXB0Rm9yTG9jYXRpb24iLCJfc2hvd0NsZWFyQnV0dG9uIiwiX2FsbG93RW1wdHlTZWFyY2giLCJhbGxvd0VtcHR5U2VhcmNoIiwiX2F1dG9Db21wbGV0ZU5hbWUiLCJfZ2VvbG9jYXRpb25PcHRpb25zIiwiZW5hYmxlSGlnaEFjY3VyYWN5IiwidGltZW91dCIsIm1heGltdW1BZ2UiLCJnZW9sb2NhdGlvbk9wdGlvbnMiLCJfZ2VvbG9jYXRpb25UaW1lb3V0QWxlcnQiLCJlbmFibGVkIiwiZ2VvbG9jYXRpb25UaW1lb3V0QWxlcnQiLCJzZXRRdWVyeSIsImZvY3VzSW5wdXRFbGVtZW50IiwiaXNVc2luZ1lleHRBbmltYXRlZEljb24iLCJjdXN0b21JY29uVXJsIiwiaW5pdEFuaW1hdGVkSWNvbiIsImluaXRTZWFyY2giLCJpbml0QXV0b0NvbXBsZXRlIiwiaW5pdENsZWFyQnV0dG9uIiwiaWNvblN0YXRlIiwiaXNSZXF1ZXN0aW5nQW5pbWF0aW9uRnJhbWUiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJmb3J3YXJkSWNvbiIsInJldmVyc2VJY29uIiwiTUFHTklGWUlOR19HTEFTUyIsIllFWFQiLCJpY29uSXNGcm96ZW4iLCJyZXF1ZXN0SWNvbkFuaW1hdGlvbkZyYW1lIiwiZm9jdXNTdGlsbEluU2VhcmNoYmFyIiwicmVsYXRlZFRhcmdldCIsImNsaWNrYWJsZUVsZW1lbnRTZWxlY3RvcnMiLCJjbGlja2FibGVFbCIsImFuaW1hdGVJY29uVG9NYWduaWZ5aW5nR2xhc3MiLCJhbmltYXRlSWNvblRvWWV4dCIsIl9hdXRvY29tcGxldGUiLCJmb3JtIiwicHJldmVudERlZmF1bHQiLCJvblF1ZXJ5U3VibWl0Iiwic3VibWl0QnV0dG9uIiwiaHJlZiIsImJsdXIiLCJpbnB1dFNlbGVjdG9yIiwib25TdWJtaXQiLCJ0cmlnZ2VyIiwib25DaGFuZ2UiLCJfdGhyb3R0bGVkIiwiZmV0Y2hRdWVyeUludGVudHMiLCJxdWVyeUhhc05lYXJNZUludGVudCIsImdldEN1cnJlbnRQb3NpdGlvbiIsInBvc2l0aW9uIiwiY29vcmRzIiwiYWxlcnQiLCJnZXRBY3RpdmVDb21wb25lbnQiLCJjb25maWdJZCIsImF1dG9jb21wbGV0ZURhdGEiLCJhdXRvY29tcGxldGVSZXF1ZXN0IiwiYXV0b0NvbXBsZXRlVmVydGljYWwiLCJhdXRvQ29tcGxldGVVbml2ZXJzYWwiLCJtYXRjaGluZ1Jlc3VsdCIsImZvcndhcmRJY29uT3B0cyIsImljb25OYW1lIiwiY2xhc3NOYW1lcyIsInJldmVyc2VJY29uT3B0cyIsInNob3dDbGVhckJ1dHRvbiIsImljb25JZCIsImZvY3VzIiwiYnVpbGRTZWFyY2hQYXJhbWV0ZXJzIiwic2VhcmNoUGFyYW1ldGVyQ29uZmlncyIsInNlY3Rpb25lZCIsImZpZWxkcyIsImJ1aWxkRmllbGRzIiwiZmllbGRDb25maWdzIiwiZmMiLCJmZXRjaEVudGl0aWVzIiwiRmlsdGVyU2VhcmNoQ29tcG9uZW50IiwiX3N0b3JlT25DaGFuZ2UiLCJzdG9yZU9uQ2hhbmdlIiwic2VhcmNoVGV4dCIsIl9idWlsZEZpbHRlck5vZGUiLCJhdXRvQ29tcGxldGVDb21wb25lbnQiLCJfcmVtb3ZlRmlsdGVyTm9kZSIsImlzRmlsdGVyU2VhcmNoIiwiZnJvbVJlc3BvbnNlIiwiS2V5cyIsIkJBQ0tTUEFDRSIsIlRBQiIsIkVOVEVSIiwiU0hJRlQiLCJDVFJMIiwiQUxUIiwiRVNDQVBFIiwiTEVGVCIsIlJJR0hUIiwiVVAiLCJET1dOIiwiTEVGVF9PU19LRVkiLCJSSUdIVF9PU19LRVkiLCJTRUxFQ1RfS0VZIiwiQXV0b0NvbXBsZXRlQ29tcG9uZW50Iiwic3lzdGVtT3B0cyIsIl9hdXRvY29tcGxldGVFbHMiLCJhdXRvQ29tcGxldGVFbHMiLCJfb3JpZ2luYWxRdWVyeSIsIl9zZWN0aW9uSW5kZXgiLCJfcmVzdWx0SW5kZXgiLCJfYXV0b0ZvY3VzIiwiX29uU3VibWl0IiwiX29uQ2hhbmdlIiwiX3NlYXJjaFBhcmFtZXRlcnMiLCJpc1F1ZXJ5SW5wdXRGb2N1c2VkIiwic2VjdGlvbkluZGV4IiwicmVzdWx0SW5kZXgiLCJhY3RpdmVFbGVtZW50IiwicXVlcnlJbnB1dCIsImF0dHJpYnV0ZXMiLCJhdXRvY29tcGxldGUiLCJhdXRvY29ycmVjdCIsInNwZWxsY2hlY2siLCJyZXNldCIsImF1dG9Db21wbGV0ZSIsImhhbmRsZU5hdmlnYXRlUmVzdWx0cyIsImtleUNvZGUiLCJoYW5kbGVTdWJtaXRSZXN1bHQiLCJkZWxlZ2F0ZSIsInVwZGF0ZVF1ZXJ5IiwiaGFuZGxlVHlwaW5nIiwidXBkYXRlU3RhdGUiLCJvcHRWYWx1ZSIsImlnbm9yZWRLZXlzIiwiYXV0b0NvbXBsZXRlRmlsdGVyIiwiREVGQVVMVF9DT05GSUciLCJzdWdnZXN0aW9uSGVscFRleHQiLCJTcGVsbENoZWNrQ29tcG9uZW50IiwiY29ycmVjdGVkUXVlcnlVcmwiLCJfYnVpbGRSZWRpcmVjdFF1ZXJ5VXJsIiwiaGVscFRleHQiLCJfZ2V0SGVscFRleHQiLCJpcEFjY3VyYWN5SGVscFRleHQiLCJkZXZpY2VBY2N1cmFjeUhlbHBUZXh0IiwidXBkYXRlTG9jYXRpb25CdXR0b25UZXh0IiwiTG9jYXRpb25CaWFzQ29tcG9uZW50IiwiX3VwZGF0ZUxvY2F0aW9uRWwiLCJ1cGRhdGVMb2NhdGlvbkVsIiwiX2xvY2F0aW9uRGlzcGxheU5hbWUiLCJfYWNjdXJhY3kiLCJfYWxsb3dVcGRhdGUiLCJfZGlzYWJsZUxvY2F0aW9uVXBkYXRlSWZHZW9sb2NhdGlvbkRlbmllZCIsIl9kb1NlYXJjaCIsIl9oYW5kbGVHZW9sb2NhdGlvbkVycm9yIiwiY29kZSIsIl9kaXNhYmxlTG9jYXRpb25VcGRhdGUiLCJfZ2V0TG9jYXRpb25EaXNwbGF5TmFtZSIsImFjY3VyYWN5VGV4dCIsIl9nZXRBY2N1cmFjeUhlbHBUZXh0IiwiaXNQcmVjaXNlTG9jYXRpb24iLCJpc1Vua25vd25Mb2NhdGlvbiIsImFsbG93VXBkYXRlIiwicGVybWlzc2lvbnMiLCJGaWx0ZXJCb3hDb25maWciLCJzaG93Q291bnQiLCJzZWFyY2hPbkNoYW5nZSIsInJlc2V0RmlsdGVyIiwicmVzZXRGaWx0ZXJMYWJlbCIsInJlc2V0RmlsdGVycyIsInJlc2V0RmlsdGVyc0xhYmVsIiwic2hvd01vcmVMaW1pdCIsInNob3dNb3JlTGFiZWwiLCJzaG93TGVzc0xhYmVsIiwic2hvd01vcmUiLCJleHBhbmQiLCJzaG93TnVtYmVyQXBwbGllZCIsImFwcGx5TGFiZWwiLCJhcHBseUJ1dHRvblNlbGVjdG9yIiwiZmlsdGVyQ29uZmlncyIsImlzRHluYW1pYyIsIkZpbHRlckJveENvbXBvbmVudCIsIl9maWx0ZXJDb21wb25lbnRzIiwiX2ZpbHRlck5vZGVzIiwiaGlkZUNvdW50Iiwic2hvd1Jlc2V0IiwicmVzZXRMYWJlbCIsInNob3dBcHBseUJ1dHRvbiIsInNob3dFeHBhbmQiLCJhbHdheXNTYXZlRmlsdGVyTm9kZXMiLCJibG9ja1NlYXJjaE9uQ2hhbmdlIiwiX3NhdmVGaWx0ZXJOb2RlcyIsIl9zZWFyY2hPbkNoYW5nZSIsIm9uRmlsdGVyTm9kZUNoYW5nZSIsImZsb2F0U2VsZWN0ZWQiLCJnZXRGaWx0ZXJOb2RlIiwiX3NhdmVGaWx0ZXJOb2Rlc1RvU3RvcmFnZSIsIl9zZWFyY2giLCJyZXNldEVsIiwiY2xlYXJPcHRpb25zIiwic2F2ZUZpbHRlck5vZGVzIiwiX2dldFZhbGlkRmlsdGVyTm9kZXMiLCJhcHBseSIsImdyb3VwQXJyYXkiLCJhcnIiLCJrZXlGdW5jIiwidmFsdWVGdW5jIiwiaW5pdGlhbCIsInJlZHVjZSIsImlkeCIsIlNVUFBPUlRFRF9DT05UUk9MUyIsIk9wdGlvblR5cGVzIiwiUkFESVVTX0ZJTFRFUiIsIlNUQVRJQ19GSUxURVIiLCJGaWx0ZXJPcHRpb25zQ29uZmlnIiwiY29udHJvbCIsIm9wdGlvblR5cGUiLCJvcHRpb25TZWxlY3RvciIsInBsYWNlaG9sZGVyVGV4dCIsInNlYXJjaGFibGUiLCJzZWFyY2hMYWJlbFRleHQiLCJwcmV2aW91c09wdGlvbnMiLCJzZXRTZWxlY3RlZE9wdGlvbnMiLCJoYXNTZWVuU2VsZWN0ZWRPcHRpb24iLCJudW1TZWxlY3RlZCIsInBvc3NpYmxlVHlwZXMiLCJGaWx0ZXJPcHRpb25zQ29tcG9uZW50Iiwic2VsZWN0ZWRDb3VudCIsImdldEluaXRpYWxTZWxlY3RlZENvdW50Iiwic2hvd01vcmVTdGF0ZSIsIl9nZXRTZWxlY3RlZENvdW50IiwiZGlzcGxheVJlc2V0IiwiaXNTaW5nbGVPcHRpb24iLCJzZWxlY3RlZENvdW50RWwiLCJpbm5lclRleHQiLCJfdXBkYXRlT3B0aW9uIiwicGFyc2VJbnQiLCJjaGVja2VkIiwic2hvd0xlc3NFbCIsInNob3dNb3JlRWwiLCJvcHRpb25zT3ZlckxpbWl0RWxzIiwib3B0aW9uRWwiLCJjbGVhclNlYXJjaEVsIiwic2VhcmNoSW5wdXRFbCIsImZpbHRlck9wdGlvbkVscyIsImZpbHRlckNvbnRhaW5lckVsIiwiRXZlbnQiLCJmaWx0ZXJPcHRpb24iLCJsYWJlbEVsIiwidGV4dENvbnRlbnQiLCJ0cmltIiwibWF0Y2hlZFN1YnN0cmluZyIsIl9nZXRNYXRjaGVkU3Vic3RyaW5nIiwibGVnZW5kIiwiY2xpY2siLCJfZ2V0T2Zmc2V0IiwibWluRmlsdGVyU2l6ZUZvckxldmVuc2h0ZWluIiwibWF4TGV2ZW5zaHRlaW5EaXN0YW5jZSIsInN1YnN0cmluZ3MiLCJzdWJzdHIiLCJtaW5MZXZEaXN0IiwibWluTGV2U3Vic3RyaW5nIiwibGV2RGlzdCIsIl9jYWxjTGV2ZW5zaHRlaW5EaXN0YW5jZSIsImxldmVuc2h0ZWluIiwidXBkYXRlTGlzdGVuZXJzIiwiX3RvZ2dsZVJlc2V0IiwiX2dldEZpbHRlclR5cGUiLCJzZWxlY3RlZE9wdGlvbiIsIl9idWlsZEZpbHRlck1ldGFkYXRhIiwiX2NsZWFyU2luZ2xlT3B0aW9uIiwiX2J1aWxkRmlsdGVyIiwiZmllbGRJZFRvRmlsdGVyTm9kZXMiLCJ0b3RhbEZpbHRlck5vZGVzIiwic2FtZUlkTm9kZXMiLCJtaW5QbGFjZWhvbGRlclRleHQiLCJtYXhQbGFjZWhvbGRlclRleHQiLCJSYW5nZUZpbHRlckNvbXBvbmVudCIsIl9maWVsZCIsIm1pblZhbCIsIm1heFZhbCIsIl9yYW5nZSIsImdldEZpcnN0VmFsaWRWYWx1ZSIsImluaXRpYWxNaW4iLCJpbml0aWFsTWF4IiwiX3RpdGxlIiwiX21pbkxhYmVsIiwibWluTGFiZWwiLCJfbWF4TGFiZWwiLCJtYXhMYWJlbCIsIm1pblZhbHVlIiwibWF4VmFsdWUiLCJfdXBkYXRlUmFuZ2UiLCJfbWluIiwiX21heCIsInJhbmdlIiwiRGF0ZVJhbmdlRmlsdGVyQ29tcG9uZW50IiwiX2lzRXhjbHVzaXZlIiwidG9kYXkiLCJEYXRlIiwidG9kYXlTdHJpbmciLCJnZXRGdWxsWWVhciIsImdldE1vbnRoIiwicGFkU3RhcnQiLCJnZXREYXRlIiwibWluRGF0ZSIsIm1heERhdGUiLCJfZGF0ZSIsImRhdGVNaW4iLCJkYXRlTWF4IiwiZGF0ZSIsIkZhY2V0c0NvbmZpZyIsInJlc2V0RmFjZXQiLCJyZXNldEZhY2V0TGFiZWwiLCJyZXNldEZhY2V0cyIsInJlc2V0RmFjZXRzTGFiZWwiLCJmaWVsZENvbnRyb2xzIiwiRmFjZXRzQ29tcG9uZW50IiwiX2FwcGx5QnV0dG9uU2VsZWN0b3IiLCJfZmlsdGVyYm94IiwiaXNOb1Jlc3VsdHMiLCJlbmFibGVEeW5hbWljRmlsdGVycyIsImZpZWxkT3ZlcnJpZGVzIiwiTUVURVJTX1BFUl9NSUxFIiwiZ2VvQnV0dG9uSWNvbiIsImdlb0J1dHRvbkljb25BbHRUZXh0IiwiZ2VvQnV0dG9uVGV4dCIsImVuYWJsZWRUZXh0IiwibG9hZGluZ1RleHQiLCJlcnJvclRleHQiLCJidXR0b25TZWxlY3RvciIsIkdlb0xvY2F0aW9uQ29tcG9uZW50IiwicGxhY2Vob2xkZXIiLCJfZW5hYmxlZCIsImdlb0xvYWRpbmciLCJnZW9FcnJvciIsImdlb0VuYWJsZWQiLCJnZW9WYWx1ZSIsImdlb1BsYWNlaG9sZGVyIiwiX2luaXRBdXRvQ29tcGxldGUiLCJfdG9nZ2xlR2VvRmlsdGVyIiwiX2hhbmRsZVN1Ym1pdCIsIl9zYXZlRGF0YVRvU3RvcmFnZSIsIlNvcnRPcHRpb25zQ29tcG9uZW50IiwiYXNzaWduRGVmYXVsdHMiLCJzZWxlY3RlZE9wdGlvbkluZGV4IiwiaXNTZWxlY3RlZCIsImhpZGVFeGNlc3NPcHRpb25zIiwidmVydGljYWxSZXN1bHRzIiwiY29udGFpbmVyRWwiLCJoYW5kbGVPcHRpb25TZWxlY3Rpb24iLCJ0b2dnbGVFbCIsImFwcGx5RWwiLCJfc29ydFJlc3VsdHMiLCJvcHRpb25JbmRleCIsIl91cGRhdGVTZWxlY3RlZE9wdGlvbiIsImNsZWFyU29ydEJ5cyIsInNldFNvcnRCeXMiLCJ1cGRhdGVkQ29uZmlnIiwiZGVmYXVsdFNvcnRMYWJlbCIsIk9QVElPTl9UWVBFUyIsIm5ld09wdGlvbiIsImlzRmllbGQiLCJFdmVudFR5cGVzIiwiVEhVTUJTX1VQIiwiVEhVTUJTX0RPV04iLCJwb3NpdGl2ZUZlZWRiYWNrU3JUZXh0IiwibmVnYXRpdmVGZWVkYmFja1NyVGV4dCIsImZvb3RlclRleHRPblN1Ym1pc3Npb24iLCJEaXJlY3RBbnN3ZXJDb21wb25lbnQiLCJfdXNlckNvbmZpZyIsImZvcm1FbCIsIl90aHVtYnNVcFNlbGVjdG9yIiwidGh1bWJzVXBTZWxlY3RvciIsIl90aHVtYnNEb3duU2VsZWN0b3IiLCJ0aHVtYnNEb3duU2VsZWN0b3IiLCJfdmlld0RldGFpbHNUZXh0Iiwidmlld0RldGFpbHNUZXh0IiwiX2RlZmF1bHRDYXJkIiwiZGVmYXVsdENhcmQiLCJfY2FyZE92ZXJyaWRlcyIsImNhcmRPdmVycmlkZXMiLCJoYXNTdGF0ZSIsIm92ZXJyaWRlIiwiZGlyZWN0QW5zd2VyUHJvcGV0aWVzIiwiZW50aXR5VHlwZSIsImZpZWxkVHlwZSIsInByb3BlcnR5VG9NYXRjaCIsInByb3BlcnR5VmFsdWUiLCJjYXJkT3ZlcnJpZGUiLCJfb3ZlcnJpZGVNYXRjaGVzQW5zd2VyIiwiY2FyZFR5cGUiLCJjdXN0b21DYXJkIiwiZmVlZGJhY2tTdWJtaXR0ZWQiLCJjaGVja2VkVmFsdWUiLCJyZXBvcnRRdWFsaXR5IiwicnRmRWxlbWVudCIsIl9oYW5kbGVSdGZDbGlja0FuYWx5dGljcyIsImN0YVR5cGUiLCJzZWFyY2hlciIsIl9nZXRDdXN0b21DYXJkIiwiY3RhTGFiZWwiLCJpc0dvb2QiLCJBbHRlcm5hdGl2ZVZlcnRpY2FsIiwiaWNvblVybCIsImhhc0ljb24iLCJBbHRlcm5hdGl2ZVZlcnRpY2Fsc0NvbXBvbmVudCIsIl9hbHRlcm5hdGl2ZVZlcnRpY2FscyIsIl92ZXJ0aWNhbHNDb25maWciLCJ2ZXJ0aWNhbHNDb25maWciLCJfY3VycmVudFZlcnRpY2FsTGFiZWwiLCJnZXRDdXJyZW50VmVydGljYWxMYWJlbCIsInZlcnRpY2FsU3VnZ2VzdGlvbnMiLCJfYnVpbGRWZXJ0aWNhbFN1Z2dlc3Rpb25zIiwiX3VuaXZlcnNhbFVybCIsInVuaXZlcnNhbFVybCIsIl9pc1Nob3dpbmdSZXN1bHRzIiwiaXNTaG93aW5nUmVzdWx0cyIsIkFMRVJOQVRJVkVfVkVSVElDQUxTIiwiY3VycmVudFZlcnRpY2FsTGFiZWwiLCJ0aGlzVmVydGljYWwiLCJ2ZXJ0aWNhbHMiLCJhbHRlcm5hdGl2ZVZlcnRpY2FsIiwibWF0Y2hpbmdWZXJ0aWNhbENvbmZpZyIsIk1hcFByb3ZpZGVyIiwiX3pvb20iLCJ6b29tIiwiX2RlZmF1bHRQb3NpdGlvbiIsImRlZmF1bHRQb3NpdGlvbiIsIl9ub1Jlc3VsdHMiLCJub1Jlc3VsdHMiLCJfc2hvd0VtcHR5TWFwIiwic2hvd0VtcHR5TWFwIiwiX21hcCIsIl9pc0xvYWRlZCIsIl9vblBpbkNsaWNrIiwib25QaW5DbGljayIsIl9vblBpbk1vdXNlT3ZlciIsIm9uUGluTW91c2VPdmVyIiwiX29uUGluTW91c2VPdXQiLCJvblBpbk1vdXNlT3V0IiwiX3BpbkNvbmZpZyIsInBpbiIsIkRFRkFVTFRfUElOX0NPTkZJRyIsIl9jb2xsYXBzZVBpbnMiLCJjb2xsYXBzZVBpbnMiLCJpc0xvYWRlZCIsIm1hcERhdGEiLCJtYXJrZXJzIiwibG9jYXRpb25Ub0l0ZW0iLCJjb2xsYXBzZWRNYXJrZXJzIiwiY29sbGFwc2VkTWFya2VyIiwidmlzaWJsZUZvck5vUmVzdWx0cyIsImhhc0VtcHR5TWFwIiwiYW5jaG9yIiwic3ZnIiwic2NhbGVkU2l6ZSIsImxhYmVsVHlwZSIsIkdvb2dsZU1hcFByb3ZpZGVyIiwiX3pvb21PZmZzZXQiLCJfY2xpZW50SWQiLCJjbGllbnRJZCIsIl9zaWduYXR1cmUiLCJzaWduYXR1cmUiLCJoYXNWYWxpZENsaWVudENyZWRlbnRpYWxzIiwib25Mb2FkIiwiZ29vZ2xlIiwib25Mb2FkRnVuYyIsImdlbmVyYXRlQ3JlZGVudGlhbHMiLCJzaG91bGRIaWRlTWFwIiwidmlzaWJsZSIsIm1hcHMiLCJNYXAiLCJjZW50ZXIiLCJnZXRDZW50ZXJNYXJrZXIiLCJfY29sbGFwc2VNYXJrZXJzIiwiZ29vZ2xlTWFwTWFya2VyQ29uZmlncyIsIkdvb2dsZU1hcE1hcmtlckNvbmZpZyIsImJvdW5kcyIsIkxhdExuZ0JvdW5kcyIsIm1hcmtlciIsIk1hcmtlciIsImFkZExpc3RlbmVyIiwiZXh0ZW5kIiwiZml0Qm91bmRzIiwibWFwQ2VudGVyIiwic2VyaWFsaXplZE1hcmtlcnMiLCJwaW5Db25maWciLCJwaW5Db25maWdPYmoiLCJQb2ludCIsIngiLCJ5IiwiU2l6ZSIsInciLCJoIiwiTWFwQm94TWFwUHJvdmlkZXIiLCJtYXBib3hnbCIsImFjY2Vzc1Rva2VuIiwiY3NzIiwicmVsIiwibWFwYm94TWFwTWFya2VyQ29uZmlncyIsIk1hcEJveE1hcmtlckNvbmZpZyIsIkxuZ0xhdEJvdW5kcyIsIndyYXBwZXIiLCJMbmdMYXQiLCJzZXRMbmdMYXQiLCJnZXRMbmdMYXQiLCJhZGRUbyIsImdldEVsZW1lbnQiLCJwYWRkaW5nIiwic3RhdGljTWFwUGluIiwiUHJvdmlkZXJUeXBlcyIsIk1hcENvbXBvbmVudCIsImRpc3BsYXlBbGxSZXN1bHRzIiwiX21hcFByb3ZpZGVyIiwibWFwUHJvdmlkZXIiLCJnZXRQcm92aWRlckluc3RhbmNlIiwibG9hZEpTIiwiaW5pdCIsImNhcmRUZW1wbGF0ZXMiLCJjYXJkVHlwZXMiLCJDYXJkQ29uZmlnIiwiZGF0YU1hcHBpbmdzIiwiX2luZGV4IiwiaXNVbml2ZXJzYWwiLCJDYXJkQ29tcG9uZW50Iiwid2FybiIsImNhcmRDb21wb25lbnROYW1lIiwidXBkYXRlZERhdGEiLCJuZXdPcHRzIiwic2hvd09yZGluYWwiLCJhdHRyaWJ1dGUiLCJjb252ZXJ0TmxwRmlsdGVyc1RvRmlsdGVyTm9kZXMiLCJubHBGaWx0ZXJzIiwibmxwRmlsdGVyIiwiZmxhdHRlbkZpbHRlck5vZGVzIiwicHJ1bmVGaWx0ZXJOb2RlcyIsImhpZGRlbkZpZWxkcyIsImdldE1ldGFkYXRhIiwic2hvd1Jlc3VsdENvdW50Iiwic2hvd0FwcGxpZWRGaWx0ZXJzIiwic2hvd0ZpZWxkTmFtZXMiLCJyZXN1bHRzQ291bnRTZXBhcmF0b3IiLCJzaG93Q2hhbmdlRmlsdGVycyIsInJlbW92YWJsZSIsImRlbGltaXRlciIsInJlbW92YWJsZUxhYmVsVGV4dCIsInJlc3VsdHNDb3VudFRlbXBsYXRlIiwiUmVzdWx0c0hlYWRlckNvbXBvbmVudCIsInJlc3VsdHNMZW5ndGgiLCJfY29tcGlsZWRSZXN1bHRzQ291bnRUZW1wbGF0ZSIsIm5scEZpbHRlck5vZGVzIiwicmVtb3ZhYmxlRmlsdGVyVGFncyIsInRhZyIsIl9yZW1vdmVGaWx0ZXJUYWciLCJmaWx0ZXJJZCIsImFwcGxpZWRGaWx0ZXJOb2RlcyIsImR1cGxpY2F0ZXNSZW1vdmVkIiwibmxwTm9kZSIsImlzRHVwbGljYXRlIiwiYXBwbGllZE5vZGUiLCJoYXNTYW1lRmlsdGVyQXMiLCJnZXRGaWVsZE5hbWUiLCJwYXJzZU5scEZpbHRlckRpc3BsYXkiLCJwYXJzZVJlbW92YWJsZUZpbHRlckRpc3BsYXkiLCJkYXRhRmlsdGVySWQiLCJyZW1vdmFibGVOb2RlcyIsInBydW5lZE5scEZpbHRlck5vZGVzIiwiX2dldFBydW5lZE5scEZpbHRlck5vZGVzIiwiZ3JvdXBlZEZpbHRlcnMiLCJfZ3JvdXBBcHBsaWVkRmlsdGVycyIsImZpbHRlckRhdGFBcnJheSIsImdldEFsbEZpbHRlck5vZGVzIiwic2ltcGxlRmlsdGVyTm9kZXMiLCJfY2FsY3VsYXRlQXBwbGllZEZpbHRlck5vZGVzIiwiYXBwbGllZEZpbHRlcnNBcnJheSIsIl9jcmVhdGVBcHBsaWVkRmlsdGVyc0FycmF5Iiwic2hvdWxkU2hvd0ZpbHRlcnMiLCJyZXN1bHRzQ291bnREYXRhIiwicmVzdWx0c0NvdW50U3RhcnQiLCJyZXN1bHRzQ291bnRFbmQiLCJzaG93UmVzdWx0U2VwYXJhdG9yIiwiY3VzdG9tUmVzdWx0c0NvdW50IiwiZGVmYXVsdENvbmZpZ09wdGlvbiIsInN5bm9ueW1zIiwiZGVmYXVsdFZhbHVlIiwiYWNjZXNzb3JzIiwicGFyZW50Q29uZmlnIiwic2tpcCIsImNoaWxkQ29uZmlnQWNjZXNzb3IiLCJjb25maWdOYW1lIiwiVmVydGljYWxSZXN1bHRzQ29uZmlnIiwicGFyZW50T3B0cyIsInJlbmRlckl0ZW0iLCJpdGVtVGVtcGxhdGUiLCJtYXhOdW1iZXJPZkNvbHVtbnMiLCJjYXJkIiwiYXBwbGllZEZpbHRlcnMiLCJzaG93IiwiY2hhbmdlRmlsdGVyc1RleHQiLCJ2aWV3TW9yZUxhYmVsIiwiVmVydGljYWxSZXN1bHRzQ29tcG9uZW50IiwiQVBQTFlfU1lOT05ZTVMiLCJub1Jlc3VsdHNDb25maWciLCJfbm9SZXN1bHRzQ29uZmlnIiwiX3VzZUxlZ2FjeU5vUmVzdWx0cyIsIl9kaXNwbGF5QWxsUmVzdWx0cyIsIl9ub1Jlc3VsdHNUZW1wbGF0ZSIsIm51bUNvbHVtbnMiLCJyZXN1bHRzSGVhZGVyT3B0cyIsInVuaXZlcnNhbENvbmZpZyIsIl9nZXRFeHBlcmllbmNlVVJMIiwidmVydGljYWxDb25maWciLCJkaXNwbGF5UmVzdWx0c0lmRXhpc3QiLCJpc1ByZVNlYXJjaCIsImlzU2VhcmNoTG9hZGluZyIsImlzU2VhcmNoQ29tcGxldGUiLCJnZXRVbml2ZXJzYWxVcmwiLCJnZXRWZXJ0aWNhbFVSTCIsInJlc3VsdHNQcmVzZW50Iiwic2hvd05vUmVzdWx0cyIsInBsYWNlaG9sZGVycyIsInVzZUxlZ2FjeU5vUmVzdWx0cyIsImljb25Jc0J1aWx0SW4iLCJfb3B0cyIsIm1hcENvbmZpZyIsInJlc3VsdHNIZWFkZXJEYXRhIiwic2VjdGlvblRpdGxlSWNvbk5hbWUiLCJzZWN0aW9uVGl0bGVJY29uVXJsIiwic2VjdGlvblRpdGxlIiwiQWNjb3JkaW9uUmVzdWx0c0NvbXBvbmVudCIsIl9zZWxlY3RvckJhc2UiLCJzZWxlY3RvckJhc2UiLCJjb2xsYXBzZWRDbGFzcyIsInNlbGZFbCIsImZpcnN0RWxlbWVudENoaWxkIiwiYWNjb3JkaW9uRWxzIiwiYWNjb3JkaW9uRWwiLCJ0b2dnbGVTZWxlY3RvciIsImNvbnRlbnRFbCIsImJvZHlTZWxlY3RvciIsImNoYW5nZUhlaWdodCIsImhhbmRsZUNsaWNrIiwid3JhcHBlckVsIiwiaXNDb2xsYXBzZWQiLCJ0YXJnZXRFbCIsImhlaWdodCIsInNjcm9sbEhlaWdodCIsImJ1aWxkU2VsZWN0b3IiLCJVbml2ZXJzYWxSZXN1bHRzQ29tcG9uZW50IiwiX2FwcGxpZWRGaWx0ZXJzIiwiY2hpbGRPcHRzIiwiZ2V0Q2hpbGRDb25maWciLCJjaGlsZFR5cGUiLCJ1c2VBY2NvcmRpb24iLCJ0b3BMZXZlbEFwcGxpZWRGaWx0ZXJzIiwidmlld01vcmUiLCJQYWdpbmF0aW9uQ29tcG9uZW50IiwiX21heFZpc2libGVQYWdlc0Rlc2t0b3AiLCJtYXhWaXNpYmxlUGFnZXNEZXNrdG9wIiwiX21heFZpc2libGVQYWdlc01vYmlsZSIsIm1heFZpc2libGVQYWdlc01vYmlsZSIsIl9zaG93Rmlyc3RBbmRMYXN0UGFnZUJ1dHRvbnMiLCJzaG93Rmlyc3RBbmRMYXN0QnV0dG9uIiwiX2ZpcnN0UGFnZUJ1dHRvbkVuYWJsZWQiLCJzaG93Rmlyc3QiLCJfbGFzdFBhZ2VCdXR0b25FbmFibGVkIiwic2hvd0xhc3QiLCJfcGluRmlyc3RBbmRMYXN0UGFnZSIsInBpbkZpcnN0QW5kTGFzdFBhZ2UiLCJfaWNvbnMiLCJpY29ucyIsIl9wYWdlTGFiZWwiLCJwYWdlTGFiZWwiLCJfb25QYWdpbmF0ZSIsIm9uUGFnaW5hdGUiLCJzY3JvbGxUb1RvcCIsIl9saW1pdCIsImlzTm9ybWFsUmVzdWx0cyIsImlzVmlzaWJsZUZvck5vUmVzdWx0cyIsInNob3dDb250cm9scyIsInNob3VsZFNob3dDb250cm9scyIsInByZXZpb3VzUGFnZUJ1dHRvbiIsIm5leHRQYWdlQnV0dG9uIiwibWF4UGFnZSIsInRydW5jIiwidXBkYXRlUGFnZSIsImZpcnN0UGFnZUJ1dHRvbiIsImxhc3RQYWdlQnV0dG9uIiwiY3VycmVudE9mZnNldCIsImN1cnJlbnRQYWdlTnVtYmVyIiwibmV3UGFnZU51bWJlciIsIm1heFBhZ2VDb3VudCIsIl9jb21wdXRlTWF4UGFnZSIsInZlcnRpY2FsUGFnZSIsImRvY3VtZW50RWxlbWVudCIsInNjcm9sbFRvcCIsInBhZ2VOdW1iZXIiLCJiYWNrTGltaXQiLCJmcm9udExpbWl0IiwiX2FsbG9jYXRlIiwibW9iaWxlQmFja0xpbWl0IiwibW9iaWxlRnJvbnRMaW1pdCIsImRlc2t0b3BCYWNrTGltaXQiLCJkZXNrdG9wRnJvbnRMaW1pdCIsInBhZ2VOdW1iZXJWaWV3cyIsIm51bSIsImFjdGl2ZSIsImFjdGl2ZURlc2t0b3AiLCJhY3RpdmVNb2JpbGUiLCJtb2JpbGVIaWRkZW4iLCJkZXNrdG9wSGlkZGVuIiwicGlubmVkTnVtYmVycyIsIm1vYmlsZUJhY2siLCJtb2JpbGVGcm9udCIsImRlc2t0b3BCYWNrIiwiZGVza3RvcEZyb250IiwiZWxsaXBzZXMiLCJpc01vcmVSZXN1bHRzIiwiX2NyZWF0ZVBhZ2VOdW1iZXJWaWV3cyIsImZpcnN0UGFnZUJ1dHRvbkVuYWJsZWQiLCJsYXN0UGFnZUJ1dHRvbkVuYWJsZWQiLCJzaG93Rmlyc3RQYWdlQnV0dG9uIiwic2hvd1ByZXZpb3VzUGFnZUJ1dHRvbiIsInNob3dOZXh0UGFnZUJ1dHRvbiIsInNob3dMYXN0UGFnZUJ1dHRvbiIsInBhZ2VOdW1iZXJzIiwicGluUGFnZXMiLCJuZXh0UGFnZSIsIkNUQUNvbGxlY3Rpb25Db21wb25lbnQiLCJpbmNsdWRlTGVnYWN5Q2xhc3NlcyIsInJlc29sdmVDVEFNYXBwaW5nIiwiX2N0YU1vZGlmaWVycyIsImN0YSIsImRlZmF1bHRFdmVudE9wdGlvbnMiLCJwYXJzZWRDVEFzIiwiY3RhcyIsImN0YU1hcHBpbmciLCJjdGFPYmplY3QiLCJjdGFBdHRyaWJ1dGUiLCJhdHRyaWJ1dGVNYXBwaW5nIiwiU3RhbmRhcmRDYXJkQ29uZmlnIiwicmF3UmVzdWx0IiwiYXBwbHlEYXRhTWFwcGluZ3MiLCJzaG93TW9yZVRleHQiLCJzaG93TGVzc1RleHQiLCJkZXRhaWxzT3ZlckxpbWl0Iiwic2hvd1RvZ2dsZSIsIlN0YW5kYXJkQ2FyZENvbXBvbmVudCIsImhpZGVFeGNlc3NEZXRhaWxzIiwiaGFzQ1RBcyIsIlN0YW5kYXJkIiwiQWNjb3JkaW9uQ2FyZENvbmZpZyIsIkFjY29yZGlvbkNhcmRDb21wb25lbnQiLCJpc0V4cGFuZGVkIiwiYWNjb3JkaW9uQm9keUVsIiwiQWNjb3JkaW9uIiwiTGVnYWN5Q2FyZENvbmZpZyIsIkxlZ2FjeUNhcmRDb21wb25lbnQiLCJfbGVnYWN5RXZlbnRPcHRpb25zIiwiTGVnYWN5IiwiUXVlc3Rpb25TdWJtaXNzaW9uQ29tcG9uZW50IiwidmFsaWRhdGVDb25maWciLCJvblJlc3VsdHNVcGRhdGUiLCJ0cmlnZ2VyRWwiLCJiaW5kRm9ybVRvZ2dsZSIsImJpbmRGb3JtRm9jdXMiLCJiaW5kRm9ybVN1Ym1pdCIsImdldEFuYWx5dGljc0V2ZW50IiwiZm9ybURhdGEiLCJpbnB1dEZpZWxkcyIsIm9iaiIsImNoZWNrVmFsaWRpdHkiLCJ2YWxpZGl0eSIsInZhbHVlTWlzc2luZyIsImVtYWlsRm9ybWF0RXJyb3JUZXh0IiwicHJpdmFjeVBvbGljeUVycm9yVGV4dCIsIkljb25Db21wb25lbnQiLCJDVEFDb25maWciLCJhbmFseXRpY3NFdmVudFR5cGUiLCJhbmFseXRpY3MiLCJfaXNTb2xvIiwiQ1RBQ29tcG9uZW50IiwicmVwb3J0QW5hbHl0aWNzRXZlbnQiLCJDT01QT05FTlRfQ0xBU1NfTElTVCIsIkNPTVBPTkVOVF9SRUdJU1RSWSIsInJlZ2lzdHJ5IiwiY2xhenoiLCJDb21wb25lbnRNYW5hZ2VyIiwiX2FjdGl2ZUNvbXBvbmVudHMiLCJfY29yZSIsIl9jb21wb25lbnRUeXBlVG9Db21wb25lbnROYW1lcyIsInJlcG9ydGVyIiwiY29tcG9uZW50Q2xhenoiLCJjb21wb25lbnRUeXBlIiwic2ltaWxhckNvbXBvbmVudHMiLCJjb21wb25lbnRDbGFzcyIsImdldFNpbWlsYXJDb21wb25lbnRzIiwiYXJlRHVwbGljYXRlTmFtZXNBbGxvd2VkIiwiZmluZEluZGV4Iiwic3BsaWNlIiwibmFtZXMiLCJWZXJ0aWNhbFBhZ2VDb25maWciLCJWZXJ0aWNhbFBhZ2VzQ29uZmlnIiwicGFnZXMiLCJ2ZXJ0aWNhbFBhZ2VzQ29uZmlnIiwicGFnZSIsIk1hc3RlclN3aXRjaEFwaSIsIl9yZXF1ZXN0IiwicmFjZSIsInN0YXR1cyIsImRpc2FibGVkIiwiaXNEaXNhYmxlZCIsInRoaXMiLCJnbG9iYWwiLCJSaWNoVGV4dEZvcm1hdHRlckltcGwiLCJmaWVsZFZhbHVlIiwidGFyZ2V0Q29uZmlnIiwicGx1Z2luTmFtZSIsIl9nZW5lcmF0ZVBsdWdpbk5hbWUiLCJSdGZDb252ZXJ0ZXIiLCJhZGRQbHVnaW4iLCJpdGVyYXRvciIsInRva2VucyIsIl91cmxUcmFuc2Zvcm1lciIsInRvSFRNTCIsImRpc2FibGVQbHVnaW4iLCJhdHRyR2V0IiwicGhvbmUiLCJhdHRyU2V0IiwiczQiLCJSaWNoVGV4dEZvcm1hdHRlciIsImlzVmFsaWRDb250ZXh0IiwicGFyc2VkIiwiREVGQVVMVFMiLCJBbnN3ZXJzIiwiZm9ybWF0UmljaFRleHQiLCJtYXJrZG93biIsImV2ZW50T3B0aW9uc0ZpZWxkTmFtZSIsImZvcm1hdCIsImNvbXBvbmVudHMiLCJfb25SZWFkeSIsIl9lbGlnaWJsZUZvckFuYWx5dGljcyIsIl9zZXJ2aWNlcyIsIl9hbmFseXRpY3NSZXBvcnRlclNlcnZpY2UiLCJzdGF0dXNQYWdlIiwicGFyc2VkQ29uZmlnIiwicGFyc2VDb25maWciLCJvblN0YXRlQ2hhbmdlIiwic2V0QWxsIiwicmVmZXJyZXIiLCJfbWFzdGVyU3dpdGNoQXBpIiwibW9jayIsImdldE1vY2tTZXJ2aWNlcyIsImdldFNlcnZpY2VzIiwic2V0UXVlcnlJZCIsInNldEFuYWx5dGljc1JlcG9ydGVyIiwiaW5pdFNjcm9sbExpc3RlbmVyIiwic2V0Q29yZSIsInNldFJlbmRlcmVyIiwiX3NldERlZmF1bHRJbml0aWFsU2VhcmNoIiwib25SZWFkeSIsInVzZVRlbXBsYXRlcyIsInRlbXBsYXRlQnVuZGxlIiwiX2hhbmRsZVBvbnlmaWxsQ3NzVmFyaWFibGVzIiwiZGlzYWJsZUNzc1ZhcmlhYmxlc1BvbnlmaWxsIiwiX2ludm9rZU9uUmVhZHkiLCJwb255ZmlsbERpc2FibGVkIiwiY2FsbGJhY2siLCJwb255ZmlsbENzc1ZhcmlhYmxlcyIsIm9uRmluYWxseSIsInNhbmRib3hQcmVmaXgiLCJyZWdpc3RlciIsInJlbW92ZUJ5TmFtZSIsInJlZ2lzdGVyVGVtcGxhdGUiLCJvcHRJbiIsInNldENvbnZlcnNpb25UcmFja2luZ0VuYWJsZWQiLCJwcmVwb3B1bGF0ZWRRdWVyeSIsImNzc1ZhcnMiLCJvbmx5TGVnYWN5Iiwib25FcnJvciIsIm9uU3VjY2VzcyIsIm9uQmVmb3JlU2VuZCIsInVyaVdpdGhDYWNoZUJ1c3QiLCJVUkwiLCJnZXRUaW1lIiwiY29udGV4dFN0cmluZyIsImVycm9yUmVwb3J0ZXJTZXJ2aWNlIiwiZGVidWciLCJzdXBwcmVzc0Vycm9yUmVwb3J0cyIsIkRFQk9VTkNFX1RJTUUiLCJzZW5kRXZlbnQiLCJpbm5lckhlaWdodCIsInBhZ2VZT2Zmc2V0IiwiZ2V0UXVlcnlJZCIsIkFOU1dFUlMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0VBQUE7O0VBRUE7Ozs7O0FBS0EscUJBQWU7RUFDYkEsRUFBQUEsVUFBVSxFQUFFLFlBREM7RUFFYkMsRUFBQUEsY0FBYyxFQUFFLGdCQUZIO0VBR2JDLEVBQUFBLGVBQWUsRUFBRTtFQUhKLENBQWY7O0VDUEE7TUFFcUJDLFNBQ25CLGtCQUF3QjtFQUFBLE1BQVhDLElBQVcsdUVBQUosRUFBSTs7RUFBQTs7RUFDdEI7Ozs7O0VBS0EsT0FBS0MsSUFBTCxHQUFZRCxJQUFJLENBQUNFLEdBQUwsSUFBWSxJQUF4QjtFQUVBOzs7Ozs7RUFLQSxPQUFLQyxVQUFMLEdBQWtCSCxJQUFJLENBQUNJLFNBQXZCO0VBRUE7Ozs7OztFQUtBLE9BQUtDLFlBQUwsR0FBb0JMLElBQUksQ0FBQ00sV0FBekI7RUFFQTs7Ozs7RUFJQSxPQUFLQyxPQUFMLEdBQWVQLElBQUksQ0FBQ08sT0FBTCxJQUFnQixJQUEvQjtFQUVBOzs7OztFQUlBLE9BQUtDLEtBQUwsR0FBYVIsSUFBSSxDQUFDUSxLQUFMLElBQWMsSUFBM0I7RUFFQTs7Ozs7RUFJQSxPQUFLQyxPQUFM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LElBQUksRUFBRSxDQUFDO01BQ1AsSUFBSSxFQUFFLENBQUM7TUFDUCxJQUFJLEdBQUcsQ0FBQztNQUNSLElBQUksR0FBRyxDQUFDO01BQ1IsSUFBSSxHQUFHLENBQUM7TUFDUixJQUFJLEdBQUcsQ0FBQzs7TUFFUixJQUFJLE1BQU0sR0FBRyxFQUFFLENBQUM7O01BRWhCLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQ3ZCLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ25CLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztPQUN2Qzs7TUFFRCxJQUFJLEdBQUcsR0FBRyxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQzs7TUFFNUIsT0FBTyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsR0FBRztRQUNsQixHQUFHLEdBQUcsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxNQUFNLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdEMsR0FBRyxHQUFHLENBQUMsQ0FBQyxVQUFVLENBQUMsTUFBTSxJQUFJLEVBQUUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMxQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxNQUFNLElBQUksRUFBRSxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzFDLEdBQUcsR0FBRyxDQUFDLENBQUMsVUFBVSxDQUFDLE1BQU0sSUFBSSxFQUFFLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDMUMsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUNkLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUU7VUFDM0IsRUFBRSxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztVQUNmLEVBQUUsR0FBRyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1VBQ25CLEVBQUUsR0FBRyxJQUFJLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1VBQy9CLEVBQUUsR0FBRyxJQUFJLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1VBQy9CLEVBQUUsR0FBRyxJQUFJLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1VBQy9CLEVBQUUsR0FBRyxJQUFJLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1VBQy9CLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUM7VUFDZixFQUFFLEdBQUcsRUFBRSxDQUFDO1VBQ1IsRUFBRSxHQUFHLEVBQUUsQ0FBQztVQUNSLEVBQUUsR0FBRyxFQUFFLENBQUM7VUFDUixFQUFFLEdBQUcsRUFBRSxDQUFDO1NBQ1Q7T0FDRjs7TUFFRCxPQUFPLENBQUMsR0FBRyxFQUFFLEdBQUc7UUFDZCxHQUFHLEdBQUcsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxNQUFNLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdEMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO1FBQ1QsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRTtVQUMzQixFQUFFLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1VBQ2YsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLE1BQU0sQ0FBQyxD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SSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxNQUFNLElBQUksS0FBSyxDQUFDLHdFQUF3RSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxLQUFLLENBQUMsc0JBQXNCLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxpQ0FBaUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxpQ0FBaUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxpSUFBaUksQ0FBQyxDQUFDLENBQUMsa0NBQWtDLENBQUMsQ0FBQyxDQUFDLElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxtSEFBbUgsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsc0JBQXNCLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU0sRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLEtBQUssR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLEVBQUUsS0FBSyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLDZDQUE2QyxDQUFDLENBQUMsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyw0QkFBNEIsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLG9DQUFvQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLDZCQUE2QixDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsT0FBTyxLQUFLLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxRQUFRLEVBQUUsT0FBTyxDQUFDLENBQUMsTUFBTSxJQUFJLFNBQVMsQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxPQUFNLGlCQUFpQixHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsT0FBTyxNQUFNLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUMsT0FBTSxDQUFDLENBQUMsQ0FBQyxPQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLE9BQU0sQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsS0FBSyxHQUFHLENBQUMsS0FBSyxJQUFJLENBQUMsS0FBSyxJQUFJLENBQUMsS0FBSyxJQUFJLENBQUMsS0FBSyxLQUFLLENBQUMsT0FBTSxDQUFDLENBQUMsQ0FBQyxPQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLEtBQUssR0FBRyxDQUFDLEtBQUssR0FBRyxDQUFDLEtBQUssR0FBRyxDQUFDLEtBQUssR0FBRyxDQUFDLE9BQU0sQ0FBQyxDQUFDLENBQUMsUUFBUSxPQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsa0JBQWtCLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLFdBQVcsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxXQUFXLEVBQUUsRUFBQyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyw2QkFBNkIsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLENBQUMsMEJBQTBCLENBQUMsQ0FBQyxDQUFDLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxvQkFBb0IsRUFBQyxDQUFDLENBQUMsQ0FBQywwQkFBMEIsQ0FBQyxDQUFDLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxDQUFDLG9CQUFvQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxHQUFHLEdBQUcsQ0FBQyxDQUFDLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFFLENBQUMsQ0FBQyxHQUFFLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsR0FBRyxDQUFDLEVBQUUsRUFBRSxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRSxDQUFDLE9BQU8sQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLHNCQUFzQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsbUNBQW1DLENBQUMsQ0FBQyxDQUFDLG1DQUFtQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxPQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxPQUFPLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsSUFBSSxZQUFZLENBQUMsQ0FBQyxDQUFDLE9BQU8sSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLElBQUksS0FBSyxDQUFDLDhCQUE4QixDQUFDLENBQUMsQ0FBQyxlQUFlLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLE1BQU0sSUFBSSxLQUFLLENBQUMsNENBQTRDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxFQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sSUFBSSxLQUFLLENBQUMsZ0RBQWdELENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQyxNQUFNLElBQUksS0FBSyxDQUFDLGlEQUFpRCxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLFFBQVEsRUFBRSxPQUFPLENBQUMsQ0FBQyxNQUFNLElBQUksS0FBSyxDQUFDLCtCQUErQixDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLENBQUMsZUFBZSxDQUFDLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFLENBQUMsc0JBQXNCLENBQUMsRUFBRSxDQUFDLG1CQUFtQixDQUFDLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMscUJBQXFCLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLHFCQUFxQixDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQywwQkFBMEIsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLG9CQUFvQixDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLHlCQUF5QixDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsdUJBQXVCLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsd0JBQXdCLENBQUMsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQywwQkFBMEIsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsMkJBQTJCLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQywwQkFBMEIsQ0FBQyxFQUFFLENBQUMsb0JBQW9CLENBQUMsRUFBRSxDQUFDLHFCQUFxQixDQUFDLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxFQUFFLENBQUMsa0JBQWtCLENBQUMsRUFBRSxDQUFDLDBCQUEwQixDQUFDLEVBQUUsQ0FBQyx3QkFBd0IsQ0FBQyxFQUFFLENBQUMsb0JBQW9CLENBQUMsRUFBRSxDQUFDLHlCQUF5QixDQUFDLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxFQUFFLENBQUMsMkJBQTJCLENBQUMsRUFBRSxDQUFDLHFCQUFxQixDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsd0JBQXdCLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLHFCQUFxQixDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsc0JBQXNCLENBQUMsQ0FBQyxDQUFDLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQywyQkFBMkIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLDBCQUEwQixDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMseUJBQXlCLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxvQkFBb0IsQ0FBQyxFQUFFLENBQUMscUJBQXFCLENBQUMsRUFBRSxDQUFDLHNCQUFzQixDQUFDLEVBQUUsQ0FBQyx3QkFBd0IsQ0FBQyxFQUFFLENBQUMsMkJBQTJCLENBQUMsRUFBRSxDQUFDLDBCQUEwQixDQUFDLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLHFCQUFxQixDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsd0JBQXdCLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLDBCQUEwQixDQUFDLENBQUMsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsOEJBQThCLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMseUJBQXlCLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMscUJBQXFCLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLHlCQUF5QixDQUFDLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsNEJBQTRCLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsOEJBQThCLENBQUMsQ0FBQyxDQUFDLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyw4QkFBOEIsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyw4QkFBOEIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLFdBQVcsR0FBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLDZCQUE2QixDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMseUJBQXlCLENBQUMsRUFBRSxDQUFDLDBCQUEwQixDQUFDLEVBQUUsQ0FBQyw4QkFBOEIsQ0FBQyxFQUFFLENBQUMseUJBQXlCLENBQUMsRUFBRSxDQUFDLHVCQUF1QixDQUFDLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxFQUFFLENBQUMsNEJBQTRCLENBQUMsRUFBRSxDQUFDLHNCQUFzQixDQUFDLEVBQUUsQ0FBQyxxQkFBcUIsQ0FBQyxFQUFFLENBQUMsd0JBQXdCLENBQUMsRUFBRSxDQUFDLDZCQUE2QixDQUFDLEVBQUUsQ0FBQyw4QkFBOEIsQ0FBQyxFQUFFLENBQUMscUJBQXFCLENBQUMsRUFBRSxDQUFDLDhCQUE4QixDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxVQUFVLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxlQUFlLENBQUMsVUFBVSxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLGVBQWUsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTSxPQUFPLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFNLE1BQU0sQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBRSxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixFQUFFLFlBQVksQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxRQUFRLEdBQUcsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBRyxRQUFRLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLGtCQUFrQixDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFJLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxJQUFJLEtBQUssQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxJQUFJLEtBQUssQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sSUFBSSxLQUFLLENBQUMseUJBQXlCLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLE1BQU0sSUFBSSxLQUFLLENBQUMsbUNBQW1DLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sTUFBTSxJQUFJLEtBQUssQ0FBQyxtQ0FBbUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxPQUFPLElBQUksR0FBRyxJQUFJLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDLE9BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxPQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsT0FBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDLE9BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsR0FBRyxDQUFDLENBQUMsT0FBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLE9BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsT0FBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUMsT0FBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLE9BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUMsT0FBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsR0FBRyxDQUFDLEVBQUUsRUFBRSxHQUFHLENBQUMsQ0FBQyxPQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFFLENBQUMsT0FBTSxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLHVCQUF1QixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLHNCQUFzQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsbUNBQW1DLENBQUMseUJBQXlCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQyxPQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsdUJBQXVCLENBQUMsQ0FBQyxDQUFDLG1CQUFtQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQyxPQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixDQUFDLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxHQUFHLENBQUMsRUFBRSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxPQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFNLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsT0FBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxFQUFFLEVBQUUsR0FBRyxDQUFDLENBQUMsTUFBTSxPQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsT0FBTSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQyxPQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLFVBQVUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsT0FBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxXQUFXLEdBQUcsQ0FBQyxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxPQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsR0FBRSxDQUFDLENBQUMsR0FBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUMsTUFBTSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxFQUFFLGdCQUFnQixHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixDQUFDLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQyxPQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsR0FBRyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsR0FBRyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLEdBQUcsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsT0FBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxHQUFHLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxPQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLEdBQUcsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBVSxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLE9BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEdBQUUsQ0FBQyxDQUFDLEdBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsT0FBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUMsT0FBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLEdBQUcsQ0FBQyxFQUFFLEVBQUUsR0FBRyxDQUFDLENBQUMsT0FBTSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxHQUFHLENBQUMsRUFBRSxFQUFFLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsU0FBUyxPQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQyxPQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUMsRUFBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxjQUFjLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTSxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsUUFBUSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxZQUFZLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLEdBQUcsYUFBYSxHQUFHLENBQUMsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxNQUFNLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLGlCQUFpQixDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxLQUFLLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsS0FBSyxFQUFFLFdBQVcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsR0FBRSxFQUFDLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyw4QkFBOEIsQ0FBQyxDQUFDLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLGtCQUFrQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxNQUFNLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsQ0FBQyxZQUFZLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxNQUFNLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLEdBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyx1QkFBdUIsQ0FBQyxPQUFPLENBQUMsQ0FBQyxPQUFPLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLDBCQUEwQixDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsV0FBVyxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsTUFBTSxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLENBQUMsWUFBWSxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsTUFBTSxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxHQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxFQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixDQUFDLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxXQUFXLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxXQUFXLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUUsV0FBVyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsV0FBVyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxFQUFFLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQywwSUFBMEksQ0FBQyxDQUFDLENBQUMsc0RBQXNELENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLE9BQU0sRUFBRSxFQUFFLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLE9BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsTUFBTSxHQUFHLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxFQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxNQUFNLEVBQUUsRUFBRSxHQUFHLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxjQUFjLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxFQUFFLEVBQUUsR0FBRyxDQUFDLENBQUMsT0FBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsRUFBQyxFQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLG9CQUFvQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixDQUFDLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsc0NBQXNDLENBQUMsQ0FBQyxDQUFDLDJCQUEyQixDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxvQ0FBb0MsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLE9BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLEdBQUcsQ0FBQyxFQUFFLEVBQUUsR0FBRyxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixDQUFDLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsT0FBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxPQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUUsQ0FBQyxJQUFJLENBQUMsR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxPQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixDQUFDLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLE9BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLE9BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLG9CQUFvQixDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsT0FBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixDQUFDLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFFLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsR0FBRyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxTQUFTLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDLE9BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsRUFBQyxFQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsS0FBSyxHQUFHLENBQUMsS0FBSyxHQUFHLENBQUMsS0FBSyxHQUFHLENBQUMsT0FBTSxDQUFDLENBQUMsQ0FBQyxRQUFRLE9BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUMsRUFBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxPQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsaUJBQWlCLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLG9CQUFvQixDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsd0JBQXdCLENBQUMsR0FBRyxDQUFDLHFCQUFxQixDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQywrQkFBK0IsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLHNCQUFzQixDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLHFCQUFxQixDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxHQUFHLENBQUMsd0JBQXdCLENBQUMsR0FBRyxDQUFDLG9CQUFvQixDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLG1CQUFtQixDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLENBQUMsaUJBQWlCLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsa0JBQWtCLENBQUMsR0FBRyxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsb0JBQW9CLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDLEdBQUcsQ0FBQyxxQkFBcUIsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsaUJBQWlCLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLG1CQUFtQixDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsaUJBQWlCLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsaUJBQWlCLENBQUMsR0FBRyxDQUFDLG1CQUFtQixDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsa0JBQWtCLENBQUMsR0FBRyxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxHQUFHLENBQUMsa0JBQWtCLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDLEdBQUcsQ0FBQyxxQkFBcUIsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsb0JBQW9CLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENB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LE1BQU0sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsa0JBQWtCLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsa0JBQWtCLENBQUMsR0FBRyxDQUFDLG9CQUFvQixDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsaUJBQWlCLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsbUJBQW1CLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsa0JBQWtCLENBQUMsR0FBRyxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsaUJBQWlCLENBQUMsR0FBRyxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsa0JBQWtCLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxNQUFNLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTSxtQkFBbUIsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLHNCQUFzQixDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLElBQUksTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLHlWQUF5VixDQUFDLENBQUMsQ0FBQyw2RUFBNkUsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxlQUFlLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sSUFBSSxLQUFLLENBQUMsOEJBQThCLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsaUJBQWlCLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sU0FBUyxDQUFDLENBQUMsQ0FBQyxPQUFNLGlCQUFpQixHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxPQUFNLGlCQUFpQixHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsY0FBYyxDQUFDLEdBQUUsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLFdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsSUFBSSxZQUFZLENBQUMsQ0FBQyxDQUFDLE9BQU8sSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxXQUFXLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsY0FBYyxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsT0FBTyxJQUFJLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsY0FBYyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxNQUFNLEVBQUUsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsK0JBQStCLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsOEJBQThCLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsNkJBQTZCLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsNkJBQTZCLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FB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QUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQyxXQUFXLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsbUJBQW1CLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxLQUFLLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUUsTUFBTSxFQUFFLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxZQUFZLENBQUMsS0FBSyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksUUFBUSxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUMsV0FBVyxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLEVBQUUsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxrQkFBa0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsWUFBVyxDQUFDLEtBQUssQ0FBQyxFQUFFLGtCQUFrQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsc0JBQXNCLENBQUMsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxTQUFTLEVBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsb0NBQW9DLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDLENBQUMsOEJBQThCLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLHNCQUFzQixDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTSxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsUUFBUSxFQUFFLE9BQU8sQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsT0FBTyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLDJCQUEyQixDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxpREFBaUQsQ0FBQyxXQUFXLENBQUMsZ0RBQWdELENBQUMsZUFBZSxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sSUFBSSxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEtBQUssR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsS0FBSyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsUUFBUSxDQUFDLEVBQUMsQ0FBQyxDQUFDLElBQUksRUFBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLHFCQUFvQixDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsd05BQXVOLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxxMkRBQW8yRCxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsMkRBQTBELENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsd0JBQXdCLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLHVCQUF1QixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsc0JBQXNCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxzQkFBc0IsRUFBQyxDQUFDLENBQUMsQ0FBQyx1QkFBdUIsQ0FBQyxFQUFFLENBQUMsdUJBQXVCLENBQUMsRUFBRSxDQUFDLHNCQUFzQixDQUFDLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxFQUFFLENBQUMsd0JBQXdCLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxtSUFBa0ksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQyxPQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxHQUFHLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxTQUFTLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsVUFB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