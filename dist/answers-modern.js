(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('css-vars-ponyfill')) :
  typeof define === 'function' && define.amd ? define(['css-vars-ponyfill'], factory) :
  (global = global || self, global.ANSWERS = factory(global.cssVars));
}(this, function (cssVars) { 'use strict';

  cssVars = cssVars && cssVars.hasOwnProperty('default') ? cssVars['default'] : cssVars;

  function _typeof(obj) {
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function (obj) {
        return typeof obj;
      };
    } else {
      _typeof = function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }

    return _typeof(obj);
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function _objectSpread(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};
      var ownKeys = Object.keys(source);

      if (typeof Object.getOwnPropertySymbols === 'function') {
        ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
          return Object.getOwnPropertyDescriptor(source, sym).enumerable;
        }));
      }

      ownKeys.forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    }

    return target;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    if (superClass) _setPrototypeOf(subClass, superClass);
  }

  function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
      return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _getPrototypeOf(o);
  }

  function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
      o.__proto__ = p;
      return o;
    };

    return _setPrototypeOf(o, p);
  }

  function isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;

    try {
      Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
      return true;
    } catch (e) {
      return false;
    }
  }

  function _construct(Parent, args, Class) {
    if (isNativeReflectConstruct()) {
      _construct = Reflect.construct;
    } else {
      _construct = function _construct(Parent, args, Class) {
        var a = [null];
        a.push.apply(a, args);
        var Constructor = Function.bind.apply(Parent, a);
        var instance = new Constructor();
        if (Class) _setPrototypeOf(instance, Class.prototype);
        return instance;
      };
    }

    return _construct.apply(null, arguments);
  }

  function _isNativeFunction(fn) {
    return Function.toString.call(fn).indexOf("[native code]") !== -1;
  }

  function _wrapNativeSuper(Class) {
    var _cache = typeof Map === "function" ? new Map() : undefined;

    _wrapNativeSuper = function _wrapNativeSuper(Class) {
      if (Class === null || !_isNativeFunction(Class)) return Class;

      if (typeof Class !== "function") {
        throw new TypeError("Super expression must either be null or a function");
      }

      if (typeof _cache !== "undefined") {
        if (_cache.has(Class)) return _cache.get(Class);

        _cache.set(Class, Wrapper);
      }

      function Wrapper() {
        return _construct(Class, arguments, _getPrototypeOf(this).constructor);
      }

      Wrapper.prototype = Object.create(Class.prototype, {
        constructor: {
          value: Wrapper,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
      return _setPrototypeOf(Wrapper, Class);
    };

    return _wrapNativeSuper(Class);
  }

  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;

    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      target[key] = source[key];
    }

    return target;
  }

  function _objectWithoutProperties(source, excluded) {
    if (source == null) return {};

    var target = _objectWithoutPropertiesLoose(source, excluded);

    var key, i;

    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
        target[key] = source[key];
      }
    }

    return target;
  }

  function _assertThisInitialized(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return self;
  }

  function _possibleConstructorReturn(self, call) {
    if (call && (typeof call === "object" || typeof call === "function")) {
      return call;
    }

    return _assertThisInitialized(self);
  }

  function _superPropBase(object, property) {
    while (!Object.prototype.hasOwnProperty.call(object, property)) {
      object = _getPrototypeOf(object);
      if (object === null) break;
    }

    return object;
  }

  function _get(target, property, receiver) {
    if (typeof Reflect !== "undefined" && Reflect.get) {
      _get = Reflect.get;
    } else {
      _get = function _get(target, property, receiver) {
        var base = _superPropBase(target, property);

        if (!base) return;
        var desc = Object.getOwnPropertyDescriptor(base, property);

        if (desc.get) {
          return desc.get.call(receiver);
        }

        return desc.value;
      };
    }

    return _get(target, property, receiver || target);
  }

  function _slicedToArray(arr, i) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
  }

  function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
  }

  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) {
      for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

      return arr2;
    }
  }

  function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
  }

  function _iterableToArray(iter) {
    if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
  }

  function _iterableToArrayLimit(arr, i) {
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;

    try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance");
  }

  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance");
  }

  /** @module SearchStates */

  /**
   * SearchStates is an ENUM for the various stages of searching,
   * used to show different templates
   * @enum {string}
   */
  var SearchStates = {
    PRE_SEARCH: 'pre-search',
    SEARCH_LOADING: 'search-loading',
    SEARCH_COMPLETE: 'search-complete'
  };

  /** @module Result */
  var Result = function Result() {
    var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, Result);

    /**
     * The raw profile data
     * @type {Object}
     * @private
     */
    this._raw = data.raw || null;
    /**
     * The formatted profile data
     * @type {Object}
     * @private
     */

    this._formatted = data.formatted;
    /**
     * The highlighted profile data with highlights applied to applicable fields
     * @type {Object}
     * @private
     */

    this._highlighted = data.highlighted;
    /**
     * The index number of the result
     * @type {Number}
     */

    this.ordinal = data.ordinal || null;
    /**
     * The title of the result card
     * @type {string|null}
     */

    this.title = data.title || null;
    /**
     * The body of the details section of the result card, can contain HTML
     * @type {string| null}
     */

    this.details = data.details || null;
    /**
     * The destination link for the title of the result card
     * @type {string|null}
     */

    this.link = data.link || null;
    /**
     * The Entity ID, or other unique identifier, used for to power interactivity
     * @type {string|null}
     */

    this.id = data.id || null;
    /**
     * The subtitle on the result card
     * @type {string|null}
     */

    this.subtitle = data.subtitle || null;
    /**
     * The class modifier, usually derived from the vertical configuration ID
     * Used to apply different styling to different result card types
     * @type {string|null}
     */

    this.modifier = data.modifier || null;
    /**
     * A large date, of the format { month: 'Jan', day: '01' }
     * @type {Object|null}
     */

    this.bigDate = data.bigDate || null;
    /**
     * An image profile object, expected to have a url property
     * @type {Object|null}
     */

    this.image = data.image || null;
    /**
     * An array of calls to action, of the format:
     * { icon: '', url: '', text: '', eventType: '', eventOptions: {}}
     * @type {Array}
     */

    this.callsToAction = data.callsToAction || [];
    /**
     * Determines if an accordian result should be collapsed by default
     * @type {boolean}
     */

    this.collapsed = data.collapsed === undefined ? true : data.collapsed;
    /**
     * @type {number}
     */

    this.distance = data.distance || null;
  };

  /** @module HighlightedValue */

  /**
   * Model representing a highlighted value.
   */
  var HighlightedValue =
  /*#__PURE__*/
  function () {
    function HighlightedValue() {
      var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      _classCallCheck(this, HighlightedValue);

      this.value = data.value || data.shortValue || '';
      this.matchedSubstrings = data.matchedSubstrings || [];
    }
    /**
     * get highlighted value string
     * @returns {string}
     */


    _createClass(HighlightedValue, [{
      key: "get",
      value: function get() {
        this._sortMatchedSubstrings();

        return this.buildHighlightedValue(this.value, this.matchedSubstrings);
      }
      /**
       * get inverted highlighted value string
       * @returns {string}
       */

    }, {
      key: "getInverted",
      value: function getInverted() {
        this._sortMatchedSubstrings();

        var invertedSubstrings = this._getInvertedSubstrings(this.matchedSubstrings, this.value.length);

        return this.buildHighlightedValue(this.value, invertedSubstrings);
      }
      /**
       * introduces highlighting to input data according to highlighting specifiers
       *
       * @param {Object} val input object to apply highlighting to
       *
       *  example object :
       *  {
       *    name: 'ATM',
       *    featuredMessage: {
       *      description: 'Save time & bank on your terms at over 1,800 ATMs'
       *    }
       *  }
       *
       * @param {Object} highlightedSubstrings highlighting specifiers to apply to input object
       *
       *  example object :
       *  {
       *    name: {
       *      matchedSubstrings: [{
       *        length: 3,
       *        offset: 0
       *      }],
       *      value: 'ATM'
       *    },
       *    featuredMessage: {
       *      description: {
       *        matchedSubstrings: [{
       *          length: 4,
       *          offset: 45
       *        }],
       *        value: 'Save time & bank on your terms at over 1,800 ATMs'
       *      }
       *    }
       *  }
       *
       * @returns {string} copy of input value with highlighting applied
       *
       *  example object :
       *  {
       *    name: '<strong>ATM</strong>',
       *    featuredMessage: {
       *      description: 'Save time & bank on your terms at over 1,800 <strong>ATMs</strong>'
       *    }
       *  }
       *
       */

    }, {
      key: "buildHighlightedValue",
      value: function buildHighlightedValue(val, highlightedSubstrings) {
        var highlightedValue = '';
        var nextStart = 0;

        if (highlightedSubstrings.length === 0) {
          return val;
        }

        for (var j = 0; j < highlightedSubstrings.length; j++) {
          var start = Number(highlightedSubstrings[j].offset);
          var end = start + highlightedSubstrings[j].length;
          highlightedValue += [val.slice(nextStart, start), '<strong>', val.slice(start, end), '</strong>'].join('');

          if (j === highlightedSubstrings.length - 1 && end < val.length) {
            highlightedValue += val.slice(end);
          }

          nextStart = end;
        }

        return highlightedValue;
      }
    }, {
      key: "_sortMatchedSubstrings",
      value: function _sortMatchedSubstrings() {
        this.matchedSubstrings.sort(function (a, b) {
          if (a.offset < b.offset) {
            return -1;
          }

          if (a.offset > b.offset) {
            return 1;
          }

          return 0;
        });
      }
    }, {
      key: "_getInvertedSubstrings",
      value: function _getInvertedSubstrings(matchedSubstrings, valueLength) {
        var invertedSubstrings = [];

        for (var i = 0; i < matchedSubstrings.length; i++) {
          var substring = matchedSubstrings[i];
          var nextOffset = substring.offset + substring.length;

          if (i === 0 && substring.offset !== 0) {
            invertedSubstrings.push({
              offset: 0,
              length: substring.offset
            });
          }

          if (valueLength > nextOffset) {
            invertedSubstrings.push({
              offset: nextOffset,
              length: i < matchedSubstrings.length - 1 ? matchedSubstrings[i + 1].offset - nextOffset : valueLength - nextOffset
            });
          }
        }

        return invertedSubstrings;
      }
    }]);

    return HighlightedValue;
  }();

  /** @module Errors */

  /**
   * AnswersBaseError is an extension of the base Error object.
   * This is the object that is used to when reporting to the server.
   * @extends Error
   *
   * Error codes fall into one of four categories:
   * 1XX errors: Basic errors
   * 2XX errors: UI errors
   * 3XX errors: Endpoint errors
   * 4XX errors: Core errors
   */
  var AnswersBaseError =
  /*#__PURE__*/
  function (_Error) {
    _inherits(AnswersBaseError, _Error);

    function AnswersBaseError(errorCode, message) {
      var _this;

      var boundary = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'unknown';
      var causedBy = arguments.length > 3 ? arguments[3] : undefined;

      _classCallCheck(this, AnswersBaseError);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(AnswersBaseError).call(this, message));
      _this.errorCode = errorCode;
      _this.errorMessage = message;
      _this.boundary = boundary;
      _this.reported = false;

      if (causedBy) {
        _this.causedBy = causedBy instanceof AnswersBaseError ? causedBy : AnswersBaseError.from(causedBy);
        _this.stack = "".concat(_this.stack, "\nCaused By: ").concat(_this.causedBy.stack);
      }

      return _this;
    }

    _createClass(AnswersBaseError, [{
      key: "toJson",
      value: function toJson() {
        return JSON.stringify(this);
      }
    }, {
      key: "toString",
      value: function toString() {
        var string = "".concat(this.errorMessage, " (").concat(this.boundary, ")");

        if (this.causedBy) {
          string += "\n  Caused By: ".concat(this.causedBy.toString());
        }

        return string;
      }
    }], [{
      key: "from",
      value: function from(builtinError, boundary) {
        var error = new AnswersBasicError(builtinError.message, boundary);
        error.stack = builtinError.stack;
        return error;
      }
    }]);

    return AnswersBaseError;
  }(_wrapNativeSuper(Error));
  /**
   * AnswersBasicError is a wrapper around all the built-in errors
   * e.g. undefined variables, incorrect syntax, types, missing methods, etc.
   * @extends AnswersBaseError
   */

  var AnswersBasicError =
  /*#__PURE__*/
  function (_AnswersBaseError) {
    _inherits(AnswersBasicError, _AnswersBaseError);

    function AnswersBasicError(message, boundary, causedBy) {
      _classCallCheck(this, AnswersBasicError);

      return _possibleConstructorReturn(this, _getPrototypeOf(AnswersBasicError).call(this, 100, message, boundary, causedBy));
    }

    return AnswersBasicError;
  }(AnswersBaseError);
  /**
   * AnswersUiError used for things like DOM errors.
   * @extends AnswersBaseError
   */

  var AnswersConfigError =
  /*#__PURE__*/
  function (_AnswersBaseError2) {
    _inherits(AnswersConfigError, _AnswersBaseError2);

    function AnswersConfigError(message, boundary, causedBy) {
      _classCallCheck(this, AnswersConfigError);

      return _possibleConstructorReturn(this, _getPrototypeOf(AnswersConfigError).call(this, 101, message, boundary, causedBy));
    }

    return AnswersConfigError;
  }(AnswersBaseError);
  /**
   * AnswersComponentError is used for Component oriented errors
   * e.g. failure to render, or catching unknowns.
   * @extends AnswersBaseError
   */

  var AnswersComponentError =
  /*#__PURE__*/
  function (_AnswersBaseError4) {
    _inherits(AnswersComponentError, _AnswersBaseError4);

    function AnswersComponentError(message, component, causedBy) {
      _classCallCheck(this, AnswersComponentError);

      return _possibleConstructorReturn(this, _getPrototypeOf(AnswersComponentError).call(this, 201, message, component, causedBy));
    }

    return AnswersComponentError;
  }(AnswersBaseError);
  /**
   * AnswersEndpointError represents all network related errors.
   * @extends AnswersBaseError
   */

  var AnswersEndpointError =
  /*#__PURE__*/
  function (_AnswersBaseError5) {
    _inherits(AnswersEndpointError, _AnswersBaseError5);

    function AnswersEndpointError(message, boundary, causedBy) {
      _classCallCheck(this, AnswersEndpointError);

      return _possibleConstructorReturn(this, _getPrototypeOf(AnswersEndpointError).call(this, 300, message, boundary, causedBy));
    }

    return AnswersEndpointError;
  }(AnswersBaseError);
  /**
   * AnswersCoreError represents errors for precondition failures in the core library
   * @extends AnswersBaseError
   */

  var AnswersCoreError =
  /*#__PURE__*/
  function (_AnswersBaseError6) {
    _inherits(AnswersCoreError, _AnswersBaseError6);

    function AnswersCoreError(message, boundary, causedBy) {
      _classCallCheck(this, AnswersCoreError);

      return _possibleConstructorReturn(this, _getPrototypeOf(AnswersCoreError).call(this, 400, message, boundary, causedBy));
    }

    return AnswersCoreError;
  }(AnswersBaseError);
  /**
   * AnswersStorageError represents storage related errors
   * @extends AnswersBaseError
   */

  var AnswersStorageError =
  /*#__PURE__*/
  function (_AnswersBaseError7) {
    _inherits(AnswersStorageError, _AnswersBaseError7);

    function AnswersStorageError(message, storageKey, data, causedBy) {
      var _this2;

      _classCallCheck(this, AnswersStorageError);

      _this2 = _possibleConstructorReturn(this, _getPrototypeOf(AnswersStorageError).call(this, 401, message, 'Storage', causedBy));
      _this2.storageKey = storageKey;
      _this2.data = data;
      return _this2;
    }

    return AnswersStorageError;
  }(AnswersBaseError);
  /**
   * AnswersAnalyticsError is used for errors when reporting analytics
   * @extends AnswersBaseError
   */

  var AnswersAnalyticsError =
  /*#__PURE__*/
  function (_AnswersBaseError8) {
    _inherits(AnswersAnalyticsError, _AnswersBaseError8);

    function AnswersAnalyticsError(message, event, causedBy) {
      var _this3;

      _classCallCheck(this, AnswersAnalyticsError);

      _this3 = _possibleConstructorReturn(this, _getPrototypeOf(AnswersAnalyticsError).call(this, 402, message, 'Analytics', causedBy));
      _this3.event = event;
      return _this3;
    }

    return AnswersAnalyticsError;
  }(AnswersBaseError);

  var ResultFactory =
  /*#__PURE__*/
  function () {
    function ResultFactory() {
      _classCallCheck(this, ResultFactory);
    }

    _createClass(ResultFactory, null, [{
      key: "from",

      /**
       * Converts an API result object into a Result view model.
       * Includes default mappings of GoogleCustomSearchEngine results to
       * the fields exposed by the template.
       * @param resultsData  {Array} expected format: { data: { ... }, highlightedFields: { ... }}
       * @param {Object.<string, function>} formatters The formatters to apply to the result
       * @param {string} verticalId The vertical of these results
       * @param {string} source Backend source of these results
       * @returns {Result[]}
       */
      value: function from(resultsData, formatters, verticalId, source) {
        var results = [];

        for (var i = 0; i < resultsData.length; i++) {
          var data = resultsData[i].data || resultsData[i];
          var distance = resultsData[i].distance;

          switch (source) {
            case 'GOOGLE_CSE':
              results.push(ResultFactory.fromGoogleCustomSearchEngine(data));
              break;

            case 'BING_CSE':
              results.push(ResultFactory.fromBingCustomSearchEngine(data));
              break;

            case 'ZENDESK':
              results.push(ResultFactory.fromZendeskSearchEngine(data));
              break;

            case 'ALGOLIA':
              results.push(ResultFactory.fromAlgoliaSearchEngine(data));
              break;

            case 'KNOWLEDGE_MANAGER':
              var highlightedFields = resultsData[i].highlightedFields || {};
              results.push(ResultFactory.fromKnowledgeManager(data, formatters, verticalId, highlightedFields, i, distance));
              break;

            default:
              results.push(ResultFactory.fromGeneric(data, i));
          }
        }

        return results;
      }
      /**
       * Applies field formatters to Knowledge Manager Entity Profile Data
       *
       * @param {Object} entityProfileData Entity Profile Data
       * @param {Object} formatters Developer specified Field Formatters
       * @param {string} verticalId Identifier for Vertical
       * @param {Object} highlightedEntityProfileData Subset of Entity Profile Data with highlighting applied
       * @returns {Object} Subset of Entity Profile Data Fields with field formatters applied
       */

    }, {
      key: "computeFormattedData",
      value: function computeFormattedData(entityProfileData, formatters, verticalId, highlightedEntityProfileData) {
        // if no field formatters specified, nothing to format
        if (Object.keys(formatters).length === 0) {
          return {};
        }

        var formattedData = {};
        Object.entries(entityProfileData).forEach(function (_ref) {
          var _ref2 = _slicedToArray(_ref, 2),
              fieldName = _ref2[0],
              fieldVal = _ref2[1];

          // check if a field formatter exists for the current entity profile field
          if (formatters[fieldName] === undefined) {
            return;
          } // verify the field formatter provided is a formatter function as expected


          if (typeof formatters[fieldName] !== 'function') {
            throw new AnswersCoreError('Field formatter is not of expected type function', 'ResultFactory');
          } // if highlighted version of field value is available, make it available to field formatter


          var highlightedFieldVal = null;

          if (highlightedEntityProfileData && highlightedEntityProfileData[fieldName]) {
            highlightedFieldVal = highlightedEntityProfileData[fieldName];
          } // call formatter function associated with the field name
          // the input object defines the interface that field formatter functions work with


          formattedData[fieldName] = formatters[fieldName]({
            entityProfileData: entityProfileData,
            entityFieldValue: fieldVal,
            highlightedEntityFieldValue: highlightedFieldVal,
            verticalId: verticalId,
            isDirectAnswer: false
          });
        });
        return formattedData;
      }
      /**
       * Applies highlighting to substrings within Knowledge Manager Entity Field Values
       * according to highlighting specifiers returned from the Knowledge Manager Search Backend
       *
       * @param {Object} entityProfileData Entity Profile Data
       * @param {Object} highlightedFields KM specified highlighting instructions to highlight certain Fields
       * @returns {Object} Subset of Entity Profile Data Fields with highlighting applied
       */

    }, {
      key: "computeHighlightedData",
      value: function computeHighlightedData(entityProfileData, highlightedFields) {
        // if no highlighted fields specified, nothing to highlight
        if (Object.keys(highlightedFields).length === 0) {
          return {};
        }

        var highlightedData = {}; // iterate through entity fields that have highlighting instructions

        Object.entries(highlightedFields).forEach(function (_ref3) {
          var _ref4 = _slicedToArray(_ref3, 1),
              highlightedFieldName = _ref4[0];

          // verify that the highlighted field name corresponds to an existing entity profile field
          if (entityProfileData[highlightedFieldName] === undefined) {
            throw new AnswersCoreError('Highlighted Field Name does not exist in Entity Profile', 'ResultFactory');
          }

          var highlightedField = highlightedFields[highlightedFieldName]; // check for nested fields

          if (_typeof(highlightedField) === 'object' && Object.keys(highlightedField).length > 0 && highlightedField['matchedSubstrings'] === undefined) {
            // recurse to children fields
            highlightedData[highlightedFieldName] = ResultFactory.computeHighlightedData(entityProfileData[highlightedFieldName], highlightedFields[highlightedFieldName]);
          } else {
            var highlightedDataValue = new HighlightedValue(entityProfileData).buildHighlightedValue(highlightedField.value, highlightedField.matchedSubstrings);
            highlightedData[highlightedFieldName] = highlightedDataValue;
          }
        });
        return highlightedData;
      }
      /**
       * Converts an API result object into a generic result view model.
       * @param {Object} data
       * @param {number} index
       * @returns {Result}
       */

    }, {
      key: "fromGeneric",
      value: function fromGeneric(data, index) {
        return new Result({
          raw: data,
          title: data.name,
          details: this.truncate(data.description),
          link: data.website,
          id: data.id,
          ordinal: index + 1
        });
      }
      /**
       * Converts an API result object into a Knowledge Manager result view model.
       * @param {Object} data
       * @param {Object} formatters
       * @param {string} verticalId
       * @param {Object} highlightedFields
       * @param {number} index
       * @param {number} distance
       * @returns {Result}
       */

    }, {
      key: "fromKnowledgeManager",
      value: function fromKnowledgeManager(data, formatters, verticalId, highlightedFields, index, distance) {
        // compute highlighted entity profile data
        var highlightedEntityProfileData = ResultFactory.computeHighlightedData(data, highlightedFields); // compute formatted entity profile data

        var formattedEntityProfileData = ResultFactory.computeFormattedData(data, formatters, verticalId, highlightedEntityProfileData); // set result details checking the following in order of priority : formatted, highlighted, raw

        var resultDetails = null;

        if (formattedEntityProfileData.description !== undefined) {
          resultDetails = formattedEntityProfileData.description;
        } else if (highlightedEntityProfileData.description !== undefined) {
          resultDetails = this.truncate(highlightedEntityProfileData.description);
        } else {
          resultDetails = this.truncate(data.description);
        }

        return new Result({
          raw: data,
          formatted: formattedEntityProfileData,
          highlighted: highlightedEntityProfileData,
          title: formattedEntityProfileData.name || data.name,
          details: resultDetails,
          link: data.website,
          id: data.id,
          ordinal: index + 1,
          distance: distance
        });
      }
      /**
       * Converts an API result object into a result view model.
       * Maps view model fields based on the API data for a Google Custom Search Engine object.
       * @param {Object} data
       * @returns {Result}
       */

    }, {
      key: "fromGoogleCustomSearchEngine",
      value: function fromGoogleCustomSearchEngine(data) {
        return new Result({
          raw: data,
          title: data.htmlTitle.replace(/(<([^>]+)>)/ig, ''),
          details: data.htmlSnippet,
          link: data.link
        });
      }
      /**
       * Converts an API result object into a result view model.
       * Maps view model fields based on the API data for a Bing Custom Search Engine object.
       * @param {Object} data
       * @returns {Result}
       */

    }, {
      key: "fromBingCustomSearchEngine",
      value: function fromBingCustomSearchEngine(data) {
        return new Result({
          raw: data,
          title: data.name,
          details: data.snippet,
          link: data.url
        });
      }
      /**
       * Converts an API result object into a result view model.
       * Maps view model fields based on the API data for a Zendesk Search Engine object.
       * @param {Object} data
       * @returns {Result}
       */

    }, {
      key: "fromZendeskSearchEngine",
      value: function fromZendeskSearchEngine(data) {
        return new Result({
          raw: data,
          title: data.title,
          details: data.snippet,
          link: data.html_url
        });
      }
      /**
       * Converts an API result object into a result view model.
       * Maps view model fields based on the API data for a Algolia Search Engine object.
       * Details field is set to objectID since response has only one general field objectID.
       * @param {Object} data
       * @returns {Result}
       */

    }, {
      key: "fromAlgoliaSearchEngine",
      value: function fromAlgoliaSearchEngine(data) {
        return new Result({
          raw: data,
          details: data.objectID,
          id: data.objectID
        });
      }
      /**
       * Truncates strings to 250 characters, attempting to preserve whole words
       * @param str {string} the string to truncate
       * @param limit {Number} the maximum character length to return
       * @param trailing {string} a trailing string to denote truncation, e.g. '...'
       * @param sep {string} the word separator
       * @returns {string}
       */

    }, {
      key: "truncate",
      value: function truncate(str) {
        var limit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 250;
        var trailing = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '...';
        var sep = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : ' ';

        if (!str || str.length <= limit) {
          return str;
        } // TODO (bmcginnis): split punctuation too so we don't end up with "foo,..."


        var words = str.split(sep);
        var max = limit - trailing.length;
        var truncated = '';

        for (var i = 0; i < words.length; i++) {
          var word = words[i];

          if (truncated.length + word.length > max || i !== 0 && truncated.length + word.length + sep.length > max) {
            truncated += trailing;
            break;
          }

          truncated += i === 0 ? word : sep + word;
        }

        return truncated;
      }
    }]);

    return ResultFactory;
  }();

  var Section =
  /*#__PURE__*/
  function () {
    function Section(data, url, formatters) {
      _classCallCheck(this, Section);

      this.searchState = SearchStates.SEARCH_COMPLETE;
      this.verticalConfigId = data.verticalConfigId || null;
      this.resultsCount = data.resultsCount || 0;
      this.encodedState = data.encodedState || '';
      this.appliedQueryFilters = AppliedQueryFilter.from(data.appliedQueryFilters);
      this.facets = data.facets || null;
      this.results = ResultFactory.from(data.results, formatters, this.verticalConfigId, data.source);
      this.map = Section.parseMap(data.results);
      this.verticalURL = url || null;
      this.resultsContext = data.resultsContext;
    }

    _createClass(Section, null, [{
      key: "parseMap",
      value: function parseMap(results) {
        var mapMarkers = [];
        var centerCoordinates = {};

        for (var j = 0; j < results.length; j++) {
          // TODO(billy) Remove legacy fallback from all data format
          var result = results[j].data || results[j];

          if (result && result.yextDisplayCoordinate) {
            if (!centerCoordinates.latitude) {
              centerCoordinates = {
                latitude: result.yextDisplayCoordinate.latitude,
                longitude: result.yextDisplayCoordinate.longitude
              };
            }

            mapMarkers.push({
              item: result,
              label: mapMarkers.length + 1,
              latitude: result.yextDisplayCoordinate.latitude,
              longitude: result.yextDisplayCoordinate.longitude
            });
          }
        }

        return {
          'mapCenter': centerCoordinates,
          'mapMarkers': mapMarkers
        };
      }
      /**
       * Create a section from the provided data
       * @param {Object|Array} modules The result modules
       * @param {Object} urls The tab urls
       * @param {Object.<string, function>} formatters Field formatters for results
       */

    }, {
      key: "from",
      value: function from(modules, urls, formatters) {
        var sections = [];

        if (!modules) {
          return sections;
        }

        if (!Array.isArray(modules)) {
          return new Section(modules, null, formatters);
        } // Our sections should contain a property of mapMarker objects


        for (var i = 0; i < modules.length; i++) {
          sections.push(new Section(modules[i], urls[modules[i].verticalConfigId], formatters));
        }

        return sections;
      }
    }]);

    return Section;
  }();

  var AppliedQueryFilter =
  /*#__PURE__*/
  function () {
    // Support legacy model and new model until fully migrated.
    // TODO(billy) Remove the left expression during assignment when migrated.
    function AppliedQueryFilter(appliedQueryFilter) {
      _classCallCheck(this, AppliedQueryFilter);

      this.key = appliedQueryFilter.key || appliedQueryFilter.displayKey;
      this.value = appliedQueryFilter.value || appliedQueryFilter.displayValue;
    }

    _createClass(AppliedQueryFilter, null, [{
      key: "from",
      value: function from(appliedQueryFilters) {
        var filters = [];

        for (var i = 0; i < appliedQueryFilters.length; i++) {
          filters.push(new AppliedQueryFilter(appliedQueryFilters[i]));
        }

        return filters;
      }
    }]);

    return AppliedQueryFilter;
  }();

  var UniversalResults =
  /*#__PURE__*/
  function () {
    function UniversalResults(data) {
      _classCallCheck(this, UniversalResults);

      this.queryId = data.queryId || null;
      this.sections = data.sections || [];
      /**
       * The current state of the search, used to render different templates before, during,
       * and after loading
       * @type {string}
       */

      this.searchState = data.searchState || SearchStates.SEARCH_COMPLETE;
    }
    /**
     * Create universal results from server data
     * @param {Object} response The server response
     * @param {Object} urls The tab urls
     * @param {Object.<string, function>} formatters The field formatters to use
     */


    _createClass(UniversalResults, null, [{
      key: "from",
      value: function from(response, urls, formatters) {
        return new UniversalResults({
          queryId: response.queryId,
          sections: Section.from(response.modules, urls, formatters)
        });
      }
      /**
       * Construct a UnivervalResults object representing loading results
       * @return {UniversalResults}
       */

    }, {
      key: "searchLoading",
      value: function searchLoading() {
        return new UniversalResults({
          searchState: SearchStates.SEARCH_LOADING
        });
      }
    }]);

    return UniversalResults;
  }();

  /** @module DirectAnswer */
  var DirectAnswer =
  /*#__PURE__*/
  function () {
    function DirectAnswer() {
      var directAnswer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      _classCallCheck(this, DirectAnswer);

      Object.assign(this, directAnswer);
      Object.freeze(this);
    }
    /**
     * Create a DirectAnswer model from the given server data and formatters
     * @param {Object} response The server direct answer
     * @param {Object.<string, function>} formatters The formatters to apply to this direct answer
     */


    _createClass(DirectAnswer, null, [{
      key: "from",
      value: function from(response, formatters) {
        var data = _objectSpread({}, response);

        var answer = data.answer,
            relatedItem = data.relatedItem;

        if (answer && formatters[answer.fieldApiName]) {
          answer.value = formatters[answer.fieldApiName](answer.value, relatedItem.data.fieldValues, relatedItem.verticalConfigId, true);
        }

        return new DirectAnswer(data);
      }
    }]);

    return DirectAnswer;
  }();

  /** @module Navigation */
  var Navigation =
  /*#__PURE__*/
  function () {
    function Navigation(tabOrder) {
      _classCallCheck(this, Navigation);

      this.tabOrder = tabOrder || [];
      Object.freeze(this);
    }

    _createClass(Navigation, null, [{
      key: "from",
      value: function from(modules) {
        var nav = [];

        if (!modules || !Array.isArray(modules)) {
          return nav;
        }

        for (var i = 0; i < modules.length; i++) {
          nav.push(modules[i].verticalConfigId);
        }

        return new Navigation(nav);
      }
    }]);

    return Navigation;
  }();

  var VerticalResults =
  /*#__PURE__*/
  function () {
    function VerticalResults() {
      var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      _classCallCheck(this, VerticalResults);

      Object.assign(this, {
        searchState: SearchStates.SEARCH_COMPLETE
      }, data);
      /**
       * The context of the results, used to provide more information about why
       * these specific results were returned.
       * @type {ResultsContext}
       */

      this.resultsContext = data.resultsContext;
      Object.freeze(this);
    }
    /**
     * Append the provided results to the current results
     * @param {VerticalResults} results the results to append to the current results
     */


    _createClass(VerticalResults, [{
      key: "append",
      value: function append(results) {
        if (results.resultsContext !== this.resultsContext) {
          throw new AnswersCoreError('Cannot merge results with different contexts', 'VerticalResults');
        }

        var merged = _objectSpread({}, this);

        merged.resultsContext = this.resultsContext;
        merged.results = this.results.concat(results.results);
        merged.map.mapMarkers = this.map.mapMarkers.concat(results.map.mapMarkers);
        return new VerticalResults(merged);
      }
      /**
       * Create vertical results from server data
       * @param {Object} response The server response
       * @param {Object.<string, function>} formatters The field formatters to use
       * @param {string} verticalKey the vertical key
       */

    }], [{
      key: "from",
      value: function from(response, formatters, verticalKey) {
        var data = Section.from(response, null, formatters);
        return new VerticalResults(_objectSpread({}, data, {
          verticalConfigId: verticalKey
        }));
      }
      /**
       * Construct a VerticalResults object representing loading results
       * @return {VerticalResults}
       */

    }, {
      key: "searchLoading",
      value: function searchLoading() {
        return new VerticalResults({
          searchState: SearchStates.SEARCH_LOADING
        });
      }
    }, {
      key: "areDuplicateNamesAllowed",
      value: function areDuplicateNamesAllowed() {
        return true;
      }
    }]);

    return VerticalResults;
  }();

  /** @module SpellCheck */

  /**
   * SpellCheck is the core state model
   * to power the SpellCheck component
   */
  var SpellCheck =
  /*#__PURE__*/
  function () {
    function SpellCheck(data) {
      _classCallCheck(this, SpellCheck);

      /**
       * The original query
       * @type {string}
       */
      this.query = data.query || null;
      /**
       * The corrected query
       * @type {string}
       */

      this.correctedQuery = data.correctedQuery || null;
      /**
       * The spell check type
       * @type {string}
       */

      this.type = data.type || null;
      /**
       * Should show spell check or not
       * @type {boolean}
       */

      this.shouldShow = this.correctedQuery !== null;
    }
    /**
     * Create a spell check model from the provided data
     * @param {Object} response The spell check response
     */


    _createClass(SpellCheck, null, [{
      key: "from",
      value: function from(response) {
        if (!response) {
          return {};
        }

        return new SpellCheck({
          query: response.originalQuery,
          correctedQuery: response.correctedQuery,
          type: response.type
        });
      }
    }]);

    return SpellCheck;
  }();

  /** @module StorageKeys */

  /**
   * StorageKeys is an ENUM are considered the root context
   * for how data is stored and scoped in the storage.
   *
   * @enum {string}
   */
  var StorageKeys = {
    NAVIGATION: 'navigation',
    UNIVERSAL_RESULTS: 'universal-results',
    VERTICAL_RESULTS: 'vertical-results',
    ALTERNATIVE_VERTICALS: 'alternative-verticals',
    AUTOCOMPLETE: 'autocomplete',
    DIRECT_ANSWER: 'direct-answer',
    FILTER: 'filter',
    QUERY: 'query',
    QUERY_ID: 'query-id',
    FACET_FILTER: 'facet-filter',
    DYNAMIC_FILTERS: 'dynamic-filters',
    PARAMS: 'params',
    GEOLOCATION: 'geolocation',
    INTENTS: 'intents',
    QUESTION_SUBMISSION: 'question-submission',
    SEARCH_CONFIG: 'search-config',
    SEARCH_OFFSET: 'search-offset',
    SPELL_CHECK: 'spell-check',
    LOCATION_BIAS: 'location-bias',
    SESSIONS_OPT_IN: 'sessions-opt-in',
    VERTICAL_PAGES_CONFIG: 'vertical-pages-config',
    LOCALE: 'locale',
    SORT_BYS: 'sort-bys',
    NO_RESULTS_CONFIG: 'no-results-config'
  };

  /** @module DynamicFilters */

  /**
   * Model representing a set of dynamic filters
   */
  var DynamicFilters =
  /*#__PURE__*/
  function () {
    function DynamicFilters(data) {
      _classCallCheck(this, DynamicFilters);

      /**
       * The list of filters this model holds
       * @type {{label: string, fieldId: string, options: object[]}}
       */
      this.filters = data.filters || [];
      /**
       * The {@link ResultsContext} of the facets.
       * @type {ResultsContext}
       */

      this.resultsContext = data.resultsContext;
      Object.freeze(this);
    }
    /**
     * Organize 'facets' from the api response into dynamic filters
     * @param {Object} response dynamic filter response from the api
     * @returns {DynamicFilters}
     */


    _createClass(DynamicFilters, null, [{
      key: "from",
      value: function from(response) {
        var facets = response.facets || [];
        var dynamicFilters = facets.map(function (f) {
          return {
            label: f['displayName'],
            fieldId: f['fieldId'],
            options: f.options.map(function (o) {
              return {
                label: o['displayName'],
                countLabel: o['count'],
                selected: o['selected'],
                filter: o['filter']
              };
            })
          };
        });
        return new DynamicFilters({
          filters: dynamicFilters,
          resultsContext: response.resultsContext
        });
      }
    }]);

    return DynamicFilters;
  }();

  /** @module SearchIntents */
  var SearchIntents =
  /*#__PURE__*/
  function () {
    function SearchIntents(intents) {
      _classCallCheck(this, SearchIntents);

      /**
       * The intent to find results based on the user's location
       * @type {boolean}
       */
      this.nearMe = intents.nearMe;
      Object.freeze(this);
    }
    /**
     * Create SearchIntents from server response
     * @param {Object} response The server response intents
     * @returns {SearchIntents}
     */


    _createClass(SearchIntents, null, [{
      key: "from",
      value: function from(response) {
        var intents = response || [];
        return new SearchIntents({
          nearMe: intents.includes('NEAR_ME')
        });
      }
    }]);

    return SearchIntents;
  }();

  /** @module LocationBias */

  /**
   * LocationBias is the core state model
   * to power the LocationBias component
   */
  var LocationBias =
  /*#__PURE__*/
  function () {
    function LocationBias(data) {
      _classCallCheck(this, LocationBias);

      /**
       * The location bias accuracy which are IP, DEVICE and UNKNWON
       * @type {string}
       */
      this.accuracy = data.accuracy || null;
      /**
       * The latitude used for location bias
       * @type {number}
       */

      this.latitude = data.latitude || null;
      /**
       * The longitude used for location bias
       * @type {number}
       */

      this.longitude = data.longitude || null;
      /**
       * The location display name
       * @type {string}
       */

      this.locationDisplayName = data.locationDisplayName || null;
    }
    /**
     * Create a location bias model from the provided data
     * @param {Object} response The location bias response
     */


    _createClass(LocationBias, null, [{
      key: "from",
      value: function from(response) {
        if (!response) {
          return new LocationBias({
            accuracy: 'UNKNOWN'
          });
        }

        return new LocationBias({
          accuracy: response.accuracy,
          latitude: response.latitude,
          longitude: response.longitude,
          locationDisplayName: response.locationDisplayName
        });
      }
    }]);

    return LocationBias;
  }();

  var AlternativeVerticals =
  /*#__PURE__*/
  function () {
    function AlternativeVerticals(data) {
      _classCallCheck(this, AlternativeVerticals);

      /**
       * Alternative verticals that have results for the current query
       * @type {Section}
       */
      this.alternativeVerticals = data || [];
    }
    /**
     * Create alternative verticals from server data
     * @param {Object} response The server response
     * @param {Object.<string, function>} formatters The field formatters to use
     */


    _createClass(AlternativeVerticals, null, [{
      key: "from",
      value: function from(response, formatters) {
        var alternativeVerticals = response.alternativeVerticals;

        if (!alternativeVerticals || !alternativeVerticals.modules) {
          return new AlternativeVerticals();
        }

        return new AlternativeVerticals(Section.from(alternativeVerticals.modules, {}, formatters));
      }
    }]);

    return AlternativeVerticals;
  }();

  /** @module ResultsContext */

  /**
   * ResultsContext is an ENUM that provides context
   * for the results that we are storing from server
   * data
   * @enum {string}
   */
  var ResultsContext = {
    NORMAL: 'normal',
    NO_RESULTS: 'no-results'
  };

  /**
   * A Data Transformer that takes the response object from a Search request
   * And transforms in to a front-end oriented data structure that our
   * component library and core storage understand.
   */

  var SearchDataTransformer =
  /*#__PURE__*/
  function () {
    function SearchDataTransformer() {
      _classCallCheck(this, SearchDataTransformer);
    }

    _createClass(SearchDataTransformer, null, [{
      key: "transform",
      value: function transform(data) {
        var _ref;

        var urls = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var formatters = arguments.length > 2 ? arguments[2] : undefined;
        var response = data.response;
        return _ref = {}, _defineProperty(_ref, StorageKeys.QUERY_ID, response.queryId), _defineProperty(_ref, StorageKeys.NAVIGATION, Navigation.from(response.modules)), _defineProperty(_ref, StorageKeys.DIRECT_ANSWER, DirectAnswer.from(response.directAnswer, formatters)), _defineProperty(_ref, StorageKeys.UNIVERSAL_RESULTS, UniversalResults.from(response, urls, formatters)), _defineProperty(_ref, StorageKeys.INTENTS, SearchIntents.from(response.searchIntents)), _defineProperty(_ref, StorageKeys.SPELL_CHECK, SpellCheck.from(response.spellCheck)), _defineProperty(_ref, StorageKeys.LOCATION_BIAS, LocationBias.from(response.locationBias)), _ref;
      }
    }, {
      key: "transformVertical",
      value: function transformVertical(data, formatters, verticalKey) {
        var _ref2;

        var response = SearchDataTransformer._parseVerticalResponse(data.response);

        return _ref2 = {}, _defineProperty(_ref2, StorageKeys.QUERY_ID, response.queryId), _defineProperty(_ref2, StorageKeys.NAVIGATION, new Navigation()), _defineProperty(_ref2, StorageKeys.VERTICAL_RESULTS, VerticalResults.from(response, formatters, verticalKey)), _defineProperty(_ref2, StorageKeys.DYNAMIC_FILTERS, DynamicFilters.from(response)), _defineProperty(_ref2, StorageKeys.INTENTS, SearchIntents.from(response.searchIntents)), _defineProperty(_ref2, StorageKeys.SPELL_CHECK, SpellCheck.from(response.spellCheck)), _defineProperty(_ref2, StorageKeys.ALTERNATIVE_VERTICALS, AlternativeVerticals.from(response, formatters)), _defineProperty(_ref2, StorageKeys.LOCATION_BIAS, LocationBias.from(response.locationBias)), _ref2;
      }
      /**
       * Form response as if the results from `allResultsForVertical` were the actual
       * results in `results`
       * @param {Object} response The server response
       */

    }, {
      key: "_parseVerticalResponse",
      value: function _parseVerticalResponse(response) {
        var hasResults = response.results && response.resultsCount > 0;
        var resultsContext = hasResults ? ResultsContext.NORMAL : ResultsContext.NO_RESULTS;

        if (resultsContext === ResultsContext.NO_RESULTS) {
          var _ref3 = response.allResultsForVertical || {},
              results = _ref3.results,
              resultsCount = _ref3.resultsCount,
              facets = _ref3.facets;

          return _objectSpread({}, response, {
            results: results || [],
            resultsCount: resultsCount || 0,
            resultsContext: resultsContext,
            facets: facets
          });
        }

        return _objectSpread({}, response, {
          resultsContext: resultsContext
        });
      }
    }]);

    return SearchDataTransformer;
  }();

  /** @module QuestionSubmission */

  /**
   * QuestionSubmission is the core state model
   * to power the QuestionSubmission component
   */
  var QuestionSubmission =
  /*#__PURE__*/
  function () {
    function QuestionSubmission() {
      var question = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var errors = arguments.length > 1 ? arguments[1] : undefined;

      _classCallCheck(this, QuestionSubmission);

      /**
       * The author of the question
       * @type {string}
       */
      this.name = question.name || null;
      /**
       * The email address of the question
       * @type {string}
       */

      this.email = question.email || null;
      /**
       * True if the privacy policy was approved
       * @type {boolean}
       */

      this.privacyPolicy = question.privacyPolicy || null;
      /**
       * The question to be sent to the server
       * @type {string}
       */

      this.questionText = question.questionText || null;
      /**
       * Alternative question meta information
       * @type {string}
       */

      this.questionDescription = question.questionDescription || null;
      /**
       * Whether the form is expanded or not. Defaults to true.
       */

      this.questionExpanded = typeof question.expanded !== 'boolean' || question.expanded;
      /**
       * Contains any errors about the question submission
       * @type {object}
       */

      this.errors = errors || null;
      /**
       * Whether the form has been submitted or not. Defaults to false.
       */

      this.questionSubmitted = question.submitted || false;
      Object.freeze(this);
    }

    _createClass(QuestionSubmission, null, [{
      key: "submitted",
      value: function submitted() {
        return {
          questionSubmitted: true,
          questionExpanded: true
        };
      }
    }, {
      key: "errors",
      value: function errors(question, _errors) {
        return QuestionSubmission(question, _errors);
      }
    }]);

    return QuestionSubmission;
  }();

  /** @module Filter */

  /**
   * Represents an api filter and provides static methods for easily constructing Filters.
   * See https://developer.yext.com/docs/api-reference/#operation/listEntities for structure details
   */
  var Filter =
  /*#__PURE__*/
  function () {
    function Filter() {
      var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      _classCallCheck(this, Filter);

      Object.assign(this, data);
      Object.freeze(this);
    }
    /**
     * Parse a JSON format filter returned from the server into a Filter
     * @param {*} responseFilter A filter in JSON format returned from the backend
     * @returns {Filter}
     */


    _createClass(Filter, null, [{
      key: "fromResponse",
      value: function fromResponse(responseFilter) {
        return new Filter(JSON.parse(responseFilter));
      }
      /**
       * Return a new Filter representing the OR of all provided filters
       * @param  {...Filter} filters The filters to OR together
       * @returns {Filter}
       */

    }, {
      key: "or",
      value: function or() {
        for (var _len = arguments.length, filters = new Array(_len), _key = 0; _key < _len; _key++) {
          filters[_key] = arguments[_key];
        }

        return new Filter({
          '$or': filters
        });
      }
      /**
       * Return a new Filter representing the AND of all provided filters
       * @param  {...Filter} filters The filters to AND together
       * @returns {Filter}
       */

    }, {
      key: "and",
      value: function and() {
        for (var _len2 = arguments.length, filters = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          filters[_key2] = arguments[_key2];
        }

        return new Filter({
          '$and': filters
        });
      }
      /**
       * OR filters with the same keys, then AND the resulting groups
       * @param  {...Filter} filters The filters to group
       * @returns {Filter}
       */

    }, {
      key: "group",
      value: function group() {
        var groups = {};

        for (var _len3 = arguments.length, filters = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
          filters[_key3] = arguments[_key3];
        }

        for (var _i = 0, _filters = filters; _i < _filters.length; _i++) {
          var filter = _filters[_i];
          var key = Object.keys(filter)[0];

          if (!groups[key]) {
            groups[key] = [];
          }

          groups[key].push(filter);
        }

        var groupFilters = [];

        for (var _i2 = 0, _Object$keys = Object.keys(groups); _i2 < _Object$keys.length; _i2++) {
          var field = _Object$keys[_i2];
          groupFilters.push(groups[field].length > 1 ? Filter.or.apply(Filter, _toConsumableArray(groups[field])) : groups[field][0]);
        }

        return groupFilters.length > 1 ? Filter.and.apply(Filter, groupFilters) : groupFilters[0];
      }
      /**
       * Create a new "equal to" filter for a field
       * @param {string} field The subject field of the filter
       * @param {*} value The value the field should be equal to
       * @returns {Filter}
       */

    }, {
      key: "equal",
      value: function equal(field, value) {
        return Filter._fromMatcher(field, '$eq', value);
      }
      /**
       * Create a new "less than" filter for a field
       * @param {string} field The subject field of the filter
       * @param {*} value The value the field should be less than
       * @returns {Filter}
       */

    }, {
      key: "lessThan",
      value: function lessThan(field, value) {
        return Filter._fromMatcher(field, '$lt', value);
      }
      /**
       * Create a new "less than or equal to" filter for a field
       * @param {string} field The subject field of the filter
       * @param {*} value The value the field should be less than or equal to
       * @returns {Filter}
       */

    }, {
      key: "lessThanEqual",
      value: function lessThanEqual(field, value) {
        return Filter._fromMatcher(field, '$le', value);
      }
      /**
       * Create a new "greater than" filter for a field
       * @param {string} field The subject field of the filter
       * @param {*} value The value the field should be greater than
       * @returns {Filter}
       */

    }, {
      key: "greaterThan",
      value: function greaterThan(field, value) {
        return Filter._fromMatcher(field, '$gt', value);
      }
      /**
       * Create a new "greater than or equal to" filter for a field
       * @param {string} field The subject field of the filter
       * @param {*} value The value the field should be greater than or equal to
       * @returns {Filter}
       */

    }, {
      key: "greaterThanEqual",
      value: function greaterThanEqual(field, value) {
        return Filter._fromMatcher(field, '$ge', value);
      }
      /**
       * Create a new inclusive range filter
       * @param {string} field The subject field of the filter
       * @param {*} min The minimum value
       * @param {*} max The maximum value
       * @returns {Filter}
       */

    }, {
      key: "inclusiveRange",
      value: function inclusiveRange(field, min, max) {
        return new Filter(_defineProperty({}, field, {
          '$ge': min,
          '$le': max
        }));
      }
      /**
       * Create a new exclusive range filter
       * @param {string} field The subject field of the filter
       * @param {*} min The minimum value
       * @param {*} max The maximum value
       * @returns {Filter}
       */

    }, {
      key: "exclusiveRange",
      value: function exclusiveRange(field, min, max) {
        return new Filter(_defineProperty({}, field, {
          '$gt': min,
          '$lt': max
        }));
      }
      /**
       * Create a new position filter
       * @param {number} lat The latitude of the position
       * @param {number} lng The longitude of the position
       * @param {number} radius The search radius (in meters)
       */

    }, {
      key: "position",
      value: function position(lat, lng, radius) {
        return Filter._fromMatcher('builtin.location', '$near', {
          lat: lat,
          lng: lng,
          radius: radius
        });
      }
      /**
       * Create a new filter with the given matcher
       * @private
       * @param {string} field The subject field of the filter
       * @param {string} matcher The matcher for the filer
       * @param {*} value The value for the filter
       * @returns {Filter}
       */

    }, {
      key: "_fromMatcher",
      value: function _fromMatcher(field, matcher, value) {
        return new Filter(_defineProperty({}, field, _defineProperty({}, matcher, value)));
      }
    }]);

    return Filter;
  }();

  /**
   * Model for the analytics event type
   */
  var AnalyticsEvent =
  /*#__PURE__*/
  function () {
    function AnalyticsEvent(type, label) {
      _classCallCheck(this, AnalyticsEvent);

      /**
       * The type of event to report
       * @type {string}
       */
      this.eventType = type.toUpperCase();
      /**
       * An optional label to be provided for the event
       * @type {string}
       */

      if (label) {
        this.label = label;
      }
    }
    /**
     * Adds the provided options to the event
     * @param {object} options Additional options for the event
     */


    _createClass(AnalyticsEvent, [{
      key: "addOptions",
      value: function addOptions(options) {
        Object.assign(this, options);
        return this;
      }
      /**
       * Return the event in the api format, typically for reporting to the api
       */

    }, {
      key: "toApiEvent",
      value: function toApiEvent() {
        return Object.assign({}, this);
      }
      /**
       * Creating an analytics event from raw data.
       * @param {Object} data
       */

    }], [{
      key: "fromData",
      value: function fromData(data) {
        var type = data.type,
            label = data.label,
            eventOptions = _objectWithoutProperties(data, ["type", "label"]);

        var analyticsEvent = new AnalyticsEvent(type, label);
        analyticsEvent.addOptions(eventOptions);
        return analyticsEvent;
      }
    }]);

    return AnalyticsEvent;
  }();

  /** @typedef {import('./services/searchservice').default} SearchService */

  /** @typedef {import('./services/autocompleteservice').default} AutoCompleteService */

  /** @typedef {import('./services/questionanswerservice').default} QuestionAnswerService */

  /**
   * Core is the main application container for all of the network and storage
   * related behaviors of the application.
   */

  var Core =
  /*#__PURE__*/
  function () {
    function Core() {
      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      _classCallCheck(this, Core);

      /**
       * A reference to the client API Key used for all requests
       * @type {string}
       * @private
       */
      this._apiKey = config.apiKey;
      /**
       * A reference to the client Answers Key used for all requests
       * @type {string}
       * @private
       */

      this._experienceKey = config.experienceKey;
      /**
       * The answers config version to use for all requests
       * @type {string}
       * @private
       */

      this._experienceVersion = config.experienceVersion;
      /**
       * A reference to the client locale used for all requests. If not specified, defaults to "en" (for
       * backwards compatibility).
       * @type {string}
       * @private
       */

      this._locale = config.locale;
      /**
       * A map of field formatters used to format results, if present
       * @type {Object.<string, function>}
       * @private
       */

      this._fieldFormatters = config.fieldFormatters || {};
      /**
       * A reference to the core data storage that powers the UI
       * @type {GlobalStorage}
       * @private
       */

      this.globalStorage = config.globalStorage;
      /**
       * A reference to the core persistent storage
       * @type {PersistentStorage}
       * @private
       */

      this.persistentStorage = config.persistentStorage;
      /**
       * An abstraction containing the integration with the RESTful search API
       * For both vertical and universal search
       * @type {SearchService}
       * @private
       */

      this._searcher = config.searchService;
      /**
       * An abstraction containing the integration with the RESTful autocomplete API
       * For filter search, vertical autocomplete, and universal autocomplete
       * @type {AutoCompleteService}
       * @private
       */

      this._autoComplete = config.autoCompleteService;
      /**
       * An abstraction for interacting with the Q&A rest interface
       * @type {QuestionAnswerService}
       * @private
       */

      this._questionAnswer = config.questionAnswerService;
      /**
       * A local reference to the analytics reporter, used to report events for this component
       * @type {AnalyticsReporter}
       */

      this._analyticsReporter = config.analyticsReporter;
      /**
       * A user-given function that returns an analytics event to fire after a universal search.
       * @type {Function}
       */

      this.onUniversalSearch = config.onUniversalSearch || function () {};
      /**
       * A user-given function that returns an analytics event to fire after a vertical search.
       * @type {Function}
       */


      this.onVerticalSearch = config.onVerticalSearch || function () {};
    }
    /**
     * Search in the context of a vertical
     * @param {string} verticalKey vertical ID for the search
     * @param {object} query The query details
     * @param {string} query.input The input to search for
     * @param {string} query.filter The filter to use in the search
     * @param {string} query.facetFilter The facet filter to use in the search
     * @param {number} query.limit The max number of results to include, max of 50
     * @param {number} query.offset The results offset, for fetching more results of the same query
     * @param {string} query.id The query ID to use. If paging within a query, the same ID should be used
     * @param {boolean} query.append If true, adds the results of this query to the end of the current results, defaults false
     */


    _createClass(Core, [{
      key: "verticalSearch",
      value: function verticalSearch(verticalKey, query) {
        var _this = this;

        if (!query.append) {
          this.globalStorage.set(StorageKeys.VERTICAL_RESULTS, VerticalResults.searchLoading());
          this.globalStorage.set(StorageKeys.SPELL_CHECK, {});
          this.globalStorage.set(StorageKeys.LOCATION_BIAS, {});
        }

        return this._searcher.verticalSearch(verticalKey, _objectSpread({
          limit: this.globalStorage.getState(StorageKeys.SEARCH_CONFIG).limit,
          geolocation: this.globalStorage.getState(StorageKeys.GEOLOCATION)
        }, query, {
          isDynamicFiltersEnabled: this._isDynamicFiltersEnabled,
          skipSpellCheck: this.globalStorage.getState('skipSpellCheck'),
          queryTrigger: this.globalStorage.getState('queryTrigger'),
          sessionTrackingEnabled: this.globalStorage.getState(StorageKeys.SESSIONS_OPT_IN),
          sortBys: this.globalStorage.getState(StorageKeys.SORT_BYS)
        })).then(function (response) {
          return SearchDataTransformer.transformVertical(response, _this._fieldFormatters, verticalKey);
        }).then(function (data) {
          _this.globalStorage.set(StorageKeys.QUERY_ID, data[StorageKeys.QUERY_ID]);

          _this.globalStorage.set(StorageKeys.NAVIGATION, data[StorageKeys.NAVIGATION]);

          _this.globalStorage.set(StorageKeys.INTENTS, data[StorageKeys.INTENTS]);

          _this.globalStorage.set(StorageKeys.ALTERNATIVE_VERTICALS, data[StorageKeys.ALTERNATIVE_VERTICALS]);

          if (query.append) {
            var mergedResults = _this.globalStorage.getState(StorageKeys.VERTICAL_RESULTS).append(data[StorageKeys.VERTICAL_RESULTS]);

            _this.globalStorage.set(StorageKeys.VERTICAL_RESULTS, mergedResults);
          } else {
            _this.globalStorage.set(StorageKeys.VERTICAL_RESULTS, data[StorageKeys.VERTICAL_RESULTS]);
          }

          if (data[StorageKeys.DYNAMIC_FILTERS]) {
            _this.globalStorage.set(StorageKeys.DYNAMIC_FILTERS, data[StorageKeys.DYNAMIC_FILTERS]);
          }

          if (data[StorageKeys.SPELL_CHECK]) {
            _this.globalStorage.set(StorageKeys.SPELL_CHECK, data[StorageKeys.SPELL_CHECK]);
          }

          if (data[StorageKeys.LOCATION_BIAS]) {
            _this.globalStorage.set(StorageKeys.LOCATION_BIAS, data[StorageKeys.LOCATION_BIAS]);
          }

          _this.globalStorage["delete"]('skipSpellCheck');

          _this.globalStorage["delete"]('queryTrigger');

          var exposedParams = {
            verticalKey: verticalKey,
            queryString: query.input,
            resultsCount: _this.globalStorage.getState(StorageKeys.VERTICAL_RESULTS).resultsCount,
            resultsContext: data[StorageKeys.VERTICAL_RESULTS].resultsContext
          };

          var analyticsEvent = _this.onVerticalSearch(exposedParams);

          if (_typeof(analyticsEvent) === 'object') {
            _this._analyticsReporter.report(AnalyticsEvent.fromData(analyticsEvent));
          }
        });
      }
      /**
       * Page within the results of the last query
       * @param {string} verticalKey The vertical key to use in the search
       * @param {number} offset The offset to use in the search
       */

    }, {
      key: "verticalPage",
      value: function verticalPage(verticalKey, offset) {
        var allFilters = this.globalStorage.getAll(StorageKeys.FILTER);
        var totalFilter = allFilters.length > 1 ? Filter.and.apply(Filter, _toConsumableArray(allFilters)) : allFilters[0];
        var facetFilter = this.globalStorage.getAll(StorageKeys.FACET_FILTER)[0];
        this.verticalSearch(verticalKey, {
          input: this.globalStorage.getState(StorageKeys.QUERY),
          id: this.globalStorage.getState(StorageKeys.QUERY_ID),
          filter: JSON.stringify(totalFilter),
          facetFilter: JSON.stringify(facetFilter),
          offset: offset
        });
      }
    }, {
      key: "search",
      value: function search(queryString, urls) {
        var _this2 = this;

        this.globalStorage.set(StorageKeys.DIRECT_ANSWER, {});
        this.globalStorage.set(StorageKeys.UNIVERSAL_RESULTS, UniversalResults.searchLoading());
        this.globalStorage.set(StorageKeys.QUESTION_SUBMISSION, {});
        this.globalStorage.set(StorageKeys.SPELL_CHECK, {});
        this.globalStorage.set(StorageKeys.LOCATION_BIAS, {});
        return this._searcher.universalSearch(queryString, {
          geolocation: this.globalStorage.getState(StorageKeys.GEOLOCATION),
          skipSpellCheck: this.globalStorage.getState('skipSpellCheck'),
          queryTrigger: this.globalStorage.getState('queryTrigger'),
          sessionTrackingEnabled: this.globalStorage.getState(StorageKeys.SESSIONS_OPT_IN)
        }).then(function (response) {
          return SearchDataTransformer.transform(response, urls, _this2._fieldFormatters);
        }).then(function (data) {
          _this2.globalStorage.set(StorageKeys.QUERY_ID, data[StorageKeys.QUERY_ID]);

          _this2.globalStorage.set(StorageKeys.NAVIGATION, data[StorageKeys.NAVIGATION]);

          _this2.globalStorage.set(StorageKeys.DIRECT_ANSWER, data[StorageKeys.DIRECT_ANSWER]);

          _this2.globalStorage.set(StorageKeys.UNIVERSAL_RESULTS, data[StorageKeys.UNIVERSAL_RESULTS], urls);

          _this2.globalStorage.set(StorageKeys.INTENTS, data[StorageKeys.INTENTS]);

          _this2.globalStorage.set(StorageKeys.SPELL_CHECK, data[StorageKeys.SPELL_CHECK]);

          _this2.globalStorage.set(StorageKeys.LOCATION_BIAS, data[StorageKeys.LOCATION_BIAS]);

          _this2.globalStorage["delete"]('skipSpellCheck');

          _this2.globalStorage["delete"]('queryTrigger');

          var exposedParams = {
            queryString: queryString,
            sectionsCount: data[StorageKeys.UNIVERSAL_RESULTS].sections.length
          };

          var analyticsEvent = _this2.onUniversalSearch(exposedParams);

          if (_typeof(analyticsEvent) === 'object') {
            _this2._analyticsReporter.report(AnalyticsEvent.fromData(analyticsEvent));
          }
        });
      }
      /**
       * Given an input, query for a list of similar results and set into storage
       *
       * @param {string} input     the string to autocomplete
       * @param {string} namespace the namespace to use for the storage key
       */

    }, {
      key: "autoCompleteUniversal",
      value: function autoCompleteUniversal(input, namespace) {
        var _this3 = this;

        return this._autoComplete.queryUniversal(input).then(function (data) {
          _this3.globalStorage.set("".concat(StorageKeys.AUTOCOMPLETE, ".").concat(namespace), data);

          return data;
        });
      }
      /**
       * Given an input, query for a list of similar results in the provided vertical
       * and set into storage
       *
       * @param {string} input       the string to autocomplete
       * @param {string} namespace the namespace to use for the storage key
       * @param {string} verticalKey the vertical key for the experience
       */

    }, {
      key: "autoCompleteVertical",
      value: function autoCompleteVertical(input, namespace, verticalKey) {
        var _this4 = this;

        return this._autoComplete.queryVertical(input, verticalKey).then(function (data) {
          _this4.globalStorage.set("".concat(StorageKeys.AUTOCOMPLETE, ".").concat(namespace), data);

          return data;
        });
      }
      /**
       * Given an input, provide a list of suitable filters for autocompletion
       *
       * @param {string} input  the string to search for filters with
       * @param {object} config  the config to serach for filters with
       * @param {string} config.namespace  the namespace to use for the storage key
       * @param {string} config.verticalKey the vertical key for the config
       * @param {object} config.searchParameters  the search parameters for the config v2
       */

    }, {
      key: "autoCompleteFilter",
      value: function autoCompleteFilter(input, config) {
        var _this5 = this;

        return this._autoComplete.queryFilter(input, config).then(function (data) {
          _this5.globalStorage.set("".concat(StorageKeys.AUTOCOMPLETE, ".").concat(config.namespace), data);
        });
      }
      /**
       * Submits a question to the server and updates the underlying question model
       * @param {object} question The question object to submit to the server
       * @param {number} question.entityId The entity to associate with the question (required)
       * @param {string} question.lanuage The language of the question
       * @param {string} question.site The "publisher" of the (e.g. 'FIRST_PARTY')
       * @param {string} question.name The name of the author
       * @param {string} question.email The email address of the author
       * @param {string} question.questionText The question
       * @param {string} question.questionDescription Additional information about the question
       */

    }, {
      key: "submitQuestion",
      value: function submitQuestion(question) {
        var _this6 = this;

        return this._questionAnswer.submitQuestion(question).then(function (data) {
          _this6.globalStorage.set(StorageKeys.QUESTION_SUBMISSION, QuestionSubmission.submitted());
        });
      }
      /**
       * Stores the given sortBy into storage, to be used for the next search
       * @param {Object} sortByOptions
       */

    }, {
      key: "setSortBys",
      value: function setSortBys() {
        for (var _len = arguments.length, sortByOptions = new Array(_len), _key = 0; _key < _len; _key++) {
          sortByOptions[_key] = arguments[_key];
        }

        var sortBys = sortByOptions.map(function (option) {
          return {
            type: option.type,
            field: option.field,
            direction: option.direction
          };
        });
        this.globalStorage.set(StorageKeys.SORT_BYS, JSON.stringify(sortBys));
      }
      /**
       * Clears the sortBys key in global storage.
       */

    }, {
      key: "clearSortBys",
      value: function clearSortBys() {
        this.globalStorage["delete"](StorageKeys.SORT_BYS);
      }
      /**
       * Stores the given query into storage, to be used for the next search
       * @param {string} query the query to store
       */

    }, {
      key: "setQuery",
      value: function setQuery(query) {
        this.globalStorage.set(StorageKeys.QUERY, query);
      }
      /**
       * Stores the provided query ID, to be used in analytics
       * @param {string} queryId The query id to store
       */

    }, {
      key: "setQueryId",
      value: function setQueryId(queryId) {
        this.globalStorage.set(StorageKeys.QUERY_ID, queryId);
      }
      /**
       * Stores the given filter into storage, to be used for the next search
       *
       * @param {string} namespace the namespace to use for the storage key
       * @param {Filter} filter    the filter to set
       */

    }, {
      key: "setFilter",
      value: function setFilter(namespace, filter) {
        this.globalStorage.set("".concat(StorageKeys.FILTER, ".").concat(namespace), filter);
      }
    }, {
      key: "setFacetFilter",
      value: function setFacetFilter(namespace, filter) {
        this.globalStorage.set("".concat(StorageKeys.FACET_FILTER, ".").concat(namespace), filter);
      }
    }, {
      key: "enableDynamicFilters",
      value: function enableDynamicFilters() {
        this._isDynamicFiltersEnabled = true;
      }
    }, {
      key: "on",
      value: function on(evt, moduleId, cb) {
        return this.globalStorage.on(evt, moduleId, cb);
      }
    }]);

    return Core;
  }();

  var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

  function createCommonjsModule(fn, module) {
  	return module = { exports: {} }, fn(module, module.exports), module.exports;
  }

  var rtfConverter_min = createCommonjsModule(function (module, exports) {
  !function(e,r){module.exports=r();}(commonjsGlobal,function(){var e="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof commonjsGlobal?commonjsGlobal:"undefined"!=typeof self?self:{};function r(){throw new Error("Dynamic requires are not currently supported by rollup-plugin-commonjs")}var t,n=(function(t,n){t.exports=function e(t,n,o){function s(a,l){if(!n[a]){if(!t[a]){var c=r;if(!l&&c)return c(a,!0);if(i)return i(a,!0);var u=new Error("Cannot find module '"+a+"'");throw u.code="MODULE_NOT_FOUND",u}var p=n[a]={exports:{}};t[a][0].call(p.exports,function(e){var r=t[a][1][e];return s(r||e)},p,p.exports,e,t,n,o);}return n[a].exports}for(var i=r,a=0;a<o.length;a++)s(o[a]);return s}({1:[function(e,r,t){r.exports=e("entities/lib/maps/entities.json");},{"entities/lib/maps/entities.json":52}],2:[function(e,r,t){r.exports=["address","article","aside","base","basefont","blockquote","body","caption","center","col","colgroup","dd","details","dialog","dir","div","dl","dt","fieldset","figcaption","figure","footer","form","frame","frameset","h1","h2","h3","h4","h5","h6","head","header","hr","html","iframe","legend","li","link","main","menu","menuitem","meta","nav","noframes","ol","optgroup","option","p","param","section","source","summary","table","tbody","td","tfoot","th","thead","title","tr","track","ul"];},{}],3:[function(e,r,t){var n="<[A-Za-z][A-Za-z0-9\\-]*(?:\\s+[a-zA-Z_:][a-zA-Z0-9:._-]*(?:\\s*=\\s*(?:[^\"'=<>`\\x00-\\x20]+|'[^']*'|\"[^\"]*\"))?)*\\s*\\/?>",o="<\\/[A-Za-z][A-Za-z0-9\\-]*\\s*>",s=new RegExp("^(?:"+n+"|"+o+"|\x3c!----\x3e|\x3c!--(?:-?[^>-])(?:-?[^-])*--\x3e|<[?].*?[?]>|<![A-Z]+\\s+[^>]*>|<!\\[CDATA\\[[\\s\\S]*?\\]\\]>)"),i=new RegExp("^(?:"+n+"|"+o+")");r.exports.HTML_TAG_RE=s,r.exports.HTML_OPEN_CLOSE_TAG_RE=i;},{}],4:[function(e,r,t){var n=Object.prototype.hasOwnProperty;function o(e,r){return n.call(e,r)}function s(e){return !(e>=55296&&e<=57343||e>=64976&&e<=65007||65535==(65535&e)||65534==(65535&e)||e>=0&&e<=8||11===e||e>=14&&e<=31||e>=127&&e<=159||e>1114111)}function i(e){if(e>65535){var r=55296+((e-=65536)>>10),t=56320+(1023&e);return String.fromCharCode(r,t)}return String.fromCharCode(e)}var a=/\\([!"#$%&'()*+,\-.\/:;<=>?@[\\\]^_`{|}~])/g,l=new RegExp(a.source+"|"+/&([a-z#][a-z0-9]{1,31});/gi.source,"gi"),c=/^#((?:x[a-f0-9]{1,8}|[0-9]{1,8}))/i,u=e("./entities"),p=/[&<>"]/,h=/[&<>"]/g,f={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;"};function d(e){return f[e]}var m=/[.?*+^$[\]\\(){}|-]/g,_=e("uc.micro/categories/P/regex");t.lib={},t.lib.mdurl=e("mdurl"),t.lib.ucmicro=e("uc.micro"),t.assign=function(e){return Array.prototype.slice.call(arguments,1).forEach(function(r){if(r){if("object"!=typeof r)throw new TypeError(r+"must be object");Object.keys(r).forEach(function(t){e[t]=r[t];});}}),e},t.isString=function(e){return "[object String]"===function(e){return Object.prototype.toString.call(e)}(e)},t.has=o,t.unescapeMd=function(e){return e.indexOf("\\")<0?e:e.replace(a,"$1")},t.unescapeAll=function(e){return e.indexOf("\\")<0&&e.indexOf("&")<0?e:e.replace(l,function(e,r,t){return r||function(e,r){var t=0;return o(u,r)?u[r]:35===r.charCodeAt(0)&&c.test(r)&&s(t="x"===r[1].toLowerCase()?parseInt(r.slice(2),16):parseInt(r.slice(1),10))?i(t):e}(e,t)})},t.isValidEntityCode=s,t.fromCodePoint=i,t.escapeHtml=function(e){return p.test(e)?e.replace(h,d):e},t.arrayReplaceAt=function(e,r,t){return [].concat(e.slice(0,r),t,e.slice(r+1))},t.isSpace=function(e){switch(e){case 9:case 32:return !0}return !1},t.isWhiteSpace=function(e){if(e>=8192&&e<=8202)return !0;switch(e){case 9:case 10:case 11:case 12:case 13:case 32:case 160:case 5760:case 8239:case 8287:case 12288:return !0}return !1},t.isMdAsciiPunct=function(e){switch(e){case 33:case 34:case 35:case 36:case 37:case 38:case 39:case 40:case 41:case 42:case 43:case 44:case 45:case 46:case 47:case 58:case 59:case 60:case 61:case 62:case 63:case 64:case 91:case 92:case 93:case 94:case 95:case 96:case 123:case 124:case 125:case 126:return !0;default:return !1}},t.isPunctChar=function(e){return _.test(e)},t.escapeRE=function(e){return e.replace(m,"\\$&")},t.normalizeReference=function(e){return e=e.trim().replace(/\s+/g," "),"Ṿ"==="ẞ".toLowerCase()&&(e=e.replace(/ẞ/g,"ß")),e.toLowerCase().toUpperCase()};},{"./entities":1,mdurl:58,"uc.micro":65,"uc.micro/categories/P/regex":63}],5:[function(e,r,t){t.parseLinkLabel=e("./parse_link_label"),t.parseLinkDestination=e("./parse_link_destination"),t.parseLinkTitle=e("./parse_link_title");},{"./parse_link_destination":6,"./parse_link_label":7,"./parse_link_title":8}],6:[function(e,r,t){var n=e("../common/utils").unescapeAll;r.exports=function(e,r,t){var o,s,i=r,a={ok:!1,pos:0,lines:0,str:""};if(60===e.charCodeAt(r)){for(r++;r<t;){if(10===(o=e.charCodeAt(r)))return a;if(62===o)return a.pos=r+1,a.str=n(e.slice(i+1,r)),a.ok=!0,a;92===o&&r+1<t?r+=2:r++;}return a}for(s=0;r<t&&32!==(o=e.charCodeAt(r))&&!(o<32||127===o);)if(92===o&&r+1<t)r+=2;else{if(40===o&&s++,41===o){if(0===s)break;s--;}r++;}return i===r?a:0!==s?a:(a.str=n(e.slice(i,r)),a.lines=0,a.pos=r,a.ok=!0,a)};},{"../common/utils":4}],7:[function(e,r,t){r.exports=function(e,r,t){var n,o,s,i,a=-1,l=e.posMax,c=e.pos;for(e.pos=r+1,n=1;e.pos<l;){if(93===(s=e.src.charCodeAt(e.pos))&&0==--n){o=!0;break}if(i=e.pos,e.md.inline.skipToken(e),91===s)if(i===e.pos-1)n++;else if(t)return e.pos=c,-1}return o&&(a=e.pos),e.pos=c,a};},{}],8:[function(e,r,t){var n=e("../common/utils").unescapeAll;r.exports=function(e,r,t){var o,s,i=0,a=r,l={ok:!1,pos:0,lines:0,str:""};if(r>=t)return l;if(34!==(s=e.charCodeAt(r))&&39!==s&&40!==s)return l;for(r++,40===s&&(s=41);r<t;){if((o=e.charCodeAt(r))===s)return l.pos=r+1,l.lines=i,l.str=n(e.slice(a+1,r)),l.ok=!0,l;10===o?i++:92===o&&r+1<t&&(r++,10===e.charCodeAt(r)&&i++),r++;}return l};},{"../common/utils":4}],9:[function(e,r,t){var n=e("./common/utils"),o=e("./helpers"),s=e("./renderer"),i=e("./parser_core"),a=e("./parser_block"),l=e("./parser_inline"),c=e("linkify-it"),u=e("mdurl"),p=e("punycode"),h={default:e("./presets/default"),zero:e("./presets/zero"),commonmark:e("./presets/commonmark")},f=/^(vbscript|javascript|file|data):/,d=/^data:image\/(gif|png|jpeg|webp);/;function m(e){var r=e.trim().toLowerCase();return !f.test(r)||!!d.test(r)}var _=["http:","https:","mailto:"];function g(e){var r=u.parse(e,!0);if(r.hostname&&(!r.protocol||_.indexOf(r.protocol)>=0))try{r.hostname=p.toASCII(r.hostname);}catch(e){}return u.encode(u.format(r))}function k(e){var r=u.parse(e,!0);if(r.hostname&&(!r.protocol||_.indexOf(r.protocol)>=0))try{r.hostname=p.toUnicode(r.hostname);}catch(e){}return u.decode(u.format(r))}function b(e,r){if(!(this instanceof b))return new b(e,r);r||n.isString(e)||(r=e||{},e="default"),this.inline=new l,this.block=new a,this.core=new i,this.renderer=new s,this.linkify=new c,this.validateLink=m,this.normalizeLink=g,this.normalizeLinkText=k,this.utils=n,this.helpers=n.assign({},o),this.options={},this.configure(e),r&&this.set(r);}b.prototype.set=function(e){return n.assign(this.options,e),this},b.prototype.configure=function(e){var r,t=this;if(n.isString(e)&&!(e=h[r=e]))throw new Error('Wrong `markdown-it` preset "'+r+'", check name');if(!e)throw new Error("Wrong `markdown-it` preset, can't be empty");return e.options&&t.set(e.options),e.components&&Object.keys(e.components).forEach(function(r){e.components[r].rules&&t[r].ruler.enableOnly(e.components[r].rules),e.components[r].rules2&&t[r].ruler2.enableOnly(e.components[r].rules2);}),this},b.prototype.enable=function(e,r){var t=[];Array.isArray(e)||(e=[e]),["core","block","inline"].forEach(function(r){t=t.concat(this[r].ruler.enable(e,!0));},this),t=t.concat(this.inline.ruler2.enable(e,!0));var n=e.filter(function(e){return t.indexOf(e)<0});if(n.length&&!r)throw new Error("MarkdownIt. Failed to enable unknown rule(s): "+n);return this},b.prototype.disable=function(e,r){var t=[];Array.isArray(e)||(e=[e]),["core","block","inline"].forEach(function(r){t=t.concat(this[r].ruler.disable(e,!0));},this),t=t.concat(this.inline.ruler2.disable(e,!0));var n=e.filter(function(e){return t.indexOf(e)<0});if(n.length&&!r)throw new Error("MarkdownIt. Failed to disable unknown rule(s): "+n);return this},b.prototype.use=function(e){var r=[this].concat(Array.prototype.slice.call(arguments,1));return e.apply(e,r),this},b.prototype.parse=function(e,r){if("string"!=typeof e)throw new Error("Input data should be a String");var t=new this.core.State(e,this,r);return this.core.process(t),t.tokens},b.prototype.render=function(e,r){return r=r||{},this.renderer.render(this.parse(e,r),this.options,r)},b.prototype.parseInline=function(e,r){var t=new this.core.State(e,this,r);return t.inlineMode=!0,this.core.process(t),t.tokens},b.prototype.renderInline=function(e,r){return r=r||{},this.renderer.render(this.parseInline(e,r),this.options,r)},r.exports=b;},{"./common/utils":4,"./helpers":5,"./parser_block":10,"./parser_core":11,"./parser_inline":12,"./presets/commonmark":13,"./presets/default":14,"./presets/zero":15,"./renderer":16,"linkify-it":53,mdurl:58,punycode:60}],10:[function(e,r,t){var n=e("./ruler"),o=[["table",e("./rules_block/table"),["paragraph","reference"]],["code",e("./rules_block/code")],["fence",e("./rules_block/fence"),["paragraph","reference","blockquote","list"]],["blockquote",e("./rules_block/blockquote"),["paragraph","reference","blockquote","list"]],["hr",e("./rules_block/hr"),["paragraph","reference","blockquote","list"]],["list",e("./rules_block/list"),["paragraph","reference","blockquote"]],["reference",e("./rules_block/reference")],["heading",e("./rules_block/heading"),["paragraph","reference","blockquote"]],["lheading",e("./rules_block/lheading")],["html_block",e("./rules_block/html_block"),["paragraph","reference","blockquote"]],["paragraph",e("./rules_block/paragraph")]];function s(){this.ruler=new n;for(var e=0;e<o.length;e++)this.ruler.push(o[e][0],o[e][1],{alt:(o[e][2]||[]).slice()});}s.prototype.tokenize=function(e,r,t){for(var n,o=this.ruler.getRules(""),s=o.length,i=r,a=!1,l=e.md.options.maxNesting;i<t&&(e.line=i=e.skipEmptyLines(i),!(i>=t))&&!(e.sCount[i]<e.blkIndent);){if(e.level>=l){e.line=t;break}for(n=0;n<s&&!o[n](e,i,t,!1);n++);e.tight=!a,e.isEmpty(e.line-1)&&(a=!0),(i=e.line)<t&&e.isEmpty(i)&&(a=!0,i++,e.line=i);}},s.prototype.parse=function(e,r,t,n){var o;e&&(o=new this.State(e,r,t,n),this.tokenize(o,o.line,o.lineMax));},s.prototype.State=e("./rules_block/state_block"),r.exports=s;},{"./ruler":17,"./rules_block/blockquote":18,"./rules_block/code":19,"./rules_block/fence":20,"./rules_block/heading":21,"./rules_block/hr":22,"./rules_block/html_block":23,"./rules_block/lheading":24,"./rules_block/list":25,"./rules_block/paragraph":26,"./rules_block/reference":27,"./rules_block/state_block":28,"./rules_block/table":29}],11:[function(e,r,t){var n=e("./ruler"),o=[["normalize",e("./rules_core/normalize")],["block",e("./rules_core/block")],["inline",e("./rules_core/inline")],["linkify",e("./rules_core/linkify")],["replacements",e("./rules_core/replacements")],["smartquotes",e("./rules_core/smartquotes")]];function s(){this.ruler=new n;for(var e=0;e<o.length;e++)this.ruler.push(o[e][0],o[e][1]);}s.prototype.process=function(e){var r,t,n;for(n=this.ruler.getRules(""),r=0,t=n.length;r<t;r++)n[r](e);},s.prototype.State=e("./rules_core/state_core"),r.exports=s;},{"./ruler":17,"./rules_core/block":30,"./rules_core/inline":31,"./rules_core/linkify":32,"./rules_core/normalize":33,"./rules_core/replacements":34,"./rules_core/smartquotes":35,"./rules_core/state_core":36}],12:[function(e,r,t){var n=e("./ruler"),o=[["text",e("./rules_inline/text")],["newline",e("./rules_inline/newline")],["escape",e("./rules_inline/escape")],["backticks",e("./rules_inline/backticks")],["strikethrough",e("./rules_inline/strikethrough").tokenize],["emphasis",e("./rules_inline/emphasis").tokenize],["link",e("./rules_inline/link")],["image",e("./rules_inline/image")],["autolink",e("./rules_inline/autolink")],["html_inline",e("./rules_inline/html_inline")],["entity",e("./rules_inline/entity")]],s=[["balance_pairs",e("./rules_inline/balance_pairs")],["strikethrough",e("./rules_inline/strikethrough").postProcess],["emphasis",e("./rules_inline/emphasis").postProcess],["text_collapse",e("./rules_inline/text_collapse")]];function i(){var e;for(this.ruler=new n,e=0;e<o.length;e++)this.ruler.push(o[e][0],o[e][1]);for(this.ruler2=new n,e=0;e<s.length;e++)this.ruler2.push(s[e][0],s[e][1]);}i.prototype.skipToken=function(e){var r,t,n=e.pos,o=this.ruler.getRules(""),s=o.length,i=e.md.options.maxNesting,a=e.cache;if(void 0===a[n]){if(e.level<i)for(t=0;t<s&&(e.level++,r=o[t](e,!0),e.level--,!r);t++);else e.pos=e.posMax;r||e.pos++,a[n]=e.pos;}else e.pos=a[n];},i.prototype.tokenize=function(e){for(var r,t,n=this.ruler.getRules(""),o=n.length,s=e.posMax,i=e.md.options.maxNesting;e.pos<s;){if(e.level<i)for(t=0;t<o&&!(r=n[t](e,!1));t++);if(r){if(e.pos>=s)break}else e.pending+=e.src[e.pos++];}e.pending&&e.pushPending();},i.prototype.parse=function(e,r,t,n){var o,s,i,a=new this.State(e,r,t,n);for(this.tokenize(a),s=this.ruler2.getRules(""),i=s.length,o=0;o<i;o++)s[o](a);},i.prototype.State=e("./rules_inline/state_inline"),r.exports=i;},{"./ruler":17,"./rules_inline/autolink":37,"./rules_inline/backticks":38,"./rules_inline/balance_pairs":39,"./rules_inline/emphasis":40,"./rules_inline/entity":41,"./rules_inline/escape":42,"./rules_inline/html_inline":43,"./rules_inline/image":44,"./rules_inline/link":45,"./rules_inline/newline":46,"./rules_inline/state_inline":47,"./rules_inline/strikethrough":48,"./rules_inline/text":49,"./rules_inline/text_collapse":50}],13:[function(e,r,t){r.exports={options:{html:!0,xhtmlOut:!0,breaks:!1,langPrefix:"language-",linkify:!1,typographer:!1,quotes:"“”‘’",highlight:null,maxNesting:20},components:{core:{rules:["normalize","block","inline"]},block:{rules:["blockquote","code","fence","heading","hr","html_block","lheading","list","reference","paragraph"]},inline:{rules:["autolink","backticks","emphasis","entity","escape","html_inline","image","link","newline","text"],rules2:["balance_pairs","emphasis","text_collapse"]}}};},{}],14:[function(e,r,t){r.exports={options:{html:!1,xhtmlOut:!1,breaks:!1,langPrefix:"language-",linkify:!1,typographer:!1,quotes:"“”‘’",highlight:null,maxNesting:100},components:{core:{},block:{},inline:{}}};},{}],15:[function(e,r,t){r.exports={options:{html:!1,xhtmlOut:!1,breaks:!1,langPrefix:"language-",linkify:!1,typographer:!1,quotes:"“”‘’",highlight:null,maxNesting:20},components:{core:{rules:["normalize","block","inline"]},block:{rules:["paragraph"]},inline:{rules:["text"],rules2:["balance_pairs","text_collapse"]}}};},{}],16:[function(e,r,t){var n=e("./common/utils").assign,o=e("./common/utils").unescapeAll,s=e("./common/utils").escapeHtml,i={};function a(){this.rules=n({},i);}i.code_inline=function(e,r,t,n,o){var i=e[r];return "<code"+o.renderAttrs(i)+">"+s(e[r].content)+"</code>"},i.code_block=function(e,r,t,n,o){var i=e[r];return "<pre"+o.renderAttrs(i)+"><code>"+s(e[r].content)+"</code></pre>\n"},i.fence=function(e,r,t,n,i){var a,l,c,u,p=e[r],h=p.info?o(p.info).trim():"",f="";return h&&(f=h.split(/\s+/g)[0]),0===(a=t.highlight&&t.highlight(p.content,f)||s(p.content)).indexOf("<pre")?a+"\n":h?(l=p.attrIndex("class"),c=p.attrs?p.attrs.slice():[],l<0?c.push(["class",t.langPrefix+f]):c[l][1]+=" "+t.langPrefix+f,u={attrs:c},"<pre><code"+i.renderAttrs(u)+">"+a+"</code></pre>\n"):"<pre><code"+i.renderAttrs(p)+">"+a+"</code></pre>\n"},i.image=function(e,r,t,n,o){var s=e[r];return s.attrs[s.attrIndex("alt")][1]=o.renderInlineAsText(s.children,t,n),o.renderToken(e,r,t)},i.hardbreak=function(e,r,t){return t.xhtmlOut?"<br />\n":"<br>\n"},i.softbreak=function(e,r,t){return t.breaks?t.xhtmlOut?"<br />\n":"<br>\n":"\n"},i.text=function(e,r){return s(e[r].content)},i.html_block=function(e,r){return e[r].content},i.html_inline=function(e,r){return e[r].content},a.prototype.renderAttrs=function(e){var r,t,n;if(!e.attrs)return "";for(n="",r=0,t=e.attrs.length;r<t;r++)n+=" "+s(e.attrs[r][0])+'="'+s(e.attrs[r][1])+'"';return n},a.prototype.renderToken=function(e,r,t){var n,o="",s=!1,i=e[r];return i.hidden?"":(i.block&&-1!==i.nesting&&r&&e[r-1].hidden&&(o+="\n"),o+=(-1===i.nesting?"</":"<")+i.tag,o+=this.renderAttrs(i),0===i.nesting&&t.xhtmlOut&&(o+=" /"),i.block&&(s=!0,1===i.nesting&&r+1<e.length&&("inline"===(n=e[r+1]).type||n.hidden?s=!1:-1===n.nesting&&n.tag===i.tag&&(s=!1))),o+=s?">\n":">")},a.prototype.renderInline=function(e,r,t){for(var n,o="",s=this.rules,i=0,a=e.length;i<a;i++)n=e[i].type,void 0!==s[n]?o+=s[n](e,i,r,t,this):o+=this.renderToken(e,i,r);return o},a.prototype.renderInlineAsText=function(e,r,t){for(var n="",o=0,s=e.length;o<s;o++)"text"===e[o].type?n+=e[o].content:"image"===e[o].type&&(n+=this.renderInlineAsText(e[o].children,r,t));return n},a.prototype.render=function(e,r,t){var n,o,s,i="",a=this.rules;for(n=0,o=e.length;n<o;n++)"inline"===(s=e[n].type)?i+=this.renderInline(e[n].children,r,t):void 0!==a[s]?i+=a[e[n].type](e,n,r,t,this):i+=this.renderToken(e,n,r,t);return i},r.exports=a;},{"./common/utils":4}],17:[function(e,r,t){function n(){this.__rules__=[],this.__cache__=null;}n.prototype.__find__=function(e){for(var r=0;r<this.__rules__.length;r++)if(this.__rules__[r].name===e)return r;return -1},n.prototype.__compile__=function(){var e=this,r=[""];e.__rules__.forEach(function(e){e.enabled&&e.alt.forEach(function(e){r.indexOf(e)<0&&r.push(e);});}),e.__cache__={},r.forEach(function(r){e.__cache__[r]=[],e.__rules__.forEach(function(t){t.enabled&&(r&&t.alt.indexOf(r)<0||e.__cache__[r].push(t.fn));});});},n.prototype.at=function(e,r,t){var n=this.__find__(e),o=t||{};if(-1===n)throw new Error("Parser rule not found: "+e);this.__rules__[n].fn=r,this.__rules__[n].alt=o.alt||[],this.__cache__=null;},n.prototype.before=function(e,r,t,n){var o=this.__find__(e),s=n||{};if(-1===o)throw new Error("Parser rule not found: "+e);this.__rules__.splice(o,0,{name:r,enabled:!0,fn:t,alt:s.alt||[]}),this.__cache__=null;},n.prototype.after=function(e,r,t,n){var o=this.__find__(e),s=n||{};if(-1===o)throw new Error("Parser rule not found: "+e);this.__rules__.splice(o+1,0,{name:r,enabled:!0,fn:t,alt:s.alt||[]}),this.__cache__=null;},n.prototype.push=function(e,r,t){var n=t||{};this.__rules__.push({name:e,enabled:!0,fn:r,alt:n.alt||[]}),this.__cache__=null;},n.prototype.enable=function(e,r){Array.isArray(e)||(e=[e]);var t=[];return e.forEach(function(e){var n=this.__find__(e);if(n<0){if(r)return;throw new Error("Rules manager: invalid rule name "+e)}this.__rules__[n].enabled=!0,t.push(e);},this),this.__cache__=null,t},n.prototype.enableOnly=function(e,r){Array.isArray(e)||(e=[e]),this.__rules__.forEach(function(e){e.enabled=!1;}),this.enable(e,r);},n.prototype.disable=function(e,r){Array.isArray(e)||(e=[e]);var t=[];return e.forEach(function(e){var n=this.__find__(e);if(n<0){if(r)return;throw new Error("Rules manager: invalid rule name "+e)}this.__rules__[n].enabled=!1,t.push(e);},this),this.__cache__=null,t},n.prototype.getRules=function(e){return null===this.__cache__&&this.__compile__(),this.__cache__[e]||[]},r.exports=n;},{}],18:[function(e,r,t){var n=e("../common/utils").isSpace;r.exports=function(e,r,t,o){var s,i,a,l,c,u,p,h,f,d,m,_,g,k,b,v,y,x,C,A,w=e.lineMax,D=e.bMarks[r]+e.tShift[r],E=e.eMarks[r];if(e.sCount[r]-e.blkIndent>=4)return !1;if(62!==e.src.charCodeAt(D++))return !1;if(o)return !0;for(l=f=e.sCount[r]+D-(e.bMarks[r]+e.tShift[r]),32===e.src.charCodeAt(D)?(D++,l++,f++,s=!1,v=!0):9===e.src.charCodeAt(D)?(v=!0,(e.bsCount[r]+f)%4==3?(D++,l++,f++,s=!1):s=!0):v=!1,d=[e.bMarks[r]],e.bMarks[r]=D;D<E&&(i=e.src.charCodeAt(D),n(i));)9===i?f+=4-(f+e.bsCount[r]+(s?1:0))%4:f++,D++;for(m=[e.bsCount[r]],e.bsCount[r]=e.sCount[r]+1+(v?1:0),u=D>=E,k=[e.sCount[r]],e.sCount[r]=f-l,b=[e.tShift[r]],e.tShift[r]=D-e.bMarks[r],x=e.md.block.ruler.getRules("blockquote"),g=e.parentType,e.parentType="blockquote",A=!1,h=r+1;h<t&&(e.sCount[h]<e.blkIndent&&(A=!0),D=e.bMarks[h]+e.tShift[h],E=e.eMarks[h],!(D>=E));h++)if(62!==e.src.charCodeAt(D++)||A){if(u)break;for(y=!1,a=0,c=x.length;a<c;a++)if(x[a](e,h,t,!0)){y=!0;break}if(y){e.lineMax=h,0!==e.blkIndent&&(d.push(e.bMarks[h]),m.push(e.bsCount[h]),b.push(e.tShift[h]),k.push(e.sCount[h]),e.sCount[h]-=e.blkIndent);break}d.push(e.bMarks[h]),m.push(e.bsCount[h]),b.push(e.tShift[h]),k.push(e.sCount[h]),e.sCount[h]=-1;}else{for(l=f=e.sCount[h]+D-(e.bMarks[h]+e.tShift[h]),32===e.src.charCodeAt(D)?(D++,l++,f++,s=!1,v=!0):9===e.src.charCodeAt(D)?(v=!0,(e.bsCount[h]+f)%4==3?(D++,l++,f++,s=!1):s=!0):v=!1,d.push(e.bMarks[h]),e.bMarks[h]=D;D<E&&(i=e.src.charCodeAt(D),n(i));)9===i?f+=4-(f+e.bsCount[h]+(s?1:0))%4:f++,D++;u=D>=E,m.push(e.bsCount[h]),e.bsCount[h]=e.sCount[h]+1+(v?1:0),k.push(e.sCount[h]),e.sCount[h]=f-l,b.push(e.tShift[h]),e.tShift[h]=D-e.bMarks[h];}for(_=e.blkIndent,e.blkIndent=0,(C=e.push("blockquote_open","blockquote",1)).markup=">",C.map=p=[r,0],e.md.block.tokenize(e,r,h),(C=e.push("blockquote_close","blockquote",-1)).markup=">",e.lineMax=w,e.parentType=g,p[1]=e.line,a=0;a<b.length;a++)e.bMarks[a+r]=d[a],e.tShift[a+r]=b[a],e.sCount[a+r]=k[a],e.bsCount[a+r]=m[a];return e.blkIndent=_,!0};},{"../common/utils":4}],19:[function(e,r,t){r.exports=function(e,r,t){var n,o,s;if(e.sCount[r]-e.blkIndent<4)return !1;for(o=n=r+1;n<t;)if(e.isEmpty(n))n++;else{if(!(e.sCount[n]-e.blkIndent>=4))break;o=++n;}return e.line=o,(s=e.push("code_block","code",0)).content=e.getLines(r,o,4+e.blkIndent,!0),s.map=[r,e.line],!0};},{}],20:[function(e,r,t){r.exports=function(e,r,t,n){var o,s,i,a,l,c,u,p=!1,h=e.bMarks[r]+e.tShift[r],f=e.eMarks[r];if(e.sCount[r]-e.blkIndent>=4)return !1;if(h+3>f)return !1;if(126!==(o=e.src.charCodeAt(h))&&96!==o)return !1;if(l=h,h=e.skipChars(h,o),(s=h-l)<3)return !1;if(u=e.src.slice(l,h),i=e.src.slice(h,f),96===o&&i.indexOf(String.fromCharCode(o))>=0)return !1;if(n)return !0;for(a=r;!(++a>=t||(h=l=e.bMarks[a]+e.tShift[a],f=e.eMarks[a],h<f&&e.sCount[a]<e.blkIndent));)if(e.src.charCodeAt(h)===o&&!(e.sCount[a]-e.blkIndent>=4||(h=e.skipChars(h,o))-l<s||(h=e.skipSpaces(h))<f)){p=!0;break}return s=e.sCount[r],e.line=a+(p?1:0),(c=e.push("fence","code",0)).info=i,c.content=e.getLines(r+1,a,s,!0),c.markup=u,c.map=[r,e.line],!0};},{}],21:[function(e,r,t){var n=e("../common/utils").isSpace;r.exports=function(e,r,t,o){var s,i,a,l,c=e.bMarks[r]+e.tShift[r],u=e.eMarks[r];if(e.sCount[r]-e.blkIndent>=4)return !1;if(35!==(s=e.src.charCodeAt(c))||c>=u)return !1;for(i=1,s=e.src.charCodeAt(++c);35===s&&c<u&&i<=6;)i++,s=e.src.charCodeAt(++c);return !(i>6||c<u&&!n(s)||!o&&(u=e.skipSpacesBack(u,c),(a=e.skipCharsBack(u,35,c))>c&&n(e.src.charCodeAt(a-1))&&(u=a),e.line=r+1,(l=e.push("heading_open","h"+String(i),1)).markup="########".slice(0,i),l.map=[r,e.line],(l=e.push("inline","",0)).content=e.src.slice(c,u).trim(),l.map=[r,e.line],l.children=[],(l=e.push("heading_close","h"+String(i),-1)).markup="########".slice(0,i),0))};},{"../common/utils":4}],22:[function(e,r,t){var n=e("../common/utils").isSpace;r.exports=function(e,r,t,o){var s,i,a,l,c=e.bMarks[r]+e.tShift[r],u=e.eMarks[r];if(e.sCount[r]-e.blkIndent>=4)return !1;if(42!==(s=e.src.charCodeAt(c++))&&45!==s&&95!==s)return !1;for(i=1;c<u;){if((a=e.src.charCodeAt(c++))!==s&&!n(a))return !1;a===s&&i++;}return !(i<3||!o&&(e.line=r+1,(l=e.push("hr","hr",0)).map=[r,e.line],l.markup=Array(i+1).join(String.fromCharCode(s)),0))};},{"../common/utils":4}],23:[function(e,r,t){var n=e("../common/html_blocks"),o=e("../common/html_re").HTML_OPEN_CLOSE_TAG_RE,s=[[/^<(script|pre|style)(?=(\s|>|$))/i,/<\/(script|pre|style)>/i,!0],[/^<!--/,/-->/,!0],[/^<\?/,/\?>/,!0],[/^<![A-Z]/,/>/,!0],[/^<!\[CDATA\[/,/\]\]>/,!0],[new RegExp("^</?("+n.join("|")+")(?=(\\s|/?>|$))","i"),/^$/,!0],[new RegExp(o.source+"\\s*$"),/^$/,!1]];r.exports=function(e,r,t,n){var o,i,a,l,c=e.bMarks[r]+e.tShift[r],u=e.eMarks[r];if(e.sCount[r]-e.blkIndent>=4)return !1;if(!e.md.options.html)return !1;if(60!==e.src.charCodeAt(c))return !1;for(l=e.src.slice(c,u),o=0;o<s.length&&!s[o][0].test(l);o++);if(o===s.length)return !1;if(n)return s[o][2];if(i=r+1,!s[o][1].test(l))for(;i<t&&!(e.sCount[i]<e.blkIndent);i++)if(c=e.bMarks[i]+e.tShift[i],u=e.eMarks[i],l=e.src.slice(c,u),s[o][1].test(l)){0!==l.length&&i++;break}return e.line=i,(a=e.push("html_block","",0)).map=[r,i],a.content=e.getLines(r,i,e.blkIndent,!0),!0};},{"../common/html_blocks":2,"../common/html_re":3}],24:[function(e,r,t){r.exports=function(e,r,t){var n,o,s,i,a,l,c,u,p,h,f=r+1,d=e.md.block.ruler.getRules("paragraph");if(e.sCount[r]-e.blkIndent>=4)return !1;for(h=e.parentType,e.parentType="paragraph";f<t&&!e.isEmpty(f);f++)if(!(e.sCount[f]-e.blkIndent>3)){if(e.sCount[f]>=e.blkIndent&&(l=e.bMarks[f]+e.tShift[f],c=e.eMarks[f],l<c&&(45===(p=e.src.charCodeAt(l))||61===p)&&(l=e.skipChars(l,p),(l=e.skipSpaces(l))>=c))){u=61===p?1:2;break}if(!(e.sCount[f]<0)){for(o=!1,s=0,i=d.length;s<i;s++)if(d[s](e,f,t,!0)){o=!0;break}if(o)break}}return !!u&&(n=e.getLines(r,f,e.blkIndent,!1).trim(),e.line=f+1,(a=e.push("heading_open","h"+String(u),1)).markup=String.fromCharCode(p),a.map=[r,e.line],(a=e.push("inline","",0)).content=n,a.map=[r,e.line-1],a.children=[],(a=e.push("heading_close","h"+String(u),-1)).markup=String.fromCharCode(p),e.parentType=h,!0)};},{}],25:[function(e,r,t){var n=e("../common/utils").isSpace;function o(e,r){var t,o,s,i;return o=e.bMarks[r]+e.tShift[r],s=e.eMarks[r],42!==(t=e.src.charCodeAt(o++))&&45!==t&&43!==t?-1:o<s&&(i=e.src.charCodeAt(o),!n(i))?-1:o}function s(e,r){var t,o=e.bMarks[r]+e.tShift[r],s=o,i=e.eMarks[r];if(s+1>=i)return -1;if((t=e.src.charCodeAt(s++))<48||t>57)return -1;for(;;){if(s>=i)return -1;if(!((t=e.src.charCodeAt(s++))>=48&&t<=57)){if(41===t||46===t)break;return -1}if(s-o>=10)return -1}return s<i&&(t=e.src.charCodeAt(s),!n(t))?-1:s}r.exports=function(e,r,t,n){var i,a,l,c,u,p,h,f,d,m,_,g,k,b,v,y,x,C,A,w,D,E,q,F,S,L,z,T,I=!1,R=!0;if(e.sCount[r]-e.blkIndent>=4)return !1;if(e.listIndent>=0&&e.sCount[r]-e.listIndent>=4&&e.sCount[r]<e.blkIndent)return !1;if(n&&"paragraph"===e.parentType&&e.tShift[r]>=e.blkIndent&&(I=!0),(q=s(e,r))>=0){if(h=!0,S=e.bMarks[r]+e.tShift[r],k=Number(e.src.substr(S,q-S-1)),I&&1!==k)return !1}else{if(!((q=o(e,r))>=0))return !1;h=!1;}if(I&&e.skipSpaces(q)>=e.eMarks[r])return !1;if(g=e.src.charCodeAt(q-1),n)return !0;for(_=e.tokens.length,h?(T=e.push("ordered_list_open","ol",1),1!==k&&(T.attrs=[["start",k]])):T=e.push("bullet_list_open","ul",1),T.map=m=[r,0],T.markup=String.fromCharCode(g),v=r,F=!1,z=e.md.block.ruler.getRules("list"),C=e.parentType,e.parentType="list";v<t;){for(E=q,b=e.eMarks[v],p=y=e.sCount[v]+q-(e.bMarks[r]+e.tShift[r]);E<b;){if(9===(i=e.src.charCodeAt(E)))y+=4-(y+e.bsCount[v])%4;else{if(32!==i)break;y++;}E++;}if((u=(a=E)>=b?1:y-p)>4&&(u=1),c=p+u,(T=e.push("list_item_open","li",1)).markup=String.fromCharCode(g),T.map=f=[r,0],D=e.tight,w=e.tShift[r],A=e.sCount[r],x=e.listIndent,e.listIndent=e.blkIndent,e.blkIndent=c,e.tight=!0,e.tShift[r]=a-e.bMarks[r],e.sCount[r]=y,a>=b&&e.isEmpty(r+1)?e.line=Math.min(e.line+2,t):e.md.block.tokenize(e,r,t,!0),e.tight&&!F||(R=!1),F=e.line-r>1&&e.isEmpty(e.line-1),e.blkIndent=e.listIndent,e.listIndent=x,e.tShift[r]=w,e.sCount[r]=A,e.tight=D,(T=e.push("list_item_close","li",-1)).markup=String.fromCharCode(g),v=r=e.line,f[1]=v,a=e.bMarks[r],v>=t)break;if(e.sCount[v]<e.blkIndent)break;if(e.sCount[r]-e.blkIndent>=4)break;for(L=!1,l=0,d=z.length;l<d;l++)if(z[l](e,v,t,!0)){L=!0;break}if(L)break;if(h){if((q=s(e,v))<0)break}else if((q=o(e,v))<0)break;if(g!==e.src.charCodeAt(q-1))break}return (T=h?e.push("ordered_list_close","ol",-1):e.push("bullet_list_close","ul",-1)).markup=String.fromCharCode(g),m[1]=v,e.line=v,e.parentType=C,R&&function(e,r){var t,n,o=e.level+2;for(t=r+2,n=e.tokens.length-2;t<n;t++)e.tokens[t].level===o&&"paragraph_open"===e.tokens[t].type&&(e.tokens[t+2].hidden=!0,e.tokens[t].hidden=!0,t+=2);}(e,_),!0};},{"../common/utils":4}],26:[function(e,r,t){r.exports=function(e,r){var t,n,o,s,i,a,l=r+1,c=e.md.block.ruler.getRules("paragraph"),u=e.lineMax;for(a=e.parentType,e.parentType="paragraph";l<u&&!e.isEmpty(l);l++)if(!(e.sCount[l]-e.blkIndent>3||e.sCount[l]<0)){for(n=!1,o=0,s=c.length;o<s;o++)if(c[o](e,l,u,!0)){n=!0;break}if(n)break}return t=e.getLines(r,l,e.blkIndent,!1).trim(),e.line=l,(i=e.push("paragraph_open","p",1)).map=[r,e.line],(i=e.push("inline","",0)).content=t,i.map=[r,e.line],i.children=[],i=e.push("paragraph_close","p",-1),e.parentType=a,!0};},{}],27:[function(e,r,t){var n=e("../common/utils").normalizeReference,o=e("../common/utils").isSpace;r.exports=function(e,r,t,s){var i,a,l,c,u,p,h,f,d,m,_,g,k,b,v,y,x=0,C=e.bMarks[r]+e.tShift[r],A=e.eMarks[r],w=r+1;if(e.sCount[r]-e.blkIndent>=4)return !1;if(91!==e.src.charCodeAt(C))return !1;for(;++C<A;)if(93===e.src.charCodeAt(C)&&92!==e.src.charCodeAt(C-1)){if(C+1===A)return !1;if(58!==e.src.charCodeAt(C+1))return !1;break}for(c=e.lineMax,v=e.md.block.ruler.getRules("reference"),m=e.parentType,e.parentType="reference";w<c&&!e.isEmpty(w);w++)if(!(e.sCount[w]-e.blkIndent>3||e.sCount[w]<0)){for(b=!1,p=0,h=v.length;p<h;p++)if(v[p](e,w,c,!0)){b=!0;break}if(b)break}for(k=e.getLines(r,w,e.blkIndent,!1).trim(),A=k.length,C=1;C<A;C++){if(91===(i=k.charCodeAt(C)))return !1;if(93===i){d=C;break}10===i?x++:92===i&&++C<A&&10===k.charCodeAt(C)&&x++;}if(d<0||58!==k.charCodeAt(d+1))return !1;for(C=d+2;C<A;C++)if(10===(i=k.charCodeAt(C)))x++;else if(!o(i))break;if(!(_=e.md.helpers.parseLinkDestination(k,C,A)).ok)return !1;if(u=e.md.normalizeLink(_.str),!e.md.validateLink(u))return !1;for(C=_.pos,x+=_.lines,a=C,l=x,g=C;C<A;C++)if(10===(i=k.charCodeAt(C)))x++;else if(!o(i))break;for(_=e.md.helpers.parseLinkTitle(k,C,A),C<A&&g!==C&&_.ok?(y=_.str,C=_.pos,x+=_.lines):(y="",C=a,x=l);C<A&&(i=k.charCodeAt(C),o(i));)C++;if(C<A&&10!==k.charCodeAt(C)&&y)for(y="",C=a,x=l;C<A&&(i=k.charCodeAt(C),o(i));)C++;return !(C<A&&10!==k.charCodeAt(C)||!(f=n(k.slice(1,d)))||!s&&(void 0===e.env.references&&(e.env.references={}),void 0===e.env.references[f]&&(e.env.references[f]={title:y,href:u}),e.parentType=m,e.line=r+x+1,0))};},{"../common/utils":4}],28:[function(e,r,t){var n=e("../token"),o=e("../common/utils").isSpace;function s(e,r,t,n){var s,i,a,l,c,u,p,h;for(this.src=e,this.md=r,this.env=t,this.tokens=n,this.bMarks=[],this.eMarks=[],this.tShift=[],this.sCount=[],this.bsCount=[],this.blkIndent=0,this.line=0,this.lineMax=0,this.tight=!1,this.ddIndent=-1,this.listIndent=-1,this.parentType="root",this.level=0,this.result="",i=this.src,h=!1,a=l=u=p=0,c=i.length;l<c;l++){if(s=i.charCodeAt(l),!h){if(o(s)){u++,9===s?p+=4-p%4:p++;continue}h=!0;}10!==s&&l!==c-1||(10!==s&&l++,this.bMarks.push(a),this.eMarks.push(l),this.tShift.push(u),this.sCount.push(p),this.bsCount.push(0),h=!1,u=0,p=0,a=l+1);}this.bMarks.push(i.length),this.eMarks.push(i.length),this.tShift.push(0),this.sCount.push(0),this.bsCount.push(0),this.lineMax=this.bMarks.length-1;}s.prototype.push=function(e,r,t){var o=new n(e,r,t);return o.block=!0,t<0&&this.level--,o.level=this.level,t>0&&this.level++,this.tokens.push(o),o},s.prototype.isEmpty=function(e){return this.bMarks[e]+this.tShift[e]>=this.eMarks[e]},s.prototype.skipEmptyLines=function(e){for(var r=this.lineMax;e<r&&!(this.bMarks[e]+this.tShift[e]<this.eMarks[e]);e++);return e},s.prototype.skipSpaces=function(e){for(var r,t=this.src.length;e<t&&(r=this.src.charCodeAt(e),o(r));e++);return e},s.prototype.skipSpacesBack=function(e,r){if(e<=r)return e;for(;e>r;)if(!o(this.src.charCodeAt(--e)))return e+1;return e},s.prototype.skipChars=function(e,r){for(var t=this.src.length;e<t&&this.src.charCodeAt(e)===r;e++);return e},s.prototype.skipCharsBack=function(e,r,t){if(e<=t)return e;for(;e>t;)if(r!==this.src.charCodeAt(--e))return e+1;return e},s.prototype.getLines=function(e,r,t,n){var s,i,a,l,c,u,p,h=e;if(e>=r)return "";for(u=new Array(r-e),s=0;h<r;h++,s++){for(i=0,p=l=this.bMarks[h],c=h+1<r||n?this.eMarks[h]+1:this.eMarks[h];l<c&&i<t;){if(a=this.src.charCodeAt(l),o(a))9===a?i+=4-(i+this.bsCount[h])%4:i++;else{if(!(l-p<this.tShift[h]))break;i++;}l++;}u[s]=i>t?new Array(i-t+1).join(" ")+this.src.slice(l,c):this.src.slice(l,c);}return u.join("")},s.prototype.Token=n,r.exports=s;},{"../common/utils":4,"../token":51}],29:[function(e,r,t){var n=e("../common/utils").isSpace;function o(e,r){var t=e.bMarks[r]+e.blkIndent,n=e.eMarks[r];return e.src.substr(t,n-t)}function s(e){var r,t=[],n=0,o=e.length,s=0,i=0,a=!1,l=0;for(r=e.charCodeAt(n);n<o;)96===r?a?(a=!1,l=n):s%2==0&&(a=!0,l=n):124!==r||s%2!=0||a||(t.push(e.substring(i,n)),i=n+1),92===r?s++:s=0,++n===o&&a&&(a=!1,n=l+1),r=e.charCodeAt(n);return t.push(e.substring(i)),t}r.exports=function(e,r,t,i){var a,l,c,u,p,h,f,d,m,_,g,k;if(r+2>t)return !1;if(p=r+1,e.sCount[p]<e.blkIndent)return !1;if(e.sCount[p]-e.blkIndent>=4)return !1;if((c=e.bMarks[p]+e.tShift[p])>=e.eMarks[p])return !1;if(124!==(a=e.src.charCodeAt(c++))&&45!==a&&58!==a)return !1;for(;c<e.eMarks[p];){if(124!==(a=e.src.charCodeAt(c))&&45!==a&&58!==a&&!n(a))return !1;c++;}for(l=o(e,r+1),h=l.split("|"),m=[],u=0;u<h.length;u++){if(!(_=h[u].trim())){if(0===u||u===h.length-1)continue;return !1}if(!/^:?-+:?$/.test(_))return !1;58===_.charCodeAt(_.length-1)?m.push(58===_.charCodeAt(0)?"center":"right"):58===_.charCodeAt(0)?m.push("left"):m.push("");}if(-1===(l=o(e,r).trim()).indexOf("|"))return !1;if(e.sCount[r]-e.blkIndent>=4)return !1;if(h=s(l.replace(/^\||\|$/g,"")),(f=h.length)>m.length)return !1;if(i)return !0;for((d=e.push("table_open","table",1)).map=g=[r,0],(d=e.push("thead_open","thead",1)).map=[r,r+1],(d=e.push("tr_open","tr",1)).map=[r,r+1],u=0;u<h.length;u++)(d=e.push("th_open","th",1)).map=[r,r+1],m[u]&&(d.attrs=[["style","text-align:"+m[u]]]),(d=e.push("inline","",0)).content=h[u].trim(),d.map=[r,r+1],d.children=[],d=e.push("th_close","th",-1);for(d=e.push("tr_close","tr",-1),d=e.push("thead_close","thead",-1),(d=e.push("tbody_open","tbody",1)).map=k=[r+2,0],p=r+2;p<t&&!(e.sCount[p]<e.blkIndent)&&-1!==(l=o(e,p).trim()).indexOf("|")&&!(e.sCount[p]-e.blkIndent>=4);p++){for(h=s(l.replace(/^\||\|$/g,"")),d=e.push("tr_open","tr",1),u=0;u<f;u++)d=e.push("td_open","td",1),m[u]&&(d.attrs=[["style","text-align:"+m[u]]]),(d=e.push("inline","",0)).content=h[u]?h[u].trim():"",d.children=[],d=e.push("td_close","td",-1);d=e.push("tr_close","tr",-1);}return d=e.push("tbody_close","tbody",-1),d=e.push("table_close","table",-1),g[1]=k[1]=p,e.line=p,!0};},{"../common/utils":4}],30:[function(e,r,t){r.exports=function(e){var r;e.inlineMode?((r=new e.Token("inline","",0)).content=e.src,r.map=[0,1],r.children=[],e.tokens.push(r)):e.md.block.parse(e.src,e.md,e.env,e.tokens);};},{}],31:[function(e,r,t){r.exports=function(e){var r,t,n,o=e.tokens;for(t=0,n=o.length;t<n;t++)"inline"===(r=o[t]).type&&e.md.inline.parse(r.content,e.md,e.env,r.children);};},{}],32:[function(e,r,t){var n=e("../common/utils").arrayReplaceAt;function o(e){return /^<\/a\s*>/i.test(e)}r.exports=function(e){var r,t,s,i,a,l,c,u,p,h,f,d,m,_,g,k,b,v,y=e.tokens;if(e.md.options.linkify)for(t=0,s=y.length;t<s;t++)if("inline"===y[t].type&&e.md.linkify.pretest(y[t].content))for(i=y[t].children,m=0,r=i.length-1;r>=0;r--)if("link_close"!==(l=i[r]).type){if("html_inline"===l.type&&(v=l.content,/^<a[>\s]/i.test(v)&&m>0&&m--,o(l.content)&&m++),!(m>0)&&"text"===l.type&&e.md.linkify.test(l.content)){for(p=l.content,b=e.md.linkify.match(p),c=[],d=l.level,f=0,u=0;u<b.length;u++)_=b[u].url,g=e.md.normalizeLink(_),e.md.validateLink(g)&&(k=b[u].text,k=b[u].schema?"mailto:"!==b[u].schema||/^mailto:/i.test(k)?e.md.normalizeLinkText(k):e.md.normalizeLinkText("mailto:"+k).replace(/^mailto:/,""):e.md.normalizeLinkText("http://"+k).replace(/^http:\/\//,""),(h=b[u].index)>f&&((a=new e.Token("text","",0)).content=p.slice(f,h),a.level=d,c.push(a)),(a=new e.Token("link_open","a",1)).attrs=[["href",g]],a.level=d++,a.markup="linkify",a.info="auto",c.push(a),(a=new e.Token("text","",0)).content=k,a.level=d,c.push(a),(a=new e.Token("link_close","a",-1)).level=--d,a.markup="linkify",a.info="auto",c.push(a),f=b[u].lastIndex);f<p.length&&((a=new e.Token("text","",0)).content=p.slice(f),a.level=d,c.push(a)),y[t].children=i=n(i,r,c);}}else for(r--;i[r].level!==l.level&&"link_open"!==i[r].type;)r--;};},{"../common/utils":4}],33:[function(e,r,t){var n=/\r\n?|\n/g,o=/\0/g;r.exports=function(e){var r;r=(r=e.src.replace(n,"\n")).replace(o,"�"),e.src=r;};},{}],34:[function(e,r,t){var n=/\+-|\.\.|\?\?\?\?|!!!!|,,|--/,o=/\((c|tm|r|p)\)/i,s=/\((c|tm|r|p)\)/gi,i={c:"©",r:"®",p:"§",tm:"™"};function a(e,r){return i[r.toLowerCase()]}function l(e){var r,t,n=0;for(r=e.length-1;r>=0;r--)"text"!==(t=e[r]).type||n||(t.content=t.content.replace(s,a)),"link_open"===t.type&&"auto"===t.info&&n--,"link_close"===t.type&&"auto"===t.info&&n++;}function c(e){var r,t,o=0;for(r=e.length-1;r>=0;r--)"text"!==(t=e[r]).type||o||n.test(t.content)&&(t.content=t.content.replace(/\+-/g,"±").replace(/\.{2,}/g,"…").replace(/([?!])…/g,"$1..").replace(/([?!]){4,}/g,"$1$1$1").replace(/,{2,}/g,",").replace(/(^|[^-])---([^-]|$)/gm,"$1—$2").replace(/(^|\s)--(\s|$)/gm,"$1–$2").replace(/(^|[^-\s])--([^-\s]|$)/gm,"$1–$2")),"link_open"===t.type&&"auto"===t.info&&o--,"link_close"===t.type&&"auto"===t.info&&o++;}r.exports=function(e){var r;if(e.md.options.typographer)for(r=e.tokens.length-1;r>=0;r--)"inline"===e.tokens[r].type&&(o.test(e.tokens[r].content)&&l(e.tokens[r].children),n.test(e.tokens[r].content)&&c(e.tokens[r].children));};},{}],35:[function(e,r,t){var n=e("../common/utils").isWhiteSpace,o=e("../common/utils").isPunctChar,s=e("../common/utils").isMdAsciiPunct,i=/['"]/,a=/['"]/g,l="’";function c(e,r,t){return e.substr(0,r)+t+e.substr(r+1)}function u(e,r){var t,i,u,p,h,f,d,m,_,g,k,b,v,y,x,C,A,w,D,E,q;for(D=[],t=0;t<e.length;t++){for(i=e[t],d=e[t].level,A=D.length-1;A>=0&&!(D[A].level<=d);A--);if(D.length=A+1,"text"===i.type){u=i.content,h=0,f=u.length;e:for(;h<f&&(a.lastIndex=h,p=a.exec(u));){if(x=C=!0,h=p.index+1,w="'"===p[0],_=32,p.index-1>=0)_=u.charCodeAt(p.index-1);else for(A=t-1;A>=0&&"softbreak"!==e[A].type&&"hardbreak"!==e[A].type;A--)if("text"===e[A].type){_=e[A].content.charCodeAt(e[A].content.length-1);break}if(g=32,h<f)g=u.charCodeAt(h);else for(A=t+1;A<e.length&&"softbreak"!==e[A].type&&"hardbreak"!==e[A].type;A++)if("text"===e[A].type){g=e[A].content.charCodeAt(0);break}if(k=s(_)||o(String.fromCharCode(_)),b=s(g)||o(String.fromCharCode(g)),v=n(_),(y=n(g))?x=!1:b&&(v||k||(x=!1)),v?C=!1:k&&(y||b||(C=!1)),34===g&&'"'===p[0]&&_>=48&&_<=57&&(C=x=!1),x&&C&&(x=!1,C=b),x||C){if(C)for(A=D.length-1;A>=0&&(m=D[A],!(D[A].level<d));A--)if(m.single===w&&D[A].level===d){m=D[A],w?(E=r.md.options.quotes[2],q=r.md.options.quotes[3]):(E=r.md.options.quotes[0],q=r.md.options.quotes[1]),i.content=c(i.content,p.index,q),e[m.token].content=c(e[m.token].content,m.pos,E),h+=q.length-1,m.token===t&&(h+=E.length-1),u=i.content,f=u.length,D.length=A;continue e}x?D.push({token:t,pos:p.index,single:w,level:d}):C&&w&&(i.content=c(i.content,p.index,l));}else w&&(i.content=c(i.content,p.index,l));}}}}r.exports=function(e){var r;if(e.md.options.typographer)for(r=e.tokens.length-1;r>=0;r--)"inline"===e.tokens[r].type&&i.test(e.tokens[r].content)&&u(e.tokens[r].children,e);};},{"../common/utils":4}],36:[function(e,r,t){var n=e("../token");function o(e,r,t){this.src=e,this.env=t,this.tokens=[],this.inlineMode=!1,this.md=r;}o.prototype.Token=n,r.exports=o;},{"../token":51}],37:[function(e,r,t){var n=/^<([a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*)>/,o=/^<([a-zA-Z][a-zA-Z0-9+.\-]{1,31}):([^<>\x00-\x20]*)>/;r.exports=function(e,r){var t,s,i,a,l,c,u=e.pos;return !(60!==e.src.charCodeAt(u)||(t=e.src.slice(u)).indexOf(">")<0||(o.test(t)?(s=t.match(o),a=s[0].slice(1,-1),l=e.md.normalizeLink(a),!e.md.validateLink(l)||(r||((c=e.push("link_open","a",1)).attrs=[["href",l]],c.markup="autolink",c.info="auto",(c=e.push("text","",0)).content=e.md.normalizeLinkText(a),(c=e.push("link_close","a",-1)).markup="autolink",c.info="auto"),e.pos+=s[0].length,0)):!n.test(t)||(i=t.match(n),a=i[0].slice(1,-1),l=e.md.normalizeLink("mailto:"+a),!e.md.validateLink(l)||(r||((c=e.push("link_open","a",1)).attrs=[["href",l]],c.markup="autolink",c.info="auto",(c=e.push("text","",0)).content=e.md.normalizeLinkText(a),(c=e.push("link_close","a",-1)).markup="autolink",c.info="auto"),e.pos+=i[0].length,0))))};},{}],38:[function(e,r,t){r.exports=function(e,r){var t,n,o,s,i,a,l=e.pos,c=e.src.charCodeAt(l);if(96!==c)return !1;for(t=l,l++,n=e.posMax;l<n&&96===e.src.charCodeAt(l);)l++;for(o=e.src.slice(t,l),s=i=l;-1!==(s=e.src.indexOf("`",i));){for(i=s+1;i<n&&96===e.src.charCodeAt(i);)i++;if(i-s===o.length)return r||((a=e.push("code_inline","code",0)).markup=o,a.content=e.src.slice(l,s).replace(/\n/g," ").replace(/^ (.+) $/,"$1")),e.pos=i,!0}return r||(e.pending+=o),e.pos+=o.length,!0};},{}],39:[function(e,r,t){function n(e,r){var t,n,o,s,i,a,l,c,u={},p=r.length;for(t=0;t<p;t++)if((o=r[t]).length=o.length||0,o.close){for(u.hasOwnProperty(o.marker)||(u[o.marker]=[-1,-1,-1]),i=u[o.marker][o.length%3],a=-1,n=t-o.jump-1;n>i;n-=s.jump+1)if((s=r[n]).marker===o.marker&&(-1===a&&(a=n),s.open&&s.end<0&&s.level===o.level&&(l=!1,(s.close||o.open)&&(s.length+o.length)%3==0&&(s.length%3==0&&o.length%3==0||(l=!0)),!l))){c=n>0&&!r[n-1].open?r[n-1].jump+1:0,o.jump=t-n+c,o.open=!1,s.end=t,s.jump=c,s.close=!1,a=-1;break}-1!==a&&(u[o.marker][(o.length||0)%3]=a);}}r.exports=function(e){var r,t=e.tokens_meta,o=e.tokens_meta.length;for(n(0,e.delimiters),r=0;r<o;r++)t[r]&&t[r].delimiters&&n(0,t[r].delimiters);};},{}],40:[function(e,r,t){function n(e,r){var t,n,o,s,i,a,l=r.length;for(t=l-1;t>=0;t--)95!==(n=r[t]).marker&&42!==n.marker||-1!==n.end&&(o=r[n.end],a=t>0&&r[t-1].end===n.end+1&&r[t-1].token===n.token-1&&r[n.end+1].token===o.token+1&&r[t-1].marker===n.marker,i=String.fromCharCode(n.marker),(s=e.tokens[n.token]).type=a?"strong_open":"em_open",s.tag=a?"strong":"em",s.nesting=1,s.markup=a?i+i:i,s.content="",(s=e.tokens[o.token]).type=a?"strong_close":"em_close",s.tag=a?"strong":"em",s.nesting=-1,s.markup=a?i+i:i,s.content="",a&&(e.tokens[r[t-1].token].content="",e.tokens[r[n.end+1].token].content="",t--));}r.exports.tokenize=function(e,r){var t,n,o=e.pos,s=e.src.charCodeAt(o);if(r)return !1;if(95!==s&&42!==s)return !1;for(n=e.scanDelims(e.pos,42===s),t=0;t<n.length;t++)e.push("text","",0).content=String.fromCharCode(s),e.delimiters.push({marker:s,length:n.length,jump:t,token:e.tokens.length-1,end:-1,open:n.can_open,close:n.can_close});return e.pos+=n.length,!0},r.exports.postProcess=function(e){var r,t=e.tokens_meta,o=e.tokens_meta.length;for(n(e,e.delimiters),r=0;r<o;r++)t[r]&&t[r].delimiters&&n(e,t[r].delimiters);};},{}],41:[function(e,r,t){var n=e("../common/entities"),o=e("../common/utils").has,s=e("../common/utils").isValidEntityCode,i=e("../common/utils").fromCodePoint,a=/^&#((?:x[a-f0-9]{1,6}|[0-9]{1,7}));/i,l=/^&([a-z][a-z0-9]{1,31});/i;r.exports=function(e,r){var t,c,u=e.pos,p=e.posMax;if(38!==e.src.charCodeAt(u))return !1;if(u+1<p)if(35===e.src.charCodeAt(u+1)){if(c=e.src.slice(u).match(a))return r||(t="x"===c[1][0].toLowerCase()?parseInt(c[1].slice(1),16):parseInt(c[1],10),e.pending+=s(t)?i(t):i(65533)),e.pos+=c[0].length,!0}else if((c=e.src.slice(u).match(l))&&o(n,c[1]))return r||(e.pending+=n[c[1]]),e.pos+=c[0].length,!0;return r||(e.pending+="&"),e.pos++,!0};},{"../common/entities":1,"../common/utils":4}],42:[function(e,r,t){for(var n=e("../common/utils").isSpace,o=[],s=0;s<256;s++)o.push(0);"\\!\"#$%&'()*+,./:;<=>?@[]^_`{|}~-".split("").forEach(function(e){o[e.charCodeAt(0)]=1;}),r.exports=function(e,r){var t,s=e.pos,i=e.posMax;if(92!==e.src.charCodeAt(s))return !1;if(++s<i){if((t=e.src.charCodeAt(s))<256&&0!==o[t])return r||(e.pending+=e.src[s]),e.pos+=2,!0;if(10===t){for(r||e.push("hardbreak","br",0),s++;s<i&&(t=e.src.charCodeAt(s),n(t));)s++;return e.pos=s,!0}}return r||(e.pending+="\\"),e.pos++,!0};},{"../common/utils":4}],43:[function(e,r,t){var n=e("../common/html_re").HTML_TAG_RE;r.exports=function(e,r){var t,o,s,i=e.pos;return !(!e.md.options.html||(s=e.posMax,60!==e.src.charCodeAt(i)||i+2>=s||33!==(t=e.src.charCodeAt(i+1))&&63!==t&&47!==t&&!function(e){var r=32|e;return r>=97&&r<=122}(t)||!(o=e.src.slice(i).match(n))||(r||(e.push("html_inline","",0).content=e.src.slice(i,i+o[0].length)),e.pos+=o[0].length,0)))};},{"../common/html_re":3}],44:[function(e,r,t){var n=e("../common/utils").normalizeReference,o=e("../common/utils").isSpace;r.exports=function(e,r){var t,s,i,a,l,c,u,p,h,f,d,m,_,g="",k=e.pos,b=e.posMax;if(33!==e.src.charCodeAt(e.pos))return !1;if(91!==e.src.charCodeAt(e.pos+1))return !1;if(c=e.pos+2,(l=e.md.helpers.parseLinkLabel(e,e.pos+1,!1))<0)return !1;if((u=l+1)<b&&40===e.src.charCodeAt(u)){for(u++;u<b&&(s=e.src.charCodeAt(u),o(s)||10===s);u++);if(u>=b)return !1;for(_=u,(h=e.md.helpers.parseLinkDestination(e.src,u,e.posMax)).ok&&(g=e.md.normalizeLink(h.str),e.md.validateLink(g)?u=h.pos:g=""),_=u;u<b&&(s=e.src.charCodeAt(u),o(s)||10===s);u++);if(h=e.md.helpers.parseLinkTitle(e.src,u,e.posMax),u<b&&_!==u&&h.ok)for(f=h.str,u=h.pos;u<b&&(s=e.src.charCodeAt(u),o(s)||10===s);u++);else f="";if(u>=b||41!==e.src.charCodeAt(u))return e.pos=k,!1;u++;}else{if(void 0===e.env.references)return !1;if(u<b&&91===e.src.charCodeAt(u)?(_=u+1,(u=e.md.helpers.parseLinkLabel(e,u))>=0?a=e.src.slice(_,u++):u=l+1):u=l+1,a||(a=e.src.slice(c,l)),!(p=e.env.references[n(a)]))return e.pos=k,!1;g=p.href,f=p.title;}return r||(i=e.src.slice(c,l),e.md.inline.parse(i,e.md,e.env,m=[]),(d=e.push("image","img",0)).attrs=t=[["src",g],["alt",""]],d.children=m,d.content=i,f&&t.push(["title",f])),e.pos=u,e.posMax=b,!0};},{"../common/utils":4}],45:[function(e,r,t){var n=e("../common/utils").normalizeReference,o=e("../common/utils").isSpace;r.exports=function(e,r){var t,s,i,a,l,c,u,p,h,f="",d=e.pos,m=e.posMax,_=e.pos,g=!0;if(91!==e.src.charCodeAt(e.pos))return !1;if(l=e.pos+1,(a=e.md.helpers.parseLinkLabel(e,e.pos,!0))<0)return !1;if((c=a+1)<m&&40===e.src.charCodeAt(c)){for(g=!1,c++;c<m&&(s=e.src.charCodeAt(c),o(s)||10===s);c++);if(c>=m)return !1;for(_=c,(u=e.md.helpers.parseLinkDestination(e.src,c,e.posMax)).ok&&(f=e.md.normalizeLink(u.str),e.md.validateLink(f)?c=u.pos:f=""),_=c;c<m&&(s=e.src.charCodeAt(c),o(s)||10===s);c++);if(u=e.md.helpers.parseLinkTitle(e.src,c,e.posMax),c<m&&_!==c&&u.ok)for(h=u.str,c=u.pos;c<m&&(s=e.src.charCodeAt(c),o(s)||10===s);c++);else h="";(c>=m||41!==e.src.charCodeAt(c))&&(g=!0),c++;}if(g){if(void 0===e.env.references)return !1;if(c<m&&91===e.src.charCodeAt(c)?(_=c+1,(c=e.md.helpers.parseLinkLabel(e,c))>=0?i=e.src.slice(_,c++):c=a+1):c=a+1,i||(i=e.src.slice(l,a)),!(p=e.env.references[n(i)]))return e.pos=d,!1;f=p.href,h=p.title;}return r||(e.pos=l,e.posMax=a,e.push("link_open","a",1).attrs=t=[["href",f]],h&&t.push(["title",h]),e.md.inline.tokenize(e),e.push("link_close","a",-1)),e.pos=c,e.posMax=m,!0};},{"../common/utils":4}],46:[function(e,r,t){var n=e("../common/utils").isSpace;r.exports=function(e,r){var t,o,s=e.pos;if(10!==e.src.charCodeAt(s))return !1;for(t=e.pending.length-1,o=e.posMax,r||(t>=0&&32===e.pending.charCodeAt(t)?t>=1&&32===e.pending.charCodeAt(t-1)?(e.pending=e.pending.replace(/ +$/,""),e.push("hardbreak","br",0)):(e.pending=e.pending.slice(0,-1),e.push("softbreak","br",0)):e.push("softbreak","br",0)),s++;s<o&&n(e.src.charCodeAt(s));)s++;return e.pos=s,!0};},{"../common/utils":4}],47:[function(e,r,t){var n=e("../token"),o=e("../common/utils").isWhiteSpace,s=e("../common/utils").isPunctChar,i=e("../common/utils").isMdAsciiPunct;function a(e,r,t,n){this.src=e,this.env=t,this.md=r,this.tokens=n,this.tokens_meta=Array(n.length),this.pos=0,this.posMax=this.src.length,this.level=0,this.pending="",this.pendingLevel=0,this.cache={},this.delimiters=[],this._prev_delimiters=[];}a.prototype.pushPending=function(){var e=new n("text","",0);return e.content=this.pending,e.level=this.pendingLevel,this.tokens.push(e),this.pending="",e},a.prototype.push=function(e,r,t){this.pending&&this.pushPending();var o=new n(e,r,t),s=null;return t<0&&(this.level--,this.delimiters=this._prev_delimiters.pop()),o.level=this.level,t>0&&(this.level++,this._prev_delimiters.push(this.delimiters),this.delimiters=[],s={delimiters:this.delimiters}),this.pendingLevel=this.level,this.tokens.push(o),this.tokens_meta.push(s),o},a.prototype.scanDelims=function(e,r){var t,n,a,l,c,u,p,h,f,d=e,m=!0,_=!0,g=this.posMax,k=this.src.charCodeAt(e);for(t=e>0?this.src.charCodeAt(e-1):32;d<g&&this.src.charCodeAt(d)===k;)d++;return a=d-e,n=d<g?this.src.charCodeAt(d):32,p=i(t)||s(String.fromCharCode(t)),f=i(n)||s(String.fromCharCode(n)),u=o(t),(h=o(n))?m=!1:f&&(u||p||(m=!1)),u?_=!1:p&&(h||f||(_=!1)),r?(l=m,c=_):(l=m&&(!_||p),c=_&&(!m||f)),{can_open:l,can_close:c,length:a}},a.prototype.Token=n,r.exports=a;},{"../common/utils":4,"../token":51}],48:[function(e,r,t){function n(e,r){var t,n,o,s,i,a=[],l=r.length;for(t=0;t<l;t++)126===(o=r[t]).marker&&-1!==o.end&&(s=r[o.end],(i=e.tokens[o.token]).type="s_open",i.tag="s",i.nesting=1,i.markup="~~",i.content="",(i=e.tokens[s.token]).type="s_close",i.tag="s",i.nesting=-1,i.markup="~~",i.content="","text"===e.tokens[s.token-1].type&&"~"===e.tokens[s.token-1].content&&a.push(s.token-1));for(;a.length;){for(t=a.pop(),n=t+1;n<e.tokens.length&&"s_close"===e.tokens[n].type;)n++;t!==--n&&(i=e.tokens[n],e.tokens[n]=e.tokens[t],e.tokens[t]=i);}}r.exports.tokenize=function(e,r){var t,n,o,s,i=e.pos,a=e.src.charCodeAt(i);if(r)return !1;if(126!==a)return !1;if(n=e.scanDelims(e.pos,!0),o=n.length,s=String.fromCharCode(a),o<2)return !1;for(o%2&&(e.push("text","",0).content=s,o--),t=0;t<o;t+=2)e.push("text","",0).content=s+s,e.delimiters.push({marker:a,length:0,jump:t,token:e.tokens.length-1,end:-1,open:n.can_open,close:n.can_close});return e.pos+=n.length,!0},r.exports.postProcess=function(e){var r,t=e.tokens_meta,o=e.tokens_meta.length;for(n(e,e.delimiters),r=0;r<o;r++)t[r]&&t[r].delimiters&&n(e,t[r].delimiters);};},{}],49:[function(e,r,t){function n(e){switch(e){case 10:case 33:case 35:case 36:case 37:case 38:case 42:case 43:case 45:case 58:case 60:case 61:case 62:case 64:case 91:case 92:case 93:case 94:case 95:case 96:case 123:case 125:case 126:return !0;default:return !1}}r.exports=function(e,r){for(var t=e.pos;t<e.posMax&&!n(e.src.charCodeAt(t));)t++;return t!==e.pos&&(r||(e.pending+=e.src.slice(e.pos,t)),e.pos=t,!0)};},{}],50:[function(e,r,t){r.exports=function(e){var r,t,n=0,o=e.tokens,s=e.tokens.length;for(r=t=0;r<s;r++)o[r].nesting<0&&n--,o[r].level=n,o[r].nesting>0&&n++,"text"===o[r].type&&r+1<s&&"text"===o[r+1].type?o[r+1].content=o[r].content+o[r+1].content:(r!==t&&(o[t]=o[r]),t++);r!==t&&(o.length=t);};},{}],51:[function(e,r,t){function n(e,r,t){this.type=e,this.tag=r,this.attrs=null,this.map=null,this.nesting=t,this.level=0,this.children=null,this.content="",this.markup="",this.info="",this.meta=null,this.block=!1,this.hidden=!1;}n.prototype.attrIndex=function(e){var r,t,n;if(!this.attrs)return -1;for(r=this.attrs,t=0,n=r.length;t<n;t++)if(r[t][0]===e)return t;return -1},n.prototype.attrPush=function(e){this.attrs?this.attrs.push(e):this.attrs=[e];},n.prototype.attrSet=function(e,r){var t=this.attrIndex(e),n=[e,r];t<0?this.attrPush(n):this.attrs[t]=n;},n.prototype.attrGet=function(e){var r=this.attrIndex(e),t=null;return r>=0&&(t=this.attrs[r][1]),t},n.prototype.attrJoin=function(e,r){var t=this.attrIndex(e);t<0?this.attrPush([e,r]):this.attrs[t][1]=this.attrs[t][1]+" "+r;},r.exports=n;},{}],52:[function(e,r,t){r.exports={Aacute:"Á",aacute:"á",Abreve:"Ă",abreve:"ă",ac:"∾",acd:"∿",acE:"∾̳",Acirc:"Â",acirc:"â",acute:"´",Acy:"А",acy:"а",AElig:"Æ",aelig:"æ",af:"⁡",Afr:"𝔄",afr:"𝔞",Agrave:"À",agrave:"à",alefsym:"ℵ",aleph:"ℵ",Alpha:"Α",alpha:"α",Amacr:"Ā",amacr:"ā",amalg:"⨿",amp:"&",AMP:"&",andand:"⩕",And:"⩓",and:"∧",andd:"⩜",andslope:"⩘",andv:"⩚",ang:"∠",ange:"⦤",angle:"∠",angmsdaa:"⦨",angmsdab:"⦩",angmsdac:"⦪",angmsdad:"⦫",angmsdae:"⦬",angmsdaf:"⦭",angmsdag:"⦮",angmsdah:"⦯",angmsd:"∡",angrt:"∟",angrtvb:"⊾",angrtvbd:"⦝",angsph:"∢",angst:"Å",angzarr:"⍼",Aogon:"Ą",aogon:"ą",Aopf:"𝔸",aopf:"𝕒",apacir:"⩯",ap:"≈",apE:"⩰",ape:"≊",apid:"≋",apos:"'",ApplyFunction:"⁡",approx:"≈",approxeq:"≊",Aring:"Å",aring:"å",Ascr:"𝒜",ascr:"𝒶",Assign:"≔",ast:"*",asymp:"≈",asympeq:"≍",Atilde:"Ã",atilde:"ã",Auml:"Ä",auml:"ä",awconint:"∳",awint:"⨑",backcong:"≌",backepsilon:"϶",backprime:"‵",backsim:"∽",backsimeq:"⋍",Backslash:"∖",Barv:"⫧",barvee:"⊽",barwed:"⌅",Barwed:"⌆",barwedge:"⌅",bbrk:"⎵",bbrktbrk:"⎶",bcong:"≌",Bcy:"Б",bcy:"б",bdquo:"„",becaus:"∵",because:"∵",Because:"∵",bemptyv:"⦰",bepsi:"϶",bernou:"ℬ",Bernoullis:"ℬ",Beta:"Β",beta:"β",beth:"ℶ",between:"≬",Bfr:"𝔅",bfr:"𝔟",bigcap:"⋂",bigcirc:"◯",bigcup:"⋃",bigodot:"⨀",bigoplus:"⨁",bigotimes:"⨂",bigsqcup:"⨆",bigstar:"★",bigtriangledown:"▽",bigtriangleup:"△",biguplus:"⨄",bigvee:"⋁",bigwedge:"⋀",bkarow:"⤍",blacklozenge:"⧫",blacksquare:"▪",blacktriangle:"▴",blacktriangledown:"▾",blacktriangleleft:"◂",blacktriangleright:"▸",blank:"␣",blk12:"▒",blk14:"░",blk34:"▓",block:"█",bne:"=⃥",bnequiv:"≡⃥",bNot:"⫭",bnot:"⌐",Bopf:"𝔹",bopf:"𝕓",bot:"⊥",bottom:"⊥",bowtie:"⋈",boxbox:"⧉",boxdl:"┐",boxdL:"╕",boxDl:"╖",boxDL:"╗",boxdr:"┌",boxdR:"╒",boxDr:"╓",boxDR:"╔",boxh:"─",boxH:"═",boxhd:"┬",boxHd:"╤",boxhD:"╥",boxHD:"╦",boxhu:"┴",boxHu:"╧",boxhU:"╨",boxHU:"╩",boxminus:"⊟",boxplus:"⊞",boxtimes:"⊠",boxul:"┘",boxuL:"╛",boxUl:"╜",boxUL:"╝",boxur:"└",boxuR:"╘",boxUr:"╙",boxUR:"╚",boxv:"│",boxV:"║",boxvh:"┼",boxvH:"╪",boxVh:"╫",boxVH:"╬",boxvl:"┤",boxvL:"╡",boxVl:"╢",boxVL:"╣",boxvr:"├",boxvR:"╞",boxVr:"╟",boxVR:"╠",bprime:"‵",breve:"˘",Breve:"˘",brvbar:"¦",bscr:"𝒷",Bscr:"ℬ",bsemi:"⁏",bsim:"∽",bsime:"⋍",bsolb:"⧅",bsol:"\\",bsolhsub:"⟈",bull:"•",bullet:"•",bump:"≎",bumpE:"⪮",bumpe:"≏",Bumpeq:"≎",bumpeq:"≏",Cacute:"Ć",cacute:"ć",capand:"⩄",capbrcup:"⩉",capcap:"⩋",cap:"∩",Cap:"⋒",capcup:"⩇",capdot:"⩀",CapitalDifferentialD:"ⅅ",caps:"∩︀",caret:"⁁",caron:"ˇ",Cayleys:"ℭ",ccaps:"⩍",Ccaron:"Č",ccaron:"č",Ccedil:"Ç",ccedil:"ç",Ccirc:"Ĉ",ccirc:"ĉ",Cconint:"∰",ccups:"⩌",ccupssm:"⩐",Cdot:"Ċ",cdot:"ċ",cedil:"¸",Cedilla:"¸",cemptyv:"⦲",cent:"¢",centerdot:"·",CenterDot:"·",cfr:"𝔠",Cfr:"ℭ",CHcy:"Ч",chcy:"ч",check:"✓",checkmark:"✓",Chi:"Χ",chi:"χ",circ:"ˆ",circeq:"≗",circlearrowleft:"↺",circlearrowright:"↻",circledast:"⊛",circledcirc:"⊚",circleddash:"⊝",CircleDot:"⊙",circledR:"®",circledS:"Ⓢ",CircleMinus:"⊖",CirclePlus:"⊕",CircleTimes:"⊗",cir:"○",cirE:"⧃",cire:"≗",cirfnint:"⨐",cirmid:"⫯",cirscir:"⧂",ClockwiseContourIntegral:"∲",CloseCurlyDoubleQuote:"”",CloseCurlyQuote:"’",clubs:"♣",clubsuit:"♣",colon:":",Colon:"∷",Colone:"⩴",colone:"≔",coloneq:"≔",comma:",",commat:"@",comp:"∁",compfn:"∘",complement:"∁",complexes:"ℂ",cong:"≅",congdot:"⩭",Congruent:"≡",conint:"∮",Conint:"∯",ContourIntegral:"∮",copf:"𝕔",Copf:"ℂ",coprod:"∐",Coproduct:"∐",copy:"©",COPY:"©",copysr:"℗",CounterClockwiseContourIntegral:"∳",crarr:"↵",cross:"✗",Cross:"⨯",Cscr:"𝒞",cscr:"𝒸",csub:"⫏",csube:"⫑",csup:"⫐",csupe:"⫒",ctdot:"⋯",cudarrl:"⤸",cudarrr:"⤵",cuepr:"⋞",cuesc:"⋟",cularr:"↶",cularrp:"⤽",cupbrcap:"⩈",cupcap:"⩆",CupCap:"≍",cup:"∪",Cup:"⋓",cupcup:"⩊",cupdot:"⊍",cupor:"⩅",cups:"∪︀",curarr:"↷",curarrm:"⤼",curlyeqprec:"⋞",curlyeqsucc:"⋟",curlyvee:"⋎",curlywedge:"⋏",curren:"¤",curvearrowleft:"↶",curvearrowright:"↷",cuvee:"⋎",cuwed:"⋏",cwconint:"∲",cwint:"∱",cylcty:"⌭",dagger:"†",Dagger:"‡",daleth:"ℸ",darr:"↓",Darr:"↡",dArr:"⇓",dash:"‐",Dashv:"⫤",dashv:"⊣",dbkarow:"⤏",dblac:"˝",Dcaron:"Ď",dcaron:"ď",Dcy:"Д",dcy:"д",ddagger:"‡",ddarr:"⇊",DD:"ⅅ",dd:"ⅆ",DDotrahd:"⤑",ddotseq:"⩷",deg:"°",Del:"∇",Delta:"Δ",delta:"δ",demptyv:"⦱",dfisht:"⥿",Dfr:"𝔇",dfr:"𝔡",dHar:"⥥",dharl:"⇃",dharr:"⇂",DiacriticalAcute:"´",DiacriticalDot:"˙",DiacriticalDoubleAcute:"˝",DiacriticalGrave:"`",DiacriticalTilde:"˜",diam:"⋄",diamond:"⋄",Diamond:"⋄",diamondsuit:"♦",diams:"♦",die:"¨",DifferentialD:"ⅆ",digamma:"ϝ",disin:"⋲",div:"÷",divide:"÷",divideontimes:"⋇",divonx:"⋇",DJcy:"Ђ",djcy:"ђ",dlcorn:"⌞",dlcrop:"⌍",dollar:"$",Dopf:"𝔻",dopf:"𝕕",Dot:"¨",dot:"˙",DotDot:"⃜",doteq:"≐",doteqdot:"≑",DotEqual:"≐",dotminus:"∸",dotplus:"∔",dotsquare:"⊡",doublebarwedge:"⌆",DoubleContourIntegral:"∯",DoubleDot:"¨",DoubleDownArrow:"⇓",DoubleLeftArrow:"⇐",DoubleLeftRightArrow:"⇔",DoubleLeftTee:"⫤",DoubleLongLeftArrow:"⟸",DoubleLongLeftRightArrow:"⟺",DoubleLongRightArrow:"⟹",DoubleRightArrow:"⇒",DoubleRightTee:"⊨",DoubleUpArrow:"⇑",DoubleUpDownArrow:"⇕",DoubleVerticalBar:"∥",DownArrowBar:"⤓",downarrow:"↓",DownArrow:"↓",Downarrow:"⇓",DownArrowUpArrow:"⇵",DownBreve:"̑",downdownarrows:"⇊",downharpoonleft:"⇃",downharpoonright:"⇂",DownLeftRightVector:"⥐",DownLeftTeeVector:"⥞",DownLeftVectorBar:"⥖",DownLeftVector:"↽",DownRightTeeVector:"⥟",DownRightVectorBar:"⥗",DownRightVector:"⇁",DownTeeArrow:"↧",DownTee:"⊤",drbkarow:"⤐",drcorn:"⌟",drcrop:"⌌",Dscr:"𝒟",dscr:"𝒹",DScy:"Ѕ",dscy:"ѕ",dsol:"⧶",Dstrok:"Đ",dstrok:"đ",dtdot:"⋱",dtri:"▿",dtrif:"▾",duarr:"⇵",duhar:"⥯",dwangle:"⦦",DZcy:"Џ",dzcy:"џ",dzigrarr:"⟿",Eacute:"É",eacute:"é",easter:"⩮",Ecaron:"Ě",ecaron:"ě",Ecirc:"Ê",ecirc:"ê",ecir:"≖",ecolon:"≕",Ecy:"Э",ecy:"э",eDDot:"⩷",Edot:"Ė",edot:"ė",eDot:"≑",ee:"ⅇ",efDot:"≒",Efr:"𝔈",efr:"𝔢",eg:"⪚",Egrave:"È",egrave:"è",egs:"⪖",egsdot:"⪘",el:"⪙",Element:"∈",elinters:"⏧",ell:"ℓ",els:"⪕",elsdot:"⪗",Emacr:"Ē",emacr:"ē",empty:"∅",emptyset:"∅",EmptySmallSquare:"◻",emptyv:"∅",EmptyVerySmallSquare:"▫",emsp13:" ",emsp14:" ",emsp:" ",ENG:"Ŋ",eng:"ŋ",ensp:" ",Eogon:"Ę",eogon:"ę",Eopf:"𝔼",eopf:"𝕖",epar:"⋕",eparsl:"⧣",eplus:"⩱",epsi:"ε",Epsilon:"Ε",epsilon:"ε",epsiv:"ϵ",eqcirc:"≖",eqcolon:"≕",eqsim:"≂",eqslantgtr:"⪖",eqslantless:"⪕",Equal:"⩵",equals:"=",EqualTilde:"≂",equest:"≟",Equilibrium:"⇌",equiv:"≡",equivDD:"⩸",eqvparsl:"⧥",erarr:"⥱",erDot:"≓",escr:"ℯ",Escr:"ℰ",esdot:"≐",Esim:"⩳",esim:"≂",Eta:"Η",eta:"η",ETH:"Ð",eth:"ð",Euml:"Ë",euml:"ë",euro:"€",excl:"!",exist:"∃",Exists:"∃",expectation:"ℰ",exponentiale:"ⅇ",ExponentialE:"ⅇ",fallingdotseq:"≒",Fcy:"Ф",fcy:"ф",female:"♀",ffilig:"ﬃ",fflig:"ﬀ",ffllig:"ﬄ",Ffr:"𝔉",ffr:"𝔣",filig:"ﬁ",FilledSmallSquare:"◼",FilledVerySmallSquare:"▪",fjlig:"fj",flat:"♭",fllig:"ﬂ",fltns:"▱",fnof:"ƒ",Fopf:"𝔽",fopf:"𝕗",forall:"∀",ForAll:"∀",fork:"⋔",forkv:"⫙",Fouriertrf:"ℱ",fpartint:"⨍",frac12:"½",frac13:"⅓",frac14:"¼",frac15:"⅕",frac16:"⅙",frac18:"⅛",frac23:"⅔",frac25:"⅖",frac34:"¾",frac35:"⅗",frac38:"⅜",frac45:"⅘",frac56:"⅚",frac58:"⅝",frac78:"⅞",frasl:"⁄",frown:"⌢",fscr:"𝒻",Fscr:"ℱ",gacute:"ǵ",Gamma:"Γ",gamma:"γ",Gammad:"Ϝ",gammad:"ϝ",gap:"⪆",Gbreve:"Ğ",gbreve:"ğ",Gcedil:"Ģ",Gcirc:"Ĝ",gcirc:"ĝ",Gcy:"Г",gcy:"г",Gdot:"Ġ",gdot:"ġ",ge:"≥",gE:"≧",gEl:"⪌",gel:"⋛",geq:"≥",geqq:"≧",geqslant:"⩾",gescc:"⪩",ges:"⩾",gesdot:"⪀",gesdoto:"⪂",gesdotol:"⪄",gesl:"⋛︀",gesles:"⪔",Gfr:"𝔊",gfr:"𝔤",gg:"≫",Gg:"⋙",ggg:"⋙",gimel:"ℷ",GJcy:"Ѓ",gjcy:"ѓ",gla:"⪥",gl:"≷",glE:"⪒",glj:"⪤",gnap:"⪊",gnapprox:"⪊",gne:"⪈",gnE:"≩",gneq:"⪈",gneqq:"≩",gnsim:"⋧",Gopf:"𝔾",gopf:"𝕘",grave:"`",GreaterEqual:"≥",GreaterEqualLess:"⋛",GreaterFullEqual:"≧",GreaterGreater:"⪢",GreaterLess:"≷",GreaterSlantEqual:"⩾",GreaterTilde:"≳",Gscr:"𝒢",gscr:"ℊ",gsim:"≳",gsime:"⪎",gsiml:"⪐",gtcc:"⪧",gtcir:"⩺",gt:">",GT:">",Gt:"≫",gtdot:"⋗",gtlPar:"⦕",gtquest:"⩼",gtrapprox:"⪆",gtrarr:"⥸",gtrdot:"⋗",gtreqless:"⋛",gtreqqless:"⪌",gtrless:"≷",gtrsim:"≳",gvertneqq:"≩︀",gvnE:"≩︀",Hacek:"ˇ",hairsp:" ",half:"½",hamilt:"ℋ",HARDcy:"Ъ",hardcy:"ъ",harrcir:"⥈",harr:"↔",hArr:"⇔",harrw:"↭",Hat:"^",hbar:"ℏ",Hcirc:"Ĥ",hcirc:"ĥ",hearts:"♥",heartsuit:"♥",hellip:"…",hercon:"⊹",hfr:"𝔥",Hfr:"ℌ",HilbertSpace:"ℋ",hksearow:"⤥",hkswarow:"⤦",hoarr:"⇿",homtht:"∻",hookleftarrow:"↩",hookrightarrow:"↪",hopf:"𝕙",Hopf:"ℍ",horbar:"―",HorizontalLine:"─",hscr:"𝒽",Hscr:"ℋ",hslash:"ℏ",Hstrok:"Ħ",hstrok:"ħ",HumpDownHump:"≎",HumpEqual:"≏",hybull:"⁃",hyphen:"‐",Iacute:"Í",iacute:"í",ic:"⁣",Icirc:"Î",icirc:"î",Icy:"И",icy:"и",Idot:"İ",IEcy:"Е",iecy:"е",iexcl:"¡",iff:"⇔",ifr:"𝔦",Ifr:"ℑ",Igrave:"Ì",igrave:"ì",ii:"ⅈ",iiiint:"⨌",iiint:"∭",iinfin:"⧜",iiota:"℩",IJlig:"Ĳ",ijlig:"ĳ",Imacr:"Ī",imacr:"ī",image:"ℑ",ImaginaryI:"ⅈ",imagline:"ℐ",imagpart:"ℑ",imath:"ı",Im:"ℑ",imof:"⊷",imped:"Ƶ",Implies:"⇒",incare:"℅",in:"∈",infin:"∞",infintie:"⧝",inodot:"ı",intcal:"⊺",int:"∫",Int:"∬",integers:"ℤ",Integral:"∫",intercal:"⊺",Intersection:"⋂",intlarhk:"⨗",intprod:"⨼",InvisibleComma:"⁣",InvisibleTimes:"⁢",IOcy:"Ё",iocy:"ё",Iogon:"Į",iogon:"į",Iopf:"𝕀",iopf:"𝕚",Iota:"Ι",iota:"ι",iprod:"⨼",iquest:"¿",iscr:"𝒾",Iscr:"ℐ",isin:"∈",isindot:"⋵",isinE:"⋹",isins:"⋴",isinsv:"⋳",isinv:"∈",it:"⁢",Itilde:"Ĩ",itilde:"ĩ",Iukcy:"І",iukcy:"і",Iuml:"Ï",iuml:"ï",Jcirc:"Ĵ",jcirc:"ĵ",Jcy:"Й",jcy:"й",Jfr:"𝔍",jfr:"𝔧",jmath:"ȷ",Jopf:"𝕁",jopf:"𝕛",Jscr:"𝒥",jscr:"𝒿",Jsercy:"Ј",jsercy:"ј",Jukcy:"Є",jukcy:"є",Kappa:"Κ",kappa:"κ",kappav:"ϰ",Kcedil:"Ķ",kcedil:"ķ",Kcy:"К",kcy:"к",Kfr:"𝔎",kfr:"𝔨",kgreen:"ĸ",KHcy:"Х",khcy:"х",KJcy:"Ќ",kjcy:"ќ",Kopf:"𝕂",kopf:"𝕜",Kscr:"𝒦",kscr:"𝓀",lAarr:"⇚",Lacute:"Ĺ",lacute:"ĺ",laemptyv:"⦴",lagran:"ℒ",Lambda:"Λ",lambda:"λ",lang:"⟨",Lang:"⟪",langd:"⦑",langle:"⟨",lap:"⪅",Laplacetrf:"ℒ",laquo:"«",larrb:"⇤",larrbfs:"⤟",larr:"←",Larr:"↞",lArr:"⇐",larrfs:"⤝",larrhk:"↩",larrlp:"↫",larrpl:"⤹",larrsim:"⥳",larrtl:"↢",latail:"⤙",lAtail:"⤛",lat:"⪫",late:"⪭",lates:"⪭︀",lbarr:"⤌",lBarr:"⤎",lbbrk:"❲",lbrace:"{",lbrack:"[",lbrke:"⦋",lbrksld:"⦏",lbrkslu:"⦍",Lcaron:"Ľ",lcaron:"ľ",Lcedil:"Ļ",lcedil:"ļ",lceil:"⌈",lcub:"{",Lcy:"Л",lcy:"л",ldca:"⤶",ldquo:"“",ldquor:"„",ldrdhar:"⥧",ldrushar:"⥋",ldsh:"↲",le:"≤",lE:"≦",LeftAngleBracket:"⟨",LeftArrowBar:"⇤",leftarrow:"←",LeftArrow:"←",Leftarrow:"⇐",LeftArrowRightArrow:"⇆",leftarrowtail:"↢",LeftCeiling:"⌈",LeftDoubleBracket:"⟦",LeftDownTeeVector:"⥡",LeftDownVectorBar:"⥙",LeftDownVector:"⇃",LeftFloor:"⌊",leftharpoondown:"↽",leftharpoonup:"↼",leftleftarrows:"⇇",leftrightarrow:"↔",LeftRightArrow:"↔",Leftrightarrow:"⇔",leftrightarrows:"⇆",leftrightharpoons:"⇋",leftrightsquigarrow:"↭",LeftRightVector:"⥎",LeftTeeArrow:"↤",LeftTee:"⊣",LeftTeeVector:"⥚",leftthreetimes:"⋋",LeftTriangleBar:"⧏",LeftTriangle:"⊲",LeftTriangleEqual:"⊴",LeftUpDownVector:"⥑",LeftUpTeeVector:"⥠",LeftUpVectorBar:"⥘",LeftUpVector:"↿",LeftVectorBar:"⥒",LeftVector:"↼",lEg:"⪋",leg:"⋚",leq:"≤",leqq:"≦",leqslant:"⩽",lescc:"⪨",les:"⩽",lesdot:"⩿",lesdoto:"⪁",lesdotor:"⪃",lesg:"⋚︀",lesges:"⪓",lessapprox:"⪅",lessdot:"⋖",lesseqgtr:"⋚",lesseqqgtr:"⪋",LessEqualGreater:"⋚",LessFullEqual:"≦",LessGreater:"≶",lessgtr:"≶",LessLess:"⪡",lesssim:"≲",LessSlantEqual:"⩽",LessTilde:"≲",lfisht:"⥼",lfloor:"⌊",Lfr:"𝔏",lfr:"𝔩",lg:"≶",lgE:"⪑",lHar:"⥢",lhard:"↽",lharu:"↼",lharul:"⥪",lhblk:"▄",LJcy:"Љ",ljcy:"љ",llarr:"⇇",ll:"≪",Ll:"⋘",llcorner:"⌞",Lleftarrow:"⇚",llhard:"⥫",lltri:"◺",Lmidot:"Ŀ",lmidot:"ŀ",lmoustache:"⎰",lmoust:"⎰",lnap:"⪉",lnapprox:"⪉",lne:"⪇",lnE:"≨",lneq:"⪇",lneqq:"≨",lnsim:"⋦",loang:"⟬",loarr:"⇽",lobrk:"⟦",longleftarrow:"⟵",LongLeftArrow:"⟵",Longleftarrow:"⟸",longleftrightarrow:"⟷",LongLeftRightArrow:"⟷",Longleftrightarrow:"⟺",longmapsto:"⟼",longrightarrow:"⟶",LongRightArrow:"⟶",Longrightarrow:"⟹",looparrowleft:"↫",looparrowright:"↬",lopar:"⦅",Lopf:"𝕃",lopf:"𝕝",loplus:"⨭",lotimes:"⨴",lowast:"∗",lowbar:"_",LowerLeftArrow:"↙",LowerRightArrow:"↘",loz:"◊",lozenge:"◊",lozf:"⧫",lpar:"(",lparlt:"⦓",lrarr:"⇆",lrcorner:"⌟",lrhar:"⇋",lrhard:"⥭",lrm:"‎",lrtri:"⊿",lsaquo:"‹",lscr:"𝓁",Lscr:"ℒ",lsh:"↰",Lsh:"↰",lsim:"≲",lsime:"⪍",lsimg:"⪏",lsqb:"[",lsquo:"‘",lsquor:"‚",Lstrok:"Ł",lstrok:"ł",ltcc:"⪦",ltcir:"⩹",lt:"<",LT:"<",Lt:"≪",ltdot:"⋖",lthree:"⋋",ltimes:"⋉",ltlarr:"⥶",ltquest:"⩻",ltri:"◃",ltrie:"⊴",ltrif:"◂",ltrPar:"⦖",lurdshar:"⥊",luruhar:"⥦",lvertneqq:"≨︀",lvnE:"≨︀",macr:"¯",male:"♂",malt:"✠",maltese:"✠",Map:"⤅",map:"↦",mapsto:"↦",mapstodown:"↧",mapstoleft:"↤",mapstoup:"↥",marker:"▮",mcomma:"⨩",Mcy:"М",mcy:"м",mdash:"—",mDDot:"∺",measuredangle:"∡",MediumSpace:" ",Mellintrf:"ℳ",Mfr:"𝔐",mfr:"𝔪",mho:"℧",micro:"µ",midast:"*",midcir:"⫰",mid:"∣",middot:"·",minusb:"⊟",minus:"−",minusd:"∸",minusdu:"⨪",MinusPlus:"∓",mlcp:"⫛",mldr:"…",mnplus:"∓",models:"⊧",Mopf:"𝕄",mopf:"𝕞",mp:"∓",mscr:"𝓂",Mscr:"ℳ",mstpos:"∾",Mu:"Μ",mu:"μ",multimap:"⊸",mumap:"⊸",nabla:"∇",Nacute:"Ń",nacute:"ń",nang:"∠⃒",nap:"≉",napE:"⩰̸",napid:"≋̸",napos:"ŉ",napprox:"≉",natural:"♮",naturals:"ℕ",natur:"♮",nbsp:" ",nbump:"≎̸",nbumpe:"≏̸",ncap:"⩃",Ncaron:"Ň",ncaron:"ň",Ncedil:"Ņ",ncedil:"ņ",ncong:"≇",ncongdot:"⩭̸",ncup:"⩂",Ncy:"Н",ncy:"н",ndash:"–",nearhk:"⤤",nearr:"↗",neArr:"⇗",nearrow:"↗",ne:"≠",nedot:"≐̸",NegativeMediumSpace:"​",NegativeThickSpace:"​",NegativeThinSpace:"​",NegativeVeryThinSpace:"​",nequiv:"≢",nesear:"⤨",nesim:"≂̸",NestedGreaterGreater:"≫",NestedLessLess:"≪",NewLine:"\n",nexist:"∄",nexists:"∄",Nfr:"𝔑",nfr:"𝔫",ngE:"≧̸",nge:"≱",ngeq:"≱",ngeqq:"≧̸",ngeqslant:"⩾̸",nges:"⩾̸",nGg:"⋙̸",ngsim:"≵",nGt:"≫⃒",ngt:"≯",ngtr:"≯",nGtv:"≫̸",nharr:"↮",nhArr:"⇎",nhpar:"⫲",ni:"∋",nis:"⋼",nisd:"⋺",niv:"∋",NJcy:"Њ",njcy:"њ",nlarr:"↚",nlArr:"⇍",nldr:"‥",nlE:"≦̸",nle:"≰",nleftarrow:"↚",nLeftarrow:"⇍",nleftrightarrow:"↮",nLeftrightarrow:"⇎",nleq:"≰",nleqq:"≦̸",nleqslant:"⩽̸",nles:"⩽̸",nless:"≮",nLl:"⋘̸",nlsim:"≴",nLt:"≪⃒",nlt:"≮",nltri:"⋪",nltrie:"⋬",nLtv:"≪̸",nmid:"∤",NoBreak:"⁠",NonBreakingSpace:" ",nopf:"𝕟",Nopf:"ℕ",Not:"⫬",not:"¬",NotCongruent:"≢",NotCupCap:"≭",NotDoubleVerticalBar:"∦",NotElement:"∉",NotEqual:"≠",NotEqualTilde:"≂̸",NotExists:"∄",NotGreater:"≯",NotGreaterEqual:"≱",NotGreaterFullEqual:"≧̸",NotGreaterGreater:"≫̸",NotGreaterLess:"≹",NotGreaterSlantEqual:"⩾̸",NotGreaterTilde:"≵",NotHumpDownHump:"≎̸",NotHumpEqual:"≏̸",notin:"∉",notindot:"⋵̸",notinE:"⋹̸",notinva:"∉",notinvb:"⋷",notinvc:"⋶",NotLeftTriangleBar:"⧏̸",NotLeftTriangle:"⋪",NotLeftTriangleEqual:"⋬",NotLess:"≮",NotLessEqual:"≰",NotLessGreater:"≸",NotLessLess:"≪̸",NotLessSlantEqual:"⩽̸",NotLessTilde:"≴",NotNestedGreaterGreater:"⪢̸",NotNestedLessLess:"⪡̸",notni:"∌",notniva:"∌",notnivb:"⋾",notnivc:"⋽",NotPrecedes:"⊀",NotPrecedesEqual:"⪯̸",NotPrecedesSlantEqual:"⋠",NotReverseElement:"∌",NotRightTriangleBar:"⧐̸",NotRightTriangle:"⋫",NotRightTriangleEqual:"⋭",NotSquareSubset:"⊏̸",NotSquareSubsetEqual:"⋢",NotSquareSuperset:"⊐̸",NotSquareSupersetEqual:"⋣",NotSubset:"⊂⃒",NotSubsetEqual:"⊈",NotSucceeds:"⊁",NotSucceedsEqual:"⪰̸",NotSucceedsSlantEqual:"⋡",NotSucceedsTilde:"≿̸",NotSuperset:"⊃⃒",NotSupersetEqual:"⊉",NotTilde:"≁",NotTildeEqual:"≄",NotTildeFullEqual:"≇",NotTildeTilde:"≉",NotVerticalBar:"∤",nparallel:"∦",npar:"∦",nparsl:"⫽⃥",npart:"∂̸",npolint:"⨔",npr:"⊀",nprcue:"⋠",nprec:"⊀",npreceq:"⪯̸",npre:"⪯̸",nrarrc:"⤳̸",nrarr:"↛",nrArr:"⇏",nrarrw:"↝̸",nrightarrow:"↛",nRightarrow:"⇏",nrtri:"⋫",nrtrie:"⋭",nsc:"⊁",nsccue:"⋡",nsce:"⪰̸",Nscr:"𝒩",nscr:"𝓃",nshortmid:"∤",nshortparallel:"∦",nsim:"≁",nsime:"≄",nsimeq:"≄",nsmid:"∤",nspar:"∦",nsqsube:"⋢",nsqsupe:"⋣",nsub:"⊄",nsubE:"⫅̸",nsube:"⊈",nsubset:"⊂⃒",nsubseteq:"⊈",nsubseteqq:"⫅̸",nsucc:"⊁",nsucceq:"⪰̸",nsup:"⊅",nsupE:"⫆̸",nsupe:"⊉",nsupset:"⊃⃒",nsupseteq:"⊉",nsupseteqq:"⫆̸",ntgl:"≹",Ntilde:"Ñ",ntilde:"ñ",ntlg:"≸",ntriangleleft:"⋪",ntrianglelefteq:"⋬",ntriangleright:"⋫",ntrianglerighteq:"⋭",Nu:"Ν",nu:"ν",num:"#",numero:"№",numsp:" ",nvap:"≍⃒",nvdash:"⊬",nvDash:"⊭",nVdash:"⊮",nVDash:"⊯",nvge:"≥⃒",nvgt:">⃒",nvHarr:"⤄",nvinfin:"⧞",nvlArr:"⤂",nvle:"≤⃒",nvlt:"<⃒",nvltrie:"⊴⃒",nvrArr:"⤃",nvrtrie:"⊵⃒",nvsim:"∼⃒",nwarhk:"⤣",nwarr:"↖",nwArr:"⇖",nwarrow:"↖",nwnear:"⤧",Oacute:"Ó",oacute:"ó",oast:"⊛",Ocirc:"Ô",ocirc:"ô",ocir:"⊚",Ocy:"О",ocy:"о",odash:"⊝",Odblac:"Ő",odblac:"ő",odiv:"⨸",odot:"⊙",odsold:"⦼",OElig:"Œ",oelig:"œ",ofcir:"⦿",Ofr:"𝔒",ofr:"𝔬",ogon:"˛",Ograve:"Ò",ograve:"ò",ogt:"⧁",ohbar:"⦵",ohm:"Ω",oint:"∮",olarr:"↺",olcir:"⦾",olcross:"⦻",oline:"‾",olt:"⧀",Omacr:"Ō",omacr:"ō",Omega:"Ω",omega:"ω",Omicron:"Ο",omicron:"ο",omid:"⦶",ominus:"⊖",Oopf:"𝕆",oopf:"𝕠",opar:"⦷",OpenCurlyDoubleQuote:"“",OpenCurlyQuote:"‘",operp:"⦹",oplus:"⊕",orarr:"↻",Or:"⩔",or:"∨",ord:"⩝",order:"ℴ",orderof:"ℴ",ordf:"ª",ordm:"º",origof:"⊶",oror:"⩖",orslope:"⩗",orv:"⩛",oS:"Ⓢ",Oscr:"𝒪",oscr:"ℴ",Oslash:"Ø",oslash:"ø",osol:"⊘",Otilde:"Õ",otilde:"õ",otimesas:"⨶",Otimes:"⨷",otimes:"⊗",Ouml:"Ö",ouml:"ö",ovbar:"⌽",OverBar:"‾",OverBrace:"⏞",OverBracket:"⎴",OverParenthesis:"⏜",para:"¶",parallel:"∥",par:"∥",parsim:"⫳",parsl:"⫽",part:"∂",PartialD:"∂",Pcy:"П",pcy:"п",percnt:"%",period:".",permil:"‰",perp:"⊥",pertenk:"‱",Pfr:"𝔓",pfr:"𝔭",Phi:"Φ",phi:"φ",phiv:"ϕ",phmmat:"ℳ",phone:"☎",Pi:"Π",pi:"π",pitchfork:"⋔",piv:"ϖ",planck:"ℏ",planckh:"ℎ",plankv:"ℏ",plusacir:"⨣",plusb:"⊞",pluscir:"⨢",plus:"+",plusdo:"∔",plusdu:"⨥",pluse:"⩲",PlusMinus:"±",plusmn:"±",plussim:"⨦",plustwo:"⨧",pm:"±",Poincareplane:"ℌ",pointint:"⨕",popf:"𝕡",Popf:"ℙ",pound:"£",prap:"⪷",Pr:"⪻",pr:"≺",prcue:"≼",precapprox:"⪷",prec:"≺",preccurlyeq:"≼",Precedes:"≺",PrecedesEqual:"⪯",PrecedesSlantEqual:"≼",PrecedesTilde:"≾",preceq:"⪯",precnapprox:"⪹",precneqq:"⪵",precnsim:"⋨",pre:"⪯",prE:"⪳",precsim:"≾",prime:"′",Prime:"″",primes:"ℙ",prnap:"⪹",prnE:"⪵",prnsim:"⋨",prod:"∏",Product:"∏",profalar:"⌮",profline:"⌒",profsurf:"⌓",prop:"∝",Proportional:"∝",Proportion:"∷",propto:"∝",prsim:"≾",prurel:"⊰",Pscr:"𝒫",pscr:"𝓅",Psi:"Ψ",psi:"ψ",puncsp:" ",Qfr:"𝔔",qfr:"𝔮",qint:"⨌",qopf:"𝕢",Qopf:"ℚ",qprime:"⁗",Qscr:"𝒬",qscr:"𝓆",quaternions:"ℍ",quatint:"⨖",quest:"?",questeq:"≟",quot:'"',QUOT:'"',rAarr:"⇛",race:"∽̱",Racute:"Ŕ",racute:"ŕ",radic:"√",raemptyv:"⦳",rang:"⟩",Rang:"⟫",rangd:"⦒",range:"⦥",rangle:"⟩",raquo:"»",rarrap:"⥵",rarrb:"⇥",rarrbfs:"⤠",rarrc:"⤳",rarr:"→",Rarr:"↠",rArr:"⇒",rarrfs:"⤞",rarrhk:"↪",rarrlp:"↬",rarrpl:"⥅",rarrsim:"⥴",Rarrtl:"⤖",rarrtl:"↣",rarrw:"↝",ratail:"⤚",rAtail:"⤜",ratio:"∶",rationals:"ℚ",rbarr:"⤍",rBarr:"⤏",RBarr:"⤐",rbbrk:"❳",rbrace:"}",rbrack:"]",rbrke:"⦌",rbrksld:"⦎",rbrkslu:"⦐",Rcaron:"Ř",rcaron:"ř",Rcedil:"Ŗ",rcedil:"ŗ",rceil:"⌉",rcub:"}",Rcy:"Р",rcy:"р",rdca:"⤷",rdldhar:"⥩",rdquo:"”",rdquor:"”",rdsh:"↳",real:"ℜ",realine:"ℛ",realpart:"ℜ",reals:"ℝ",Re:"ℜ",rect:"▭",reg:"®",REG:"®",ReverseElement:"∋",ReverseEquilibrium:"⇋",ReverseUpEquilibrium:"⥯",rfisht:"⥽",rfloor:"⌋",rfr:"𝔯",Rfr:"ℜ",rHar:"⥤",rhard:"⇁",rharu:"⇀",rharul:"⥬",Rho:"Ρ",rho:"ρ",rhov:"ϱ",RightAngleBracket:"⟩",RightArrowBar:"⇥",rightarrow:"→",RightArrow:"→",Rightarrow:"⇒",RightArrowLeftArrow:"⇄",rightarrowtail:"↣",RightCeiling:"⌉",RightDoubleBracket:"⟧",RightDownTeeVector:"⥝",RightDownVectorBar:"⥕",RightDownVector:"⇂",RightFloor:"⌋",rightharpoondown:"⇁",rightharpoonup:"⇀",rightleftarrows:"⇄",rightleftharpoons:"⇌",rightrightarrows:"⇉",rightsquigarrow:"↝",RightTeeArrow:"↦",RightTee:"⊢",RightTeeVector:"⥛",rightthreetimes:"⋌",RightTriangleBar:"⧐",RightTriangle:"⊳",RightTriangleEqual:"⊵",RightUpDownVector:"⥏",RightUpTeeVector:"⥜",RightUpVectorBar:"⥔",RightUpVector:"↾",RightVectorBar:"⥓",RightVector:"⇀",ring:"˚",risingdotseq:"≓",rlarr:"⇄",rlhar:"⇌",rlm:"‏",rmoustache:"⎱",rmoust:"⎱",rnmid:"⫮",roang:"⟭",roarr:"⇾",robrk:"⟧",ropar:"⦆",ropf:"𝕣",Ropf:"ℝ",roplus:"⨮",rotimes:"⨵",RoundImplies:"⥰",rpar:")",rpargt:"⦔",rppolint:"⨒",rrarr:"⇉",Rrightarrow:"⇛",rsaquo:"›",rscr:"𝓇",Rscr:"ℛ",rsh:"↱",Rsh:"↱",rsqb:"]",rsquo:"’",rsquor:"’",rthree:"⋌",rtimes:"⋊",rtri:"▹",rtrie:"⊵",rtrif:"▸",rtriltri:"⧎",RuleDelayed:"⧴",ruluhar:"⥨",rx:"℞",Sacute:"Ś",sacute:"ś",sbquo:"‚",scap:"⪸",Scaron:"Š",scaron:"š",Sc:"⪼",sc:"≻",sccue:"≽",sce:"⪰",scE:"⪴",Scedil:"Ş",scedil:"ş",Scirc:"Ŝ",scirc:"ŝ",scnap:"⪺",scnE:"⪶",scnsim:"⋩",scpolint:"⨓",scsim:"≿",Scy:"С",scy:"с",sdotb:"⊡",sdot:"⋅",sdote:"⩦",searhk:"⤥",searr:"↘",seArr:"⇘",searrow:"↘",sect:"§",semi:";",seswar:"⤩",setminus:"∖",setmn:"∖",sext:"✶",Sfr:"𝔖",sfr:"𝔰",sfrown:"⌢",sharp:"♯",SHCHcy:"Щ",shchcy:"щ",SHcy:"Ш",shcy:"ш",ShortDownArrow:"↓",ShortLeftArrow:"←",shortmid:"∣",shortparallel:"∥",ShortRightArrow:"→",ShortUpArrow:"↑",shy:"­",Sigma:"Σ",sigma:"σ",sigmaf:"ς",sigmav:"ς",sim:"∼",simdot:"⩪",sime:"≃",simeq:"≃",simg:"⪞",simgE:"⪠",siml:"⪝",simlE:"⪟",simne:"≆",simplus:"⨤",simrarr:"⥲",slarr:"←",SmallCircle:"∘",smallsetminus:"∖",smashp:"⨳",smeparsl:"⧤",smid:"∣",smile:"⌣",smt:"⪪",smte:"⪬",smtes:"⪬︀",SOFTcy:"Ь",softcy:"ь",solbar:"⌿",solb:"⧄",sol:"/",Sopf:"𝕊",sopf:"𝕤",spades:"♠",spadesuit:"♠",spar:"∥",sqcap:"⊓",sqcaps:"⊓︀",sqcup:"⊔",sqcups:"⊔︀",Sqrt:"√",sqsub:"⊏",sqsube:"⊑",sqsubset:"⊏",sqsubseteq:"⊑",sqsup:"⊐",sqsupe:"⊒",sqsupset:"⊐",sqsupseteq:"⊒",square:"□",Square:"□",SquareIntersection:"⊓",SquareSubset:"⊏",SquareSubsetEqual:"⊑",SquareSuperset:"⊐",SquareSupersetEqual:"⊒",SquareUnion:"⊔",squarf:"▪",squ:"□",squf:"▪",srarr:"→",Sscr:"𝒮",sscr:"𝓈",ssetmn:"∖",ssmile:"⌣",sstarf:"⋆",Star:"⋆",star:"☆",starf:"★",straightepsilon:"ϵ",straightphi:"ϕ",strns:"¯",sub:"⊂",Sub:"⋐",subdot:"⪽",subE:"⫅",sube:"⊆",subedot:"⫃",submult:"⫁",subnE:"⫋",subne:"⊊",subplus:"⪿",subrarr:"⥹",subset:"⊂",Subset:"⋐",subseteq:"⊆",subseteqq:"⫅",SubsetEqual:"⊆",subsetneq:"⊊",subsetneqq:"⫋",subsim:"⫇",subsub:"⫕",subsup:"⫓",succapprox:"⪸",succ:"≻",succcurlyeq:"≽",Succeeds:"≻",SucceedsEqual:"⪰",SucceedsSlantEqual:"≽",SucceedsTilde:"≿",succeq:"⪰",succnapprox:"⪺",succneqq:"⪶",succnsim:"⋩",succsim:"≿",SuchThat:"∋",sum:"∑",Sum:"∑",sung:"♪",sup1:"¹",sup2:"²",sup3:"³",sup:"⊃",Sup:"⋑",supdot:"⪾",supdsub:"⫘",supE:"⫆",supe:"⊇",supedot:"⫄",Superset:"⊃",SupersetEqual:"⊇",suphsol:"⟉",suphsub:"⫗",suplarr:"⥻",supmult:"⫂",supnE:"⫌",supne:"⊋",supplus:"⫀",supset:"⊃",Supset:"⋑",supseteq:"⊇",supseteqq:"⫆",supsetneq:"⊋",supsetneqq:"⫌",supsim:"⫈",supsub:"⫔",supsup:"⫖",swarhk:"⤦",swarr:"↙",swArr:"⇙",swarrow:"↙",swnwar:"⤪",szlig:"ß",Tab:"\t",target:"⌖",Tau:"Τ",tau:"τ",tbrk:"⎴",Tcaron:"Ť",tcaron:"ť",Tcedil:"Ţ",tcedil:"ţ",Tcy:"Т",tcy:"т",tdot:"⃛",telrec:"⌕",Tfr:"𝔗",tfr:"𝔱",there4:"∴",therefore:"∴",Therefore:"∴",Theta:"Θ",theta:"θ",thetasym:"ϑ",thetav:"ϑ",thickapprox:"≈",thicksim:"∼",ThickSpace:"  ",ThinSpace:" ",thinsp:" ",thkap:"≈",thksim:"∼",THORN:"Þ",thorn:"þ",tilde:"˜",Tilde:"∼",TildeEqual:"≃",TildeFullEqual:"≅",TildeTilde:"≈",timesbar:"⨱",timesb:"⊠",times:"×",timesd:"⨰",tint:"∭",toea:"⤨",topbot:"⌶",topcir:"⫱",top:"⊤",Topf:"𝕋",topf:"𝕥",topfork:"⫚",tosa:"⤩",tprime:"‴",trade:"™",TRADE:"™",triangle:"▵",triangledown:"▿",triangleleft:"◃",trianglelefteq:"⊴",triangleq:"≜",triangleright:"▹",trianglerighteq:"⊵",tridot:"◬",trie:"≜",triminus:"⨺",TripleDot:"⃛",triplus:"⨹",trisb:"⧍",tritime:"⨻",trpezium:"⏢",Tscr:"𝒯",tscr:"𝓉",TScy:"Ц",tscy:"ц",TSHcy:"Ћ",tshcy:"ћ",Tstrok:"Ŧ",tstrok:"ŧ",twixt:"≬",twoheadleftarrow:"↞",twoheadrightarrow:"↠",Uacute:"Ú",uacute:"ú",uarr:"↑",Uarr:"↟",uArr:"⇑",Uarrocir:"⥉",Ubrcy:"Ў",ubrcy:"ў",Ubreve:"Ŭ",ubreve:"ŭ",Ucirc:"Û",ucirc:"û",Ucy:"У",ucy:"у",udarr:"⇅",Udblac:"Ű",udblac:"ű",udhar:"⥮",ufisht:"⥾",Ufr:"𝔘",ufr:"𝔲",Ugrave:"Ù",ugrave:"ù",uHar:"⥣",uharl:"↿",uharr:"↾",uhblk:"▀",ulcorn:"⌜",ulcorner:"⌜",ulcrop:"⌏",ultri:"◸",Umacr:"Ū",umacr:"ū",uml:"¨",UnderBar:"_",UnderBrace:"⏟",UnderBracket:"⎵",UnderParenthesis:"⏝",Union:"⋃",UnionPlus:"⊎",Uogon:"Ų",uogon:"ų",Uopf:"𝕌",uopf:"𝕦",UpArrowBar:"⤒",uparrow:"↑",UpArrow:"↑",Uparrow:"⇑",UpArrowDownArrow:"⇅",updownarrow:"↕",UpDownArrow:"↕",Updownarrow:"⇕",UpEquilibrium:"⥮",upharpoonleft:"↿",upharpoonright:"↾",uplus:"⊎",UpperLeftArrow:"↖",UpperRightArrow:"↗",upsi:"υ",Upsi:"ϒ",upsih:"ϒ",Upsilon:"Υ",upsilon:"υ",UpTeeArrow:"↥",UpTee:"⊥",upuparrows:"⇈",urcorn:"⌝",urcorner:"⌝",urcrop:"⌎",Uring:"Ů",uring:"ů",urtri:"◹",Uscr:"𝒰",uscr:"𝓊",utdot:"⋰",Utilde:"Ũ",utilde:"ũ",utri:"▵",utrif:"▴",uuarr:"⇈",Uuml:"Ü",uuml:"ü",uwangle:"⦧",vangrt:"⦜",varepsilon:"ϵ",varkappa:"ϰ",varnothing:"∅",varphi:"ϕ",varpi:"ϖ",varpropto:"∝",varr:"↕",vArr:"⇕",varrho:"ϱ",varsigma:"ς",varsubsetneq:"⊊︀",varsubsetneqq:"⫋︀",varsupsetneq:"⊋︀",varsupsetneqq:"⫌︀",vartheta:"ϑ",vartriangleleft:"⊲",vartriangleright:"⊳",vBar:"⫨",Vbar:"⫫",vBarv:"⫩",Vcy:"В",vcy:"в",vdash:"⊢",vDash:"⊨",Vdash:"⊩",VDash:"⊫",Vdashl:"⫦",veebar:"⊻",vee:"∨",Vee:"⋁",veeeq:"≚",vellip:"⋮",verbar:"|",Verbar:"‖",vert:"|",Vert:"‖",VerticalBar:"∣",VerticalLine:"|",VerticalSeparator:"❘",VerticalTilde:"≀",VeryThinSpace:" ",Vfr:"𝔙",vfr:"𝔳",vltri:"⊲",vnsub:"⊂⃒",vnsup:"⊃⃒",Vopf:"𝕍",vopf:"𝕧",vprop:"∝",vrtri:"⊳",Vscr:"𝒱",vscr:"𝓋",vsubnE:"⫋︀",vsubne:"⊊︀",vsupnE:"⫌︀",vsupne:"⊋︀",Vvdash:"⊪",vzigzag:"⦚",Wcirc:"Ŵ",wcirc:"ŵ",wedbar:"⩟",wedge:"∧",Wedge:"⋀",wedgeq:"≙",weierp:"℘",Wfr:"𝔚",wfr:"𝔴",Wopf:"𝕎",wopf:"𝕨",wp:"℘",wr:"≀",wreath:"≀",Wscr:"𝒲",wscr:"𝓌",xcap:"⋂",xcirc:"◯",xcup:"⋃",xdtri:"▽",Xfr:"𝔛",xfr:"𝔵",xharr:"⟷",xhArr:"⟺",Xi:"Ξ",xi:"ξ",xlarr:"⟵",xlArr:"⟸",xmap:"⟼",xnis:"⋻",xodot:"⨀",Xopf:"𝕏",xopf:"𝕩",xoplus:"⨁",xotime:"⨂",xrarr:"⟶",xrArr:"⟹",Xscr:"𝒳",xscr:"𝓍",xsqcup:"⨆",xuplus:"⨄",xutri:"△",xvee:"⋁",xwedge:"⋀",Yacute:"Ý",yacute:"ý",YAcy:"Я",yacy:"я",Ycirc:"Ŷ",ycirc:"ŷ",Ycy:"Ы",ycy:"ы",yen:"¥",Yfr:"𝔜",yfr:"𝔶",YIcy:"Ї",yicy:"ї",Yopf:"𝕐",yopf:"𝕪",Yscr:"𝒴",yscr:"𝓎",YUcy:"Ю",yucy:"ю",yuml:"ÿ",Yuml:"Ÿ",Zacute:"Ź",zacute:"ź",Zcaron:"Ž",zcaron:"ž",Zcy:"З",zcy:"з",Zdot:"Ż",zdot:"ż",zeetrf:"ℨ",ZeroWidthSpace:"​",Zeta:"Ζ",zeta:"ζ",zfr:"𝔷",Zfr:"ℨ",ZHcy:"Ж",zhcy:"ж",zigrarr:"⇝",zopf:"𝕫",Zopf:"ℤ",Zscr:"𝒵",zscr:"𝓏",zwj:"‍",zwnj:"‌"};},{}],53:[function(e,r,t){function n(e){var r=Array.prototype.slice.call(arguments,1);return r.forEach(function(r){r&&Object.keys(r).forEach(function(t){e[t]=r[t];});}),e}function o(e){return Object.prototype.toString.call(e)}function s(e){return "[object Function]"===o(e)}function i(e){return e.replace(/[.?*+^$[\]\\(){}|-]/g,"\\$&")}var a={fuzzyLink:!0,fuzzyEmail:!0,fuzzyIP:!1},l={"http:":{validate:function(e,r,t){var n=e.slice(r);return t.re.http||(t.re.http=new RegExp("^\\/\\/"+t.re.src_auth+t.re.src_host_port_strict+t.re.src_path,"i")),t.re.http.test(n)?n.match(t.re.http)[0].length:0}},"https:":"http:","ftp:":"http:","//":{validate:function(e,r,t){var n=e.slice(r);return t.re.no_http||(t.re.no_http=new RegExp("^"+t.re.src_auth+"(?:localhost|(?:(?:"+t.re.src_domain+")\\.)+"+t.re.src_domain_root+")"+t.re.src_port+t.re.src_host_terminator+t.re.src_path,"i")),t.re.no_http.test(n)?r>=3&&":"===e[r-3]?0:r>=3&&"/"===e[r-3]?0:n.match(t.re.no_http)[0].length:0}},"mailto:":{validate:function(e,r,t){var n=e.slice(r);return t.re.mailto||(t.re.mailto=new RegExp("^"+t.re.src_email_name+"@"+t.re.src_host_strict,"i")),t.re.mailto.test(n)?n.match(t.re.mailto)[0].length:0}}},c="a[cdefgilmnoqrstuwxz]|b[abdefghijmnorstvwyz]|c[acdfghiklmnoruvwxyz]|d[ejkmoz]|e[cegrstu]|f[ijkmor]|g[abdefghilmnpqrstuwy]|h[kmnrtu]|i[delmnoqrst]|j[emop]|k[eghimnprwyz]|l[abcikrstuvy]|m[acdeghklmnopqrstuvwxyz]|n[acefgilopruz]|om|p[aefghklmnrstwy]|qa|r[eosuw]|s[abcdeghijklmnortuvxyz]|t[cdfghjklmnortvwz]|u[agksyz]|v[aceginu]|w[fs]|y[et]|z[amw]",u="biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|рф".split("|");function p(r){var t=r.re=e("./lib/re")(r.__opts__),n=r.__tlds__.slice();function a(e){return e.replace("%TLDS%",t.src_tlds)}r.onCompile(),r.__tlds_replaced__||n.push(c),n.push(t.src_xn),t.src_tlds=n.join("|"),t.email_fuzzy=RegExp(a(t.tpl_email_fuzzy),"i"),t.link_fuzzy=RegExp(a(t.tpl_link_fuzzy),"i"),t.link_no_ip_fuzzy=RegExp(a(t.tpl_link_no_ip_fuzzy),"i"),t.host_fuzzy_test=RegExp(a(t.tpl_host_fuzzy_test),"i");var l=[];function u(e,r){throw new Error('(LinkifyIt) Invalid schema "'+e+'": '+r)}r.__compiled__={},Object.keys(r.__schemas__).forEach(function(e){var t=r.__schemas__[e];if(null!==t){var n,i={validate:null,link:null};if(r.__compiled__[e]=i,"[object Object]"===o(t))return function(e){return "[object RegExp]"===o(e)}(t.validate)?i.validate=(n=t.validate,function(e,r){var t=e.slice(r);return n.test(t)?t.match(n)[0].length:0}):s(t.validate)?i.validate=t.validate:u(e,t),void(s(t.normalize)?i.normalize=t.normalize:t.normalize?u(e,t):i.normalize=function(e,r){r.normalize(e);});!function(e){return "[object String]"===o(e)}(t)?u(e,t):l.push(e);}}),l.forEach(function(e){r.__compiled__[r.__schemas__[e]]&&(r.__compiled__[e].validate=r.__compiled__[r.__schemas__[e]].validate,r.__compiled__[e].normalize=r.__compiled__[r.__schemas__[e]].normalize);}),r.__compiled__[""]={validate:null,normalize:function(e,r){r.normalize(e);}};var p=Object.keys(r.__compiled__).filter(function(e){return e.length>0&&r.__compiled__[e]}).map(i).join("|");r.re.schema_test=RegExp("(^|(?!_)(?:[><｜]|"+t.src_ZPCc+"))("+p+")","i"),r.re.schema_search=RegExp("(^|(?!_)(?:[><｜]|"+t.src_ZPCc+"))("+p+")","ig"),r.re.pretest=RegExp("("+r.re.schema_test.source+")|("+r.re.host_fuzzy_test.source+")|@","i"),function(e){e.__index__=-1,e.__text_cache__="";}(r);}function h(e,r){var t=e.__index__,n=e.__last_index__,o=e.__text_cache__.slice(t,n);this.schema=e.__schema__.toLowerCase(),this.index=t+r,this.lastIndex=n+r,this.raw=o,this.text=o,this.url=o;}function f(e,r){var t=new h(e,r);return e.__compiled__[t.schema].normalize(t,e),t}function d(e,r){if(!(this instanceof d))return new d(e,r);var t;r||(t=e,Object.keys(t||{}).reduce(function(e,r){return e||a.hasOwnProperty(r)},!1)&&(r=e,e={})),this.__opts__=n({},a,r),this.__index__=-1,this.__last_index__=-1,this.__schema__="",this.__text_cache__="",this.__schemas__=n({},l,e),this.__compiled__={},this.__tlds__=u,this.__tlds_replaced__=!1,this.re={},p(this);}d.prototype.add=function(e,r){return this.__schemas__[e]=r,p(this),this},d.prototype.set=function(e){return this.__opts__=n(this.__opts__,e),this},d.prototype.test=function(e){if(this.__text_cache__=e,this.__index__=-1,!e.length)return !1;var r,t,n,o,s,i,a,l;if(this.re.schema_test.test(e))for((a=this.re.schema_search).lastIndex=0;null!==(r=a.exec(e));)if(o=this.testSchemaAt(e,r[2],a.lastIndex)){this.__schema__=r[2],this.__index__=r.index+r[1].length,this.__last_index__=r.index+r[0].length+o;break}return this.__opts__.fuzzyLink&&this.__compiled__["http:"]&&(l=e.search(this.re.host_fuzzy_test))>=0&&(this.__index__<0||l<this.__index__)&&null!==(t=e.match(this.__opts__.fuzzyIP?this.re.link_fuzzy:this.re.link_no_ip_fuzzy))&&(s=t.index+t[1].length,(this.__index__<0||s<this.__index__)&&(this.__schema__="",this.__index__=s,this.__last_index__=t.index+t[0].length)),this.__opts__.fuzzyEmail&&this.__compiled__["mailto:"]&&e.indexOf("@")>=0&&null!==(n=e.match(this.re.email_fuzzy))&&(s=n.index+n[1].length,i=n.index+n[0].length,(this.__index__<0||s<this.__index__||s===this.__index__&&i>this.__last_index__)&&(this.__schema__="mailto:",this.__index__=s,this.__last_index__=i)),this.__index__>=0},d.prototype.pretest=function(e){return this.re.pretest.test(e)},d.prototype.testSchemaAt=function(e,r,t){return this.__compiled__[r.toLowerCase()]?this.__compiled__[r.toLowerCase()].validate(e,t,this):0},d.prototype.match=function(e){var r=0,t=[];this.__index__>=0&&this.__text_cache__===e&&(t.push(f(this,r)),r=this.__last_index__);for(var n=r?e.slice(r):e;this.test(n);)t.push(f(this,r)),n=n.slice(this.__last_index__),r+=this.__last_index__;return t.length?t:null},d.prototype.tlds=function(e,r){return e=Array.isArray(e)?e:[e],r?(this.__tlds__=this.__tlds__.concat(e).sort().filter(function(e,r,t){return e!==t[r-1]}).reverse(),p(this),this):(this.__tlds__=e.slice(),this.__tlds_replaced__=!0,p(this),this)},d.prototype.normalize=function(e){e.schema||(e.url="http://"+e.url),"mailto:"!==e.schema||/^mailto:/i.test(e.url)||(e.url="mailto:"+e.url);},d.prototype.onCompile=function(){},r.exports=d;},{"./lib/re":54}],54:[function(e,r,t){r.exports=function(r){var t={};return t.src_Any=e("uc.micro/properties/Any/regex").source,t.src_Cc=e("uc.micro/categories/Cc/regex").source,t.src_Z=e("uc.micro/categories/Z/regex").source,t.src_P=e("uc.micro/categories/P/regex").source,t.src_ZPCc=[t.src_Z,t.src_P,t.src_Cc].join("|"),t.src_ZCc=[t.src_Z,t.src_Cc].join("|"),t.src_pseudo_letter="(?:(?![><｜]|"+t.src_ZPCc+")"+t.src_Any+")",t.src_ip4="(?:(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)",t.src_auth="(?:(?:(?!"+t.src_ZCc+"|[@/\\[\\]()]).)+@)?",t.src_port="(?::(?:6(?:[0-4]\\d{3}|5(?:[0-4]\\d{2}|5(?:[0-2]\\d|3[0-5])))|[1-5]?\\d{1,4}))?",t.src_host_terminator="(?=$|[><｜]|"+t.src_ZPCc+")(?!-|_|:\\d|\\.-|\\.(?!$|"+t.src_ZPCc+"))",t.src_path="(?:[/?#](?:(?!"+t.src_ZCc+"|[><｜]|[()[\\]{}.,\"'?!\\-]).|\\[(?:(?!"+t.src_ZCc+"|\\]).)*\\]|\\((?:(?!"+t.src_ZCc+"|[)]).)*\\)|\\{(?:(?!"+t.src_ZCc+'|[}]).)*\\}|\\"(?:(?!'+t.src_ZCc+'|["]).)+\\"|\\\'(?:(?!'+t.src_ZCc+"|[']).)+\\'|\\'(?="+t.src_pseudo_letter+"|[-]).|\\.{2,4}[a-zA-Z0-9%/]|\\.(?!"+t.src_ZCc+"|[.]).|"+(r&&r["---"]?"\\-(?!--(?:[^-]|$))(?:-*)|":"\\-+|")+"\\,(?!"+t.src_ZCc+").|\\!(?!"+t.src_ZCc+"|[!]).|\\?(?!"+t.src_ZCc+"|[?]).)+|\\/)?",t.src_email_name='[\\-;:&=\\+\\$,\\.a-zA-Z0-9_][\\-;:&=\\+\\$,\\"\\.a-zA-Z0-9_]*',t.src_xn="xn--[a-z0-9\\-]{1,59}",t.src_domain_root="(?:"+t.src_xn+"|"+t.src_pseudo_letter+"{1,63})",t.src_domain="(?:"+t.src_xn+"|(?:"+t.src_pseudo_letter+")|(?:"+t.src_pseudo_letter+"(?:-|"+t.src_pseudo_letter+"){0,61}"+t.src_pseudo_letter+"))",t.src_host="(?:(?:(?:(?:"+t.src_domain+")\\.)*"+t.src_domain+"))",t.tpl_host_fuzzy="(?:"+t.src_ip4+"|(?:(?:(?:"+t.src_domain+")\\.)+(?:%TLDS%)))",t.tpl_host_no_ip_fuzzy="(?:(?:(?:"+t.src_domain+")\\.)+(?:%TLDS%))",t.src_host_strict=t.src_host+t.src_host_terminator,t.tpl_host_fuzzy_strict=t.tpl_host_fuzzy+t.src_host_terminator,t.src_host_port_strict=t.src_host+t.src_port+t.src_host_terminator,t.tpl_host_port_fuzzy_strict=t.tpl_host_fuzzy+t.src_port+t.src_host_terminator,t.tpl_host_port_no_ip_fuzzy_strict=t.tpl_host_no_ip_fuzzy+t.src_port+t.src_host_terminator,t.tpl_host_fuzzy_test="localhost|www\\.|\\.\\d{1,3}\\.|(?:\\.(?:%TLDS%)(?:"+t.src_ZPCc+"|>|$))",t.tpl_email_fuzzy='(^|[><｜]|"|\\(|'+t.src_ZCc+")("+t.src_email_name+"@"+t.tpl_host_fuzzy_strict+")",t.tpl_link_fuzzy="(^|(?![.:/\\-_@])(?:[$+<=>^`|｜]|"+t.src_ZPCc+"))((?![$+<=>^`|｜])"+t.tpl_host_port_fuzzy_strict+t.src_path+")",t.tpl_link_no_ip_fuzzy="(^|(?![.:/\\-_@])(?:[$+<=>^`|｜]|"+t.src_ZPCc+"))((?![$+<=>^`|｜])"+t.tpl_host_port_no_ip_fuzzy_strict+t.src_path+")",t};},{"uc.micro/categories/Cc/regex":61,"uc.micro/categories/P/regex":63,"uc.micro/categories/Z/regex":64,"uc.micro/properties/Any/regex":66}],55:[function(e,r,t){var n={};function o(e,r){var t;return "string"!=typeof r&&(r=o.defaultChars),t=function(e){var r,t,o=n[e];if(o)return o;for(o=n[e]=[],r=0;r<128;r++)t=String.fromCharCode(r),o.push(t);for(r=0;r<e.length;r++)t=e.charCodeAt(r),o[t]="%"+("0"+t.toString(16).toUpperCase()).slice(-2);return o}(r),e.replace(/(%[a-f0-9]{2})+/gi,function(e){var r,n,o,s,i,a,l,c="";for(r=0,n=e.length;r<n;r+=3)(o=parseInt(e.slice(r+1,r+3),16))<128?c+=t[o]:192==(224&o)&&r+3<n&&128==(192&(s=parseInt(e.slice(r+4,r+6),16)))?(c+=(l=o<<6&1984|63&s)<128?"��":String.fromCharCode(l),r+=3):224==(240&o)&&r+6<n&&(s=parseInt(e.slice(r+4,r+6),16),i=parseInt(e.slice(r+7,r+9),16),128==(192&s)&&128==(192&i))?(c+=(l=o<<12&61440|s<<6&4032|63&i)<2048||l>=55296&&l<=57343?"���":String.fromCharCode(l),r+=6):240==(248&o)&&r+9<n&&(s=parseInt(e.slice(r+4,r+6),16),i=parseInt(e.slice(r+7,r+9),16),a=parseInt(e.slice(r+10,r+12),16),128==(192&s)&&128==(192&i)&&128==(192&a))?((l=o<<18&1835008|s<<12&258048|i<<6&4032|63&a)<65536||l>1114111?c+="����":(l-=65536,c+=String.fromCharCode(55296+(l>>10),56320+(1023&l))),r+=9):c+="�";return c})}o.defaultChars=";/?:@&=+$,#",o.componentChars="",r.exports=o;},{}],56:[function(e,r,t){var n={};function o(e,r,t){var s,i,a,l,c,u="";for("string"!=typeof r&&(t=r,r=o.defaultChars),void 0===t&&(t=!0),c=function(e){var r,t,o=n[e];if(o)return o;for(o=n[e]=[],r=0;r<128;r++)t=String.fromCharCode(r),/^[0-9a-z]$/i.test(t)?o.push(t):o.push("%"+("0"+r.toString(16).toUpperCase()).slice(-2));for(r=0;r<e.length;r++)o[e.charCodeAt(r)]=e[r];return o}(r),s=0,i=e.length;s<i;s++)if(a=e.charCodeAt(s),t&&37===a&&s+2<i&&/^[0-9a-f]{2}$/i.test(e.slice(s+1,s+3)))u+=e.slice(s,s+3),s+=2;else if(a<128)u+=c[a];else if(a>=55296&&a<=57343){if(a>=55296&&a<=56319&&s+1<i&&(l=e.charCodeAt(s+1))>=56320&&l<=57343){u+=encodeURIComponent(e[s]+e[s+1]),s++;continue}u+="%EF%BF%BD";}else u+=encodeURIComponent(e[s]);return u}o.defaultChars=";/?:@&=+$,-_.!~*'()#",o.componentChars="-_.!~*'()",r.exports=o;},{}],57:[function(e,r,t){r.exports=function(e){var r="";return r+=e.protocol||"",r+=e.slashes?"//":"",r+=e.auth?e.auth+"@":"",e.hostname&&-1!==e.hostname.indexOf(":")?r+="["+e.hostname+"]":r+=e.hostname||"",r+=e.port?":"+e.port:"",r+=e.pathname||"",r+=e.search||"",r+=e.hash||""};},{}],58:[function(e,r,t){r.exports.encode=e("./encode"),r.exports.decode=e("./decode"),r.exports.format=e("./format"),r.exports.parse=e("./parse");},{"./decode":55,"./encode":56,"./format":57,"./parse":59}],59:[function(e,r,t){function n(){this.protocol=null,this.slashes=null,this.auth=null,this.port=null,this.hostname=null,this.hash=null,this.search=null,this.pathname=null;}var o=/^([a-z0-9.+-]+:)/i,s=/:[0-9]*$/,i=/^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,a=["{","}","|","\\","^","`"].concat(["<",">",'"',"`"," ","\r","\n","\t"]),l=["'"].concat(a),c=["%","/","?",";","#"].concat(l),u=["/","?","#"],p=/^[+a-z0-9A-Z_-]{0,63}$/,h=/^([+a-z0-9A-Z_-]{0,63})(.*)$/,f={javascript:!0,"javascript:":!0},d={http:!0,https:!0,ftp:!0,gopher:!0,file:!0,"http:":!0,"https:":!0,"ftp:":!0,"gopher:":!0,"file:":!0};n.prototype.parse=function(e,r){var t,n,s,a,l,m=e;if(m=m.trim(),!r&&1===e.split("#").length){var _=i.exec(m);if(_)return this.pathname=_[1],_[2]&&(this.search=_[2]),this}var g=o.exec(m);if(g&&(g=g[0],s=g.toLowerCase(),this.protocol=g,m=m.substr(g.length)),(r||g||m.match(/^\/\/[^@\/]+@[^@\/]+/))&&(!(l="//"===m.substr(0,2))||g&&f[g]||(m=m.substr(2),this.slashes=!0)),!f[g]&&(l||g&&!d[g])){var k,b,v=-1;for(t=0;t<u.length;t++)-1!==(a=m.indexOf(u[t]))&&(-1===v||a<v)&&(v=a);for(-1!==(b=-1===v?m.lastIndexOf("@"):m.lastIndexOf("@",v))&&(k=m.slice(0,b),m=m.slice(b+1),this.auth=k),v=-1,t=0;t<c.length;t++)-1!==(a=m.indexOf(c[t]))&&(-1===v||a<v)&&(v=a);-1===v&&(v=m.length),":"===m[v-1]&&v--;var y=m.slice(0,v);m=m.slice(v),this.parseHost(y),this.hostname=this.hostname||"";var x="["===this.hostname[0]&&"]"===this.hostname[this.hostname.length-1];if(!x){var C=this.hostname.split(/\./);for(t=0,n=C.length;t<n;t++){var A=C[t];if(A&&!A.match(p)){for(var w="",D=0,E=A.length;D<E;D++)A.charCodeAt(D)>127?w+="x":w+=A[D];if(!w.match(p)){var q=C.slice(0,t),F=C.slice(t+1),S=A.match(h);S&&(q.push(S[1]),F.unshift(S[2])),F.length&&(m=F.join(".")+m),this.hostname=q.join(".");break}}}}this.hostname.length>255&&(this.hostname=""),x&&(this.hostname=this.hostname.substr(1,this.hostname.length-2));}var L=m.indexOf("#");-1!==L&&(this.hash=m.substr(L),m=m.slice(0,L));var z=m.indexOf("?");return -1!==z&&(this.search=m.substr(z),m=m.slice(0,z)),m&&(this.pathname=m),d[s]&&this.hostname&&!this.pathname&&(this.pathname=""),this},n.prototype.parseHost=function(e){var r=s.exec(e);r&&(":"!==(r=r[0])&&(this.port=r.substr(1)),e=e.substr(0,e.length-r.length)),e&&(this.hostname=e);},r.exports=function(e,r){if(e&&e instanceof n)return e;var t=new n;return t.parse(e,r),t};},{}],60:[function(r,t,n){(function(e){!function(r){var o="object"==typeof n&&n&&!n.nodeType&&n,s="object"==typeof t&&t&&!t.nodeType&&t,i="object"==typeof e&&e;i.global!==i&&i.window!==i&&i.self!==i||(r=i);var a,l,c=2147483647,u=36,p=1,h=26,f=38,d=700,m=72,_=128,g="-",k=/^xn--/,b=/[^\x20-\x7E]/,v=/[\x2E\u3002\uFF0E\uFF61]/g,y={overflow:"Overflow: input needs wider integers to process","not-basic":"Illegal input >= 0x80 (not a basic code point)","invalid-input":"Invalid input"},x=u-p,C=Math.floor,A=String.fromCharCode;function w(e){throw new RangeError(y[e])}function D(e,r){for(var t=e.length,n=[];t--;)n[t]=r(e[t]);return n}function E(e,r){var t=e.split("@"),n="";t.length>1&&(n=t[0]+"@",e=t[1]);var o=(e=e.replace(v,".")).split("."),s=D(o,r).join(".");return n+s}function q(e){for(var r,t,n=[],o=0,s=e.length;o<s;)(r=e.charCodeAt(o++))>=55296&&r<=56319&&o<s?56320==(64512&(t=e.charCodeAt(o++)))?n.push(((1023&r)<<10)+(1023&t)+65536):(n.push(r),o--):n.push(r);return n}function F(e){return D(e,function(e){var r="";return e>65535&&(r+=A((e-=65536)>>>10&1023|55296),e=56320|1023&e),r+=A(e)}).join("")}function S(e,r){return e+22+75*(e<26)-((0!=r)<<5)}function L(e,r,t){var n=0;for(e=t?C(e/d):e>>1,e+=C(e/r);e>x*h>>1;n+=u)e=C(e/x);return C(n+(x+1)*e/(e+f))}function z(e){var r,t,n,o,s,i,a,l,f,d,k,b=[],v=e.length,y=0,x=_,A=m;for((t=e.lastIndexOf(g))<0&&(t=0),n=0;n<t;++n)e.charCodeAt(n)>=128&&w("not-basic"),b.push(e.charCodeAt(n));for(o=t>0?t+1:0;o<v;){for(s=y,i=1,a=u;o>=v&&w("invalid-input"),k=e.charCodeAt(o++),((l=k-48<10?k-22:k-65<26?k-65:k-97<26?k-97:u)>=u||l>C((c-y)/i))&&w("overflow"),y+=l*i,!(l<(f=a<=A?p:a>=A+h?h:a-A));a+=u)i>C(c/(d=u-f))&&w("overflow"),i*=d;r=b.length+1,A=L(y-s,r,0==s),C(y/r)>c-x&&w("overflow"),x+=C(y/r),y%=r,b.splice(y++,0,x);}return F(b)}function T(e){var r,t,n,o,s,i,a,l,f,d,k,b,v,y,x,D=[];for(e=q(e),b=e.length,r=_,t=0,s=m,i=0;i<b;++i)(k=e[i])<128&&D.push(A(k));for(n=o=D.length,o&&D.push(g);n<b;){for(a=c,i=0;i<b;++i)(k=e[i])>=r&&k<a&&(a=k);for(a-r>C((c-t)/(v=n+1))&&w("overflow"),t+=(a-r)*v,r=a,i=0;i<b;++i)if((k=e[i])<r&&++t>c&&w("overflow"),k==r){for(l=t,f=u;!(l<(d=f<=s?p:f>=s+h?h:f-s));f+=u)x=l-d,y=u-d,D.push(A(S(d+x%y,0))),l=C(x/y);D.push(A(S(l,0))),s=L(t,v,n==o),t=0,++n;}++t,++r;}return D.join("")}if(a={version:"1.4.1",ucs2:{decode:q,encode:F},decode:z,encode:T,toASCII:function(e){return E(e,function(e){return b.test(e)?"xn--"+T(e):e})},toUnicode:function(e){return E(e,function(e){return k.test(e)?z(e.slice(4).toLowerCase()):e})}},o&&s)if(t.exports==o)s.exports=a;else for(l in a)a.hasOwnProperty(l)&&(o[l]=a[l]);else r.punycode=a;}(this);}).call(this,void 0!==e?e:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{});},{}],61:[function(e,r,t){r.exports=/[\0-\x1F\x7F-\x9F]/;},{}],62:[function(e,r,t){r.exports=/[\xAD\u0600-\u0605\u061C\u06DD\u070F\u08E2\u180E\u200B-\u200F\u202A-\u202E\u2060-\u2064\u2066-\u206F\uFEFF\uFFF9-\uFFFB]|\uD804[\uDCBD\uDCCD]|\uD82F[\uDCA0-\uDCA3]|\uD834[\uDD73-\uDD7A]|\uDB40[\uDC01\uDC20-\uDC7F]/;},{}],63:[function(e,r,t){r.exports=/[!-#%-\*,-\/:;\?@\[-\]_\{\}\xA1\xA7\xAB\xB6\xB7\xBB\xBF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166D\u166E\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2010-\u2027\u2030-\u2043\u2045-\u2051\u2053-\u205E\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4E\u3001-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]|\uD800[\uDD00-\uDD02\uDF9F\uDFD0]|\uD801\uDD6F|\uD802[\uDC57\uDD1F\uDD3F\uDE50-\uDE58\uDE7F\uDEF0-\uDEF6\uDF39-\uDF3F\uDF99-\uDF9C]|\uD803[\uDF55-\uDF59]|\uD804[\uDC47-\uDC4D\uDCBB\uDCBC\uDCBE-\uDCC1\uDD40-\uDD43\uDD74\uDD75\uDDC5-\uDDC8\uDDCD\uDDDB\uDDDD-\uDDDF\uDE38-\uDE3D\uDEA9]|\uD805[\uDC4B-\uDC4F\uDC5B\uDC5D\uDCC6\uDDC1-\uDDD7\uDE41-\uDE43\uDE60-\uDE6C\uDF3C-\uDF3E]|\uD806[\uDC3B\uDE3F-\uDE46\uDE9A-\uDE9C\uDE9E-\uDEA2]|\uD807[\uDC41-\uDC45\uDC70\uDC71\uDEF7\uDEF8]|\uD809[\uDC70-\uDC74]|\uD81A[\uDE6E\uDE6F\uDEF5\uDF37-\uDF3B\uDF44]|\uD81B[\uDE97-\uDE9A]|\uD82F\uDC9F|\uD836[\uDE87-\uDE8B]|\uD83A[\uDD5E\uDD5F]/;},{}],64:[function(e,r,t){r.exports=/[ \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000]/;},{}],65:[function(e,r,t){t.Any=e("./properties/Any/regex"),t.Cc=e("./categories/Cc/regex"),t.Cf=e("./categories/Cf/regex"),t.P=e("./categories/P/regex"),t.Z=e("./categories/Z/regex");},{"./categories/Cc/regex":61,"./categories/Cf/regex":62,"./categories/P/regex":63,"./categories/Z/regex":64,"./properties/Any/regex":66}],66:[function(e,r,t){r.exports=/[\0-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/;},{}],67:[function(e,r,t){r.exports=e("./lib/");},{"./lib/":9}]},{},[67])(67);}(t={exports:{}},t.exports),t.exports);function o(e,r){var t,n,o,s,i=e.pos,a=e.src.charCodeAt(i);if(r)return !1;if(43!==a)return !1;if(o=(n=e.scanDelims(e.pos,!0)).length,s=String.fromCharCode(a),o<2)return !1;for(o%2&&(e.push("text","",0).content=s,o--),t=0;t<o;t+=2)e.push("text","",0).content=s+s,e.delimiters.push({marker:a,jump:t,token:e.tokens.length-1,level:e.level,end:-1,open:n.can_open,close:n.can_close});return e.pos+=n.length,!0}function s(e){var r,t,n,o,s,i=[],a=e.delimiters,l=e.delimiters.length;for(r=0;r<l;r++)43===(n=a[r]).marker&&-1!==n.end&&(o=a[n.end],(s=e.tokens[n.token]).type="u_open",s.tag="u",s.nesting=1,s.markup="++",s.content="",(s=e.tokens[o.token]).type="u_close",s.tag="u",s.nesting=-1,s.markup="++",s.content="","text"===e.tokens[o.token-1].type&&"+"===e.tokens[o.token-1].content&&i.push(o.token-1));for(;i.length;){for(t=(r=i.pop())+1;t<e.tokens.length&&"u_close"===e.tokens[t].type;)t++;r!==--t&&(s=e.tokens[t],e.tokens[t]=e.tokens[r],e.tokens[r]=s);}}var i=function(e){e.inline.ruler.after("emphasis","underline",o),e.inline.ruler2.after("emphasis","underline",s);};return new(function(){function e(){this._md=n("commonmark"),this._md.use(i);}return e.prototype.toHTML=function(e){return this._md.render(e)},e}())});
  });

  /** @module DOM */

  /* global HTMLElement, HTMLDocument, Window, Element */
  var document$1 = window.document;
  /**
   * Static interface for interacting with the DOM API.
   * @namespace
   */

  var DOM =
  /*#__PURE__*/
  function () {
    function DOM() {
      _classCallCheck(this, DOM);
    }

    _createClass(DOM, null, [{
      key: "setup",
      value: function setup(d, p) {
        document$1 = d;
      }
      /**
       * create a HTMLElement from and HTML string
       * @param {string} html The HTML to parse to a DOM node.
       * @return {HTMLElement}
       */

    }, {
      key: "create",
      value: function create(html) {
        if ('createRange' in document$1) {
          // prefer this implementation as it has wider browser support
          // and it's better performing.
          // see https://davidwalsh.name/convert-html-stings-dom-nodes
          var container = document$1.createElement('div');
          var frag = document$1.createRange().createContextualFragment(html);
          container.appendChild(frag);
          return container;
        } // fallback to this because of a bug in jsdom that causes tests to fail
        // see: https://github.com/jsdom/jsdom/issues/399


        return new DOMParser().parseFromString(html, 'text/html').body;
      }
      /**
       * query the DOM for a given css selector
       * @param {HTMLElement} parent Optional context to use for a search. Defaults to document if not provided.
       * @param {string} selector the CSS selector to query for
       *
       * @returns {HTMLElement} the FIRST node it finds, if any
       */

    }, {
      key: "query",
      value: function query(parent, selector) {
        // Facade, shifting the selector to the parent argument if only one
        // argument is provided
        if (selector === undefined) {
          selector = parent;
          parent = document$1;
        }

        if (selector instanceof HTMLElement || selector instanceof Window || selector instanceof HTMLDocument) {
          return selector;
        }

        return parent.querySelector(selector);
      }
      /**
       * query the DOM for a given css selector
       * @param {HTMLElement} parent Optional context to use for a search. Defaults to document if not provided.
       * @param {string} selector the CSS selector to query for
       *
       * @returns {Array} the FIRST node it finds, if any
       */

    }, {
      key: "queryAll",
      value: function queryAll(parent, selector) {
        // Facade, shifting the selector to the parent argument if only one
        // argument is provided
        if (selector === undefined) {
          selector = parent;
          parent = document$1;
        } // handle the case where client code is using a pointer to a dom node and it's null, e.g. this._container


        if (parent == null) {
          parent = document$1;
        }

        if (selector instanceof HTMLElement || selector instanceof HTMLDocument || selector instanceof Window) {
          return [selector];
        }

        return Array.from(parent.querySelectorAll(selector));
      }
    }, {
      key: "onReady",
      value: function onReady(cb) {
        if (document$1.readyState === 'complete' || document$1.readyState === 'loaded' || document$1.readyState === 'interactive') {
          cb();
          return;
        }

        DOM.on(document$1, 'DOMContentLoaded', cb);
      }
      /**
       * createEle will create a {HTMLElement} and apply the properties attributes through an object provided.
       * @param {string} el The element `tag` name to construct
       * @param {Object} opts_data Optional attributes to apply to the new HTMLElement
       */

    }, {
      key: "createEl",
      value: function createEl(el) {
        var opts_data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var node = document$1.createElement(el);
        var props = Object.keys(opts_data);

        for (var i = 0; i < props.length; i++) {
          if (props[i] === 'class') {
            DOM.addClass(node, opts_data[props[i]]);
            continue;
          }

          node[props[i]] = opts_data[props[i]];
        }

        return node;
      }
    }, {
      key: "append",
      value: function append(parent, node) {
        if (node === undefined) {
          node = parent;
          parent = document$1;
        }

        if (typeof parent === 'string') {
          parent = DOM.query(parent);
        } // Support HTML injection as well as HTMLElement appends


        if (typeof node === 'string') {
          parent.insertAdjacentHTML('afterBegin', node);
        } else {
          parent.appendChild(node);
        }
      }
    }, {
      key: "addClass",
      value: function addClass(node, className) {
        if (!node) {
          return;
        }

        var classes = className.split(',');
        var len = classes.length;

        for (var i = 0; i < len; i++) {
          node.classList.add(classes[i]);
        }
      }
    }, {
      key: "empty",
      value: function empty(parent) {
        parent.innerHTML = '';
      }
    }, {
      key: "css",
      value: function css(selector, styles) {
        var node = DOM.query(selector);

        for (var prop in styles) {
          node.style[prop] = styles[prop];
        }
      }
    }, {
      key: "attr",
      value: function attr(selector, _attr, val) {
        DOM.query(selector).setAttribute(_attr, val);
      }
    }, {
      key: "attributes",
      value: function attributes(selector, attrs) {
        var _this = this;

        Object.entries(attrs).forEach(function (_ref) {
          var _ref2 = _slicedToArray(_ref, 2),
              attr = _ref2[0],
              val = _ref2[1];

          return _this.attr(selector, attr, val);
        });
      }
    }, {
      key: "trigger",
      value: function trigger(selector, event, settings) {
        var e = DOM._customEvent(event, settings);

        DOM.query(selector).dispatchEvent(e);
      } // TODO (agrow) investigate removing this
      // Event constructor polyfill

    }, {
      key: "_customEvent",
      value: function _customEvent(event, settings) {
        var _settings = _objectSpread({
          bubbles: true,
          cancelable: true,
          detail: null
        }, settings);

        var evt = document$1.createEvent('CustomEvent');
        evt.initCustomEvent(event, _settings.bubbles, _settings.cancelable, _settings.detail);
        return evt;
      }
    }, {
      key: "on",
      value: function on(selector, evt, handler) {
        DOM.query(selector).addEventListener(evt, handler);
      }
    }, {
      key: "once",
      value: function once(selector, evt, handler) {
        DOM.query(selector).addEventListener(evt, handler, {
          once: true
        });
      }
    }, {
      key: "off",
      value: function off(selector, evt, handler) {
        DOM.query(selector).removeEventListener(evt, handler);
      }
    }, {
      key: "delegate",
      value: function delegate(ctxt, selector, evt, handler) {
        var el = DOM.query(ctxt);
        el.addEventListener(evt, function (event) {
          var target = event.target;

          while (!target.isEqualNode(el)) {
            if (DOM.matches(target, selector)) {
              handler(event, target);
              break;
            }

            target = target.parentNode;
          }
        });
      } // TODO (agrow) investigate removing this
      // Element.matches polyfill

    }, {
      key: "matches",
      value: function matches(element, potentialMatch) {
        if (Element.prototype.matches) {
          return element.matches(potentialMatch);
        }

        if (Element.prototype.msMatchesSelector) {
          return element.msMatchesSelector(potentialMatch);
        }

        if (Element.prototype.webkitMatchesSelector) {
          return element.webkitMatchesSelector(potentialMatch);
        }
      }
    }]);

    return DOM;
  }();

  /** @module SearchParams */

  /* global window */

  /**
   * SearchParams is a class to get the search params in a URL.
   * It is a replacement for URL.searchParams and URLSearchParams for browsers like IE11
   */
  var SearchParams =
  /*#__PURE__*/
  function () {
    function SearchParams(url) {
      _classCallCheck(this, SearchParams);

      /**
       * Mapping of all query parameters in the given url, query param -> value
       * Only used if URLSearchParams does not exist in the window
       * @type {Object}
       * @private
       */
      this._params = {};

      if (window && window.URLSearchParams) {
        return new URLSearchParams(url);
      } else {
        this._params = this.parse(url);
      }
    }
    /**
     * parse creates a mapping of all query params in a given url
     * The query param values are decoded before being put in the map
     * Three types of input are supported
     *   (1) full URL e.g. http://www.yext.com/?q=hello
     *   (2) params with ? e.g. ?q=hello
     *   (1) params without ? e.g. q=hello
     * @param {string} url The url
     * @returns {Object} mapping from query param -> value where value is '' if no value is provided
     */


    _createClass(SearchParams, [{
      key: "parse",
      value: function parse(url) {
        var params = {};
        var search = url;

        if (search === '') {
          return params;
        } // Normalize all url inputs to string of query params separated by &


        if (url.indexOf('?') > -1) {
          search = url.slice(url.indexOf('?') + 1);
        }

        var encodedParams = search.split('&');

        for (var i = 0; i < encodedParams.length; i++) {
          var keyVal = encodedParams[i].split('=');

          if (keyVal.length > 1) {
            params[keyVal[0]] = SearchParams.decode(keyVal[1]);
          } else {
            params[keyVal[0]] = '';
          }
        }

        return params;
      }
      /**
       * get returns the value of the given query param
       * @param {string} query the query param key to get the value of
       * @return {string} param value, null otherwise
       */

    }, {
      key: "get",
      value: function get(query) {
        if (typeof this._params[String(query)] === 'undefined') {
          return null;
        }

        return this._params[query];
      }
      /**
       * set changes the value of a given query param
       * @param {string} name the query param key
       * @param {string} value the value of the query param update with
       */

    }, {
      key: "set",
      value: function set(name, value) {
        this._params[String(name)] = String(value);
      }
      /**
       * has checks to see if the given query param key exists in the params object
       * @param {string} query the query param to check
       * @return {boolean} true if the query param is in the params object, false o/w
       */

    }, {
      key: "has",
      value: function has(query) {
        return query in this._params;
      }
      /**
       * delete removes the given query param and its associated value from the params object
       * @param {string} name the query param key
       */

    }, {
      key: "delete",
      value: function _delete(name) {
        delete this._params[String(name)];
      }
      /**
       * toString returns a url with all the query params in the params object (without a ?)
       * @return {string}
       */

    }, {
      key: "toString",
      value: function toString() {
        var string = [];

        for (var key in this._params) {
          string.push("".concat(key, "=").concat(SearchParams.encode(this._params[key])));
        }

        return string.join('&');
      }
    }, {
      key: "entries",
      value: function entries() {
        var entries = [];

        for (var key in this._params) {
          entries.push([key, this._params[key]]);
        }

        return entries;
      }
      /**
       * decode returns the decoded representation of the given string
       * @param {string} string the string to decode
       * @return {string}
       */

    }], [{
      key: "decode",
      value: function decode(string) {
        return decodeURIComponent(string.replace(/[ +]/g, '%20'));
      }
      /**
       * decode returns the encoded representation of the given string (e.g. + -> %2B)
       * @param {string} string the string to encode
       * @return {string}
       */

    }, {
      key: "encode",
      value: function encode(string) {
        var replace = {
          '!': '%21',
          "'": '%27',
          '(': '%28',
          ')': '%29',
          '%20': '+'
        };
        return encodeURIComponent(string).replace(/[!'()]|%20/g, function (match) {
          return replace[match];
        });
      }
    }]);

    return SearchParams;
  }();

  /** @module Renderer */

  /**
   * Renderer is an abstract class that all Renderers should extend and implement
   */
  var Renderer =
  /*#__PURE__*/
  function () {
    function Renderer() {
      _classCallCheck(this, Renderer);
    }

    _createClass(Renderer, [{
      key: "render",

      /**
       * render is a core method for all renderers.
       * All implementations should override this class
       * @param {string} template
       * @param {object} data
       */
      value: function render(template, data) {
        return template;
      }
    }, {
      key: "registerHelper",
      value: function registerHelper(name, cb) {}
    }, {
      key: "compile",
      value: function compile(template) {}
    }]);

    return Renderer;
  }();

  var SVGIcon =
  /*#__PURE__*/
  function () {
    /**
     * @param config
     * @param config.name
     * @param config.path
     * @param config.complexContents
     * @param config.viewBox
     * @constructor
     */
    function SVGIcon(config) {
      _classCallCheck(this, SVGIcon);

      /**
       * the name of the icon
       */
      this.name = config.name;
      /**
       * an svg path definition
       */

      this.path = config.path;
      /**
       * if not using a path, a the markup for a complex SVG
       */

      this.complexContents = config.complexContents;
      /**
       * the view box definition, defaults to 24x24
       * @type {string}
       */

      this.viewBox = config.viewBox || '0 0 24 24';
      /**
       * actual contents used
       */

      this.contents = this.pathDefinition();
    }

    _createClass(SVGIcon, [{
      key: "pathDefinition",
      value: function pathDefinition() {
        if (this.complexContents) {
          return this.complexContents;
        }

        return "<path d=\"".concat(this.path, "\"></path>");
      }
    }, {
      key: "parseContents",
      value: function parseContents(complexContentsParams) {
        var contents = this.contents;

        if (typeof contents === 'function') {
          contents = contents(complexContentsParams);
        }

        return "<svg viewBox=\"".concat(this.viewBox, "\" xmlns=\"http://www.w3.org/2000/svg\">").concat(contents, "</svg>");
      }
      /**
       * returns the svg markup
       */

    }, {
      key: "markup",
      value: function markup() {
        var _this = this;

        if (typeof this.contents === 'function') {
          return function (complexContentsParams) {
            return _this.parseContents(complexContentsParams);
          };
        }

        return this.parseContents();
      }
    }]);

    return SVGIcon;
  }();

  var thumbIcon = new SVGIcon({
    name: 'thumb',
    viewBox: '0 0 24 22',
    path: 'M15.273 1H5.455c-.906 0-1.68.55-2.008 1.342L.153 10.097A2.19 2.19 0 000 10.9v2.2c0 1.21.982 2.2 2.182 2.2h6.883L8.03 20.327l-.033.352c0 .451.186.869.48 1.166L9.633 23l7.178-7.249a2.16 2.16 0 00.644-1.551v-11c0-1.21-.982-2.2-2.182-2.2zm0 13.2l-4.735 4.774L11.75 13.1H2.182v-2.2l3.273-7.7h9.818v11zM19.636 1H24v13.2h-4.364V1z'
  });

  var receiptIcon = new SVGIcon({
    name: 'receipt',
    path: 'M14.606 9.5c-.671-.515-1.591-.833-2.606-.833 1.015 0 1.935.318 2.606.833zm-7.985 0H1.655A1.66 1.66 0 010 7.833V3.667C0 2.747.741 2 1.655 2h20.69A1.66 1.66 0 0124 3.667v4.166A1.66 1.66 0 0122.345 9.5h-4.966V22H6.621V9.5h2.773H6.62zm10.758-1.667h4.966V3.667H1.655v4.166h4.966v-2.5h10.758v2.5z'
  });

  var pantheonIcon = new SVGIcon({
    name: 'pantheon',
    path: 'M9.947 16.598h.252V9.412h-.252a.432.432 0 01-.23-.065c-.07-.043-.106-.093-.106-.15L9.15 7.82v-.15c0-.044.028-.08.084-.109a.691.691 0 01.105-.086.254.254 0 01.146-.043H13.6c.056 0 .104.015.146.043.042.03.091.058.147.086a.271.271 0 01.063.108c.014.043.007.093-.02.15l-.42 1.378a.374.374 0 01-.147.15.37.37 0 01-.19.065h-.251v7.186h.252a.37.37 0 01.189.065c.07.043.119.093.147.15l.42 1.378c.027.028.034.071.02.129a.275.275 0 01-.063.129 1.364 1.364 0 00-.147.086.254.254 0 01-.146.043H9.485a.254.254 0 01-.146-.043.691.691 0 01-.105-.086c-.056-.029-.084-.072-.084-.13v-.128l.461-1.377c0-.058.035-.108.105-.151a.432.432 0 01.231-.065zm5.792 0h.252V9.412h-.252a.432.432 0 01-.23-.065.374.374 0 01-.148-.15l-.42-1.377c-.027-.029-.034-.072-.02-.13a.275.275 0 01.063-.129c.056-.028.105-.057.146-.086a.254.254 0 01.147-.043h4.114c.055 0 .104.015.146.043a.691.691 0 01.105.086c.056.03.084.072.084.13v.129l-.42 1.377a.374.374 0 01-.146.15.432.432 0 01-.231.065h-.21v7.186h.21a.43.43 0 01.23.065c.07.043.12.093.148.15l.42 1.378v.15c0 .043-.029.08-.085.108a.691.691 0 01-.105.086.254.254 0 01-.146.043h-4.114a.254.254 0 01-.147-.043 1.364 1.364 0 00-.146-.086.271.271 0 01-.063-.108c-.014-.043-.007-.093.02-.15l.42-1.377a.374.374 0 01.147-.151.432.432 0 01.231-.065zm-11.794-.086h.252V9.498h-.252a.334.334 0 01-.21-.065.386.386 0 01-.126-.193l-.42-1.377a.248.248 0 01-.02-.172.854.854 0 01.063-.173c.028-.057.07-.1.126-.129a.365.365 0 01.168-.043h4.07c.057 0 .113.015.169.043a.278.278 0 01.126.13.854.854 0 01.062.172.248.248 0 01-.02.172l-.42 1.377a.386.386 0 01-.126.193.334.334 0 01-.21.065h-.21v7.014h.21c.084 0 .154.029.21.086a.673.673 0 01.126.172l.42 1.378a.248.248 0 01.02.172.854.854 0 01-.062.172.278.278 0 01-.126.129.365.365 0 01-.168.043H3.526a.365.365 0 01-.168-.043.278.278 0 01-.126-.13.854.854 0 01-.063-.171.248.248 0 01.02-.172l.42-1.378a.673.673 0 01.126-.172.281.281 0 01.21-.086zM1.763 6.658a.717.717 0 01-.504-.194.644.644 0 01-.21-.495v-.43a.73.73 0 01.105-.387.68.68 0 01.273-.259C4.309 3.402 6.54 2.276 8.121 1.515 9.702.755 10.493.361 10.493.332c.531-.258.972-.366 1.322-.323.35.043.734.165 1.154.366l8.31 4.518c.14.058.245.144.315.259a.73.73 0 01.105.387v.43c0 .201-.07.366-.21.495a.717.717 0 01-.504.194H1.763zm-.714 13.34a.54.54 0 01.168-.387.516.516 0 01.378-.172h19.642c.168 0 .308.057.42.172a.541.541 0 01.168.387v.818a.522.522 0 01-.168.408.605.605 0 01-.42.151H1.595a.551.551 0 01-.378-.15.522.522 0 01-.168-.41v-.817zm21.405 2.022c.14 0 .266.058.378.173a.592.592 0 01.168.43v.818a.541.541 0 01-.168.387.516.516 0 01-.378.172L.546 23.957a.516.516 0 01-.378-.172.541.541 0 01-.168-.387v-.818a.59.59 0 01.168-.43.516.516 0 01.378-.173l21.908.043z'
  });

  var micIcon = new SVGIcon({
    name: 'mic',
    path: 'M12 15c1.66 0 2.99-1.34 2.99-3L15 6c0-1.66-1.34-3-3-3S9 4.34 9 6v6c0 1.66 1.34 3 3 3zm5.3-3c0 3-2.54 5.1-5.3 5.1S6.7 15 6.7 12H5c0 3.41 2.72 6.23 6 6.72V22h2v-3.28c3.28-.48 6-3.3 6-6.72h-1.7z'
  });

  var directionsIcon = new SVGIcon({
    name: 'directions',
    path: 'M23.649 11.154L12.846.35a1.195 1.195 0 00-1.692 0L.35 11.154a1.195 1.195 0 000 1.692L11.154 23.65a1.195 1.195 0 001.692 0L23.65 12.846c.468-.456.468-1.212 0-1.692zm-9.254 3.853v-3.001H9.593v3.6h-2.4v-4.8c0-.66.54-1.2 1.2-1.2h6.002V6.604l4.2 4.2-4.2 4.202z'
  });

  var calendarIcon = new SVGIcon({
    name: 'calendar',
    path: 'M18.111 13.2H12v6h6.111v-6zM16.89 0v2.4H7.11V0H4.667v2.4H3.444c-1.356 0-2.432 1.08-2.432 2.4L1 21.6C1 22.92 2.088 24 3.444 24h17.112C21.9 24 23 22.92 23 21.6V4.8c0-1.32-1.1-2.4-2.444-2.4h-1.223V0H16.89zm3.667 21.6H3.444V8.4h17.112v13.2z'
  });

  var calloutIcon = new SVGIcon({
    name: 'callout',
    path: 'M21.99 4c0-1.1-.89-2-1.99-2H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h14l4 4-.01-18z'
  });

  var infoIcon = new SVGIcon({
    name: 'info',
    path: 'M12 8.4A1.2 1.2 0 1012 6a1.2 1.2 0 000 2.4zM12 0c6.624 0 12 5.376 12 12s-5.376 12-12 12S0 18.624 0 12 5.376 0 12 0zm0 18c.66 0 1.2-.54 1.2-1.2V12c0-.66-.54-1.2-1.2-1.2-.66 0-1.2.54-1.2 1.2v4.8c0 .66.54 1.2 1.2 1.2z'
  });

  var briefcaseIcon = new SVGIcon({
    name: 'briefcase',
    path: 'M20 7h-4V5c0-1.11-.89-2-2-2h-4c-1.11 0-2 .89-2 2v2H4c-1.11 0-1.99.89-1.99 2L2 20c0 1.11.89 2 2 2h16c1.11 0 2-.89 2-2V9c0-1.11-.89-2-2-2zm-6 0h-4V5h4v2z'
  });

  var kabobIcon = new SVGIcon({
    name: 'kabob',
    viewBox: '0 0 3 11',
    complexContents: "<circle cx=\"1.5\" cy=\"1.5\" r=\"1.5\"/><circle cx=\"1.5\" cy=\"5.5\" r=\"1.5\"/><circle cx=\"1.5\" cy=\"9.5\" r=\"1.5\"/>"
  });

  var personIcon = new SVGIcon({
    name: 'person',
    viewBox: '0 0 18 18',
    path: 'M9 9c2.486 0 4.5-2.014 4.5-4.5S11.486 0 9 0a4.499 4.499 0 00-4.5 4.5C4.5 6.986 6.514 9 9 9zm0 2.25c-3.004 0-9 1.508-9 4.5v1.125C0 17.494.506 18 1.125 18h15.75c.619 0 1.125-.506 1.125-1.125V15.75c0-2.992-5.996-4.5-9-4.5z'
  });

  var magnifyingGlassIcon = new SVGIcon({
    name: 'magnifying_glass',
    path: 'M16.124 13.051a5.154 5.154 0 110-10.308 5.154 5.154 0 010 10.308M16.114 0a7.886 7.886 0 00-6.46 12.407L0 22.06 1.94 24l9.653-9.653A7.886 7.886 0 1016.113 0'
  });

  var officeIcon = new SVGIcon({
    name: 'office',
    path: 'M12 7V3H2v18h20V7H12zM6 19H4v-2h2v2zm0-4H4v-2h2v2zm0-4H4V9h2v2zm0-4H4V5h2v2zm4 12H8v-2h2v2zm0-4H8v-2h2v2zm0-4H8V9h2v2zm0-4H8V5h2v2zm10 12h-8v-2h2v-2h-2v-2h2v-2h-2V9h8v10zm-2-8h-2v2h2v-2zm0 4h-2v2h2v-2z'
  });

  var linkIcon = new SVGIcon({
    name: 'link',
    path: 'M2.28 12A3.723 3.723 0 016 8.28h4.8V6H6c-3.312 0-6 2.688-6 6s2.688 6 6 6h4.8v-2.28H6A3.723 3.723 0 012.28 12zm4.92 1.2h9.6v-2.4H7.2v2.4zM18 6h-4.8v2.28H18A3.723 3.723 0 0121.72 12 3.723 3.723 0 0118 15.72h-4.8V18H18c3.312 0 6-2.688 6-6s-2.688-6-6-6z'
  });

  var windowIcon = new SVGIcon({
    name: 'window',
    path: 'M3 13h8V3H3v10zm0 8h8v-6H3v6zm10 0h8V11h-8v10zm0-18v6h8V3h-8z'
  });

  var phoneIcon = new SVGIcon({
    name: 'phone',
    path: 'M4.827 10.387a20.198 20.198 0 008.786 8.786l2.934-2.933c.36-.36.893-.48 1.36-.32a15.21 15.21 0 004.76.76c.733 0 1.333.6 1.333 1.333v4.654C24 23.4 23.4 24 22.667 24 10.147 24 0 13.853 0 1.333 0 .6.6 0 1.333 0H6c.733 0 1.333.6 1.333 1.333 0 1.667.267 3.267.76 4.76.147.467.04.987-.333 1.36l-2.933 2.934z'
  });

  var tagIcon = new SVGIcon({
    name: 'tag',
    viewBox: '0 0 18 18',
    path: 'M17.469 8.622l-8.1-8.1A1.789 1.789 0 008.1 0H1.8C.81 0 0 .81 0 1.8v6.3c0 .495.198.945.531 1.278l8.1 8.1c.324.324.774.522 1.269.522a1.76 1.76 0 001.269-.531l6.3-6.3A1.76 1.76 0 0018 9.9c0-.495-.207-.954-.531-1.278zM3.15 4.5c-.747 0-1.35-.603-1.35-1.35 0-.747.603-1.35 1.35-1.35.747 0 1.35.603 1.35 1.35 0 .747-.603 1.35-1.35 1.35z'
  });

  var documentIcon = new SVGIcon({
    name: 'document',
    path: 'M4 6H2v14c0 1.1.9 2 2 2h14v-2H4V6zm16-4H8c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm-1 9H9V9h10v2zm-4 4H9v-2h6v2zm4-8H9V5h10v2z'
  });

  var chevronIcon = new SVGIcon({
    name: 'chevron',
    viewBox: '0 0 7 9',
    complexContents: "<g fill-rule=\"evenodd\" transform=\"translate(-1 -8)\"><path d=\"m2.6417004 8-1.1417004 1.0575 3.70850202 3.4425-3.70850202 3.4425 1.1417004 1.0575 4.8582996-4.5z\"/></g>"
  });

  var supportIcon = new SVGIcon({
    name: 'support',
    path: 'M12,0 C5.376,0 0,5.376 0,12 C0,18.624 5.376,24 12,24 C18.624,24 24,18.624 24,12 C24,5.376 18.624,0 12,0 Z M13,19 L11,19 L11,17 L13,17 L13,19 Z M15.07,11.25 L14.17,12.17 C13.45,12.9 13,13.5 13,15 L11,15 L11,14.5 C11,13.4 11.45,12.4 12.17,11.67 L13.41,10.41 C13.78,10.05 14,9.55 14,9 C14,7.9 13.1,7 12,7 C10.9,7 10,7.9 10,9 L8,9 C8,6.79 9.79,5 12,5 C14.21,5 16,6.79 16,9 C16,9.88 15.64,10.68 15.07,11.25 Z'
  });

  var yextIcon = new SVGIcon({
    name: 'yext',
    viewBox: '0 0 30 30',
    path: 'M25.517 28.142v.095h-.204v.905h-.066v-.905h-.197v-.095h.467zm.667 0h.066v1h-.066v-.825l-.24.595h-.013l-.24-.595v.825h-.066v-1h.066l.247.61.246-.61zM15 28.8c7.622 0 13.8-6.178 13.8-13.8 0-7.622-6.178-13.8-13.8-13.8C7.378 1.2 1.2 7.378 1.2 15c0 7.622 6.178 13.8 13.8 13.8zM15 0c8.284 0 15 6.716 15 15 0 8.284-6.716 15-15 15-8.284 0-15-6.716-15-15C0 6.716 6.716 0 15 0zm.45 16.65v-1.2h6.6v1.2h-2.7v5.4h-1.2v-5.4h-2.7zm-1.599-1.35l.849.849-2.601 2.601 2.601 2.601-.849.849-2.601-2.601L8.649 22.2l-.849-.849 2.601-2.601L7.8 16.149l.849-.849 2.601 2.601 2.601-2.601zM18.675 9a2.175 2.175 0 00-1.847 3.323l2.995-2.995A2.163 2.163 0 0018.675 9zm0 5.55a3.375 3.375 0 112.833-5.209l-3.789 3.788a2.175 2.175 0 003.13-1.954h1.201a3.375 3.375 0 01-3.375 3.375zm-7.425-3.734L13.78 7.8l.92.771-2.85 3.397v2.582h-1.2v-2.582L7.8 8.57l.92-.771 2.53 3.016z'
  });

  var pinIcon = new SVGIcon({
    name: 'pin',
    viewBox: '5 0 9 18',
    path: 'm9.375 0c-3.52446429 0-6.375 2.817-6.375 6.3 0 4.725 6.375 11.7 6.375 11.7s6.375-6.975 6.375-11.7c0-3.483-2.8505357-6.3-6.375-6.3zm.00000018 8.55000007c-1.25678576 0-2.27678579-1.008-2.27678579-2.25s1.02000003-2.25 2.27678579-2.25c1.25678572 0 2.27678582 1.008 2.27678582 2.25s-1.0200001 2.25-2.27678582 2.25z'
  });

  var gearIcon = new SVGIcon({
    name: 'gear',
    path: 'M12 10c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm7-7H5a2 2 0 00-2 2v14a2 2 0 002 2h14a2 2 0 002-2V5a2 2 0 00-2-2zm-1.75 9c0 .23-.02.46-.05.68l1.48 1.16c.13.11.17.3.08.45l-1.4 2.42c-.09.15-.27.21-.43.15l-1.74-.7c-.36.28-.76.51-1.18.69l-.26 1.85c-.03.17-.18.3-.35.3h-2.8c-.17 0-.32-.13-.35-.29l-.26-1.85c-.43-.18-.82-.41-1.18-.69l-1.74.7c-.16.06-.34 0-.43-.15l-1.4-2.42a.353.353 0 01.08-.45l1.48-1.16c-.03-.23-.05-.46-.05-.69 0-.23.02-.46.05-.68l-1.48-1.16a.353.353 0 01-.08-.45l1.4-2.42c.09-.15.27-.21.43-.15l1.74.7c.36-.28.76-.51 1.18-.69l.26-1.85c.03-.17.18-.3.35-.3h2.8c.17 0 .32.13.35.29l.26 1.85c.43.18.82.41 1.18.69l1.74-.7c.16-.06.34 0 .43.15l1.4 2.42c.09.15.05.34-.08.45l-1.48 1.16c.03.23.05.46.05.69z'
  });

  var lightBulbIcon = new SVGIcon({
    name: 'light_bulb',
    viewBox: '0 0 32 35',
    path: 'M11.585 31.056l8.38-.493v-.986l-8.38.493zM11.585 33.028L15.775 35l4.19-1.972V31.55l-8.38.493v.986zm6.926-.407l-2.736 1.29-2.13-1.004 4.866-.286zM15.775 7.394c-4.63 0-8.38 3.205-8.38 8.38 0 5.177 4.19 6.902 4.19 12.818v.493l8.38-.493c0-5.916 4.19-8.188 4.19-12.817a8.38 8.38 0 00-8.38-8.38zm5.617 13.48c-1.025 1.837-2.174 3.892-2.381 6.786l-6.44.38c-.129-3.01-1.29-5.021-2.32-6.808-.493-.8-.928-1.636-1.299-2.5h13.556c-.325.708-.704 1.403-1.116 2.142zm1.479-3.128H8.627a7.793 7.793 0 01-.247-1.971c0-4.353 3.042-7.395 7.395-7.395a7.394 7.394 0 017.394 7.395 6.739 6.739 0 01-.3 1.971h.002zM26.62 15.282h4.93v1h-4.93zM23.094 7.756l2.091-2.091.698.697-2.092 2.092zM15.282 0h1v4.93h-1zM5.666 6.362l.697-.697 2.091 2.091-.697.697zM0 15.282h4.93v1H0z'
  });

  var starIcon = new SVGIcon({
    name: 'star',
    viewBox: '0 0 18 18',
    path: 'M8.991 0C4.023 0 0 4.032 0 9s4.023 9 8.991 9C13.968 18 18 13.968 18 9s-4.032-9-9.009-9zm3.816 14.4L9 12.105 5.193 14.4l1.008-4.329-3.357-2.907 4.428-.378L9 2.7l1.728 4.077 4.428.378-3.357 2.907z'
  });

  var close = new SVGIcon({
    name: 'close',
    complexContents: "\n    <path d=\"M7 8l9.716 9.716m0-9.716L7 17.716\" \n          stroke=\"currentColor\" \n          stroke-width=\"2\"/>\n  "
  });

  var elements = new SVGIcon({
    name: 'elements',
    path: 'M13,15 L13,17 L21,17 L21,19 L13,19 L13,21 L11,21 L11,15 L13,15 Z M9,17 L9,19 L3,19 L3,17 L9,17 Z M9,15 L7,15 L7,13 L3,13 L3,11 L7,11 L7,9 L9,9 L9,15 Z M21,11 L21,13 L11,13 L11,11 L21,11 Z M17,3 L17,5 L21,5 L21,7 L17,7 L17,9 L15,9 L15,3 L17,3 Z M13,5 L13,7 L3,7 L3,5 L13,5 Z'
  });

  var yextAnimatedForward = new SVGIcon({
    name: 'yext_animated_reverse',
    viewBox: '0 0 72 72',
    complexContents: function complexContents() {
      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var iconPrefix = params.iconPrefix || 'yxt';
      return "<defs>\n      <mask id=\"".concat(iconPrefix, "_reverse_Mask-1\">\n        <rect fill=\"#fff\" width=\"720\" height=\"720\" />\n      </mask>\n      <mask id=\"").concat(iconPrefix, "_reverse_Mask-2\">\n        <rect x=\"-144.3\" y=\"144.3\" fill=\"#fff\" width=\"720\" height=\"720\" />\n        <path d=\"M-0.3 .1c0 0 1.3 1.2 1.3 1.2c0 0 .3-1.6 .3-1.6c0 0-1.6 .4-1.6 .4\" />\n        <path fill=\"#fff\" d=\"M.3 .7c0 0-0.3 .3-0.3 .3c0 0 0 0 0 0c0 0 .3-0.3 .3-0.3c0 0 0 0 0 0\" />\n        <path d=\"M.3 .7c0 0-0.1 0-0.1 0c0 0 .1 .1 .1 .1c0 0 .1-0.1 .1-0.1c0 0-0.1 0-0.1 0m222.8 469.1c0 0-70.5 69.4-70.5 69.4c0 0 34.1 33.5 34.1 33.5c0 0 67-72.9 67-72.9c0 0-30.6-30-30.6-30\" />\n      </mask>\n      <mask id=\"").concat(iconPrefix, "_reverse_Mask-3\">\n        <rect fill=\"#fff\" width=\"720\" height=\"720\" />\n        <path d=\"M489.8 277.4c0 0 78 18.8 78 18.8c0 0-96.1 61.5-96.1 61.5c0 0 59.6-41.1 59.6-41.1c0 0 10.6-53.8 10.6-53.8c0 0-38.2 .6-38.2 .6c0 0-13.9 14-13.9 14m-67.8-108.1c0 0 73.9 1.3 73.9 1.3c0 0-33.8 54.5-33.8 54.5c0 0 18.6-3.2 18.6-3.2c0 0 35.4-36.5 35.4-36.5c0 0-62-25.9-62-25.9c0 0-32.1 9.8-32.1 9.8\" />\n      </mask>\n      <mask id=\"").concat(iconPrefix, "_reverse_Mask-4\">\n        <rect x=\"-91.1\" y=\"91.1\" fill=\"#fff\" width=\"720\" height=\"720\" />\n        <path d=\"M-0.3 .1c0 0 1.3 1.2 1.3 1.2c0 0 .3-1.6 .3-1.6c0 0-1.6 .4-1.6 .4\" />\n        <path fill=\"#fff\" d=\"M.3 .7c0 0-0.3 .3-0.3 .3c0 0 0 0 0 0c0 0 .3-0.3 .3-0.3c0 0 0 0 0 0\" />\n        <path d=\"M.3 .7c0 0-0.1 0-0.1 0c0 0 .1 .1 .1 .1c0 0 .1-0.1 .1-0.1c0 0-0.1 0-0.1 0m222.8 469.1c0 0-70.5 69.4-70.5 69.4c0 0 34.1 33.5 34.1 33.5c0 0 67-72.9 67-72.9c0 0-30.6-30-30.6-30\" />\n      </mask>\n      <mask id=\"").concat(iconPrefix, "_reverse_Mask-5\">\n        <rect fill=\"#fff\" width=\"720\" height=\"720\" />\n        <path d=\"M488.4 291.4c0 0 40.5 39.3 40.5 39.3c0 0-57.2 27-57.2 27c0 0 59.6-41.1 59.6-41.1c0 0 10.6-53.8 10.6-53.8c0 0-38.2 .6-38.2 .6c0 0-15.3 28-15.3 28m-90.5-97.4c0 0 52-11.3 52-11.3c0 0-6 45.2-6 45.2c0 0 36.8-6 36.8-6c0 0 39.3-31.9 39.3-31.9c0 0-65.9-30.5-65.9-30.5c0 0-56.2 34.5-56.2 34.5\" />\n      </mask>\n      <mask id=\"").concat(iconPrefix, "_reverse_Mask-6\">\n        <rect x=\"-61.3\" y=\"61.3\" fill=\"#fff\" width=\"720\" height=\"720\" />\n      </mask>\n      <mask id=\"").concat(iconPrefix, "_reverse_Mask-7\">\n        <rect fill=\"#fff\" width=\"720\" height=\"720\" />\n        <path d=\"M481.8 298.4c0 0 27.5 39.8 27.5 39.8c0 0-37.6 19.5-37.6 19.5c0 0 59.6-41.1 59.6-41.1c0 0 10.6-53.8 10.6-53.8c0 0-38.2 .6-38.2 .6c0 0-21.9 35-21.9 35m-108.1-79.7c0 0 30.2-23.8 30.2-23.8c0 0 21.7 35.9 21.7 35.9c0 0 55.1-8.9 55.1-8.9c0 0 35.4-36.5 35.4-36.5c0 0-62-25.9-62-25.9c0 0-80.4 59.2-80.4 59.2\" />\n      </mask>\n      <mask id=\"").concat(iconPrefix, "_reverse_Mask-8\">\n        <rect x=\"-42.6\" y=\"42.6\" fill=\"#fff\" width=\"720\" height=\"720\" />\n      </mask>\n      <mask id=\"").concat(iconPrefix, "_reverse_Mask-9\">\n        <rect fill=\"#fff\" width=\"720\" height=\"720\" />\n        <path d=\"M475.2 305.4c0 0 14.5 40.3 14.5 40.3c0 0-18 12-18 12c0 0 59.6-41.1 59.6-41.1c0 0 10.6-53.8 10.6-53.8c0 0-38.2 .6-38.2 .6c0 0-28.5 42-28.5 42m-113.6-74.3c0 0 17.9-18.5 17.9-18.5c0 0 36.4 25.3 36.4 25.3c0 0 64.8-16 64.8-16c0 0 39.3-31.9 39.3-31.9c0 0-65.9-30.5-65.9-30.5c0 0-92.5 71.6-92.5 71.6\" />\n      </mask>\n      <mask id=\"").concat(iconPrefix, "_reverse_Mask-10\">\n        <rect x=\"-29.6\" y=\"29.6\" fill=\"#fff\" width=\"720\" height=\"720\" />\n      </mask>\n      <mask id=\"").concat(iconPrefix, "_reverse_Mask-11\">\n        <rect fill=\"#fff\" width=\"720\" height=\"720\" />\n        <path d=\"M468.6 312.4c0 0 1.5 40.8 1.5 40.8c0 0 1.6 4.5 1.6 4.5c0 0 59.6-41.1 59.6-41.1c0 0 10.6-53.8 10.6-53.8c0 0-38.2 .6-38.2 .6c0 0-35.1 49-35.1 49m-107-81.3c0 0 15.1 4.9 15.1 4.9c0 0 38.2 13.3 38.2 13.3c0 0 65.8-27.4 65.8-27.4c0 0 39.3-21.9 39.3-21.9c0 0-65.9-40.5-65.9-40.5c0 0-92.5 71.6-92.5 71.6\" />\n      </mask>\n      <mask id=\"").concat(iconPrefix, "_reverse_Mask-12\">\n        <rect x=\"-20.3\" y=\"20.3\" fill=\"#fff\" width=\"720\" height=\"720\" />\n      </mask>\n      <mask id=\"").concat(iconPrefix, "_reverse_Mask-13\">\n        <rect fill=\"#fff\" width=\"720\" height=\"720\" />\n        <path d=\"M456.6 311.9c0 0-7 35.6-7 35.6c0 0 22.1 10.2 22.1 10.2c0 0 59.6-41.1 59.6-41.1c0 0 10.6-53.8 10.6-53.8c0 0-38.2 .6-38.2 .6c0 0-47.1 48.5-47.1 48.5m-95-80.8c0 0 12.3 28.3 12.3 28.3c0 0 39.9 1.3 39.9 1.3c0 0 66.9-38.8 66.9-38.8c0 0 39.3-21.9 39.3-21.9c0 0-65.9-40.5-65.9-40.5c0 0-92.5 71.6-92.5 71.6\" />\n      </mask>\n      <mask id=\"").concat(iconPrefix, "_reverse_Mask-14\">\n        <rect x=\"-13.4\" y=\"13.4\" fill=\"#fff\" width=\"720\" height=\"720\" />\n      </mask>\n      <mask id=\"").concat(iconPrefix, "_reverse_Mask-15\">\n        <rect fill=\"#fff\" width=\"720\" height=\"720\" />\n        <path d=\"M444.6 311.4c0 0-15.6 30.5-15.6 30.5c0 0 42.7 15.8 42.7 15.8c0 0 59.6-41.1 59.6-41.1c0 0 10.6-53.8 10.6-53.8c0 0-38.2 .6-38.2 .6c0 0-59.1 48-59.1 48m-83-80.3c0 0 9.5 51.7 9.5 51.7c0 0 41.7-10.8 41.7-10.8c0 0 67.9-50.1 67.9-50.1c0 0 50.6-31.9 50.6-31.9c0 0-77.2-30.5-77.2-30.5c0 0-92.5 71.6-92.5 71.6\" />\n      </mask>\n      <mask id=\"").concat(iconPrefix, "_reverse_Mask-16\">\n        <rect x=\"-7.3\" y=\"7.3\" fill=\"#fff\" width=\"720\" height=\"720\" />\n      </mask>\n      <mask id=\"").concat(iconPrefix, "_reverse_Mask-17\">\n        <rect fill=\"#fff\" width=\"720\" height=\"720\" />\n        <path d=\"M432.6 310.9c0 0-24.2 25.3-24.2 25.3c0 0 63.3 21.5 63.3 21.5c0 0 59.6-41.1 59.6-41.1c0 0 10.6-53.8 10.6-53.8c0 0-38.2 .6-38.2 .6c0 0-71.1 47.5-71.1 47.5m-71-79.8c0 0 20.3 90.4 20.3 90.4c0 0 29-29.5 29-29.5c0 0 69.8-70.1 69.8-70.1c0 0 35.4-36.5 35.4-36.5c0 0-62-25.9-62-25.9c0 0-92.5 71.6-92.5 71.6\" />\n      </mask>\n      <mask id=\"").concat(iconPrefix, "_reverse_Mask-18\">\n        <rect x=\"-4\" y=\"4\" fill=\"#fff\" width=\"720\" height=\"720\" />\n      </mask>\n      <mask id=\"").concat(iconPrefix, "_reverse_Mask-19\">\n        <rect fill=\"#fff\" width=\"720\" height=\"720\" />\n        <path d=\"M432.6 310.9c0 0-24.2 25.3-24.2 25.3c0 0 63.3 21.5 63.3 21.5c0 0 59.6-41.1 59.6-41.1c0 0 10.6-53.8 10.6-53.8c0 0-38.2 .6-38.2 .6c0 0-71.1 47.5-71.1 47.5m-71-79.8c0 0 20.3 90.4 20.3 90.4c0 0 29-29.5 29-29.5c0 0 69.8-70.1 69.8-70.1c0 0 39.3-31.9 39.3-31.9c0 0-65.9-30.5-65.9-30.5c0 0-92.5 71.6-92.5 71.6\" />\n      </mask>\n      <mask id=\"").concat(iconPrefix, "_reverse_Mask-20\">\n        <rect fill=\"#fff\" width=\"720\" height=\"720\" />\n      </mask>\n      <clipPath id=\"").concat(iconPrefix, "_reverse_ClipPath-1\">\n        <rect width=\"720\" height=\"720\" />\n      </clipPath>\n    </defs>\n    <g transform=\"translate(0,0) scale(.1,.1)\">\n      <g mask=\"url(#").concat(iconPrefix, "_reverse_Mask-1)\">\n        <path d=\"M377.5 395.3c0 0 64.8 0 64.8 0c0 0 0 129.6 0 129.6c0 0 28.8 0 28.8 0c0 0 0-129.6 0-129.6c0 0 64.8 0 64.8 0c0 0 0-28.8 0-28.8c0 0-158.4 0-158.4 0c0 0 0 28.8 0 28.8Z\" />\n        <path d=\"M338.9 363.6c0 0-62.5 62.4-62.5 62.4c0 0-62.4-62.4-62.4-62.4c0 0-20.4 20.4-20.4 20.4c0 0 62.5 62.4 62.5 62.4c0 0-62.5 62.4-62.5 62.4c0 0 20.4 20.4 20.4 20.4c0 0 62.4-62.4 62.4-62.4c0 0 62.5 62.4 62.5 62.4c0 0 20.3-20.4 20.3-20.4c0 0-62.4-62.4-62.4-62.4c0 0 62.4-62.4 62.4-62.4c0 0-20.3-20.4-20.3-20.4Z\" />\n        <path d=\"M454.7 345.8c44.8 0 81-36.3 81-81c0 0-28.8 0-28.8 0c0 28.8-23.3 52.2-52.2 52.2c-8.2 0-16-1.9-22.9-5.3c0 0 69.8-69.9 69.8-69.9c0 0 21.1-21 21.1-21c-14.4-22.3-39.5-37-68-37c-44.7 0-81 36.2-81 81c0 44.7 36.3 81 81 81Zm0-133.2c10.2 0 19.6 2.9 27.6 7.9c0 0-71.9 71.8-71.9 71.8c-5-8-7.9-17.4-7.9-27.5c0-28.9 23.4-52.2 52.2-52.2Z\" />\n        <path d=\"M276.4 255.9c0 0-60.7-72.8-60.7-72.8c0 0-22.1 18.6-22.1 18.6c0 0 68.4 82 68.4 82c0 0 0 62.4 0 62.4c0 0 28.8 0 28.8 0c0 0 0-62.6 0-62.6c0 0 68.4-81.8 68.4-81.8c0 0-22-18.6-22-18.6c0 0-60.8 72.8-60.8 72.8Z\" />\n      </g>\n      <path stroke=\"#000\" stroke-width=\"30\" d=\"M0-353.7c195.2 0 353.7 158.5 353.7 353.7c0 195.2-158.5 353.7-353.7 353.7c-195.2 0-353.7-158.5-353.7-353.7c0-195.2 158.5-353.7 353.7-353.7Z\" fill=\"none\" transform=\"translate(359.8,360.4) scale(.977,.977)\" />\n    </g>\n    <g opacity=\"0\" transform=\"translate(0,0) scale(.1,.1)\">\n      <g display=\"block\" mask=\"url(#").concat(iconPrefix, "_reverse_Mask-2)\" transform=\"translate(144.3,-144.3)\">\n        <path d=\"M224.2 478.3c0 0-210.6 210.5-210.6 210.5c0 0 20.4 20.4 20.4 20.4c0 0 210.7-210.7 210.7-210.7c-11.7-11-5.9-6-20.5-20.2Z\" />\n      </g>\n      <g display=\"block\" mask=\"url(#").concat(iconPrefix, "_reverse_Mask-3)\">\n        <path d=\"M390.6 395.2c0 0 51.7 .1 51.7 .1c0 0 .1 103.6 .1 103.6c0 0 28.7 0 28.7 0c0 0 0-103.6 0-103.6c0 0 52-0.1 52-0.1c0 0 0-28.4 0-28.4c0 0-132.5 0-132.5 0c0 0 0 28.4 0 28.4Z\" />\n        <path d=\"M329 373.4c0 .1-52.6 52.6-52.6 52.6c0 0-62.4-62.4-62.4-62.4c0 0-20.4 20.4-20.4 20.4c0 0 62.5 62.4 62.5 62.4c0 0-62.5 62.4-62.5 62.4c0 0 20.4 20.4 20.4 20.4c0 0 62.4-62.4 62.4-62.4c0 0 62.5 62.4 62.5 62.4c0 0 20.3-20.4 20.3-20.4c0 0-62.4-62.4-62.4-62.4c0 0 52.6-52.6 52.6-52.6c0 0-20.4-20.3-20.4-20.3Z\" />\n        <path d=\"M454.7 345.8c44.8 0 81-36.3 81-81c0 0-28.8 0-28.8 0c0 28.8-23.3 52.2-52.2 52.2c-8.2 0-16-1.9-22.9-5.3c0 0 69.8-69.9 69.8-69.9c0 0 21.1-21 21.1-21c-14.4-22.3-39.5-37-68-37c-44.7 0-81 36.2-81 81c0 44.7 36.3 81 81 81Zm0-133.2c10.2 0 19.6 2.9 27.6 7.9c0 0-71.9 71.8-71.9 71.8c-5-8-7.9-17.4-7.9-27.5c0-28.9 23.4-52.2 52.2-52.2Z\" />\n        <path d=\"M276.4 255.9c0 0-48.7-58.3-48.7-58.3c0 0-21.1 19-21.1 19c0 0 55.5 67.2 55.5 67.2c0 0 .3 50 .3 50c0 0 28.4 0 28.4 0c0 0 0-50.3 0-50.3c0 0 55.4-66.9 55.4-66.9c0 0-21-18.6-21-18.6c0 0-48.8 57.9-48.8 57.9Z\" />\n      </g>\n      <path stroke=\"#000\" stroke-width=\"30\" d=\"M0-336.2c185.6 0 336.2 150.6 336.2 336.2c0 185.6-150.6 336.2-336.2 336.2c-185.6 0-336.2-150.6-336.2-336.2c0-185.6 150.6-336.2 336.2-336.2Z\" fill=\"none\" display=\"block\" transform=\"translate(370.8,347.5) scale(.977,.977)\" />\n    </g>\n    <g opacity=\"0\" transform=\"translate(0,0) scale(.1,.1)\">\n      <g mask=\"url(#").concat(iconPrefix, "_reverse_Mask-4)\" transform=\"translate(91.1,-91.1)\">\n        <path d=\"M224.2 478.3c0 0-210.6 210.5-210.6 210.5c0 0 20.4 20.4 20.4 20.4c0 0 210.7-210.7 210.7-210.7c-11.7-11-5.9-6-20.5-20.2Z\" />\n      </g>\n      <g mask=\"url(#").concat(iconPrefix, "_reverse_Mask-5)\">\n        <path d=\"M409.7 395.1c0 0 32.6 .2 32.6 .2c0 0 .3 65.5 .3 65.5c0 0 28.5 0 28.5 0c0 0 0-65.5 0-65.5c0 0 33.1-0.2 33.1-0.2c0 0 0-27.8 0-27.8c0 0-94.5 0-94.5 0c0 0 0 27.8 0 27.8Z\" />\n        <path d=\"M319.7 382.8c0 0-43.3 43.2-43.3 43.2c0 0-62.4-62.4-62.4-62.4c0 0-20.4 20.4-20.4 20.4c0 0 62.5 62.4 62.5 62.4c0 0-62.5 62.4-62.5 62.4c0 0 20.4 20.4 20.4 20.4c0 0 62.4-62.4 62.4-62.4c0 0 62.5 62.4 62.5 62.4c0 0 20.3-20.4 20.3-20.4c0 0-62.4-62.4-62.4-62.4c0 0 43.4-43.3 43.4-43.3c0 0-20.5-20.3-20.5-20.3Z\" />\n        <path d=\"M502.8 199.6c-13.4-9.9-30-15.8-48.1-15.8c-44.7 0-81 36.2-81 81c0 44.7 36.3 81 81 81c44.8 0 81-36.3 81-81h-28.8c0 28.8-23.3 52.2-52.2 52.2c-8.2 0-16-1.9-22.9-5.3l69.8-69.9l.3-0.2l-20.3-20.4l-71.2 71.1c-5-8-7.9-17.4-7.9-27.5c0-28.9 23.4-52.2 52.2-52.2c10.1 0 19.4 2.8 27.4 7.7Z\" fill-rule=\"evenodd\" />\n        <path d=\"M276.4 255.9c0 0-31.1-37-31.1-37c0 0-19.7 19.5-19.7 19.5c0 0 36.7 45.6 36.7 45.6c0 0 .7 31.8 .7 31.8c0 0 27.7 0 27.7 0c0 0 0-32.4 0-32.4c0 0 36.5-44.9 36.5-44.9c0 0-19.6-18.6-19.6-18.6c0 0-31.2 36-31.2 36Z\" />\n      </g>\n      <path stroke=\"#000\" stroke-width=\"30\" d=\"M0-310c171.1 0 310 138.9 310 310c0 171.1-138.9 310-310 310c-171.1 0-310-138.9-310-310c0-171.1 138.9-310 310-310Z\" fill=\"none\" transform=\"translate(387.8,328.7) scale(.977,.977)\" />\n    </g>\n    <g opacity=\"0\" transform=\"translate(0,0) scale(.1,.1)\">\n      <g display=\"block\" mask=\"url(#").concat(iconPrefix, "_reverse_Mask-6)\" transform=\"translate(61.3,-61.3)\">\n        <path d=\"M224.2 478.3c0 0-210.6 210.5-210.6 210.5c0 0 20.4 20.4 20.4 20.4c0 0 210.7-210.7 210.7-210.7c-11.7-11-5.9-6-20.5-20.2Z\" />\n      </g>\n      <g mask=\"url(#").concat(iconPrefix, "_reverse_Mask-7)\">\n        <path d=\"M420.4 395c0 0 21.9 .3 21.9 .3c0 0 .4 44.1 .4 44.1c0 0 28.4 0 28.4 0c0 0 0-44.1 0-44.1c0 0 22.6-0.3 22.6-0.3c0 0 0-27.5 0-27.5c0 0-73.3 0-73.3 0c0 0 0 27.5 0 27.5Z\" />\n        <path d=\"M313.2 389.2c0 0-36.8 36.8-36.8 36.8c0 0-62.4-62.4-62.4-62.4c0 0-20.4 20.4-20.4 20.4c0 0 62.5 62.4 62.5 62.4c0 0-62.5 62.4-62.5 62.4c0 0 20.4 20.4 20.4 20.4c0 0 62.4-62.4 62.4-62.4c0 0 62.5 62.4 62.5 62.4c0 0 20.3-20.4 20.3-20.4c0 0-62.4-62.4-62.4-62.4c0 0 37-36.9 37-36.9c0 0-20.6-20.3-20.6-20.3Z\" />\n        <path d=\"M500 200c-13.4-9.9-27.2-16.2-45.3-16.2c-44.7 0-81 36.2-81 81c0 44.7 36.3 81 81 81c44.8 0 81-36.3 81-81h-28.8c0 28.8-23.3 52.2-52.2 52.2c-8.2 0-16-1.9-22.9-5.3l57.7-57.7l-20.3-20.4l-58.8 58.7c-5-8-7.9-17.4-7.9-27.5c0-28.9 23.4-52.2 52.2-52.2c10.1 0 19.4 2.8 27.4 7.7Z\" fill-rule=\"evenodd\" />\n        <path d=\"M276.4 255.9c0 0-21.2-25.1-21.2-25.1c0 0-19 19.8-19 19.8c0 0 26.2 33.5 26.2 33.5c0 0 1 21.6 1 21.6c0 0 27.2 0 27.2 0c0 0 0-22.3 0-22.3c0 0 25.9-32.7 25.9-32.7c0 0-18.8-18.6-18.8-18.6c0 0-21.3 23.8-21.3 23.8Z\" />\n      </g>\n      <path stroke=\"#000\" stroke-width=\"30\" d=\"M0-294.3c162.4 0 294.3 131.9 294.3 294.3c0 162.4-131.9 294.3-294.3 294.3c-162.4 0-294.3-131.9-294.3-294.3c0-162.4 131.9-294.3 294.3-294.3Z\" fill=\"none\" display=\"block\" transform=\"translate(398.7,318.2) scale(.977,.977)\" />\n    </g>\n    <g opacity=\"0\" transform=\"translate(0,0) scale(.1,.1)\">\n      <g mask=\"url(#").concat(iconPrefix, "_reverse_Mask-8)\" transform=\"translate(42.6,-42.6)\">\n        <path d=\"M224.2 478.3c0 0-210.6 210.5-210.6 210.5c0 0 20.4 20.4 20.4 20.4c0 0 210.7-210.7 210.7-210.7c-11.7-11-5.9-6-20.5-20.2Z\" />\n      </g>\n      <g display=\"block\" mask=\"url(#").concat(iconPrefix, "_reverse_Mask-9)\">\n        <path d=\"M427.2 394.9c0 0 15.1 .4 15.1 .4c0 0 .4 30.7 .4 30.7c0 0 28.4 0 28.4 0c0 0 0-30.7 0-30.7c0 0 15.9-0.4 15.9-0.4c0 0 0-27.2 0-27.2c0 0-59.8 0-59.8 0c0 0 0 27.2 0 27.2Z\" />\n        <path d=\"M307.4 395c0 0-31 31-31 31c0 0-53.9-54-53.9-54c0 0-20.4 20.4-20.4 20.4c0 0 54 54 54 54c0 0-62.5 62.4-62.5 62.4c0 0 20.4 20.4 20.4 20.4c0 0 62.4-62.4 62.4-62.4c0 0 54 54 54 54c0 0 20.4-20.3 20.4-20.3c0 0-54-54.1-54-54.1c0 0 31.2-31.1 31.2-31.1c0 0-20.6-20.3-20.6-20.3Z\" />\n        <path d=\"M502.8 199.6c-13.4-9.9-30.1-15.8-48.1-15.8c-44.7 0-81 36.2-81 81c0 44.7 36.3 81 81 81c44.8 0 81-36.3 81-81h-28.8c0 28.8-23.3 52.2-52.2 52.2c-8.2 0-16-1.9-22.9-5.3l45.5-45.5l-20.4-20.4l-46.5 46.5c-5-8-7.9-17.4-7.9-27.5c0-28.9 23.4-52.2 52.2-52.2c10.1 0 19.4 2.8 27.4 7.7Z\" fill-rule=\"evenodd\" />\n        <path d=\"M276.4 255.9c0 0-15-17.6-15-17.6c0 0-18.4 20-18.4 20c0 0 19.4 25.8 19.4 25.8c0 0 1.2 15.2 1.2 15.2c0 0 27 0 27 0c0 0 0-15.9 0-15.9c0 0 19.1-24.9 19.1-24.9c0 0-18.2-18.7-18.2-18.7c0 0-15.1 16.1-15.1 16.1Z\" />\n      </g>\n      <path stroke=\"#000\" stroke-width=\"30\" d=\"M0-284.4c157 0 284.4 127.4 284.4 284.4c0 157-127.4 284.4-284.4 284.4c-157 0-284.4-127.4-284.4-284.4c0-157 127.4-284.4 284.4-284.4Z\" fill=\"none\" transform=\"translate(406.1,311.6) scale(.977,.977)\" />\n    </g>\n    <g opacity=\"0\" transform=\"translate(0,0) scale(.1,.1)\">\n      <g display=\"block\" mask=\"url(#").concat(iconPrefix, "_reverse_Mask-10)\" transform=\"translate(29.6,-29.6)\">\n        <path d=\"M224.2 478.3c0 0-210.6 210.5-210.6 210.5c0 0 20.4 20.4 20.4 20.4c0 0 210.7-210.7 210.7-210.7c-11.7-11-5.9-6-20.5-20.2Z\" />\n      </g>\n      <g display=\"block\" mask=\"url(#").concat(iconPrefix, "_reverse_Mask-11)\">\n        <path d=\"M436 393.5c0 0 8.7 .4 8.7 .4c0 0 .4 17.8 .4 17.8c0 0 23.6 0 23.6 0c0 0 0-17.8 0-17.8c0 0 9.4-0.4 9.4-0.4c0 0 0-22.6 0-22.6c0 0-42.1 0-42.1 0c0 0 0 22.6 0 22.6Z\" />\n        <path d=\"M297.2 405.2c0 0-20.8 20.8-20.8 20.8c0 0-35.4-35.6-35.4-35.6c0 0-20.3 20.5-20.3 20.5c0 0 35.4 35.5 35.4 35.5c0 0-62.5 62.4-62.5 62.4c0 0 20.4 20.4 20.4 20.4c0 0 62.4-62.4 62.4-62.4c0 0 35.6 35.5 35.6 35.5c0 0 20.2-20.2 20.2-20.2c0 0-35.4-35.7-35.4-35.7c0 0 21.1-21 21.1-21c0 0-20.7-20.2-20.7-20.2Z\" />\n        <path d=\"M502.8 199.6c-13.4-9.9-30.1-15.8-48.1-15.8c-44.7 0-81 36.2-81 81c0 44.7 36.3 81 81 81c44.8 0 81-36.3 81-81h-28.8c0 28.8-23.3 52.2-52.2 52.2c-8.2 0-16-1.9-22.9-5.3l33.7-33.7l-20.4-20.3l-34.7 34.6c-5-8-7.9-17.4-7.9-27.5c0-28.9 23.4-52.2 52.2-52.2c10.1 0 19.4 2.8 27.4 7.7Z\" fill-rule=\"evenodd\" />\n        <path d=\"M276.4 255.9c0 0-10.7-12.4-10.7-12.4c0 0-18.1 20.1-18.1 20.1c0 0 14.9 20.6 14.9 20.6c0 0 1.2 10.7 1.2 10.7c0 0 26.8 0 26.8 0c0 0 0-11.5 0-11.5c0 0 14.6-19.6 14.6-19.6c0 0-17.9-18.6-17.9-18.6c0 0-10.8 10.7-10.8 10.7Z\" />\n      </g>\n      <path stroke=\"#000\" stroke-width=\"30\" d=\"M0-277.5c153.1 0 277.5 124.4 277.5 277.5c0 153.1-124.4 277.5-277.5 277.5c-153.1 0-277.5-124.4-277.5-277.5c0-153.1 124.4-277.5 277.5-277.5Z\" fill=\"none\" display=\"block\" transform=\"translate(411.2,307.1) scale(.977,.977)\" />\n    </g>\n    <g opacity=\"0\" transform=\"translate(0,0) scale(.1,.1)\">\n      <g display=\"block\" mask=\"url(#").concat(iconPrefix, "_reverse_Mask-12)\" transform=\"translate(20.3,-20.3)\">\n        <path d=\"M224.2 478.3c0 0-210.6 210.5-210.6 210.5c0 0 20.4 20.4 20.4 20.4c0 0 210.7-210.7 210.7-210.7c-11.7-11-5.9-6-20.5-20.2Z\" />\n      </g>\n      <g display=\"block\" mask=\"url(#").concat(iconPrefix, "_reverse_Mask-13)\">\n        <path d=\"M446 390.8c0 0 3.5 .2 3.5 .2c0 0 .2 7.3 .2 7.3c.1 0 14.2 0 14.2 0c0 0 0-7.3 0-7.3c0 0 4-0.2 4-0.2c0 0 0-13.5 0-13.5c0 0-21.9 0-21.9 0c0 0 0 13.5 0 13.5Z\" />\n        <path d=\"M287.9 414.4c0 0-11.5 11.6-11.5 11.6c0 0-18.5-18.8-18.5-18.8c0 0-20.3 20.5-20.3 20.5c0 0 18.5 18.7 18.5 18.7c0 0-62.5 62.4-62.5 62.4c0 0 20.4 20.4 20.4 20.4c0 0 62.4-62.4 62.4-62.4c0 0 18.7 18.7 18.7 18.7c0 0 20.2-20 20.2-20c0 0-18.5-19.1-18.5-19.1c0 0 11.9-11.8 11.9-11.8c0 0-20.8-20.2-20.8-20.2Z\" />\n        <path d=\"M502.8 199.6c-13.4-10-30.1-15.8-48.1-15.8c-44.7 0-81 36.2-81 81c0 44.7 36.3 81 81 81c44.8 0 81-36.3 81-81h-28.8c0 28.8-23.3 52.2-52.2 52.2c-8.2 0-16-1.9-22.9-5.3l22.4-22.4l-20.4-20.4l-23.4 23.4c-5-8-7.9-17.4-7.9-27.5c0-28.9 23.4-52.2 52.2-52.2c10.1 0 19.4 2.8 27.4 7.7Z\" fill-rule=\"evenodd\" />\n        <path d=\"M276.4 259.4c0 0-4.5-5.2-4.5-5.2c0 0-10.7 12.1-10.7 12.1c0 0 6.9 10.1 6.9 10.1c0 0 .8 4.5 .8 4.5c0 0 16 0 16 0c0 0 0-5 0-5c0 0 6.7-9.4 6.7-9.4c0 0-10.6-11.2-10.6-11.2c0 0-4.6 4.1-4.6 4.1Z\" />\n      </g>\n      <path stroke=\"#000\" stroke-width=\"30\" d=\"M0-272.5c150.4 0 272.5 122.1 272.5 272.5c0 150.4-122.1 272.5-272.5 272.5c-150.4 0-272.5-122.1-272.5-272.5c0-150.4 122.1-272.5 272.5-272.5Z\" fill=\"none\" display=\"block\" transform=\"translate(414.9,303.7) scale(.977,.977)\" />\n    </g>\n    <g opacity=\"0\" transform=\"translate(0,0) scale(.1,.1)\">\n      <g display=\"block\" mask=\"url(#").concat(iconPrefix, "_reverse_Mask-14)\" transform=\"translate(13.4,-13.4)\">\n        <path d=\"M224.2 478.3c0 0-210.6 210.5-210.6 210.5c0 0 20.4 20.4 20.4 20.4c0 0 210.7-210.7 210.7-210.7c-11.7-11-5.9-6-20.5-20.2Z\" />\n      </g>\n      <g display=\"block\" mask=\"url(#").concat(iconPrefix, "_reverse_Mask-15)\">\n        <path d=\"M453.6 388.1c0 0 .7 0 .7 0c0 0 .1 1.7 .1 1.7c0 0 4.7 0 4.7 0c0 0 0-1.7 0-1.7c0 0 1 0 1 0c0 0 0-4.5 0-4.5c0 0-6.5 0-6.5 0c0 0 0 4.5 0 4.5Z\" />\n        <path d=\"M280.8 421.5c0 0-4.4 4.5-4.4 4.5c0 0-5.5-5.9-5.5-5.9c0 0-20.3 20.6-20.3 20.6c0 0 5.5 5.7 5.5 5.7c0 0-62.5 62.4-62.5 62.4c0 0 20.4 20.4 20.4 20.4c0 0 62.4-62.4 62.4-62.4c0 0 5.8 5.7 5.8 5.7c0 0 20.1-19.9 20.1-19.9c0 0-5.5-6.2-5.5-6.2c0 0 4.8-4.6 4.8-4.6c0 0-20.8-20.3-20.8-20.3Z\" />\n        <path d=\"M502.8 199.6c-13.4-10-30.1-15.8-48.1-15.8c-44.7 0-81 36.2-81 81c0 44.7 36.3 81 81 81c44.8 0 81-36.3 81-81h-28.8c0 28.8-23.3 52.2-52.2 52.2c-8.2 0-16-1.9-22.9-5.3l11.9-11.9l-20.4-20.3l-12.9 12.8c-5-8-7.9-17.4-7.9-27.5c0-28.9 23.4-52.2 52.2-52.2c10.1 0 19.4 2.8 27.4 7.7Z\" fill-rule=\"evenodd\" />\n        <path d=\"M276.4 262.9c0 0-1-1.2-1-1.2c0 0-3.6 4-3.6 4c0 0 1.9 2.8 1.9 2.8c0 0 .2 1.1 .2 1.1c0 0 5.4 0 5.4 0c0 0 0-1.2 0-1.2c0 0 1.7-2.6 1.7-2.6c0 0-3.5-3.7-3.5-3.7c0 0-1.1 .8-1.1 .8Z\" />\n      </g>\n      <path stroke=\"#000\" stroke-width=\"30\" d=\"M0-268.8c148.4 0 268.8 120.4 268.8 268.8c0 148.4-120.4 268.8-268.8 268.8c-148.4 0-268.8-120.4-268.8-268.8c0-148.4 120.4-268.8 268.8-268.8Z\" fill=\"none\" display=\"block\" transform=\"translate(417.6,301.3) scale(.977,.977)\" />\n    </g>\n    <g opacity=\"0\" transform=\"translate(0,0) scale(.1,.1)\">\n      <g display=\"block\" mask=\"url(#").concat(iconPrefix, "_reverse_Mask-16)\" transform=\"translate(7.3,-7.3)\">\n        <path d=\"M224.2 478.3c0 0-210.6 210.5-210.6 210.5c0 0 20.4 20.4 20.4 20.4c0 0 210.7-210.7 210.7-210.7c-11.7-11-5.9-6-20.5-20.2Z\" />\n      </g>\n      <g display=\"block\" mask=\"url(#").concat(iconPrefix, "_reverse_Mask-17)\">\n        <path d=\"M275.4 426.9c0 0-19.3 19.5-19.3 19.5c0 0-62.5 62.4-62.5 62.4c0 0 20.4 20.4 20.4 20.4c0 0 62.4-62.4 62.4-62.4c0 0 19.9-19.7 19.9-19.7c0 0-20.9-20.2-20.9-20.2Z\" />\n        <path d=\"M411.4 291.3l20.7 20.7l.1-0.1c6.8 3.2 14.5 5.1 22.5 5.1c28.9 0 52.2-23.4 52.2-52.2h28.8c0 44.7-36.2 81-81 81c-44.7 0-81-36.3-81-81c0-44.8 36.3-81 81-81c18 0 21.9 6.3 35.3 16.2l-7.9 20.3c-8-4.9-17.3-7.7-27.4-7.7c-28.8 0-52.2 23.3-52.2 52.2c0 10.1 2.9 19.5 7.9 27.5Z\" fill-rule=\"evenodd\" />\n      </g>\n      <path stroke=\"#000\" stroke-width=\"30\" d=\"M0-265.6c146.6 0 265.6 119 265.6 265.6c0 146.6-119 265.6-265.6 265.6c-146.6 0-265.6-119-265.6-265.6c0-146.6 119-265.6 265.6-265.6Z\" fill=\"none\" display=\"block\" transform=\"translate(420,299.1) scale(.977,.977)\" />\n    </g>\n    <g opacity=\"0\" transform=\"translate(0,0) scale(.1,.1)\">\n      <g display=\"block\" mask=\"url(#").concat(iconPrefix, "_reverse_Mask-18)\" transform=\"translate(4,-4)\">\n        <path d=\"M224.2 478.3c0 0-210.6 210.5-210.6 210.5c0 0 20.4 20.4 20.4 20.4c0 0 210.7-210.7 210.7-210.7c-11.7-11-5.9-6-20.5-20.2Z\" />\n      </g>\n      <g display=\"block\" mask=\"url(#").concat(iconPrefix, "_reverse_Mask-19)\">\n        <path d=\"M265.4 437.1c0 0-9.3 9.3-9.3 9.3c0 0-62.5 62.4-62.5 62.4c0 0 20.4 20.4 20.4 20.4c0 0 62.4-62.4 62.4-62.4c0 0 9.8-9.6 9.8-9.6c0 0-20.8-20.1-20.8-20.1Z\" />\n        <path d=\"M403 299.3l20.9 20.9l8.3-8.3c6.8 3.2 14.5 5.1 22.5 5.1c28.9 0 52.2-23.4 52.2-52.2h28.8c0 44.7-36.2 81-81 81c-44.7 0-81-36.3-81-81c0-44.8 36.3-81 81-81c18 0 34.6 5.8 48.1 15.8l-20.7 20.7c-8-4.9-17.3-7.7-27.4-7.7c-28.8 0-52.2 23.3-52.2 52.2c0 10 2.9 19.3 7.8 27.3Z\" fill-rule=\"evenodd\" />\n      </g>\n      <path stroke=\"#000\" stroke-width=\"30\" d=\"M0-263.8c145.6 0 263.8 118.2 263.8 263.8c0 145.6-118.2 263.8-263.8 263.8c-145.6 0-263.8-118.2-263.8-263.8c0-145.6 118.2-263.8 263.8-263.8Z\" fill=\"none\" display=\"block\" transform=\"translate(421.2,297.8) scale(.977,.977)\" />\n    </g>\n    <g clip-path=\"url(#").concat(iconPrefix, "_reverse_ClipPath-1)\" opacity=\"0\" transform=\"translate(0,0) scale(.1,.1)\">\n      <g display=\"block\" mask=\"url(#").concat(iconPrefix, "_reverse_Mask-20)\">\n        <path d=\"M224.2 478.3c0 0-210.6 210.5-210.6 210.5c0 0 20.4 20.4 20.4 20.4c0 0 210.7-210.7 210.7-210.7c-11.7-11-5.9-6-20.5-20.2Z\" />\n      </g>\n      <path stroke=\"#000\" stroke-width=\"30\" d=\"M0-261.7c144.4 0 261.7 117.3 261.7 261.7c0 144.4-117.3 261.7-261.7 261.7c-144.4 0-261.7-117.3-261.7-261.7c0-144.4 117.3-261.7 261.7-261.7Z\" fill=\"none\" display=\"block\" transform=\"translate(422.8,296.4) scale(.977,.977)\" />\n    </g>");
    }
  });

  var yextAnimatedReverse = new SVGIcon({
    name: 'yext_animated_forward',
    viewBox: '0 0 72 72',
    complexContents: function complexContents() {
      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var iconPrefix = params.iconPrefix || 'yxt';
      return "<defs>\n      <mask id=\"".concat(iconPrefix, "_forward_Mask-1\">\n        <rect fill=\"#fff\" width=\"720\" height=\"720\" />\n      </mask>\n      <mask id=\"").concat(iconPrefix, "_forward_Mask-2\">\n        <rect x=\"-144.3\" y=\"144.3\" fill=\"#fff\" width=\"720\" height=\"720\" />\n        <path d=\"M-0.3 .1c0 0 1.3 1.2 1.3 1.2c0 0 .3-1.6 .3-1.6c0 0-1.6 .4-1.6 .4\" />\n        <path fill=\"#fff\" d=\"M.3 .7c0 0-0.3 .3-0.3 .3c0 0 0 0 0 0c0 0 .3-0.3 .3-0.3c0 0 0 0 0 0\" />\n        <path d=\"M.3 .7c0 0-0.1 0-0.1 0c0 0 .1 .1 .1 .1c0 0 .1-0.1 .1-0.1c0 0-0.1 0-0.1 0m222.8 469.1c0 0-70.5 69.4-70.5 69.4c0 0 34.1 33.5 34.1 33.5c0 0 67-72.9 67-72.9c0 0-30.6-30-30.6-30\" />\n      </mask>\n      <mask id=\"").concat(iconPrefix, "_forward_Mask-3\">\n        <rect fill=\"#fff\" width=\"720\" height=\"720\" />\n        <path d=\"M489.8 277.4c0 0 78 18.8 78 18.8c0 0-96.1 61.5-96.1 61.5c0 0 59.6-41.1 59.6-41.1c0 0 10.6-53.8 10.6-53.8c0 0-38.2 .6-38.2 .6c0 0-13.9 14-13.9 14m-67.8-108.1c0 0 73.9 1.3 73.9 1.3c0 0-33.8 54.5-33.8 54.5c0 0 18.6-3.2 18.6-3.2c0 0 35.4-36.5 35.4-36.5c0 0-62-25.9-62-25.9c0 0-32.1 9.8-32.1 9.8\" />\n      </mask>\n      <mask id=\"").concat(iconPrefix, "_forward_Mask-4\">\n        <rect x=\"-91.1\" y=\"91.1\" fill=\"#fff\" width=\"720\" height=\"720\" />\n        <path d=\"M-0.3 .1c0 0 1.3 1.2 1.3 1.2c0 0 .3-1.6 .3-1.6c0 0-1.6 .4-1.6 .4\" />\n        <path fill=\"#fff\" d=\"M.3 .7c0 0-0.3 .3-0.3 .3c0 0 0 0 0 0c0 0 .3-0.3 .3-0.3c0 0 0 0 0 0\" />\n        <path d=\"M.3 .7c0 0-0.1 0-0.1 0c0 0 .1 .1 .1 .1c0 0 .1-0.1 .1-0.1c0 0-0.1 0-0.1 0m222.8 469.1c0 0-70.5 69.4-70.5 69.4c0 0 34.1 33.5 34.1 33.5c0 0 67-72.9 67-72.9c0 0-30.6-30-30.6-30\" />\n      </mask>\n      <mask id=\"").concat(iconPrefix, "_forward_Mask-5\">\n        <rect fill=\"#fff\" width=\"720\" height=\"720\" />\n        <path d=\"M488.4 291.4c0 0 40.5 39.3 40.5 39.3c0 0-57.2 27-57.2 27c0 0 59.6-41.1 59.6-41.1c0 0 10.6-53.8 10.6-53.8c0 0-38.2 .6-38.2 .6c0 0-15.3 28-15.3 28m-90.5-97.4c0 0 52-11.3 52-11.3c0 0-6 45.2-6 45.2c0 0 36.8-6 36.8-6c0 0 39.3-31.9 39.3-31.9c0 0-65.9-30.5-65.9-30.5c0 0-56.2 34.5-56.2 34.5\" />\n      </mask>\n      <mask id=\"").concat(iconPrefix, "_forward_Mask-6\">\n        <rect x=\"-61.3\" y=\"61.3\" fill=\"#fff\" width=\"720\" height=\"720\" />\n      </mask>\n      <mask id=\"").concat(iconPrefix, "_forward_Mask-7\">\n        <rect fill=\"#fff\" width=\"720\" height=\"720\" />\n        <path d=\"M481.8 298.4c0 0 27.5 39.8 27.5 39.8c0 0-37.6 19.5-37.6 19.5c0 0 59.6-41.1 59.6-41.1c0 0 10.6-53.8 10.6-53.8c0 0-38.2 .6-38.2 .6c0 0-21.9 35-21.9 35m-108.1-79.7c0 0 30.2-23.8 30.2-23.8c0 0 21.7 35.9 21.7 35.9c0 0 55.1-8.9 55.1-8.9c0 0 35.4-36.5 35.4-36.5c0 0-62-25.9-62-25.9c0 0-80.4 59.2-80.4 59.2\" />\n      </mask>\n      <mask id=\"").concat(iconPrefix, "_forward_Mask-8\">\n        <rect x=\"-42.6\" y=\"42.6\" fill=\"#fff\" width=\"720\" height=\"720\" />\n      </mask>\n      <mask id=\"").concat(iconPrefix, "_forward_Mask-9\">\n        <rect fill=\"#fff\" width=\"720\" height=\"720\" />\n        <path d=\"M475.2 305.4c0 0 14.5 40.3 14.5 40.3c0 0-18 12-18 12c0 0 59.6-41.1 59.6-41.1c0 0 10.6-53.8 10.6-53.8c0 0-38.2 .6-38.2 .6c0 0-28.5 42-28.5 42m-113.6-74.3c0 0 17.9-18.5 17.9-18.5c0 0 36.4 25.3 36.4 25.3c0 0 64.8-16 64.8-16c0 0 39.3-31.9 39.3-31.9c0 0-65.9-30.5-65.9-30.5c0 0-92.5 71.6-92.5 71.6\" />\n      </mask>\n      <mask id=\"").concat(iconPrefix, "_forward_Mask-10\">\n        <rect x=\"-29.6\" y=\"29.6\" fill=\"#fff\" width=\"720\" height=\"720\" />\n      </mask>\n      <mask id=\"").concat(iconPrefix, "_forward_Mask-11\">\n        <rect fill=\"#fff\" width=\"720\" height=\"720\" />\n        <path d=\"M468.6 312.4c0 0 1.5 40.8 1.5 40.8c0 0 1.6 4.5 1.6 4.5c0 0 59.6-41.1 59.6-41.1c0 0 10.6-53.8 10.6-53.8c0 0-38.2 .6-38.2 .6c0 0-35.1 49-35.1 49m-107-81.3c0 0 15.1 4.9 15.1 4.9c0 0 38.2 13.3 38.2 13.3c0 0 65.8-27.4 65.8-27.4c0 0 39.3-21.9 39.3-21.9c0 0-65.9-40.5-65.9-40.5c0 0-92.5 71.6-92.5 71.6\" />\n      </mask>\n      <mask id=\"").concat(iconPrefix, "_forward_Mask-12\">\n        <rect x=\"-20.3\" y=\"20.3\" fill=\"#fff\" width=\"720\" height=\"720\" />\n      </mask>\n      <mask id=\"").concat(iconPrefix, "_forward_Mask-13\">\n        <rect fill=\"#fff\" width=\"720\" height=\"720\" />\n        <path d=\"M456.6 311.9c0 0-7 35.6-7 35.6c0 0 22.1 10.2 22.1 10.2c0 0 59.6-41.1 59.6-41.1c0 0 10.6-53.8 10.6-53.8c0 0-38.2 .6-38.2 .6c0 0-47.1 48.5-47.1 48.5m-95-80.8c0 0 12.3 28.3 12.3 28.3c0 0 39.9 1.3 39.9 1.3c0 0 66.9-38.8 66.9-38.8c0 0 39.3-21.9 39.3-21.9c0 0-65.9-40.5-65.9-40.5c0 0-92.5 71.6-92.5 71.6\" />\n      </mask>\n      <mask id=\"").concat(iconPrefix, "_forward_Mask-14\">\n        <rect x=\"-13.4\" y=\"13.4\" fill=\"#fff\" width=\"720\" height=\"720\" />\n      </mask>\n      <mask id=\"").concat(iconPrefix, "_forward_Mask-15\">\n        <rect fill=\"#fff\" width=\"720\" height=\"720\" />\n        <path d=\"M444.6 311.4c0 0-15.6 30.5-15.6 30.5c0 0 42.7 15.8 42.7 15.8c0 0 59.6-41.1 59.6-41.1c0 0 10.6-53.8 10.6-53.8c0 0-38.2 .6-38.2 .6c0 0-59.1 48-59.1 48m-83-80.3c0 0 9.5 51.7 9.5 51.7c0 0 41.7-10.8 41.7-10.8c0 0 67.9-50.1 67.9-50.1c0 0 50.6-31.9 50.6-31.9c0 0-77.2-30.5-77.2-30.5c0 0-92.5 71.6-92.5 71.6\" />\n      </mask>\n      <mask id=\"").concat(iconPrefix, "_forward_Mask-16\">\n        <rect x=\"-7.3\" y=\"7.3\" fill=\"#fff\" width=\"720\" height=\"720\" />\n      </mask>\n      <mask id=\"").concat(iconPrefix, "_forward_Mask-17\">\n        <rect fill=\"#fff\" width=\"720\" height=\"720\" />\n        <path d=\"M432.6 310.9c0 0-24.2 25.3-24.2 25.3c0 0 63.3 21.5 63.3 21.5c0 0 59.6-41.1 59.6-41.1c0 0 10.6-53.8 10.6-53.8c0 0-38.2 .6-38.2 .6c0 0-71.1 47.5-71.1 47.5m-71-79.8c0 0 20.3 90.4 20.3 90.4c0 0 29-29.5 29-29.5c0 0 69.8-70.1 69.8-70.1c0 0 35.4-36.5 35.4-36.5c0 0-62-25.9-62-25.9c0 0-92.5 71.6-92.5 71.6\" />\n      </mask>\n      <mask id=\"").concat(iconPrefix, "_forward_Mask-18\">\n        <rect x=\"-4\" y=\"4\" fill=\"#fff\" width=\"720\" height=\"720\" />\n      </mask>\n      <mask id=\"").concat(iconPrefix, "_forward_Mask-19\">\n        <rect fill=\"#fff\" width=\"720\" height=\"720\" />\n        <path d=\"M432.6 310.9c0 0-24.2 25.3-24.2 25.3c0 0 63.3 21.5 63.3 21.5c0 0 59.6-41.1 59.6-41.1c0 0 10.6-53.8 10.6-53.8c0 0-38.2 .6-38.2 .6c0 0-71.1 47.5-71.1 47.5m-71-79.8c0 0 20.3 90.4 20.3 90.4c0 0 29-29.5 29-29.5c0 0 69.8-70.1 69.8-70.1c0 0 39.3-31.9 39.3-31.9c0 0-65.9-30.5-65.9-30.5c0 0-92.5 71.6-92.5 71.6\" />\n      </mask>\n      <mask id=\"").concat(iconPrefix, "_forward_Mask-20\">\n        <rect fill=\"#fff\" width=\"720\" height=\"720\" />\n      </mask>\n      <clipPath id=\"").concat(iconPrefix, "_forward_ClipPath-1\">\n        <rect width=\"720\" height=\"720\" />\n      </clipPath>\n    </defs>\n    <g transform=\"translate(0,0) scale(.1,.1)\">\n      <g mask=\"url(#").concat(iconPrefix, "_forward_Mask-1)\">\n        <path d=\"M377.5 395.3c0 0 64.8 0 64.8 0c0 0 0 129.6 0 129.6c0 0 28.8 0 28.8 0c0 0 0-129.6 0-129.6c0 0 64.8 0 64.8 0c0 0 0-28.8 0-28.8c0 0-158.4 0-158.4 0c0 0 0 28.8 0 28.8Z\" />\n        <path d=\"M338.9 363.6c0 0-62.5 62.4-62.5 62.4c0 0-62.4-62.4-62.4-62.4c0 0-20.4 20.4-20.4 20.4c0 0 62.5 62.4 62.5 62.4c0 0-62.5 62.4-62.5 62.4c0 0 20.4 20.4 20.4 20.4c0 0 62.4-62.4 62.4-62.4c0 0 62.5 62.4 62.5 62.4c0 0 20.3-20.4 20.3-20.4c0 0-62.4-62.4-62.4-62.4c0 0 62.4-62.4 62.4-62.4c0 0-20.3-20.4-20.3-20.4Z\" />\n        <path d=\"M454.7 345.8c44.8 0 81-36.3 81-81c0 0-28.8 0-28.8 0c0 28.8-23.3 52.2-52.2 52.2c-8.2 0-16-1.9-22.9-5.3c0 0 69.8-69.9 69.8-69.9c0 0 21.1-21 21.1-21c-14.4-22.3-39.5-37-68-37c-44.7 0-81 36.2-81 81c0 44.7 36.3 81 81 81Zm0-133.2c10.2 0 19.6 2.9 27.6 7.9c0 0-71.9 71.8-71.9 71.8c-5-8-7.9-17.4-7.9-27.5c0-28.9 23.4-52.2 52.2-52.2Z\" />\n        <path d=\"M276.4 255.9c0 0-60.7-72.8-60.7-72.8c0 0-22.1 18.6-22.1 18.6c0 0 68.4 82 68.4 82c0 0 0 62.4 0 62.4c0 0 28.8 0 28.8 0c0 0 0-62.6 0-62.6c0 0 68.4-81.8 68.4-81.8c0 0-22-18.6-22-18.6c0 0-60.8 72.8-60.8 72.8Z\" />\n      </g>\n      <path stroke=\"#000\" stroke-width=\"30\" d=\"M0-353.7c195.2 0 353.7 158.5 353.7 353.7c0 195.2-158.5 353.7-353.7 353.7c-195.2 0-353.7-158.5-353.7-353.7c0-195.2 158.5-353.7 353.7-353.7Z\" fill=\"none\" transform=\"translate(359.8,360.4) scale(.977,.977)\" />\n    </g>\n    <g opacity=\"0\" transform=\"translate(0,0) scale(.1,.1)\">\n      <g display=\"block\" mask=\"url(#").concat(iconPrefix, "_forward_Mask-2)\" transform=\"translate(144.3,-144.3)\">\n        <path d=\"M224.2 478.3c0 0-210.6 210.5-210.6 210.5c0 0 20.4 20.4 20.4 20.4c0 0 210.7-210.7 210.7-210.7c-11.7-11-5.9-6-20.5-20.2Z\" />\n      </g>\n      <g display=\"block\" mask=\"url(#").concat(iconPrefix, "_forward_Mask-3)\">\n        <path d=\"M390.6 395.2c0 0 51.7 .1 51.7 .1c0 0 .1 103.6 .1 103.6c0 0 28.7 0 28.7 0c0 0 0-103.6 0-103.6c0 0 52-0.1 52-0.1c0 0 0-28.4 0-28.4c0 0-132.5 0-132.5 0c0 0 0 28.4 0 28.4Z\" />\n        <path d=\"M329 373.4c0 .1-52.6 52.6-52.6 52.6c0 0-62.4-62.4-62.4-62.4c0 0-20.4 20.4-20.4 20.4c0 0 62.5 62.4 62.5 62.4c0 0-62.5 62.4-62.5 62.4c0 0 20.4 20.4 20.4 20.4c0 0 62.4-62.4 62.4-62.4c0 0 62.5 62.4 62.5 62.4c0 0 20.3-20.4 20.3-20.4c0 0-62.4-62.4-62.4-62.4c0 0 52.6-52.6 52.6-52.6c0 0-20.4-20.3-20.4-20.3Z\" />\n        <path d=\"M454.7 345.8c44.8 0 81-36.3 81-81c0 0-28.8 0-28.8 0c0 28.8-23.3 52.2-52.2 52.2c-8.2 0-16-1.9-22.9-5.3c0 0 69.8-69.9 69.8-69.9c0 0 21.1-21 21.1-21c-14.4-22.3-39.5-37-68-37c-44.7 0-81 36.2-81 81c0 44.7 36.3 81 81 81Zm0-133.2c10.2 0 19.6 2.9 27.6 7.9c0 0-71.9 71.8-71.9 71.8c-5-8-7.9-17.4-7.9-27.5c0-28.9 23.4-52.2 52.2-52.2Z\" />\n        <path d=\"M276.4 255.9c0 0-48.7-58.3-48.7-58.3c0 0-21.1 19-21.1 19c0 0 55.5 67.2 55.5 67.2c0 0 .3 50 .3 50c0 0 28.4 0 28.4 0c0 0 0-50.3 0-50.3c0 0 55.4-66.9 55.4-66.9c0 0-21-18.6-21-18.6c0 0-48.8 57.9-48.8 57.9Z\" />\n      </g>\n      <path stroke=\"#000\" stroke-width=\"30\" d=\"M0-336.2c185.6 0 336.2 150.6 336.2 336.2c0 185.6-150.6 336.2-336.2 336.2c-185.6 0-336.2-150.6-336.2-336.2c0-185.6 150.6-336.2 336.2-336.2Z\" fill=\"none\" display=\"block\" transform=\"translate(370.8,347.5) scale(.977,.977)\" />\n    </g>\n    <g opacity=\"0\" transform=\"translate(0,0) scale(.1,.1)\">\n      <g mask=\"url(#").concat(iconPrefix, "_forward_Mask-4)\" transform=\"translate(91.1,-91.1)\">\n        <path d=\"M224.2 478.3c0 0-210.6 210.5-210.6 210.5c0 0 20.4 20.4 20.4 20.4c0 0 210.7-210.7 210.7-210.7c-11.7-11-5.9-6-20.5-20.2Z\" />\n      </g>\n      <g mask=\"url(#").concat(iconPrefix, "_forward_Mask-5)\">\n        <path d=\"M409.7 395.1c0 0 32.6 .2 32.6 .2c0 0 .3 65.5 .3 65.5c0 0 28.5 0 28.5 0c0 0 0-65.5 0-65.5c0 0 33.1-0.2 33.1-0.2c0 0 0-27.8 0-27.8c0 0-94.5 0-94.5 0c0 0 0 27.8 0 27.8Z\" />\n        <path d=\"M319.7 382.8c0 0-43.3 43.2-43.3 43.2c0 0-62.4-62.4-62.4-62.4c0 0-20.4 20.4-20.4 20.4c0 0 62.5 62.4 62.5 62.4c0 0-62.5 62.4-62.5 62.4c0 0 20.4 20.4 20.4 20.4c0 0 62.4-62.4 62.4-62.4c0 0 62.5 62.4 62.5 62.4c0 0 20.3-20.4 20.3-20.4c0 0-62.4-62.4-62.4-62.4c0 0 43.4-43.3 43.4-43.3c0 0-20.5-20.3-20.5-20.3Z\" />\n        <path d=\"M502.8 199.6c-13.4-9.9-30-15.8-48.1-15.8c-44.7 0-81 36.2-81 81c0 44.7 36.3 81 81 81c44.8 0 81-36.3 81-81h-28.8c0 28.8-23.3 52.2-52.2 52.2c-8.2 0-16-1.9-22.9-5.3l69.8-69.9l.3-0.2l-20.3-20.4l-71.2 71.1c-5-8-7.9-17.4-7.9-27.5c0-28.9 23.4-52.2 52.2-52.2c10.1 0 19.4 2.8 27.4 7.7Z\" fill-rule=\"evenodd\" />\n        <path d=\"M276.4 255.9c0 0-31.1-37-31.1-37c0 0-19.7 19.5-19.7 19.5c0 0 36.7 45.6 36.7 45.6c0 0 .7 31.8 .7 31.8c0 0 27.7 0 27.7 0c0 0 0-32.4 0-32.4c0 0 36.5-44.9 36.5-44.9c0 0-19.6-18.6-19.6-18.6c0 0-31.2 36-31.2 36Z\" />\n      </g>\n      <path stroke=\"#000\" stroke-width=\"30\" d=\"M0-310c171.1 0 310 138.9 310 310c0 171.1-138.9 310-310 310c-171.1 0-310-138.9-310-310c0-171.1 138.9-310 310-310Z\" fill=\"none\" transform=\"translate(387.8,328.7) scale(.977,.977)\" />\n    </g>\n    <g opacity=\"0\" transform=\"translate(0,0) scale(.1,.1)\">\n      <g display=\"block\" mask=\"url(#").concat(iconPrefix, "_forward_Mask-6)\" transform=\"translate(61.3,-61.3)\">\n        <path d=\"M224.2 478.3c0 0-210.6 210.5-210.6 210.5c0 0 20.4 20.4 20.4 20.4c0 0 210.7-210.7 210.7-210.7c-11.7-11-5.9-6-20.5-20.2Z\" />\n      </g>\n      <g mask=\"url(#").concat(iconPrefix, "_forward_Mask-7)\">\n        <path d=\"M420.4 395c0 0 21.9 .3 21.9 .3c0 0 .4 44.1 .4 44.1c0 0 28.4 0 28.4 0c0 0 0-44.1 0-44.1c0 0 22.6-0.3 22.6-0.3c0 0 0-27.5 0-27.5c0 0-73.3 0-73.3 0c0 0 0 27.5 0 27.5Z\" />\n        <path d=\"M313.2 389.2c0 0-36.8 36.8-36.8 36.8c0 0-62.4-62.4-62.4-62.4c0 0-20.4 20.4-20.4 20.4c0 0 62.5 62.4 62.5 62.4c0 0-62.5 62.4-62.5 62.4c0 0 20.4 20.4 20.4 20.4c0 0 62.4-62.4 62.4-62.4c0 0 62.5 62.4 62.5 62.4c0 0 20.3-20.4 20.3-20.4c0 0-62.4-62.4-62.4-62.4c0 0 37-36.9 37-36.9c0 0-20.6-20.3-20.6-20.3Z\" />\n        <path d=\"M500 200c-13.4-9.9-27.2-16.2-45.3-16.2c-44.7 0-81 36.2-81 81c0 44.7 36.3 81 81 81c44.8 0 81-36.3 81-81h-28.8c0 28.8-23.3 52.2-52.2 52.2c-8.2 0-16-1.9-22.9-5.3l57.7-57.7l-20.3-20.4l-58.8 58.7c-5-8-7.9-17.4-7.9-27.5c0-28.9 23.4-52.2 52.2-52.2c10.1 0 19.4 2.8 27.4 7.7Z\" fill-rule=\"evenodd\" />\n        <path d=\"M276.4 255.9c0 0-21.2-25.1-21.2-25.1c0 0-19 19.8-19 19.8c0 0 26.2 33.5 26.2 33.5c0 0 1 21.6 1 21.6c0 0 27.2 0 27.2 0c0 0 0-22.3 0-22.3c0 0 25.9-32.7 25.9-32.7c0 0-18.8-18.6-18.8-18.6c0 0-21.3 23.8-21.3 23.8Z\" />\n      </g>\n      <path stroke=\"#000\" stroke-width=\"30\" d=\"M0-294.3c162.4 0 294.3 131.9 294.3 294.3c0 162.4-131.9 294.3-294.3 294.3c-162.4 0-294.3-131.9-294.3-294.3c0-162.4 131.9-294.3 294.3-294.3Z\" fill=\"none\" display=\"block\" transform=\"translate(398.7,318.2) scale(.977,.977)\" />\n    </g>\n    <g opacity=\"0\" transform=\"translate(0,0) scale(.1,.1)\">\n      <g mask=\"url(#").concat(iconPrefix, "_forward_Mask-8)\" transform=\"translate(42.6,-42.6)\">\n        <path d=\"M224.2 478.3c0 0-210.6 210.5-210.6 210.5c0 0 20.4 20.4 20.4 20.4c0 0 210.7-210.7 210.7-210.7c-11.7-11-5.9-6-20.5-20.2Z\" />\n      </g>\n      <g display=\"block\" mask=\"url(#").concat(iconPrefix, "_forward_Mask-9)\">\n        <path d=\"M427.2 394.9c0 0 15.1 .4 15.1 .4c0 0 .4 30.7 .4 30.7c0 0 28.4 0 28.4 0c0 0 0-30.7 0-30.7c0 0 15.9-0.4 15.9-0.4c0 0 0-27.2 0-27.2c0 0-59.8 0-59.8 0c0 0 0 27.2 0 27.2Z\" />\n        <path d=\"M307.4 395c0 0-31 31-31 31c0 0-53.9-54-53.9-54c0 0-20.4 20.4-20.4 20.4c0 0 54 54 54 54c0 0-62.5 62.4-62.5 62.4c0 0 20.4 20.4 20.4 20.4c0 0 62.4-62.4 62.4-62.4c0 0 54 54 54 54c0 0 20.4-20.3 20.4-20.3c0 0-54-54.1-54-54.1c0 0 31.2-31.1 31.2-31.1c0 0-20.6-20.3-20.6-20.3Z\" />\n        <path d=\"M502.8 199.6c-13.4-9.9-30.1-15.8-48.1-15.8c-44.7 0-81 36.2-81 81c0 44.7 36.3 81 81 81c44.8 0 81-36.3 81-81h-28.8c0 28.8-23.3 52.2-52.2 52.2c-8.2 0-16-1.9-22.9-5.3l45.5-45.5l-20.4-20.4l-46.5 46.5c-5-8-7.9-17.4-7.9-27.5c0-28.9 23.4-52.2 52.2-52.2c10.1 0 19.4 2.8 27.4 7.7Z\" fill-rule=\"evenodd\" />\n        <path d=\"M276.4 255.9c0 0-15-17.6-15-17.6c0 0-18.4 20-18.4 20c0 0 19.4 25.8 19.4 25.8c0 0 1.2 15.2 1.2 15.2c0 0 27 0 27 0c0 0 0-15.9 0-15.9c0 0 19.1-24.9 19.1-24.9c0 0-18.2-18.7-18.2-18.7c0 0-15.1 16.1-15.1 16.1Z\" />\n      </g>\n      <path stroke=\"#000\" stroke-width=\"30\" d=\"M0-284.4c157 0 284.4 127.4 284.4 284.4c0 157-127.4 284.4-284.4 284.4c-157 0-284.4-127.4-284.4-284.4c0-157 127.4-284.4 284.4-284.4Z\" fill=\"none\" transform=\"translate(406.1,311.6) scale(.977,.977)\" />\n    </g>\n    <g opacity=\"0\" transform=\"translate(0,0) scale(.1,.1)\">\n      <g display=\"block\" mask=\"url(#").concat(iconPrefix, "_forward_Mask-10)\" transform=\"translate(29.6,-29.6)\">\n        <path d=\"M224.2 478.3c0 0-210.6 210.5-210.6 210.5c0 0 20.4 20.4 20.4 20.4c0 0 210.7-210.7 210.7-210.7c-11.7-11-5.9-6-20.5-20.2Z\" />\n      </g>\n      <g display=\"block\" mask=\"url(#").concat(iconPrefix, "_forward_Mask-11)\">\n        <path d=\"M436 393.5c0 0 8.7 .4 8.7 .4c0 0 .4 17.8 .4 17.8c0 0 23.6 0 23.6 0c0 0 0-17.8 0-17.8c0 0 9.4-0.4 9.4-0.4c0 0 0-22.6 0-22.6c0 0-42.1 0-42.1 0c0 0 0 22.6 0 22.6Z\" />\n        <path d=\"M297.2 405.2c0 0-20.8 20.8-20.8 20.8c0 0-35.4-35.6-35.4-35.6c0 0-20.3 20.5-20.3 20.5c0 0 35.4 35.5 35.4 35.5c0 0-62.5 62.4-62.5 62.4c0 0 20.4 20.4 20.4 20.4c0 0 62.4-62.4 62.4-62.4c0 0 35.6 35.5 35.6 35.5c0 0 20.2-20.2 20.2-20.2c0 0-35.4-35.7-35.4-35.7c0 0 21.1-21 21.1-21c0 0-20.7-20.2-20.7-20.2Z\" />\n        <path d=\"M502.8 199.6c-13.4-9.9-30.1-15.8-48.1-15.8c-44.7 0-81 36.2-81 81c0 44.7 36.3 81 81 81c44.8 0 81-36.3 81-81h-28.8c0 28.8-23.3 52.2-52.2 52.2c-8.2 0-16-1.9-22.9-5.3l33.7-33.7l-20.4-20.3l-34.7 34.6c-5-8-7.9-17.4-7.9-27.5c0-28.9 23.4-52.2 52.2-52.2c10.1 0 19.4 2.8 27.4 7.7Z\" fill-rule=\"evenodd\" />\n        <path d=\"M276.4 255.9c0 0-10.7-12.4-10.7-12.4c0 0-18.1 20.1-18.1 20.1c0 0 14.9 20.6 14.9 20.6c0 0 1.2 10.7 1.2 10.7c0 0 26.8 0 26.8 0c0 0 0-11.5 0-11.5c0 0 14.6-19.6 14.6-19.6c0 0-17.9-18.6-17.9-18.6c0 0-10.8 10.7-10.8 10.7Z\" />\n      </g>\n      <path stroke=\"#000\" stroke-width=\"30\" d=\"M0-277.5c153.1 0 277.5 124.4 277.5 277.5c0 153.1-124.4 277.5-277.5 277.5c-153.1 0-277.5-124.4-277.5-277.5c0-153.1 124.4-277.5 277.5-277.5Z\" fill=\"none\" display=\"block\" transform=\"translate(411.2,307.1) scale(.977,.977)\" />\n    </g>\n    <g opacity=\"0\" transform=\"translate(0,0) scale(.1,.1)\">\n      <g display=\"block\" mask=\"url(#").concat(iconPrefix, "_forward_Mask-12)\" transform=\"translate(20.3,-20.3)\">\n        <path d=\"M224.2 478.3c0 0-210.6 210.5-210.6 210.5c0 0 20.4 20.4 20.4 20.4c0 0 210.7-210.7 210.7-210.7c-11.7-11-5.9-6-20.5-20.2Z\" />\n      </g>\n      <g display=\"block\" mask=\"url(#").concat(iconPrefix, "_forward_Mask-13)\">\n        <path d=\"M446 390.8c0 0 3.5 .2 3.5 .2c0 0 .2 7.3 .2 7.3c.1 0 14.2 0 14.2 0c0 0 0-7.3 0-7.3c0 0 4-0.2 4-0.2c0 0 0-13.5 0-13.5c0 0-21.9 0-21.9 0c0 0 0 13.5 0 13.5Z\" />\n        <path d=\"M287.9 414.4c0 0-11.5 11.6-11.5 11.6c0 0-18.5-18.8-18.5-18.8c0 0-20.3 20.5-20.3 20.5c0 0 18.5 18.7 18.5 18.7c0 0-62.5 62.4-62.5 62.4c0 0 20.4 20.4 20.4 20.4c0 0 62.4-62.4 62.4-62.4c0 0 18.7 18.7 18.7 18.7c0 0 20.2-20 20.2-20c0 0-18.5-19.1-18.5-19.1c0 0 11.9-11.8 11.9-11.8c0 0-20.8-20.2-20.8-20.2Z\" />\n        <path d=\"M502.8 199.6c-13.4-10-30.1-15.8-48.1-15.8c-44.7 0-81 36.2-81 81c0 44.7 36.3 81 81 81c44.8 0 81-36.3 81-81h-28.8c0 28.8-23.3 52.2-52.2 52.2c-8.2 0-16-1.9-22.9-5.3l22.4-22.4l-20.4-20.4l-23.4 23.4c-5-8-7.9-17.4-7.9-27.5c0-28.9 23.4-52.2 52.2-52.2c10.1 0 19.4 2.8 27.4 7.7Z\" fill-rule=\"evenodd\" />\n        <path d=\"M276.4 259.4c0 0-4.5-5.2-4.5-5.2c0 0-10.7 12.1-10.7 12.1c0 0 6.9 10.1 6.9 10.1c0 0 .8 4.5 .8 4.5c0 0 16 0 16 0c0 0 0-5 0-5c0 0 6.7-9.4 6.7-9.4c0 0-10.6-11.2-10.6-11.2c0 0-4.6 4.1-4.6 4.1Z\" />\n      </g>\n      <path stroke=\"#000\" stroke-width=\"30\" d=\"M0-272.5c150.4 0 272.5 122.1 272.5 272.5c0 150.4-122.1 272.5-272.5 272.5c-150.4 0-272.5-122.1-272.5-272.5c0-150.4 122.1-272.5 272.5-272.5Z\" fill=\"none\" display=\"block\" transform=\"translate(414.9,303.7) scale(.977,.977)\" />\n    </g>\n    <g opacity=\"0\" transform=\"translate(0,0) scale(.1,.1)\">\n      <g display=\"block\" mask=\"url(#").concat(iconPrefix, "_forward_Mask-14)\" transform=\"translate(13.4,-13.4)\">\n        <path d=\"M224.2 478.3c0 0-210.6 210.5-210.6 210.5c0 0 20.4 20.4 20.4 20.4c0 0 210.7-210.7 210.7-210.7c-11.7-11-5.9-6-20.5-20.2Z\" />\n      </g>\n      <g display=\"block\" mask=\"url(#").concat(iconPrefix, "_forward_Mask-15)\">\n        <path d=\"M453.6 388.1c0 0 .7 0 .7 0c0 0 .1 1.7 .1 1.7c0 0 4.7 0 4.7 0c0 0 0-1.7 0-1.7c0 0 1 0 1 0c0 0 0-4.5 0-4.5c0 0-6.5 0-6.5 0c0 0 0 4.5 0 4.5Z\" />\n        <path d=\"M280.8 421.5c0 0-4.4 4.5-4.4 4.5c0 0-5.5-5.9-5.5-5.9c0 0-20.3 20.6-20.3 20.6c0 0 5.5 5.7 5.5 5.7c0 0-62.5 62.4-62.5 62.4c0 0 20.4 20.4 20.4 20.4c0 0 62.4-62.4 62.4-62.4c0 0 5.8 5.7 5.8 5.7c0 0 20.1-19.9 20.1-19.9c0 0-5.5-6.2-5.5-6.2c0 0 4.8-4.6 4.8-4.6c0 0-20.8-20.3-20.8-20.3Z\" />\n        <path d=\"M502.8 199.6c-13.4-10-30.1-15.8-48.1-15.8c-44.7 0-81 36.2-81 81c0 44.7 36.3 81 81 81c44.8 0 81-36.3 81-81h-28.8c0 28.8-23.3 52.2-52.2 52.2c-8.2 0-16-1.9-22.9-5.3l11.9-11.9l-20.4-20.3l-12.9 12.8c-5-8-7.9-17.4-7.9-27.5c0-28.9 23.4-52.2 52.2-52.2c10.1 0 19.4 2.8 27.4 7.7Z\" fill-rule=\"evenodd\" />\n        <path d=\"M276.4 262.9c0 0-1-1.2-1-1.2c0 0-3.6 4-3.6 4c0 0 1.9 2.8 1.9 2.8c0 0 .2 1.1 .2 1.1c0 0 5.4 0 5.4 0c0 0 0-1.2 0-1.2c0 0 1.7-2.6 1.7-2.6c0 0-3.5-3.7-3.5-3.7c0 0-1.1 .8-1.1 .8Z\" />\n      </g>\n      <path stroke=\"#000\" stroke-width=\"30\" d=\"M0-268.8c148.4 0 268.8 120.4 268.8 268.8c0 148.4-120.4 268.8-268.8 268.8c-148.4 0-268.8-120.4-268.8-268.8c0-148.4 120.4-268.8 268.8-268.8Z\" fill=\"none\" display=\"block\" transform=\"translate(417.6,301.3) scale(.977,.977)\" />\n    </g>\n    <g opacity=\"0\" transform=\"translate(0,0) scale(.1,.1)\">\n      <g display=\"block\" mask=\"url(#").concat(iconPrefix, "_forward_Mask-16)\" transform=\"translate(7.3,-7.3)\">\n        <path d=\"M224.2 478.3c0 0-210.6 210.5-210.6 210.5c0 0 20.4 20.4 20.4 20.4c0 0 210.7-210.7 210.7-210.7c-11.7-11-5.9-6-20.5-20.2Z\" />\n      </g>\n      <g display=\"block\" mask=\"url(#").concat(iconPrefix, "_forward_Mask-17)\">\n        <path d=\"M275.4 426.9c0 0-19.3 19.5-19.3 19.5c0 0-62.5 62.4-62.5 62.4c0 0 20.4 20.4 20.4 20.4c0 0 62.4-62.4 62.4-62.4c0 0 19.9-19.7 19.9-19.7c0 0-20.9-20.2-20.9-20.2Z\" />\n        <path d=\"M411.4 291.3l20.7 20.7l.1-0.1c6.8 3.2 14.5 5.1 22.5 5.1c28.9 0 52.2-23.4 52.2-52.2h28.8c0 44.7-36.2 81-81 81c-44.7 0-81-36.3-81-81c0-44.8 36.3-81 81-81c18 0 21.9 6.3 35.3 16.2l-7.9 20.3c-8-4.9-17.3-7.7-27.4-7.7c-28.8 0-52.2 23.3-52.2 52.2c0 10.1 2.9 19.5 7.9 27.5Z\" fill-rule=\"evenodd\" />\n      </g>\n      <path stroke=\"#000\" stroke-width=\"30\" d=\"M0-265.6c146.6 0 265.6 119 265.6 265.6c0 146.6-119 265.6-265.6 265.6c-146.6 0-265.6-119-265.6-265.6c0-146.6 119-265.6 265.6-265.6Z\" fill=\"none\" display=\"block\" transform=\"translate(420,299.1) scale(.977,.977)\" />\n    </g>\n    <g opacity=\"0\" transform=\"translate(0,0) scale(.1,.1)\">\n      <g display=\"block\" mask=\"url(#").concat(iconPrefix, "_forward_Mask-18)\" transform=\"translate(4,-4)\">\n        <path d=\"M224.2 478.3c0 0-210.6 210.5-210.6 210.5c0 0 20.4 20.4 20.4 20.4c0 0 210.7-210.7 210.7-210.7c-11.7-11-5.9-6-20.5-20.2Z\" />\n      </g>\n      <g display=\"block\" mask=\"url(#").concat(iconPrefix, "_forward_Mask-19)\">\n        <path d=\"M265.4 437.1c0 0-9.3 9.3-9.3 9.3c0 0-62.5 62.4-62.5 62.4c0 0 20.4 20.4 20.4 20.4c0 0 62.4-62.4 62.4-62.4c0 0 9.8-9.6 9.8-9.6c0 0-20.8-20.1-20.8-20.1Z\" />\n        <path d=\"M403 299.3l20.9 20.9l8.3-8.3c6.8 3.2 14.5 5.1 22.5 5.1c28.9 0 52.2-23.4 52.2-52.2h28.8c0 44.7-36.2 81-81 81c-44.7 0-81-36.3-81-81c0-44.8 36.3-81 81-81c18 0 34.6 5.8 48.1 15.8l-20.7 20.7c-8-4.9-17.3-7.7-27.4-7.7c-28.8 0-52.2 23.3-52.2 52.2c0 10 2.9 19.3 7.8 27.3Z\" fill-rule=\"evenodd\" />\n      </g>\n      <path stroke=\"#000\" stroke-width=\"30\" d=\"M0-263.8c145.6 0 263.8 118.2 263.8 263.8c0 145.6-118.2 263.8-263.8 263.8c-145.6 0-263.8-118.2-263.8-263.8c0-145.6 118.2-263.8 263.8-263.8Z\" fill=\"none\" display=\"block\" transform=\"translate(421.2,297.8) scale(.977,.977)\" />\n    </g>\n    <g clip-path=\"url(#").concat(iconPrefix, "_forward_ClipPath-1)\" opacity=\"0\" transform=\"translate(0,0) scale(.1,.1)\">\n      <g display=\"block\" mask=\"url(#").concat(iconPrefix, "_forward_Mask-20)\">\n        <path d=\"M224.2 478.3c0 0-210.6 210.5-210.6 210.5c0 0 20.4 20.4 20.4 20.4c0 0 210.7-210.7 210.7-210.7c-11.7-11-5.9-6-20.5-20.2Z\" />\n      </g>\n      <path stroke=\"#000\" stroke-width=\"30\" d=\"M0-261.7c144.4 0 261.7 117.3 261.7 261.7c0 144.4-117.3 261.7-261.7 261.7c-144.4 0-261.7-117.3-261.7-261.7c0-144.4 117.3-261.7 261.7-261.7Z\" fill=\"none\" display=\"block\" transform=\"translate(422.8,296.4) scale(.977,.977)\" />\n    </g>");
    }
  });

  var email = new SVGIcon({
    name: 'email',
    path: 'M12,-3.55271368e-15 C8.81712,-3.55271368e-15 5.7648,1.26468 3.5148,3.5148 C1.2648,5.76492 3.55271368e-15,8.81736 3.55271368e-15,12 C3.55271368e-15,15.18264 1.26468,18.2352 3.5148,20.4852 C5.76492,22.7352 8.81736,24 12,24 C15.18264,24 18.2352,22.73532 20.4852,20.4852 C22.7352,18.23508 24,15.18264 24,12 C24,8.81736 22.73532,5.7648 20.4852,3.5148 C18.23508,1.2648 15.18264,-3.55271368e-15 12,-3.55271368e-15 Z M17.28,7.92 L12,11.87064 L6.72,7.92 L17.28,7.92 Z M18,15.64776 C18,15.7743216 17.9446872,15.894312 17.85,15.976824 C17.7543744,16.059324 17.6278128,16.096824 17.503128,16.0799496 L6.479928,16.0799496 C6.352428,16.0940122 6.224928,16.0499496 6.13212,15.961824 C6.0402456,15.8727624 5.9914944,15.7471368 5.9999328,15.618696 L5.9999328,9.047736 L5.9999328,8.441184 L7.9536768,9.90744 L11.6398368,12.67224 C11.839524,12.8681784 12.1601568,12.8681784 12.3598368,12.67224 L17.8939968,8.51736 L17.9849352,8.44986 L17.9858726,8.45079768 C17.9914978,8.48548488 17.9952478,8.52111048 17.9971226,8.55579768 L17.9971226,15.6386777 L18,15.64776 Z'
  });

  var iconsArray = [thumbIcon, receiptIcon, pantheonIcon, micIcon, directionsIcon, calendarIcon, calloutIcon, infoIcon, briefcaseIcon, kabobIcon, personIcon, magnifyingGlassIcon, officeIcon, linkIcon, windowIcon, phoneIcon, tagIcon, documentIcon, chevronIcon, supportIcon, yextIcon, pinIcon, gearIcon, lightBulbIcon, elements, close, yextAnimatedForward, yextAnimatedReverse, email, starIcon];
  var Icons = {};
  iconsArray.forEach(function (icon) {
    Icons[icon.name] = icon.markup();
  });
  Icons["default"] = starIcon.markup();

  /**
   * HandlebarsRenderer is a wrapper around the nativate handlebars renderer.
   * @extends Renderer
   */

  var HandlebarsRenderer =
  /*#__PURE__*/
  function (_Renderer) {
    _inherits(HandlebarsRenderer, _Renderer);

    function HandlebarsRenderer() {
      var _this;

      var templates = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      _classCallCheck(this, HandlebarsRenderer);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(HandlebarsRenderer).call(this));
      /**
       * A local reference to the handlebars compiler
       * @type {Handlebars}
       * @private
       */

      _this._handlebars = templates._hb || null;
      /**
       * A local reference to the pre-compiled handlebars templates
       * @type {Handlebars}
       * @private
       */

      _this._templates = templates || {};
      return _this;
    }

    _createClass(HandlebarsRenderer, [{
      key: "init",
      value: function init(templates) {
        // Assign the handlebars compiler and templates based on
        // information provided from external dep (in default case, it comes from external server request)
        this._handlebars = templates._hb;
        this._templates = templates; // TODO(billy) Once we re-write templates using the new helpers library
        // we probably don't need these custom helpers anymore

        this._registerCustomHelpers();
      }
      /**
       * registerHelper is a public interface for external dependencies to
       * register their own custom helpers to our internal Handlebars Compiler
       */

    }, {
      key: "registerHelper",
      value: function registerHelper(name, cb) {
        this._handlebars.registerHelper(name, cb);
      }
      /**
       * SafeString is a public interface for external dependencies to
       * mark a string as 'safe'. Handlebars will not escape a SafeString
       */

    }, {
      key: "SafeString",
      value: function SafeString(string) {
        return new this._handlebars.SafeString(string);
      }
      /**
       * EscapeExpression is a public interface for external dependencies to
       * escape a string
       */

    }, {
      key: "escapeExpression",
      value: function escapeExpression(string) {
        return this._handlebars.escapeExpression(string);
      }
      /**
       * compile a handlebars template so that it can be rendered,
       * using the {Handlebars} compiler
       * @param {string} template The template string to compile
       */

    }, {
      key: "compile",
      value: function compile(template) {
        if (typeof template !== 'string') {
          return '';
        }

        return this._handlebars.compile(template);
      }
      /**
       * render will render a template with data
       * @param {Object} config Provide either a templateName or a pre-compiled template
       * @param {Object} data The data to provide to the template
       */

    }, {
      key: "render",
      value: function render(config, data) {
        // If a custom template is provided, use it,
        // otherwise fall back to the template name
        // TODO(billy) This interface should probably be less ugly
        if (config.template !== null) {
          return config.template(data);
        }

        try {
          return this._templates[config.templateName](data);
        } catch (e) {
          throw new Error('Can not find/render template: ' + config.templateName, e);
        }
      }
    }, {
      key: "_registerCustomHelpers",
      value: function _registerCustomHelpers() {
        this.registerHelper('ifeq', function (arg1, arg2, options) {
          return arg1 === arg2 ? options.fn(this) : options.inverse(this);
        });
        this.registerHelper('ifnoteq', function (arg1, arg2, options) {
          return arg1 !== arg2 ? options.fn(this) : options.inverse(this);
        });
        this.registerHelper('formatPhoneNumber', function (phoneNumberString) {
          var cleaned = ('' + phoneNumberString).replace(/\D/g, '');
          var match = cleaned.match(/^(1|)?(\d{3})(\d{3})(\d{4})$/);

          if (match) {
            var intlCode = match[1] ? '+1 ' : '';
            return [intlCode, '(', match[2], ') ', match[3], '-', match[4]].join('');
          }

          return null;
        });
        this.registerHelper('assign', function (name, value, options) {
          var args = arguments;
          options = args[args.length - 1];

          if (!options.data.root) {
            options.data.root = {};
          }

          var v = '';

          for (var i = 1; i < args.length - 1; i++) {
            v = v + args[i];
          }

          options.data.root[name] = v;
        });
        this.registerHelper('json', function (name, value, options) {
          return name === undefined ? '' : JSON.stringify(name);
        });
        this.registerHelper('plural', function (number, singularText, pluralText) {
          return number === 1 ? singularText : pluralText;
        });
        var self = this;
        self.registerHelper('icon', function (name, complexContentsParams, options) {
          var icon = Icons["default"];

          if (!Icons[name]) {
            return self.SafeString(icon);
          }

          if (typeof Icons[name] === 'function') {
            icon = Icons[name](complexContentsParams);
          } else {
            icon = Icons[name];
          }

          return self.SafeString(icon);
        });
        self.registerHelper('highlightValue', function (value, getInverted) {
          var escapedInput = self.escapeExpression(value.value || value.shortValue);
          var highlightedVal = new HighlightedValue({
            value: escapedInput,
            matchedSubstrings: value.matchedSubstrings
          });
          return getInverted ? self.SafeString(highlightedVal.getInverted()) : self.SafeString(highlightedVal.get());
        });
      }
    }]);

    return HandlebarsRenderer;
  }(Renderer);

  /** @module */
  // E.g. Mustache, SOY, HandleBars, React, etc.

  var Renderers = {
    SOY: Renderer,
    Handlebars: HandlebarsRenderer
  };

  /** @module */

  /** The current lib version, reported with errors and analytics */
  var LIB_VERSION = 'v1.3.1';
  /** The identifier of the production environment */

  var PRODUCTION = 'production';
  /** The identifier of the sandbox environment */

  var SANDBOX = 'sandbox';
  /** The default url for compiled component templates */

  var COMPILED_TEMPLATES_URL = "https://assets.sitescdn.net/answers/".concat(LIB_VERSION, "/answerstemplates.compiled.min.js");

  /**
   * DefaultTemplatesLoader exposes an interface for loading the default set of compiled templates
   * asynchronously from the server. Note that this class cannot be repurposed to fetch custom
   * templates hosted by a client.
   */

  var DefaultTemplatesLoader =
  /*#__PURE__*/
  function () {
    function DefaultTemplatesLoader(onLoaded) {
      _classCallCheck(this, DefaultTemplatesLoader);

      if (!DefaultTemplatesLoader.setInstance(this)) {
        return DefaultTemplatesLoader.getInstance();
      }

      this._templates = {};

      this._onLoaded = onLoaded || function () {};

      this._fetchTemplates();
    }

    _createClass(DefaultTemplatesLoader, [{
      key: "_fetchTemplates",
      value: function _fetchTemplates() {
        // If template have already been loaded, do nothing
        var node = DOM.query('#yext-answers-templates');

        if (node) {
          return;
        } // Inject a script to fetch the compiled templates,
        // wrapping it a Promise for cleanliness


        return new Promise(function (resolve, reject) {
          var script = DOM.createEl('script', {
            id: 'yext-answers-templates',
            onload: resolve,
            onerror: reject,
            async: true,
            src: COMPILED_TEMPLATES_URL
          });
          DOM.append('body', script);
        });
      }
      /**
       * register the templates internally so that they can be later consumed
       * (e.g. by components and renderers) with convienience.
       *
       * `fetchTemplates` will automatically call this, providing the compiled templates from the server.
       */

    }, {
      key: "register",
      value: function register(templates) {
        this._templates = templates; // Notify our consumers that the templates are here :)

        this._onLoaded(this._templates);

        return this;
      }
    }, {
      key: "get",
      value: function get(templateName) {
        return this._templates[templateName];
      }
      /**
       * @return The internal template collection
       */

    }, {
      key: "getTemplates",
      value: function getTemplates() {
        return this._templates;
      }
    }], [{
      key: "setInstance",
      value: function setInstance(instance) {
        if (!this.instance) {
          this.instance = instance;
          return true;
        }

        return false;
      }
    }, {
      key: "getInstance",
      value: function getInstance() {
        return this.instance;
      }
    }]);

    return DefaultTemplatesLoader;
  }();

  /** @module */

  /** @module EventEmitter */

  /**
   * EventEmitter is a base class for any object that wants to expose
   * a pub/sub interface, for emitting messages and providing listeners.
   */
  var EventEmitter =
  /*#__PURE__*/
  function () {
    function EventEmitter() {
      _classCallCheck(this, EventEmitter);

      /**
       * The subscribers of messages
       * @type {object[]}
       * @private
       */
      this._listeners = {};
    }
    /**
     * on is the public interface for subscribing events that are emitted.
     * @param {string} evt the event name to listen to
     * @param {function} cb The callback to invoke when the {evt} is emitted
     * @param {boolean} once Optional value which will only handle the message once
     */


    _createClass(EventEmitter, [{
      key: "on",
      value: function on(evt, cb, once) {
        if (typeof cb !== 'function') {
          throw new Error('callback handler should be of type {function}');
        }

        if (this._listeners[evt] === undefined) {
          this._listeners[evt] = [];
        }

        this._listeners[evt].push({
          event: evt,
          cb: cb,
          once: once || false
        });

        return this;
      }
      /**
       * once is the public interface for subscribing events that are emitted.
       * The handler will only be triggered once.
       *
       * @param {string} evt the event name to listen to
       * @param {function} cb The callback to invoke when the {evt} is emitted
       * @param {boolean} once Optional value which will only handle the message once
       */

    }, {
      key: "once",
      value: function once(evt, cb) {
        return this.on(evt, cb, true);
      }
      /**
       * off is the public interface for unsubscribing from an event
       * @param {string} evt the event name to unsubscribe from
       */

    }, {
      key: "off",
      value: function off(evt) {
        delete this._listeners[evt];
        return this;
      }
      /**
       * emit is the public interface for broadcasting messages/events
       * @param {string} evt the event name to publish from
       * @param {Object} data the data to send along to the subscribers
       */

    }, {
      key: "emit",
      value: function emit(evt, data) {
        var listeners = this._listeners[evt];

        if (listeners === undefined) {
          return;
        } // Invoke each of all the listener handlers and remove the ones that should fire only once.


        var keep = [];

        for (var i = 0; i < listeners.length; i++) {
          listeners[i].cb(data);

          if (listeners[i].once === true) {
            continue;
          } // Instead of having a 'dirty' array with deleted or 'undefined' entries,
          // we just create a brand new array without the listeners that were removed


          keep.push(listeners[i]);
        } // Update our old list of listeners to the newly created array


        this._listeners[evt] = keep;
        return this;
      }
    }]);

    return EventEmitter;
  }();

  /**
   * State contains the data for the component
   * and exposes an {EventEmitter} interface so that external
   * dependencies can listen/hook subscribe to messages/updates.
   * @extends EventEmitter
   */

  var State =
  /*#__PURE__*/
  function (_EventEmitter) {
    _inherits(State, _EventEmitter);

    function State(data) {
      var _this;

      _classCallCheck(this, State);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(State).call(this));
      /**
       * The initial state of the component
       * @type {Object}
       * @private
       */

      _this._state = data || {};
      return _this;
    }
    /**
     * Set the initial state of the component.
     * NOTE(billy): Does not fire an update message
     */


    _createClass(State, [{
      key: "init",
      value: function init(prop, optVal) {
        this._set(prop, optVal);
      }
      /**
       * setter for the state
       * @param prop {string|Object} The property to set
       * @param optVal Optional, if prop is a {string}, it will assign the value to that property
       */

    }, {
      key: "set",
      value: function set(prop, optVal) {
        this._set(prop, optVal);

        this.emit('update');
      }
      /**
       * setter for the state enables you to update a single property, or complete state
       * depending on the arguments provided.
       * @param prop {string|Object} The property to set
       * @param optVal If prop is a {string}, provide its value
       * @private
       */

    }, {
      key: "_set",
      value: function _set(prop, optVal) {
        if (optVal === undefined) {
          this._state = prop;
        } else {
          this._state[prop] = optVal;
        }
      }
    }, {
      key: "update",
      value: function update(data) {
        this._state = data;
        this.emit('update');
      }
      /**
       * Retrieve a properties value from the state
       * If no property provided, return the full state
       * @param {string} optProp optional property to retrieve
       */

    }, {
      key: "get",
      value: function get(optProp) {
        if (optProp === undefined) {
          return this._state;
        }

        return this._state[optProp];
      }
    }, {
      key: "has",
      value: function has(prop) {
        return this._state[prop] !== undefined;
      }
    }, {
      key: "asJSON",
      value: function asJSON() {
        return this._state;
      }
    }]);

    return State;
  }(EventEmitter);

  var support = {
    searchParams: 'URLSearchParams' in self,
    iterable: 'Symbol' in self && 'iterator' in Symbol,
    blob:
      'FileReader' in self &&
      'Blob' in self &&
      (function() {
        try {
          new Blob();
          return true
        } catch (e) {
          return false
        }
      })(),
    formData: 'FormData' in self,
    arrayBuffer: 'ArrayBuffer' in self
  };

  function isDataView(obj) {
    return obj && DataView.prototype.isPrototypeOf(obj)
  }

  if (support.arrayBuffer) {
    var viewClasses = [
      '[object Int8Array]',
      '[object Uint8Array]',
      '[object Uint8ClampedArray]',
      '[object Int16Array]',
      '[object Uint16Array]',
      '[object Int32Array]',
      '[object Uint32Array]',
      '[object Float32Array]',
      '[object Float64Array]'
    ];

    var isArrayBufferView =
      ArrayBuffer.isView ||
      function(obj) {
        return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1
      };
  }

  function normalizeName(name) {
    if (typeof name !== 'string') {
      name = String(name);
    }
    if (/[^a-z0-9\-#$%&'*+.^_`|~]/i.test(name)) {
      throw new TypeError('Invalid character in header field name')
    }
    return name.toLowerCase()
  }

  function normalizeValue(value) {
    if (typeof value !== 'string') {
      value = String(value);
    }
    return value
  }

  // Build a destructive iterator for the value list
  function iteratorFor(items) {
    var iterator = {
      next: function() {
        var value = items.shift();
        return {done: value === undefined, value: value}
      }
    };

    if (support.iterable) {
      iterator[Symbol.iterator] = function() {
        return iterator
      };
    }

    return iterator
  }

  function Headers(headers) {
    this.map = {};

    if (headers instanceof Headers) {
      headers.forEach(function(value, name) {
        this.append(name, value);
      }, this);
    } else if (Array.isArray(headers)) {
      headers.forEach(function(header) {
        this.append(header[0], header[1]);
      }, this);
    } else if (headers) {
      Object.getOwnPropertyNames(headers).forEach(function(name) {
        this.append(name, headers[name]);
      }, this);
    }
  }

  Headers.prototype.append = function(name, value) {
    name = normalizeName(name);
    value = normalizeValue(value);
    var oldValue = this.map[name];
    this.map[name] = oldValue ? oldValue + ', ' + value : value;
  };

  Headers.prototype['delete'] = function(name) {
    delete this.map[normalizeName(name)];
  };

  Headers.prototype.get = function(name) {
    name = normalizeName(name);
    return this.has(name) ? this.map[name] : null
  };

  Headers.prototype.has = function(name) {
    return this.map.hasOwnProperty(normalizeName(name))
  };

  Headers.prototype.set = function(name, value) {
    this.map[normalizeName(name)] = normalizeValue(value);
  };

  Headers.prototype.forEach = function(callback, thisArg) {
    for (var name in this.map) {
      if (this.map.hasOwnProperty(name)) {
        callback.call(thisArg, this.map[name], name, this);
      }
    }
  };

  Headers.prototype.keys = function() {
    var items = [];
    this.forEach(function(value, name) {
      items.push(name);
    });
    return iteratorFor(items)
  };

  Headers.prototype.values = function() {
    var items = [];
    this.forEach(function(value) {
      items.push(value);
    });
    return iteratorFor(items)
  };

  Headers.prototype.entries = function() {
    var items = [];
    this.forEach(function(value, name) {
      items.push([name, value]);
    });
    return iteratorFor(items)
  };

  if (support.iterable) {
    Headers.prototype[Symbol.iterator] = Headers.prototype.entries;
  }

  function consumed(body) {
    if (body.bodyUsed) {
      return Promise.reject(new TypeError('Already read'))
    }
    body.bodyUsed = true;
  }

  function fileReaderReady(reader) {
    return new Promise(function(resolve, reject) {
      reader.onload = function() {
        resolve(reader.result);
      };
      reader.onerror = function() {
        reject(reader.error);
      };
    })
  }

  function readBlobAsArrayBuffer(blob) {
    var reader = new FileReader();
    var promise = fileReaderReady(reader);
    reader.readAsArrayBuffer(blob);
    return promise
  }

  function readBlobAsText(blob) {
    var reader = new FileReader();
    var promise = fileReaderReady(reader);
    reader.readAsText(blob);
    return promise
  }

  function readArrayBufferAsText(buf) {
    var view = new Uint8Array(buf);
    var chars = new Array(view.length);

    for (var i = 0; i < view.length; i++) {
      chars[i] = String.fromCharCode(view[i]);
    }
    return chars.join('')
  }

  function bufferClone(buf) {
    if (buf.slice) {
      return buf.slice(0)
    } else {
      var view = new Uint8Array(buf.byteLength);
      view.set(new Uint8Array(buf));
      return view.buffer
    }
  }

  function Body() {
    this.bodyUsed = false;

    this._initBody = function(body) {
      this._bodyInit = body;
      if (!body) {
        this._bodyText = '';
      } else if (typeof body === 'string') {
        this._bodyText = body;
      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
        this._bodyBlob = body;
      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
        this._bodyFormData = body;
      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
        this._bodyText = body.toString();
      } else if (support.arrayBuffer && support.blob && isDataView(body)) {
        this._bodyArrayBuffer = bufferClone(body.buffer);
        // IE 10-11 can't handle a DataView body.
        this._bodyInit = new Blob([this._bodyArrayBuffer]);
      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
        this._bodyArrayBuffer = bufferClone(body);
      } else {
        this._bodyText = body = Object.prototype.toString.call(body);
      }

      if (!this.headers.get('content-type')) {
        if (typeof body === 'string') {
          this.headers.set('content-type', 'text/plain;charset=UTF-8');
        } else if (this._bodyBlob && this._bodyBlob.type) {
          this.headers.set('content-type', this._bodyBlob.type);
        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
        }
      }
    };

    if (support.blob) {
      this.blob = function() {
        var rejected = consumed(this);
        if (rejected) {
          return rejected
        }

        if (this._bodyBlob) {
          return Promise.resolve(this._bodyBlob)
        } else if (this._bodyArrayBuffer) {
          return Promise.resolve(new Blob([this._bodyArrayBuffer]))
        } else if (this._bodyFormData) {
          throw new Error('could not read FormData body as blob')
        } else {
          return Promise.resolve(new Blob([this._bodyText]))
        }
      };

      this.arrayBuffer = function() {
        if (this._bodyArrayBuffer) {
          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)
        } else {
          return this.blob().then(readBlobAsArrayBuffer)
        }
      };
    }

    this.text = function() {
      var rejected = consumed(this);
      if (rejected) {
        return rejected
      }

      if (this._bodyBlob) {
        return readBlobAsText(this._bodyBlob)
      } else if (this._bodyArrayBuffer) {
        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))
      } else if (this._bodyFormData) {
        throw new Error('could not read FormData body as text')
      } else {
        return Promise.resolve(this._bodyText)
      }
    };

    if (support.formData) {
      this.formData = function() {
        return this.text().then(decode)
      };
    }

    this.json = function() {
      return this.text().then(JSON.parse)
    };

    return this
  }

  // HTTP methods whose capitalization should be normalized
  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];

  function normalizeMethod(method) {
    var upcased = method.toUpperCase();
    return methods.indexOf(upcased) > -1 ? upcased : method
  }

  function Request(input, options) {
    options = options || {};
    var body = options.body;

    if (input instanceof Request) {
      if (input.bodyUsed) {
        throw new TypeError('Already read')
      }
      this.url = input.url;
      this.credentials = input.credentials;
      if (!options.headers) {
        this.headers = new Headers(input.headers);
      }
      this.method = input.method;
      this.mode = input.mode;
      this.signal = input.signal;
      if (!body && input._bodyInit != null) {
        body = input._bodyInit;
        input.bodyUsed = true;
      }
    } else {
      this.url = String(input);
    }

    this.credentials = options.credentials || this.credentials || 'same-origin';
    if (options.headers || !this.headers) {
      this.headers = new Headers(options.headers);
    }
    this.method = normalizeMethod(options.method || this.method || 'GET');
    this.mode = options.mode || this.mode || null;
    this.signal = options.signal || this.signal;
    this.referrer = null;

    if ((this.method === 'GET' || this.method === 'HEAD') && body) {
      throw new TypeError('Body not allowed for GET or HEAD requests')
    }
    this._initBody(body);
  }

  Request.prototype.clone = function() {
    return new Request(this, {body: this._bodyInit})
  };

  function decode(body) {
    var form = new FormData();
    body
      .trim()
      .split('&')
      .forEach(function(bytes) {
        if (bytes) {
          var split = bytes.split('=');
          var name = split.shift().replace(/\+/g, ' ');
          var value = split.join('=').replace(/\+/g, ' ');
          form.append(decodeURIComponent(name), decodeURIComponent(value));
        }
      });
    return form
  }

  function parseHeaders(rawHeaders) {
    var headers = new Headers();
    // Replace instances of \r\n and \n followed by at least one space or horizontal tab with a space
    // https://tools.ietf.org/html/rfc7230#section-3.2
    var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, ' ');
    preProcessedHeaders.split(/\r?\n/).forEach(function(line) {
      var parts = line.split(':');
      var key = parts.shift().trim();
      if (key) {
        var value = parts.join(':').trim();
        headers.append(key, value);
      }
    });
    return headers
  }

  Body.call(Request.prototype);

  function Response(bodyInit, options) {
    if (!options) {
      options = {};
    }

    this.type = 'default';
    this.status = options.status === undefined ? 200 : options.status;
    this.ok = this.status >= 200 && this.status < 300;
    this.statusText = 'statusText' in options ? options.statusText : 'OK';
    this.headers = new Headers(options.headers);
    this.url = options.url || '';
    this._initBody(bodyInit);
  }

  Body.call(Response.prototype);

  Response.prototype.clone = function() {
    return new Response(this._bodyInit, {
      status: this.status,
      statusText: this.statusText,
      headers: new Headers(this.headers),
      url: this.url
    })
  };

  Response.error = function() {
    var response = new Response(null, {status: 0, statusText: ''});
    response.type = 'error';
    return response
  };

  var redirectStatuses = [301, 302, 303, 307, 308];

  Response.redirect = function(url, status) {
    if (redirectStatuses.indexOf(status) === -1) {
      throw new RangeError('Invalid status code')
    }

    return new Response(null, {status: status, headers: {location: url}})
  };

  var DOMException = self.DOMException;
  try {
    new DOMException();
  } catch (err) {
    DOMException = function(message, name) {
      this.message = message;
      this.name = name;
      var error = Error(message);
      this.stack = error.stack;
    };
    DOMException.prototype = Object.create(Error.prototype);
    DOMException.prototype.constructor = DOMException;
  }

  function fetch$1(input, init) {
    return new Promise(function(resolve, reject) {
      var request = new Request(input, init);

      if (request.signal && request.signal.aborted) {
        return reject(new DOMException('Aborted', 'AbortError'))
      }

      var xhr = new XMLHttpRequest();

      function abortXhr() {
        xhr.abort();
      }

      xhr.onload = function() {
        var options = {
          status: xhr.status,
          statusText: xhr.statusText,
          headers: parseHeaders(xhr.getAllResponseHeaders() || '')
        };
        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');
        var body = 'response' in xhr ? xhr.response : xhr.responseText;
        resolve(new Response(body, options));
      };

      xhr.onerror = function() {
        reject(new TypeError('Network request failed'));
      };

      xhr.ontimeout = function() {
        reject(new TypeError('Network request failed'));
      };

      xhr.onabort = function() {
        reject(new DOMException('Aborted', 'AbortError'));
      };

      xhr.open(request.method, request.url, true);

      if (request.credentials === 'include') {
        xhr.withCredentials = true;
      } else if (request.credentials === 'omit') {
        xhr.withCredentials = false;
      }

      if ('responseType' in xhr && support.blob) {
        xhr.responseType = 'blob';
      }

      request.headers.forEach(function(value, name) {
        xhr.setRequestHeader(name, value);
      });

      if (request.signal) {
        request.signal.addEventListener('abort', abortXhr);

        xhr.onreadystatechange = function() {
          // DONE (success or failure)
          if (xhr.readyState === 4) {
            request.signal.removeEventListener('abort', abortXhr);
          }
        };
      }

      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);
    })
  }

  fetch$1.polyfill = true;

  if (!self.fetch) {
    self.fetch = fetch$1;
    self.Headers = Headers;
    self.Request = Request;
    self.Response = Response;
  }

  /**
   * Types of HTTP requests
   */

  var Methods = {
    GET: 'get',
    POST: 'post',
    PUT: 'put',
    DELETE: 'delete'
  };
  /**
   * HttpRequester is a wrapper around the native implementation of AJAX
   * related matters. It's used to make all types of network requests
   * and exposes a promise interface.
   */

  var HttpRequester =
  /*#__PURE__*/
  function () {
    function HttpRequester() {
      _classCallCheck(this, HttpRequester);
    }

    _createClass(HttpRequester, [{
      key: "get",

      /**
       * Create a GET HTTP request
       * @param {string} url The url to make a request to
       * @param {Object} data The data to provide (gets encoded into the URL)
       * @param {Object} opts Configuration options to use for the request
       */
      value: function get(url, data, opts) {
        return this.request(Methods.GET, this.encodeParams(url, data), opts);
      }
      /**
       * Create a POST HTTP request
       * @param {string} url The url to make a request to
       * @param {Object} urlParams The params to encode into the URL
       * @param {Object} jsonBody The request body (json) to provide with the POST request
       * @param {Object} requestConfig Configuration options to use for the request
       */

    }, {
      key: "post",
      value: function post(url, urlParams, jsonBody, requestConfig) {
        return this.request(Methods.POST, this.encodeParams(url, urlParams), Object.assign({}, {
          body: JSON.stringify(jsonBody),
          credentials: undefined
        }, requestConfig));
      }
    }, {
      key: "request",
      value: function request(method, url, opts) {
        var reqArgs = Object.assign({}, {
          'method': method,
          'credentials': 'include'
        }, opts);
        return this._fetch(url, reqArgs);
      } // TODO (agrow) investigate removing this
      // Use imported fetchPolyfill if it does not already exist on window

    }, {
      key: "_fetch",
      value: function _fetch(url, reqArgs) {
        if (!window.fetch) {
          return fetch$1(url, reqArgs);
        }

        return fetch(url, reqArgs);
      }
      /**
       * Send a beacon to the provided url which will send a non-blocking request
       * to the server that is guaranteed to send before page load. No response is returned,
       * so beacons are primarily used for analytics reporting.
       * @param {string} url The url to send the beacon to
       * @param {object} data The data payload to send in the beacon
       * @return {boolean} true if the request is successfully queued
       */

    }, {
      key: "beacon",
      value: function beacon(url, data) {
        return this._sendBeacon(url, JSON.stringify(data));
      } // TODO (agrow) investigate removing this
      // Navigator.sendBeacon polyfill
      // Combination of the compact Financial Times polyfill:
      // https://github.com/Financial-Times/polyfill-library/blob/master/polyfills/navigator/sendBeacon/polyfill.js
      // with the async-by-default behavior of Miguel Mota's polyfill:
      // https://github.com/miguelmota/Navigator.sendBeacon/blob/master/sendbeacon.js

    }, {
      key: "_sendBeacon",
      value: function _sendBeacon(url, data) {
        if (window.navigator && window.navigator.sendBeacon) {
          return window.navigator.sendBeacon(url, data);
        }

        var event = window.event && window.event.type;
        var sync = event === 'unload' || event === 'beforeunload';
        var xhr = 'XMLHttpRequest' in window ? new XMLHttpRequest() : new ActiveXObject('Microsoft.XMLHTTP');
        xhr.open('POST', url, !sync);
        xhr.setRequestHeader('Accept', '*/*');

        if (typeof data === 'string') {
          xhr.setRequestHeader('Content-Type', 'text/plain;charset=UTF-8');
        } else if (Object.prototype.toString.call(data) === '[object Blob]') {
          if (data.type) {
            xhr.setRequestHeader('Content-Type', data.type);
          }
        }

        xhr.send(data);
        return true;
      }
    }, {
      key: "encodeParams",
      value: function encodeParams(url, params) {
        if (_typeof(params) !== 'object') {
          return;
        }

        var hasParam = url.indexOf('?') > -1;
        var searchQuery = '';

        for (var key in params) {
          if (!hasParam) {
            hasParam = true;
            searchQuery += '?';
          } else {
            searchQuery += '&';
          }

          searchQuery += key + '=' + encodeURIComponent(params[key]);
        }

        return url + searchQuery;
      }
    }]);

    return HttpRequester;
  }();

  /**
   * Returns the base url for the live api backend in the desired environment.
   * @param {string} env The desired environment.
   */

  function getLiveApiUrl() {
    var env = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : PRODUCTION;
    return env === SANDBOX ? 'https://liveapi-sandbox.yext.com' : 'https://liveapi.yext.com';
  }
  /**
   * Returns the base url for the live api backend in the desired environment.
   * @param {string} env The desired environment.
   */

  function getCachedLiveApiUrl() {
    var env = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : PRODUCTION;
    return env === SANDBOX ? 'https://liveapi-sandbox.yext.com' : 'https://liveapi-cached.yext.com';
  }
  /**
   * Returns the base url for the knowledge api backend in the desired environment.
   * @param {string} env The desired environment.
   */

  function getKnowledgeApiUrl() {
    var env = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : PRODUCTION;
    return env === SANDBOX ? 'https://api-sandbox.yext.com' : 'https://api.yext.com';
  }
  /**
   * Returns the base url for the analytics backend in the desired environment.
   * @param {string} env The desired environment.
   * @param {boolean} conversionTrackingEnabled If conversion tracking has been opted into.
   */

  function getAnalyticsUrl() {
    var env = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : PRODUCTION;
    var conversionTrackingEnabled = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

    if (conversionTrackingEnabled) {
      return env === SANDBOX ? 'https://sandbox-realtimeanalytics.yext.com' : 'https://realtimeanalytics.yext.com';
    }

    return env === SANDBOX ? 'https://sandbox-answers.yext-pixel.com' : 'https://answers.yext-pixel.com';
  }
  /**
   * Returns the passed in url with the query appended to it.
   * @param {string} url
   * @param {params} Object
   * @returns {string}
   */

  function addParamsToUrl(url) {
    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var urlParams = new SearchParams(window.location.search.substring(1));

    for (var paramKey in params) {
      urlParams.set(paramKey, params[paramKey]);
    }

    return url.split('?')[0] + '?' + urlParams;
  }

  /**
   * ApiRequest is the base class for all API requests.
   * It defines all of the core properties required to make a request
   */

  var ApiRequest =
  /*#__PURE__*/
  function () {
    // TODO (tmeyer): Create an ApiService interface and pass an implementation to the current
    // consumers of ApiRequest as a dependency.
    function ApiRequest() {
      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var globalStorage = arguments.length > 1 ? arguments[1] : undefined;

      _classCallCheck(this, ApiRequest);

      /**
       * An abstraction used for making network request and handling errors
       * @type {HttpRequester}
       * @private
       */
      this._requester = new HttpRequester();
      /**
       * The environment the request should be made to
       * @type {string}
       * @private
       */

      this._environment = opts.environment || PRODUCTION;
      /**
       * The baseUrl to use for making a request
       * @type {string}
       * @private
       */

      this._baseUrl = opts.baseUrl || getLiveApiUrl(this._environment);
      /**
       * The endpoint to use in the url (appended to the {baseUrl})
       * @type {string}
       * @private
       */

      this._endpoint = opts.endpoint || null;
      /**
       * The API Key to use for the request
       * @type {string}
       * @private
       */

      this._apiKey = opts.apiKey || null;
      /**
       * The version of the API to make a request to
       * @type {string}
       * @private
       */

      this._version = opts.version || 20190101;
      /**
       * Additional data params that are sent along with the request
       * @type {string}
       * @private
       */

      this._params = opts.params || {};

      if (!globalStorage) {
        throw new AnswersBasicError('Must include global storage', 'ApiRequest');
      }
      /**
       * @type {GlobalStorage}
       * @private
       */


      this._globalStorage = globalStorage;
    }
    /**
     * get creates a new `GET` request to the server using the configuration of the request class
     *
     * @param {Object} opts Any configuration options to use for the GET request.
     * @returns {Promise<Response>}
     */


    _createClass(ApiRequest, [{
      key: "get",
      value: function get(opts) {
        return this._requester.get(this._baseUrl + this._endpoint, Object.assign({}, this.baseParams(), this.sanitizeParams(this._params)), opts);
      }
      /**
       * @param {Object} opts
       * @returns {Promise<Response>}
       */

    }, {
      key: "post",
      value: function post(opts) {
        return this._requester.post(this._baseUrl + this._endpoint, this.baseParams()
        /* urlParams */
        , this.sanitizeParams(this._params)
        /* jsonBody */
        , opts
        /* requestConfig */
        );
      }
      /**
       * @returns {Object}
       * @private
       */

    }, {
      key: "baseParams",
      value: function baseParams() {
        var baseParams = {
          'v': this._version,
          'api_key': this._apiKey,
          'jsLibVersion': LIB_VERSION,
          'sessionTrackingEnabled': this._globalStorage.getState(StorageKeys.SESSIONS_OPT_IN)
        };
        var urlParams = new SearchParams(window.location.search.substring(1));

        if (urlParams.has('beta')) {
          baseParams['beta'] = urlParams.get('beta');
        }

        return baseParams;
      }
    }, {
      key: "sanitizeParams",
      value: function sanitizeParams() {
        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        // Remove any paramaters whos value is `undefined`.
        //
        // NOTE(billy) Probably better to be explicit about how to handle this at the request building level,
        // but I can't see any cases where we'd ever want to send 'undefined' as a value to the server.
        // So it's probably fine to 'clean' the params object here
        Object.keys(params).forEach(function (key) {
          if (params[key] === undefined || params[key] === null) {
            delete params[key];
          }
        });
        return params;
      }
    }]);

    return ApiRequest;
  }();

  /**
   * SearchApi is the API for doing various types of search
   * over the network (e.g. vertical or universal)
   *
   * @implements {SearchService}
   */

  var SearchApi =
  /*#__PURE__*/
  function () {
    function SearchApi() {
      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      _classCallCheck(this, SearchApi);

      /**
       * A local reference to the API Key to use for the request
       * @type {string}
       * @private
       */
      if (!config.apiKey) {
        throw new AnswersBasicError('Api Key is required', 'Search');
      }

      this._apiKey = config.apiKey;
      /**
       * A local reference to the Answers Key to use for the request
       * @type {string}
       * @private
       */

      if (!config.experienceKey) {
        throw new AnswersBasicError('Answers Key is required', 'Search');
      }

      this._experienceKey = config.experienceKey;
      /**
       * The answers config version to use for all requests
       * @type {string}
       * @private
       */

      this._experienceVersion = config.experienceVersion;
      /**
       * The version of the API to make a request to
       * @type {string}
       * @private
       */

      this._version = config.version || 20190101 || 20190301;
      /**
       * A local reference to the locale to use for the request
       * @type {string}
       * @private
       */

      if (!config.locale) {
        throw new AnswersBasicError('Locale is required', 'Search');
      }

      this._locale = config.locale;
      /**
       * The environment of the Answers experience
       * @type {string}
       * @private
       */

      this._environment = config.environment;
    }
    /** @inheritdoc */


    _createClass(SearchApi, [{
      key: "verticalSearch",
      value: function verticalSearch(verticalKey, _ref) {
        var input = _ref.input,
            filter = _ref.filter,
            facetFilter = _ref.facetFilter,
            limit = _ref.limit,
            offset = _ref.offset,
            id = _ref.id,
            geolocation = _ref.geolocation,
            isDynamicFiltersEnabled = _ref.isDynamicFiltersEnabled,
            skipSpellCheck = _ref.skipSpellCheck,
            queryTrigger = _ref.queryTrigger,
            sessionTrackingEnabled = _ref.sessionTrackingEnabled,
            sortBys = _ref.sortBys;

        if (limit > 50) {
          throw new AnswersCoreError('Provided search limit unsupported', 'SearchApi');
        }

        var requestConfig = {
          endpoint: '/v2/accounts/me/answers/vertical/query',
          apiKey: this._apiKey,
          version: this._version,
          environment: this._environment,
          params: {
            'input': input,
            'experienceKey': this._experienceKey,
            'version': this._experienceVersion,
            'filters': filter,
            'facetFilters': facetFilter,
            'verticalKey': verticalKey,
            'limit': limit,
            'offset': offset,
            'location': geolocation ? "".concat(geolocation.lat, ",").concat(geolocation.lng) : null,
            'radius': geolocation ? geolocation.radius : null,
            'queryId': id,
            'retrieveFacets': isDynamicFiltersEnabled,
            'locale': this._locale,
            'skipSpellCheck': skipSpellCheck,
            'queryTrigger': queryTrigger,
            'sessionTrackingEnabled': sessionTrackingEnabled,
            'sortBys': sortBys
          }
        };
        var request = new ApiRequest(requestConfig, {
          getState: function getState() {
            return sessionTrackingEnabled;
          }
        });
        return request.get().then(function (response) {
          return response.json();
        });
      }
      /** @inheritdoc */

    }, {
      key: "universalSearch",
      value: function universalSearch(queryString, params) {
        var requestConfig = {
          endpoint: '/v2/accounts/me/answers/query',
          apiKey: this._apiKey,
          version: this._version,
          environment: this._environment,
          params: {
            'input': queryString,
            'experienceKey': this._experienceKey,
            'location': params.geolocation ? "".concat(params.geolocation.lat, ",").concat(params.geolocation.lng) : null,
            'radius': params.geolocation ? params.geolocation.radius : null,
            'version': this._experienceVersion,
            'locale': this._locale,
            'skipSpellCheck': params.skipSpellCheck,
            'queryTrigger': params.queryTrigger
          }
        };
        var request = new ApiRequest(requestConfig, {
          getState: function getState() {
            return params.sessionTrackingEnabled;
          }
        });
        return request.get().then(function (response) {
          return response.json();
        });
      }
    }]);

    return SearchApi;
  }();

  /** @typedef {import('../services/analyticsreporterservice').default} AnalyticsReporterService */

  /**
   * Class for reporting analytics events to the server via HTTP
   *
   * @implements {AnalyticsReporterService}
   */

  var AnalyticsReporter =
  /*#__PURE__*/
  function () {
    function AnalyticsReporter(experienceKey, experienceVersion, businessId) {
      var globalOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
      var environment = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : PRODUCTION;

      _classCallCheck(this, AnalyticsReporter);

      /**
       * The internal business identifier used for reporting
       * @type {number}
       */
      this._businessId = businessId;
      /**
       * Options to include with every analytic event reported to the server
       * @type {object}
       * @private
       */

      this._globalOptions = Object.assign({}, globalOptions, {
        experienceKey: experienceKey
      });
      /**
       * The environment of the Answers experience
       * @type {string}
       * @private
       */

      this._environment = environment;
      /**
       * Base URL for the analytics API
       * @type {string}
       * @private
       */

      this._baseUrl = getAnalyticsUrl(this._environment);
      /**
       * Boolean indicating if opted in or out of conversion tracking
       * @type {boolean}
       * @private
       */

      this._conversionTrackingEnabled = false;

      if (experienceVersion) {
        this._globalOptions.experienceVersion = experienceVersion;
      }
    }

    _createClass(AnalyticsReporter, [{
      key: "getQueryId",
      value: function getQueryId() {
        return this._globalOptions.queryId;
      }
    }, {
      key: "setQueryId",
      value: function setQueryId(queryId) {
        this._globalOptions.queryId = queryId;
      }
      /** @inheritdoc */

    }, {
      key: "report",
      value: function report(event) {
        var cookieData = {};

        if (this._conversionTrackingEnabled && typeof ytag === 'function') {
          ytag('optin', true);
          cookieData = ytag('yfpc', null);
        } else if (this._conversionTrackingEnabled) {
          throw new AnswersAnalyticsError('Tried to enable conversion tracking without including ytag');
        }

        if (!(event instanceof AnalyticsEvent)) {
          throw new AnswersAnalyticsError('Tried to send invalid analytics event', event);
        }

        event.addOptions(this._globalOptions);
        return new HttpRequester().beacon("".concat(this._baseUrl, "/realtimeanalytics/data/answers/").concat(this._businessId), _objectSpread({
          data: event.toApiEvent()
        }, cookieData));
      }
      /** @inheritdoc */

    }, {
      key: "setConversionTrackingEnabled",
      value: function setConversionTrackingEnabled(isEnabled) {
        this._conversionTrackingEnabled = isEnabled;
        this._baseUrl = getAnalyticsUrl(this._environment, isEnabled);
      }
    }]);

    return AnalyticsReporter;
  }();

  /** @typedef {import('../services/analyticsreporterservice').default} AnalyticsReporterService */

  /**
   * @implements {AnalyticsReporterService}
   */
  var NoopAnalyticsReporter =
  /*#__PURE__*/
  function () {
    function NoopAnalyticsReporter() {
      _classCallCheck(this, NoopAnalyticsReporter);
    }

    _createClass(NoopAnalyticsReporter, [{
      key: "report",

      /** @inheritdoc */
      value: function report(event) {
        return true;
      }
      /** @inheritdoc */

    }, {
      key: "setConversionTrackingEnabled",
      value: function setConversionTrackingEnabled(isEnabled) {}
    }]);

    return NoopAnalyticsReporter;
  }();

  /**
   * ModuleData is used as a generic model for Storage.
   * Typically an instance of ModuleData powers a single component.

   * A data model that exposes an event emitter interface.
   * @extends EventEmitter
   */

  var ModuleData =
  /*#__PURE__*/
  function (_EventEmitter) {
    _inherits(ModuleData, _EventEmitter);

    function ModuleData(id) {
      var _this;

      var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      _classCallCheck(this, ModuleData);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(ModuleData).call(this));
      _this._id = id;
      _this._history = [];
      _this._data = data;

      _this.set(data);

      return _this;
    }
    /**
     * replaces the currently held data with the given data
     * @param {*} data the data to replace the current data
     */


    _createClass(ModuleData, [{
      key: "set",
      value: function set(data) {
        this.capturePrevious();

        if (_typeof(data) !== 'object' || Array.isArray(data) || Object.keys(data).length !== Object.keys(this._data).length) {
          this._data = data;
          this.emit('update', this._data);
          return;
        } // check for shallow equality


        for (var _i = 0, _Object$keys = Object.keys(data); _i < _Object$keys.length; _i++) {
          var key = _Object$keys[_i];

          if (this._data[key] !== data[key]) {
            this._data = data;
            this.emit('update', this._data);
            return;
          }
        }
      }
    }, {
      key: "capturePrevious",
      value: function capturePrevious() {
        if (this._history === undefined) {
          this._history = [];
        }

        if (this._history.length + 1 > 5) {
          this._history.shift();
        } // If data is ever undefined, we default to empty object


        this._history.push(JSON.stringify(this._data || {}));
      }
    }, {
      key: "undo",
      value: function undo() {
        var previous = {};

        if (this._previous.length > 0) {
          previous = JSON.parse(this._previous.pop());
        }

        this._data.set(previous);
      }
    }, {
      key: "raw",
      value: function raw() {
        return this._data;
      }
    }]);

    return ModuleData;
  }(EventEmitter);

  /**
   * Storage is a container around application state.
   * It exposes an interface for CRUD operations as well as listening
   * for stateful changes.
   */

  var GlobalStorage =
  /*#__PURE__*/
  function () {
    function GlobalStorage() {
      _classCallCheck(this, GlobalStorage);

      this._moduleDataContainer = {};
      this._futureListeners = {};
    }
    /**
     * Set the data in storage with the given key to the provided data,
     * completely overwriting any existing data.
     * @param {string} key the storage key to set
     * @param {*} data the data to set
     */


    _createClass(GlobalStorage, [{
      key: "set",
      value: function set(key, data) {
        this._initDataContainer(key, data);

        this._moduleDataContainer[key].set(data);
      }
      /**
       * Add all key/value pairs in the provided map to the storage
       * @param {*} data The key/value pairs to set in the storage
       */

    }, {
      key: "setAll",
      value: function setAll(data) {
        for (var _i = 0, _Object$entries = Object.entries(data); _i < _Object$entries.length; _i++) {
          var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),
              key = _Object$entries$_i[0],
              val = _Object$entries$_i[1];

          if (key === StorageKeys.QUERY) {
            continue;
          }

          this.set(key, val);
        } // Update query last since it triggers a search
        // TODO: move listeners up so all of storage can be updated at the same time


        if (data[StorageKeys.QUERY]) {
          this.set(StorageKeys.QUERY, data[StorageKeys.QUERY]);
        }
      }
    }, {
      key: "_initDataContainer",
      value: function _initDataContainer(key, data) {
        if (key === undefined || key === null || typeof key !== 'string') {
          throw new AnswersStorageError('Invalid storage key provided', key, data);
        }

        if (data === undefined || data === null) {
          throw new AnswersStorageError('No data provided', key, data);
        }

        if (this._moduleDataContainer[key] === undefined) {
          this._moduleDataContainer[key] = new ModuleData(key);

          this._applyFutureListeners(key);
        }
      }
    }, {
      key: "getState",
      value: function getState(moduleId) {
        if (this._moduleDataContainer[moduleId]) {
          return this._moduleDataContainer[moduleId].raw();
        }

        return null;
      }
    }, {
      key: "getAll",
      value: function getAll(key) {
        var data = [];

        for (var _i2 = 0, _Object$keys = Object.keys(this._moduleDataContainer); _i2 < _Object$keys.length; _i2++) {
          var dataKey = _Object$keys[_i2];

          if (dataKey.startsWith(key) && this._moduleDataContainer[dataKey].raw() !== null) {
            data.push(this._moduleDataContainer[dataKey].raw());
          }
        }

        return data;
      }
      /**
       * Remove the data in storage with the given key to the provided data,
       * @param {string} key the storage key to delete
       */

    }, {
      key: "delete",
      value: function _delete(key) {
        // Note: Do we need to clean up listeners here?
        delete this._moduleDataContainer[key];
      }
    }, {
      key: "on",
      value: function on(evt, moduleId, cb) {
        var moduleData = this._moduleDataContainer[moduleId];

        if (moduleData === undefined) {
          if (this._futureListeners[moduleId] === undefined) {
            this._futureListeners[moduleId] = [];
          }

          this._futureListeners[moduleId].push({
            event: evt,
            cb: cb
          });

          return;
        }

        this._moduleDataContainer[moduleId].on(evt, cb);

        return this;
      }
    }, {
      key: "off",
      value: function off(evt, moduleId, cb) {
        var moduleData = this._moduleDataContainer[moduleId];

        if (moduleData === undefined) {
          if (this._futureListeners[moduleId] !== undefined) {
            this._futureListeners[moduleId].pop();
          }

          return this;
        }

        this._moduleDataContainer[moduleId].off(evt, cb);

        return this;
      }
    }, {
      key: "_applyFutureListeners",
      value: function _applyFutureListeners(moduleId) {
        var futures = this._futureListeners[moduleId];

        if (!futures) {
          return;
        }

        for (var i = 0; i < futures.length; i++) {
          var future = futures[i];
          this.on(future.event, moduleId, future.cb);
        }

        delete this._futureListeners[moduleId];
      }
    }]);

    return GlobalStorage;
  }();

  /** @module */

  /**
   * Component is an abstraction that encapsulates state, behavior,
   * and view for a particular chunk of functionality on the page.
   *
   * The API exposes event life cycle hooks for when things are rendered,
   * mounted, created, etc.
   */

  var Component =
  /*#__PURE__*/
  function () {
    function Component() {
      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var systemConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      _classCallCheck(this, Component);

      this.moduleId = null;
      /**
       * Unique name of this component instance
       * Used to distinguish between other components of the same type
       * @type {String}
       */

      this.name = config.name || this.constructor.type;
      /**
       * Cache the options so that we can propogate properly to child components
       * @type {Object}
       */

      this._config = config;
      /**
       * An identifier used to classify the type of component.
       * The component manager uses this information in order to persist and organize components
       * @type {string|ComponentType}
       */

      this._type = this.constructor.name;
      /**
       * A local reference to the parent component, if exists
       * @type {Component}
       */

      this._parentContainer = config.parentContainer || null;
      /**
       * A container for all the child components
       * @type {Component[]}
       */

      this._children = [];
      /**
       * The state (data) of the component to be provided to the template for rendering
       * @type {object}
       */

      this._state = new State(config.state);
      /**
       * TODO(billy) This should be 'services'
       */

      this.core = systemConfig.core || null;
      /**
       * A local reference to the component manager, which contains all of the component classes
       * eligible to be created
       * @type {ComponentManager}
       */

      this.componentManager = systemConfig.componentManager || null;
      /**
       * A local reference to the analytics reporter, used to report events for this component
       * @type {AnalyticsReporter}
       */

      this.analyticsReporter = systemConfig.analyticsReporter || null;
      /**
       * Options to include with all analytic events sent by this component
       * @type {object}
       * @private
       */

      this._analyticsOptions = config.analyticsOptions || {};
      /**
       * A reference to the DOM node that the component will be appended to when mounted/rendered.
       * @type {HTMLElement}
       */

      if (this._parentContainer === null) {
        if (typeof config.container === 'string') {
          this._container = DOM.query(config.container) || null;

          if (this._container === null) {
            throw new Error('Cannot find container DOM node: ' + config.container);
          }
        }
      } else {
        this._container = DOM.query(this._parentContainer, config.container); // If we have a parent, and the container is missing from the DOM,
        // we construct the container and append it to the parent

        if (this._container === null) {
          this._container = DOM.createEl('div', {
            "class": config.container.substring(1, config.container.length)
          });
          DOM.append(this._parentContainer, this._container);
        }
      }
      /**
       * A custom class to be applied to {this._container} node
       * @type {string}
       */


      this._className = config["class"] || 'component';
      /**
       * A custom render function to be used instead of using the default renderer
       * @type {Renderer}
       */

      this._render = config.render || null;
      /**
       * A local reference to the default {Renderer} that will be used for rendering the template
       * @type {Renderer}
       */

      this._renderer = systemConfig.renderer || Renderers.Handlebars;
      /**
       * The template string to use for rendering the component
       * If this is left empty, we lookup the template the base templates using the templateName
       * @type {string}
       */

      this._template = config.template ? this._renderer.compile(config.template) : null;
      /**
       * The templateName to use for rendering the component.
       * This is only used if _template is empty.
       * @type {string}
       */

      this._templateName = config.templateName || this.constructor.defaultTemplateName(config);
      /**
       * An internal state indicating whether or not the component has been mounted to the DOM
       * @type {boolean}
       */

      this._isMounted = false;
      /**
       * A local reference to the callback, thats used to transform the internal data
       * models of the components, before it gets applied to the component state.
       * By default, no transformation happens.
       * @type {function}
       */

      this.transformData = config.transformData || this.transformData || function () {};
      /**
       * The a local reference to the callback that will be invoked when a component is created.
       * @type {function}
       */


      this.onCreate = config.onCreateOverride || this.onCreate || function () {};

      this.onCreate = this.onCreate.bind(this);
      /**
       * The a local reference to the callback that will be invoked when a component is Mounted.
       * @type {function}
       */

      this.onMount = config.onMountOverride || this.onMount || function () {};

      this.onMount = this.onMount.bind(this);
      /**
       * The a local reference to the callback that will be invoked when a components state is updated.
       * @type {function}
       */

      this.onUpdate = config.onUpdateOverride || this.onUpdate || function () {};

      this.onUpdate = this.onUpdate.bind(this);
      /**
       * A user provided onCreate callback
       * @type {function}
       */

      this.userOnCreate = config.onCreate || function () {};
      /**
       * A user provided onMount callback
       * @type {function}
       */


      this.userOnMount = config.onMount || function () {};
      /**
       * A user provided onUpdate callback
       * @type {function}
       */


      this.userOnUpdate = config.onUpdate || function () {};
    }
    /**
     * The template to render
     * @returns {string}
     * @override
     */


    _createClass(Component, [{
      key: "init",
      value: function init(opts) {
        var _this = this;

        try {
          this.setState(opts.data || opts.state || {});
          this.onCreate();
          this.userOnCreate();
        } catch (e) {
          throw new AnswersComponentError('Error initializing component', this.constructor.type, e);
        }

        this._state.on('update', function () {
          try {
            _this.onUpdate();

            _this.userOnUpdate();

            _this.unMount();

            _this.mount();
          } catch (e) {
            throw new AnswersComponentError('Error updating component', _this.constructor.type, e);
          }
        });

        DOM.addClass(this._container, this._className);
        return this;
      }
    }, {
      key: "setState",
      value: function setState(data) {
        var newState = Object.assign({}, {
          _config: this._config
        }, data);

        this._state.set(newState);

        return this;
      }
    }, {
      key: "getState",
      value: function getState(prop) {
        return this._state.get(prop);
      }
    }, {
      key: "hasState",
      value: function hasState(prop) {
        return this._state.has(prop);
      }
    }, {
      key: "transformData",
      value: function transformData(data) {
        return data;
      }
    }, {
      key: "addChild",
      value: function addChild(data, type, opts) {
        var childComponent = this.componentManager.create(type, Object.assign({
          name: data.name,
          parentContainer: this._container,
          data: data
        }, opts || {}, {
          _parentOpts: this._config
        }));

        this._children.push(childComponent);

        return childComponent;
      }
      /**
       * Unmount and remove this component and its children from the list
       * of active components
       */

    }, {
      key: "remove",
      value: function remove() {
        this._children.forEach(function (c) {
          return c.remove();
        });

        this.componentManager.remove(this);
      }
      /**
       * Set the render method to be used for rendering the component
       * @param {Function} render
       * @return {string}
       */

    }, {
      key: "setRender",
      value: function setRender(render) {
        this._render = render;
        return this;
      }
      /**
       * Set the renderer for the component
       * @param {RendererType} renderer
       */

    }, {
      key: "setRenderer",
      value: function setRenderer(renderer) {
        this._renderer = Renderers[renderer];
        return this;
      }
      /**
       * Sets the template for the component to use when rendering
       * @param {string} template
       */

    }, {
      key: "setTemplate",
      value: function setTemplate(template) {
        this._template = this._renderer.compile(template);
      }
    }, {
      key: "unMount",
      value: function unMount() {
        if (!this._container) {
          return this;
        }

        this._children.forEach(function (child) {
          child.unMount();
        });

        DOM.empty(this._container);

        this._children.forEach(function (c) {
          return c.remove();
        });

        this._children = [];
        this.onUnMount();
      }
    }, {
      key: "mount",
      value: function mount(container) {
        var _this2 = this;

        if (container) {
          this._container = container;
        }

        if (!this._container) {
          return this;
        }

        if (this.beforeMount() === false) {
          return this;
        }

        DOM.append(this._container, this.render(this._state.asJSON())); // Process the DOM to determine if we should create
        // in-memory sub-components for rendering

        var domComponents = DOM.queryAll(this._container, '[data-component]:not([data-is-component-mounted])');
        var data = this.transformData(JSON.parse(JSON.stringify(this._state.get())));
        domComponents.forEach(function (c) {
          return _this2._createSubcomponent(c, data);
        });

        this._children.forEach(function (child) {
          child.mount();
        }); // Attach analytics hooks as necessary


        if (this.analyticsReporter) {
          var domHooks = DOM.queryAll(this._container, '[data-eventtype]:not([data-is-analytics-attached])');
          domHooks.forEach(this._createAnalyticsHook.bind(this));
        }

        this._isMounted = true;
        this.onMount(this);
        this.userOnMount(this);
        return this;
      }
      /**
       * render the template using the {Renderer} with the current state and template of the component
       * @returns {string}
       */

    }, {
      key: "render",
      value: function render() {
        var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._state.get();
        this.beforeRender(); // Temporary fix for passing immutable data to transformData().

        data = this.transformData(JSON.parse(JSON.stringify(data)));
        var html = ''; // Use either the custom render function or the internal renderer
        // dependant on the component configuration

        if (typeof this._render === 'function') {
          html = this._render(data);

          if (typeof html !== 'string') {
            throw new Error('Render method must return HTML as type {string}');
          }
        } else {
          // Render the existing templates as a string
          html = this._renderer.render({
            template: this._template,
            templateName: this._templateName
          }, data);
        } // We create an HTML Document fragment with the rendered string
        // So that we can query it for processing of sub components


        var el = DOM.create(html);
        this.afterRender();
        return el.innerHTML;
      }
    }, {
      key: "_createSubcomponent",
      value: function _createSubcomponent(domComponent, data) {
        var _this3 = this;

        domComponent.dataset.isComponentMounted = true;
        var dataset = domComponent.dataset;
        var type = dataset.component;
        var prop = dataset.prop;
        var opts = dataset.opts ? JSON.parse(dataset.opts) : {};
        var childData = data[prop] || {};
        opts = _objectSpread({}, opts, {
          container: domComponent
        }); // TODO(billy) Right now, if we provide an array as the data prop,
        // the behavior is to create many components for each item in the array.
        // THAT interface SHOULD change to use a different property that defines
        // whether to array data should be used for a single component or
        // to create many components for each item.
        // Overloading and having this side effect is unintuitive and WRONG

        if (!Array.isArray(childData)) {
          // Rendering a sub component should be within the context,
          // of the node that we processed it from
          this.addChild(childData, type, opts);
          return;
        }

        childData.reverse();
        childData.forEach(function (data) {
          _this3.addChild(data, type, opts);
        });
      }
    }, {
      key: "_createAnalyticsHook",
      value: function _createAnalyticsHook(domComponent) {
        var _this4 = this;

        domComponent.dataset.isAnalyticsAttached = true;
        var dataset = domComponent.dataset;
        var type = dataset.eventtype;
        var label = dataset.eventlabel;
        var options = dataset.eventoptions ? JSON.parse(dataset.eventoptions) : {};
        DOM.on(domComponent, 'click', function (e) {
          var event = new AnalyticsEvent(type, label);
          event.addOptions(_this4._analyticsOptions);
          event.addOptions(options);

          _this4.analyticsReporter.report(event);
        });
      }
      /**
       * onCreate is triggered when the component is constructed
       * @param {function} the callback to invoke upon emit
       */

    }, {
      key: "onCreate",
      value: function onCreate(cb) {}
      /**
       * onUpdate is triggered when the state of the component changes
       * @param {function} the callback to invoke upon emit
       */

    }, {
      key: "onUpdate",
      value: function onUpdate(cb) {}
      /**
       * beforeRender event is triggered before the component is rendered
       * @param {function} the callback to invoke upon emit
       */

    }, {
      key: "beforeRender",
      value: function beforeRender(cb) {}
      /**
       * afterRender event is triggered after the component is rendered
       * @param {function} the callback to invoke upon emit
       */

    }, {
      key: "afterRender",
      value: function afterRender(cb) {}
      /**
       * onMount is triggered when the component is appended to the DOM
       * @param {function} the callback to invoke upon emit
       */

    }, {
      key: "onMount",
      value: function onMount(cb) {}
      /**
       * onUnMount is triggered when the component is removed from the DOM
       * @param {function} the callback to invoke upon emit
       */

    }, {
      key: "onUnMount",
      value: function onUnMount(cb) {}
      /**
       * beforeMount is triggered before the component is mounted to the DOM
       * @param {function} the callback to invoke upon emit
       */

    }, {
      key: "beforeMount",
      value: function beforeMount(cb) {}
      /**
       * onDestroy is triggered when the component is destroyed
       * @param {function} the callback to invoke upon emit
       */

    }, {
      key: "onDestroy",
      value: function onDestroy(cb) {}
    }], [{
      key: "defaultTemplateName",
      value: function defaultTemplateName(config) {
        return 'default';
      }
    }, {
      key: "areDuplicateNamesAllowed",
      value: function areDuplicateNamesAllowed() {
        return false;
      }
    }, {
      key: "type",
      get: function get() {
        return 'Component';
      }
    }]);

    return Component;
  }();

  /** @typedef {import('../services/errorreporterservice').default} ErrorReporterService */

  /**
   * ErrorReporter is used for reporting errors to the console and API
   *
   * @implements {ErrorReporterService}
   */

  var ErrorReporter =
  /*#__PURE__*/
  function () {
    function ErrorReporter(config, globalStorage) {
      var _this = this;

      _classCallCheck(this, ErrorReporter);

      /**
       * The apiKey to use for reporting
       * @type {string}
       */
      this.apiKey = config.apiKey;
      /**
       * The experienceKey to use when reporting
       * @type {string}
       */

      this.experienceKey = config.experienceKey;
      /**
       * The answers config version used for api requests
       * @type {string|number}
       */

      this.experienceVersion = config.experienceVersion || 'config1.0';
      /**
       * If true, print entire error objects to the console for inspection
       * @type {boolean}
       */

      this.printVerbose = config.printVerbose;
      /**
       * If true, report the error the server for logging and monitoring
       * @type {boolean}
       */

      this.sendToServer = config.sendToServer;
      /**
       * The global storage instance of the experience
       * @type {GlobalStorage}
       */

      if (this.sendToServer && !globalStorage) {
        throw new AnswersBasicError('Must include globalStorage to send errors to server', 'ErrorReporter');
      }

      this.globalStorage = globalStorage;
      /**
       * The environment of the Answers experience
       * @type {string}
       * @private
       */

      this.environment = config.environment; // Attach reporting listeners to window

      window.addEventListener('error', function (e) {
        return _this.report(e.error);
      });
      window.addEventListener('unhandledrejection', function (e) {
        return _this.report(e.error);
      });
    }
    /**
     * report pretty prints the error to the console, optionally
     * prints the entire error if `printVerbose` is true, and sends the
     * error to the server to be logged if `sendToServer` is true
     * @param {AnswersBaseError} err The error to be reported
     * @returns {AnswersBaseError} The reported error
     */


    _createClass(ErrorReporter, [{
      key: "report",
      value: function report(err) {
        if (!(err instanceof AnswersBaseError) || err.reported) {
          return;
        }

        err.reported = true;
        this.printError(err);

        if (this.sendToServer) {
          var requestConfig = {
            endpoint: '/v2/accounts/me/answers/errors',
            apiKey: this.apiKey,
            version: 20190301,
            environment: this.environment,
            params: {
              'libVersion': LIB_VERSION,
              'experienceVersion': this.experienceVersion,
              'experienceKey': this.experienceKey,
              'error': err.toJson()
            }
          };
          var request = new ApiRequest(requestConfig, this.globalStorage); // TODO(amullings): We should probably change this endpoint to POST,
          // ideally using the beacon API. Stack traces will likely easily hit URL
          // length limits.

          request.get()["catch"](console.err);
        }

        return err;
      }
      /**
       * prints the given error to the browser console
       * @param {AnswersBaseError} err The error to be printed
       */

    }, {
      key: "printError",
      value: function printError(err) {
        if (this.printVerbose) {
          console.error("error: ".concat(err.errorMessage, "\ncode: ").concat(err.errorCode, "\nboundary: ").concat(err.boundary, "\nstack: ").concat(err.stack));
        } else {
          console.error(err.toString());
        }
      }
    }]);

    return ErrorReporter;
  }();

  /** @typedef {import('../services/errorreporterservice').default} ErrorReporterService */

  /**
   * @implements {ErrorReporterService}
   */
  var ConsoleErrorReporter =
  /*#__PURE__*/
  function () {
    function ConsoleErrorReporter() {
      _classCallCheck(this, ConsoleErrorReporter);
    }

    _createClass(ConsoleErrorReporter, [{
      key: "report",

      /** @inheritdoc */
      value: function report(err) {
        console.error(err.toString());
      }
    }]);

    return ConsoleErrorReporter;
  }();

  /** @module PersistentStorage */

  var PersistentStorage =
  /*#__PURE__*/
  function () {
    function PersistentStorage() {
      var _this = this;

      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      _classCallCheck(this, PersistentStorage);

      /**
       * The current params model
       * @type {SearchParams}
       */
      this._params = new SearchParams(window.location.search.substring(1));
      /**
       * The current history edit timer, if any
       * @type {number}
       */

      this._historyTimer = null;
      /**
       * The list of listeners to every storage update
       * @type {function[]}
       */

      this._updateListener = config.updateListener || function () {};
      /**
       * The list of listeners to storage resets
       * @type {function[]}
       */


      this._resetListener = config.resetListener || function () {};

      window.onpopstate = function () {
        _this._params = new SearchParams(window.location.search.substring(1));

        _this._callListener(_this._updateListener);

        _this._callListener(_this._resetListener);
      };
    }
    /**
     * Insert the given key/value pair into storage
     * @param {string} key The key to insert the data in
     * @param {*} data The data to insert
     * @param {boolean} replace history instead of pushing new state
     */


    _createClass(PersistentStorage, [{
      key: "set",
      value: function set(key, data) {
        var replaceHistory = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

        if (typeof key !== 'string') {
          throw new AnswersStorageError('Storage data key must be a string', key, data);
        }

        var newData = data;

        if (typeof data !== 'string') {
          newData = JSON.stringify(data);
        }

        this._params.set(key, newData);

        this._updateHistory(replaceHistory);
      }
      /**
       * Delete the given key from storage
       * @param {string} key The key to delete
       * @param {boolean} replace history instead of pushing new state
       */

    }, {
      key: "delete",
      value: function _delete(key) {
        var replaceHistory = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

        this._params["delete"](key);

        this._updateHistory(replaceHistory);
      }
    }, {
      key: "_updateHistory",
      value: function _updateHistory() {
        var _this2 = this;

        var replaceHistory = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

        if (this._historyTimer) {
          clearTimeout(this._historyTimer);
        } // batch update calls across components to avoid updating the url too much


        this._historyTimer = setTimeout(function () {
          _this2._historyTimer = null;

          if (replaceHistory) {
            window.history.replaceState(null, null, "?".concat(_this2._params.toString()));
          } else {
            window.history.pushState(null, null, "?".concat(_this2._params.toString()));
          }

          _this2._callListener(_this2._updateListener);
        });
      }
      /**
       * Invoke the given list of callbacks with the current storage data
       * @param {function[]} listeners The callbacks to invoke
       * @private
       */

    }, {
      key: "_callListener",
      value: function _callListener(listener) {
        listener(this.getAll(), this._params.toString());
      }
      /**
       * Get all the key/value pairs in storage
       */

    }, {
      key: "getAll",
      value: function getAll() {
        var allParams = {};
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = this._params.entries()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var _step$value = _slicedToArray(_step.value, 2),
                key = _step$value[0],
                val = _step$value[1];

            allParams[key] = val;
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator["return"] != null) {
              _iterator["return"]();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        return allParams;
      }
    }]);

    return PersistentStorage;
  }();

  /** @module SearchConfig */

  var SearchConfig =
  /*#__PURE__*/
  function () {
    function SearchConfig() {
      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      _classCallCheck(this, SearchConfig);

      /**
       * The max results per search.
       * Also defines the number of results per page, if pagination is enabled
       * @type {number}
       */
      this.limit = config.limit || 20;
      /**
       * The vertical key to use for all searches
       * @type {string}
       */

      this.verticalKey = config.verticalKey || null;
      /**
       * A default search to use on initialization for vertical searchers, when the user has't provided a query
       * @type {string}
       */

      this.defaultInitialSearch = config.defaultInitialSearch;
      this.validate();
      Object.freeze(this);
    }

    _createClass(SearchConfig, [{
      key: "validate",
      value: function validate() {
        if (typeof this.limit !== 'number' || this.limit < 1 || this.limit > 50) {
          throw new AnswersConfigError('Search Limit must be between 1 and 50', 'SearchConfig');
        }
      }
    }]);

    return SearchConfig;
  }();

  /** @module AutoCompleteData */
  var AutoCompleteData =
  /*#__PURE__*/
  function () {
    function AutoCompleteData() {
      var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      _classCallCheck(this, AutoCompleteData);

      this.sections = data.sections || [];
      this.queryId = data.queryId || '';
      this.inputIntents = data.inputIntents || [];
      Object.freeze(this);
    }

    _createClass(AutoCompleteData, null, [{
      key: "from",
      value: function from(response) {
        var sections;

        if (response.sections) {
          sections = response.sections.map(function (s) {
            return {
              label: s.label,
              results: s.results.map(function (r) {
                return new AutoCompleteResult(r);
              })
            };
          });
        } else {
          sections = [{
            results: response.results.map(function (r) {
              return new AutoCompleteResult(r);
            })
          }];
        }

        var inputIntents = response.input ? response.input.queryIntents : [];
        return new AutoCompleteData({
          sections: sections,
          queryId: response.queryId,
          inputIntents: inputIntents
        });
      }
    }]);

    return AutoCompleteData;
  }();
  var AutoCompleteResult = function AutoCompleteResult() {
    var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, AutoCompleteResult);

    this.filter = data.filter || {};
    this.key = data.key || '';
    this.matchedSubstrings = data.matchedSubstrings || [];
    this.value = data.value || '';
    this.shortValue = data.shortValue || this.value;
    this.intents = data.queryIntents || [];
    Object.freeze(this);
  };

  /**
   * A Data Transformer that takes the response object from a AutoComplete request
   * And transforms in to a front-end oriented data structure that our
   * component library and core storage understand.
   *
   * TODO(billy) Create our own front-end data models
   */

  var AutoCompleteDataTransformer =
  /*#__PURE__*/
  function () {
    function AutoCompleteDataTransformer() {
      _classCallCheck(this, AutoCompleteDataTransformer);
    }

    _createClass(AutoCompleteDataTransformer, null, [{
      key: "clean",
      value: function clean(moduleId, data) {
        if (data.sections && data.sections.length === 0) {
          delete data.sections;
        }

        if (data.sections && data.sections.length === 1 && data.sections[0].results.length === 0) {
          delete data.sections;
        }

        return _defineProperty({}, moduleId, data);
      }
    }, {
      key: "universal",
      value: function universal(response) {
        return AutoCompleteData.from(response);
      }
    }, {
      key: "filter",
      value: function filter(response) {
        return AutoCompleteData.from(response);
      }
    }, {
      key: "vertical",
      value: function vertical(response) {
        return AutoCompleteData.from(response);
      }
    }]);

    return AutoCompleteDataTransformer;
  }();

  /** @typedef {import('./autocompleteservice').default} AutoCompleteService */

  /**
   * AutoCompleteApi exposes an interface for network related matters
   * for all the autocomplete endpoints.
   *
   * @implements {AutoCompleteService}
   */

  var AutoCompleteApi =
  /*#__PURE__*/
  function () {
    function AutoCompleteApi() {
      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var globalStorage = arguments.length > 1 ? arguments[1] : undefined;

      _classCallCheck(this, AutoCompleteApi);

      /**
       * The API Key to use for the request
       * @type {string}
       * @private
       */
      if (!config.apiKey) {
        throw new AnswersBasicError('Api Key is required', 'AutoComplete');
      }

      this._apiKey = config.apiKey;
      /**
       * The Answers Key to use for the request
       * @type {string}
       * @private
       */

      if (!config.experienceKey) {
        throw new AnswersBasicError('Answers Key is required', 'AutoComplete');
      }

      this._experienceKey = config.experienceKey;
      /**
       * The version of the API to make a request to
       * @type {string}
       * @private
       */

      this._version = config.version || 20190101 || 20190301;
      /**
       * The answers config version to use for all requests
       * @type {string}
       * @private
       */

      this._experienceVersion = config.experienceVersion;
      /**
       * The locale to use for the request
       * @type {string}
       * @private
       */

      if (!config.locale) {
        throw new AnswersBasicError('Locale is required', 'AutoComplete');
      }

      this._locale = config.locale;
      /**
       * The global storage instance of the experience
       * @type {GlobalStorage}
       * @private
       */

      if (!globalStorage) {
        throw new AnswersBasicError('Global storage is required', 'AutoComplete');
      }

      this._globalStorage = globalStorage;
      /**
       * The environment of the Answers experience
       * @type {string}
       * @private
       */

      this._environment = config.environment;
      /**
       * The base url for the autocomplete API request
       * @type {string}
       * @private
       */

      this._baseUrl = getCachedLiveApiUrl(this._environment);
    }
    /** @inheritdoc */


    _createClass(AutoCompleteApi, [{
      key: "queryFilter",
      value: function queryFilter(input, config) {
        var requestConfig = {
          endpoint: '/v2/accounts/me/answers/filtersearch',
          apiKey: this._apiKey,
          version: this._version,
          environment: this._environment,
          params: {
            'input': input,
            'experienceKey': this._experienceKey,
            'version': this._experienceVersion,
            'verticalKey': config.verticalKey,
            'locale': this._locale,
            'search_parameters': JSON.stringify(config.searchParameters)
          }
        };
        var request = new ApiRequest(requestConfig, this._globalStorage);
        return request.get().then(function (response) {
          return response.json();
        }).then(function (response) {
          return AutoCompleteDataTransformer.filter(response.response);
        })["catch"](function (error) {
          throw new AnswersEndpointError('Filter search request failed', 'AutoComplete', error);
        });
      }
      /** @inheritdoc */

    }, {
      key: "queryVertical",
      value: function queryVertical(input, verticalKey) {
        var requestConfig = {
          endpoint: '/v2/accounts/me/answers/vertical/autocomplete',
          apiKey: this._apiKey,
          version: this._version,
          environment: this._environment,
          baseUrl: this._baseUrl,
          params: {
            'input': input,
            'experienceKey': this._experienceKey,
            'version': this._experienceVersion,
            'verticalKey': verticalKey,
            'locale': this._locale
          }
        };
        var request = new ApiRequest(requestConfig, this._globalStorage);
        return request.get().then(function (response) {
          return response.json();
        }).then(function (response) {
          return AutoCompleteDataTransformer.vertical(response.response);
        })["catch"](function (error) {
          throw new AnswersEndpointError('Vertical search request failed', 'AutoComplete', error);
        });
      }
      /** @inheritdoc */

    }, {
      key: "queryUniversal",
      value: function queryUniversal(queryString) {
        var requestConfig = {
          endpoint: '/v2/accounts/me/answers/autocomplete',
          apiKey: this._apiKey,
          version: this._version,
          environment: this._environment,
          baseUrl: this._baseUrl,
          params: {
            'input': queryString,
            'experienceKey': this._experienceKey,
            'version': this._experienceVersion,
            'locale': this._locale
          }
        };
        var request = new ApiRequest(requestConfig, this._globalStorage);
        return request.get().then(function (response) {
          return response.json();
        }).then(function (response) {
          return AutoCompleteDataTransformer.universal(response.response);
        })["catch"](function (error) {
          throw new AnswersEndpointError('Universal search request failed', 'AutoComplete', error);
        });
      }
    }]);

    return AutoCompleteApi;
  }();

  /** @typedef {import('../services/autocompleteservice').default} AutoCompleteService */

  var universalOptions = ['what is yext', 'who is the ceo of yext'];
  var verticalOptions = ['near me', 'in new york', 'available now'];
  /**
   * MockAutoCompleteService serves autocomplete queries with mock data
   *
   * @implements {AutoCompleteService}
   */

  var MockAutoCompleteService =
  /*#__PURE__*/
  function () {
    function MockAutoCompleteService() {
      _classCallCheck(this, MockAutoCompleteService);
    }

    _createClass(MockAutoCompleteService, [{
      key: "queryFilter",

      /** @inheritdoc */
      value: function queryFilter(input, config) {
        // TODO(amullings): Simulate filter search, with sections
        return emptyResults();
      }
      /** @inheritdoc */

    }, {
      key: "queryVertical",
      value: function queryVertical(input, verticalKey) {
        return filterOptions(input, verticalOptions.map(function (opt) {
          return "".concat(verticalKey, " ").concat(opt);
        }).concat(universalOptions));
      }
      /** @inheritdoc */

    }, {
      key: "queryUniversal",
      value: function queryUniversal(input) {
        return filterOptions(input, universalOptions);
      }
    }]);

    return MockAutoCompleteService;
  }();

  function filterOptions(input, options) {
    if (input.length === 0) {
      return emptyResults();
    }

    var lowercase = input.toLowerCase();
    var results = options.filter(function (opt) {
      return opt.includes(lowercase);
    }).map(function (opt) {
      return new AutoCompleteResult({
        value: opt,
        matchedSubstrings: [{
          offset: opt.indexOf(lowercase),
          length: lowercase.length
        }]
      });
    });
    return Promise.resolve(new AutoCompleteData({
      sections: [{
        results: results
      }],
      queryId: randomString()
    }));
  }
  /**
   * @returns {Promise<AutoCompleteData>}
   */


  function emptyResults() {
    return Promise.resolve(new AutoCompleteData({
      sections: [{}],
      queryId: randomString()
    }));
  }
  /**
   * @returns {string}
   */


  function randomString() {
    return Math.random().toString(36).substring(2);
  }

  /** @typedef {import('./questionanswerservice').default} QuestionAnswerService */

  /**
   * QuestionAnswerApi submits questions via the Q&A REST API
   *
   * @implements {QuestionAnswerService}
   */

  var QuestionAnswerApi =
  /*#__PURE__*/
  function () {
    function QuestionAnswerApi() {
      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var globalStorage = arguments.length > 1 ? arguments[1] : undefined;

      _classCallCheck(this, QuestionAnswerApi);

      /**
       * The API Key to use for the request
       * @type {string}
       * @private
       */
      if (!config.apiKey) {
        throw new AnswersBasicError('Api Key is required', 'QuestionAnswerApi');
      }

      this._apiKey = config.apiKey;
      /**
       * The global storage instance of the experience
       * @type {GlobalStorage}
       * @private
       */

      if (!globalStorage) {
        throw new AnswersBasicError('Global storage is required', 'QuestionAnswerApi');
      }

      this._globalStorage = globalStorage;
      /**
       * The environment of the Answers experience
       * @type {string}
       * @private
       */

      this._environment = config.environment || PRODUCTION;
    }
    /** @inheritdoc */


    _createClass(QuestionAnswerApi, [{
      key: "submitQuestion",
      value: function submitQuestion(question) {
        var requestConfig = {
          baseUrl: getKnowledgeApiUrl(this._environment),
          endpoint: '/v2/accounts/me/createQuestion',
          apiKey: this._apiKey,
          params: {
            'entityId': question.entityId,
            'site': question.site,
            'name': question.name,
            'email': question.email,
            'questionText': question.questionText,
            'questionDescription': question.questionDescription,
            'questionLanguage': question.questionLanguage
          }
        };
        var request = new ApiRequest(requestConfig, this._globalStorage);
        return request.post({
          mode: 'cors',
          headers: {
            'Content-Type': 'application/json'
          }
        }).then(function (response) {
          return response.json();
        })["catch"](function (error) {
          throw new AnswersEndpointError('Question submit failed', 'QuestionAnswerApi', error);
        });
      }
    }]);

    return QuestionAnswerApi;
  }();

  /** @module MockQuestionAnswerService */

  /** @typedef {import('../services/questionanswerservice').default} QuestionAnswerService */

  /**
   * @implements {QuestionAnswerService}
   */
  var MockQuestionAnswerService =
  /*#__PURE__*/
  function () {
    function MockQuestionAnswerService() {
      _classCallCheck(this, MockQuestionAnswerService);
    }

    _createClass(MockQuestionAnswerService, [{
      key: "submitQuestion",

      /** @inheritdoc */
      value: function submitQuestion(question) {
        // TODO(amullings): Make actual response object once we're using it for
        // something
        return Promise.resolve({});
      }
    }]);

    return MockQuestionAnswerService;
  }();

  /* global fetch */

  /** @typedef {import('../models/section').default} Section */

  /** @typedef {import('../services/searchservice').default} SearchService */

  /**
   * @typedef {Object} ResultData
   * @property {Object} data
   * @property {string } htmlTitle
   */

  /**
   * @callback ResultsModifier
   * @param {ResultData[]} results
   * @returns {ResultData[]}
   */

  /**
   * @callback MockDataConsumer
   * @param {Section[]} sections
   * @returns {Promise<Object>}
   */
  var ARBITRARY_BUSINESS_ID = 919871;
  /**
   * @implements {SearchService}
   */

  var MockSearchService =
  /*#__PURE__*/
  function () {
    function MockSearchService() {
      _classCallCheck(this, MockSearchService);

      /**
       * @type {Promise<string>}
       * @private
       */
      this._getMockDataJson = fetch('https://assets.sitescdn.net/answers/testdata/search/mockdata_v1.json').then(function (resp) {
        return resp.text();
      })["catch"](console.error);
    }
    /** @inheritdoc */


    _createClass(MockSearchService, [{
      key: "verticalSearch",
      value: function verticalSearch(verticalKey, _ref) {
        var input = _ref.input,
            filter = _ref.filter,
            facetFilter = _ref.facetFilter,
            limit = _ref.limit,
            offset = _ref.offset,
            id = _ref.id,
            geolocation = _ref.geolocation,
            isDynamicFiltersEnabled = _ref.isDynamicFiltersEnabled,
            skipSpellCheck = _ref.skipSpellCheck,
            queryTrigger = _ref.queryTrigger;
        return this.useMockData(function (sections) {
          if (input === '') {
            return delayedResponse(constructVerticalResponse({
              results: [],
              appliedQueryFilters: []
            }));
          } // Either find a section with matching ID, or pick one at random


          var section = sections.find(function (verticalModule) {
            return verticalKey === verticalModule['verticalConfigId'];
          });

          if (section == null) {
            section = sections[Math.floor(Math.random() * sections.length)];
          }

          modifyResults(section, getResultsFilterer(input));

          if (offset != null && limit != null) {
            modifyResults(section, function limit(results) {
              return results.slice(offset, offset + limit);
            });
          }

          var resp = constructVerticalResponse(section);
          return delayedResponse(resp);
        });
      }
      /** @inheritdoc */

    }, {
      key: "universalSearch",
      value: function universalSearch(queryString, params) {
        return this.useMockData(function (sections) {
          if (queryString === '') {
            return delayedResponse(constructUniversalResponse([]));
          }

          sections.forEach(function (section) {
            modifyResults(section, getResultsFilterer(queryString));
          });
          sections = sections.filter(function (section) {
            return section.results.length > 0;
          });
          var resp = constructUniversalResponse(sections);
          return delayedResponse(resp);
        });
      }
      /**
       * @param {MockDataConsumer} consumer
       * @returns {Promise<Object>}
       * @private
       */

    }, {
      key: "useMockData",
      value: function useMockData(consumer) {
        return this._getMockDataJson.then(JSON.parse).then(consumer);
      }
    }]);

    return MockSearchService;
  }();

  function getResultsFilterer(queryString) {
    return function (results) {
      return results.filter(function (result) {
        if (result.htmlTitle && result.htmlTitle.toLowerCase().includes(queryString)) {
          return true;
        }

        for (var prop in result.data) {
          var val = result.data[prop];

          if (typeof val === 'string' && val.toLowerCase().includes(queryString)) {
            return true;
          }
        }

        return false;
      });
    };
  }
  /**
   * @param {Section} section
   * @param {ResultsModifier} modifyFn
   */


  function modifyResults(section, modifyFn) {
    section.results = modifyFn(section.results);
  }
  /**
   * @param {Section[]} sections A list of mock section data
   * @returns {Object} A mock AnswersApi response
   */


  function constructUniversalResponse(sections) {
    // TODO(amullings): spellcheck, geo, filters
    // TODO(amullings): Fake encodedState once the SDK uses it
    sections = sections.map(fillSectionFields);
    return {
      meta: {
        uuid: uuidV4(),
        errors: []
      },
      response: {
        businessId: ARBITRARY_BUSINESS_ID,
        modules: sections,
        failedVerticals: [],
        queryId: uuidV4(),
        searchIntents: []
      }
    };
  }
  /**
   * @param {Section} section A mock section data
   * @returns {Object} A mock AnswersApi response
   */


  function constructVerticalResponse(section) {
    // TODO(amullings): spellcheck, geo, filters
    // TODO(amullings): Fake encodedState once the SDK uses it
    section = fillSectionFields(section);
    return {
      meta: {
        uuid: uuidV4(),
        errors: []
      },
      response: Object.assign(section, {
        businessId: ARBITRARY_BUSINESS_ID,
        queryId: uuidV4(),
        searchIntents: []
      })
    };
  }
  /**
   * @param {Section}
   * @returns {Section}
   */


  function fillSectionFields(section) {
    return {
      verticalConfigId: section.verticalConfigId,
      resultsCount: section.results.length,
      encodedState: '',
      results: section.results,
      appliedQueryFilters: section.appliedQueryFilters,
      queryDurationMillis: randomInt(50, 1000),
      facets: section.facets,
      source: section.source
    };
  }
  /**
   * @param {Object} resp
   * @returns {Promise<Object>}
   */


  function delayedResponse(resp) {
    return new Promise(function (resolve) {
      setTimeout(function () {
        resolve(resp);
      }, randomInt(250, 1000));
    });
  }
  /**
   * Code-golf-y but legit basic UUID v4 implementation. Not cryptographically secure.
   * From https://gist.github.com/jed/982883
   * @returns {string} A v4-compliant UUID
   */


  function uuidV4() {
    return function b(a) {
      return a ? (a ^ Math.random() * 16 >> a / 4).toString(16) : ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, b);
    }();
  }
  /**
   * @param {number} min inclusive
   * @param {number} max exclusive
   * @returns {number} A random integer in the specified range
   */


  function randomInt(min, max) {
    return Math.floor(Math.random() * (max - min) + min);
  }

  /**
   * The debounce duration for resize events
   * @type {number}
   */

  var RESIZE_DEBOUNCE = 100;
  /**
   * The breakpoint for mobile
   * @type {number}
   */

  var MOBILE_BREAKPOINT = 767;
  /**
   * Enum options for mobile overflow beahvior
   * @type {Object.<string, string>}
   */

  var MOBILE_OVERFLOW_BEHAVIOR_OPTION = {
    COLLAPSE: 'COLLAPSE',
    INNERSCROLL: 'INNERSCROLL'
  };
  /**
   * The Tab is a model that is used to power the Navigation tabs in the view.
   * It's initialized through the configuration provided to the component.
   */

  var Tab =
  /*#__PURE__*/
  function () {
    function Tab(config) {
      _classCallCheck(this, Tab);

      /**
       * The name of the tab that is exposed for the link
       * @type {string}
       */
      this.label = config.label;

      if (typeof this.label !== 'string') {
        throw new AnswersComponentError('label is a required configuration option for tab.', 'NavigationComponent');
      }
      /**
       * The complete URL, including the params
       * @type {string}
       */


      this.url = config.url;

      if (typeof this.url !== 'string') {
        throw new AnswersComponentError('url is a required configuration option for tab.', 'NavigationComponent');
      }
      /**
       * The serverside vertical config id that this is referenced to.
       * By providing this, enables dynamic sorting based on results.
       * @type {string}
       */


      this.verticalKey = config.verticalKey || null;
      /**
       * The base URL used for constructing the URL with params
       * @type {string}
       */

      this.baseUrl = config.url;
      /**
       * Determines whether to show this tab first in the order
       * @type {boolean}
       */

      this.isFirst = config.isFirst || false;
      /**
       * Determines whether or not to apply a special class to the
       * markup to determine if it's an active tab
       * @type {boolean}
       */

      this.isActive = config.isActive || false;
    }
    /**
     * from will construct a map of verticalKey to {Tab} from
     * a configuration file
     * @param {object} tabsConfig the configuration to use
     */


    _createClass(Tab, null, [{
      key: "from",
      value: function from(tabsConfig) {
        var tabs = {}; // Parse the options and build out our tabs and

        for (var i = 0; i < tabsConfig.length; i++) {
          var tab = _objectSpread({}, tabsConfig[i]); // If a tab is configured to be hidden in this component,
          // do not process it


          if (tab.hideInNavigation) {
            continue;
          } // For tabs without config ids, map their URL to the configID
          // to avoid duplication of renders


          if (!tab.verticalKey && !tabs[tab.url]) {
            tab.verticalKey = tab.url;
          }

          tabs[tab.verticalKey] = new Tab(tab);
        }

        return tabs;
      }
    }]);

    return Tab;
  }();
  /**
   * NavigationComponent exposes an interface for building a dynamic
   * navigation that is powered by universal search updates.
   * @extends Component
   */

  var NavigationComponent =
  /*#__PURE__*/
  function (_Component) {
    _inherits(NavigationComponent, _Component);

    function NavigationComponent() {
      var _this;

      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var systemConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      _classCallCheck(this, NavigationComponent);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(NavigationComponent).call(this, config, systemConfig));
      /**
       * The label to show on the dropdown menu button when overflow
       * @type {string}
       */

      _this.overflowLabel = config.overflowLabel || 'More';
      /**
       * The optional icon to show on the dropdown menu button when overflow
       * @type {string}
       */

      _this.overflowIcon = config.overflowIcon || 'kabob';
      /**
       * The data storage key
       * @type {string}
       */

      _this.moduleId = StorageKeys.NAVIGATION;
      /**
       * Tabs config from global navigation config
       * @type {Array.<object>}
       * @private
       */

      _this._tabsConfig = config.verticalPages || _this.core.globalStorage.getState(StorageKeys.VERTICAL_PAGES_CONFIG).get();
      /**
       * Unordered map of each tab, keyed by VS verticalKey
       * @type {Object.<String, Object>}
       * @private
       */

      _this._tabs = Tab.from(_this._tabsConfig);
      /**
       * The order of the tabs, parsed from configuration or URL.
       * This gets updated based on the server results
       * @type {Array.<String>} The list of VS verticalKeys
       * @private
       */

      _this._tabOrder = _this.getDefaultTabOrder(_this._tabsConfig, _this.getUrlParams());
      /**
       * Breakpoints at which navigation items move to the "more" dropdown
       * @type {number[]}
       * @private
       */

      _this._navBreakpoints = [];
      /**
       *  The mobile overflow behavior config
       *  @type {string}
       */

      _this._mobileOverflowBehavior = config.mobileOverflowBehavior || MOBILE_OVERFLOW_BEHAVIOR_OPTION.COLLAPSE;
      /**
       *  The ARIA label
       *  @type {string}
       */

      _this._ariaLabel = config.ariaLabel || 'Search Page Navigation';
      _this.checkOutsideClick = _this.checkOutsideClick.bind(_assertThisInitialized(_this));
      _this.checkMobileOverflowBehavior = _this.checkMobileOverflowBehavior.bind(_assertThisInitialized(_this));
      return _this;
    }

    _createClass(NavigationComponent, [{
      key: "onCreate",
      value: function onCreate() {
        // TODO: Re-rendering and re-mounting the component every tim e the window changes size
        // is not great.
        DOM.on(window, 'resize', this.checkMobileOverflowBehavior);
      }
    }, {
      key: "onDestroy",
      value: function onDestroy() {
        DOM.off(window, 'resize', this.checkMobileOverflowBehavior);
      }
    }, {
      key: "onMount",
      value: function onMount() {
        if (this.shouldCollapse()) {
          this._navBreakpoints = [];
          this.bindOverflowHandlers();
          this.refitNav();
          DOM.on(DOM.query(this._container, '.yxt-Nav-more'), 'click', this.toggleMoreDropdown.bind(this));
        }
      }
    }, {
      key: "onUnMount",
      value: function onUnMount() {
        this.unbindOverflowHandlers();
      }
    }, {
      key: "bindOverflowHandlers",
      value: function bindOverflowHandlers() {
        DOM.on(window, 'click', this.checkOutsideClick);
      }
    }, {
      key: "unbindOverflowHandlers",
      value: function unbindOverflowHandlers() {
        DOM.off(window, 'click', this.checkOutsideClick);
      }
    }, {
      key: "refitNav",
      value: function refitNav() {
        var container = DOM.query(this._container, '.yxt-Nav-container');
        var moreButton = DOM.query(this._container, '.yxt-Nav-more');
        var mainLinks = DOM.query(this._container, '.yxt-Nav-expanded');
        var collapsedLinks = DOM.query(this._container, '.yxt-Nav-modal');
        var navWidth = moreButton.classList.contains('yxt-Nav-item--more') ? container.offsetWidth : container.offsetWidth - moreButton.offsetWidth;
        var numBreakpoints = this._navBreakpoints.length; // sum child widths instead of using parent's width to avoid
        // browser inconsistencies

        var mainLinksWidth = 0;
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = mainLinks.children[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var el = _step.value;
            mainLinksWidth += el.offsetWidth;
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator["return"] != null) {
              _iterator["return"]();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        if (mainLinksWidth > navWidth) {
          this._navBreakpoints.push(mainLinksWidth);

          var lastLink = mainLinks.children.item(mainLinks.children.length - 1);

          if (lastLink === null) {
            return;
          }

          this._prepend(collapsedLinks, lastLink);

          if (moreButton.classList.contains('yxt-Nav-item--more')) {
            moreButton.classList.remove('yxt-Nav-item--more');
          }
        } else {
          if (numBreakpoints && navWidth > this._navBreakpoints[numBreakpoints - 1]) {
            var firstLink = collapsedLinks.children.item(0);

            if (firstLink === null) {
              return;
            }

            mainLinks.append(firstLink);

            this._navBreakpoints.pop();

            numBreakpoints--;
          }

          if (collapsedLinks.children.length === 0) {
            moreButton.classList.add('yxt-Nav-item--more');
          }
        }

        this.closeMoreDropdown();

        if (mainLinksWidth > navWidth || numBreakpoints > 0 && navWidth > this._navBreakpoints[numBreakpoints - 1]) {
          this.refitNav();
        }
      }
    }, {
      key: "closeMoreDropdown",
      value: function closeMoreDropdown() {
        var collapsed = DOM.query(this._container, '.yxt-Nav-modal');
        collapsed.classList.remove('is-active');
        var moreButton = DOM.query(this._container, '.yxt-Nav-more');
        moreButton.setAttribute('aria-expanded', false);
      }
    }, {
      key: "openMoreDropdown",
      value: function openMoreDropdown() {
        var collapsed = DOM.query(this._container, '.yxt-Nav-modal');
        collapsed.classList.add('is-active');
        var moreButton = DOM.query(this._container, '.yxt-Nav-more');
        moreButton.setAttribute('aria-expanded', true);
      }
    }, {
      key: "toggleMoreDropdown",
      value: function toggleMoreDropdown() {
        var collapsed = DOM.query(this._container, '.yxt-Nav-modal');
        collapsed.classList.toggle('is-active');
        var moreButton = DOM.query(this._container, '.yxt-Nav-more');
        moreButton.setAttribute('aria-expanded', collapsed.classList.contains('is-active'));
      }
    }, {
      key: "checkOutsideClick",
      value: function checkOutsideClick(e) {
        if (this._closest(e.target, '.yxt-Nav-container')) {
          return;
        }

        this.closeMoreDropdown();
      }
    }, {
      key: "checkMobileOverflowBehavior",
      value: function checkMobileOverflowBehavior() {
        if (this._checkMobileOverflowBehaviorTimer) {
          clearTimeout(this._checkMobileOverflowBehaviorTimer);
        }

        this._checkMobileOverflowBehaviorTimer = setTimeout(this.setState.bind(this), RESIZE_DEBOUNCE);
      }
      /**
       * Since the server data only provides a list of
       * VS verticalKeys, we need to compute and transform
       * the data into the proper format for rendering.
       *
       * @override
       */

    }, {
      key: "setState",
      value: function setState() {
        var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        if (data.tabOrder !== undefined) {
          this._tabOrder = this.mergeTabOrder(data.tabOrder, this._tabOrder);
        } // Since the tab ordering can change based on the server data
        // we need to update each tabs URL to include the order as part of their params.
        // This helps with persisting state across verticals.


        var tabs = [];

        for (var i = 0; i < this._tabOrder.length; i++) {
          var tab = this._tabs[this._tabOrder[i]];

          if (tab !== undefined) {
            tab.url = this.generateTabUrl(tab.baseUrl, this.getUrlParams());
            tabs.push(tab);
          }
        }

        return _get(_getPrototypeOf(NavigationComponent.prototype), "setState", this).call(this, {
          tabs: tabs,
          overflowLabel: this.overflowLabel,
          overflowIcon: this.overflowIcon,
          showCollapse: this.shouldCollapse(),
          ariaLabel: this._ariaLabel
        });
      } // TODO (agrow) investigate removing this
      // ParentNode.prepend polyfill
      // https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/prepend#Polyfill

    }, {
      key: "_prepend",
      value: function _prepend(collapsedLinks, lastLink) {
        if (!collapsedLinks.hasOwnProperty('prepend')) {
          var docFrag = document.createDocumentFragment();
          var isNode = lastLink instanceof Node;
          docFrag.appendChild(isNode ? lastLink : document.createTextNode(String(lastLink)));
          collapsedLinks.insertBefore(docFrag, collapsedLinks.firstChild);
          return;
        }

        collapsedLinks.prepend(lastLink);
      } // TODO (agrow) investigate removing this
      // Adapted from Element.closest polyfill
      // https://developer.mozilla.org/en-US/docs/Web/API/Element/closest#Polyfill

    }, {
      key: "_closest",
      value: function _closest(el, closestElSelector) {
        if (!el.hasOwnProperty('closest')) {
          do {
            if (DOM.matches(el, closestElSelector)) return el;
            el = el.parentElement || el.parentNode;
          } while (el !== null && el.nodeType === 1);

          return null;
        }

        return el.closest(closestElSelector);
      }
    }, {
      key: "getUrlParams",
      value: function getUrlParams() {
        return new SearchParams(window.location.search.substring(1));
      }
    }, {
      key: "shouldCollapse",
      value: function shouldCollapse() {
        switch (this._mobileOverflowBehavior) {
          case MOBILE_OVERFLOW_BEHAVIOR_OPTION.COLLAPSE:
            return true;

          case MOBILE_OVERFLOW_BEHAVIOR_OPTION.INNERSCROLL:
            var container = DOM.query(this._container, '.yxt-Nav-container') || this._container;

            var navWidth = container.offsetWidth;
            return navWidth > MOBILE_BREAKPOINT;
        }
      }
      /**
       * getDefaultTabOrder will compute the initial tab ordering based
       * on a combination of the configuration provided directly to the component
       * and the url params.
       * @param {Object[]} tabsConfig
       * @param {SearchParams}
       */

    }, {
      key: "getDefaultTabOrder",
      value: function getDefaultTabOrder(tabsConfig, urlParams) {
        var tabOrder = []; // Use the ordering from the URL as the primary configuration
        // And then merge it with the local configuration, if provided.

        if (urlParams && urlParams.has('tabOrder')) {
          tabOrder = urlParams.get('tabOrder').split(',');
        }

        for (var i = 0; i < tabsConfig.length; i++) {
          var tab = tabsConfig[i]; // Some tabs don't have verticalKey, so we map it from URL

          if (!tab.verticalKey) {
            tab.verticalKey = tab.url;
          } // Avoid duplicates if config was provided from URL


          if (tabOrder.includes(tab.verticalKey)) {
            continue;
          } // isFirst should always be the first element in the list


          if (tab.isFirst) {
            tabOrder.unshift(tab.verticalKey);
          } else {
            tabOrder.push(tab.verticalKey);
          }
        }

        return tabOrder;
      }
      /**
       * mergeTabOrder merges two arrays into one
       * by appending additional tabs to the end of the original array
       * @param {string[]} tabOrder Tab order provided by the server
       * @param {string[]} otherTabOrder Tab order provided by configuration
       * @return {string[]}
       */

    }, {
      key: "mergeTabOrder",
      value: function mergeTabOrder(tabOrder, otherTabOrder) {
        for (var i = 0; i < otherTabOrder.length; i++) {
          var tabConfig = otherTabOrder[i];

          if (tabOrder.includes(tabConfig)) {
            continue;
          } // isFirst should be an override to dynamic tab ordering.


          if (this._tabs[tabConfig] && this._tabs[tabConfig].isFirst) {
            tabOrder.unshift(tabConfig);
          } else {
            tabOrder.push(tabConfig);
          }
        }

        return tabOrder;
      }
    }, {
      key: "generateTabUrl",
      value: function generateTabUrl(baseUrl) {
        var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new URLSearchParams();
        // We want to persist the params from the existing URL to the new
        // URLS we create.
        params.set('tabOrder', this._tabOrder);
        return baseUrl + '?' + params.toString();
      }
    }], [{
      key: "defaultTemplateName",

      /**
       * The template to render
       * @returns {string}
       * @override
       */
      value: function defaultTemplateName(config) {
        return 'navigation/navigation';
      }
    }, {
      key: "type",
      get: function get() {
        return 'Navigation';
      }
    }]);

    return NavigationComponent;
  }(Component);

  var IconState = {
    'YEXT': 0,
    'MAGNIFYING_GLASS': 1
  };
  /**
   * SearchComponent exposes an interface in order to create
   * a UI Search experience for vertical and universal search.
   *
   * @extends Component
   */

  var SearchComponent =
  /*#__PURE__*/
  function (_Component) {
    _inherits(SearchComponent, _Component);

    function SearchComponent() {
      var _this;

      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var systemConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      _classCallCheck(this, SearchComponent);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(SearchComponent).call(this, config, systemConfig));
      /**
       * The optional vertical key for vertical search configuration
       * If not provided, auto-complete and search will be based on universal
       * @type {string}
       */

      _this._verticalKey = config.verticalKey || null;
      /**
       * Query submission can optionally be based on a form as context. Note that if
       * a form is not used, the component has no guarantee of WCAG compliance.
       */

      _this._useForm = config.useForm !== undefined ? config.useForm : true;
      /**
       * Query submission is based on a form as context.
       * Optionally provided, otherwise defaults to native form node within container
       * @type {string} CSS selector
       */

      _this._formEl = config.formSelector || 'form';
      /**
       * The input element used for searching and wires up the keyboard interaction
       * Optionally provided.
       * @type {string} CSS selector
       */

      _this._inputEl = config.inputEl || '.js-yext-query';
      /**
       * The title used, provided to the template as a data point
       * Optionally provided. If not provided, no title will be included.
       * @type {string}
       */

      _this.title = config.title;
      /**
       * The label text is used for labeling the input box, also provided to template.
       * Optionally provided
       * @type {string}
       */

      _this.labelText = config.labelText || 'Conduct a search';
      /**
       * The submit text is used for labeling the submit button, also provided to the template.
       * @type {string}
       */

      _this.submitText = config.submitText || 'Submit';
      /**
       * The clear text is used for labeling the clear button, also provided to the template.
       * @type {string}
       */

      _this.clearText = config.clearText || 'Clear';
      /**
       * The submit icon is an icon for the submit button, if provided it will be displayed and the
       * submit text will be used for screen readers.
       * @type {string|null}
       */

      _this.submitIcon = config.submitIcon || null;
      /**
       * The query text to show as the first item for auto complete.
       * Optionally provided
       * @type {string}
       */

      _this.promptHeader = config.promptHeader || null;
      /**
       * Auto focuses the input box if set to true.
       * Optionally provided, defaults to false.
       * @type {boolean}
       */

      _this.autoFocus = config.autoFocus === true;
      /**
       * If true, show an "x" that allows the user to clear the current
       * query
       * @type {boolean}
       */

      _this.clearButton = config.clearButton === undefined ? true : config.clearButton;
      /**
       * When autofocusing on load, optionally open the autocomplete
       * (preset prompts)
       * @type {boolean}
       */

      _this.autocompleteOnLoad = config.autocompleteOnLoad || false;
      /**
       * submitURL will force the search query submission to get
       * redirected to the URL provided.
       * Optional, defaults to null.
       *
       * If no redirectUrl provided, we keep the page as a single page app.
       *
       * @type {boolean}
       */

      _this.redirectUrl = config.redirectUrl || null;
      /**
       * true if there is another search bar present on the page.
       * Twins only update the query, and do not search
       */

      _this._isTwin = config.isTwin;
      /**
       * The query string to use for the input box, provided to template for rendering.
       * Optionally provided
       * @type {string|null}
       */

      _this.query = config.query || _this.core.globalStorage.getState(StorageKeys.QUERY);

      _this.core.globalStorage.on('update', StorageKeys.QUERY, function (q) {
        _this.query = q;

        if (_this.queryEl) {
          _this.queryEl.value = q;
        }

        _this.debouncedSearch(q);
      });
      /**
       * The minimum time allowed in milliseconds between searches to prevent
       * many duplicate searches back-to-back
       * @type {number}
       * @private
       */


      _this._searchCooldown = config.searchCooldown || 300;
      /**
       * When true and "near me" intent is expressed, prompt the user for their geolocation
       * @type {boolean}
       * @private
       */

      _this._promptForLocation = config.promptForLocation === undefined ? true : Boolean(config.promptForLocation);
      /**
       * Controls showing and hiding the search clear button
       */

      _this._showClearButton = _this.clearButton && _this.query;
      /**
       * For vertical search bars, whether or not to allow empty searches.
       * @type {boolean}
       * @private
       */

      _this._allowEmptySearch = !!config.allowEmptySearch;
      /**
       * The name of the child AutoComplete component.
       * @type {string}
       * @private
       */

      _this._autoCompleteName = "".concat(_this.name, ".autocomplete");
      /**
       * Options to pass to the geolocation api.
       * @type {Object}
       */

      _this._geolocationOptions = _objectSpread({
        enableHighAccuracy: false,
        timeout: 1000,
        maximumAge: 300000
      }, config.geolocationOptions);
      /**
       * Options for the geolocation timeout alert.
       * @type {Object}
       */

      _this._geolocationTimeoutAlert = _objectSpread({
        enabled: false,
        message: 'We are unable to determine your location'
      }, config.geolocationTimeoutAlert);
      return _this;
    }

    _createClass(SearchComponent, [{
      key: "onCreate",
      value: function onCreate() {
        if (this.query != null && !this.redirectUrl) {
          this.core.setQuery(this.query);
        }
      }
    }, {
      key: "onMount",
      value: function onMount() {
        this.queryEl = DOM.query(this._container, this._inputEl);

        if (this.autoFocus && !this.query && !this.autocompleteOnLoad) {
          this.focusInputElement();
        }

        this.isUsingYextAnimatedIcon = !this._config.customIconUrl && !this.submitIcon;

        if (this.isUsingYextAnimatedIcon) {
          this.initAnimatedIcon();
        } // Wire up our search handling and auto complete


        this.initSearch(this._formEl);
        this.initAutoComplete(this._inputEl);

        if (this.clearButton) {
          this.initClearButton();
        }

        if (this.autoFocus && !this.query && this.autocompleteOnLoad) {
          this.focusInputElement();
        }
      }
    }, {
      key: "requestIconAnimationFrame",
      value: function requestIconAnimationFrame(iconState) {
        var _this2 = this;

        if (this.iconState === iconState) {
          return;
        }

        this.iconState = iconState;

        if (!this.isRequestingAnimationFrame) {
          this.isRequestingAnimationFrame = true;
          window.requestAnimationFrame(function () {
            _this2.forwardIcon.classList.remove('yxt-SearchBar-AnimatedIcon--paused');

            _this2.reverseIcon.classList.remove('yxt-SearchBar-AnimatedIcon--paused');

            if (_this2.iconState === IconState.MAGNIFYING_GLASS) {
              _this2.forwardIcon.classList.remove('yxt-SearchBar-AnimatedIcon--inactive');

              _this2.reverseIcon.classList.add('yxt-SearchBar-AnimatedIcon--inactive');
            } else if (_this2.iconState === IconState.YEXT) {
              _this2.forwardIcon.classList.add('yxt-SearchBar-AnimatedIcon--inactive');

              _this2.reverseIcon.classList.remove('yxt-SearchBar-AnimatedIcon--inactive');
            }

            _this2.isRequestingAnimationFrame = false;
          });
        }
      }
    }, {
      key: "animateIconToMagnifyingGlass",
      value: function animateIconToMagnifyingGlass() {
        if (this.iconIsFrozen) {
          return;
        }

        this.requestIconAnimationFrame(IconState.MAGNIFYING_GLASS);
      }
    }, {
      key: "animateIconToYext",
      value: function animateIconToYext(e) {
        var focusStillInSearchbar = false;

        if (e && e.relatedTarget) {
          focusStillInSearchbar = this._container.contains(e.relatedTarget);
        }

        if (this.iconIsFrozen || focusStillInSearchbar) {
          return;
        }

        this.requestIconAnimationFrame(IconState.YEXT);
      }
    }, {
      key: "initAnimatedIcon",
      value: function initAnimatedIcon() {
        var _this3 = this;

        this.iconState = this.autoFocus && !this.query ? IconState.MAGNIFYING_GLASS : IconState.YEXT;
        this.forwardIcon = DOM.query(this._container, '.js-yxt-AnimatedForward');
        this.reverseIcon = DOM.query(this._container, '.js-yxt-AnimatedReverse');
        var clickableElementSelectors = ['.js-yext-submit', '.js-yxt-SearchBar-clear'];

        for (var _i = 0, _clickableElementSele = clickableElementSelectors; _i < _clickableElementSele.length; _i++) {
          var selector = _clickableElementSele[_i];
          var clickableEl = DOM.query(this._container, selector);

          if (clickableEl) {
            DOM.on(clickableEl, 'mousedown', function () {
              _this3.iconIsFrozen = true;
            });
            DOM.on(clickableEl, 'mouseup', function () {
              _this3.iconIsFrozen = false;
            });
          }
        }

        DOM.on(this.queryEl, 'focus', function () {
          _this3.animateIconToMagnifyingGlass();
        });
        DOM.on(this._container, 'focusout', function (e) {
          _this3.animateIconToYext(e);
        });
      }
    }, {
      key: "remove",
      value: function remove() {
        this._autocomplete.remove();

        _get(_getPrototypeOf(SearchComponent.prototype), "remove", this).call(this);
      }
    }, {
      key: "initClearButton",
      value: function initClearButton() {
        var _this4 = this;

        var button = DOM.query(this._container, '.js-yxt-SearchBar-clear');
        this._showClearButton = this._showClearButton || this.query;
        button.classList.toggle('yxt-SearchBar--hidden', !this._showClearButton);
        DOM.on(button, 'click', function () {
          _this4.query = '';
          _this4._showClearButton = false;
          button.classList.add('yxt-SearchBar--hidden');
          _this4.queryEl.value = _this4.query;

          _this4.core.persistentStorage.set(StorageKeys.QUERY, _this4.query);

          _this4.core.persistentStorage["delete"](StorageKeys.SEARCH_OFFSET);

          _this4.core.globalStorage["delete"](StorageKeys.SEARCH_OFFSET);

          _this4.core.setQuery(_this4.query); // Focus the input element after clearing the query, regardless of whether
          // or not the autoFocus option is enabled.
          // NOTE(amullings): This depends heavily on the fact that the re-renders
          // triggered by setState and core.setQuery happen synchronously; if this
          // stops being the case at some point, we'll need an alternative solution


          _this4.focusInputElement();
        });
        DOM.on(this.queryEl, 'input', function (e) {
          var input = e.target.value;
          _this4.query = input;

          if (!_this4._showClearButton && input.length > 0) {
            _this4._showClearButton = true;
            button.classList.remove('yxt-SearchBar--hidden');
          } else if (_this4._showClearButton && input.length === 0) {
            _this4._showClearButton = false;
            button.classList.add('yxt-SearchBar--hidden');
          }
        });
      }
      /**
       * Registers the different event handlers that can issue a search. Note that
       * different handlers are used depending on whether or not a form is used as
       * context.
       *
       * @param {string} formSelector CSS selector to bind our form submit handling to
       */

    }, {
      key: "initSearch",
      value: function initSearch(formSelector) {
        var _this5 = this;

        this._formEl = formSelector;

        this._container.classList.add('yxt-SearchBar-wrapper');

        if (this._useForm) {
          var form = DOM.query(this._container, formSelector);

          if (!form) {
            throw new Error('Could not initialize SearchBar; Can not find {HTMLElement} `', this._formEl, '`.');
          }

          DOM.on(form, 'submit', function (e) {
            e.preventDefault(); // TODO(oshi) we should not use the same css selector (this._inputEl)
            // For both the autocomplete AND the search bar input
            // This is incredibly confusing, and also makes the first DOM.query
            // Rely on the order of the input el and autocomplete in the template

            var inputEl = form.querySelector(_this5._inputEl);

            _this5.onQuerySubmit(inputEl);
          });
        } else {
          var inputEl = DOM.query(this._container, this._inputEl);

          if (!inputEl) {
            throw new Error('Could not initialize SearchBar; Can not find {HTMLElement} `', this._inputEl, '`.');
          }

          DOM.on(inputEl, 'keydown', function (e) {
            if (e.key === 'Enter') {
              e.preventDefault();

              _this5.onQuerySubmit(inputEl);
            }
          });
          var submitButton = DOM.query(this._container, '.js-yext-submit');
          DOM.on(submitButton, 'click', function (e) {
            e.preventDefault();

            _this5.onQuerySubmit(inputEl);
          });
        }
      }
      /**
       * The handler for a query submission. This method first sets the new query in
       * persistent and global storage, than performs a debounced search.
       *
       * @param {Node} inputEl The input element containing the query.
       */

    }, {
      key: "onQuerySubmit",
      value: function onQuerySubmit(inputEl) {
        var query = inputEl.value;
        this.query = query;
        var params = new SearchParams(window.location.search.substring(1));
        params.set('query', query); // If we have a redirectUrl, we want the form to be
        // serialized and submitted.

        if (typeof this.redirectUrl === 'string') {
          window.location.href = this.redirectUrl + '?' + params.toString();
          return false;
        }

        inputEl.blur();
        DOM.query(this._container, '.js-yext-submit').blur(); // TODO: move this into initClearButton

        if (this.clearButton) {
          var button = DOM.query(this._container, '.js-yxt-SearchBar-clear');

          if (this.query) {
            this._showClearButton = true;
            button.classList.remove('yxt-SearchBar--hidden');
          } else {
            this._showClearButton = false;
            button.classList.add('yxt-SearchBar--hidden');
          }
        }

        if (this.isUsingYextAnimatedIcon) {
          this.animateIconToYext();
        }

        this.core.persistentStorage.set(StorageKeys.QUERY, query);
        this.core.persistentStorage["delete"](StorageKeys.SEARCH_OFFSET);
        this.core.globalStorage["delete"](StorageKeys.SEARCH_OFFSET);
        this.core.setQuery(query);
        this.debouncedSearch(query);
        return false;
      }
      /**
       * A helper method to wire up our auto complete on an input selector
       * @param {string} inputSelector CSS selector to bind our auto complete component to
       */

    }, {
      key: "initAutoComplete",
      value: function initAutoComplete(inputSelector) {
        var _this6 = this;

        this._inputEl = inputSelector;

        if (this._autocomplete) {
          this._autocomplete.remove();
        }

        this._autocomplete = this.componentManager.create('AutoComplete', {
          parentContainer: this._container,
          name: this._autoCompleteName,
          container: '.yxt-SearchBar-autocomplete',
          autoFocus: this.autoFocus && !this.autocompleteOnLoad,
          verticalKey: this._verticalKey,
          promptHeader: this.promptHeader,
          originalQuery: this.query,
          inputEl: inputSelector,
          onSubmit: function onSubmit() {
            if (_this6._useForm) {
              DOM.trigger(DOM.query(_this6._container, _this6._formEl), 'submit');
            } else {
              var inputEl = DOM.query(_this6._container, inputSelector);

              _this6.onQuerySubmit(inputEl);
            }
          },
          onChange: function onChange() {
            DOM.trigger(DOM.query(_this6._container, inputSelector), 'input');
          }
        });
      }
      /**
       * Performs a debounced query using the provided string input. Specifically, a new search is not
       * performed if we recently searched, if there's no query for universal search, or if this
       * is a twin searchbar.
       * @param {string} query The string to query against.
       * @returns {Promise} A promise that will perform the query and update globalStorage accordingly.
       */

    }, {
      key: "debouncedSearch",
      value: function debouncedSearch(query) {
        var _this7 = this;

        if (this._throttled || !query && !this._verticalKey || !query && this._verticalKey && !this._allowEmptySearch || this._isTwin) {
          return;
        }

        this._throttled = true;
        setTimeout(function () {
          _this7._throttled = false;
        }, this._searchCooldown); // If _promptForLocation is enabled, we will compute the query's intent and, from there,
        // determine if it's necessary to prompt the user for their location information. It will
        // be unnecessary if the query does not have near me intent or we already have their location
        // stored.

        if (this._promptForLocation) {
          this.fetchQueryIntents(query).then(function (queryIntents) {
            return queryIntents.includes('NEAR_ME');
          }).then(function (queryHasNearMeIntent) {
            if (queryHasNearMeIntent && !_this7.core.globalStorage.getState(StorageKeys.GEOLOCATION)) {
              return new Promise(function (resolve, reject) {
                return navigator.geolocation.getCurrentPosition(function (position) {
                  _this7.core.globalStorage.set(StorageKeys.GEOLOCATION, {
                    lat: position.coords.latitude,
                    lng: position.coords.longitude,
                    radius: position.coords.accuracy
                  });

                  resolve(_this7.search(query));
                }, function () {
                  resolve(_this7.search(query));
                  var _this7$_geolocationTi = _this7._geolocationTimeoutAlert,
                      enabled = _this7$_geolocationTi.enabled,
                      message = _this7$_geolocationTi.message;

                  if (enabled) {
                    window.alert(message);
                  }
                }, _this7._geolocationOptions);
              });
            } else {
              return _this7.search(query);
            }
          });
        } else {
          return this.search(query);
        }
      }
      /**
       * Performs a query using the provided string input.
       * @param {string} query The string to query against.
       * @returns {Promise} A promise that will perform the query and update globalStorage accordingly.
       */

    }, {
      key: "search",
      value: function search(query) {
        if (this._verticalKey) {
          var allFilters = this.core.globalStorage.getAll(StorageKeys.FILTER);
          var totalFilter = allFilters.length > 1 ? Filter.and.apply(Filter, _toConsumableArray(allFilters)) : allFilters[0];
          return this.core.verticalSearch(this._verticalKey, {
            input: query,
            filter: JSON.stringify(totalFilter),
            offset: this.core.globalStorage.getState(StorageKeys.SEARCH_OFFSET) || 0
          });
        } else {
          // NOTE(billy) Temporary hack for DEMO
          // Remove me after the demo
          var nav = this.componentManager.getActiveComponent('Navigation');

          if (nav) {
            var tabs = nav.getState('tabs');
            var urls = {};

            if (tabs && Array.isArray(tabs)) {
              for (var i = 0; i < tabs.length; i++) {
                var params = new SearchParams(tabs[i].url.split('?')[1]);
                params.set('query', query);
                var url = tabs[i].baseUrl;

                if (params.toString().length > 0) {
                  url += '?' + params.toString();
                }

                urls[tabs[i].configId] = url;
              }
            }

            return this.core.search(query, urls);
          }

          return this.core.search(query);
        }
      }
      /**
       * A helper method that computes the intents of the provided query. If the query was entered
       * manually into the search bar or selected via autocomplete, its intents will have been stored
       * already in globalStorage. Otherwise, a new API call will have to be issued to determine
       * intent.
       * @param {string} query The query whose intent is needed.
       * @returns {Promise} A promise containing the intents of the query.
       */

    }, {
      key: "fetchQueryIntents",
      value: function fetchQueryIntents(query) {
        var autocompleteData = this.core.globalStorage.getState("".concat(StorageKeys.AUTOCOMPLETE, ".").concat(this._autoCompleteName));

        if (!autocompleteData) {
          var autocompleteRequest = this._verticalKey ? this.core.autoCompleteVertical(query, this._autoCompleteName, this._verticalKey) : this.core.autoCompleteUniversal(query, this._autoCompleteName);
          return autocompleteRequest.then(function (data) {
            return data.inputIntents;
          });
        } else {
          // There are two alternatives to consider here. The user could have selected the query
          // as an autocomplete option or manually input it themselves. If the former, use the intents
          // of the corresponding autocomplete option. If the latter, use the inputIntents of the
          // autocompleteData.
          var results = autocompleteData.sections.flatMap(function (section) {
            return section.results;
          });
          var matchingResult = results.find(function (result) {
            return result.value === query;
          });
          var queryIntents = matchingResult ? matchingResult.intents : autocompleteData.inputIntents;
          return Promise.resolve(queryIntents);
        }
      }
      /**
       * A helper method that constructs the meta information needed by the SEARCH_CLEAR_BUTTON
       * analytics event.
       */

    }, {
      key: "eventOptions",
      value: function eventOptions() {
        var queryId = this.core.globalStorage.getState(StorageKeys.QUERY_ID);
        var options = Object.assign({}, queryId && {
          queryId: queryId
        }, this._verticalKey && {
          verticalKey: this._verticalKey
        });
        return JSON.stringify(options);
      }
    }, {
      key: "setState",
      value: function setState(data) {
        var forwardIconOpts = {
          iconName: 'yext_animated_forward',
          classNames: 'Icon--lg',
          complexContentsParams: {
            iconPrefix: this.name
          }
        };
        var reverseIconOpts = {
          iconName: 'yext_animated_reverse',
          classNames: 'Icon--lg',
          complexContentsParams: {
            iconPrefix: this.name
          }
        };
        return _get(_getPrototypeOf(SearchComponent.prototype), "setState", this).call(this, Object.assign({
          title: this.title,
          labelText: this.labelText,
          submitIcon: this.submitIcon,
          submitText: this.submitText,
          clearText: this.clearText,
          showClearButton: this._showClearButton,
          query: this.query || '',
          eventOptions: this.eventOptions(),
          iconId: this.name,
          forwardIconOpts: forwardIconOpts,
          reverseIconOpts: reverseIconOpts,
          autoFocus: this.autoFocus && !this.query,
          useForm: this._useForm
        }, data));
      }
    }, {
      key: "focusInputElement",
      value: function focusInputElement() {
        DOM.query(this._container, this._inputEl).focus();
      }
    }], [{
      key: "defaultTemplateName",

      /**
       * The template to render
       * @returns {string}
       * @override
       */
      value: function defaultTemplateName() {
        return 'search/search';
      }
    }, {
      key: "type",
      get: function get() {
        return 'SearchBar';
      }
    }]);

    return SearchComponent;
  }(Component);

  /** @module SearchParamsParser */
  function buildSearchParameters(searchParameterConfigs) {
    var searchParameters = {
      sectioned: false,
      fields: []
    };

    if (searchParameterConfigs === undefined) {
      return searchParameters;
    }

    if (searchParameterConfigs.sectioned) {
      searchParameters.sectioned = searchParameterConfigs.sectioned;
    }

    searchParameters.fields = buildFields(searchParameterConfigs.fields);
    return searchParameters;
  }

  function buildFields(fieldConfigs) {
    if (fieldConfigs === undefined) {
      return [];
    }

    return fieldConfigs.map(function (fc) {
      return _objectSpread({
        fetchEntities: false
      }, fc);
    });
  }

  /**
   * FilterSearchComponent is used for autocomplete using the FilterSearch backend.
   * It'll allow you to pick pre-set filters that are setup on the backend within
   * a vertical search context.
   *
   * @extends Component
   */

  var FilterSearchComponent =
  /*#__PURE__*/
  function (_Component) {
    _inherits(FilterSearchComponent, _Component);

    function FilterSearchComponent() {
      var _this;

      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var systemConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      _classCallCheck(this, FilterSearchComponent);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(FilterSearchComponent).call(this, config, systemConfig));
      /**
       * The vertical key for vertical search configuration
       * @type {string}
       */

      _this._verticalKey = config.verticalKey || null;
      /**
       * If true, store the filter value but do not search on change
       * @type {boolean}
       * @private
       */

      _this._storeOnChange = config.storeOnChange || false;
      /**
       * Query submission is based on a form as context.
       * Optionally provided, otherwise defaults to native form node within container
       * @type {string} CSS selector
       */

      _this._formEl = config.formSelector || 'form';
      /**
       * The input element used for searching and wires up the keyboard interaction
       * Optionally provided.
       * @type {string} CSS selector
       */

      _this._inputEl = config.inputEl || '.js-yext-query';
      /**
       * The title used, provided to the template as a data point
       * Optionally provided.
       * @type {string}
       */

      _this.title = config.title;
      /**
       * The search text used for labeling the input box, also provided to template.
       * Optionally provided
       * @type {string}
       */

      _this.searchText = config.searchText || 'What are you interested in?';
      /**
       * The query text to show as the first item for auto complete.
       * Optionally provided
       * @type {string}
       */

      _this.promptHeader = config.promptHeader || null;
      /**
       * Auto focuses the input box if set to true.
       * Optionally provided, defaults to false.
       * @type {boolean}
       */

      _this.autoFocus = config.autoFocus === true;
      /**
       * submitURL will force the search query submission to get
       * redirected to the URL provided.
       * Optional, defaults to null.
       *
       * If no redirectUrl provided, we keep the page as a single page app.
       *
       * @type {boolean}
       */

      _this.redirectUrl = config.redirectUrl || null;
      /**
       * The query string to use for the input box, provided to template for rendering.
       * Optionally provided
       * @type {string}
       */

      _this.query = config.query || _this.core.globalStorage.getState("".concat(StorageKeys.QUERY, ".").concat(_this.name)) || '';

      _this.core.globalStorage.on('update', "".concat(StorageKeys.QUERY, ".").concat(_this.name), function (q) {
        _this.query = q;

        _this.search();
      });
      /**
       * The filter string to use for the provided query
       * Optionally provided
       * @type {string}
       */


      _this.filter = config.filter || _this.core.globalStorage.getState("".concat(StorageKeys.FILTER, ".").concat(_this.name)) || '';

      if (typeof _this.filter === 'string') {
        try {
          _this.filter = JSON.parse(_this.filter);
        } catch (e) {}
      }

      _this.searchParameters = buildSearchParameters(config.searchParameters);

      _this.core.globalStorage.on('update', "".concat(StorageKeys.FILTER, ".").concat(_this.name), function (f) {
        _this.filter = f;
      });

      return _this;
    }

    _createClass(FilterSearchComponent, [{
      key: "onCreate",
      // TODO(oshi): SPR-1925 check that it is safe to remove this, it runs an extra search
      // For no obvious reasons
      value: function onCreate() {
        if (this.query && this.filter) {
          this.search();
        }
      }
    }, {
      key: "onMount",
      value: function onMount() {
        // Wire up our search handling and auto complete
        this.initAutoComplete(this._inputEl);

        if (this.autoFocus === true && this.query.length === 0) {
          DOM.query(this._container, this._inputEl).focus();
        }
      }
      /**
       * A helper method to wire up our auto complete on an input selector
       * @param {string} inputSelector CSS selector to bind our auto complete component to
       */

    }, {
      key: "initAutoComplete",
      value: function initAutoComplete(inputSelector) {
        var _this2 = this;

        this._inputEl = inputSelector;
        this.componentManager.create('AutoComplete', {
          parentContainer: this._container,
          name: "".concat(this.name, ".autocomplete"),
          isFilterSearch: true,
          container: '.yxt-SearchBar-autocomplete',
          promptHeader: this.promptHeader,
          originalQuery: this.query,
          originalFilter: this.filter,
          inputEl: inputSelector,
          verticalKey: this._verticalKey,
          searchParameters: this.searchParameters,
          onSubmit: function onSubmit(query, filter) {
            var params = new SearchParams(window.location.search.substring(1));
            params.set("".concat(_this2.name, ".query"), query);
            params.set("".concat(_this2.name, ".filter"), filter); // If we have a redirectUrl, we want the params to be
            // serialized and submitted.

            if (typeof _this2.redirectUrl === 'string') {
              window.location.href = _this2.redirectUrl + '?' + params.toString();
              return false;
            } // save the filter to storage for the next search


            _this2.query = query;
            _this2.filter = Filter.fromResponse(filter);

            _this2.core.persistentStorage.set("".concat(StorageKeys.QUERY, ".").concat(_this2.name), _this2.query);

            _this2.core.persistentStorage.set("".concat(StorageKeys.FILTER, ".").concat(_this2.name), _this2.filter);

            _this2.core.setFilter(_this2.name, _this2.filter);

            _this2.search();
          }
        });
      }
      /**
       * Perform the vertical search with all saved filters and query,
       * optionally redirecting based on config
       */

    }, {
      key: "search",
      value: function search() {
        if (this._storeOnChange) {
          return;
        }

        var filters = this.core.globalStorage.getAll(StorageKeys.FILTER);
        var totalFilter = filters[0];

        if (filters.length > 1) {
          totalFilter = Filter.and.apply(Filter, _toConsumableArray(filters));
        }

        var searchQuery = this.core.globalStorage.getState(StorageKeys.QUERY) || '';
        var facetFilter = this.core.globalStorage.getAll(StorageKeys.FACET_FILTER)[0];
        this.core.persistentStorage["delete"](StorageKeys.SEARCH_OFFSET);
        this.core.globalStorage["delete"](StorageKeys.SEARCH_OFFSET);
        this.core.verticalSearch(this._verticalKey, {
          input: searchQuery,
          filter: JSON.stringify(totalFilter),
          facetFilter: JSON.stringify(facetFilter)
        });
      }
    }, {
      key: "setState",
      value: function setState(data) {
        return _get(_getPrototypeOf(FilterSearchComponent.prototype), "setState", this).call(this, Object.assign({
          title: this.title,
          searchText: this.searchText,
          query: this.query,
          filter: this.filter
        }, data));
      }
    }], [{
      key: "defaultTemplateName",

      /**
       * The template to render
       * @returns {string}
       * @override
       */
      value: function defaultTemplateName() {
        return 'search/filtersearch';
      }
    }, {
      key: "type",
      get: function get() {
        return 'FilterSearch';
      }
    }]);

    return FilterSearchComponent;
  }(Component);

  var Keys = {
    BACKSPACE: 8,
    TAB: 9,
    ENTER: 13,
    SHIFT: 16,
    CTRL: 17,
    ALT: 18,
    ESCAPE: 27,
    LEFT: 37,
    RIGHT: 39,
    UP: 38,
    DELETE: 46,
    DOWN: 40,
    LEFT_OS_KEY: 91,
    RIGHT_OS_KEY: 92,
    SELECT_KEY: 93
  };

  var AutoCompleteComponent =
  /*#__PURE__*/
  function (_Component) {
    _inherits(AutoCompleteComponent, _Component);

    function AutoCompleteComponent() {
      var _this;

      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var systemOpts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      _classCallCheck(this, AutoCompleteComponent);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(AutoCompleteComponent).call(this, opts, systemOpts));
      /**
       * Whether autocomplete is simple or filter
       * @type {boolean}
       */

      _this.isFilterSearch = opts.isFilterSearch || false;
      /**
       * The `verticalKey` of the vertical search to use for auto-complete
       * @type {string}
       */

      _this._verticalKey = opts.verticalKey || null;
      /**
       * A reference to the input el selector for auto complete
       * @type {string}
       */

      _this._inputEl = opts.inputEl || '.js-yext-query';
      /**
       * A selector for the autocomplete elementes
       * @type {string}
       */

      _this._autocompleteEls = opts.autoCompleteEls || '.js-yext-autocomplete-option';
      /**
       * An internal reference for the data-storage to listen for updates from the server
       * @type {string}
       */

      _this.moduleId = "".concat(StorageKeys.AUTOCOMPLETE, ".").concat(_this.name);
      /**
       * An internal reference to the input value when typing.
       * We use this for resetting the state of the input value when other interactions (e.g. result navigation)
       * change based on interactions. For instance, hitting escape should reset the value to the original typed query.
       * @type {string}
       */

      _this._originalQuery = opts.originalQuery || '';
      /**
       * Used for keyboard navigation through results.
       * An internal reference to the current section we're navigating in.
       * @type {number}
       */

      _this._sectionIndex = 0;
      /**
       * Used for keyboard navigation through results.
       * An internal reference to the current result index we're navigating on.
       * @type {number}
       */

      _this._resultIndex = -1;
      /**
       * The query text to show as the first item for auto complete.
       * Optionally provided
       * @type {string}
       */

      _this.promptHeader = opts.promptHeader || null;
      /**
       * Whether the input is autocomatically focused or not
       * @type {boolean}
       */

      _this._autoFocus = opts.autoFocus || false;
      /**
       * Callback invoked when the `Enter` key is pressed on auto complete.
       */

      _this._onSubmit = opts.onSubmit || function () {};
      /**
       * Callback invoked when keys are used to navigate through the auto complete. Note that this is
       * not called when either the `Enter` key is pressed or the mouse is used to select an
       * autocomplete option.
       */


      _this._onChange = opts.onChange || function () {};

      _this._searchParameters = opts.searchParameters || null;
      return _this;
    }
    /**
     * The aliased used by the component manager for creation.
     */


    _createClass(AutoCompleteComponent, [{
      key: "setState",

      /**
       * setState is overridden so that we can provide additional meta data
       * to the template (e.g. the sectionIndex and resultIndex), since
       * those are client-interaction specific values and aren't returned from the server.
       */
      value: function setState(data) {
        if (!this.isQueryInputFocused()) {
          this._sectionIndex = 0;
          this._resultIndex = -1;
          data = {};
        }

        _get(_getPrototypeOf(AutoCompleteComponent.prototype), "setState", this).call(this, Object.assign({}, data, {
          hasResults: this.hasResults(data),
          sectionIndex: this._sectionIndex,
          resultIndex: this._resultIndex,
          promptHeader: this._originalQuery.length === 0 ? this.promptHeader : null
        }));
      }
    }, {
      key: "isQueryInputFocused",
      value: function isQueryInputFocused() {
        return document.activeElement && document.activeElement.className.includes(this._inputEl.substring(1));
      }
      /**
       * updateState is a helper to apply the current state with new client-state.
       */

    }, {
      key: "updateState",
      value: function updateState() {
        this.setState(this._state.get());
      }
      /**
       * onCreate is triggered when the component is constructed from the framework.
       * Once we're initalized, we wire up all of our user interactions
       */

    }, {
      key: "onCreate",
      value: function onCreate() {
        var _this2 = this;

        // Use the context of the parent component to find the input node.
        var queryInput = DOM.query(this._parentContainer, this._inputEl);

        if (!queryInput) {
          throw new Error('Could not initialize AutoComplete. Can not find {HTMLElement} `', this._inputEl, '`.');
        } // Disable the native autocomplete, autocorrect & spellcheck


        DOM.attributes(queryInput, {
          autocomplete: 'off',
          autocorrect: 'off',
          spellcheck: 'false'
        }); // The user exits the input, so we want to reset the state and close
        // the auto complete
        // TODO(jdelerme): Close logic to be moved to parent

        DOM.on(document, 'click', function (e) {
          if (DOM.matches(e.target, '.js-yxt-AutoComplete-wrapper *') || DOM.matches(e.target, _this2._inputEl)) {
            return;
          }

          _this2.close();
        }); // When a user focuses the input, we should populate the autocomplete based
        // on the current value

        DOM.on(queryInput, 'focus', function () {
          _this2.reset();

          _this2.autoComplete(queryInput.value);
        }); // Allow the user to navigate between the results using the keyboard

        DOM.on(queryInput, 'keydown', function (e) {
          _this2.handleNavigateResults(e.keyCode, e);

          _this2.handleSubmitResult(e.keyCode, queryInput.value, e);
        });

        if (this._autoFocus) {
          DOM.once(queryInput, 'click', function () {
            _this2.autoComplete(queryInput.value);
          });
        } // Allow the user to select a result with the mouse


        DOM.delegate(this._container, '.js-yext-autocomplete-option', 'click', function (evt, target) {
          var data = target.dataset;
          var val = data["short"];

          _this2.updateQuery(val);

          _this2._onSubmit(val, data.filter);

          _this2.close();
        }); // When the user is typing in the input, process the auto complete.

        DOM.on(queryInput, 'keyup', function (e) {
          _this2.handleTyping(e.keyCode, queryInput.value, e);
        });
      }
      /**
       * close will hide the auto complete results and reset the state.
       */

    }, {
      key: "close",
      value: function close() {
        this.setState({});
        this.reset();
      }
      /**
       * resets the client state to their original values and triggers
       * a template-rerender via updateState
       */

    }, {
      key: "reset",
      value: function reset() {
        this._sectionIndex = 0;
        this._resultIndex = -1;
        this.updateState();
      }
      /**
       * Helper method to update the input text
       * @param {string} optValue Option value provided.
       * If no value provided, we'll try to find it based on the selection indexes.
       */

    }, {
      key: "updateQuery",
      value: function updateQuery(optValue) {
        // Only want to update the query string if theres a value.
        // If one is provided, great.
        // Otherwise, lets try to find it from the current selection in the results.
        if (optValue === undefined) {
          var sections = this._state.get('sections');

          var results = sections[this._sectionIndex].results;
          optValue = results[this._resultIndex].shortValue;
        }

        var queryEl = DOM.query(this._parentContainer, this._inputEl);
        queryEl.value = optValue;
      }
    }, {
      key: "handleTyping",
      value: function handleTyping(key, value, e) {
        var ignoredKeys = [Keys.DOWN, Keys.UP, Keys.CTRL, Keys.ALT, Keys.SHIFT, Keys.LEFT, Keys.RIGHT, Keys.LEFT_OS_KEY, Keys.RIGHT_OS_KEY, Keys.ENTER, Keys.TAB, Keys.SELECT_KEY];

        if (ignoredKeys.indexOf(key) > -1) {
          return;
        } // User escapes out of auto complete, so we reset it to the original input


        if (key === Keys.ESCAPE) {
          this.updateQuery(this._originalQuery);
          this.close();
          return;
        } // Update the original value based on the user input


        this._originalQuery = value;
        this.reset();
        this.autoComplete(value);
      }
    }, {
      key: "autoComplete",
      value: function autoComplete(input) {
        if (this.isFilterSearch) {
          this.core.autoCompleteFilter(input, {
            namespace: this.name,
            verticalKey: this._verticalKey,
            searchParameters: this._searchParameters
          });
        } else if (this._verticalKey) {
          this.core.autoCompleteVertical(input, this.name, this._verticalKey);
        } else {
          this.core.autoCompleteUniversal(input, this.name);
        }
      }
      /**
       * returns true if we have results in any section
       * @returns boolean
       */

    }, {
      key: "hasResults",
      value: function hasResults(data) {
        if (!data) {
          return false;
        }

        var sections = data['sections'];

        if (!sections) {
          return false;
        }

        for (var i = 0; i < sections.length; i++) {
          var _data = sections[i];

          if (!_data) {
            continue;
          }

          var results = _data.results;

          if (!results) {
            continue;
          }

          if (results.length > 0) {
            return true;
          }
        }

        return false;
      }
    }, {
      key: "handleNavigateResults",
      value: function handleNavigateResults(key, e) {
        var sections = this._state.get('sections');

        if (sections === undefined || sections.length <= 0) {
          return;
        } // Tabbing out or enter should close the auto complete.


        if (key === Keys.TAB) {
          this.close();
          return;
        }

        var results = sections[this._sectionIndex].results;

        if (key === Keys.UP) {
          e.preventDefault();

          if (this._resultIndex <= 0) {
            if (this._sectionIndex > 0) {
              this._sectionIndex--;
              this._resultIndex = sections[this._sectionIndex].results.length - 1;
            } else {
              this.updateQuery(this._originalQuery);
              this.reset();
              return;
            }

            this.updateQuery();
            this.updateState();
            return;
          }

          this._resultIndex--;
          this.updateState();
          this.updateQuery();
          return;
        }

        if (key === Keys.DOWN) {
          e.preventDefault();

          if (this._resultIndex >= results.length - 1) {
            if (this._sectionIndex < sections.length - 1) {
              this._sectionIndex++;
              this._resultIndex = 0;
            }

            this.updateQuery();
            this.updateState();
            return;
          }

          this._resultIndex++;
          this.updateQuery();
          this.updateState();
        }
      }
    }, {
      key: "handleSubmitResult",
      value: function handleSubmitResult(key, value, e) {
        var sections = this._state.get('sections');

        if (sections === undefined || sections.length <= 0) {
          if (this.isFilterSearch) {
            this.autoComplete(value);
          }

          return;
        } // submit the search on enter


        if (key === Keys.ENTER) {
          e.preventDefault();

          if (this.isFilterSearch && this._resultIndex === -1) {
            return;
          }

          var filter = '';

          if (this._sectionIndex >= 0 && this._resultIndex >= 0) {
            filter = JSON.stringify(sections[this._sectionIndex].results[this._resultIndex].filter);
          }

          this.updateQuery(value);
          this._originalQuery = value;

          this._onSubmit(value, filter);

          this.close();
        } else {
          this._onChange();
        }
      }
    }], [{
      key: "defaultTemplateName",

      /**
       * The template to render
       * @returns {string}
       * @override
       */
      value: function defaultTemplateName(config) {
        return 'search/autocomplete';
      }
    }, {
      key: "type",
      get: function get() {
        return 'AutoComplete';
      }
    }]);

    return AutoCompleteComponent;
  }(Component);

  var DEFAULT_CONFIG = {
    suggestionHelpText: 'Did you mean:'
  };
  /**
   * SpellCheckComponent will support displaying suggestion, autocorrect and combined(maybe in the future)
   * provided from spelling correction.
   *
   * @extends Component
   */

  var SpellCheckComponent =
  /*#__PURE__*/
  function (_Component) {
    _inherits(SpellCheckComponent, _Component);

    function SpellCheckComponent() {
      var _this;

      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var systemConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      _classCallCheck(this, SpellCheckComponent);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(SpellCheckComponent).call(this, _objectSpread({}, DEFAULT_CONFIG, {}, config), systemConfig));
      _this.moduleId = StorageKeys.SPELL_CHECK;
      return _this;
    }

    _createClass(SpellCheckComponent, [{
      key: "onCreate",
      value: function onCreate() {
        this.core.persistentStorage["delete"]('skipSpellCheck', true);
        this.core.persistentStorage["delete"]('queryTrigger', true);
      }
    }, {
      key: "setState",
      value: function setState(data, val) {
        return _get(_getPrototypeOf(SpellCheckComponent.prototype), "setState", this).call(this, Object.assign({}, data, {
          shouldShow: data.correctedQuery !== undefined,
          correctedQueryUrl: this._buildRedirectQueryUrl(data.correctedQuery, data.type),
          helpText: this._getHelpText(data.type)
        }, val));
      }
    }, {
      key: "_buildRedirectQueryUrl",
      value: function _buildRedirectQueryUrl(query, type) {
        if (query === undefined) {
          return '';
        }

        var params = new SearchParams(window.location.search.substring(1));
        params.set('query', query.value);
        params.set('skipSpellCheck', true);
        params.set('queryTrigger', type.toLowerCase());
        return '?' + params.toString();
      }
    }, {
      key: "_getHelpText",
      value: function _getHelpText(type) {
        switch (type) {
          case 'SUGGEST':
            return this._config.suggestionHelpText;

          default:
            return '';
        }
      }
    }], [{
      key: "defaultTemplateName",
      value: function defaultTemplateName() {
        return 'search/spellcheck';
      }
    }, {
      key: "type",
      get: function get() {
        return 'SpellCheck';
      }
    }]);

    return SpellCheckComponent;
  }(Component);

  var DEFAULT_CONFIG$1 = {
    ipAccuracyHelpText: 'based on your internet address',
    deviceAccuracyHelpText: 'based on your device',
    updateLocationButtonText: 'Update your location'
  };
  /**
   * LocationBiasComponent will show the user where is used for location bias and allow user to
   * improve accuracy with HTML5 geolocation.
   *
   * @extends Component
   */

  var LocationBiasComponent =
  /*#__PURE__*/
  function (_Component) {
    _inherits(LocationBiasComponent, _Component);

    function LocationBiasComponent() {
      var _this;

      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var systemConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      _classCallCheck(this, LocationBiasComponent);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(LocationBiasComponent).call(this, _objectSpread({}, DEFAULT_CONFIG$1, {}, config), systemConfig));
      /**
       * Recieve updates from storage based on this index
       * @type {StorageKey}
       */

      _this.moduleId = StorageKeys.LOCATION_BIAS;
      /**
       * The optional vertical key for vertical search configuration
       * If not provided, when location updated,
       * a universal search will be triggered.
       * @type {string}
       */
      // TODO: Remove config.verticalKey

      _this._verticalKey = config.verticalKey || _this.core.globalStorage.getState(StorageKeys.SEARCH_CONFIG).verticalKey || null;
      /**
       * The element used for updating location
       * Optionally provided.
       * @type {string} CSS selector
       */

      _this._updateLocationEl = config.updateLocationEl || '.js-locationBias-update-location';
      _this._locationDisplayName = '';
      _this._accuracy = '';
      _this._allowUpdate = true;
      /**
       * Options to pass to the geolocation api.
       * @type {Object}
       */

      _this._geolocationOptions = _objectSpread({
        enableHighAccuracy: false,
        timeout: 6000,
        maximumAge: 300000
      }, config.geolocationOptions);
      /**
       * Options for the geolocation timeout alert.
       * @type {Object}
       */

      _this._geolocationTimeoutAlert = _objectSpread({
        enabled: false,
        message: 'We are unable to determine your location'
      }, config.geolocationTimeoutAlert);
      return _this;
    }

    _createClass(LocationBiasComponent, [{
      key: "onMount",
      value: function onMount() {
        var _this2 = this;

        if (!this._allowUpdate) {
          return;
        }

        this._disableLocationUpdateIfGeolocationDenied();

        DOM.on(this._updateLocationEl, 'click', function (e) {
          if ('geolocation' in navigator) {
            navigator.geolocation.getCurrentPosition(function (position) {
              _this2.core.globalStorage.set(StorageKeys.GEOLOCATION, {
                lat: position.coords.latitude,
                lng: position.coords.longitude,
                radius: position.coords.accuracy
              });

              _this2._doSearch();
            }, function (err) {
              return _this2._handleGeolocationError(err);
            }, _this2._geolocationOptions);
          } // TODO: Should we throw error or warning here if no geolocation?

        });
      }
    }, {
      key: "_handleGeolocationError",
      value: function _handleGeolocationError(err) {
        if (err.code === 1) {
          this._disableLocationUpdate();
        }

        var _this$_geolocationTim = this._geolocationTimeoutAlert,
            enabled = _this$_geolocationTim.enabled,
            message = _this$_geolocationTim.message;

        if (enabled) {
          window.alert(message);
        }
      }
    }, {
      key: "setState",
      value: function setState(data, val) {
        this._locationDisplayName = data.locationDisplayName;
        this._accuracy = data.accuracy;
        return _get(_getPrototypeOf(LocationBiasComponent.prototype), "setState", this).call(this, Object.assign({}, data, {
          locationDisplayName: this._getLocationDisplayName(data),
          accuracyText: this._getAccuracyHelpText(data.accuracy),
          isPreciseLocation: data.accuracy === 'DEVICE' && this._allowUpdate,
          isUnknownLocation: data.accuracy === 'UNKNOWN',
          shouldShow: data.accuracy !== undefined,
          allowUpdate: this._allowUpdate
        }, val));
      }
    }, {
      key: "_getLocationDisplayName",
      value: function _getLocationDisplayName(data) {
        if (data.accuracy === 'UNKNOWN') {
          return 'Unknown Location';
        }

        return data.locationDisplayName;
      }
    }, {
      key: "_getAccuracyHelpText",
      value: function _getAccuracyHelpText(accuracy) {
        switch (accuracy) {
          case 'IP':
            return this._config.ipAccuracyHelpText;

          case 'DEVICE':
            return this._config.deviceAccuracyHelpText;

          default:
            return '';
        }
      }
    }, {
      key: "_doSearch",
      value: function _doSearch() {
        var query = this.core.globalStorage.getState(StorageKeys.QUERY);

        if (this._verticalKey) {
          var allFilters = this.core.globalStorage.getAll(StorageKeys.FILTER);
          var totalFilter = allFilters.length > 1 ? Filter.and.apply(Filter, _toConsumableArray(allFilters)) : allFilters[0];
          var facetFilter = this.core.globalStorage.getAll(StorageKeys.FACET_FILTER)[0];
          this.core.verticalSearch(this._verticalKey, {
            input: query,
            filter: JSON.stringify(totalFilter),
            offset: this.core.globalStorage.getState(StorageKeys.SEARCH_OFFSET) || 0,
            facetFilter: JSON.stringify(facetFilter)
          });
        } else {
          this.core.search(query);
        }
      }
    }, {
      key: "_disableLocationUpdateIfGeolocationDenied",
      value: function _disableLocationUpdateIfGeolocationDenied() {
        var _this3 = this;

        if ('permissions' in navigator) {
          navigator.permissions.query({
            name: 'geolocation'
          }).then(function (result) {
            if (result.state === 'denied') {
              _this3._disableLocationUpdate();
            }
          });
        }
      }
    }, {
      key: "_disableLocationUpdate",
      value: function _disableLocationUpdate() {
        this.core.globalStorage["delete"](StorageKeys.GEOLOCATION);
        this._allowUpdate = false;
        this.setState({
          locationDisplayName: this._locationDisplayName,
          accuracy: this._accuracy
        });
      }
    }], [{
      key: "defaultTemplateName",
      value: function defaultTemplateName() {
        return 'search/locationbias';
      }
    }, {
      key: "type",
      get: function get() {
        return 'LocationBias';
      }
    }]);

    return LocationBiasComponent;
  }(Component);

  /** @module Facet */

  /**
   * Model representing a facet filter with the format of
   * {
   *   "field_name": [ Filters... ],
   *   ...
   * }
   *
   * @see {@link Filter}
   */
  var Facet =
  /*#__PURE__*/
  function () {
    function Facet() {
      var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      _classCallCheck(this, Facet);

      Object.assign(this, data);
      Object.freeze(this);
    }
    /**
     * Create a facet filter from a list of Filters
     * @param  {...Filter} filters The filters to use in this facet
     * @returns {Facet}
     */


    _createClass(Facet, null, [{
      key: "fromFilters",
      value: function fromFilters(availableFieldIds) {
        var groups = {};
        availableFieldIds.forEach(function (fieldId) {
          groups[fieldId] = [];
        });

        for (var _len = arguments.length, filters = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          filters[_key - 1] = arguments[_key];
        }

        var flatFilters = filters.flatMap(function (f) {
          return f.$or || f;
        });
        flatFilters.forEach(function (f) {
          var key = Object.keys(f)[0];

          if (!groups[key]) {
            groups[key] = [];
          }

          groups[key].push(f);
        });
        return new Facet(groups);
      }
    }]);

    return Facet;
  }();

  var FilterBoxConfig =
  /*#__PURE__*/
  function () {
    function FilterBoxConfig(config) {
      _classCallCheck(this, FilterBoxConfig);

      /**
       * The title to display above the controls
       * @type {string}
       */
      this.title = config.title || 'Filters';
      /**
       * If true, display the number of results next to each facet
       * @type {boolean}
       */

      this.showCount = config.showCount === undefined ? true : config.showCount;
      /**
       * If true, trigger a search on each change to a filter
       * @type {boolean}
       */

      this.searchOnChange = config.searchOnChange || false;
      /**
       * If true, show a button to reset for each facet group
       * @type {boolean}
       */

      this.resetFilter = config.resetFacet || false;
      /**
       * The label to show for the reset button
       * @type {string}
       */

      this.resetFilterLabel = config.resetFacetLabel || 'reset';
      /**
       * If true, show a "reset all" button to reset all facets
       * @type {boolean}
       */

      this.resetFilters = config.resetFacets === undefined ? true : config.resetFacets;
      /**
       * The label to show for the "reset all" button
       * @type {string}
       */

      this.resetFiltersLabel = config.resetFacetsLabel || 'reset all';
      /**
       * The max number of facets to show before displaying "show more"/"show less"
       * @type {number}
       */

      this.showMoreLimit = config.showMoreLimit || 5;
      /**
       * The label to show for displaying more facets
       * @type {string}
       */

      this.showMoreLabel = config.showMoreLabel || 'show more';
      /**
       * The label to show for displaying less facets
       * @type {string}
       */

      this.showLessLabel = config.showLessLabel || 'show less';
      /**
       * If true, enable hiding excess facets in each group with a "show more"/"show less" button
       * @type {boolean}
       */

      this.showMore = config.showMore === undefined ? true : config.showMore;
      /**
       * If true, allow expanding and collapsing each group of facets
       * @type {boolean}
       */

      this.expand = config.expand === undefined ? true : config.expand;
      /**
       * If true, display the number of currently applied filters when collapsed
       * @type {boolean}
       */

      this.showNumberApplied = config.showNumberApplied === undefined ? true : config.showNumberApplied;
      /**
       * Text to display on the apply button
       * @type {string}
       */

      this.applyLabel = config.applyLabel || 'apply';
      /**
       * The selector of the apply button
       * @type {string}
       */

      this.applyButtonSelector = config.applyButtonSelector || '.js-yext-filterbox-apply';
      /**
       * The list of filters to display and control, ignoring empty sections
       * @type {object[]}
       */

      this.filterConfigs = config.filters.filter(function (f) {
        return f.options.length !== 0;
      });
      /**
       * Whether or not this filterbox contains facets. This affects the
       * the way the filters are used in the search
       * @type {boolean}
       */

      this.isDynamic = config.isDynamic || false;
      this.validate();
    }

    _createClass(FilterBoxConfig, [{
      key: "validate",
      value: function validate() {}
    }]);

    return FilterBoxConfig;
  }();
  /**
   * Renders a set of filters, and searches with them when applied.
   * Multiple FilterBox components will AND together but will not share state.
   * @extends Component
   */


  var FilterBoxComponent =
  /*#__PURE__*/
  function (_Component) {
    _inherits(FilterBoxComponent, _Component);

    function FilterBoxComponent() {
      var _this;

      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var systemConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      _classCallCheck(this, FilterBoxComponent);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(FilterBoxComponent).call(this, config, systemConfig));
      _this.config = new FilterBoxConfig(config);

      if (!config.filters || !(config.filters instanceof Array)) {
        throw new AnswersComponentError('FilterBox requires filters to be provided as an array', 'FilterBox');
      }
      /**
       * The vertical key for the search
       * @type {string}
       * @private
       */


      _this._verticalKey = config.verticalKey || null;
      /**
       * The components created for each filter config
       * @type {Component[]}
       * @private
       */

      _this._filterComponents = [];
      /**
       * The current state of the filter components in the box
       * @type {Filter}
       * @private
       */

      _this._filters = [];

      if (!_this.config.showCount) {
        _this.config.filterConfigs.forEach(function (config) {
          config.options.forEach(function (option) {
            option.countLabel = null;
          });
        });
      }

      return _this;
    }

    _createClass(FilterBoxComponent, [{
      key: "setState",
      value: function setState(data) {
        _get(_getPrototypeOf(FilterBoxComponent.prototype), "setState", this).call(this, Object.assign({}, data, this.config, {
          showReset: this.config.resetFilters,
          resetLabel: this.config.resetFiltersLabel,
          showApplyButton: !this.config.searchOnChange
        }));
      }
    }, {
      key: "onMount",
      value: function onMount() {
        var _this2 = this;

        if (this._filterComponents.length) {
          this._filterComponents.forEach(function (c) {
            return c.remove();
          });

          this._filterComponents = [];
          this._filters = [];
        } // Initialize filters from configs


        var _loop = function _loop(i) {
          var config = _this2.config.filterConfigs[i];

          var component = _this2.componentManager.create(config.type, Object.assign({}, config, _this2.config, {
            parentContainer: _this2._container,
            name: "".concat(_this2.name, ".filter").concat(i),
            storeOnChange: false,
            container: ".js-yext-filterbox-filter".concat(i),
            showReset: _this2.config.resetFilter,
            resetLabel: _this2.config.resetFilterLabel,
            showExpand: _this2.config.expand,
            onChange: function onChange(filter) {
              _this2.onFilterChange(i, filter);
            }
          }));

          component.mount();

          _this2._filterComponents.push(component);

          _this2._filters[i] = component.getFilter();

          _this2._saveFiltersToStorage();
        };

        for (var i = 0; i < this.config.filterConfigs.length; i++) {
          _loop(i);
        } // Initialize apply button


        if (!this.config.searchOnChange) {
          var button = DOM.query(this._container, this.config.applyButtonSelector);

          if (button) {
            DOM.on(button, 'click', function () {
              _this2._saveFiltersToStorage();

              _this2._search();
            });
          }
        } // Initialize reset button


        var resetEl = DOM.query(this._container, '.js-yxt-FilterBox-reset');

        if (resetEl) {
          DOM.on(resetEl, 'click', this.resetFilters.bind(this));
        }
      }
    }, {
      key: "resetFilters",
      value: function resetFilters() {
        this._filterComponents.forEach(function (filter) {
          return filter.clearOptions();
        });
      }
      /**
       * Handle changes to child filter components
       * @param {number} index The index of the changed filter
       * @param {Filter} filter The new filter
       */

    }, {
      key: "onFilterChange",
      value: function onFilterChange(index, filter) {
        this._filters[index] = filter;

        if (this.config.searchOnChange) {
          this._saveFiltersToStorage();

          this._search();
        }
      }
      /**
       * Remove all filter components along with this component
       */

    }, {
      key: "remove",
      value: function remove() {
        this._filterComponents.forEach(function (c) {
          return c.remove();
        });

        _get(_getPrototypeOf(FilterBoxComponent.prototype), "remove", this).call(this);
      }
      /**
       * Save current filters to storage to be used in the next search
       * @private
       */

    }, {
      key: "_saveFiltersToStorage",
      value: function _saveFiltersToStorage() {
        var validFilters = this._filters.filter(function (f) {
          return f !== undefined && f !== null && Object.keys(f).length > 0;
        });

        if (this.config.isDynamic) {
          var availableFieldIds = this.config.filterConfigs.map(function (config) {
            return config.fieldId;
          });
          var combinedFilter = Facet.fromFilters.apply(Facet, [availableFieldIds].concat(_toConsumableArray(validFilters)));
          this.core.setFacetFilter(this.name, combinedFilter || {});
        } else {
          var _combinedFilter = validFilters.length > 1 ? Filter.and.apply(Filter, _toConsumableArray(validFilters)) : validFilters[0];

          this.core.setFilter(this.name, _combinedFilter || {});
        }
      }
      /**
       * Trigger a search with all filters in storage
       */

    }, {
      key: "_search",
      value: function _search() {
        var allFilters = this.core.globalStorage.getAll(StorageKeys.FILTER);
        var totalFilter = allFilters.length > 1 ? Filter.and.apply(Filter, _toConsumableArray(allFilters)) : allFilters[0];
        var query = this.core.globalStorage.getState(StorageKeys.QUERY);
        var facetFilter = this.core.globalStorage.getAll(StorageKeys.FACET_FILTER)[0];
        this.core.persistentStorage["delete"](StorageKeys.SEARCH_OFFSET);
        this.core.globalStorage["delete"](StorageKeys.SEARCH_OFFSET);
        this.core.verticalSearch(this._verticalKey, {
          input: query,
          filter: JSON.stringify(totalFilter),
          facetFilter: JSON.stringify(facetFilter)
        });
      }
    }], [{
      key: "defaultTemplateName",
      value: function defaultTemplateName() {
        return 'filters/filterbox';
      }
    }, {
      key: "type",
      get: function get() {
        return 'FilterBox';
      }
    }]);

    return FilterBoxComponent;
  }(Component);

  /**
   * The currently supported controls
   * @type {string[]}
   */

  var SUPPORTED_CONTROLS = ['singleoption', 'multioption'];

  var FilterOptionsConfig =
  /*#__PURE__*/
  function () {
    function FilterOptionsConfig(config) {
      _classCallCheck(this, FilterOptionsConfig);

      /**
       * The type of control to display
       * @type {string}
       */
      this.control = config.control;
      /**
       * The list of filter options to display with checked status
       * @type {object[]}
       */

      this.options = config.options;
      /**
       * The label to be used in the legend
       * @type {string}
       */

      this.label = config.label || 'Filters';
      /**
       * The callback function to call when changed
       * @type {function}
       */

      this.onChange = config.onChange || function () {};
      /**
       * If true, stores the filter to storage on each change
       * @type {boolean}
       */


      this.storeOnChange = config.storeOnChange === undefined ? true : config.storeOnChange;
      /**
       * If true, show a button to reset the current filter selection
       * @type {boolean}
       */

      this.showReset = config.showReset && this.options.length > 0;
      /**
       * The label to show for the reset button
       * @type {string}
       */

      this.resetLabel = config.resetLabel || 'reset';
      /**
       * The max number of facets to show before displaying "show more"/"show less"
       * @type {number}
       */

      this.showMoreLimit = config.showMoreLimit || 5;
      /**
       * The label to show for displaying more facets
       * @type {string}
       */

      this.showMoreLabel = config.showMoreLabel || 'show more';
      /**
       * The label to show for displaying less facets
       * @type {string}
       */

      this.showLessLabel = config.showLessLabel || 'show less';
      /**
       * If true, enable hiding excess facets with a "show more"/"show less" button
       * @type {boolean}
       */

      this.showMore = config.showMore === undefined ? true : config.showMore;
      this.showMore = this.showMore && this.options.length > this.showMoreLimit;
      /**
       * If true, allow expanding and collapsing the group of facets
       * @type {boolean}
       */

      this.showExpand = config.showExpand === undefined ? true : config.showExpand;
      /**
       * If true, display the number of currently applied filters when collapsed
       * @type {boolean}
       */

      this.showNumberApplied = config.showNumberApplied === undefined ? true : config.showNumberApplied;
      /**
       * The selector used for options in the template
       * @type {string}
       */

      this.optionSelector = config.optionSelector || '.js-yext-filter-option';
      this.validate();

      if (typeof config.previousOptions === 'string') {
        try {
          config.previousOptions = JSON.parse(config.previousOptions);
        } catch (e) {
          config.previousOptions = [];
        }
      }

      var selectedOptions = config.previousOptions || [];
      this.options = this.setDefaultSelectedValues(this.options, selectedOptions);
    }

    _createClass(FilterOptionsConfig, [{
      key: "setDefaultSelectedValues",
      value: function setDefaultSelectedValues(options, selectedOptions) {
        return options.map(function (o) {
          return _objectSpread({}, o, {
            selected: selectedOptions.length ? selectedOptions.includes(o.label) : o.selected
          });
        });
      }
    }, {
      key: "getSelectedCount",
      value: function getSelectedCount() {
        return this.options.reduce(function (numSelected, option) {
          return option.selected ? numSelected + 1 : numSelected;
        }, 0);
      }
    }, {
      key: "validate",
      value: function validate() {
        if (!this.control || !SUPPORTED_CONTROLS.includes(this.control)) {
          throw new AnswersComponentError('FilterOptions requires a valid "control" to be provided', 'FilterOptions');
        }

        if (!this.options) {
          throw new AnswersComponentError('FilterOptions component requires options to be provided', 'FilterOptions');
        }
      }
    }]);

    return FilterOptionsConfig;
  }();
  /**
   * Renders a set of options, each one representing a filter in a search.
   */


  var FilterOptionsComponent =
  /*#__PURE__*/
  function (_Component) {
    _inherits(FilterOptionsComponent, _Component);

    function FilterOptionsComponent() {
      var _this;

      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var systemConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      _classCallCheck(this, FilterOptionsComponent);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(FilterOptionsComponent).call(this, config, systemConfig));

      var previousOptions = _this.core.globalStorage.getState(_this.name);

      _this.core.globalStorage["delete"](_this.name);
      /**
       * The component config
       * @type {FilterOptionsConfig}
       */


      _this.config = new FilterOptionsConfig(_objectSpread({
        previousOptions: previousOptions
      }, config));

      var selectedCount = _this.config.getSelectedCount();
      /**
       * True if the option list is expanded and visible
       * @type {boolean}
       */


      _this.expanded = _this.config.showExpand ? selectedCount > 0 : true;
      /**
       * True if all options are shown, false if some are hidden based on config
       * @type {boolean}
       */

      _this.allShown = false;
      return _this;
    }

    _createClass(FilterOptionsComponent, [{
      key: "setState",
      value: function setState(data) {
        var options = this.config.options;

        if (this.config.showMore && !this.allShown) {
          options = this.config.options.slice(0, this.config.showMoreLimit);
        }

        var selectedCount = this.config.getSelectedCount();

        _get(_getPrototypeOf(FilterOptionsComponent.prototype), "setState", this).call(this, Object.assign({}, data, _objectSpread({
          name: this.name.toLowerCase()
        }, this.config, {
          showReset: this.config.showReset && selectedCount > 0,
          expanded: this.expanded,
          allShown: this.allShown,
          selectedCount: selectedCount,
          isSingleOption: this.config.control === 'singleoption',
          options: options
        })));
      }
    }, {
      key: "onMount",
      value: function onMount() {
        var _this2 = this;

        DOM.delegate(DOM.query(this._container, ".yxt-FilterOptions-options"), this.config.optionSelector, 'click', function (event) {
          _this2._updateOption(parseInt(event.target.dataset.index), event.target.checked);
        });
        var selectedCount = this.config.getSelectedCount(); // reset button

        if (this.config.showReset && selectedCount > 0) {
          DOM.on(DOM.query(this._container, '.yxt-FilterOptions-reset'), 'click', this.clearOptions.bind(this));
        } // show more/less button


        if (this.config.showMore) {
          DOM.on(DOM.query(this._container, '.yxt-FilterOptions-showToggle'), 'click', function () {
            _this2.allShown = !_this2.allShown;

            _this2.setState();
          });
        } // expand button


        if (this.config.showExpand) {
          var legend = DOM.query(this._container, '.yxt-FilterOptions-clickableLegend');
          DOM.on(legend, 'mousedown', function (click) {
            if (click.button === 0) {
              _this2.expanded = !_this2.expanded;

              _this2.setState();
            }
          });
          DOM.on(legend, 'keydown', function (key) {
            if (key.key === ' ' || key.key === 'Enter') {
              key.preventDefault();
              _this2.expanded = !_this2.expanded;

              _this2.setState();
            }
          });
        }
      }
    }, {
      key: "clearOptions",
      value: function clearOptions() {
        this.config.options = this.config.options.map(function (o) {
          return Object.assign({}, o, {
            selected: false
          });
        });
        this.updateListeners();
        this.setState();
      }
    }, {
      key: "updateListeners",
      value: function updateListeners() {
        var filter = this._buildFilter();

        if (this.config.storeOnChange) {
          this.core.setFilter(this.name, filter);
        }

        this.config.onChange(filter);
      }
    }, {
      key: "_updateOption",
      value: function _updateOption(index, selected) {
        if (this.config.control === 'singleoption') {
          this.config.options = this.config.options.map(function (o) {
            return Object.assign({}, o, {
              selected: false
            });
          });
        }

        this.config.options[index] = Object.assign({}, this.config.options[index], {
          selected: selected
        });
        this.updateListeners();
        this.setState();
      }
    }, {
      key: "getFilter",
      value: function getFilter() {
        return this._buildFilter();
      }
      /**
       * Clear all options
       */

    }, {
      key: "clear",
      value: function clear() {
        var elements = DOM.queryAll(this._container, this.config.optionSelector);
        elements.forEach(function (e) {
          return e.setAttribute('checked', 'false');
        });

        this._applyFilter();
      }
      /**
       * Build and return the Filter that represents the current state
       * @returns {Filter}
       * @private
       */

    }, {
      key: "_buildFilter",
      value: function _buildFilter() {
        var filters = this.config.options.filter(function (o) {
          return o.selected;
        }).map(function (o) {
          return o.filter ? o.filter : Filter.equal(o.field, o.value);
        });
        this.core.persistentStorage.set(this.name, this.config.options.filter(function (o) {
          return o.selected;
        }).map(function (o) {
          return o.label;
        }));
        return filters.length > 0 ? Filter.group.apply(Filter, _toConsumableArray(filters)) : {};
      }
    }], [{
      key: "defaultTemplateName",

      /**
       * The template to render, based on the control
       * @returns {string}
       * @override
       */
      value: function defaultTemplateName(config) {
        return "controls/filteroptions";
      }
    }, {
      key: "type",
      get: function get() {
        return 'FilterOptions';
      }
    }]);

    return FilterOptionsComponent;
  }(Component);

  var DEFAULT_CONFIG$2 = {
    minPlaceholderText: 'Min',
    maxPlaceholderText: 'Max'
  };

  var RangeFilterComponent =
  /*#__PURE__*/
  function (_Component) {
    _inherits(RangeFilterComponent, _Component);

    function RangeFilterComponent() {
      var _this;

      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var systemConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      _classCallCheck(this, RangeFilterComponent);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(RangeFilterComponent).call(this, _objectSpread({}, DEFAULT_CONFIG$2, {}, config), systemConfig));
      /**
       * The field to filter on
       * @type {string}
       * @private
       */

      _this._field = config.field;
      /**
       * The callback function to call when the filter value changes
       * @type {function}
       * @private
       */

      _this._onChange = config.onChange || function () {};
      /**
       * If true, stores the filter to storage on each change
       * @type {boolean}
       * @private
       */


      _this._storeOnChange = config.storeOnChange === undefined ? true : config.storeOnChange;

      var minVal = _this.core.globalStorage.getState("".concat(_this.name, ".min"));

      if (typeof minVal === 'string') {
        try {
          minVal = Number.parseInt(minVal);
        } catch (e) {}
      }

      var maxVal = _this.core.globalStorage.getState("".concat(_this.name, ".max"));

      if (typeof minVal === 'string') {
        try {
          maxVal = Number.parseInt(maxVal);
        } catch (e) {}
      }
      /**
       * The current range represented
       * @type {object}
       * @private
       */


      _this._range = {
        min: minVal || config.initialMin || 0,
        max: maxVal || config.initialMax || 10
      };
      /**
       * The title to display for the range control
       * @type {string}
       * @private
       */

      _this._title = config.title;
      /**
       * The optional label to display for the min input
       * @type {string}
       * @private
       */

      _this._minLabel = config.minLabel || null;
      /**
       * The optional label to display for the max input
       * @type {string}
       * @private
       */

      _this._maxLabel = config.maxLabel || null;
      /**
       * The template to render
       * @type {string}
       * @private
       */

      _this._templateName = "controls/range";
      return _this;
    }

    _createClass(RangeFilterComponent, [{
      key: "setState",
      value: function setState(data) {
        _get(_getPrototypeOf(RangeFilterComponent.prototype), "setState", this).call(this, Object.assign({}, data, {
          name: this.name,
          title: this._title,
          minLabel: this._minLabel,
          maxLabel: this._maxLabel,
          minValue: this._range.min,
          maxValue: this._range.max
        }));
      }
    }, {
      key: "onCreate",
      value: function onCreate() {
        var _this2 = this;

        DOM.delegate(this._container, '.js-yext-range', 'change', function (event) {
          _this2._updateRange(event.target.dataset.key, Number.parseInt(event.target.value));
        });
      }
    }, {
      key: "setMin",
      value: function setMin(value) {
        this._updateRange('min', value);
      }
    }, {
      key: "setMax",
      value: function setMax(value) {
        this._updateRange('max', value);
      }
    }, {
      key: "getFilter",
      value: function getFilter() {
        return this._buildFilter();
      }
      /**
       * Update the current range state
       * @param {string} key The range key to update
       * @param {number} value The new value for the key
       */

    }, {
      key: "_updateRange",
      value: function _updateRange(key, value) {
        this._range = Object.assign({}, this._range, _defineProperty({}, key, value));
        this.setState();

        var filter = this._buildFilter();

        if (this._storeOnChange) {
          this.core.setFilter(this.name, filter);
        }

        this.core.persistentStorage.set("".concat(this.name, ".min"), this._range.min);
        this.core.persistentStorage.set("".concat(this.name, ".max"), this._range.max);

        this._onChange(filter);
      }
      /**
       * Build the filter representation of the current state
       * @returns {Filter}
       */

    }, {
      key: "_buildFilter",
      value: function _buildFilter() {
        return Filter.inclusiveRange(this._field, this._range.min, this._range.max);
      }
    }], [{
      key: "type",
      get: function get() {
        return 'RangeFilter';
      }
    }]);

    return RangeFilterComponent;
  }(Component);

  /**
   * A filter for a range of dates
   */

  var DateRangeFilterComponent =
  /*#__PURE__*/
  function (_Component) {
    _inherits(DateRangeFilterComponent, _Component);

    function DateRangeFilterComponent() {
      var _this;

      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var systemConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      _classCallCheck(this, DateRangeFilterComponent);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(DateRangeFilterComponent).call(this, config, systemConfig));
      /**
       * The api field this filter controls
       * @type {string}
       * @private
       */

      _this._field = config.field;
      /**
       * The title to display for the date range
       * @type {string}
       * @private
       */

      _this._title = config.title;
      /**
       * The optional label to show for the min date input
       * @type {string}
       * @private
       */

      _this._minLabel = config.minLabel || null;
      /**
       * The optional label to show for the max date input
       * @type {string}
       * @private
       */

      _this._maxLabel = config.maxLabel || null;
      /**
       * The callback used when a date is changed
       * @type {function}
       * @private
       */

      _this._onChange = config.onChange || function () {};
      /**
       * If true, stores the filter to storage on each change
       * @type {boolean}
       * @private
       */


      _this._storeOnChange = config.storeOnChange === undefined ? true : config.storeOnChange;
      /**
       * If true, this filter represents an exclusive range, rather than an inclusive one
       * @type {boolean}
       * @private
       */

      _this._isExclusive = config.isExclusive;
      /**
       * The template for this component
       * @private
       */

      _this._templateName = "controls/date";
      var today = new Date();
      var todayString = "".concat(today.getFullYear(), "-").concat("".concat(today.getMonth() + 1).padStart(2, '0'), "-").concat("".concat(today.getDate()).padStart(2, '0'));

      var minDate = _this.core.globalStorage.getState("".concat(_this.name, ".min"));

      var maxDate = _this.core.globalStorage.getState("".concat(_this.name, ".max"));
      /**
       * The current date range
       * @private
       */


      _this._date = {
        min: minDate || config.initialMin || todayString,
        max: maxDate || config.initialMax || todayString
      };
      return _this;
    }

    _createClass(DateRangeFilterComponent, [{
      key: "setState",
      value: function setState(data) {
        _get(_getPrototypeOf(DateRangeFilterComponent.prototype), "setState", this).call(this, Object.assign({}, data, {
          name: this.name,
          title: this._title,
          minLabel: this._minLabel,
          maxLabel: this._maxLabel,
          dateMin: this._date.min,
          dateMax: this._date.max
        }));
      }
    }, {
      key: "onCreate",
      value: function onCreate() {
        var _this2 = this;

        DOM.delegate(this._container, '.js-yext-date', 'change', function (event) {
          _this2._updateRange(event.target.dataset.key, event.target.value);
        });
      }
      /**
       * Set the min date to the one provided
       * @param {string} date Date to set in yyyy-mm-dd string format
       */

    }, {
      key: "setMin",
      value: function setMin(date) {
        this._updateRange('min', date);
      }
      /**
       * Set the max date to the one provided
       * @param {string} date Date to set in yyyy-mm-dd string format
       */

    }, {
      key: "setMax",
      value: function setMax(date) {
        this._updateRange('max', date);
      }
    }, {
      key: "getFilter",
      value: function getFilter() {
        return this._buildFilter();
      }
      /**
       * Updates the current state of the date range
       * @param {string} key The key for the date value
       * @param {string} value The string date value
       * @private
       */

    }, {
      key: "_updateRange",
      value: function _updateRange(key, value) {
        this._date = Object.assign({}, this._date, _defineProperty({}, key, value));
        this.setState();

        var filter = this._buildFilter();

        if (this._storeOnChange) {
          this.core.setFilter(this.name, filter);
        }

        this.core.persistentStorage.set("".concat(this.name, ".min"), this._date.min);
        this.core.persistentStorage.set("".concat(this.name, ".max"), this._date.max);

        this._onChange(filter);
      }
      /**
       * Construct an api filter with the current date state
       * @private
       */

    }, {
      key: "_buildFilter",
      value: function _buildFilter() {
        if (this._date.min === '' || this._date.max === '') {
          return {};
        }

        return this._isExclusive ? Filter.exclusiveRange(this._field, this._date.min, this._date.max) : Filter.inclusiveRange(this._field, this._date.min, this._date.max);
      }
    }], [{
      key: "type",
      get: function get() {
        return 'DateRangeFilter';
      }
    }]);

    return DateRangeFilterComponent;
  }(Component);

  var FacetsConfig =
  /*#__PURE__*/
  function () {
    function FacetsConfig(config) {
      _classCallCheck(this, FacetsConfig);

      /**
       * The title to display above the controls
       * @type {string}
       */
      this.title = config.title || 'Filters';
      /**
       * If true, display the number of results next to each facet
       * @type {boolean}
       */

      this.showCount = config.showCount === undefined ? true : config.showCount;
      /**
       * If true, trigger a search on each change to a filter
       * @type {boolean}
       */

      this.searchOnChange = config.searchOnChange || false;
      /**
       * If true, show a button to reset for each facet group
       * @type {boolean}
       */

      this.resetFacet = config.resetFacet || false;
      /**
       * The label to show for the reset button
       * @type {string}
       */

      this.resetFacetLabel = config.resetFacetLabel || 'reset';
      /**
       * If true, show a "reset all" button to reset all facets
       * @type {boolean}
       */

      this.resetFacets = config.resetFacets === undefined ? true : config.resetFacets;
      /**
       * The label to show for the "reset all" button
       * @type {string}
       */

      this.resetFacetsLabel = config.resetFacetsLabel || 'reset all';
      /**
       * The max number of facets to show before displaying "show more"/"show less"
       * @type {number}
       */

      this.showMoreLimit = config.showMoreLimit || 5;
      /**
       * The label to show for displaying more facets
       * @type {string}
       */

      this.showMoreLabel = config.showMoreLabel || 'show more';
      /**
       * The label to show for displaying less facets
       * @type {string}
       */

      this.showLessLabel = config.showLessLabel || 'show less';
      /**
       * If true, enable hiding excess facets in each group with a "show more"/"show less" button
       * @type {boolean}
       */

      this.showMore = config.showMore === undefined ? true : config.showMore;
      /**
       * If true, allow expanding and collapsing each group of facets
       * @type {boolean}
       */

      this.expand = config.expand === undefined ? true : config.expand;
      /**
       * If true, display the number of currently applied filters when collapsed
       * @type {boolean}
       */

      this.showNumberApplied = config.showNumberApplied === undefined ? true : config.showNumberApplied;
      /**
       * Text to display on the apply button
       * @type {string}
       */

      this.applyLabel = config.applyLabel || 'apply';
      /**
       * The controls to use for each field. Each type of filter has a default
       * $eq : multioption (checkbox)
       * @type {Object}
       */

      this.fieldControls = config.fieldControls || {};
      /**
       * The selector of the apply button
       * @type {string}
       * @private
       */

      this.applyButtonSelector = config.applyButtonSelector || null;
      this.validate();
    }

    _createClass(FacetsConfig, [{
      key: "validate",
      value: function validate() {}
    }]);

    return FacetsConfig;
  }();
  /**
   * Displays a set of dynamic filters returned from the backend
   * @extends Component
   */


  var FacetsComponent =
  /*#__PURE__*/
  function (_Component) {
    _inherits(FacetsComponent, _Component);

    function FacetsComponent() {
      var _this;

      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var systemConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      _classCallCheck(this, FacetsComponent);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(FacetsComponent).call(this, config, systemConfig));
      _this.config = new FacetsConfig(config);
      /**
       * The vertical key for the search
       * @type {string}
       * @private
       */

      _this._verticalKey = config.verticalKey; // config.verticalKey || null;

      /**
       * The selector of the apply button
       * @type {string}
       * @private
       */

      _this._applyButtonSelector = config.applyButtonSelector || null;
      /**
       * An internal reference for the data storage to listen for updates from the server
       * @type {string}
       */

      _this.moduleId = StorageKeys.DYNAMIC_FILTERS;
      /**
       * The filter box that displays the dynamic filters
       * @type {FilterBoxComponent}
       * @private
       */

      _this._filterbox = null;
      return _this;
    }

    _createClass(FacetsComponent, [{
      key: "setState",
      value: function setState(data) {
        return _get(_getPrototypeOf(FacetsComponent.prototype), "setState", this).call(this, _objectSpread({}, data, {
          isNoResults: data.resultsContext === ResultsContext.NO_RESULTS
        }));
      }
    }, {
      key: "remove",
      value: function remove() {
        if (this._filterbox) {
          this._filterbox.remove();
        }

        _get(_getPrototypeOf(FacetsComponent.prototype), "remove", this).call(this);
      }
    }, {
      key: "onMount",
      value: function onMount() {
        var _this2 = this;

        this.core.enableDynamicFilters();

        if (this._filterbox) {
          this._filterbox.remove();
        }

        var _this$_state$get = this._state.get(),
            filters = _this$_state$get.filters,
            resultsContext = _this$_state$get.resultsContext;

        if (!filters || resultsContext === ResultsContext.NO_RESULTS) {
          return;
        }

        filters = filters.map(function (f) {
          return Object.assign({}, f, {
            type: 'FilterOptions',
            control: _this2.config.fieldControls[f.fieldId] || 'multioption'
          });
        });
        this._filterbox = this.componentManager.create('FilterBox', Object.assign({}, this.config, {
          parentContainer: this._container,
          name: "".concat(this.name, ".filterbox"),
          container: '.js-yxt-Facets',
          verticalKey: this._verticalKey,
          resetFilter: this.config.resetFacet,
          resetFilters: this.config.resetFacets,
          resetFilterLabel: this.config.resetFacetLabel,
          resetFiltersLabel: this.config.resetFacetsLabel,
          isDynamic: true,
          filters: filters
        }));

        this._filterbox.mount();
      }
    }], [{
      key: "defaultTemplateName",

      /**
       * The template to render
       * @returns {string}
       * @override
       */
      value: function defaultTemplateName() {
        return 'filters/facets';
      }
    }, {
      key: "type",
      get: function get() {
        return 'Facets';
      }
    }]);

    return FacetsComponent;
  }(Component);

  var METERS_PER_MILE = 1609.344;
  var DEFAULT_CONFIG$3 = {
    /**
     * The radius, in miles, around the user's location to find results.
     * If location accuracy is low, a larger radius may be used automatically
     * @type {number}
     */
    radius: 50,

    /**
     * The vertical key to use
     * @type {string}
     */
    verticalKey: null,

    /**
     * If true, submits a search when the value is changed
     * @type {boolean}
     */
    searchOnChange: false,

    /**
     * The title to display
     * @type {string}
     */
    title: 'Location',

    /**
     * The label to display
     * @type {string}
     */
    label: 'Location',

    /**
     * The icon url to show in the geo button
     * @type {string}
     */
    geoButtonIcon: '',

    /**
     * The alt text to include with the geo button icon
     * @type {string}
     */
    geoButtonIconAltText: 'Use My Location',

    /**
     * The text to show in the geo button
     * @type {string}
     */
    geoButtonText: 'Use My Location',

    /**
     * The text to show when geolocation is enabled
     * @type {string}
     */
    enabledText: 'Current Location',

    /**
     * The text to show when loading the user's location
     * @type {string}
     */
    loadingText: 'Finding Your Location...',

    /**
     * The text to show if the user's location cannot be found
     * @type {string}
     */
    errorText: 'Could Not Find Your Location',

    /**
     * The CSS selector of the toggle button
     * @type {string}
     */
    buttonSelector: '.js-yxt-GeoLocationFilter-button',

    /**
     * The CSS selector of the query input
     * @type {string}
     */
    inputSelector: '.js-yxt-GeoLocationFilter-input'
  };
  /**
   * Renders a button that when clicked adds a static filter representing the user's location
   * @extends Component
   */

  var GeoLocationComponent =
  /*#__PURE__*/
  function (_Component) {
    _inherits(GeoLocationComponent, _Component);

    function GeoLocationComponent() {
      var _this;

      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var systemConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      _classCallCheck(this, GeoLocationComponent);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(GeoLocationComponent).call(this, _objectSpread({}, DEFAULT_CONFIG$3, {}, config), systemConfig));
      /**
       * The query string to use for the input box, provided to template for rendering.
       * @type {string}
       */

      _this.query = _this.core.globalStorage.getState("".concat(StorageKeys.QUERY, ".").concat(_this.name)) || '';

      _this.core.globalStorage.on('update', "".concat(StorageKeys.QUERY, ".").concat(_this.name), function (q) {
        _this.query = q;

        _this.setState();
      });
      /**
       * The filter to use for the current query
       * @type {Filter}
       */


      _this.filter = _this.core.globalStorage.getState("".concat(StorageKeys.FILTER, ".").concat(_this.name)) || {};

      if (typeof _this.filter === 'string') {
        try {
          _this.filter = JSON.parse(_this.filter);
        } catch (e) {}
      }

      _this.core.globalStorage.on('update', "".concat(StorageKeys.FILTER, ".").concat(_this.name), function (f) {
        _this.filter = f;
      });

      _this.searchParameters = buildSearchParameters(config.searchParameters);
      /**
       * Options to pass to the geolocation api.
       * @type {Object}
       */

      _this._geolocationOptions = _objectSpread({
        enableHighAccuracy: false,
        timeout: 6000,
        maximumAge: 300000
      }, config.geolocationOptions);
      /**
       * Options for the geolocation timeout alert.
       * @type {Object}
       */

      _this._geolocationTimeoutAlert = _objectSpread({
        enabled: false,
        message: 'We are unable to determine your location'
      }, config.geolocationTimeoutAlert);
      return _this;
    }

    _createClass(GeoLocationComponent, [{
      key: "setState",
      value: function setState(data) {
        var placeholder = '';

        if (this._enabled) {
          placeholder = this._config.enabledText;
        }

        if (data.geoLoading) {
          placeholder = this._config.loadingText;
        }

        if (data.geoError) {
          placeholder = this._config.errorText;
        }

        _get(_getPrototypeOf(GeoLocationComponent.prototype), "setState", this).call(this, _objectSpread({}, data, {
          title: this._config.title,
          geoEnabled: this._enabled,
          query: this.query,
          labelText: this._config.label,
          enabledText: this._config.enabledText,
          loadingText: this._config.loadingText,
          errorText: this._config.errorText,
          geoButtonIcon: this._config.geoButtonIcon,
          geoValue: this._enabled || data.geoLoading || data.geoError ? '' : this.query,
          geoPlaceholder: placeholder,
          geoButtonText: this._config.geoButtonText
        }));
      }
    }, {
      key: "onMount",
      value: function onMount() {
        var _this2 = this;

        if (this._autocomplete) {
          this._autocomplete.remove();
        }

        this._initAutoComplete(this._config.inputSelector);

        DOM.on(this._config.buttonSelector, 'click', function () {
          return _this2._toggleGeoFilter();
        });
      }
      /**
       * A helper method to wire up our auto complete on an input selector
       * @param {string} inputSelector CSS selector to bind our auto complete component to
       * @private
       */

    }, {
      key: "_initAutoComplete",
      value: function _initAutoComplete(inputSelector) {
        var _this3 = this;

        if (this._autocomplete) {
          this._autocomplete.remove();
        }

        this._autocomplete = this.componentManager.create('AutoComplete', {
          parentContainer: this._container,
          name: "".concat(this.name, ".autocomplete"),
          isFilterSearch: true,
          container: '.js-yxt-GeoLocationFilter-autocomplete',
          originalQuery: this.query,
          originalFilter: this.filter,
          inputEl: inputSelector,
          verticalKey: this._config.verticalKey,
          searchParameters: this.searchParameters,
          onSubmit: function onSubmit(query, filter) {
            _this3.query = query;
            _this3.filter = Filter.fromResponse(filter);

            _this3._saveDataToStorage(query, _this3.filter);

            _this3._enabled = false;
          }
        });
      }
      /**
       * Toggles the static filter representing the user's location
       * @private
       */

    }, {
      key: "_toggleGeoFilter",
      value: function _toggleGeoFilter() {
        var _this4 = this;

        if (!navigator.geolocation) {
          this.setState({
            geoError: true
          });
          return;
        }

        if (!this._enabled) {
          this.setState({
            geoLoading: true
          });
          navigator.geolocation.getCurrentPosition(function (position) {
            var filter = _this4._buildFilter(position);

            _this4._saveDataToStorage('', filter, position);

            _this4._enabled = true;

            _this4.setState({});

            _this4.core.persistentStorage["delete"]("".concat(StorageKeys.QUERY, ".").concat(_this4.name));

            _this4.core.persistentStorage["delete"]("".concat(StorageKeys.FILTER, ".").concat(_this4.name));
          }, function () {
            return _this4._handleGeolocationError();
          }, this._geolocationOptions);
        }
      }
    }, {
      key: "_handleGeolocationError",
      value: function _handleGeolocationError() {
        this.setState({
          geoError: true
        });
        var _this$_geolocationTim = this._geolocationTimeoutAlert,
            enabled = _this$_geolocationTim.enabled,
            message = _this$_geolocationTim.message;

        if (enabled) {
          window.alert(message);
        }
      }
      /**
       * Saves the provided filter under this component's name
       * @param {string} query The query to save
       * @param {Filter} filter The filter to save
       * @param {Object} position The position to save
       * @private
       */

    }, {
      key: "_saveDataToStorage",
      value: function _saveDataToStorage(query, filter, position) {
        this.core.persistentStorage.set("".concat(StorageKeys.QUERY, ".").concat(this.name), query);
        this.core.persistentStorage.set("".concat(StorageKeys.FILTER, ".").concat(this.name), filter);
        this.core.setFilter(this.name, filter);

        if (position) {
          this.core.globalStorage.set(StorageKeys.GEOLOCATION, {
            lat: position.coords.latitude,
            lng: position.coords.longitude,
            radius: position.coords.accuracy
          });
        }

        if (this._config.searchOnChange) {
          var filters = this.core.globalStorage.getAll(StorageKeys.FILTER);
          var totalFilter = filters[0];

          if (filters.length > 1) {
            totalFilter = Filter.and.apply(Filter, _toConsumableArray(filters));
          }

          var searchQuery = this.core.globalStorage.getState(StorageKeys.QUERY) || '';
          var facetFilter = this.core.globalStorage.getAll(StorageKeys.FACET_FILTER)[0];
          this.core.persistentStorage["delete"](StorageKeys.SEARCH_OFFSET);
          this.core.globalStorage["delete"](StorageKeys.SEARCH_OFFSET);
          this.core.verticalSearch(this._config.verticalKey, {
            input: searchQuery,
            filter: JSON.stringify(totalFilter),
            facetFilter: JSON.stringify(facetFilter)
          });
        }
      }
      /**
       * Given a position, construct a Filter object
       * @param {Postition} position The position
       * @returns {Filter}
       * @private
       */

    }, {
      key: "_buildFilter",
      value: function _buildFilter(position) {
        var _position$coords = position.coords,
            latitude = _position$coords.latitude,
            longitude = _position$coords.longitude,
            accuracy = _position$coords.accuracy;
        var radius = Math.max(accuracy, this._config.radius * METERS_PER_MILE);
        return Filter.position(latitude, longitude, radius);
      }
    }], [{
      key: "defaultTemplateName",
      value: function defaultTemplateName() {
        return 'controls/geolocation';
      }
    }, {
      key: "type",
      get: function get() {
        return 'GeoLocationFilter';
      }
    }]);

    return GeoLocationComponent;
  }(Component);

  /**
   * Renders configuration options for sorting Vertical Results.
   * TODO: how to deal with multiple instances of this component (and filters in general),
   * ideally "identical" filters/sorts would be synced up.
   */

  var SortOptionsComponent =
  /*#__PURE__*/
  function (_Component) {
    _inherits(SortOptionsComponent, _Component);

    function SortOptionsComponent() {
      var _this;

      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var systemConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      _classCallCheck(this, SortOptionsComponent);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(SortOptionsComponent).call(this, assignDefaults(config), systemConfig)); // TODO SPR-1929 centralize this logic

      _this._config.verticalKey = config.verticalKey || _this.core.globalStorage.getState(StorageKeys.SEARCH_CONFIG).verticalKey;
      _this.options = _this._config.options;
      _this.selectedOptionIndex = parseInt(_this.core.globalStorage.getState(_this.name)) || 0;
      _this.options[_this.selectedOptionIndex].isSelected = true;
      _this.hideExcessOptions = _this._config.showMore && _this.selectedOptionIndex < _this._config.showMoreLimit;
      _this.showReset = _this._config.showReset && _this.selectedOptionIndex !== 0;
      /**
       * This component listens to updates to vertical results, and sets its state to it when
       * an update occurs.
       * @type {string}
       */

      _this.core.globalStorage.on('update', StorageKeys.VERTICAL_RESULTS, function (verticalResults) {
        if (verticalResults.searchState === SearchStates.SEARCH_COMPLETE) {
          _this.setState(verticalResults);
        }
      });

      return _this;
    }

    _createClass(SortOptionsComponent, [{
      key: "setState",
      value: function setState() {
        var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var options = this.options;

        if (this.hideExcessOptions) {
          options = this.options.slice(0, this._config.showMoreLimit);
        }

        _get(_getPrototypeOf(SortOptionsComponent.prototype), "setState", this).call(this, Object.assign({}, data, {
          options: options,
          hideExcessOptions: this.hideExcessOptions,
          name: this.name,
          showReset: this.showReset,
          isNoResults: data.resultsContext === ResultsContext.NO_RESULTS
        }));
      }
    }, {
      key: "onMount",
      value: function onMount() {
        var _this2 = this;

        // Handle radio button selections
        var containerEl = DOM.query(this._container, '.yxt-SortOptions-fieldSet');
        containerEl && DOM.on(containerEl, 'change', function (evt) {
          return _this2.handleOptionSelection(parseInt(evt.target.value));
        }); // Register more/less button

        if (this._config.showMore) {
          var toggleEl = DOM.query(this._container, '.yxt-SortOptions-showToggle');
          toggleEl && DOM.on(toggleEl, 'click', function () {
            _this2.hideExcessOptions = !_this2.hideExcessOptions;

            _this2.setState();
          });
        } // Register show reset button


        if (this.showReset) {
          var resetEl = DOM.query(this._container, '.yxt-SortOptions-reset');
          resetEl && DOM.on(resetEl, 'click', function () {
            return _this2.handleOptionSelection(0);
          });
        } // Register apply button


        if (!this._config.searchOnChange) {
          var applyEl = DOM.query(this._container, '.yxt-SortOptions-apply');
          applyEl && DOM.on(applyEl, 'click', function () {
            return _this2._sortResults();
          });
        }
      }
    }, {
      key: "handleOptionSelection",
      value: function handleOptionSelection(optionIndex) {
        this._updateSelectedOption(optionIndex);

        if (this._config.searchOnChange) {
          this._sortResults();
        }
      }
    }, {
      key: "_updateSelectedOption",
      value: function _updateSelectedOption(optionIndex) {
        this.options[this.selectedOptionIndex].isSelected = false;
        this.options[optionIndex].isSelected = true;
        this.selectedOptionIndex = optionIndex;
        this.showReset = this._config.showReset && optionIndex !== 0;
        this.setState();
      }
    }, {
      key: "_sortResults",
      value: function _sortResults() {
        var optionIndex = this.selectedOptionIndex;
        var option = this.options[optionIndex]; // searchOnChange really means sort on change here, just that the sort is done through a search,
        // This was done to have a consistent option name between filters.

        this.core.persistentStorage.set(this.name, optionIndex);

        if (this._config.storeOnChange && optionIndex === 0) {
          this.core.clearSortBys();
        } else if (this._config.storeOnChange) {
          this.core.setSortBys(option);
        }

        this._search();

        this._config.onChange(option);

        this.setState();
      }
      /**
       * Trigger a search with all filters in storage
       */

    }, {
      key: "_search",
      value: function _search() {
        var allFilters = this.core.globalStorage.getAll(StorageKeys.FILTER);
        var totalFilter = allFilters.length > 1 ? Filter.and.apply(Filter, _toConsumableArray(allFilters)) : allFilters[0];
        var input = this.core.globalStorage.getState(StorageKeys.QUERY) || '';
        var facetFilter = this.core.globalStorage.getAll(StorageKeys.FACET_FILTER)[0];
        this.core.persistentStorage["delete"](StorageKeys.SEARCH_OFFSET);
        this.core.globalStorage["delete"](StorageKeys.SEARCH_OFFSET);
        this.core.verticalSearch(this._config.verticalKey, {
          input: input,
          filter: JSON.stringify(totalFilter),
          facetFilter: JSON.stringify(facetFilter)
        });
      }
    }], [{
      key: "defaultTemplateName",
      value: function defaultTemplateName() {
        return 'controls/sortoptions';
      }
    }, {
      key: "type",
      get: function get() {
        return 'SortOptions';
      }
    }]);

    return SortOptionsComponent;
  }(Component);

  function assignDefaults(config) {
    var updatedConfig = Object.assign({}, config); // Optional, The label used for the “default” sort (aka the sort specified by the experience config").

    updatedConfig.defaultSortLabel = config.defaultSortLabel || 'Best Match'; // Array of search options, where an option has type, label, and if is type FIELD also a label and direction

    if (!config.options) {
      throw new AnswersBasicError('config.options are required', 'SortOptions');
    }

    var OPTION_TYPES = ['FIELD', 'RELEVANCE', 'ENTITY_DISTANCE'];

    if (!Array.isArray(config.options)) {
      throw new AnswersBasicError('options must be an array of objects', 'SortOptions');
    }

    updatedConfig.options = config.options.map(function (option) {
      if (!option.label || !option.type) {
        throw new AnswersBasicError("option.label and option.type are required option ".concat(option), 'SortOptions');
      }

      var newOption = {
        isSelected: false
      };
      newOption.label = option.label;
      newOption.type = option.type;
      var isField = OPTION_TYPES.indexOf(newOption.type) === 0;

      if (isField && option.field && option.direction) {
        newOption.field = option.field;
        newOption.direction = option.direction;
      } else if (isField) {
        throw new AnswersBasicError("option.field and option.direction are required for option: ".concat(option), 'SortOptions');
      }

      return newOption;
    }); // Add default option to the front of the options array

    updatedConfig.options.unshift({
      label: updatedConfig.defaultSortLabel,
      isSelected: false
    }); // Optional, the selector used for options in the template

    updatedConfig.optionSelector = config.optionSelector || 'yxt-SortOptions-optionSelector'; // Optional, if true, triggers a search on each change to a filter,
    // if false the component also renders an apply button, defaults to false

    updatedConfig.searchOnChange = config.searchOnChange === undefined ? true : config.searchOnChange; // Optional, show a reset button. Clicking it will always return the user to the default sorting option.

    updatedConfig.showReset = config.showReset || false; // Optional, the label to use for the reset button

    updatedConfig.resetLabel = config.resetLabel || 'reset'; // Optional, the max number of filter options to show before collapsing extras

    updatedConfig.showMoreLimit = config.showMoreLimit || 5; // Optional, allow collapsing excess sort options after a limit

    updatedConfig.showMore = config.showMore === undefined ? true : config.showMore;
    updatedConfig.showMore = updatedConfig.showMore && updatedConfig.options.length > updatedConfig.showMoreLimit; // Optional, the label to show for displaying more options

    updatedConfig.showMoreLabel = config.showMoreLabel || 'Show more'; // Optional, the label to show for displaying less options

    updatedConfig.showLessLabel = config.showLessLabel || 'Show less'; // Optional, the callback function to call when changed

    updatedConfig.onChange = config.onChange || function () {}; // Optional, Top title for the sorting component


    updatedConfig.label = config.label || 'Sorting'; // Optional, when true component does not update globalStorage
    // possibly delegating that to a higher-order/composite component

    updatedConfig.storeOnChange = config.storeOnChange === undefined ? true : config.storeOnChange;
    updatedConfig.applyLabel = config.applyLabel || 'Apply';
    updatedConfig.verticalKey = config.verticalKey;

    if (!updatedConfig.verticalKey) {
      throw new AnswersBasicError('vertical key is required', 'SortOptions');
    } // note: showExpand and showNumberApplied explicitly not included, on the grounds that
    // sorting should always be exposed to the user if added.


    return updatedConfig;
  }

  /**
   * EventTypes are explicit strings defined
   * for what the server expects for analytics.
   *
   * @enum
   */

  var EventTypes = {
    THUMBS_UP: 'THUMBS_UP',
    THUMBS_DOWN: 'THUMBS_DOWN'
  };
  var DEFAULT_CONFIG$4 = {
    positiveFeedbackSrText: 'This answered my question',
    negativeFeedbackSrText: 'This did not answer my question',
    footerTextOnSubmission: 'Thank you for your feedback!'
  };

  var DirectAnswerComponent =
  /*#__PURE__*/
  function (_Component) {
    _inherits(DirectAnswerComponent, _Component);

    function DirectAnswerComponent() {
      var _this;

      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var systemConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      _classCallCheck(this, DirectAnswerComponent);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(DirectAnswerComponent).call(this, _objectSpread({}, DEFAULT_CONFIG$4, {}, config), systemConfig));
      /**
       * Recieve updates from storage based on this index
       * @type {StorageKey}
       */

      _this.moduleId = StorageKeys.DIRECT_ANSWER;
      /**
       * The form used for submitting the feedback
       * @type {string}
       */

      _this._formEl = config.formEl || '.js-directAnswer-feedback-form';
      /**
       * The `thumbs up` css selector to bind ui interaction to for reporting
       * @type {string}
       */

      _this._thumbsUpSelector = config.thumbsUpSelector || '.js-directAnswer-thumbUp';
      /**
       * The `thumbs down` css selector to bind ui interaction to for reporting
       * @type {string}
       */

      _this._thumbsDownSelector = config.thumbsDownSelector || '.js-directAnswer-thumbDown';
      /**
       * The display text for the View Details click to action link
       * @type {string}
       */

      _this._viewDetailsText = config.viewDetailsText || 'View Details';
      return _this;
    }

    _createClass(DirectAnswerComponent, [{
      key: "beforeMount",

      /**
       * beforeMount, only display the direct answer component if it has data
       */
      value: function beforeMount() {
        if (!this.hasState('answer')) {
          return false;
        }

        return true;
      }
      /**
       * When the DOM is constructed,
       * we want to wire up the behavior for interacting with the quality feedback reporting (thumbsup/down)
       */

    }, {
      key: "onMount",
      value: function onMount() {
        var _this2 = this;

        // Avoid bindings if the feedback has previously been submitted
        if (this.getState('feedbackSubmitted') === true) {
          return this;
        } // For WCAG compliance, the feedback should be a submittable form


        DOM.on(this._formEl, 'submit', function (e) {
          var formEl = e.target;
          var checkedValue = DOM.query(formEl, 'input:checked').value === 'true';

          _this2.reportQuality(checkedValue);

          _this2.updateState({
            'feedbackSubmitted': true
          });
        }); // Is this actually necessary? I guess it's only necessary if the
        // submit button is hidden.

        DOM.on(this._thumbsUpSelector, 'click', function () {
          DOM.trigger(_this2._formEl, 'submit');
        });
        DOM.on(this._thumbsDownSelector, 'click', function () {
          DOM.trigger(_this2._formEl, 'submit');
        });
      }
      /**
       * updateState enables for partial updates (the delta between the old and new)
       * @type {object} The new state to apply to the old
       */

    }, {
      key: "updateState",
      value: function updateState() {
        var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var newState = Object.assign({}, this.getState(), state);
        this.setState(newState);
      }
    }, {
      key: "setState",
      value: function setState(data) {
        return _get(_getPrototypeOf(DirectAnswerComponent.prototype), "setState", this).call(this, Object.assign({}, data, {
          eventOptions: this.eventOptions(data),
          viewDetailsText: this._viewDetailsText
        }));
      }
    }, {
      key: "eventOptions",
      value: function eventOptions(data) {
        if (!data || Object.keys(data).length === 0) {
          return data;
        }

        return JSON.stringify({
          verticalConfigId: data.relatedItem.verticalConfigId,
          searcher: 'UNIVERSAL',
          entityId: data.relatedItem.data.id,
          ctaLabel: this._viewDetailsText.toUpperCase().replace(' ', '_')
        });
      }
      /**
       * reportQuality will send the quality feedback to analytics
       * @param {boolean} isGood true if the answer is what you were looking for
       */

    }, {
      key: "reportQuality",
      value: function reportQuality(isGood) {
        var eventType = isGood === true ? EventTypes.THUMBS_UP : EventTypes.THUMBS_DOWN;
        var event = new AnalyticsEvent(eventType).addOptions({
          'directAnswer': true
        });
        this.analyticsReporter.report(event);
      }
    }], [{
      key: "defaultTemplateName",

      /**
       * The template to render
       * @returns {string}
       * @override
       */
      value: function defaultTemplateName(config) {
        return 'results/directanswer';
      }
    }, {
      key: "type",
      get: function get() {
        return 'DirectAnswer';
      }
    }]);

    return DirectAnswerComponent;
  }(Component);

  /**
   * The AlternativeVertical is a model that is used to power the search
   * suggestions info box. It's initialized through the configuration provided
   * to the component.
   */

  var AlternativeVertical = function AlternativeVertical(config) {
    _classCallCheck(this, AlternativeVertical);

    /**
     * The name of the vertical that is exposed for the link
     * @type {string}
     */
    this.label = config.label;

    if (typeof this.label !== 'string') {
      throw new AnswersConfigError('label is a required configuration option for verticalPage.', 'AlternativeVertical');
    }
    /**
     * The complete URL, including the params
     * @type {string}
     */


    this.url = config.url;

    if (typeof this.url !== 'string') {
      throw new AnswersConfigError('url is a required configuration option for verticalPage.', 'AlternativeVertical');
    }
    /**
     * name of an icon from the default icon set
     * @type {string}
     */


    this.iconName = config.iconName;
    /**
     * URL of an icon
     * @type {string}
     */

    this.iconUrl = config.iconUrl;
    /**
     * Whether the vertical has an icon
     * @type {string}
     */

    this.hasIcon = this.iconName || this.iconUrl;
    /**
     * The number of results to display next to each alternative
     * vertical
     * @type {number}
     */

    this.resultsCount = config.resultsCount;
  };

  var AlternativeVerticalsComponent =
  /*#__PURE__*/
  function (_Component) {
    _inherits(AlternativeVerticalsComponent, _Component);

    function AlternativeVerticalsComponent() {
      var _this;

      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var systemOpts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      _classCallCheck(this, AlternativeVerticalsComponent);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(AlternativeVerticalsComponent).call(this, opts, systemOpts));
      _this.moduleId = StorageKeys.ALTERNATIVE_VERTICALS;
      /**
       * Alternative verticals that have results for the current query
       * This gets updated based on the server results
       * @type {AlternativeVerticals}
       * @private
       */

      _this._alternativeVerticals = opts.data && opts.data.alternativeVerticals || [];
      /**
       * Vertical pages config from global verticals config
       * @type {VerticalPagesConfig}
       * @private
       */

      _this._verticalsConfig = opts.verticalsConfig || [];
      /**
       * The name of the vertical that is exposed for the link
       * @type {string}
       */

      _this._currentVerticalLabel = _this.getCurrentVerticalLabel(opts.verticalsConfig) || '';
      /**
       * The alternative vertical search suggestions, parsed from alternative verticals and
       * the global verticals config.
       * This gets updated based on the server results
       * @type {AlternativeVertical[]}
       */

      _this.verticalSuggestions = AlternativeVerticalsComponent._buildVerticalSuggestions(_this._alternativeVerticals, _this._verticalsConfig);
      /**
       * The url to the universal page to link back to with current query
       * @type {string|null}
       */

      _this._universalUrl = opts.universalUrl || '';
      /**
       * Whether or not results are displaying, used to control language in the info box
       * @type {boolean}
       */

      _this._isShowingResults = opts.isShowingResults || false;
      return _this;
    }

    _createClass(AlternativeVerticalsComponent, [{
      key: "setState",
      value: function setState(data) {
        return _get(_getPrototypeOf(AlternativeVerticalsComponent.prototype), "setState", this).call(this, Object.assign({
          verticalSuggestions: []
        }, data, {
          universalUrl: this._universalUrl,
          verticalSuggestions: this.verticalSuggestions,
          currentVerticalLabel: this._currentVerticalLabel,
          isShowingResults: this._isShowingResults,
          query: this.core.globalStorage.getState(StorageKeys.QUERY)
        }));
      }
    }, {
      key: "getCurrentVerticalLabel",
      value: function getCurrentVerticalLabel(verticalsConfig) {
        var thisVertical = verticalsConfig.find(function (config) {
          return config.isActive || false;
        });
        return thisVertical ? thisVertical.label : '';
      }
      /**
       * _buildVerticalSuggestions will construct an array of {AlternativeVertical}
       * from alternative verticals and verticalPages configuration
       * @param {object} alternativeVerticals alternativeVerticals server response
       * @param {object} verticalsConfig the configuration to use
       */

    }], [{
      key: "defaultTemplateName",

      /**
       * The template to render
       * @returns {string}
       * @override
       */
      value: function defaultTemplateName(config) {
        return 'results/alternativeverticals';
      }
    }, {
      key: "areDuplicateNamesAllowed",
      value: function areDuplicateNamesAllowed() {
        return true;
      }
    }, {
      key: "_buildVerticalSuggestions",
      value: function _buildVerticalSuggestions(alternativeVerticals, verticalsConfig) {
        var verticals = [];
        var queryParams = window.location.search;
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          var _loop = function _loop() {
            var alternativeVertical = _step.value;
            var verticalKey = alternativeVertical.verticalConfigId;
            var matchingVerticalConfig = verticalsConfig.find(function (config) {
              return config.verticalKey === verticalKey;
            });

            if (!matchingVerticalConfig || alternativeVertical.resultsCount < 1) {
              return "continue";
            }

            verticals.push(new AlternativeVertical({
              label: matchingVerticalConfig.label,
              url: matchingVerticalConfig.url + queryParams,
              iconName: matchingVerticalConfig.icon,
              iconUrl: matchingVerticalConfig.iconUrl,
              resultsCount: alternativeVertical.resultsCount
            }));
          };

          for (var _iterator = alternativeVerticals[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var _ret = _loop();

            if (_ret === "continue") continue;
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator["return"] != null) {
              _iterator["return"]();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        return verticals;
      }
    }, {
      key: "type",
      get: function get() {
        return 'AlternativeVerticals';
      }
    }]);

    return AlternativeVerticalsComponent;
  }(Component);

  /**
   * A MapProvider is an interface that represents that should be implemented
   * in order to integrate with a Third Party Map provider for
   * interactive maps. MapProviders are used by the MapComponent.
   *
   * Implementations should extend this interface.
   */

  var MapProvider =
  /*#__PURE__*/
  function () {
    function MapProvider() {
      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      _classCallCheck(this, MapProvider);

      /**
       * The API Key used for interacting with the map provider
       * @type {string}
       */
      this._apiKey = config.apiKey;
      /**
       * The zoom level of the map, defaults to 14
       * @type {number}
       */

      this._zoom = config.zoom || 14;
      /**
       * The default coordinates to display if there are no results returned
       * Only used if showEmptyMap is set to true
       * @type {Object}
       */

      this._defaultPosition = config.defaultPosition || {
        lat: 37.0902,
        lng: -95.7129
      };
      /**
       * Configuration for the behavior when there are no vertical results.
       * @type {Object}
       */

      this._noResults = config.noResults || {};
      /**
       * Determines if an empty map should be shown when there are no results
       * @type {boolean}
       */

      this._showEmptyMap = config.showEmptyMap || false;
      /**
       * A reference to the underlying map instance, created by the external lib.
       * @type {number}
       */

      this._map = null;
      /**
       * Temporary boolean tracking whether or not the external JS library is loaded (see TODO below)
       * @type {boolean}
       */

      this._isLoaded = false;
      /**
       * Callback to invoke when a pin is clicked. The clicked item(s) are passed to the callback
       * @type {function}
       */

      this._onPinClick = config.onPinClick || null;
      /**
       * Callback to invoke once the Javascript is loaded
       * @type {function}
       */

      this._onLoaded = config.onLoaded || function () {};
      /**
       * The custom configuration override to use for the map markers
       * @type {Object|Function}
       */


      this._pinConfig = typeof config.pin === 'function' ? config.pin : Object.assign(MapProvider.DEFAULT_PIN_CONFIG, config.pin);
      /**
       * Determines whether or not to collapse pins at the same lat/lng
       * @type {boolean}
       */

      this._collapsePins = config.collapsePins || false;
    }
    /**
     * The default configuration to use for the map markers
     * @type {Object}
     * TODO(billy) Create a configuration model
     */


    _createClass(MapProvider, [{
      key: "onLoaded",
      value: function onLoaded(cb) {
        if (typeof cb !== 'function') {
          return;
        }

        this._onLoaded = cb;

        if (this.isLoaded()) {
          this._onLoaded();
        }
      }
    }, {
      key: "isLoaded",
      value: function isLoaded() {
        return this._isLoaded;
      }
    }, {
      key: "loadJS",
      value: function loadJS() {
        throw new Error('Unimplemented Method: loadJS');
      }
    }, {
      key: "init",
      value: function init(mapData) {
        // TODO(billy) This should be based off a promise that gets created from loadJS
        throw new Error('Unimplemented Method: init');
      }
      /**
       * Given a list of markers, combine markers with the same lat/lng into a single marker
       * @param {object[]} markers The markers to collapse
       */

    }, {
      key: "_collapseMarkers",
      value: function _collapseMarkers(markers) {
        var locationToItem = {};
        markers.forEach(function (m) {
          locationToItem["".concat(m.latitude).concat(m.longitude)] ? locationToItem["".concat(m.latitude).concat(m.longitude)].push(m) : locationToItem["".concat(m.latitude).concat(m.longitude)] = [m];
        });
        var collapsedMarkers = [];

        for (var _i = 0, _Object$entries = Object.entries(locationToItem); _i < _Object$entries.length; _i++) {
          var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),
              _markers = _Object$entries$_i[1];

          if (_markers.length > 1) {
            var collapsedMarker = {
              item: _markers.map(function (m) {
                return m.item;
              }),
              label: _markers.length,
              latitude: _markers[0].latitude,
              longitude: _markers[0].longitude
            };
            collapsedMarkers.push(collapsedMarker);
          } else {
            collapsedMarkers.push(_markers[0]);
          }
        }

        return collapsedMarkers;
      }
    }], [{
      key: "shouldHideMap",
      value: function shouldHideMap(mapData, resultsContext, showEmptyMap, visibleForNoResults) {
        if (resultsContext === ResultsContext.NO_RESULTS && visibleForNoResults !== undefined) {
          return !visibleForNoResults;
        }

        var hasEmptyMap = !mapData || mapData.mapMarkers.length <= 0;
        return hasEmptyMap && !showEmptyMap;
      }
    }, {
      key: "DEFAULT_PIN_CONFIG",
      get: function get() {
        return {
          icon: {
            anchor: null,
            // e.g. { x: 1, y: 1 }
            svg: null,
            url: null,
            scaledSize: null // e.g. { w: 20, h: 20 }

          },
          labelType: 'numeric'
        };
      }
    }]);

    return MapProvider;
  }();

  /* global google */

  /**
   * GoogleMapProvider is an implementation of a MapProvider
   * that handles the integration with the third party API to expose maps.
   * @extends MapProvider
   */

  var GoogleMapProvider =
  /*#__PURE__*/
  function (_MapProvider) {
    _inherits(GoogleMapProvider, _MapProvider);

    function GoogleMapProvider(opts) {
      var _this;

      _classCallCheck(this, GoogleMapProvider);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(GoogleMapProvider).call(this, opts)); // normalize because google's zoom is effectively 1 unit of difference away from mapbox zoom

      _this._zoomOffset = 1;
      _this._zoom += _this._zoomOffset;
      _this._clientId = opts.clientId;
      _this._signature = opts.signature;

      if (!_this.hasValidClientCredentials() && !_this._apiKey) {
        throw new Error('GoogleMapsProvider: Missing `apiKey` or {`clientId`, `signature`}');
      }

      return _this;
    }

    _createClass(GoogleMapProvider, [{
      key: "loadJS",
      value: function loadJS() {
        var self = this;

        var onLoad = function onLoad() {
          if (typeof self._onLoaded === 'function') {
            self._onLoaded();
          }
        };

        if (typeof google !== 'undefined') {
          self._isLoaded = true;
          onLoad();
          return;
        }

        var script = DOM.query('#yext-map-js');

        if (script) {
          var onLoadFunc = script.onload;

          script.onload = function () {
            onLoadFunc();
            onLoad();
          };

          return;
        }

        script = DOM.createEl('script', {
          id: 'yext-map-js',
          onload: function onload() {
            self._isLoaded = true;
            onLoad();
          },
          async: true,
          src: "https://maps.googleapis.com/maps/api/js?".concat(self.generateCredentials())
        });
        DOM.append('body', script);
      }
    }, {
      key: "generateCredentials",
      value: function generateCredentials() {
        if (this.hasValidClientCredentials()) {
          return "client=".concat(this._clientId);
        } else {
          return "key=".concat(this._apiKey);
        }
      }
    }, {
      key: "hasValidClientCredentials",
      value: function hasValidClientCredentials() {
        return this._clientId;
      }
    }, {
      key: "init",
      value: function init(el, mapData, resultsContext) {
        var _this2 = this;

        if (MapProvider.shouldHideMap(mapData, resultsContext, this._showEmptyMap, this._noResults.visible)) {
          this._map = null;
          return this;
        } // NOTE(billy) This timeout is a hack for dealing with async nature.
        // Only here for demo purposes, so we'll fix later.


        setTimeout(function () {
          var container = DOM.query(el);
          _this2.map = new google.maps.Map(container, {
            zoom: _this2._zoom,
            center: _this2.getCenterMarker(mapData)
          }); // Apply our search data to our GoogleMap

          if (mapData && mapData.mapMarkers.length) {
            (function () {
              var collapsedMarkers = _this2._collapsePins ? _this2._collapseMarkers(mapData.mapMarkers) : mapData.mapMarkers;
              var googleMapMarkerConfigs = GoogleMapMarkerConfig.from(collapsedMarkers, _this2._pinConfig, _this2.map);
              var bounds = new google.maps.LatLngBounds();

              var _loop = function _loop(i) {
                var marker = new google.maps.Marker(googleMapMarkerConfigs[i]);

                if (_this2._onPinClick) {
                  marker.addListener('click', function () {
                    return _this2._onPinClick(collapsedMarkers[i].item);
                  });
                }

                bounds.extend(marker.position);
              };

              for (var i = 0; i < googleMapMarkerConfigs.length; i++) {
                _loop(i);
              }

              if (googleMapMarkerConfigs.length >= 2) {
                _this2.map.fitBounds(bounds);
              }
            })();
          }
        }, 100);
      }
    }, {
      key: "getCenterMarker",
      value: function getCenterMarker(mapData) {
        return mapData && mapData.mapCenter && mapData.mapCenter.longitude && mapData.mapCenter.latitude ? {
          lng: mapData.mapCenter.longitude,
          lat: mapData.mapCenter.latitude
        } : {
          lng: this._defaultPosition.lng,
          lat: this._defaultPosition.lat
        };
      }
    }]);

    return GoogleMapProvider;
  }(MapProvider); // TODO(billy) Move to own class
  var GoogleMapMarkerConfig =
  /*#__PURE__*/
  function () {
    function GoogleMapMarkerConfig(opts) {
      _classCallCheck(this, GoogleMapMarkerConfig);

      /**
       * A reference to the google map, that the marker is appended to
       * @type {GoogleMap}
       */
      this.map = opts.map || undefined;
      /**
       * The coordinates of the marker (lat/lng)
       * @type {Object}
       */

      this.position = opts.position || {
        lat: undefined,
        lng: undefined
      };
      /**
       * The properties/settings of the icon used for the marker
       * e.g. {
       *        anchor: { x: 0, y: 0 }
       *        url: 'path/to/url.jpg'
       *        scaledSize: { w: 0, h: 0 }
       *       }
       *
       * @type {object}
       */

      this.icon = opts.icon || undefined;
      /**
       * The label of the marker to use
       * @type {string}
       */

      this.label = opts.label || undefined;
    }
    /**
     * Serializes an array of marker configs
     * @param {GoogleMapMarkerConfig[]} googleMapMarkerConfigs
     * @returns {string[]}
     */


    _createClass(GoogleMapMarkerConfig, null, [{
      key: "serialize",
      value: function serialize(googleMapMarkerConfigs) {
        var serializedMarkers = [];
        googleMapMarkerConfigs.forEach(function (marker) {
          serializedMarkers.push("markers=label:".concat(marker.label, "|").concat(marker.position.lat, ",").concat(marker.position.lng));
        });
        return serializedMarkers.join('&');
      }
      /**
       * Converts the storage data model of markers into GoogleAPIMarker
       * @param {object[]} markers The data of the marker
       * @param {(Object|function)} pinConfig The configuration to apply to the marker
       * @param {GoogleMap} map reference to the google map to apply the marker to
       * @returns {GoogleMapMarkerConfig[]}
       */

    }, {
      key: "from",
      value: function from(markers, pinConfig, map) {
        var googleMapMarkerConfigs = [];

        if (!Array.isArray(markers)) {
          markers = [markers];
        }

        markers.forEach(function (marker) {
          // Support configuration as a function
          var pinConfigObj = pinConfig;

          if (typeof pinConfig === 'function') {
            pinConfigObj = pinConfig(marker.item, MapProvider.DEFAULT_PIN_CONFIG, marker);
          } // Transform our Configuration Object into the expected
          // Google API format.


          var icon = {};

          if (pinConfigObj.anchor) {
            icon.anchor = google.maps.Point(pinConfigObj.anchor.x, pinConfigObj.anchor.y);
          }

          if (pinConfigObj.scaledSize) {
            icon.scaledSize = new google.maps.Size(pinConfigObj.scaledSize.w, pinConfigObj.scaledSize.h);
          }

          if (pinConfigObj.url) {
            icon.url = pinConfigObj.url;
          }

          if (pinConfigObj.svg) {
            icon.url = "data:image/svg+xml;charset=utf-8, ".concat(encodeURIComponent(pinConfigObj.svg));
          }

          var label;

          if (pinConfigObj.label) {
            label = pinConfigObj.label;
          } else {
            label = marker.label.toString();
          } // NOTE(billy) Google maps doesn't handle empty icon objects nicely
          // Make google maps happy if no settings for icon are provided;


          if (Object.keys(icon).length === 0) {
            icon = undefined;
          }

          googleMapMarkerConfigs.push(new GoogleMapMarkerConfig({
            map: map,
            position: {
              lat: marker.latitude,
              lng: marker.longitude
            },
            icon: icon,
            label: label
          }));
        });
        return googleMapMarkerConfigs;
      }
    }]);

    return GoogleMapMarkerConfig;
  }();

  /* global mapboxgl */

  /**
   * MapBoxMapProvider is an implementation of a MapProvider
   * that handles the integration with the third party API to expose maps.
   * @extends MapProvider
   */

  var MapBoxMapProvider =
  /*#__PURE__*/
  function (_MapProvider) {
    _inherits(MapBoxMapProvider, _MapProvider);

    function MapBoxMapProvider() {
      _classCallCheck(this, MapBoxMapProvider);

      return _possibleConstructorReturn(this, _getPrototypeOf(MapBoxMapProvider).apply(this, arguments));
    }

    _createClass(MapBoxMapProvider, [{
      key: "loadJS",

      /**
       * Load the external JS Library
       * @param {function} onLoad An optional callback to invoke once the JS is loaded.
       */
      value: function loadJS(onLoad) {
        var _this = this;

        var script = DOM.createEl('script', {
          id: 'yext-map-js',
          onload: function onload() {
            _this._isLoaded = true;
            mapboxgl.accessToken = _this._apiKey;

            if (typeof onLoad === 'function') {
              onLoad();
            }

            if (typeof _this._onLoaded === 'function') {
              _this._onLoaded();
            }
          },
          async: true,
          src: 'https://api.mapbox.com/mapbox-gl-js/v0.44.1/mapbox-gl.js'
        });
        var css = DOM.createEl('link', {
          id: 'yext-map-css',
          rel: 'stylesheet',
          href: 'https://api.mapbox.com/mapbox-gl-js/v0.44.1/mapbox-gl.css'
        });
        DOM.append('body', css);
        DOM.append('body', script);
      }
    }, {
      key: "init",
      value: function init(el, mapData, resultsContext) {
        var _this2 = this;

        if (MapProvider.shouldHideMap(mapData, resultsContext, this._showEmptyMap, this._noResults.visible)) {
          this._map = null;
          return this;
        }

        var container = DOM.query(el);
        this._map = new mapboxgl.Map({
          container: container,
          zoom: this._zoom,
          style: 'mapbox://styles/mapbox/streets-v9',
          center: this.getCenterMarker(mapData)
        });

        if (mapData && mapData.mapMarkers.length) {
          (function () {
            var collapsedMarkers = _this2._collapsePins ? _this2._collapseMarkers(mapData.mapMarkers) : mapData.mapMarkers;
            var mapboxMapMarkerConfigs = MapBoxMarkerConfig.from(collapsedMarkers, _this2._pinConfig, _this2._map);
            var bounds = new mapboxgl.LngLatBounds();

            var _loop = function _loop(i) {
              var wrapper = mapboxMapMarkerConfigs[i].wrapper;
              var coords = new mapboxgl.LngLat(mapboxMapMarkerConfigs[i].position.longitude, mapboxMapMarkerConfigs[i].position.latitude);
              var marker = new mapboxgl.Marker(wrapper).setLngLat(coords);
              bounds.extend(marker.getLngLat());
              marker.addTo(_this2._map);

              if (_this2._onPinClick) {
                marker.getElement().addEventListener('click', function () {
                  return _this2._onPinClick(collapsedMarkers[i].item);
                });
              }
            };

            for (var i = 0; i < mapboxMapMarkerConfigs.length; i++) {
              _loop(i);
            }

            if (mapboxMapMarkerConfigs.length >= 2) {
              _this2._map.fitBounds(bounds, {
                padding: 50
              });
            }
          })();
        }
      }
    }, {
      key: "getCenterMarker",
      value: function getCenterMarker(mapData) {
        return mapData && mapData.mapCenter && mapData.mapCenter.longitude && mapData.mapCenter.latitude ? [mapData.mapCenter.longitude, mapData.mapCenter.latitude] : {
          lng: this._defaultPosition.lng,
          lat: this._defaultPosition.lat
        };
      }
    }]);

    return MapBoxMapProvider;
  }(MapProvider);
  var MapBoxMarkerConfig =
  /*#__PURE__*/
  function () {
    function MapBoxMarkerConfig(opts) {
      _classCallCheck(this, MapBoxMarkerConfig);

      /**
       * A reference to the mapbox map, that the marker is appended to
       * @type {MapBox}
       */
      this.map = opts.map || undefined;
      /**
       * The coordinates of the marker (lat/lng)
       * @type {Object}
       */

      this.position = opts.position || {
        latitude: undefined,
        longitude: undefined
      };
      /**
       * The html element to be used as the map marker
       * @type {object}
       */

      this.wrapper = opts.wrapper || undefined;
      /**
       * The label of the marker to use
       * @type {string}
       */

      this.label = opts.label || undefined;
      /**
       * The url of the pin for the static map
       * @type {string}
       */

      this.staticMapPin = opts.staticMapPin || undefined;
    }
    /**
     * Serializes an array of marker configs
     * @param {MapBoxMarkerConfig[]} mapboxMapMarkerConfigs
     * @returns {string[]}
     */


    _createClass(MapBoxMarkerConfig, null, [{
      key: "serialize",
      value: function serialize(mapboxMapMarkerConfigs) {
        var serializedMarkers = [];
        mapboxMapMarkerConfigs.forEach(function (marker) {
          if (marker.staticMapPin) {
            serializedMarkers.push("url-".concat(marker.staticMapPin, "(").concat(marker.position.longitude, ",").concat(marker.position.latitude, ")"));
          } else {
            serializedMarkers.push("pin-s-".concat(marker.label, "(").concat(marker.position.longitude, ",").concat(marker.position.latitude, ")"));
          }
        });
        return serializedMarkers.join(',');
      }
      /**
       * Converts the storage data model of markers into MapBoxMarkerConfig
       * @param {MapBox} A reference to the mapbox map to apply the marker to
       * @param {object[]} markers The data of the marker
       * @param {Object} pinConfig The configuration to apply to the marker
       * @returns {MapBoxMarkerConfig[]}
       */

    }, {
      key: "from",
      value: function from(markers, pinConfig, map) {
        var mapboxMapMarkerConfigs = [];

        if (!Array.isArray(markers)) {
          markers = [markers];
        }

        markers.forEach(function (marker) {
          // Support configuration as a function
          var pinConfigObj = pinConfig;

          if (typeof pinConfig === 'function') {
            pinConfigObj = pinConfig(marker.item, MapProvider.DEFAULT_PIN_CONFIG, marker);
          }

          var wrapper = pinConfigObj.wrapper ? pinConfigObj.wrapper : null;
          var staticMapPin = pinConfigObj.staticMapPin ? pinConfigObj.staticMapPin : null;
          mapboxMapMarkerConfigs.push(new MapBoxMarkerConfig({
            map: map,
            position: {
              latitude: marker.latitude,
              longitude: marker.longitude
            },
            wrapper: wrapper,
            label: marker.label,
            staticMapPin: staticMapPin
          }));
        });
        return mapboxMapMarkerConfigs;
      }
    }]);

    return MapBoxMarkerConfig;
  }();

  var ProviderTypes = {
    'google': GoogleMapProvider,
    'mapbox': MapBoxMapProvider
  };

  var MapComponent =
  /*#__PURE__*/
  function (_Component) {
    _inherits(MapComponent, _Component);

    function MapComponent() {
      var _this;

      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var systemOpts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      _classCallCheck(this, MapComponent);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(MapComponent).call(this, opts, systemOpts));
      /**
       * Bind this component to listen to the storage based on this key
       */

      _this.moduleId = StorageKeys.VERTICAL_RESULTS;
      /**
       * Configuration for the behavior when there are no vertical results.
       */

      _this._noResults = _objectSpread({
        displayAllResults: false,
        visible: undefined,
        template: ''
      }, opts.noResults || _this.core.globalStorage.getState(StorageKeys.NO_RESULTS_CONFIG));
      /**
       * An aliased used to determine the type of map provider to use
       * @type {string}
       */

      _this._mapProvider = opts.mapProvider;

      if (!_this._mapProvider || !(_this._mapProvider.toLowerCase() in ProviderTypes)) {
        throw new Error('MapComponent: Invalid Map Provider; must be `google` or `mapBox`');
      }
      /**
       * A reference to an instance of the {MapProvider} that's constructed
       * @type {MapProvider}
       */


      _this._map = null;
      return _this;
    }

    _createClass(MapComponent, [{
      key: "getProviderInstance",
      // TODO(billy) Make ProviderTypes a factory class
      value: function getProviderInstance(type) {
        var _config = _objectSpread({}, this._config, {
          noResults: this._noResults
        });

        return new ProviderTypes[type.toLowerCase()](_config);
      }
    }, {
      key: "onCreate",
      value: function onCreate() {
        this._map = this.getProviderInstance(this._mapProvider);

        this._map.loadJS();
      }
    }, {
      key: "onMount",
      value: function onMount() {
        var _this2 = this;

        this._map.onLoaded(function () {
          _this2._map.init(_this2._container, _this2.getState('map'), _this2.getState('resultsContext'));
        });
      }
    }, {
      key: "setState",
      value: function setState(data, val) {
        if (Object.keys(data).length === 0) {
          return this;
        }

        if (data.resultsContext === ResultsContext.NO_RESULTS && !this._noResults.displayAllResults) {
          data = {
            resultsContext: data.resultsContext
          };
        }

        return _get(_getPrototypeOf(MapComponent.prototype), "setState", this).call(this, data, val);
      }
    }], [{
      key: "defaultTemplateName",

      /**
       * The template to render
       * @returns {string}
       * @override
       */
      value: function defaultTemplateName(config) {
        return 'results/map';
      }
    }, {
      key: "type",
      get: function get() {
        return 'Map';
      }
    }]);

    return MapComponent;
  }(Component);

  var cardTemplates = {
    'Standard': 'cards/standard',
    'Accordion': 'cards/accordion',
    'Legacy': 'cards/legacy'
  };
  var cardTypes = {
    'Standard': 'StandardCard',
    'Accordion': 'AccordionCard',
    'Legacy': 'LegacyCard'
  };

  var CardConfig = function CardConfig() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, CardConfig);

    Object.assign(this, config);
    /**
     * The card type to use
     * @type {string}
     */

    this.cardType = config.cardType || 'Standard';
    /**
     * Data mappings is a function specified in the config
     * that returns config based on the data passed into card
     * @type {Function}
     */

    this.dataMappings = config.dataMappings || function () {};
    /**
     * Either a function that spits out an array of CTA config objects or an array of CTA config objects
     * or api fieldnames
     * @type {Function|Array<Object|string>}
     */


    this.callsToAction = config.callsToAction || [];
    /**
     * The index of the card.
     * @type {number}
     */

    this._index = config._index || 0;
    /**
     * Whether this card is part of a universal search
     */

    this.isUniversal = config.isUniversal || false;
  };

  var CardComponent =
  /*#__PURE__*/
  function (_Component) {
    _inherits(CardComponent, _Component);

    function CardComponent() {
      var _this;

      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var systemConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      _classCallCheck(this, CardComponent);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(CardComponent).call(this, new CardConfig(config), systemConfig));
      /**
       * config.data comes from the data-prop attribute passed in
       * from the parent component.
       * @type {Object}
       */

      var data = config.data || {};
      /**
       * The result data for this card.
       * @type {Result}
       */

      _this.result = data.result || {};
      /**
       * Vertical key for the search.
       * @type {string}
       */

      _this.verticalKey = data.verticalKey;
      return _this;
    }

    _createClass(CardComponent, [{
      key: "setState",
      value: function setState(data) {
        var cardType = this._config.cardType; // Use the cardType as component name if it is not a built-in type

        var cardComponentName = cardTypes[cardType] || cardType;
        return _get(_getPrototypeOf(CardComponent.prototype), "setState", this).call(this, _objectSpread({}, data, {
          result: this.result,
          cardType: cardComponentName
        }));
      }
    }, {
      key: "addChild",
      value: function addChild(data, type, opts) {
        var updatedData = {
          verticalKey: this.verticalKey,
          result: data
        };

        var newOpts = _objectSpread({
          showOrdinal: this._config.showOrdinal,
          dataMappings: this._config.dataMappings,
          callsToAction: this._config.callsToAction,
          verticalKey: this._config.verticalKey,
          _index: this._config._index,
          isUniversal: this._config.isUniversal,
          modifier: this._config.modifier
        }, opts);

        return _get(_getPrototypeOf(CardComponent.prototype), "addChild", this).call(this, updatedData, type, newOpts);
      }
      /**
       * Used by children card components like StandardCardComponent to
       * apply given template mappings as config.
       * @param {Result} result
       * @param {Object|Function} dataMappings
       */

    }], [{
      key: "applyDataMappings",
      value: function applyDataMappings(result, dataMappings) {
        var config = {};

        if (typeof dataMappings === 'function') {
          dataMappings = dataMappings(result);
        }

        if (_typeof(dataMappings) === 'object') {
          Object.entries(dataMappings).forEach(function (_ref) {
            var _ref2 = _slicedToArray(_ref, 2),
                attribute = _ref2[0],
                value = _ref2[1];

            if (typeof value === 'function') {
              config[attribute] = value(result);
            } else {
              config[attribute] = value;
            }
          });
        }

        return config;
      }
    }, {
      key: "defaultTemplateName",

      /**
       * The template to render
       * @returns {string}
       * @override
       */
      value: function defaultTemplateName(config) {
        return 'cards/card';
      }
    }, {
      key: "areDuplicateNamesAllowed",
      value: function areDuplicateNamesAllowed() {
        return true;
      }
    }, {
      key: "type",
      get: function get() {
        return 'Card';
      }
    }]);

    return CardComponent;
  }(Component);

  var ResultsHeaderComponent =
  /*#__PURE__*/
  function (_Component) {
    _inherits(ResultsHeaderComponent, _Component);

    function ResultsHeaderComponent() {
      var _this;

      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var systemConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      _classCallCheck(this, ResultsHeaderComponent);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(ResultsHeaderComponent).call(this, config, systemConfig));
      /**
       * Whether to display the number of results.
       * @type {boolean}
       */

      _this._config.showResultCount = config.showResultCount === undefined ? true : config.showResultCount;
      /**
       * If present, show the filters that were ultimately applied to this query
       * @type {boolean}
       */

      _this._config.showAppliedFilters = config.showAppliedFilters === undefined ? true : config.showAppliedFilters;
      /**
       * If showAppliedFilters is true, show the field name in the string followed by a colon.
       * @type {boolean}
       */

      _this._config.showFieldNames = config.showFieldNames || false;
      /**
       * If showResultCount and showAppliedFilters are true,
       * display this separator between the result count and the applied query filters
       * @type {string}
       */

      _this._config.resultsCountSeparator = config.resultsCountSeparator || '|';
      var data = config.data || {};
      /**
       * Total number of results.
       * @type {number}
       */

      _this.resultsCount = data.resultsCount || 0;
      /**
       * Number of results displayed on the page.
       * @type {number}
       */

      _this.resultsLength = data.resultsLength || 0;
      /**
       * @type {Array<AppliedQueryFilter>}
       */

      _this.appliedQueryFilters = data.appliedQueryFilters || [];
      return _this;
    }

    _createClass(ResultsHeaderComponent, [{
      key: "getAppliedFiltersArray",
      value: function getAppliedFiltersArray() {
        var groupedFilters = {};
        this.appliedQueryFilters.forEach(function (filter) {
          if (!groupedFilters[filter.key]) {
            groupedFilters[filter.key] = [];
          }

          groupedFilters[filter.key].push(filter.value);
        }); // Has to be parsed into an array because our handlebars can only loop through arrays, not objects.

        return Object.keys(groupedFilters).map(function (label) {
          return {
            label: label,
            displayValues: groupedFilters[label]
          };
        });
      }
    }, {
      key: "setState",
      value: function setState(data) {
        var offset = this.core.globalStorage.getState(StorageKeys.SEARCH_OFFSET);
        var hasFilters = this.appliedQueryFilters.length > 0;
        var shouldShowFilters = hasFilters && this._config.showAppliedFilters;
        return _get(_getPrototypeOf(ResultsHeaderComponent.prototype), "setState", this).call(this, _objectSpread({}, data, {
          resultsCount: this.resultsCount,
          resultsCountStart: offset + 1,
          resultsCountEnd: offset + this.resultsLength,
          showResultSeparator: this._config.showResultCount && shouldShowFilters,
          shouldShowFilters: shouldShowFilters,
          appliedFiltersArray: this.getAppliedFiltersArray()
        }));
      }
    }], [{
      key: "defaultTemplateName",

      /**
       * The template to render
       * @returns {string}
       * @override
       */
      value: function defaultTemplateName(config) {
        return 'results/resultsheader';
      }
    }, {
      key: "duplicatesAllowed",
      get: function get() {
        return true;
      }
    }, {
      key: "type",
      get: function get() {
        return 'ResultsHeader';
      }
    }]);

    return ResultsHeaderComponent;
  }(Component);

  var VerticalResultsConfig = function VerticalResultsConfig() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, VerticalResultsConfig);

    Object.assign(this, config);
    /**
     * isUniversal is set to true if this component is added by the UniversalResultsComponent
     * @type {boolean}
     * @private
     */

    this.isUniversal = config.isUniversal || false;
    var parentOpts = config._parentOpts || {};
    /**
     * Custom render function
     * @type {function}
     */

    this.renderItem = config.renderItem || parentOpts.renderItem;
    /**
     * Custom item template
     * @type {string}
     */

    this.itemTemplate = config.itemTemplate || parentOpts.itemTemplate;
    /**
     * The maximum number of columns to display, supports 1, 2, 3, or 4.
     * @type {number}
     */

    this.maxNumberOfColumns = config.maxNumberOfColumns || 1;
    /**
     * The config to pass to the card
     * @type {Object}
     */

    this.card = config.card || {};
    /**
     * Config options used in the {@link ResultsHeaderComponent}
     */

    this.resultsHeaderOpts = {
      /**
       * Whether to display the number of results.
       * @type {boolean}
       */
      showResultCount: config.showResultCount === undefined ? true : config.showResultCount,

      /**
       * If present, show the filters that were ultimately applied to this query
       * @type {boolean}
       */
      showAppliedFilters: config.showAppliedFilters === undefined ? true : config.showAppliedFilters,

      /**
       * If showResultCount and showAppliedFilters are true,
       * display this separator between the result count and the applied query filters
       * @type {string}
       */
      resultsCountSeparator: config.resultsCountSeparator || '|',

      /**
       * If showAppliedFilters is true, show the field name in the string followed by a colon.
       * @type {boolean}
       */
      showFieldNames: config.showFieldNames || false
    };
  };

  var VerticalResultsComponent =
  /*#__PURE__*/
  function (_Component) {
    _inherits(VerticalResultsComponent, _Component);

    function VerticalResultsComponent() {
      var _this;

      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var systemConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      _classCallCheck(this, VerticalResultsComponent);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(VerticalResultsComponent).call(this, new VerticalResultsConfig(config), systemConfig));

      var noResultsConfig = _this._config.noResults || _this.core.globalStorage.getState(StorageKeys.NO_RESULTS_CONFIG);
      /**
       * A parsed version of the noResults config provided to the component.
       * Applies sensible defaults if certain values are not set.
       * @type {Object}
       * @private
       */


      _this._noResultsConfig = Object.assign({
        displayAllResults: false,
        template: ''
      }, noResultsConfig);
      /**
       * Boolean indicating if legacy no results display should be used.
       * @type {boolean}
       * @private
       */

      _this._useLegacyNoResults = _this._config.isUniversal || !noResultsConfig;
      /**
       * _displayAllResults controls if all results for the vertical will display
       * when there are no results for a query.
       * @type {boolean}
       * @private
       */

      _this._displayAllResults = _this._noResultsConfig.displayAllResults;
      /**
       * Specifies a custom no results template.
       *
       * @type {string}
       * @private
       */

      _this._noResultsTemplate = _this._noResultsConfig.template;
      _this.moduleId = StorageKeys.VERTICAL_RESULTS;
      /**
       * Vertical config from config, if not present, fall back to global verticalPagesConfig
       * @type {Array.<object>}
       * @private
       */

      _this._verticalsConfig = config.verticalPages || _this.core.globalStorage.getState(StorageKeys.VERTICAL_PAGES_CONFIG).get() || [];
      /**
       * @type {Array<Result>}
       */

      _this.results = [];
      _this.numColumns = _this._config.maxNumberOfColumns;
      return _this;
    }

    _createClass(VerticalResultsComponent, [{
      key: "mount",
      value: function mount() {
        if (Object.keys(this.getState()).length > 0) {
          _get(_getPrototypeOf(VerticalResultsComponent.prototype), "mount", this).call(this);
        }

        return this;
      }
    }, {
      key: "getUniversalUrl",
      value: function getUniversalUrl() {
        var universalConfig = this._verticalsConfig.find(function (config) {
          return !config.verticalKey;
        }) || {};

        if (universalConfig.url) {
          return addParamsToUrl(universalConfig.url, {
            query: this.query
          });
        }
      }
    }, {
      key: "getVerticalURL",
      value: function getVerticalURL(data) {
        var _this2 = this;

        var verticalConfig = this._verticalsConfig.find(function (config) {
          return config.verticalKey === _this2.verticalKey;
        }) || {};
        var verticalURL = verticalConfig.url || data.verticalURL || this.verticalKey + '.html';
        return addParamsToUrl(verticalURL, {
          query: this.query
        });
      }
    }, {
      key: "setState",
      value: function setState() {
        var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var val = arguments.length > 1 ? arguments[1] : undefined;

        /**
         * @type {Array<Result>}
         */
        this.results = data.results || [];
        this.resultsCount = data.resultsCount;
        this.verticalKey = data.verticalConfigId;
        this.resultsContext = data.resultsContext;
        this.appliedQueryFilters = data.appliedQueryFilters;
        var searchState = data.searchState || SearchStates.PRE_SEARCH;
        var displayResultsIfExist = this._config.isUniversal || this._displayAllResults || data.resultsContext === ResultsContext.NORMAL;
        var showResultsHeader = this._config.resultsHeaderOpts.showResultCount || this._config.resultsHeaderOpts.showAppliedFilters;
        this.query = this.core.globalStorage.getState(StorageKeys.QUERY);
        return _get(_getPrototypeOf(VerticalResultsComponent.prototype), "setState", this).call(this, Object.assign({
          results: []
        }, data, {
          isPreSearch: searchState === SearchStates.PRE_SEARCH,
          isSearchLoading: searchState === SearchStates.SEARCH_LOADING,
          isSearchComplete: searchState === SearchStates.SEARCH_COMPLETE,
          eventOptions: this.eventOptions(),
          universalUrl: this.getUniversalUrl(),
          verticalURL: this.getVerticalURL(data),
          query: this.query,
          currentVerticalLabel: this._currentVerticalLabel,
          resultsPresent: displayResultsIfExist && this.results.length !== 0,
          showNoResults: this.resultsContext === ResultsContext.NO_RESULTS,
          placeholders: new Array(this._config.maxNumberOfColumns - 1),
          numColumns: Math.min(this._config.maxNumberOfColumns, this.results.length),
          showResultsHeader: showResultsHeader,
          useLegacyNoResults: this._useLegacyNoResults
        }), val);
      }
      /**
       * helper to construct the eventOptions object for the view all link
       * @returns {string}
       */

    }, {
      key: "eventOptions",
      value: function eventOptions() {
        return JSON.stringify({
          verticalConfigId: this.verticalKey
        });
      }
    }, {
      key: "addChild",
      value: function addChild(data, type, opts) {
        if (type === MapComponent.type) {
          var _opts = _objectSpread({
            noResults: this._noResultsConfig
          }, this._config.mapConfig, {}, opts);

          var _data = {
            resultsContext: this.getState('resultsContext'),
            map: data
          };
          return _get(_getPrototypeOf(VerticalResultsComponent.prototype), "addChild", this).call(this, _data, type, _opts);
        } else if (type === CardComponent.type) {
          var updatedData = {
            result: this.results[opts._index],
            verticalKey: this.verticalKey
          };

          var newOpts = _objectSpread({
            target: this._config.target
          }, this._config.card, {
            isUniversal: this._config.isUniversal,
            template: this._config.itemTemplate,
            render: this._config.renderItem,
            modifier: this._config.modifier
          }, opts);

          return _get(_getPrototypeOf(VerticalResultsComponent.prototype), "addChild", this).call(this, updatedData, type, newOpts);
        } else if (type === AlternativeVerticalsComponent.type) {
          var hasResults = this.results && this.results.length > 0;
          data = this.core.globalStorage.getState(StorageKeys.ALTERNATIVE_VERTICALS);

          var _newOpts = _objectSpread({
            template: this._noResultsTemplate,
            universalUrl: this.getUniversalUrl(),
            verticalsConfig: this._verticalsConfig,
            isShowingResults: this._displayAllResults && hasResults
          }, opts);

          return _get(_getPrototypeOf(VerticalResultsComponent.prototype), "addChild", this).call(this, data, type, _newOpts);
        } else if (type === ResultsHeaderComponent.type) {
          var resultsHeaderData = _objectSpread({
            resultsLength: this.results.length,
            resultsCount: this.resultsCount,
            appliedQueryFilters: this.appliedQueryFilters
          }, data);

          var _opts2 = _objectSpread({}, opts);

          if (this.resultsContext === ResultsContext.NO_RESULTS) {
            _opts2.showAppliedFilters = false;
          }

          return _get(_getPrototypeOf(VerticalResultsComponent.prototype), "addChild", this).call(this, resultsHeaderData, type, _opts2);
        }

        return _get(_getPrototypeOf(VerticalResultsComponent.prototype), "addChild", this).call(this, data, type, opts);
      }
    }], [{
      key: "defaultTemplateName",

      /**
       * The template to render
       * @returns {string}
       * @override
       */
      value: function defaultTemplateName(config) {
        return 'results/verticalresults';
      }
    }, {
      key: "duplicatesAllowed",
      get: function get() {
        return true;
      }
    }, {
      key: "type",
      get: function get() {
        return 'VerticalResults';
      }
    }]);

    return VerticalResultsComponent;
  }(Component);

  var AccordionResultsComponent =
  /*#__PURE__*/
  function (_VerticalResultsCompo) {
    _inherits(AccordionResultsComponent, _VerticalResultsCompo);

    function AccordionResultsComponent() {
      var _this;

      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var systemConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      _classCallCheck(this, AccordionResultsComponent);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(AccordionResultsComponent).call(this, config, systemConfig));
      /**
       * base selector to use when finding DOM targets
       * @type {string}
       */

      _this._selectorBase = config.selectorBase || '.js-yxt-AccordionResult';
      /**
       * collapsed state class
       * @type {string}
       */

      _this.collapsedClass = config.collapsedClass || 'is-collapsed';
      /**
       * vertical config id is required for analytics
       * @type {string|null}
       */

      _this.verticalConfigId = config.verticalConfigId || config._parentOpts.verticalConfigId || null;
      return _this;
    }
    /**
     * the component type
     * @returns {string}
     * @override
     */


    _createClass(AccordionResultsComponent, [{
      key: "onMount",

      /**
       * overrides onMount to add bindings to change the height on click
       * @returns {AccordionResultsComponent}
       * @override
       */
      value: function onMount() {
        var _this2 = this;

        _get(_getPrototypeOf(AccordionResultsComponent.prototype), "onMount", this).call(this); // NOTE(amullings): This is a hack, since currently components with siblings
        // have no way of referring to their own element. We have to grab the first
        // element since sections get added in reverse.


        var selfEl = this._container.firstElementChild;
        var accordionEls = DOM.queryAll(selfEl, this._selectorBase);
        accordionEls.forEach(function (accordionEl) {
          var toggleEl = DOM.query(accordionEl, _this2.toggleSelector());
          var contentEl = DOM.query(accordionEl, _this2.bodySelector());

          _this2.changeHeight(contentEl, accordionEl);

          toggleEl.addEventListener('click', function () {
            _this2.handleClick(accordionEl, toggleEl, contentEl);
          });
        });
        return this;
      }
    }, {
      key: "setState",
      value: function setState(data) {
        return _get(_getPrototypeOf(AccordionResultsComponent.prototype), "setState", this).call(this, Object.assign({}, data, {
          modifier: this.verticalConfigId
        }));
      }
      /**
       * click handler for the accordion toggle button
       * @param wrapperEl {HTMLElement} the toggle container
       * @param toggleEl {HTMLElement} the button
       * @param contentEl {HTMLElement} the toggle target
       */

    }, {
      key: "handleClick",
      value: function handleClick(wrapperEl, toggleEl, contentEl) {
        var event = new AnalyticsEvent(this.isCollapsed(wrapperEl) ? 'ROW_EXPAND' : 'ROW_COLLAPSE').addOptions({
          verticalConfigId: this.verticalConfigId,
          entityId: toggleEl.dataset.entityId
        });
        wrapperEl.classList.toggle(this.collapsedClass);
        this.changeHeight(contentEl, wrapperEl);
        toggleEl.setAttribute('aria-expanded', this.isCollapsed(wrapperEl) ? 'false' : 'true');
        this.analyticsReporter.report(event);
      }
      /**
       * returns true if the element is currently collapsed
       * @param wrapperEl {HTMLElement} the toggle container
       * @returns {boolean}
       */

    }, {
      key: "isCollapsed",
      value: function isCollapsed(wrapperEl) {
        if (!wrapperEl) {
          return false;
        }

        return wrapperEl.classList.contains(this.collapsedClass);
      }
      /**
       * toggles the height between 0 and the content height for smooth animation
       * @param targetEl {HTMLElement}
       * @param wrapperEl {HTMLElement}
       */

    }, {
      key: "changeHeight",
      value: function changeHeight(targetEl, wrapperEl) {
        targetEl.style.height = "".concat(this.isCollapsed(wrapperEl) ? 0 : targetEl.scrollHeight, "px");
      }
      /**
       * helper for composing child element selectors
       * @param child {string}
       * @returns {string}
       */

    }, {
      key: "buildSelector",
      value: function buildSelector(child) {
        return "".concat(this._selectorBase).concat(child);
      }
      /**
       * helper for the toggle button selector
       * @returns {string}
       */

    }, {
      key: "toggleSelector",
      value: function toggleSelector() {
        return this.buildSelector('-toggle');
      }
      /**
       * helper for the content element selector
       * @returns {string}
       */

    }, {
      key: "bodySelector",
      value: function bodySelector() {
        return this.buildSelector('-body');
      }
    }], [{
      key: "defaultTemplateName",

      /**
       * The template to render
       * @returns {string}
       * @override
       */
      value: function defaultTemplateName(config) {
        return 'results/resultsaccordion';
      }
    }, {
      key: "type",
      get: function get() {
        return 'AccordionResults';
      }
    }]);

    return AccordionResultsComponent;
  }(VerticalResultsComponent);

  var UniversalResultsComponent =
  /*#__PURE__*/
  function (_Component) {
    _inherits(UniversalResultsComponent, _Component);

    function UniversalResultsComponent() {
      var _this;

      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var systemOpts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      _classCallCheck(this, UniversalResultsComponent);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(UniversalResultsComponent).call(this, opts, systemOpts));
      _this.moduleId = StorageKeys.UNIVERSAL_RESULTS;
      return _this;
    }

    _createClass(UniversalResultsComponent, [{
      key: "init",
      value: function init(opts) {
        _get(_getPrototypeOf(UniversalResultsComponent.prototype), "init", this).call(this, opts);

        return this;
      }
    }, {
      key: "setState",
      value: function setState(data, val) {
        var sections = data.sections || [];
        var searchState = data.searchState || SearchStates.PRE_SEARCH;
        return _get(_getPrototypeOf(UniversalResultsComponent.prototype), "setState", this).call(this, Object.assign({
          sections: []
        }, data, {
          isPreSearch: searchState === SearchStates.PRE_SEARCH,
          isSearchLoading: searchState === SearchStates.SEARCH_LOADING,
          isSearchComplete: searchState === SearchStates.SEARCH_COMPLETE,
          showNoResults: sections.length === 0,
          query: this.core.globalStorage.getState(StorageKeys.QUERY)
        }), val);
      }
    }, {
      key: "addChild",
      value: function addChild() {
        var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var type = arguments.length > 1 ? arguments[1] : undefined;
        var opts = arguments.length > 2 ? arguments[2] : undefined;

        var childOpts = _objectSpread({}, opts, {}, this.getChildConfig([data['verticalConfigId']]));

        if (childOpts.useAccordion === true) {
          return _get(_getPrototypeOf(UniversalResultsComponent.prototype), "addChild", this).call(this, data, AccordionResultsComponent.type, childOpts);
        }

        return _get(_getPrototypeOf(UniversalResultsComponent.prototype), "addChild", this).call(this, data, type, childOpts);
      }
    }, {
      key: "getChildConfig",
      value: function getChildConfig(configId) {
        var defaultConfig = {
          verticalConfigId: configId,
          isUniversal: true
        };
        var config = this._config.config;

        if (config === undefined) {
          return defaultConfig;
        }

        return Object.assign(defaultConfig, this._config['config'][configId] || this._config['config']);
      }
    }], [{
      key: "defaultTemplateName",

      /**
       * The template to render
       * @returns {string}
       * @override
       */
      value: function defaultTemplateName(config) {
        return 'results/universalresults';
      }
    }, {
      key: "areDuplicateNamesAllowed",
      value: function areDuplicateNamesAllowed() {
        return true;
      }
    }, {
      key: "type",
      get: function get() {
        return 'UniversalResults';
      }
    }]);

    return UniversalResultsComponent;
  }(Component);

  var PaginationComponent =
  /*#__PURE__*/
  function (_Component) {
    _inherits(PaginationComponent, _Component);

    function PaginationComponent() {
      var _this;

      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var systemConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      _classCallCheck(this, PaginationComponent);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(PaginationComponent).call(this, config, systemConfig));
      /**
       * The vertical key to use for searches
       * @type {string}
       * @private
       */

      _this._verticalKey = config.verticalKey || _this.core.globalStorage.getState(StorageKeys.SEARCH_CONFIG).verticalKey;

      if (typeof _this._verticalKey !== 'string') {
        throw new AnswersComponentError('verticalKey not provided, but necessary for pagination', 'PaginationComponent');
      }
      /**
       * If true, displays the first page button
       * @type {boolean}
       * @private
       */


      _this._firstPageButtonEnabled = config.showFirst === undefined ? true : config.showFirst;
      /**
       * If true, displays the last page button
       * @type {boolean}
       * @private
       */

      _this._lastPageButtonEnabled = config.showLast === undefined ? true : config.showLast;
      /**
       * Options to include with all analytic events sent by this component
       * @type {object}
       * @private
       */

      _this._analyticsOptions = {
        verticalKey: _this._verticalKey
      };
      /**
       * Label for a page of results.
       * @type {string}
       * @private
       */

      _this._pageLabel = config.pageLabel || 'Page';
      var offset = _this.core.globalStorage.getState(StorageKeys.SEARCH_OFFSET) || 0;

      _this.core.globalStorage.set(StorageKeys.SEARCH_OFFSET, Number(offset));

      _this.core.globalStorage.on('update', StorageKeys.SEARCH_OFFSET, function (offset) {
        if (typeof offset === 'number') {
          return;
        }

        _this.core.globalStorage.set(StorageKeys.SEARCH_OFFSET, Number(offset));
      });

      _this.core.globalStorage.on('update', StorageKeys.VERTICAL_RESULTS, function (results) {
        if (results.searchState === SearchStates.SEARCH_COMPLETE) {
          _this.setState();
        }
      });
      /**
       * Configuration for the behavior when there are no vertical results.
       */


      _this._noResults = config.noResults || _this.core.globalStorage.getState(StorageKeys.NO_RESULTS_CONFIG) || {};
      return _this;
    }

    _createClass(PaginationComponent, [{
      key: "shouldShowControls",
      value: function shouldShowControls(results, limit) {
        var hasResults = results.searchState === 'search-complete' && results.resultsCount > limit;
        var isNormalResults = results.resultsContext === ResultsContext.NORMAL;
        var isVisibleForNoResults = 'visible' in this._noResults ? this._noResults.visible : this._noResults.displayAllResults;
        return hasResults && (isNormalResults || isVisibleForNoResults);
      }
    }, {
      key: "onMount",
      value: function onMount() {
        var _this2 = this;

        var results = this.core.globalStorage.getState(StorageKeys.VERTICAL_RESULTS) || {};
        var limit = this.core.globalStorage.getState(StorageKeys.SEARCH_CONFIG).limit;
        var showControls = this.shouldShowControls(results, limit);
        var offset = this.core.globalStorage.getState(StorageKeys.SEARCH_OFFSET) || 0;

        if (!showControls) {
          return;
        }

        var previousPageButton = DOM.query(this._container, '.js-yxt-Pagination-previous');
        var nextPageButton = DOM.query(this._container, '.js-yxt-Pagination-next');
        var maxPage = Math.trunc((results.resultsCount - 1) / limit);
        DOM.on(previousPageButton, 'click', function () {
          return _this2.updatePage(offset - limit);
        });
        DOM.on(nextPageButton, 'click', function () {
          return _this2.updatePage(offset + limit);
        });

        if (this._firstPageButtonEnabled) {
          var firstPageButton = DOM.query(this._container, '.js-yxt-Pagination-first');
          DOM.on(firstPageButton, 'click', function () {
            return _this2.updatePage(0);
          });
        }

        if (this._lastPageButtonEnabled) {
          var lastPageButton = DOM.query(this._container, '.js-yxt-Pagination-last');
          DOM.on(lastPageButton, 'click', function () {
            return _this2.updatePage(maxPage * limit);
          });
        }
      }
    }, {
      key: "updatePage",
      value: function updatePage(offset) {
        this.scrollToTop();
        this.core.globalStorage.set(StorageKeys.SEARCH_OFFSET, offset);
        this.core.persistentStorage.set(StorageKeys.SEARCH_OFFSET, offset);
        this.core.verticalPage(this._verticalKey, offset);
      }
    }, {
      key: "scrollToTop",
      value: function scrollToTop() {
        document.documentElement.scrollTop = 0; // Safari

        document.body.scrollTop = 0;
      }
    }, {
      key: "setState",
      value: function setState(data) {
        var results = this.core.globalStorage.getState(StorageKeys.VERTICAL_RESULTS) || {};
        var offset = this.core.globalStorage.getState(StorageKeys.SEARCH_OFFSET) || 0;
        var limit = this.core.globalStorage.getState(StorageKeys.SEARCH_CONFIG).limit;
        var pageNumber = offset / limit;
        var isMoreResults = results.resultsCount > offset + limit;
        var maxPage = Math.trunc((results.resultsCount - 1) / limit);
        return _get(_getPrototypeOf(PaginationComponent.prototype), "setState", this).call(this, _objectSpread({
          showControls: this.shouldShowControls(results, limit),
          firstPageButtonEnabled: this._firstPageButtonEnabled,
          lastPageButtonEnabled: this._lastPageButtonEnabled,
          pageNumber: pageNumber + 1,
          pageLabel: this._pageLabel,
          showFirstPageButton: pageNumber > 1,
          showPreviousPageButton: pageNumber > 0,
          showNextPageButton: isMoreResults,
          showLastPageButton: pageNumber < maxPage - 1
        }, data));
      }
    }], [{
      key: "defaultTemplateName",
      value: function defaultTemplateName() {
        return 'results/pagination';
      }
    }, {
      key: "type",
      get: function get() {
        return 'Pagination';
      }
    }]);

    return PaginationComponent;
  }(Component);

  var CTACollectionComponent =
  /*#__PURE__*/
  function (_Component) {
    _inherits(CTACollectionComponent, _Component);

    function CTACollectionComponent() {
      var _this;

      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var systemConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      _classCallCheck(this, CTACollectionComponent);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(CTACollectionComponent).call(this, config, systemConfig));
      var data = _this._config.data || {};
      /**
       * Result data
       * @type {Result}
       */

      _this.result = data.result || {};
      /**
       * Whether the DOM should include legacy class names
       * @type {boolean}
       */

      _this.includeLegacyClasses = _this._config.includeLegacyClasses || false;
      /**
       * Vertical key for the search.
       * @type {string}
       */

      _this.verticalKey = data.verticalKey;
      /**
       * Whether this cta is part of a universal search.
       * @type {boolean}
       */

      _this.isUniversal = _this._config.isUniversal || false;
      /**
       * Either a function that spits out an array of CTA config objects or an array of CTA config objects
       * or api fieldnames
       * @type {Function|Array<Object|string>}
       */

      var callsToAction = _this._config.callsToAction || [];
      /**
       * The config for each calls to action component to render.
       * @type {Array<Object>}
       */

      _this.callsToAction = CTACollectionComponent.resolveCTAMapping.apply(CTACollectionComponent, [_this.result._raw].concat(_toConsumableArray(callsToAction))); // Assign any extra cta config that does not come from the cta mappings.

      var _ctaModifiers = _this._config._ctaModifiers || [];

      if (_this.callsToAction.length === 1) {
        _ctaModifiers.push('solo');
      }

      _this.callsToAction = _this.callsToAction.map(function (cta) {
        return _objectSpread({
          eventOptions: _this.defaultEventOptions(_this.result),
          _ctaModifiers: _ctaModifiers,
          includeLegacyClasses: _this.includeLegacyClasses
        }, cta);
      });
      return _this;
    }
    /**
     * Handles resolving ctas from a cta mapping which are either
     * 1. a function that returns a cta's config
     * 2. an object that has a per-attribute mapping of either a
     *    a) static value
     *    b) function that takes in resut data and returns the given attributes value
     * Note: Intentionally does not allow nesting functions.
     * @param {Object} result
     * @param {Function|...(Object|string)} ctas
     * @returns {Array<Object>}
     */


    _createClass(CTACollectionComponent, [{
      key: "defaultEventOptions",
      value: function defaultEventOptions(result) {
        var eventOptions = {
          verticalKey: this.verticalKey,
          searcher: this._config.isUniversal ? 'UNIVERSAL' : 'VERTICAL'
        };

        if (result._raw.id) {
          eventOptions.entityId = result._raw.id;
        }

        return eventOptions;
      }
    }, {
      key: "setState",
      value: function setState(data) {
        return _get(_getPrototypeOf(CTACollectionComponent.prototype), "setState", this).call(this, _objectSpread({}, data, {
          includeLegacyClasses: this.includeLegacyClasses,
          callsToAction: this.callsToAction
        }));
      }
    }], [{
      key: "resolveCTAMapping",
      value: function resolveCTAMapping(result) {
        var parsedCTAs = [];

        for (var _len = arguments.length, ctas = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          ctas[_key - 1] = arguments[_key];
        }

        ctas.map(function (ctaMapping) {
          if (typeof ctaMapping === 'function') {
            parsedCTAs = parsedCTAs.concat(ctaMapping(result));
          } else if (_typeof(ctaMapping) === 'object') {
            var ctaObject = _objectSpread({}, ctaMapping);

            for (var _i = 0, _Object$entries = Object.entries(ctaMapping); _i < _Object$entries.length; _i++) {
              var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),
                  ctaAttribute = _Object$entries$_i[0],
                  attributeMapping = _Object$entries$_i[1];

              if (typeof attributeMapping === 'function') {
                ctaObject[ctaAttribute] = attributeMapping(result);
              }
            }

            parsedCTAs.push(ctaObject);
          }
        });
        parsedCTAs = parsedCTAs.filter(function (cta) {
          return cta;
        });
        parsedCTAs.forEach(function (cta) {
          if (!cta.label && !cta.url) {
            console.warn('Call to Action:', cta, 'is missing both a label and url attribute and is being automatically hidden');
          } else if (!cta.label) {
            console.warn('Call to Action:', cta, 'is missing a label attribute and is being automatically hidden');
          } else if (!cta.url) {
            console.warn('Call to Action:', cta, 'is missing a url attribute and is being automatically hidden');
          }
        });
        return parsedCTAs.filter(function (cta) {
          return cta.url && cta.url.trim() && cta.label && cta.label.trim();
        });
      }
    }, {
      key: "hasCTAs",
      value: function hasCTAs(result, ctas) {
        return CTACollectionComponent.resolveCTAMapping.apply(CTACollectionComponent, [result].concat(_toConsumableArray(ctas))).length > 0;
      }
    }, {
      key: "defaultTemplateName",
      value: function defaultTemplateName() {
        return 'ctas/ctacollection';
      }
    }, {
      key: "type",
      get: function get() {
        return 'CTACollection';
      }
    }]);

    return CTACollectionComponent;
  }(Component);

  var StandardCardConfig = function StandardCardConfig() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, StandardCardConfig);

    Object.assign(this, config);
    var data = config.data || {};
    /**
     * The result data
     * @type {Result}
     */

    var result = data.result || {};
    /**
     * The raw profile data
     * @type {Object}
     */

    var rawResult = result._raw || {};
    /**
     * The dataMappings attribute of the config
     * is either a function that returns additional config for
     * a card or an object that is the additional config.
     */

    Object.assign(this, CardComponent.applyDataMappings(rawResult, config.dataMappings || {}));
    /**
     * The result data
     * @type {Result}
     */

    this.result = config.data || {};
    /**
     * Title for the card
     * @type {string}
     */

    this.title = this.title || result.title || rawResult.name || '';
    /**
     * Details for the card
     * @type {string}
     */

    this.details = this.details === null ? null : this.details || result.details || rawResult.description || '';
    /**
     * Url when you click the title
     * @type {string}
     */

    this.url = this.url === null ? '' : this.url || result.link || rawResult.website;
    /**
     * If showMoreLimit is set, the text that displays beneath it
     * @type {string}
     */

    this.showMoreText = this.showMoreText || 'Show More';
    /**
     * If showMoreLimit is set, the text that displays beneath it when all text is shown
     * @type {string}
     */

    this.showLessText = this.showLessText || 'Show Less';
    /**
     * Add a show more link if this number of characters is shown,
     * and truncate the last 3 characters with an ellipses.
     * Clicking show more should expand the results (but no “show less” link).
     * @type {number}
     */

    this.showMoreLimit = this.showMoreLimit;
    /**
     * The target attribute for the title link.
     * @type {string}
     */

    this.target = this.target;
    /**
     * Image url to display
     * @type {string}
     */

    this.image = this.image;
    /**
     * Subtitle
     * @type {string}
     */

    this.subtitle = this.subtitle;
    /**
     * Whether a 'show more' toggle button needs to be rendered at all
     */

    var detailsOverLimit = this.details.length > this.showMoreLimit;
    this.showToggle = this.showMoreLimit && detailsOverLimit;
    /**
     * Either a function that spits out an array of CTA config objects or an array of CTA config objects
     * or api fieldnames
     * @type {Function|Array<Object|string>}
     */

    this.callsToAction = this.callsToAction || [];
    /**
     * Whether to show the ordinal of the card in the results.
     * @type {boolean}
     */

    this.showOrdinal = this.showOrdinal || false;
    /**
     * Whether this card is part of a universal search.
     * @type {boolean}
     */

    this.isUniversal = this.isUniversal || false;
    /**
     * The index of the card.
     * @type {number}
     */

    this._index = config._index || 0;
  };
  /**
   * Card components expect to receive a data config option, containing data regarding entity result
   * each card is assigned to, including all field data in data._raw.
   */


  var StandardCardComponent =
  /*#__PURE__*/
  function (_Component) {
    _inherits(StandardCardComponent, _Component);

    function StandardCardComponent() {
      var _this;

      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var systemConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      _classCallCheck(this, StandardCardComponent);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(StandardCardComponent).call(this, new StandardCardConfig(config), systemConfig));
      _this.hideExcessDetails = _this._config.showToggle;
      /**
       * @type {Object}
       */

      var data = config.data || {};
      /**
       * Vertical key for the search.
       * @type {string}
       */

      _this.verticalKey = data.verticalKey;
      /**
       * The result data
       * @type {Result}
       */

      _this.result = data.result || {};
      return _this;
    }

    _createClass(StandardCardComponent, [{
      key: "setState",
      value: function setState(data) {
        var details = this._config.details;

        if (this._config.showMoreLimit) {
          details = this.hideExcessDetails ? "".concat(this._config.details.substring(0, this._config.showMoreLimit), "...") : this._config.details;
        }

        return _get(_getPrototypeOf(StandardCardComponent.prototype), "setState", this).call(this, _objectSpread({}, data, {
          hideExcessDetails: this.hideExcessDetails,
          result: this.result,
          hasCTAs: CTACollectionComponent.hasCTAs(this.result._raw, this._config.callsToAction),
          entityId: this.result._raw.id,
          verticalKey: this.verticalKey,
          details: details
        }));
      }
    }, {
      key: "onMount",
      value: function onMount() {
        var _this2 = this;

        if (this._config.showToggle) {
          var el = DOM.query(this._container, '.js-yxt-StandardCard-toggle');
          DOM.on(el, 'click', function () {
            _this2.hideExcessDetails = !_this2.hideExcessDetails;

            _this2.setState();
          });
        }
      }
    }, {
      key: "addChild",
      value: function addChild(data, type, opts) {
        if (type === CTACollectionComponent.type) {
          var updatedData = {
            verticalKey: this.verticalKey,
            result: data
          };
          return _get(_getPrototypeOf(StandardCardComponent.prototype), "addChild", this).call(this, updatedData, type, _objectSpread({
            callsToAction: this._config.callsToAction,
            isUniversal: this._config.isUniversal,
            _ctaModifiers: ['StandardCard']
          }, opts));
        }

        return _get(_getPrototypeOf(StandardCardComponent.prototype), "addChild", this).call(this, data, type, opts);
      }
    }], [{
      key: "defaultTemplateName",
      value: function defaultTemplateName() {
        return cardTemplates.Standard;
      }
    }, {
      key: "areDuplicateNamesAllowed",
      value: function areDuplicateNamesAllowed() {
        return true;
      }
    }, {
      key: "type",
      get: function get() {
        return cardTypes.Standard;
      }
    }]);

    return StandardCardComponent;
  }(Component);

  var AccordionCardConfig = function AccordionCardConfig() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, AccordionCardConfig);

    Object.assign(this, config);
    var data = config.data || {};
    /**
     * The result data
     * @type {Result}
     */

    var result = data.result || {};
    /**
     * The raw profile data
     * @type {Object}
     */

    var rawResult = result._raw || {};
    /**
     * The dataMappings attribute of the config
     * is either a function that returns additional config for
     * a card or an object that is the additional config.
     */

    var dataMappings = config.dataMappings || {};
    Object.assign(this, CardComponent.applyDataMappings(rawResult, dataMappings));
    /**
     * Vertical key for the card, added to analytics events sent by this component.
     * @type {string}
     */

    this.verticalKey = config.verticalKey;
    /**
     * @type {string}
     */

    this.title = this.title || result.title || rawResult.name || '';
    /**
     * @type {string}
     */

    this.subtitle = this.subtitle;
    /**
     * @type {string}
     */

    this.details = this.details === null ? null : this.details || result.details || rawResult.description || '';
    /**
     * If expanded is true the first accordion in vertical/universal results renders on page load expanded.
     * @type {boolean}
     */

    this.expanded = this.expanded || false;
    /**
     * Either a function that spits out an array of CTA config objects or an array of CTA config objects
     * or api fieldnames
     * @type {Function|Array<Object|string>}
     */

    this.callsToAction = this.callsToAction || [];
    /**
     * Whether this card is part of a universal search. Used in analytics.
     * @type {boolean}
     */

    this.isUniversal = config.isUniversal || false;
  };

  var AccordionCardComponent =
  /*#__PURE__*/
  function (_Component) {
    _inherits(AccordionCardComponent, _Component);

    function AccordionCardComponent() {
      var _this;

      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var systemConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      _classCallCheck(this, AccordionCardComponent);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(AccordionCardComponent).call(this, new AccordionCardConfig(config), systemConfig));
      /**
       * Whether the accordion is collapsed or not.
       * Defaults to true only if the expanded option is true
       * and this is the first card in the results.
       * @type {boolean}
       */

      _this.isExpanded = _this._config.expanded && config._index === 0;
      /**
       * @type {Object}
       */

      var data = config.data || {};
      /**
       * Vertical key for the card, added to analytics events sent by this component.
       * @type {string}
       */

      _this.verticalKey = data.verticalKey;
      /**
       * The result data, sent to children CTA Components that need this.
       * @type {Result}
       */

      _this.result = data.result || {};
      return _this;
    }

    _createClass(AccordionCardComponent, [{
      key: "setState",
      value: function setState(data) {
        var id = this.result.id || this.result.ordinal;
        return _get(_getPrototypeOf(AccordionCardComponent.prototype), "setState", this).call(this, _objectSpread({}, data, {
          result: this.result,
          isExpanded: this.isExpanded,
          id: "".concat(this.name, "-").concat(id, "-").concat(this.verticalKey),
          hasCTAs: CTACollectionComponent.hasCTAs(this.result._raw, this._config.callsToAction)
        }));
      }
      /**
       * Click handler for the accordion toggle button
       * This is used over set state because it's a lot smoother, since
       * it doesn't rip the whole component off of the page and remount it.
       * Also reports an analytics event.
       * @param {HTMLElement} toggleEl the toggle element
       * @param {HTMLElement} accordionBodyEl the .js-yxt-AccordionCard-body element
       * @param {HTMLElement} accordionEl the root accordion element
       */

    }, {
      key: "handleClick",
      value: function handleClick(toggleEl, accordionBodyEl, accordionEl) {
        this.isExpanded = !this.isExpanded;
        accordionEl.classList.toggle('yxt-AccordionCard--expanded');
        accordionBodyEl.style.height = "".concat(this.isExpanded ? accordionBodyEl.scrollHeight : 0, "px");
        toggleEl.setAttribute('aria-expanded', this.isExpanded ? 'true' : 'false');
        accordionBodyEl.setAttribute('aria-hidden', this.isExpanded ? 'false' : 'true');
        var event = new AnalyticsEvent(this.isExpanded ? 'ROW_EXPAND' : 'ROW_COLLAPSE').addOptions({
          verticalKey: this.verticalKey,
          entityId: this.result._raw.id,
          searcher: this._config.isUniversal ? 'UNIVERSAL' : 'VERTICAL'
        });
        this.analyticsReporter.report(event);
      }
    }, {
      key: "onMount",
      value: function onMount() {
        var _this2 = this;

        var toggleEl = DOM.query(this._container, '.js-yxt-AccordionCard-toggle');
        var accordionBodyEl = DOM.query(this._container, '.js-yxt-AccordionCard-body');
        var accordionEl = DOM.query(this._container, '.js-yxt-AccordionCard');
        accordionBodyEl.style.height = "".concat(this.isExpanded ? accordionBodyEl.scrollHeight : 0, "px");
        DOM.on(toggleEl, 'click', function () {
          return _this2.handleClick(toggleEl, accordionBodyEl, accordionEl);
        });
      }
      /**
       * For passing functions to the config of children {@link CTACollectionComponent}
       */

    }, {
      key: "addChild",
      value: function addChild(data, type, opts) {
        if (type === CTACollectionComponent.type) {
          var updatedData = {
            verticalKey: this.verticalKey,
            result: data
          };
          return _get(_getPrototypeOf(AccordionCardComponent.prototype), "addChild", this).call(this, updatedData, type, _objectSpread({
            callsToAction: this._config.callsToAction,
            _ctaModifiers: ['AccordionCard'],
            isUniversal: this._config.isUniversal
          }, opts));
        }

        return _get(_getPrototypeOf(AccordionCardComponent.prototype), "addChild", this).call(this, data, type, opts);
      }
    }], [{
      key: "defaultTemplateName",
      value: function defaultTemplateName() {
        return cardTemplates.Accordion;
      }
    }, {
      key: "areDuplicateNamesAllowed",
      value: function areDuplicateNamesAllowed() {
        return true;
      }
    }, {
      key: "type",
      get: function get() {
        return cardTypes.Accordion;
      }
    }]);

    return AccordionCardComponent;
  }(Component);

  var LegacyCardConfig = function LegacyCardConfig() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, LegacyCardConfig);

    Object.assign(this, config);
    var data = config.data || {};
    /**
     * The result data
     * @type {Result}
     */

    var result = data.result || {};
    /**
     * The raw profile data
     * @type {Object}
     */

    var rawResult = result._raw || {};
    /**
     * The dataMappings attribute of the config
     * is either a function that returns additional config for
     * a card or an object that is the additional config.
     */

    Object.assign(this, CardComponent.applyDataMappings(rawResult, config.dataMappings || {}));
    /**
     * The result data
     * @type {Result}
     */

    this.result = config.data || {};
    /**
     * Title for the card
     * @type {string}
     */

    this.title = this.title || result.title || rawResult.name || '';
    /**
     * Details for the card
     * @type {string}
     */

    this.details = this.details === null ? null : this.details || result.details || rawResult.description || '';
    /**
     * Url when you click the title
     * @type {string}
     */

    this.url = this.url === null ? '' : this.url || result.link || rawResult.website;
    /**
     * The target attribute for the title link.
     * @type {string}
     */

    this.target = this.target;
    /**
     * Image url to display
     * @type {string}
     */

    this.image = this.image;
    /**
     * Subtitle
     * @type {string}
     */

    this.subtitle = this.subtitle;
    /**
     * Either a function that spits out an array of CTA config objects or an array of CTA config objects
     * or api fieldnames
     * @type {Function|Array<Object|string>}
     */

    this.callsToAction = this.callsToAction || [];
    /**
     * Whether to show the ordinal of the card in the results.
     * @type {boolean}
     */

    this.showOrdinal = this.showOrdinal || false;
    /**
     * Whether this card is part of a universal search.
     * @type {boolean}
     */

    this.isUniversal = this.isUniversal || false;
    /**
     * The index of the card.
     * @type {number}
     */

    this._index = config._index || 0;
  };
  /**
   * Card components expect to receive a data config option, containing data regarding entity result
   * each card is assigned to, including all field data in data._raw.
   */


  var LegacyCardComponent =
  /*#__PURE__*/
  function (_Component) {
    _inherits(LegacyCardComponent, _Component);

    function LegacyCardComponent() {
      var _this;

      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var systemConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      _classCallCheck(this, LegacyCardComponent);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(LegacyCardComponent).call(this, new LegacyCardConfig(config), systemConfig));
      /**
       * @type {Object}
       */

      var data = config.data || {};
      /**
       * Vertical key for the search.
       * @type {string}
       */

      _this.verticalKey = data.verticalKey;
      /**
       * The result data
       * @type {Result}
       */

      _this.result = data.result || {};
      return _this;
    }

    _createClass(LegacyCardComponent, [{
      key: "setState",
      value: function setState(data) {
        return _get(_getPrototypeOf(LegacyCardComponent.prototype), "setState", this).call(this, _objectSpread({}, data, {
          eventOptions: this._legacyEventOptions(this.result._raw.id, this.result.link),
          result: this.result,
          hasCTAs: CTACollectionComponent.hasCTAs(this.result._raw, this._config.callsToAction),
          entityId: this.result._raw.id,
          verticalKey: this.verticalKey
        }));
      }
    }, {
      key: "_legacyEventOptions",
      value: function _legacyEventOptions(entityId, url) {
        var options = {
          verticalConfigId: this.verticalKey,
          searcher: this._config.isUniversal ? 'UNIVERSAL' : 'VERTICAL'
        };

        if (entityId) {
          options.entityId = entityId;
        } else {
          options.url = url;
        }

        return JSON.stringify(options);
      }
    }, {
      key: "addChild",
      value: function addChild(data, type, opts) {
        if (type === CTACollectionComponent.type) {
          var updatedData = {
            verticalKey: this.verticalKey,
            result: data
          };
          return _get(_getPrototypeOf(LegacyCardComponent.prototype), "addChild", this).call(this, updatedData, type, _objectSpread({
            callsToAction: this._config.callsToAction,
            isUniversal: this._config.isUniversal,
            _ctaModifiers: ['LegacyCard'],
            includeLegacyClasses: true
          }, opts));
        }

        return _get(_getPrototypeOf(LegacyCardComponent.prototype), "addChild", this).call(this, data, type, opts);
      }
    }], [{
      key: "defaultTemplateName",
      value: function defaultTemplateName() {
        return cardTemplates.Legacy;
      }
    }, {
      key: "areDuplicateNamesAllowed",
      value: function areDuplicateNamesAllowed() {
        return true;
      }
    }, {
      key: "type",
      get: function get() {
        return cardTypes.Legacy;
      }
    }]);

    return LegacyCardComponent;
  }(Component);

  /**
   * Configurable options for the component
   * @type {Object}
   */

  var DEFAULT_CONFIG$5 = {
    /**
     * The entity identifier that the question is associated with.
     * This is typically an organization object
     * @type {number}
     */
    'entityId': null,

    /**
     * The main CSS selector used to reference the form for the component.
     * @type {string} CSS selector
     */
    'formSelector': 'form',

    /**
     * An optional label to use for the e-mail address input
     * @type {string}
     */
    'emailLabel': 'Email',

    /**
     * An optional label to use for the name input
     * @type {string}
     */
    'nameLabel': 'Name',

    /**
     * An optional label to use for the question
     * @type {string}
     */
    'questionLabel': 'Question',

    /**
     * An optional label to use for the Privacy Policy
     * @type {string}
     */
    'privacyPolicyText': 'By submitting my email address, I consent to being contacted via email at the address provided.',

    /**
     * The label to use for the Submit button
     * @type {string}
     */
    'buttonLabel': 'Submit',

    /**
     * The title to display in the title bar
     * @type {string}
     */
    'sectionTitle': 'Ask a Question',

    /**
     * The description to display in the title bar
     * @type {string}
     */
    'teaser': 'Can’t find what you\'re looking for? Ask a question below.',

    /**
     * The name of the icon to use in the title bar
     * @type {string}
     */
    'sectionTitleIconName': 'support',

    /**
     * The text to display in the feedback form ahead of the Question input
     * @type {string}
     */
    'description': 'Enter your question and contact information, and we\'ll get back to you with a response shortly.',

    /**
     * The placeholder text for required inputs
     * @type {string}
     */
    'requiredInputPlaceholder': '(required)',

    /**
     * The placeholder text for the question text area
     * @type {string}
     */
    'questionInputPlaceholder': 'Enter your question here',

    /**
     * The confirmation text to display after successfully submitting feedback
     * @type {string}
     */
    'questionSubmissionConfirmationText': 'Thank you for your question!',

    /**
     * The default privacy policy url label
     * @type {string}
    */
    'privacyPolicyUrlLabel': 'Learn more here.',

    /**
     * The default privacy policy url
     * @type {string}
     */
    'privacyPolicyUrl': '',

    /**
     * The default privacy policy error text, shown when the user does not agree
     * @type {string}
     */
    'privacyPolicyErrorText': '* You must agree to the privacy policy to submit a question.',

    /**
     * The default email format error text, shown when the user submits an invalid email
     * @type {string}
     */
    'emailFormatErrorText': '* Please enter a valid email address.',

    /**
     * The default network error text, shown when there is an issue with the QA Submission
     * request.
     * @type {string}
     */
    'networkErrorText': 'We\'re sorry, an error occurred.',

    /**
     * Whether or not this component is expanded by default.
     * @type {boolean}
     */
    'expanded': true
  };
  /**
   * QuestionSubmissionComponent is a component that creates a form
   * thats displayed whenever a query is run. It enables the user
   * to submit questions that they cant find the answer for.
   */

  var QuestionSubmissionComponent =
  /*#__PURE__*/
  function (_Component) {
    _inherits(QuestionSubmissionComponent, _Component);

    function QuestionSubmissionComponent() {
      var _this;

      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var systemConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      _classCallCheck(this, QuestionSubmissionComponent);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(QuestionSubmissionComponent).call(this, Object.assign({}, DEFAULT_CONFIG$5, config), systemConfig));
      /**
       * Reference to the storage model
       * @type {string}
       */

      _this.moduleId = StorageKeys.QUESTION_SUBMISSION;
      /**
       * Reference to the locale as set in the global config
       * @type {string}
       */

      _this.locale = _this.core.globalStorage.getState(StorageKeys.LOCALE);
      /**
       * NOTE(billy) if this is a pattern we want to follow for configuration
       * we should bake it into the core class.
       */

      _this.validateConfig();
      /**
       * The QuestionSubmission component should be rendered only once a search has completed. If the
       * search results are still loading, the component should not be displayed.
       */


      var onResultsUpdate = function onResultsUpdate(results) {
        if (results.searchState !== SearchStates.SEARCH_LOADING) {
          var questionText = _this.core.globalStorage.getState(StorageKeys.QUERY);

          _this.setState(new QuestionSubmission({
            questionText: questionText,
            expanded: _this._config.expanded
          }));
        } else {
          _this.unMount();
        }
      };

      _this.core.globalStorage.on('update', StorageKeys.VERTICAL_RESULTS, onResultsUpdate);

      _this.core.globalStorage.on('update', StorageKeys.UNIVERSAL_RESULTS, onResultsUpdate);

      return _this;
    }
    /**
     * The template to render
     * @returns {string}
     * @override
     */


    _createClass(QuestionSubmissionComponent, [{
      key: "validateConfig",

      /**
       * validationConfig contains a bunch of rules
       * that are used to validate aginst configuration provided by the user
       */
      value: function validateConfig() {
        if (this._config.entityId === null || this._config.entityId === undefined) {
          throw new AnswersComponentError('`entityId` is a required configuration option for Question Submission', 'QuestionSubmission');
        }
      }
    }, {
      key: "beforeMount",
      value: function beforeMount() {
        // Avoid mounting the component if theres no data
        // Note, 1 because `config` is always part of the state.
        return Object.keys(this.getState()).length > 1;
      }
    }, {
      key: "onMount",
      value: function onMount() {
        var triggerEl = DOM.query(this._container, '.js-content-visibility-toggle');

        if (triggerEl !== null) {
          this.bindFormToggle(triggerEl);
        }

        var formEl = DOM.query(this._container, this._config.formSelector);

        if (formEl === null) {
          return;
        }

        this.bindFormFocus(formEl);
        this.bindFormSubmit(formEl);
      }
      /**
       * bindFormFocus will wire up the DOM focus event to serverside reporting
       * @param {HTMLElement} formEl
       */

    }, {
      key: "bindFormFocus",
      value: function bindFormFocus(formEl) {
        var _this2 = this;

        if (this.analyticsReporter === null) {
          return;
        }

        var questionText = DOM.query(formEl, '.js-question-text');
        DOM.on(questionText, 'focus', function () {
          _this2.analyticsReporter.report(_this2.getAnalyticsEvent('QUESTION_FOCUS'));
        });
      }
      /**
       * bindFormSubmit handles submitting the question to the server,
       * and submits an event to serverside reporting
       * @param {HTMLElement} formEl
       */

    }, {
      key: "bindFormSubmit",
      value: function bindFormSubmit(formEl) {
        var _this3 = this;

        DOM.on(formEl, 'submit', function (e) {
          e.preventDefault();

          _this3.analyticsReporter.report(_this3.getAnalyticsEvent('QUESTION_SUBMIT')); // TODO(billy) we probably want to disable the form from being submitted twice


          var errors = _this3.validate(formEl);

          var formData = _this3.parse(formEl);

          if (Object.keys(errors).length) {
            return _this3.setState(new QuestionSubmission(formData, errors));
          }

          _this3.core.submitQuestion({
            'entityId': _this3._config.entityId,
            'questionLanguage': _this3.locale,
            'site': 'FIRSTPARTY',
            'name': formData.name,
            'email': formData.email,
            'questionText': formData.questionText,
            'questionDescription': formData.questionDescription
          })["catch"](function (error) {
            _this3.setState(new QuestionSubmission(formData, {
              'network': 'We\'re sorry, an error occurred.'
            }));

            throw error;
          });
        });
      }
      /**
       * bindFormToggle handles expanding and mimimizing the component's form.
       * @param {HTMLElement} triggerEl
       */

    }, {
      key: "bindFormToggle",
      value: function bindFormToggle(triggerEl) {
        var _this4 = this;

        DOM.on(triggerEl, 'click', function (e) {
          var formData = _this4.getState();

          _this4.setState(new QuestionSubmission(_objectSpread({}, formData, {
            'expanded': !formData.questionExpanded,
            'submitted': formData.questionSubmitted
          }), formData.errors));
        });
      }
      /**
       * Takes the form, and builds a object that represents the input names
       * and text fields.
       * @param {HTMLElement} formEl
       * @returns {object}
       */

    }, {
      key: "parse",
      value: function parse(formEl) {
        var inputFields = DOM.queryAll(formEl, '.js-question-field');

        if (!inputFields || inputFields.length === 0) {
          return {};
        }

        var obj = {};

        for (var i = 0; i < inputFields.length; i++) {
          var val = inputFields[i].value;

          if (inputFields[i].type === 'checkbox') {
            val = inputFields[i].checked;
          }

          obj[inputFields[i].name] = val;
        }

        return obj;
      }
      /**
       * Validates the fields for correct formatting
       * @param {HTMLElement} formEl
       * @returns {Object} errors object if any errors found
       */

    }, {
      key: "validate",
      value: function validate(formEl) {
        var errors = {};
        var fields = DOM.queryAll(formEl, '.js-question-field');

        for (var i = 0; i < fields.length; i++) {
          if (!fields[i].checkValidity()) {
            if (i === 0) {
              // set focus state on first error
              fields[i].focus();
            }

            switch (fields[i].name) {
              case 'email':
                errors['emailError'] = true;

                if (!fields[i].validity.valueMissing) {
                  errors['emailErrorText'] = this._config.emailFormatErrorText;
                }

                break;

              case 'name':
                errors['nameError'] = true;
                break;

              case 'privacyPolicy':
                errors['privacyPolicyErrorText'] = this._config.privacyPolicyErrorText;
                errors['privacyPolicyError'] = true;
                break;

              case 'questionText':
                errors['questionTextError'] = true;
                break;
            }
          }
        }

        return errors;
      }
      /**
       * Returns an options object describing the context of a reportable event
       */

    }, {
      key: "getAnalyticsEvent",
      value: function getAnalyticsEvent(eventType) {
        var analyticsEvent = new AnalyticsEvent(eventType);
        analyticsEvent.addOptions({
          verticalConfigId: this._verticalKey,
          searcher: this._verticalKey ? 'VERTICAL' : 'UNIVERSAL'
        });
        return analyticsEvent;
      }
    }], [{
      key: "defaultTemplateName",
      value: function defaultTemplateName(config) {
        return 'questions/questionsubmission';
      }
      /**
       * The public interface alias for the component
       * @returns {string}
       * @override
       */

    }, {
      key: "type",
      get: function get() {
        return 'QASubmission';
      }
    }]);

    return QuestionSubmissionComponent;
  }(Component);

  var IconComponent =
  /*#__PURE__*/
  function (_Component) {
    _inherits(IconComponent, _Component);

    /**
     * IconComponent
     * @param opts
     * @param opts.iconName {string}
     * @param opts.iconUrl {string}
     */
    function IconComponent() {
      var _this;

      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var systemOpts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      _classCallCheck(this, IconComponent);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(IconComponent).call(this, opts, systemOpts));
      /**
       * name of an icon from the default icon set
       * @type {string}
       */

      _this.iconName = opts.iconName || 'default';
      /**
       * the url to a custom image icon
       * @type {null}
       */

      _this.iconUrl = opts.iconUrl || null;
      /**
       * An additional string to append to the icon's css class. Multiple
       * classes should be space delimited.
       */

      _this.classNames = opts.classNames || null;
      /**
       * A unique id to pass to the icon.
       * @type {Object}
       */

      _this.complexContentsParams = opts.complexContentsParams || {};
      return _this;
    }

    _createClass(IconComponent, [{
      key: "setState",

      /**
       * overrides default functionality to provide name and markup
       * @param data
       * @returns {IconComponent}
       */
      value: function setState(data) {
        return _get(_getPrototypeOf(IconComponent.prototype), "setState", this).call(this, Object.assign(data, {
          iconUrl: this.iconUrl,
          iconName: this.iconName,
          name: this.iconName ? this.iconName : 'custom',
          classNames: this.classNames,
          complexContentsParams: this.complexContentsParams
        }));
      }
    }], [{
      key: "defaultTemplateName",

      /**
       * The template to render
       * @returns {string}
       * @override
       */
      value: function defaultTemplateName(config) {
        return 'icons/icon';
      }
      /**
       * allowing duplicates
       * @returns {boolean}
       * @override
       */

    }, {
      key: "areDuplicateNamesAllowed",
      value: function areDuplicateNamesAllowed() {
        return true;
      }
    }, {
      key: "type",
      get: function get() {
        return 'IconComponent';
      }
    }]);

    return IconComponent;
  }(Component);

  var CTAConfig = function CTAConfig() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, CTAConfig);

    Object.assign(this, config);
    /**
     * Label below the CTA icon
     * @type {string}
     */

    this.label = config.label;
    /**
     * CTA icon, maps to a set of icons.
     * @type {string}
     */

    this.icon = config.icon;
    /**
     * Url to custom icon, has priority over icon.
     * @type {string}
     */

    this.iconUrl = config.iconUrl;
    /**
     * Whether the DOM should include legacy class names
     * @type {boolean}
     */

    this.includeLegacyClasses = config.includeLegacyClasses || false;
    /**
     * Click through url for the icon and label
     * @type {string}
     */

    this.url = config.url;
    /**
     * Analytics event that should fire:
     * @type {string}
     */

    this.analyticsEventType = config.analytics || config.eventType || 'CTA_CLICK';
    /**
     * The target attribute for the CTA link.
     * @type {boolean}
     */

    this.target = config.target || '_blank';
    /**
     * The eventOptions needed for the event to fire, passed as a string or Object
     * from config.dataMappings || {}.
     * @type {Object}
     */

    if (typeof config.eventOptions === 'string') {
      this.eventOptions = JSON.parse(config.eventOptions);
    }

    this.eventOptions = this.eventOptions;
    /**
     * Additional css className modifiers for the cta
     * @type {string}
     */

    this._ctaModifiers = config._ctaModifiers;
    /**
     * Whether the cta is the only one in its CTACollectionComponent
     * @type {boolean}
     */

    this._isSolo = config._isSolo || false;
  };

  var CTAComponent =
  /*#__PURE__*/
  function (_Component) {
    _inherits(CTAComponent, _Component);

    function CTAComponent() {
      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var systemConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      _classCallCheck(this, CTAComponent);

      return _possibleConstructorReturn(this, _getPrototypeOf(CTAComponent).call(this, new CTAConfig(config), systemConfig));
    }

    _createClass(CTAComponent, [{
      key: "onMount",
      value: function onMount() {
        var _this = this;

        var el = DOM.query(this._container, ".js-yxt-CTA");

        if (el && this._config.eventOptions) {
          DOM.on(el, 'click', function () {
            return _this.reportAnalyticsEvent();
          });
        }
      }
    }, {
      key: "setState",
      value: function setState(data) {
        return _get(_getPrototypeOf(CTAComponent.prototype), "setState", this).call(this, _objectSpread({}, data, {
          hasIcon: this._config.icon || this._config.iconUrl
        }));
      }
    }, {
      key: "reportAnalyticsEvent",
      value: function reportAnalyticsEvent() {
        var analyticsEvent = new AnalyticsEvent(this._config.analyticsEventType);
        analyticsEvent.addOptions(this._config.eventOptions);
        this.analyticsReporter.report(analyticsEvent);
      }
    }], [{
      key: "defaultTemplateName",
      value: function defaultTemplateName(config) {
        return 'ctas/cta';
      }
    }, {
      key: "type",
      get: function get() {
        return 'CTA';
      }
    }]);

    return CTAComponent;
  }(Component);

  /** @module */
  var COMPONENT_CLASS_LIST = [// Core Component
  Component, // Navigation Components
  NavigationComponent, // Search Components
  SearchComponent, FilterSearchComponent, AutoCompleteComponent, SpellCheckComponent, LocationBiasComponent, // Filter Components
  FilterBoxComponent, FilterOptionsComponent, RangeFilterComponent, DateRangeFilterComponent, FacetsComponent, GeoLocationComponent, SortOptionsComponent, // Results Components
  DirectAnswerComponent, UniversalResultsComponent, VerticalResultsComponent, PaginationComponent, AccordionResultsComponent, MapComponent, AlternativeVerticalsComponent, ResultsHeaderComponent, // Card Components
  CardComponent, StandardCardComponent, AccordionCardComponent, LegacyCardComponent, // Questions Components
  QuestionSubmissionComponent, // Helper Components
  IconComponent, CTAComponent, CTACollectionComponent];
  /**
   * The component registry is a map that contains
   * all available component classes used for creation or extension.
   * Each component class has a unique type, which is used as the key for the registry
   * @type {Object.<string, Component>}
   */

  var COMPONENT_REGISTRY = COMPONENT_CLASS_LIST.reduce(function (registry, clazz) {
    registry[clazz.type] = clazz;
    return registry;
  }, {});

  /**
   * ComponentManager is a Singletone that contains both an internal registry of
   * eligible components to be created, as well as keeps track of the current
   * instantiated and active components.
   *
   * ALL components should be constructed using the {ComponentManager} via its `create` method.
   */

  var ComponentManager =
  /*#__PURE__*/
  function () {
    function ComponentManager() {
      _classCallCheck(this, ComponentManager);

      /**
       * The active components is an internal container to keep track
       * of all of the components that have been constructed
       */
      this._activeComponents = [];
      /**
       * A local reference to the core library dependency
       *
       * The Core contains both the storage AND services that are needed for performing operations
       * like search and auto complete.
       *
       * The storage is the source of truth for the state of ALL components.
       * Whenever the storage is updated, the state gets pushed down to the necessary components.
       * @type {Core}
       */

      this._core = null;
      /**
       * The primary renderer to use for all components
       * @type {HandlebarsRenderer}
       */

      this._renderer = null;
      /**
       * A local reference to the analytics reporter dependency
       */

      this._analyticsReporter = null;
    }

    _createClass(ComponentManager, [{
      key: "setRenderer",
      value: function setRenderer(renderer) {
        this._renderer = renderer;
        return this;
      }
    }, {
      key: "setCore",
      value: function setCore(core) {
        this._core = core;
        return this;
      }
    }, {
      key: "setAnalyticsReporter",
      value: function setAnalyticsReporter(reporter) {
        this._analyticsReporter = reporter;
        return this;
      }
      /**
       * registers a component to be eligible for creation and override.
       * @param {Component} The Component Class to register
       */

    }, {
      key: "register",
      value: function register(componentClazz) {
        COMPONENT_REGISTRY[componentClazz.type] = componentClazz;
        return this;
      }
      /**
       * Returns components with names similar to the passed in component class.
       * @param {string} componentType
       */

    }, {
      key: "getSimilarComponents",
      value: function getSimilarComponents(componentType) {
        var similarComponents = Object.keys(COMPONENT_REGISTRY).filter(function (type) {
          return type.startsWith(componentType.substring(0, 2));
        });

        if (similarComponents.length === 0) {
          similarComponents = Object.keys(COMPONENT_REGISTRY);
        }

        return similarComponents;
      }
      /**
       * create is the entry point for constructing any and all components.
       * It will instantiate a new instance of the component, and both apply
       * initial state from the storage and bind it to the storage for updates.
       * @param {string} componentType The component type to create
       * @param {Object} opts The options to pipe to the construction of the component
       */

    }, {
      key: "create",
      value: function create(componentType, opts) {
        // Every component needs local access to the component manager
        // because sometimes components have subcomponents that need to be
        // constructed during creation
        var systemOpts = {
          core: this._core,
          renderer: this._renderer,
          analyticsReporter: this._analyticsReporter,
          componentManager: this
        };
        var componentClass = COMPONENT_REGISTRY[componentType];

        if (!componentClass) {
          throw new AnswersComponentError("Component type ".concat(componentType, " is not recognized as a valid component.") + " You might have meant ".concat(this.getSimilarComponents(componentType).join(', '), "?"));
        }

        if (!componentClass.areDuplicateNamesAllowed() && this._activeComponents.some(function (c) {
          return c.name === opts.name;
        })) {
          throw new AnswersComponentError("Another component with name ".concat(opts.name, " already exists"), componentType);
        }

        var config = _objectSpread({
          isTwin: this._activeComponents.some(function (component) {
            return component.constructor.type === componentType;
          })
        }, opts); // Instantiate our new component and keep track of it


        var component = new COMPONENT_REGISTRY[componentType](config, systemOpts).init(config);

        this._activeComponents.push(component); // If there is a global storage to power state, apply the state
        // from the storage to the component, and then bind the component
        // state to the storage via its updates


        if (this._core && this._core.globalStorage !== null) {
          if (component.moduleId === undefined || component.moduleId === null) {
            return component;
          }

          this._core.globalStorage.on('update', component.moduleId, function (data) {
            component.setState(data);
          });
        }

        return component;
      }
      /**
       * Remove the provided component from the list of active components and remove
       * the associated storage event listener
       * @param {Component} component The component to remove
       */

    }, {
      key: "remove",
      value: function remove(component) {
        this._core.globalStorage.off('update', component.moduleId);

        var index = this._activeComponents.findIndex(function (c) {
          return c.name === component.name;
        });

        this._activeComponents.splice(index, 1);
      }
      /**
       * Remove the component with the given name
       * @param {string} name The name of the compnent to remove
       */

    }, {
      key: "removeByName",
      value: function removeByName(name) {
        var component = this._activeComponents.find(function (c) {
          return c.name === name;
        });

        component.remove();
        DOM.empty(component._container);
      }
    }, {
      key: "getActiveComponent",
      value: function getActiveComponent(type) {
        return this._activeComponents.find(function (c) {
          return c.constructor.type === type;
        });
      }
    }], [{
      key: "getInstance",
      value: function getInstance() {
        if (!this.instance) {
          this.instance = new ComponentManager();
        }

        return this.instance;
      }
    }]);

    return ComponentManager;
  }();

  /** @module VerticalPagesConfig */
  var VerticalPageConfig =
  /*#__PURE__*/
  function () {
    function VerticalPageConfig() {
      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      _classCallCheck(this, VerticalPageConfig);

      /**
       * The name of the tab that is exposed for the link
       * @type {string}
       */
      this.label = config.label || null;
      /**
       * The complete URL, including the params
       * @type {string}
       */

      this.url = config.url || null;
      /**
       * The serverside vertical config id that this is referenced to.
       * By providing this, enables dynamic sorting based on results.
       * @type {string}
       */

      this.verticalKey = config.verticalKey || null;
      /**
       * Determines whether to show this tab in the navigation component
       * @type {boolean}
       */

      this.hideInNavigation = config.hideInNavigation || false;
      /**
       * Determines whether to show this tab first in the order
       * @type {boolean}
       */

      this.isFirst = config.isFirst || false;
      /**
       * Determines whether or not to apply a special class to the
       * markup to determine if it's an active tab
       * @type {boolean}
       */

      this.isActive = config.isActive || false;
      /**
       * URL of an icon
       * @type {string}
       */

      this.iconUrl = config.iconUrl;
      /**
       * name of an icon from the default icon set
       * @type {string}
       */

      this.icon = config.icon;
      Object.freeze(this);
    }

    _createClass(VerticalPageConfig, [{
      key: "validate",
      value: function validate() {}
    }]);

    return VerticalPageConfig;
  }();

  var VerticalPagesConfig =
  /*#__PURE__*/
  function () {
    function VerticalPagesConfig() {
      var pages = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

      _classCallCheck(this, VerticalPagesConfig);

      this.verticalPagesConfig = VerticalPagesConfig.from(pages);
    }
    /**
     * Using a getter that copies the data instead of providing a reference prevents it from being mutated.
     * This is important for global configuration.
     * @returns {Array<VerticalPageConfig>}
     */


    _createClass(VerticalPagesConfig, [{
      key: "get",
      value: function get() {
        return this.verticalPagesConfig.map(function (page) {
          return _objectSpread({}, page);
        });
      }
    }], [{
      key: "from",
      value: function from(pages) {
        return pages.map(function (page) {
          return new VerticalPageConfig(page);
        });
      }
    }]);

    return VerticalPagesConfig;
  }();

  /**
   * This class provides access to the Answers Status page. This page indicates
   * if the front-end for a particular experience should be temporarily disabled
   * due to back-end issues.
   */

  var MasterSwitchApi =
  /*#__PURE__*/
  function () {
    function MasterSwitchApi(requestConfig, globalStorage) {
      _classCallCheck(this, MasterSwitchApi);

      this._request = new ApiRequest(requestConfig, globalStorage);
    }
    /**
     * Checks if the front-end for the given experience should be temporarily disabled.
     * Note that this check errs on the side of enabling the front-end. If there are any
     * issues with the resultant network call, those failures are caught. In this failure
     * case, the assumption is that things are enabled.
     *
     * @returns {Promise<boolean>} A Promise containing a boolean indicating if the front-end
     *                             should be disabled.
     */


    _createClass(MasterSwitchApi, [{
      key: "isDisabled",
      value: function isDisabled() {
        var _this = this;

        return new Promise(function (resolve, reject) {
          _this._request.get({
            credentials: 'omit'
          }).then(function (response) {
            return response.json();
          }).then(function (status) {
            return status && status.disabled;
          }).then(function (isDisabled) {
            return resolve(!!isDisabled);
          })["catch"](function () {
            return resolve(false);
          });
        });
      }
      /**
       * Creates a new {@link MasterSwitchApi} from the provided parameters.
       *
       * @param {string} apiKey The apiKey of the experience.
       * @param {string} experienceKey The identifier of the experience.
       * @param {GlobalStorage} globalStorage The {@link GlobalStorage} instance.
       * @returns {MasterSwitchApi} The new {@link MasterSwitchApi} instance.
       */

    }], [{
      key: "from",
      value: function from(apiKey, experienceKey, globalStorage) {
        var requestConfig = {
          apiKey: apiKey,
          baseUrl: 'https://answersstatus.pagescdn.com/',
          endpoint: "".concat(apiKey, "/").concat(experienceKey, "/status.json")
        };
        return new MasterSwitchApi(requestConfig, globalStorage);
      }
    }]);

    return MasterSwitchApi;
  }();

  /** @typedef {import('./core/services/searchservice').default} SearchService */

  /** @typedef {import('./core/services/autocompleteservice').default} AutoCompleteService */

  /** @typedef {import('./core/services/questionanswerservice').default} QuestionAnswerService */

  /** @typedef {import('./core/services/errorreporterservice').default} ErrorReporterService */

  /** @typedef {import('./core/services/analyticsreporterservice').default} AnalyticsReporterService */

  /**
   * @typedef Services
   * @property {SearchService} searchService
   * @property {AutoCompleteService} autoCompleteService
   * @property {QuestionAnswerService} questionAnswerService
   * @property {ErrorReporterService} errorReporterService
   */

  var DEFAULTS = {
    locale: 'en'
  };
  /**
   * The main Answers interface
   */

  var Answers =
  /*#__PURE__*/
  function () {
    function Answers() {
      _classCallCheck(this, Answers);

      if (!Answers.setInstance(this)) {
        return Answers.getInstance();
      }
      /**
       * A reference to the Component base class for custom
       * components to extend
       */


      this.Component = Component;
      /**
       * A reference to the AnalyticsEvent base class for reporting
       * custom analytics
       */

      this.AnalyticsEvent = AnalyticsEvent;
      /**
       * A reference of the renderer to use for the components
       * This is provided during initialization.
       * @type {Renderer}
       */

      this.renderer = new Renderers.Handlebars();
      /**
       * A reference to the formatRichText function.
       * @type {Function}
       */

      this.formatRichText = function (markdown) {
        if (typeof markdown !== 'string') {
          throw new AnswersCoreError("Rich text \"".concat(markdown, "\" needs to be a string. Currently is a ").concat(_typeof(markdown)));
        }

        return rtfConverter_min.toHTML(markdown);
      };
      /**
       * A local reference to the component manager
       * @type {ComponentManager}
       */


      this.components = ComponentManager.getInstance();
      /**
       * A local reference to the core api
       * @type {Core}
       */

      this.core = null;
      /**
       * A callback function to invoke once the library is ready.
       * Typically fired after templates are fetched from server for rendering.
       */

      this._onReady = function () {};
      /**
       * @type {boolean}
       * @private
       */


      this._eligibleForAnalytics = false;
      /**
       * @type {Services}
       * @private
       */

      this._services = null;
      /**
       * @type {AnalyticsReporterService}
       * @private
       */

      this._analyticsReporterService = null;
    }

    _createClass(Answers, [{
      key: "init",

      /**
       * Initializes the SDK with the provided configuration. Note that before onReady
       * is ever called, a check to the relevant Answers Status page is made.
       *
       * @param {Object} config The Answers configuration.
       * @param {Object} statusPage An override for the baseUrl and endpoint of the
       *                            experience's Answers Status page.
       */
      value: function init(config, statusPage) {
        var _this = this;

        var parsedConfig = this.parseConfig(config);
        this.validateConfig(parsedConfig);
        parsedConfig.search = new SearchConfig(parsedConfig.search);
        parsedConfig.verticalPages = new VerticalPagesConfig(parsedConfig.verticalPages);
        var globalStorage = new GlobalStorage();
        var persistentStorage = new PersistentStorage({
          updateListener: parsedConfig.onStateChange,
          resetListener: function resetListener(data) {
            return globalStorage.setAll(data);
          }
        });
        globalStorage.setAll(persistentStorage.getAll());
        globalStorage.set(StorageKeys.SEARCH_CONFIG, parsedConfig.search);
        globalStorage.set(StorageKeys.VERTICAL_PAGES_CONFIG, parsedConfig.verticalPages);
        globalStorage.set(StorageKeys.LOCALE, parsedConfig.locale);
        globalStorage.set(StorageKeys.SESSIONS_OPT_IN, parsedConfig.sessionTrackingEnabled);
        parsedConfig.noResults && globalStorage.set(StorageKeys.NO_RESULTS_CONFIG, parsedConfig.noResults);
        var masterSwitchApi = statusPage ? new MasterSwitchApi(_objectSpread({
          apiKey: parsedConfig.apiKey
        }, statusPage), globalStorage) : MasterSwitchApi.from(parsedConfig.apiKey, parsedConfig.experienceKey, globalStorage);
        masterSwitchApi.isDisabled(parsedConfig.apiKey, parsedConfig.experienceKey).then(function (isDisabled) {
          return !isDisabled && _this._initInternal(parsedConfig, globalStorage, persistentStorage);
        })["catch"](function () {
          return _this._initInternal(parsedConfig, globalStorage, persistentStorage);
        });
      }
      /**
       * Initializes the AnalyticsReporter and Core. Also invokes the onReady function
       * provided in the parsed configuration.
       *
       * @param {Object} parsedConfig The parsed Answers configuration.
       * @param {GlobalStorage} globalStorage The {@link GlobalStorage} instance.
       * @param {PersistentStorage} persistentStorage The {@link PersistentStorage} instance.
       */

    }, {
      key: "_initInternal",
      value: function _initInternal(parsedConfig, globalStorage, persistentStorage) {
        var _this2 = this;

        this._services = parsedConfig.mock ? getMockServices() : getServices(parsedConfig, globalStorage);
        this._eligibleForAnalytics = parsedConfig.businessId != null; // TODO(amullings): Initialize with other services

        if (this._eligibleForAnalytics && parsedConfig.mock) {
          this._analyticsReporterService = new NoopAnalyticsReporter();
        } else if (this._eligibleForAnalytics) {
          this._analyticsReporterService = new AnalyticsReporter(parsedConfig.experienceKey, parsedConfig.experienceVersion, parsedConfig.businessId, parsedConfig.analyticsOptions, parsedConfig.environment); // listen to query id updates

          globalStorage.on('update', StorageKeys.QUERY_ID, function (id) {
            return _this2._analyticsReporterService.setQueryId(id);
          });
          this.components.setAnalyticsReporter(this._analyticsReporterService);
          initScrollListener(this._analyticsReporterService);
        }

        this.core = new Core({
          apiKey: parsedConfig.apiKey,
          globalStorage: globalStorage,
          persistentStorage: persistentStorage,
          experienceKey: parsedConfig.experienceKey,
          fieldFormatters: parsedConfig.fieldFormatters,
          experienceVersion: parsedConfig.experienceVersion,
          locale: parsedConfig.locale,
          searchService: this._services.searchService,
          autoCompleteService: this._services.autoCompleteService,
          questionAnswerService: this._services.questionAnswerService,
          analyticsReporter: this._analyticsReporterService,
          onVerticalSearch: parsedConfig.onVerticalSearch,
          onUniversalSearch: parsedConfig.onUniversalSearch
        });

        if (parsedConfig.onStateChange && typeof parsedConfig.onStateChange === 'function') {
          parsedConfig.onStateChange(persistentStorage.getAll(), window.location.search.substr(1));
        }

        this.components.setCore(this.core).setRenderer(this.renderer);

        this._setDefaultInitialSearch(parsedConfig.search);

        this._onReady = parsedConfig.onReady || function () {};

        if (parsedConfig.useTemplates === false || parsedConfig.templateBundle) {
          if (parsedConfig.templateBundle) {
            this.renderer.init(parsedConfig.templateBundle);
          }

          this._handlePonyfillCssVariables(parsedConfig.disableCssVariablesPonyfill, this._onReady.bind(this));

          return this;
        } // Templates are currently downloaded separately from the CORE and UI bundle.
        // Future enhancement is to ship the components with templates in a separate bundle.


        this.templates = new DefaultTemplatesLoader(function (templates) {
          _this2.renderer.init(templates);

          _this2._handlePonyfillCssVariables(parsedConfig.disableCssVariablesPonyfill, _this2._onReady.bind(_this2));
        });
        return this;
      }
      /**
       * Calls the CSS vars ponyfill, if opted-in, and invokes the callback
       * regardless of if there was an error/success. If opted-out, only invokes the callback.
       * @param {boolean} option to opt out of the css variables ponyfill
       * @param callback {Function} always called after function
       */

    }, {
      key: "_handlePonyfillCssVariables",
      value: function _handlePonyfillCssVariables(ponyfillDisabled, callback) {
        if (!ponyfillDisabled) {
          this.ponyfillCssVariables({
            onFinally: function onFinally() {
              callback();
            }
          });
        } else {
          callback();
        }
      }
    }, {
      key: "domReady",
      value: function domReady(cb) {
        DOM.onReady(cb);
      }
    }, {
      key: "onReady",
      value: function onReady(cb) {
        this._onReady = cb;
        return this;
      }
      /**
       * Parses the config provided by the user. In the parsed config, any options not supplied by the
       * user are given default values.
       * @param {Object} config The user supplied config.
       */

    }, {
      key: "parseConfig",
      value: function parseConfig(config) {
        var parsedConfig = Object.assign({}, DEFAULTS, config);
        var sessionTrackingEnabled = true;

        if (typeof config.sessionTrackingEnabled === 'boolean') {
          sessionTrackingEnabled = config.sessionTrackingEnabled;
        }

        parsedConfig.sessionTrackingEnabled = sessionTrackingEnabled;
        var sandboxPrefix = "".concat(SANDBOX, "-");
        parsedConfig.apiKey.includes(sandboxPrefix) ? parsedConfig.environment = SANDBOX : parsedConfig.environment = PRODUCTION;
        parsedConfig.apiKey = parsedConfig.apiKey.replace(sandboxPrefix, '');
        return parsedConfig;
      }
      /**
       * Validates the Answers config object to ensure things like api key and experience key are
       * properly set.
       * @param {Object} config The Answers config.
       */

    }, {
      key: "validateConfig",
      value: function validateConfig(config) {
        // TODO (tmeyer): Extract this method into it's own class. Investigate the use of JSON schema
        // to validate these configs.
        if (typeof config.apiKey !== 'string') {
          throw new Error('Missing required `apiKey`. Type must be {string}');
        }

        if (typeof config.experienceKey !== 'string') {
          throw new Error('Missing required `experienceKey`. Type must be {string}');
        }

        if (config.onVerticalSearch && typeof config.onVerticalSearch !== 'function') {
          throw new Error('onVerticalSearch must be a function. Current type is: ' + _typeof(config.onVerticalSearch));
        }

        if (config.onUniversalSearch && typeof config.onUniversalSearch !== 'function') {
          throw new Error('onUniversalSearch must be a function. Current type is: ' + _typeof(config.onUniversalSearch));
        }
      }
      /**
       * Register a custom component type so it can be created via
       * addComponent and used as a child component
       * @param {Component} componentClass
       */

    }, {
      key: "registerComponentType",
      value: function registerComponentType(componentClass) {
        this.components.register(componentClass);
      }
    }, {
      key: "addComponent",
      value: function addComponent(type, opts) {
        if (typeof opts === 'string') {
          opts = {
            container: opts
          };
        }

        try {
          this.components.create(type, opts).mount();
        } catch (e) {
          throw new AnswersComponentError('Failed to add component', type, e);
        }

        return this;
      }
      /**
       * Remove the component - and all of its children - with the given name
       * @param {string} name The name of the component to remove
       */

    }, {
      key: "removeComponent",
      value: function removeComponent(name) {
        this.components.removeByName(name);
      }
    }, {
      key: "createComponent",
      value: function createComponent(opts) {
        return this.components.create('Component', opts).mount();
      }
    }, {
      key: "registerHelper",
      value: function registerHelper(name, cb) {
        this.renderer.registerHelper(name, cb);
        return this;
      }
      /**
       * Opt in or out of convertion tracking analytics
       * @param {boolean} optIn
       */

    }, {
      key: "setConversionsOptIn",
      value: function setConversionsOptIn(optIn) {
        if (this._eligibleForAnalytics) {
          this._analyticsReporterService.setConversionTrackingEnabled(optIn);
        }
      }
      /**
       * Opt in or out of session cookies
       * @param {boolean} optIn
       */

    }, {
      key: "setSessionsOptIn",
      value: function setSessionsOptIn(optIn) {
        this.core.globalStorage.set(StorageKeys.SESSIONS_OPT_IN, optIn);
      }
      /**
       * Sets a search query on initialization for vertical searchers that have a
       * defaultInitialSearch provided, if the user hasn't already provided their
       * own via URL param.
       * @param {SearchConfig} searchConfig
       * @private
       */

    }, {
      key: "_setDefaultInitialSearch",
      value: function _setDefaultInitialSearch(searchConfig) {
        if (searchConfig.defaultInitialSearch == null || !searchConfig.verticalKey) {
          return;
        }

        var prepopulatedQuery = this.core.globalStorage.getState(StorageKeys.QUERY);

        if (prepopulatedQuery != null) {
          return;
        }

        this.core.globalStorage.set('queryTrigger', 'initialize');
        this.core.setQuery(searchConfig.defaultInitialSearch);
      }
      /*
       * Updates the css styles with new current variables. This is useful when the css
       * variables are updated dynamically (e.g. through js) or if the css variables are
       * added after the ANSWERS.init
       * @param {Object} config Additional config to pass to the ponyfill
       */

    }, {
      key: "ponyfillCssVariables",
      value: function ponyfillCssVariables() {
        var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        cssVars({
          onlyLegacy: true,
          onError: config.onError || function () {},
          onSuccess: config.onSuccess || function () {},
          onFinally: config.onFinally || function () {}
        });
      }
    }], [{
      key: "setInstance",
      value: function setInstance(instance) {
        if (!this.instance) {
          this.instance = instance;
          return true;
        }

        return false;
      }
    }, {
      key: "getInstance",
      value: function getInstance() {
        return this.instance;
      }
    }]);

    return Answers;
  }();
  /**
   * @param {Object} config
   * @param {GlobalStorage} globalStorage
   * @returns {Services}
   */


  function getServices(config, globalStorage) {
    return {
      searchService: new SearchApi({
        apiKey: config.apiKey,
        experienceKey: config.experienceKey,
        experienceVersion: config.experienceVersion,
        locale: config.locale,
        environment: config.environment
      }),
      autoCompleteService: new AutoCompleteApi({
        apiKey: config.apiKey,
        experienceKey: config.experienceKey,
        experienceVersion: config.experienceVersion,
        locale: config.locale,
        environment: config.environment
      }, globalStorage),
      questionAnswerService: new QuestionAnswerApi({
        apiKey: config.apiKey,
        environment: config.environment
      }, globalStorage),
      errorReporterService: new ErrorReporter({
        apiKey: config.apiKey,
        experienceKey: config.experienceKey,
        experienceVersion: config.experienceVersion,
        printVerbose: config.debug,
        sendToServer: !config.suppressErrorReports,
        environment: config.environment
      }, globalStorage)
    };
  }
  /**
   * @returns {Services}
   */


  function getMockServices() {
    return {
      searchService: new MockSearchService(),
      autoCompleteService: new MockAutoCompleteService(),
      questionAnswerService: new MockQuestionAnswerService(),
      errorReporterService: new ConsoleErrorReporter()
    };
  }
  /**
   * Initialize the scroll event listener to send analytics events
   * when the user scrolls to the bottom. Debounces scroll events so
   * they are processed after the user stops scrolling
   */


  function initScrollListener(reporter) {
    var DEBOUNCE_TIME = 100;
    var timeout = null;

    var sendEvent = function sendEvent() {
      if (window.innerHeight + window.pageYOffset >= document.body.scrollHeight) {
        var event = new AnalyticsEvent('SCROLL_TO_BOTTOM_OF_PAGE');

        if (reporter.getQueryId()) {
          reporter.report(event);
        }
      }
    };

    document.addEventListener('scroll', function () {
      clearTimeout(timeout);
      timeout = setTimeout(sendEvent, DEBOUNCE_TIME);
    });
  }

  var ANSWERS = new Answers();

  return ANSWERS;

}));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5zd2Vycy11bWQuanMiLCJzb3VyY2VzIjpbInNyYy9jb3JlL3N0b3JhZ2Uvc2VhcmNoc3RhdGVzLmpzIiwic3JjL2NvcmUvbW9kZWxzL3Jlc3VsdC5qcyIsInNyYy9jb3JlL21vZGVscy9oaWdobGlnaHRlZHZhbHVlLmpzIiwic3JjL2NvcmUvZXJyb3JzL2Vycm9ycy5qcyIsInNyYy9jb3JlL21vZGVscy9yZXN1bHRmYWN0b3J5LmpzIiwic3JjL2NvcmUvbW9kZWxzL3NlY3Rpb24uanMiLCJzcmMvY29yZS9tb2RlbHMvdW5pdmVyc2FscmVzdWx0cy5qcyIsInNyYy9jb3JlL21vZGVscy9kaXJlY3RhbnN3ZXIuanMiLCJzcmMvY29yZS9tb2RlbHMvbmF2aWdhdGlvbi5qcyIsInNyYy9jb3JlL21vZGVscy92ZXJ0aWNhbHJlc3VsdHMuanMiLCJzcmMvY29yZS9tb2RlbHMvc3BlbGxjaGVjay5qcyIsInNyYy9jb3JlL3N0b3JhZ2Uvc3RvcmFnZWtleXMuanMiLCJzcmMvY29yZS9tb2RlbHMvZHluYW1pY2ZpbHRlcnMuanMiLCJzcmMvY29yZS9tb2RlbHMvc2VhcmNoaW50ZW50cy5qcyIsInNyYy9jb3JlL21vZGVscy9sb2NhdGlvbmJpYXMuanMiLCJzcmMvY29yZS9tb2RlbHMvYWx0ZXJuYXRpdmV2ZXJ0aWNhbHMuanMiLCJzcmMvY29yZS9zdG9yYWdlL3Jlc3VsdHNjb250ZXh0LmpzIiwic3JjL2NvcmUvc2VhcmNoL3NlYXJjaGRhdGF0cmFuc2Zvcm1lci5qcyIsInNyYy9jb3JlL21vZGVscy9xdWVzdGlvbnN1Ym1pc3Npb24uanMiLCJzcmMvY29yZS9tb2RlbHMvZmlsdGVyLmpzIiwic3JjL2NvcmUvYW5hbHl0aWNzL2FuYWx5dGljc2V2ZW50LmpzIiwic3JjL2NvcmUvY29yZS5qcyIsIm5vZGVfbW9kdWxlcy9AeWV4dC9ydGYtY29udmVydGVyL2xpYi9ydGYtY29udmVydGVyLm1pbi5qcyIsInNyYy91aS9kb20vZG9tLmpzIiwic3JjL3VpL2RvbS9zZWFyY2hwYXJhbXMuanMiLCJzcmMvdWkvcmVuZGVyaW5nL3JlbmRlcmVyLmpzIiwic3JjL3VpL2ljb25zL2ljb24uanMiLCJzcmMvdWkvaWNvbnMvdGh1bWIuanMiLCJzcmMvdWkvaWNvbnMvcmVjZWlwdC5qcyIsInNyYy91aS9pY29ucy9wYW50aGVvbi5qcyIsInNyYy91aS9pY29ucy9taWMuanMiLCJzcmMvdWkvaWNvbnMvZGlyZWN0aW9ucy5qcyIsInNyYy91aS9pY29ucy9jYWxlbmRhci5qcyIsInNyYy91aS9pY29ucy9jYWxsb3V0LmpzIiwic3JjL3VpL2ljb25zL2luZm8uanMiLCJzcmMvdWkvaWNvbnMvYnJpZWZjYXNlLmpzIiwic3JjL3VpL2ljb25zL2thYm9iLmpzIiwic3JjL3VpL2ljb25zL3BlcnNvbi5qcyIsInNyYy91aS9pY29ucy9tYWduaWZ5aW5nX2dsYXNzLmpzIiwic3JjL3VpL2ljb25zL29mZmljZS5qcyIsInNyYy91aS9pY29ucy9saW5rLmpzIiwic3JjL3VpL2ljb25zL3dpbmRvdy5qcyIsInNyYy91aS9pY29ucy9waG9uZS5qcyIsInNyYy91aS9pY29ucy90YWcuanMiLCJzcmMvdWkvaWNvbnMvZG9jdW1lbnQuanMiLCJzcmMvdWkvaWNvbnMvY2hldnJvbi5qcyIsInNyYy91aS9pY29ucy9zdXBwb3J0LmpzIiwic3JjL3VpL2ljb25zL3lleHQuanMiLCJzcmMvdWkvaWNvbnMvcGluLmpzIiwic3JjL3VpL2ljb25zL2dlYXIuanMiLCJzcmMvdWkvaWNvbnMvbGlnaHRfYnVsYi5qcyIsInNyYy91aS9pY29ucy9zdGFyLmpzIiwic3JjL3VpL2ljb25zL2Nsb3NlLmpzIiwic3JjL3VpL2ljb25zL2VsZW1lbnRzLmpzIiwic3JjL3VpL2ljb25zL3lleHRfYW5pbWF0ZWRfcmV2ZXJzZS5qcyIsInNyYy91aS9pY29ucy95ZXh0X2FuaW1hdGVkX2ZvcndhcmQuanMiLCJzcmMvdWkvaWNvbnMvZW1haWwuanMiLCJzcmMvdWkvaWNvbnMvaW5kZXguanMiLCJzcmMvdWkvcmVuZGVyaW5nL2hhbmRsZWJhcnNyZW5kZXJlci5qcyIsInNyYy91aS9yZW5kZXJpbmcvY29uc3QuanMiLCJzcmMvY29yZS9jb25zdGFudHMuanMiLCJzcmMvdWkvcmVuZGVyaW5nL2RlZmF1bHR0ZW1wbGF0ZXNsb2FkZXIuanMiLCJzcmMvdWkvaW5kZXguanMiLCJzcmMvY29yZS9ldmVudGVtaXR0ZXIvZXZlbnRlbWl0dGVyLmpzIiwic3JjL3VpL2NvbXBvbmVudHMvc3RhdGUuanMiLCJub2RlX21vZHVsZXMvd2hhdHdnLWZldGNoL2ZldGNoLmpzIiwic3JjL2NvcmUvaHR0cC9odHRwcmVxdWVzdGVyLmpzIiwic3JjL2NvcmUvdXRpbHMvdXJsdXRpbHMuanMiLCJzcmMvY29yZS9odHRwL2FwaXJlcXVlc3QuanMiLCJzcmMvY29yZS9zZWFyY2gvc2VhcmNoYXBpLmpzIiwic3JjL2NvcmUvYW5hbHl0aWNzL2FuYWx5dGljc3JlcG9ydGVyLmpzIiwic3JjL2NvcmUvYW5hbHl0aWNzL25vb3BhbmFseXRpY3NyZXBvcnRlci5qcyIsInNyYy9jb3JlL3N0b3JhZ2UvbW9kdWxlZGF0YS5qcyIsInNyYy9jb3JlL3N0b3JhZ2UvZ2xvYmFsc3RvcmFnZS5qcyIsInNyYy9jb3JlL2luZGV4LmpzIiwic3JjL3VpL2NvbXBvbmVudHMvY29tcG9uZW50LmpzIiwic3JjL2NvcmUvZXJyb3JzL2Vycm9ycmVwb3J0ZXIuanMiLCJzcmMvY29yZS9lcnJvcnMvY29uc29sZWVycm9ycmVwb3J0ZXIuanMiLCJzcmMvdWkvc3RvcmFnZS9wZXJzaXN0ZW50c3RvcmFnZS5qcyIsInNyYy9jb3JlL21vZGVscy9zZWFyY2hjb25maWcuanMiLCJzcmMvY29yZS9tb2RlbHMvYXV0b2NvbXBsZXRlZGF0YS5qcyIsInNyYy9jb3JlL3NlYXJjaC9hdXRvY29tcGxldGVkYXRhdHJhbnNmb3JtZXIuanMiLCJzcmMvY29yZS9zZWFyY2gvYXV0b2NvbXBsZXRlYXBpLmpzIiwic3JjL2NvcmUvc2VhcmNoL21vY2thdXRvY29tcGxldGVzZXJ2aWNlLmpzIiwic3JjL2NvcmUvc2VhcmNoL3F1ZXN0aW9uYW5zd2VyYXBpLmpzIiwic3JjL2NvcmUvc2VhcmNoL21vY2txdWVzdGlvbmFuc3dlcnNlcnZpY2UuanMiLCJzcmMvY29yZS9zZWFyY2gvbW9ja3NlYXJjaHNlcnZpY2UuanMiLCJzcmMvdWkvY29tcG9uZW50cy9uYXZpZ2F0aW9uL25hdmlnYXRpb25jb21wb25lbnQuanMiLCJzcmMvdWkvY29tcG9uZW50cy9zZWFyY2gvc2VhcmNoY29tcG9uZW50LmpzIiwic3JjL3VpL3Rvb2xzL3NlYXJjaHBhcmFtc3BhcnNlci5qcyIsInNyYy91aS9jb21wb25lbnRzL3NlYXJjaC9maWx0ZXJzZWFyY2hjb21wb25lbnQuanMiLCJzcmMvdWkvY29tcG9uZW50cy9zZWFyY2gvYXV0b2NvbXBsZXRlY29tcG9uZW50LmpzIiwic3JjL3VpL2NvbXBvbmVudHMvc2VhcmNoL3NwZWxsY2hlY2tjb21wb25lbnQuanMiLCJzcmMvdWkvY29tcG9uZW50cy9zZWFyY2gvbG9jYXRpb25iaWFzY29tcG9uZW50LmpzIiwic3JjL2NvcmUvbW9kZWxzL2ZhY2V0LmpzIiwic3JjL3VpL2NvbXBvbmVudHMvZmlsdGVycy9maWx0ZXJib3hjb21wb25lbnQuanMiLCJzcmMvdWkvY29tcG9uZW50cy9maWx0ZXJzL2ZpbHRlcm9wdGlvbnNjb21wb25lbnQuanMiLCJzcmMvdWkvY29tcG9uZW50cy9maWx0ZXJzL3JhbmdlZmlsdGVyY29tcG9uZW50LmpzIiwic3JjL3VpL2NvbXBvbmVudHMvZmlsdGVycy9kYXRlcmFuZ2VmaWx0ZXJjb21wb25lbnQuanMiLCJzcmMvdWkvY29tcG9uZW50cy9maWx0ZXJzL2ZhY2V0c2NvbXBvbmVudC5qcyIsInNyYy91aS9jb21wb25lbnRzL2ZpbHRlcnMvZ2VvbG9jYXRpb25jb21wb25lbnQuanMiLCJzcmMvdWkvY29tcG9uZW50cy9maWx0ZXJzL3NvcnRvcHRpb25zY29tcG9uZW50LmpzIiwic3JjL3VpL2NvbXBvbmVudHMvcmVzdWx0cy9kaXJlY3RhbnN3ZXJjb21wb25lbnQuanMiLCJzcmMvY29yZS9tb2RlbHMvYWx0ZXJuYXRpdmV2ZXJ0aWNhbC5qcyIsInNyYy91aS9jb21wb25lbnRzL3Jlc3VsdHMvYWx0ZXJuYXRpdmV2ZXJ0aWNhbHNjb21wb25lbnQuanMiLCJzcmMvdWkvY29tcG9uZW50cy9tYXAvcHJvdmlkZXJzL21hcHByb3ZpZGVyLmpzIiwic3JjL3VpL2NvbXBvbmVudHMvbWFwL3Byb3ZpZGVycy9nb29nbGVtYXBwcm92aWRlci5qcyIsInNyYy91aS9jb21wb25lbnRzL21hcC9wcm92aWRlcnMvbWFwYm94bWFwcHJvdmlkZXIuanMiLCJzcmMvdWkvY29tcG9uZW50cy9tYXAvbWFwY29tcG9uZW50LmpzIiwic3JjL3VpL2NvbXBvbmVudHMvY2FyZHMvY29uc3RzLmpzIiwic3JjL3VpL2NvbXBvbmVudHMvY2FyZHMvY2FyZGNvbXBvbmVudC5qcyIsInNyYy91aS9jb21wb25lbnRzL3Jlc3VsdHMvcmVzdWx0c2hlYWRlcmNvbXBvbmVudC5qcyIsInNyYy91aS9jb21wb25lbnRzL3Jlc3VsdHMvdmVydGljYWxyZXN1bHRzY29tcG9uZW50LmpzIiwic3JjL3VpL2NvbXBvbmVudHMvcmVzdWx0cy9hY2NvcmRpb25yZXN1bHRzY29tcG9uZW50LmpzIiwic3JjL3VpL2NvbXBvbmVudHMvcmVzdWx0cy91bml2ZXJzYWxyZXN1bHRzY29tcG9uZW50LmpzIiwic3JjL3VpL2NvbXBvbmVudHMvcmVzdWx0cy9wYWdpbmF0aW9uY29tcG9uZW50LmpzIiwic3JjL3VpL2NvbXBvbmVudHMvY3Rhcy9jdGFjb2xsZWN0aW9uY29tcG9uZW50LmpzIiwic3JjL3VpL2NvbXBvbmVudHMvY2FyZHMvc3RhbmRhcmRjYXJkY29tcG9uZW50LmpzIiwic3JjL3VpL2NvbXBvbmVudHMvY2FyZHMvYWNjb3JkaW9uY2FyZGNvbXBvbmVudC5qcyIsInNyYy91aS9jb21wb25lbnRzL2NhcmRzL2xlZ2FjeWNhcmRjb21wb25lbnQuanMiLCJzcmMvdWkvY29tcG9uZW50cy9xdWVzdGlvbnMvcXVlc3Rpb25zdWJtaXNzaW9uY29tcG9uZW50LmpzIiwic3JjL3VpL2NvbXBvbmVudHMvaWNvbnMvaWNvbmNvbXBvbmVudC5qcyIsInNyYy91aS9jb21wb25lbnRzL2N0YXMvY3RhY29tcG9uZW50LmpzIiwic3JjL3VpL2NvbXBvbmVudHMvcmVnaXN0cnkuanMiLCJzcmMvdWkvY29tcG9uZW50cy9jb21wb25lbnRtYW5hZ2VyLmpzIiwic3JjL2NvcmUvbW9kZWxzL3ZlcnRpY2FscGFnZXNjb25maWcuanMiLCJzcmMvY29yZS91dGlscy9tYXN0ZXJzd2l0Y2hhcGkuanMiLCJzcmMvYW5zd2Vycy11bWQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqIEBtb2R1bGUgU2VhcmNoU3RhdGVzICovXG5cbi8qKlxuICogU2VhcmNoU3RhdGVzIGlzIGFuIEVOVU0gZm9yIHRoZSB2YXJpb3VzIHN0YWdlcyBvZiBzZWFyY2hpbmcsXG4gKiB1c2VkIHRvIHNob3cgZGlmZmVyZW50IHRlbXBsYXRlc1xuICogQGVudW0ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGRlZmF1bHQge1xuICBQUkVfU0VBUkNIOiAncHJlLXNlYXJjaCcsXG4gIFNFQVJDSF9MT0FESU5HOiAnc2VhcmNoLWxvYWRpbmcnLFxuICBTRUFSQ0hfQ09NUExFVEU6ICdzZWFyY2gtY29tcGxldGUnXG59O1xuIiwiLyoqIEBtb2R1bGUgUmVzdWx0ICovXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJlc3VsdCB7XG4gIGNvbnN0cnVjdG9yIChkYXRhID0ge30pIHtcbiAgICAvKipcbiAgICAgKiBUaGUgcmF3IHByb2ZpbGUgZGF0YVxuICAgICAqIEB0eXBlIHtPYmplY3R9XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLl9yYXcgPSBkYXRhLnJhdyB8fCBudWxsO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGZvcm1hdHRlZCBwcm9maWxlIGRhdGFcbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5fZm9ybWF0dGVkID0gZGF0YS5mb3JtYXR0ZWQ7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgaGlnaGxpZ2h0ZWQgcHJvZmlsZSBkYXRhIHdpdGggaGlnaGxpZ2h0cyBhcHBsaWVkIHRvIGFwcGxpY2FibGUgZmllbGRzXG4gICAgICogQHR5cGUge09iamVjdH1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuX2hpZ2hsaWdodGVkID0gZGF0YS5oaWdobGlnaHRlZDtcblxuICAgIC8qKlxuICAgICAqIFRoZSBpbmRleCBudW1iZXIgb2YgdGhlIHJlc3VsdFxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy5vcmRpbmFsID0gZGF0YS5vcmRpbmFsIHx8IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgdGl0bGUgb2YgdGhlIHJlc3VsdCBjYXJkXG4gICAgICogQHR5cGUge3N0cmluZ3xudWxsfVxuICAgICAqL1xuICAgIHRoaXMudGl0bGUgPSBkYXRhLnRpdGxlIHx8IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYm9keSBvZiB0aGUgZGV0YWlscyBzZWN0aW9uIG9mIHRoZSByZXN1bHQgY2FyZCwgY2FuIGNvbnRhaW4gSFRNTFxuICAgICAqIEB0eXBlIHtzdHJpbmd8IG51bGx9XG4gICAgICovXG4gICAgdGhpcy5kZXRhaWxzID0gZGF0YS5kZXRhaWxzIHx8IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgZGVzdGluYXRpb24gbGluayBmb3IgdGhlIHRpdGxlIG9mIHRoZSByZXN1bHQgY2FyZFxuICAgICAqIEB0eXBlIHtzdHJpbmd8bnVsbH1cbiAgICAgKi9cbiAgICB0aGlzLmxpbmsgPSBkYXRhLmxpbmsgfHwgbnVsbDtcblxuICAgIC8qKlxuICAgICAqIFRoZSBFbnRpdHkgSUQsIG9yIG90aGVyIHVuaXF1ZSBpZGVudGlmaWVyLCB1c2VkIGZvciB0byBwb3dlciBpbnRlcmFjdGl2aXR5XG4gICAgICogQHR5cGUge3N0cmluZ3xudWxsfVxuICAgICAqL1xuICAgIHRoaXMuaWQgPSBkYXRhLmlkIHx8IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgc3VidGl0bGUgb24gdGhlIHJlc3VsdCBjYXJkXG4gICAgICogQHR5cGUge3N0cmluZ3xudWxsfVxuICAgICAqL1xuICAgIHRoaXMuc3VidGl0bGUgPSBkYXRhLnN1YnRpdGxlIHx8IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgY2xhc3MgbW9kaWZpZXIsIHVzdWFsbHkgZGVyaXZlZCBmcm9tIHRoZSB2ZXJ0aWNhbCBjb25maWd1cmF0aW9uIElEXG4gICAgICogVXNlZCB0byBhcHBseSBkaWZmZXJlbnQgc3R5bGluZyB0byBkaWZmZXJlbnQgcmVzdWx0IGNhcmQgdHlwZXNcbiAgICAgKiBAdHlwZSB7c3RyaW5nfG51bGx9XG4gICAgICovXG4gICAgdGhpcy5tb2RpZmllciA9IGRhdGEubW9kaWZpZXIgfHwgbnVsbDtcblxuICAgIC8qKlxuICAgICAqIEEgbGFyZ2UgZGF0ZSwgb2YgdGhlIGZvcm1hdCB7IG1vbnRoOiAnSmFuJywgZGF5OiAnMDEnIH1cbiAgICAgKiBAdHlwZSB7T2JqZWN0fG51bGx9XG4gICAgICovXG4gICAgdGhpcy5iaWdEYXRlID0gZGF0YS5iaWdEYXRlIHx8IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBBbiBpbWFnZSBwcm9maWxlIG9iamVjdCwgZXhwZWN0ZWQgdG8gaGF2ZSBhIHVybCBwcm9wZXJ0eVxuICAgICAqIEB0eXBlIHtPYmplY3R8bnVsbH1cbiAgICAgKi9cbiAgICB0aGlzLmltYWdlID0gZGF0YS5pbWFnZSB8fCBudWxsO1xuXG4gICAgLyoqXG4gICAgICogQW4gYXJyYXkgb2YgY2FsbHMgdG8gYWN0aW9uLCBvZiB0aGUgZm9ybWF0OlxuICAgICAqIHsgaWNvbjogJycsIHVybDogJycsIHRleHQ6ICcnLCBldmVudFR5cGU6ICcnLCBldmVudE9wdGlvbnM6IHt9fVxuICAgICAqIEB0eXBlIHtBcnJheX1cbiAgICAgKi9cbiAgICB0aGlzLmNhbGxzVG9BY3Rpb24gPSBkYXRhLmNhbGxzVG9BY3Rpb24gfHwgW107XG5cbiAgICAvKipcbiAgICAgKiBEZXRlcm1pbmVzIGlmIGFuIGFjY29yZGlhbiByZXN1bHQgc2hvdWxkIGJlIGNvbGxhcHNlZCBieSBkZWZhdWx0XG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICovXG4gICAgdGhpcy5jb2xsYXBzZWQgPSBkYXRhLmNvbGxhcHNlZCA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IGRhdGEuY29sbGFwc2VkO1xuXG4gICAgLyoqXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLmRpc3RhbmNlID0gZGF0YS5kaXN0YW5jZSB8fCBudWxsO1xuICB9XG59XG4iLCIvKiogQG1vZHVsZSBIaWdobGlnaHRlZFZhbHVlICovXG5cbi8qKlxuICogTW9kZWwgcmVwcmVzZW50aW5nIGEgaGlnaGxpZ2h0ZWQgdmFsdWUuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEhpZ2hsaWdodGVkVmFsdWUge1xuICBjb25zdHJ1Y3RvciAoZGF0YSA9IHt9KSB7XG4gICAgdGhpcy52YWx1ZSA9IGRhdGEudmFsdWUgfHwgZGF0YS5zaG9ydFZhbHVlIHx8ICcnO1xuICAgIHRoaXMubWF0Y2hlZFN1YnN0cmluZ3MgPSBkYXRhLm1hdGNoZWRTdWJzdHJpbmdzIHx8IFtdO1xuICB9XG5cbiAgLyoqXG4gICAqIGdldCBoaWdobGlnaHRlZCB2YWx1ZSBzdHJpbmdcbiAgICogQHJldHVybnMge3N0cmluZ31cbiAgICovXG4gIGdldCAoKSB7XG4gICAgdGhpcy5fc29ydE1hdGNoZWRTdWJzdHJpbmdzKCk7XG4gICAgcmV0dXJuIHRoaXMuYnVpbGRIaWdobGlnaHRlZFZhbHVlKHRoaXMudmFsdWUsIHRoaXMubWF0Y2hlZFN1YnN0cmluZ3MpO1xuICB9XG5cbiAgLyoqXG4gICAqIGdldCBpbnZlcnRlZCBoaWdobGlnaHRlZCB2YWx1ZSBzdHJpbmdcbiAgICogQHJldHVybnMge3N0cmluZ31cbiAgICovXG4gIGdldEludmVydGVkICgpIHtcbiAgICB0aGlzLl9zb3J0TWF0Y2hlZFN1YnN0cmluZ3MoKTtcbiAgICBjb25zdCBpbnZlcnRlZFN1YnN0cmluZ3MgPSB0aGlzLl9nZXRJbnZlcnRlZFN1YnN0cmluZ3ModGhpcy5tYXRjaGVkU3Vic3RyaW5ncywgdGhpcy52YWx1ZS5sZW5ndGgpO1xuICAgIHJldHVybiB0aGlzLmJ1aWxkSGlnaGxpZ2h0ZWRWYWx1ZSh0aGlzLnZhbHVlLCBpbnZlcnRlZFN1YnN0cmluZ3MpO1xuICB9XG5cbiAgLyoqXG4gICAqIGludHJvZHVjZXMgaGlnaGxpZ2h0aW5nIHRvIGlucHV0IGRhdGEgYWNjb3JkaW5nIHRvIGhpZ2hsaWdodGluZyBzcGVjaWZpZXJzXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgaW5wdXQgb2JqZWN0IHRvIGFwcGx5IGhpZ2hsaWdodGluZyB0b1xuICAgKlxuICAgKiAgZXhhbXBsZSBvYmplY3QgOlxuICAgKiAge1xuICAgKiAgICBuYW1lOiAnQVRNJyxcbiAgICogICAgZmVhdHVyZWRNZXNzYWdlOiB7XG4gICAqICAgICAgZGVzY3JpcHRpb246ICdTYXZlIHRpbWUgJiBiYW5rIG9uIHlvdXIgdGVybXMgYXQgb3ZlciAxLDgwMCBBVE1zJ1xuICAgKiAgICB9XG4gICAqICB9XG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBoaWdobGlnaHRlZFN1YnN0cmluZ3MgaGlnaGxpZ2h0aW5nIHNwZWNpZmllcnMgdG8gYXBwbHkgdG8gaW5wdXQgb2JqZWN0XG4gICAqXG4gICAqICBleGFtcGxlIG9iamVjdCA6XG4gICAqICB7XG4gICAqICAgIG5hbWU6IHtcbiAgICogICAgICBtYXRjaGVkU3Vic3RyaW5nczogW3tcbiAgICogICAgICAgIGxlbmd0aDogMyxcbiAgICogICAgICAgIG9mZnNldDogMFxuICAgKiAgICAgIH1dLFxuICAgKiAgICAgIHZhbHVlOiAnQVRNJ1xuICAgKiAgICB9LFxuICAgKiAgICBmZWF0dXJlZE1lc3NhZ2U6IHtcbiAgICogICAgICBkZXNjcmlwdGlvbjoge1xuICAgKiAgICAgICAgbWF0Y2hlZFN1YnN0cmluZ3M6IFt7XG4gICAqICAgICAgICAgIGxlbmd0aDogNCxcbiAgICogICAgICAgICAgb2Zmc2V0OiA0NVxuICAgKiAgICAgICAgfV0sXG4gICAqICAgICAgICB2YWx1ZTogJ1NhdmUgdGltZSAmIGJhbmsgb24geW91ciB0ZXJtcyBhdCBvdmVyIDEsODAwIEFUTXMnXG4gICAqICAgICAgfVxuICAgKiAgICB9XG4gICAqICB9XG4gICAqXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IGNvcHkgb2YgaW5wdXQgdmFsdWUgd2l0aCBoaWdobGlnaHRpbmcgYXBwbGllZFxuICAgKlxuICAgKiAgZXhhbXBsZSBvYmplY3QgOlxuICAgKiAge1xuICAgKiAgICBuYW1lOiAnPHN0cm9uZz5BVE08L3N0cm9uZz4nLFxuICAgKiAgICBmZWF0dXJlZE1lc3NhZ2U6IHtcbiAgICogICAgICBkZXNjcmlwdGlvbjogJ1NhdmUgdGltZSAmIGJhbmsgb24geW91ciB0ZXJtcyBhdCBvdmVyIDEsODAwIDxzdHJvbmc+QVRNczwvc3Ryb25nPidcbiAgICogICAgfVxuICAgKiAgfVxuICAgKlxuICAgKi9cbiAgYnVpbGRIaWdobGlnaHRlZFZhbHVlICh2YWwsIGhpZ2hsaWdodGVkU3Vic3RyaW5ncykge1xuICAgIGxldCBoaWdobGlnaHRlZFZhbHVlID0gJyc7XG4gICAgbGV0IG5leHRTdGFydCA9IDA7XG5cbiAgICBpZiAoaGlnaGxpZ2h0ZWRTdWJzdHJpbmdzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHZhbDtcbiAgICB9XG5cbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IGhpZ2hsaWdodGVkU3Vic3RyaW5ncy5sZW5ndGg7IGorKykge1xuICAgICAgbGV0IHN0YXJ0ID0gTnVtYmVyKGhpZ2hsaWdodGVkU3Vic3RyaW5nc1tqXS5vZmZzZXQpO1xuICAgICAgbGV0IGVuZCA9IHN0YXJ0ICsgaGlnaGxpZ2h0ZWRTdWJzdHJpbmdzW2pdLmxlbmd0aDtcblxuICAgICAgaGlnaGxpZ2h0ZWRWYWx1ZSArPSBbdmFsLnNsaWNlKG5leHRTdGFydCwgc3RhcnQpLCAnPHN0cm9uZz4nLCB2YWwuc2xpY2Uoc3RhcnQsIGVuZCksICc8L3N0cm9uZz4nXS5qb2luKCcnKTtcblxuICAgICAgaWYgKGogPT09IGhpZ2hsaWdodGVkU3Vic3RyaW5ncy5sZW5ndGggLSAxICYmIGVuZCA8IHZhbC5sZW5ndGgpIHtcbiAgICAgICAgaGlnaGxpZ2h0ZWRWYWx1ZSArPSB2YWwuc2xpY2UoZW5kKTtcbiAgICAgIH1cblxuICAgICAgbmV4dFN0YXJ0ID0gZW5kO1xuICAgIH1cblxuICAgIHJldHVybiBoaWdobGlnaHRlZFZhbHVlO1xuICB9XG5cbiAgX3NvcnRNYXRjaGVkU3Vic3RyaW5ncyAoKSB7XG4gICAgdGhpcy5tYXRjaGVkU3Vic3RyaW5ncy5zb3J0KChhLCBiKSA9PiB7XG4gICAgICBpZiAoYS5vZmZzZXQgPCBiLm9mZnNldCkge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgICB9XG5cbiAgICAgIGlmIChhLm9mZnNldCA+IGIub2Zmc2V0KSB7XG4gICAgICAgIHJldHVybiAxO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gMDtcbiAgICB9KTtcbiAgfVxuXG4gIF9nZXRJbnZlcnRlZFN1YnN0cmluZ3MgKG1hdGNoZWRTdWJzdHJpbmdzLCB2YWx1ZUxlbmd0aCkge1xuICAgIGNvbnN0IGludmVydGVkU3Vic3RyaW5ncyA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbWF0Y2hlZFN1YnN0cmluZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IHN1YnN0cmluZyA9IG1hdGNoZWRTdWJzdHJpbmdzW2ldO1xuICAgICAgY29uc3QgbmV4dE9mZnNldCA9IHN1YnN0cmluZy5vZmZzZXQgKyBzdWJzdHJpbmcubGVuZ3RoO1xuICAgICAgaWYgKGkgPT09IDAgJiYgc3Vic3RyaW5nLm9mZnNldCAhPT0gMCkge1xuICAgICAgICBpbnZlcnRlZFN1YnN0cmluZ3MucHVzaCh7IG9mZnNldDogMCwgbGVuZ3RoOiBzdWJzdHJpbmcub2Zmc2V0IH0pO1xuICAgICAgfVxuXG4gICAgICBpZiAodmFsdWVMZW5ndGggPiBuZXh0T2Zmc2V0KSB7XG4gICAgICAgIGludmVydGVkU3Vic3RyaW5ncy5wdXNoKHtcbiAgICAgICAgICBvZmZzZXQ6IG5leHRPZmZzZXQsXG4gICAgICAgICAgbGVuZ3RoOiBpIDwgbWF0Y2hlZFN1YnN0cmluZ3MubGVuZ3RoIC0gMVxuICAgICAgICAgICAgPyBtYXRjaGVkU3Vic3RyaW5nc1tpICsgMV0ub2Zmc2V0IC0gbmV4dE9mZnNldFxuICAgICAgICAgICAgOiB2YWx1ZUxlbmd0aCAtIG5leHRPZmZzZXRcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBpbnZlcnRlZFN1YnN0cmluZ3M7XG4gIH1cbn1cbiIsIi8qKiBAbW9kdWxlIEVycm9ycyAqL1xuXG4vKipcbiAqIEFuc3dlcnNCYXNlRXJyb3IgaXMgYW4gZXh0ZW5zaW9uIG9mIHRoZSBiYXNlIEVycm9yIG9iamVjdC5cbiAqIFRoaXMgaXMgdGhlIG9iamVjdCB0aGF0IGlzIHVzZWQgdG8gd2hlbiByZXBvcnRpbmcgdG8gdGhlIHNlcnZlci5cbiAqIEBleHRlbmRzIEVycm9yXG4gKlxuICogRXJyb3IgY29kZXMgZmFsbCBpbnRvIG9uZSBvZiBmb3VyIGNhdGVnb3JpZXM6XG4gKiAxWFggZXJyb3JzOiBCYXNpYyBlcnJvcnNcbiAqIDJYWCBlcnJvcnM6IFVJIGVycm9yc1xuICogM1hYIGVycm9yczogRW5kcG9pbnQgZXJyb3JzXG4gKiA0WFggZXJyb3JzOiBDb3JlIGVycm9yc1xuICovXG5leHBvcnQgY2xhc3MgQW5zd2Vyc0Jhc2VFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgY29uc3RydWN0b3IgKGVycm9yQ29kZSwgbWVzc2FnZSwgYm91bmRhcnkgPSAndW5rbm93bicsIGNhdXNlZEJ5KSB7XG4gICAgc3VwZXIobWVzc2FnZSk7XG4gICAgdGhpcy5lcnJvckNvZGUgPSBlcnJvckNvZGU7XG4gICAgdGhpcy5lcnJvck1lc3NhZ2UgPSBtZXNzYWdlO1xuICAgIHRoaXMuYm91bmRhcnkgPSBib3VuZGFyeTtcbiAgICB0aGlzLnJlcG9ydGVkID0gZmFsc2U7XG5cbiAgICBpZiAoY2F1c2VkQnkpIHtcbiAgICAgIHRoaXMuY2F1c2VkQnkgPSBjYXVzZWRCeSBpbnN0YW5jZW9mIEFuc3dlcnNCYXNlRXJyb3JcbiAgICAgICAgPyBjYXVzZWRCeVxuICAgICAgICA6IEFuc3dlcnNCYXNlRXJyb3IuZnJvbShjYXVzZWRCeSk7XG4gICAgICB0aGlzLnN0YWNrID0gYCR7dGhpcy5zdGFja31cXG5DYXVzZWQgQnk6ICR7dGhpcy5jYXVzZWRCeS5zdGFja31gO1xuICAgIH1cbiAgfVxuXG4gIHRvSnNvbiAoKSB7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHRoaXMpO1xuICB9XG5cbiAgdG9TdHJpbmcgKCkge1xuICAgIGxldCBzdHJpbmcgPSBgJHt0aGlzLmVycm9yTWVzc2FnZX0gKCR7dGhpcy5ib3VuZGFyeX0pYDtcbiAgICBpZiAodGhpcy5jYXVzZWRCeSkge1xuICAgICAgc3RyaW5nICs9IGBcXG4gIENhdXNlZCBCeTogJHt0aGlzLmNhdXNlZEJ5LnRvU3RyaW5nKCl9YDtcbiAgICB9XG4gICAgcmV0dXJuIHN0cmluZztcbiAgfVxuXG4gIHN0YXRpYyBmcm9tIChidWlsdGluRXJyb3IsIGJvdW5kYXJ5KSB7XG4gICAgY29uc3QgZXJyb3IgPSBuZXcgQW5zd2Vyc0Jhc2ljRXJyb3IoYnVpbHRpbkVycm9yLm1lc3NhZ2UsIGJvdW5kYXJ5KTtcbiAgICBlcnJvci5zdGFjayA9IGJ1aWx0aW5FcnJvci5zdGFjaztcbiAgICByZXR1cm4gZXJyb3I7XG4gIH1cbn1cblxuLyoqXG4gKiBBbnN3ZXJzQmFzaWNFcnJvciBpcyBhIHdyYXBwZXIgYXJvdW5kIGFsbCB0aGUgYnVpbHQtaW4gZXJyb3JzXG4gKiBlLmcuIHVuZGVmaW5lZCB2YXJpYWJsZXMsIGluY29ycmVjdCBzeW50YXgsIHR5cGVzLCBtaXNzaW5nIG1ldGhvZHMsIGV0Yy5cbiAqIEBleHRlbmRzIEFuc3dlcnNCYXNlRXJyb3JcbiAqL1xuZXhwb3J0IGNsYXNzIEFuc3dlcnNCYXNpY0Vycm9yIGV4dGVuZHMgQW5zd2Vyc0Jhc2VFcnJvciB7XG4gIGNvbnN0cnVjdG9yIChtZXNzYWdlLCBib3VuZGFyeSwgY2F1c2VkQnkpIHtcbiAgICBzdXBlcigxMDAsIG1lc3NhZ2UsIGJvdW5kYXJ5LCBjYXVzZWRCeSk7XG4gIH1cbn1cblxuLyoqXG4gKiBBbnN3ZXJzVWlFcnJvciB1c2VkIGZvciB0aGluZ3MgbGlrZSBET00gZXJyb3JzLlxuICogQGV4dGVuZHMgQW5zd2Vyc0Jhc2VFcnJvclxuICovXG5leHBvcnQgY2xhc3MgQW5zd2Vyc0NvbmZpZ0Vycm9yIGV4dGVuZHMgQW5zd2Vyc0Jhc2VFcnJvciB7XG4gIGNvbnN0cnVjdG9yIChtZXNzYWdlLCBib3VuZGFyeSwgY2F1c2VkQnkpIHtcbiAgICBzdXBlcigxMDEsIG1lc3NhZ2UsIGJvdW5kYXJ5LCBjYXVzZWRCeSk7XG4gIH1cbn1cblxuLyoqXG4gKiBBbnN3ZXJzVWlFcnJvciB1c2VkIGZvciB0aGluZ3MgbGlrZSBET00gZXJyb3JzLlxuICogQGV4dGVuZHMgQW5zd2Vyc0Jhc2VFcnJvclxuICovXG5leHBvcnQgY2xhc3MgQW5zd2Vyc1VpRXJyb3IgZXh0ZW5kcyBBbnN3ZXJzQmFzZUVycm9yIHtcbiAgY29uc3RydWN0b3IgKG1lc3NhZ2UsIGJvdW5kYXJ5LCBjYXVzZWRCeSkge1xuICAgIHN1cGVyKDIwMCwgbWVzc2FnZSwgYm91bmRhcnksIGNhdXNlZEJ5KTtcbiAgfVxufVxuXG4vKipcbiAqIEFuc3dlcnNDb21wb25lbnRFcnJvciBpcyB1c2VkIGZvciBDb21wb25lbnQgb3JpZW50ZWQgZXJyb3JzXG4gKiBlLmcuIGZhaWx1cmUgdG8gcmVuZGVyLCBvciBjYXRjaGluZyB1bmtub3ducy5cbiAqIEBleHRlbmRzIEFuc3dlcnNCYXNlRXJyb3JcbiAqL1xuZXhwb3J0IGNsYXNzIEFuc3dlcnNDb21wb25lbnRFcnJvciBleHRlbmRzIEFuc3dlcnNCYXNlRXJyb3Ige1xuICBjb25zdHJ1Y3RvciAobWVzc2FnZSwgY29tcG9uZW50LCBjYXVzZWRCeSkge1xuICAgIHN1cGVyKDIwMSwgbWVzc2FnZSwgY29tcG9uZW50LCBjYXVzZWRCeSk7XG4gIH1cbn1cblxuLyoqXG4gKiBBbnN3ZXJzRW5kcG9pbnRFcnJvciByZXByZXNlbnRzIGFsbCBuZXR3b3JrIHJlbGF0ZWQgZXJyb3JzLlxuICogQGV4dGVuZHMgQW5zd2Vyc0Jhc2VFcnJvclxuICovXG5leHBvcnQgY2xhc3MgQW5zd2Vyc0VuZHBvaW50RXJyb3IgZXh0ZW5kcyBBbnN3ZXJzQmFzZUVycm9yIHtcbiAgY29uc3RydWN0b3IgKG1lc3NhZ2UsIGJvdW5kYXJ5LCBjYXVzZWRCeSkge1xuICAgIHN1cGVyKDMwMCwgbWVzc2FnZSwgYm91bmRhcnksIGNhdXNlZEJ5KTtcbiAgfVxufVxuXG4vKipcbiAqIEFuc3dlcnNDb3JlRXJyb3IgcmVwcmVzZW50cyBlcnJvcnMgZm9yIHByZWNvbmRpdGlvbiBmYWlsdXJlcyBpbiB0aGUgY29yZSBsaWJyYXJ5XG4gKiBAZXh0ZW5kcyBBbnN3ZXJzQmFzZUVycm9yXG4gKi9cbmV4cG9ydCBjbGFzcyBBbnN3ZXJzQ29yZUVycm9yIGV4dGVuZHMgQW5zd2Vyc0Jhc2VFcnJvciB7XG4gIGNvbnN0cnVjdG9yIChtZXNzYWdlLCBib3VuZGFyeSwgY2F1c2VkQnkpIHtcbiAgICBzdXBlcig0MDAsIG1lc3NhZ2UsIGJvdW5kYXJ5LCBjYXVzZWRCeSk7XG4gIH1cbn1cblxuLyoqXG4gKiBBbnN3ZXJzU3RvcmFnZUVycm9yIHJlcHJlc2VudHMgc3RvcmFnZSByZWxhdGVkIGVycm9yc1xuICogQGV4dGVuZHMgQW5zd2Vyc0Jhc2VFcnJvclxuICovXG5leHBvcnQgY2xhc3MgQW5zd2Vyc1N0b3JhZ2VFcnJvciBleHRlbmRzIEFuc3dlcnNCYXNlRXJyb3Ige1xuICBjb25zdHJ1Y3RvciAobWVzc2FnZSwgc3RvcmFnZUtleSwgZGF0YSwgY2F1c2VkQnkpIHtcbiAgICBzdXBlcig0MDEsIG1lc3NhZ2UsICdTdG9yYWdlJywgY2F1c2VkQnkpO1xuICAgIHRoaXMuc3RvcmFnZUtleSA9IHN0b3JhZ2VLZXk7XG4gICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgfVxufVxuXG4vKipcbiAqIEFuc3dlcnNBbmFseXRpY3NFcnJvciBpcyB1c2VkIGZvciBlcnJvcnMgd2hlbiByZXBvcnRpbmcgYW5hbHl0aWNzXG4gKiBAZXh0ZW5kcyBBbnN3ZXJzQmFzZUVycm9yXG4gKi9cbmV4cG9ydCBjbGFzcyBBbnN3ZXJzQW5hbHl0aWNzRXJyb3IgZXh0ZW5kcyBBbnN3ZXJzQmFzZUVycm9yIHtcbiAgY29uc3RydWN0b3IgKG1lc3NhZ2UsIGV2ZW50LCBjYXVzZWRCeSkge1xuICAgIHN1cGVyKDQwMiwgbWVzc2FnZSwgJ0FuYWx5dGljcycsIGNhdXNlZEJ5KTtcbiAgICB0aGlzLmV2ZW50ID0gZXZlbnQ7XG4gIH1cbn1cbiIsIi8qKiBAbW9kdWxlIFJlc3VsdEZhY3RvcnkgKi9cblxuaW1wb3J0IFJlc3VsdCBmcm9tICcuL3Jlc3VsdCc7XG5pbXBvcnQgSGlnaGxpZ2h0ZWRWYWx1ZSBmcm9tICcuL2hpZ2hsaWdodGVkdmFsdWUnO1xuaW1wb3J0IHsgQW5zd2Vyc0NvcmVFcnJvciB9IGZyb20gJy4uL2Vycm9ycy9lcnJvcnMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSZXN1bHRGYWN0b3J5IHtcbiAgLyoqXG4gICAqIENvbnZlcnRzIGFuIEFQSSByZXN1bHQgb2JqZWN0IGludG8gYSBSZXN1bHQgdmlldyBtb2RlbC5cbiAgICogSW5jbHVkZXMgZGVmYXVsdCBtYXBwaW5ncyBvZiBHb29nbGVDdXN0b21TZWFyY2hFbmdpbmUgcmVzdWx0cyB0b1xuICAgKiB0aGUgZmllbGRzIGV4cG9zZWQgYnkgdGhlIHRlbXBsYXRlLlxuICAgKiBAcGFyYW0gcmVzdWx0c0RhdGEgIHtBcnJheX0gZXhwZWN0ZWQgZm9ybWF0OiB7IGRhdGE6IHsgLi4uIH0sIGhpZ2hsaWdodGVkRmllbGRzOiB7IC4uLiB9fVxuICAgKiBAcGFyYW0ge09iamVjdC48c3RyaW5nLCBmdW5jdGlvbj59IGZvcm1hdHRlcnMgVGhlIGZvcm1hdHRlcnMgdG8gYXBwbHkgdG8gdGhlIHJlc3VsdFxuICAgKiBAcGFyYW0ge3N0cmluZ30gdmVydGljYWxJZCBUaGUgdmVydGljYWwgb2YgdGhlc2UgcmVzdWx0c1xuICAgKiBAcGFyYW0ge3N0cmluZ30gc291cmNlIEJhY2tlbmQgc291cmNlIG9mIHRoZXNlIHJlc3VsdHNcbiAgICogQHJldHVybnMge1Jlc3VsdFtdfVxuICAgKi9cbiAgc3RhdGljIGZyb20gKHJlc3VsdHNEYXRhLCBmb3JtYXR0ZXJzLCB2ZXJ0aWNhbElkLCBzb3VyY2UpIHtcbiAgICBsZXQgcmVzdWx0cyA9IFtdO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCByZXN1bHRzRGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgZGF0YSA9IHJlc3VsdHNEYXRhW2ldLmRhdGEgfHwgcmVzdWx0c0RhdGFbaV07XG4gICAgICBjb25zdCBkaXN0YW5jZSA9IHJlc3VsdHNEYXRhW2ldLmRpc3RhbmNlO1xuXG4gICAgICBzd2l0Y2ggKHNvdXJjZSkge1xuICAgICAgICBjYXNlICdHT09HTEVfQ1NFJzpcbiAgICAgICAgICByZXN1bHRzLnB1c2goUmVzdWx0RmFjdG9yeS5mcm9tR29vZ2xlQ3VzdG9tU2VhcmNoRW5naW5lKGRhdGEpKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnQklOR19DU0UnOlxuICAgICAgICAgIHJlc3VsdHMucHVzaChSZXN1bHRGYWN0b3J5LmZyb21CaW5nQ3VzdG9tU2VhcmNoRW5naW5lKGRhdGEpKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnWkVOREVTSyc6XG4gICAgICAgICAgcmVzdWx0cy5wdXNoKFJlc3VsdEZhY3RvcnkuZnJvbVplbmRlc2tTZWFyY2hFbmdpbmUoZGF0YSkpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdBTEdPTElBJzpcbiAgICAgICAgICByZXN1bHRzLnB1c2goUmVzdWx0RmFjdG9yeS5mcm9tQWxnb2xpYVNlYXJjaEVuZ2luZShkYXRhKSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ0tOT1dMRURHRV9NQU5BR0VSJzpcbiAgICAgICAgICBjb25zdCBoaWdobGlnaHRlZEZpZWxkcyA9IHJlc3VsdHNEYXRhW2ldLmhpZ2hsaWdodGVkRmllbGRzIHx8IHt9O1xuXG4gICAgICAgICAgcmVzdWx0cy5wdXNoKFJlc3VsdEZhY3RvcnkuZnJvbUtub3dsZWRnZU1hbmFnZXIoXG4gICAgICAgICAgICBkYXRhLCBmb3JtYXR0ZXJzLCB2ZXJ0aWNhbElkLCBoaWdobGlnaHRlZEZpZWxkcywgaSwgZGlzdGFuY2UpKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXN1bHRzLnB1c2goUmVzdWx0RmFjdG9yeS5mcm9tR2VuZXJpYyhkYXRhLCBpKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdHM7XG4gIH1cblxuICAvKipcbiAgICogQXBwbGllcyBmaWVsZCBmb3JtYXR0ZXJzIHRvIEtub3dsZWRnZSBNYW5hZ2VyIEVudGl0eSBQcm9maWxlIERhdGFcbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IGVudGl0eVByb2ZpbGVEYXRhIEVudGl0eSBQcm9maWxlIERhdGFcbiAgICogQHBhcmFtIHtPYmplY3R9IGZvcm1hdHRlcnMgRGV2ZWxvcGVyIHNwZWNpZmllZCBGaWVsZCBGb3JtYXR0ZXJzXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB2ZXJ0aWNhbElkIElkZW50aWZpZXIgZm9yIFZlcnRpY2FsXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBoaWdobGlnaHRlZEVudGl0eVByb2ZpbGVEYXRhIFN1YnNldCBvZiBFbnRpdHkgUHJvZmlsZSBEYXRhIHdpdGggaGlnaGxpZ2h0aW5nIGFwcGxpZWRcbiAgICogQHJldHVybnMge09iamVjdH0gU3Vic2V0IG9mIEVudGl0eSBQcm9maWxlIERhdGEgRmllbGRzIHdpdGggZmllbGQgZm9ybWF0dGVycyBhcHBsaWVkXG4gICAqL1xuICBzdGF0aWMgY29tcHV0ZUZvcm1hdHRlZERhdGEgKGVudGl0eVByb2ZpbGVEYXRhLCBmb3JtYXR0ZXJzLCB2ZXJ0aWNhbElkLCBoaWdobGlnaHRlZEVudGl0eVByb2ZpbGVEYXRhKSB7XG4gICAgLy8gaWYgbm8gZmllbGQgZm9ybWF0dGVycyBzcGVjaWZpZWQsIG5vdGhpbmcgdG8gZm9ybWF0XG4gICAgaWYgKE9iamVjdC5rZXlzKGZvcm1hdHRlcnMpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHt9O1xuICAgIH1cblxuICAgIGNvbnN0IGZvcm1hdHRlZERhdGEgPSB7fTtcblxuICAgIE9iamVjdC5lbnRyaWVzKGVudGl0eVByb2ZpbGVEYXRhKS5mb3JFYWNoKChbZmllbGROYW1lLCBmaWVsZFZhbF0pID0+IHtcbiAgICAgIC8vIGNoZWNrIGlmIGEgZmllbGQgZm9ybWF0dGVyIGV4aXN0cyBmb3IgdGhlIGN1cnJlbnQgZW50aXR5IHByb2ZpbGUgZmllbGRcbiAgICAgIGlmIChmb3JtYXR0ZXJzW2ZpZWxkTmFtZV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICAvLyB2ZXJpZnkgdGhlIGZpZWxkIGZvcm1hdHRlciBwcm92aWRlZCBpcyBhIGZvcm1hdHRlciBmdW5jdGlvbiBhcyBleHBlY3RlZFxuICAgICAgaWYgKHR5cGVvZiBmb3JtYXR0ZXJzW2ZpZWxkTmFtZV0gIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IEFuc3dlcnNDb3JlRXJyb3IoJ0ZpZWxkIGZvcm1hdHRlciBpcyBub3Qgb2YgZXhwZWN0ZWQgdHlwZSBmdW5jdGlvbicsICdSZXN1bHRGYWN0b3J5Jyk7XG4gICAgICB9XG5cbiAgICAgIC8vIGlmIGhpZ2hsaWdodGVkIHZlcnNpb24gb2YgZmllbGQgdmFsdWUgaXMgYXZhaWxhYmxlLCBtYWtlIGl0IGF2YWlsYWJsZSB0byBmaWVsZCBmb3JtYXR0ZXJcbiAgICAgIGxldCBoaWdobGlnaHRlZEZpZWxkVmFsID0gbnVsbDtcbiAgICAgIGlmIChoaWdobGlnaHRlZEVudGl0eVByb2ZpbGVEYXRhICYmIGhpZ2hsaWdodGVkRW50aXR5UHJvZmlsZURhdGFbZmllbGROYW1lXSkge1xuICAgICAgICBoaWdobGlnaHRlZEZpZWxkVmFsID0gaGlnaGxpZ2h0ZWRFbnRpdHlQcm9maWxlRGF0YVtmaWVsZE5hbWVdO1xuICAgICAgfVxuXG4gICAgICAvLyBjYWxsIGZvcm1hdHRlciBmdW5jdGlvbiBhc3NvY2lhdGVkIHdpdGggdGhlIGZpZWxkIG5hbWVcbiAgICAgIC8vIHRoZSBpbnB1dCBvYmplY3QgZGVmaW5lcyB0aGUgaW50ZXJmYWNlIHRoYXQgZmllbGQgZm9ybWF0dGVyIGZ1bmN0aW9ucyB3b3JrIHdpdGhcbiAgICAgIGZvcm1hdHRlZERhdGFbZmllbGROYW1lXSA9IGZvcm1hdHRlcnNbZmllbGROYW1lXSh7XG4gICAgICAgIGVudGl0eVByb2ZpbGVEYXRhOiBlbnRpdHlQcm9maWxlRGF0YSxcbiAgICAgICAgZW50aXR5RmllbGRWYWx1ZTogZmllbGRWYWwsXG4gICAgICAgIGhpZ2hsaWdodGVkRW50aXR5RmllbGRWYWx1ZTogaGlnaGxpZ2h0ZWRGaWVsZFZhbCxcbiAgICAgICAgdmVydGljYWxJZDogdmVydGljYWxJZCxcbiAgICAgICAgaXNEaXJlY3RBbnN3ZXI6IGZhbHNlXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHJldHVybiBmb3JtYXR0ZWREYXRhO1xuICB9XG5cbiAgLyoqXG4gICAqIEFwcGxpZXMgaGlnaGxpZ2h0aW5nIHRvIHN1YnN0cmluZ3Mgd2l0aGluIEtub3dsZWRnZSBNYW5hZ2VyIEVudGl0eSBGaWVsZCBWYWx1ZXNcbiAgICogYWNjb3JkaW5nIHRvIGhpZ2hsaWdodGluZyBzcGVjaWZpZXJzIHJldHVybmVkIGZyb20gdGhlIEtub3dsZWRnZSBNYW5hZ2VyIFNlYXJjaCBCYWNrZW5kXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBlbnRpdHlQcm9maWxlRGF0YSBFbnRpdHkgUHJvZmlsZSBEYXRhXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBoaWdobGlnaHRlZEZpZWxkcyBLTSBzcGVjaWZpZWQgaGlnaGxpZ2h0aW5nIGluc3RydWN0aW9ucyB0byBoaWdobGlnaHQgY2VydGFpbiBGaWVsZHNcbiAgICogQHJldHVybnMge09iamVjdH0gU3Vic2V0IG9mIEVudGl0eSBQcm9maWxlIERhdGEgRmllbGRzIHdpdGggaGlnaGxpZ2h0aW5nIGFwcGxpZWRcbiAgICovXG4gIHN0YXRpYyBjb21wdXRlSGlnaGxpZ2h0ZWREYXRhIChlbnRpdHlQcm9maWxlRGF0YSwgaGlnaGxpZ2h0ZWRGaWVsZHMpIHtcbiAgICAvLyBpZiBubyBoaWdobGlnaHRlZCBmaWVsZHMgc3BlY2lmaWVkLCBub3RoaW5nIHRvIGhpZ2hsaWdodFxuICAgIGlmIChPYmplY3Qua2V5cyhoaWdobGlnaHRlZEZpZWxkcykubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4ge307XG4gICAgfVxuXG4gICAgY29uc3QgaGlnaGxpZ2h0ZWREYXRhID0ge307XG5cbiAgICAvLyBpdGVyYXRlIHRocm91Z2ggZW50aXR5IGZpZWxkcyB0aGF0IGhhdmUgaGlnaGxpZ2h0aW5nIGluc3RydWN0aW9uc1xuICAgIE9iamVjdC5lbnRyaWVzKGhpZ2hsaWdodGVkRmllbGRzKS5mb3JFYWNoKChbaGlnaGxpZ2h0ZWRGaWVsZE5hbWVdKSA9PiB7XG4gICAgICAvLyB2ZXJpZnkgdGhhdCB0aGUgaGlnaGxpZ2h0ZWQgZmllbGQgbmFtZSBjb3JyZXNwb25kcyB0byBhbiBleGlzdGluZyBlbnRpdHkgcHJvZmlsZSBmaWVsZFxuICAgICAgaWYgKGVudGl0eVByb2ZpbGVEYXRhW2hpZ2hsaWdodGVkRmllbGROYW1lXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRocm93IG5ldyBBbnN3ZXJzQ29yZUVycm9yKCdIaWdobGlnaHRlZCBGaWVsZCBOYW1lIGRvZXMgbm90IGV4aXN0IGluIEVudGl0eSBQcm9maWxlJywgJ1Jlc3VsdEZhY3RvcnknKTtcbiAgICAgIH1cblxuICAgICAgbGV0IGhpZ2hsaWdodGVkRmllbGQgPSBoaWdobGlnaHRlZEZpZWxkc1toaWdobGlnaHRlZEZpZWxkTmFtZV07XG5cbiAgICAgIC8vIGNoZWNrIGZvciBuZXN0ZWQgZmllbGRzXG4gICAgICBpZiAodHlwZW9mIGhpZ2hsaWdodGVkRmllbGQgPT09ICdvYmplY3QnICYmXG4gICAgICAgICAgT2JqZWN0LmtleXMoaGlnaGxpZ2h0ZWRGaWVsZCkubGVuZ3RoID4gMCAmJlxuICAgICAgICAgIGhpZ2hsaWdodGVkRmllbGRbJ21hdGNoZWRTdWJzdHJpbmdzJ10gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAvLyByZWN1cnNlIHRvIGNoaWxkcmVuIGZpZWxkc1xuICAgICAgICBoaWdobGlnaHRlZERhdGFbaGlnaGxpZ2h0ZWRGaWVsZE5hbWVdID0gUmVzdWx0RmFjdG9yeS5jb21wdXRlSGlnaGxpZ2h0ZWREYXRhKFxuICAgICAgICAgIGVudGl0eVByb2ZpbGVEYXRhW2hpZ2hsaWdodGVkRmllbGROYW1lXSxcbiAgICAgICAgICBoaWdobGlnaHRlZEZpZWxkc1toaWdobGlnaHRlZEZpZWxkTmFtZV0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGV0IGhpZ2hsaWdodGVkRGF0YVZhbHVlID0gbmV3IEhpZ2hsaWdodGVkVmFsdWUoZW50aXR5UHJvZmlsZURhdGEpLmJ1aWxkSGlnaGxpZ2h0ZWRWYWx1ZShcbiAgICAgICAgICBoaWdobGlnaHRlZEZpZWxkLnZhbHVlLFxuICAgICAgICAgIGhpZ2hsaWdodGVkRmllbGQubWF0Y2hlZFN1YnN0cmluZ3MpO1xuICAgICAgICBoaWdobGlnaHRlZERhdGFbaGlnaGxpZ2h0ZWRGaWVsZE5hbWVdID0gaGlnaGxpZ2h0ZWREYXRhVmFsdWU7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gaGlnaGxpZ2h0ZWREYXRhO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIGFuIEFQSSByZXN1bHQgb2JqZWN0IGludG8gYSBnZW5lcmljIHJlc3VsdCB2aWV3IG1vZGVsLlxuICAgKiBAcGFyYW0ge09iamVjdH0gZGF0YVxuICAgKiBAcGFyYW0ge251bWJlcn0gaW5kZXhcbiAgICogQHJldHVybnMge1Jlc3VsdH1cbiAgICovXG4gIHN0YXRpYyBmcm9tR2VuZXJpYyAoZGF0YSwgaW5kZXgpIHtcbiAgICByZXR1cm4gbmV3IFJlc3VsdCh7XG4gICAgICByYXc6IGRhdGEsXG4gICAgICB0aXRsZTogZGF0YS5uYW1lLFxuICAgICAgZGV0YWlsczogdGhpcy50cnVuY2F0ZShkYXRhLmRlc2NyaXB0aW9uKSxcbiAgICAgIGxpbms6IGRhdGEud2Vic2l0ZSxcbiAgICAgIGlkOiBkYXRhLmlkLFxuICAgICAgb3JkaW5hbDogaW5kZXggKyAxXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgYW4gQVBJIHJlc3VsdCBvYmplY3QgaW50byBhIEtub3dsZWRnZSBNYW5hZ2VyIHJlc3VsdCB2aWV3IG1vZGVsLlxuICAgKiBAcGFyYW0ge09iamVjdH0gZGF0YVxuICAgKiBAcGFyYW0ge09iamVjdH0gZm9ybWF0dGVyc1xuICAgKiBAcGFyYW0ge3N0cmluZ30gdmVydGljYWxJZFxuICAgKiBAcGFyYW0ge09iamVjdH0gaGlnaGxpZ2h0ZWRGaWVsZHNcbiAgICogQHBhcmFtIHtudW1iZXJ9IGluZGV4XG4gICAqIEBwYXJhbSB7bnVtYmVyfSBkaXN0YW5jZVxuICAgKiBAcmV0dXJucyB7UmVzdWx0fVxuICAgKi9cbiAgc3RhdGljIGZyb21Lbm93bGVkZ2VNYW5hZ2VyIChkYXRhLCBmb3JtYXR0ZXJzLCB2ZXJ0aWNhbElkLCBoaWdobGlnaHRlZEZpZWxkcywgaW5kZXgsIGRpc3RhbmNlKSB7XG4gICAgLy8gY29tcHV0ZSBoaWdobGlnaHRlZCBlbnRpdHkgcHJvZmlsZSBkYXRhXG4gICAgbGV0IGhpZ2hsaWdodGVkRW50aXR5UHJvZmlsZURhdGEgPSBSZXN1bHRGYWN0b3J5LmNvbXB1dGVIaWdobGlnaHRlZERhdGEoZGF0YSwgaGlnaGxpZ2h0ZWRGaWVsZHMpO1xuICAgIC8vIGNvbXB1dGUgZm9ybWF0dGVkIGVudGl0eSBwcm9maWxlIGRhdGFcbiAgICBjb25zdCBmb3JtYXR0ZWRFbnRpdHlQcm9maWxlRGF0YSA9IFJlc3VsdEZhY3RvcnkuY29tcHV0ZUZvcm1hdHRlZERhdGEoXG4gICAgICBkYXRhLCBmb3JtYXR0ZXJzLCB2ZXJ0aWNhbElkLCBoaWdobGlnaHRlZEVudGl0eVByb2ZpbGVEYXRhKTtcblxuICAgIC8vIHNldCByZXN1bHQgZGV0YWlscyBjaGVja2luZyB0aGUgZm9sbG93aW5nIGluIG9yZGVyIG9mIHByaW9yaXR5IDogZm9ybWF0dGVkLCBoaWdobGlnaHRlZCwgcmF3XG4gICAgbGV0IHJlc3VsdERldGFpbHMgPSBudWxsO1xuICAgIGlmIChmb3JtYXR0ZWRFbnRpdHlQcm9maWxlRGF0YS5kZXNjcmlwdGlvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXN1bHREZXRhaWxzID0gZm9ybWF0dGVkRW50aXR5UHJvZmlsZURhdGEuZGVzY3JpcHRpb247XG4gICAgfSBlbHNlIGlmIChoaWdobGlnaHRlZEVudGl0eVByb2ZpbGVEYXRhLmRlc2NyaXB0aW9uICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJlc3VsdERldGFpbHMgPSB0aGlzLnRydW5jYXRlKGhpZ2hsaWdodGVkRW50aXR5UHJvZmlsZURhdGEuZGVzY3JpcHRpb24pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHREZXRhaWxzID0gdGhpcy50cnVuY2F0ZShkYXRhLmRlc2NyaXB0aW9uKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IFJlc3VsdCh7XG4gICAgICByYXc6IGRhdGEsXG4gICAgICBmb3JtYXR0ZWQ6IGZvcm1hdHRlZEVudGl0eVByb2ZpbGVEYXRhLFxuICAgICAgaGlnaGxpZ2h0ZWQ6IGhpZ2hsaWdodGVkRW50aXR5UHJvZmlsZURhdGEsXG4gICAgICB0aXRsZTogZm9ybWF0dGVkRW50aXR5UHJvZmlsZURhdGEubmFtZSB8fCBkYXRhLm5hbWUsXG4gICAgICBkZXRhaWxzOiByZXN1bHREZXRhaWxzLFxuICAgICAgbGluazogZGF0YS53ZWJzaXRlLFxuICAgICAgaWQ6IGRhdGEuaWQsXG4gICAgICBvcmRpbmFsOiBpbmRleCArIDEsXG4gICAgICBkaXN0YW5jZTogZGlzdGFuY2VcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyBhbiBBUEkgcmVzdWx0IG9iamVjdCBpbnRvIGEgcmVzdWx0IHZpZXcgbW9kZWwuXG4gICAqIE1hcHMgdmlldyBtb2RlbCBmaWVsZHMgYmFzZWQgb24gdGhlIEFQSSBkYXRhIGZvciBhIEdvb2dsZSBDdXN0b20gU2VhcmNoIEVuZ2luZSBvYmplY3QuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhXG4gICAqIEByZXR1cm5zIHtSZXN1bHR9XG4gICAqL1xuICBzdGF0aWMgZnJvbUdvb2dsZUN1c3RvbVNlYXJjaEVuZ2luZSAoZGF0YSkge1xuICAgIHJldHVybiBuZXcgUmVzdWx0KHtcbiAgICAgIHJhdzogZGF0YSxcbiAgICAgIHRpdGxlOiBkYXRhLmh0bWxUaXRsZS5yZXBsYWNlKC8oPChbXj5dKyk+KS9pZywgJycpLFxuICAgICAgZGV0YWlsczogZGF0YS5odG1sU25pcHBldCxcbiAgICAgIGxpbms6IGRhdGEubGlua1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIGFuIEFQSSByZXN1bHQgb2JqZWN0IGludG8gYSByZXN1bHQgdmlldyBtb2RlbC5cbiAgICogTWFwcyB2aWV3IG1vZGVsIGZpZWxkcyBiYXNlZCBvbiB0aGUgQVBJIGRhdGEgZm9yIGEgQmluZyBDdXN0b20gU2VhcmNoIEVuZ2luZSBvYmplY3QuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhXG4gICAqIEByZXR1cm5zIHtSZXN1bHR9XG4gICAqL1xuICBzdGF0aWMgZnJvbUJpbmdDdXN0b21TZWFyY2hFbmdpbmUgKGRhdGEpIHtcbiAgICByZXR1cm4gbmV3IFJlc3VsdCh7XG4gICAgICByYXc6IGRhdGEsXG4gICAgICB0aXRsZTogZGF0YS5uYW1lLFxuICAgICAgZGV0YWlsczogZGF0YS5zbmlwcGV0LFxuICAgICAgbGluazogZGF0YS51cmxcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyBhbiBBUEkgcmVzdWx0IG9iamVjdCBpbnRvIGEgcmVzdWx0IHZpZXcgbW9kZWwuXG4gICAqIE1hcHMgdmlldyBtb2RlbCBmaWVsZHMgYmFzZWQgb24gdGhlIEFQSSBkYXRhIGZvciBhIFplbmRlc2sgU2VhcmNoIEVuZ2luZSBvYmplY3QuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhXG4gICAqIEByZXR1cm5zIHtSZXN1bHR9XG4gICAqL1xuICBzdGF0aWMgZnJvbVplbmRlc2tTZWFyY2hFbmdpbmUgKGRhdGEpIHtcbiAgICByZXR1cm4gbmV3IFJlc3VsdCh7XG4gICAgICByYXc6IGRhdGEsXG4gICAgICB0aXRsZTogZGF0YS50aXRsZSxcbiAgICAgIGRldGFpbHM6IGRhdGEuc25pcHBldCxcbiAgICAgIGxpbms6IGRhdGEuaHRtbF91cmxcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyBhbiBBUEkgcmVzdWx0IG9iamVjdCBpbnRvIGEgcmVzdWx0IHZpZXcgbW9kZWwuXG4gICAqIE1hcHMgdmlldyBtb2RlbCBmaWVsZHMgYmFzZWQgb24gdGhlIEFQSSBkYXRhIGZvciBhIEFsZ29saWEgU2VhcmNoIEVuZ2luZSBvYmplY3QuXG4gICAqIERldGFpbHMgZmllbGQgaXMgc2V0IHRvIG9iamVjdElEIHNpbmNlIHJlc3BvbnNlIGhhcyBvbmx5IG9uZSBnZW5lcmFsIGZpZWxkIG9iamVjdElELlxuICAgKiBAcGFyYW0ge09iamVjdH0gZGF0YVxuICAgKiBAcmV0dXJucyB7UmVzdWx0fVxuICAgKi9cbiAgc3RhdGljIGZyb21BbGdvbGlhU2VhcmNoRW5naW5lIChkYXRhKSB7XG4gICAgcmV0dXJuIG5ldyBSZXN1bHQoe1xuICAgICAgcmF3OiBkYXRhLFxuICAgICAgZGV0YWlsczogZGF0YS5vYmplY3RJRCxcbiAgICAgIGlkOiBkYXRhLm9iamVjdElEXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogVHJ1bmNhdGVzIHN0cmluZ3MgdG8gMjUwIGNoYXJhY3RlcnMsIGF0dGVtcHRpbmcgdG8gcHJlc2VydmUgd2hvbGUgd29yZHNcbiAgICogQHBhcmFtIHN0ciB7c3RyaW5nfSB0aGUgc3RyaW5nIHRvIHRydW5jYXRlXG4gICAqIEBwYXJhbSBsaW1pdCB7TnVtYmVyfSB0aGUgbWF4aW11bSBjaGFyYWN0ZXIgbGVuZ3RoIHRvIHJldHVyblxuICAgKiBAcGFyYW0gdHJhaWxpbmcge3N0cmluZ30gYSB0cmFpbGluZyBzdHJpbmcgdG8gZGVub3RlIHRydW5jYXRpb24sIGUuZy4gJy4uLidcbiAgICogQHBhcmFtIHNlcCB7c3RyaW5nfSB0aGUgd29yZCBzZXBhcmF0b3JcbiAgICogQHJldHVybnMge3N0cmluZ31cbiAgICovXG4gIHN0YXRpYyB0cnVuY2F0ZSAoc3RyLCBsaW1pdCA9IDI1MCwgdHJhaWxpbmcgPSAnLi4uJywgc2VwID0gJyAnKSB7XG4gICAgaWYgKCFzdHIgfHwgc3RyLmxlbmd0aCA8PSBsaW1pdCkge1xuICAgICAgcmV0dXJuIHN0cjtcbiAgICB9XG5cbiAgICAvLyBUT0RPIChibWNnaW5uaXMpOiBzcGxpdCBwdW5jdHVhdGlvbiB0b28gc28gd2UgZG9uJ3QgZW5kIHVwIHdpdGggXCJmb28sLi4uXCJcbiAgICBjb25zdCB3b3JkcyA9IHN0ci5zcGxpdChzZXApO1xuICAgIGNvbnN0IG1heCA9IGxpbWl0IC0gdHJhaWxpbmcubGVuZ3RoO1xuICAgIGxldCB0cnVuY2F0ZWQgPSAnJztcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgd29yZHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IHdvcmQgPSB3b3Jkc1tpXTtcbiAgICAgIGlmICh0cnVuY2F0ZWQubGVuZ3RoICsgd29yZC5sZW5ndGggPiBtYXggfHxcbiAgICAgICAgKGkgIT09IDAgJiYgdHJ1bmNhdGVkLmxlbmd0aCArIHdvcmQubGVuZ3RoICsgc2VwLmxlbmd0aCA+IG1heCkpIHtcbiAgICAgICAgdHJ1bmNhdGVkICs9IHRyYWlsaW5nO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgdHJ1bmNhdGVkICs9IGkgPT09IDAgPyB3b3JkIDogc2VwICsgd29yZDtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1bmNhdGVkO1xuICB9XG59XG4iLCIvKiogQG1vZHVsZSBTZWN0aW9uICovXG5cbmltcG9ydCBTZWFyY2hTdGF0ZXMgZnJvbSAnLi4vc3RvcmFnZS9zZWFyY2hzdGF0ZXMnO1xuaW1wb3J0IFJlc3VsdEZhY3RvcnkgZnJvbSAnLi9yZXN1bHRmYWN0b3J5JztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2VjdGlvbiB7XG4gIGNvbnN0cnVjdG9yIChkYXRhLCB1cmwsIGZvcm1hdHRlcnMpIHtcbiAgICB0aGlzLnNlYXJjaFN0YXRlID0gU2VhcmNoU3RhdGVzLlNFQVJDSF9DT01QTEVURTtcbiAgICB0aGlzLnZlcnRpY2FsQ29uZmlnSWQgPSBkYXRhLnZlcnRpY2FsQ29uZmlnSWQgfHwgbnVsbDtcbiAgICB0aGlzLnJlc3VsdHNDb3VudCA9IGRhdGEucmVzdWx0c0NvdW50IHx8IDA7XG4gICAgdGhpcy5lbmNvZGVkU3RhdGUgPSBkYXRhLmVuY29kZWRTdGF0ZSB8fCAnJztcbiAgICB0aGlzLmFwcGxpZWRRdWVyeUZpbHRlcnMgPSBBcHBsaWVkUXVlcnlGaWx0ZXIuZnJvbShkYXRhLmFwcGxpZWRRdWVyeUZpbHRlcnMpO1xuICAgIHRoaXMuZmFjZXRzID0gZGF0YS5mYWNldHMgfHwgbnVsbDtcbiAgICB0aGlzLnJlc3VsdHMgPSBSZXN1bHRGYWN0b3J5LmZyb20oZGF0YS5yZXN1bHRzLCBmb3JtYXR0ZXJzLCB0aGlzLnZlcnRpY2FsQ29uZmlnSWQsIGRhdGEuc291cmNlKTtcbiAgICB0aGlzLm1hcCA9IFNlY3Rpb24ucGFyc2VNYXAoZGF0YS5yZXN1bHRzKTtcbiAgICB0aGlzLnZlcnRpY2FsVVJMID0gdXJsIHx8IG51bGw7XG4gICAgdGhpcy5yZXN1bHRzQ29udGV4dCA9IGRhdGEucmVzdWx0c0NvbnRleHQ7XG4gIH1cblxuICBzdGF0aWMgcGFyc2VNYXAgKHJlc3VsdHMpIHtcbiAgICBsZXQgbWFwTWFya2VycyA9IFtdO1xuXG4gICAgbGV0IGNlbnRlckNvb3JkaW5hdGVzID0ge307XG5cbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IHJlc3VsdHMubGVuZ3RoOyBqKyspIHtcbiAgICAgIC8vIFRPRE8oYmlsbHkpIFJlbW92ZSBsZWdhY3kgZmFsbGJhY2sgZnJvbSBhbGwgZGF0YSBmb3JtYXRcbiAgICAgIGxldCByZXN1bHQgPSByZXN1bHRzW2pdLmRhdGEgfHwgcmVzdWx0c1tqXTtcbiAgICAgIGlmIChyZXN1bHQgJiYgcmVzdWx0LnlleHREaXNwbGF5Q29vcmRpbmF0ZSkge1xuICAgICAgICBpZiAoIWNlbnRlckNvb3JkaW5hdGVzLmxhdGl0dWRlKSB7XG4gICAgICAgICAgY2VudGVyQ29vcmRpbmF0ZXMgPSB7XG4gICAgICAgICAgICBsYXRpdHVkZTogcmVzdWx0LnlleHREaXNwbGF5Q29vcmRpbmF0ZS5sYXRpdHVkZSxcbiAgICAgICAgICAgIGxvbmdpdHVkZTogcmVzdWx0LnlleHREaXNwbGF5Q29vcmRpbmF0ZS5sb25naXR1ZGVcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIG1hcE1hcmtlcnMucHVzaCh7XG4gICAgICAgICAgaXRlbTogcmVzdWx0LFxuICAgICAgICAgIGxhYmVsOiBtYXBNYXJrZXJzLmxlbmd0aCArIDEsXG4gICAgICAgICAgbGF0aXR1ZGU6IHJlc3VsdC55ZXh0RGlzcGxheUNvb3JkaW5hdGUubGF0aXR1ZGUsXG4gICAgICAgICAgbG9uZ2l0dWRlOiByZXN1bHQueWV4dERpc3BsYXlDb29yZGluYXRlLmxvbmdpdHVkZVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgJ21hcENlbnRlcic6IGNlbnRlckNvb3JkaW5hdGVzLFxuICAgICAgJ21hcE1hcmtlcnMnOiBtYXBNYXJrZXJzXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBzZWN0aW9uIGZyb20gdGhlIHByb3ZpZGVkIGRhdGFcbiAgICogQHBhcmFtIHtPYmplY3R8QXJyYXl9IG1vZHVsZXMgVGhlIHJlc3VsdCBtb2R1bGVzXG4gICAqIEBwYXJhbSB7T2JqZWN0fSB1cmxzIFRoZSB0YWIgdXJsc1xuICAgKiBAcGFyYW0ge09iamVjdC48c3RyaW5nLCBmdW5jdGlvbj59IGZvcm1hdHRlcnMgRmllbGQgZm9ybWF0dGVycyBmb3IgcmVzdWx0c1xuICAgKi9cbiAgc3RhdGljIGZyb20gKG1vZHVsZXMsIHVybHMsIGZvcm1hdHRlcnMpIHtcbiAgICBsZXQgc2VjdGlvbnMgPSBbXTtcbiAgICBpZiAoIW1vZHVsZXMpIHtcbiAgICAgIHJldHVybiBzZWN0aW9ucztcbiAgICB9XG5cbiAgICBpZiAoIUFycmF5LmlzQXJyYXkobW9kdWxlcykpIHtcbiAgICAgIHJldHVybiBuZXcgU2VjdGlvbihtb2R1bGVzLCBudWxsLCBmb3JtYXR0ZXJzKTtcbiAgICB9XG5cbiAgICAvLyBPdXIgc2VjdGlvbnMgc2hvdWxkIGNvbnRhaW4gYSBwcm9wZXJ0eSBvZiBtYXBNYXJrZXIgb2JqZWN0c1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbW9kdWxlcy5sZW5ndGg7IGkrKykge1xuICAgICAgc2VjdGlvbnMucHVzaChcbiAgICAgICAgbmV3IFNlY3Rpb24oXG4gICAgICAgICAgbW9kdWxlc1tpXSxcbiAgICAgICAgICB1cmxzW21vZHVsZXNbaV0udmVydGljYWxDb25maWdJZF0sXG4gICAgICAgICAgZm9ybWF0dGVyc1xuICAgICAgICApXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiBzZWN0aW9ucztcbiAgfVxufVxuXG5jbGFzcyBBcHBsaWVkUXVlcnlGaWx0ZXIge1xuICAvLyBTdXBwb3J0IGxlZ2FjeSBtb2RlbCBhbmQgbmV3IG1vZGVsIHVudGlsIGZ1bGx5IG1pZ3JhdGVkLlxuICAvLyBUT0RPKGJpbGx5KSBSZW1vdmUgdGhlIGxlZnQgZXhwcmVzc2lvbiBkdXJpbmcgYXNzaWdubWVudCB3aGVuIG1pZ3JhdGVkLlxuICBjb25zdHJ1Y3RvciAoYXBwbGllZFF1ZXJ5RmlsdGVyKSB7XG4gICAgdGhpcy5rZXkgPSBhcHBsaWVkUXVlcnlGaWx0ZXIua2V5IHx8IGFwcGxpZWRRdWVyeUZpbHRlci5kaXNwbGF5S2V5O1xuICAgIHRoaXMudmFsdWUgPSBhcHBsaWVkUXVlcnlGaWx0ZXIudmFsdWUgfHwgYXBwbGllZFF1ZXJ5RmlsdGVyLmRpc3BsYXlWYWx1ZTtcbiAgfVxuXG4gIHN0YXRpYyBmcm9tIChhcHBsaWVkUXVlcnlGaWx0ZXJzKSB7XG4gICAgbGV0IGZpbHRlcnMgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFwcGxpZWRRdWVyeUZpbHRlcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGZpbHRlcnMucHVzaChuZXcgQXBwbGllZFF1ZXJ5RmlsdGVyKGFwcGxpZWRRdWVyeUZpbHRlcnNbaV0pKTtcbiAgICB9XG4gICAgcmV0dXJuIGZpbHRlcnM7XG4gIH1cbn1cbiIsIi8qKiBAbW9kdWxlIFVuaXZlcnNhbFJlc3VsdHMgKi9cblxuaW1wb3J0IFNlY3Rpb24gZnJvbSAnLi9zZWN0aW9uJztcbmltcG9ydCBTZWFyY2hTdGF0ZXMgZnJvbSAnLi4vc3RvcmFnZS9zZWFyY2hzdGF0ZXMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBVbml2ZXJzYWxSZXN1bHRzIHtcbiAgY29uc3RydWN0b3IgKGRhdGEpIHtcbiAgICB0aGlzLnF1ZXJ5SWQgPSBkYXRhLnF1ZXJ5SWQgfHwgbnVsbDtcbiAgICB0aGlzLnNlY3Rpb25zID0gZGF0YS5zZWN0aW9ucyB8fCBbXTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBjdXJyZW50IHN0YXRlIG9mIHRoZSBzZWFyY2gsIHVzZWQgdG8gcmVuZGVyIGRpZmZlcmVudCB0ZW1wbGF0ZXMgYmVmb3JlLCBkdXJpbmcsXG4gICAgICogYW5kIGFmdGVyIGxvYWRpbmdcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMuc2VhcmNoU3RhdGUgPSBkYXRhLnNlYXJjaFN0YXRlIHx8IFNlYXJjaFN0YXRlcy5TRUFSQ0hfQ09NUExFVEU7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIHVuaXZlcnNhbCByZXN1bHRzIGZyb20gc2VydmVyIGRhdGFcbiAgICogQHBhcmFtIHtPYmplY3R9IHJlc3BvbnNlIFRoZSBzZXJ2ZXIgcmVzcG9uc2VcbiAgICogQHBhcmFtIHtPYmplY3R9IHVybHMgVGhlIHRhYiB1cmxzXG4gICAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsIGZ1bmN0aW9uPn0gZm9ybWF0dGVycyBUaGUgZmllbGQgZm9ybWF0dGVycyB0byB1c2VcbiAgICovXG4gIHN0YXRpYyBmcm9tIChyZXNwb25zZSwgdXJscywgZm9ybWF0dGVycykge1xuICAgIHJldHVybiBuZXcgVW5pdmVyc2FsUmVzdWx0cyh7XG4gICAgICBxdWVyeUlkOiByZXNwb25zZS5xdWVyeUlkLFxuICAgICAgc2VjdGlvbnM6IFNlY3Rpb24uZnJvbShyZXNwb25zZS5tb2R1bGVzLCB1cmxzLCBmb3JtYXR0ZXJzKVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdCBhIFVuaXZlcnZhbFJlc3VsdHMgb2JqZWN0IHJlcHJlc2VudGluZyBsb2FkaW5nIHJlc3VsdHNcbiAgICogQHJldHVybiB7VW5pdmVyc2FsUmVzdWx0c31cbiAgICovXG4gIHN0YXRpYyBzZWFyY2hMb2FkaW5nICgpIHtcbiAgICByZXR1cm4gbmV3IFVuaXZlcnNhbFJlc3VsdHMoeyBzZWFyY2hTdGF0ZTogU2VhcmNoU3RhdGVzLlNFQVJDSF9MT0FESU5HIH0pO1xuICB9XG59XG4iLCIvKiogQG1vZHVsZSBEaXJlY3RBbnN3ZXIgKi9cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRGlyZWN0QW5zd2VyIHtcbiAgY29uc3RydWN0b3IgKGRpcmVjdEFuc3dlciA9IHt9KSB7XG4gICAgT2JqZWN0LmFzc2lnbih0aGlzLCBkaXJlY3RBbnN3ZXIpO1xuICAgIE9iamVjdC5mcmVlemUodGhpcyk7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGEgRGlyZWN0QW5zd2VyIG1vZGVsIGZyb20gdGhlIGdpdmVuIHNlcnZlciBkYXRhIGFuZCBmb3JtYXR0ZXJzXG4gICAqIEBwYXJhbSB7T2JqZWN0fSByZXNwb25zZSBUaGUgc2VydmVyIGRpcmVjdCBhbnN3ZXJcbiAgICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywgZnVuY3Rpb24+fSBmb3JtYXR0ZXJzIFRoZSBmb3JtYXR0ZXJzIHRvIGFwcGx5IHRvIHRoaXMgZGlyZWN0IGFuc3dlclxuICAgKi9cbiAgc3RhdGljIGZyb20gKHJlc3BvbnNlLCBmb3JtYXR0ZXJzKSB7XG4gICAgY29uc3QgZGF0YSA9IHsgLi4ucmVzcG9uc2UgfTtcbiAgICBjb25zdCB7IGFuc3dlciwgcmVsYXRlZEl0ZW0gfSA9IGRhdGE7XG5cbiAgICBpZiAoYW5zd2VyICYmIGZvcm1hdHRlcnNbYW5zd2VyLmZpZWxkQXBpTmFtZV0pIHtcbiAgICAgIGFuc3dlci52YWx1ZSA9IGZvcm1hdHRlcnNbYW5zd2VyLmZpZWxkQXBpTmFtZV0oXG4gICAgICAgIGFuc3dlci52YWx1ZSxcbiAgICAgICAgcmVsYXRlZEl0ZW0uZGF0YS5maWVsZFZhbHVlcyxcbiAgICAgICAgcmVsYXRlZEl0ZW0udmVydGljYWxDb25maWdJZCxcbiAgICAgICAgdHJ1ZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBEaXJlY3RBbnN3ZXIoZGF0YSk7XG4gIH1cbn1cbiIsIi8qKiBAbW9kdWxlIE5hdmlnYXRpb24gKi9cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTmF2aWdhdGlvbiB7XG4gIGNvbnN0cnVjdG9yICh0YWJPcmRlcikge1xuICAgIHRoaXMudGFiT3JkZXIgPSB0YWJPcmRlciB8fCBbXTtcbiAgICBPYmplY3QuZnJlZXplKHRoaXMpO1xuICB9XG5cbiAgc3RhdGljIGZyb20gKG1vZHVsZXMpIHtcbiAgICBsZXQgbmF2ID0gW107XG4gICAgaWYgKCFtb2R1bGVzIHx8ICFBcnJheS5pc0FycmF5KG1vZHVsZXMpKSB7XG4gICAgICByZXR1cm4gbmF2O1xuICAgIH1cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1vZHVsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIG5hdi5wdXNoKG1vZHVsZXNbaV0udmVydGljYWxDb25maWdJZCk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgTmF2aWdhdGlvbihuYXYpO1xuICB9XG59XG4iLCIvKiogQG1vZHVsZSBWZXJ0aWNhbFJlc3VsdHMgKi9cblxuaW1wb3J0IHsgQW5zd2Vyc0NvcmVFcnJvciB9IGZyb20gJy4uL2Vycm9ycy9lcnJvcnMnO1xuaW1wb3J0IFNlY3Rpb24gZnJvbSAnLi9zZWN0aW9uJztcbmltcG9ydCBTZWFyY2hTdGF0ZXMgZnJvbSAnLi4vc3RvcmFnZS9zZWFyY2hzdGF0ZXMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBWZXJ0aWNhbFJlc3VsdHMge1xuICBjb25zdHJ1Y3RvciAoZGF0YSA9IHt9KSB7XG4gICAgT2JqZWN0LmFzc2lnbih0aGlzLCB7IHNlYXJjaFN0YXRlOiBTZWFyY2hTdGF0ZXMuU0VBUkNIX0NPTVBMRVRFIH0sIGRhdGEpO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGNvbnRleHQgb2YgdGhlIHJlc3VsdHMsIHVzZWQgdG8gcHJvdmlkZSBtb3JlIGluZm9ybWF0aW9uIGFib3V0IHdoeVxuICAgICAqIHRoZXNlIHNwZWNpZmljIHJlc3VsdHMgd2VyZSByZXR1cm5lZC5cbiAgICAgKiBAdHlwZSB7UmVzdWx0c0NvbnRleHR9XG4gICAgICovXG4gICAgdGhpcy5yZXN1bHRzQ29udGV4dCA9IGRhdGEucmVzdWx0c0NvbnRleHQ7XG5cbiAgICBPYmplY3QuZnJlZXplKHRoaXMpO1xuICB9XG5cbiAgLyoqXG4gICAqIEFwcGVuZCB0aGUgcHJvdmlkZWQgcmVzdWx0cyB0byB0aGUgY3VycmVudCByZXN1bHRzXG4gICAqIEBwYXJhbSB7VmVydGljYWxSZXN1bHRzfSByZXN1bHRzIHRoZSByZXN1bHRzIHRvIGFwcGVuZCB0byB0aGUgY3VycmVudCByZXN1bHRzXG4gICAqL1xuICBhcHBlbmQgKHJlc3VsdHMpIHtcbiAgICBpZiAocmVzdWx0cy5yZXN1bHRzQ29udGV4dCAhPT0gdGhpcy5yZXN1bHRzQ29udGV4dCkge1xuICAgICAgdGhyb3cgbmV3IEFuc3dlcnNDb3JlRXJyb3IoJ0Nhbm5vdCBtZXJnZSByZXN1bHRzIHdpdGggZGlmZmVyZW50IGNvbnRleHRzJywgJ1ZlcnRpY2FsUmVzdWx0cycpO1xuICAgIH1cbiAgICBjb25zdCBtZXJnZWQgPSB7IC4uLnRoaXMgfTtcbiAgICBtZXJnZWQucmVzdWx0c0NvbnRleHQgPSB0aGlzLnJlc3VsdHNDb250ZXh0O1xuICAgIG1lcmdlZC5yZXN1bHRzID0gdGhpcy5yZXN1bHRzLmNvbmNhdChyZXN1bHRzLnJlc3VsdHMpO1xuICAgIG1lcmdlZC5tYXAubWFwTWFya2VycyA9IHRoaXMubWFwLm1hcE1hcmtlcnMuY29uY2F0KHJlc3VsdHMubWFwLm1hcE1hcmtlcnMpO1xuICAgIHJldHVybiBuZXcgVmVydGljYWxSZXN1bHRzKG1lcmdlZCk7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIHZlcnRpY2FsIHJlc3VsdHMgZnJvbSBzZXJ2ZXIgZGF0YVxuICAgKiBAcGFyYW0ge09iamVjdH0gcmVzcG9uc2UgVGhlIHNlcnZlciByZXNwb25zZVxuICAgKiBAcGFyYW0ge09iamVjdC48c3RyaW5nLCBmdW5jdGlvbj59IGZvcm1hdHRlcnMgVGhlIGZpZWxkIGZvcm1hdHRlcnMgdG8gdXNlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB2ZXJ0aWNhbEtleSB0aGUgdmVydGljYWwga2V5XG4gICAqL1xuICBzdGF0aWMgZnJvbSAocmVzcG9uc2UsIGZvcm1hdHRlcnMsIHZlcnRpY2FsS2V5KSB7XG4gICAgY29uc3QgZGF0YSA9IFNlY3Rpb24uZnJvbShyZXNwb25zZSwgbnVsbCwgZm9ybWF0dGVycyk7XG4gICAgcmV0dXJuIG5ldyBWZXJ0aWNhbFJlc3VsdHMoeyAuLi5kYXRhLFxuICAgICAgdmVydGljYWxDb25maWdJZDogdmVydGljYWxLZXlcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3QgYSBWZXJ0aWNhbFJlc3VsdHMgb2JqZWN0IHJlcHJlc2VudGluZyBsb2FkaW5nIHJlc3VsdHNcbiAgICogQHJldHVybiB7VmVydGljYWxSZXN1bHRzfVxuICAgKi9cbiAgc3RhdGljIHNlYXJjaExvYWRpbmcgKCkge1xuICAgIHJldHVybiBuZXcgVmVydGljYWxSZXN1bHRzKHsgc2VhcmNoU3RhdGU6IFNlYXJjaFN0YXRlcy5TRUFSQ0hfTE9BRElORyB9KTtcbiAgfVxuXG4gIHN0YXRpYyBhcmVEdXBsaWNhdGVOYW1lc0FsbG93ZWQgKCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59XG4iLCIvKiogQG1vZHVsZSBTcGVsbENoZWNrICovXG5cbi8qKlxuICogU3BlbGxDaGVjayBpcyB0aGUgY29yZSBzdGF0ZSBtb2RlbFxuICogdG8gcG93ZXIgdGhlIFNwZWxsQ2hlY2sgY29tcG9uZW50XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNwZWxsQ2hlY2sge1xuICBjb25zdHJ1Y3RvciAoZGF0YSkge1xuICAgIC8qKlxuICAgICAqIFRoZSBvcmlnaW5hbCBxdWVyeVxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgdGhpcy5xdWVyeSA9IGRhdGEucXVlcnkgfHwgbnVsbDtcblxuICAgIC8qKlxuICAgICAqIFRoZSBjb3JyZWN0ZWQgcXVlcnlcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMuY29ycmVjdGVkUXVlcnkgPSBkYXRhLmNvcnJlY3RlZFF1ZXJ5IHx8IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgc3BlbGwgY2hlY2sgdHlwZVxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgdGhpcy50eXBlID0gZGF0YS50eXBlIHx8IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBTaG91bGQgc2hvdyBzcGVsbCBjaGVjayBvciBub3RcbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICB0aGlzLnNob3VsZFNob3cgPSB0aGlzLmNvcnJlY3RlZFF1ZXJ5ICE9PSBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIHNwZWxsIGNoZWNrIG1vZGVsIGZyb20gdGhlIHByb3ZpZGVkIGRhdGFcbiAgICogQHBhcmFtIHtPYmplY3R9IHJlc3BvbnNlIFRoZSBzcGVsbCBjaGVjayByZXNwb25zZVxuICAgKi9cbiAgc3RhdGljIGZyb20gKHJlc3BvbnNlKSB7XG4gICAgaWYgKCFyZXNwb25zZSkge1xuICAgICAgcmV0dXJuIHt9O1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgU3BlbGxDaGVjayh7XG4gICAgICBxdWVyeTogcmVzcG9uc2Uub3JpZ2luYWxRdWVyeSxcbiAgICAgIGNvcnJlY3RlZFF1ZXJ5OiByZXNwb25zZS5jb3JyZWN0ZWRRdWVyeSxcbiAgICAgIHR5cGU6IHJlc3BvbnNlLnR5cGVcbiAgICB9KTtcbiAgfVxufVxuIiwiLyoqIEBtb2R1bGUgU3RvcmFnZUtleXMgKi9cblxuLyoqXG4gKiBTdG9yYWdlS2V5cyBpcyBhbiBFTlVNIGFyZSBjb25zaWRlcmVkIHRoZSByb290IGNvbnRleHRcbiAqIGZvciBob3cgZGF0YSBpcyBzdG9yZWQgYW5kIHNjb3BlZCBpbiB0aGUgc3RvcmFnZS5cbiAqXG4gKiBAZW51bSB7c3RyaW5nfVxuICovXG5leHBvcnQgZGVmYXVsdCB7XG4gIE5BVklHQVRJT046ICduYXZpZ2F0aW9uJyxcbiAgVU5JVkVSU0FMX1JFU1VMVFM6ICd1bml2ZXJzYWwtcmVzdWx0cycsXG4gIFZFUlRJQ0FMX1JFU1VMVFM6ICd2ZXJ0aWNhbC1yZXN1bHRzJyxcbiAgQUxURVJOQVRJVkVfVkVSVElDQUxTOiAnYWx0ZXJuYXRpdmUtdmVydGljYWxzJyxcbiAgQVVUT0NPTVBMRVRFOiAnYXV0b2NvbXBsZXRlJyxcbiAgRElSRUNUX0FOU1dFUjogJ2RpcmVjdC1hbnN3ZXInLFxuICBGSUxURVI6ICdmaWx0ZXInLFxuICBRVUVSWTogJ3F1ZXJ5JyxcbiAgUVVFUllfSUQ6ICdxdWVyeS1pZCcsXG4gIEZBQ0VUX0ZJTFRFUjogJ2ZhY2V0LWZpbHRlcicsXG4gIERZTkFNSUNfRklMVEVSUzogJ2R5bmFtaWMtZmlsdGVycycsXG4gIFBBUkFNUzogJ3BhcmFtcycsXG4gIEdFT0xPQ0FUSU9OOiAnZ2VvbG9jYXRpb24nLFxuICBJTlRFTlRTOiAnaW50ZW50cycsXG4gIFFVRVNUSU9OX1NVQk1JU1NJT046ICdxdWVzdGlvbi1zdWJtaXNzaW9uJyxcbiAgU0VBUkNIX0NPTkZJRzogJ3NlYXJjaC1jb25maWcnLFxuICBTRUFSQ0hfT0ZGU0VUOiAnc2VhcmNoLW9mZnNldCcsXG4gIFNQRUxMX0NIRUNLOiAnc3BlbGwtY2hlY2snLFxuICBMT0NBVElPTl9CSUFTOiAnbG9jYXRpb24tYmlhcycsXG4gIFNFU1NJT05TX09QVF9JTjogJ3Nlc3Npb25zLW9wdC1pbicsXG4gIFZFUlRJQ0FMX1BBR0VTX0NPTkZJRzogJ3ZlcnRpY2FsLXBhZ2VzLWNvbmZpZycsXG4gIExPQ0FMRTogJ2xvY2FsZScsXG4gIFNPUlRfQllTOiAnc29ydC1ieXMnLFxuICBOT19SRVNVTFRTX0NPTkZJRzogJ25vLXJlc3VsdHMtY29uZmlnJ1xufTtcbiIsIi8qKiBAbW9kdWxlIER5bmFtaWNGaWx0ZXJzICovXG5cbi8qKlxuICogTW9kZWwgcmVwcmVzZW50aW5nIGEgc2V0IG9mIGR5bmFtaWMgZmlsdGVyc1xuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBEeW5hbWljRmlsdGVycyB7XG4gIGNvbnN0cnVjdG9yIChkYXRhKSB7XG4gICAgLyoqXG4gICAgICogVGhlIGxpc3Qgb2YgZmlsdGVycyB0aGlzIG1vZGVsIGhvbGRzXG4gICAgICogQHR5cGUge3tsYWJlbDogc3RyaW5nLCBmaWVsZElkOiBzdHJpbmcsIG9wdGlvbnM6IG9iamVjdFtdfX1cbiAgICAgKi9cbiAgICB0aGlzLmZpbHRlcnMgPSBkYXRhLmZpbHRlcnMgfHwgW107XG5cbiAgICAvKipcbiAgICAgKiBUaGUge0BsaW5rIFJlc3VsdHNDb250ZXh0fSBvZiB0aGUgZmFjZXRzLlxuICAgICAqIEB0eXBlIHtSZXN1bHRzQ29udGV4dH1cbiAgICAgKi9cbiAgICB0aGlzLnJlc3VsdHNDb250ZXh0ID0gZGF0YS5yZXN1bHRzQ29udGV4dDtcbiAgICBPYmplY3QuZnJlZXplKHRoaXMpO1xuICB9XG5cbiAgLyoqXG4gICAqIE9yZ2FuaXplICdmYWNldHMnIGZyb20gdGhlIGFwaSByZXNwb25zZSBpbnRvIGR5bmFtaWMgZmlsdGVyc1xuICAgKiBAcGFyYW0ge09iamVjdH0gcmVzcG9uc2UgZHluYW1pYyBmaWx0ZXIgcmVzcG9uc2UgZnJvbSB0aGUgYXBpXG4gICAqIEByZXR1cm5zIHtEeW5hbWljRmlsdGVyc31cbiAgICovXG4gIHN0YXRpYyBmcm9tIChyZXNwb25zZSkge1xuICAgIGNvbnN0IGZhY2V0cyA9IHJlc3BvbnNlLmZhY2V0cyB8fCBbXTtcbiAgICBjb25zdCBkeW5hbWljRmlsdGVycyA9IGZhY2V0cy5tYXAoZiA9PiAoe1xuICAgICAgbGFiZWw6IGZbJ2Rpc3BsYXlOYW1lJ10sXG4gICAgICBmaWVsZElkOiBmWydmaWVsZElkJ10sXG4gICAgICBvcHRpb25zOiBmLm9wdGlvbnMubWFwKG8gPT4gKHtcbiAgICAgICAgbGFiZWw6IG9bJ2Rpc3BsYXlOYW1lJ10sXG4gICAgICAgIGNvdW50TGFiZWw6IG9bJ2NvdW50J10sXG4gICAgICAgIHNlbGVjdGVkOiBvWydzZWxlY3RlZCddLFxuICAgICAgICBmaWx0ZXI6IG9bJ2ZpbHRlciddXG4gICAgICB9KSlcbiAgICB9KSk7XG5cbiAgICByZXR1cm4gbmV3IER5bmFtaWNGaWx0ZXJzKHtcbiAgICAgIGZpbHRlcnM6IGR5bmFtaWNGaWx0ZXJzLFxuICAgICAgcmVzdWx0c0NvbnRleHQ6IHJlc3BvbnNlLnJlc3VsdHNDb250ZXh0XG4gICAgfSk7XG4gIH1cbn1cbiIsIi8qKiBAbW9kdWxlIFNlYXJjaEludGVudHMgKi9cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2VhcmNoSW50ZW50cyB7XG4gIGNvbnN0cnVjdG9yIChpbnRlbnRzKSB7XG4gICAgLyoqXG4gICAgICogVGhlIGludGVudCB0byBmaW5kIHJlc3VsdHMgYmFzZWQgb24gdGhlIHVzZXIncyBsb2NhdGlvblxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqL1xuICAgIHRoaXMubmVhck1lID0gaW50ZW50cy5uZWFyTWU7XG5cbiAgICBPYmplY3QuZnJlZXplKHRoaXMpO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBTZWFyY2hJbnRlbnRzIGZyb20gc2VydmVyIHJlc3BvbnNlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSByZXNwb25zZSBUaGUgc2VydmVyIHJlc3BvbnNlIGludGVudHNcbiAgICogQHJldHVybnMge1NlYXJjaEludGVudHN9XG4gICAqL1xuICBzdGF0aWMgZnJvbSAocmVzcG9uc2UpIHtcbiAgICBjb25zdCBpbnRlbnRzID0gcmVzcG9uc2UgfHwgW107XG5cbiAgICByZXR1cm4gbmV3IFNlYXJjaEludGVudHMoe1xuICAgICAgbmVhck1lOiBpbnRlbnRzLmluY2x1ZGVzKCdORUFSX01FJylcbiAgICB9KTtcbiAgfVxufVxuIiwiLyoqIEBtb2R1bGUgTG9jYXRpb25CaWFzICovXG5cbi8qKlxuICogTG9jYXRpb25CaWFzIGlzIHRoZSBjb3JlIHN0YXRlIG1vZGVsXG4gKiB0byBwb3dlciB0aGUgTG9jYXRpb25CaWFzIGNvbXBvbmVudFxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBMb2NhdGlvbkJpYXMge1xuICBjb25zdHJ1Y3RvciAoZGF0YSkge1xuICAgIC8qKlxuICAgICAqIFRoZSBsb2NhdGlvbiBiaWFzIGFjY3VyYWN5IHdoaWNoIGFyZSBJUCwgREVWSUNFIGFuZCBVTktOV09OXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLmFjY3VyYWN5ID0gZGF0YS5hY2N1cmFjeSB8fCBudWxsO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGxhdGl0dWRlIHVzZWQgZm9yIGxvY2F0aW9uIGJpYXNcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIHRoaXMubGF0aXR1ZGUgPSBkYXRhLmxhdGl0dWRlIHx8IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgbG9uZ2l0dWRlIHVzZWQgZm9yIGxvY2F0aW9uIGJpYXNcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIHRoaXMubG9uZ2l0dWRlID0gZGF0YS5sb25naXR1ZGUgfHwgbnVsbDtcblxuICAgIC8qKlxuICAgICAqIFRoZSBsb2NhdGlvbiBkaXNwbGF5IG5hbWVcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMubG9jYXRpb25EaXNwbGF5TmFtZSA9IGRhdGEubG9jYXRpb25EaXNwbGF5TmFtZSB8fCBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIGxvY2F0aW9uIGJpYXMgbW9kZWwgZnJvbSB0aGUgcHJvdmlkZWQgZGF0YVxuICAgKiBAcGFyYW0ge09iamVjdH0gcmVzcG9uc2UgVGhlIGxvY2F0aW9uIGJpYXMgcmVzcG9uc2VcbiAgICovXG4gIHN0YXRpYyBmcm9tIChyZXNwb25zZSkge1xuICAgIGlmICghcmVzcG9uc2UpIHtcbiAgICAgIHJldHVybiBuZXcgTG9jYXRpb25CaWFzKHtcbiAgICAgICAgYWNjdXJhY3k6ICdVTktOT1dOJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBMb2NhdGlvbkJpYXMoe1xuICAgICAgYWNjdXJhY3k6IHJlc3BvbnNlLmFjY3VyYWN5LFxuICAgICAgbGF0aXR1ZGU6IHJlc3BvbnNlLmxhdGl0dWRlLFxuICAgICAgbG9uZ2l0dWRlOiByZXNwb25zZS5sb25naXR1ZGUsXG4gICAgICBsb2NhdGlvbkRpc3BsYXlOYW1lOiByZXNwb25zZS5sb2NhdGlvbkRpc3BsYXlOYW1lXG4gICAgfSk7XG4gIH1cbn1cbiIsIi8qKiBAbW9kdWxlIEFsdGVybmF0aXZlVmVydGljYWxzICovXG5cbmltcG9ydCBTZWN0aW9uIGZyb20gJy4vc2VjdGlvbic7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFsdGVybmF0aXZlVmVydGljYWxzIHtcbiAgY29uc3RydWN0b3IgKGRhdGEpIHtcbiAgICAvKipcbiAgICAgKiBBbHRlcm5hdGl2ZSB2ZXJ0aWNhbHMgdGhhdCBoYXZlIHJlc3VsdHMgZm9yIHRoZSBjdXJyZW50IHF1ZXJ5XG4gICAgICogQHR5cGUge1NlY3Rpb259XG4gICAgICovXG4gICAgdGhpcy5hbHRlcm5hdGl2ZVZlcnRpY2FscyA9IGRhdGEgfHwgW107XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGFsdGVybmF0aXZlIHZlcnRpY2FscyBmcm9tIHNlcnZlciBkYXRhXG4gICAqIEBwYXJhbSB7T2JqZWN0fSByZXNwb25zZSBUaGUgc2VydmVyIHJlc3BvbnNlXG4gICAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsIGZ1bmN0aW9uPn0gZm9ybWF0dGVycyBUaGUgZmllbGQgZm9ybWF0dGVycyB0byB1c2VcbiAgICovXG4gIHN0YXRpYyBmcm9tIChyZXNwb25zZSwgZm9ybWF0dGVycykge1xuICAgIGNvbnN0IGFsdGVybmF0aXZlVmVydGljYWxzID0gcmVzcG9uc2UuYWx0ZXJuYXRpdmVWZXJ0aWNhbHM7XG4gICAgaWYgKCFhbHRlcm5hdGl2ZVZlcnRpY2FscyB8fCAhYWx0ZXJuYXRpdmVWZXJ0aWNhbHMubW9kdWxlcykge1xuICAgICAgcmV0dXJuIG5ldyBBbHRlcm5hdGl2ZVZlcnRpY2FscygpO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgQWx0ZXJuYXRpdmVWZXJ0aWNhbHMoU2VjdGlvbi5mcm9tKGFsdGVybmF0aXZlVmVydGljYWxzLm1vZHVsZXMsIHt9LCBmb3JtYXR0ZXJzKSk7XG4gIH1cbn1cbiIsIi8qKiBAbW9kdWxlIFJlc3VsdHNDb250ZXh0ICovXG5cbi8qKlxuICogUmVzdWx0c0NvbnRleHQgaXMgYW4gRU5VTSB0aGF0IHByb3ZpZGVzIGNvbnRleHRcbiAqIGZvciB0aGUgcmVzdWx0cyB0aGF0IHdlIGFyZSBzdG9yaW5nIGZyb20gc2VydmVyXG4gKiBkYXRhXG4gKiBAZW51bSB7c3RyaW5nfVxuICovXG5leHBvcnQgZGVmYXVsdCB7XG4gIE5PUk1BTDogJ25vcm1hbCcsXG4gIE5PX1JFU1VMVFM6ICduby1yZXN1bHRzJ1xufTtcbiIsIi8qKiBAbW9kdWxlIFNlYXJjaERhdGFUcmFuc2Zvcm1lciAqL1xuXG5pbXBvcnQgVW5pdmVyc2FsUmVzdWx0cyBmcm9tICcuLi9tb2RlbHMvdW5pdmVyc2FscmVzdWx0cyc7XG5pbXBvcnQgRGlyZWN0QW5zd2VyIGZyb20gJy4uL21vZGVscy9kaXJlY3RhbnN3ZXInO1xuaW1wb3J0IE5hdmlnYXRpb24gZnJvbSAnLi4vbW9kZWxzL25hdmlnYXRpb24nO1xuaW1wb3J0IFZlcnRpY2FsUmVzdWx0cyBmcm9tICcuLi9tb2RlbHMvdmVydGljYWxyZXN1bHRzJztcbmltcG9ydCBTcGVsbENoZWNrIGZyb20gJy4uL21vZGVscy9zcGVsbGNoZWNrJztcbmltcG9ydCBTdG9yYWdlS2V5cyBmcm9tICcuLi9zdG9yYWdlL3N0b3JhZ2VrZXlzJztcbmltcG9ydCBEeW5hbWljRmlsdGVycyBmcm9tICcuLi9tb2RlbHMvZHluYW1pY2ZpbHRlcnMnO1xuaW1wb3J0IFNlYXJjaEludGVudHMgZnJvbSAnLi4vbW9kZWxzL3NlYXJjaGludGVudHMnO1xuaW1wb3J0IExvY2F0aW9uQmlhcyBmcm9tICcuLi9tb2RlbHMvbG9jYXRpb25iaWFzJztcbmltcG9ydCBBbHRlcm5hdGl2ZVZlcnRpY2FscyBmcm9tICcuLi9tb2RlbHMvYWx0ZXJuYXRpdmV2ZXJ0aWNhbHMnO1xuaW1wb3J0IFJlc3VsdHNDb250ZXh0IGZyb20gJy4uL3N0b3JhZ2UvcmVzdWx0c2NvbnRleHQnO1xuXG4vKipcbiAqIEEgRGF0YSBUcmFuc2Zvcm1lciB0aGF0IHRha2VzIHRoZSByZXNwb25zZSBvYmplY3QgZnJvbSBhIFNlYXJjaCByZXF1ZXN0XG4gKiBBbmQgdHJhbnNmb3JtcyBpbiB0byBhIGZyb250LWVuZCBvcmllbnRlZCBkYXRhIHN0cnVjdHVyZSB0aGF0IG91clxuICogY29tcG9uZW50IGxpYnJhcnkgYW5kIGNvcmUgc3RvcmFnZSB1bmRlcnN0YW5kLlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTZWFyY2hEYXRhVHJhbnNmb3JtZXIge1xuICBzdGF0aWMgdHJhbnNmb3JtIChkYXRhLCB1cmxzID0ge30sIGZvcm1hdHRlcnMpIHtcbiAgICBsZXQgcmVzcG9uc2UgPSBkYXRhLnJlc3BvbnNlO1xuICAgIHJldHVybiB7XG4gICAgICBbU3RvcmFnZUtleXMuUVVFUllfSURdOiByZXNwb25zZS5xdWVyeUlkLFxuICAgICAgW1N0b3JhZ2VLZXlzLk5BVklHQVRJT05dOiBOYXZpZ2F0aW9uLmZyb20ocmVzcG9uc2UubW9kdWxlcyksXG4gICAgICBbU3RvcmFnZUtleXMuRElSRUNUX0FOU1dFUl06IERpcmVjdEFuc3dlci5mcm9tKHJlc3BvbnNlLmRpcmVjdEFuc3dlciwgZm9ybWF0dGVycyksXG4gICAgICBbU3RvcmFnZUtleXMuVU5JVkVSU0FMX1JFU1VMVFNdOiBVbml2ZXJzYWxSZXN1bHRzLmZyb20ocmVzcG9uc2UsIHVybHMsIGZvcm1hdHRlcnMpLFxuICAgICAgW1N0b3JhZ2VLZXlzLklOVEVOVFNdOiBTZWFyY2hJbnRlbnRzLmZyb20ocmVzcG9uc2Uuc2VhcmNoSW50ZW50cyksXG4gICAgICBbU3RvcmFnZUtleXMuU1BFTExfQ0hFQ0tdOiBTcGVsbENoZWNrLmZyb20ocmVzcG9uc2Uuc3BlbGxDaGVjayksXG4gICAgICBbU3RvcmFnZUtleXMuTE9DQVRJT05fQklBU106IExvY2F0aW9uQmlhcy5mcm9tKHJlc3BvbnNlLmxvY2F0aW9uQmlhcylcbiAgICB9O1xuICB9XG5cbiAgc3RhdGljIHRyYW5zZm9ybVZlcnRpY2FsIChkYXRhLCBmb3JtYXR0ZXJzLCB2ZXJ0aWNhbEtleSkge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gU2VhcmNoRGF0YVRyYW5zZm9ybWVyLl9wYXJzZVZlcnRpY2FsUmVzcG9uc2UoZGF0YS5yZXNwb25zZSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIFtTdG9yYWdlS2V5cy5RVUVSWV9JRF06IHJlc3BvbnNlLnF1ZXJ5SWQsXG4gICAgICBbU3RvcmFnZUtleXMuTkFWSUdBVElPTl06IG5ldyBOYXZpZ2F0aW9uKCksIC8vIFZlcnRpY2FsIGRvZXNuJ3QgcmVzcG9uZCB3aXRoIG9yZGVyaW5nLCBzbyB1c2UgZW1wdHkgbmF2LlxuICAgICAgW1N0b3JhZ2VLZXlzLlZFUlRJQ0FMX1JFU1VMVFNdOiBWZXJ0aWNhbFJlc3VsdHMuZnJvbShyZXNwb25zZSwgZm9ybWF0dGVycywgdmVydGljYWxLZXkpLFxuICAgICAgW1N0b3JhZ2VLZXlzLkRZTkFNSUNfRklMVEVSU106IER5bmFtaWNGaWx0ZXJzLmZyb20ocmVzcG9uc2UpLFxuICAgICAgW1N0b3JhZ2VLZXlzLklOVEVOVFNdOiBTZWFyY2hJbnRlbnRzLmZyb20ocmVzcG9uc2Uuc2VhcmNoSW50ZW50cyksXG4gICAgICBbU3RvcmFnZUtleXMuU1BFTExfQ0hFQ0tdOiBTcGVsbENoZWNrLmZyb20ocmVzcG9uc2Uuc3BlbGxDaGVjayksXG4gICAgICBbU3RvcmFnZUtleXMuQUxURVJOQVRJVkVfVkVSVElDQUxTXTogQWx0ZXJuYXRpdmVWZXJ0aWNhbHMuZnJvbShyZXNwb25zZSwgZm9ybWF0dGVycyksXG4gICAgICBbU3RvcmFnZUtleXMuTE9DQVRJT05fQklBU106IExvY2F0aW9uQmlhcy5mcm9tKHJlc3BvbnNlLmxvY2F0aW9uQmlhcylcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIEZvcm0gcmVzcG9uc2UgYXMgaWYgdGhlIHJlc3VsdHMgZnJvbSBgYWxsUmVzdWx0c0ZvclZlcnRpY2FsYCB3ZXJlIHRoZSBhY3R1YWxcbiAgICogcmVzdWx0cyBpbiBgcmVzdWx0c2BcbiAgICogQHBhcmFtIHtPYmplY3R9IHJlc3BvbnNlIFRoZSBzZXJ2ZXIgcmVzcG9uc2VcbiAgICovXG4gIHN0YXRpYyBfcGFyc2VWZXJ0aWNhbFJlc3BvbnNlIChyZXNwb25zZSkge1xuICAgIGNvbnN0IGhhc1Jlc3VsdHMgPSByZXNwb25zZS5yZXN1bHRzICYmIHJlc3BvbnNlLnJlc3VsdHNDb3VudCA+IDA7XG4gICAgY29uc3QgcmVzdWx0c0NvbnRleHQgPSBoYXNSZXN1bHRzID8gUmVzdWx0c0NvbnRleHQuTk9STUFMIDogUmVzdWx0c0NvbnRleHQuTk9fUkVTVUxUUztcblxuICAgIGlmIChyZXN1bHRzQ29udGV4dCA9PT0gUmVzdWx0c0NvbnRleHQuTk9fUkVTVUxUUykge1xuICAgICAgY29uc3QgeyByZXN1bHRzLCByZXN1bHRzQ291bnQsIGZhY2V0cyB9ID0gcmVzcG9uc2UuYWxsUmVzdWx0c0ZvclZlcnRpY2FsIHx8IHt9O1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4ucmVzcG9uc2UsXG4gICAgICAgIHJlc3VsdHM6IHJlc3VsdHMgfHwgW10sXG4gICAgICAgIHJlc3VsdHNDb3VudDogcmVzdWx0c0NvdW50IHx8IDAsXG4gICAgICAgIHJlc3VsdHNDb250ZXh0LFxuICAgICAgICBmYWNldHNcbiAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAuLi5yZXNwb25zZSxcbiAgICAgIHJlc3VsdHNDb250ZXh0XG4gICAgfTtcbiAgfVxufVxuIiwiLyoqIEBtb2R1bGUgUXVlc3Rpb25TdWJtaXNzaW9uICovXG5cbi8qKlxuICogUXVlc3Rpb25TdWJtaXNzaW9uIGlzIHRoZSBjb3JlIHN0YXRlIG1vZGVsXG4gKiB0byBwb3dlciB0aGUgUXVlc3Rpb25TdWJtaXNzaW9uIGNvbXBvbmVudFxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBRdWVzdGlvblN1Ym1pc3Npb24ge1xuICBjb25zdHJ1Y3RvciAocXVlc3Rpb24gPSB7fSwgZXJyb3JzKSB7XG4gICAgLyoqXG4gICAgICogVGhlIGF1dGhvciBvZiB0aGUgcXVlc3Rpb25cbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMubmFtZSA9IHF1ZXN0aW9uLm5hbWUgfHwgbnVsbDtcblxuICAgIC8qKlxuICAgICAqIFRoZSBlbWFpbCBhZGRyZXNzIG9mIHRoZSBxdWVzdGlvblxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgdGhpcy5lbWFpbCA9IHF1ZXN0aW9uLmVtYWlsIHx8IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBUcnVlIGlmIHRoZSBwcml2YWN5IHBvbGljeSB3YXMgYXBwcm92ZWRcbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICB0aGlzLnByaXZhY3lQb2xpY3kgPSBxdWVzdGlvbi5wcml2YWN5UG9saWN5IHx8IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgcXVlc3Rpb24gdG8gYmUgc2VudCB0byB0aGUgc2VydmVyXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLnF1ZXN0aW9uVGV4dCA9IHF1ZXN0aW9uLnF1ZXN0aW9uVGV4dCB8fCBudWxsO1xuXG4gICAgLyoqXG4gICAgICogQWx0ZXJuYXRpdmUgcXVlc3Rpb24gbWV0YSBpbmZvcm1hdGlvblxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgdGhpcy5xdWVzdGlvbkRlc2NyaXB0aW9uID0gcXVlc3Rpb24ucXVlc3Rpb25EZXNjcmlwdGlvbiB8fCBudWxsO1xuXG4gICAgLyoqXG4gICAgICogV2hldGhlciB0aGUgZm9ybSBpcyBleHBhbmRlZCBvciBub3QuIERlZmF1bHRzIHRvIHRydWUuXG4gICAgICovXG4gICAgdGhpcy5xdWVzdGlvbkV4cGFuZGVkID0gdHlwZW9mIHF1ZXN0aW9uLmV4cGFuZGVkICE9PSAnYm9vbGVhbicgfHwgcXVlc3Rpb24uZXhwYW5kZWQ7XG5cbiAgICAvKipcbiAgICAgKiBDb250YWlucyBhbnkgZXJyb3JzIGFib3V0IHRoZSBxdWVzdGlvbiBzdWJtaXNzaW9uXG4gICAgICogQHR5cGUge29iamVjdH1cbiAgICAgKi9cbiAgICB0aGlzLmVycm9ycyA9IGVycm9ycyB8fCBudWxsO1xuXG4gICAgLyoqXG4gICAgICogV2hldGhlciB0aGUgZm9ybSBoYXMgYmVlbiBzdWJtaXR0ZWQgb3Igbm90LiBEZWZhdWx0cyB0byBmYWxzZS5cbiAgICAgKi9cbiAgICB0aGlzLnF1ZXN0aW9uU3VibWl0dGVkID0gcXVlc3Rpb24uc3VibWl0dGVkIHx8IGZhbHNlO1xuXG4gICAgT2JqZWN0LmZyZWV6ZSh0aGlzKTtcbiAgfVxuXG4gIHN0YXRpYyBzdWJtaXR0ZWQgKCkge1xuICAgIHJldHVybiB7XG4gICAgICBxdWVzdGlvblN1Ym1pdHRlZDogdHJ1ZSxcbiAgICAgIHF1ZXN0aW9uRXhwYW5kZWQ6IHRydWVcbiAgICB9O1xuICB9XG5cbiAgc3RhdGljIGVycm9ycyAocXVlc3Rpb24sIGVycm9ycykge1xuICAgIHJldHVybiBRdWVzdGlvblN1Ym1pc3Npb24ocXVlc3Rpb24sIGVycm9ycyk7XG4gIH1cbn1cbiIsIi8qKiBAbW9kdWxlIEZpbHRlciAqL1xuXG4vKipcbiAqIFJlcHJlc2VudHMgYW4gYXBpIGZpbHRlciBhbmQgcHJvdmlkZXMgc3RhdGljIG1ldGhvZHMgZm9yIGVhc2lseSBjb25zdHJ1Y3RpbmcgRmlsdGVycy5cbiAqIFNlZSBodHRwczovL2RldmVsb3Blci55ZXh0LmNvbS9kb2NzL2FwaS1yZWZlcmVuY2UvI29wZXJhdGlvbi9saXN0RW50aXRpZXMgZm9yIHN0cnVjdHVyZSBkZXRhaWxzXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEZpbHRlciB7XG4gIGNvbnN0cnVjdG9yIChkYXRhID0ge30pIHtcbiAgICBPYmplY3QuYXNzaWduKHRoaXMsIGRhdGEpO1xuICAgIE9iamVjdC5mcmVlemUodGhpcyk7XG4gIH1cblxuICAvKipcbiAgICogUGFyc2UgYSBKU09OIGZvcm1hdCBmaWx0ZXIgcmV0dXJuZWQgZnJvbSB0aGUgc2VydmVyIGludG8gYSBGaWx0ZXJcbiAgICogQHBhcmFtIHsqfSByZXNwb25zZUZpbHRlciBBIGZpbHRlciBpbiBKU09OIGZvcm1hdCByZXR1cm5lZCBmcm9tIHRoZSBiYWNrZW5kXG4gICAqIEByZXR1cm5zIHtGaWx0ZXJ9XG4gICAqL1xuICBzdGF0aWMgZnJvbVJlc3BvbnNlIChyZXNwb25zZUZpbHRlcikge1xuICAgIHJldHVybiBuZXcgRmlsdGVyKEpTT04ucGFyc2UocmVzcG9uc2VGaWx0ZXIpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm4gYSBuZXcgRmlsdGVyIHJlcHJlc2VudGluZyB0aGUgT1Igb2YgYWxsIHByb3ZpZGVkIGZpbHRlcnNcbiAgICogQHBhcmFtICB7Li4uRmlsdGVyfSBmaWx0ZXJzIFRoZSBmaWx0ZXJzIHRvIE9SIHRvZ2V0aGVyXG4gICAqIEByZXR1cm5zIHtGaWx0ZXJ9XG4gICAqL1xuICBzdGF0aWMgb3IgKC4uLmZpbHRlcnMpIHtcbiAgICByZXR1cm4gbmV3IEZpbHRlcih7XG4gICAgICAnJG9yJzogZmlsdGVyc1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiBhIG5ldyBGaWx0ZXIgcmVwcmVzZW50aW5nIHRoZSBBTkQgb2YgYWxsIHByb3ZpZGVkIGZpbHRlcnNcbiAgICogQHBhcmFtICB7Li4uRmlsdGVyfSBmaWx0ZXJzIFRoZSBmaWx0ZXJzIHRvIEFORCB0b2dldGhlclxuICAgKiBAcmV0dXJucyB7RmlsdGVyfVxuICAgKi9cbiAgc3RhdGljIGFuZCAoLi4uZmlsdGVycykge1xuICAgIHJldHVybiBuZXcgRmlsdGVyKHtcbiAgICAgICckYW5kJzogZmlsdGVyc1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIE9SIGZpbHRlcnMgd2l0aCB0aGUgc2FtZSBrZXlzLCB0aGVuIEFORCB0aGUgcmVzdWx0aW5nIGdyb3Vwc1xuICAgKiBAcGFyYW0gIHsuLi5GaWx0ZXJ9IGZpbHRlcnMgVGhlIGZpbHRlcnMgdG8gZ3JvdXBcbiAgICogQHJldHVybnMge0ZpbHRlcn1cbiAgICovXG4gIHN0YXRpYyBncm91cCAoLi4uZmlsdGVycykge1xuICAgIGNvbnN0IGdyb3VwcyA9IHt9O1xuICAgIGZvciAoY29uc3QgZmlsdGVyIG9mIGZpbHRlcnMpIHtcbiAgICAgIGNvbnN0IGtleSA9IE9iamVjdC5rZXlzKGZpbHRlcilbMF07XG4gICAgICBpZiAoIWdyb3Vwc1trZXldKSB7XG4gICAgICAgIGdyb3Vwc1trZXldID0gW107XG4gICAgICB9XG4gICAgICBncm91cHNba2V5XS5wdXNoKGZpbHRlcik7XG4gICAgfVxuXG4gICAgY29uc3QgZ3JvdXBGaWx0ZXJzID0gW107XG4gICAgZm9yIChjb25zdCBmaWVsZCBvZiBPYmplY3Qua2V5cyhncm91cHMpKSB7XG4gICAgICBncm91cEZpbHRlcnMucHVzaChncm91cHNbZmllbGRdLmxlbmd0aCA+IDEgPyBGaWx0ZXIub3IoLi4uZ3JvdXBzW2ZpZWxkXSkgOiBncm91cHNbZmllbGRdWzBdKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZ3JvdXBGaWx0ZXJzLmxlbmd0aCA+IDEgPyBGaWx0ZXIuYW5kKC4uLmdyb3VwRmlsdGVycykgOiBncm91cEZpbHRlcnNbMF07XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGEgbmV3IFwiZXF1YWwgdG9cIiBmaWx0ZXIgZm9yIGEgZmllbGRcbiAgICogQHBhcmFtIHtzdHJpbmd9IGZpZWxkIFRoZSBzdWJqZWN0IGZpZWxkIG9mIHRoZSBmaWx0ZXJcbiAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdGhlIGZpZWxkIHNob3VsZCBiZSBlcXVhbCB0b1xuICAgKiBAcmV0dXJucyB7RmlsdGVyfVxuICAgKi9cbiAgc3RhdGljIGVxdWFsIChmaWVsZCwgdmFsdWUpIHtcbiAgICByZXR1cm4gRmlsdGVyLl9mcm9tTWF0Y2hlcihmaWVsZCwgJyRlcScsIHZhbHVlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBuZXcgXCJsZXNzIHRoYW5cIiBmaWx0ZXIgZm9yIGEgZmllbGRcbiAgICogQHBhcmFtIHtzdHJpbmd9IGZpZWxkIFRoZSBzdWJqZWN0IGZpZWxkIG9mIHRoZSBmaWx0ZXJcbiAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdGhlIGZpZWxkIHNob3VsZCBiZSBsZXNzIHRoYW5cbiAgICogQHJldHVybnMge0ZpbHRlcn1cbiAgICovXG4gIHN0YXRpYyBsZXNzVGhhbiAoZmllbGQsIHZhbHVlKSB7XG4gICAgcmV0dXJuIEZpbHRlci5fZnJvbU1hdGNoZXIoZmllbGQsICckbHQnLCB2YWx1ZSk7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGEgbmV3IFwibGVzcyB0aGFuIG9yIGVxdWFsIHRvXCIgZmlsdGVyIGZvciBhIGZpZWxkXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBmaWVsZCBUaGUgc3ViamVjdCBmaWVsZCBvZiB0aGUgZmlsdGVyXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRoZSBmaWVsZCBzaG91bGQgYmUgbGVzcyB0aGFuIG9yIGVxdWFsIHRvXG4gICAqIEByZXR1cm5zIHtGaWx0ZXJ9XG4gICAqL1xuICBzdGF0aWMgbGVzc1RoYW5FcXVhbCAoZmllbGQsIHZhbHVlKSB7XG4gICAgcmV0dXJuIEZpbHRlci5fZnJvbU1hdGNoZXIoZmllbGQsICckbGUnLCB2YWx1ZSk7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGEgbmV3IFwiZ3JlYXRlciB0aGFuXCIgZmlsdGVyIGZvciBhIGZpZWxkXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBmaWVsZCBUaGUgc3ViamVjdCBmaWVsZCBvZiB0aGUgZmlsdGVyXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRoZSBmaWVsZCBzaG91bGQgYmUgZ3JlYXRlciB0aGFuXG4gICAqIEByZXR1cm5zIHtGaWx0ZXJ9XG4gICAqL1xuICBzdGF0aWMgZ3JlYXRlclRoYW4gKGZpZWxkLCB2YWx1ZSkge1xuICAgIHJldHVybiBGaWx0ZXIuX2Zyb21NYXRjaGVyKGZpZWxkLCAnJGd0JywgdmFsdWUpO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIG5ldyBcImdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0b1wiIGZpbHRlciBmb3IgYSBmaWVsZFxuICAgKiBAcGFyYW0ge3N0cmluZ30gZmllbGQgVGhlIHN1YmplY3QgZmllbGQgb2YgdGhlIGZpbHRlclxuICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0aGUgZmllbGQgc2hvdWxkIGJlIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0b1xuICAgKiBAcmV0dXJucyB7RmlsdGVyfVxuICAgKi9cbiAgc3RhdGljIGdyZWF0ZXJUaGFuRXF1YWwgKGZpZWxkLCB2YWx1ZSkge1xuICAgIHJldHVybiBGaWx0ZXIuX2Zyb21NYXRjaGVyKGZpZWxkLCAnJGdlJywgdmFsdWUpO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIG5ldyBpbmNsdXNpdmUgcmFuZ2UgZmlsdGVyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBmaWVsZCBUaGUgc3ViamVjdCBmaWVsZCBvZiB0aGUgZmlsdGVyXG4gICAqIEBwYXJhbSB7Kn0gbWluIFRoZSBtaW5pbXVtIHZhbHVlXG4gICAqIEBwYXJhbSB7Kn0gbWF4IFRoZSBtYXhpbXVtIHZhbHVlXG4gICAqIEByZXR1cm5zIHtGaWx0ZXJ9XG4gICAqL1xuICBzdGF0aWMgaW5jbHVzaXZlUmFuZ2UgKGZpZWxkLCBtaW4sIG1heCkge1xuICAgIHJldHVybiBuZXcgRmlsdGVyKHtcbiAgICAgIFtmaWVsZF06IHtcbiAgICAgICAgJyRnZSc6IG1pbixcbiAgICAgICAgJyRsZSc6IG1heFxuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIG5ldyBleGNsdXNpdmUgcmFuZ2UgZmlsdGVyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBmaWVsZCBUaGUgc3ViamVjdCBmaWVsZCBvZiB0aGUgZmlsdGVyXG4gICAqIEBwYXJhbSB7Kn0gbWluIFRoZSBtaW5pbXVtIHZhbHVlXG4gICAqIEBwYXJhbSB7Kn0gbWF4IFRoZSBtYXhpbXVtIHZhbHVlXG4gICAqIEByZXR1cm5zIHtGaWx0ZXJ9XG4gICAqL1xuICBzdGF0aWMgZXhjbHVzaXZlUmFuZ2UgKGZpZWxkLCBtaW4sIG1heCkge1xuICAgIHJldHVybiBuZXcgRmlsdGVyKHtcbiAgICAgIFtmaWVsZF06IHtcbiAgICAgICAgJyRndCc6IG1pbixcbiAgICAgICAgJyRsdCc6IG1heFxuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIG5ldyBwb3NpdGlvbiBmaWx0ZXJcbiAgICogQHBhcmFtIHtudW1iZXJ9IGxhdCBUaGUgbGF0aXR1ZGUgb2YgdGhlIHBvc2l0aW9uXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBsbmcgVGhlIGxvbmdpdHVkZSBvZiB0aGUgcG9zaXRpb25cbiAgICogQHBhcmFtIHtudW1iZXJ9IHJhZGl1cyBUaGUgc2VhcmNoIHJhZGl1cyAoaW4gbWV0ZXJzKVxuICAgKi9cbiAgc3RhdGljIHBvc2l0aW9uIChsYXQsIGxuZywgcmFkaXVzKSB7XG4gICAgcmV0dXJuIEZpbHRlci5fZnJvbU1hdGNoZXIoJ2J1aWx0aW4ubG9jYXRpb24nLCAnJG5lYXInLCB7IGxhdCwgbG5nLCByYWRpdXMgfSk7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGEgbmV3IGZpbHRlciB3aXRoIHRoZSBnaXZlbiBtYXRjaGVyXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBmaWVsZCBUaGUgc3ViamVjdCBmaWVsZCBvZiB0aGUgZmlsdGVyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBtYXRjaGVyIFRoZSBtYXRjaGVyIGZvciB0aGUgZmlsZXJcbiAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgZm9yIHRoZSBmaWx0ZXJcbiAgICogQHJldHVybnMge0ZpbHRlcn1cbiAgICovXG4gIHN0YXRpYyBfZnJvbU1hdGNoZXIgKGZpZWxkLCBtYXRjaGVyLCB2YWx1ZSkge1xuICAgIHJldHVybiBuZXcgRmlsdGVyKHtcbiAgICAgIFtmaWVsZF06IHtcbiAgICAgICAgW21hdGNoZXJdOiB2YWx1ZVxuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG4iLCIvKipcbiAqIE1vZGVsIGZvciB0aGUgYW5hbHl0aWNzIGV2ZW50IHR5cGVcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQW5hbHl0aWNzRXZlbnQge1xuICBjb25zdHJ1Y3RvciAodHlwZSwgbGFiZWwpIHtcbiAgICAvKipcbiAgICAgKiBUaGUgdHlwZSBvZiBldmVudCB0byByZXBvcnRcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMuZXZlbnRUeXBlID0gdHlwZS50b1VwcGVyQ2FzZSgpO1xuXG4gICAgLyoqXG4gICAgICogQW4gb3B0aW9uYWwgbGFiZWwgdG8gYmUgcHJvdmlkZWQgZm9yIHRoZSBldmVudFxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgaWYgKGxhYmVsKSB7XG4gICAgICB0aGlzLmxhYmVsID0gbGFiZWw7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgdGhlIHByb3ZpZGVkIG9wdGlvbnMgdG8gdGhlIGV2ZW50XG4gICAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zIEFkZGl0aW9uYWwgb3B0aW9ucyBmb3IgdGhlIGV2ZW50XG4gICAqL1xuICBhZGRPcHRpb25zIChvcHRpb25zKSB7XG4gICAgT2JqZWN0LmFzc2lnbih0aGlzLCBvcHRpb25zKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm4gdGhlIGV2ZW50IGluIHRoZSBhcGkgZm9ybWF0LCB0eXBpY2FsbHkgZm9yIHJlcG9ydGluZyB0byB0aGUgYXBpXG4gICAqL1xuICB0b0FwaUV2ZW50ICgpIHtcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgdGhpcyk7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRpbmcgYW4gYW5hbHl0aWNzIGV2ZW50IGZyb20gcmF3IGRhdGEuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhXG4gICAqL1xuICBzdGF0aWMgZnJvbURhdGEgKGRhdGEpIHtcbiAgICBjb25zdCB7IHR5cGUsIGxhYmVsLCAuLi5ldmVudE9wdGlvbnMgfSA9IGRhdGE7XG4gICAgY29uc3QgYW5hbHl0aWNzRXZlbnQgPSBuZXcgQW5hbHl0aWNzRXZlbnQodHlwZSwgbGFiZWwpO1xuICAgIGFuYWx5dGljc0V2ZW50LmFkZE9wdGlvbnMoZXZlbnRPcHRpb25zKTtcbiAgICByZXR1cm4gYW5hbHl0aWNzRXZlbnQ7XG4gIH1cbn1cbiIsIi8qKiBAbW9kdWxlIENvcmUgKi9cblxuaW1wb3J0IFNlYXJjaERhdGFUcmFuc2Zvcm1lciBmcm9tICcuL3NlYXJjaC9zZWFyY2hkYXRhdHJhbnNmb3JtZXInO1xuXG5pbXBvcnQgU3RvcmFnZUtleXMgZnJvbSAnLi9zdG9yYWdlL3N0b3JhZ2VrZXlzJztcbmltcG9ydCBWZXJ0aWNhbFJlc3VsdHMgZnJvbSAnLi9tb2RlbHMvdmVydGljYWxyZXN1bHRzJztcbmltcG9ydCBVbml2ZXJzYWxSZXN1bHRzIGZyb20gJy4vbW9kZWxzL3VuaXZlcnNhbHJlc3VsdHMnO1xuaW1wb3J0IFF1ZXN0aW9uU3VibWlzc2lvbiBmcm9tICcuL21vZGVscy9xdWVzdGlvbnN1Ym1pc3Npb24nO1xuaW1wb3J0IEZpbHRlciBmcm9tICcuL21vZGVscy9maWx0ZXInO1xuaW1wb3J0IEFuYWx5dGljc0V2ZW50IGZyb20gJy4vYW5hbHl0aWNzL2FuYWx5dGljc2V2ZW50JztcblxuLyoqIEB0eXBlZGVmIHtpbXBvcnQoJy4vc2VydmljZXMvc2VhcmNoc2VydmljZScpLmRlZmF1bHR9IFNlYXJjaFNlcnZpY2UgKi9cbi8qKiBAdHlwZWRlZiB7aW1wb3J0KCcuL3NlcnZpY2VzL2F1dG9jb21wbGV0ZXNlcnZpY2UnKS5kZWZhdWx0fSBBdXRvQ29tcGxldGVTZXJ2aWNlICovXG4vKiogQHR5cGVkZWYge2ltcG9ydCgnLi9zZXJ2aWNlcy9xdWVzdGlvbmFuc3dlcnNlcnZpY2UnKS5kZWZhdWx0fSBRdWVzdGlvbkFuc3dlclNlcnZpY2UgKi9cblxuLyoqXG4gKiBDb3JlIGlzIHRoZSBtYWluIGFwcGxpY2F0aW9uIGNvbnRhaW5lciBmb3IgYWxsIG9mIHRoZSBuZXR3b3JrIGFuZCBzdG9yYWdlXG4gKiByZWxhdGVkIGJlaGF2aW9ycyBvZiB0aGUgYXBwbGljYXRpb24uXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvcmUge1xuICBjb25zdHJ1Y3RvciAoY29uZmlnID0ge30pIHtcbiAgICAvKipcbiAgICAgKiBBIHJlZmVyZW5jZSB0byB0aGUgY2xpZW50IEFQSSBLZXkgdXNlZCBmb3IgYWxsIHJlcXVlc3RzXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuX2FwaUtleSA9IGNvbmZpZy5hcGlLZXk7XG5cbiAgICAvKipcbiAgICAgKiBBIHJlZmVyZW5jZSB0byB0aGUgY2xpZW50IEFuc3dlcnMgS2V5IHVzZWQgZm9yIGFsbCByZXF1ZXN0c1xuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLl9leHBlcmllbmNlS2V5ID0gY29uZmlnLmV4cGVyaWVuY2VLZXk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYW5zd2VycyBjb25maWcgdmVyc2lvbiB0byB1c2UgZm9yIGFsbCByZXF1ZXN0c1xuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLl9leHBlcmllbmNlVmVyc2lvbiA9IGNvbmZpZy5leHBlcmllbmNlVmVyc2lvbjtcblxuICAgIC8qKlxuICAgICAqIEEgcmVmZXJlbmNlIHRvIHRoZSBjbGllbnQgbG9jYWxlIHVzZWQgZm9yIGFsbCByZXF1ZXN0cy4gSWYgbm90IHNwZWNpZmllZCwgZGVmYXVsdHMgdG8gXCJlblwiIChmb3JcbiAgICAgKiBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSkuXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuX2xvY2FsZSA9IGNvbmZpZy5sb2NhbGU7XG5cbiAgICAvKipcbiAgICAgKiBBIG1hcCBvZiBmaWVsZCBmb3JtYXR0ZXJzIHVzZWQgdG8gZm9ybWF0IHJlc3VsdHMsIGlmIHByZXNlbnRcbiAgICAgKiBAdHlwZSB7T2JqZWN0LjxzdHJpbmcsIGZ1bmN0aW9uPn1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuX2ZpZWxkRm9ybWF0dGVycyA9IGNvbmZpZy5maWVsZEZvcm1hdHRlcnMgfHwge307XG5cbiAgICAvKipcbiAgICAgKiBBIHJlZmVyZW5jZSB0byB0aGUgY29yZSBkYXRhIHN0b3JhZ2UgdGhhdCBwb3dlcnMgdGhlIFVJXG4gICAgICogQHR5cGUge0dsb2JhbFN0b3JhZ2V9XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLmdsb2JhbFN0b3JhZ2UgPSBjb25maWcuZ2xvYmFsU3RvcmFnZTtcblxuICAgIC8qKlxuICAgICAqIEEgcmVmZXJlbmNlIHRvIHRoZSBjb3JlIHBlcnNpc3RlbnQgc3RvcmFnZVxuICAgICAqIEB0eXBlIHtQZXJzaXN0ZW50U3RvcmFnZX1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMucGVyc2lzdGVudFN0b3JhZ2UgPSBjb25maWcucGVyc2lzdGVudFN0b3JhZ2U7XG5cbiAgICAvKipcbiAgICAgKiBBbiBhYnN0cmFjdGlvbiBjb250YWluaW5nIHRoZSBpbnRlZ3JhdGlvbiB3aXRoIHRoZSBSRVNUZnVsIHNlYXJjaCBBUElcbiAgICAgKiBGb3IgYm90aCB2ZXJ0aWNhbCBhbmQgdW5pdmVyc2FsIHNlYXJjaFxuICAgICAqIEB0eXBlIHtTZWFyY2hTZXJ2aWNlfVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5fc2VhcmNoZXIgPSBjb25maWcuc2VhcmNoU2VydmljZTtcblxuICAgIC8qKlxuICAgICAqIEFuIGFic3RyYWN0aW9uIGNvbnRhaW5pbmcgdGhlIGludGVncmF0aW9uIHdpdGggdGhlIFJFU1RmdWwgYXV0b2NvbXBsZXRlIEFQSVxuICAgICAqIEZvciBmaWx0ZXIgc2VhcmNoLCB2ZXJ0aWNhbCBhdXRvY29tcGxldGUsIGFuZCB1bml2ZXJzYWwgYXV0b2NvbXBsZXRlXG4gICAgICogQHR5cGUge0F1dG9Db21wbGV0ZVNlcnZpY2V9XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLl9hdXRvQ29tcGxldGUgPSBjb25maWcuYXV0b0NvbXBsZXRlU2VydmljZTtcblxuICAgIC8qKlxuICAgICAqIEFuIGFic3RyYWN0aW9uIGZvciBpbnRlcmFjdGluZyB3aXRoIHRoZSBRJkEgcmVzdCBpbnRlcmZhY2VcbiAgICAgKiBAdHlwZSB7UXVlc3Rpb25BbnN3ZXJTZXJ2aWNlfVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5fcXVlc3Rpb25BbnN3ZXIgPSBjb25maWcucXVlc3Rpb25BbnN3ZXJTZXJ2aWNlO1xuXG4gICAgLyoqXG4gICAgICogQSBsb2NhbCByZWZlcmVuY2UgdG8gdGhlIGFuYWx5dGljcyByZXBvcnRlciwgdXNlZCB0byByZXBvcnQgZXZlbnRzIGZvciB0aGlzIGNvbXBvbmVudFxuICAgICAqIEB0eXBlIHtBbmFseXRpY3NSZXBvcnRlcn1cbiAgICAgKi9cbiAgICB0aGlzLl9hbmFseXRpY3NSZXBvcnRlciA9IGNvbmZpZy5hbmFseXRpY3NSZXBvcnRlcjtcblxuICAgIC8qKlxuICAgICAqIEEgdXNlci1naXZlbiBmdW5jdGlvbiB0aGF0IHJldHVybnMgYW4gYW5hbHl0aWNzIGV2ZW50IHRvIGZpcmUgYWZ0ZXIgYSB1bml2ZXJzYWwgc2VhcmNoLlxuICAgICAqIEB0eXBlIHtGdW5jdGlvbn1cbiAgICAgKi9cbiAgICB0aGlzLm9uVW5pdmVyc2FsU2VhcmNoID0gY29uZmlnLm9uVW5pdmVyc2FsU2VhcmNoIHx8IGZ1bmN0aW9uICgpIHt9O1xuXG4gICAgLyoqXG4gICAgICogQSB1c2VyLWdpdmVuIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhbiBhbmFseXRpY3MgZXZlbnQgdG8gZmlyZSBhZnRlciBhIHZlcnRpY2FsIHNlYXJjaC5cbiAgICAgKiBAdHlwZSB7RnVuY3Rpb259XG4gICAgICovXG4gICAgdGhpcy5vblZlcnRpY2FsU2VhcmNoID0gY29uZmlnLm9uVmVydGljYWxTZWFyY2ggfHwgZnVuY3Rpb24gKCkge307XG4gIH1cblxuICAvKipcbiAgICogU2VhcmNoIGluIHRoZSBjb250ZXh0IG9mIGEgdmVydGljYWxcbiAgICogQHBhcmFtIHtzdHJpbmd9IHZlcnRpY2FsS2V5IHZlcnRpY2FsIElEIGZvciB0aGUgc2VhcmNoXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBxdWVyeSBUaGUgcXVlcnkgZGV0YWlsc1xuICAgKiBAcGFyYW0ge3N0cmluZ30gcXVlcnkuaW5wdXQgVGhlIGlucHV0IHRvIHNlYXJjaCBmb3JcbiAgICogQHBhcmFtIHtzdHJpbmd9IHF1ZXJ5LmZpbHRlciBUaGUgZmlsdGVyIHRvIHVzZSBpbiB0aGUgc2VhcmNoXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBxdWVyeS5mYWNldEZpbHRlciBUaGUgZmFjZXQgZmlsdGVyIHRvIHVzZSBpbiB0aGUgc2VhcmNoXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBxdWVyeS5saW1pdCBUaGUgbWF4IG51bWJlciBvZiByZXN1bHRzIHRvIGluY2x1ZGUsIG1heCBvZiA1MFxuICAgKiBAcGFyYW0ge251bWJlcn0gcXVlcnkub2Zmc2V0IFRoZSByZXN1bHRzIG9mZnNldCwgZm9yIGZldGNoaW5nIG1vcmUgcmVzdWx0cyBvZiB0aGUgc2FtZSBxdWVyeVxuICAgKiBAcGFyYW0ge3N0cmluZ30gcXVlcnkuaWQgVGhlIHF1ZXJ5IElEIHRvIHVzZS4gSWYgcGFnaW5nIHdpdGhpbiBhIHF1ZXJ5LCB0aGUgc2FtZSBJRCBzaG91bGQgYmUgdXNlZFxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHF1ZXJ5LmFwcGVuZCBJZiB0cnVlLCBhZGRzIHRoZSByZXN1bHRzIG9mIHRoaXMgcXVlcnkgdG8gdGhlIGVuZCBvZiB0aGUgY3VycmVudCByZXN1bHRzLCBkZWZhdWx0cyBmYWxzZVxuICAgKi9cbiAgdmVydGljYWxTZWFyY2ggKHZlcnRpY2FsS2V5LCBxdWVyeSkge1xuICAgIGlmICghcXVlcnkuYXBwZW5kKSB7XG4gICAgICB0aGlzLmdsb2JhbFN0b3JhZ2Uuc2V0KFN0b3JhZ2VLZXlzLlZFUlRJQ0FMX1JFU1VMVFMsIFZlcnRpY2FsUmVzdWx0cy5zZWFyY2hMb2FkaW5nKCkpO1xuICAgICAgdGhpcy5nbG9iYWxTdG9yYWdlLnNldChTdG9yYWdlS2V5cy5TUEVMTF9DSEVDSywge30pO1xuICAgICAgdGhpcy5nbG9iYWxTdG9yYWdlLnNldChTdG9yYWdlS2V5cy5MT0NBVElPTl9CSUFTLCB7fSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX3NlYXJjaGVyXG4gICAgICAudmVydGljYWxTZWFyY2godmVydGljYWxLZXksIHtcbiAgICAgICAgbGltaXQ6IHRoaXMuZ2xvYmFsU3RvcmFnZS5nZXRTdGF0ZShTdG9yYWdlS2V5cy5TRUFSQ0hfQ09ORklHKS5saW1pdCxcbiAgICAgICAgZ2VvbG9jYXRpb246IHRoaXMuZ2xvYmFsU3RvcmFnZS5nZXRTdGF0ZShTdG9yYWdlS2V5cy5HRU9MT0NBVElPTiksXG4gICAgICAgIC4uLnF1ZXJ5LFxuICAgICAgICBpc0R5bmFtaWNGaWx0ZXJzRW5hYmxlZDogdGhpcy5faXNEeW5hbWljRmlsdGVyc0VuYWJsZWQsXG4gICAgICAgIHNraXBTcGVsbENoZWNrOiB0aGlzLmdsb2JhbFN0b3JhZ2UuZ2V0U3RhdGUoJ3NraXBTcGVsbENoZWNrJyksXG4gICAgICAgIHF1ZXJ5VHJpZ2dlcjogdGhpcy5nbG9iYWxTdG9yYWdlLmdldFN0YXRlKCdxdWVyeVRyaWdnZXInKSxcbiAgICAgICAgc2Vzc2lvblRyYWNraW5nRW5hYmxlZDogdGhpcy5nbG9iYWxTdG9yYWdlLmdldFN0YXRlKFN0b3JhZ2VLZXlzLlNFU1NJT05TX09QVF9JTiksXG4gICAgICAgIHNvcnRCeXM6IHRoaXMuZ2xvYmFsU3RvcmFnZS5nZXRTdGF0ZShTdG9yYWdlS2V5cy5TT1JUX0JZUylcbiAgICAgIH0pXG4gICAgICAudGhlbihyZXNwb25zZSA9PiBTZWFyY2hEYXRhVHJhbnNmb3JtZXIudHJhbnNmb3JtVmVydGljYWwocmVzcG9uc2UsIHRoaXMuX2ZpZWxkRm9ybWF0dGVycywgdmVydGljYWxLZXkpKVxuICAgICAgLnRoZW4oZGF0YSA9PiB7XG4gICAgICAgIHRoaXMuZ2xvYmFsU3RvcmFnZS5zZXQoU3RvcmFnZUtleXMuUVVFUllfSUQsIGRhdGFbU3RvcmFnZUtleXMuUVVFUllfSURdKTtcbiAgICAgICAgdGhpcy5nbG9iYWxTdG9yYWdlLnNldChTdG9yYWdlS2V5cy5OQVZJR0FUSU9OLCBkYXRhW1N0b3JhZ2VLZXlzLk5BVklHQVRJT05dKTtcbiAgICAgICAgdGhpcy5nbG9iYWxTdG9yYWdlLnNldChTdG9yYWdlS2V5cy5JTlRFTlRTLCBkYXRhW1N0b3JhZ2VLZXlzLklOVEVOVFNdKTtcbiAgICAgICAgdGhpcy5nbG9iYWxTdG9yYWdlLnNldChTdG9yYWdlS2V5cy5BTFRFUk5BVElWRV9WRVJUSUNBTFMsIGRhdGFbU3RvcmFnZUtleXMuQUxURVJOQVRJVkVfVkVSVElDQUxTXSk7XG5cbiAgICAgICAgaWYgKHF1ZXJ5LmFwcGVuZCkge1xuICAgICAgICAgIGNvbnN0IG1lcmdlZFJlc3VsdHMgPSB0aGlzLmdsb2JhbFN0b3JhZ2UuZ2V0U3RhdGUoU3RvcmFnZUtleXMuVkVSVElDQUxfUkVTVUxUUylcbiAgICAgICAgICAgIC5hcHBlbmQoZGF0YVtTdG9yYWdlS2V5cy5WRVJUSUNBTF9SRVNVTFRTXSk7XG4gICAgICAgICAgdGhpcy5nbG9iYWxTdG9yYWdlLnNldChTdG9yYWdlS2V5cy5WRVJUSUNBTF9SRVNVTFRTLCBtZXJnZWRSZXN1bHRzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmdsb2JhbFN0b3JhZ2Uuc2V0KFN0b3JhZ2VLZXlzLlZFUlRJQ0FMX1JFU1VMVFMsIGRhdGFbU3RvcmFnZUtleXMuVkVSVElDQUxfUkVTVUxUU10pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRhdGFbU3RvcmFnZUtleXMuRFlOQU1JQ19GSUxURVJTXSkge1xuICAgICAgICAgIHRoaXMuZ2xvYmFsU3RvcmFnZS5zZXQoU3RvcmFnZUtleXMuRFlOQU1JQ19GSUxURVJTLCBkYXRhW1N0b3JhZ2VLZXlzLkRZTkFNSUNfRklMVEVSU10pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkYXRhW1N0b3JhZ2VLZXlzLlNQRUxMX0NIRUNLXSkge1xuICAgICAgICAgIHRoaXMuZ2xvYmFsU3RvcmFnZS5zZXQoU3RvcmFnZUtleXMuU1BFTExfQ0hFQ0ssIGRhdGFbU3RvcmFnZUtleXMuU1BFTExfQ0hFQ0tdKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0YVtTdG9yYWdlS2V5cy5MT0NBVElPTl9CSUFTXSkge1xuICAgICAgICAgIHRoaXMuZ2xvYmFsU3RvcmFnZS5zZXQoU3RvcmFnZUtleXMuTE9DQVRJT05fQklBUywgZGF0YVtTdG9yYWdlS2V5cy5MT0NBVElPTl9CSUFTXSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5nbG9iYWxTdG9yYWdlLmRlbGV0ZSgnc2tpcFNwZWxsQ2hlY2snKTtcbiAgICAgICAgdGhpcy5nbG9iYWxTdG9yYWdlLmRlbGV0ZSgncXVlcnlUcmlnZ2VyJyk7XG5cbiAgICAgICAgY29uc3QgZXhwb3NlZFBhcmFtcyA9IHtcbiAgICAgICAgICB2ZXJ0aWNhbEtleTogdmVydGljYWxLZXksXG4gICAgICAgICAgcXVlcnlTdHJpbmc6IHF1ZXJ5LmlucHV0LFxuICAgICAgICAgIHJlc3VsdHNDb3VudDogdGhpcy5nbG9iYWxTdG9yYWdlLmdldFN0YXRlKFN0b3JhZ2VLZXlzLlZFUlRJQ0FMX1JFU1VMVFMpLnJlc3VsdHNDb3VudCxcbiAgICAgICAgICByZXN1bHRzQ29udGV4dDogZGF0YVtTdG9yYWdlS2V5cy5WRVJUSUNBTF9SRVNVTFRTXS5yZXN1bHRzQ29udGV4dFxuICAgICAgICB9O1xuICAgICAgICBjb25zdCBhbmFseXRpY3NFdmVudCA9IHRoaXMub25WZXJ0aWNhbFNlYXJjaChleHBvc2VkUGFyYW1zKTtcbiAgICAgICAgaWYgKHR5cGVvZiBhbmFseXRpY3NFdmVudCA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICB0aGlzLl9hbmFseXRpY3NSZXBvcnRlci5yZXBvcnQoQW5hbHl0aWNzRXZlbnQuZnJvbURhdGEoYW5hbHl0aWNzRXZlbnQpKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogUGFnZSB3aXRoaW4gdGhlIHJlc3VsdHMgb2YgdGhlIGxhc3QgcXVlcnlcbiAgICogQHBhcmFtIHtzdHJpbmd9IHZlcnRpY2FsS2V5IFRoZSB2ZXJ0aWNhbCBrZXkgdG8gdXNlIGluIHRoZSBzZWFyY2hcbiAgICogQHBhcmFtIHtudW1iZXJ9IG9mZnNldCBUaGUgb2Zmc2V0IHRvIHVzZSBpbiB0aGUgc2VhcmNoXG4gICAqL1xuICB2ZXJ0aWNhbFBhZ2UgKHZlcnRpY2FsS2V5LCBvZmZzZXQpIHtcbiAgICBjb25zdCBhbGxGaWx0ZXJzID0gdGhpcy5nbG9iYWxTdG9yYWdlLmdldEFsbChTdG9yYWdlS2V5cy5GSUxURVIpO1xuICAgIGNvbnN0IHRvdGFsRmlsdGVyID0gYWxsRmlsdGVycy5sZW5ndGggPiAxXG4gICAgICA/IEZpbHRlci5hbmQoLi4uYWxsRmlsdGVycylcbiAgICAgIDogYWxsRmlsdGVyc1swXTtcbiAgICBjb25zdCBmYWNldEZpbHRlciA9IHRoaXMuZ2xvYmFsU3RvcmFnZS5nZXRBbGwoU3RvcmFnZUtleXMuRkFDRVRfRklMVEVSKVswXTtcbiAgICB0aGlzLnZlcnRpY2FsU2VhcmNoKHZlcnRpY2FsS2V5LCB7XG4gICAgICBpbnB1dDogdGhpcy5nbG9iYWxTdG9yYWdlLmdldFN0YXRlKFN0b3JhZ2VLZXlzLlFVRVJZKSxcbiAgICAgIGlkOiB0aGlzLmdsb2JhbFN0b3JhZ2UuZ2V0U3RhdGUoU3RvcmFnZUtleXMuUVVFUllfSUQpLFxuICAgICAgZmlsdGVyOiBKU09OLnN0cmluZ2lmeSh0b3RhbEZpbHRlciksXG4gICAgICBmYWNldEZpbHRlcjogSlNPTi5zdHJpbmdpZnkoZmFjZXRGaWx0ZXIpLFxuICAgICAgb2Zmc2V0XG4gICAgfSk7XG4gIH1cblxuICBzZWFyY2ggKHF1ZXJ5U3RyaW5nLCB1cmxzKSB7XG4gICAgdGhpcy5nbG9iYWxTdG9yYWdlLnNldChTdG9yYWdlS2V5cy5ESVJFQ1RfQU5TV0VSLCB7fSk7XG4gICAgdGhpcy5nbG9iYWxTdG9yYWdlLnNldChTdG9yYWdlS2V5cy5VTklWRVJTQUxfUkVTVUxUUywgVW5pdmVyc2FsUmVzdWx0cy5zZWFyY2hMb2FkaW5nKCkpO1xuICAgIHRoaXMuZ2xvYmFsU3RvcmFnZS5zZXQoU3RvcmFnZUtleXMuUVVFU1RJT05fU1VCTUlTU0lPTiwge30pO1xuICAgIHRoaXMuZ2xvYmFsU3RvcmFnZS5zZXQoU3RvcmFnZUtleXMuU1BFTExfQ0hFQ0ssIHt9KTtcbiAgICB0aGlzLmdsb2JhbFN0b3JhZ2Uuc2V0KFN0b3JhZ2VLZXlzLkxPQ0FUSU9OX0JJQVMsIHt9KTtcblxuICAgIHJldHVybiB0aGlzLl9zZWFyY2hlclxuICAgICAgLnVuaXZlcnNhbFNlYXJjaChxdWVyeVN0cmluZywge1xuICAgICAgICBnZW9sb2NhdGlvbjogdGhpcy5nbG9iYWxTdG9yYWdlLmdldFN0YXRlKFN0b3JhZ2VLZXlzLkdFT0xPQ0FUSU9OKSxcbiAgICAgICAgc2tpcFNwZWxsQ2hlY2s6IHRoaXMuZ2xvYmFsU3RvcmFnZS5nZXRTdGF0ZSgnc2tpcFNwZWxsQ2hlY2snKSxcbiAgICAgICAgcXVlcnlUcmlnZ2VyOiB0aGlzLmdsb2JhbFN0b3JhZ2UuZ2V0U3RhdGUoJ3F1ZXJ5VHJpZ2dlcicpLFxuICAgICAgICBzZXNzaW9uVHJhY2tpbmdFbmFibGVkOiB0aGlzLmdsb2JhbFN0b3JhZ2UuZ2V0U3RhdGUoU3RvcmFnZUtleXMuU0VTU0lPTlNfT1BUX0lOKVxuICAgICAgfSlcbiAgICAgIC50aGVuKHJlc3BvbnNlID0+IFNlYXJjaERhdGFUcmFuc2Zvcm1lci50cmFuc2Zvcm0ocmVzcG9uc2UsIHVybHMsIHRoaXMuX2ZpZWxkRm9ybWF0dGVycykpXG4gICAgICAudGhlbihkYXRhID0+IHtcbiAgICAgICAgdGhpcy5nbG9iYWxTdG9yYWdlLnNldChTdG9yYWdlS2V5cy5RVUVSWV9JRCwgZGF0YVtTdG9yYWdlS2V5cy5RVUVSWV9JRF0pO1xuICAgICAgICB0aGlzLmdsb2JhbFN0b3JhZ2Uuc2V0KFN0b3JhZ2VLZXlzLk5BVklHQVRJT04sIGRhdGFbU3RvcmFnZUtleXMuTkFWSUdBVElPTl0pO1xuICAgICAgICB0aGlzLmdsb2JhbFN0b3JhZ2Uuc2V0KFN0b3JhZ2VLZXlzLkRJUkVDVF9BTlNXRVIsIGRhdGFbU3RvcmFnZUtleXMuRElSRUNUX0FOU1dFUl0pO1xuICAgICAgICB0aGlzLmdsb2JhbFN0b3JhZ2Uuc2V0KFN0b3JhZ2VLZXlzLlVOSVZFUlNBTF9SRVNVTFRTLCBkYXRhW1N0b3JhZ2VLZXlzLlVOSVZFUlNBTF9SRVNVTFRTXSwgdXJscyk7XG4gICAgICAgIHRoaXMuZ2xvYmFsU3RvcmFnZS5zZXQoU3RvcmFnZUtleXMuSU5URU5UUywgZGF0YVtTdG9yYWdlS2V5cy5JTlRFTlRTXSk7XG4gICAgICAgIHRoaXMuZ2xvYmFsU3RvcmFnZS5zZXQoU3RvcmFnZUtleXMuU1BFTExfQ0hFQ0ssIGRhdGFbU3RvcmFnZUtleXMuU1BFTExfQ0hFQ0tdKTtcbiAgICAgICAgdGhpcy5nbG9iYWxTdG9yYWdlLnNldChTdG9yYWdlS2V5cy5MT0NBVElPTl9CSUFTLCBkYXRhW1N0b3JhZ2VLZXlzLkxPQ0FUSU9OX0JJQVNdKTtcbiAgICAgICAgdGhpcy5nbG9iYWxTdG9yYWdlLmRlbGV0ZSgnc2tpcFNwZWxsQ2hlY2snKTtcbiAgICAgICAgdGhpcy5nbG9iYWxTdG9yYWdlLmRlbGV0ZSgncXVlcnlUcmlnZ2VyJyk7XG5cbiAgICAgICAgY29uc3QgZXhwb3NlZFBhcmFtcyA9IHtcbiAgICAgICAgICBxdWVyeVN0cmluZzogcXVlcnlTdHJpbmcsXG4gICAgICAgICAgc2VjdGlvbnNDb3VudDogZGF0YVtTdG9yYWdlS2V5cy5VTklWRVJTQUxfUkVTVUxUU10uc2VjdGlvbnMubGVuZ3RoXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IGFuYWx5dGljc0V2ZW50ID0gdGhpcy5vblVuaXZlcnNhbFNlYXJjaChleHBvc2VkUGFyYW1zKTtcbiAgICAgICAgaWYgKHR5cGVvZiBhbmFseXRpY3NFdmVudCA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICB0aGlzLl9hbmFseXRpY3NSZXBvcnRlci5yZXBvcnQoQW5hbHl0aWNzRXZlbnQuZnJvbURhdGEoYW5hbHl0aWNzRXZlbnQpKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogR2l2ZW4gYW4gaW5wdXQsIHF1ZXJ5IGZvciBhIGxpc3Qgb2Ygc2ltaWxhciByZXN1bHRzIGFuZCBzZXQgaW50byBzdG9yYWdlXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpbnB1dCAgICAgdGhlIHN0cmluZyB0byBhdXRvY29tcGxldGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWVzcGFjZSB0aGUgbmFtZXNwYWNlIHRvIHVzZSBmb3IgdGhlIHN0b3JhZ2Uga2V5XG4gICAqL1xuICBhdXRvQ29tcGxldGVVbml2ZXJzYWwgKGlucHV0LCBuYW1lc3BhY2UpIHtcbiAgICByZXR1cm4gdGhpcy5fYXV0b0NvbXBsZXRlXG4gICAgICAucXVlcnlVbml2ZXJzYWwoaW5wdXQpXG4gICAgICAudGhlbihkYXRhID0+IHtcbiAgICAgICAgdGhpcy5nbG9iYWxTdG9yYWdlLnNldChgJHtTdG9yYWdlS2V5cy5BVVRPQ09NUExFVEV9LiR7bmFtZXNwYWNlfWAsIGRhdGEpO1xuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEdpdmVuIGFuIGlucHV0LCBxdWVyeSBmb3IgYSBsaXN0IG9mIHNpbWlsYXIgcmVzdWx0cyBpbiB0aGUgcHJvdmlkZWQgdmVydGljYWxcbiAgICogYW5kIHNldCBpbnRvIHN0b3JhZ2VcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGlucHV0ICAgICAgIHRoZSBzdHJpbmcgdG8gYXV0b2NvbXBsZXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lc3BhY2UgdGhlIG5hbWVzcGFjZSB0byB1c2UgZm9yIHRoZSBzdG9yYWdlIGtleVxuICAgKiBAcGFyYW0ge3N0cmluZ30gdmVydGljYWxLZXkgdGhlIHZlcnRpY2FsIGtleSBmb3IgdGhlIGV4cGVyaWVuY2VcbiAgICovXG4gIGF1dG9Db21wbGV0ZVZlcnRpY2FsIChpbnB1dCwgbmFtZXNwYWNlLCB2ZXJ0aWNhbEtleSkge1xuICAgIHJldHVybiB0aGlzLl9hdXRvQ29tcGxldGVcbiAgICAgIC5xdWVyeVZlcnRpY2FsKGlucHV0LCB2ZXJ0aWNhbEtleSlcbiAgICAgIC50aGVuKGRhdGEgPT4ge1xuICAgICAgICB0aGlzLmdsb2JhbFN0b3JhZ2Uuc2V0KGAke1N0b3JhZ2VLZXlzLkFVVE9DT01QTEVURX0uJHtuYW1lc3BhY2V9YCwgZGF0YSk7XG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogR2l2ZW4gYW4gaW5wdXQsIHByb3ZpZGUgYSBsaXN0IG9mIHN1aXRhYmxlIGZpbHRlcnMgZm9yIGF1dG9jb21wbGV0aW9uXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpbnB1dCAgdGhlIHN0cmluZyB0byBzZWFyY2ggZm9yIGZpbHRlcnMgd2l0aFxuICAgKiBAcGFyYW0ge29iamVjdH0gY29uZmlnICB0aGUgY29uZmlnIHRvIHNlcmFjaCBmb3IgZmlsdGVycyB3aXRoXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjb25maWcubmFtZXNwYWNlICB0aGUgbmFtZXNwYWNlIHRvIHVzZSBmb3IgdGhlIHN0b3JhZ2Uga2V5XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjb25maWcudmVydGljYWxLZXkgdGhlIHZlcnRpY2FsIGtleSBmb3IgdGhlIGNvbmZpZ1xuICAgKiBAcGFyYW0ge29iamVjdH0gY29uZmlnLnNlYXJjaFBhcmFtZXRlcnMgIHRoZSBzZWFyY2ggcGFyYW1ldGVycyBmb3IgdGhlIGNvbmZpZyB2MlxuICAgKi9cbiAgYXV0b0NvbXBsZXRlRmlsdGVyIChpbnB1dCwgY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMuX2F1dG9Db21wbGV0ZVxuICAgICAgLnF1ZXJ5RmlsdGVyKGlucHV0LCBjb25maWcpXG4gICAgICAudGhlbihkYXRhID0+IHtcbiAgICAgICAgdGhpcy5nbG9iYWxTdG9yYWdlLnNldChgJHtTdG9yYWdlS2V5cy5BVVRPQ09NUExFVEV9LiR7Y29uZmlnLm5hbWVzcGFjZX1gLCBkYXRhKTtcbiAgICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFN1Ym1pdHMgYSBxdWVzdGlvbiB0byB0aGUgc2VydmVyIGFuZCB1cGRhdGVzIHRoZSB1bmRlcmx5aW5nIHF1ZXN0aW9uIG1vZGVsXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBxdWVzdGlvbiBUaGUgcXVlc3Rpb24gb2JqZWN0IHRvIHN1Ym1pdCB0byB0aGUgc2VydmVyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBxdWVzdGlvbi5lbnRpdHlJZCBUaGUgZW50aXR5IHRvIGFzc29jaWF0ZSB3aXRoIHRoZSBxdWVzdGlvbiAocmVxdWlyZWQpXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBxdWVzdGlvbi5sYW51YWdlIFRoZSBsYW5ndWFnZSBvZiB0aGUgcXVlc3Rpb25cbiAgICogQHBhcmFtIHtzdHJpbmd9IHF1ZXN0aW9uLnNpdGUgVGhlIFwicHVibGlzaGVyXCIgb2YgdGhlIChlLmcuICdGSVJTVF9QQVJUWScpXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBxdWVzdGlvbi5uYW1lIFRoZSBuYW1lIG9mIHRoZSBhdXRob3JcbiAgICogQHBhcmFtIHtzdHJpbmd9IHF1ZXN0aW9uLmVtYWlsIFRoZSBlbWFpbCBhZGRyZXNzIG9mIHRoZSBhdXRob3JcbiAgICogQHBhcmFtIHtzdHJpbmd9IHF1ZXN0aW9uLnF1ZXN0aW9uVGV4dCBUaGUgcXVlc3Rpb25cbiAgICogQHBhcmFtIHtzdHJpbmd9IHF1ZXN0aW9uLnF1ZXN0aW9uRGVzY3JpcHRpb24gQWRkaXRpb25hbCBpbmZvcm1hdGlvbiBhYm91dCB0aGUgcXVlc3Rpb25cbiAgICovXG4gIHN1Ym1pdFF1ZXN0aW9uIChxdWVzdGlvbikge1xuICAgIHJldHVybiB0aGlzLl9xdWVzdGlvbkFuc3dlclxuICAgICAgLnN1Ym1pdFF1ZXN0aW9uKHF1ZXN0aW9uKVxuICAgICAgLnRoZW4oZGF0YSA9PiB7XG4gICAgICAgIHRoaXMuZ2xvYmFsU3RvcmFnZS5zZXQoXG4gICAgICAgICAgU3RvcmFnZUtleXMuUVVFU1RJT05fU1VCTUlTU0lPTixcbiAgICAgICAgICBRdWVzdGlvblN1Ym1pc3Npb24uc3VibWl0dGVkKCkpO1xuICAgICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogU3RvcmVzIHRoZSBnaXZlbiBzb3J0QnkgaW50byBzdG9yYWdlLCB0byBiZSB1c2VkIGZvciB0aGUgbmV4dCBzZWFyY2hcbiAgICogQHBhcmFtIHtPYmplY3R9IHNvcnRCeU9wdGlvbnNcbiAgICovXG4gIHNldFNvcnRCeXMgKC4uLnNvcnRCeU9wdGlvbnMpIHtcbiAgICBjb25zdCBzb3J0QnlzID0gc29ydEJ5T3B0aW9ucy5tYXAob3B0aW9uID0+IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IG9wdGlvbi50eXBlLFxuICAgICAgICBmaWVsZDogb3B0aW9uLmZpZWxkLFxuICAgICAgICBkaXJlY3Rpb246IG9wdGlvbi5kaXJlY3Rpb25cbiAgICAgIH07XG4gICAgfSk7XG4gICAgdGhpcy5nbG9iYWxTdG9yYWdlLnNldChTdG9yYWdlS2V5cy5TT1JUX0JZUywgSlNPTi5zdHJpbmdpZnkoc29ydEJ5cykpO1xuICB9XG5cbiAgLyoqXG4gICAqIENsZWFycyB0aGUgc29ydEJ5cyBrZXkgaW4gZ2xvYmFsIHN0b3JhZ2UuXG4gICAqL1xuICBjbGVhclNvcnRCeXMgKCkge1xuICAgIHRoaXMuZ2xvYmFsU3RvcmFnZS5kZWxldGUoU3RvcmFnZUtleXMuU09SVF9CWVMpO1xuICB9XG5cbiAgLyoqXG4gICAqIFN0b3JlcyB0aGUgZ2l2ZW4gcXVlcnkgaW50byBzdG9yYWdlLCB0byBiZSB1c2VkIGZvciB0aGUgbmV4dCBzZWFyY2hcbiAgICogQHBhcmFtIHtzdHJpbmd9IHF1ZXJ5IHRoZSBxdWVyeSB0byBzdG9yZVxuICAgKi9cbiAgc2V0UXVlcnkgKHF1ZXJ5KSB7XG4gICAgdGhpcy5nbG9iYWxTdG9yYWdlLnNldChTdG9yYWdlS2V5cy5RVUVSWSwgcXVlcnkpO1xuICB9XG5cbiAgLyoqXG4gICAqIFN0b3JlcyB0aGUgcHJvdmlkZWQgcXVlcnkgSUQsIHRvIGJlIHVzZWQgaW4gYW5hbHl0aWNzXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBxdWVyeUlkIFRoZSBxdWVyeSBpZCB0byBzdG9yZVxuICAgKi9cbiAgc2V0UXVlcnlJZCAocXVlcnlJZCkge1xuICAgIHRoaXMuZ2xvYmFsU3RvcmFnZS5zZXQoU3RvcmFnZUtleXMuUVVFUllfSUQsIHF1ZXJ5SWQpO1xuICB9XG5cbiAgLyoqXG4gICAqIFN0b3JlcyB0aGUgZ2l2ZW4gZmlsdGVyIGludG8gc3RvcmFnZSwgdG8gYmUgdXNlZCBmb3IgdGhlIG5leHQgc2VhcmNoXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lc3BhY2UgdGhlIG5hbWVzcGFjZSB0byB1c2UgZm9yIHRoZSBzdG9yYWdlIGtleVxuICAgKiBAcGFyYW0ge0ZpbHRlcn0gZmlsdGVyICAgIHRoZSBmaWx0ZXIgdG8gc2V0XG4gICAqL1xuICBzZXRGaWx0ZXIgKG5hbWVzcGFjZSwgZmlsdGVyKSB7XG4gICAgdGhpcy5nbG9iYWxTdG9yYWdlLnNldChgJHtTdG9yYWdlS2V5cy5GSUxURVJ9LiR7bmFtZXNwYWNlfWAsIGZpbHRlcik7XG4gIH1cblxuICBzZXRGYWNldEZpbHRlciAobmFtZXNwYWNlLCBmaWx0ZXIpIHtcbiAgICB0aGlzLmdsb2JhbFN0b3JhZ2Uuc2V0KGAke1N0b3JhZ2VLZXlzLkZBQ0VUX0ZJTFRFUn0uJHtuYW1lc3BhY2V9YCwgZmlsdGVyKTtcbiAgfVxuXG4gIGVuYWJsZUR5bmFtaWNGaWx0ZXJzICgpIHtcbiAgICB0aGlzLl9pc0R5bmFtaWNGaWx0ZXJzRW5hYmxlZCA9IHRydWU7XG4gIH1cblxuICBvbiAoZXZ0LCBtb2R1bGVJZCwgY2IpIHtcbiAgICByZXR1cm4gdGhpcy5nbG9iYWxTdG9yYWdlLm9uKGV2dCwgbW9kdWxlSWQsIGNiKTtcbiAgfVxufVxuIiwiIWZ1bmN0aW9uKGUscil7XCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHMmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBtb2R1bGU/bW9kdWxlLmV4cG9ydHM9cigpOlwiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUocik6KGU9ZXx8c2VsZikuUnRmQ29udmVydGVyPXIoKX0odGhpcyxmdW5jdGlvbigpe1widXNlIHN0cmljdFwiO3ZhciBlPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWxUaGlzP2dsb2JhbFRoaXM6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdz93aW5kb3c6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbD9nbG9iYWw6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHNlbGY/c2VsZjp7fTtmdW5jdGlvbiByKCl7dGhyb3cgbmV3IEVycm9yKFwiRHluYW1pYyByZXF1aXJlcyBhcmUgbm90IGN1cnJlbnRseSBzdXBwb3J0ZWQgYnkgcm9sbHVwLXBsdWdpbi1jb21tb25qc1wiKX12YXIgdCxuPShmdW5jdGlvbih0LG4pe3QuZXhwb3J0cz1mdW5jdGlvbiBlKHQsbixvKXtmdW5jdGlvbiBzKGEsbCl7aWYoIW5bYV0pe2lmKCF0W2FdKXt2YXIgYz1yO2lmKCFsJiZjKXJldHVybiBjKGEsITApO2lmKGkpcmV0dXJuIGkoYSwhMCk7dmFyIHU9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIithK1wiJ1wiKTt0aHJvdyB1LmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsdX12YXIgcD1uW2FdPXtleHBvcnRzOnt9fTt0W2FdWzBdLmNhbGwocC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciByPXRbYV1bMV1bZV07cmV0dXJuIHMocnx8ZSl9LHAscC5leHBvcnRzLGUsdCxuLG8pfXJldHVybiBuW2FdLmV4cG9ydHN9Zm9yKHZhciBpPXIsYT0wO2E8by5sZW5ndGg7YSsrKXMob1thXSk7cmV0dXJuIHN9KHsxOltmdW5jdGlvbihlLHIsdCl7ci5leHBvcnRzPWUoXCJlbnRpdGllcy9saWIvbWFwcy9lbnRpdGllcy5qc29uXCIpfSx7XCJlbnRpdGllcy9saWIvbWFwcy9lbnRpdGllcy5qc29uXCI6NTJ9XSwyOltmdW5jdGlvbihlLHIsdCl7ci5leHBvcnRzPVtcImFkZHJlc3NcIixcImFydGljbGVcIixcImFzaWRlXCIsXCJiYXNlXCIsXCJiYXNlZm9udFwiLFwiYmxvY2txdW90ZVwiLFwiYm9keVwiLFwiY2FwdGlvblwiLFwiY2VudGVyXCIsXCJjb2xcIixcImNvbGdyb3VwXCIsXCJkZFwiLFwiZGV0YWlsc1wiLFwiZGlhbG9nXCIsXCJkaXJcIixcImRpdlwiLFwiZGxcIixcImR0XCIsXCJmaWVsZHNldFwiLFwiZmlnY2FwdGlvblwiLFwiZmlndXJlXCIsXCJmb290ZXJcIixcImZvcm1cIixcImZyYW1lXCIsXCJmcmFtZXNldFwiLFwiaDFcIixcImgyXCIsXCJoM1wiLFwiaDRcIixcImg1XCIsXCJoNlwiLFwiaGVhZFwiLFwiaGVhZGVyXCIsXCJoclwiLFwiaHRtbFwiLFwiaWZyYW1lXCIsXCJsZWdlbmRcIixcImxpXCIsXCJsaW5rXCIsXCJtYWluXCIsXCJtZW51XCIsXCJtZW51aXRlbVwiLFwibWV0YVwiLFwibmF2XCIsXCJub2ZyYW1lc1wiLFwib2xcIixcIm9wdGdyb3VwXCIsXCJvcHRpb25cIixcInBcIixcInBhcmFtXCIsXCJzZWN0aW9uXCIsXCJzb3VyY2VcIixcInN1bW1hcnlcIixcInRhYmxlXCIsXCJ0Ym9keVwiLFwidGRcIixcInRmb290XCIsXCJ0aFwiLFwidGhlYWRcIixcInRpdGxlXCIsXCJ0clwiLFwidHJhY2tcIixcInVsXCJdfSx7fV0sMzpbZnVuY3Rpb24oZSxyLHQpe3ZhciBuPVwiPFtBLVphLXpdW0EtWmEtejAtOVxcXFwtXSooPzpcXFxccytbYS16QS1aXzpdW2EtekEtWjAtOTouXy1dKig/OlxcXFxzKj1cXFxccyooPzpbXlxcXCInPTw+YFxcXFx4MDAtXFxcXHgyMF0rfCdbXiddKid8XFxcIlteXFxcIl0qXFxcIikpPykqXFxcXHMqXFxcXC8/PlwiLG89XCI8XFxcXC9bQS1aYS16XVtBLVphLXowLTlcXFxcLV0qXFxcXHMqPlwiLHM9bmV3IFJlZ0V4cChcIl4oPzpcIituK1wifFwiK28rXCJ8XFx4M2MhLS0tLVxceDNlfFxceDNjIS0tKD86LT9bXj4tXSkoPzotP1teLV0pKi0tXFx4M2V8PFs/XS4qP1s/XT58PCFbQS1aXStcXFxccytbXj5dKj58PCFcXFxcW0NEQVRBXFxcXFtbXFxcXHNcXFxcU10qP1xcXFxdXFxcXF0+KVwiKSxpPW5ldyBSZWdFeHAoXCJeKD86XCIrbitcInxcIitvK1wiKVwiKTtyLmV4cG9ydHMuSFRNTF9UQUdfUkU9cyxyLmV4cG9ydHMuSFRNTF9PUEVOX0NMT1NFX1RBR19SRT1pfSx7fV0sNDpbZnVuY3Rpb24oZSxyLHQpe3ZhciBuPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7ZnVuY3Rpb24gbyhlLHIpe3JldHVybiBuLmNhbGwoZSxyKX1mdW5jdGlvbiBzKGUpe3JldHVybiEoZT49NTUyOTYmJmU8PTU3MzQzfHxlPj02NDk3NiYmZTw9NjUwMDd8fDY1NTM1PT0oNjU1MzUmZSl8fDY1NTM0PT0oNjU1MzUmZSl8fGU+PTAmJmU8PTh8fDExPT09ZXx8ZT49MTQmJmU8PTMxfHxlPj0xMjcmJmU8PTE1OXx8ZT4xMTE0MTExKX1mdW5jdGlvbiBpKGUpe2lmKGU+NjU1MzUpe3ZhciByPTU1Mjk2KygoZS09NjU1MzYpPj4xMCksdD01NjMyMCsoMTAyMyZlKTtyZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShyLHQpfXJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKGUpfXZhciBhPS9cXFxcKFshXCIjJCUmJygpKissXFwtLlxcLzo7PD0+P0BbXFxcXFxcXV5fYHt8fX5dKS9nLGw9bmV3IFJlZ0V4cChhLnNvdXJjZStcInxcIisvJihbYS16I11bYS16MC05XXsxLDMxfSk7L2dpLnNvdXJjZSxcImdpXCIpLGM9L14jKCg/OnhbYS1mMC05XXsxLDh9fFswLTldezEsOH0pKS9pLHU9ZShcIi4vZW50aXRpZXNcIikscD0vWyY8PlwiXS8saD0vWyY8PlwiXS9nLGY9e1wiJlwiOlwiJmFtcDtcIixcIjxcIjpcIiZsdDtcIixcIj5cIjpcIiZndDtcIiwnXCInOlwiJnF1b3Q7XCJ9O2Z1bmN0aW9uIGQoZSl7cmV0dXJuIGZbZV19dmFyIG09L1suPyorXiRbXFxdXFxcXCgpe318LV0vZyxfPWUoXCJ1Yy5taWNyby9jYXRlZ29yaWVzL1AvcmVnZXhcIik7dC5saWI9e30sdC5saWIubWR1cmw9ZShcIm1kdXJsXCIpLHQubGliLnVjbWljcm89ZShcInVjLm1pY3JvXCIpLHQuYXNzaWduPWZ1bmN0aW9uKGUpe3JldHVybiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMSkuZm9yRWFjaChmdW5jdGlvbihyKXtpZihyKXtpZihcIm9iamVjdFwiIT10eXBlb2Ygcil0aHJvdyBuZXcgVHlwZUVycm9yKHIrXCJtdXN0IGJlIG9iamVjdFwiKTtPYmplY3Qua2V5cyhyKS5mb3JFYWNoKGZ1bmN0aW9uKHQpe2VbdF09clt0XX0pfX0pLGV9LHQuaXNTdHJpbmc9ZnVuY3Rpb24oZSl7cmV0dXJuXCJbb2JqZWN0IFN0cmluZ11cIj09PWZ1bmN0aW9uKGUpe3JldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSl9KGUpfSx0Lmhhcz1vLHQudW5lc2NhcGVNZD1mdW5jdGlvbihlKXtyZXR1cm4gZS5pbmRleE9mKFwiXFxcXFwiKTwwP2U6ZS5yZXBsYWNlKGEsXCIkMVwiKX0sdC51bmVzY2FwZUFsbD1mdW5jdGlvbihlKXtyZXR1cm4gZS5pbmRleE9mKFwiXFxcXFwiKTwwJiZlLmluZGV4T2YoXCImXCIpPDA/ZTplLnJlcGxhY2UobCxmdW5jdGlvbihlLHIsdCl7cmV0dXJuIHJ8fGZ1bmN0aW9uKGUscil7dmFyIHQ9MDtyZXR1cm4gbyh1LHIpP3Vbcl06MzU9PT1yLmNoYXJDb2RlQXQoMCkmJmMudGVzdChyKSYmcyh0PVwieFwiPT09clsxXS50b0xvd2VyQ2FzZSgpP3BhcnNlSW50KHIuc2xpY2UoMiksMTYpOnBhcnNlSW50KHIuc2xpY2UoMSksMTApKT9pKHQpOmV9KGUsdCl9KX0sdC5pc1ZhbGlkRW50aXR5Q29kZT1zLHQuZnJvbUNvZGVQb2ludD1pLHQuZXNjYXBlSHRtbD1mdW5jdGlvbihlKXtyZXR1cm4gcC50ZXN0KGUpP2UucmVwbGFjZShoLGQpOmV9LHQuYXJyYXlSZXBsYWNlQXQ9ZnVuY3Rpb24oZSxyLHQpe3JldHVybltdLmNvbmNhdChlLnNsaWNlKDAsciksdCxlLnNsaWNlKHIrMSkpfSx0LmlzU3BhY2U9ZnVuY3Rpb24oZSl7c3dpdGNoKGUpe2Nhc2UgOTpjYXNlIDMyOnJldHVybiEwfXJldHVybiExfSx0LmlzV2hpdGVTcGFjZT1mdW5jdGlvbihlKXtpZihlPj04MTkyJiZlPD04MjAyKXJldHVybiEwO3N3aXRjaChlKXtjYXNlIDk6Y2FzZSAxMDpjYXNlIDExOmNhc2UgMTI6Y2FzZSAxMzpjYXNlIDMyOmNhc2UgMTYwOmNhc2UgNTc2MDpjYXNlIDgyMzk6Y2FzZSA4Mjg3OmNhc2UgMTIyODg6cmV0dXJuITB9cmV0dXJuITF9LHQuaXNNZEFzY2lpUHVuY3Q9ZnVuY3Rpb24oZSl7c3dpdGNoKGUpe2Nhc2UgMzM6Y2FzZSAzNDpjYXNlIDM1OmNhc2UgMzY6Y2FzZSAzNzpjYXNlIDM4OmNhc2UgMzk6Y2FzZSA0MDpjYXNlIDQxOmNhc2UgNDI6Y2FzZSA0MzpjYXNlIDQ0OmNhc2UgNDU6Y2FzZSA0NjpjYXNlIDQ3OmNhc2UgNTg6Y2FzZSA1OTpjYXNlIDYwOmNhc2UgNjE6Y2FzZSA2MjpjYXNlIDYzOmNhc2UgNjQ6Y2FzZSA5MTpjYXNlIDkyOmNhc2UgOTM6Y2FzZSA5NDpjYXNlIDk1OmNhc2UgOTY6Y2FzZSAxMjM6Y2FzZSAxMjQ6Y2FzZSAxMjU6Y2FzZSAxMjY6cmV0dXJuITA7ZGVmYXVsdDpyZXR1cm4hMX19LHQuaXNQdW5jdENoYXI9ZnVuY3Rpb24oZSl7cmV0dXJuIF8udGVzdChlKX0sdC5lc2NhcGVSRT1mdW5jdGlvbihlKXtyZXR1cm4gZS5yZXBsYWNlKG0sXCJcXFxcJCZcIil9LHQubm9ybWFsaXplUmVmZXJlbmNlPWZ1bmN0aW9uKGUpe3JldHVybiBlPWUudHJpbSgpLnJlcGxhY2UoL1xccysvZyxcIiBcIiksXCLhub5cIj09PVwi4bqeXCIudG9Mb3dlckNhc2UoKSYmKGU9ZS5yZXBsYWNlKC/hup4vZyxcIsOfXCIpKSxlLnRvTG93ZXJDYXNlKCkudG9VcHBlckNhc2UoKX19LHtcIi4vZW50aXRpZXNcIjoxLG1kdXJsOjU4LFwidWMubWljcm9cIjo2NSxcInVjLm1pY3JvL2NhdGVnb3JpZXMvUC9yZWdleFwiOjYzfV0sNTpbZnVuY3Rpb24oZSxyLHQpe3QucGFyc2VMaW5rTGFiZWw9ZShcIi4vcGFyc2VfbGlua19sYWJlbFwiKSx0LnBhcnNlTGlua0Rlc3RpbmF0aW9uPWUoXCIuL3BhcnNlX2xpbmtfZGVzdGluYXRpb25cIiksdC5wYXJzZUxpbmtUaXRsZT1lKFwiLi9wYXJzZV9saW5rX3RpdGxlXCIpfSx7XCIuL3BhcnNlX2xpbmtfZGVzdGluYXRpb25cIjo2LFwiLi9wYXJzZV9saW5rX2xhYmVsXCI6NyxcIi4vcGFyc2VfbGlua190aXRsZVwiOjh9XSw2OltmdW5jdGlvbihlLHIsdCl7dmFyIG49ZShcIi4uL2NvbW1vbi91dGlsc1wiKS51bmVzY2FwZUFsbDtyLmV4cG9ydHM9ZnVuY3Rpb24oZSxyLHQpe3ZhciBvLHMsaT1yLGE9e29rOiExLHBvczowLGxpbmVzOjAsc3RyOlwiXCJ9O2lmKDYwPT09ZS5jaGFyQ29kZUF0KHIpKXtmb3IocisrO3I8dDspe2lmKDEwPT09KG89ZS5jaGFyQ29kZUF0KHIpKSlyZXR1cm4gYTtpZig2Mj09PW8pcmV0dXJuIGEucG9zPXIrMSxhLnN0cj1uKGUuc2xpY2UoaSsxLHIpKSxhLm9rPSEwLGE7OTI9PT1vJiZyKzE8dD9yKz0yOnIrK31yZXR1cm4gYX1mb3Iocz0wO3I8dCYmMzIhPT0obz1lLmNoYXJDb2RlQXQocikpJiYhKG88MzJ8fDEyNz09PW8pOylpZig5Mj09PW8mJnIrMTx0KXIrPTI7ZWxzZXtpZig0MD09PW8mJnMrKyw0MT09PW8pe2lmKDA9PT1zKWJyZWFrO3MtLX1yKyt9cmV0dXJuIGk9PT1yP2E6MCE9PXM/YTooYS5zdHI9bihlLnNsaWNlKGkscikpLGEubGluZXM9MCxhLnBvcz1yLGEub2s9ITAsYSl9fSx7XCIuLi9jb21tb24vdXRpbHNcIjo0fV0sNzpbZnVuY3Rpb24oZSxyLHQpe3IuZXhwb3J0cz1mdW5jdGlvbihlLHIsdCl7dmFyIG4sbyxzLGksYT0tMSxsPWUucG9zTWF4LGM9ZS5wb3M7Zm9yKGUucG9zPXIrMSxuPTE7ZS5wb3M8bDspe2lmKDkzPT09KHM9ZS5zcmMuY2hhckNvZGVBdChlLnBvcykpJiYwPT0tLW4pe289ITA7YnJlYWt9aWYoaT1lLnBvcyxlLm1kLmlubGluZS5za2lwVG9rZW4oZSksOTE9PT1zKWlmKGk9PT1lLnBvcy0xKW4rKztlbHNlIGlmKHQpcmV0dXJuIGUucG9zPWMsLTF9cmV0dXJuIG8mJihhPWUucG9zKSxlLnBvcz1jLGF9fSx7fV0sODpbZnVuY3Rpb24oZSxyLHQpe3ZhciBuPWUoXCIuLi9jb21tb24vdXRpbHNcIikudW5lc2NhcGVBbGw7ci5leHBvcnRzPWZ1bmN0aW9uKGUscix0KXt2YXIgbyxzLGk9MCxhPXIsbD17b2s6ITEscG9zOjAsbGluZXM6MCxzdHI6XCJcIn07aWYocj49dClyZXR1cm4gbDtpZigzNCE9PShzPWUuY2hhckNvZGVBdChyKSkmJjM5IT09cyYmNDAhPT1zKXJldHVybiBsO2ZvcihyKyssNDA9PT1zJiYocz00MSk7cjx0Oyl7aWYoKG89ZS5jaGFyQ29kZUF0KHIpKT09PXMpcmV0dXJuIGwucG9zPXIrMSxsLmxpbmVzPWksbC5zdHI9bihlLnNsaWNlKGErMSxyKSksbC5vaz0hMCxsOzEwPT09bz9pKys6OTI9PT1vJiZyKzE8dCYmKHIrKywxMD09PWUuY2hhckNvZGVBdChyKSYmaSsrKSxyKyt9cmV0dXJuIGx9fSx7XCIuLi9jb21tb24vdXRpbHNcIjo0fV0sOTpbZnVuY3Rpb24oZSxyLHQpe3ZhciBuPWUoXCIuL2NvbW1vbi91dGlsc1wiKSxvPWUoXCIuL2hlbHBlcnNcIikscz1lKFwiLi9yZW5kZXJlclwiKSxpPWUoXCIuL3BhcnNlcl9jb3JlXCIpLGE9ZShcIi4vcGFyc2VyX2Jsb2NrXCIpLGw9ZShcIi4vcGFyc2VyX2lubGluZVwiKSxjPWUoXCJsaW5raWZ5LWl0XCIpLHU9ZShcIm1kdXJsXCIpLHA9ZShcInB1bnljb2RlXCIpLGg9e2RlZmF1bHQ6ZShcIi4vcHJlc2V0cy9kZWZhdWx0XCIpLHplcm86ZShcIi4vcHJlc2V0cy96ZXJvXCIpLGNvbW1vbm1hcms6ZShcIi4vcHJlc2V0cy9jb21tb25tYXJrXCIpfSxmPS9eKHZic2NyaXB0fGphdmFzY3JpcHR8ZmlsZXxkYXRhKTovLGQ9L15kYXRhOmltYWdlXFwvKGdpZnxwbmd8anBlZ3x3ZWJwKTsvO2Z1bmN0aW9uIG0oZSl7dmFyIHI9ZS50cmltKCkudG9Mb3dlckNhc2UoKTtyZXR1cm4hZi50ZXN0KHIpfHwhIWQudGVzdChyKX12YXIgXz1bXCJodHRwOlwiLFwiaHR0cHM6XCIsXCJtYWlsdG86XCJdO2Z1bmN0aW9uIGcoZSl7dmFyIHI9dS5wYXJzZShlLCEwKTtpZihyLmhvc3RuYW1lJiYoIXIucHJvdG9jb2x8fF8uaW5kZXhPZihyLnByb3RvY29sKT49MCkpdHJ5e3IuaG9zdG5hbWU9cC50b0FTQ0lJKHIuaG9zdG5hbWUpfWNhdGNoKGUpe31yZXR1cm4gdS5lbmNvZGUodS5mb3JtYXQocikpfWZ1bmN0aW9uIGsoZSl7dmFyIHI9dS5wYXJzZShlLCEwKTtpZihyLmhvc3RuYW1lJiYoIXIucHJvdG9jb2x8fF8uaW5kZXhPZihyLnByb3RvY29sKT49MCkpdHJ5e3IuaG9zdG5hbWU9cC50b1VuaWNvZGUoci5ob3N0bmFtZSl9Y2F0Y2goZSl7fXJldHVybiB1LmRlY29kZSh1LmZvcm1hdChyKSl9ZnVuY3Rpb24gYihlLHIpe2lmKCEodGhpcyBpbnN0YW5jZW9mIGIpKXJldHVybiBuZXcgYihlLHIpO3J8fG4uaXNTdHJpbmcoZSl8fChyPWV8fHt9LGU9XCJkZWZhdWx0XCIpLHRoaXMuaW5saW5lPW5ldyBsLHRoaXMuYmxvY2s9bmV3IGEsdGhpcy5jb3JlPW5ldyBpLHRoaXMucmVuZGVyZXI9bmV3IHMsdGhpcy5saW5raWZ5PW5ldyBjLHRoaXMudmFsaWRhdGVMaW5rPW0sdGhpcy5ub3JtYWxpemVMaW5rPWcsdGhpcy5ub3JtYWxpemVMaW5rVGV4dD1rLHRoaXMudXRpbHM9bix0aGlzLmhlbHBlcnM9bi5hc3NpZ24oe30sbyksdGhpcy5vcHRpb25zPXt9LHRoaXMuY29uZmlndXJlKGUpLHImJnRoaXMuc2V0KHIpfWIucHJvdG90eXBlLnNldD1mdW5jdGlvbihlKXtyZXR1cm4gbi5hc3NpZ24odGhpcy5vcHRpb25zLGUpLHRoaXN9LGIucHJvdG90eXBlLmNvbmZpZ3VyZT1mdW5jdGlvbihlKXt2YXIgcix0PXRoaXM7aWYobi5pc1N0cmluZyhlKSYmIShlPWhbcj1lXSkpdGhyb3cgbmV3IEVycm9yKCdXcm9uZyBgbWFya2Rvd24taXRgIHByZXNldCBcIicrcisnXCIsIGNoZWNrIG5hbWUnKTtpZighZSl0aHJvdyBuZXcgRXJyb3IoXCJXcm9uZyBgbWFya2Rvd24taXRgIHByZXNldCwgY2FuJ3QgYmUgZW1wdHlcIik7cmV0dXJuIGUub3B0aW9ucyYmdC5zZXQoZS5vcHRpb25zKSxlLmNvbXBvbmVudHMmJk9iamVjdC5rZXlzKGUuY29tcG9uZW50cykuZm9yRWFjaChmdW5jdGlvbihyKXtlLmNvbXBvbmVudHNbcl0ucnVsZXMmJnRbcl0ucnVsZXIuZW5hYmxlT25seShlLmNvbXBvbmVudHNbcl0ucnVsZXMpLGUuY29tcG9uZW50c1tyXS5ydWxlczImJnRbcl0ucnVsZXIyLmVuYWJsZU9ubHkoZS5jb21wb25lbnRzW3JdLnJ1bGVzMil9KSx0aGlzfSxiLnByb3RvdHlwZS5lbmFibGU9ZnVuY3Rpb24oZSxyKXt2YXIgdD1bXTtBcnJheS5pc0FycmF5KGUpfHwoZT1bZV0pLFtcImNvcmVcIixcImJsb2NrXCIsXCJpbmxpbmVcIl0uZm9yRWFjaChmdW5jdGlvbihyKXt0PXQuY29uY2F0KHRoaXNbcl0ucnVsZXIuZW5hYmxlKGUsITApKX0sdGhpcyksdD10LmNvbmNhdCh0aGlzLmlubGluZS5ydWxlcjIuZW5hYmxlKGUsITApKTt2YXIgbj1lLmZpbHRlcihmdW5jdGlvbihlKXtyZXR1cm4gdC5pbmRleE9mKGUpPDB9KTtpZihuLmxlbmd0aCYmIXIpdGhyb3cgbmV3IEVycm9yKFwiTWFya2Rvd25JdC4gRmFpbGVkIHRvIGVuYWJsZSB1bmtub3duIHJ1bGUocyk6IFwiK24pO3JldHVybiB0aGlzfSxiLnByb3RvdHlwZS5kaXNhYmxlPWZ1bmN0aW9uKGUscil7dmFyIHQ9W107QXJyYXkuaXNBcnJheShlKXx8KGU9W2VdKSxbXCJjb3JlXCIsXCJibG9ja1wiLFwiaW5saW5lXCJdLmZvckVhY2goZnVuY3Rpb24ocil7dD10LmNvbmNhdCh0aGlzW3JdLnJ1bGVyLmRpc2FibGUoZSwhMCkpfSx0aGlzKSx0PXQuY29uY2F0KHRoaXMuaW5saW5lLnJ1bGVyMi5kaXNhYmxlKGUsITApKTt2YXIgbj1lLmZpbHRlcihmdW5jdGlvbihlKXtyZXR1cm4gdC5pbmRleE9mKGUpPDB9KTtpZihuLmxlbmd0aCYmIXIpdGhyb3cgbmV3IEVycm9yKFwiTWFya2Rvd25JdC4gRmFpbGVkIHRvIGRpc2FibGUgdW5rbm93biBydWxlKHMpOiBcIituKTtyZXR1cm4gdGhpc30sYi5wcm90b3R5cGUudXNlPWZ1bmN0aW9uKGUpe3ZhciByPVt0aGlzXS5jb25jYXQoQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDEpKTtyZXR1cm4gZS5hcHBseShlLHIpLHRoaXN9LGIucHJvdG90eXBlLnBhcnNlPWZ1bmN0aW9uKGUscil7aWYoXCJzdHJpbmdcIiE9dHlwZW9mIGUpdGhyb3cgbmV3IEVycm9yKFwiSW5wdXQgZGF0YSBzaG91bGQgYmUgYSBTdHJpbmdcIik7dmFyIHQ9bmV3IHRoaXMuY29yZS5TdGF0ZShlLHRoaXMscik7cmV0dXJuIHRoaXMuY29yZS5wcm9jZXNzKHQpLHQudG9rZW5zfSxiLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24oZSxyKXtyZXR1cm4gcj1yfHx7fSx0aGlzLnJlbmRlcmVyLnJlbmRlcih0aGlzLnBhcnNlKGUsciksdGhpcy5vcHRpb25zLHIpfSxiLnByb3RvdHlwZS5wYXJzZUlubGluZT1mdW5jdGlvbihlLHIpe3ZhciB0PW5ldyB0aGlzLmNvcmUuU3RhdGUoZSx0aGlzLHIpO3JldHVybiB0LmlubGluZU1vZGU9ITAsdGhpcy5jb3JlLnByb2Nlc3ModCksdC50b2tlbnN9LGIucHJvdG90eXBlLnJlbmRlcklubGluZT1mdW5jdGlvbihlLHIpe3JldHVybiByPXJ8fHt9LHRoaXMucmVuZGVyZXIucmVuZGVyKHRoaXMucGFyc2VJbmxpbmUoZSxyKSx0aGlzLm9wdGlvbnMscil9LHIuZXhwb3J0cz1ifSx7XCIuL2NvbW1vbi91dGlsc1wiOjQsXCIuL2hlbHBlcnNcIjo1LFwiLi9wYXJzZXJfYmxvY2tcIjoxMCxcIi4vcGFyc2VyX2NvcmVcIjoxMSxcIi4vcGFyc2VyX2lubGluZVwiOjEyLFwiLi9wcmVzZXRzL2NvbW1vbm1hcmtcIjoxMyxcIi4vcHJlc2V0cy9kZWZhdWx0XCI6MTQsXCIuL3ByZXNldHMvemVyb1wiOjE1LFwiLi9yZW5kZXJlclwiOjE2LFwibGlua2lmeS1pdFwiOjUzLG1kdXJsOjU4LHB1bnljb2RlOjYwfV0sMTA6W2Z1bmN0aW9uKGUscix0KXt2YXIgbj1lKFwiLi9ydWxlclwiKSxvPVtbXCJ0YWJsZVwiLGUoXCIuL3J1bGVzX2Jsb2NrL3RhYmxlXCIpLFtcInBhcmFncmFwaFwiLFwicmVmZXJlbmNlXCJdXSxbXCJjb2RlXCIsZShcIi4vcnVsZXNfYmxvY2svY29kZVwiKV0sW1wiZmVuY2VcIixlKFwiLi9ydWxlc19ibG9jay9mZW5jZVwiKSxbXCJwYXJhZ3JhcGhcIixcInJlZmVyZW5jZVwiLFwiYmxvY2txdW90ZVwiLFwibGlzdFwiXV0sW1wiYmxvY2txdW90ZVwiLGUoXCIuL3J1bGVzX2Jsb2NrL2Jsb2NrcXVvdGVcIiksW1wicGFyYWdyYXBoXCIsXCJyZWZlcmVuY2VcIixcImJsb2NrcXVvdGVcIixcImxpc3RcIl1dLFtcImhyXCIsZShcIi4vcnVsZXNfYmxvY2svaHJcIiksW1wicGFyYWdyYXBoXCIsXCJyZWZlcmVuY2VcIixcImJsb2NrcXVvdGVcIixcImxpc3RcIl1dLFtcImxpc3RcIixlKFwiLi9ydWxlc19ibG9jay9saXN0XCIpLFtcInBhcmFncmFwaFwiLFwicmVmZXJlbmNlXCIsXCJibG9ja3F1b3RlXCJdXSxbXCJyZWZlcmVuY2VcIixlKFwiLi9ydWxlc19ibG9jay9yZWZlcmVuY2VcIildLFtcImhlYWRpbmdcIixlKFwiLi9ydWxlc19ibG9jay9oZWFkaW5nXCIpLFtcInBhcmFncmFwaFwiLFwicmVmZXJlbmNlXCIsXCJibG9ja3F1b3RlXCJdXSxbXCJsaGVhZGluZ1wiLGUoXCIuL3J1bGVzX2Jsb2NrL2xoZWFkaW5nXCIpXSxbXCJodG1sX2Jsb2NrXCIsZShcIi4vcnVsZXNfYmxvY2svaHRtbF9ibG9ja1wiKSxbXCJwYXJhZ3JhcGhcIixcInJlZmVyZW5jZVwiLFwiYmxvY2txdW90ZVwiXV0sW1wicGFyYWdyYXBoXCIsZShcIi4vcnVsZXNfYmxvY2svcGFyYWdyYXBoXCIpXV07ZnVuY3Rpb24gcygpe3RoaXMucnVsZXI9bmV3IG47Zm9yKHZhciBlPTA7ZTxvLmxlbmd0aDtlKyspdGhpcy5ydWxlci5wdXNoKG9bZV1bMF0sb1tlXVsxXSx7YWx0OihvW2VdWzJdfHxbXSkuc2xpY2UoKX0pfXMucHJvdG90eXBlLnRva2VuaXplPWZ1bmN0aW9uKGUscix0KXtmb3IodmFyIG4sbz10aGlzLnJ1bGVyLmdldFJ1bGVzKFwiXCIpLHM9by5sZW5ndGgsaT1yLGE9ITEsbD1lLm1kLm9wdGlvbnMubWF4TmVzdGluZztpPHQmJihlLmxpbmU9aT1lLnNraXBFbXB0eUxpbmVzKGkpLCEoaT49dCkpJiYhKGUuc0NvdW50W2ldPGUuYmxrSW5kZW50KTspe2lmKGUubGV2ZWw+PWwpe2UubGluZT10O2JyZWFrfWZvcihuPTA7bjxzJiYhb1tuXShlLGksdCwhMSk7bisrKTtlLnRpZ2h0PSFhLGUuaXNFbXB0eShlLmxpbmUtMSkmJihhPSEwKSwoaT1lLmxpbmUpPHQmJmUuaXNFbXB0eShpKSYmKGE9ITAsaSsrLGUubGluZT1pKX19LHMucHJvdG90eXBlLnBhcnNlPWZ1bmN0aW9uKGUscix0LG4pe3ZhciBvO2UmJihvPW5ldyB0aGlzLlN0YXRlKGUscix0LG4pLHRoaXMudG9rZW5pemUobyxvLmxpbmUsby5saW5lTWF4KSl9LHMucHJvdG90eXBlLlN0YXRlPWUoXCIuL3J1bGVzX2Jsb2NrL3N0YXRlX2Jsb2NrXCIpLHIuZXhwb3J0cz1zfSx7XCIuL3J1bGVyXCI6MTcsXCIuL3J1bGVzX2Jsb2NrL2Jsb2NrcXVvdGVcIjoxOCxcIi4vcnVsZXNfYmxvY2svY29kZVwiOjE5LFwiLi9ydWxlc19ibG9jay9mZW5jZVwiOjIwLFwiLi9ydWxlc19ibG9jay9oZWFkaW5nXCI6MjEsXCIuL3J1bGVzX2Jsb2NrL2hyXCI6MjIsXCIuL3J1bGVzX2Jsb2NrL2h0bWxfYmxvY2tcIjoyMyxcIi4vcnVsZXNfYmxvY2svbGhlYWRpbmdcIjoyNCxcIi4vcnVsZXNfYmxvY2svbGlzdFwiOjI1LFwiLi9ydWxlc19ibG9jay9wYXJhZ3JhcGhcIjoyNixcIi4vcnVsZXNfYmxvY2svcmVmZXJlbmNlXCI6MjcsXCIuL3J1bGVzX2Jsb2NrL3N0YXRlX2Jsb2NrXCI6MjgsXCIuL3J1bGVzX2Jsb2NrL3RhYmxlXCI6Mjl9XSwxMTpbZnVuY3Rpb24oZSxyLHQpe3ZhciBuPWUoXCIuL3J1bGVyXCIpLG89W1tcIm5vcm1hbGl6ZVwiLGUoXCIuL3J1bGVzX2NvcmUvbm9ybWFsaXplXCIpXSxbXCJibG9ja1wiLGUoXCIuL3J1bGVzX2NvcmUvYmxvY2tcIildLFtcImlubGluZVwiLGUoXCIuL3J1bGVzX2NvcmUvaW5saW5lXCIpXSxbXCJsaW5raWZ5XCIsZShcIi4vcnVsZXNfY29yZS9saW5raWZ5XCIpXSxbXCJyZXBsYWNlbWVudHNcIixlKFwiLi9ydWxlc19jb3JlL3JlcGxhY2VtZW50c1wiKV0sW1wic21hcnRxdW90ZXNcIixlKFwiLi9ydWxlc19jb3JlL3NtYXJ0cXVvdGVzXCIpXV07ZnVuY3Rpb24gcygpe3RoaXMucnVsZXI9bmV3IG47Zm9yKHZhciBlPTA7ZTxvLmxlbmd0aDtlKyspdGhpcy5ydWxlci5wdXNoKG9bZV1bMF0sb1tlXVsxXSl9cy5wcm90b3R5cGUucHJvY2Vzcz1mdW5jdGlvbihlKXt2YXIgcix0LG47Zm9yKG49dGhpcy5ydWxlci5nZXRSdWxlcyhcIlwiKSxyPTAsdD1uLmxlbmd0aDtyPHQ7cisrKW5bcl0oZSl9LHMucHJvdG90eXBlLlN0YXRlPWUoXCIuL3J1bGVzX2NvcmUvc3RhdGVfY29yZVwiKSxyLmV4cG9ydHM9c30se1wiLi9ydWxlclwiOjE3LFwiLi9ydWxlc19jb3JlL2Jsb2NrXCI6MzAsXCIuL3J1bGVzX2NvcmUvaW5saW5lXCI6MzEsXCIuL3J1bGVzX2NvcmUvbGlua2lmeVwiOjMyLFwiLi9ydWxlc19jb3JlL25vcm1hbGl6ZVwiOjMzLFwiLi9ydWxlc19jb3JlL3JlcGxhY2VtZW50c1wiOjM0LFwiLi9ydWxlc19jb3JlL3NtYXJ0cXVvdGVzXCI6MzUsXCIuL3J1bGVzX2NvcmUvc3RhdGVfY29yZVwiOjM2fV0sMTI6W2Z1bmN0aW9uKGUscix0KXt2YXIgbj1lKFwiLi9ydWxlclwiKSxvPVtbXCJ0ZXh0XCIsZShcIi4vcnVsZXNfaW5saW5lL3RleHRcIildLFtcIm5ld2xpbmVcIixlKFwiLi9ydWxlc19pbmxpbmUvbmV3bGluZVwiKV0sW1wiZXNjYXBlXCIsZShcIi4vcnVsZXNfaW5saW5lL2VzY2FwZVwiKV0sW1wiYmFja3RpY2tzXCIsZShcIi4vcnVsZXNfaW5saW5lL2JhY2t0aWNrc1wiKV0sW1wic3RyaWtldGhyb3VnaFwiLGUoXCIuL3J1bGVzX2lubGluZS9zdHJpa2V0aHJvdWdoXCIpLnRva2VuaXplXSxbXCJlbXBoYXNpc1wiLGUoXCIuL3J1bGVzX2lubGluZS9lbXBoYXNpc1wiKS50b2tlbml6ZV0sW1wibGlua1wiLGUoXCIuL3J1bGVzX2lubGluZS9saW5rXCIpXSxbXCJpbWFnZVwiLGUoXCIuL3J1bGVzX2lubGluZS9pbWFnZVwiKV0sW1wiYXV0b2xpbmtcIixlKFwiLi9ydWxlc19pbmxpbmUvYXV0b2xpbmtcIildLFtcImh0bWxfaW5saW5lXCIsZShcIi4vcnVsZXNfaW5saW5lL2h0bWxfaW5saW5lXCIpXSxbXCJlbnRpdHlcIixlKFwiLi9ydWxlc19pbmxpbmUvZW50aXR5XCIpXV0scz1bW1wiYmFsYW5jZV9wYWlyc1wiLGUoXCIuL3J1bGVzX2lubGluZS9iYWxhbmNlX3BhaXJzXCIpXSxbXCJzdHJpa2V0aHJvdWdoXCIsZShcIi4vcnVsZXNfaW5saW5lL3N0cmlrZXRocm91Z2hcIikucG9zdFByb2Nlc3NdLFtcImVtcGhhc2lzXCIsZShcIi4vcnVsZXNfaW5saW5lL2VtcGhhc2lzXCIpLnBvc3RQcm9jZXNzXSxbXCJ0ZXh0X2NvbGxhcHNlXCIsZShcIi4vcnVsZXNfaW5saW5lL3RleHRfY29sbGFwc2VcIildXTtmdW5jdGlvbiBpKCl7dmFyIGU7Zm9yKHRoaXMucnVsZXI9bmV3IG4sZT0wO2U8by5sZW5ndGg7ZSsrKXRoaXMucnVsZXIucHVzaChvW2VdWzBdLG9bZV1bMV0pO2Zvcih0aGlzLnJ1bGVyMj1uZXcgbixlPTA7ZTxzLmxlbmd0aDtlKyspdGhpcy5ydWxlcjIucHVzaChzW2VdWzBdLHNbZV1bMV0pfWkucHJvdG90eXBlLnNraXBUb2tlbj1mdW5jdGlvbihlKXt2YXIgcix0LG49ZS5wb3Msbz10aGlzLnJ1bGVyLmdldFJ1bGVzKFwiXCIpLHM9by5sZW5ndGgsaT1lLm1kLm9wdGlvbnMubWF4TmVzdGluZyxhPWUuY2FjaGU7aWYodm9pZCAwPT09YVtuXSl7aWYoZS5sZXZlbDxpKWZvcih0PTA7dDxzJiYoZS5sZXZlbCsrLHI9b1t0XShlLCEwKSxlLmxldmVsLS0sIXIpO3QrKyk7ZWxzZSBlLnBvcz1lLnBvc01heDtyfHxlLnBvcysrLGFbbl09ZS5wb3N9ZWxzZSBlLnBvcz1hW25dfSxpLnByb3RvdHlwZS50b2tlbml6ZT1mdW5jdGlvbihlKXtmb3IodmFyIHIsdCxuPXRoaXMucnVsZXIuZ2V0UnVsZXMoXCJcIiksbz1uLmxlbmd0aCxzPWUucG9zTWF4LGk9ZS5tZC5vcHRpb25zLm1heE5lc3Rpbmc7ZS5wb3M8czspe2lmKGUubGV2ZWw8aSlmb3IodD0wO3Q8byYmIShyPW5bdF0oZSwhMSkpO3QrKyk7aWYocil7aWYoZS5wb3M+PXMpYnJlYWt9ZWxzZSBlLnBlbmRpbmcrPWUuc3JjW2UucG9zKytdfWUucGVuZGluZyYmZS5wdXNoUGVuZGluZygpfSxpLnByb3RvdHlwZS5wYXJzZT1mdW5jdGlvbihlLHIsdCxuKXt2YXIgbyxzLGksYT1uZXcgdGhpcy5TdGF0ZShlLHIsdCxuKTtmb3IodGhpcy50b2tlbml6ZShhKSxzPXRoaXMucnVsZXIyLmdldFJ1bGVzKFwiXCIpLGk9cy5sZW5ndGgsbz0wO288aTtvKyspc1tvXShhKX0saS5wcm90b3R5cGUuU3RhdGU9ZShcIi4vcnVsZXNfaW5saW5lL3N0YXRlX2lubGluZVwiKSxyLmV4cG9ydHM9aX0se1wiLi9ydWxlclwiOjE3LFwiLi9ydWxlc19pbmxpbmUvYXV0b2xpbmtcIjozNyxcIi4vcnVsZXNfaW5saW5lL2JhY2t0aWNrc1wiOjM4LFwiLi9ydWxlc19pbmxpbmUvYmFsYW5jZV9wYWlyc1wiOjM5LFwiLi9ydWxlc19pbmxpbmUvZW1waGFzaXNcIjo0MCxcIi4vcnVsZXNfaW5saW5lL2VudGl0eVwiOjQxLFwiLi9ydWxlc19pbmxpbmUvZXNjYXBlXCI6NDIsXCIuL3J1bGVzX2lubGluZS9odG1sX2lubGluZVwiOjQzLFwiLi9ydWxlc19pbmxpbmUvaW1hZ2VcIjo0NCxcIi4vcnVsZXNfaW5saW5lL2xpbmtcIjo0NSxcIi4vcnVsZXNfaW5saW5lL25ld2xpbmVcIjo0NixcIi4vcnVsZXNfaW5saW5lL3N0YXRlX2lubGluZVwiOjQ3LFwiLi9ydWxlc19pbmxpbmUvc3RyaWtldGhyb3VnaFwiOjQ4LFwiLi9ydWxlc19pbmxpbmUvdGV4dFwiOjQ5LFwiLi9ydWxlc19pbmxpbmUvdGV4dF9jb2xsYXBzZVwiOjUwfV0sMTM6W2Z1bmN0aW9uKGUscix0KXtyLmV4cG9ydHM9e29wdGlvbnM6e2h0bWw6ITAseGh0bWxPdXQ6ITAsYnJlYWtzOiExLGxhbmdQcmVmaXg6XCJsYW5ndWFnZS1cIixsaW5raWZ5OiExLHR5cG9ncmFwaGVyOiExLHF1b3RlczpcIuKAnOKAneKAmOKAmVwiLGhpZ2hsaWdodDpudWxsLG1heE5lc3Rpbmc6MjB9LGNvbXBvbmVudHM6e2NvcmU6e3J1bGVzOltcIm5vcm1hbGl6ZVwiLFwiYmxvY2tcIixcImlubGluZVwiXX0sYmxvY2s6e3J1bGVzOltcImJsb2NrcXVvdGVcIixcImNvZGVcIixcImZlbmNlXCIsXCJoZWFkaW5nXCIsXCJoclwiLFwiaHRtbF9ibG9ja1wiLFwibGhlYWRpbmdcIixcImxpc3RcIixcInJlZmVyZW5jZVwiLFwicGFyYWdyYXBoXCJdfSxpbmxpbmU6e3J1bGVzOltcImF1dG9saW5rXCIsXCJiYWNrdGlja3NcIixcImVtcGhhc2lzXCIsXCJlbnRpdHlcIixcImVzY2FwZVwiLFwiaHRtbF9pbmxpbmVcIixcImltYWdlXCIsXCJsaW5rXCIsXCJuZXdsaW5lXCIsXCJ0ZXh0XCJdLHJ1bGVzMjpbXCJiYWxhbmNlX3BhaXJzXCIsXCJlbXBoYXNpc1wiLFwidGV4dF9jb2xsYXBzZVwiXX19fX0se31dLDE0OltmdW5jdGlvbihlLHIsdCl7ci5leHBvcnRzPXtvcHRpb25zOntodG1sOiExLHhodG1sT3V0OiExLGJyZWFrczohMSxsYW5nUHJlZml4OlwibGFuZ3VhZ2UtXCIsbGlua2lmeTohMSx0eXBvZ3JhcGhlcjohMSxxdW90ZXM6XCLigJzigJ3igJjigJlcIixoaWdobGlnaHQ6bnVsbCxtYXhOZXN0aW5nOjEwMH0sY29tcG9uZW50czp7Y29yZTp7fSxibG9jazp7fSxpbmxpbmU6e319fX0se31dLDE1OltmdW5jdGlvbihlLHIsdCl7ci5leHBvcnRzPXtvcHRpb25zOntodG1sOiExLHhodG1sT3V0OiExLGJyZWFrczohMSxsYW5nUHJlZml4OlwibGFuZ3VhZ2UtXCIsbGlua2lmeTohMSx0eXBvZ3JhcGhlcjohMSxxdW90ZXM6XCLigJzigJ3igJjigJlcIixoaWdobGlnaHQ6bnVsbCxtYXhOZXN0aW5nOjIwfSxjb21wb25lbnRzOntjb3JlOntydWxlczpbXCJub3JtYWxpemVcIixcImJsb2NrXCIsXCJpbmxpbmVcIl19LGJsb2NrOntydWxlczpbXCJwYXJhZ3JhcGhcIl19LGlubGluZTp7cnVsZXM6W1widGV4dFwiXSxydWxlczI6W1wiYmFsYW5jZV9wYWlyc1wiLFwidGV4dF9jb2xsYXBzZVwiXX19fX0se31dLDE2OltmdW5jdGlvbihlLHIsdCl7dmFyIG49ZShcIi4vY29tbW9uL3V0aWxzXCIpLmFzc2lnbixvPWUoXCIuL2NvbW1vbi91dGlsc1wiKS51bmVzY2FwZUFsbCxzPWUoXCIuL2NvbW1vbi91dGlsc1wiKS5lc2NhcGVIdG1sLGk9e307ZnVuY3Rpb24gYSgpe3RoaXMucnVsZXM9bih7fSxpKX1pLmNvZGVfaW5saW5lPWZ1bmN0aW9uKGUscix0LG4sbyl7dmFyIGk9ZVtyXTtyZXR1cm5cIjxjb2RlXCIrby5yZW5kZXJBdHRycyhpKStcIj5cIitzKGVbcl0uY29udGVudCkrXCI8L2NvZGU+XCJ9LGkuY29kZV9ibG9jaz1mdW5jdGlvbihlLHIsdCxuLG8pe3ZhciBpPWVbcl07cmV0dXJuXCI8cHJlXCIrby5yZW5kZXJBdHRycyhpKStcIj48Y29kZT5cIitzKGVbcl0uY29udGVudCkrXCI8L2NvZGU+PC9wcmU+XFxuXCJ9LGkuZmVuY2U9ZnVuY3Rpb24oZSxyLHQsbixpKXt2YXIgYSxsLGMsdSxwPWVbcl0saD1wLmluZm8/byhwLmluZm8pLnRyaW0oKTpcIlwiLGY9XCJcIjtyZXR1cm4gaCYmKGY9aC5zcGxpdCgvXFxzKy9nKVswXSksMD09PShhPXQuaGlnaGxpZ2h0JiZ0LmhpZ2hsaWdodChwLmNvbnRlbnQsZil8fHMocC5jb250ZW50KSkuaW5kZXhPZihcIjxwcmVcIik/YStcIlxcblwiOmg/KGw9cC5hdHRySW5kZXgoXCJjbGFzc1wiKSxjPXAuYXR0cnM/cC5hdHRycy5zbGljZSgpOltdLGw8MD9jLnB1c2goW1wiY2xhc3NcIix0LmxhbmdQcmVmaXgrZl0pOmNbbF1bMV0rPVwiIFwiK3QubGFuZ1ByZWZpeCtmLHU9e2F0dHJzOmN9LFwiPHByZT48Y29kZVwiK2kucmVuZGVyQXR0cnModSkrXCI+XCIrYStcIjwvY29kZT48L3ByZT5cXG5cIik6XCI8cHJlPjxjb2RlXCIraS5yZW5kZXJBdHRycyhwKStcIj5cIithK1wiPC9jb2RlPjwvcHJlPlxcblwifSxpLmltYWdlPWZ1bmN0aW9uKGUscix0LG4sbyl7dmFyIHM9ZVtyXTtyZXR1cm4gcy5hdHRyc1tzLmF0dHJJbmRleChcImFsdFwiKV1bMV09by5yZW5kZXJJbmxpbmVBc1RleHQocy5jaGlsZHJlbix0LG4pLG8ucmVuZGVyVG9rZW4oZSxyLHQpfSxpLmhhcmRicmVhaz1mdW5jdGlvbihlLHIsdCl7cmV0dXJuIHQueGh0bWxPdXQ/XCI8YnIgLz5cXG5cIjpcIjxicj5cXG5cIn0saS5zb2Z0YnJlYWs9ZnVuY3Rpb24oZSxyLHQpe3JldHVybiB0LmJyZWFrcz90LnhodG1sT3V0P1wiPGJyIC8+XFxuXCI6XCI8YnI+XFxuXCI6XCJcXG5cIn0saS50ZXh0PWZ1bmN0aW9uKGUscil7cmV0dXJuIHMoZVtyXS5jb250ZW50KX0saS5odG1sX2Jsb2NrPWZ1bmN0aW9uKGUscil7cmV0dXJuIGVbcl0uY29udGVudH0saS5odG1sX2lubGluZT1mdW5jdGlvbihlLHIpe3JldHVybiBlW3JdLmNvbnRlbnR9LGEucHJvdG90eXBlLnJlbmRlckF0dHJzPWZ1bmN0aW9uKGUpe3ZhciByLHQsbjtpZighZS5hdHRycylyZXR1cm5cIlwiO2ZvcihuPVwiXCIscj0wLHQ9ZS5hdHRycy5sZW5ndGg7cjx0O3IrKyluKz1cIiBcIitzKGUuYXR0cnNbcl1bMF0pKyc9XCInK3MoZS5hdHRyc1tyXVsxXSkrJ1wiJztyZXR1cm4gbn0sYS5wcm90b3R5cGUucmVuZGVyVG9rZW49ZnVuY3Rpb24oZSxyLHQpe3ZhciBuLG89XCJcIixzPSExLGk9ZVtyXTtyZXR1cm4gaS5oaWRkZW4/XCJcIjooaS5ibG9jayYmLTEhPT1pLm5lc3RpbmcmJnImJmVbci0xXS5oaWRkZW4mJihvKz1cIlxcblwiKSxvKz0oLTE9PT1pLm5lc3Rpbmc/XCI8L1wiOlwiPFwiKStpLnRhZyxvKz10aGlzLnJlbmRlckF0dHJzKGkpLDA9PT1pLm5lc3RpbmcmJnQueGh0bWxPdXQmJihvKz1cIiAvXCIpLGkuYmxvY2smJihzPSEwLDE9PT1pLm5lc3RpbmcmJnIrMTxlLmxlbmd0aCYmKFwiaW5saW5lXCI9PT0obj1lW3IrMV0pLnR5cGV8fG4uaGlkZGVuP3M9ITE6LTE9PT1uLm5lc3RpbmcmJm4udGFnPT09aS50YWcmJihzPSExKSkpLG8rPXM/XCI+XFxuXCI6XCI+XCIpfSxhLnByb3RvdHlwZS5yZW5kZXJJbmxpbmU9ZnVuY3Rpb24oZSxyLHQpe2Zvcih2YXIgbixvPVwiXCIscz10aGlzLnJ1bGVzLGk9MCxhPWUubGVuZ3RoO2k8YTtpKyspbj1lW2ldLnR5cGUsdm9pZCAwIT09c1tuXT9vKz1zW25dKGUsaSxyLHQsdGhpcyk6bys9dGhpcy5yZW5kZXJUb2tlbihlLGkscik7cmV0dXJuIG99LGEucHJvdG90eXBlLnJlbmRlcklubGluZUFzVGV4dD1mdW5jdGlvbihlLHIsdCl7Zm9yKHZhciBuPVwiXCIsbz0wLHM9ZS5sZW5ndGg7bzxzO28rKylcInRleHRcIj09PWVbb10udHlwZT9uKz1lW29dLmNvbnRlbnQ6XCJpbWFnZVwiPT09ZVtvXS50eXBlJiYobis9dGhpcy5yZW5kZXJJbmxpbmVBc1RleHQoZVtvXS5jaGlsZHJlbixyLHQpKTtyZXR1cm4gbn0sYS5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uKGUscix0KXt2YXIgbixvLHMsaT1cIlwiLGE9dGhpcy5ydWxlcztmb3Iobj0wLG89ZS5sZW5ndGg7bjxvO24rKylcImlubGluZVwiPT09KHM9ZVtuXS50eXBlKT9pKz10aGlzLnJlbmRlcklubGluZShlW25dLmNoaWxkcmVuLHIsdCk6dm9pZCAwIT09YVtzXT9pKz1hW2Vbbl0udHlwZV0oZSxuLHIsdCx0aGlzKTppKz10aGlzLnJlbmRlclRva2VuKGUsbixyLHQpO3JldHVybiBpfSxyLmV4cG9ydHM9YX0se1wiLi9jb21tb24vdXRpbHNcIjo0fV0sMTc6W2Z1bmN0aW9uKGUscix0KXtmdW5jdGlvbiBuKCl7dGhpcy5fX3J1bGVzX189W10sdGhpcy5fX2NhY2hlX189bnVsbH1uLnByb3RvdHlwZS5fX2ZpbmRfXz1mdW5jdGlvbihlKXtmb3IodmFyIHI9MDtyPHRoaXMuX19ydWxlc19fLmxlbmd0aDtyKyspaWYodGhpcy5fX3J1bGVzX19bcl0ubmFtZT09PWUpcmV0dXJuIHI7cmV0dXJuLTF9LG4ucHJvdG90eXBlLl9fY29tcGlsZV9fPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcyxyPVtcIlwiXTtlLl9fcnVsZXNfXy5mb3JFYWNoKGZ1bmN0aW9uKGUpe2UuZW5hYmxlZCYmZS5hbHQuZm9yRWFjaChmdW5jdGlvbihlKXtyLmluZGV4T2YoZSk8MCYmci5wdXNoKGUpfSl9KSxlLl9fY2FjaGVfXz17fSxyLmZvckVhY2goZnVuY3Rpb24ocil7ZS5fX2NhY2hlX19bcl09W10sZS5fX3J1bGVzX18uZm9yRWFjaChmdW5jdGlvbih0KXt0LmVuYWJsZWQmJihyJiZ0LmFsdC5pbmRleE9mKHIpPDB8fGUuX19jYWNoZV9fW3JdLnB1c2godC5mbikpfSl9KX0sbi5wcm90b3R5cGUuYXQ9ZnVuY3Rpb24oZSxyLHQpe3ZhciBuPXRoaXMuX19maW5kX18oZSksbz10fHx7fTtpZigtMT09PW4pdGhyb3cgbmV3IEVycm9yKFwiUGFyc2VyIHJ1bGUgbm90IGZvdW5kOiBcIitlKTt0aGlzLl9fcnVsZXNfX1tuXS5mbj1yLHRoaXMuX19ydWxlc19fW25dLmFsdD1vLmFsdHx8W10sdGhpcy5fX2NhY2hlX189bnVsbH0sbi5wcm90b3R5cGUuYmVmb3JlPWZ1bmN0aW9uKGUscix0LG4pe3ZhciBvPXRoaXMuX19maW5kX18oZSkscz1ufHx7fTtpZigtMT09PW8pdGhyb3cgbmV3IEVycm9yKFwiUGFyc2VyIHJ1bGUgbm90IGZvdW5kOiBcIitlKTt0aGlzLl9fcnVsZXNfXy5zcGxpY2UobywwLHtuYW1lOnIsZW5hYmxlZDohMCxmbjp0LGFsdDpzLmFsdHx8W119KSx0aGlzLl9fY2FjaGVfXz1udWxsfSxuLnByb3RvdHlwZS5hZnRlcj1mdW5jdGlvbihlLHIsdCxuKXt2YXIgbz10aGlzLl9fZmluZF9fKGUpLHM9bnx8e307aWYoLTE9PT1vKXRocm93IG5ldyBFcnJvcihcIlBhcnNlciBydWxlIG5vdCBmb3VuZDogXCIrZSk7dGhpcy5fX3J1bGVzX18uc3BsaWNlKG8rMSwwLHtuYW1lOnIsZW5hYmxlZDohMCxmbjp0LGFsdDpzLmFsdHx8W119KSx0aGlzLl9fY2FjaGVfXz1udWxsfSxuLnByb3RvdHlwZS5wdXNoPWZ1bmN0aW9uKGUscix0KXt2YXIgbj10fHx7fTt0aGlzLl9fcnVsZXNfXy5wdXNoKHtuYW1lOmUsZW5hYmxlZDohMCxmbjpyLGFsdDpuLmFsdHx8W119KSx0aGlzLl9fY2FjaGVfXz1udWxsfSxuLnByb3RvdHlwZS5lbmFibGU9ZnVuY3Rpb24oZSxyKXtBcnJheS5pc0FycmF5KGUpfHwoZT1bZV0pO3ZhciB0PVtdO3JldHVybiBlLmZvckVhY2goZnVuY3Rpb24oZSl7dmFyIG49dGhpcy5fX2ZpbmRfXyhlKTtpZihuPDApe2lmKHIpcmV0dXJuO3Rocm93IG5ldyBFcnJvcihcIlJ1bGVzIG1hbmFnZXI6IGludmFsaWQgcnVsZSBuYW1lIFwiK2UpfXRoaXMuX19ydWxlc19fW25dLmVuYWJsZWQ9ITAsdC5wdXNoKGUpfSx0aGlzKSx0aGlzLl9fY2FjaGVfXz1udWxsLHR9LG4ucHJvdG90eXBlLmVuYWJsZU9ubHk9ZnVuY3Rpb24oZSxyKXtBcnJheS5pc0FycmF5KGUpfHwoZT1bZV0pLHRoaXMuX19ydWxlc19fLmZvckVhY2goZnVuY3Rpb24oZSl7ZS5lbmFibGVkPSExfSksdGhpcy5lbmFibGUoZSxyKX0sbi5wcm90b3R5cGUuZGlzYWJsZT1mdW5jdGlvbihlLHIpe0FycmF5LmlzQXJyYXkoZSl8fChlPVtlXSk7dmFyIHQ9W107cmV0dXJuIGUuZm9yRWFjaChmdW5jdGlvbihlKXt2YXIgbj10aGlzLl9fZmluZF9fKGUpO2lmKG48MCl7aWYocilyZXR1cm47dGhyb3cgbmV3IEVycm9yKFwiUnVsZXMgbWFuYWdlcjogaW52YWxpZCBydWxlIG5hbWUgXCIrZSl9dGhpcy5fX3J1bGVzX19bbl0uZW5hYmxlZD0hMSx0LnB1c2goZSl9LHRoaXMpLHRoaXMuX19jYWNoZV9fPW51bGwsdH0sbi5wcm90b3R5cGUuZ2V0UnVsZXM9ZnVuY3Rpb24oZSl7cmV0dXJuIG51bGw9PT10aGlzLl9fY2FjaGVfXyYmdGhpcy5fX2NvbXBpbGVfXygpLHRoaXMuX19jYWNoZV9fW2VdfHxbXX0sci5leHBvcnRzPW59LHt9XSwxODpbZnVuY3Rpb24oZSxyLHQpe3ZhciBuPWUoXCIuLi9jb21tb24vdXRpbHNcIikuaXNTcGFjZTtyLmV4cG9ydHM9ZnVuY3Rpb24oZSxyLHQsbyl7dmFyIHMsaSxhLGwsYyx1LHAsaCxmLGQsbSxfLGcsayxiLHYseSx4LEMsQSx3PWUubGluZU1heCxEPWUuYk1hcmtzW3JdK2UudFNoaWZ0W3JdLEU9ZS5lTWFya3Nbcl07aWYoZS5zQ291bnRbcl0tZS5ibGtJbmRlbnQ+PTQpcmV0dXJuITE7aWYoNjIhPT1lLnNyYy5jaGFyQ29kZUF0KEQrKykpcmV0dXJuITE7aWYobylyZXR1cm4hMDtmb3IobD1mPWUuc0NvdW50W3JdK0QtKGUuYk1hcmtzW3JdK2UudFNoaWZ0W3JdKSwzMj09PWUuc3JjLmNoYXJDb2RlQXQoRCk/KEQrKyxsKyssZisrLHM9ITEsdj0hMCk6OT09PWUuc3JjLmNoYXJDb2RlQXQoRCk/KHY9ITAsKGUuYnNDb3VudFtyXStmKSU0PT0zPyhEKyssbCsrLGYrKyxzPSExKTpzPSEwKTp2PSExLGQ9W2UuYk1hcmtzW3JdXSxlLmJNYXJrc1tyXT1EO0Q8RSYmKGk9ZS5zcmMuY2hhckNvZGVBdChEKSxuKGkpKTspOT09PWk/Zis9NC0oZitlLmJzQ291bnRbcl0rKHM/MTowKSklNDpmKyssRCsrO2ZvcihtPVtlLmJzQ291bnRbcl1dLGUuYnNDb3VudFtyXT1lLnNDb3VudFtyXSsxKyh2PzE6MCksdT1EPj1FLGs9W2Uuc0NvdW50W3JdXSxlLnNDb3VudFtyXT1mLWwsYj1bZS50U2hpZnRbcl1dLGUudFNoaWZ0W3JdPUQtZS5iTWFya3Nbcl0seD1lLm1kLmJsb2NrLnJ1bGVyLmdldFJ1bGVzKFwiYmxvY2txdW90ZVwiKSxnPWUucGFyZW50VHlwZSxlLnBhcmVudFR5cGU9XCJibG9ja3F1b3RlXCIsQT0hMSxoPXIrMTtoPHQmJihlLnNDb3VudFtoXTxlLmJsa0luZGVudCYmKEE9ITApLEQ9ZS5iTWFya3NbaF0rZS50U2hpZnRbaF0sRT1lLmVNYXJrc1toXSwhKEQ+PUUpKTtoKyspaWYoNjIhPT1lLnNyYy5jaGFyQ29kZUF0KEQrKyl8fEEpe2lmKHUpYnJlYWs7Zm9yKHk9ITEsYT0wLGM9eC5sZW5ndGg7YTxjO2ErKylpZih4W2FdKGUsaCx0LCEwKSl7eT0hMDticmVha31pZih5KXtlLmxpbmVNYXg9aCwwIT09ZS5ibGtJbmRlbnQmJihkLnB1c2goZS5iTWFya3NbaF0pLG0ucHVzaChlLmJzQ291bnRbaF0pLGIucHVzaChlLnRTaGlmdFtoXSksay5wdXNoKGUuc0NvdW50W2hdKSxlLnNDb3VudFtoXS09ZS5ibGtJbmRlbnQpO2JyZWFrfWQucHVzaChlLmJNYXJrc1toXSksbS5wdXNoKGUuYnNDb3VudFtoXSksYi5wdXNoKGUudFNoaWZ0W2hdKSxrLnB1c2goZS5zQ291bnRbaF0pLGUuc0NvdW50W2hdPS0xfWVsc2V7Zm9yKGw9Zj1lLnNDb3VudFtoXStELShlLmJNYXJrc1toXStlLnRTaGlmdFtoXSksMzI9PT1lLnNyYy5jaGFyQ29kZUF0KEQpPyhEKyssbCsrLGYrKyxzPSExLHY9ITApOjk9PT1lLnNyYy5jaGFyQ29kZUF0KEQpPyh2PSEwLChlLmJzQ291bnRbaF0rZiklND09Mz8oRCsrLGwrKyxmKysscz0hMSk6cz0hMCk6dj0hMSxkLnB1c2goZS5iTWFya3NbaF0pLGUuYk1hcmtzW2hdPUQ7RDxFJiYoaT1lLnNyYy5jaGFyQ29kZUF0KEQpLG4oaSkpOyk5PT09aT9mKz00LShmK2UuYnNDb3VudFtoXSsocz8xOjApKSU0OmYrKyxEKys7dT1EPj1FLG0ucHVzaChlLmJzQ291bnRbaF0pLGUuYnNDb3VudFtoXT1lLnNDb3VudFtoXSsxKyh2PzE6MCksay5wdXNoKGUuc0NvdW50W2hdKSxlLnNDb3VudFtoXT1mLWwsYi5wdXNoKGUudFNoaWZ0W2hdKSxlLnRTaGlmdFtoXT1ELWUuYk1hcmtzW2hdfWZvcihfPWUuYmxrSW5kZW50LGUuYmxrSW5kZW50PTAsKEM9ZS5wdXNoKFwiYmxvY2txdW90ZV9vcGVuXCIsXCJibG9ja3F1b3RlXCIsMSkpLm1hcmt1cD1cIj5cIixDLm1hcD1wPVtyLDBdLGUubWQuYmxvY2sudG9rZW5pemUoZSxyLGgpLChDPWUucHVzaChcImJsb2NrcXVvdGVfY2xvc2VcIixcImJsb2NrcXVvdGVcIiwtMSkpLm1hcmt1cD1cIj5cIixlLmxpbmVNYXg9dyxlLnBhcmVudFR5cGU9ZyxwWzFdPWUubGluZSxhPTA7YTxiLmxlbmd0aDthKyspZS5iTWFya3NbYStyXT1kW2FdLGUudFNoaWZ0W2Ercl09YlthXSxlLnNDb3VudFthK3JdPWtbYV0sZS5ic0NvdW50W2Ercl09bVthXTtyZXR1cm4gZS5ibGtJbmRlbnQ9XywhMH19LHtcIi4uL2NvbW1vbi91dGlsc1wiOjR9XSwxOTpbZnVuY3Rpb24oZSxyLHQpe3IuZXhwb3J0cz1mdW5jdGlvbihlLHIsdCl7dmFyIG4sbyxzO2lmKGUuc0NvdW50W3JdLWUuYmxrSW5kZW50PDQpcmV0dXJuITE7Zm9yKG89bj1yKzE7bjx0OylpZihlLmlzRW1wdHkobikpbisrO2Vsc2V7aWYoIShlLnNDb3VudFtuXS1lLmJsa0luZGVudD49NCkpYnJlYWs7bz0rK259cmV0dXJuIGUubGluZT1vLChzPWUucHVzaChcImNvZGVfYmxvY2tcIixcImNvZGVcIiwwKSkuY29udGVudD1lLmdldExpbmVzKHIsbyw0K2UuYmxrSW5kZW50LCEwKSxzLm1hcD1bcixlLmxpbmVdLCEwfX0se31dLDIwOltmdW5jdGlvbihlLHIsdCl7ci5leHBvcnRzPWZ1bmN0aW9uKGUscix0LG4pe3ZhciBvLHMsaSxhLGwsYyx1LHA9ITEsaD1lLmJNYXJrc1tyXStlLnRTaGlmdFtyXSxmPWUuZU1hcmtzW3JdO2lmKGUuc0NvdW50W3JdLWUuYmxrSW5kZW50Pj00KXJldHVybiExO2lmKGgrMz5mKXJldHVybiExO2lmKDEyNiE9PShvPWUuc3JjLmNoYXJDb2RlQXQoaCkpJiY5NiE9PW8pcmV0dXJuITE7aWYobD1oLGg9ZS5za2lwQ2hhcnMoaCxvKSwocz1oLWwpPDMpcmV0dXJuITE7aWYodT1lLnNyYy5zbGljZShsLGgpLGk9ZS5zcmMuc2xpY2UoaCxmKSw5Nj09PW8mJmkuaW5kZXhPZihTdHJpbmcuZnJvbUNoYXJDb2RlKG8pKT49MClyZXR1cm4hMTtpZihuKXJldHVybiEwO2ZvcihhPXI7ISgrK2E+PXR8fChoPWw9ZS5iTWFya3NbYV0rZS50U2hpZnRbYV0sZj1lLmVNYXJrc1thXSxoPGYmJmUuc0NvdW50W2FdPGUuYmxrSW5kZW50KSk7KWlmKGUuc3JjLmNoYXJDb2RlQXQoaCk9PT1vJiYhKGUuc0NvdW50W2FdLWUuYmxrSW5kZW50Pj00fHwoaD1lLnNraXBDaGFycyhoLG8pKS1sPHN8fChoPWUuc2tpcFNwYWNlcyhoKSk8Zikpe3A9ITA7YnJlYWt9cmV0dXJuIHM9ZS5zQ291bnRbcl0sZS5saW5lPWErKHA/MTowKSwoYz1lLnB1c2goXCJmZW5jZVwiLFwiY29kZVwiLDApKS5pbmZvPWksYy5jb250ZW50PWUuZ2V0TGluZXMocisxLGEscywhMCksYy5tYXJrdXA9dSxjLm1hcD1bcixlLmxpbmVdLCEwfX0se31dLDIxOltmdW5jdGlvbihlLHIsdCl7dmFyIG49ZShcIi4uL2NvbW1vbi91dGlsc1wiKS5pc1NwYWNlO3IuZXhwb3J0cz1mdW5jdGlvbihlLHIsdCxvKXt2YXIgcyxpLGEsbCxjPWUuYk1hcmtzW3JdK2UudFNoaWZ0W3JdLHU9ZS5lTWFya3Nbcl07aWYoZS5zQ291bnRbcl0tZS5ibGtJbmRlbnQ+PTQpcmV0dXJuITE7aWYoMzUhPT0ocz1lLnNyYy5jaGFyQ29kZUF0KGMpKXx8Yz49dSlyZXR1cm4hMTtmb3IoaT0xLHM9ZS5zcmMuY2hhckNvZGVBdCgrK2MpOzM1PT09cyYmYzx1JiZpPD02OylpKysscz1lLnNyYy5jaGFyQ29kZUF0KCsrYyk7cmV0dXJuIShpPjZ8fGM8dSYmIW4ocyl8fCFvJiYodT1lLnNraXBTcGFjZXNCYWNrKHUsYyksKGE9ZS5za2lwQ2hhcnNCYWNrKHUsMzUsYykpPmMmJm4oZS5zcmMuY2hhckNvZGVBdChhLTEpKSYmKHU9YSksZS5saW5lPXIrMSwobD1lLnB1c2goXCJoZWFkaW5nX29wZW5cIixcImhcIitTdHJpbmcoaSksMSkpLm1hcmt1cD1cIiMjIyMjIyMjXCIuc2xpY2UoMCxpKSxsLm1hcD1bcixlLmxpbmVdLChsPWUucHVzaChcImlubGluZVwiLFwiXCIsMCkpLmNvbnRlbnQ9ZS5zcmMuc2xpY2UoYyx1KS50cmltKCksbC5tYXA9W3IsZS5saW5lXSxsLmNoaWxkcmVuPVtdLChsPWUucHVzaChcImhlYWRpbmdfY2xvc2VcIixcImhcIitTdHJpbmcoaSksLTEpKS5tYXJrdXA9XCIjIyMjIyMjI1wiLnNsaWNlKDAsaSksMCkpfX0se1wiLi4vY29tbW9uL3V0aWxzXCI6NH1dLDIyOltmdW5jdGlvbihlLHIsdCl7dmFyIG49ZShcIi4uL2NvbW1vbi91dGlsc1wiKS5pc1NwYWNlO3IuZXhwb3J0cz1mdW5jdGlvbihlLHIsdCxvKXt2YXIgcyxpLGEsbCxjPWUuYk1hcmtzW3JdK2UudFNoaWZ0W3JdLHU9ZS5lTWFya3Nbcl07aWYoZS5zQ291bnRbcl0tZS5ibGtJbmRlbnQ+PTQpcmV0dXJuITE7aWYoNDIhPT0ocz1lLnNyYy5jaGFyQ29kZUF0KGMrKykpJiY0NSE9PXMmJjk1IT09cylyZXR1cm4hMTtmb3IoaT0xO2M8dTspe2lmKChhPWUuc3JjLmNoYXJDb2RlQXQoYysrKSkhPT1zJiYhbihhKSlyZXR1cm4hMTthPT09cyYmaSsrfXJldHVybiEoaTwzfHwhbyYmKGUubGluZT1yKzEsKGw9ZS5wdXNoKFwiaHJcIixcImhyXCIsMCkpLm1hcD1bcixlLmxpbmVdLGwubWFya3VwPUFycmF5KGkrMSkuam9pbihTdHJpbmcuZnJvbUNoYXJDb2RlKHMpKSwwKSl9fSx7XCIuLi9jb21tb24vdXRpbHNcIjo0fV0sMjM6W2Z1bmN0aW9uKGUscix0KXt2YXIgbj1lKFwiLi4vY29tbW9uL2h0bWxfYmxvY2tzXCIpLG89ZShcIi4uL2NvbW1vbi9odG1sX3JlXCIpLkhUTUxfT1BFTl9DTE9TRV9UQUdfUkUscz1bWy9ePChzY3JpcHR8cHJlfHN0eWxlKSg/PShcXHN8PnwkKSkvaSwvPFxcLyhzY3JpcHR8cHJlfHN0eWxlKT4vaSwhMF0sWy9ePCEtLS8sLy0tPi8sITBdLFsvXjxcXD8vLC9cXD8+LywhMF0sWy9ePCFbQS1aXS8sLz4vLCEwXSxbL148IVxcW0NEQVRBXFxbLywvXFxdXFxdPi8sITBdLFtuZXcgUmVnRXhwKFwiXjwvPyhcIituLmpvaW4oXCJ8XCIpK1wiKSg/PShcXFxcc3wvPz58JCkpXCIsXCJpXCIpLC9eJC8sITBdLFtuZXcgUmVnRXhwKG8uc291cmNlK1wiXFxcXHMqJFwiKSwvXiQvLCExXV07ci5leHBvcnRzPWZ1bmN0aW9uKGUscix0LG4pe3ZhciBvLGksYSxsLGM9ZS5iTWFya3Nbcl0rZS50U2hpZnRbcl0sdT1lLmVNYXJrc1tyXTtpZihlLnNDb3VudFtyXS1lLmJsa0luZGVudD49NClyZXR1cm4hMTtpZighZS5tZC5vcHRpb25zLmh0bWwpcmV0dXJuITE7aWYoNjAhPT1lLnNyYy5jaGFyQ29kZUF0KGMpKXJldHVybiExO2ZvcihsPWUuc3JjLnNsaWNlKGMsdSksbz0wO288cy5sZW5ndGgmJiFzW29dWzBdLnRlc3QobCk7bysrKTtpZihvPT09cy5sZW5ndGgpcmV0dXJuITE7aWYobilyZXR1cm4gc1tvXVsyXTtpZihpPXIrMSwhc1tvXVsxXS50ZXN0KGwpKWZvcig7aTx0JiYhKGUuc0NvdW50W2ldPGUuYmxrSW5kZW50KTtpKyspaWYoYz1lLmJNYXJrc1tpXStlLnRTaGlmdFtpXSx1PWUuZU1hcmtzW2ldLGw9ZS5zcmMuc2xpY2UoYyx1KSxzW29dWzFdLnRlc3QobCkpezAhPT1sLmxlbmd0aCYmaSsrO2JyZWFrfXJldHVybiBlLmxpbmU9aSwoYT1lLnB1c2goXCJodG1sX2Jsb2NrXCIsXCJcIiwwKSkubWFwPVtyLGldLGEuY29udGVudD1lLmdldExpbmVzKHIsaSxlLmJsa0luZGVudCwhMCksITB9fSx7XCIuLi9jb21tb24vaHRtbF9ibG9ja3NcIjoyLFwiLi4vY29tbW9uL2h0bWxfcmVcIjozfV0sMjQ6W2Z1bmN0aW9uKGUscix0KXtyLmV4cG9ydHM9ZnVuY3Rpb24oZSxyLHQpe3ZhciBuLG8scyxpLGEsbCxjLHUscCxoLGY9cisxLGQ9ZS5tZC5ibG9jay5ydWxlci5nZXRSdWxlcyhcInBhcmFncmFwaFwiKTtpZihlLnNDb3VudFtyXS1lLmJsa0luZGVudD49NClyZXR1cm4hMTtmb3IoaD1lLnBhcmVudFR5cGUsZS5wYXJlbnRUeXBlPVwicGFyYWdyYXBoXCI7Zjx0JiYhZS5pc0VtcHR5KGYpO2YrKylpZighKGUuc0NvdW50W2ZdLWUuYmxrSW5kZW50PjMpKXtpZihlLnNDb3VudFtmXT49ZS5ibGtJbmRlbnQmJihsPWUuYk1hcmtzW2ZdK2UudFNoaWZ0W2ZdLGM9ZS5lTWFya3NbZl0sbDxjJiYoNDU9PT0ocD1lLnNyYy5jaGFyQ29kZUF0KGwpKXx8NjE9PT1wKSYmKGw9ZS5za2lwQ2hhcnMobCxwKSwobD1lLnNraXBTcGFjZXMobCkpPj1jKSkpe3U9NjE9PT1wPzE6MjticmVha31pZighKGUuc0NvdW50W2ZdPDApKXtmb3Iobz0hMSxzPTAsaT1kLmxlbmd0aDtzPGk7cysrKWlmKGRbc10oZSxmLHQsITApKXtvPSEwO2JyZWFrfWlmKG8pYnJlYWt9fXJldHVybiEhdSYmKG49ZS5nZXRMaW5lcyhyLGYsZS5ibGtJbmRlbnQsITEpLnRyaW0oKSxlLmxpbmU9ZisxLChhPWUucHVzaChcImhlYWRpbmdfb3BlblwiLFwiaFwiK1N0cmluZyh1KSwxKSkubWFya3VwPVN0cmluZy5mcm9tQ2hhckNvZGUocCksYS5tYXA9W3IsZS5saW5lXSwoYT1lLnB1c2goXCJpbmxpbmVcIixcIlwiLDApKS5jb250ZW50PW4sYS5tYXA9W3IsZS5saW5lLTFdLGEuY2hpbGRyZW49W10sKGE9ZS5wdXNoKFwiaGVhZGluZ19jbG9zZVwiLFwiaFwiK1N0cmluZyh1KSwtMSkpLm1hcmt1cD1TdHJpbmcuZnJvbUNoYXJDb2RlKHApLGUucGFyZW50VHlwZT1oLCEwKX19LHt9XSwyNTpbZnVuY3Rpb24oZSxyLHQpe3ZhciBuPWUoXCIuLi9jb21tb24vdXRpbHNcIikuaXNTcGFjZTtmdW5jdGlvbiBvKGUscil7dmFyIHQsbyxzLGk7cmV0dXJuIG89ZS5iTWFya3Nbcl0rZS50U2hpZnRbcl0scz1lLmVNYXJrc1tyXSw0MiE9PSh0PWUuc3JjLmNoYXJDb2RlQXQobysrKSkmJjQ1IT09dCYmNDMhPT10Py0xOm88cyYmKGk9ZS5zcmMuY2hhckNvZGVBdChvKSwhbihpKSk/LTE6b31mdW5jdGlvbiBzKGUscil7dmFyIHQsbz1lLmJNYXJrc1tyXStlLnRTaGlmdFtyXSxzPW8saT1lLmVNYXJrc1tyXTtpZihzKzE+PWkpcmV0dXJuLTE7aWYoKHQ9ZS5zcmMuY2hhckNvZGVBdChzKyspKTw0OHx8dD41NylyZXR1cm4tMTtmb3IoOzspe2lmKHM+PWkpcmV0dXJuLTE7aWYoISgodD1lLnNyYy5jaGFyQ29kZUF0KHMrKykpPj00OCYmdDw9NTcpKXtpZig0MT09PXR8fDQ2PT09dClicmVhaztyZXR1cm4tMX1pZihzLW8+PTEwKXJldHVybi0xfXJldHVybiBzPGkmJih0PWUuc3JjLmNoYXJDb2RlQXQocyksIW4odCkpPy0xOnN9ci5leHBvcnRzPWZ1bmN0aW9uKGUscix0LG4pe3ZhciBpLGEsbCxjLHUscCxoLGYsZCxtLF8sZyxrLGIsdix5LHgsQyxBLHcsRCxFLHEsRixTLEwseixULEk9ITEsUj0hMDtpZihlLnNDb3VudFtyXS1lLmJsa0luZGVudD49NClyZXR1cm4hMTtpZihlLmxpc3RJbmRlbnQ+PTAmJmUuc0NvdW50W3JdLWUubGlzdEluZGVudD49NCYmZS5zQ291bnRbcl08ZS5ibGtJbmRlbnQpcmV0dXJuITE7aWYobiYmXCJwYXJhZ3JhcGhcIj09PWUucGFyZW50VHlwZSYmZS50U2hpZnRbcl0+PWUuYmxrSW5kZW50JiYoST0hMCksKHE9cyhlLHIpKT49MCl7aWYoaD0hMCxTPWUuYk1hcmtzW3JdK2UudFNoaWZ0W3JdLGs9TnVtYmVyKGUuc3JjLnN1YnN0cihTLHEtUy0xKSksSSYmMSE9PWspcmV0dXJuITF9ZWxzZXtpZighKChxPW8oZSxyKSk+PTApKXJldHVybiExO2g9ITF9aWYoSSYmZS5za2lwU3BhY2VzKHEpPj1lLmVNYXJrc1tyXSlyZXR1cm4hMTtpZihnPWUuc3JjLmNoYXJDb2RlQXQocS0xKSxuKXJldHVybiEwO2ZvcihfPWUudG9rZW5zLmxlbmd0aCxoPyhUPWUucHVzaChcIm9yZGVyZWRfbGlzdF9vcGVuXCIsXCJvbFwiLDEpLDEhPT1rJiYoVC5hdHRycz1bW1wic3RhcnRcIixrXV0pKTpUPWUucHVzaChcImJ1bGxldF9saXN0X29wZW5cIixcInVsXCIsMSksVC5tYXA9bT1bciwwXSxULm1hcmt1cD1TdHJpbmcuZnJvbUNoYXJDb2RlKGcpLHY9cixGPSExLHo9ZS5tZC5ibG9jay5ydWxlci5nZXRSdWxlcyhcImxpc3RcIiksQz1lLnBhcmVudFR5cGUsZS5wYXJlbnRUeXBlPVwibGlzdFwiO3Y8dDspe2ZvcihFPXEsYj1lLmVNYXJrc1t2XSxwPXk9ZS5zQ291bnRbdl0rcS0oZS5iTWFya3Nbcl0rZS50U2hpZnRbcl0pO0U8Yjspe2lmKDk9PT0oaT1lLnNyYy5jaGFyQ29kZUF0KEUpKSl5Kz00LSh5K2UuYnNDb3VudFt2XSklNDtlbHNle2lmKDMyIT09aSlicmVhazt5Kyt9RSsrfWlmKCh1PShhPUUpPj1iPzE6eS1wKT40JiYodT0xKSxjPXArdSwoVD1lLnB1c2goXCJsaXN0X2l0ZW1fb3BlblwiLFwibGlcIiwxKSkubWFya3VwPVN0cmluZy5mcm9tQ2hhckNvZGUoZyksVC5tYXA9Zj1bciwwXSxEPWUudGlnaHQsdz1lLnRTaGlmdFtyXSxBPWUuc0NvdW50W3JdLHg9ZS5saXN0SW5kZW50LGUubGlzdEluZGVudD1lLmJsa0luZGVudCxlLmJsa0luZGVudD1jLGUudGlnaHQ9ITAsZS50U2hpZnRbcl09YS1lLmJNYXJrc1tyXSxlLnNDb3VudFtyXT15LGE+PWImJmUuaXNFbXB0eShyKzEpP2UubGluZT1NYXRoLm1pbihlLmxpbmUrMix0KTplLm1kLmJsb2NrLnRva2VuaXplKGUscix0LCEwKSxlLnRpZ2h0JiYhRnx8KFI9ITEpLEY9ZS5saW5lLXI+MSYmZS5pc0VtcHR5KGUubGluZS0xKSxlLmJsa0luZGVudD1lLmxpc3RJbmRlbnQsZS5saXN0SW5kZW50PXgsZS50U2hpZnRbcl09dyxlLnNDb3VudFtyXT1BLGUudGlnaHQ9RCwoVD1lLnB1c2goXCJsaXN0X2l0ZW1fY2xvc2VcIixcImxpXCIsLTEpKS5tYXJrdXA9U3RyaW5nLmZyb21DaGFyQ29kZShnKSx2PXI9ZS5saW5lLGZbMV09dixhPWUuYk1hcmtzW3JdLHY+PXQpYnJlYWs7aWYoZS5zQ291bnRbdl08ZS5ibGtJbmRlbnQpYnJlYWs7aWYoZS5zQ291bnRbcl0tZS5ibGtJbmRlbnQ+PTQpYnJlYWs7Zm9yKEw9ITEsbD0wLGQ9ei5sZW5ndGg7bDxkO2wrKylpZih6W2xdKGUsdix0LCEwKSl7TD0hMDticmVha31pZihMKWJyZWFrO2lmKGgpe2lmKChxPXMoZSx2KSk8MClicmVha31lbHNlIGlmKChxPW8oZSx2KSk8MClicmVhaztpZihnIT09ZS5zcmMuY2hhckNvZGVBdChxLTEpKWJyZWFrfXJldHVybihUPWg/ZS5wdXNoKFwib3JkZXJlZF9saXN0X2Nsb3NlXCIsXCJvbFwiLC0xKTplLnB1c2goXCJidWxsZXRfbGlzdF9jbG9zZVwiLFwidWxcIiwtMSkpLm1hcmt1cD1TdHJpbmcuZnJvbUNoYXJDb2RlKGcpLG1bMV09dixlLmxpbmU9dixlLnBhcmVudFR5cGU9QyxSJiZmdW5jdGlvbihlLHIpe3ZhciB0LG4sbz1lLmxldmVsKzI7Zm9yKHQ9cisyLG49ZS50b2tlbnMubGVuZ3RoLTI7dDxuO3QrKyllLnRva2Vuc1t0XS5sZXZlbD09PW8mJlwicGFyYWdyYXBoX29wZW5cIj09PWUudG9rZW5zW3RdLnR5cGUmJihlLnRva2Vuc1t0KzJdLmhpZGRlbj0hMCxlLnRva2Vuc1t0XS5oaWRkZW49ITAsdCs9Mil9KGUsXyksITB9fSx7XCIuLi9jb21tb24vdXRpbHNcIjo0fV0sMjY6W2Z1bmN0aW9uKGUscix0KXtyLmV4cG9ydHM9ZnVuY3Rpb24oZSxyKXt2YXIgdCxuLG8scyxpLGEsbD1yKzEsYz1lLm1kLmJsb2NrLnJ1bGVyLmdldFJ1bGVzKFwicGFyYWdyYXBoXCIpLHU9ZS5saW5lTWF4O2ZvcihhPWUucGFyZW50VHlwZSxlLnBhcmVudFR5cGU9XCJwYXJhZ3JhcGhcIjtsPHUmJiFlLmlzRW1wdHkobCk7bCsrKWlmKCEoZS5zQ291bnRbbF0tZS5ibGtJbmRlbnQ+M3x8ZS5zQ291bnRbbF08MCkpe2ZvcihuPSExLG89MCxzPWMubGVuZ3RoO288cztvKyspaWYoY1tvXShlLGwsdSwhMCkpe249ITA7YnJlYWt9aWYobilicmVha31yZXR1cm4gdD1lLmdldExpbmVzKHIsbCxlLmJsa0luZGVudCwhMSkudHJpbSgpLGUubGluZT1sLChpPWUucHVzaChcInBhcmFncmFwaF9vcGVuXCIsXCJwXCIsMSkpLm1hcD1bcixlLmxpbmVdLChpPWUucHVzaChcImlubGluZVwiLFwiXCIsMCkpLmNvbnRlbnQ9dCxpLm1hcD1bcixlLmxpbmVdLGkuY2hpbGRyZW49W10saT1lLnB1c2goXCJwYXJhZ3JhcGhfY2xvc2VcIixcInBcIiwtMSksZS5wYXJlbnRUeXBlPWEsITB9fSx7fV0sMjc6W2Z1bmN0aW9uKGUscix0KXt2YXIgbj1lKFwiLi4vY29tbW9uL3V0aWxzXCIpLm5vcm1hbGl6ZVJlZmVyZW5jZSxvPWUoXCIuLi9jb21tb24vdXRpbHNcIikuaXNTcGFjZTtyLmV4cG9ydHM9ZnVuY3Rpb24oZSxyLHQscyl7dmFyIGksYSxsLGMsdSxwLGgsZixkLG0sXyxnLGssYix2LHkseD0wLEM9ZS5iTWFya3Nbcl0rZS50U2hpZnRbcl0sQT1lLmVNYXJrc1tyXSx3PXIrMTtpZihlLnNDb3VudFtyXS1lLmJsa0luZGVudD49NClyZXR1cm4hMTtpZig5MSE9PWUuc3JjLmNoYXJDb2RlQXQoQykpcmV0dXJuITE7Zm9yKDsrK0M8QTspaWYoOTM9PT1lLnNyYy5jaGFyQ29kZUF0KEMpJiY5MiE9PWUuc3JjLmNoYXJDb2RlQXQoQy0xKSl7aWYoQysxPT09QSlyZXR1cm4hMTtpZig1OCE9PWUuc3JjLmNoYXJDb2RlQXQoQysxKSlyZXR1cm4hMTticmVha31mb3IoYz1lLmxpbmVNYXgsdj1lLm1kLmJsb2NrLnJ1bGVyLmdldFJ1bGVzKFwicmVmZXJlbmNlXCIpLG09ZS5wYXJlbnRUeXBlLGUucGFyZW50VHlwZT1cInJlZmVyZW5jZVwiO3c8YyYmIWUuaXNFbXB0eSh3KTt3KyspaWYoIShlLnNDb3VudFt3XS1lLmJsa0luZGVudD4zfHxlLnNDb3VudFt3XTwwKSl7Zm9yKGI9ITEscD0wLGg9di5sZW5ndGg7cDxoO3ArKylpZih2W3BdKGUsdyxjLCEwKSl7Yj0hMDticmVha31pZihiKWJyZWFrfWZvcihrPWUuZ2V0TGluZXMocix3LGUuYmxrSW5kZW50LCExKS50cmltKCksQT1rLmxlbmd0aCxDPTE7QzxBO0MrKyl7aWYoOTE9PT0oaT1rLmNoYXJDb2RlQXQoQykpKXJldHVybiExO2lmKDkzPT09aSl7ZD1DO2JyZWFrfTEwPT09aT94Kys6OTI9PT1pJiYrK0M8QSYmMTA9PT1rLmNoYXJDb2RlQXQoQykmJngrK31pZihkPDB8fDU4IT09ay5jaGFyQ29kZUF0KGQrMSkpcmV0dXJuITE7Zm9yKEM9ZCsyO0M8QTtDKyspaWYoMTA9PT0oaT1rLmNoYXJDb2RlQXQoQykpKXgrKztlbHNlIGlmKCFvKGkpKWJyZWFrO2lmKCEoXz1lLm1kLmhlbHBlcnMucGFyc2VMaW5rRGVzdGluYXRpb24oayxDLEEpKS5vaylyZXR1cm4hMTtpZih1PWUubWQubm9ybWFsaXplTGluayhfLnN0ciksIWUubWQudmFsaWRhdGVMaW5rKHUpKXJldHVybiExO2ZvcihDPV8ucG9zLHgrPV8ubGluZXMsYT1DLGw9eCxnPUM7QzxBO0MrKylpZigxMD09PShpPWsuY2hhckNvZGVBdChDKSkpeCsrO2Vsc2UgaWYoIW8oaSkpYnJlYWs7Zm9yKF89ZS5tZC5oZWxwZXJzLnBhcnNlTGlua1RpdGxlKGssQyxBKSxDPEEmJmchPT1DJiZfLm9rPyh5PV8uc3RyLEM9Xy5wb3MseCs9Xy5saW5lcyk6KHk9XCJcIixDPWEseD1sKTtDPEEmJihpPWsuY2hhckNvZGVBdChDKSxvKGkpKTspQysrO2lmKEM8QSYmMTAhPT1rLmNoYXJDb2RlQXQoQykmJnkpZm9yKHk9XCJcIixDPWEseD1sO0M8QSYmKGk9ay5jaGFyQ29kZUF0KEMpLG8oaSkpOylDKys7cmV0dXJuIShDPEEmJjEwIT09ay5jaGFyQ29kZUF0KEMpfHwhKGY9bihrLnNsaWNlKDEsZCkpKXx8IXMmJih2b2lkIDA9PT1lLmVudi5yZWZlcmVuY2VzJiYoZS5lbnYucmVmZXJlbmNlcz17fSksdm9pZCAwPT09ZS5lbnYucmVmZXJlbmNlc1tmXSYmKGUuZW52LnJlZmVyZW5jZXNbZl09e3RpdGxlOnksaHJlZjp1fSksZS5wYXJlbnRUeXBlPW0sZS5saW5lPXIreCsxLDApKX19LHtcIi4uL2NvbW1vbi91dGlsc1wiOjR9XSwyODpbZnVuY3Rpb24oZSxyLHQpe3ZhciBuPWUoXCIuLi90b2tlblwiKSxvPWUoXCIuLi9jb21tb24vdXRpbHNcIikuaXNTcGFjZTtmdW5jdGlvbiBzKGUscix0LG4pe3ZhciBzLGksYSxsLGMsdSxwLGg7Zm9yKHRoaXMuc3JjPWUsdGhpcy5tZD1yLHRoaXMuZW52PXQsdGhpcy50b2tlbnM9bix0aGlzLmJNYXJrcz1bXSx0aGlzLmVNYXJrcz1bXSx0aGlzLnRTaGlmdD1bXSx0aGlzLnNDb3VudD1bXSx0aGlzLmJzQ291bnQ9W10sdGhpcy5ibGtJbmRlbnQ9MCx0aGlzLmxpbmU9MCx0aGlzLmxpbmVNYXg9MCx0aGlzLnRpZ2h0PSExLHRoaXMuZGRJbmRlbnQ9LTEsdGhpcy5saXN0SW5kZW50PS0xLHRoaXMucGFyZW50VHlwZT1cInJvb3RcIix0aGlzLmxldmVsPTAsdGhpcy5yZXN1bHQ9XCJcIixpPXRoaXMuc3JjLGg9ITEsYT1sPXU9cD0wLGM9aS5sZW5ndGg7bDxjO2wrKyl7aWYocz1pLmNoYXJDb2RlQXQobCksIWgpe2lmKG8ocykpe3UrKyw5PT09cz9wKz00LXAlNDpwKys7Y29udGludWV9aD0hMH0xMCE9PXMmJmwhPT1jLTF8fCgxMCE9PXMmJmwrKyx0aGlzLmJNYXJrcy5wdXNoKGEpLHRoaXMuZU1hcmtzLnB1c2gobCksdGhpcy50U2hpZnQucHVzaCh1KSx0aGlzLnNDb3VudC5wdXNoKHApLHRoaXMuYnNDb3VudC5wdXNoKDApLGg9ITEsdT0wLHA9MCxhPWwrMSl9dGhpcy5iTWFya3MucHVzaChpLmxlbmd0aCksdGhpcy5lTWFya3MucHVzaChpLmxlbmd0aCksdGhpcy50U2hpZnQucHVzaCgwKSx0aGlzLnNDb3VudC5wdXNoKDApLHRoaXMuYnNDb3VudC5wdXNoKDApLHRoaXMubGluZU1heD10aGlzLmJNYXJrcy5sZW5ndGgtMX1zLnByb3RvdHlwZS5wdXNoPWZ1bmN0aW9uKGUscix0KXt2YXIgbz1uZXcgbihlLHIsdCk7cmV0dXJuIG8uYmxvY2s9ITAsdDwwJiZ0aGlzLmxldmVsLS0sby5sZXZlbD10aGlzLmxldmVsLHQ+MCYmdGhpcy5sZXZlbCsrLHRoaXMudG9rZW5zLnB1c2gobyksb30scy5wcm90b3R5cGUuaXNFbXB0eT1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5iTWFya3NbZV0rdGhpcy50U2hpZnRbZV0+PXRoaXMuZU1hcmtzW2VdfSxzLnByb3RvdHlwZS5za2lwRW1wdHlMaW5lcz1mdW5jdGlvbihlKXtmb3IodmFyIHI9dGhpcy5saW5lTWF4O2U8ciYmISh0aGlzLmJNYXJrc1tlXSt0aGlzLnRTaGlmdFtlXTx0aGlzLmVNYXJrc1tlXSk7ZSsrKTtyZXR1cm4gZX0scy5wcm90b3R5cGUuc2tpcFNwYWNlcz1mdW5jdGlvbihlKXtmb3IodmFyIHIsdD10aGlzLnNyYy5sZW5ndGg7ZTx0JiYocj10aGlzLnNyYy5jaGFyQ29kZUF0KGUpLG8ocikpO2UrKyk7cmV0dXJuIGV9LHMucHJvdG90eXBlLnNraXBTcGFjZXNCYWNrPWZ1bmN0aW9uKGUscil7aWYoZTw9cilyZXR1cm4gZTtmb3IoO2U+cjspaWYoIW8odGhpcy5zcmMuY2hhckNvZGVBdCgtLWUpKSlyZXR1cm4gZSsxO3JldHVybiBlfSxzLnByb3RvdHlwZS5za2lwQ2hhcnM9ZnVuY3Rpb24oZSxyKXtmb3IodmFyIHQ9dGhpcy5zcmMubGVuZ3RoO2U8dCYmdGhpcy5zcmMuY2hhckNvZGVBdChlKT09PXI7ZSsrKTtyZXR1cm4gZX0scy5wcm90b3R5cGUuc2tpcENoYXJzQmFjaz1mdW5jdGlvbihlLHIsdCl7aWYoZTw9dClyZXR1cm4gZTtmb3IoO2U+dDspaWYociE9PXRoaXMuc3JjLmNoYXJDb2RlQXQoLS1lKSlyZXR1cm4gZSsxO3JldHVybiBlfSxzLnByb3RvdHlwZS5nZXRMaW5lcz1mdW5jdGlvbihlLHIsdCxuKXt2YXIgcyxpLGEsbCxjLHUscCxoPWU7aWYoZT49cilyZXR1cm5cIlwiO2Zvcih1PW5ldyBBcnJheShyLWUpLHM9MDtoPHI7aCsrLHMrKyl7Zm9yKGk9MCxwPWw9dGhpcy5iTWFya3NbaF0sYz1oKzE8cnx8bj90aGlzLmVNYXJrc1toXSsxOnRoaXMuZU1hcmtzW2hdO2w8YyYmaTx0Oyl7aWYoYT10aGlzLnNyYy5jaGFyQ29kZUF0KGwpLG8oYSkpOT09PWE/aSs9NC0oaSt0aGlzLmJzQ291bnRbaF0pJTQ6aSsrO2Vsc2V7aWYoIShsLXA8dGhpcy50U2hpZnRbaF0pKWJyZWFrO2krK31sKyt9dVtzXT1pPnQ/bmV3IEFycmF5KGktdCsxKS5qb2luKFwiIFwiKSt0aGlzLnNyYy5zbGljZShsLGMpOnRoaXMuc3JjLnNsaWNlKGwsYyl9cmV0dXJuIHUuam9pbihcIlwiKX0scy5wcm90b3R5cGUuVG9rZW49bixyLmV4cG9ydHM9c30se1wiLi4vY29tbW9uL3V0aWxzXCI6NCxcIi4uL3Rva2VuXCI6NTF9XSwyOTpbZnVuY3Rpb24oZSxyLHQpe3ZhciBuPWUoXCIuLi9jb21tb24vdXRpbHNcIikuaXNTcGFjZTtmdW5jdGlvbiBvKGUscil7dmFyIHQ9ZS5iTWFya3Nbcl0rZS5ibGtJbmRlbnQsbj1lLmVNYXJrc1tyXTtyZXR1cm4gZS5zcmMuc3Vic3RyKHQsbi10KX1mdW5jdGlvbiBzKGUpe3ZhciByLHQ9W10sbj0wLG89ZS5sZW5ndGgscz0wLGk9MCxhPSExLGw9MDtmb3Iocj1lLmNoYXJDb2RlQXQobik7bjxvOyk5Nj09PXI/YT8oYT0hMSxsPW4pOnMlMj09MCYmKGE9ITAsbD1uKToxMjQhPT1yfHxzJTIhPTB8fGF8fCh0LnB1c2goZS5zdWJzdHJpbmcoaSxuKSksaT1uKzEpLDkyPT09cj9zKys6cz0wLCsrbj09PW8mJmEmJihhPSExLG49bCsxKSxyPWUuY2hhckNvZGVBdChuKTtyZXR1cm4gdC5wdXNoKGUuc3Vic3RyaW5nKGkpKSx0fXIuZXhwb3J0cz1mdW5jdGlvbihlLHIsdCxpKXt2YXIgYSxsLGMsdSxwLGgsZixkLG0sXyxnLGs7aWYocisyPnQpcmV0dXJuITE7aWYocD1yKzEsZS5zQ291bnRbcF08ZS5ibGtJbmRlbnQpcmV0dXJuITE7aWYoZS5zQ291bnRbcF0tZS5ibGtJbmRlbnQ+PTQpcmV0dXJuITE7aWYoKGM9ZS5iTWFya3NbcF0rZS50U2hpZnRbcF0pPj1lLmVNYXJrc1twXSlyZXR1cm4hMTtpZigxMjQhPT0oYT1lLnNyYy5jaGFyQ29kZUF0KGMrKykpJiY0NSE9PWEmJjU4IT09YSlyZXR1cm4hMTtmb3IoO2M8ZS5lTWFya3NbcF07KXtpZigxMjQhPT0oYT1lLnNyYy5jaGFyQ29kZUF0KGMpKSYmNDUhPT1hJiY1OCE9PWEmJiFuKGEpKXJldHVybiExO2MrK31mb3IobD1vKGUscisxKSxoPWwuc3BsaXQoXCJ8XCIpLG09W10sdT0wO3U8aC5sZW5ndGg7dSsrKXtpZighKF89aFt1XS50cmltKCkpKXtpZigwPT09dXx8dT09PWgubGVuZ3RoLTEpY29udGludWU7cmV0dXJuITF9aWYoIS9eOj8tKzo/JC8udGVzdChfKSlyZXR1cm4hMTs1OD09PV8uY2hhckNvZGVBdChfLmxlbmd0aC0xKT9tLnB1c2goNTg9PT1fLmNoYXJDb2RlQXQoMCk/XCJjZW50ZXJcIjpcInJpZ2h0XCIpOjU4PT09Xy5jaGFyQ29kZUF0KDApP20ucHVzaChcImxlZnRcIik6bS5wdXNoKFwiXCIpfWlmKC0xPT09KGw9byhlLHIpLnRyaW0oKSkuaW5kZXhPZihcInxcIikpcmV0dXJuITE7aWYoZS5zQ291bnRbcl0tZS5ibGtJbmRlbnQ+PTQpcmV0dXJuITE7aWYoaD1zKGwucmVwbGFjZSgvXlxcfHxcXHwkL2csXCJcIikpLChmPWgubGVuZ3RoKT5tLmxlbmd0aClyZXR1cm4hMTtpZihpKXJldHVybiEwO2ZvcigoZD1lLnB1c2goXCJ0YWJsZV9vcGVuXCIsXCJ0YWJsZVwiLDEpKS5tYXA9Zz1bciwwXSwoZD1lLnB1c2goXCJ0aGVhZF9vcGVuXCIsXCJ0aGVhZFwiLDEpKS5tYXA9W3IscisxXSwoZD1lLnB1c2goXCJ0cl9vcGVuXCIsXCJ0clwiLDEpKS5tYXA9W3IscisxXSx1PTA7dTxoLmxlbmd0aDt1KyspKGQ9ZS5wdXNoKFwidGhfb3BlblwiLFwidGhcIiwxKSkubWFwPVtyLHIrMV0sbVt1XSYmKGQuYXR0cnM9W1tcInN0eWxlXCIsXCJ0ZXh0LWFsaWduOlwiK21bdV1dXSksKGQ9ZS5wdXNoKFwiaW5saW5lXCIsXCJcIiwwKSkuY29udGVudD1oW3VdLnRyaW0oKSxkLm1hcD1bcixyKzFdLGQuY2hpbGRyZW49W10sZD1lLnB1c2goXCJ0aF9jbG9zZVwiLFwidGhcIiwtMSk7Zm9yKGQ9ZS5wdXNoKFwidHJfY2xvc2VcIixcInRyXCIsLTEpLGQ9ZS5wdXNoKFwidGhlYWRfY2xvc2VcIixcInRoZWFkXCIsLTEpLChkPWUucHVzaChcInRib2R5X29wZW5cIixcInRib2R5XCIsMSkpLm1hcD1rPVtyKzIsMF0scD1yKzI7cDx0JiYhKGUuc0NvdW50W3BdPGUuYmxrSW5kZW50KSYmLTEhPT0obD1vKGUscCkudHJpbSgpKS5pbmRleE9mKFwifFwiKSYmIShlLnNDb3VudFtwXS1lLmJsa0luZGVudD49NCk7cCsrKXtmb3IoaD1zKGwucmVwbGFjZSgvXlxcfHxcXHwkL2csXCJcIikpLGQ9ZS5wdXNoKFwidHJfb3BlblwiLFwidHJcIiwxKSx1PTA7dTxmO3UrKylkPWUucHVzaChcInRkX29wZW5cIixcInRkXCIsMSksbVt1XSYmKGQuYXR0cnM9W1tcInN0eWxlXCIsXCJ0ZXh0LWFsaWduOlwiK21bdV1dXSksKGQ9ZS5wdXNoKFwiaW5saW5lXCIsXCJcIiwwKSkuY29udGVudD1oW3VdP2hbdV0udHJpbSgpOlwiXCIsZC5jaGlsZHJlbj1bXSxkPWUucHVzaChcInRkX2Nsb3NlXCIsXCJ0ZFwiLC0xKTtkPWUucHVzaChcInRyX2Nsb3NlXCIsXCJ0clwiLC0xKX1yZXR1cm4gZD1lLnB1c2goXCJ0Ym9keV9jbG9zZVwiLFwidGJvZHlcIiwtMSksZD1lLnB1c2goXCJ0YWJsZV9jbG9zZVwiLFwidGFibGVcIiwtMSksZ1sxXT1rWzFdPXAsZS5saW5lPXAsITB9fSx7XCIuLi9jb21tb24vdXRpbHNcIjo0fV0sMzA6W2Z1bmN0aW9uKGUscix0KXtyLmV4cG9ydHM9ZnVuY3Rpb24oZSl7dmFyIHI7ZS5pbmxpbmVNb2RlPygocj1uZXcgZS5Ub2tlbihcImlubGluZVwiLFwiXCIsMCkpLmNvbnRlbnQ9ZS5zcmMsci5tYXA9WzAsMV0sci5jaGlsZHJlbj1bXSxlLnRva2Vucy5wdXNoKHIpKTplLm1kLmJsb2NrLnBhcnNlKGUuc3JjLGUubWQsZS5lbnYsZS50b2tlbnMpfX0se31dLDMxOltmdW5jdGlvbihlLHIsdCl7ci5leHBvcnRzPWZ1bmN0aW9uKGUpe3ZhciByLHQsbixvPWUudG9rZW5zO2Zvcih0PTAsbj1vLmxlbmd0aDt0PG47dCsrKVwiaW5saW5lXCI9PT0ocj1vW3RdKS50eXBlJiZlLm1kLmlubGluZS5wYXJzZShyLmNvbnRlbnQsZS5tZCxlLmVudixyLmNoaWxkcmVuKX19LHt9XSwzMjpbZnVuY3Rpb24oZSxyLHQpe3ZhciBuPWUoXCIuLi9jb21tb24vdXRpbHNcIikuYXJyYXlSZXBsYWNlQXQ7ZnVuY3Rpb24gbyhlKXtyZXR1cm4vXjxcXC9hXFxzKj4vaS50ZXN0KGUpfXIuZXhwb3J0cz1mdW5jdGlvbihlKXt2YXIgcix0LHMsaSxhLGwsYyx1LHAsaCxmLGQsbSxfLGcsayxiLHYseT1lLnRva2VucztpZihlLm1kLm9wdGlvbnMubGlua2lmeSlmb3IodD0wLHM9eS5sZW5ndGg7dDxzO3QrKylpZihcImlubGluZVwiPT09eVt0XS50eXBlJiZlLm1kLmxpbmtpZnkucHJldGVzdCh5W3RdLmNvbnRlbnQpKWZvcihpPXlbdF0uY2hpbGRyZW4sbT0wLHI9aS5sZW5ndGgtMTtyPj0wO3ItLSlpZihcImxpbmtfY2xvc2VcIiE9PShsPWlbcl0pLnR5cGUpe2lmKFwiaHRtbF9pbmxpbmVcIj09PWwudHlwZSYmKHY9bC5jb250ZW50LC9ePGFbPlxcc10vaS50ZXN0KHYpJiZtPjAmJm0tLSxvKGwuY29udGVudCkmJm0rKyksIShtPjApJiZcInRleHRcIj09PWwudHlwZSYmZS5tZC5saW5raWZ5LnRlc3QobC5jb250ZW50KSl7Zm9yKHA9bC5jb250ZW50LGI9ZS5tZC5saW5raWZ5Lm1hdGNoKHApLGM9W10sZD1sLmxldmVsLGY9MCx1PTA7dTxiLmxlbmd0aDt1KyspXz1iW3VdLnVybCxnPWUubWQubm9ybWFsaXplTGluayhfKSxlLm1kLnZhbGlkYXRlTGluayhnKSYmKGs9Ylt1XS50ZXh0LGs9Ylt1XS5zY2hlbWE/XCJtYWlsdG86XCIhPT1iW3VdLnNjaGVtYXx8L15tYWlsdG86L2kudGVzdChrKT9lLm1kLm5vcm1hbGl6ZUxpbmtUZXh0KGspOmUubWQubm9ybWFsaXplTGlua1RleHQoXCJtYWlsdG86XCIraykucmVwbGFjZSgvXm1haWx0bzovLFwiXCIpOmUubWQubm9ybWFsaXplTGlua1RleHQoXCJodHRwOi8vXCIraykucmVwbGFjZSgvXmh0dHA6XFwvXFwvLyxcIlwiKSwoaD1iW3VdLmluZGV4KT5mJiYoKGE9bmV3IGUuVG9rZW4oXCJ0ZXh0XCIsXCJcIiwwKSkuY29udGVudD1wLnNsaWNlKGYsaCksYS5sZXZlbD1kLGMucHVzaChhKSksKGE9bmV3IGUuVG9rZW4oXCJsaW5rX29wZW5cIixcImFcIiwxKSkuYXR0cnM9W1tcImhyZWZcIixnXV0sYS5sZXZlbD1kKyssYS5tYXJrdXA9XCJsaW5raWZ5XCIsYS5pbmZvPVwiYXV0b1wiLGMucHVzaChhKSwoYT1uZXcgZS5Ub2tlbihcInRleHRcIixcIlwiLDApKS5jb250ZW50PWssYS5sZXZlbD1kLGMucHVzaChhKSwoYT1uZXcgZS5Ub2tlbihcImxpbmtfY2xvc2VcIixcImFcIiwtMSkpLmxldmVsPS0tZCxhLm1hcmt1cD1cImxpbmtpZnlcIixhLmluZm89XCJhdXRvXCIsYy5wdXNoKGEpLGY9Ylt1XS5sYXN0SW5kZXgpO2Y8cC5sZW5ndGgmJigoYT1uZXcgZS5Ub2tlbihcInRleHRcIixcIlwiLDApKS5jb250ZW50PXAuc2xpY2UoZiksYS5sZXZlbD1kLGMucHVzaChhKSkseVt0XS5jaGlsZHJlbj1pPW4oaSxyLGMpfX1lbHNlIGZvcihyLS07aVtyXS5sZXZlbCE9PWwubGV2ZWwmJlwibGlua19vcGVuXCIhPT1pW3JdLnR5cGU7KXItLX19LHtcIi4uL2NvbW1vbi91dGlsc1wiOjR9XSwzMzpbZnVuY3Rpb24oZSxyLHQpe3ZhciBuPS9cXHJcXG4/fFxcbi9nLG89L1xcMC9nO3IuZXhwb3J0cz1mdW5jdGlvbihlKXt2YXIgcjtyPShyPWUuc3JjLnJlcGxhY2UobixcIlxcblwiKSkucmVwbGFjZShvLFwi77+9XCIpLGUuc3JjPXJ9fSx7fV0sMzQ6W2Z1bmN0aW9uKGUscix0KXt2YXIgbj0vXFwrLXxcXC5cXC58XFw/XFw/XFw/XFw/fCEhISF8LCx8LS0vLG89L1xcKChjfHRtfHJ8cClcXCkvaSxzPS9cXCgoY3x0bXxyfHApXFwpL2dpLGk9e2M6XCLCqVwiLHI6XCLCrlwiLHA6XCLCp1wiLHRtOlwi4oSiXCJ9O2Z1bmN0aW9uIGEoZSxyKXtyZXR1cm4gaVtyLnRvTG93ZXJDYXNlKCldfWZ1bmN0aW9uIGwoZSl7dmFyIHIsdCxuPTA7Zm9yKHI9ZS5sZW5ndGgtMTtyPj0wO3ItLSlcInRleHRcIiE9PSh0PWVbcl0pLnR5cGV8fG58fCh0LmNvbnRlbnQ9dC5jb250ZW50LnJlcGxhY2UocyxhKSksXCJsaW5rX29wZW5cIj09PXQudHlwZSYmXCJhdXRvXCI9PT10LmluZm8mJm4tLSxcImxpbmtfY2xvc2VcIj09PXQudHlwZSYmXCJhdXRvXCI9PT10LmluZm8mJm4rK31mdW5jdGlvbiBjKGUpe3ZhciByLHQsbz0wO2ZvcihyPWUubGVuZ3RoLTE7cj49MDtyLS0pXCJ0ZXh0XCIhPT0odD1lW3JdKS50eXBlfHxvfHxuLnRlc3QodC5jb250ZW50KSYmKHQuY29udGVudD10LmNvbnRlbnQucmVwbGFjZSgvXFwrLS9nLFwiwrFcIikucmVwbGFjZSgvXFwuezIsfS9nLFwi4oCmXCIpLnJlcGxhY2UoLyhbPyFdKeKApi9nLFwiJDEuLlwiKS5yZXBsYWNlKC8oWz8hXSl7NCx9L2csXCIkMSQxJDFcIikucmVwbGFjZSgvLHsyLH0vZyxcIixcIikucmVwbGFjZSgvKF58W14tXSktLS0oW14tXXwkKS9nbSxcIiQx4oCUJDJcIikucmVwbGFjZSgvKF58XFxzKS0tKFxcc3wkKS9nbSxcIiQx4oCTJDJcIikucmVwbGFjZSgvKF58W14tXFxzXSktLShbXi1cXHNdfCQpL2dtLFwiJDHigJMkMlwiKSksXCJsaW5rX29wZW5cIj09PXQudHlwZSYmXCJhdXRvXCI9PT10LmluZm8mJm8tLSxcImxpbmtfY2xvc2VcIj09PXQudHlwZSYmXCJhdXRvXCI9PT10LmluZm8mJm8rK31yLmV4cG9ydHM9ZnVuY3Rpb24oZSl7dmFyIHI7aWYoZS5tZC5vcHRpb25zLnR5cG9ncmFwaGVyKWZvcihyPWUudG9rZW5zLmxlbmd0aC0xO3I+PTA7ci0tKVwiaW5saW5lXCI9PT1lLnRva2Vuc1tyXS50eXBlJiYoby50ZXN0KGUudG9rZW5zW3JdLmNvbnRlbnQpJiZsKGUudG9rZW5zW3JdLmNoaWxkcmVuKSxuLnRlc3QoZS50b2tlbnNbcl0uY29udGVudCkmJmMoZS50b2tlbnNbcl0uY2hpbGRyZW4pKX19LHt9XSwzNTpbZnVuY3Rpb24oZSxyLHQpe3ZhciBuPWUoXCIuLi9jb21tb24vdXRpbHNcIikuaXNXaGl0ZVNwYWNlLG89ZShcIi4uL2NvbW1vbi91dGlsc1wiKS5pc1B1bmN0Q2hhcixzPWUoXCIuLi9jb21tb24vdXRpbHNcIikuaXNNZEFzY2lpUHVuY3QsaT0vWydcIl0vLGE9L1snXCJdL2csbD1cIuKAmVwiO2Z1bmN0aW9uIGMoZSxyLHQpe3JldHVybiBlLnN1YnN0cigwLHIpK3QrZS5zdWJzdHIocisxKX1mdW5jdGlvbiB1KGUscil7dmFyIHQsaSx1LHAsaCxmLGQsbSxfLGcsayxiLHYseSx4LEMsQSx3LEQsRSxxO2ZvcihEPVtdLHQ9MDt0PGUubGVuZ3RoO3QrKyl7Zm9yKGk9ZVt0XSxkPWVbdF0ubGV2ZWwsQT1ELmxlbmd0aC0xO0E+PTAmJiEoRFtBXS5sZXZlbDw9ZCk7QS0tKTtpZihELmxlbmd0aD1BKzEsXCJ0ZXh0XCI9PT1pLnR5cGUpe3U9aS5jb250ZW50LGg9MCxmPXUubGVuZ3RoO2U6Zm9yKDtoPGYmJihhLmxhc3RJbmRleD1oLHA9YS5leGVjKHUpKTspe2lmKHg9Qz0hMCxoPXAuaW5kZXgrMSx3PVwiJ1wiPT09cFswXSxfPTMyLHAuaW5kZXgtMT49MClfPXUuY2hhckNvZGVBdChwLmluZGV4LTEpO2Vsc2UgZm9yKEE9dC0xO0E+PTAmJlwic29mdGJyZWFrXCIhPT1lW0FdLnR5cGUmJlwiaGFyZGJyZWFrXCIhPT1lW0FdLnR5cGU7QS0tKWlmKFwidGV4dFwiPT09ZVtBXS50eXBlKXtfPWVbQV0uY29udGVudC5jaGFyQ29kZUF0KGVbQV0uY29udGVudC5sZW5ndGgtMSk7YnJlYWt9aWYoZz0zMixoPGYpZz11LmNoYXJDb2RlQXQoaCk7ZWxzZSBmb3IoQT10KzE7QTxlLmxlbmd0aCYmXCJzb2Z0YnJlYWtcIiE9PWVbQV0udHlwZSYmXCJoYXJkYnJlYWtcIiE9PWVbQV0udHlwZTtBKyspaWYoXCJ0ZXh0XCI9PT1lW0FdLnR5cGUpe2c9ZVtBXS5jb250ZW50LmNoYXJDb2RlQXQoMCk7YnJlYWt9aWYoaz1zKF8pfHxvKFN0cmluZy5mcm9tQ2hhckNvZGUoXykpLGI9cyhnKXx8byhTdHJpbmcuZnJvbUNoYXJDb2RlKGcpKSx2PW4oXyksKHk9bihnKSk/eD0hMTpiJiYodnx8a3x8KHg9ITEpKSx2P0M9ITE6ayYmKHl8fGJ8fChDPSExKSksMzQ9PT1nJiYnXCInPT09cFswXSYmXz49NDgmJl88PTU3JiYoQz14PSExKSx4JiZDJiYoeD0hMSxDPWIpLHh8fEMpe2lmKEMpZm9yKEE9RC5sZW5ndGgtMTtBPj0wJiYobT1EW0FdLCEoRFtBXS5sZXZlbDxkKSk7QS0tKWlmKG0uc2luZ2xlPT09dyYmRFtBXS5sZXZlbD09PWQpe209RFtBXSx3PyhFPXIubWQub3B0aW9ucy5xdW90ZXNbMl0scT1yLm1kLm9wdGlvbnMucXVvdGVzWzNdKTooRT1yLm1kLm9wdGlvbnMucXVvdGVzWzBdLHE9ci5tZC5vcHRpb25zLnF1b3Rlc1sxXSksaS5jb250ZW50PWMoaS5jb250ZW50LHAuaW5kZXgscSksZVttLnRva2VuXS5jb250ZW50PWMoZVttLnRva2VuXS5jb250ZW50LG0ucG9zLEUpLGgrPXEubGVuZ3RoLTEsbS50b2tlbj09PXQmJihoKz1FLmxlbmd0aC0xKSx1PWkuY29udGVudCxmPXUubGVuZ3RoLEQubGVuZ3RoPUE7Y29udGludWUgZX14P0QucHVzaCh7dG9rZW46dCxwb3M6cC5pbmRleCxzaW5nbGU6dyxsZXZlbDpkfSk6QyYmdyYmKGkuY29udGVudD1jKGkuY29udGVudCxwLmluZGV4LGwpKX1lbHNlIHcmJihpLmNvbnRlbnQ9YyhpLmNvbnRlbnQscC5pbmRleCxsKSl9fX19ci5leHBvcnRzPWZ1bmN0aW9uKGUpe3ZhciByO2lmKGUubWQub3B0aW9ucy50eXBvZ3JhcGhlcilmb3Iocj1lLnRva2Vucy5sZW5ndGgtMTtyPj0wO3ItLSlcImlubGluZVwiPT09ZS50b2tlbnNbcl0udHlwZSYmaS50ZXN0KGUudG9rZW5zW3JdLmNvbnRlbnQpJiZ1KGUudG9rZW5zW3JdLmNoaWxkcmVuLGUpfX0se1wiLi4vY29tbW9uL3V0aWxzXCI6NH1dLDM2OltmdW5jdGlvbihlLHIsdCl7dmFyIG49ZShcIi4uL3Rva2VuXCIpO2Z1bmN0aW9uIG8oZSxyLHQpe3RoaXMuc3JjPWUsdGhpcy5lbnY9dCx0aGlzLnRva2Vucz1bXSx0aGlzLmlubGluZU1vZGU9ITEsdGhpcy5tZD1yfW8ucHJvdG90eXBlLlRva2VuPW4sci5leHBvcnRzPW99LHtcIi4uL3Rva2VuXCI6NTF9XSwzNzpbZnVuY3Rpb24oZSxyLHQpe3ZhciBuPS9ePChbYS16QS1aMC05LiEjJCUmJyorXFwvPT9eX2B7fH1+LV0rQFthLXpBLVowLTldKD86W2EtekEtWjAtOS1dezAsNjF9W2EtekEtWjAtOV0pPyg/OlxcLlthLXpBLVowLTldKD86W2EtekEtWjAtOS1dezAsNjF9W2EtekEtWjAtOV0pPykqKT4vLG89L148KFthLXpBLVpdW2EtekEtWjAtOSsuXFwtXXsxLDMxfSk6KFtePD5cXHgwMC1cXHgyMF0qKT4vO3IuZXhwb3J0cz1mdW5jdGlvbihlLHIpe3ZhciB0LHMsaSxhLGwsYyx1PWUucG9zO3JldHVybiEoNjAhPT1lLnNyYy5jaGFyQ29kZUF0KHUpfHwodD1lLnNyYy5zbGljZSh1KSkuaW5kZXhPZihcIj5cIik8MHx8KG8udGVzdCh0KT8ocz10Lm1hdGNoKG8pLGE9c1swXS5zbGljZSgxLC0xKSxsPWUubWQubm9ybWFsaXplTGluayhhKSwhZS5tZC52YWxpZGF0ZUxpbmsobCl8fChyfHwoKGM9ZS5wdXNoKFwibGlua19vcGVuXCIsXCJhXCIsMSkpLmF0dHJzPVtbXCJocmVmXCIsbF1dLGMubWFya3VwPVwiYXV0b2xpbmtcIixjLmluZm89XCJhdXRvXCIsKGM9ZS5wdXNoKFwidGV4dFwiLFwiXCIsMCkpLmNvbnRlbnQ9ZS5tZC5ub3JtYWxpemVMaW5rVGV4dChhKSwoYz1lLnB1c2goXCJsaW5rX2Nsb3NlXCIsXCJhXCIsLTEpKS5tYXJrdXA9XCJhdXRvbGlua1wiLGMuaW5mbz1cImF1dG9cIiksZS5wb3MrPXNbMF0ubGVuZ3RoLDApKTohbi50ZXN0KHQpfHwoaT10Lm1hdGNoKG4pLGE9aVswXS5zbGljZSgxLC0xKSxsPWUubWQubm9ybWFsaXplTGluayhcIm1haWx0bzpcIithKSwhZS5tZC52YWxpZGF0ZUxpbmsobCl8fChyfHwoKGM9ZS5wdXNoKFwibGlua19vcGVuXCIsXCJhXCIsMSkpLmF0dHJzPVtbXCJocmVmXCIsbF1dLGMubWFya3VwPVwiYXV0b2xpbmtcIixjLmluZm89XCJhdXRvXCIsKGM9ZS5wdXNoKFwidGV4dFwiLFwiXCIsMCkpLmNvbnRlbnQ9ZS5tZC5ub3JtYWxpemVMaW5rVGV4dChhKSwoYz1lLnB1c2goXCJsaW5rX2Nsb3NlXCIsXCJhXCIsLTEpKS5tYXJrdXA9XCJhdXRvbGlua1wiLGMuaW5mbz1cImF1dG9cIiksZS5wb3MrPWlbMF0ubGVuZ3RoLDApKSkpfX0se31dLDM4OltmdW5jdGlvbihlLHIsdCl7ci5leHBvcnRzPWZ1bmN0aW9uKGUscil7dmFyIHQsbixvLHMsaSxhLGw9ZS5wb3MsYz1lLnNyYy5jaGFyQ29kZUF0KGwpO2lmKDk2IT09YylyZXR1cm4hMTtmb3IodD1sLGwrKyxuPWUucG9zTWF4O2w8biYmOTY9PT1lLnNyYy5jaGFyQ29kZUF0KGwpOylsKys7Zm9yKG89ZS5zcmMuc2xpY2UodCxsKSxzPWk9bDstMSE9PShzPWUuc3JjLmluZGV4T2YoXCJgXCIsaSkpOyl7Zm9yKGk9cysxO2k8biYmOTY9PT1lLnNyYy5jaGFyQ29kZUF0KGkpOylpKys7aWYoaS1zPT09by5sZW5ndGgpcmV0dXJuIHJ8fCgoYT1lLnB1c2goXCJjb2RlX2lubGluZVwiLFwiY29kZVwiLDApKS5tYXJrdXA9byxhLmNvbnRlbnQ9ZS5zcmMuc2xpY2UobCxzKS5yZXBsYWNlKC9cXG4vZyxcIiBcIikucmVwbGFjZSgvXiAoLispICQvLFwiJDFcIikpLGUucG9zPWksITB9cmV0dXJuIHJ8fChlLnBlbmRpbmcrPW8pLGUucG9zKz1vLmxlbmd0aCwhMH19LHt9XSwzOTpbZnVuY3Rpb24oZSxyLHQpe2Z1bmN0aW9uIG4oZSxyKXt2YXIgdCxuLG8scyxpLGEsbCxjLHU9e30scD1yLmxlbmd0aDtmb3IodD0wO3Q8cDt0KyspaWYoKG89clt0XSkubGVuZ3RoPW8ubGVuZ3RofHwwLG8uY2xvc2Upe2Zvcih1Lmhhc093blByb3BlcnR5KG8ubWFya2VyKXx8KHVbby5tYXJrZXJdPVstMSwtMSwtMV0pLGk9dVtvLm1hcmtlcl1bby5sZW5ndGglM10sYT0tMSxuPXQtby5qdW1wLTE7bj5pO24tPXMuanVtcCsxKWlmKChzPXJbbl0pLm1hcmtlcj09PW8ubWFya2VyJiYoLTE9PT1hJiYoYT1uKSxzLm9wZW4mJnMuZW5kPDAmJnMubGV2ZWw9PT1vLmxldmVsJiYobD0hMSwocy5jbG9zZXx8by5vcGVuKSYmKHMubGVuZ3RoK28ubGVuZ3RoKSUzPT0wJiYocy5sZW5ndGglMz09MCYmby5sZW5ndGglMz09MHx8KGw9ITApKSwhbCkpKXtjPW4+MCYmIXJbbi0xXS5vcGVuP3Jbbi0xXS5qdW1wKzE6MCxvLmp1bXA9dC1uK2Msby5vcGVuPSExLHMuZW5kPXQscy5qdW1wPWMscy5jbG9zZT0hMSxhPS0xO2JyZWFrfS0xIT09YSYmKHVbby5tYXJrZXJdWyhvLmxlbmd0aHx8MCklM109YSl9fXIuZXhwb3J0cz1mdW5jdGlvbihlKXt2YXIgcix0PWUudG9rZW5zX21ldGEsbz1lLnRva2Vuc19tZXRhLmxlbmd0aDtmb3IobigwLGUuZGVsaW1pdGVycykscj0wO3I8bztyKyspdFtyXSYmdFtyXS5kZWxpbWl0ZXJzJiZuKDAsdFtyXS5kZWxpbWl0ZXJzKX19LHt9XSw0MDpbZnVuY3Rpb24oZSxyLHQpe2Z1bmN0aW9uIG4oZSxyKXt2YXIgdCxuLG8scyxpLGEsbD1yLmxlbmd0aDtmb3IodD1sLTE7dD49MDt0LS0pOTUhPT0obj1yW3RdKS5tYXJrZXImJjQyIT09bi5tYXJrZXJ8fC0xIT09bi5lbmQmJihvPXJbbi5lbmRdLGE9dD4wJiZyW3QtMV0uZW5kPT09bi5lbmQrMSYmclt0LTFdLnRva2VuPT09bi50b2tlbi0xJiZyW24uZW5kKzFdLnRva2VuPT09by50b2tlbisxJiZyW3QtMV0ubWFya2VyPT09bi5tYXJrZXIsaT1TdHJpbmcuZnJvbUNoYXJDb2RlKG4ubWFya2VyKSwocz1lLnRva2Vuc1tuLnRva2VuXSkudHlwZT1hP1wic3Ryb25nX29wZW5cIjpcImVtX29wZW5cIixzLnRhZz1hP1wic3Ryb25nXCI6XCJlbVwiLHMubmVzdGluZz0xLHMubWFya3VwPWE/aStpOmkscy5jb250ZW50PVwiXCIsKHM9ZS50b2tlbnNbby50b2tlbl0pLnR5cGU9YT9cInN0cm9uZ19jbG9zZVwiOlwiZW1fY2xvc2VcIixzLnRhZz1hP1wic3Ryb25nXCI6XCJlbVwiLHMubmVzdGluZz0tMSxzLm1hcmt1cD1hP2kraTppLHMuY29udGVudD1cIlwiLGEmJihlLnRva2Vuc1tyW3QtMV0udG9rZW5dLmNvbnRlbnQ9XCJcIixlLnRva2Vuc1tyW24uZW5kKzFdLnRva2VuXS5jb250ZW50PVwiXCIsdC0tKSl9ci5leHBvcnRzLnRva2VuaXplPWZ1bmN0aW9uKGUscil7dmFyIHQsbixvPWUucG9zLHM9ZS5zcmMuY2hhckNvZGVBdChvKTtpZihyKXJldHVybiExO2lmKDk1IT09cyYmNDIhPT1zKXJldHVybiExO2ZvcihuPWUuc2NhbkRlbGltcyhlLnBvcyw0Mj09PXMpLHQ9MDt0PG4ubGVuZ3RoO3QrKyllLnB1c2goXCJ0ZXh0XCIsXCJcIiwwKS5jb250ZW50PVN0cmluZy5mcm9tQ2hhckNvZGUocyksZS5kZWxpbWl0ZXJzLnB1c2goe21hcmtlcjpzLGxlbmd0aDpuLmxlbmd0aCxqdW1wOnQsdG9rZW46ZS50b2tlbnMubGVuZ3RoLTEsZW5kOi0xLG9wZW46bi5jYW5fb3BlbixjbG9zZTpuLmNhbl9jbG9zZX0pO3JldHVybiBlLnBvcys9bi5sZW5ndGgsITB9LHIuZXhwb3J0cy5wb3N0UHJvY2Vzcz1mdW5jdGlvbihlKXt2YXIgcix0PWUudG9rZW5zX21ldGEsbz1lLnRva2Vuc19tZXRhLmxlbmd0aDtmb3IobihlLGUuZGVsaW1pdGVycykscj0wO3I8bztyKyspdFtyXSYmdFtyXS5kZWxpbWl0ZXJzJiZuKGUsdFtyXS5kZWxpbWl0ZXJzKX19LHt9XSw0MTpbZnVuY3Rpb24oZSxyLHQpe3ZhciBuPWUoXCIuLi9jb21tb24vZW50aXRpZXNcIiksbz1lKFwiLi4vY29tbW9uL3V0aWxzXCIpLmhhcyxzPWUoXCIuLi9jb21tb24vdXRpbHNcIikuaXNWYWxpZEVudGl0eUNvZGUsaT1lKFwiLi4vY29tbW9uL3V0aWxzXCIpLmZyb21Db2RlUG9pbnQsYT0vXiYjKCg/OnhbYS1mMC05XXsxLDZ9fFswLTldezEsN30pKTsvaSxsPS9eJihbYS16XVthLXowLTldezEsMzF9KTsvaTtyLmV4cG9ydHM9ZnVuY3Rpb24oZSxyKXt2YXIgdCxjLHU9ZS5wb3MscD1lLnBvc01heDtpZigzOCE9PWUuc3JjLmNoYXJDb2RlQXQodSkpcmV0dXJuITE7aWYodSsxPHApaWYoMzU9PT1lLnNyYy5jaGFyQ29kZUF0KHUrMSkpe2lmKGM9ZS5zcmMuc2xpY2UodSkubWF0Y2goYSkpcmV0dXJuIHJ8fCh0PVwieFwiPT09Y1sxXVswXS50b0xvd2VyQ2FzZSgpP3BhcnNlSW50KGNbMV0uc2xpY2UoMSksMTYpOnBhcnNlSW50KGNbMV0sMTApLGUucGVuZGluZys9cyh0KT9pKHQpOmkoNjU1MzMpKSxlLnBvcys9Y1swXS5sZW5ndGgsITB9ZWxzZSBpZigoYz1lLnNyYy5zbGljZSh1KS5tYXRjaChsKSkmJm8obixjWzFdKSlyZXR1cm4gcnx8KGUucGVuZGluZys9bltjWzFdXSksZS5wb3MrPWNbMF0ubGVuZ3RoLCEwO3JldHVybiByfHwoZS5wZW5kaW5nKz1cIiZcIiksZS5wb3MrKywhMH19LHtcIi4uL2NvbW1vbi9lbnRpdGllc1wiOjEsXCIuLi9jb21tb24vdXRpbHNcIjo0fV0sNDI6W2Z1bmN0aW9uKGUscix0KXtmb3IodmFyIG49ZShcIi4uL2NvbW1vbi91dGlsc1wiKS5pc1NwYWNlLG89W10scz0wO3M8MjU2O3MrKylvLnB1c2goMCk7XCJcXFxcIVxcXCIjJCUmJygpKissLi86Ozw9Pj9AW11eX2B7fH1+LVwiLnNwbGl0KFwiXCIpLmZvckVhY2goZnVuY3Rpb24oZSl7b1tlLmNoYXJDb2RlQXQoMCldPTF9KSxyLmV4cG9ydHM9ZnVuY3Rpb24oZSxyKXt2YXIgdCxzPWUucG9zLGk9ZS5wb3NNYXg7aWYoOTIhPT1lLnNyYy5jaGFyQ29kZUF0KHMpKXJldHVybiExO2lmKCsrczxpKXtpZigodD1lLnNyYy5jaGFyQ29kZUF0KHMpKTwyNTYmJjAhPT1vW3RdKXJldHVybiByfHwoZS5wZW5kaW5nKz1lLnNyY1tzXSksZS5wb3MrPTIsITA7aWYoMTA9PT10KXtmb3Iocnx8ZS5wdXNoKFwiaGFyZGJyZWFrXCIsXCJiclwiLDApLHMrKztzPGkmJih0PWUuc3JjLmNoYXJDb2RlQXQocyksbih0KSk7KXMrKztyZXR1cm4gZS5wb3M9cywhMH19cmV0dXJuIHJ8fChlLnBlbmRpbmcrPVwiXFxcXFwiKSxlLnBvcysrLCEwfX0se1wiLi4vY29tbW9uL3V0aWxzXCI6NH1dLDQzOltmdW5jdGlvbihlLHIsdCl7dmFyIG49ZShcIi4uL2NvbW1vbi9odG1sX3JlXCIpLkhUTUxfVEFHX1JFO3IuZXhwb3J0cz1mdW5jdGlvbihlLHIpe3ZhciB0LG8scyxpPWUucG9zO3JldHVybiEoIWUubWQub3B0aW9ucy5odG1sfHwocz1lLnBvc01heCw2MCE9PWUuc3JjLmNoYXJDb2RlQXQoaSl8fGkrMj49c3x8MzMhPT0odD1lLnNyYy5jaGFyQ29kZUF0KGkrMSkpJiY2MyE9PXQmJjQ3IT09dCYmIWZ1bmN0aW9uKGUpe3ZhciByPTMyfGU7cmV0dXJuIHI+PTk3JiZyPD0xMjJ9KHQpfHwhKG89ZS5zcmMuc2xpY2UoaSkubWF0Y2gobikpfHwocnx8KGUucHVzaChcImh0bWxfaW5saW5lXCIsXCJcIiwwKS5jb250ZW50PWUuc3JjLnNsaWNlKGksaStvWzBdLmxlbmd0aCkpLGUucG9zKz1vWzBdLmxlbmd0aCwwKSkpfX0se1wiLi4vY29tbW9uL2h0bWxfcmVcIjozfV0sNDQ6W2Z1bmN0aW9uKGUscix0KXt2YXIgbj1lKFwiLi4vY29tbW9uL3V0aWxzXCIpLm5vcm1hbGl6ZVJlZmVyZW5jZSxvPWUoXCIuLi9jb21tb24vdXRpbHNcIikuaXNTcGFjZTtyLmV4cG9ydHM9ZnVuY3Rpb24oZSxyKXt2YXIgdCxzLGksYSxsLGMsdSxwLGgsZixkLG0sXyxnPVwiXCIsaz1lLnBvcyxiPWUucG9zTWF4O2lmKDMzIT09ZS5zcmMuY2hhckNvZGVBdChlLnBvcykpcmV0dXJuITE7aWYoOTEhPT1lLnNyYy5jaGFyQ29kZUF0KGUucG9zKzEpKXJldHVybiExO2lmKGM9ZS5wb3MrMiwobD1lLm1kLmhlbHBlcnMucGFyc2VMaW5rTGFiZWwoZSxlLnBvcysxLCExKSk8MClyZXR1cm4hMTtpZigodT1sKzEpPGImJjQwPT09ZS5zcmMuY2hhckNvZGVBdCh1KSl7Zm9yKHUrKzt1PGImJihzPWUuc3JjLmNoYXJDb2RlQXQodSksbyhzKXx8MTA9PT1zKTt1KyspO2lmKHU+PWIpcmV0dXJuITE7Zm9yKF89dSwoaD1lLm1kLmhlbHBlcnMucGFyc2VMaW5rRGVzdGluYXRpb24oZS5zcmMsdSxlLnBvc01heCkpLm9rJiYoZz1lLm1kLm5vcm1hbGl6ZUxpbmsoaC5zdHIpLGUubWQudmFsaWRhdGVMaW5rKGcpP3U9aC5wb3M6Zz1cIlwiKSxfPXU7dTxiJiYocz1lLnNyYy5jaGFyQ29kZUF0KHUpLG8ocyl8fDEwPT09cyk7dSsrKTtpZihoPWUubWQuaGVscGVycy5wYXJzZUxpbmtUaXRsZShlLnNyYyx1LGUucG9zTWF4KSx1PGImJl8hPT11JiZoLm9rKWZvcihmPWguc3RyLHU9aC5wb3M7dTxiJiYocz1lLnNyYy5jaGFyQ29kZUF0KHUpLG8ocyl8fDEwPT09cyk7dSsrKTtlbHNlIGY9XCJcIjtpZih1Pj1ifHw0MSE9PWUuc3JjLmNoYXJDb2RlQXQodSkpcmV0dXJuIGUucG9zPWssITE7dSsrfWVsc2V7aWYodm9pZCAwPT09ZS5lbnYucmVmZXJlbmNlcylyZXR1cm4hMTtpZih1PGImJjkxPT09ZS5zcmMuY2hhckNvZGVBdCh1KT8oXz11KzEsKHU9ZS5tZC5oZWxwZXJzLnBhcnNlTGlua0xhYmVsKGUsdSkpPj0wP2E9ZS5zcmMuc2xpY2UoXyx1KyspOnU9bCsxKTp1PWwrMSxhfHwoYT1lLnNyYy5zbGljZShjLGwpKSwhKHA9ZS5lbnYucmVmZXJlbmNlc1tuKGEpXSkpcmV0dXJuIGUucG9zPWssITE7Zz1wLmhyZWYsZj1wLnRpdGxlfXJldHVybiByfHwoaT1lLnNyYy5zbGljZShjLGwpLGUubWQuaW5saW5lLnBhcnNlKGksZS5tZCxlLmVudixtPVtdKSwoZD1lLnB1c2goXCJpbWFnZVwiLFwiaW1nXCIsMCkpLmF0dHJzPXQ9W1tcInNyY1wiLGddLFtcImFsdFwiLFwiXCJdXSxkLmNoaWxkcmVuPW0sZC5jb250ZW50PWksZiYmdC5wdXNoKFtcInRpdGxlXCIsZl0pKSxlLnBvcz11LGUucG9zTWF4PWIsITB9fSx7XCIuLi9jb21tb24vdXRpbHNcIjo0fV0sNDU6W2Z1bmN0aW9uKGUscix0KXt2YXIgbj1lKFwiLi4vY29tbW9uL3V0aWxzXCIpLm5vcm1hbGl6ZVJlZmVyZW5jZSxvPWUoXCIuLi9jb21tb24vdXRpbHNcIikuaXNTcGFjZTtyLmV4cG9ydHM9ZnVuY3Rpb24oZSxyKXt2YXIgdCxzLGksYSxsLGMsdSxwLGgsZj1cIlwiLGQ9ZS5wb3MsbT1lLnBvc01heCxfPWUucG9zLGc9ITA7aWYoOTEhPT1lLnNyYy5jaGFyQ29kZUF0KGUucG9zKSlyZXR1cm4hMTtpZihsPWUucG9zKzEsKGE9ZS5tZC5oZWxwZXJzLnBhcnNlTGlua0xhYmVsKGUsZS5wb3MsITApKTwwKXJldHVybiExO2lmKChjPWErMSk8bSYmNDA9PT1lLnNyYy5jaGFyQ29kZUF0KGMpKXtmb3IoZz0hMSxjKys7YzxtJiYocz1lLnNyYy5jaGFyQ29kZUF0KGMpLG8ocyl8fDEwPT09cyk7YysrKTtpZihjPj1tKXJldHVybiExO2ZvcihfPWMsKHU9ZS5tZC5oZWxwZXJzLnBhcnNlTGlua0Rlc3RpbmF0aW9uKGUuc3JjLGMsZS5wb3NNYXgpKS5vayYmKGY9ZS5tZC5ub3JtYWxpemVMaW5rKHUuc3RyKSxlLm1kLnZhbGlkYXRlTGluayhmKT9jPXUucG9zOmY9XCJcIiksXz1jO2M8bSYmKHM9ZS5zcmMuY2hhckNvZGVBdChjKSxvKHMpfHwxMD09PXMpO2MrKyk7aWYodT1lLm1kLmhlbHBlcnMucGFyc2VMaW5rVGl0bGUoZS5zcmMsYyxlLnBvc01heCksYzxtJiZfIT09YyYmdS5vaylmb3IoaD11LnN0cixjPXUucG9zO2M8bSYmKHM9ZS5zcmMuY2hhckNvZGVBdChjKSxvKHMpfHwxMD09PXMpO2MrKyk7ZWxzZSBoPVwiXCI7KGM+PW18fDQxIT09ZS5zcmMuY2hhckNvZGVBdChjKSkmJihnPSEwKSxjKyt9aWYoZyl7aWYodm9pZCAwPT09ZS5lbnYucmVmZXJlbmNlcylyZXR1cm4hMTtpZihjPG0mJjkxPT09ZS5zcmMuY2hhckNvZGVBdChjKT8oXz1jKzEsKGM9ZS5tZC5oZWxwZXJzLnBhcnNlTGlua0xhYmVsKGUsYykpPj0wP2k9ZS5zcmMuc2xpY2UoXyxjKyspOmM9YSsxKTpjPWErMSxpfHwoaT1lLnNyYy5zbGljZShsLGEpKSwhKHA9ZS5lbnYucmVmZXJlbmNlc1tuKGkpXSkpcmV0dXJuIGUucG9zPWQsITE7Zj1wLmhyZWYsaD1wLnRpdGxlfXJldHVybiByfHwoZS5wb3M9bCxlLnBvc01heD1hLGUucHVzaChcImxpbmtfb3BlblwiLFwiYVwiLDEpLmF0dHJzPXQ9W1tcImhyZWZcIixmXV0saCYmdC5wdXNoKFtcInRpdGxlXCIsaF0pLGUubWQuaW5saW5lLnRva2VuaXplKGUpLGUucHVzaChcImxpbmtfY2xvc2VcIixcImFcIiwtMSkpLGUucG9zPWMsZS5wb3NNYXg9bSwhMH19LHtcIi4uL2NvbW1vbi91dGlsc1wiOjR9XSw0NjpbZnVuY3Rpb24oZSxyLHQpe3ZhciBuPWUoXCIuLi9jb21tb24vdXRpbHNcIikuaXNTcGFjZTtyLmV4cG9ydHM9ZnVuY3Rpb24oZSxyKXt2YXIgdCxvLHM9ZS5wb3M7aWYoMTAhPT1lLnNyYy5jaGFyQ29kZUF0KHMpKXJldHVybiExO2Zvcih0PWUucGVuZGluZy5sZW5ndGgtMSxvPWUucG9zTWF4LHJ8fCh0Pj0wJiYzMj09PWUucGVuZGluZy5jaGFyQ29kZUF0KHQpP3Q+PTEmJjMyPT09ZS5wZW5kaW5nLmNoYXJDb2RlQXQodC0xKT8oZS5wZW5kaW5nPWUucGVuZGluZy5yZXBsYWNlKC8gKyQvLFwiXCIpLGUucHVzaChcImhhcmRicmVha1wiLFwiYnJcIiwwKSk6KGUucGVuZGluZz1lLnBlbmRpbmcuc2xpY2UoMCwtMSksZS5wdXNoKFwic29mdGJyZWFrXCIsXCJiclwiLDApKTplLnB1c2goXCJzb2Z0YnJlYWtcIixcImJyXCIsMCkpLHMrKztzPG8mJm4oZS5zcmMuY2hhckNvZGVBdChzKSk7KXMrKztyZXR1cm4gZS5wb3M9cywhMH19LHtcIi4uL2NvbW1vbi91dGlsc1wiOjR9XSw0NzpbZnVuY3Rpb24oZSxyLHQpe3ZhciBuPWUoXCIuLi90b2tlblwiKSxvPWUoXCIuLi9jb21tb24vdXRpbHNcIikuaXNXaGl0ZVNwYWNlLHM9ZShcIi4uL2NvbW1vbi91dGlsc1wiKS5pc1B1bmN0Q2hhcixpPWUoXCIuLi9jb21tb24vdXRpbHNcIikuaXNNZEFzY2lpUHVuY3Q7ZnVuY3Rpb24gYShlLHIsdCxuKXt0aGlzLnNyYz1lLHRoaXMuZW52PXQsdGhpcy5tZD1yLHRoaXMudG9rZW5zPW4sdGhpcy50b2tlbnNfbWV0YT1BcnJheShuLmxlbmd0aCksdGhpcy5wb3M9MCx0aGlzLnBvc01heD10aGlzLnNyYy5sZW5ndGgsdGhpcy5sZXZlbD0wLHRoaXMucGVuZGluZz1cIlwiLHRoaXMucGVuZGluZ0xldmVsPTAsdGhpcy5jYWNoZT17fSx0aGlzLmRlbGltaXRlcnM9W10sdGhpcy5fcHJldl9kZWxpbWl0ZXJzPVtdfWEucHJvdG90eXBlLnB1c2hQZW5kaW5nPWZ1bmN0aW9uKCl7dmFyIGU9bmV3IG4oXCJ0ZXh0XCIsXCJcIiwwKTtyZXR1cm4gZS5jb250ZW50PXRoaXMucGVuZGluZyxlLmxldmVsPXRoaXMucGVuZGluZ0xldmVsLHRoaXMudG9rZW5zLnB1c2goZSksdGhpcy5wZW5kaW5nPVwiXCIsZX0sYS5wcm90b3R5cGUucHVzaD1mdW5jdGlvbihlLHIsdCl7dGhpcy5wZW5kaW5nJiZ0aGlzLnB1c2hQZW5kaW5nKCk7dmFyIG89bmV3IG4oZSxyLHQpLHM9bnVsbDtyZXR1cm4gdDwwJiYodGhpcy5sZXZlbC0tLHRoaXMuZGVsaW1pdGVycz10aGlzLl9wcmV2X2RlbGltaXRlcnMucG9wKCkpLG8ubGV2ZWw9dGhpcy5sZXZlbCx0PjAmJih0aGlzLmxldmVsKyssdGhpcy5fcHJldl9kZWxpbWl0ZXJzLnB1c2godGhpcy5kZWxpbWl0ZXJzKSx0aGlzLmRlbGltaXRlcnM9W10scz17ZGVsaW1pdGVyczp0aGlzLmRlbGltaXRlcnN9KSx0aGlzLnBlbmRpbmdMZXZlbD10aGlzLmxldmVsLHRoaXMudG9rZW5zLnB1c2gobyksdGhpcy50b2tlbnNfbWV0YS5wdXNoKHMpLG99LGEucHJvdG90eXBlLnNjYW5EZWxpbXM9ZnVuY3Rpb24oZSxyKXt2YXIgdCxuLGEsbCxjLHUscCxoLGYsZD1lLG09ITAsXz0hMCxnPXRoaXMucG9zTWF4LGs9dGhpcy5zcmMuY2hhckNvZGVBdChlKTtmb3IodD1lPjA/dGhpcy5zcmMuY2hhckNvZGVBdChlLTEpOjMyO2Q8ZyYmdGhpcy5zcmMuY2hhckNvZGVBdChkKT09PWs7KWQrKztyZXR1cm4gYT1kLWUsbj1kPGc/dGhpcy5zcmMuY2hhckNvZGVBdChkKTozMixwPWkodCl8fHMoU3RyaW5nLmZyb21DaGFyQ29kZSh0KSksZj1pKG4pfHxzKFN0cmluZy5mcm9tQ2hhckNvZGUobikpLHU9byh0KSwoaD1vKG4pKT9tPSExOmYmJih1fHxwfHwobT0hMSkpLHU/Xz0hMTpwJiYoaHx8Znx8KF89ITEpKSxyPyhsPW0sYz1fKToobD1tJiYoIV98fHApLGM9XyYmKCFtfHxmKSkse2Nhbl9vcGVuOmwsY2FuX2Nsb3NlOmMsbGVuZ3RoOmF9fSxhLnByb3RvdHlwZS5Ub2tlbj1uLHIuZXhwb3J0cz1hfSx7XCIuLi9jb21tb24vdXRpbHNcIjo0LFwiLi4vdG9rZW5cIjo1MX1dLDQ4OltmdW5jdGlvbihlLHIsdCl7ZnVuY3Rpb24gbihlLHIpe3ZhciB0LG4sbyxzLGksYT1bXSxsPXIubGVuZ3RoO2Zvcih0PTA7dDxsO3QrKykxMjY9PT0obz1yW3RdKS5tYXJrZXImJi0xIT09by5lbmQmJihzPXJbby5lbmRdLChpPWUudG9rZW5zW28udG9rZW5dKS50eXBlPVwic19vcGVuXCIsaS50YWc9XCJzXCIsaS5uZXN0aW5nPTEsaS5tYXJrdXA9XCJ+flwiLGkuY29udGVudD1cIlwiLChpPWUudG9rZW5zW3MudG9rZW5dKS50eXBlPVwic19jbG9zZVwiLGkudGFnPVwic1wiLGkubmVzdGluZz0tMSxpLm1hcmt1cD1cIn5+XCIsaS5jb250ZW50PVwiXCIsXCJ0ZXh0XCI9PT1lLnRva2Vuc1tzLnRva2VuLTFdLnR5cGUmJlwiflwiPT09ZS50b2tlbnNbcy50b2tlbi0xXS5jb250ZW50JiZhLnB1c2gocy50b2tlbi0xKSk7Zm9yKDthLmxlbmd0aDspe2Zvcih0PWEucG9wKCksbj10KzE7bjxlLnRva2Vucy5sZW5ndGgmJlwic19jbG9zZVwiPT09ZS50b2tlbnNbbl0udHlwZTspbisrO3QhPT0tLW4mJihpPWUudG9rZW5zW25dLGUudG9rZW5zW25dPWUudG9rZW5zW3RdLGUudG9rZW5zW3RdPWkpfX1yLmV4cG9ydHMudG9rZW5pemU9ZnVuY3Rpb24oZSxyKXt2YXIgdCxuLG8scyxpPWUucG9zLGE9ZS5zcmMuY2hhckNvZGVBdChpKTtpZihyKXJldHVybiExO2lmKDEyNiE9PWEpcmV0dXJuITE7aWYobj1lLnNjYW5EZWxpbXMoZS5wb3MsITApLG89bi5sZW5ndGgscz1TdHJpbmcuZnJvbUNoYXJDb2RlKGEpLG88MilyZXR1cm4hMTtmb3IobyUyJiYoZS5wdXNoKFwidGV4dFwiLFwiXCIsMCkuY29udGVudD1zLG8tLSksdD0wO3Q8bzt0Kz0yKWUucHVzaChcInRleHRcIixcIlwiLDApLmNvbnRlbnQ9cytzLGUuZGVsaW1pdGVycy5wdXNoKHttYXJrZXI6YSxsZW5ndGg6MCxqdW1wOnQsdG9rZW46ZS50b2tlbnMubGVuZ3RoLTEsZW5kOi0xLG9wZW46bi5jYW5fb3BlbixjbG9zZTpuLmNhbl9jbG9zZX0pO3JldHVybiBlLnBvcys9bi5sZW5ndGgsITB9LHIuZXhwb3J0cy5wb3N0UHJvY2Vzcz1mdW5jdGlvbihlKXt2YXIgcix0PWUudG9rZW5zX21ldGEsbz1lLnRva2Vuc19tZXRhLmxlbmd0aDtmb3IobihlLGUuZGVsaW1pdGVycykscj0wO3I8bztyKyspdFtyXSYmdFtyXS5kZWxpbWl0ZXJzJiZuKGUsdFtyXS5kZWxpbWl0ZXJzKX19LHt9XSw0OTpbZnVuY3Rpb24oZSxyLHQpe2Z1bmN0aW9uIG4oZSl7c3dpdGNoKGUpe2Nhc2UgMTA6Y2FzZSAzMzpjYXNlIDM1OmNhc2UgMzY6Y2FzZSAzNzpjYXNlIDM4OmNhc2UgNDI6Y2FzZSA0MzpjYXNlIDQ1OmNhc2UgNTg6Y2FzZSA2MDpjYXNlIDYxOmNhc2UgNjI6Y2FzZSA2NDpjYXNlIDkxOmNhc2UgOTI6Y2FzZSA5MzpjYXNlIDk0OmNhc2UgOTU6Y2FzZSA5NjpjYXNlIDEyMzpjYXNlIDEyNTpjYXNlIDEyNjpyZXR1cm4hMDtkZWZhdWx0OnJldHVybiExfX1yLmV4cG9ydHM9ZnVuY3Rpb24oZSxyKXtmb3IodmFyIHQ9ZS5wb3M7dDxlLnBvc01heCYmIW4oZS5zcmMuY2hhckNvZGVBdCh0KSk7KXQrKztyZXR1cm4gdCE9PWUucG9zJiYocnx8KGUucGVuZGluZys9ZS5zcmMuc2xpY2UoZS5wb3MsdCkpLGUucG9zPXQsITApfX0se31dLDUwOltmdW5jdGlvbihlLHIsdCl7ci5leHBvcnRzPWZ1bmN0aW9uKGUpe3ZhciByLHQsbj0wLG89ZS50b2tlbnMscz1lLnRva2Vucy5sZW5ndGg7Zm9yKHI9dD0wO3I8cztyKyspb1tyXS5uZXN0aW5nPDAmJm4tLSxvW3JdLmxldmVsPW4sb1tyXS5uZXN0aW5nPjAmJm4rKyxcInRleHRcIj09PW9bcl0udHlwZSYmcisxPHMmJlwidGV4dFwiPT09b1tyKzFdLnR5cGU/b1tyKzFdLmNvbnRlbnQ9b1tyXS5jb250ZW50K29bcisxXS5jb250ZW50OihyIT09dCYmKG9bdF09b1tyXSksdCsrKTtyIT09dCYmKG8ubGVuZ3RoPXQpfX0se31dLDUxOltmdW5jdGlvbihlLHIsdCl7ZnVuY3Rpb24gbihlLHIsdCl7dGhpcy50eXBlPWUsdGhpcy50YWc9cix0aGlzLmF0dHJzPW51bGwsdGhpcy5tYXA9bnVsbCx0aGlzLm5lc3Rpbmc9dCx0aGlzLmxldmVsPTAsdGhpcy5jaGlsZHJlbj1udWxsLHRoaXMuY29udGVudD1cIlwiLHRoaXMubWFya3VwPVwiXCIsdGhpcy5pbmZvPVwiXCIsdGhpcy5tZXRhPW51bGwsdGhpcy5ibG9jaz0hMSx0aGlzLmhpZGRlbj0hMX1uLnByb3RvdHlwZS5hdHRySW5kZXg9ZnVuY3Rpb24oZSl7dmFyIHIsdCxuO2lmKCF0aGlzLmF0dHJzKXJldHVybi0xO2ZvcihyPXRoaXMuYXR0cnMsdD0wLG49ci5sZW5ndGg7dDxuO3QrKylpZihyW3RdWzBdPT09ZSlyZXR1cm4gdDtyZXR1cm4tMX0sbi5wcm90b3R5cGUuYXR0clB1c2g9ZnVuY3Rpb24oZSl7dGhpcy5hdHRycz90aGlzLmF0dHJzLnB1c2goZSk6dGhpcy5hdHRycz1bZV19LG4ucHJvdG90eXBlLmF0dHJTZXQ9ZnVuY3Rpb24oZSxyKXt2YXIgdD10aGlzLmF0dHJJbmRleChlKSxuPVtlLHJdO3Q8MD90aGlzLmF0dHJQdXNoKG4pOnRoaXMuYXR0cnNbdF09bn0sbi5wcm90b3R5cGUuYXR0ckdldD1mdW5jdGlvbihlKXt2YXIgcj10aGlzLmF0dHJJbmRleChlKSx0PW51bGw7cmV0dXJuIHI+PTAmJih0PXRoaXMuYXR0cnNbcl1bMV0pLHR9LG4ucHJvdG90eXBlLmF0dHJKb2luPWZ1bmN0aW9uKGUscil7dmFyIHQ9dGhpcy5hdHRySW5kZXgoZSk7dDwwP3RoaXMuYXR0clB1c2goW2Uscl0pOnRoaXMuYXR0cnNbdF1bMV09dGhpcy5hdHRyc1t0XVsxXStcIiBcIityfSxyLmV4cG9ydHM9bn0se31dLDUyOltmdW5jdGlvbihlLHIsdCl7ci5leHBvcnRzPXtBYWN1dGU6XCLDgVwiLGFhY3V0ZTpcIsOhXCIsQWJyZXZlOlwixIJcIixhYnJldmU6XCLEg1wiLGFjOlwi4oi+XCIsYWNkOlwi4oi/XCIsYWNFOlwi4oi+zLNcIixBY2lyYzpcIsOCXCIsYWNpcmM6XCLDolwiLGFjdXRlOlwiwrRcIixBY3k6XCLQkFwiLGFjeTpcItCwXCIsQUVsaWc6XCLDhlwiLGFlbGlnOlwiw6ZcIixhZjpcIuKBoVwiLEFmcjpcIvCdlIRcIixhZnI6XCLwnZSeXCIsQWdyYXZlOlwiw4BcIixhZ3JhdmU6XCLDoFwiLGFsZWZzeW06XCLihLVcIixhbGVwaDpcIuKEtVwiLEFscGhhOlwizpFcIixhbHBoYTpcIs6xXCIsQW1hY3I6XCLEgFwiLGFtYWNyOlwixIFcIixhbWFsZzpcIuKov1wiLGFtcDpcIiZcIixBTVA6XCImXCIsYW5kYW5kOlwi4qmVXCIsQW5kOlwi4qmTXCIsYW5kOlwi4oinXCIsYW5kZDpcIuKpnFwiLGFuZHNsb3BlOlwi4qmYXCIsYW5kdjpcIuKpmlwiLGFuZzpcIuKIoFwiLGFuZ2U6XCLipqRcIixhbmdsZTpcIuKIoFwiLGFuZ21zZGFhOlwi4qaoXCIsYW5nbXNkYWI6XCLipqlcIixhbmdtc2RhYzpcIuKmqlwiLGFuZ21zZGFkOlwi4qarXCIsYW5nbXNkYWU6XCLipqxcIixhbmdtc2RhZjpcIuKmrVwiLGFuZ21zZGFnOlwi4qauXCIsYW5nbXNkYWg6XCLipq9cIixhbmdtc2Q6XCLiiKFcIixhbmdydDpcIuKIn1wiLGFuZ3J0dmI6XCLiir5cIixhbmdydHZiZDpcIuKmnVwiLGFuZ3NwaDpcIuKIolwiLGFuZ3N0Olwiw4VcIixhbmd6YXJyOlwi4o28XCIsQW9nb246XCLEhFwiLGFvZ29uOlwixIVcIixBb3BmOlwi8J2UuFwiLGFvcGY6XCLwnZWSXCIsYXBhY2lyOlwi4qmvXCIsYXA6XCLiiYhcIixhcEU6XCLiqbBcIixhcGU6XCLiiYpcIixhcGlkOlwi4omLXCIsYXBvczpcIidcIixBcHBseUZ1bmN0aW9uOlwi4oGhXCIsYXBwcm94Olwi4omIXCIsYXBwcm94ZXE6XCLiiYpcIixBcmluZzpcIsOFXCIsYXJpbmc6XCLDpVwiLEFzY3I6XCLwnZKcXCIsYXNjcjpcIvCdkrZcIixBc3NpZ246XCLiiZRcIixhc3Q6XCIqXCIsYXN5bXA6XCLiiYhcIixhc3ltcGVxOlwi4omNXCIsQXRpbGRlOlwiw4NcIixhdGlsZGU6XCLDo1wiLEF1bWw6XCLDhFwiLGF1bWw6XCLDpFwiLGF3Y29uaW50Olwi4oizXCIsYXdpbnQ6XCLiqJFcIixiYWNrY29uZzpcIuKJjFwiLGJhY2tlcHNpbG9uOlwiz7ZcIixiYWNrcHJpbWU6XCLigLVcIixiYWNrc2ltOlwi4oi9XCIsYmFja3NpbWVxOlwi4ouNXCIsQmFja3NsYXNoOlwi4oiWXCIsQmFydjpcIuKrp1wiLGJhcnZlZTpcIuKKvVwiLGJhcndlZDpcIuKMhVwiLEJhcndlZDpcIuKMhlwiLGJhcndlZGdlOlwi4oyFXCIsYmJyazpcIuKOtVwiLGJicmt0YnJrOlwi4o62XCIsYmNvbmc6XCLiiYxcIixCY3k6XCLQkVwiLGJjeTpcItCxXCIsYmRxdW86XCLigJ5cIixiZWNhdXM6XCLiiLVcIixiZWNhdXNlOlwi4oi1XCIsQmVjYXVzZTpcIuKItVwiLGJlbXB0eXY6XCLiprBcIixiZXBzaTpcIs+2XCIsYmVybm91Olwi4oSsXCIsQmVybm91bGxpczpcIuKErFwiLEJldGE6XCLOklwiLGJldGE6XCLOslwiLGJldGg6XCLihLZcIixiZXR3ZWVuOlwi4omsXCIsQmZyOlwi8J2UhVwiLGJmcjpcIvCdlJ9cIixiaWdjYXA6XCLii4JcIixiaWdjaXJjOlwi4pevXCIsYmlnY3VwOlwi4ouDXCIsYmlnb2RvdDpcIuKogFwiLGJpZ29wbHVzOlwi4qiBXCIsYmlnb3RpbWVzOlwi4qiCXCIsYmlnc3FjdXA6XCLiqIZcIixiaWdzdGFyOlwi4piFXCIsYmlndHJpYW5nbGVkb3duOlwi4pa9XCIsYmlndHJpYW5nbGV1cDpcIuKWs1wiLGJpZ3VwbHVzOlwi4qiEXCIsYmlndmVlOlwi4ouBXCIsYmlnd2VkZ2U6XCLii4BcIixia2Fyb3c6XCLipI1cIixibGFja2xvemVuZ2U6XCLip6tcIixibGFja3NxdWFyZTpcIuKWqlwiLGJsYWNrdHJpYW5nbGU6XCLilrRcIixibGFja3RyaWFuZ2xlZG93bjpcIuKWvlwiLGJsYWNrdHJpYW5nbGVsZWZ0Olwi4peCXCIsYmxhY2t0cmlhbmdsZXJpZ2h0Olwi4pa4XCIsYmxhbms6XCLikKNcIixibGsxMjpcIuKWklwiLGJsazE0Olwi4paRXCIsYmxrMzQ6XCLilpNcIixibG9jazpcIuKWiFwiLGJuZTpcIj3ig6VcIixibmVxdWl2Olwi4omh4oOlXCIsYk5vdDpcIuKrrVwiLGJub3Q6XCLijJBcIixCb3BmOlwi8J2UuVwiLGJvcGY6XCLwnZWTXCIsYm90Olwi4oqlXCIsYm90dG9tOlwi4oqlXCIsYm93dGllOlwi4ouIXCIsYm94Ym94Olwi4qeJXCIsYm94ZGw6XCLilJBcIixib3hkTDpcIuKVlVwiLGJveERsOlwi4pWWXCIsYm94REw6XCLilZdcIixib3hkcjpcIuKUjFwiLGJveGRSOlwi4pWSXCIsYm94RHI6XCLilZNcIixib3hEUjpcIuKVlFwiLGJveGg6XCLilIBcIixib3hIOlwi4pWQXCIsYm94aGQ6XCLilKxcIixib3hIZDpcIuKVpFwiLGJveGhEOlwi4pWlXCIsYm94SEQ6XCLilaZcIixib3hodTpcIuKUtFwiLGJveEh1Olwi4pWnXCIsYm94aFU6XCLilahcIixib3hIVTpcIuKVqVwiLGJveG1pbnVzOlwi4oqfXCIsYm94cGx1czpcIuKKnlwiLGJveHRpbWVzOlwi4oqgXCIsYm94dWw6XCLilJhcIixib3h1TDpcIuKVm1wiLGJveFVsOlwi4pWcXCIsYm94VUw6XCLilZ1cIixib3h1cjpcIuKUlFwiLGJveHVSOlwi4pWYXCIsYm94VXI6XCLilZlcIixib3hVUjpcIuKVmlwiLGJveHY6XCLilIJcIixib3hWOlwi4pWRXCIsYm94dmg6XCLilLxcIixib3h2SDpcIuKVqlwiLGJveFZoOlwi4pWrXCIsYm94Vkg6XCLilaxcIixib3h2bDpcIuKUpFwiLGJveHZMOlwi4pWhXCIsYm94Vmw6XCLilaJcIixib3hWTDpcIuKVo1wiLGJveHZyOlwi4pScXCIsYm94dlI6XCLilZ5cIixib3hWcjpcIuKVn1wiLGJveFZSOlwi4pWgXCIsYnByaW1lOlwi4oC1XCIsYnJldmU6XCLLmFwiLEJyZXZlOlwiy5hcIixicnZiYXI6XCLCplwiLGJzY3I6XCLwnZK3XCIsQnNjcjpcIuKErFwiLGJzZW1pOlwi4oGPXCIsYnNpbTpcIuKIvVwiLGJzaW1lOlwi4ouNXCIsYnNvbGI6XCLip4VcIixic29sOlwiXFxcXFwiLGJzb2xoc3ViOlwi4p+IXCIsYnVsbDpcIuKAolwiLGJ1bGxldDpcIuKAolwiLGJ1bXA6XCLiiY5cIixidW1wRTpcIuKqrlwiLGJ1bXBlOlwi4omPXCIsQnVtcGVxOlwi4omOXCIsYnVtcGVxOlwi4omPXCIsQ2FjdXRlOlwixIZcIixjYWN1dGU6XCLEh1wiLGNhcGFuZDpcIuKphFwiLGNhcGJyY3VwOlwi4qmJXCIsY2FwY2FwOlwi4qmLXCIsY2FwOlwi4oipXCIsQ2FwOlwi4ouSXCIsY2FwY3VwOlwi4qmHXCIsY2FwZG90Olwi4qmAXCIsQ2FwaXRhbERpZmZlcmVudGlhbEQ6XCLihYVcIixjYXBzOlwi4oip77iAXCIsY2FyZXQ6XCLigYFcIixjYXJvbjpcIsuHXCIsQ2F5bGV5czpcIuKErVwiLGNjYXBzOlwi4qmNXCIsQ2Nhcm9uOlwixIxcIixjY2Fyb246XCLEjVwiLENjZWRpbDpcIsOHXCIsY2NlZGlsOlwiw6dcIixDY2lyYzpcIsSIXCIsY2NpcmM6XCLEiVwiLENjb25pbnQ6XCLiiLBcIixjY3VwczpcIuKpjFwiLGNjdXBzc206XCLiqZBcIixDZG90OlwixIpcIixjZG90OlwixItcIixjZWRpbDpcIsK4XCIsQ2VkaWxsYTpcIsK4XCIsY2VtcHR5djpcIuKmslwiLGNlbnQ6XCLColwiLGNlbnRlcmRvdDpcIsK3XCIsQ2VudGVyRG90OlwiwrdcIixjZnI6XCLwnZSgXCIsQ2ZyOlwi4oStXCIsQ0hjeTpcItCnXCIsY2hjeTpcItGHXCIsY2hlY2s6XCLinJNcIixjaGVja21hcms6XCLinJNcIixDaGk6XCLOp1wiLGNoaTpcIs+HXCIsY2lyYzpcIsuGXCIsY2lyY2VxOlwi4omXXCIsY2lyY2xlYXJyb3dsZWZ0Olwi4oa6XCIsY2lyY2xlYXJyb3dyaWdodDpcIuKGu1wiLGNpcmNsZWRhc3Q6XCLiiptcIixjaXJjbGVkY2lyYzpcIuKKmlwiLGNpcmNsZWRkYXNoOlwi4oqdXCIsQ2lyY2xlRG90Olwi4oqZXCIsY2lyY2xlZFI6XCLCrlwiLGNpcmNsZWRTOlwi4pOIXCIsQ2lyY2xlTWludXM6XCLiipZcIixDaXJjbGVQbHVzOlwi4oqVXCIsQ2lyY2xlVGltZXM6XCLiipdcIixjaXI6XCLil4tcIixjaXJFOlwi4qeDXCIsY2lyZTpcIuKJl1wiLGNpcmZuaW50Olwi4qiQXCIsY2lybWlkOlwi4quvXCIsY2lyc2NpcjpcIuKnglwiLENsb2Nrd2lzZUNvbnRvdXJJbnRlZ3JhbDpcIuKIslwiLENsb3NlQ3VybHlEb3VibGVRdW90ZTpcIuKAnVwiLENsb3NlQ3VybHlRdW90ZTpcIuKAmVwiLGNsdWJzOlwi4pmjXCIsY2x1YnN1aXQ6XCLimaNcIixjb2xvbjpcIjpcIixDb2xvbjpcIuKIt1wiLENvbG9uZTpcIuKptFwiLGNvbG9uZTpcIuKJlFwiLGNvbG9uZXE6XCLiiZRcIixjb21tYTpcIixcIixjb21tYXQ6XCJAXCIsY29tcDpcIuKIgVwiLGNvbXBmbjpcIuKImFwiLGNvbXBsZW1lbnQ6XCLiiIFcIixjb21wbGV4ZXM6XCLihIJcIixjb25nOlwi4omFXCIsY29uZ2RvdDpcIuKprVwiLENvbmdydWVudDpcIuKJoVwiLGNvbmludDpcIuKIrlwiLENvbmludDpcIuKIr1wiLENvbnRvdXJJbnRlZ3JhbDpcIuKIrlwiLGNvcGY6XCLwnZWUXCIsQ29wZjpcIuKEglwiLGNvcHJvZDpcIuKIkFwiLENvcHJvZHVjdDpcIuKIkFwiLGNvcHk6XCLCqVwiLENPUFk6XCLCqVwiLGNvcHlzcjpcIuKEl1wiLENvdW50ZXJDbG9ja3dpc2VDb250b3VySW50ZWdyYWw6XCLiiLNcIixjcmFycjpcIuKGtVwiLGNyb3NzOlwi4pyXXCIsQ3Jvc3M6XCLiqK9cIixDc2NyOlwi8J2SnlwiLGNzY3I6XCLwnZK4XCIsY3N1YjpcIuKrj1wiLGNzdWJlOlwi4quRXCIsY3N1cDpcIuKrkFwiLGNzdXBlOlwi4quSXCIsY3Rkb3Q6XCLii69cIixjdWRhcnJsOlwi4qS4XCIsY3VkYXJycjpcIuKktVwiLGN1ZXByOlwi4oueXCIsY3Vlc2M6XCLii59cIixjdWxhcnI6XCLihrZcIixjdWxhcnJwOlwi4qS9XCIsY3VwYnJjYXA6XCLiqYhcIixjdXBjYXA6XCLiqYZcIixDdXBDYXA6XCLiiY1cIixjdXA6XCLiiKpcIixDdXA6XCLii5NcIixjdXBjdXA6XCLiqYpcIixjdXBkb3Q6XCLiio1cIixjdXBvcjpcIuKphVwiLGN1cHM6XCLiiKrvuIBcIixjdXJhcnI6XCLihrdcIixjdXJhcnJtOlwi4qS8XCIsY3VybHllcXByZWM6XCLii55cIixjdXJseWVxc3VjYzpcIuKLn1wiLGN1cmx5dmVlOlwi4ouOXCIsY3VybHl3ZWRnZTpcIuKLj1wiLGN1cnJlbjpcIsKkXCIsY3VydmVhcnJvd2xlZnQ6XCLihrZcIixjdXJ2ZWFycm93cmlnaHQ6XCLihrdcIixjdXZlZTpcIuKLjlwiLGN1d2VkOlwi4ouPXCIsY3djb25pbnQ6XCLiiLJcIixjd2ludDpcIuKIsVwiLGN5bGN0eTpcIuKMrVwiLGRhZ2dlcjpcIuKAoFwiLERhZ2dlcjpcIuKAoVwiLGRhbGV0aDpcIuKEuFwiLGRhcnI6XCLihpNcIixEYXJyOlwi4oahXCIsZEFycjpcIuKHk1wiLGRhc2g6XCLigJBcIixEYXNodjpcIuKrpFwiLGRhc2h2Olwi4oqjXCIsZGJrYXJvdzpcIuKkj1wiLGRibGFjOlwiy51cIixEY2Fyb246XCLEjlwiLGRjYXJvbjpcIsSPXCIsRGN5Olwi0JRcIixkY3k6XCLQtFwiLGRkYWdnZXI6XCLigKFcIixkZGFycjpcIuKHilwiLEREOlwi4oWFXCIsZGQ6XCLihYZcIixERG90cmFoZDpcIuKkkVwiLGRkb3RzZXE6XCLiqbdcIixkZWc6XCLCsFwiLERlbDpcIuKIh1wiLERlbHRhOlwizpRcIixkZWx0YTpcIs60XCIsZGVtcHR5djpcIuKmsVwiLGRmaXNodDpcIuKlv1wiLERmcjpcIvCdlIdcIixkZnI6XCLwnZShXCIsZEhhcjpcIuKlpVwiLGRoYXJsOlwi4oeDXCIsZGhhcnI6XCLih4JcIixEaWFjcml0aWNhbEFjdXRlOlwiwrRcIixEaWFjcml0aWNhbERvdDpcIsuZXCIsRGlhY3JpdGljYWxEb3VibGVBY3V0ZTpcIsudXCIsRGlhY3JpdGljYWxHcmF2ZTpcImBcIixEaWFjcml0aWNhbFRpbGRlOlwiy5xcIixkaWFtOlwi4ouEXCIsZGlhbW9uZDpcIuKLhFwiLERpYW1vbmQ6XCLii4RcIixkaWFtb25kc3VpdDpcIuKZplwiLGRpYW1zOlwi4pmmXCIsZGllOlwiwqhcIixEaWZmZXJlbnRpYWxEOlwi4oWGXCIsZGlnYW1tYTpcIs+dXCIsZGlzaW46XCLii7JcIixkaXY6XCLDt1wiLGRpdmlkZTpcIsO3XCIsZGl2aWRlb250aW1lczpcIuKLh1wiLGRpdm9ueDpcIuKLh1wiLERKY3k6XCLQglwiLGRqY3k6XCLRklwiLGRsY29ybjpcIuKMnlwiLGRsY3JvcDpcIuKMjVwiLGRvbGxhcjpcIiRcIixEb3BmOlwi8J2Uu1wiLGRvcGY6XCLwnZWVXCIsRG90OlwiwqhcIixkb3Q6XCLLmVwiLERvdERvdDpcIuKDnFwiLGRvdGVxOlwi4omQXCIsZG90ZXFkb3Q6XCLiiZFcIixEb3RFcXVhbDpcIuKJkFwiLGRvdG1pbnVzOlwi4oi4XCIsZG90cGx1czpcIuKIlFwiLGRvdHNxdWFyZTpcIuKKoVwiLGRvdWJsZWJhcndlZGdlOlwi4oyGXCIsRG91YmxlQ29udG91ckludGVncmFsOlwi4oivXCIsRG91YmxlRG90OlwiwqhcIixEb3VibGVEb3duQXJyb3c6XCLih5NcIixEb3VibGVMZWZ0QXJyb3c6XCLih5BcIixEb3VibGVMZWZ0UmlnaHRBcnJvdzpcIuKHlFwiLERvdWJsZUxlZnRUZWU6XCLiq6RcIixEb3VibGVMb25nTGVmdEFycm93Olwi4p+4XCIsRG91YmxlTG9uZ0xlZnRSaWdodEFycm93Olwi4p+6XCIsRG91YmxlTG9uZ1JpZ2h0QXJyb3c6XCLin7lcIixEb3VibGVSaWdodEFycm93Olwi4oeSXCIsRG91YmxlUmlnaHRUZWU6XCLiiqhcIixEb3VibGVVcEFycm93Olwi4oeRXCIsRG91YmxlVXBEb3duQXJyb3c6XCLih5VcIixEb3VibGVWZXJ0aWNhbEJhcjpcIuKIpVwiLERvd25BcnJvd0JhcjpcIuKkk1wiLGRvd25hcnJvdzpcIuKGk1wiLERvd25BcnJvdzpcIuKGk1wiLERvd25hcnJvdzpcIuKHk1wiLERvd25BcnJvd1VwQXJyb3c6XCLih7VcIixEb3duQnJldmU6XCLMkVwiLGRvd25kb3duYXJyb3dzOlwi4oeKXCIsZG93bmhhcnBvb25sZWZ0Olwi4oeDXCIsZG93bmhhcnBvb25yaWdodDpcIuKHglwiLERvd25MZWZ0UmlnaHRWZWN0b3I6XCLipZBcIixEb3duTGVmdFRlZVZlY3RvcjpcIuKlnlwiLERvd25MZWZ0VmVjdG9yQmFyOlwi4qWWXCIsRG93bkxlZnRWZWN0b3I6XCLihr1cIixEb3duUmlnaHRUZWVWZWN0b3I6XCLipZ9cIixEb3duUmlnaHRWZWN0b3JCYXI6XCLipZdcIixEb3duUmlnaHRWZWN0b3I6XCLih4FcIixEb3duVGVlQXJyb3c6XCLihqdcIixEb3duVGVlOlwi4oqkXCIsZHJia2Fyb3c6XCLipJBcIixkcmNvcm46XCLijJ9cIixkcmNyb3A6XCLijIxcIixEc2NyOlwi8J2Sn1wiLGRzY3I6XCLwnZK5XCIsRFNjeTpcItCFXCIsZHNjeTpcItGVXCIsZHNvbDpcIuKntlwiLERzdHJvazpcIsSQXCIsZHN0cm9rOlwixJFcIixkdGRvdDpcIuKLsVwiLGR0cmk6XCLilr9cIixkdHJpZjpcIuKWvlwiLGR1YXJyOlwi4oe1XCIsZHVoYXI6XCLipa9cIixkd2FuZ2xlOlwi4qamXCIsRFpjeTpcItCPXCIsZHpjeTpcItGfXCIsZHppZ3JhcnI6XCLin79cIixFYWN1dGU6XCLDiVwiLGVhY3V0ZTpcIsOpXCIsZWFzdGVyOlwi4qmuXCIsRWNhcm9uOlwixJpcIixlY2Fyb246XCLEm1wiLEVjaXJjOlwiw4pcIixlY2lyYzpcIsOqXCIsZWNpcjpcIuKJllwiLGVjb2xvbjpcIuKJlVwiLEVjeTpcItCtXCIsZWN5Olwi0Y1cIixlRERvdDpcIuKpt1wiLEVkb3Q6XCLEllwiLGVkb3Q6XCLEl1wiLGVEb3Q6XCLiiZFcIixlZTpcIuKFh1wiLGVmRG90Olwi4omSXCIsRWZyOlwi8J2UiFwiLGVmcjpcIvCdlKJcIixlZzpcIuKqmlwiLEVncmF2ZTpcIsOIXCIsZWdyYXZlOlwiw6hcIixlZ3M6XCLiqpZcIixlZ3Nkb3Q6XCLiqphcIixlbDpcIuKqmVwiLEVsZW1lbnQ6XCLiiIhcIixlbGludGVyczpcIuKPp1wiLGVsbDpcIuKEk1wiLGVsczpcIuKqlVwiLGVsc2RvdDpcIuKql1wiLEVtYWNyOlwixJJcIixlbWFjcjpcIsSTXCIsZW1wdHk6XCLiiIVcIixlbXB0eXNldDpcIuKIhVwiLEVtcHR5U21hbGxTcXVhcmU6XCLil7tcIixlbXB0eXY6XCLiiIVcIixFbXB0eVZlcnlTbWFsbFNxdWFyZTpcIuKWq1wiLGVtc3AxMzpcIuKAhFwiLGVtc3AxNDpcIuKAhVwiLGVtc3A6XCLigINcIixFTkc6XCLFilwiLGVuZzpcIsWLXCIsZW5zcDpcIuKAglwiLEVvZ29uOlwixJhcIixlb2dvbjpcIsSZXCIsRW9wZjpcIvCdlLxcIixlb3BmOlwi8J2VllwiLGVwYXI6XCLii5VcIixlcGFyc2w6XCLip6NcIixlcGx1czpcIuKpsVwiLGVwc2k6XCLOtVwiLEVwc2lsb246XCLOlVwiLGVwc2lsb246XCLOtVwiLGVwc2l2Olwiz7VcIixlcWNpcmM6XCLiiZZcIixlcWNvbG9uOlwi4omVXCIsZXFzaW06XCLiiYJcIixlcXNsYW50Z3RyOlwi4qqWXCIsZXFzbGFudGxlc3M6XCLiqpVcIixFcXVhbDpcIuKptVwiLGVxdWFsczpcIj1cIixFcXVhbFRpbGRlOlwi4omCXCIsZXF1ZXN0Olwi4omfXCIsRXF1aWxpYnJpdW06XCLih4xcIixlcXVpdjpcIuKJoVwiLGVxdWl2REQ6XCLiqbhcIixlcXZwYXJzbDpcIuKnpVwiLGVyYXJyOlwi4qWxXCIsZXJEb3Q6XCLiiZNcIixlc2NyOlwi4oSvXCIsRXNjcjpcIuKEsFwiLGVzZG90Olwi4omQXCIsRXNpbTpcIuKps1wiLGVzaW06XCLiiYJcIixFdGE6XCLOl1wiLGV0YTpcIs63XCIsRVRIOlwiw5BcIixldGg6XCLDsFwiLEV1bWw6XCLDi1wiLGV1bWw6XCLDq1wiLGV1cm86XCLigqxcIixleGNsOlwiIVwiLGV4aXN0Olwi4oiDXCIsRXhpc3RzOlwi4oiDXCIsZXhwZWN0YXRpb246XCLihLBcIixleHBvbmVudGlhbGU6XCLihYdcIixFeHBvbmVudGlhbEU6XCLihYdcIixmYWxsaW5nZG90c2VxOlwi4omSXCIsRmN5Olwi0KRcIixmY3k6XCLRhFwiLGZlbWFsZTpcIuKZgFwiLGZmaWxpZzpcIu+sg1wiLGZmbGlnOlwi76yAXCIsZmZsbGlnOlwi76yEXCIsRmZyOlwi8J2UiVwiLGZmcjpcIvCdlKNcIixmaWxpZzpcIu+sgVwiLEZpbGxlZFNtYWxsU3F1YXJlOlwi4pe8XCIsRmlsbGVkVmVyeVNtYWxsU3F1YXJlOlwi4paqXCIsZmpsaWc6XCJmalwiLGZsYXQ6XCLima1cIixmbGxpZzpcIu+sglwiLGZsdG5zOlwi4paxXCIsZm5vZjpcIsaSXCIsRm9wZjpcIvCdlL1cIixmb3BmOlwi8J2Vl1wiLGZvcmFsbDpcIuKIgFwiLEZvckFsbDpcIuKIgFwiLGZvcms6XCLii5RcIixmb3JrdjpcIuKrmVwiLEZvdXJpZXJ0cmY6XCLihLFcIixmcGFydGludDpcIuKojVwiLGZyYWMxMjpcIsK9XCIsZnJhYzEzOlwi4oWTXCIsZnJhYzE0OlwiwrxcIixmcmFjMTU6XCLihZVcIixmcmFjMTY6XCLihZlcIixmcmFjMTg6XCLihZtcIixmcmFjMjM6XCLihZRcIixmcmFjMjU6XCLihZZcIixmcmFjMzQ6XCLCvlwiLGZyYWMzNTpcIuKFl1wiLGZyYWMzODpcIuKFnFwiLGZyYWM0NTpcIuKFmFwiLGZyYWM1NjpcIuKFmlwiLGZyYWM1ODpcIuKFnVwiLGZyYWM3ODpcIuKFnlwiLGZyYXNsOlwi4oGEXCIsZnJvd246XCLijKJcIixmc2NyOlwi8J2Su1wiLEZzY3I6XCLihLFcIixnYWN1dGU6XCLHtVwiLEdhbW1hOlwizpNcIixnYW1tYTpcIs6zXCIsR2FtbWFkOlwiz5xcIixnYW1tYWQ6XCLPnVwiLGdhcDpcIuKqhlwiLEdicmV2ZTpcIsSeXCIsZ2JyZXZlOlwixJ9cIixHY2VkaWw6XCLEolwiLEdjaXJjOlwixJxcIixnY2lyYzpcIsSdXCIsR2N5Olwi0JNcIixnY3k6XCLQs1wiLEdkb3Q6XCLEoFwiLGdkb3Q6XCLEoVwiLGdlOlwi4omlXCIsZ0U6XCLiiadcIixnRWw6XCLiqoxcIixnZWw6XCLii5tcIixnZXE6XCLiiaVcIixnZXFxOlwi4omnXCIsZ2Vxc2xhbnQ6XCLiqb5cIixnZXNjYzpcIuKqqVwiLGdlczpcIuKpvlwiLGdlc2RvdDpcIuKqgFwiLGdlc2RvdG86XCLiqoJcIixnZXNkb3RvbDpcIuKqhFwiLGdlc2w6XCLii5vvuIBcIixnZXNsZXM6XCLiqpRcIixHZnI6XCLwnZSKXCIsZ2ZyOlwi8J2UpFwiLGdnOlwi4omrXCIsR2c6XCLii5lcIixnZ2c6XCLii5lcIixnaW1lbDpcIuKEt1wiLEdKY3k6XCLQg1wiLGdqY3k6XCLRk1wiLGdsYTpcIuKqpVwiLGdsOlwi4om3XCIsZ2xFOlwi4qqSXCIsZ2xqOlwi4qqkXCIsZ25hcDpcIuKqilwiLGduYXBwcm94Olwi4qqKXCIsZ25lOlwi4qqIXCIsZ25FOlwi4ompXCIsZ25lcTpcIuKqiFwiLGduZXFxOlwi4ompXCIsZ25zaW06XCLii6dcIixHb3BmOlwi8J2UvlwiLGdvcGY6XCLwnZWYXCIsZ3JhdmU6XCJgXCIsR3JlYXRlckVxdWFsOlwi4omlXCIsR3JlYXRlckVxdWFsTGVzczpcIuKLm1wiLEdyZWF0ZXJGdWxsRXF1YWw6XCLiiadcIixHcmVhdGVyR3JlYXRlcjpcIuKqolwiLEdyZWF0ZXJMZXNzOlwi4om3XCIsR3JlYXRlclNsYW50RXF1YWw6XCLiqb5cIixHcmVhdGVyVGlsZGU6XCLiibNcIixHc2NyOlwi8J2SolwiLGdzY3I6XCLihIpcIixnc2ltOlwi4omzXCIsZ3NpbWU6XCLiqo5cIixnc2ltbDpcIuKqkFwiLGd0Y2M6XCLiqqdcIixndGNpcjpcIuKpulwiLGd0OlwiPlwiLEdUOlwiPlwiLEd0Olwi4omrXCIsZ3Rkb3Q6XCLii5dcIixndGxQYXI6XCLippVcIixndHF1ZXN0Olwi4qm8XCIsZ3RyYXBwcm94Olwi4qqGXCIsZ3RyYXJyOlwi4qW4XCIsZ3RyZG90Olwi4ouXXCIsZ3RyZXFsZXNzOlwi4oubXCIsZ3RyZXFxbGVzczpcIuKqjFwiLGd0cmxlc3M6XCLiibdcIixndHJzaW06XCLiibNcIixndmVydG5lcXE6XCLiianvuIBcIixndm5FOlwi4omp77iAXCIsSGFjZWs6XCLLh1wiLGhhaXJzcDpcIuKAilwiLGhhbGY6XCLCvVwiLGhhbWlsdDpcIuKEi1wiLEhBUkRjeTpcItCqXCIsaGFyZGN5Olwi0YpcIixoYXJyY2lyOlwi4qWIXCIsaGFycjpcIuKGlFwiLGhBcnI6XCLih5RcIixoYXJydzpcIuKGrVwiLEhhdDpcIl5cIixoYmFyOlwi4oSPXCIsSGNpcmM6XCLEpFwiLGhjaXJjOlwixKVcIixoZWFydHM6XCLimaVcIixoZWFydHN1aXQ6XCLimaVcIixoZWxsaXA6XCLigKZcIixoZXJjb246XCLiirlcIixoZnI6XCLwnZSlXCIsSGZyOlwi4oSMXCIsSGlsYmVydFNwYWNlOlwi4oSLXCIsaGtzZWFyb3c6XCLipKVcIixoa3N3YXJvdzpcIuKkplwiLGhvYXJyOlwi4oe/XCIsaG9tdGh0Olwi4oi7XCIsaG9va2xlZnRhcnJvdzpcIuKGqVwiLGhvb2tyaWdodGFycm93Olwi4oaqXCIsaG9wZjpcIvCdlZlcIixIb3BmOlwi4oSNXCIsaG9yYmFyOlwi4oCVXCIsSG9yaXpvbnRhbExpbmU6XCLilIBcIixoc2NyOlwi8J2SvVwiLEhzY3I6XCLihItcIixoc2xhc2g6XCLihI9cIixIc3Ryb2s6XCLEplwiLGhzdHJvazpcIsSnXCIsSHVtcERvd25IdW1wOlwi4omOXCIsSHVtcEVxdWFsOlwi4omPXCIsaHlidWxsOlwi4oGDXCIsaHlwaGVuOlwi4oCQXCIsSWFjdXRlOlwiw41cIixpYWN1dGU6XCLDrVwiLGljOlwi4oGjXCIsSWNpcmM6XCLDjlwiLGljaXJjOlwiw65cIixJY3k6XCLQmFwiLGljeTpcItC4XCIsSWRvdDpcIsSwXCIsSUVjeTpcItCVXCIsaWVjeTpcItC1XCIsaWV4Y2w6XCLCoVwiLGlmZjpcIuKHlFwiLGlmcjpcIvCdlKZcIixJZnI6XCLihJFcIixJZ3JhdmU6XCLDjFwiLGlncmF2ZTpcIsOsXCIsaWk6XCLihYhcIixpaWlpbnQ6XCLiqIxcIixpaWludDpcIuKIrVwiLGlpbmZpbjpcIuKnnFwiLGlpb3RhOlwi4oSpXCIsSUpsaWc6XCLEslwiLGlqbGlnOlwixLNcIixJbWFjcjpcIsSqXCIsaW1hY3I6XCLEq1wiLGltYWdlOlwi4oSRXCIsSW1hZ2luYXJ5STpcIuKFiFwiLGltYWdsaW5lOlwi4oSQXCIsaW1hZ3BhcnQ6XCLihJFcIixpbWF0aDpcIsSxXCIsSW06XCLihJFcIixpbW9mOlwi4oq3XCIsaW1wZWQ6XCLGtVwiLEltcGxpZXM6XCLih5JcIixpbmNhcmU6XCLihIVcIixpbjpcIuKIiFwiLGluZmluOlwi4oieXCIsaW5maW50aWU6XCLip51cIixpbm9kb3Q6XCLEsVwiLGludGNhbDpcIuKKulwiLGludDpcIuKIq1wiLEludDpcIuKIrFwiLGludGVnZXJzOlwi4oSkXCIsSW50ZWdyYWw6XCLiiKtcIixpbnRlcmNhbDpcIuKKulwiLEludGVyc2VjdGlvbjpcIuKLglwiLGludGxhcmhrOlwi4qiXXCIsaW50cHJvZDpcIuKovFwiLEludmlzaWJsZUNvbW1hOlwi4oGjXCIsSW52aXNpYmxlVGltZXM6XCLigaJcIixJT2N5Olwi0IFcIixpb2N5Olwi0ZFcIixJb2dvbjpcIsSuXCIsaW9nb246XCLEr1wiLElvcGY6XCLwnZWAXCIsaW9wZjpcIvCdlZpcIixJb3RhOlwizplcIixpb3RhOlwizrlcIixpcHJvZDpcIuKovFwiLGlxdWVzdDpcIsK/XCIsaXNjcjpcIvCdkr5cIixJc2NyOlwi4oSQXCIsaXNpbjpcIuKIiFwiLGlzaW5kb3Q6XCLii7VcIixpc2luRTpcIuKLuVwiLGlzaW5zOlwi4ou0XCIsaXNpbnN2Olwi4ouzXCIsaXNpbnY6XCLiiIhcIixpdDpcIuKBolwiLEl0aWxkZTpcIsSoXCIsaXRpbGRlOlwixKlcIixJdWtjeTpcItCGXCIsaXVrY3k6XCLRllwiLEl1bWw6XCLDj1wiLGl1bWw6XCLDr1wiLEpjaXJjOlwixLRcIixqY2lyYzpcIsS1XCIsSmN5Olwi0JlcIixqY3k6XCLQuVwiLEpmcjpcIvCdlI1cIixqZnI6XCLwnZSnXCIsam1hdGg6XCLIt1wiLEpvcGY6XCLwnZWBXCIsam9wZjpcIvCdlZtcIixKc2NyOlwi8J2SpVwiLGpzY3I6XCLwnZK/XCIsSnNlcmN5Olwi0IhcIixqc2VyY3k6XCLRmFwiLEp1a2N5Olwi0IRcIixqdWtjeTpcItGUXCIsS2FwcGE6XCLOmlwiLGthcHBhOlwizrpcIixrYXBwYXY6XCLPsFwiLEtjZWRpbDpcIsS2XCIsa2NlZGlsOlwixLdcIixLY3k6XCLQmlwiLGtjeTpcItC6XCIsS2ZyOlwi8J2UjlwiLGtmcjpcIvCdlKhcIixrZ3JlZW46XCLEuFwiLEtIY3k6XCLQpVwiLGtoY3k6XCLRhVwiLEtKY3k6XCLQjFwiLGtqY3k6XCLRnFwiLEtvcGY6XCLwnZWCXCIsa29wZjpcIvCdlZxcIixLc2NyOlwi8J2SplwiLGtzY3I6XCLwnZOAXCIsbEFhcnI6XCLih5pcIixMYWN1dGU6XCLEuVwiLGxhY3V0ZTpcIsS6XCIsbGFlbXB0eXY6XCLiprRcIixsYWdyYW46XCLihJJcIixMYW1iZGE6XCLOm1wiLGxhbWJkYTpcIs67XCIsbGFuZzpcIuKfqFwiLExhbmc6XCLin6pcIixsYW5nZDpcIuKmkVwiLGxhbmdsZTpcIuKfqFwiLGxhcDpcIuKqhVwiLExhcGxhY2V0cmY6XCLihJJcIixsYXF1bzpcIsKrXCIsbGFycmI6XCLih6RcIixsYXJyYmZzOlwi4qSfXCIsbGFycjpcIuKGkFwiLExhcnI6XCLihp5cIixsQXJyOlwi4oeQXCIsbGFycmZzOlwi4qSdXCIsbGFycmhrOlwi4oapXCIsbGFycmxwOlwi4oarXCIsbGFycnBsOlwi4qS5XCIsbGFycnNpbTpcIuKls1wiLGxhcnJ0bDpcIuKGolwiLGxhdGFpbDpcIuKkmVwiLGxBdGFpbDpcIuKkm1wiLGxhdDpcIuKqq1wiLGxhdGU6XCLiqq1cIixsYXRlczpcIuKqre+4gFwiLGxiYXJyOlwi4qSMXCIsbEJhcnI6XCLipI5cIixsYmJyazpcIuKdslwiLGxicmFjZTpcIntcIixsYnJhY2s6XCJbXCIsbGJya2U6XCLipotcIixsYnJrc2xkOlwi4qaPXCIsbGJya3NsdTpcIuKmjVwiLExjYXJvbjpcIsS9XCIsbGNhcm9uOlwixL5cIixMY2VkaWw6XCLEu1wiLGxjZWRpbDpcIsS8XCIsbGNlaWw6XCLijIhcIixsY3ViOlwie1wiLExjeTpcItCbXCIsbGN5Olwi0LtcIixsZGNhOlwi4qS2XCIsbGRxdW86XCLigJxcIixsZHF1b3I6XCLigJ5cIixsZHJkaGFyOlwi4qWnXCIsbGRydXNoYXI6XCLipYtcIixsZHNoOlwi4oayXCIsbGU6XCLiiaRcIixsRTpcIuKJplwiLExlZnRBbmdsZUJyYWNrZXQ6XCLin6hcIixMZWZ0QXJyb3dCYXI6XCLih6RcIixsZWZ0YXJyb3c6XCLihpBcIixMZWZ0QXJyb3c6XCLihpBcIixMZWZ0YXJyb3c6XCLih5BcIixMZWZ0QXJyb3dSaWdodEFycm93Olwi4oeGXCIsbGVmdGFycm93dGFpbDpcIuKGolwiLExlZnRDZWlsaW5nOlwi4oyIXCIsTGVmdERvdWJsZUJyYWNrZXQ6XCLin6ZcIixMZWZ0RG93blRlZVZlY3RvcjpcIuKloVwiLExlZnREb3duVmVjdG9yQmFyOlwi4qWZXCIsTGVmdERvd25WZWN0b3I6XCLih4NcIixMZWZ0Rmxvb3I6XCLijIpcIixsZWZ0aGFycG9vbmRvd246XCLihr1cIixsZWZ0aGFycG9vbnVwOlwi4oa8XCIsbGVmdGxlZnRhcnJvd3M6XCLih4dcIixsZWZ0cmlnaHRhcnJvdzpcIuKGlFwiLExlZnRSaWdodEFycm93Olwi4oaUXCIsTGVmdHJpZ2h0YXJyb3c6XCLih5RcIixsZWZ0cmlnaHRhcnJvd3M6XCLih4ZcIixsZWZ0cmlnaHRoYXJwb29uczpcIuKHi1wiLGxlZnRyaWdodHNxdWlnYXJyb3c6XCLihq1cIixMZWZ0UmlnaHRWZWN0b3I6XCLipY5cIixMZWZ0VGVlQXJyb3c6XCLihqRcIixMZWZ0VGVlOlwi4oqjXCIsTGVmdFRlZVZlY3RvcjpcIuKlmlwiLGxlZnR0aHJlZXRpbWVzOlwi4ouLXCIsTGVmdFRyaWFuZ2xlQmFyOlwi4qePXCIsTGVmdFRyaWFuZ2xlOlwi4oqyXCIsTGVmdFRyaWFuZ2xlRXF1YWw6XCLiirRcIixMZWZ0VXBEb3duVmVjdG9yOlwi4qWRXCIsTGVmdFVwVGVlVmVjdG9yOlwi4qWgXCIsTGVmdFVwVmVjdG9yQmFyOlwi4qWYXCIsTGVmdFVwVmVjdG9yOlwi4oa/XCIsTGVmdFZlY3RvckJhcjpcIuKlklwiLExlZnRWZWN0b3I6XCLihrxcIixsRWc6XCLiqotcIixsZWc6XCLii5pcIixsZXE6XCLiiaRcIixsZXFxOlwi4ommXCIsbGVxc2xhbnQ6XCLiqb1cIixsZXNjYzpcIuKqqFwiLGxlczpcIuKpvVwiLGxlc2RvdDpcIuKpv1wiLGxlc2RvdG86XCLiqoFcIixsZXNkb3RvcjpcIuKqg1wiLGxlc2c6XCLii5rvuIBcIixsZXNnZXM6XCLiqpNcIixsZXNzYXBwcm94Olwi4qqFXCIsbGVzc2RvdDpcIuKLllwiLGxlc3NlcWd0cjpcIuKLmlwiLGxlc3NlcXFndHI6XCLiqotcIixMZXNzRXF1YWxHcmVhdGVyOlwi4ouaXCIsTGVzc0Z1bGxFcXVhbDpcIuKJplwiLExlc3NHcmVhdGVyOlwi4om2XCIsbGVzc2d0cjpcIuKJtlwiLExlc3NMZXNzOlwi4qqhXCIsbGVzc3NpbTpcIuKJslwiLExlc3NTbGFudEVxdWFsOlwi4qm9XCIsTGVzc1RpbGRlOlwi4omyXCIsbGZpc2h0Olwi4qW8XCIsbGZsb29yOlwi4oyKXCIsTGZyOlwi8J2Uj1wiLGxmcjpcIvCdlKlcIixsZzpcIuKJtlwiLGxnRTpcIuKqkVwiLGxIYXI6XCLipaJcIixsaGFyZDpcIuKGvVwiLGxoYXJ1Olwi4oa8XCIsbGhhcnVsOlwi4qWqXCIsbGhibGs6XCLiloRcIixMSmN5Olwi0IlcIixsamN5Olwi0ZlcIixsbGFycjpcIuKHh1wiLGxsOlwi4omqXCIsTGw6XCLii5hcIixsbGNvcm5lcjpcIuKMnlwiLExsZWZ0YXJyb3c6XCLih5pcIixsbGhhcmQ6XCLipatcIixsbHRyaTpcIuKXulwiLExtaWRvdDpcIsS/XCIsbG1pZG90OlwixYBcIixsbW91c3RhY2hlOlwi4o6wXCIsbG1vdXN0Olwi4o6wXCIsbG5hcDpcIuKqiVwiLGxuYXBwcm94Olwi4qqJXCIsbG5lOlwi4qqHXCIsbG5FOlwi4omoXCIsbG5lcTpcIuKqh1wiLGxuZXFxOlwi4omoXCIsbG5zaW06XCLii6ZcIixsb2FuZzpcIuKfrFwiLGxvYXJyOlwi4oe9XCIsbG9icms6XCLin6ZcIixsb25nbGVmdGFycm93Olwi4p+1XCIsTG9uZ0xlZnRBcnJvdzpcIuKftVwiLExvbmdsZWZ0YXJyb3c6XCLin7hcIixsb25nbGVmdHJpZ2h0YXJyb3c6XCLin7dcIixMb25nTGVmdFJpZ2h0QXJyb3c6XCLin7dcIixMb25nbGVmdHJpZ2h0YXJyb3c6XCLin7pcIixsb25nbWFwc3RvOlwi4p+8XCIsbG9uZ3JpZ2h0YXJyb3c6XCLin7ZcIixMb25nUmlnaHRBcnJvdzpcIuKftlwiLExvbmdyaWdodGFycm93Olwi4p+5XCIsbG9vcGFycm93bGVmdDpcIuKGq1wiLGxvb3BhcnJvd3JpZ2h0Olwi4oasXCIsbG9wYXI6XCLipoVcIixMb3BmOlwi8J2Vg1wiLGxvcGY6XCLwnZWdXCIsbG9wbHVzOlwi4qitXCIsbG90aW1lczpcIuKotFwiLGxvd2FzdDpcIuKIl1wiLGxvd2JhcjpcIl9cIixMb3dlckxlZnRBcnJvdzpcIuKGmVwiLExvd2VyUmlnaHRBcnJvdzpcIuKGmFwiLGxvejpcIuKXilwiLGxvemVuZ2U6XCLil4pcIixsb3pmOlwi4qerXCIsbHBhcjpcIihcIixscGFybHQ6XCLippNcIixscmFycjpcIuKHhlwiLGxyY29ybmVyOlwi4oyfXCIsbHJoYXI6XCLih4tcIixscmhhcmQ6XCLipa1cIixscm06XCLigI5cIixscnRyaTpcIuKKv1wiLGxzYXF1bzpcIuKAuVwiLGxzY3I6XCLwnZOBXCIsTHNjcjpcIuKEklwiLGxzaDpcIuKGsFwiLExzaDpcIuKGsFwiLGxzaW06XCLiibJcIixsc2ltZTpcIuKqjVwiLGxzaW1nOlwi4qqPXCIsbHNxYjpcIltcIixsc3F1bzpcIuKAmFwiLGxzcXVvcjpcIuKAmlwiLExzdHJvazpcIsWBXCIsbHN0cm9rOlwixYJcIixsdGNjOlwi4qqmXCIsbHRjaXI6XCLiqblcIixsdDpcIjxcIixMVDpcIjxcIixMdDpcIuKJqlwiLGx0ZG90Olwi4ouWXCIsbHRocmVlOlwi4ouLXCIsbHRpbWVzOlwi4ouJXCIsbHRsYXJyOlwi4qW2XCIsbHRxdWVzdDpcIuKpu1wiLGx0cmk6XCLil4NcIixsdHJpZTpcIuKKtFwiLGx0cmlmOlwi4peCXCIsbHRyUGFyOlwi4qaWXCIsbHVyZHNoYXI6XCLipYpcIixsdXJ1aGFyOlwi4qWmXCIsbHZlcnRuZXFxOlwi4omo77iAXCIsbHZuRTpcIuKJqO+4gFwiLG1hY3I6XCLCr1wiLG1hbGU6XCLimYJcIixtYWx0Olwi4pygXCIsbWFsdGVzZTpcIuKcoFwiLE1hcDpcIuKkhVwiLG1hcDpcIuKGplwiLG1hcHN0bzpcIuKGplwiLG1hcHN0b2Rvd246XCLihqdcIixtYXBzdG9sZWZ0Olwi4oakXCIsbWFwc3RvdXA6XCLihqVcIixtYXJrZXI6XCLilq5cIixtY29tbWE6XCLiqKlcIixNY3k6XCLQnFwiLG1jeTpcItC8XCIsbWRhc2g6XCLigJRcIixtRERvdDpcIuKIulwiLG1lYXN1cmVkYW5nbGU6XCLiiKFcIixNZWRpdW1TcGFjZTpcIuKBn1wiLE1lbGxpbnRyZjpcIuKEs1wiLE1mcjpcIvCdlJBcIixtZnI6XCLwnZSqXCIsbWhvOlwi4oSnXCIsbWljcm86XCLCtVwiLG1pZGFzdDpcIipcIixtaWRjaXI6XCLiq7BcIixtaWQ6XCLiiKNcIixtaWRkb3Q6XCLCt1wiLG1pbnVzYjpcIuKKn1wiLG1pbnVzOlwi4oiSXCIsbWludXNkOlwi4oi4XCIsbWludXNkdTpcIuKoqlwiLE1pbnVzUGx1czpcIuKIk1wiLG1sY3A6XCLiq5tcIixtbGRyOlwi4oCmXCIsbW5wbHVzOlwi4oiTXCIsbW9kZWxzOlwi4oqnXCIsTW9wZjpcIvCdlYRcIixtb3BmOlwi8J2VnlwiLG1wOlwi4oiTXCIsbXNjcjpcIvCdk4JcIixNc2NyOlwi4oSzXCIsbXN0cG9zOlwi4oi+XCIsTXU6XCLOnFwiLG11OlwizrxcIixtdWx0aW1hcDpcIuKKuFwiLG11bWFwOlwi4oq4XCIsbmFibGE6XCLiiIdcIixOYWN1dGU6XCLFg1wiLG5hY3V0ZTpcIsWEXCIsbmFuZzpcIuKIoOKDklwiLG5hcDpcIuKJiVwiLG5hcEU6XCLiqbDMuFwiLG5hcGlkOlwi4omLzLhcIixuYXBvczpcIsWJXCIsbmFwcHJveDpcIuKJiVwiLG5hdHVyYWw6XCLima5cIixuYXR1cmFsczpcIuKElVwiLG5hdHVyOlwi4pmuXCIsbmJzcDpcIsKgXCIsbmJ1bXA6XCLiiY7MuFwiLG5idW1wZTpcIuKJj8y4XCIsbmNhcDpcIuKpg1wiLE5jYXJvbjpcIsWHXCIsbmNhcm9uOlwixYhcIixOY2VkaWw6XCLFhVwiLG5jZWRpbDpcIsWGXCIsbmNvbmc6XCLiiYdcIixuY29uZ2RvdDpcIuKprcy4XCIsbmN1cDpcIuKpglwiLE5jeTpcItCdXCIsbmN5Olwi0L1cIixuZGFzaDpcIuKAk1wiLG5lYXJoazpcIuKkpFwiLG5lYXJyOlwi4oaXXCIsbmVBcnI6XCLih5dcIixuZWFycm93Olwi4oaXXCIsbmU6XCLiiaBcIixuZWRvdDpcIuKJkMy4XCIsTmVnYXRpdmVNZWRpdW1TcGFjZTpcIuKAi1wiLE5lZ2F0aXZlVGhpY2tTcGFjZTpcIuKAi1wiLE5lZ2F0aXZlVGhpblNwYWNlOlwi4oCLXCIsTmVnYXRpdmVWZXJ5VGhpblNwYWNlOlwi4oCLXCIsbmVxdWl2Olwi4omiXCIsbmVzZWFyOlwi4qSoXCIsbmVzaW06XCLiiYLMuFwiLE5lc3RlZEdyZWF0ZXJHcmVhdGVyOlwi4omrXCIsTmVzdGVkTGVzc0xlc3M6XCLiiapcIixOZXdMaW5lOlwiXFxuXCIsbmV4aXN0Olwi4oiEXCIsbmV4aXN0czpcIuKIhFwiLE5mcjpcIvCdlJFcIixuZnI6XCLwnZSrXCIsbmdFOlwi4omnzLhcIixuZ2U6XCLiibFcIixuZ2VxOlwi4omxXCIsbmdlcXE6XCLiiafMuFwiLG5nZXFzbGFudDpcIuKpvsy4XCIsbmdlczpcIuKpvsy4XCIsbkdnOlwi4ouZzLhcIixuZ3NpbTpcIuKJtVwiLG5HdDpcIuKJq+KDklwiLG5ndDpcIuKJr1wiLG5ndHI6XCLiia9cIixuR3R2Olwi4omrzLhcIixuaGFycjpcIuKGrlwiLG5oQXJyOlwi4oeOXCIsbmhwYXI6XCLiq7JcIixuaTpcIuKIi1wiLG5pczpcIuKLvFwiLG5pc2Q6XCLii7pcIixuaXY6XCLiiItcIixOSmN5Olwi0IpcIixuamN5Olwi0ZpcIixubGFycjpcIuKGmlwiLG5sQXJyOlwi4oeNXCIsbmxkcjpcIuKApVwiLG5sRTpcIuKJpsy4XCIsbmxlOlwi4omwXCIsbmxlZnRhcnJvdzpcIuKGmlwiLG5MZWZ0YXJyb3c6XCLih41cIixubGVmdHJpZ2h0YXJyb3c6XCLihq5cIixuTGVmdHJpZ2h0YXJyb3c6XCLih45cIixubGVxOlwi4omwXCIsbmxlcXE6XCLiiabMuFwiLG5sZXFzbGFudDpcIuKpvcy4XCIsbmxlczpcIuKpvcy4XCIsbmxlc3M6XCLiia5cIixuTGw6XCLii5jMuFwiLG5sc2ltOlwi4om0XCIsbkx0Olwi4omq4oOSXCIsbmx0Olwi4omuXCIsbmx0cmk6XCLii6pcIixubHRyaWU6XCLii6xcIixuTHR2Olwi4omqzLhcIixubWlkOlwi4oikXCIsTm9CcmVhazpcIuKBoFwiLE5vbkJyZWFraW5nU3BhY2U6XCLCoFwiLG5vcGY6XCLwnZWfXCIsTm9wZjpcIuKElVwiLE5vdDpcIuKrrFwiLG5vdDpcIsKsXCIsTm90Q29uZ3J1ZW50Olwi4omiXCIsTm90Q3VwQ2FwOlwi4omtXCIsTm90RG91YmxlVmVydGljYWxCYXI6XCLiiKZcIixOb3RFbGVtZW50Olwi4oiJXCIsTm90RXF1YWw6XCLiiaBcIixOb3RFcXVhbFRpbGRlOlwi4omCzLhcIixOb3RFeGlzdHM6XCLiiIRcIixOb3RHcmVhdGVyOlwi4omvXCIsTm90R3JlYXRlckVxdWFsOlwi4omxXCIsTm90R3JlYXRlckZ1bGxFcXVhbDpcIuKJp8y4XCIsTm90R3JlYXRlckdyZWF0ZXI6XCLiiavMuFwiLE5vdEdyZWF0ZXJMZXNzOlwi4om5XCIsTm90R3JlYXRlclNsYW50RXF1YWw6XCLiqb7MuFwiLE5vdEdyZWF0ZXJUaWxkZTpcIuKJtVwiLE5vdEh1bXBEb3duSHVtcDpcIuKJjsy4XCIsTm90SHVtcEVxdWFsOlwi4omPzLhcIixub3RpbjpcIuKIiVwiLG5vdGluZG90Olwi4ou1zLhcIixub3RpbkU6XCLii7nMuFwiLG5vdGludmE6XCLiiIlcIixub3RpbnZiOlwi4ou3XCIsbm90aW52YzpcIuKLtlwiLE5vdExlZnRUcmlhbmdsZUJhcjpcIuKnj8y4XCIsTm90TGVmdFRyaWFuZ2xlOlwi4ouqXCIsTm90TGVmdFRyaWFuZ2xlRXF1YWw6XCLii6xcIixOb3RMZXNzOlwi4omuXCIsTm90TGVzc0VxdWFsOlwi4omwXCIsTm90TGVzc0dyZWF0ZXI6XCLiibhcIixOb3RMZXNzTGVzczpcIuKJqsy4XCIsTm90TGVzc1NsYW50RXF1YWw6XCLiqb3MuFwiLE5vdExlc3NUaWxkZTpcIuKJtFwiLE5vdE5lc3RlZEdyZWF0ZXJHcmVhdGVyOlwi4qqizLhcIixOb3ROZXN0ZWRMZXNzTGVzczpcIuKqocy4XCIsbm90bmk6XCLiiIxcIixub3RuaXZhOlwi4oiMXCIsbm90bml2YjpcIuKLvlwiLG5vdG5pdmM6XCLii71cIixOb3RQcmVjZWRlczpcIuKKgFwiLE5vdFByZWNlZGVzRXF1YWw6XCLiqq/MuFwiLE5vdFByZWNlZGVzU2xhbnRFcXVhbDpcIuKLoFwiLE5vdFJldmVyc2VFbGVtZW50Olwi4oiMXCIsTm90UmlnaHRUcmlhbmdsZUJhcjpcIuKnkMy4XCIsTm90UmlnaHRUcmlhbmdsZTpcIuKLq1wiLE5vdFJpZ2h0VHJpYW5nbGVFcXVhbDpcIuKLrVwiLE5vdFNxdWFyZVN1YnNldDpcIuKKj8y4XCIsTm90U3F1YXJlU3Vic2V0RXF1YWw6XCLii6JcIixOb3RTcXVhcmVTdXBlcnNldDpcIuKKkMy4XCIsTm90U3F1YXJlU3VwZXJzZXRFcXVhbDpcIuKLo1wiLE5vdFN1YnNldDpcIuKKguKDklwiLE5vdFN1YnNldEVxdWFsOlwi4oqIXCIsTm90U3VjY2VlZHM6XCLiioFcIixOb3RTdWNjZWVkc0VxdWFsOlwi4qqwzLhcIixOb3RTdWNjZWVkc1NsYW50RXF1YWw6XCLii6FcIixOb3RTdWNjZWVkc1RpbGRlOlwi4om/zLhcIixOb3RTdXBlcnNldDpcIuKKg+KDklwiLE5vdFN1cGVyc2V0RXF1YWw6XCLiiolcIixOb3RUaWxkZTpcIuKJgVwiLE5vdFRpbGRlRXF1YWw6XCLiiYRcIixOb3RUaWxkZUZ1bGxFcXVhbDpcIuKJh1wiLE5vdFRpbGRlVGlsZGU6XCLiiYlcIixOb3RWZXJ0aWNhbEJhcjpcIuKIpFwiLG5wYXJhbGxlbDpcIuKIplwiLG5wYXI6XCLiiKZcIixucGFyc2w6XCLiq73ig6VcIixucGFydDpcIuKIgsy4XCIsbnBvbGludDpcIuKolFwiLG5wcjpcIuKKgFwiLG5wcmN1ZTpcIuKLoFwiLG5wcmVjOlwi4oqAXCIsbnByZWNlcTpcIuKqr8y4XCIsbnByZTpcIuKqr8y4XCIsbnJhcnJjOlwi4qSzzLhcIixucmFycjpcIuKGm1wiLG5yQXJyOlwi4oePXCIsbnJhcnJ3Olwi4oadzLhcIixucmlnaHRhcnJvdzpcIuKGm1wiLG5SaWdodGFycm93Olwi4oePXCIsbnJ0cmk6XCLii6tcIixucnRyaWU6XCLii61cIixuc2M6XCLiioFcIixuc2NjdWU6XCLii6FcIixuc2NlOlwi4qqwzLhcIixOc2NyOlwi8J2SqVwiLG5zY3I6XCLwnZODXCIsbnNob3J0bWlkOlwi4oikXCIsbnNob3J0cGFyYWxsZWw6XCLiiKZcIixuc2ltOlwi4omBXCIsbnNpbWU6XCLiiYRcIixuc2ltZXE6XCLiiYRcIixuc21pZDpcIuKIpFwiLG5zcGFyOlwi4oimXCIsbnNxc3ViZTpcIuKLolwiLG5zcXN1cGU6XCLii6NcIixuc3ViOlwi4oqEXCIsbnN1YkU6XCLiq4XMuFwiLG5zdWJlOlwi4oqIXCIsbnN1YnNldDpcIuKKguKDklwiLG5zdWJzZXRlcTpcIuKKiFwiLG5zdWJzZXRlcXE6XCLiq4XMuFwiLG5zdWNjOlwi4oqBXCIsbnN1Y2NlcTpcIuKqsMy4XCIsbnN1cDpcIuKKhVwiLG5zdXBFOlwi4quGzLhcIixuc3VwZTpcIuKKiVwiLG5zdXBzZXQ6XCLiioPig5JcIixuc3Vwc2V0ZXE6XCLiiolcIixuc3Vwc2V0ZXFxOlwi4quGzLhcIixudGdsOlwi4om5XCIsTnRpbGRlOlwiw5FcIixudGlsZGU6XCLDsVwiLG50bGc6XCLiibhcIixudHJpYW5nbGVsZWZ0Olwi4ouqXCIsbnRyaWFuZ2xlbGVmdGVxOlwi4ousXCIsbnRyaWFuZ2xlcmlnaHQ6XCLii6tcIixudHJpYW5nbGVyaWdodGVxOlwi4outXCIsTnU6XCLOnVwiLG51Olwizr1cIixudW06XCIjXCIsbnVtZXJvOlwi4oSWXCIsbnVtc3A6XCLigIdcIixudmFwOlwi4omN4oOSXCIsbnZkYXNoOlwi4oqsXCIsbnZEYXNoOlwi4oqtXCIsblZkYXNoOlwi4oquXCIsblZEYXNoOlwi4oqvXCIsbnZnZTpcIuKJpeKDklwiLG52Z3Q6XCI+4oOSXCIsbnZIYXJyOlwi4qSEXCIsbnZpbmZpbjpcIuKnnlwiLG52bEFycjpcIuKkglwiLG52bGU6XCLiiaTig5JcIixudmx0OlwiPOKDklwiLG52bHRyaWU6XCLiirTig5JcIixudnJBcnI6XCLipINcIixudnJ0cmllOlwi4oq14oOSXCIsbnZzaW06XCLiiLzig5JcIixud2FyaGs6XCLipKNcIixud2FycjpcIuKGllwiLG53QXJyOlwi4oeWXCIsbndhcnJvdzpcIuKGllwiLG53bmVhcjpcIuKkp1wiLE9hY3V0ZTpcIsOTXCIsb2FjdXRlOlwiw7NcIixvYXN0Olwi4oqbXCIsT2NpcmM6XCLDlFwiLG9jaXJjOlwiw7RcIixvY2lyOlwi4oqaXCIsT2N5Olwi0J5cIixvY3k6XCLQvlwiLG9kYXNoOlwi4oqdXCIsT2RibGFjOlwixZBcIixvZGJsYWM6XCLFkVwiLG9kaXY6XCLiqLhcIixvZG90Olwi4oqZXCIsb2Rzb2xkOlwi4qa8XCIsT0VsaWc6XCLFklwiLG9lbGlnOlwixZNcIixvZmNpcjpcIuKmv1wiLE9mcjpcIvCdlJJcIixvZnI6XCLwnZSsXCIsb2dvbjpcIsubXCIsT2dyYXZlOlwiw5JcIixvZ3JhdmU6XCLDslwiLG9ndDpcIuKngVwiLG9oYmFyOlwi4qa1XCIsb2htOlwizqlcIixvaW50Olwi4oiuXCIsb2xhcnI6XCLihrpcIixvbGNpcjpcIuKmvlwiLG9sY3Jvc3M6XCLiprtcIixvbGluZTpcIuKAvlwiLG9sdDpcIuKngFwiLE9tYWNyOlwixYxcIixvbWFjcjpcIsWNXCIsT21lZ2E6XCLOqVwiLG9tZWdhOlwiz4lcIixPbWljcm9uOlwizp9cIixvbWljcm9uOlwizr9cIixvbWlkOlwi4qa2XCIsb21pbnVzOlwi4oqWXCIsT29wZjpcIvCdlYZcIixvb3BmOlwi8J2VoFwiLG9wYXI6XCLiprdcIixPcGVuQ3VybHlEb3VibGVRdW90ZTpcIuKAnFwiLE9wZW5DdXJseVF1b3RlOlwi4oCYXCIsb3BlcnA6XCLiprlcIixvcGx1czpcIuKKlVwiLG9yYXJyOlwi4oa7XCIsT3I6XCLiqZRcIixvcjpcIuKIqFwiLG9yZDpcIuKpnVwiLG9yZGVyOlwi4oS0XCIsb3JkZXJvZjpcIuKEtFwiLG9yZGY6XCLCqlwiLG9yZG06XCLCulwiLG9yaWdvZjpcIuKKtlwiLG9yb3I6XCLiqZZcIixvcnNsb3BlOlwi4qmXXCIsb3J2Olwi4qmbXCIsb1M6XCLik4hcIixPc2NyOlwi8J2SqlwiLG9zY3I6XCLihLRcIixPc2xhc2g6XCLDmFwiLG9zbGFzaDpcIsO4XCIsb3NvbDpcIuKKmFwiLE90aWxkZTpcIsOVXCIsb3RpbGRlOlwiw7VcIixvdGltZXNhczpcIuKotlwiLE90aW1lczpcIuKot1wiLG90aW1lczpcIuKKl1wiLE91bWw6XCLDllwiLG91bWw6XCLDtlwiLG92YmFyOlwi4oy9XCIsT3ZlckJhcjpcIuKAvlwiLE92ZXJCcmFjZTpcIuKPnlwiLE92ZXJCcmFja2V0Olwi4o60XCIsT3ZlclBhcmVudGhlc2lzOlwi4o+cXCIscGFyYTpcIsK2XCIscGFyYWxsZWw6XCLiiKVcIixwYXI6XCLiiKVcIixwYXJzaW06XCLiq7NcIixwYXJzbDpcIuKrvVwiLHBhcnQ6XCLiiIJcIixQYXJ0aWFsRDpcIuKIglwiLFBjeTpcItCfXCIscGN5Olwi0L9cIixwZXJjbnQ6XCIlXCIscGVyaW9kOlwiLlwiLHBlcm1pbDpcIuKAsFwiLHBlcnA6XCLiiqVcIixwZXJ0ZW5rOlwi4oCxXCIsUGZyOlwi8J2Uk1wiLHBmcjpcIvCdlK1cIixQaGk6XCLOplwiLHBoaTpcIs+GXCIscGhpdjpcIs+VXCIscGhtbWF0Olwi4oSzXCIscGhvbmU6XCLimI5cIixQaTpcIs6gXCIscGk6XCLPgFwiLHBpdGNoZm9yazpcIuKLlFwiLHBpdjpcIs+WXCIscGxhbmNrOlwi4oSPXCIscGxhbmNraDpcIuKEjlwiLHBsYW5rdjpcIuKEj1wiLHBsdXNhY2lyOlwi4qijXCIscGx1c2I6XCLiip5cIixwbHVzY2lyOlwi4qiiXCIscGx1czpcIitcIixwbHVzZG86XCLiiJRcIixwbHVzZHU6XCLiqKVcIixwbHVzZTpcIuKpslwiLFBsdXNNaW51czpcIsKxXCIscGx1c21uOlwiwrFcIixwbHVzc2ltOlwi4qimXCIscGx1c3R3bzpcIuKop1wiLHBtOlwiwrFcIixQb2luY2FyZXBsYW5lOlwi4oSMXCIscG9pbnRpbnQ6XCLiqJVcIixwb3BmOlwi8J2VoVwiLFBvcGY6XCLihJlcIixwb3VuZDpcIsKjXCIscHJhcDpcIuKqt1wiLFByOlwi4qq7XCIscHI6XCLiibpcIixwcmN1ZTpcIuKJvFwiLHByZWNhcHByb3g6XCLiqrdcIixwcmVjOlwi4om6XCIscHJlY2N1cmx5ZXE6XCLiibxcIixQcmVjZWRlczpcIuKJulwiLFByZWNlZGVzRXF1YWw6XCLiqq9cIixQcmVjZWRlc1NsYW50RXF1YWw6XCLiibxcIixQcmVjZWRlc1RpbGRlOlwi4om+XCIscHJlY2VxOlwi4qqvXCIscHJlY25hcHByb3g6XCLiqrlcIixwcmVjbmVxcTpcIuKqtVwiLHByZWNuc2ltOlwi4ouoXCIscHJlOlwi4qqvXCIscHJFOlwi4qqzXCIscHJlY3NpbTpcIuKJvlwiLHByaW1lOlwi4oCyXCIsUHJpbWU6XCLigLNcIixwcmltZXM6XCLihJlcIixwcm5hcDpcIuKquVwiLHBybkU6XCLiqrVcIixwcm5zaW06XCLii6hcIixwcm9kOlwi4oiPXCIsUHJvZHVjdDpcIuKIj1wiLHByb2ZhbGFyOlwi4oyuXCIscHJvZmxpbmU6XCLijJJcIixwcm9mc3VyZjpcIuKMk1wiLHByb3A6XCLiiJ1cIixQcm9wb3J0aW9uYWw6XCLiiJ1cIixQcm9wb3J0aW9uOlwi4oi3XCIscHJvcHRvOlwi4oidXCIscHJzaW06XCLiib5cIixwcnVyZWw6XCLiirBcIixQc2NyOlwi8J2Sq1wiLHBzY3I6XCLwnZOFXCIsUHNpOlwizqhcIixwc2k6XCLPiFwiLHB1bmNzcDpcIuKAiFwiLFFmcjpcIvCdlJRcIixxZnI6XCLwnZSuXCIscWludDpcIuKojFwiLHFvcGY6XCLwnZWiXCIsUW9wZjpcIuKEmlwiLHFwcmltZTpcIuKBl1wiLFFzY3I6XCLwnZKsXCIscXNjcjpcIvCdk4ZcIixxdWF0ZXJuaW9uczpcIuKEjVwiLHF1YXRpbnQ6XCLiqJZcIixxdWVzdDpcIj9cIixxdWVzdGVxOlwi4omfXCIscXVvdDonXCInLFFVT1Q6J1wiJyxyQWFycjpcIuKHm1wiLHJhY2U6XCLiiL3MsVwiLFJhY3V0ZTpcIsWUXCIscmFjdXRlOlwixZVcIixyYWRpYzpcIuKImlwiLHJhZW1wdHl2Olwi4qazXCIscmFuZzpcIuKfqVwiLFJhbmc6XCLin6tcIixyYW5nZDpcIuKmklwiLHJhbmdlOlwi4qalXCIscmFuZ2xlOlwi4p+pXCIscmFxdW86XCLCu1wiLHJhcnJhcDpcIuKltVwiLHJhcnJiOlwi4oelXCIscmFycmJmczpcIuKkoFwiLHJhcnJjOlwi4qSzXCIscmFycjpcIuKGklwiLFJhcnI6XCLihqBcIixyQXJyOlwi4oeSXCIscmFycmZzOlwi4qSeXCIscmFycmhrOlwi4oaqXCIscmFycmxwOlwi4oasXCIscmFycnBsOlwi4qWFXCIscmFycnNpbTpcIuKltFwiLFJhcnJ0bDpcIuKkllwiLHJhcnJ0bDpcIuKGo1wiLHJhcnJ3Olwi4oadXCIscmF0YWlsOlwi4qSaXCIsckF0YWlsOlwi4qScXCIscmF0aW86XCLiiLZcIixyYXRpb25hbHM6XCLihJpcIixyYmFycjpcIuKkjVwiLHJCYXJyOlwi4qSPXCIsUkJhcnI6XCLipJBcIixyYmJyazpcIuKds1wiLHJicmFjZTpcIn1cIixyYnJhY2s6XCJdXCIscmJya2U6XCLipoxcIixyYnJrc2xkOlwi4qaOXCIscmJya3NsdTpcIuKmkFwiLFJjYXJvbjpcIsWYXCIscmNhcm9uOlwixZlcIixSY2VkaWw6XCLFllwiLHJjZWRpbDpcIsWXXCIscmNlaWw6XCLijIlcIixyY3ViOlwifVwiLFJjeTpcItCgXCIscmN5Olwi0YBcIixyZGNhOlwi4qS3XCIscmRsZGhhcjpcIuKlqVwiLHJkcXVvOlwi4oCdXCIscmRxdW9yOlwi4oCdXCIscmRzaDpcIuKGs1wiLHJlYWw6XCLihJxcIixyZWFsaW5lOlwi4oSbXCIscmVhbHBhcnQ6XCLihJxcIixyZWFsczpcIuKEnVwiLFJlOlwi4oScXCIscmVjdDpcIuKWrVwiLHJlZzpcIsKuXCIsUkVHOlwiwq5cIixSZXZlcnNlRWxlbWVudDpcIuKIi1wiLFJldmVyc2VFcXVpbGlicml1bTpcIuKHi1wiLFJldmVyc2VVcEVxdWlsaWJyaXVtOlwi4qWvXCIscmZpc2h0Olwi4qW9XCIscmZsb29yOlwi4oyLXCIscmZyOlwi8J2Ur1wiLFJmcjpcIuKEnFwiLHJIYXI6XCLipaRcIixyaGFyZDpcIuKHgVwiLHJoYXJ1Olwi4oeAXCIscmhhcnVsOlwi4qWsXCIsUmhvOlwizqFcIixyaG86XCLPgVwiLHJob3Y6XCLPsVwiLFJpZ2h0QW5nbGVCcmFja2V0Olwi4p+pXCIsUmlnaHRBcnJvd0JhcjpcIuKHpVwiLHJpZ2h0YXJyb3c6XCLihpJcIixSaWdodEFycm93Olwi4oaSXCIsUmlnaHRhcnJvdzpcIuKHklwiLFJpZ2h0QXJyb3dMZWZ0QXJyb3c6XCLih4RcIixyaWdodGFycm93dGFpbDpcIuKGo1wiLFJpZ2h0Q2VpbGluZzpcIuKMiVwiLFJpZ2h0RG91YmxlQnJhY2tldDpcIuKfp1wiLFJpZ2h0RG93blRlZVZlY3RvcjpcIuKlnVwiLFJpZ2h0RG93blZlY3RvckJhcjpcIuKllVwiLFJpZ2h0RG93blZlY3RvcjpcIuKHglwiLFJpZ2h0Rmxvb3I6XCLijItcIixyaWdodGhhcnBvb25kb3duOlwi4oeBXCIscmlnaHRoYXJwb29udXA6XCLih4BcIixyaWdodGxlZnRhcnJvd3M6XCLih4RcIixyaWdodGxlZnRoYXJwb29uczpcIuKHjFwiLHJpZ2h0cmlnaHRhcnJvd3M6XCLih4lcIixyaWdodHNxdWlnYXJyb3c6XCLihp1cIixSaWdodFRlZUFycm93Olwi4oamXCIsUmlnaHRUZWU6XCLiiqJcIixSaWdodFRlZVZlY3RvcjpcIuKlm1wiLHJpZ2h0dGhyZWV0aW1lczpcIuKLjFwiLFJpZ2h0VHJpYW5nbGVCYXI6XCLip5BcIixSaWdodFRyaWFuZ2xlOlwi4oqzXCIsUmlnaHRUcmlhbmdsZUVxdWFsOlwi4oq1XCIsUmlnaHRVcERvd25WZWN0b3I6XCLipY9cIixSaWdodFVwVGVlVmVjdG9yOlwi4qWcXCIsUmlnaHRVcFZlY3RvckJhcjpcIuKllFwiLFJpZ2h0VXBWZWN0b3I6XCLihr5cIixSaWdodFZlY3RvckJhcjpcIuKlk1wiLFJpZ2h0VmVjdG9yOlwi4oeAXCIscmluZzpcIsuaXCIscmlzaW5nZG90c2VxOlwi4omTXCIscmxhcnI6XCLih4RcIixybGhhcjpcIuKHjFwiLHJsbTpcIuKAj1wiLHJtb3VzdGFjaGU6XCLijrFcIixybW91c3Q6XCLijrFcIixybm1pZDpcIuKrrlwiLHJvYW5nOlwi4p+tXCIscm9hcnI6XCLih75cIixyb2JyazpcIuKfp1wiLHJvcGFyOlwi4qaGXCIscm9wZjpcIvCdlaNcIixSb3BmOlwi4oSdXCIscm9wbHVzOlwi4qiuXCIscm90aW1lczpcIuKotVwiLFJvdW5kSW1wbGllczpcIuKlsFwiLHJwYXI6XCIpXCIscnBhcmd0Olwi4qaUXCIscnBwb2xpbnQ6XCLiqJJcIixycmFycjpcIuKHiVwiLFJyaWdodGFycm93Olwi4oebXCIscnNhcXVvOlwi4oC6XCIscnNjcjpcIvCdk4dcIixSc2NyOlwi4oSbXCIscnNoOlwi4oaxXCIsUnNoOlwi4oaxXCIscnNxYjpcIl1cIixyc3F1bzpcIuKAmVwiLHJzcXVvcjpcIuKAmVwiLHJ0aHJlZTpcIuKLjFwiLHJ0aW1lczpcIuKLilwiLHJ0cmk6XCLilrlcIixydHJpZTpcIuKKtVwiLHJ0cmlmOlwi4pa4XCIscnRyaWx0cmk6XCLip45cIixSdWxlRGVsYXllZDpcIuKntFwiLHJ1bHVoYXI6XCLipahcIixyeDpcIuKEnlwiLFNhY3V0ZTpcIsWaXCIsc2FjdXRlOlwixZtcIixzYnF1bzpcIuKAmlwiLHNjYXA6XCLiqrhcIixTY2Fyb246XCLFoFwiLHNjYXJvbjpcIsWhXCIsU2M6XCLiqrxcIixzYzpcIuKJu1wiLHNjY3VlOlwi4om9XCIsc2NlOlwi4qqwXCIsc2NFOlwi4qq0XCIsU2NlZGlsOlwixZ5cIixzY2VkaWw6XCLFn1wiLFNjaXJjOlwixZxcIixzY2lyYzpcIsWdXCIsc2NuYXA6XCLiqrpcIixzY25FOlwi4qq2XCIsc2Nuc2ltOlwi4oupXCIsc2Nwb2xpbnQ6XCLiqJNcIixzY3NpbTpcIuKJv1wiLFNjeTpcItChXCIsc2N5Olwi0YFcIixzZG90YjpcIuKKoVwiLHNkb3Q6XCLii4VcIixzZG90ZTpcIuKpplwiLHNlYXJoazpcIuKkpVwiLHNlYXJyOlwi4oaYXCIsc2VBcnI6XCLih5hcIixzZWFycm93Olwi4oaYXCIsc2VjdDpcIsKnXCIsc2VtaTpcIjtcIixzZXN3YXI6XCLipKlcIixzZXRtaW51czpcIuKIllwiLHNldG1uOlwi4oiWXCIsc2V4dDpcIuKctlwiLFNmcjpcIvCdlJZcIixzZnI6XCLwnZSwXCIsc2Zyb3duOlwi4oyiXCIsc2hhcnA6XCLima9cIixTSENIY3k6XCLQqVwiLHNoY2hjeTpcItGJXCIsU0hjeTpcItCoXCIsc2hjeTpcItGIXCIsU2hvcnREb3duQXJyb3c6XCLihpNcIixTaG9ydExlZnRBcnJvdzpcIuKGkFwiLHNob3J0bWlkOlwi4oijXCIsc2hvcnRwYXJhbGxlbDpcIuKIpVwiLFNob3J0UmlnaHRBcnJvdzpcIuKGklwiLFNob3J0VXBBcnJvdzpcIuKGkVwiLHNoeTpcIsKtXCIsU2lnbWE6XCLOo1wiLHNpZ21hOlwiz4NcIixzaWdtYWY6XCLPglwiLHNpZ21hdjpcIs+CXCIsc2ltOlwi4oi8XCIsc2ltZG90Olwi4qmqXCIsc2ltZTpcIuKJg1wiLHNpbWVxOlwi4omDXCIsc2ltZzpcIuKqnlwiLHNpbWdFOlwi4qqgXCIsc2ltbDpcIuKqnVwiLHNpbWxFOlwi4qqfXCIsc2ltbmU6XCLiiYZcIixzaW1wbHVzOlwi4qikXCIsc2ltcmFycjpcIuKlslwiLHNsYXJyOlwi4oaQXCIsU21hbGxDaXJjbGU6XCLiiJhcIixzbWFsbHNldG1pbnVzOlwi4oiWXCIsc21hc2hwOlwi4qizXCIsc21lcGFyc2w6XCLip6RcIixzbWlkOlwi4oijXCIsc21pbGU6XCLijKNcIixzbXQ6XCLiqqpcIixzbXRlOlwi4qqsXCIsc210ZXM6XCLiqqzvuIBcIixTT0ZUY3k6XCLQrFwiLHNvZnRjeTpcItGMXCIsc29sYmFyOlwi4oy/XCIsc29sYjpcIuKnhFwiLHNvbDpcIi9cIixTb3BmOlwi8J2VilwiLHNvcGY6XCLwnZWkXCIsc3BhZGVzOlwi4pmgXCIsc3BhZGVzdWl0Olwi4pmgXCIsc3BhcjpcIuKIpVwiLHNxY2FwOlwi4oqTXCIsc3FjYXBzOlwi4oqT77iAXCIsc3FjdXA6XCLiipRcIixzcWN1cHM6XCLiipTvuIBcIixTcXJ0Olwi4oiaXCIsc3FzdWI6XCLiio9cIixzcXN1YmU6XCLiipFcIixzcXN1YnNldDpcIuKKj1wiLHNxc3Vic2V0ZXE6XCLiipFcIixzcXN1cDpcIuKKkFwiLHNxc3VwZTpcIuKKklwiLHNxc3Vwc2V0Olwi4oqQXCIsc3FzdXBzZXRlcTpcIuKKklwiLHNxdWFyZTpcIuKWoVwiLFNxdWFyZTpcIuKWoVwiLFNxdWFyZUludGVyc2VjdGlvbjpcIuKKk1wiLFNxdWFyZVN1YnNldDpcIuKKj1wiLFNxdWFyZVN1YnNldEVxdWFsOlwi4oqRXCIsU3F1YXJlU3VwZXJzZXQ6XCLiipBcIixTcXVhcmVTdXBlcnNldEVxdWFsOlwi4oqSXCIsU3F1YXJlVW5pb246XCLiipRcIixzcXVhcmY6XCLilqpcIixzcXU6XCLilqFcIixzcXVmOlwi4paqXCIsc3JhcnI6XCLihpJcIixTc2NyOlwi8J2SrlwiLHNzY3I6XCLwnZOIXCIsc3NldG1uOlwi4oiWXCIsc3NtaWxlOlwi4oyjXCIsc3N0YXJmOlwi4ouGXCIsU3RhcjpcIuKLhlwiLHN0YXI6XCLimIZcIixzdGFyZjpcIuKYhVwiLHN0cmFpZ2h0ZXBzaWxvbjpcIs+1XCIsc3RyYWlnaHRwaGk6XCLPlVwiLHN0cm5zOlwiwq9cIixzdWI6XCLiioJcIixTdWI6XCLii5BcIixzdWJkb3Q6XCLiqr1cIixzdWJFOlwi4quFXCIsc3ViZTpcIuKKhlwiLHN1YmVkb3Q6XCLiq4NcIixzdWJtdWx0Olwi4quBXCIsc3VibkU6XCLiq4tcIixzdWJuZTpcIuKKilwiLHN1YnBsdXM6XCLiqr9cIixzdWJyYXJyOlwi4qW5XCIsc3Vic2V0Olwi4oqCXCIsU3Vic2V0Olwi4ouQXCIsc3Vic2V0ZXE6XCLiioZcIixzdWJzZXRlcXE6XCLiq4VcIixTdWJzZXRFcXVhbDpcIuKKhlwiLHN1YnNldG5lcTpcIuKKilwiLHN1YnNldG5lcXE6XCLiq4tcIixzdWJzaW06XCLiq4dcIixzdWJzdWI6XCLiq5VcIixzdWJzdXA6XCLiq5NcIixzdWNjYXBwcm94Olwi4qq4XCIsc3VjYzpcIuKJu1wiLHN1Y2NjdXJseWVxOlwi4om9XCIsU3VjY2VlZHM6XCLiibtcIixTdWNjZWVkc0VxdWFsOlwi4qqwXCIsU3VjY2VlZHNTbGFudEVxdWFsOlwi4om9XCIsU3VjY2VlZHNUaWxkZTpcIuKJv1wiLHN1Y2NlcTpcIuKqsFwiLHN1Y2NuYXBwcm94Olwi4qq6XCIsc3VjY25lcXE6XCLiqrZcIixzdWNjbnNpbTpcIuKLqVwiLHN1Y2NzaW06XCLiib9cIixTdWNoVGhhdDpcIuKIi1wiLHN1bTpcIuKIkVwiLFN1bTpcIuKIkVwiLHN1bmc6XCLimapcIixzdXAxOlwiwrlcIixzdXAyOlwiwrJcIixzdXAzOlwiwrNcIixzdXA6XCLiioNcIixTdXA6XCLii5FcIixzdXBkb3Q6XCLiqr5cIixzdXBkc3ViOlwi4quYXCIsc3VwRTpcIuKrhlwiLHN1cGU6XCLiiodcIixzdXBlZG90Olwi4quEXCIsU3VwZXJzZXQ6XCLiioNcIixTdXBlcnNldEVxdWFsOlwi4oqHXCIsc3VwaHNvbDpcIuKfiVwiLHN1cGhzdWI6XCLiq5dcIixzdXBsYXJyOlwi4qW7XCIsc3VwbXVsdDpcIuKrglwiLHN1cG5FOlwi4quMXCIsc3VwbmU6XCLiiotcIixzdXBwbHVzOlwi4quAXCIsc3Vwc2V0Olwi4oqDXCIsU3Vwc2V0Olwi4ouRXCIsc3Vwc2V0ZXE6XCLiiodcIixzdXBzZXRlcXE6XCLiq4ZcIixzdXBzZXRuZXE6XCLiiotcIixzdXBzZXRuZXFxOlwi4quMXCIsc3Vwc2ltOlwi4quIXCIsc3Vwc3ViOlwi4quUXCIsc3Vwc3VwOlwi4quWXCIsc3dhcmhrOlwi4qSmXCIsc3dhcnI6XCLihplcIixzd0FycjpcIuKHmVwiLHN3YXJyb3c6XCLihplcIixzd253YXI6XCLipKpcIixzemxpZzpcIsOfXCIsVGFiOlwiXFx0XCIsdGFyZ2V0Olwi4oyWXCIsVGF1OlwizqRcIix0YXU6XCLPhFwiLHRicms6XCLijrRcIixUY2Fyb246XCLFpFwiLHRjYXJvbjpcIsWlXCIsVGNlZGlsOlwixaJcIix0Y2VkaWw6XCLFo1wiLFRjeTpcItCiXCIsdGN5Olwi0YJcIix0ZG90Olwi4oObXCIsdGVscmVjOlwi4oyVXCIsVGZyOlwi8J2Ul1wiLHRmcjpcIvCdlLFcIix0aGVyZTQ6XCLiiLRcIix0aGVyZWZvcmU6XCLiiLRcIixUaGVyZWZvcmU6XCLiiLRcIixUaGV0YTpcIs6YXCIsdGhldGE6XCLOuFwiLHRoZXRhc3ltOlwiz5FcIix0aGV0YXY6XCLPkVwiLHRoaWNrYXBwcm94Olwi4omIXCIsdGhpY2tzaW06XCLiiLxcIixUaGlja1NwYWNlOlwi4oGf4oCKXCIsVGhpblNwYWNlOlwi4oCJXCIsdGhpbnNwOlwi4oCJXCIsdGhrYXA6XCLiiYhcIix0aGtzaW06XCLiiLxcIixUSE9STjpcIsOeXCIsdGhvcm46XCLDvlwiLHRpbGRlOlwiy5xcIixUaWxkZTpcIuKIvFwiLFRpbGRlRXF1YWw6XCLiiYNcIixUaWxkZUZ1bGxFcXVhbDpcIuKJhVwiLFRpbGRlVGlsZGU6XCLiiYhcIix0aW1lc2JhcjpcIuKosVwiLHRpbWVzYjpcIuKKoFwiLHRpbWVzOlwiw5dcIix0aW1lc2Q6XCLiqLBcIix0aW50Olwi4oitXCIsdG9lYTpcIuKkqFwiLHRvcGJvdDpcIuKMtlwiLHRvcGNpcjpcIuKrsVwiLHRvcDpcIuKKpFwiLFRvcGY6XCLwnZWLXCIsdG9wZjpcIvCdlaVcIix0b3Bmb3JrOlwi4quaXCIsdG9zYTpcIuKkqVwiLHRwcmltZTpcIuKAtFwiLHRyYWRlOlwi4oSiXCIsVFJBREU6XCLihKJcIix0cmlhbmdsZTpcIuKWtVwiLHRyaWFuZ2xlZG93bjpcIuKWv1wiLHRyaWFuZ2xlbGVmdDpcIuKXg1wiLHRyaWFuZ2xlbGVmdGVxOlwi4oq0XCIsdHJpYW5nbGVxOlwi4omcXCIsdHJpYW5nbGVyaWdodDpcIuKWuVwiLHRyaWFuZ2xlcmlnaHRlcTpcIuKKtVwiLHRyaWRvdDpcIuKXrFwiLHRyaWU6XCLiiZxcIix0cmltaW51czpcIuKoulwiLFRyaXBsZURvdDpcIuKDm1wiLHRyaXBsdXM6XCLiqLlcIix0cmlzYjpcIuKnjVwiLHRyaXRpbWU6XCLiqLtcIix0cnBleml1bTpcIuKPolwiLFRzY3I6XCLwnZKvXCIsdHNjcjpcIvCdk4lcIixUU2N5Olwi0KZcIix0c2N5Olwi0YZcIixUU0hjeTpcItCLXCIsdHNoY3k6XCLRm1wiLFRzdHJvazpcIsWmXCIsdHN0cm9rOlwixadcIix0d2l4dDpcIuKJrFwiLHR3b2hlYWRsZWZ0YXJyb3c6XCLihp5cIix0d29oZWFkcmlnaHRhcnJvdzpcIuKGoFwiLFVhY3V0ZTpcIsOaXCIsdWFjdXRlOlwiw7pcIix1YXJyOlwi4oaRXCIsVWFycjpcIuKGn1wiLHVBcnI6XCLih5FcIixVYXJyb2NpcjpcIuKliVwiLFVicmN5Olwi0I5cIix1YnJjeTpcItGeXCIsVWJyZXZlOlwixaxcIix1YnJldmU6XCLFrVwiLFVjaXJjOlwiw5tcIix1Y2lyYzpcIsO7XCIsVWN5Olwi0KNcIix1Y3k6XCLRg1wiLHVkYXJyOlwi4oeFXCIsVWRibGFjOlwixbBcIix1ZGJsYWM6XCLFsVwiLHVkaGFyOlwi4qWuXCIsdWZpc2h0Olwi4qW+XCIsVWZyOlwi8J2UmFwiLHVmcjpcIvCdlLJcIixVZ3JhdmU6XCLDmVwiLHVncmF2ZTpcIsO5XCIsdUhhcjpcIuKlo1wiLHVoYXJsOlwi4oa/XCIsdWhhcnI6XCLihr5cIix1aGJsazpcIuKWgFwiLHVsY29ybjpcIuKMnFwiLHVsY29ybmVyOlwi4oycXCIsdWxjcm9wOlwi4oyPXCIsdWx0cmk6XCLil7hcIixVbWFjcjpcIsWqXCIsdW1hY3I6XCLFq1wiLHVtbDpcIsKoXCIsVW5kZXJCYXI6XCJfXCIsVW5kZXJCcmFjZTpcIuKPn1wiLFVuZGVyQnJhY2tldDpcIuKOtVwiLFVuZGVyUGFyZW50aGVzaXM6XCLij51cIixVbmlvbjpcIuKLg1wiLFVuaW9uUGx1czpcIuKKjlwiLFVvZ29uOlwixbJcIix1b2dvbjpcIsWzXCIsVW9wZjpcIvCdlYxcIix1b3BmOlwi8J2VplwiLFVwQXJyb3dCYXI6XCLipJJcIix1cGFycm93Olwi4oaRXCIsVXBBcnJvdzpcIuKGkVwiLFVwYXJyb3c6XCLih5FcIixVcEFycm93RG93bkFycm93Olwi4oeFXCIsdXBkb3duYXJyb3c6XCLihpVcIixVcERvd25BcnJvdzpcIuKGlVwiLFVwZG93bmFycm93Olwi4oeVXCIsVXBFcXVpbGlicml1bTpcIuKlrlwiLHVwaGFycG9vbmxlZnQ6XCLihr9cIix1cGhhcnBvb25yaWdodDpcIuKGvlwiLHVwbHVzOlwi4oqOXCIsVXBwZXJMZWZ0QXJyb3c6XCLihpZcIixVcHBlclJpZ2h0QXJyb3c6XCLihpdcIix1cHNpOlwiz4VcIixVcHNpOlwiz5JcIix1cHNpaDpcIs+SXCIsVXBzaWxvbjpcIs6lXCIsdXBzaWxvbjpcIs+FXCIsVXBUZWVBcnJvdzpcIuKGpVwiLFVwVGVlOlwi4oqlXCIsdXB1cGFycm93czpcIuKHiFwiLHVyY29ybjpcIuKMnVwiLHVyY29ybmVyOlwi4oydXCIsdXJjcm9wOlwi4oyOXCIsVXJpbmc6XCLFrlwiLHVyaW5nOlwixa9cIix1cnRyaTpcIuKXuVwiLFVzY3I6XCLwnZKwXCIsdXNjcjpcIvCdk4pcIix1dGRvdDpcIuKLsFwiLFV0aWxkZTpcIsWoXCIsdXRpbGRlOlwixalcIix1dHJpOlwi4pa1XCIsdXRyaWY6XCLilrRcIix1dWFycjpcIuKHiFwiLFV1bWw6XCLDnFwiLHV1bWw6XCLDvFwiLHV3YW5nbGU6XCLipqdcIix2YW5ncnQ6XCLippxcIix2YXJlcHNpbG9uOlwiz7VcIix2YXJrYXBwYTpcIs+wXCIsdmFybm90aGluZzpcIuKIhVwiLHZhcnBoaTpcIs+VXCIsdmFycGk6XCLPllwiLHZhcnByb3B0bzpcIuKInVwiLHZhcnI6XCLihpVcIix2QXJyOlwi4oeVXCIsdmFycmhvOlwiz7FcIix2YXJzaWdtYTpcIs+CXCIsdmFyc3Vic2V0bmVxOlwi4oqK77iAXCIsdmFyc3Vic2V0bmVxcTpcIuKri++4gFwiLHZhcnN1cHNldG5lcTpcIuKKi++4gFwiLHZhcnN1cHNldG5lcXE6XCLiq4zvuIBcIix2YXJ0aGV0YTpcIs+RXCIsdmFydHJpYW5nbGVsZWZ0Olwi4oqyXCIsdmFydHJpYW5nbGVyaWdodDpcIuKKs1wiLHZCYXI6XCLiq6hcIixWYmFyOlwi4qurXCIsdkJhcnY6XCLiq6lcIixWY3k6XCLQklwiLHZjeTpcItCyXCIsdmRhc2g6XCLiiqJcIix2RGFzaDpcIuKKqFwiLFZkYXNoOlwi4oqpXCIsVkRhc2g6XCLiiqtcIixWZGFzaGw6XCLiq6ZcIix2ZWViYXI6XCLiirtcIix2ZWU6XCLiiKhcIixWZWU6XCLii4FcIix2ZWVlcTpcIuKJmlwiLHZlbGxpcDpcIuKLrlwiLHZlcmJhcjpcInxcIixWZXJiYXI6XCLigJZcIix2ZXJ0OlwifFwiLFZlcnQ6XCLigJZcIixWZXJ0aWNhbEJhcjpcIuKIo1wiLFZlcnRpY2FsTGluZTpcInxcIixWZXJ0aWNhbFNlcGFyYXRvcjpcIuKdmFwiLFZlcnRpY2FsVGlsZGU6XCLiiYBcIixWZXJ5VGhpblNwYWNlOlwi4oCKXCIsVmZyOlwi8J2UmVwiLHZmcjpcIvCdlLNcIix2bHRyaTpcIuKKslwiLHZuc3ViOlwi4oqC4oOSXCIsdm5zdXA6XCLiioPig5JcIixWb3BmOlwi8J2VjVwiLHZvcGY6XCLwnZWnXCIsdnByb3A6XCLiiJ1cIix2cnRyaTpcIuKKs1wiLFZzY3I6XCLwnZKxXCIsdnNjcjpcIvCdk4tcIix2c3VibkU6XCLiq4vvuIBcIix2c3VibmU6XCLiiorvuIBcIix2c3VwbkU6XCLiq4zvuIBcIix2c3VwbmU6XCLiiovvuIBcIixWdmRhc2g6XCLiiqpcIix2emlnemFnOlwi4qaaXCIsV2NpcmM6XCLFtFwiLHdjaXJjOlwixbVcIix3ZWRiYXI6XCLiqZ9cIix3ZWRnZTpcIuKIp1wiLFdlZGdlOlwi4ouAXCIsd2VkZ2VxOlwi4omZXCIsd2VpZXJwOlwi4oSYXCIsV2ZyOlwi8J2UmlwiLHdmcjpcIvCdlLRcIixXb3BmOlwi8J2VjlwiLHdvcGY6XCLwnZWoXCIsd3A6XCLihJhcIix3cjpcIuKJgFwiLHdyZWF0aDpcIuKJgFwiLFdzY3I6XCLwnZKyXCIsd3NjcjpcIvCdk4xcIix4Y2FwOlwi4ouCXCIseGNpcmM6XCLil69cIix4Y3VwOlwi4ouDXCIseGR0cmk6XCLilr1cIixYZnI6XCLwnZSbXCIseGZyOlwi8J2UtVwiLHhoYXJyOlwi4p+3XCIseGhBcnI6XCLin7pcIixYaTpcIs6eXCIseGk6XCLOvlwiLHhsYXJyOlwi4p+1XCIseGxBcnI6XCLin7hcIix4bWFwOlwi4p+8XCIseG5pczpcIuKLu1wiLHhvZG90Olwi4qiAXCIsWG9wZjpcIvCdlY9cIix4b3BmOlwi8J2VqVwiLHhvcGx1czpcIuKogVwiLHhvdGltZTpcIuKoglwiLHhyYXJyOlwi4p+2XCIseHJBcnI6XCLin7lcIixYc2NyOlwi8J2Ss1wiLHhzY3I6XCLwnZONXCIseHNxY3VwOlwi4qiGXCIseHVwbHVzOlwi4qiEXCIseHV0cmk6XCLilrNcIix4dmVlOlwi4ouBXCIseHdlZGdlOlwi4ouAXCIsWWFjdXRlOlwiw51cIix5YWN1dGU6XCLDvVwiLFlBY3k6XCLQr1wiLHlhY3k6XCLRj1wiLFljaXJjOlwixbZcIix5Y2lyYzpcIsW3XCIsWWN5Olwi0KtcIix5Y3k6XCLRi1wiLHllbjpcIsKlXCIsWWZyOlwi8J2UnFwiLHlmcjpcIvCdlLZcIixZSWN5Olwi0IdcIix5aWN5Olwi0ZdcIixZb3BmOlwi8J2VkFwiLHlvcGY6XCLwnZWqXCIsWXNjcjpcIvCdkrRcIix5c2NyOlwi8J2TjlwiLFlVY3k6XCLQrlwiLHl1Y3k6XCLRjlwiLHl1bWw6XCLDv1wiLFl1bWw6XCLFuFwiLFphY3V0ZTpcIsW5XCIsemFjdXRlOlwixbpcIixaY2Fyb246XCLFvVwiLHpjYXJvbjpcIsW+XCIsWmN5Olwi0JdcIix6Y3k6XCLQt1wiLFpkb3Q6XCLFu1wiLHpkb3Q6XCLFvFwiLHplZXRyZjpcIuKEqFwiLFplcm9XaWR0aFNwYWNlOlwi4oCLXCIsWmV0YTpcIs6WXCIsemV0YTpcIs62XCIsemZyOlwi8J2Ut1wiLFpmcjpcIuKEqFwiLFpIY3k6XCLQllwiLHpoY3k6XCLQtlwiLHppZ3JhcnI6XCLih51cIix6b3BmOlwi8J2Vq1wiLFpvcGY6XCLihKRcIixac2NyOlwi8J2StVwiLHpzY3I6XCLwnZOPXCIsendqOlwi4oCNXCIsenduajpcIuKAjFwifX0se31dLDUzOltmdW5jdGlvbihlLHIsdCl7ZnVuY3Rpb24gbihlKXt2YXIgcj1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMSk7cmV0dXJuIHIuZm9yRWFjaChmdW5jdGlvbihyKXtyJiZPYmplY3Qua2V5cyhyKS5mb3JFYWNoKGZ1bmN0aW9uKHQpe2VbdF09clt0XX0pfSksZX1mdW5jdGlvbiBvKGUpe3JldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSl9ZnVuY3Rpb24gcyhlKXtyZXR1cm5cIltvYmplY3QgRnVuY3Rpb25dXCI9PT1vKGUpfWZ1bmN0aW9uIGkoZSl7cmV0dXJuIGUucmVwbGFjZSgvWy4/KiteJFtcXF1cXFxcKCl7fXwtXS9nLFwiXFxcXCQmXCIpfXZhciBhPXtmdXp6eUxpbms6ITAsZnV6enlFbWFpbDohMCxmdXp6eUlQOiExfSxsPXtcImh0dHA6XCI6e3ZhbGlkYXRlOmZ1bmN0aW9uKGUscix0KXt2YXIgbj1lLnNsaWNlKHIpO3JldHVybiB0LnJlLmh0dHB8fCh0LnJlLmh0dHA9bmV3IFJlZ0V4cChcIl5cXFxcL1xcXFwvXCIrdC5yZS5zcmNfYXV0aCt0LnJlLnNyY19ob3N0X3BvcnRfc3RyaWN0K3QucmUuc3JjX3BhdGgsXCJpXCIpKSx0LnJlLmh0dHAudGVzdChuKT9uLm1hdGNoKHQucmUuaHR0cClbMF0ubGVuZ3RoOjB9fSxcImh0dHBzOlwiOlwiaHR0cDpcIixcImZ0cDpcIjpcImh0dHA6XCIsXCIvL1wiOnt2YWxpZGF0ZTpmdW5jdGlvbihlLHIsdCl7dmFyIG49ZS5zbGljZShyKTtyZXR1cm4gdC5yZS5ub19odHRwfHwodC5yZS5ub19odHRwPW5ldyBSZWdFeHAoXCJeXCIrdC5yZS5zcmNfYXV0aCtcIig/OmxvY2FsaG9zdHwoPzooPzpcIit0LnJlLnNyY19kb21haW4rXCIpXFxcXC4pK1wiK3QucmUuc3JjX2RvbWFpbl9yb290K1wiKVwiK3QucmUuc3JjX3BvcnQrdC5yZS5zcmNfaG9zdF90ZXJtaW5hdG9yK3QucmUuc3JjX3BhdGgsXCJpXCIpKSx0LnJlLm5vX2h0dHAudGVzdChuKT9yPj0zJiZcIjpcIj09PWVbci0zXT8wOnI+PTMmJlwiL1wiPT09ZVtyLTNdPzA6bi5tYXRjaCh0LnJlLm5vX2h0dHApWzBdLmxlbmd0aDowfX0sXCJtYWlsdG86XCI6e3ZhbGlkYXRlOmZ1bmN0aW9uKGUscix0KXt2YXIgbj1lLnNsaWNlKHIpO3JldHVybiB0LnJlLm1haWx0b3x8KHQucmUubWFpbHRvPW5ldyBSZWdFeHAoXCJeXCIrdC5yZS5zcmNfZW1haWxfbmFtZStcIkBcIit0LnJlLnNyY19ob3N0X3N0cmljdCxcImlcIikpLHQucmUubWFpbHRvLnRlc3Qobik/bi5tYXRjaCh0LnJlLm1haWx0bylbMF0ubGVuZ3RoOjB9fX0sYz1cImFbY2RlZmdpbG1ub3Fyc3R1d3h6XXxiW2FiZGVmZ2hpam1ub3JzdHZ3eXpdfGNbYWNkZmdoaWtsbW5vcnV2d3h5el18ZFtlamttb3pdfGVbY2VncnN0dV18Zltpamttb3JdfGdbYWJkZWZnaGlsbW5wcXJzdHV3eV18aFtrbW5ydHVdfGlbZGVsbW5vcXJzdF18altlbW9wXXxrW2VnaGltbnByd3l6XXxsW2FiY2lrcnN0dXZ5XXxtW2FjZGVnaGtsbW5vcHFyc3R1dnd4eXpdfG5bYWNlZmdpbG9wcnV6XXxvbXxwW2FlZmdoa2xtbnJzdHd5XXxxYXxyW2Vvc3V3XXxzW2FiY2RlZ2hpamtsbW5vcnR1dnh5el18dFtjZGZnaGprbG1ub3J0dnd6XXx1W2Fna3N5el18dlthY2VnaW51XXx3W2ZzXXx5W2V0XXx6W2Ftd11cIix1PVwiYml6fGNvbXxlZHV8Z292fG5ldHxvcmd8cHJvfHdlYnx4eHh8YWVyb3xhc2lhfGNvb3B8aW5mb3xtdXNldW18bmFtZXxzaG9wfNGA0YRcIi5zcGxpdChcInxcIik7ZnVuY3Rpb24gcChyKXt2YXIgdD1yLnJlPWUoXCIuL2xpYi9yZVwiKShyLl9fb3B0c19fKSxuPXIuX190bGRzX18uc2xpY2UoKTtmdW5jdGlvbiBhKGUpe3JldHVybiBlLnJlcGxhY2UoXCIlVExEUyVcIix0LnNyY190bGRzKX1yLm9uQ29tcGlsZSgpLHIuX190bGRzX3JlcGxhY2VkX198fG4ucHVzaChjKSxuLnB1c2godC5zcmNfeG4pLHQuc3JjX3RsZHM9bi5qb2luKFwifFwiKSx0LmVtYWlsX2Z1enp5PVJlZ0V4cChhKHQudHBsX2VtYWlsX2Z1enp5KSxcImlcIiksdC5saW5rX2Z1enp5PVJlZ0V4cChhKHQudHBsX2xpbmtfZnV6enkpLFwiaVwiKSx0Lmxpbmtfbm9faXBfZnV6enk9UmVnRXhwKGEodC50cGxfbGlua19ub19pcF9mdXp6eSksXCJpXCIpLHQuaG9zdF9mdXp6eV90ZXN0PVJlZ0V4cChhKHQudHBsX2hvc3RfZnV6enlfdGVzdCksXCJpXCIpO3ZhciBsPVtdO2Z1bmN0aW9uIHUoZSxyKXt0aHJvdyBuZXcgRXJyb3IoJyhMaW5raWZ5SXQpIEludmFsaWQgc2NoZW1hIFwiJytlKydcIjogJytyKX1yLl9fY29tcGlsZWRfXz17fSxPYmplY3Qua2V5cyhyLl9fc2NoZW1hc19fKS5mb3JFYWNoKGZ1bmN0aW9uKGUpe3ZhciB0PXIuX19zY2hlbWFzX19bZV07aWYobnVsbCE9PXQpe3ZhciBuLGk9e3ZhbGlkYXRlOm51bGwsbGluazpudWxsfTtpZihyLl9fY29tcGlsZWRfX1tlXT1pLFwiW29iamVjdCBPYmplY3RdXCI9PT1vKHQpKXJldHVybiBmdW5jdGlvbihlKXtyZXR1cm5cIltvYmplY3QgUmVnRXhwXVwiPT09byhlKX0odC52YWxpZGF0ZSk/aS52YWxpZGF0ZT0obj10LnZhbGlkYXRlLGZ1bmN0aW9uKGUscil7dmFyIHQ9ZS5zbGljZShyKTtyZXR1cm4gbi50ZXN0KHQpP3QubWF0Y2gobilbMF0ubGVuZ3RoOjB9KTpzKHQudmFsaWRhdGUpP2kudmFsaWRhdGU9dC52YWxpZGF0ZTp1KGUsdCksdm9pZChzKHQubm9ybWFsaXplKT9pLm5vcm1hbGl6ZT10Lm5vcm1hbGl6ZTp0Lm5vcm1hbGl6ZT91KGUsdCk6aS5ub3JtYWxpemU9ZnVuY3Rpb24oZSxyKXtyLm5vcm1hbGl6ZShlKX0pOyFmdW5jdGlvbihlKXtyZXR1cm5cIltvYmplY3QgU3RyaW5nXVwiPT09byhlKX0odCk/dShlLHQpOmwucHVzaChlKX19KSxsLmZvckVhY2goZnVuY3Rpb24oZSl7ci5fX2NvbXBpbGVkX19bci5fX3NjaGVtYXNfX1tlXV0mJihyLl9fY29tcGlsZWRfX1tlXS52YWxpZGF0ZT1yLl9fY29tcGlsZWRfX1tyLl9fc2NoZW1hc19fW2VdXS52YWxpZGF0ZSxyLl9fY29tcGlsZWRfX1tlXS5ub3JtYWxpemU9ci5fX2NvbXBpbGVkX19bci5fX3NjaGVtYXNfX1tlXV0ubm9ybWFsaXplKX0pLHIuX19jb21waWxlZF9fW1wiXCJdPXt2YWxpZGF0ZTpudWxsLG5vcm1hbGl6ZTpmdW5jdGlvbihlLHIpe3Iubm9ybWFsaXplKGUpfX07dmFyIHA9T2JqZWN0LmtleXMoci5fX2NvbXBpbGVkX18pLmZpbHRlcihmdW5jdGlvbihlKXtyZXR1cm4gZS5sZW5ndGg+MCYmci5fX2NvbXBpbGVkX19bZV19KS5tYXAoaSkuam9pbihcInxcIik7ci5yZS5zY2hlbWFfdGVzdD1SZWdFeHAoXCIoXnwoPyFfKSg/Ols+PO+9nF18XCIrdC5zcmNfWlBDYytcIikpKFwiK3ArXCIpXCIsXCJpXCIpLHIucmUuc2NoZW1hX3NlYXJjaD1SZWdFeHAoXCIoXnwoPyFfKSg/Ols+PO+9nF18XCIrdC5zcmNfWlBDYytcIikpKFwiK3ArXCIpXCIsXCJpZ1wiKSxyLnJlLnByZXRlc3Q9UmVnRXhwKFwiKFwiK3IucmUuc2NoZW1hX3Rlc3Quc291cmNlK1wiKXwoXCIrci5yZS5ob3N0X2Z1enp5X3Rlc3Quc291cmNlK1wiKXxAXCIsXCJpXCIpLGZ1bmN0aW9uKGUpe2UuX19pbmRleF9fPS0xLGUuX190ZXh0X2NhY2hlX189XCJcIn0ocil9ZnVuY3Rpb24gaChlLHIpe3ZhciB0PWUuX19pbmRleF9fLG49ZS5fX2xhc3RfaW5kZXhfXyxvPWUuX190ZXh0X2NhY2hlX18uc2xpY2UodCxuKTt0aGlzLnNjaGVtYT1lLl9fc2NoZW1hX18udG9Mb3dlckNhc2UoKSx0aGlzLmluZGV4PXQrcix0aGlzLmxhc3RJbmRleD1uK3IsdGhpcy5yYXc9byx0aGlzLnRleHQ9byx0aGlzLnVybD1vfWZ1bmN0aW9uIGYoZSxyKXt2YXIgdD1uZXcgaChlLHIpO3JldHVybiBlLl9fY29tcGlsZWRfX1t0LnNjaGVtYV0ubm9ybWFsaXplKHQsZSksdH1mdW5jdGlvbiBkKGUscil7aWYoISh0aGlzIGluc3RhbmNlb2YgZCkpcmV0dXJuIG5ldyBkKGUscik7dmFyIHQ7cnx8KHQ9ZSxPYmplY3Qua2V5cyh0fHx7fSkucmVkdWNlKGZ1bmN0aW9uKGUscil7cmV0dXJuIGV8fGEuaGFzT3duUHJvcGVydHkocil9LCExKSYmKHI9ZSxlPXt9KSksdGhpcy5fX29wdHNfXz1uKHt9LGEsciksdGhpcy5fX2luZGV4X189LTEsdGhpcy5fX2xhc3RfaW5kZXhfXz0tMSx0aGlzLl9fc2NoZW1hX189XCJcIix0aGlzLl9fdGV4dF9jYWNoZV9fPVwiXCIsdGhpcy5fX3NjaGVtYXNfXz1uKHt9LGwsZSksdGhpcy5fX2NvbXBpbGVkX189e30sdGhpcy5fX3RsZHNfXz11LHRoaXMuX190bGRzX3JlcGxhY2VkX189ITEsdGhpcy5yZT17fSxwKHRoaXMpfWQucHJvdG90eXBlLmFkZD1mdW5jdGlvbihlLHIpe3JldHVybiB0aGlzLl9fc2NoZW1hc19fW2VdPXIscCh0aGlzKSx0aGlzfSxkLnByb3RvdHlwZS5zZXQ9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuX19vcHRzX189bih0aGlzLl9fb3B0c19fLGUpLHRoaXN9LGQucHJvdG90eXBlLnRlc3Q9ZnVuY3Rpb24oZSl7aWYodGhpcy5fX3RleHRfY2FjaGVfXz1lLHRoaXMuX19pbmRleF9fPS0xLCFlLmxlbmd0aClyZXR1cm4hMTt2YXIgcix0LG4sbyxzLGksYSxsO2lmKHRoaXMucmUuc2NoZW1hX3Rlc3QudGVzdChlKSlmb3IoKGE9dGhpcy5yZS5zY2hlbWFfc2VhcmNoKS5sYXN0SW5kZXg9MDtudWxsIT09KHI9YS5leGVjKGUpKTspaWYobz10aGlzLnRlc3RTY2hlbWFBdChlLHJbMl0sYS5sYXN0SW5kZXgpKXt0aGlzLl9fc2NoZW1hX189clsyXSx0aGlzLl9faW5kZXhfXz1yLmluZGV4K3JbMV0ubGVuZ3RoLHRoaXMuX19sYXN0X2luZGV4X189ci5pbmRleCtyWzBdLmxlbmd0aCtvO2JyZWFrfXJldHVybiB0aGlzLl9fb3B0c19fLmZ1enp5TGluayYmdGhpcy5fX2NvbXBpbGVkX19bXCJodHRwOlwiXSYmKGw9ZS5zZWFyY2godGhpcy5yZS5ob3N0X2Z1enp5X3Rlc3QpKT49MCYmKHRoaXMuX19pbmRleF9fPDB8fGw8dGhpcy5fX2luZGV4X18pJiZudWxsIT09KHQ9ZS5tYXRjaCh0aGlzLl9fb3B0c19fLmZ1enp5SVA/dGhpcy5yZS5saW5rX2Z1enp5OnRoaXMucmUubGlua19ub19pcF9mdXp6eSkpJiYocz10LmluZGV4K3RbMV0ubGVuZ3RoLCh0aGlzLl9faW5kZXhfXzwwfHxzPHRoaXMuX19pbmRleF9fKSYmKHRoaXMuX19zY2hlbWFfXz1cIlwiLHRoaXMuX19pbmRleF9fPXMsdGhpcy5fX2xhc3RfaW5kZXhfXz10LmluZGV4K3RbMF0ubGVuZ3RoKSksdGhpcy5fX29wdHNfXy5mdXp6eUVtYWlsJiZ0aGlzLl9fY29tcGlsZWRfX1tcIm1haWx0bzpcIl0mJmUuaW5kZXhPZihcIkBcIik+PTAmJm51bGwhPT0obj1lLm1hdGNoKHRoaXMucmUuZW1haWxfZnV6enkpKSYmKHM9bi5pbmRleCtuWzFdLmxlbmd0aCxpPW4uaW5kZXgrblswXS5sZW5ndGgsKHRoaXMuX19pbmRleF9fPDB8fHM8dGhpcy5fX2luZGV4X198fHM9PT10aGlzLl9faW5kZXhfXyYmaT50aGlzLl9fbGFzdF9pbmRleF9fKSYmKHRoaXMuX19zY2hlbWFfXz1cIm1haWx0bzpcIix0aGlzLl9faW5kZXhfXz1zLHRoaXMuX19sYXN0X2luZGV4X189aSkpLHRoaXMuX19pbmRleF9fPj0wfSxkLnByb3RvdHlwZS5wcmV0ZXN0PWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnJlLnByZXRlc3QudGVzdChlKX0sZC5wcm90b3R5cGUudGVzdFNjaGVtYUF0PWZ1bmN0aW9uKGUscix0KXtyZXR1cm4gdGhpcy5fX2NvbXBpbGVkX19bci50b0xvd2VyQ2FzZSgpXT90aGlzLl9fY29tcGlsZWRfX1tyLnRvTG93ZXJDYXNlKCldLnZhbGlkYXRlKGUsdCx0aGlzKTowfSxkLnByb3RvdHlwZS5tYXRjaD1mdW5jdGlvbihlKXt2YXIgcj0wLHQ9W107dGhpcy5fX2luZGV4X18+PTAmJnRoaXMuX190ZXh0X2NhY2hlX189PT1lJiYodC5wdXNoKGYodGhpcyxyKSkscj10aGlzLl9fbGFzdF9pbmRleF9fKTtmb3IodmFyIG49cj9lLnNsaWNlKHIpOmU7dGhpcy50ZXN0KG4pOyl0LnB1c2goZih0aGlzLHIpKSxuPW4uc2xpY2UodGhpcy5fX2xhc3RfaW5kZXhfXykscis9dGhpcy5fX2xhc3RfaW5kZXhfXztyZXR1cm4gdC5sZW5ndGg/dDpudWxsfSxkLnByb3RvdHlwZS50bGRzPWZ1bmN0aW9uKGUscil7cmV0dXJuIGU9QXJyYXkuaXNBcnJheShlKT9lOltlXSxyPyh0aGlzLl9fdGxkc19fPXRoaXMuX190bGRzX18uY29uY2F0KGUpLnNvcnQoKS5maWx0ZXIoZnVuY3Rpb24oZSxyLHQpe3JldHVybiBlIT09dFtyLTFdfSkucmV2ZXJzZSgpLHAodGhpcyksdGhpcyk6KHRoaXMuX190bGRzX189ZS5zbGljZSgpLHRoaXMuX190bGRzX3JlcGxhY2VkX189ITAscCh0aGlzKSx0aGlzKX0sZC5wcm90b3R5cGUubm9ybWFsaXplPWZ1bmN0aW9uKGUpe2Uuc2NoZW1hfHwoZS51cmw9XCJodHRwOi8vXCIrZS51cmwpLFwibWFpbHRvOlwiIT09ZS5zY2hlbWF8fC9ebWFpbHRvOi9pLnRlc3QoZS51cmwpfHwoZS51cmw9XCJtYWlsdG86XCIrZS51cmwpfSxkLnByb3RvdHlwZS5vbkNvbXBpbGU9ZnVuY3Rpb24oKXt9LHIuZXhwb3J0cz1kfSx7XCIuL2xpYi9yZVwiOjU0fV0sNTQ6W2Z1bmN0aW9uKGUscix0KXtyLmV4cG9ydHM9ZnVuY3Rpb24ocil7dmFyIHQ9e307cmV0dXJuIHQuc3JjX0FueT1lKFwidWMubWljcm8vcHJvcGVydGllcy9BbnkvcmVnZXhcIikuc291cmNlLHQuc3JjX0NjPWUoXCJ1Yy5taWNyby9jYXRlZ29yaWVzL0NjL3JlZ2V4XCIpLnNvdXJjZSx0LnNyY19aPWUoXCJ1Yy5taWNyby9jYXRlZ29yaWVzL1ovcmVnZXhcIikuc291cmNlLHQuc3JjX1A9ZShcInVjLm1pY3JvL2NhdGVnb3JpZXMvUC9yZWdleFwiKS5zb3VyY2UsdC5zcmNfWlBDYz1bdC5zcmNfWix0LnNyY19QLHQuc3JjX0NjXS5qb2luKFwifFwiKSx0LnNyY19aQ2M9W3Quc3JjX1osdC5zcmNfQ2NdLmpvaW4oXCJ8XCIpLHQuc3JjX3BzZXVkb19sZXR0ZXI9XCIoPzooPyFbPjzvvZxdfFwiK3Quc3JjX1pQQ2MrXCIpXCIrdC5zcmNfQW55K1wiKVwiLHQuc3JjX2lwND1cIig/OigyNVswLTVdfDJbMC00XVswLTldfFswMV0/WzAtOV1bMC05XT8pXFxcXC4pezN9KDI1WzAtNV18MlswLTRdWzAtOV18WzAxXT9bMC05XVswLTldPylcIix0LnNyY19hdXRoPVwiKD86KD86KD8hXCIrdC5zcmNfWkNjK1wifFtAL1xcXFxbXFxcXF0oKV0pLikrQCk/XCIsdC5zcmNfcG9ydD1cIig/OjooPzo2KD86WzAtNF1cXFxcZHszfXw1KD86WzAtNF1cXFxcZHsyfXw1KD86WzAtMl1cXFxcZHwzWzAtNV0pKSl8WzEtNV0/XFxcXGR7MSw0fSkpP1wiLHQuc3JjX2hvc3RfdGVybWluYXRvcj1cIig/PSR8Wz48772cXXxcIit0LnNyY19aUENjK1wiKSg/IS18X3w6XFxcXGR8XFxcXC4tfFxcXFwuKD8hJHxcIit0LnNyY19aUENjK1wiKSlcIix0LnNyY19wYXRoPVwiKD86Wy8/I10oPzooPyFcIit0LnNyY19aQ2MrXCJ8Wz48772cXXxbKClbXFxcXF17fS4sXFxcIic/IVxcXFwtXSkufFxcXFxbKD86KD8hXCIrdC5zcmNfWkNjK1wifFxcXFxdKS4pKlxcXFxdfFxcXFwoKD86KD8hXCIrdC5zcmNfWkNjK1wifFspXSkuKSpcXFxcKXxcXFxceyg/Oig/IVwiK3Quc3JjX1pDYysnfFt9XSkuKSpcXFxcfXxcXFxcXCIoPzooPyEnK3Quc3JjX1pDYysnfFtcIl0pLikrXFxcXFwifFxcXFxcXCcoPzooPyEnK3Quc3JjX1pDYytcInxbJ10pLikrXFxcXCd8XFxcXCcoPz1cIit0LnNyY19wc2V1ZG9fbGV0dGVyK1wifFstXSkufFxcXFwuezIsNH1bYS16QS1aMC05JS9dfFxcXFwuKD8hXCIrdC5zcmNfWkNjK1wifFsuXSkufFwiKyhyJiZyW1wiLS0tXCJdP1wiXFxcXC0oPyEtLSg/OlteLV18JCkpKD86LSopfFwiOlwiXFxcXC0rfFwiKStcIlxcXFwsKD8hXCIrdC5zcmNfWkNjK1wiKS58XFxcXCEoPyFcIit0LnNyY19aQ2MrXCJ8WyFdKS58XFxcXD8oPyFcIit0LnNyY19aQ2MrXCJ8Wz9dKS4pK3xcXFxcLyk/XCIsdC5zcmNfZW1haWxfbmFtZT0nW1xcXFwtOzomPVxcXFwrXFxcXCQsXFxcXC5hLXpBLVowLTlfXVtcXFxcLTs6Jj1cXFxcK1xcXFwkLFxcXFxcIlxcXFwuYS16QS1aMC05X10qJyx0LnNyY194bj1cInhuLS1bYS16MC05XFxcXC1dezEsNTl9XCIsdC5zcmNfZG9tYWluX3Jvb3Q9XCIoPzpcIit0LnNyY194bitcInxcIit0LnNyY19wc2V1ZG9fbGV0dGVyK1wiezEsNjN9KVwiLHQuc3JjX2RvbWFpbj1cIig/OlwiK3Quc3JjX3huK1wifCg/OlwiK3Quc3JjX3BzZXVkb19sZXR0ZXIrXCIpfCg/OlwiK3Quc3JjX3BzZXVkb19sZXR0ZXIrXCIoPzotfFwiK3Quc3JjX3BzZXVkb19sZXR0ZXIrXCIpezAsNjF9XCIrdC5zcmNfcHNldWRvX2xldHRlcitcIikpXCIsdC5zcmNfaG9zdD1cIig/Oig/Oig/Oig/OlwiK3Quc3JjX2RvbWFpbitcIilcXFxcLikqXCIrdC5zcmNfZG9tYWluK1wiKSlcIix0LnRwbF9ob3N0X2Z1enp5PVwiKD86XCIrdC5zcmNfaXA0K1wifCg/Oig/Oig/OlwiK3Quc3JjX2RvbWFpbitcIilcXFxcLikrKD86JVRMRFMlKSkpXCIsdC50cGxfaG9zdF9ub19pcF9mdXp6eT1cIig/Oig/Oig/OlwiK3Quc3JjX2RvbWFpbitcIilcXFxcLikrKD86JVRMRFMlKSlcIix0LnNyY19ob3N0X3N0cmljdD10LnNyY19ob3N0K3Quc3JjX2hvc3RfdGVybWluYXRvcix0LnRwbF9ob3N0X2Z1enp5X3N0cmljdD10LnRwbF9ob3N0X2Z1enp5K3Quc3JjX2hvc3RfdGVybWluYXRvcix0LnNyY19ob3N0X3BvcnRfc3RyaWN0PXQuc3JjX2hvc3QrdC5zcmNfcG9ydCt0LnNyY19ob3N0X3Rlcm1pbmF0b3IsdC50cGxfaG9zdF9wb3J0X2Z1enp5X3N0cmljdD10LnRwbF9ob3N0X2Z1enp5K3Quc3JjX3BvcnQrdC5zcmNfaG9zdF90ZXJtaW5hdG9yLHQudHBsX2hvc3RfcG9ydF9ub19pcF9mdXp6eV9zdHJpY3Q9dC50cGxfaG9zdF9ub19pcF9mdXp6eSt0LnNyY19wb3J0K3Quc3JjX2hvc3RfdGVybWluYXRvcix0LnRwbF9ob3N0X2Z1enp5X3Rlc3Q9XCJsb2NhbGhvc3R8d3d3XFxcXC58XFxcXC5cXFxcZHsxLDN9XFxcXC58KD86XFxcXC4oPzolVExEUyUpKD86XCIrdC5zcmNfWlBDYytcInw+fCQpKVwiLHQudHBsX2VtYWlsX2Z1enp5PScoXnxbPjzvvZxdfFwifFxcXFwofCcrdC5zcmNfWkNjK1wiKShcIit0LnNyY19lbWFpbF9uYW1lK1wiQFwiK3QudHBsX2hvc3RfZnV6enlfc3RyaWN0K1wiKVwiLHQudHBsX2xpbmtfZnV6enk9XCIoXnwoPyFbLjovXFxcXC1fQF0pKD86WyQrPD0+XmB8772cXXxcIit0LnNyY19aUENjK1wiKSkoKD8hWyQrPD0+XmB8772cXSlcIit0LnRwbF9ob3N0X3BvcnRfZnV6enlfc3RyaWN0K3Quc3JjX3BhdGgrXCIpXCIsdC50cGxfbGlua19ub19pcF9mdXp6eT1cIihefCg/IVsuOi9cXFxcLV9AXSkoPzpbJCs8PT5eYHzvvZxdfFwiK3Quc3JjX1pQQ2MrXCIpKSgoPyFbJCs8PT5eYHzvvZxdKVwiK3QudHBsX2hvc3RfcG9ydF9ub19pcF9mdXp6eV9zdHJpY3QrdC5zcmNfcGF0aCtcIilcIix0fX0se1widWMubWljcm8vY2F0ZWdvcmllcy9DYy9yZWdleFwiOjYxLFwidWMubWljcm8vY2F0ZWdvcmllcy9QL3JlZ2V4XCI6NjMsXCJ1Yy5taWNyby9jYXRlZ29yaWVzL1ovcmVnZXhcIjo2NCxcInVjLm1pY3JvL3Byb3BlcnRpZXMvQW55L3JlZ2V4XCI6NjZ9XSw1NTpbZnVuY3Rpb24oZSxyLHQpe3ZhciBuPXt9O2Z1bmN0aW9uIG8oZSxyKXt2YXIgdDtyZXR1cm5cInN0cmluZ1wiIT10eXBlb2YgciYmKHI9by5kZWZhdWx0Q2hhcnMpLHQ9ZnVuY3Rpb24oZSl7dmFyIHIsdCxvPW5bZV07aWYobylyZXR1cm4gbztmb3Iobz1uW2VdPVtdLHI9MDtyPDEyODtyKyspdD1TdHJpbmcuZnJvbUNoYXJDb2RlKHIpLG8ucHVzaCh0KTtmb3Iocj0wO3I8ZS5sZW5ndGg7cisrKXQ9ZS5jaGFyQ29kZUF0KHIpLG9bdF09XCIlXCIrKFwiMFwiK3QudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCkpLnNsaWNlKC0yKTtyZXR1cm4gb30ociksZS5yZXBsYWNlKC8oJVthLWYwLTldezJ9KSsvZ2ksZnVuY3Rpb24oZSl7dmFyIHIsbixvLHMsaSxhLGwsYz1cIlwiO2ZvcihyPTAsbj1lLmxlbmd0aDtyPG47cis9Mykobz1wYXJzZUludChlLnNsaWNlKHIrMSxyKzMpLDE2KSk8MTI4P2MrPXRbb106MTkyPT0oMjI0Jm8pJiZyKzM8biYmMTI4PT0oMTkyJihzPXBhcnNlSW50KGUuc2xpY2Uocis0LHIrNiksMTYpKSk/KGMrPShsPW88PDYmMTk4NHw2MyZzKTwxMjg/XCLvv73vv71cIjpTdHJpbmcuZnJvbUNoYXJDb2RlKGwpLHIrPTMpOjIyND09KDI0MCZvKSYmcis2PG4mJihzPXBhcnNlSW50KGUuc2xpY2Uocis0LHIrNiksMTYpLGk9cGFyc2VJbnQoZS5zbGljZShyKzcscis5KSwxNiksMTI4PT0oMTkyJnMpJiYxMjg9PSgxOTImaSkpPyhjKz0obD1vPDwxMiY2MTQ0MHxzPDw2JjQwMzJ8NjMmaSk8MjA0OHx8bD49NTUyOTYmJmw8PTU3MzQzP1wi77+977+977+9XCI6U3RyaW5nLmZyb21DaGFyQ29kZShsKSxyKz02KToyNDA9PSgyNDgmbykmJnIrOTxuJiYocz1wYXJzZUludChlLnNsaWNlKHIrNCxyKzYpLDE2KSxpPXBhcnNlSW50KGUuc2xpY2Uocis3LHIrOSksMTYpLGE9cGFyc2VJbnQoZS5zbGljZShyKzEwLHIrMTIpLDE2KSwxMjg9PSgxOTImcykmJjEyOD09KDE5MiZpKSYmMTI4PT0oMTkyJmEpKT8oKGw9bzw8MTgmMTgzNTAwOHxzPDwxMiYyNTgwNDh8aTw8NiY0MDMyfDYzJmEpPDY1NTM2fHxsPjExMTQxMTE/Yys9XCLvv73vv73vv73vv71cIjoobC09NjU1MzYsYys9U3RyaW5nLmZyb21DaGFyQ29kZSg1NTI5NisobD4+MTApLDU2MzIwKygxMDIzJmwpKSkscis9OSk6Yys9XCLvv71cIjtyZXR1cm4gY30pfW8uZGVmYXVsdENoYXJzPVwiOy8/OkAmPSskLCNcIixvLmNvbXBvbmVudENoYXJzPVwiXCIsci5leHBvcnRzPW99LHt9XSw1NjpbZnVuY3Rpb24oZSxyLHQpe3ZhciBuPXt9O2Z1bmN0aW9uIG8oZSxyLHQpe3ZhciBzLGksYSxsLGMsdT1cIlwiO2ZvcihcInN0cmluZ1wiIT10eXBlb2YgciYmKHQ9cixyPW8uZGVmYXVsdENoYXJzKSx2b2lkIDA9PT10JiYodD0hMCksYz1mdW5jdGlvbihlKXt2YXIgcix0LG89bltlXTtpZihvKXJldHVybiBvO2ZvcihvPW5bZV09W10scj0wO3I8MTI4O3IrKyl0PVN0cmluZy5mcm9tQ2hhckNvZGUociksL15bMC05YS16XSQvaS50ZXN0KHQpP28ucHVzaCh0KTpvLnB1c2goXCIlXCIrKFwiMFwiK3IudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCkpLnNsaWNlKC0yKSk7Zm9yKHI9MDtyPGUubGVuZ3RoO3IrKylvW2UuY2hhckNvZGVBdChyKV09ZVtyXTtyZXR1cm4gb30ocikscz0wLGk9ZS5sZW5ndGg7czxpO3MrKylpZihhPWUuY2hhckNvZGVBdChzKSx0JiYzNz09PWEmJnMrMjxpJiYvXlswLTlhLWZdezJ9JC9pLnRlc3QoZS5zbGljZShzKzEscyszKSkpdSs9ZS5zbGljZShzLHMrMykscys9MjtlbHNlIGlmKGE8MTI4KXUrPWNbYV07ZWxzZSBpZihhPj01NTI5NiYmYTw9NTczNDMpe2lmKGE+PTU1Mjk2JiZhPD01NjMxOSYmcysxPGkmJihsPWUuY2hhckNvZGVBdChzKzEpKT49NTYzMjAmJmw8PTU3MzQzKXt1Kz1lbmNvZGVVUklDb21wb25lbnQoZVtzXStlW3MrMV0pLHMrKztjb250aW51ZX11Kz1cIiVFRiVCRiVCRFwifWVsc2UgdSs9ZW5jb2RlVVJJQ29tcG9uZW50KGVbc10pO3JldHVybiB1fW8uZGVmYXVsdENoYXJzPVwiOy8/OkAmPSskLC1fLiF+KicoKSNcIixvLmNvbXBvbmVudENoYXJzPVwiLV8uIX4qJygpXCIsci5leHBvcnRzPW99LHt9XSw1NzpbZnVuY3Rpb24oZSxyLHQpe3IuZXhwb3J0cz1mdW5jdGlvbihlKXt2YXIgcj1cIlwiO3JldHVybiByKz1lLnByb3RvY29sfHxcIlwiLHIrPWUuc2xhc2hlcz9cIi8vXCI6XCJcIixyKz1lLmF1dGg/ZS5hdXRoK1wiQFwiOlwiXCIsZS5ob3N0bmFtZSYmLTEhPT1lLmhvc3RuYW1lLmluZGV4T2YoXCI6XCIpP3IrPVwiW1wiK2UuaG9zdG5hbWUrXCJdXCI6cis9ZS5ob3N0bmFtZXx8XCJcIixyKz1lLnBvcnQ/XCI6XCIrZS5wb3J0OlwiXCIscis9ZS5wYXRobmFtZXx8XCJcIixyKz1lLnNlYXJjaHx8XCJcIixyKz1lLmhhc2h8fFwiXCJ9fSx7fV0sNTg6W2Z1bmN0aW9uKGUscix0KXtyLmV4cG9ydHMuZW5jb2RlPWUoXCIuL2VuY29kZVwiKSxyLmV4cG9ydHMuZGVjb2RlPWUoXCIuL2RlY29kZVwiKSxyLmV4cG9ydHMuZm9ybWF0PWUoXCIuL2Zvcm1hdFwiKSxyLmV4cG9ydHMucGFyc2U9ZShcIi4vcGFyc2VcIil9LHtcIi4vZGVjb2RlXCI6NTUsXCIuL2VuY29kZVwiOjU2LFwiLi9mb3JtYXRcIjo1NyxcIi4vcGFyc2VcIjo1OX1dLDU5OltmdW5jdGlvbihlLHIsdCl7ZnVuY3Rpb24gbigpe3RoaXMucHJvdG9jb2w9bnVsbCx0aGlzLnNsYXNoZXM9bnVsbCx0aGlzLmF1dGg9bnVsbCx0aGlzLnBvcnQ9bnVsbCx0aGlzLmhvc3RuYW1lPW51bGwsdGhpcy5oYXNoPW51bGwsdGhpcy5zZWFyY2g9bnVsbCx0aGlzLnBhdGhuYW1lPW51bGx9dmFyIG89L14oW2EtejAtOS4rLV0rOikvaSxzPS86WzAtOV0qJC8saT0vXihcXC9cXC8/KD8hXFwvKVteXFw/XFxzXSopKFxcP1teXFxzXSopPyQvLGE9W1wie1wiLFwifVwiLFwifFwiLFwiXFxcXFwiLFwiXlwiLFwiYFwiXS5jb25jYXQoW1wiPFwiLFwiPlwiLCdcIicsXCJgXCIsXCIgXCIsXCJcXHJcIixcIlxcblwiLFwiXFx0XCJdKSxsPVtcIidcIl0uY29uY2F0KGEpLGM9W1wiJVwiLFwiL1wiLFwiP1wiLFwiO1wiLFwiI1wiXS5jb25jYXQobCksdT1bXCIvXCIsXCI/XCIsXCIjXCJdLHA9L15bK2EtejAtOUEtWl8tXXswLDYzfSQvLGg9L14oWythLXowLTlBLVpfLV17MCw2M30pKC4qKSQvLGY9e2phdmFzY3JpcHQ6ITAsXCJqYXZhc2NyaXB0OlwiOiEwfSxkPXtodHRwOiEwLGh0dHBzOiEwLGZ0cDohMCxnb3BoZXI6ITAsZmlsZTohMCxcImh0dHA6XCI6ITAsXCJodHRwczpcIjohMCxcImZ0cDpcIjohMCxcImdvcGhlcjpcIjohMCxcImZpbGU6XCI6ITB9O24ucHJvdG90eXBlLnBhcnNlPWZ1bmN0aW9uKGUscil7dmFyIHQsbixzLGEsbCxtPWU7aWYobT1tLnRyaW0oKSwhciYmMT09PWUuc3BsaXQoXCIjXCIpLmxlbmd0aCl7dmFyIF89aS5leGVjKG0pO2lmKF8pcmV0dXJuIHRoaXMucGF0aG5hbWU9X1sxXSxfWzJdJiYodGhpcy5zZWFyY2g9X1syXSksdGhpc312YXIgZz1vLmV4ZWMobSk7aWYoZyYmKGc9Z1swXSxzPWcudG9Mb3dlckNhc2UoKSx0aGlzLnByb3RvY29sPWcsbT1tLnN1YnN0cihnLmxlbmd0aCkpLChyfHxnfHxtLm1hdGNoKC9eXFwvXFwvW15AXFwvXStAW15AXFwvXSsvKSkmJighKGw9XCIvL1wiPT09bS5zdWJzdHIoMCwyKSl8fGcmJmZbZ118fChtPW0uc3Vic3RyKDIpLHRoaXMuc2xhc2hlcz0hMCkpLCFmW2ddJiYobHx8ZyYmIWRbZ10pKXt2YXIgayxiLHY9LTE7Zm9yKHQ9MDt0PHUubGVuZ3RoO3QrKyktMSE9PShhPW0uaW5kZXhPZih1W3RdKSkmJigtMT09PXZ8fGE8dikmJih2PWEpO2ZvcigtMSE9PShiPS0xPT09dj9tLmxhc3RJbmRleE9mKFwiQFwiKTptLmxhc3RJbmRleE9mKFwiQFwiLHYpKSYmKGs9bS5zbGljZSgwLGIpLG09bS5zbGljZShiKzEpLHRoaXMuYXV0aD1rKSx2PS0xLHQ9MDt0PGMubGVuZ3RoO3QrKyktMSE9PShhPW0uaW5kZXhPZihjW3RdKSkmJigtMT09PXZ8fGE8dikmJih2PWEpOy0xPT09diYmKHY9bS5sZW5ndGgpLFwiOlwiPT09bVt2LTFdJiZ2LS07dmFyIHk9bS5zbGljZSgwLHYpO209bS5zbGljZSh2KSx0aGlzLnBhcnNlSG9zdCh5KSx0aGlzLmhvc3RuYW1lPXRoaXMuaG9zdG5hbWV8fFwiXCI7dmFyIHg9XCJbXCI9PT10aGlzLmhvc3RuYW1lWzBdJiZcIl1cIj09PXRoaXMuaG9zdG5hbWVbdGhpcy5ob3N0bmFtZS5sZW5ndGgtMV07aWYoIXgpe3ZhciBDPXRoaXMuaG9zdG5hbWUuc3BsaXQoL1xcLi8pO2Zvcih0PTAsbj1DLmxlbmd0aDt0PG47dCsrKXt2YXIgQT1DW3RdO2lmKEEmJiFBLm1hdGNoKHApKXtmb3IodmFyIHc9XCJcIixEPTAsRT1BLmxlbmd0aDtEPEU7RCsrKUEuY2hhckNvZGVBdChEKT4xMjc/dys9XCJ4XCI6dys9QVtEXTtpZighdy5tYXRjaChwKSl7dmFyIHE9Qy5zbGljZSgwLHQpLEY9Qy5zbGljZSh0KzEpLFM9QS5tYXRjaChoKTtTJiYocS5wdXNoKFNbMV0pLEYudW5zaGlmdChTWzJdKSksRi5sZW5ndGgmJihtPUYuam9pbihcIi5cIikrbSksdGhpcy5ob3N0bmFtZT1xLmpvaW4oXCIuXCIpO2JyZWFrfX19fXRoaXMuaG9zdG5hbWUubGVuZ3RoPjI1NSYmKHRoaXMuaG9zdG5hbWU9XCJcIikseCYmKHRoaXMuaG9zdG5hbWU9dGhpcy5ob3N0bmFtZS5zdWJzdHIoMSx0aGlzLmhvc3RuYW1lLmxlbmd0aC0yKSl9dmFyIEw9bS5pbmRleE9mKFwiI1wiKTstMSE9PUwmJih0aGlzLmhhc2g9bS5zdWJzdHIoTCksbT1tLnNsaWNlKDAsTCkpO3ZhciB6PW0uaW5kZXhPZihcIj9cIik7cmV0dXJuLTEhPT16JiYodGhpcy5zZWFyY2g9bS5zdWJzdHIoeiksbT1tLnNsaWNlKDAseikpLG0mJih0aGlzLnBhdGhuYW1lPW0pLGRbc10mJnRoaXMuaG9zdG5hbWUmJiF0aGlzLnBhdGhuYW1lJiYodGhpcy5wYXRobmFtZT1cIlwiKSx0aGlzfSxuLnByb3RvdHlwZS5wYXJzZUhvc3Q9ZnVuY3Rpb24oZSl7dmFyIHI9cy5leGVjKGUpO3ImJihcIjpcIiE9PShyPXJbMF0pJiYodGhpcy5wb3J0PXIuc3Vic3RyKDEpKSxlPWUuc3Vic3RyKDAsZS5sZW5ndGgtci5sZW5ndGgpKSxlJiYodGhpcy5ob3N0bmFtZT1lKX0sci5leHBvcnRzPWZ1bmN0aW9uKGUscil7aWYoZSYmZSBpbnN0YW5jZW9mIG4pcmV0dXJuIGU7dmFyIHQ9bmV3IG47cmV0dXJuIHQucGFyc2UoZSxyKSx0fX0se31dLDYwOltmdW5jdGlvbihyLHQsbil7KGZ1bmN0aW9uKGUpeyFmdW5jdGlvbihyKXt2YXIgbz1cIm9iamVjdFwiPT10eXBlb2YgbiYmbiYmIW4ubm9kZVR5cGUmJm4scz1cIm9iamVjdFwiPT10eXBlb2YgdCYmdCYmIXQubm9kZVR5cGUmJnQsaT1cIm9iamVjdFwiPT10eXBlb2YgZSYmZTtpLmdsb2JhbCE9PWkmJmkud2luZG93IT09aSYmaS5zZWxmIT09aXx8KHI9aSk7dmFyIGEsbCxjPTIxNDc0ODM2NDcsdT0zNixwPTEsaD0yNixmPTM4LGQ9NzAwLG09NzIsXz0xMjgsZz1cIi1cIixrPS9eeG4tLS8sYj0vW15cXHgyMC1cXHg3RV0vLHY9L1tcXHgyRVxcdTMwMDJcXHVGRjBFXFx1RkY2MV0vZyx5PXtvdmVyZmxvdzpcIk92ZXJmbG93OiBpbnB1dCBuZWVkcyB3aWRlciBpbnRlZ2VycyB0byBwcm9jZXNzXCIsXCJub3QtYmFzaWNcIjpcIklsbGVnYWwgaW5wdXQgPj0gMHg4MCAobm90IGEgYmFzaWMgY29kZSBwb2ludClcIixcImludmFsaWQtaW5wdXRcIjpcIkludmFsaWQgaW5wdXRcIn0seD11LXAsQz1NYXRoLmZsb29yLEE9U3RyaW5nLmZyb21DaGFyQ29kZTtmdW5jdGlvbiB3KGUpe3Rocm93IG5ldyBSYW5nZUVycm9yKHlbZV0pfWZ1bmN0aW9uIEQoZSxyKXtmb3IodmFyIHQ9ZS5sZW5ndGgsbj1bXTt0LS07KW5bdF09cihlW3RdKTtyZXR1cm4gbn1mdW5jdGlvbiBFKGUscil7dmFyIHQ9ZS5zcGxpdChcIkBcIiksbj1cIlwiO3QubGVuZ3RoPjEmJihuPXRbMF0rXCJAXCIsZT10WzFdKTt2YXIgbz0oZT1lLnJlcGxhY2UodixcIi5cIikpLnNwbGl0KFwiLlwiKSxzPUQobyxyKS5qb2luKFwiLlwiKTtyZXR1cm4gbitzfWZ1bmN0aW9uIHEoZSl7Zm9yKHZhciByLHQsbj1bXSxvPTAscz1lLmxlbmd0aDtvPHM7KShyPWUuY2hhckNvZGVBdChvKyspKT49NTUyOTYmJnI8PTU2MzE5JiZvPHM/NTYzMjA9PSg2NDUxMiYodD1lLmNoYXJDb2RlQXQobysrKSkpP24ucHVzaCgoKDEwMjMmcik8PDEwKSsoMTAyMyZ0KSs2NTUzNik6KG4ucHVzaChyKSxvLS0pOm4ucHVzaChyKTtyZXR1cm4gbn1mdW5jdGlvbiBGKGUpe3JldHVybiBEKGUsZnVuY3Rpb24oZSl7dmFyIHI9XCJcIjtyZXR1cm4gZT42NTUzNSYmKHIrPUEoKGUtPTY1NTM2KT4+PjEwJjEwMjN8NTUyOTYpLGU9NTYzMjB8MTAyMyZlKSxyKz1BKGUpfSkuam9pbihcIlwiKX1mdW5jdGlvbiBTKGUscil7cmV0dXJuIGUrMjIrNzUqKGU8MjYpLSgoMCE9cik8PDUpfWZ1bmN0aW9uIEwoZSxyLHQpe3ZhciBuPTA7Zm9yKGU9dD9DKGUvZCk6ZT4+MSxlKz1DKGUvcik7ZT54Kmg+PjE7bis9dSllPUMoZS94KTtyZXR1cm4gQyhuKyh4KzEpKmUvKGUrZikpfWZ1bmN0aW9uIHooZSl7dmFyIHIsdCxuLG8scyxpLGEsbCxmLGQsayxiPVtdLHY9ZS5sZW5ndGgseT0wLHg9XyxBPW07Zm9yKCh0PWUubGFzdEluZGV4T2YoZykpPDAmJih0PTApLG49MDtuPHQ7KytuKWUuY2hhckNvZGVBdChuKT49MTI4JiZ3KFwibm90LWJhc2ljXCIpLGIucHVzaChlLmNoYXJDb2RlQXQobikpO2ZvcihvPXQ+MD90KzE6MDtvPHY7KXtmb3Iocz15LGk9MSxhPXU7bz49diYmdyhcImludmFsaWQtaW5wdXRcIiksaz1lLmNoYXJDb2RlQXQobysrKSwoKGw9ay00ODwxMD9rLTIyOmstNjU8MjY/ay02NTprLTk3PDI2P2stOTc6dSk+PXV8fGw+QygoYy15KS9pKSkmJncoXCJvdmVyZmxvd1wiKSx5Kz1sKmksIShsPChmPWE8PUE/cDphPj1BK2g/aDphLUEpKTthKz11KWk+QyhjLyhkPXUtZikpJiZ3KFwib3ZlcmZsb3dcIiksaSo9ZDtyPWIubGVuZ3RoKzEsQT1MKHktcyxyLDA9PXMpLEMoeS9yKT5jLXgmJncoXCJvdmVyZmxvd1wiKSx4Kz1DKHkvcikseSU9cixiLnNwbGljZSh5KyssMCx4KX1yZXR1cm4gRihiKX1mdW5jdGlvbiBUKGUpe3ZhciByLHQsbixvLHMsaSxhLGwsZixkLGssYix2LHkseCxEPVtdO2ZvcihlPXEoZSksYj1lLmxlbmd0aCxyPV8sdD0wLHM9bSxpPTA7aTxiOysraSkoaz1lW2ldKTwxMjgmJkQucHVzaChBKGspKTtmb3Iobj1vPUQubGVuZ3RoLG8mJkQucHVzaChnKTtuPGI7KXtmb3IoYT1jLGk9MDtpPGI7KytpKShrPWVbaV0pPj1yJiZrPGEmJihhPWspO2ZvcihhLXI+QygoYy10KS8odj1uKzEpKSYmdyhcIm92ZXJmbG93XCIpLHQrPShhLXIpKnYscj1hLGk9MDtpPGI7KytpKWlmKChrPWVbaV0pPHImJisrdD5jJiZ3KFwib3ZlcmZsb3dcIiksaz09cil7Zm9yKGw9dCxmPXU7IShsPChkPWY8PXM/cDpmPj1zK2g/aDpmLXMpKTtmKz11KXg9bC1kLHk9dS1kLEQucHVzaChBKFMoZCt4JXksMCkpKSxsPUMoeC95KTtELnB1c2goQShTKGwsMCkpKSxzPUwodCx2LG49PW8pLHQ9MCwrK259Kyt0LCsrcn1yZXR1cm4gRC5qb2luKFwiXCIpfWlmKGE9e3ZlcnNpb246XCIxLjQuMVwiLHVjczI6e2RlY29kZTpxLGVuY29kZTpGfSxkZWNvZGU6eixlbmNvZGU6VCx0b0FTQ0lJOmZ1bmN0aW9uKGUpe3JldHVybiBFKGUsZnVuY3Rpb24oZSl7cmV0dXJuIGIudGVzdChlKT9cInhuLS1cIitUKGUpOmV9KX0sdG9Vbmljb2RlOmZ1bmN0aW9uKGUpe3JldHVybiBFKGUsZnVuY3Rpb24oZSl7cmV0dXJuIGsudGVzdChlKT96KGUuc2xpY2UoNCkudG9Mb3dlckNhc2UoKSk6ZX0pfX0sbyYmcylpZih0LmV4cG9ydHM9PW8pcy5leHBvcnRzPWE7ZWxzZSBmb3IobCBpbiBhKWEuaGFzT3duUHJvcGVydHkobCkmJihvW2xdPWFbbF0pO2Vsc2Ugci5wdW55Y29kZT1hfSh0aGlzKX0pLmNhbGwodGhpcyx2b2lkIDAhPT1lP2U6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHNlbGY/c2VsZjpcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93P3dpbmRvdzp7fSl9LHt9XSw2MTpbZnVuY3Rpb24oZSxyLHQpe3IuZXhwb3J0cz0vW1xcMC1cXHgxRlxceDdGLVxceDlGXS99LHt9XSw2MjpbZnVuY3Rpb24oZSxyLHQpe3IuZXhwb3J0cz0vW1xceEFEXFx1MDYwMC1cXHUwNjA1XFx1MDYxQ1xcdTA2RERcXHUwNzBGXFx1MDhFMlxcdTE4MEVcXHUyMDBCLVxcdTIwMEZcXHUyMDJBLVxcdTIwMkVcXHUyMDYwLVxcdTIwNjRcXHUyMDY2LVxcdTIwNkZcXHVGRUZGXFx1RkZGOS1cXHVGRkZCXXxcXHVEODA0W1xcdURDQkRcXHVEQ0NEXXxcXHVEODJGW1xcdURDQTAtXFx1RENBM118XFx1RDgzNFtcXHVERDczLVxcdUREN0FdfFxcdURCNDBbXFx1REMwMVxcdURDMjAtXFx1REM3Rl0vfSx7fV0sNjM6W2Z1bmN0aW9uKGUscix0KXtyLmV4cG9ydHM9L1shLSMlLVxcKiwtXFwvOjtcXD9AXFxbLVxcXV9cXHtcXH1cXHhBMVxceEE3XFx4QUJcXHhCNlxceEI3XFx4QkJcXHhCRlxcdTAzN0VcXHUwMzg3XFx1MDU1QS1cXHUwNTVGXFx1MDU4OVxcdTA1OEFcXHUwNUJFXFx1MDVDMFxcdTA1QzNcXHUwNUM2XFx1MDVGM1xcdTA1RjRcXHUwNjA5XFx1MDYwQVxcdTA2MENcXHUwNjBEXFx1MDYxQlxcdTA2MUVcXHUwNjFGXFx1MDY2QS1cXHUwNjZEXFx1MDZENFxcdTA3MDAtXFx1MDcwRFxcdTA3RjctXFx1MDdGOVxcdTA4MzAtXFx1MDgzRVxcdTA4NUVcXHUwOTY0XFx1MDk2NVxcdTA5NzBcXHUwOUZEXFx1MEE3NlxcdTBBRjBcXHUwQzg0XFx1MERGNFxcdTBFNEZcXHUwRTVBXFx1MEU1QlxcdTBGMDQtXFx1MEYxMlxcdTBGMTRcXHUwRjNBLVxcdTBGM0RcXHUwRjg1XFx1MEZEMC1cXHUwRkQ0XFx1MEZEOVxcdTBGREFcXHUxMDRBLVxcdTEwNEZcXHUxMEZCXFx1MTM2MC1cXHUxMzY4XFx1MTQwMFxcdTE2NkRcXHUxNjZFXFx1MTY5QlxcdTE2OUNcXHUxNkVCLVxcdTE2RURcXHUxNzM1XFx1MTczNlxcdTE3RDQtXFx1MTdENlxcdTE3RDgtXFx1MTdEQVxcdTE4MDAtXFx1MTgwQVxcdTE5NDRcXHUxOTQ1XFx1MUExRVxcdTFBMUZcXHUxQUEwLVxcdTFBQTZcXHUxQUE4LVxcdTFBQURcXHUxQjVBLVxcdTFCNjBcXHUxQkZDLVxcdTFCRkZcXHUxQzNCLVxcdTFDM0ZcXHUxQzdFXFx1MUM3RlxcdTFDQzAtXFx1MUNDN1xcdTFDRDNcXHUyMDEwLVxcdTIwMjdcXHUyMDMwLVxcdTIwNDNcXHUyMDQ1LVxcdTIwNTFcXHUyMDUzLVxcdTIwNUVcXHUyMDdEXFx1MjA3RVxcdTIwOERcXHUyMDhFXFx1MjMwOC1cXHUyMzBCXFx1MjMyOVxcdTIzMkFcXHUyNzY4LVxcdTI3NzVcXHUyN0M1XFx1MjdDNlxcdTI3RTYtXFx1MjdFRlxcdTI5ODMtXFx1Mjk5OFxcdTI5RDgtXFx1MjlEQlxcdTI5RkNcXHUyOUZEXFx1MkNGOS1cXHUyQ0ZDXFx1MkNGRVxcdTJDRkZcXHUyRDcwXFx1MkUwMC1cXHUyRTJFXFx1MkUzMC1cXHUyRTRFXFx1MzAwMS1cXHUzMDAzXFx1MzAwOC1cXHUzMDExXFx1MzAxNC1cXHUzMDFGXFx1MzAzMFxcdTMwM0RcXHUzMEEwXFx1MzBGQlxcdUE0RkVcXHVBNEZGXFx1QTYwRC1cXHVBNjBGXFx1QTY3M1xcdUE2N0VcXHVBNkYyLVxcdUE2RjdcXHVBODc0LVxcdUE4NzdcXHVBOENFXFx1QThDRlxcdUE4RjgtXFx1QThGQVxcdUE4RkNcXHVBOTJFXFx1QTkyRlxcdUE5NUZcXHVBOUMxLVxcdUE5Q0RcXHVBOURFXFx1QTlERlxcdUFBNUMtXFx1QUE1RlxcdUFBREVcXHVBQURGXFx1QUFGMFxcdUFBRjFcXHVBQkVCXFx1RkQzRVxcdUZEM0ZcXHVGRTEwLVxcdUZFMTlcXHVGRTMwLVxcdUZFNTJcXHVGRTU0LVxcdUZFNjFcXHVGRTYzXFx1RkU2OFxcdUZFNkFcXHVGRTZCXFx1RkYwMS1cXHVGRjAzXFx1RkYwNS1cXHVGRjBBXFx1RkYwQy1cXHVGRjBGXFx1RkYxQVxcdUZGMUJcXHVGRjFGXFx1RkYyMFxcdUZGM0ItXFx1RkYzRFxcdUZGM0ZcXHVGRjVCXFx1RkY1RFxcdUZGNUYtXFx1RkY2NV18XFx1RDgwMFtcXHVERDAwLVxcdUREMDJcXHVERjlGXFx1REZEMF18XFx1RDgwMVxcdURENkZ8XFx1RDgwMltcXHVEQzU3XFx1REQxRlxcdUREM0ZcXHVERTUwLVxcdURFNThcXHVERTdGXFx1REVGMC1cXHVERUY2XFx1REYzOS1cXHVERjNGXFx1REY5OS1cXHVERjlDXXxcXHVEODAzW1xcdURGNTUtXFx1REY1OV18XFx1RDgwNFtcXHVEQzQ3LVxcdURDNERcXHVEQ0JCXFx1RENCQ1xcdURDQkUtXFx1RENDMVxcdURENDAtXFx1REQ0M1xcdURENzRcXHVERDc1XFx1RERDNS1cXHVEREM4XFx1RERDRFxcdUREREJcXHVERERELVxcdUREREZcXHVERTM4LVxcdURFM0RcXHVERUE5XXxcXHVEODA1W1xcdURDNEItXFx1REM0RlxcdURDNUJcXHVEQzVEXFx1RENDNlxcdUREQzEtXFx1REREN1xcdURFNDEtXFx1REU0M1xcdURFNjAtXFx1REU2Q1xcdURGM0MtXFx1REYzRV18XFx1RDgwNltcXHVEQzNCXFx1REUzRi1cXHVERTQ2XFx1REU5QS1cXHVERTlDXFx1REU5RS1cXHVERUEyXXxcXHVEODA3W1xcdURDNDEtXFx1REM0NVxcdURDNzBcXHVEQzcxXFx1REVGN1xcdURFRjhdfFxcdUQ4MDlbXFx1REM3MC1cXHVEQzc0XXxcXHVEODFBW1xcdURFNkVcXHVERTZGXFx1REVGNVxcdURGMzctXFx1REYzQlxcdURGNDRdfFxcdUQ4MUJbXFx1REU5Ny1cXHVERTlBXXxcXHVEODJGXFx1REM5RnxcXHVEODM2W1xcdURFODctXFx1REU4Ql18XFx1RDgzQVtcXHVERDVFXFx1REQ1Rl0vfSx7fV0sNjQ6W2Z1bmN0aW9uKGUscix0KXtyLmV4cG9ydHM9L1sgXFx4QTBcXHUxNjgwXFx1MjAwMC1cXHUyMDBBXFx1MjAyOFxcdTIwMjlcXHUyMDJGXFx1MjA1RlxcdTMwMDBdL30se31dLDY1OltmdW5jdGlvbihlLHIsdCl7dC5Bbnk9ZShcIi4vcHJvcGVydGllcy9BbnkvcmVnZXhcIiksdC5DYz1lKFwiLi9jYXRlZ29yaWVzL0NjL3JlZ2V4XCIpLHQuQ2Y9ZShcIi4vY2F0ZWdvcmllcy9DZi9yZWdleFwiKSx0LlA9ZShcIi4vY2F0ZWdvcmllcy9QL3JlZ2V4XCIpLHQuWj1lKFwiLi9jYXRlZ29yaWVzL1ovcmVnZXhcIil9LHtcIi4vY2F0ZWdvcmllcy9DYy9yZWdleFwiOjYxLFwiLi9jYXRlZ29yaWVzL0NmL3JlZ2V4XCI6NjIsXCIuL2NhdGVnb3JpZXMvUC9yZWdleFwiOjYzLFwiLi9jYXRlZ29yaWVzL1ovcmVnZXhcIjo2NCxcIi4vcHJvcGVydGllcy9BbnkvcmVnZXhcIjo2Nn1dLDY2OltmdW5jdGlvbihlLHIsdCl7ci5leHBvcnRzPS9bXFwwLVxcdUQ3RkZcXHVFMDAwLVxcdUZGRkZdfFtcXHVEODAwLVxcdURCRkZdW1xcdURDMDAtXFx1REZGRl18W1xcdUQ4MDAtXFx1REJGRl0oPyFbXFx1REMwMC1cXHVERkZGXSl8KD86W15cXHVEODAwLVxcdURCRkZdfF4pW1xcdURDMDAtXFx1REZGRl0vfSx7fV0sNjc6W2Z1bmN0aW9uKGUscix0KXtyLmV4cG9ydHM9ZShcIi4vbGliL1wiKX0se1wiLi9saWIvXCI6OX1dfSx7fSxbNjddKSg2Nyl9KHQ9e2V4cG9ydHM6e319LHQuZXhwb3J0cyksdC5leHBvcnRzKTtmdW5jdGlvbiBvKGUscil7dmFyIHQsbixvLHMsaT1lLnBvcyxhPWUuc3JjLmNoYXJDb2RlQXQoaSk7aWYocilyZXR1cm4hMTtpZig0MyE9PWEpcmV0dXJuITE7aWYobz0obj1lLnNjYW5EZWxpbXMoZS5wb3MsITApKS5sZW5ndGgscz1TdHJpbmcuZnJvbUNoYXJDb2RlKGEpLG88MilyZXR1cm4hMTtmb3IobyUyJiYoZS5wdXNoKFwidGV4dFwiLFwiXCIsMCkuY29udGVudD1zLG8tLSksdD0wO3Q8bzt0Kz0yKWUucHVzaChcInRleHRcIixcIlwiLDApLmNvbnRlbnQ9cytzLGUuZGVsaW1pdGVycy5wdXNoKHttYXJrZXI6YSxqdW1wOnQsdG9rZW46ZS50b2tlbnMubGVuZ3RoLTEsbGV2ZWw6ZS5sZXZlbCxlbmQ6LTEsb3BlbjpuLmNhbl9vcGVuLGNsb3NlOm4uY2FuX2Nsb3NlfSk7cmV0dXJuIGUucG9zKz1uLmxlbmd0aCwhMH1mdW5jdGlvbiBzKGUpe3ZhciByLHQsbixvLHMsaT1bXSxhPWUuZGVsaW1pdGVycyxsPWUuZGVsaW1pdGVycy5sZW5ndGg7Zm9yKHI9MDtyPGw7cisrKTQzPT09KG49YVtyXSkubWFya2VyJiYtMSE9PW4uZW5kJiYobz1hW24uZW5kXSwocz1lLnRva2Vuc1tuLnRva2VuXSkudHlwZT1cInVfb3BlblwiLHMudGFnPVwidVwiLHMubmVzdGluZz0xLHMubWFya3VwPVwiKytcIixzLmNvbnRlbnQ9XCJcIiwocz1lLnRva2Vuc1tvLnRva2VuXSkudHlwZT1cInVfY2xvc2VcIixzLnRhZz1cInVcIixzLm5lc3Rpbmc9LTEscy5tYXJrdXA9XCIrK1wiLHMuY29udGVudD1cIlwiLFwidGV4dFwiPT09ZS50b2tlbnNbby50b2tlbi0xXS50eXBlJiZcIitcIj09PWUudG9rZW5zW28udG9rZW4tMV0uY29udGVudCYmaS5wdXNoKG8udG9rZW4tMSkpO2Zvcig7aS5sZW5ndGg7KXtmb3IodD0ocj1pLnBvcCgpKSsxO3Q8ZS50b2tlbnMubGVuZ3RoJiZcInVfY2xvc2VcIj09PWUudG9rZW5zW3RdLnR5cGU7KXQrKztyIT09LS10JiYocz1lLnRva2Vuc1t0XSxlLnRva2Vuc1t0XT1lLnRva2Vuc1tyXSxlLnRva2Vuc1tyXT1zKX19dmFyIGk9ZnVuY3Rpb24oZSl7ZS5pbmxpbmUucnVsZXIuYWZ0ZXIoXCJlbXBoYXNpc1wiLFwidW5kZXJsaW5lXCIsbyksZS5pbmxpbmUucnVsZXIyLmFmdGVyKFwiZW1waGFzaXNcIixcInVuZGVybGluZVwiLHMpfTtyZXR1cm4gbmV3KGZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSgpe3RoaXMuX21kPW4oXCJjb21tb25tYXJrXCIpLHRoaXMuX21kLnVzZShpKX1yZXR1cm4gZS5wcm90b3R5cGUudG9IVE1MPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLl9tZC5yZW5kZXIoZSl9LGV9KCkpfSk7IiwiLyoqIEBtb2R1bGUgRE9NICovXG5cbi8qIGdsb2JhbCBIVE1MRWxlbWVudCwgSFRNTERvY3VtZW50LCBXaW5kb3csIEVsZW1lbnQgKi9cblxubGV0IGRvY3VtZW50ID0gd2luZG93LmRvY3VtZW50O1xuXG4vKipcbiAqIFN0YXRpYyBpbnRlcmZhY2UgZm9yIGludGVyYWN0aW5nIHdpdGggdGhlIERPTSBBUEkuXG4gKiBAbmFtZXNwYWNlXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIERPTSB7XG4gIHN0YXRpYyBzZXR1cCAoZCwgcCkge1xuICAgIGRvY3VtZW50ID0gZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBjcmVhdGUgYSBIVE1MRWxlbWVudCBmcm9tIGFuZCBIVE1MIHN0cmluZ1xuICAgKiBAcGFyYW0ge3N0cmluZ30gaHRtbCBUaGUgSFRNTCB0byBwYXJzZSB0byBhIERPTSBub2RlLlxuICAgKiBAcmV0dXJuIHtIVE1MRWxlbWVudH1cbiAgICovXG4gIHN0YXRpYyBjcmVhdGUgKGh0bWwpIHtcbiAgICBpZiAoJ2NyZWF0ZVJhbmdlJyBpbiBkb2N1bWVudCkge1xuICAgICAgLy8gcHJlZmVyIHRoaXMgaW1wbGVtZW50YXRpb24gYXMgaXQgaGFzIHdpZGVyIGJyb3dzZXIgc3VwcG9ydFxuICAgICAgLy8gYW5kIGl0J3MgYmV0dGVyIHBlcmZvcm1pbmcuXG4gICAgICAvLyBzZWUgaHR0cHM6Ly9kYXZpZHdhbHNoLm5hbWUvY29udmVydC1odG1sLXN0aW5ncy1kb20tbm9kZXNcbiAgICAgIGNvbnN0IGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgY29uc3QgZnJhZyA9IGRvY3VtZW50LmNyZWF0ZVJhbmdlKCkuY3JlYXRlQ29udGV4dHVhbEZyYWdtZW50KGh0bWwpO1xuICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGZyYWcpO1xuICAgICAgcmV0dXJuIGNvbnRhaW5lcjtcbiAgICB9XG5cbiAgICAvLyBmYWxsYmFjayB0byB0aGlzIGJlY2F1c2Ugb2YgYSBidWcgaW4ganNkb20gdGhhdCBjYXVzZXMgdGVzdHMgdG8gZmFpbFxuICAgIC8vIHNlZTogaHR0cHM6Ly9naXRodWIuY29tL2pzZG9tL2pzZG9tL2lzc3Vlcy8zOTlcbiAgICByZXR1cm4gbmV3IERPTVBhcnNlcigpLnBhcnNlRnJvbVN0cmluZyhodG1sLCAndGV4dC9odG1sJykuYm9keTtcbiAgfVxuXG4gIC8qKlxuICAgKiBxdWVyeSB0aGUgRE9NIGZvciBhIGdpdmVuIGNzcyBzZWxlY3RvclxuICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBwYXJlbnQgT3B0aW9uYWwgY29udGV4dCB0byB1c2UgZm9yIGEgc2VhcmNoLiBEZWZhdWx0cyB0byBkb2N1bWVudCBpZiBub3QgcHJvdmlkZWQuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzZWxlY3RvciB0aGUgQ1NTIHNlbGVjdG9yIHRvIHF1ZXJ5IGZvclxuICAgKlxuICAgKiBAcmV0dXJucyB7SFRNTEVsZW1lbnR9IHRoZSBGSVJTVCBub2RlIGl0IGZpbmRzLCBpZiBhbnlcbiAgICovXG4gIHN0YXRpYyBxdWVyeSAocGFyZW50LCBzZWxlY3Rvcikge1xuICAgIC8vIEZhY2FkZSwgc2hpZnRpbmcgdGhlIHNlbGVjdG9yIHRvIHRoZSBwYXJlbnQgYXJndW1lbnQgaWYgb25seSBvbmVcbiAgICAvLyBhcmd1bWVudCBpcyBwcm92aWRlZFxuICAgIGlmIChzZWxlY3RvciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBzZWxlY3RvciA9IHBhcmVudDtcbiAgICAgIHBhcmVudCA9IGRvY3VtZW50O1xuICAgIH1cblxuICAgIGlmIChzZWxlY3RvciBpbnN0YW5jZW9mIEhUTUxFbGVtZW50IHx8IHNlbGVjdG9yIGluc3RhbmNlb2YgV2luZG93IHx8IHNlbGVjdG9yIGluc3RhbmNlb2YgSFRNTERvY3VtZW50KSB7XG4gICAgICByZXR1cm4gc2VsZWN0b3I7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBhcmVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBxdWVyeSB0aGUgRE9NIGZvciBhIGdpdmVuIGNzcyBzZWxlY3RvclxuICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBwYXJlbnQgT3B0aW9uYWwgY29udGV4dCB0byB1c2UgZm9yIGEgc2VhcmNoLiBEZWZhdWx0cyB0byBkb2N1bWVudCBpZiBub3QgcHJvdmlkZWQuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzZWxlY3RvciB0aGUgQ1NTIHNlbGVjdG9yIHRvIHF1ZXJ5IGZvclxuICAgKlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IHRoZSBGSVJTVCBub2RlIGl0IGZpbmRzLCBpZiBhbnlcbiAgICovXG4gIHN0YXRpYyBxdWVyeUFsbCAocGFyZW50LCBzZWxlY3Rvcikge1xuICAgIC8vIEZhY2FkZSwgc2hpZnRpbmcgdGhlIHNlbGVjdG9yIHRvIHRoZSBwYXJlbnQgYXJndW1lbnQgaWYgb25seSBvbmVcbiAgICAvLyBhcmd1bWVudCBpcyBwcm92aWRlZFxuICAgIGlmIChzZWxlY3RvciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBzZWxlY3RvciA9IHBhcmVudDtcbiAgICAgIHBhcmVudCA9IGRvY3VtZW50O1xuICAgIH1cblxuICAgIC8vIGhhbmRsZSB0aGUgY2FzZSB3aGVyZSBjbGllbnQgY29kZSBpcyB1c2luZyBhIHBvaW50ZXIgdG8gYSBkb20gbm9kZSBhbmQgaXQncyBudWxsLCBlLmcuIHRoaXMuX2NvbnRhaW5lclxuICAgIGlmIChwYXJlbnQgPT0gbnVsbCkge1xuICAgICAgcGFyZW50ID0gZG9jdW1lbnQ7XG4gICAgfVxuXG4gICAgaWYgKHNlbGVjdG9yIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQgfHwgc2VsZWN0b3IgaW5zdGFuY2VvZiBIVE1MRG9jdW1lbnQgfHwgc2VsZWN0b3IgaW5zdGFuY2VvZiBXaW5kb3cpIHtcbiAgICAgIHJldHVybiBbc2VsZWN0b3JdO1xuICAgIH1cblxuICAgIHJldHVybiBBcnJheS5mcm9tKHBhcmVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKSk7XG4gIH1cblxuICBzdGF0aWMgb25SZWFkeSAoY2IpIHtcbiAgICBpZiAoZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gJ2NvbXBsZXRlJyB8fCBkb2N1bWVudC5yZWFkeVN0YXRlID09PSAnbG9hZGVkJyB8fCBkb2N1bWVudC5yZWFkeVN0YXRlID09PSAnaW50ZXJhY3RpdmUnKSB7XG4gICAgICBjYigpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIERPTS5vbihkb2N1bWVudCwgJ0RPTUNvbnRlbnRMb2FkZWQnLCBjYik7XG4gIH1cblxuICAvKipcbiAgICogY3JlYXRlRWxlIHdpbGwgY3JlYXRlIGEge0hUTUxFbGVtZW50fSBhbmQgYXBwbHkgdGhlIHByb3BlcnRpZXMgYXR0cmlidXRlcyB0aHJvdWdoIGFuIG9iamVjdCBwcm92aWRlZC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGVsIFRoZSBlbGVtZW50IGB0YWdgIG5hbWUgdG8gY29uc3RydWN0XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzX2RhdGEgT3B0aW9uYWwgYXR0cmlidXRlcyB0byBhcHBseSB0byB0aGUgbmV3IEhUTUxFbGVtZW50XG4gICAqL1xuICBzdGF0aWMgY3JlYXRlRWwgKGVsLCBvcHRzX2RhdGEgPSB7fSkge1xuICAgIGxldCBub2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChlbCk7XG4gICAgbGV0IHByb3BzID0gT2JqZWN0LmtleXMob3B0c19kYXRhKTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChwcm9wc1tpXSA9PT0gJ2NsYXNzJykge1xuICAgICAgICBET00uYWRkQ2xhc3Mobm9kZSwgb3B0c19kYXRhW3Byb3BzW2ldXSk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBub2RlW3Byb3BzW2ldXSA9IG9wdHNfZGF0YVtwcm9wc1tpXV07XG4gICAgfVxuXG4gICAgcmV0dXJuIG5vZGU7XG4gIH1cblxuICBzdGF0aWMgYXBwZW5kIChwYXJlbnQsIG5vZGUpIHtcbiAgICBpZiAobm9kZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBub2RlID0gcGFyZW50O1xuICAgICAgcGFyZW50ID0gZG9jdW1lbnQ7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBwYXJlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICBwYXJlbnQgPSBET00ucXVlcnkocGFyZW50KTtcbiAgICB9XG5cbiAgICAvLyBTdXBwb3J0IEhUTUwgaW5qZWN0aW9uIGFzIHdlbGwgYXMgSFRNTEVsZW1lbnQgYXBwZW5kc1xuICAgIGlmICh0eXBlb2Ygbm9kZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHBhcmVudC5pbnNlcnRBZGphY2VudEhUTUwoJ2FmdGVyQmVnaW4nLCBub2RlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcGFyZW50LmFwcGVuZENoaWxkKG5vZGUpO1xuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBhZGRDbGFzcyAobm9kZSwgY2xhc3NOYW1lKSB7XG4gICAgaWYgKCFub2RlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbGV0IGNsYXNzZXMgPSBjbGFzc05hbWUuc3BsaXQoJywnKTtcbiAgICBsZXQgbGVuID0gY2xhc3Nlcy5sZW5ndGg7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBub2RlLmNsYXNzTGlzdC5hZGQoY2xhc3Nlc1tpXSk7XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIGVtcHR5IChwYXJlbnQpIHtcbiAgICBwYXJlbnQuaW5uZXJIVE1MID0gJyc7XG4gIH1cblxuICBzdGF0aWMgY3NzIChzZWxlY3Rvciwgc3R5bGVzKSB7XG4gICAgbGV0IG5vZGUgPSBET00ucXVlcnkoc2VsZWN0b3IpO1xuXG4gICAgZm9yIChsZXQgcHJvcCBpbiBzdHlsZXMpIHtcbiAgICAgIG5vZGUuc3R5bGVbcHJvcF0gPSBzdHlsZXNbcHJvcF07XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIGF0dHIgKHNlbGVjdG9yLCBhdHRyLCB2YWwpIHtcbiAgICBET00ucXVlcnkoc2VsZWN0b3IpLnNldEF0dHJpYnV0ZShhdHRyLCB2YWwpO1xuICB9XG5cbiAgc3RhdGljIGF0dHJpYnV0ZXMgKHNlbGVjdG9yLCBhdHRycykge1xuICAgIE9iamVjdC5lbnRyaWVzKGF0dHJzKVxuICAgICAgLmZvckVhY2goKFthdHRyLCB2YWxdKSA9PiB0aGlzLmF0dHIoc2VsZWN0b3IsIGF0dHIsIHZhbCkpO1xuICB9XG5cbiAgc3RhdGljIHRyaWdnZXIgKHNlbGVjdG9yLCBldmVudCwgc2V0dGluZ3MpIHtcbiAgICBsZXQgZSA9IERPTS5fY3VzdG9tRXZlbnQoZXZlbnQsIHNldHRpbmdzKTtcbiAgICBET00ucXVlcnkoc2VsZWN0b3IpLmRpc3BhdGNoRXZlbnQoZSk7XG4gIH1cblxuICAvLyBUT0RPIChhZ3JvdykgaW52ZXN0aWdhdGUgcmVtb3ZpbmcgdGhpc1xuICAvLyBFdmVudCBjb25zdHJ1Y3RvciBwb2x5ZmlsbFxuICBzdGF0aWMgX2N1c3RvbUV2ZW50IChldmVudCwgc2V0dGluZ3MpIHtcbiAgICBjb25zdCBfc2V0dGluZ3MgPSB7XG4gICAgICBidWJibGVzOiB0cnVlLFxuICAgICAgY2FuY2VsYWJsZTogdHJ1ZSxcbiAgICAgIGRldGFpbDogbnVsbCxcbiAgICAgIC4uLnNldHRpbmdzXG4gICAgfTtcbiAgICBjb25zdCBldnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnQ3VzdG9tRXZlbnQnKTtcbiAgICBldnQuaW5pdEN1c3RvbUV2ZW50KGV2ZW50LCBfc2V0dGluZ3MuYnViYmxlcywgX3NldHRpbmdzLmNhbmNlbGFibGUsIF9zZXR0aW5ncy5kZXRhaWwpO1xuICAgIHJldHVybiBldnQ7XG4gIH1cblxuICBzdGF0aWMgb24gKHNlbGVjdG9yLCBldnQsIGhhbmRsZXIpIHtcbiAgICBET00ucXVlcnkoc2VsZWN0b3IpLmFkZEV2ZW50TGlzdGVuZXIoZXZ0LCBoYW5kbGVyKTtcbiAgfVxuXG4gIHN0YXRpYyBvbmNlIChzZWxlY3RvciwgZXZ0LCBoYW5kbGVyKSB7XG4gICAgRE9NLnF1ZXJ5KHNlbGVjdG9yKS5hZGRFdmVudExpc3RlbmVyKGV2dCwgaGFuZGxlciwgeyBvbmNlOiB0cnVlIH0pO1xuICB9XG5cbiAgc3RhdGljIG9mZiAoc2VsZWN0b3IsIGV2dCwgaGFuZGxlcikge1xuICAgIERPTS5xdWVyeShzZWxlY3RvcikucmVtb3ZlRXZlbnRMaXN0ZW5lcihldnQsIGhhbmRsZXIpO1xuICB9XG5cbiAgc3RhdGljIGRlbGVnYXRlIChjdHh0LCBzZWxlY3RvciwgZXZ0LCBoYW5kbGVyKSB7XG4gICAgbGV0IGVsID0gRE9NLnF1ZXJ5KGN0eHQpO1xuICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoZXZ0LCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGxldCB0YXJnZXQgPSBldmVudC50YXJnZXQ7XG4gICAgICB3aGlsZSAoIXRhcmdldC5pc0VxdWFsTm9kZShlbCkpIHtcbiAgICAgICAgaWYgKERPTS5tYXRjaGVzKHRhcmdldCwgc2VsZWN0b3IpKSB7XG4gICAgICAgICAgaGFuZGxlcihldmVudCwgdGFyZ2V0KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICB0YXJnZXQgPSB0YXJnZXQucGFyZW50Tm9kZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8vIFRPRE8gKGFncm93KSBpbnZlc3RpZ2F0ZSByZW1vdmluZyB0aGlzXG4gIC8vIEVsZW1lbnQubWF0Y2hlcyBwb2x5ZmlsbFxuICBzdGF0aWMgbWF0Y2hlcyAoZWxlbWVudCwgcG90ZW50aWFsTWF0Y2gpIHtcbiAgICBpZiAoRWxlbWVudC5wcm90b3R5cGUubWF0Y2hlcykge1xuICAgICAgcmV0dXJuIGVsZW1lbnQubWF0Y2hlcyhwb3RlbnRpYWxNYXRjaCk7XG4gICAgfVxuICAgIGlmIChFbGVtZW50LnByb3RvdHlwZS5tc01hdGNoZXNTZWxlY3Rvcikge1xuICAgICAgcmV0dXJuIGVsZW1lbnQubXNNYXRjaGVzU2VsZWN0b3IocG90ZW50aWFsTWF0Y2gpO1xuICAgIH1cbiAgICBpZiAoRWxlbWVudC5wcm90b3R5cGUud2Via2l0TWF0Y2hlc1NlbGVjdG9yKSB7XG4gICAgICByZXR1cm4gZWxlbWVudC53ZWJraXRNYXRjaGVzU2VsZWN0b3IocG90ZW50aWFsTWF0Y2gpO1xuICAgIH1cbiAgfVxufVxuIiwiLyoqIEBtb2R1bGUgU2VhcmNoUGFyYW1zICovXG5cbi8qIGdsb2JhbCB3aW5kb3cgKi9cblxuLyoqXG4gKiBTZWFyY2hQYXJhbXMgaXMgYSBjbGFzcyB0byBnZXQgdGhlIHNlYXJjaCBwYXJhbXMgaW4gYSBVUkwuXG4gKiBJdCBpcyBhIHJlcGxhY2VtZW50IGZvciBVUkwuc2VhcmNoUGFyYW1zIGFuZCBVUkxTZWFyY2hQYXJhbXMgZm9yIGJyb3dzZXJzIGxpa2UgSUUxMVxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTZWFyY2hQYXJhbXMge1xuICBjb25zdHJ1Y3RvciAodXJsKSB7XG4gICAgLyoqXG4gICAgICogTWFwcGluZyBvZiBhbGwgcXVlcnkgcGFyYW1ldGVycyBpbiB0aGUgZ2l2ZW4gdXJsLCBxdWVyeSBwYXJhbSAtPiB2YWx1ZVxuICAgICAqIE9ubHkgdXNlZCBpZiBVUkxTZWFyY2hQYXJhbXMgZG9lcyBub3QgZXhpc3QgaW4gdGhlIHdpbmRvd1xuICAgICAqIEB0eXBlIHtPYmplY3R9XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLl9wYXJhbXMgPSB7fTtcblxuICAgIGlmICh3aW5kb3cgJiYgd2luZG93LlVSTFNlYXJjaFBhcmFtcykge1xuICAgICAgcmV0dXJuIG5ldyBVUkxTZWFyY2hQYXJhbXModXJsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fcGFyYW1zID0gdGhpcy5wYXJzZSh1cmwpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBwYXJzZSBjcmVhdGVzIGEgbWFwcGluZyBvZiBhbGwgcXVlcnkgcGFyYW1zIGluIGEgZ2l2ZW4gdXJsXG4gICAqIFRoZSBxdWVyeSBwYXJhbSB2YWx1ZXMgYXJlIGRlY29kZWQgYmVmb3JlIGJlaW5nIHB1dCBpbiB0aGUgbWFwXG4gICAqIFRocmVlIHR5cGVzIG9mIGlucHV0IGFyZSBzdXBwb3J0ZWRcbiAgICogICAoMSkgZnVsbCBVUkwgZS5nLiBodHRwOi8vd3d3LnlleHQuY29tLz9xPWhlbGxvXG4gICAqICAgKDIpIHBhcmFtcyB3aXRoID8gZS5nLiA/cT1oZWxsb1xuICAgKiAgICgxKSBwYXJhbXMgd2l0aG91dCA/IGUuZy4gcT1oZWxsb1xuICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSB1cmxcbiAgICogQHJldHVybnMge09iamVjdH0gbWFwcGluZyBmcm9tIHF1ZXJ5IHBhcmFtIC0+IHZhbHVlIHdoZXJlIHZhbHVlIGlzICcnIGlmIG5vIHZhbHVlIGlzIHByb3ZpZGVkXG4gICAqL1xuICBwYXJzZSAodXJsKSB7XG4gICAgbGV0IHBhcmFtcyA9IHt9O1xuICAgIGxldCBzZWFyY2ggPSB1cmw7XG5cbiAgICBpZiAoc2VhcmNoID09PSAnJykge1xuICAgICAgcmV0dXJuIHBhcmFtcztcbiAgICB9XG5cbiAgICAvLyBOb3JtYWxpemUgYWxsIHVybCBpbnB1dHMgdG8gc3RyaW5nIG9mIHF1ZXJ5IHBhcmFtcyBzZXBhcmF0ZWQgYnkgJlxuICAgIGlmICh1cmwuaW5kZXhPZignPycpID4gLTEpIHtcbiAgICAgIHNlYXJjaCA9IHVybC5zbGljZSh1cmwuaW5kZXhPZignPycpICsgMSk7XG4gICAgfVxuXG4gICAgY29uc3QgZW5jb2RlZFBhcmFtcyA9IHNlYXJjaC5zcGxpdCgnJicpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZW5jb2RlZFBhcmFtcy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3Qga2V5VmFsID0gZW5jb2RlZFBhcmFtc1tpXS5zcGxpdCgnPScpO1xuICAgICAgaWYgKGtleVZhbC5sZW5ndGggPiAxKSB7XG4gICAgICAgIHBhcmFtc1trZXlWYWxbMF1dID0gU2VhcmNoUGFyYW1zLmRlY29kZShrZXlWYWxbMV0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFyYW1zW2tleVZhbFswXV0gPSAnJztcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcGFyYW1zO1xuICB9XG5cbiAgLyoqXG4gICAqIGdldCByZXR1cm5zIHRoZSB2YWx1ZSBvZiB0aGUgZ2l2ZW4gcXVlcnkgcGFyYW1cbiAgICogQHBhcmFtIHtzdHJpbmd9IHF1ZXJ5IHRoZSBxdWVyeSBwYXJhbSBrZXkgdG8gZ2V0IHRoZSB2YWx1ZSBvZlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9IHBhcmFtIHZhbHVlLCBudWxsIG90aGVyd2lzZVxuICAgKi9cbiAgZ2V0IChxdWVyeSkge1xuICAgIGlmICh0eXBlb2YgdGhpcy5fcGFyYW1zW1N0cmluZyhxdWVyeSldID09PSAndW5kZWZpbmVkJykge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9wYXJhbXNbcXVlcnldO1xuICB9XG5cbiAgLyoqXG4gICAqIHNldCBjaGFuZ2VzIHRoZSB2YWx1ZSBvZiBhIGdpdmVuIHF1ZXJ5IHBhcmFtXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIHRoZSBxdWVyeSBwYXJhbSBrZXlcbiAgICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlIHRoZSB2YWx1ZSBvZiB0aGUgcXVlcnkgcGFyYW0gdXBkYXRlIHdpdGhcbiAgICovXG4gIHNldCAobmFtZSwgdmFsdWUpIHtcbiAgICB0aGlzLl9wYXJhbXNbU3RyaW5nKG5hbWUpXSA9IFN0cmluZyh2YWx1ZSk7XG4gIH1cblxuICAvKipcbiAgICogaGFzIGNoZWNrcyB0byBzZWUgaWYgdGhlIGdpdmVuIHF1ZXJ5IHBhcmFtIGtleSBleGlzdHMgaW4gdGhlIHBhcmFtcyBvYmplY3RcbiAgICogQHBhcmFtIHtzdHJpbmd9IHF1ZXJ5IHRoZSBxdWVyeSBwYXJhbSB0byBjaGVja1xuICAgKiBAcmV0dXJuIHtib29sZWFufSB0cnVlIGlmIHRoZSBxdWVyeSBwYXJhbSBpcyBpbiB0aGUgcGFyYW1zIG9iamVjdCwgZmFsc2Ugby93XG4gICAqL1xuICBoYXMgKHF1ZXJ5KSB7XG4gICAgcmV0dXJuIHF1ZXJ5IGluIHRoaXMuX3BhcmFtcztcbiAgfVxuXG4gIC8qKlxuICAgKiBkZWxldGUgcmVtb3ZlcyB0aGUgZ2l2ZW4gcXVlcnkgcGFyYW0gYW5kIGl0cyBhc3NvY2lhdGVkIHZhbHVlIGZyb20gdGhlIHBhcmFtcyBvYmplY3RcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgdGhlIHF1ZXJ5IHBhcmFtIGtleVxuICAgKi9cbiAgZGVsZXRlIChuYW1lKSB7XG4gICAgZGVsZXRlIHRoaXMuX3BhcmFtc1tTdHJpbmcobmFtZSldO1xuICB9XG5cbiAgLyoqXG4gICAqIHRvU3RyaW5nIHJldHVybnMgYSB1cmwgd2l0aCBhbGwgdGhlIHF1ZXJ5IHBhcmFtcyBpbiB0aGUgcGFyYW1zIG9iamVjdCAod2l0aG91dCBhID8pXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIHRvU3RyaW5nICgpIHtcbiAgICBsZXQgc3RyaW5nID0gW107XG4gICAgZm9yIChsZXQga2V5IGluIHRoaXMuX3BhcmFtcykge1xuICAgICAgc3RyaW5nLnB1c2goYCR7a2V5fT0ke1NlYXJjaFBhcmFtcy5lbmNvZGUodGhpcy5fcGFyYW1zW2tleV0pfWApO1xuICAgIH1cbiAgICByZXR1cm4gc3RyaW5nLmpvaW4oJyYnKTtcbiAgfVxuXG4gIGVudHJpZXMgKCkge1xuICAgIGxldCBlbnRyaWVzID0gW107XG4gICAgZm9yIChsZXQga2V5IGluIHRoaXMuX3BhcmFtcykge1xuICAgICAgZW50cmllcy5wdXNoKFtrZXksIHRoaXMuX3BhcmFtc1trZXldXSk7XG4gICAgfVxuICAgIHJldHVybiBlbnRyaWVzO1xuICB9XG5cbiAgLyoqXG4gICAqIGRlY29kZSByZXR1cm5zIHRoZSBkZWNvZGVkIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBnaXZlbiBzdHJpbmdcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyB0aGUgc3RyaW5nIHRvIGRlY29kZVxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuICBzdGF0aWMgZGVjb2RlIChzdHJpbmcpIHtcbiAgICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KHN0cmluZy5yZXBsYWNlKC9bICtdL2csICclMjAnKSk7XG4gIH1cblxuICAvKipcbiAgICogZGVjb2RlIHJldHVybnMgdGhlIGVuY29kZWQgcmVwcmVzZW50YXRpb24gb2YgdGhlIGdpdmVuIHN0cmluZyAoZS5nLiArIC0+ICUyQilcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyB0aGUgc3RyaW5nIHRvIGVuY29kZVxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuICBzdGF0aWMgZW5jb2RlIChzdHJpbmcpIHtcbiAgICBsZXQgcmVwbGFjZSA9IHtcbiAgICAgICchJzogJyUyMScsXG4gICAgICBcIidcIjogJyUyNycsXG4gICAgICAnKCc6ICclMjgnLFxuICAgICAgJyknOiAnJTI5JyxcbiAgICAgICclMjAnOiAnKydcbiAgICB9O1xuICAgIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQoc3RyaW5nKS5yZXBsYWNlKC9bIScoKV18JTIwL2csIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgcmV0dXJuIHJlcGxhY2VbbWF0Y2hdO1xuICAgIH0pO1xuICB9XG59XG4iLCIvKiogQG1vZHVsZSBSZW5kZXJlciAqL1xuXG4vKipcbiAqIFJlbmRlcmVyIGlzIGFuIGFic3RyYWN0IGNsYXNzIHRoYXQgYWxsIFJlbmRlcmVycyBzaG91bGQgZXh0ZW5kIGFuZCBpbXBsZW1lbnRcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmVuZGVyZXIge1xuICAvKipcbiAgICogcmVuZGVyIGlzIGEgY29yZSBtZXRob2QgZm9yIGFsbCByZW5kZXJlcnMuXG4gICAqIEFsbCBpbXBsZW1lbnRhdGlvbnMgc2hvdWxkIG92ZXJyaWRlIHRoaXMgY2xhc3NcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRlbXBsYXRlXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBkYXRhXG4gICAqL1xuICByZW5kZXIgKHRlbXBsYXRlLCBkYXRhKSB7XG4gICAgcmV0dXJuIHRlbXBsYXRlO1xuICB9XG5cbiAgcmVnaXN0ZXJIZWxwZXIgKG5hbWUsIGNiKSB7XG5cbiAgfVxuXG4gIGNvbXBpbGUgKHRlbXBsYXRlKSB7XG5cbiAgfVxufVxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgU1ZHSWNvbiB7XG4gIC8qKlxuICAgKiBAcGFyYW0gY29uZmlnXG4gICAqIEBwYXJhbSBjb25maWcubmFtZVxuICAgKiBAcGFyYW0gY29uZmlnLnBhdGhcbiAgICogQHBhcmFtIGNvbmZpZy5jb21wbGV4Q29udGVudHNcbiAgICogQHBhcmFtIGNvbmZpZy52aWV3Qm94XG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKi9cbiAgY29uc3RydWN0b3IgKGNvbmZpZykge1xuICAgIC8qKlxuICAgICAqIHRoZSBuYW1lIG9mIHRoZSBpY29uXG4gICAgICovXG4gICAgdGhpcy5uYW1lID0gY29uZmlnLm5hbWU7XG4gICAgLyoqXG4gICAgICogYW4gc3ZnIHBhdGggZGVmaW5pdGlvblxuICAgICAqL1xuICAgIHRoaXMucGF0aCA9IGNvbmZpZy5wYXRoO1xuICAgIC8qKlxuICAgICAqIGlmIG5vdCB1c2luZyBhIHBhdGgsIGEgdGhlIG1hcmt1cCBmb3IgYSBjb21wbGV4IFNWR1xuICAgICAqL1xuICAgIHRoaXMuY29tcGxleENvbnRlbnRzID0gY29uZmlnLmNvbXBsZXhDb250ZW50cztcbiAgICAvKipcbiAgICAgKiB0aGUgdmlldyBib3ggZGVmaW5pdGlvbiwgZGVmYXVsdHMgdG8gMjR4MjRcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMudmlld0JveCA9IGNvbmZpZy52aWV3Qm94IHx8ICcwIDAgMjQgMjQnO1xuICAgIC8qKlxuICAgICAqIGFjdHVhbCBjb250ZW50cyB1c2VkXG4gICAgICovXG4gICAgdGhpcy5jb250ZW50cyA9IHRoaXMucGF0aERlZmluaXRpb24oKTtcbiAgfVxuXG4gIHBhdGhEZWZpbml0aW9uICgpIHtcbiAgICBpZiAodGhpcy5jb21wbGV4Q29udGVudHMpIHtcbiAgICAgIHJldHVybiB0aGlzLmNvbXBsZXhDb250ZW50cztcbiAgICB9XG5cbiAgICByZXR1cm4gYDxwYXRoIGQ9XCIke3RoaXMucGF0aH1cIj48L3BhdGg+YDtcbiAgfVxuXG4gIHBhcnNlQ29udGVudHMgKGNvbXBsZXhDb250ZW50c1BhcmFtcykge1xuICAgIGxldCBjb250ZW50cyA9IHRoaXMuY29udGVudHM7XG4gICAgaWYgKHR5cGVvZiBjb250ZW50cyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgY29udGVudHMgPSBjb250ZW50cyhjb21wbGV4Q29udGVudHNQYXJhbXMpO1xuICAgIH1cbiAgICByZXR1cm4gYDxzdmcgdmlld0JveD1cIiR7dGhpcy52aWV3Qm94fVwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj4ke2NvbnRlbnRzfTwvc3ZnPmA7XG4gIH1cblxuICAvKipcbiAgICogcmV0dXJucyB0aGUgc3ZnIG1hcmt1cFxuICAgKi9cbiAgbWFya3VwICgpIHtcbiAgICBpZiAodHlwZW9mIHRoaXMuY29udGVudHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJldHVybiBjb21wbGV4Q29udGVudHNQYXJhbXMgPT4gdGhpcy5wYXJzZUNvbnRlbnRzKGNvbXBsZXhDb250ZW50c1BhcmFtcyk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnBhcnNlQ29udGVudHMoKTtcbiAgfVxufVxuIiwiaW1wb3J0IFNWR0ljb24gZnJvbSAnLi9pY29uLmpzJztcbmV4cG9ydCBkZWZhdWx0IG5ldyBTVkdJY29uKHtcbiAgbmFtZTogJ3RodW1iJyxcbiAgdmlld0JveDogJzAgMCAyNCAyMicsXG4gIHBhdGg6ICdNMTUuMjczIDFINS40NTVjLS45MDYgMC0xLjY4LjU1LTIuMDA4IDEuMzQyTC4xNTMgMTAuMDk3QTIuMTkgMi4xOSAwIDAwMCAxMC45djIuMmMwIDEuMjEuOTgyIDIuMiAyLjE4MiAyLjJoNi44ODNMOC4wMyAyMC4zMjdsLS4wMzMuMzUyYzAgLjQ1MS4xODYuODY5LjQ4IDEuMTY2TDkuNjMzIDIzbDcuMTc4LTcuMjQ5YTIuMTYgMi4xNiAwIDAwLjY0NC0xLjU1MXYtMTFjMC0xLjIxLS45ODItMi4yLTIuMTgyLTIuMnptMCAxMy4ybC00LjczNSA0Ljc3NEwxMS43NSAxMy4xSDIuMTgydi0yLjJsMy4yNzMtNy43aDkuODE4djExek0xOS42MzYgMUgyNHYxMy4yaC00LjM2NFYxeidcbn0pO1xuIiwiaW1wb3J0IFNWR0ljb24gZnJvbSAnLi9pY29uLmpzJztcbmV4cG9ydCBkZWZhdWx0IG5ldyBTVkdJY29uKHtcbiAgbmFtZTogJ3JlY2VpcHQnLFxuICBwYXRoOiAnTTE0LjYwNiA5LjVjLS42NzEtLjUxNS0xLjU5MS0uODMzLTIuNjA2LS44MzMgMS4wMTUgMCAxLjkzNS4zMTggMi42MDYuODMzem0tNy45ODUgMEgxLjY1NUExLjY2IDEuNjYgMCAwMTAgNy44MzNWMy42NjdDMCAyLjc0Ny43NDEgMiAxLjY1NSAyaDIwLjY5QTEuNjYgMS42NiAwIDAxMjQgMy42Njd2NC4xNjZBMS42NiAxLjY2IDAgMDEyMi4zNDUgOS41aC00Ljk2NlYyMkg2LjYyMVY5LjVoMi43NzNINi42MnptMTAuNzU4LTEuNjY3aDQuOTY2VjMuNjY3SDEuNjU1djQuMTY2aDQuOTY2di0yLjVoMTAuNzU4djIuNXonXG59KTtcbiIsImltcG9ydCBTVkdJY29uIGZyb20gJy4vaWNvbi5qcyc7XG5leHBvcnQgZGVmYXVsdCBuZXcgU1ZHSWNvbih7XG4gIG5hbWU6ICdwYW50aGVvbicsXG4gIHBhdGg6ICdNOS45NDcgMTYuNTk4aC4yNTJWOS40MTJoLS4yNTJhLjQzMi40MzIgMCAwMS0uMjMtLjA2NWMtLjA3LS4wNDMtLjEwNi0uMDkzLS4xMDYtLjE1TDkuMTUgNy44MnYtLjE1YzAtLjA0NC4wMjgtLjA4LjA4NC0uMTA5YS42OTEuNjkxIDAgMDEuMTA1LS4wODYuMjU0LjI1NCAwIDAxLjE0Ni0uMDQzSDEzLjZjLjA1NiAwIC4xMDQuMDE1LjE0Ni4wNDMuMDQyLjAzLjA5MS4wNTguMTQ3LjA4NmEuMjcxLjI3MSAwIDAxLjA2My4xMDhjLjAxNC4wNDMuMDA3LjA5My0uMDIuMTVsLS40MiAxLjM3OGEuMzc0LjM3NCAwIDAxLS4xNDcuMTUuMzcuMzcgMCAwMS0uMTkuMDY1aC0uMjUxdjcuMTg2aC4yNTJhLjM3LjM3IDAgMDEuMTg5LjA2NWMuMDcuMDQzLjExOS4wOTMuMTQ3LjE1bC40MiAxLjM3OGMuMDI3LjAyOC4wMzQuMDcxLjAyLjEyOWEuMjc1LjI3NSAwIDAxLS4wNjMuMTI5IDEuMzY0IDEuMzY0IDAgMDAtLjE0Ny4wODYuMjU0LjI1NCAwIDAxLS4xNDYuMDQzSDkuNDg1YS4yNTQuMjU0IDAgMDEtLjE0Ni0uMDQzLjY5MS42OTEgMCAwMS0uMTA1LS4wODZjLS4wNTYtLjAyOS0uMDg0LS4wNzItLjA4NC0uMTN2LS4xMjhsLjQ2MS0xLjM3N2MwLS4wNTguMDM1LS4xMDguMTA1LS4xNTFhLjQzMi40MzIgMCAwMS4yMzEtLjA2NXptNS43OTIgMGguMjUyVjkuNDEyaC0uMjUyYS40MzIuNDMyIDAgMDEtLjIzLS4wNjUuMzc0LjM3NCAwIDAxLS4xNDgtLjE1bC0uNDItMS4zNzdjLS4wMjctLjAyOS0uMDM0LS4wNzItLjAyLS4xM2EuMjc1LjI3NSAwIDAxLjA2My0uMTI5Yy4wNTYtLjAyOC4xMDUtLjA1Ny4xNDYtLjA4NmEuMjU0LjI1NCAwIDAxLjE0Ny0uMDQzaDQuMTE0Yy4wNTUgMCAuMTA0LjAxNS4xNDYuMDQzYS42OTEuNjkxIDAgMDEuMTA1LjA4NmMuMDU2LjAzLjA4NC4wNzIuMDg0LjEzdi4xMjlsLS40MiAxLjM3N2EuMzc0LjM3NCAwIDAxLS4xNDYuMTUuNDMyLjQzMiAwIDAxLS4yMzEuMDY1aC0uMjF2Ny4xODZoLjIxYS40My40MyAwIDAxLjIzLjA2NWMuMDcuMDQzLjEyLjA5My4xNDguMTVsLjQyIDEuMzc4di4xNWMwIC4wNDMtLjAyOS4wOC0uMDg1LjEwOGEuNjkxLjY5MSAwIDAxLS4xMDUuMDg2LjI1NC4yNTQgMCAwMS0uMTQ2LjA0M2gtNC4xMTRhLjI1NC4yNTQgMCAwMS0uMTQ3LS4wNDMgMS4zNjQgMS4zNjQgMCAwMC0uMTQ2LS4wODYuMjcxLjI3MSAwIDAxLS4wNjMtLjEwOGMtLjAxNC0uMDQzLS4wMDctLjA5My4wMi0uMTVsLjQyLTEuMzc3YS4zNzQuMzc0IDAgMDEuMTQ3LS4xNTEuNDMyLjQzMiAwIDAxLjIzMS0uMDY1em0tMTEuNzk0LS4wODZoLjI1MlY5LjQ5OGgtLjI1MmEuMzM0LjMzNCAwIDAxLS4yMS0uMDY1LjM4Ni4zODYgMCAwMS0uMTI2LS4xOTNsLS40Mi0xLjM3N2EuMjQ4LjI0OCAwIDAxLS4wMi0uMTcyLjg1NC44NTQgMCAwMS4wNjMtLjE3M2MuMDI4LS4wNTcuMDctLjEuMTI2LS4xMjlhLjM2NS4zNjUgMCAwMS4xNjgtLjA0M2g0LjA3Yy4wNTcgMCAuMTEzLjAxNS4xNjkuMDQzYS4yNzguMjc4IDAgMDEuMTI2LjEzLjg1NC44NTQgMCAwMS4wNjIuMTcyLjI0OC4yNDggMCAwMS0uMDIuMTcybC0uNDIgMS4zNzdhLjM4Ni4zODYgMCAwMS0uMTI2LjE5My4zMzQuMzM0IDAgMDEtLjIxLjA2NWgtLjIxdjcuMDE0aC4yMWMuMDg0IDAgLjE1NC4wMjkuMjEuMDg2YS42NzMuNjczIDAgMDEuMTI2LjE3MmwuNDIgMS4zNzhhLjI0OC4yNDggMCAwMS4wMi4xNzIuODU0Ljg1NCAwIDAxLS4wNjIuMTcyLjI3OC4yNzggMCAwMS0uMTI2LjEyOS4zNjUuMzY1IDAgMDEtLjE2OC4wNDNIMy41MjZhLjM2NS4zNjUgMCAwMS0uMTY4LS4wNDMuMjc4LjI3OCAwIDAxLS4xMjYtLjEzLjg1NC44NTQgMCAwMS0uMDYzLS4xNzEuMjQ4LjI0OCAwIDAxLjAyLS4xNzJsLjQyLTEuMzc4YS42NzMuNjczIDAgMDEuMTI2LS4xNzIuMjgxLjI4MSAwIDAxLjIxLS4wODZ6TTEuNzYzIDYuNjU4YS43MTcuNzE3IDAgMDEtLjUwNC0uMTk0LjY0NC42NDQgMCAwMS0uMjEtLjQ5NXYtLjQzYS43My43MyAwIDAxLjEwNS0uMzg3LjY4LjY4IDAgMDEuMjczLS4yNTlDNC4zMDkgMy40MDIgNi41NCAyLjI3NiA4LjEyMSAxLjUxNSA5LjcwMi43NTUgMTAuNDkzLjM2MSAxMC40OTMuMzMyYy41MzEtLjI1OC45NzItLjM2NiAxLjMyMi0uMzIzLjM1LjA0My43MzQuMTY1IDEuMTU0LjM2Nmw4LjMxIDQuNTE4Yy4xNC4wNTguMjQ1LjE0NC4zMTUuMjU5YS43My43MyAwIDAxLjEwNS4zODd2LjQzYzAgLjIwMS0uMDcuMzY2LS4yMS40OTVhLjcxNy43MTcgMCAwMS0uNTA0LjE5NEgxLjc2M3ptLS43MTQgMTMuMzRhLjU0LjU0IDAgMDEuMTY4LS4zODcuNTE2LjUxNiAwIDAxLjM3OC0uMTcyaDE5LjY0MmMuMTY4IDAgLjMwOC4wNTcuNDIuMTcyYS41NDEuNTQxIDAgMDEuMTY4LjM4N3YuODE4YS41MjIuNTIyIDAgMDEtLjE2OC40MDguNjA1LjYwNSAwIDAxLS40Mi4xNTFIMS41OTVhLjU1MS41NTEgMCAwMS0uMzc4LS4xNS41MjIuNTIyIDAgMDEtLjE2OC0uNDF2LS44MTd6bTIxLjQwNSAyLjAyMmMuMTQgMCAuMjY2LjA1OC4zNzguMTczYS41OTIuNTkyIDAgMDEuMTY4LjQzdi44MThhLjU0MS41NDEgMCAwMS0uMTY4LjM4Ny41MTYuNTE2IDAgMDEtLjM3OC4xNzJMLjU0NiAyMy45NTdhLjUxNi41MTYgMCAwMS0uMzc4LS4xNzIuNTQxLjU0MSAwIDAxLS4xNjgtLjM4N3YtLjgxOGEuNTkuNTkgMCAwMS4xNjgtLjQzLjUxNi41MTYgMCAwMS4zNzgtLjE3M2wyMS45MDguMDQzeidcbn0pO1xuIiwiaW1wb3J0IFNWR0ljb24gZnJvbSAnLi9pY29uLmpzJztcbmV4cG9ydCBkZWZhdWx0IG5ldyBTVkdJY29uKHtcbiAgbmFtZTogJ21pYycsXG4gIHBhdGg6ICdNMTIgMTVjMS42NiAwIDIuOTktMS4zNCAyLjk5LTNMMTUgNmMwLTEuNjYtMS4zNC0zLTMtM1M5IDQuMzQgOSA2djZjMCAxLjY2IDEuMzQgMyAzIDN6bTUuMy0zYzAgMy0yLjU0IDUuMS01LjMgNS4xUzYuNyAxNSA2LjcgMTJINWMwIDMuNDEgMi43MiA2LjIzIDYgNi43MlYyMmgydi0zLjI4YzMuMjgtLjQ4IDYtMy4zIDYtNi43MmgtMS43eidcbn0pO1xuIiwiaW1wb3J0IFNWR0ljb24gZnJvbSAnLi9pY29uLmpzJztcbmV4cG9ydCBkZWZhdWx0IG5ldyBTVkdJY29uKHtcbiAgbmFtZTogJ2RpcmVjdGlvbnMnLFxuICBwYXRoOiAnTTIzLjY0OSAxMS4xNTRMMTIuODQ2LjM1YTEuMTk1IDEuMTk1IDAgMDAtMS42OTIgMEwuMzUgMTEuMTU0YTEuMTk1IDEuMTk1IDAgMDAwIDEuNjkyTDExLjE1NCAyMy42NWExLjE5NSAxLjE5NSAwIDAwMS42OTIgMEwyMy42NSAxMi44NDZjLjQ2OC0uNDU2LjQ2OC0xLjIxMiAwLTEuNjkyem0tOS4yNTQgMy44NTN2LTMuMDAxSDkuNTkzdjMuNmgtMi40di00LjhjMC0uNjYuNTQtMS4yIDEuMi0xLjJoNi4wMDJWNi42MDRsNC4yIDQuMi00LjIgNC4yMDJ6J1xufSk7XG4iLCJpbXBvcnQgU1ZHSWNvbiBmcm9tICcuL2ljb24uanMnO1xuZXhwb3J0IGRlZmF1bHQgbmV3IFNWR0ljb24oe1xuICBuYW1lOiAnY2FsZW5kYXInLFxuICBwYXRoOiAnTTE4LjExMSAxMy4ySDEydjZoNi4xMTF2LTZ6TTE2Ljg5IDB2Mi40SDcuMTFWMEg0LjY2N3YyLjRIMy40NDRjLTEuMzU2IDAtMi40MzIgMS4wOC0yLjQzMiAyLjRMMSAyMS42QzEgMjIuOTIgMi4wODggMjQgMy40NDQgMjRoMTcuMTEyQzIxLjkgMjQgMjMgMjIuOTIgMjMgMjEuNlY0LjhjMC0xLjMyLTEuMS0yLjQtMi40NDQtMi40aC0xLjIyM1YwSDE2Ljg5em0zLjY2NyAyMS42SDMuNDQ0VjguNGgxNy4xMTJ2MTMuMnonXG59KTtcbiIsImltcG9ydCBTVkdJY29uIGZyb20gJy4vaWNvbi5qcyc7XG5leHBvcnQgZGVmYXVsdCBuZXcgU1ZHSWNvbih7XG4gIG5hbWU6ICdjYWxsb3V0JyxcbiAgcGF0aDogJ00yMS45OSA0YzAtMS4xLS44OS0yLTEuOTktMkg0Yy0xLjEgMC0yIC45LTIgMnYxMmMwIDEuMS45IDIgMiAyaDE0bDQgNC0uMDEtMTh6J1xufSk7XG4iLCJpbXBvcnQgU1ZHSWNvbiBmcm9tICcuL2ljb24uanMnO1xuZXhwb3J0IGRlZmF1bHQgbmV3IFNWR0ljb24oe1xuICBuYW1lOiAnaW5mbycsXG4gIHBhdGg6ICdNMTIgOC40QTEuMiAxLjIgMCAxMDEyIDZhMS4yIDEuMiAwIDAwMCAyLjR6TTEyIDBjNi42MjQgMCAxMiA1LjM3NiAxMiAxMnMtNS4zNzYgMTItMTIgMTJTMCAxOC42MjQgMCAxMiA1LjM3NiAwIDEyIDB6bTAgMThjLjY2IDAgMS4yLS41NCAxLjItMS4yVjEyYzAtLjY2LS41NC0xLjItMS4yLTEuMi0uNjYgMC0xLjIuNTQtMS4yIDEuMnY0LjhjMCAuNjYuNTQgMS4yIDEuMiAxLjJ6J1xufSk7XG4iLCJpbXBvcnQgU1ZHSWNvbiBmcm9tICcuL2ljb24uanMnO1xuZXhwb3J0IGRlZmF1bHQgbmV3IFNWR0ljb24oe1xuICBuYW1lOiAnYnJpZWZjYXNlJyxcbiAgcGF0aDogJ00yMCA3aC00VjVjMC0xLjExLS44OS0yLTItMmgtNGMtMS4xMSAwLTIgLjg5LTIgMnYySDRjLTEuMTEgMC0xLjk5Ljg5LTEuOTkgMkwyIDIwYzAgMS4xMS44OSAyIDIgMmgxNmMxLjExIDAgMi0uODkgMi0yVjljMC0xLjExLS44OS0yLTItMnptLTYgMGgtNFY1aDR2MnonXG59KTtcbiIsImltcG9ydCBTVkdJY29uIGZyb20gJy4vaWNvbi5qcyc7XG5leHBvcnQgZGVmYXVsdCBuZXcgU1ZHSWNvbih7XG4gIG5hbWU6ICdrYWJvYicsXG4gIHZpZXdCb3g6ICcwIDAgMyAxMScsXG4gIGNvbXBsZXhDb250ZW50czogYDxjaXJjbGUgY3g9XCIxLjVcIiBjeT1cIjEuNVwiIHI9XCIxLjVcIi8+PGNpcmNsZSBjeD1cIjEuNVwiIGN5PVwiNS41XCIgcj1cIjEuNVwiLz48Y2lyY2xlIGN4PVwiMS41XCIgY3k9XCI5LjVcIiByPVwiMS41XCIvPmBcbn0pO1xuIiwiaW1wb3J0IFNWR0ljb24gZnJvbSAnLi9pY29uLmpzJztcbmV4cG9ydCBkZWZhdWx0IG5ldyBTVkdJY29uKHtcbiAgbmFtZTogJ3BlcnNvbicsXG4gIHZpZXdCb3g6ICcwIDAgMTggMTgnLFxuICBwYXRoOiAnTTkgOWMyLjQ4NiAwIDQuNS0yLjAxNCA0LjUtNC41UzExLjQ4NiAwIDkgMGE0LjQ5OSA0LjQ5OSAwIDAwLTQuNSA0LjVDNC41IDYuOTg2IDYuNTE0IDkgOSA5em0wIDIuMjVjLTMuMDA0IDAtOSAxLjUwOC05IDQuNXYxLjEyNUMwIDE3LjQ5NC41MDYgMTggMS4xMjUgMThoMTUuNzVjLjYxOSAwIDEuMTI1LS41MDYgMS4xMjUtMS4xMjVWMTUuNzVjMC0yLjk5Mi01Ljk5Ni00LjUtOS00LjV6J1xufSk7XG4iLCJpbXBvcnQgU1ZHSWNvbiBmcm9tICcuL2ljb24uanMnO1xuZXhwb3J0IGRlZmF1bHQgbmV3IFNWR0ljb24oe1xuICBuYW1lOiAnbWFnbmlmeWluZ19nbGFzcycsXG4gIHBhdGg6ICdNMTYuMTI0IDEzLjA1MWE1LjE1NCA1LjE1NCAwIDExMC0xMC4zMDggNS4xNTQgNS4xNTQgMCAwMTAgMTAuMzA4TTE2LjExNCAwYTcuODg2IDcuODg2IDAgMDAtNi40NiAxMi40MDdMMCAyMi4wNiAxLjk0IDI0bDkuNjUzLTkuNjUzQTcuODg2IDcuODg2IDAgMTAxNi4xMTMgMCdcbn0pO1xuIiwiaW1wb3J0IFNWR0ljb24gZnJvbSAnLi9pY29uLmpzJztcbmV4cG9ydCBkZWZhdWx0IG5ldyBTVkdJY29uKHtcbiAgbmFtZTogJ29mZmljZScsXG4gIHBhdGg6ICdNMTIgN1YzSDJ2MThoMjBWN0gxMnpNNiAxOUg0di0yaDJ2MnptMC00SDR2LTJoMnYyem0wLTRINFY5aDJ2MnptMC00SDRWNWgydjJ6bTQgMTJIOHYtMmgydjJ6bTAtNEg4di0yaDJ2MnptMC00SDhWOWgydjJ6bTAtNEg4VjVoMnYyem0xMCAxMmgtOHYtMmgydi0yaC0ydi0yaDJ2LTJoLTJWOWg4djEwem0tMi04aC0ydjJoMnYtMnptMCA0aC0ydjJoMnYtMnonXG59KTtcbiIsImltcG9ydCBTVkdJY29uIGZyb20gJy4vaWNvbi5qcyc7XG5leHBvcnQgZGVmYXVsdCBuZXcgU1ZHSWNvbih7XG4gIG5hbWU6ICdsaW5rJyxcbiAgcGF0aDogJ00yLjI4IDEyQTMuNzIzIDMuNzIzIDAgMDE2IDguMjhoNC44VjZINmMtMy4zMTIgMC02IDIuNjg4LTYgNnMyLjY4OCA2IDYgNmg0Ljh2LTIuMjhINkEzLjcyMyAzLjcyMyAwIDAxMi4yOCAxMnptNC45MiAxLjJoOS42di0yLjRINy4ydjIuNHpNMTggNmgtNC44djIuMjhIMThBMy43MjMgMy43MjMgMCAwMTIxLjcyIDEyIDMuNzIzIDMuNzIzIDAgMDExOCAxNS43MmgtNC44VjE4SDE4YzMuMzEyIDAgNi0yLjY4OCA2LTZzLTIuNjg4LTYtNi02eidcbn0pO1xuIiwiaW1wb3J0IFNWR0ljb24gZnJvbSAnLi9pY29uLmpzJztcbmV4cG9ydCBkZWZhdWx0IG5ldyBTVkdJY29uKHtcbiAgbmFtZTogJ3dpbmRvdycsXG4gIHBhdGg6ICdNMyAxM2g4VjNIM3YxMHptMCA4aDh2LTZIM3Y2em0xMCAwaDhWMTFoLTh2MTB6bTAtMTh2Nmg4VjNoLTh6J1xufSk7XG4iLCJpbXBvcnQgU1ZHSWNvbiBmcm9tICcuL2ljb24uanMnO1xuZXhwb3J0IGRlZmF1bHQgbmV3IFNWR0ljb24oe1xuICBuYW1lOiAncGhvbmUnLFxuICBwYXRoOiAnTTQuODI3IDEwLjM4N2EyMC4xOTggMjAuMTk4IDAgMDA4Ljc4NiA4Ljc4NmwyLjkzNC0yLjkzM2MuMzYtLjM2Ljg5My0uNDggMS4zNi0uMzJhMTUuMjEgMTUuMjEgMCAwMDQuNzYuNzZjLjczMyAwIDEuMzMzLjYgMS4zMzMgMS4zMzN2NC42NTRDMjQgMjMuNCAyMy40IDI0IDIyLjY2NyAyNCAxMC4xNDcgMjQgMCAxMy44NTMgMCAxLjMzMyAwIC42LjYgMCAxLjMzMyAwSDZjLjczMyAwIDEuMzMzLjYgMS4zMzMgMS4zMzMgMCAxLjY2Ny4yNjcgMy4yNjcuNzYgNC43Ni4xNDcuNDY3LjA0Ljk4Ny0uMzMzIDEuMzZsLTIuOTMzIDIuOTM0eidcbn0pO1xuIiwiaW1wb3J0IFNWR0ljb24gZnJvbSAnLi9pY29uLmpzJztcbmV4cG9ydCBkZWZhdWx0IG5ldyBTVkdJY29uKHtcbiAgbmFtZTogJ3RhZycsXG4gIHZpZXdCb3g6ICcwIDAgMTggMTgnLFxuICBwYXRoOiAnTTE3LjQ2OSA4LjYyMmwtOC4xLTguMUExLjc4OSAxLjc4OSAwIDAwOC4xIDBIMS44Qy44MSAwIDAgLjgxIDAgMS44djYuM2MwIC40OTUuMTk4Ljk0NS41MzEgMS4yNzhsOC4xIDguMWMuMzI0LjMyNC43NzQuNTIyIDEuMjY5LjUyMmExLjc2IDEuNzYgMCAwMDEuMjY5LS41MzFsNi4zLTYuM0ExLjc2IDEuNzYgMCAwMDE4IDkuOWMwLS40OTUtLjIwNy0uOTU0LS41MzEtMS4yNzh6TTMuMTUgNC41Yy0uNzQ3IDAtMS4zNS0uNjAzLTEuMzUtMS4zNSAwLS43NDcuNjAzLTEuMzUgMS4zNS0xLjM1Ljc0NyAwIDEuMzUuNjAzIDEuMzUgMS4zNSAwIC43NDctLjYwMyAxLjM1LTEuMzUgMS4zNXonXG59KTtcbiIsImltcG9ydCBTVkdJY29uIGZyb20gJy4vaWNvbi5qcyc7XG5leHBvcnQgZGVmYXVsdCBuZXcgU1ZHSWNvbih7XG4gIG5hbWU6ICdkb2N1bWVudCcsXG4gIHBhdGg6ICdNNCA2SDJ2MTRjMCAxLjEuOSAyIDIgMmgxNHYtMkg0VjZ6bTE2LTRIOGMtMS4xIDAtMiAuOS0yIDJ2MTJjMCAxLjEuOSAyIDIgMmgxMmMxLjEgMCAyLS45IDItMlY0YzAtMS4xLS45LTItMi0yem0tMSA5SDlWOWgxMHYyem0tNCA0SDl2LTJoNnYyem00LThIOVY1aDEwdjJ6J1xufSk7XG4iLCJpbXBvcnQgU1ZHSWNvbiBmcm9tICcuL2ljb24uanMnO1xuZXhwb3J0IGRlZmF1bHQgbmV3IFNWR0ljb24oe1xuICBuYW1lOiAnY2hldnJvbicsXG4gIHZpZXdCb3g6ICcwIDAgNyA5JyxcbiAgY29tcGxleENvbnRlbnRzOiBgPGcgZmlsbC1ydWxlPVwiZXZlbm9kZFwiIHRyYW5zZm9ybT1cInRyYW5zbGF0ZSgtMSAtOClcIj48cGF0aCBkPVwibTIuNjQxNzAwNCA4LTEuMTQxNzAwNCAxLjA1NzUgMy43MDg1MDIwMiAzLjQ0MjUtMy43MDg1MDIwMiAzLjQ0MjUgMS4xNDE3MDA0IDEuMDU3NSA0Ljg1ODI5OTYtNC41elwiLz48L2c+YFxufSk7XG4iLCJpbXBvcnQgU1ZHSWNvbiBmcm9tICcuL2ljb24uanMnO1xuZXhwb3J0IGRlZmF1bHQgbmV3IFNWR0ljb24oe1xuICBuYW1lOiAnc3VwcG9ydCcsXG4gIHBhdGg6ICdNMTIsMCBDNS4zNzYsMCAwLDUuMzc2IDAsMTIgQzAsMTguNjI0IDUuMzc2LDI0IDEyLDI0IEMxOC42MjQsMjQgMjQsMTguNjI0IDI0LDEyIEMyNCw1LjM3NiAxOC42MjQsMCAxMiwwIFogTTEzLDE5IEwxMSwxOSBMMTEsMTcgTDEzLDE3IEwxMywxOSBaIE0xNS4wNywxMS4yNSBMMTQuMTcsMTIuMTcgQzEzLjQ1LDEyLjkgMTMsMTMuNSAxMywxNSBMMTEsMTUgTDExLDE0LjUgQzExLDEzLjQgMTEuNDUsMTIuNCAxMi4xNywxMS42NyBMMTMuNDEsMTAuNDEgQzEzLjc4LDEwLjA1IDE0LDkuNTUgMTQsOSBDMTQsNy45IDEzLjEsNyAxMiw3IEMxMC45LDcgMTAsNy45IDEwLDkgTDgsOSBDOCw2Ljc5IDkuNzksNSAxMiw1IEMxNC4yMSw1IDE2LDYuNzkgMTYsOSBDMTYsOS44OCAxNS42NCwxMC42OCAxNS4wNywxMS4yNSBaJ1xufSk7XG4iLCJpbXBvcnQgU1ZHSWNvbiBmcm9tICcuL2ljb24uanMnO1xuZXhwb3J0IGRlZmF1bHQgbmV3IFNWR0ljb24oe1xuICBuYW1lOiAneWV4dCcsXG4gIHZpZXdCb3g6ICcwIDAgMzAgMzAnLFxuICBwYXRoOiAnTTI1LjUxNyAyOC4xNDJ2LjA5NWgtLjIwNHYuOTA1aC0uMDY2di0uOTA1aC0uMTk3di0uMDk1aC40Njd6bS42NjcgMGguMDY2djFoLS4wNjZ2LS44MjVsLS4yNC41OTVoLS4wMTNsLS4yNC0uNTk1di44MjVoLS4wNjZ2LTFoLjA2NmwuMjQ3LjYxLjI0Ni0uNjF6TTE1IDI4LjhjNy42MjIgMCAxMy44LTYuMTc4IDEzLjgtMTMuOCAwLTcuNjIyLTYuMTc4LTEzLjgtMTMuOC0xMy44QzcuMzc4IDEuMiAxLjIgNy4zNzggMS4yIDE1YzAgNy42MjIgNi4xNzggMTMuOCAxMy44IDEzLjh6TTE1IDBjOC4yODQgMCAxNSA2LjcxNiAxNSAxNSAwIDguMjg0LTYuNzE2IDE1LTE1IDE1LTguMjg0IDAtMTUtNi43MTYtMTUtMTVDMCA2LjcxNiA2LjcxNiAwIDE1IDB6bS40NSAxNi42NXYtMS4yaDYuNnYxLjJoLTIuN3Y1LjRoLTEuMnYtNS40aC0yLjd6bS0xLjU5OS0xLjM1bC44NDkuODQ5LTIuNjAxIDIuNjAxIDIuNjAxIDIuNjAxLS44NDkuODQ5LTIuNjAxLTIuNjAxTDguNjQ5IDIyLjJsLS44NDktLjg0OSAyLjYwMS0yLjYwMUw3LjggMTYuMTQ5bC44NDktLjg0OSAyLjYwMSAyLjYwMSAyLjYwMS0yLjYwMXpNMTguNjc1IDlhMi4xNzUgMi4xNzUgMCAwMC0xLjg0NyAzLjMyM2wyLjk5NS0yLjk5NUEyLjE2MyAyLjE2MyAwIDAwMTguNjc1IDl6bTAgNS41NWEzLjM3NSAzLjM3NSAwIDExMi44MzMtNS4yMDlsLTMuNzg5IDMuNzg4YTIuMTc1IDIuMTc1IDAgMDAzLjEzLTEuOTU0aDEuMjAxYTMuMzc1IDMuMzc1IDAgMDEtMy4zNzUgMy4zNzV6bS03LjQyNS0zLjczNEwxMy43OCA3LjhsLjkyLjc3MS0yLjg1IDMuMzk3djIuNTgyaC0xLjJ2LTIuNTgyTDcuOCA4LjU3bC45Mi0uNzcxIDIuNTMgMy4wMTZ6J1xufSk7XG4iLCJpbXBvcnQgU1ZHSWNvbiBmcm9tICcuL2ljb24uanMnO1xuZXhwb3J0IGRlZmF1bHQgbmV3IFNWR0ljb24oe1xuICBuYW1lOiAncGluJyxcbiAgdmlld0JveDogJzUgMCA5IDE4JyxcbiAgcGF0aDogJ205LjM3NSAwYy0zLjUyNDQ2NDI5IDAtNi4zNzUgMi44MTctNi4zNzUgNi4zIDAgNC43MjUgNi4zNzUgMTEuNyA2LjM3NSAxMS43czYuMzc1LTYuOTc1IDYuMzc1LTExLjdjMC0zLjQ4My0yLjg1MDUzNTctNi4zLTYuMzc1LTYuM3ptLjAwMDAwMDE4IDguNTUwMDAwMDdjLTEuMjU2Nzg1NzYgMC0yLjI3Njc4NTc5LTEuMDA4LTIuMjc2Nzg1NzktMi4yNXMxLjAyMDAwMDAzLTIuMjUgMi4yNzY3ODU3OS0yLjI1YzEuMjU2Nzg1NzIgMCAyLjI3Njc4NTgyIDEuMDA4IDIuMjc2Nzg1ODIgMi4yNXMtMS4wMjAwMDAxIDIuMjUtMi4yNzY3ODU4MiAyLjI1eidcbn0pO1xuIiwiaW1wb3J0IFNWR0ljb24gZnJvbSAnLi9pY29uLmpzJztcbmV4cG9ydCBkZWZhdWx0IG5ldyBTVkdJY29uKHtcbiAgbmFtZTogJ2dlYXInLFxuICBwYXRoOiAnTTEyIDEwYy0xLjEgMC0yIC45LTIgMnMuOSAyIDIgMiAyLS45IDItMi0uOS0yLTItMnptNy03SDVhMiAyIDAgMDAtMiAydjE0YTIgMiAwIDAwMiAyaDE0YTIgMiAwIDAwMi0yVjVhMiAyIDAgMDAtMi0yem0tMS43NSA5YzAgLjIzLS4wMi40Ni0uMDUuNjhsMS40OCAxLjE2Yy4xMy4xMS4xNy4zLjA4LjQ1bC0xLjQgMi40MmMtLjA5LjE1LS4yNy4yMS0uNDMuMTVsLTEuNzQtLjdjLS4zNi4yOC0uNzYuNTEtMS4xOC42OWwtLjI2IDEuODVjLS4wMy4xNy0uMTguMy0uMzUuM2gtMi44Yy0uMTcgMC0uMzItLjEzLS4zNS0uMjlsLS4yNi0xLjg1Yy0uNDMtLjE4LS44Mi0uNDEtMS4xOC0uNjlsLTEuNzQuN2MtLjE2LjA2LS4zNCAwLS40My0uMTVsLTEuNC0yLjQyYS4zNTMuMzUzIDAgMDEuMDgtLjQ1bDEuNDgtMS4xNmMtLjAzLS4yMy0uMDUtLjQ2LS4wNS0uNjkgMC0uMjMuMDItLjQ2LjA1LS42OGwtMS40OC0xLjE2YS4zNTMuMzUzIDAgMDEtLjA4LS40NWwxLjQtMi40MmMuMDktLjE1LjI3LS4yMS40My0uMTVsMS43NC43Yy4zNi0uMjguNzYtLjUxIDEuMTgtLjY5bC4yNi0xLjg1Yy4wMy0uMTcuMTgtLjMuMzUtLjNoMi44Yy4xNyAwIC4zMi4xMy4zNS4yOWwuMjYgMS44NWMuNDMuMTguODIuNDEgMS4xOC42OWwxLjc0LS43Yy4xNi0uMDYuMzQgMCAuNDMuMTVsMS40IDIuNDJjLjA5LjE1LjA1LjM0LS4wOC40NWwtMS40OCAxLjE2Yy4wMy4yMy4wNS40Ni4wNS42OXonXG59KTtcbiIsImltcG9ydCBTVkdJY29uIGZyb20gJy4vaWNvbi5qcyc7XG5leHBvcnQgZGVmYXVsdCBuZXcgU1ZHSWNvbih7XG4gIG5hbWU6ICdsaWdodF9idWxiJyxcbiAgdmlld0JveDogJzAgMCAzMiAzNScsXG4gIHBhdGg6ICdNMTEuNTg1IDMxLjA1Nmw4LjM4LS40OTN2LS45ODZsLTguMzguNDkzek0xMS41ODUgMzMuMDI4TDE1Ljc3NSAzNWw0LjE5LTEuOTcyVjMxLjU1bC04LjM4LjQ5M3YuOTg2em02LjkyNi0uNDA3bC0yLjczNiAxLjI5LTIuMTMtMS4wMDQgNC44NjYtLjI4NnpNMTUuNzc1IDcuMzk0Yy00LjYzIDAtOC4zOCAzLjIwNS04LjM4IDguMzggMCA1LjE3NyA0LjE5IDYuOTAyIDQuMTkgMTIuODE4di40OTNsOC4zOC0uNDkzYzAtNS45MTYgNC4xOS04LjE4OCA0LjE5LTEyLjgxN2E4LjM4IDguMzggMCAwMC04LjM4LTguMzh6bTUuNjE3IDEzLjQ4Yy0xLjAyNSAxLjgzNy0yLjE3NCAzLjg5Mi0yLjM4MSA2Ljc4NmwtNi40NC4zOGMtLjEyOS0zLjAxLTEuMjktNS4wMjEtMi4zMi02LjgwOC0uNDkzLS44LS45MjgtMS42MzYtMS4yOTktMi41aDEzLjU1NmMtLjMyNS43MDgtLjcwNCAxLjQwMy0xLjExNiAyLjE0MnptMS40NzktMy4xMjhIOC42MjdhNy43OTMgNy43OTMgMCAwMS0uMjQ3LTEuOTcxYzAtNC4zNTMgMy4wNDItNy4zOTUgNy4zOTUtNy4zOTVhNy4zOTQgNy4zOTQgMCAwMTcuMzk0IDcuMzk1IDYuNzM5IDYuNzM5IDAgMDEtLjMgMS45NzFoLjAwMnpNMjYuNjIgMTUuMjgyaDQuOTN2MWgtNC45M3pNMjMuMDk0IDcuNzU2bDIuMDkxLTIuMDkxLjY5OC42OTctMi4wOTIgMi4wOTJ6TTE1LjI4MiAwaDF2NC45M2gtMXpNNS42NjYgNi4zNjJsLjY5Ny0uNjk3IDIuMDkxIDIuMDkxLS42OTcuNjk3ek0wIDE1LjI4Mmg0LjkzdjFIMHonXG59KTtcbiIsImltcG9ydCBTVkdJY29uIGZyb20gJy4vaWNvbi5qcyc7XG5leHBvcnQgZGVmYXVsdCBuZXcgU1ZHSWNvbih7XG4gIG5hbWU6ICdzdGFyJyxcbiAgdmlld0JveDogJzAgMCAxOCAxOCcsXG4gIHBhdGg6ICdNOC45OTEgMEM0LjAyMyAwIDAgNC4wMzIgMCA5czQuMDIzIDkgOC45OTEgOUMxMy45NjggMTggMTggMTMuOTY4IDE4IDlzLTQuMDMyLTktOS4wMDktOXptMy44MTYgMTQuNEw5IDEyLjEwNSA1LjE5MyAxNC40bDEuMDA4LTQuMzI5LTMuMzU3LTIuOTA3IDQuNDI4LS4zNzhMOSAyLjdsMS43MjggNC4wNzcgNC40MjguMzc4LTMuMzU3IDIuOTA3eidcbn0pO1xuIiwiaW1wb3J0IFNWR0ljb24gZnJvbSAnLi9pY29uLmpzJztcbmV4cG9ydCBkZWZhdWx0IG5ldyBTVkdJY29uKHtcbiAgbmFtZTogJ2Nsb3NlJyxcbiAgY29tcGxleENvbnRlbnRzOiBgXG4gICAgPHBhdGggZD1cIk03IDhsOS43MTYgOS43MTZtMC05LjcxNkw3IDE3LjcxNlwiIFxuICAgICAgICAgIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIFxuICAgICAgICAgIHN0cm9rZS13aWR0aD1cIjJcIi8+XG4gIGBcbn0pO1xuIiwiaW1wb3J0IFNWR0ljb24gZnJvbSAnLi9pY29uLmpzJztcbmV4cG9ydCBkZWZhdWx0IG5ldyBTVkdJY29uKHtcbiAgbmFtZTogJ2VsZW1lbnRzJyxcbiAgcGF0aDogJ00xMywxNSBMMTMsMTcgTDIxLDE3IEwyMSwxOSBMMTMsMTkgTDEzLDIxIEwxMSwyMSBMMTEsMTUgTDEzLDE1IFogTTksMTcgTDksMTkgTDMsMTkgTDMsMTcgTDksMTcgWiBNOSwxNSBMNywxNSBMNywxMyBMMywxMyBMMywxMSBMNywxMSBMNyw5IEw5LDkgTDksMTUgWiBNMjEsMTEgTDIxLDEzIEwxMSwxMyBMMTEsMTEgTDIxLDExIFogTTE3LDMgTDE3LDUgTDIxLDUgTDIxLDcgTDE3LDcgTDE3LDkgTDE1LDkgTDE1LDMgTDE3LDMgWiBNMTMsNSBMMTMsNyBMMyw3IEwzLDUgTDEzLDUgWidcbn0pO1xuIiwiaW1wb3J0IFNWR0ljb24gZnJvbSAnLi9pY29uLmpzJztcbmV4cG9ydCBkZWZhdWx0IG5ldyBTVkdJY29uKHtcbiAgbmFtZTogJ3lleHRfYW5pbWF0ZWRfcmV2ZXJzZScsXG4gIHZpZXdCb3g6ICcwIDAgNzIgNzInLFxuICBjb21wbGV4Q29udGVudHM6IChwYXJhbXMgPSB7fSkgPT4ge1xuICAgIGNvbnN0IGljb25QcmVmaXggPSBwYXJhbXMuaWNvblByZWZpeCB8fCAneXh0JztcbiAgICByZXR1cm4gYDxkZWZzPlxuICAgICAgPG1hc2sgaWQ9XCIke2ljb25QcmVmaXh9X3JldmVyc2VfTWFzay0xXCI+XG4gICAgICAgIDxyZWN0IGZpbGw9XCIjZmZmXCIgd2lkdGg9XCI3MjBcIiBoZWlnaHQ9XCI3MjBcIiAvPlxuICAgICAgPC9tYXNrPlxuICAgICAgPG1hc2sgaWQ9XCIke2ljb25QcmVmaXh9X3JldmVyc2VfTWFzay0yXCI+XG4gICAgICAgIDxyZWN0IHg9XCItMTQ0LjNcIiB5PVwiMTQ0LjNcIiBmaWxsPVwiI2ZmZlwiIHdpZHRoPVwiNzIwXCIgaGVpZ2h0PVwiNzIwXCIgLz5cbiAgICAgICAgPHBhdGggZD1cIk0tMC4zIC4xYzAgMCAxLjMgMS4yIDEuMyAxLjJjMCAwIC4zLTEuNiAuMy0xLjZjMCAwLTEuNiAuNC0xLjYgLjRcIiAvPlxuICAgICAgICA8cGF0aCBmaWxsPVwiI2ZmZlwiIGQ9XCJNLjMgLjdjMCAwLTAuMyAuMy0wLjMgLjNjMCAwIDAgMCAwIDBjMCAwIC4zLTAuMyAuMy0wLjNjMCAwIDAgMCAwIDBcIiAvPlxuICAgICAgICA8cGF0aCBkPVwiTS4zIC43YzAgMC0wLjEgMC0wLjEgMGMwIDAgLjEgLjEgLjEgLjFjMCAwIC4xLTAuMSAuMS0wLjFjMCAwLTAuMSAwLTAuMSAwbTIyMi44IDQ2OS4xYzAgMC03MC41IDY5LjQtNzAuNSA2OS40YzAgMCAzNC4xIDMzLjUgMzQuMSAzMy41YzAgMCA2Ny03Mi45IDY3LTcyLjljMCAwLTMwLjYtMzAtMzAuNi0zMFwiIC8+XG4gICAgICA8L21hc2s+XG4gICAgICA8bWFzayBpZD1cIiR7aWNvblByZWZpeH1fcmV2ZXJzZV9NYXNrLTNcIj5cbiAgICAgICAgPHJlY3QgZmlsbD1cIiNmZmZcIiB3aWR0aD1cIjcyMFwiIGhlaWdodD1cIjcyMFwiIC8+XG4gICAgICAgIDxwYXRoIGQ9XCJNNDg5LjggMjc3LjRjMCAwIDc4IDE4LjggNzggMTguOGMwIDAtOTYuMSA2MS41LTk2LjEgNjEuNWMwIDAgNTkuNi00MS4xIDU5LjYtNDEuMWMwIDAgMTAuNi01My44IDEwLjYtNTMuOGMwIDAtMzguMiAuNi0zOC4yIC42YzAgMC0xMy45IDE0LTEzLjkgMTRtLTY3LjgtMTA4LjFjMCAwIDczLjkgMS4zIDczLjkgMS4zYzAgMC0zMy44IDU0LjUtMzMuOCA1NC41YzAgMCAxOC42LTMuMiAxOC42LTMuMmMwIDAgMzUuNC0zNi41IDM1LjQtMzYuNWMwIDAtNjItMjUuOS02Mi0yNS45YzAgMC0zMi4xIDkuOC0zMi4xIDkuOFwiIC8+XG4gICAgICA8L21hc2s+XG4gICAgICA8bWFzayBpZD1cIiR7aWNvblByZWZpeH1fcmV2ZXJzZV9NYXNrLTRcIj5cbiAgICAgICAgPHJlY3QgeD1cIi05MS4xXCIgeT1cIjkxLjFcIiBmaWxsPVwiI2ZmZlwiIHdpZHRoPVwiNzIwXCIgaGVpZ2h0PVwiNzIwXCIgLz5cbiAgICAgICAgPHBhdGggZD1cIk0tMC4zIC4xYzAgMCAxLjMgMS4yIDEuMyAxLjJjMCAwIC4zLTEuNiAuMy0xLjZjMCAwLTEuNiAuNC0xLjYgLjRcIiAvPlxuICAgICAgICA8cGF0aCBmaWxsPVwiI2ZmZlwiIGQ9XCJNLjMgLjdjMCAwLTAuMyAuMy0wLjMgLjNjMCAwIDAgMCAwIDBjMCAwIC4zLTAuMyAuMy0wLjNjMCAwIDAgMCAwIDBcIiAvPlxuICAgICAgICA8cGF0aCBkPVwiTS4zIC43YzAgMC0wLjEgMC0wLjEgMGMwIDAgLjEgLjEgLjEgLjFjMCAwIC4xLTAuMSAuMS0wLjFjMCAwLTAuMSAwLTAuMSAwbTIyMi44IDQ2OS4xYzAgMC03MC41IDY5LjQtNzAuNSA2OS40YzAgMCAzNC4xIDMzLjUgMzQuMSAzMy41YzAgMCA2Ny03Mi45IDY3LTcyLjljMCAwLTMwLjYtMzAtMzAuNi0zMFwiIC8+XG4gICAgICA8L21hc2s+XG4gICAgICA8bWFzayBpZD1cIiR7aWNvblByZWZpeH1fcmV2ZXJzZV9NYXNrLTVcIj5cbiAgICAgICAgPHJlY3QgZmlsbD1cIiNmZmZcIiB3aWR0aD1cIjcyMFwiIGhlaWdodD1cIjcyMFwiIC8+XG4gICAgICAgIDxwYXRoIGQ9XCJNNDg4LjQgMjkxLjRjMCAwIDQwLjUgMzkuMyA0MC41IDM5LjNjMCAwLTU3LjIgMjctNTcuMiAyN2MwIDAgNTkuNi00MS4xIDU5LjYtNDEuMWMwIDAgMTAuNi01My44IDEwLjYtNTMuOGMwIDAtMzguMiAuNi0zOC4yIC42YzAgMC0xNS4zIDI4LTE1LjMgMjhtLTkwLjUtOTcuNGMwIDAgNTItMTEuMyA1Mi0xMS4zYzAgMC02IDQ1LjItNiA0NS4yYzAgMCAzNi44LTYgMzYuOC02YzAgMCAzOS4zLTMxLjkgMzkuMy0zMS45YzAgMC02NS45LTMwLjUtNjUuOS0zMC41YzAgMC01Ni4yIDM0LjUtNTYuMiAzNC41XCIgLz5cbiAgICAgIDwvbWFzaz5cbiAgICAgIDxtYXNrIGlkPVwiJHtpY29uUHJlZml4fV9yZXZlcnNlX01hc2stNlwiPlxuICAgICAgICA8cmVjdCB4PVwiLTYxLjNcIiB5PVwiNjEuM1wiIGZpbGw9XCIjZmZmXCIgd2lkdGg9XCI3MjBcIiBoZWlnaHQ9XCI3MjBcIiAvPlxuICAgICAgPC9tYXNrPlxuICAgICAgPG1hc2sgaWQ9XCIke2ljb25QcmVmaXh9X3JldmVyc2VfTWFzay03XCI+XG4gICAgICAgIDxyZWN0IGZpbGw9XCIjZmZmXCIgd2lkdGg9XCI3MjBcIiBoZWlnaHQ9XCI3MjBcIiAvPlxuICAgICAgICA8cGF0aCBkPVwiTTQ4MS44IDI5OC40YzAgMCAyNy41IDM5LjggMjcuNSAzOS44YzAgMC0zNy42IDE5LjUtMzcuNiAxOS41YzAgMCA1OS42LTQxLjEgNTkuNi00MS4xYzAgMCAxMC42LTUzLjggMTAuNi01My44YzAgMC0zOC4yIC42LTM4LjIgLjZjMCAwLTIxLjkgMzUtMjEuOSAzNW0tMTA4LjEtNzkuN2MwIDAgMzAuMi0yMy44IDMwLjItMjMuOGMwIDAgMjEuNyAzNS45IDIxLjcgMzUuOWMwIDAgNTUuMS04LjkgNTUuMS04LjljMCAwIDM1LjQtMzYuNSAzNS40LTM2LjVjMCAwLTYyLTI1LjktNjItMjUuOWMwIDAtODAuNCA1OS4yLTgwLjQgNTkuMlwiIC8+XG4gICAgICA8L21hc2s+XG4gICAgICA8bWFzayBpZD1cIiR7aWNvblByZWZpeH1fcmV2ZXJzZV9NYXNrLThcIj5cbiAgICAgICAgPHJlY3QgeD1cIi00Mi42XCIgeT1cIjQyLjZcIiBmaWxsPVwiI2ZmZlwiIHdpZHRoPVwiNzIwXCIgaGVpZ2h0PVwiNzIwXCIgLz5cbiAgICAgIDwvbWFzaz5cbiAgICAgIDxtYXNrIGlkPVwiJHtpY29uUHJlZml4fV9yZXZlcnNlX01hc2stOVwiPlxuICAgICAgICA8cmVjdCBmaWxsPVwiI2ZmZlwiIHdpZHRoPVwiNzIwXCIgaGVpZ2h0PVwiNzIwXCIgLz5cbiAgICAgICAgPHBhdGggZD1cIk00NzUuMiAzMDUuNGMwIDAgMTQuNSA0MC4zIDE0LjUgNDAuM2MwIDAtMTggMTItMTggMTJjMCAwIDU5LjYtNDEuMSA1OS42LTQxLjFjMCAwIDEwLjYtNTMuOCAxMC42LTUzLjhjMCAwLTM4LjIgLjYtMzguMiAuNmMwIDAtMjguNSA0Mi0yOC41IDQybS0xMTMuNi03NC4zYzAgMCAxNy45LTE4LjUgMTcuOS0xOC41YzAgMCAzNi40IDI1LjMgMzYuNCAyNS4zYzAgMCA2NC44LTE2IDY0LjgtMTZjMCAwIDM5LjMtMzEuOSAzOS4zLTMxLjljMCAwLTY1LjktMzAuNS02NS45LTMwLjVjMCAwLTkyLjUgNzEuNi05Mi41IDcxLjZcIiAvPlxuICAgICAgPC9tYXNrPlxuICAgICAgPG1hc2sgaWQ9XCIke2ljb25QcmVmaXh9X3JldmVyc2VfTWFzay0xMFwiPlxuICAgICAgICA8cmVjdCB4PVwiLTI5LjZcIiB5PVwiMjkuNlwiIGZpbGw9XCIjZmZmXCIgd2lkdGg9XCI3MjBcIiBoZWlnaHQ9XCI3MjBcIiAvPlxuICAgICAgPC9tYXNrPlxuICAgICAgPG1hc2sgaWQ9XCIke2ljb25QcmVmaXh9X3JldmVyc2VfTWFzay0xMVwiPlxuICAgICAgICA8cmVjdCBmaWxsPVwiI2ZmZlwiIHdpZHRoPVwiNzIwXCIgaGVpZ2h0PVwiNzIwXCIgLz5cbiAgICAgICAgPHBhdGggZD1cIk00NjguNiAzMTIuNGMwIDAgMS41IDQwLjggMS41IDQwLjhjMCAwIDEuNiA0LjUgMS42IDQuNWMwIDAgNTkuNi00MS4xIDU5LjYtNDEuMWMwIDAgMTAuNi01My44IDEwLjYtNTMuOGMwIDAtMzguMiAuNi0zOC4yIC42YzAgMC0zNS4xIDQ5LTM1LjEgNDltLTEwNy04MS4zYzAgMCAxNS4xIDQuOSAxNS4xIDQuOWMwIDAgMzguMiAxMy4zIDM4LjIgMTMuM2MwIDAgNjUuOC0yNy40IDY1LjgtMjcuNGMwIDAgMzkuMy0yMS45IDM5LjMtMjEuOWMwIDAtNjUuOS00MC41LTY1LjktNDAuNWMwIDAtOTIuNSA3MS42LTkyLjUgNzEuNlwiIC8+XG4gICAgICA8L21hc2s+XG4gICAgICA8bWFzayBpZD1cIiR7aWNvblByZWZpeH1fcmV2ZXJzZV9NYXNrLTEyXCI+XG4gICAgICAgIDxyZWN0IHg9XCItMjAuM1wiIHk9XCIyMC4zXCIgZmlsbD1cIiNmZmZcIiB3aWR0aD1cIjcyMFwiIGhlaWdodD1cIjcyMFwiIC8+XG4gICAgICA8L21hc2s+XG4gICAgICA8bWFzayBpZD1cIiR7aWNvblByZWZpeH1fcmV2ZXJzZV9NYXNrLTEzXCI+XG4gICAgICAgIDxyZWN0IGZpbGw9XCIjZmZmXCIgd2lkdGg9XCI3MjBcIiBoZWlnaHQ9XCI3MjBcIiAvPlxuICAgICAgICA8cGF0aCBkPVwiTTQ1Ni42IDMxMS45YzAgMC03IDM1LjYtNyAzNS42YzAgMCAyMi4xIDEwLjIgMjIuMSAxMC4yYzAgMCA1OS42LTQxLjEgNTkuNi00MS4xYzAgMCAxMC42LTUzLjggMTAuNi01My44YzAgMC0zOC4yIC42LTM4LjIgLjZjMCAwLTQ3LjEgNDguNS00Ny4xIDQ4LjVtLTk1LTgwLjhjMCAwIDEyLjMgMjguMyAxMi4zIDI4LjNjMCAwIDM5LjkgMS4zIDM5LjkgMS4zYzAgMCA2Ni45LTM4LjggNjYuOS0zOC44YzAgMCAzOS4zLTIxLjkgMzkuMy0yMS45YzAgMC02NS45LTQwLjUtNjUuOS00MC41YzAgMC05Mi41IDcxLjYtOTIuNSA3MS42XCIgLz5cbiAgICAgIDwvbWFzaz5cbiAgICAgIDxtYXNrIGlkPVwiJHtpY29uUHJlZml4fV9yZXZlcnNlX01hc2stMTRcIj5cbiAgICAgICAgPHJlY3QgeD1cIi0xMy40XCIgeT1cIjEzLjRcIiBmaWxsPVwiI2ZmZlwiIHdpZHRoPVwiNzIwXCIgaGVpZ2h0PVwiNzIwXCIgLz5cbiAgICAgIDwvbWFzaz5cbiAgICAgIDxtYXNrIGlkPVwiJHtpY29uUHJlZml4fV9yZXZlcnNlX01hc2stMTVcIj5cbiAgICAgICAgPHJlY3QgZmlsbD1cIiNmZmZcIiB3aWR0aD1cIjcyMFwiIGhlaWdodD1cIjcyMFwiIC8+XG4gICAgICAgIDxwYXRoIGQ9XCJNNDQ0LjYgMzExLjRjMCAwLTE1LjYgMzAuNS0xNS42IDMwLjVjMCAwIDQyLjcgMTUuOCA0Mi43IDE1LjhjMCAwIDU5LjYtNDEuMSA1OS42LTQxLjFjMCAwIDEwLjYtNTMuOCAxMC42LTUzLjhjMCAwLTM4LjIgLjYtMzguMiAuNmMwIDAtNTkuMSA0OC01OS4xIDQ4bS04My04MC4zYzAgMCA5LjUgNTEuNyA5LjUgNTEuN2MwIDAgNDEuNy0xMC44IDQxLjctMTAuOGMwIDAgNjcuOS01MC4xIDY3LjktNTAuMWMwIDAgNTAuNi0zMS45IDUwLjYtMzEuOWMwIDAtNzcuMi0zMC41LTc3LjItMzAuNWMwIDAtOTIuNSA3MS42LTkyLjUgNzEuNlwiIC8+XG4gICAgICA8L21hc2s+XG4gICAgICA8bWFzayBpZD1cIiR7aWNvblByZWZpeH1fcmV2ZXJzZV9NYXNrLTE2XCI+XG4gICAgICAgIDxyZWN0IHg9XCItNy4zXCIgeT1cIjcuM1wiIGZpbGw9XCIjZmZmXCIgd2lkdGg9XCI3MjBcIiBoZWlnaHQ9XCI3MjBcIiAvPlxuICAgICAgPC9tYXNrPlxuICAgICAgPG1hc2sgaWQ9XCIke2ljb25QcmVmaXh9X3JldmVyc2VfTWFzay0xN1wiPlxuICAgICAgICA8cmVjdCBmaWxsPVwiI2ZmZlwiIHdpZHRoPVwiNzIwXCIgaGVpZ2h0PVwiNzIwXCIgLz5cbiAgICAgICAgPHBhdGggZD1cIk00MzIuNiAzMTAuOWMwIDAtMjQuMiAyNS4zLTI0LjIgMjUuM2MwIDAgNjMuMyAyMS41IDYzLjMgMjEuNWMwIDAgNTkuNi00MS4xIDU5LjYtNDEuMWMwIDAgMTAuNi01My44IDEwLjYtNTMuOGMwIDAtMzguMiAuNi0zOC4yIC42YzAgMC03MS4xIDQ3LjUtNzEuMSA0Ny41bS03MS03OS44YzAgMCAyMC4zIDkwLjQgMjAuMyA5MC40YzAgMCAyOS0yOS41IDI5LTI5LjVjMCAwIDY5LjgtNzAuMSA2OS44LTcwLjFjMCAwIDM1LjQtMzYuNSAzNS40LTM2LjVjMCAwLTYyLTI1LjktNjItMjUuOWMwIDAtOTIuNSA3MS42LTkyLjUgNzEuNlwiIC8+XG4gICAgICA8L21hc2s+XG4gICAgICA8bWFzayBpZD1cIiR7aWNvblByZWZpeH1fcmV2ZXJzZV9NYXNrLTE4XCI+XG4gICAgICAgIDxyZWN0IHg9XCItNFwiIHk9XCI0XCIgZmlsbD1cIiNmZmZcIiB3aWR0aD1cIjcyMFwiIGhlaWdodD1cIjcyMFwiIC8+XG4gICAgICA8L21hc2s+XG4gICAgICA8bWFzayBpZD1cIiR7aWNvblByZWZpeH1fcmV2ZXJzZV9NYXNrLTE5XCI+XG4gICAgICAgIDxyZWN0IGZpbGw9XCIjZmZmXCIgd2lkdGg9XCI3MjBcIiBoZWlnaHQ9XCI3MjBcIiAvPlxuICAgICAgICA8cGF0aCBkPVwiTTQzMi42IDMxMC45YzAgMC0yNC4yIDI1LjMtMjQuMiAyNS4zYzAgMCA2My4zIDIxLjUgNjMuMyAyMS41YzAgMCA1OS42LTQxLjEgNTkuNi00MS4xYzAgMCAxMC42LTUzLjggMTAuNi01My44YzAgMC0zOC4yIC42LTM4LjIgLjZjMCAwLTcxLjEgNDcuNS03MS4xIDQ3LjVtLTcxLTc5LjhjMCAwIDIwLjMgOTAuNCAyMC4zIDkwLjRjMCAwIDI5LTI5LjUgMjktMjkuNWMwIDAgNjkuOC03MC4xIDY5LjgtNzAuMWMwIDAgMzkuMy0zMS45IDM5LjMtMzEuOWMwIDAtNjUuOS0zMC41LTY1LjktMzAuNWMwIDAtOTIuNSA3MS42LTkyLjUgNzEuNlwiIC8+XG4gICAgICA8L21hc2s+XG4gICAgICA8bWFzayBpZD1cIiR7aWNvblByZWZpeH1fcmV2ZXJzZV9NYXNrLTIwXCI+XG4gICAgICAgIDxyZWN0IGZpbGw9XCIjZmZmXCIgd2lkdGg9XCI3MjBcIiBoZWlnaHQ9XCI3MjBcIiAvPlxuICAgICAgPC9tYXNrPlxuICAgICAgPGNsaXBQYXRoIGlkPVwiJHtpY29uUHJlZml4fV9yZXZlcnNlX0NsaXBQYXRoLTFcIj5cbiAgICAgICAgPHJlY3Qgd2lkdGg9XCI3MjBcIiBoZWlnaHQ9XCI3MjBcIiAvPlxuICAgICAgPC9jbGlwUGF0aD5cbiAgICA8L2RlZnM+XG4gICAgPGcgdHJhbnNmb3JtPVwidHJhbnNsYXRlKDAsMCkgc2NhbGUoLjEsLjEpXCI+XG4gICAgICA8ZyBtYXNrPVwidXJsKCMke2ljb25QcmVmaXh9X3JldmVyc2VfTWFzay0xKVwiPlxuICAgICAgICA8cGF0aCBkPVwiTTM3Ny41IDM5NS4zYzAgMCA2NC44IDAgNjQuOCAwYzAgMCAwIDEyOS42IDAgMTI5LjZjMCAwIDI4LjggMCAyOC44IDBjMCAwIDAtMTI5LjYgMC0xMjkuNmMwIDAgNjQuOCAwIDY0LjggMGMwIDAgMC0yOC44IDAtMjguOGMwIDAtMTU4LjQgMC0xNTguNCAwYzAgMCAwIDI4LjggMCAyOC44WlwiIC8+XG4gICAgICAgIDxwYXRoIGQ9XCJNMzM4LjkgMzYzLjZjMCAwLTYyLjUgNjIuNC02Mi41IDYyLjRjMCAwLTYyLjQtNjIuNC02Mi40LTYyLjRjMCAwLTIwLjQgMjAuNC0yMC40IDIwLjRjMCAwIDYyLjUgNjIuNCA2Mi41IDYyLjRjMCAwLTYyLjUgNjIuNC02Mi41IDYyLjRjMCAwIDIwLjQgMjAuNCAyMC40IDIwLjRjMCAwIDYyLjQtNjIuNCA2Mi40LTYyLjRjMCAwIDYyLjUgNjIuNCA2Mi41IDYyLjRjMCAwIDIwLjMtMjAuNCAyMC4zLTIwLjRjMCAwLTYyLjQtNjIuNC02Mi40LTYyLjRjMCAwIDYyLjQtNjIuNCA2Mi40LTYyLjRjMCAwLTIwLjMtMjAuNC0yMC4zLTIwLjRaXCIgLz5cbiAgICAgICAgPHBhdGggZD1cIk00NTQuNyAzNDUuOGM0NC44IDAgODEtMzYuMyA4MS04MWMwIDAtMjguOCAwLTI4LjggMGMwIDI4LjgtMjMuMyA1Mi4yLTUyLjIgNTIuMmMtOC4yIDAtMTYtMS45LTIyLjktNS4zYzAgMCA2OS44LTY5LjkgNjkuOC02OS45YzAgMCAyMS4xLTIxIDIxLjEtMjFjLTE0LjQtMjIuMy0zOS41LTM3LTY4LTM3Yy00NC43IDAtODEgMzYuMi04MSA4MWMwIDQ0LjcgMzYuMyA4MSA4MSA4MVptMC0xMzMuMmMxMC4yIDAgMTkuNiAyLjkgMjcuNiA3LjljMCAwLTcxLjkgNzEuOC03MS45IDcxLjhjLTUtOC03LjktMTcuNC03LjktMjcuNWMwLTI4LjkgMjMuNC01Mi4yIDUyLjItNTIuMlpcIiAvPlxuICAgICAgICA8cGF0aCBkPVwiTTI3Ni40IDI1NS45YzAgMC02MC43LTcyLjgtNjAuNy03Mi44YzAgMC0yMi4xIDE4LjYtMjIuMSAxOC42YzAgMCA2OC40IDgyIDY4LjQgODJjMCAwIDAgNjIuNCAwIDYyLjRjMCAwIDI4LjggMCAyOC44IDBjMCAwIDAtNjIuNiAwLTYyLjZjMCAwIDY4LjQtODEuOCA2OC40LTgxLjhjMCAwLTIyLTE4LjYtMjItMTguNmMwIDAtNjAuOCA3Mi44LTYwLjggNzIuOFpcIiAvPlxuICAgICAgPC9nPlxuICAgICAgPHBhdGggc3Ryb2tlPVwiIzAwMFwiIHN0cm9rZS13aWR0aD1cIjMwXCIgZD1cIk0wLTM1My43YzE5NS4yIDAgMzUzLjcgMTU4LjUgMzUzLjcgMzUzLjdjMCAxOTUuMi0xNTguNSAzNTMuNy0zNTMuNyAzNTMuN2MtMTk1LjIgMC0zNTMuNy0xNTguNS0zNTMuNy0zNTMuN2MwLTE5NS4yIDE1OC41LTM1My43IDM1My43LTM1My43WlwiIGZpbGw9XCJub25lXCIgdHJhbnNmb3JtPVwidHJhbnNsYXRlKDM1OS44LDM2MC40KSBzY2FsZSguOTc3LC45NzcpXCIgLz5cbiAgICA8L2c+XG4gICAgPGcgb3BhY2l0eT1cIjBcIiB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoMCwwKSBzY2FsZSguMSwuMSlcIj5cbiAgICAgIDxnIGRpc3BsYXk9XCJibG9ja1wiIG1hc2s9XCJ1cmwoIyR7aWNvblByZWZpeH1fcmV2ZXJzZV9NYXNrLTIpXCIgdHJhbnNmb3JtPVwidHJhbnNsYXRlKDE0NC4zLC0xNDQuMylcIj5cbiAgICAgICAgPHBhdGggZD1cIk0yMjQuMiA0NzguM2MwIDAtMjEwLjYgMjEwLjUtMjEwLjYgMjEwLjVjMCAwIDIwLjQgMjAuNCAyMC40IDIwLjRjMCAwIDIxMC43LTIxMC43IDIxMC43LTIxMC43Yy0xMS43LTExLTUuOS02LTIwLjUtMjAuMlpcIiAvPlxuICAgICAgPC9nPlxuICAgICAgPGcgZGlzcGxheT1cImJsb2NrXCIgbWFzaz1cInVybCgjJHtpY29uUHJlZml4fV9yZXZlcnNlX01hc2stMylcIj5cbiAgICAgICAgPHBhdGggZD1cIk0zOTAuNiAzOTUuMmMwIDAgNTEuNyAuMSA1MS43IC4xYzAgMCAuMSAxMDMuNiAuMSAxMDMuNmMwIDAgMjguNyAwIDI4LjcgMGMwIDAgMC0xMDMuNiAwLTEwMy42YzAgMCA1Mi0wLjEgNTItMC4xYzAgMCAwLTI4LjQgMC0yOC40YzAgMC0xMzIuNSAwLTEzMi41IDBjMCAwIDAgMjguNCAwIDI4LjRaXCIgLz5cbiAgICAgICAgPHBhdGggZD1cIk0zMjkgMzczLjRjMCAuMS01Mi42IDUyLjYtNTIuNiA1Mi42YzAgMC02Mi40LTYyLjQtNjIuNC02Mi40YzAgMC0yMC40IDIwLjQtMjAuNCAyMC40YzAgMCA2Mi41IDYyLjQgNjIuNSA2Mi40YzAgMC02Mi41IDYyLjQtNjIuNSA2Mi40YzAgMCAyMC40IDIwLjQgMjAuNCAyMC40YzAgMCA2Mi40LTYyLjQgNjIuNC02Mi40YzAgMCA2Mi41IDYyLjQgNjIuNSA2Mi40YzAgMCAyMC4zLTIwLjQgMjAuMy0yMC40YzAgMC02Mi40LTYyLjQtNjIuNC02Mi40YzAgMCA1Mi42LTUyLjYgNTIuNi01Mi42YzAgMC0yMC40LTIwLjMtMjAuNC0yMC4zWlwiIC8+XG4gICAgICAgIDxwYXRoIGQ9XCJNNDU0LjcgMzQ1LjhjNDQuOCAwIDgxLTM2LjMgODEtODFjMCAwLTI4LjggMC0yOC44IDBjMCAyOC44LTIzLjMgNTIuMi01Mi4yIDUyLjJjLTguMiAwLTE2LTEuOS0yMi45LTUuM2MwIDAgNjkuOC02OS45IDY5LjgtNjkuOWMwIDAgMjEuMS0yMSAyMS4xLTIxYy0xNC40LTIyLjMtMzkuNS0zNy02OC0zN2MtNDQuNyAwLTgxIDM2LjItODEgODFjMCA0NC43IDM2LjMgODEgODEgODFabTAtMTMzLjJjMTAuMiAwIDE5LjYgMi45IDI3LjYgNy45YzAgMC03MS45IDcxLjgtNzEuOSA3MS44Yy01LTgtNy45LTE3LjQtNy45LTI3LjVjMC0yOC45IDIzLjQtNTIuMiA1Mi4yLTUyLjJaXCIgLz5cbiAgICAgICAgPHBhdGggZD1cIk0yNzYuNCAyNTUuOWMwIDAtNDguNy01OC4zLTQ4LjctNTguM2MwIDAtMjEuMSAxOS0yMS4xIDE5YzAgMCA1NS41IDY3LjIgNTUuNSA2Ny4yYzAgMCAuMyA1MCAuMyA1MGMwIDAgMjguNCAwIDI4LjQgMGMwIDAgMC01MC4zIDAtNTAuM2MwIDAgNTUuNC02Ni45IDU1LjQtNjYuOWMwIDAtMjEtMTguNi0yMS0xOC42YzAgMC00OC44IDU3LjktNDguOCA1Ny45WlwiIC8+XG4gICAgICA8L2c+XG4gICAgICA8cGF0aCBzdHJva2U9XCIjMDAwXCIgc3Ryb2tlLXdpZHRoPVwiMzBcIiBkPVwiTTAtMzM2LjJjMTg1LjYgMCAzMzYuMiAxNTAuNiAzMzYuMiAzMzYuMmMwIDE4NS42LTE1MC42IDMzNi4yLTMzNi4yIDMzNi4yYy0xODUuNiAwLTMzNi4yLTE1MC42LTMzNi4yLTMzNi4yYzAtMTg1LjYgMTUwLjYtMzM2LjIgMzM2LjItMzM2LjJaXCIgZmlsbD1cIm5vbmVcIiBkaXNwbGF5PVwiYmxvY2tcIiB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoMzcwLjgsMzQ3LjUpIHNjYWxlKC45NzcsLjk3NylcIiAvPlxuICAgIDwvZz5cbiAgICA8ZyBvcGFjaXR5PVwiMFwiIHRyYW5zZm9ybT1cInRyYW5zbGF0ZSgwLDApIHNjYWxlKC4xLC4xKVwiPlxuICAgICAgPGcgbWFzaz1cInVybCgjJHtpY29uUHJlZml4fV9yZXZlcnNlX01hc2stNClcIiB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoOTEuMSwtOTEuMSlcIj5cbiAgICAgICAgPHBhdGggZD1cIk0yMjQuMiA0NzguM2MwIDAtMjEwLjYgMjEwLjUtMjEwLjYgMjEwLjVjMCAwIDIwLjQgMjAuNCAyMC40IDIwLjRjMCAwIDIxMC43LTIxMC43IDIxMC43LTIxMC43Yy0xMS43LTExLTUuOS02LTIwLjUtMjAuMlpcIiAvPlxuICAgICAgPC9nPlxuICAgICAgPGcgbWFzaz1cInVybCgjJHtpY29uUHJlZml4fV9yZXZlcnNlX01hc2stNSlcIj5cbiAgICAgICAgPHBhdGggZD1cIk00MDkuNyAzOTUuMWMwIDAgMzIuNiAuMiAzMi42IC4yYzAgMCAuMyA2NS41IC4zIDY1LjVjMCAwIDI4LjUgMCAyOC41IDBjMCAwIDAtNjUuNSAwLTY1LjVjMCAwIDMzLjEtMC4yIDMzLjEtMC4yYzAgMCAwLTI3LjggMC0yNy44YzAgMC05NC41IDAtOTQuNSAwYzAgMCAwIDI3LjggMCAyNy44WlwiIC8+XG4gICAgICAgIDxwYXRoIGQ9XCJNMzE5LjcgMzgyLjhjMCAwLTQzLjMgNDMuMi00My4zIDQzLjJjMCAwLTYyLjQtNjIuNC02Mi40LTYyLjRjMCAwLTIwLjQgMjAuNC0yMC40IDIwLjRjMCAwIDYyLjUgNjIuNCA2Mi41IDYyLjRjMCAwLTYyLjUgNjIuNC02Mi41IDYyLjRjMCAwIDIwLjQgMjAuNCAyMC40IDIwLjRjMCAwIDYyLjQtNjIuNCA2Mi40LTYyLjRjMCAwIDYyLjUgNjIuNCA2Mi41IDYyLjRjMCAwIDIwLjMtMjAuNCAyMC4zLTIwLjRjMCAwLTYyLjQtNjIuNC02Mi40LTYyLjRjMCAwIDQzLjQtNDMuMyA0My40LTQzLjNjMCAwLTIwLjUtMjAuMy0yMC41LTIwLjNaXCIgLz5cbiAgICAgICAgPHBhdGggZD1cIk01MDIuOCAxOTkuNmMtMTMuNC05LjktMzAtMTUuOC00OC4xLTE1LjhjLTQ0LjcgMC04MSAzNi4yLTgxIDgxYzAgNDQuNyAzNi4zIDgxIDgxIDgxYzQ0LjggMCA4MS0zNi4zIDgxLTgxaC0yOC44YzAgMjguOC0yMy4zIDUyLjItNTIuMiA1Mi4yYy04LjIgMC0xNi0xLjktMjIuOS01LjNsNjkuOC02OS45bC4zLTAuMmwtMjAuMy0yMC40bC03MS4yIDcxLjFjLTUtOC03LjktMTcuNC03LjktMjcuNWMwLTI4LjkgMjMuNC01Mi4yIDUyLjItNTIuMmMxMC4xIDAgMTkuNCAyLjggMjcuNCA3LjdaXCIgZmlsbC1ydWxlPVwiZXZlbm9kZFwiIC8+XG4gICAgICAgIDxwYXRoIGQ9XCJNMjc2LjQgMjU1LjljMCAwLTMxLjEtMzctMzEuMS0zN2MwIDAtMTkuNyAxOS41LTE5LjcgMTkuNWMwIDAgMzYuNyA0NS42IDM2LjcgNDUuNmMwIDAgLjcgMzEuOCAuNyAzMS44YzAgMCAyNy43IDAgMjcuNyAwYzAgMCAwLTMyLjQgMC0zMi40YzAgMCAzNi41LTQ0LjkgMzYuNS00NC45YzAgMC0xOS42LTE4LjYtMTkuNi0xOC42YzAgMC0zMS4yIDM2LTMxLjIgMzZaXCIgLz5cbiAgICAgIDwvZz5cbiAgICAgIDxwYXRoIHN0cm9rZT1cIiMwMDBcIiBzdHJva2Utd2lkdGg9XCIzMFwiIGQ9XCJNMC0zMTBjMTcxLjEgMCAzMTAgMTM4LjkgMzEwIDMxMGMwIDE3MS4xLTEzOC45IDMxMC0zMTAgMzEwYy0xNzEuMSAwLTMxMC0xMzguOS0zMTAtMzEwYzAtMTcxLjEgMTM4LjktMzEwIDMxMC0zMTBaXCIgZmlsbD1cIm5vbmVcIiB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoMzg3LjgsMzI4LjcpIHNjYWxlKC45NzcsLjk3NylcIiAvPlxuICAgIDwvZz5cbiAgICA8ZyBvcGFjaXR5PVwiMFwiIHRyYW5zZm9ybT1cInRyYW5zbGF0ZSgwLDApIHNjYWxlKC4xLC4xKVwiPlxuICAgICAgPGcgZGlzcGxheT1cImJsb2NrXCIgbWFzaz1cInVybCgjJHtpY29uUHJlZml4fV9yZXZlcnNlX01hc2stNilcIiB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoNjEuMywtNjEuMylcIj5cbiAgICAgICAgPHBhdGggZD1cIk0yMjQuMiA0NzguM2MwIDAtMjEwLjYgMjEwLjUtMjEwLjYgMjEwLjVjMCAwIDIwLjQgMjAuNCAyMC40IDIwLjRjMCAwIDIxMC43LTIxMC43IDIxMC43LTIxMC43Yy0xMS43LTExLTUuOS02LTIwLjUtMjAuMlpcIiAvPlxuICAgICAgPC9nPlxuICAgICAgPGcgbWFzaz1cInVybCgjJHtpY29uUHJlZml4fV9yZXZlcnNlX01hc2stNylcIj5cbiAgICAgICAgPHBhdGggZD1cIk00MjAuNCAzOTVjMCAwIDIxLjkgLjMgMjEuOSAuM2MwIDAgLjQgNDQuMSAuNCA0NC4xYzAgMCAyOC40IDAgMjguNCAwYzAgMCAwLTQ0LjEgMC00NC4xYzAgMCAyMi42LTAuMyAyMi42LTAuM2MwIDAgMC0yNy41IDAtMjcuNWMwIDAtNzMuMyAwLTczLjMgMGMwIDAgMCAyNy41IDAgMjcuNVpcIiAvPlxuICAgICAgICA8cGF0aCBkPVwiTTMxMy4yIDM4OS4yYzAgMC0zNi44IDM2LjgtMzYuOCAzNi44YzAgMC02Mi40LTYyLjQtNjIuNC02Mi40YzAgMC0yMC40IDIwLjQtMjAuNCAyMC40YzAgMCA2Mi41IDYyLjQgNjIuNSA2Mi40YzAgMC02Mi41IDYyLjQtNjIuNSA2Mi40YzAgMCAyMC40IDIwLjQgMjAuNCAyMC40YzAgMCA2Mi40LTYyLjQgNjIuNC02Mi40YzAgMCA2Mi41IDYyLjQgNjIuNSA2Mi40YzAgMCAyMC4zLTIwLjQgMjAuMy0yMC40YzAgMC02Mi40LTYyLjQtNjIuNC02Mi40YzAgMCAzNy0zNi45IDM3LTM2LjljMCAwLTIwLjYtMjAuMy0yMC42LTIwLjNaXCIgLz5cbiAgICAgICAgPHBhdGggZD1cIk01MDAgMjAwYy0xMy40LTkuOS0yNy4yLTE2LjItNDUuMy0xNi4yYy00NC43IDAtODEgMzYuMi04MSA4MWMwIDQ0LjcgMzYuMyA4MSA4MSA4MWM0NC44IDAgODEtMzYuMyA4MS04MWgtMjguOGMwIDI4LjgtMjMuMyA1Mi4yLTUyLjIgNTIuMmMtOC4yIDAtMTYtMS45LTIyLjktNS4zbDU3LjctNTcuN2wtMjAuMy0yMC40bC01OC44IDU4LjdjLTUtOC03LjktMTcuNC03LjktMjcuNWMwLTI4LjkgMjMuNC01Mi4yIDUyLjItNTIuMmMxMC4xIDAgMTkuNCAyLjggMjcuNCA3LjdaXCIgZmlsbC1ydWxlPVwiZXZlbm9kZFwiIC8+XG4gICAgICAgIDxwYXRoIGQ9XCJNMjc2LjQgMjU1LjljMCAwLTIxLjItMjUuMS0yMS4yLTI1LjFjMCAwLTE5IDE5LjgtMTkgMTkuOGMwIDAgMjYuMiAzMy41IDI2LjIgMzMuNWMwIDAgMSAyMS42IDEgMjEuNmMwIDAgMjcuMiAwIDI3LjIgMGMwIDAgMC0yMi4zIDAtMjIuM2MwIDAgMjUuOS0zMi43IDI1LjktMzIuN2MwIDAtMTguOC0xOC42LTE4LjgtMTguNmMwIDAtMjEuMyAyMy44LTIxLjMgMjMuOFpcIiAvPlxuICAgICAgPC9nPlxuICAgICAgPHBhdGggc3Ryb2tlPVwiIzAwMFwiIHN0cm9rZS13aWR0aD1cIjMwXCIgZD1cIk0wLTI5NC4zYzE2Mi40IDAgMjk0LjMgMTMxLjkgMjk0LjMgMjk0LjNjMCAxNjIuNC0xMzEuOSAyOTQuMy0yOTQuMyAyOTQuM2MtMTYyLjQgMC0yOTQuMy0xMzEuOS0yOTQuMy0yOTQuM2MwLTE2Mi40IDEzMS45LTI5NC4zIDI5NC4zLTI5NC4zWlwiIGZpbGw9XCJub25lXCIgZGlzcGxheT1cImJsb2NrXCIgdHJhbnNmb3JtPVwidHJhbnNsYXRlKDM5OC43LDMxOC4yKSBzY2FsZSguOTc3LC45NzcpXCIgLz5cbiAgICA8L2c+XG4gICAgPGcgb3BhY2l0eT1cIjBcIiB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoMCwwKSBzY2FsZSguMSwuMSlcIj5cbiAgICAgIDxnIG1hc2s9XCJ1cmwoIyR7aWNvblByZWZpeH1fcmV2ZXJzZV9NYXNrLTgpXCIgdHJhbnNmb3JtPVwidHJhbnNsYXRlKDQyLjYsLTQyLjYpXCI+XG4gICAgICAgIDxwYXRoIGQ9XCJNMjI0LjIgNDc4LjNjMCAwLTIxMC42IDIxMC41LTIxMC42IDIxMC41YzAgMCAyMC40IDIwLjQgMjAuNCAyMC40YzAgMCAyMTAuNy0yMTAuNyAyMTAuNy0yMTAuN2MtMTEuNy0xMS01LjktNi0yMC41LTIwLjJaXCIgLz5cbiAgICAgIDwvZz5cbiAgICAgIDxnIGRpc3BsYXk9XCJibG9ja1wiIG1hc2s9XCJ1cmwoIyR7aWNvblByZWZpeH1fcmV2ZXJzZV9NYXNrLTkpXCI+XG4gICAgICAgIDxwYXRoIGQ9XCJNNDI3LjIgMzk0LjljMCAwIDE1LjEgLjQgMTUuMSAuNGMwIDAgLjQgMzAuNyAuNCAzMC43YzAgMCAyOC40IDAgMjguNCAwYzAgMCAwLTMwLjcgMC0zMC43YzAgMCAxNS45LTAuNCAxNS45LTAuNGMwIDAgMC0yNy4yIDAtMjcuMmMwIDAtNTkuOCAwLTU5LjggMGMwIDAgMCAyNy4yIDAgMjcuMlpcIiAvPlxuICAgICAgICA8cGF0aCBkPVwiTTMwNy40IDM5NWMwIDAtMzEgMzEtMzEgMzFjMCAwLTUzLjktNTQtNTMuOS01NGMwIDAtMjAuNCAyMC40LTIwLjQgMjAuNGMwIDAgNTQgNTQgNTQgNTRjMCAwLTYyLjUgNjIuNC02Mi41IDYyLjRjMCAwIDIwLjQgMjAuNCAyMC40IDIwLjRjMCAwIDYyLjQtNjIuNCA2Mi40LTYyLjRjMCAwIDU0IDU0IDU0IDU0YzAgMCAyMC40LTIwLjMgMjAuNC0yMC4zYzAgMC01NC01NC4xLTU0LTU0LjFjMCAwIDMxLjItMzEuMSAzMS4yLTMxLjFjMCAwLTIwLjYtMjAuMy0yMC42LTIwLjNaXCIgLz5cbiAgICAgICAgPHBhdGggZD1cIk01MDIuOCAxOTkuNmMtMTMuNC05LjktMzAuMS0xNS44LTQ4LjEtMTUuOGMtNDQuNyAwLTgxIDM2LjItODEgODFjMCA0NC43IDM2LjMgODEgODEgODFjNDQuOCAwIDgxLTM2LjMgODEtODFoLTI4LjhjMCAyOC44LTIzLjMgNTIuMi01Mi4yIDUyLjJjLTguMiAwLTE2LTEuOS0yMi45LTUuM2w0NS41LTQ1LjVsLTIwLjQtMjAuNGwtNDYuNSA0Ni41Yy01LTgtNy45LTE3LjQtNy45LTI3LjVjMC0yOC45IDIzLjQtNTIuMiA1Mi4yLTUyLjJjMTAuMSAwIDE5LjQgMi44IDI3LjQgNy43WlwiIGZpbGwtcnVsZT1cImV2ZW5vZGRcIiAvPlxuICAgICAgICA8cGF0aCBkPVwiTTI3Ni40IDI1NS45YzAgMC0xNS0xNy42LTE1LTE3LjZjMCAwLTE4LjQgMjAtMTguNCAyMGMwIDAgMTkuNCAyNS44IDE5LjQgMjUuOGMwIDAgMS4yIDE1LjIgMS4yIDE1LjJjMCAwIDI3IDAgMjcgMGMwIDAgMC0xNS45IDAtMTUuOWMwIDAgMTkuMS0yNC45IDE5LjEtMjQuOWMwIDAtMTguMi0xOC43LTE4LjItMTguN2MwIDAtMTUuMSAxNi4xLTE1LjEgMTYuMVpcIiAvPlxuICAgICAgPC9nPlxuICAgICAgPHBhdGggc3Ryb2tlPVwiIzAwMFwiIHN0cm9rZS13aWR0aD1cIjMwXCIgZD1cIk0wLTI4NC40YzE1NyAwIDI4NC40IDEyNy40IDI4NC40IDI4NC40YzAgMTU3LTEyNy40IDI4NC40LTI4NC40IDI4NC40Yy0xNTcgMC0yODQuNC0xMjcuNC0yODQuNC0yODQuNGMwLTE1NyAxMjcuNC0yODQuNCAyODQuNC0yODQuNFpcIiBmaWxsPVwibm9uZVwiIHRyYW5zZm9ybT1cInRyYW5zbGF0ZSg0MDYuMSwzMTEuNikgc2NhbGUoLjk3NywuOTc3KVwiIC8+XG4gICAgPC9nPlxuICAgIDxnIG9wYWNpdHk9XCIwXCIgdHJhbnNmb3JtPVwidHJhbnNsYXRlKDAsMCkgc2NhbGUoLjEsLjEpXCI+XG4gICAgICA8ZyBkaXNwbGF5PVwiYmxvY2tcIiBtYXNrPVwidXJsKCMke2ljb25QcmVmaXh9X3JldmVyc2VfTWFzay0xMClcIiB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoMjkuNiwtMjkuNilcIj5cbiAgICAgICAgPHBhdGggZD1cIk0yMjQuMiA0NzguM2MwIDAtMjEwLjYgMjEwLjUtMjEwLjYgMjEwLjVjMCAwIDIwLjQgMjAuNCAyMC40IDIwLjRjMCAwIDIxMC43LTIxMC43IDIxMC43LTIxMC43Yy0xMS43LTExLTUuOS02LTIwLjUtMjAuMlpcIiAvPlxuICAgICAgPC9nPlxuICAgICAgPGcgZGlzcGxheT1cImJsb2NrXCIgbWFzaz1cInVybCgjJHtpY29uUHJlZml4fV9yZXZlcnNlX01hc2stMTEpXCI+XG4gICAgICAgIDxwYXRoIGQ9XCJNNDM2IDM5My41YzAgMCA4LjcgLjQgOC43IC40YzAgMCAuNCAxNy44IC40IDE3LjhjMCAwIDIzLjYgMCAyMy42IDBjMCAwIDAtMTcuOCAwLTE3LjhjMCAwIDkuNC0wLjQgOS40LTAuNGMwIDAgMC0yMi42IDAtMjIuNmMwIDAtNDIuMSAwLTQyLjEgMGMwIDAgMCAyMi42IDAgMjIuNlpcIiAvPlxuICAgICAgICA8cGF0aCBkPVwiTTI5Ny4yIDQwNS4yYzAgMC0yMC44IDIwLjgtMjAuOCAyMC44YzAgMC0zNS40LTM1LjYtMzUuNC0zNS42YzAgMC0yMC4zIDIwLjUtMjAuMyAyMC41YzAgMCAzNS40IDM1LjUgMzUuNCAzNS41YzAgMC02Mi41IDYyLjQtNjIuNSA2Mi40YzAgMCAyMC40IDIwLjQgMjAuNCAyMC40YzAgMCA2Mi40LTYyLjQgNjIuNC02Mi40YzAgMCAzNS42IDM1LjUgMzUuNiAzNS41YzAgMCAyMC4yLTIwLjIgMjAuMi0yMC4yYzAgMC0zNS40LTM1LjctMzUuNC0zNS43YzAgMCAyMS4xLTIxIDIxLjEtMjFjMCAwLTIwLjctMjAuMi0yMC43LTIwLjJaXCIgLz5cbiAgICAgICAgPHBhdGggZD1cIk01MDIuOCAxOTkuNmMtMTMuNC05LjktMzAuMS0xNS44LTQ4LjEtMTUuOGMtNDQuNyAwLTgxIDM2LjItODEgODFjMCA0NC43IDM2LjMgODEgODEgODFjNDQuOCAwIDgxLTM2LjMgODEtODFoLTI4LjhjMCAyOC44LTIzLjMgNTIuMi01Mi4yIDUyLjJjLTguMiAwLTE2LTEuOS0yMi45LTUuM2wzMy43LTMzLjdsLTIwLjQtMjAuM2wtMzQuNyAzNC42Yy01LTgtNy45LTE3LjQtNy45LTI3LjVjMC0yOC45IDIzLjQtNTIuMiA1Mi4yLTUyLjJjMTAuMSAwIDE5LjQgMi44IDI3LjQgNy43WlwiIGZpbGwtcnVsZT1cImV2ZW5vZGRcIiAvPlxuICAgICAgICA8cGF0aCBkPVwiTTI3Ni40IDI1NS45YzAgMC0xMC43LTEyLjQtMTAuNy0xMi40YzAgMC0xOC4xIDIwLjEtMTguMSAyMC4xYzAgMCAxNC45IDIwLjYgMTQuOSAyMC42YzAgMCAxLjIgMTAuNyAxLjIgMTAuN2MwIDAgMjYuOCAwIDI2LjggMGMwIDAgMC0xMS41IDAtMTEuNWMwIDAgMTQuNi0xOS42IDE0LjYtMTkuNmMwIDAtMTcuOS0xOC42LTE3LjktMTguNmMwIDAtMTAuOCAxMC43LTEwLjggMTAuN1pcIiAvPlxuICAgICAgPC9nPlxuICAgICAgPHBhdGggc3Ryb2tlPVwiIzAwMFwiIHN0cm9rZS13aWR0aD1cIjMwXCIgZD1cIk0wLTI3Ny41YzE1My4xIDAgMjc3LjUgMTI0LjQgMjc3LjUgMjc3LjVjMCAxNTMuMS0xMjQuNCAyNzcuNS0yNzcuNSAyNzcuNWMtMTUzLjEgMC0yNzcuNS0xMjQuNC0yNzcuNS0yNzcuNWMwLTE1My4xIDEyNC40LTI3Ny41IDI3Ny41LTI3Ny41WlwiIGZpbGw9XCJub25lXCIgZGlzcGxheT1cImJsb2NrXCIgdHJhbnNmb3JtPVwidHJhbnNsYXRlKDQxMS4yLDMwNy4xKSBzY2FsZSguOTc3LC45NzcpXCIgLz5cbiAgICA8L2c+XG4gICAgPGcgb3BhY2l0eT1cIjBcIiB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoMCwwKSBzY2FsZSguMSwuMSlcIj5cbiAgICAgIDxnIGRpc3BsYXk9XCJibG9ja1wiIG1hc2s9XCJ1cmwoIyR7aWNvblByZWZpeH1fcmV2ZXJzZV9NYXNrLTEyKVwiIHRyYW5zZm9ybT1cInRyYW5zbGF0ZSgyMC4zLC0yMC4zKVwiPlxuICAgICAgICA8cGF0aCBkPVwiTTIyNC4yIDQ3OC4zYzAgMC0yMTAuNiAyMTAuNS0yMTAuNiAyMTAuNWMwIDAgMjAuNCAyMC40IDIwLjQgMjAuNGMwIDAgMjEwLjctMjEwLjcgMjEwLjctMjEwLjdjLTExLjctMTEtNS45LTYtMjAuNS0yMC4yWlwiIC8+XG4gICAgICA8L2c+XG4gICAgICA8ZyBkaXNwbGF5PVwiYmxvY2tcIiBtYXNrPVwidXJsKCMke2ljb25QcmVmaXh9X3JldmVyc2VfTWFzay0xMylcIj5cbiAgICAgICAgPHBhdGggZD1cIk00NDYgMzkwLjhjMCAwIDMuNSAuMiAzLjUgLjJjMCAwIC4yIDcuMyAuMiA3LjNjLjEgMCAxNC4yIDAgMTQuMiAwYzAgMCAwLTcuMyAwLTcuM2MwIDAgNC0wLjIgNC0wLjJjMCAwIDAtMTMuNSAwLTEzLjVjMCAwLTIxLjkgMC0yMS45IDBjMCAwIDAgMTMuNSAwIDEzLjVaXCIgLz5cbiAgICAgICAgPHBhdGggZD1cIk0yODcuOSA0MTQuNGMwIDAtMTEuNSAxMS42LTExLjUgMTEuNmMwIDAtMTguNS0xOC44LTE4LjUtMTguOGMwIDAtMjAuMyAyMC41LTIwLjMgMjAuNWMwIDAgMTguNSAxOC43IDE4LjUgMTguN2MwIDAtNjIuNSA2Mi40LTYyLjUgNjIuNGMwIDAgMjAuNCAyMC40IDIwLjQgMjAuNGMwIDAgNjIuNC02Mi40IDYyLjQtNjIuNGMwIDAgMTguNyAxOC43IDE4LjcgMTguN2MwIDAgMjAuMi0yMCAyMC4yLTIwYzAgMC0xOC41LTE5LjEtMTguNS0xOS4xYzAgMCAxMS45LTExLjggMTEuOS0xMS44YzAgMC0yMC44LTIwLjItMjAuOC0yMC4yWlwiIC8+XG4gICAgICAgIDxwYXRoIGQ9XCJNNTAyLjggMTk5LjZjLTEzLjQtMTAtMzAuMS0xNS44LTQ4LjEtMTUuOGMtNDQuNyAwLTgxIDM2LjItODEgODFjMCA0NC43IDM2LjMgODEgODEgODFjNDQuOCAwIDgxLTM2LjMgODEtODFoLTI4LjhjMCAyOC44LTIzLjMgNTIuMi01Mi4yIDUyLjJjLTguMiAwLTE2LTEuOS0yMi45LTUuM2wyMi40LTIyLjRsLTIwLjQtMjAuNGwtMjMuNCAyMy40Yy01LTgtNy45LTE3LjQtNy45LTI3LjVjMC0yOC45IDIzLjQtNTIuMiA1Mi4yLTUyLjJjMTAuMSAwIDE5LjQgMi44IDI3LjQgNy43WlwiIGZpbGwtcnVsZT1cImV2ZW5vZGRcIiAvPlxuICAgICAgICA8cGF0aCBkPVwiTTI3Ni40IDI1OS40YzAgMC00LjUtNS4yLTQuNS01LjJjMCAwLTEwLjcgMTIuMS0xMC43IDEyLjFjMCAwIDYuOSAxMC4xIDYuOSAxMC4xYzAgMCAuOCA0LjUgLjggNC41YzAgMCAxNiAwIDE2IDBjMCAwIDAtNSAwLTVjMCAwIDYuNy05LjQgNi43LTkuNGMwIDAtMTAuNi0xMS4yLTEwLjYtMTEuMmMwIDAtNC42IDQuMS00LjYgNC4xWlwiIC8+XG4gICAgICA8L2c+XG4gICAgICA8cGF0aCBzdHJva2U9XCIjMDAwXCIgc3Ryb2tlLXdpZHRoPVwiMzBcIiBkPVwiTTAtMjcyLjVjMTUwLjQgMCAyNzIuNSAxMjIuMSAyNzIuNSAyNzIuNWMwIDE1MC40LTEyMi4xIDI3Mi41LTI3Mi41IDI3Mi41Yy0xNTAuNCAwLTI3Mi41LTEyMi4xLTI3Mi41LTI3Mi41YzAtMTUwLjQgMTIyLjEtMjcyLjUgMjcyLjUtMjcyLjVaXCIgZmlsbD1cIm5vbmVcIiBkaXNwbGF5PVwiYmxvY2tcIiB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoNDE0LjksMzAzLjcpIHNjYWxlKC45NzcsLjk3NylcIiAvPlxuICAgIDwvZz5cbiAgICA8ZyBvcGFjaXR5PVwiMFwiIHRyYW5zZm9ybT1cInRyYW5zbGF0ZSgwLDApIHNjYWxlKC4xLC4xKVwiPlxuICAgICAgPGcgZGlzcGxheT1cImJsb2NrXCIgbWFzaz1cInVybCgjJHtpY29uUHJlZml4fV9yZXZlcnNlX01hc2stMTQpXCIgdHJhbnNmb3JtPVwidHJhbnNsYXRlKDEzLjQsLTEzLjQpXCI+XG4gICAgICAgIDxwYXRoIGQ9XCJNMjI0LjIgNDc4LjNjMCAwLTIxMC42IDIxMC41LTIxMC42IDIxMC41YzAgMCAyMC40IDIwLjQgMjAuNCAyMC40YzAgMCAyMTAuNy0yMTAuNyAyMTAuNy0yMTAuN2MtMTEuNy0xMS01LjktNi0yMC41LTIwLjJaXCIgLz5cbiAgICAgIDwvZz5cbiAgICAgIDxnIGRpc3BsYXk9XCJibG9ja1wiIG1hc2s9XCJ1cmwoIyR7aWNvblByZWZpeH1fcmV2ZXJzZV9NYXNrLTE1KVwiPlxuICAgICAgICA8cGF0aCBkPVwiTTQ1My42IDM4OC4xYzAgMCAuNyAwIC43IDBjMCAwIC4xIDEuNyAuMSAxLjdjMCAwIDQuNyAwIDQuNyAwYzAgMCAwLTEuNyAwLTEuN2MwIDAgMSAwIDEgMGMwIDAgMC00LjUgMC00LjVjMCAwLTYuNSAwLTYuNSAwYzAgMCAwIDQuNSAwIDQuNVpcIiAvPlxuICAgICAgICA8cGF0aCBkPVwiTTI4MC44IDQyMS41YzAgMC00LjQgNC41LTQuNCA0LjVjMCAwLTUuNS01LjktNS41LTUuOWMwIDAtMjAuMyAyMC42LTIwLjMgMjAuNmMwIDAgNS41IDUuNyA1LjUgNS43YzAgMC02Mi41IDYyLjQtNjIuNSA2Mi40YzAgMCAyMC40IDIwLjQgMjAuNCAyMC40YzAgMCA2Mi40LTYyLjQgNjIuNC02Mi40YzAgMCA1LjggNS43IDUuOCA1LjdjMCAwIDIwLjEtMTkuOSAyMC4xLTE5LjljMCAwLTUuNS02LjItNS41LTYuMmMwIDAgNC44LTQuNiA0LjgtNC42YzAgMC0yMC44LTIwLjMtMjAuOC0yMC4zWlwiIC8+XG4gICAgICAgIDxwYXRoIGQ9XCJNNTAyLjggMTk5LjZjLTEzLjQtMTAtMzAuMS0xNS44LTQ4LjEtMTUuOGMtNDQuNyAwLTgxIDM2LjItODEgODFjMCA0NC43IDM2LjMgODEgODEgODFjNDQuOCAwIDgxLTM2LjMgODEtODFoLTI4LjhjMCAyOC44LTIzLjMgNTIuMi01Mi4yIDUyLjJjLTguMiAwLTE2LTEuOS0yMi45LTUuM2wxMS45LTExLjlsLTIwLjQtMjAuM2wtMTIuOSAxMi44Yy01LTgtNy45LTE3LjQtNy45LTI3LjVjMC0yOC45IDIzLjQtNTIuMiA1Mi4yLTUyLjJjMTAuMSAwIDE5LjQgMi44IDI3LjQgNy43WlwiIGZpbGwtcnVsZT1cImV2ZW5vZGRcIiAvPlxuICAgICAgICA8cGF0aCBkPVwiTTI3Ni40IDI2Mi45YzAgMC0xLTEuMi0xLTEuMmMwIDAtMy42IDQtMy42IDRjMCAwIDEuOSAyLjggMS45IDIuOGMwIDAgLjIgMS4xIC4yIDEuMWMwIDAgNS40IDAgNS40IDBjMCAwIDAtMS4yIDAtMS4yYzAgMCAxLjctMi42IDEuNy0yLjZjMCAwLTMuNS0zLjctMy41LTMuN2MwIDAtMS4xIC44LTEuMSAuOFpcIiAvPlxuICAgICAgPC9nPlxuICAgICAgPHBhdGggc3Ryb2tlPVwiIzAwMFwiIHN0cm9rZS13aWR0aD1cIjMwXCIgZD1cIk0wLTI2OC44YzE0OC40IDAgMjY4LjggMTIwLjQgMjY4LjggMjY4LjhjMCAxNDguNC0xMjAuNCAyNjguOC0yNjguOCAyNjguOGMtMTQ4LjQgMC0yNjguOC0xMjAuNC0yNjguOC0yNjguOGMwLTE0OC40IDEyMC40LTI2OC44IDI2OC44LTI2OC44WlwiIGZpbGw9XCJub25lXCIgZGlzcGxheT1cImJsb2NrXCIgdHJhbnNmb3JtPVwidHJhbnNsYXRlKDQxNy42LDMwMS4zKSBzY2FsZSguOTc3LC45NzcpXCIgLz5cbiAgICA8L2c+XG4gICAgPGcgb3BhY2l0eT1cIjBcIiB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoMCwwKSBzY2FsZSguMSwuMSlcIj5cbiAgICAgIDxnIGRpc3BsYXk9XCJibG9ja1wiIG1hc2s9XCJ1cmwoIyR7aWNvblByZWZpeH1fcmV2ZXJzZV9NYXNrLTE2KVwiIHRyYW5zZm9ybT1cInRyYW5zbGF0ZSg3LjMsLTcuMylcIj5cbiAgICAgICAgPHBhdGggZD1cIk0yMjQuMiA0NzguM2MwIDAtMjEwLjYgMjEwLjUtMjEwLjYgMjEwLjVjMCAwIDIwLjQgMjAuNCAyMC40IDIwLjRjMCAwIDIxMC43LTIxMC43IDIxMC43LTIxMC43Yy0xMS43LTExLTUuOS02LTIwLjUtMjAuMlpcIiAvPlxuICAgICAgPC9nPlxuICAgICAgPGcgZGlzcGxheT1cImJsb2NrXCIgbWFzaz1cInVybCgjJHtpY29uUHJlZml4fV9yZXZlcnNlX01hc2stMTcpXCI+XG4gICAgICAgIDxwYXRoIGQ9XCJNMjc1LjQgNDI2LjljMCAwLTE5LjMgMTkuNS0xOS4zIDE5LjVjMCAwLTYyLjUgNjIuNC02Mi41IDYyLjRjMCAwIDIwLjQgMjAuNCAyMC40IDIwLjRjMCAwIDYyLjQtNjIuNCA2Mi40LTYyLjRjMCAwIDE5LjktMTkuNyAxOS45LTE5LjdjMCAwLTIwLjktMjAuMi0yMC45LTIwLjJaXCIgLz5cbiAgICAgICAgPHBhdGggZD1cIk00MTEuNCAyOTEuM2wyMC43IDIwLjdsLjEtMC4xYzYuOCAzLjIgMTQuNSA1LjEgMjIuNSA1LjFjMjguOSAwIDUyLjItMjMuNCA1Mi4yLTUyLjJoMjguOGMwIDQ0LjctMzYuMiA4MS04MSA4MWMtNDQuNyAwLTgxLTM2LjMtODEtODFjMC00NC44IDM2LjMtODEgODEtODFjMTggMCAyMS45IDYuMyAzNS4zIDE2LjJsLTcuOSAyMC4zYy04LTQuOS0xNy4zLTcuNy0yNy40LTcuN2MtMjguOCAwLTUyLjIgMjMuMy01Mi4yIDUyLjJjMCAxMC4xIDIuOSAxOS41IDcuOSAyNy41WlwiIGZpbGwtcnVsZT1cImV2ZW5vZGRcIiAvPlxuICAgICAgPC9nPlxuICAgICAgPHBhdGggc3Ryb2tlPVwiIzAwMFwiIHN0cm9rZS13aWR0aD1cIjMwXCIgZD1cIk0wLTI2NS42YzE0Ni42IDAgMjY1LjYgMTE5IDI2NS42IDI2NS42YzAgMTQ2LjYtMTE5IDI2NS42LTI2NS42IDI2NS42Yy0xNDYuNiAwLTI2NS42LTExOS0yNjUuNi0yNjUuNmMwLTE0Ni42IDExOS0yNjUuNiAyNjUuNi0yNjUuNlpcIiBmaWxsPVwibm9uZVwiIGRpc3BsYXk9XCJibG9ja1wiIHRyYW5zZm9ybT1cInRyYW5zbGF0ZSg0MjAsMjk5LjEpIHNjYWxlKC45NzcsLjk3NylcIiAvPlxuICAgIDwvZz5cbiAgICA8ZyBvcGFjaXR5PVwiMFwiIHRyYW5zZm9ybT1cInRyYW5zbGF0ZSgwLDApIHNjYWxlKC4xLC4xKVwiPlxuICAgICAgPGcgZGlzcGxheT1cImJsb2NrXCIgbWFzaz1cInVybCgjJHtpY29uUHJlZml4fV9yZXZlcnNlX01hc2stMTgpXCIgdHJhbnNmb3JtPVwidHJhbnNsYXRlKDQsLTQpXCI+XG4gICAgICAgIDxwYXRoIGQ9XCJNMjI0LjIgNDc4LjNjMCAwLTIxMC42IDIxMC41LTIxMC42IDIxMC41YzAgMCAyMC40IDIwLjQgMjAuNCAyMC40YzAgMCAyMTAuNy0yMTAuNyAyMTAuNy0yMTAuN2MtMTEuNy0xMS01LjktNi0yMC41LTIwLjJaXCIgLz5cbiAgICAgIDwvZz5cbiAgICAgIDxnIGRpc3BsYXk9XCJibG9ja1wiIG1hc2s9XCJ1cmwoIyR7aWNvblByZWZpeH1fcmV2ZXJzZV9NYXNrLTE5KVwiPlxuICAgICAgICA8cGF0aCBkPVwiTTI2NS40IDQzNy4xYzAgMC05LjMgOS4zLTkuMyA5LjNjMCAwLTYyLjUgNjIuNC02Mi41IDYyLjRjMCAwIDIwLjQgMjAuNCAyMC40IDIwLjRjMCAwIDYyLjQtNjIuNCA2Mi40LTYyLjRjMCAwIDkuOC05LjYgOS44LTkuNmMwIDAtMjAuOC0yMC4xLTIwLjgtMjAuMVpcIiAvPlxuICAgICAgICA8cGF0aCBkPVwiTTQwMyAyOTkuM2wyMC45IDIwLjlsOC4zLTguM2M2LjggMy4yIDE0LjUgNS4xIDIyLjUgNS4xYzI4LjkgMCA1Mi4yLTIzLjQgNTIuMi01Mi4yaDI4LjhjMCA0NC43LTM2LjIgODEtODEgODFjLTQ0LjcgMC04MS0zNi4zLTgxLTgxYzAtNDQuOCAzNi4zLTgxIDgxLTgxYzE4IDAgMzQuNiA1LjggNDguMSAxNS44bC0yMC43IDIwLjdjLTgtNC45LTE3LjMtNy43LTI3LjQtNy43Yy0yOC44IDAtNTIuMiAyMy4zLTUyLjIgNTIuMmMwIDEwIDIuOSAxOS4zIDcuOCAyNy4zWlwiIGZpbGwtcnVsZT1cImV2ZW5vZGRcIiAvPlxuICAgICAgPC9nPlxuICAgICAgPHBhdGggc3Ryb2tlPVwiIzAwMFwiIHN0cm9rZS13aWR0aD1cIjMwXCIgZD1cIk0wLTI2My44YzE0NS42IDAgMjYzLjggMTE4LjIgMjYzLjggMjYzLjhjMCAxNDUuNi0xMTguMiAyNjMuOC0yNjMuOCAyNjMuOGMtMTQ1LjYgMC0yNjMuOC0xMTguMi0yNjMuOC0yNjMuOGMwLTE0NS42IDExOC4yLTI2My44IDI2My44LTI2My44WlwiIGZpbGw9XCJub25lXCIgZGlzcGxheT1cImJsb2NrXCIgdHJhbnNmb3JtPVwidHJhbnNsYXRlKDQyMS4yLDI5Ny44KSBzY2FsZSguOTc3LC45NzcpXCIgLz5cbiAgICA8L2c+XG4gICAgPGcgY2xpcC1wYXRoPVwidXJsKCMke2ljb25QcmVmaXh9X3JldmVyc2VfQ2xpcFBhdGgtMSlcIiBvcGFjaXR5PVwiMFwiIHRyYW5zZm9ybT1cInRyYW5zbGF0ZSgwLDApIHNjYWxlKC4xLC4xKVwiPlxuICAgICAgPGcgZGlzcGxheT1cImJsb2NrXCIgbWFzaz1cInVybCgjJHtpY29uUHJlZml4fV9yZXZlcnNlX01hc2stMjApXCI+XG4gICAgICAgIDxwYXRoIGQ9XCJNMjI0LjIgNDc4LjNjMCAwLTIxMC42IDIxMC41LTIxMC42IDIxMC41YzAgMCAyMC40IDIwLjQgMjAuNCAyMC40YzAgMCAyMTAuNy0yMTAuNyAyMTAuNy0yMTAuN2MtMTEuNy0xMS01LjktNi0yMC41LTIwLjJaXCIgLz5cbiAgICAgIDwvZz5cbiAgICAgIDxwYXRoIHN0cm9rZT1cIiMwMDBcIiBzdHJva2Utd2lkdGg9XCIzMFwiIGQ9XCJNMC0yNjEuN2MxNDQuNCAwIDI2MS43IDExNy4zIDI2MS43IDI2MS43YzAgMTQ0LjQtMTE3LjMgMjYxLjctMjYxLjcgMjYxLjdjLTE0NC40IDAtMjYxLjctMTE3LjMtMjYxLjctMjYxLjdjMC0xNDQuNCAxMTcuMy0yNjEuNyAyNjEuNy0yNjEuN1pcIiBmaWxsPVwibm9uZVwiIGRpc3BsYXk9XCJibG9ja1wiIHRyYW5zZm9ybT1cInRyYW5zbGF0ZSg0MjIuOCwyOTYuNCkgc2NhbGUoLjk3NywuOTc3KVwiIC8+XG4gICAgPC9nPmA7XG4gIH1cbn0pO1xuIiwiaW1wb3J0IFNWR0ljb24gZnJvbSAnLi9pY29uLmpzJztcbmV4cG9ydCBkZWZhdWx0IG5ldyBTVkdJY29uKHtcbiAgbmFtZTogJ3lleHRfYW5pbWF0ZWRfZm9yd2FyZCcsXG4gIHZpZXdCb3g6ICcwIDAgNzIgNzInLFxuICBjb21wbGV4Q29udGVudHM6IChwYXJhbXMgPSB7fSkgPT4ge1xuICAgIGNvbnN0IGljb25QcmVmaXggPSBwYXJhbXMuaWNvblByZWZpeCB8fCAneXh0JztcbiAgICByZXR1cm4gYDxkZWZzPlxuICAgICAgPG1hc2sgaWQ9XCIke2ljb25QcmVmaXh9X2ZvcndhcmRfTWFzay0xXCI+XG4gICAgICAgIDxyZWN0IGZpbGw9XCIjZmZmXCIgd2lkdGg9XCI3MjBcIiBoZWlnaHQ9XCI3MjBcIiAvPlxuICAgICAgPC9tYXNrPlxuICAgICAgPG1hc2sgaWQ9XCIke2ljb25QcmVmaXh9X2ZvcndhcmRfTWFzay0yXCI+XG4gICAgICAgIDxyZWN0IHg9XCItMTQ0LjNcIiB5PVwiMTQ0LjNcIiBmaWxsPVwiI2ZmZlwiIHdpZHRoPVwiNzIwXCIgaGVpZ2h0PVwiNzIwXCIgLz5cbiAgICAgICAgPHBhdGggZD1cIk0tMC4zIC4xYzAgMCAxLjMgMS4yIDEuMyAxLjJjMCAwIC4zLTEuNiAuMy0xLjZjMCAwLTEuNiAuNC0xLjYgLjRcIiAvPlxuICAgICAgICA8cGF0aCBmaWxsPVwiI2ZmZlwiIGQ9XCJNLjMgLjdjMCAwLTAuMyAuMy0wLjMgLjNjMCAwIDAgMCAwIDBjMCAwIC4zLTAuMyAuMy0wLjNjMCAwIDAgMCAwIDBcIiAvPlxuICAgICAgICA8cGF0aCBkPVwiTS4zIC43YzAgMC0wLjEgMC0wLjEgMGMwIDAgLjEgLjEgLjEgLjFjMCAwIC4xLTAuMSAuMS0wLjFjMCAwLTAuMSAwLTAuMSAwbTIyMi44IDQ2OS4xYzAgMC03MC41IDY5LjQtNzAuNSA2OS40YzAgMCAzNC4xIDMzLjUgMzQuMSAzMy41YzAgMCA2Ny03Mi45IDY3LTcyLjljMCAwLTMwLjYtMzAtMzAuNi0zMFwiIC8+XG4gICAgICA8L21hc2s+XG4gICAgICA8bWFzayBpZD1cIiR7aWNvblByZWZpeH1fZm9yd2FyZF9NYXNrLTNcIj5cbiAgICAgICAgPHJlY3QgZmlsbD1cIiNmZmZcIiB3aWR0aD1cIjcyMFwiIGhlaWdodD1cIjcyMFwiIC8+XG4gICAgICAgIDxwYXRoIGQ9XCJNNDg5LjggMjc3LjRjMCAwIDc4IDE4LjggNzggMTguOGMwIDAtOTYuMSA2MS41LTk2LjEgNjEuNWMwIDAgNTkuNi00MS4xIDU5LjYtNDEuMWMwIDAgMTAuNi01My44IDEwLjYtNTMuOGMwIDAtMzguMiAuNi0zOC4yIC42YzAgMC0xMy45IDE0LTEzLjkgMTRtLTY3LjgtMTA4LjFjMCAwIDczLjkgMS4zIDczLjkgMS4zYzAgMC0zMy44IDU0LjUtMzMuOCA1NC41YzAgMCAxOC42LTMuMiAxOC42LTMuMmMwIDAgMzUuNC0zNi41IDM1LjQtMzYuNWMwIDAtNjItMjUuOS02Mi0yNS45YzAgMC0zMi4xIDkuOC0zMi4xIDkuOFwiIC8+XG4gICAgICA8L21hc2s+XG4gICAgICA8bWFzayBpZD1cIiR7aWNvblByZWZpeH1fZm9yd2FyZF9NYXNrLTRcIj5cbiAgICAgICAgPHJlY3QgeD1cIi05MS4xXCIgeT1cIjkxLjFcIiBmaWxsPVwiI2ZmZlwiIHdpZHRoPVwiNzIwXCIgaGVpZ2h0PVwiNzIwXCIgLz5cbiAgICAgICAgPHBhdGggZD1cIk0tMC4zIC4xYzAgMCAxLjMgMS4yIDEuMyAxLjJjMCAwIC4zLTEuNiAuMy0xLjZjMCAwLTEuNiAuNC0xLjYgLjRcIiAvPlxuICAgICAgICA8cGF0aCBmaWxsPVwiI2ZmZlwiIGQ9XCJNLjMgLjdjMCAwLTAuMyAuMy0wLjMgLjNjMCAwIDAgMCAwIDBjMCAwIC4zLTAuMyAuMy0wLjNjMCAwIDAgMCAwIDBcIiAvPlxuICAgICAgICA8cGF0aCBkPVwiTS4zIC43YzAgMC0wLjEgMC0wLjEgMGMwIDAgLjEgLjEgLjEgLjFjMCAwIC4xLTAuMSAuMS0wLjFjMCAwLTAuMSAwLTAuMSAwbTIyMi44IDQ2OS4xYzAgMC03MC41IDY5LjQtNzAuNSA2OS40YzAgMCAzNC4xIDMzLjUgMzQuMSAzMy41YzAgMCA2Ny03Mi45IDY3LTcyLjljMCAwLTMwLjYtMzAtMzAuNi0zMFwiIC8+XG4gICAgICA8L21hc2s+XG4gICAgICA8bWFzayBpZD1cIiR7aWNvblByZWZpeH1fZm9yd2FyZF9NYXNrLTVcIj5cbiAgICAgICAgPHJlY3QgZmlsbD1cIiNmZmZcIiB3aWR0aD1cIjcyMFwiIGhlaWdodD1cIjcyMFwiIC8+XG4gICAgICAgIDxwYXRoIGQ9XCJNNDg4LjQgMjkxLjRjMCAwIDQwLjUgMzkuMyA0MC41IDM5LjNjMCAwLTU3LjIgMjctNTcuMiAyN2MwIDAgNTkuNi00MS4xIDU5LjYtNDEuMWMwIDAgMTAuNi01My44IDEwLjYtNTMuOGMwIDAtMzguMiAuNi0zOC4yIC42YzAgMC0xNS4zIDI4LTE1LjMgMjhtLTkwLjUtOTcuNGMwIDAgNTItMTEuMyA1Mi0xMS4zYzAgMC02IDQ1LjItNiA0NS4yYzAgMCAzNi44LTYgMzYuOC02YzAgMCAzOS4zLTMxLjkgMzkuMy0zMS45YzAgMC02NS45LTMwLjUtNjUuOS0zMC41YzAgMC01Ni4yIDM0LjUtNTYuMiAzNC41XCIgLz5cbiAgICAgIDwvbWFzaz5cbiAgICAgIDxtYXNrIGlkPVwiJHtpY29uUHJlZml4fV9mb3J3YXJkX01hc2stNlwiPlxuICAgICAgICA8cmVjdCB4PVwiLTYxLjNcIiB5PVwiNjEuM1wiIGZpbGw9XCIjZmZmXCIgd2lkdGg9XCI3MjBcIiBoZWlnaHQ9XCI3MjBcIiAvPlxuICAgICAgPC9tYXNrPlxuICAgICAgPG1hc2sgaWQ9XCIke2ljb25QcmVmaXh9X2ZvcndhcmRfTWFzay03XCI+XG4gICAgICAgIDxyZWN0IGZpbGw9XCIjZmZmXCIgd2lkdGg9XCI3MjBcIiBoZWlnaHQ9XCI3MjBcIiAvPlxuICAgICAgICA8cGF0aCBkPVwiTTQ4MS44IDI5OC40YzAgMCAyNy41IDM5LjggMjcuNSAzOS44YzAgMC0zNy42IDE5LjUtMzcuNiAxOS41YzAgMCA1OS42LTQxLjEgNTkuNi00MS4xYzAgMCAxMC42LTUzLjggMTAuNi01My44YzAgMC0zOC4yIC42LTM4LjIgLjZjMCAwLTIxLjkgMzUtMjEuOSAzNW0tMTA4LjEtNzkuN2MwIDAgMzAuMi0yMy44IDMwLjItMjMuOGMwIDAgMjEuNyAzNS45IDIxLjcgMzUuOWMwIDAgNTUuMS04LjkgNTUuMS04LjljMCAwIDM1LjQtMzYuNSAzNS40LTM2LjVjMCAwLTYyLTI1LjktNjItMjUuOWMwIDAtODAuNCA1OS4yLTgwLjQgNTkuMlwiIC8+XG4gICAgICA8L21hc2s+XG4gICAgICA8bWFzayBpZD1cIiR7aWNvblByZWZpeH1fZm9yd2FyZF9NYXNrLThcIj5cbiAgICAgICAgPHJlY3QgeD1cIi00Mi42XCIgeT1cIjQyLjZcIiBmaWxsPVwiI2ZmZlwiIHdpZHRoPVwiNzIwXCIgaGVpZ2h0PVwiNzIwXCIgLz5cbiAgICAgIDwvbWFzaz5cbiAgICAgIDxtYXNrIGlkPVwiJHtpY29uUHJlZml4fV9mb3J3YXJkX01hc2stOVwiPlxuICAgICAgICA8cmVjdCBmaWxsPVwiI2ZmZlwiIHdpZHRoPVwiNzIwXCIgaGVpZ2h0PVwiNzIwXCIgLz5cbiAgICAgICAgPHBhdGggZD1cIk00NzUuMiAzMDUuNGMwIDAgMTQuNSA0MC4zIDE0LjUgNDAuM2MwIDAtMTggMTItMTggMTJjMCAwIDU5LjYtNDEuMSA1OS42LTQxLjFjMCAwIDEwLjYtNTMuOCAxMC42LTUzLjhjMCAwLTM4LjIgLjYtMzguMiAuNmMwIDAtMjguNSA0Mi0yOC41IDQybS0xMTMuNi03NC4zYzAgMCAxNy45LTE4LjUgMTcuOS0xOC41YzAgMCAzNi40IDI1LjMgMzYuNCAyNS4zYzAgMCA2NC44LTE2IDY0LjgtMTZjMCAwIDM5LjMtMzEuOSAzOS4zLTMxLjljMCAwLTY1LjktMzAuNS02NS45LTMwLjVjMCAwLTkyLjUgNzEuNi05Mi41IDcxLjZcIiAvPlxuICAgICAgPC9tYXNrPlxuICAgICAgPG1hc2sgaWQ9XCIke2ljb25QcmVmaXh9X2ZvcndhcmRfTWFzay0xMFwiPlxuICAgICAgICA8cmVjdCB4PVwiLTI5LjZcIiB5PVwiMjkuNlwiIGZpbGw9XCIjZmZmXCIgd2lkdGg9XCI3MjBcIiBoZWlnaHQ9XCI3MjBcIiAvPlxuICAgICAgPC9tYXNrPlxuICAgICAgPG1hc2sgaWQ9XCIke2ljb25QcmVmaXh9X2ZvcndhcmRfTWFzay0xMVwiPlxuICAgICAgICA8cmVjdCBmaWxsPVwiI2ZmZlwiIHdpZHRoPVwiNzIwXCIgaGVpZ2h0PVwiNzIwXCIgLz5cbiAgICAgICAgPHBhdGggZD1cIk00NjguNiAzMTIuNGMwIDAgMS41IDQwLjggMS41IDQwLjhjMCAwIDEuNiA0LjUgMS42IDQuNWMwIDAgNTkuNi00MS4xIDU5LjYtNDEuMWMwIDAgMTAuNi01My44IDEwLjYtNTMuOGMwIDAtMzguMiAuNi0zOC4yIC42YzAgMC0zNS4xIDQ5LTM1LjEgNDltLTEwNy04MS4zYzAgMCAxNS4xIDQuOSAxNS4xIDQuOWMwIDAgMzguMiAxMy4zIDM4LjIgMTMuM2MwIDAgNjUuOC0yNy40IDY1LjgtMjcuNGMwIDAgMzkuMy0yMS45IDM5LjMtMjEuOWMwIDAtNjUuOS00MC41LTY1LjktNDAuNWMwIDAtOTIuNSA3MS42LTkyLjUgNzEuNlwiIC8+XG4gICAgICA8L21hc2s+XG4gICAgICA8bWFzayBpZD1cIiR7aWNvblByZWZpeH1fZm9yd2FyZF9NYXNrLTEyXCI+XG4gICAgICAgIDxyZWN0IHg9XCItMjAuM1wiIHk9XCIyMC4zXCIgZmlsbD1cIiNmZmZcIiB3aWR0aD1cIjcyMFwiIGhlaWdodD1cIjcyMFwiIC8+XG4gICAgICA8L21hc2s+XG4gICAgICA8bWFzayBpZD1cIiR7aWNvblByZWZpeH1fZm9yd2FyZF9NYXNrLTEzXCI+XG4gICAgICAgIDxyZWN0IGZpbGw9XCIjZmZmXCIgd2lkdGg9XCI3MjBcIiBoZWlnaHQ9XCI3MjBcIiAvPlxuICAgICAgICA8cGF0aCBkPVwiTTQ1Ni42IDMxMS45YzAgMC03IDM1LjYtNyAzNS42YzAgMCAyMi4xIDEwLjIgMjIuMSAxMC4yYzAgMCA1OS42LTQxLjEgNTkuNi00MS4xYzAgMCAxMC42LTUzLjggMTAuNi01My44YzAgMC0zOC4yIC42LTM4LjIgLjZjMCAwLTQ3LjEgNDguNS00Ny4xIDQ4LjVtLTk1LTgwLjhjMCAwIDEyLjMgMjguMyAxMi4zIDI4LjNjMCAwIDM5LjkgMS4zIDM5LjkgMS4zYzAgMCA2Ni45LTM4LjggNjYuOS0zOC44YzAgMCAzOS4zLTIxLjkgMzkuMy0yMS45YzAgMC02NS45LTQwLjUtNjUuOS00MC41YzAgMC05Mi41IDcxLjYtOTIuNSA3MS42XCIgLz5cbiAgICAgIDwvbWFzaz5cbiAgICAgIDxtYXNrIGlkPVwiJHtpY29uUHJlZml4fV9mb3J3YXJkX01hc2stMTRcIj5cbiAgICAgICAgPHJlY3QgeD1cIi0xMy40XCIgeT1cIjEzLjRcIiBmaWxsPVwiI2ZmZlwiIHdpZHRoPVwiNzIwXCIgaGVpZ2h0PVwiNzIwXCIgLz5cbiAgICAgIDwvbWFzaz5cbiAgICAgIDxtYXNrIGlkPVwiJHtpY29uUHJlZml4fV9mb3J3YXJkX01hc2stMTVcIj5cbiAgICAgICAgPHJlY3QgZmlsbD1cIiNmZmZcIiB3aWR0aD1cIjcyMFwiIGhlaWdodD1cIjcyMFwiIC8+XG4gICAgICAgIDxwYXRoIGQ9XCJNNDQ0LjYgMzExLjRjMCAwLTE1LjYgMzAuNS0xNS42IDMwLjVjMCAwIDQyLjcgMTUuOCA0Mi43IDE1LjhjMCAwIDU5LjYtNDEuMSA1OS42LTQxLjFjMCAwIDEwLjYtNTMuOCAxMC42LTUzLjhjMCAwLTM4LjIgLjYtMzguMiAuNmMwIDAtNTkuMSA0OC01OS4xIDQ4bS04My04MC4zYzAgMCA5LjUgNTEuNyA5LjUgNTEuN2MwIDAgNDEuNy0xMC44IDQxLjctMTAuOGMwIDAgNjcuOS01MC4xIDY3LjktNTAuMWMwIDAgNTAuNi0zMS45IDUwLjYtMzEuOWMwIDAtNzcuMi0zMC41LTc3LjItMzAuNWMwIDAtOTIuNSA3MS42LTkyLjUgNzEuNlwiIC8+XG4gICAgICA8L21hc2s+XG4gICAgICA8bWFzayBpZD1cIiR7aWNvblByZWZpeH1fZm9yd2FyZF9NYXNrLTE2XCI+XG4gICAgICAgIDxyZWN0IHg9XCItNy4zXCIgeT1cIjcuM1wiIGZpbGw9XCIjZmZmXCIgd2lkdGg9XCI3MjBcIiBoZWlnaHQ9XCI3MjBcIiAvPlxuICAgICAgPC9tYXNrPlxuICAgICAgPG1hc2sgaWQ9XCIke2ljb25QcmVmaXh9X2ZvcndhcmRfTWFzay0xN1wiPlxuICAgICAgICA8cmVjdCBmaWxsPVwiI2ZmZlwiIHdpZHRoPVwiNzIwXCIgaGVpZ2h0PVwiNzIwXCIgLz5cbiAgICAgICAgPHBhdGggZD1cIk00MzIuNiAzMTAuOWMwIDAtMjQuMiAyNS4zLTI0LjIgMjUuM2MwIDAgNjMuMyAyMS41IDYzLjMgMjEuNWMwIDAgNTkuNi00MS4xIDU5LjYtNDEuMWMwIDAgMTAuNi01My44IDEwLjYtNTMuOGMwIDAtMzguMiAuNi0zOC4yIC42YzAgMC03MS4xIDQ3LjUtNzEuMSA0Ny41bS03MS03OS44YzAgMCAyMC4zIDkwLjQgMjAuMyA5MC40YzAgMCAyOS0yOS41IDI5LTI5LjVjMCAwIDY5LjgtNzAuMSA2OS44LTcwLjFjMCAwIDM1LjQtMzYuNSAzNS40LTM2LjVjMCAwLTYyLTI1LjktNjItMjUuOWMwIDAtOTIuNSA3MS42LTkyLjUgNzEuNlwiIC8+XG4gICAgICA8L21hc2s+XG4gICAgICA8bWFzayBpZD1cIiR7aWNvblByZWZpeH1fZm9yd2FyZF9NYXNrLTE4XCI+XG4gICAgICAgIDxyZWN0IHg9XCItNFwiIHk9XCI0XCIgZmlsbD1cIiNmZmZcIiB3aWR0aD1cIjcyMFwiIGhlaWdodD1cIjcyMFwiIC8+XG4gICAgICA8L21hc2s+XG4gICAgICA8bWFzayBpZD1cIiR7aWNvblByZWZpeH1fZm9yd2FyZF9NYXNrLTE5XCI+XG4gICAgICAgIDxyZWN0IGZpbGw9XCIjZmZmXCIgd2lkdGg9XCI3MjBcIiBoZWlnaHQ9XCI3MjBcIiAvPlxuICAgICAgICA8cGF0aCBkPVwiTTQzMi42IDMxMC45YzAgMC0yNC4yIDI1LjMtMjQuMiAyNS4zYzAgMCA2My4zIDIxLjUgNjMuMyAyMS41YzAgMCA1OS42LTQxLjEgNTkuNi00MS4xYzAgMCAxMC42LTUzLjggMTAuNi01My44YzAgMC0zOC4yIC42LTM4LjIgLjZjMCAwLTcxLjEgNDcuNS03MS4xIDQ3LjVtLTcxLTc5LjhjMCAwIDIwLjMgOTAuNCAyMC4zIDkwLjRjMCAwIDI5LTI5LjUgMjktMjkuNWMwIDAgNjkuOC03MC4xIDY5LjgtNzAuMWMwIDAgMzkuMy0zMS45IDM5LjMtMzEuOWMwIDAtNjUuOS0zMC41LTY1LjktMzAuNWMwIDAtOTIuNSA3MS42LTkyLjUgNzEuNlwiIC8+XG4gICAgICA8L21hc2s+XG4gICAgICA8bWFzayBpZD1cIiR7aWNvblByZWZpeH1fZm9yd2FyZF9NYXNrLTIwXCI+XG4gICAgICAgIDxyZWN0IGZpbGw9XCIjZmZmXCIgd2lkdGg9XCI3MjBcIiBoZWlnaHQ9XCI3MjBcIiAvPlxuICAgICAgPC9tYXNrPlxuICAgICAgPGNsaXBQYXRoIGlkPVwiJHtpY29uUHJlZml4fV9mb3J3YXJkX0NsaXBQYXRoLTFcIj5cbiAgICAgICAgPHJlY3Qgd2lkdGg9XCI3MjBcIiBoZWlnaHQ9XCI3MjBcIiAvPlxuICAgICAgPC9jbGlwUGF0aD5cbiAgICA8L2RlZnM+XG4gICAgPGcgdHJhbnNmb3JtPVwidHJhbnNsYXRlKDAsMCkgc2NhbGUoLjEsLjEpXCI+XG4gICAgICA8ZyBtYXNrPVwidXJsKCMke2ljb25QcmVmaXh9X2ZvcndhcmRfTWFzay0xKVwiPlxuICAgICAgICA8cGF0aCBkPVwiTTM3Ny41IDM5NS4zYzAgMCA2NC44IDAgNjQuOCAwYzAgMCAwIDEyOS42IDAgMTI5LjZjMCAwIDI4LjggMCAyOC44IDBjMCAwIDAtMTI5LjYgMC0xMjkuNmMwIDAgNjQuOCAwIDY0LjggMGMwIDAgMC0yOC44IDAtMjguOGMwIDAtMTU4LjQgMC0xNTguNCAwYzAgMCAwIDI4LjggMCAyOC44WlwiIC8+XG4gICAgICAgIDxwYXRoIGQ9XCJNMzM4LjkgMzYzLjZjMCAwLTYyLjUgNjIuNC02Mi41IDYyLjRjMCAwLTYyLjQtNjIuNC02Mi40LTYyLjRjMCAwLTIwLjQgMjAuNC0yMC40IDIwLjRjMCAwIDYyLjUgNjIuNCA2Mi41IDYyLjRjMCAwLTYyLjUgNjIuNC02Mi41IDYyLjRjMCAwIDIwLjQgMjAuNCAyMC40IDIwLjRjMCAwIDYyLjQtNjIuNCA2Mi40LTYyLjRjMCAwIDYyLjUgNjIuNCA2Mi41IDYyLjRjMCAwIDIwLjMtMjAuNCAyMC4zLTIwLjRjMCAwLTYyLjQtNjIuNC02Mi40LTYyLjRjMCAwIDYyLjQtNjIuNCA2Mi40LTYyLjRjMCAwLTIwLjMtMjAuNC0yMC4zLTIwLjRaXCIgLz5cbiAgICAgICAgPHBhdGggZD1cIk00NTQuNyAzNDUuOGM0NC44IDAgODEtMzYuMyA4MS04MWMwIDAtMjguOCAwLTI4LjggMGMwIDI4LjgtMjMuMyA1Mi4yLTUyLjIgNTIuMmMtOC4yIDAtMTYtMS45LTIyLjktNS4zYzAgMCA2OS44LTY5LjkgNjkuOC02OS45YzAgMCAyMS4xLTIxIDIxLjEtMjFjLTE0LjQtMjIuMy0zOS41LTM3LTY4LTM3Yy00NC43IDAtODEgMzYuMi04MSA4MWMwIDQ0LjcgMzYuMyA4MSA4MSA4MVptMC0xMzMuMmMxMC4yIDAgMTkuNiAyLjkgMjcuNiA3LjljMCAwLTcxLjkgNzEuOC03MS45IDcxLjhjLTUtOC03LjktMTcuNC03LjktMjcuNWMwLTI4LjkgMjMuNC01Mi4yIDUyLjItNTIuMlpcIiAvPlxuICAgICAgICA8cGF0aCBkPVwiTTI3Ni40IDI1NS45YzAgMC02MC43LTcyLjgtNjAuNy03Mi44YzAgMC0yMi4xIDE4LjYtMjIuMSAxOC42YzAgMCA2OC40IDgyIDY4LjQgODJjMCAwIDAgNjIuNCAwIDYyLjRjMCAwIDI4LjggMCAyOC44IDBjMCAwIDAtNjIuNiAwLTYyLjZjMCAwIDY4LjQtODEuOCA2OC40LTgxLjhjMCAwLTIyLTE4LjYtMjItMTguNmMwIDAtNjAuOCA3Mi44LTYwLjggNzIuOFpcIiAvPlxuICAgICAgPC9nPlxuICAgICAgPHBhdGggc3Ryb2tlPVwiIzAwMFwiIHN0cm9rZS13aWR0aD1cIjMwXCIgZD1cIk0wLTM1My43YzE5NS4yIDAgMzUzLjcgMTU4LjUgMzUzLjcgMzUzLjdjMCAxOTUuMi0xNTguNSAzNTMuNy0zNTMuNyAzNTMuN2MtMTk1LjIgMC0zNTMuNy0xNTguNS0zNTMuNy0zNTMuN2MwLTE5NS4yIDE1OC41LTM1My43IDM1My43LTM1My43WlwiIGZpbGw9XCJub25lXCIgdHJhbnNmb3JtPVwidHJhbnNsYXRlKDM1OS44LDM2MC40KSBzY2FsZSguOTc3LC45NzcpXCIgLz5cbiAgICA8L2c+XG4gICAgPGcgb3BhY2l0eT1cIjBcIiB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoMCwwKSBzY2FsZSguMSwuMSlcIj5cbiAgICAgIDxnIGRpc3BsYXk9XCJibG9ja1wiIG1hc2s9XCJ1cmwoIyR7aWNvblByZWZpeH1fZm9yd2FyZF9NYXNrLTIpXCIgdHJhbnNmb3JtPVwidHJhbnNsYXRlKDE0NC4zLC0xNDQuMylcIj5cbiAgICAgICAgPHBhdGggZD1cIk0yMjQuMiA0NzguM2MwIDAtMjEwLjYgMjEwLjUtMjEwLjYgMjEwLjVjMCAwIDIwLjQgMjAuNCAyMC40IDIwLjRjMCAwIDIxMC43LTIxMC43IDIxMC43LTIxMC43Yy0xMS43LTExLTUuOS02LTIwLjUtMjAuMlpcIiAvPlxuICAgICAgPC9nPlxuICAgICAgPGcgZGlzcGxheT1cImJsb2NrXCIgbWFzaz1cInVybCgjJHtpY29uUHJlZml4fV9mb3J3YXJkX01hc2stMylcIj5cbiAgICAgICAgPHBhdGggZD1cIk0zOTAuNiAzOTUuMmMwIDAgNTEuNyAuMSA1MS43IC4xYzAgMCAuMSAxMDMuNiAuMSAxMDMuNmMwIDAgMjguNyAwIDI4LjcgMGMwIDAgMC0xMDMuNiAwLTEwMy42YzAgMCA1Mi0wLjEgNTItMC4xYzAgMCAwLTI4LjQgMC0yOC40YzAgMC0xMzIuNSAwLTEzMi41IDBjMCAwIDAgMjguNCAwIDI4LjRaXCIgLz5cbiAgICAgICAgPHBhdGggZD1cIk0zMjkgMzczLjRjMCAuMS01Mi42IDUyLjYtNTIuNiA1Mi42YzAgMC02Mi40LTYyLjQtNjIuNC02Mi40YzAgMC0yMC40IDIwLjQtMjAuNCAyMC40YzAgMCA2Mi41IDYyLjQgNjIuNSA2Mi40YzAgMC02Mi41IDYyLjQtNjIuNSA2Mi40YzAgMCAyMC40IDIwLjQgMjAuNCAyMC40YzAgMCA2Mi40LTYyLjQgNjIuNC02Mi40YzAgMCA2Mi41IDYyLjQgNjIuNSA2Mi40YzAgMCAyMC4zLTIwLjQgMjAuMy0yMC40YzAgMC02Mi40LTYyLjQtNjIuNC02Mi40YzAgMCA1Mi42LTUyLjYgNTIuNi01Mi42YzAgMC0yMC40LTIwLjMtMjAuNC0yMC4zWlwiIC8+XG4gICAgICAgIDxwYXRoIGQ9XCJNNDU0LjcgMzQ1LjhjNDQuOCAwIDgxLTM2LjMgODEtODFjMCAwLTI4LjggMC0yOC44IDBjMCAyOC44LTIzLjMgNTIuMi01Mi4yIDUyLjJjLTguMiAwLTE2LTEuOS0yMi45LTUuM2MwIDAgNjkuOC02OS45IDY5LjgtNjkuOWMwIDAgMjEuMS0yMSAyMS4xLTIxYy0xNC40LTIyLjMtMzkuNS0zNy02OC0zN2MtNDQuNyAwLTgxIDM2LjItODEgODFjMCA0NC43IDM2LjMgODEgODEgODFabTAtMTMzLjJjMTAuMiAwIDE5LjYgMi45IDI3LjYgNy45YzAgMC03MS45IDcxLjgtNzEuOSA3MS44Yy01LTgtNy45LTE3LjQtNy45LTI3LjVjMC0yOC45IDIzLjQtNTIuMiA1Mi4yLTUyLjJaXCIgLz5cbiAgICAgICAgPHBhdGggZD1cIk0yNzYuNCAyNTUuOWMwIDAtNDguNy01OC4zLTQ4LjctNTguM2MwIDAtMjEuMSAxOS0yMS4xIDE5YzAgMCA1NS41IDY3LjIgNTUuNSA2Ny4yYzAgMCAuMyA1MCAuMyA1MGMwIDAgMjguNCAwIDI4LjQgMGMwIDAgMC01MC4zIDAtNTAuM2MwIDAgNTUuNC02Ni45IDU1LjQtNjYuOWMwIDAtMjEtMTguNi0yMS0xOC42YzAgMC00OC44IDU3LjktNDguOCA1Ny45WlwiIC8+XG4gICAgICA8L2c+XG4gICAgICA8cGF0aCBzdHJva2U9XCIjMDAwXCIgc3Ryb2tlLXdpZHRoPVwiMzBcIiBkPVwiTTAtMzM2LjJjMTg1LjYgMCAzMzYuMiAxNTAuNiAzMzYuMiAzMzYuMmMwIDE4NS42LTE1MC42IDMzNi4yLTMzNi4yIDMzNi4yYy0xODUuNiAwLTMzNi4yLTE1MC42LTMzNi4yLTMzNi4yYzAtMTg1LjYgMTUwLjYtMzM2LjIgMzM2LjItMzM2LjJaXCIgZmlsbD1cIm5vbmVcIiBkaXNwbGF5PVwiYmxvY2tcIiB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoMzcwLjgsMzQ3LjUpIHNjYWxlKC45NzcsLjk3NylcIiAvPlxuICAgIDwvZz5cbiAgICA8ZyBvcGFjaXR5PVwiMFwiIHRyYW5zZm9ybT1cInRyYW5zbGF0ZSgwLDApIHNjYWxlKC4xLC4xKVwiPlxuICAgICAgPGcgbWFzaz1cInVybCgjJHtpY29uUHJlZml4fV9mb3J3YXJkX01hc2stNClcIiB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoOTEuMSwtOTEuMSlcIj5cbiAgICAgICAgPHBhdGggZD1cIk0yMjQuMiA0NzguM2MwIDAtMjEwLjYgMjEwLjUtMjEwLjYgMjEwLjVjMCAwIDIwLjQgMjAuNCAyMC40IDIwLjRjMCAwIDIxMC43LTIxMC43IDIxMC43LTIxMC43Yy0xMS43LTExLTUuOS02LTIwLjUtMjAuMlpcIiAvPlxuICAgICAgPC9nPlxuICAgICAgPGcgbWFzaz1cInVybCgjJHtpY29uUHJlZml4fV9mb3J3YXJkX01hc2stNSlcIj5cbiAgICAgICAgPHBhdGggZD1cIk00MDkuNyAzOTUuMWMwIDAgMzIuNiAuMiAzMi42IC4yYzAgMCAuMyA2NS41IC4zIDY1LjVjMCAwIDI4LjUgMCAyOC41IDBjMCAwIDAtNjUuNSAwLTY1LjVjMCAwIDMzLjEtMC4yIDMzLjEtMC4yYzAgMCAwLTI3LjggMC0yNy44YzAgMC05NC41IDAtOTQuNSAwYzAgMCAwIDI3LjggMCAyNy44WlwiIC8+XG4gICAgICAgIDxwYXRoIGQ9XCJNMzE5LjcgMzgyLjhjMCAwLTQzLjMgNDMuMi00My4zIDQzLjJjMCAwLTYyLjQtNjIuNC02Mi40LTYyLjRjMCAwLTIwLjQgMjAuNC0yMC40IDIwLjRjMCAwIDYyLjUgNjIuNCA2Mi41IDYyLjRjMCAwLTYyLjUgNjIuNC02Mi41IDYyLjRjMCAwIDIwLjQgMjAuNCAyMC40IDIwLjRjMCAwIDYyLjQtNjIuNCA2Mi40LTYyLjRjMCAwIDYyLjUgNjIuNCA2Mi41IDYyLjRjMCAwIDIwLjMtMjAuNCAyMC4zLTIwLjRjMCAwLTYyLjQtNjIuNC02Mi40LTYyLjRjMCAwIDQzLjQtNDMuMyA0My40LTQzLjNjMCAwLTIwLjUtMjAuMy0yMC41LTIwLjNaXCIgLz5cbiAgICAgICAgPHBhdGggZD1cIk01MDIuOCAxOTkuNmMtMTMuNC05LjktMzAtMTUuOC00OC4xLTE1LjhjLTQ0LjcgMC04MSAzNi4yLTgxIDgxYzAgNDQuNyAzNi4zIDgxIDgxIDgxYzQ0LjggMCA4MS0zNi4zIDgxLTgxaC0yOC44YzAgMjguOC0yMy4zIDUyLjItNTIuMiA1Mi4yYy04LjIgMC0xNi0xLjktMjIuOS01LjNsNjkuOC02OS45bC4zLTAuMmwtMjAuMy0yMC40bC03MS4yIDcxLjFjLTUtOC03LjktMTcuNC03LjktMjcuNWMwLTI4LjkgMjMuNC01Mi4yIDUyLjItNTIuMmMxMC4xIDAgMTkuNCAyLjggMjcuNCA3LjdaXCIgZmlsbC1ydWxlPVwiZXZlbm9kZFwiIC8+XG4gICAgICAgIDxwYXRoIGQ9XCJNMjc2LjQgMjU1LjljMCAwLTMxLjEtMzctMzEuMS0zN2MwIDAtMTkuNyAxOS41LTE5LjcgMTkuNWMwIDAgMzYuNyA0NS42IDM2LjcgNDUuNmMwIDAgLjcgMzEuOCAuNyAzMS44YzAgMCAyNy43IDAgMjcuNyAwYzAgMCAwLTMyLjQgMC0zMi40YzAgMCAzNi41LTQ0LjkgMzYuNS00NC45YzAgMC0xOS42LTE4LjYtMTkuNi0xOC42YzAgMC0zMS4yIDM2LTMxLjIgMzZaXCIgLz5cbiAgICAgIDwvZz5cbiAgICAgIDxwYXRoIHN0cm9rZT1cIiMwMDBcIiBzdHJva2Utd2lkdGg9XCIzMFwiIGQ9XCJNMC0zMTBjMTcxLjEgMCAzMTAgMTM4LjkgMzEwIDMxMGMwIDE3MS4xLTEzOC45IDMxMC0zMTAgMzEwYy0xNzEuMSAwLTMxMC0xMzguOS0zMTAtMzEwYzAtMTcxLjEgMTM4LjktMzEwIDMxMC0zMTBaXCIgZmlsbD1cIm5vbmVcIiB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoMzg3LjgsMzI4LjcpIHNjYWxlKC45NzcsLjk3NylcIiAvPlxuICAgIDwvZz5cbiAgICA8ZyBvcGFjaXR5PVwiMFwiIHRyYW5zZm9ybT1cInRyYW5zbGF0ZSgwLDApIHNjYWxlKC4xLC4xKVwiPlxuICAgICAgPGcgZGlzcGxheT1cImJsb2NrXCIgbWFzaz1cInVybCgjJHtpY29uUHJlZml4fV9mb3J3YXJkX01hc2stNilcIiB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoNjEuMywtNjEuMylcIj5cbiAgICAgICAgPHBhdGggZD1cIk0yMjQuMiA0NzguM2MwIDAtMjEwLjYgMjEwLjUtMjEwLjYgMjEwLjVjMCAwIDIwLjQgMjAuNCAyMC40IDIwLjRjMCAwIDIxMC43LTIxMC43IDIxMC43LTIxMC43Yy0xMS43LTExLTUuOS02LTIwLjUtMjAuMlpcIiAvPlxuICAgICAgPC9nPlxuICAgICAgPGcgbWFzaz1cInVybCgjJHtpY29uUHJlZml4fV9mb3J3YXJkX01hc2stNylcIj5cbiAgICAgICAgPHBhdGggZD1cIk00MjAuNCAzOTVjMCAwIDIxLjkgLjMgMjEuOSAuM2MwIDAgLjQgNDQuMSAuNCA0NC4xYzAgMCAyOC40IDAgMjguNCAwYzAgMCAwLTQ0LjEgMC00NC4xYzAgMCAyMi42LTAuMyAyMi42LTAuM2MwIDAgMC0yNy41IDAtMjcuNWMwIDAtNzMuMyAwLTczLjMgMGMwIDAgMCAyNy41IDAgMjcuNVpcIiAvPlxuICAgICAgICA8cGF0aCBkPVwiTTMxMy4yIDM4OS4yYzAgMC0zNi44IDM2LjgtMzYuOCAzNi44YzAgMC02Mi40LTYyLjQtNjIuNC02Mi40YzAgMC0yMC40IDIwLjQtMjAuNCAyMC40YzAgMCA2Mi41IDYyLjQgNjIuNSA2Mi40YzAgMC02Mi41IDYyLjQtNjIuNSA2Mi40YzAgMCAyMC40IDIwLjQgMjAuNCAyMC40YzAgMCA2Mi40LTYyLjQgNjIuNC02Mi40YzAgMCA2Mi41IDYyLjQgNjIuNSA2Mi40YzAgMCAyMC4zLTIwLjQgMjAuMy0yMC40YzAgMC02Mi40LTYyLjQtNjIuNC02Mi40YzAgMCAzNy0zNi45IDM3LTM2LjljMCAwLTIwLjYtMjAuMy0yMC42LTIwLjNaXCIgLz5cbiAgICAgICAgPHBhdGggZD1cIk01MDAgMjAwYy0xMy40LTkuOS0yNy4yLTE2LjItNDUuMy0xNi4yYy00NC43IDAtODEgMzYuMi04MSA4MWMwIDQ0LjcgMzYuMyA4MSA4MSA4MWM0NC44IDAgODEtMzYuMyA4MS04MWgtMjguOGMwIDI4LjgtMjMuMyA1Mi4yLTUyLjIgNTIuMmMtOC4yIDAtMTYtMS45LTIyLjktNS4zbDU3LjctNTcuN2wtMjAuMy0yMC40bC01OC44IDU4LjdjLTUtOC03LjktMTcuNC03LjktMjcuNWMwLTI4LjkgMjMuNC01Mi4yIDUyLjItNTIuMmMxMC4xIDAgMTkuNCAyLjggMjcuNCA3LjdaXCIgZmlsbC1ydWxlPVwiZXZlbm9kZFwiIC8+XG4gICAgICAgIDxwYXRoIGQ9XCJNMjc2LjQgMjU1LjljMCAwLTIxLjItMjUuMS0yMS4yLTI1LjFjMCAwLTE5IDE5LjgtMTkgMTkuOGMwIDAgMjYuMiAzMy41IDI2LjIgMzMuNWMwIDAgMSAyMS42IDEgMjEuNmMwIDAgMjcuMiAwIDI3LjIgMGMwIDAgMC0yMi4zIDAtMjIuM2MwIDAgMjUuOS0zMi43IDI1LjktMzIuN2MwIDAtMTguOC0xOC42LTE4LjgtMTguNmMwIDAtMjEuMyAyMy44LTIxLjMgMjMuOFpcIiAvPlxuICAgICAgPC9nPlxuICAgICAgPHBhdGggc3Ryb2tlPVwiIzAwMFwiIHN0cm9rZS13aWR0aD1cIjMwXCIgZD1cIk0wLTI5NC4zYzE2Mi40IDAgMjk0LjMgMTMxLjkgMjk0LjMgMjk0LjNjMCAxNjIuNC0xMzEuOSAyOTQuMy0yOTQuMyAyOTQuM2MtMTYyLjQgMC0yOTQuMy0xMzEuOS0yOTQuMy0yOTQuM2MwLTE2Mi40IDEzMS45LTI5NC4zIDI5NC4zLTI5NC4zWlwiIGZpbGw9XCJub25lXCIgZGlzcGxheT1cImJsb2NrXCIgdHJhbnNmb3JtPVwidHJhbnNsYXRlKDM5OC43LDMxOC4yKSBzY2FsZSguOTc3LC45NzcpXCIgLz5cbiAgICA8L2c+XG4gICAgPGcgb3BhY2l0eT1cIjBcIiB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoMCwwKSBzY2FsZSguMSwuMSlcIj5cbiAgICAgIDxnIG1hc2s9XCJ1cmwoIyR7aWNvblByZWZpeH1fZm9yd2FyZF9NYXNrLTgpXCIgdHJhbnNmb3JtPVwidHJhbnNsYXRlKDQyLjYsLTQyLjYpXCI+XG4gICAgICAgIDxwYXRoIGQ9XCJNMjI0LjIgNDc4LjNjMCAwLTIxMC42IDIxMC41LTIxMC42IDIxMC41YzAgMCAyMC40IDIwLjQgMjAuNCAyMC40YzAgMCAyMTAuNy0yMTAuNyAyMTAuNy0yMTAuN2MtMTEuNy0xMS01LjktNi0yMC41LTIwLjJaXCIgLz5cbiAgICAgIDwvZz5cbiAgICAgIDxnIGRpc3BsYXk9XCJibG9ja1wiIG1hc2s9XCJ1cmwoIyR7aWNvblByZWZpeH1fZm9yd2FyZF9NYXNrLTkpXCI+XG4gICAgICAgIDxwYXRoIGQ9XCJNNDI3LjIgMzk0LjljMCAwIDE1LjEgLjQgMTUuMSAuNGMwIDAgLjQgMzAuNyAuNCAzMC43YzAgMCAyOC40IDAgMjguNCAwYzAgMCAwLTMwLjcgMC0zMC43YzAgMCAxNS45LTAuNCAxNS45LTAuNGMwIDAgMC0yNy4yIDAtMjcuMmMwIDAtNTkuOCAwLTU5LjggMGMwIDAgMCAyNy4yIDAgMjcuMlpcIiAvPlxuICAgICAgICA8cGF0aCBkPVwiTTMwNy40IDM5NWMwIDAtMzEgMzEtMzEgMzFjMCAwLTUzLjktNTQtNTMuOS01NGMwIDAtMjAuNCAyMC40LTIwLjQgMjAuNGMwIDAgNTQgNTQgNTQgNTRjMCAwLTYyLjUgNjIuNC02Mi41IDYyLjRjMCAwIDIwLjQgMjAuNCAyMC40IDIwLjRjMCAwIDYyLjQtNjIuNCA2Mi40LTYyLjRjMCAwIDU0IDU0IDU0IDU0YzAgMCAyMC40LTIwLjMgMjAuNC0yMC4zYzAgMC01NC01NC4xLTU0LTU0LjFjMCAwIDMxLjItMzEuMSAzMS4yLTMxLjFjMCAwLTIwLjYtMjAuMy0yMC42LTIwLjNaXCIgLz5cbiAgICAgICAgPHBhdGggZD1cIk01MDIuOCAxOTkuNmMtMTMuNC05LjktMzAuMS0xNS44LTQ4LjEtMTUuOGMtNDQuNyAwLTgxIDM2LjItODEgODFjMCA0NC43IDM2LjMgODEgODEgODFjNDQuOCAwIDgxLTM2LjMgODEtODFoLTI4LjhjMCAyOC44LTIzLjMgNTIuMi01Mi4yIDUyLjJjLTguMiAwLTE2LTEuOS0yMi45LTUuM2w0NS41LTQ1LjVsLTIwLjQtMjAuNGwtNDYuNSA0Ni41Yy01LTgtNy45LTE3LjQtNy45LTI3LjVjMC0yOC45IDIzLjQtNTIuMiA1Mi4yLTUyLjJjMTAuMSAwIDE5LjQgMi44IDI3LjQgNy43WlwiIGZpbGwtcnVsZT1cImV2ZW5vZGRcIiAvPlxuICAgICAgICA8cGF0aCBkPVwiTTI3Ni40IDI1NS45YzAgMC0xNS0xNy42LTE1LTE3LjZjMCAwLTE4LjQgMjAtMTguNCAyMGMwIDAgMTkuNCAyNS44IDE5LjQgMjUuOGMwIDAgMS4yIDE1LjIgMS4yIDE1LjJjMCAwIDI3IDAgMjcgMGMwIDAgMC0xNS45IDAtMTUuOWMwIDAgMTkuMS0yNC45IDE5LjEtMjQuOWMwIDAtMTguMi0xOC43LTE4LjItMTguN2MwIDAtMTUuMSAxNi4xLTE1LjEgMTYuMVpcIiAvPlxuICAgICAgPC9nPlxuICAgICAgPHBhdGggc3Ryb2tlPVwiIzAwMFwiIHN0cm9rZS13aWR0aD1cIjMwXCIgZD1cIk0wLTI4NC40YzE1NyAwIDI4NC40IDEyNy40IDI4NC40IDI4NC40YzAgMTU3LTEyNy40IDI4NC40LTI4NC40IDI4NC40Yy0xNTcgMC0yODQuNC0xMjcuNC0yODQuNC0yODQuNGMwLTE1NyAxMjcuNC0yODQuNCAyODQuNC0yODQuNFpcIiBmaWxsPVwibm9uZVwiIHRyYW5zZm9ybT1cInRyYW5zbGF0ZSg0MDYuMSwzMTEuNikgc2NhbGUoLjk3NywuOTc3KVwiIC8+XG4gICAgPC9nPlxuICAgIDxnIG9wYWNpdHk9XCIwXCIgdHJhbnNmb3JtPVwidHJhbnNsYXRlKDAsMCkgc2NhbGUoLjEsLjEpXCI+XG4gICAgICA8ZyBkaXNwbGF5PVwiYmxvY2tcIiBtYXNrPVwidXJsKCMke2ljb25QcmVmaXh9X2ZvcndhcmRfTWFzay0xMClcIiB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoMjkuNiwtMjkuNilcIj5cbiAgICAgICAgPHBhdGggZD1cIk0yMjQuMiA0NzguM2MwIDAtMjEwLjYgMjEwLjUtMjEwLjYgMjEwLjVjMCAwIDIwLjQgMjAuNCAyMC40IDIwLjRjMCAwIDIxMC43LTIxMC43IDIxMC43LTIxMC43Yy0xMS43LTExLTUuOS02LTIwLjUtMjAuMlpcIiAvPlxuICAgICAgPC9nPlxuICAgICAgPGcgZGlzcGxheT1cImJsb2NrXCIgbWFzaz1cInVybCgjJHtpY29uUHJlZml4fV9mb3J3YXJkX01hc2stMTEpXCI+XG4gICAgICAgIDxwYXRoIGQ9XCJNNDM2IDM5My41YzAgMCA4LjcgLjQgOC43IC40YzAgMCAuNCAxNy44IC40IDE3LjhjMCAwIDIzLjYgMCAyMy42IDBjMCAwIDAtMTcuOCAwLTE3LjhjMCAwIDkuNC0wLjQgOS40LTAuNGMwIDAgMC0yMi42IDAtMjIuNmMwIDAtNDIuMSAwLTQyLjEgMGMwIDAgMCAyMi42IDAgMjIuNlpcIiAvPlxuICAgICAgICA8cGF0aCBkPVwiTTI5Ny4yIDQwNS4yYzAgMC0yMC44IDIwLjgtMjAuOCAyMC44YzAgMC0zNS40LTM1LjYtMzUuNC0zNS42YzAgMC0yMC4zIDIwLjUtMjAuMyAyMC41YzAgMCAzNS40IDM1LjUgMzUuNCAzNS41YzAgMC02Mi41IDYyLjQtNjIuNSA2Mi40YzAgMCAyMC40IDIwLjQgMjAuNCAyMC40YzAgMCA2Mi40LTYyLjQgNjIuNC02Mi40YzAgMCAzNS42IDM1LjUgMzUuNiAzNS41YzAgMCAyMC4yLTIwLjIgMjAuMi0yMC4yYzAgMC0zNS40LTM1LjctMzUuNC0zNS43YzAgMCAyMS4xLTIxIDIxLjEtMjFjMCAwLTIwLjctMjAuMi0yMC43LTIwLjJaXCIgLz5cbiAgICAgICAgPHBhdGggZD1cIk01MDIuOCAxOTkuNmMtMTMuNC05LjktMzAuMS0xNS44LTQ4LjEtMTUuOGMtNDQuNyAwLTgxIDM2LjItODEgODFjMCA0NC43IDM2LjMgODEgODEgODFjNDQuOCAwIDgxLTM2LjMgODEtODFoLTI4LjhjMCAyOC44LTIzLjMgNTIuMi01Mi4yIDUyLjJjLTguMiAwLTE2LTEuOS0yMi45LTUuM2wzMy43LTMzLjdsLTIwLjQtMjAuM2wtMzQuNyAzNC42Yy01LTgtNy45LTE3LjQtNy45LTI3LjVjMC0yOC45IDIzLjQtNTIuMiA1Mi4yLTUyLjJjMTAuMSAwIDE5LjQgMi44IDI3LjQgNy43WlwiIGZpbGwtcnVsZT1cImV2ZW5vZGRcIiAvPlxuICAgICAgICA8cGF0aCBkPVwiTTI3Ni40IDI1NS45YzAgMC0xMC43LTEyLjQtMTAuNy0xMi40YzAgMC0xOC4xIDIwLjEtMTguMSAyMC4xYzAgMCAxNC45IDIwLjYgMTQuOSAyMC42YzAgMCAxLjIgMTAuNyAxLjIgMTAuN2MwIDAgMjYuOCAwIDI2LjggMGMwIDAgMC0xMS41IDAtMTEuNWMwIDAgMTQuNi0xOS42IDE0LjYtMTkuNmMwIDAtMTcuOS0xOC42LTE3LjktMTguNmMwIDAtMTAuOCAxMC43LTEwLjggMTAuN1pcIiAvPlxuICAgICAgPC9nPlxuICAgICAgPHBhdGggc3Ryb2tlPVwiIzAwMFwiIHN0cm9rZS13aWR0aD1cIjMwXCIgZD1cIk0wLTI3Ny41YzE1My4xIDAgMjc3LjUgMTI0LjQgMjc3LjUgMjc3LjVjMCAxNTMuMS0xMjQuNCAyNzcuNS0yNzcuNSAyNzcuNWMtMTUzLjEgMC0yNzcuNS0xMjQuNC0yNzcuNS0yNzcuNWMwLTE1My4xIDEyNC40LTI3Ny41IDI3Ny41LTI3Ny41WlwiIGZpbGw9XCJub25lXCIgZGlzcGxheT1cImJsb2NrXCIgdHJhbnNmb3JtPVwidHJhbnNsYXRlKDQxMS4yLDMwNy4xKSBzY2FsZSguOTc3LC45NzcpXCIgLz5cbiAgICA8L2c+XG4gICAgPGcgb3BhY2l0eT1cIjBcIiB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoMCwwKSBzY2FsZSguMSwuMSlcIj5cbiAgICAgIDxnIGRpc3BsYXk9XCJibG9ja1wiIG1hc2s9XCJ1cmwoIyR7aWNvblByZWZpeH1fZm9yd2FyZF9NYXNrLTEyKVwiIHRyYW5zZm9ybT1cInRyYW5zbGF0ZSgyMC4zLC0yMC4zKVwiPlxuICAgICAgICA8cGF0aCBkPVwiTTIyNC4yIDQ3OC4zYzAgMC0yMTAuNiAyMTAuNS0yMTAuNiAyMTAuNWMwIDAgMjAuNCAyMC40IDIwLjQgMjAuNGMwIDAgMjEwLjctMjEwLjcgMjEwLjctMjEwLjdjLTExLjctMTEtNS45LTYtMjAuNS0yMC4yWlwiIC8+XG4gICAgICA8L2c+XG4gICAgICA8ZyBkaXNwbGF5PVwiYmxvY2tcIiBtYXNrPVwidXJsKCMke2ljb25QcmVmaXh9X2ZvcndhcmRfTWFzay0xMylcIj5cbiAgICAgICAgPHBhdGggZD1cIk00NDYgMzkwLjhjMCAwIDMuNSAuMiAzLjUgLjJjMCAwIC4yIDcuMyAuMiA3LjNjLjEgMCAxNC4yIDAgMTQuMiAwYzAgMCAwLTcuMyAwLTcuM2MwIDAgNC0wLjIgNC0wLjJjMCAwIDAtMTMuNSAwLTEzLjVjMCAwLTIxLjkgMC0yMS45IDBjMCAwIDAgMTMuNSAwIDEzLjVaXCIgLz5cbiAgICAgICAgPHBhdGggZD1cIk0yODcuOSA0MTQuNGMwIDAtMTEuNSAxMS42LTExLjUgMTEuNmMwIDAtMTguNS0xOC44LTE4LjUtMTguOGMwIDAtMjAuMyAyMC41LTIwLjMgMjAuNWMwIDAgMTguNSAxOC43IDE4LjUgMTguN2MwIDAtNjIuNSA2Mi40LTYyLjUgNjIuNGMwIDAgMjAuNCAyMC40IDIwLjQgMjAuNGMwIDAgNjIuNC02Mi40IDYyLjQtNjIuNGMwIDAgMTguNyAxOC43IDE4LjcgMTguN2MwIDAgMjAuMi0yMCAyMC4yLTIwYzAgMC0xOC41LTE5LjEtMTguNS0xOS4xYzAgMCAxMS45LTExLjggMTEuOS0xMS44YzAgMC0yMC44LTIwLjItMjAuOC0yMC4yWlwiIC8+XG4gICAgICAgIDxwYXRoIGQ9XCJNNTAyLjggMTk5LjZjLTEzLjQtMTAtMzAuMS0xNS44LTQ4LjEtMTUuOGMtNDQuNyAwLTgxIDM2LjItODEgODFjMCA0NC43IDM2LjMgODEgODEgODFjNDQuOCAwIDgxLTM2LjMgODEtODFoLTI4LjhjMCAyOC44LTIzLjMgNTIuMi01Mi4yIDUyLjJjLTguMiAwLTE2LTEuOS0yMi45LTUuM2wyMi40LTIyLjRsLTIwLjQtMjAuNGwtMjMuNCAyMy40Yy01LTgtNy45LTE3LjQtNy45LTI3LjVjMC0yOC45IDIzLjQtNTIuMiA1Mi4yLTUyLjJjMTAuMSAwIDE5LjQgMi44IDI3LjQgNy43WlwiIGZpbGwtcnVsZT1cImV2ZW5vZGRcIiAvPlxuICAgICAgICA8cGF0aCBkPVwiTTI3Ni40IDI1OS40YzAgMC00LjUtNS4yLTQuNS01LjJjMCAwLTEwLjcgMTIuMS0xMC43IDEyLjFjMCAwIDYuOSAxMC4xIDYuOSAxMC4xYzAgMCAuOCA0LjUgLjggNC41YzAgMCAxNiAwIDE2IDBjMCAwIDAtNSAwLTVjMCAwIDYuNy05LjQgNi43LTkuNGMwIDAtMTAuNi0xMS4yLTEwLjYtMTEuMmMwIDAtNC42IDQuMS00LjYgNC4xWlwiIC8+XG4gICAgICA8L2c+XG4gICAgICA8cGF0aCBzdHJva2U9XCIjMDAwXCIgc3Ryb2tlLXdpZHRoPVwiMzBcIiBkPVwiTTAtMjcyLjVjMTUwLjQgMCAyNzIuNSAxMjIuMSAyNzIuNSAyNzIuNWMwIDE1MC40LTEyMi4xIDI3Mi41LTI3Mi41IDI3Mi41Yy0xNTAuNCAwLTI3Mi41LTEyMi4xLTI3Mi41LTI3Mi41YzAtMTUwLjQgMTIyLjEtMjcyLjUgMjcyLjUtMjcyLjVaXCIgZmlsbD1cIm5vbmVcIiBkaXNwbGF5PVwiYmxvY2tcIiB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoNDE0LjksMzAzLjcpIHNjYWxlKC45NzcsLjk3NylcIiAvPlxuICAgIDwvZz5cbiAgICA8ZyBvcGFjaXR5PVwiMFwiIHRyYW5zZm9ybT1cInRyYW5zbGF0ZSgwLDApIHNjYWxlKC4xLC4xKVwiPlxuICAgICAgPGcgZGlzcGxheT1cImJsb2NrXCIgbWFzaz1cInVybCgjJHtpY29uUHJlZml4fV9mb3J3YXJkX01hc2stMTQpXCIgdHJhbnNmb3JtPVwidHJhbnNsYXRlKDEzLjQsLTEzLjQpXCI+XG4gICAgICAgIDxwYXRoIGQ9XCJNMjI0LjIgNDc4LjNjMCAwLTIxMC42IDIxMC41LTIxMC42IDIxMC41YzAgMCAyMC40IDIwLjQgMjAuNCAyMC40YzAgMCAyMTAuNy0yMTAuNyAyMTAuNy0yMTAuN2MtMTEuNy0xMS01LjktNi0yMC41LTIwLjJaXCIgLz5cbiAgICAgIDwvZz5cbiAgICAgIDxnIGRpc3BsYXk9XCJibG9ja1wiIG1hc2s9XCJ1cmwoIyR7aWNvblByZWZpeH1fZm9yd2FyZF9NYXNrLTE1KVwiPlxuICAgICAgICA8cGF0aCBkPVwiTTQ1My42IDM4OC4xYzAgMCAuNyAwIC43IDBjMCAwIC4xIDEuNyAuMSAxLjdjMCAwIDQuNyAwIDQuNyAwYzAgMCAwLTEuNyAwLTEuN2MwIDAgMSAwIDEgMGMwIDAgMC00LjUgMC00LjVjMCAwLTYuNSAwLTYuNSAwYzAgMCAwIDQuNSAwIDQuNVpcIiAvPlxuICAgICAgICA8cGF0aCBkPVwiTTI4MC44IDQyMS41YzAgMC00LjQgNC41LTQuNCA0LjVjMCAwLTUuNS01LjktNS41LTUuOWMwIDAtMjAuMyAyMC42LTIwLjMgMjAuNmMwIDAgNS41IDUuNyA1LjUgNS43YzAgMC02Mi41IDYyLjQtNjIuNSA2Mi40YzAgMCAyMC40IDIwLjQgMjAuNCAyMC40YzAgMCA2Mi40LTYyLjQgNjIuNC02Mi40YzAgMCA1LjggNS43IDUuOCA1LjdjMCAwIDIwLjEtMTkuOSAyMC4xLTE5LjljMCAwLTUuNS02LjItNS41LTYuMmMwIDAgNC44LTQuNiA0LjgtNC42YzAgMC0yMC44LTIwLjMtMjAuOC0yMC4zWlwiIC8+XG4gICAgICAgIDxwYXRoIGQ9XCJNNTAyLjggMTk5LjZjLTEzLjQtMTAtMzAuMS0xNS44LTQ4LjEtMTUuOGMtNDQuNyAwLTgxIDM2LjItODEgODFjMCA0NC43IDM2LjMgODEgODEgODFjNDQuOCAwIDgxLTM2LjMgODEtODFoLTI4LjhjMCAyOC44LTIzLjMgNTIuMi01Mi4yIDUyLjJjLTguMiAwLTE2LTEuOS0yMi45LTUuM2wxMS45LTExLjlsLTIwLjQtMjAuM2wtMTIuOSAxMi44Yy01LTgtNy45LTE3LjQtNy45LTI3LjVjMC0yOC45IDIzLjQtNTIuMiA1Mi4yLTUyLjJjMTAuMSAwIDE5LjQgMi44IDI3LjQgNy43WlwiIGZpbGwtcnVsZT1cImV2ZW5vZGRcIiAvPlxuICAgICAgICA8cGF0aCBkPVwiTTI3Ni40IDI2Mi45YzAgMC0xLTEuMi0xLTEuMmMwIDAtMy42IDQtMy42IDRjMCAwIDEuOSAyLjggMS45IDIuOGMwIDAgLjIgMS4xIC4yIDEuMWMwIDAgNS40IDAgNS40IDBjMCAwIDAtMS4yIDAtMS4yYzAgMCAxLjctMi42IDEuNy0yLjZjMCAwLTMuNS0zLjctMy41LTMuN2MwIDAtMS4xIC44LTEuMSAuOFpcIiAvPlxuICAgICAgPC9nPlxuICAgICAgPHBhdGggc3Ryb2tlPVwiIzAwMFwiIHN0cm9rZS13aWR0aD1cIjMwXCIgZD1cIk0wLTI2OC44YzE0OC40IDAgMjY4LjggMTIwLjQgMjY4LjggMjY4LjhjMCAxNDguNC0xMjAuNCAyNjguOC0yNjguOCAyNjguOGMtMTQ4LjQgMC0yNjguOC0xMjAuNC0yNjguOC0yNjguOGMwLTE0OC40IDEyMC40LTI2OC44IDI2OC44LTI2OC44WlwiIGZpbGw9XCJub25lXCIgZGlzcGxheT1cImJsb2NrXCIgdHJhbnNmb3JtPVwidHJhbnNsYXRlKDQxNy42LDMwMS4zKSBzY2FsZSguOTc3LC45NzcpXCIgLz5cbiAgICA8L2c+XG4gICAgPGcgb3BhY2l0eT1cIjBcIiB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoMCwwKSBzY2FsZSguMSwuMSlcIj5cbiAgICAgIDxnIGRpc3BsYXk9XCJibG9ja1wiIG1hc2s9XCJ1cmwoIyR7aWNvblByZWZpeH1fZm9yd2FyZF9NYXNrLTE2KVwiIHRyYW5zZm9ybT1cInRyYW5zbGF0ZSg3LjMsLTcuMylcIj5cbiAgICAgICAgPHBhdGggZD1cIk0yMjQuMiA0NzguM2MwIDAtMjEwLjYgMjEwLjUtMjEwLjYgMjEwLjVjMCAwIDIwLjQgMjAuNCAyMC40IDIwLjRjMCAwIDIxMC43LTIxMC43IDIxMC43LTIxMC43Yy0xMS43LTExLTUuOS02LTIwLjUtMjAuMlpcIiAvPlxuICAgICAgPC9nPlxuICAgICAgPGcgZGlzcGxheT1cImJsb2NrXCIgbWFzaz1cInVybCgjJHtpY29uUHJlZml4fV9mb3J3YXJkX01hc2stMTcpXCI+XG4gICAgICAgIDxwYXRoIGQ9XCJNMjc1LjQgNDI2LjljMCAwLTE5LjMgMTkuNS0xOS4zIDE5LjVjMCAwLTYyLjUgNjIuNC02Mi41IDYyLjRjMCAwIDIwLjQgMjAuNCAyMC40IDIwLjRjMCAwIDYyLjQtNjIuNCA2Mi40LTYyLjRjMCAwIDE5LjktMTkuNyAxOS45LTE5LjdjMCAwLTIwLjktMjAuMi0yMC45LTIwLjJaXCIgLz5cbiAgICAgICAgPHBhdGggZD1cIk00MTEuNCAyOTEuM2wyMC43IDIwLjdsLjEtMC4xYzYuOCAzLjIgMTQuNSA1LjEgMjIuNSA1LjFjMjguOSAwIDUyLjItMjMuNCA1Mi4yLTUyLjJoMjguOGMwIDQ0LjctMzYuMiA4MS04MSA4MWMtNDQuNyAwLTgxLTM2LjMtODEtODFjMC00NC44IDM2LjMtODEgODEtODFjMTggMCAyMS45IDYuMyAzNS4zIDE2LjJsLTcuOSAyMC4zYy04LTQuOS0xNy4zLTcuNy0yNy40LTcuN2MtMjguOCAwLTUyLjIgMjMuMy01Mi4yIDUyLjJjMCAxMC4xIDIuOSAxOS41IDcuOSAyNy41WlwiIGZpbGwtcnVsZT1cImV2ZW5vZGRcIiAvPlxuICAgICAgPC9nPlxuICAgICAgPHBhdGggc3Ryb2tlPVwiIzAwMFwiIHN0cm9rZS13aWR0aD1cIjMwXCIgZD1cIk0wLTI2NS42YzE0Ni42IDAgMjY1LjYgMTE5IDI2NS42IDI2NS42YzAgMTQ2LjYtMTE5IDI2NS42LTI2NS42IDI2NS42Yy0xNDYuNiAwLTI2NS42LTExOS0yNjUuNi0yNjUuNmMwLTE0Ni42IDExOS0yNjUuNiAyNjUuNi0yNjUuNlpcIiBmaWxsPVwibm9uZVwiIGRpc3BsYXk9XCJibG9ja1wiIHRyYW5zZm9ybT1cInRyYW5zbGF0ZSg0MjAsMjk5LjEpIHNjYWxlKC45NzcsLjk3NylcIiAvPlxuICAgIDwvZz5cbiAgICA8ZyBvcGFjaXR5PVwiMFwiIHRyYW5zZm9ybT1cInRyYW5zbGF0ZSgwLDApIHNjYWxlKC4xLC4xKVwiPlxuICAgICAgPGcgZGlzcGxheT1cImJsb2NrXCIgbWFzaz1cInVybCgjJHtpY29uUHJlZml4fV9mb3J3YXJkX01hc2stMTgpXCIgdHJhbnNmb3JtPVwidHJhbnNsYXRlKDQsLTQpXCI+XG4gICAgICAgIDxwYXRoIGQ9XCJNMjI0LjIgNDc4LjNjMCAwLTIxMC42IDIxMC41LTIxMC42IDIxMC41YzAgMCAyMC40IDIwLjQgMjAuNCAyMC40YzAgMCAyMTAuNy0yMTAuNyAyMTAuNy0yMTAuN2MtMTEuNy0xMS01LjktNi0yMC41LTIwLjJaXCIgLz5cbiAgICAgIDwvZz5cbiAgICAgIDxnIGRpc3BsYXk9XCJibG9ja1wiIG1hc2s9XCJ1cmwoIyR7aWNvblByZWZpeH1fZm9yd2FyZF9NYXNrLTE5KVwiPlxuICAgICAgICA8cGF0aCBkPVwiTTI2NS40IDQzNy4xYzAgMC05LjMgOS4zLTkuMyA5LjNjMCAwLTYyLjUgNjIuNC02Mi41IDYyLjRjMCAwIDIwLjQgMjAuNCAyMC40IDIwLjRjMCAwIDYyLjQtNjIuNCA2Mi40LTYyLjRjMCAwIDkuOC05LjYgOS44LTkuNmMwIDAtMjAuOC0yMC4xLTIwLjgtMjAuMVpcIiAvPlxuICAgICAgICA8cGF0aCBkPVwiTTQwMyAyOTkuM2wyMC45IDIwLjlsOC4zLTguM2M2LjggMy4yIDE0LjUgNS4xIDIyLjUgNS4xYzI4LjkgMCA1Mi4yLTIzLjQgNTIuMi01Mi4yaDI4LjhjMCA0NC43LTM2LjIgODEtODEgODFjLTQ0LjcgMC04MS0zNi4zLTgxLTgxYzAtNDQuOCAzNi4zLTgxIDgxLTgxYzE4IDAgMzQuNiA1LjggNDguMSAxNS44bC0yMC43IDIwLjdjLTgtNC45LTE3LjMtNy43LTI3LjQtNy43Yy0yOC44IDAtNTIuMiAyMy4zLTUyLjIgNTIuMmMwIDEwIDIuOSAxOS4zIDcuOCAyNy4zWlwiIGZpbGwtcnVsZT1cImV2ZW5vZGRcIiAvPlxuICAgICAgPC9nPlxuICAgICAgPHBhdGggc3Ryb2tlPVwiIzAwMFwiIHN0cm9rZS13aWR0aD1cIjMwXCIgZD1cIk0wLTI2My44YzE0NS42IDAgMjYzLjggMTE4LjIgMjYzLjggMjYzLjhjMCAxNDUuNi0xMTguMiAyNjMuOC0yNjMuOCAyNjMuOGMtMTQ1LjYgMC0yNjMuOC0xMTguMi0yNjMuOC0yNjMuOGMwLTE0NS42IDExOC4yLTI2My44IDI2My44LTI2My44WlwiIGZpbGw9XCJub25lXCIgZGlzcGxheT1cImJsb2NrXCIgdHJhbnNmb3JtPVwidHJhbnNsYXRlKDQyMS4yLDI5Ny44KSBzY2FsZSguOTc3LC45NzcpXCIgLz5cbiAgICA8L2c+XG4gICAgPGcgY2xpcC1wYXRoPVwidXJsKCMke2ljb25QcmVmaXh9X2ZvcndhcmRfQ2xpcFBhdGgtMSlcIiBvcGFjaXR5PVwiMFwiIHRyYW5zZm9ybT1cInRyYW5zbGF0ZSgwLDApIHNjYWxlKC4xLC4xKVwiPlxuICAgICAgPGcgZGlzcGxheT1cImJsb2NrXCIgbWFzaz1cInVybCgjJHtpY29uUHJlZml4fV9mb3J3YXJkX01hc2stMjApXCI+XG4gICAgICAgIDxwYXRoIGQ9XCJNMjI0LjIgNDc4LjNjMCAwLTIxMC42IDIxMC41LTIxMC42IDIxMC41YzAgMCAyMC40IDIwLjQgMjAuNCAyMC40YzAgMCAyMTAuNy0yMTAuNyAyMTAuNy0yMTAuN2MtMTEuNy0xMS01LjktNi0yMC41LTIwLjJaXCIgLz5cbiAgICAgIDwvZz5cbiAgICAgIDxwYXRoIHN0cm9rZT1cIiMwMDBcIiBzdHJva2Utd2lkdGg9XCIzMFwiIGQ9XCJNMC0yNjEuN2MxNDQuNCAwIDI2MS43IDExNy4zIDI2MS43IDI2MS43YzAgMTQ0LjQtMTE3LjMgMjYxLjctMjYxLjcgMjYxLjdjLTE0NC40IDAtMjYxLjctMTE3LjMtMjYxLjctMjYxLjdjMC0xNDQuNCAxMTcuMy0yNjEuNyAyNjEuNy0yNjEuN1pcIiBmaWxsPVwibm9uZVwiIGRpc3BsYXk9XCJibG9ja1wiIHRyYW5zZm9ybT1cInRyYW5zbGF0ZSg0MjIuOCwyOTYuNCkgc2NhbGUoLjk3NywuOTc3KVwiIC8+XG4gICAgPC9nPmA7XG4gIH1cbn0pO1xuIiwiaW1wb3J0IFNWR0ljb24gZnJvbSAnLi9pY29uLmpzJztcbmV4cG9ydCBkZWZhdWx0IG5ldyBTVkdJY29uKHtcbiAgbmFtZTogJ2VtYWlsJyxcbiAgcGF0aDogJ00xMiwtMy41NTI3MTM2OGUtMTUgQzguODE3MTIsLTMuNTUyNzEzNjhlLTE1IDUuNzY0OCwxLjI2NDY4IDMuNTE0OCwzLjUxNDggQzEuMjY0OCw1Ljc2NDkyIDMuNTUyNzEzNjhlLTE1LDguODE3MzYgMy41NTI3MTM2OGUtMTUsMTIgQzMuNTUyNzEzNjhlLTE1LDE1LjE4MjY0IDEuMjY0NjgsMTguMjM1MiAzLjUxNDgsMjAuNDg1MiBDNS43NjQ5MiwyMi43MzUyIDguODE3MzYsMjQgMTIsMjQgQzE1LjE4MjY0LDI0IDE4LjIzNTIsMjIuNzM1MzIgMjAuNDg1MiwyMC40ODUyIEMyMi43MzUyLDE4LjIzNTA4IDI0LDE1LjE4MjY0IDI0LDEyIEMyNCw4LjgxNzM2IDIyLjczNTMyLDUuNzY0OCAyMC40ODUyLDMuNTE0OCBDMTguMjM1MDgsMS4yNjQ4IDE1LjE4MjY0LC0zLjU1MjcxMzY4ZS0xNSAxMiwtMy41NTI3MTM2OGUtMTUgWiBNMTcuMjgsNy45MiBMMTIsMTEuODcwNjQgTDYuNzIsNy45MiBMMTcuMjgsNy45MiBaIE0xOCwxNS42NDc3NiBDMTgsMTUuNzc0MzIxNiAxNy45NDQ2ODcyLDE1Ljg5NDMxMiAxNy44NSwxNS45NzY4MjQgQzE3Ljc1NDM3NDQsMTYuMDU5MzI0IDE3LjYyNzgxMjgsMTYuMDk2ODI0IDE3LjUwMzEyOCwxNi4wNzk5NDk2IEw2LjQ3OTkyOCwxNi4wNzk5NDk2IEM2LjM1MjQyOCwxNi4wOTQwMTIyIDYuMjI0OTI4LDE2LjA0OTk0OTYgNi4xMzIxMiwxNS45NjE4MjQgQzYuMDQwMjQ1NiwxNS44NzI3NjI0IDUuOTkxNDk0NCwxNS43NDcxMzY4IDUuOTk5OTMyOCwxNS42MTg2OTYgTDUuOTk5OTMyOCw5LjA0NzczNiBMNS45OTk5MzI4LDguNDQxMTg0IEw3Ljk1MzY3NjgsOS45MDc0NCBMMTEuNjM5ODM2OCwxMi42NzIyNCBDMTEuODM5NTI0LDEyLjg2ODE3ODQgMTIuMTYwMTU2OCwxMi44NjgxNzg0IDEyLjM1OTgzNjgsMTIuNjcyMjQgTDE3Ljg5Mzk5NjgsOC41MTczNiBMMTcuOTg0OTM1Miw4LjQ0OTg2IEwxNy45ODU4NzI2LDguNDUwNzk3NjggQzE3Ljk5MTQ5NzgsOC40ODU0ODQ4OCAxNy45OTUyNDc4LDguNTIxMTEwNDggMTcuOTk3MTIyNiw4LjU1NTc5NzY4IEwxNy45OTcxMjI2LDE1LjYzODY3NzcgTDE4LDE1LjY0Nzc2IFonXG59KTtcbiIsImltcG9ydCB0aHVtYkljb24gZnJvbSAnLi90aHVtYi5qcyc7XG5pbXBvcnQgcmVjZWlwdEljb24gZnJvbSAnLi9yZWNlaXB0LmpzJztcbmltcG9ydCBwYW50aGVvbkljb24gZnJvbSAnLi9wYW50aGVvbi5qcyc7XG5pbXBvcnQgbWljSWNvbiBmcm9tICcuL21pYy5qcyc7XG5pbXBvcnQgZGlyZWN0aW9uc0ljb24gZnJvbSAnLi9kaXJlY3Rpb25zLmpzJztcbmltcG9ydCBjYWxlbmRhckljb24gZnJvbSAnLi9jYWxlbmRhci5qcyc7XG5pbXBvcnQgY2FsbG91dEljb24gZnJvbSAnLi9jYWxsb3V0LmpzJztcbmltcG9ydCBpbmZvSWNvbiBmcm9tICcuL2luZm8uanMnO1xuaW1wb3J0IGJyaWVmY2FzZUljb24gZnJvbSAnLi9icmllZmNhc2UuanMnO1xuaW1wb3J0IGthYm9iSWNvbiBmcm9tICcuL2thYm9iLmpzJztcbmltcG9ydCBwZXJzb25JY29uIGZyb20gJy4vcGVyc29uLmpzJztcbmltcG9ydCBtYWduaWZ5aW5nR2xhc3NJY29uIGZyb20gJy4vbWFnbmlmeWluZ19nbGFzcy5qcyc7XG5pbXBvcnQgb2ZmaWNlSWNvbiBmcm9tICcuL29mZmljZS5qcyc7XG5pbXBvcnQgbGlua0ljb24gZnJvbSAnLi9saW5rLmpzJztcbmltcG9ydCB3aW5kb3dJY29uIGZyb20gJy4vd2luZG93LmpzJztcbmltcG9ydCBwaG9uZUljb24gZnJvbSAnLi9waG9uZS5qcyc7XG5pbXBvcnQgdGFnSWNvbiBmcm9tICcuL3RhZy5qcyc7XG5pbXBvcnQgZG9jdW1lbnRJY29uIGZyb20gJy4vZG9jdW1lbnQuanMnO1xuaW1wb3J0IGNoZXZyb25JY29uIGZyb20gJy4vY2hldnJvbi5qcyc7XG5pbXBvcnQgc3VwcG9ydEljb24gZnJvbSAnLi9zdXBwb3J0LmpzJztcbmltcG9ydCB5ZXh0SWNvbiBmcm9tICcuL3lleHQuanMnO1xuaW1wb3J0IHBpbkljb24gZnJvbSAnLi9waW4uanMnO1xuaW1wb3J0IGdlYXJJY29uIGZyb20gJy4vZ2Vhci5qcyc7XG5pbXBvcnQgbGlnaHRCdWxiSWNvbiBmcm9tICcuL2xpZ2h0X2J1bGIuanMnO1xuaW1wb3J0IHN0YXJJY29uIGZyb20gJy4vc3Rhci5qcyc7XG5pbXBvcnQgY2xvc2UgZnJvbSAnLi9jbG9zZS5qcyc7XG5pbXBvcnQgZWxlbWVudHMgZnJvbSAnLi9lbGVtZW50cyc7XG5pbXBvcnQgeWV4dEFuaW1hdGVkRm9yd2FyZCBmcm9tICcuL3lleHRfYW5pbWF0ZWRfcmV2ZXJzZSc7XG5pbXBvcnQgeWV4dEFuaW1hdGVkUmV2ZXJzZSBmcm9tICcuL3lleHRfYW5pbWF0ZWRfZm9yd2FyZCc7XG5pbXBvcnQgZW1haWwgZnJvbSAnLi9lbWFpbCc7XG5cbmNvbnN0IGljb25zQXJyYXkgPSBbXG4gIHRodW1iSWNvbixcbiAgcmVjZWlwdEljb24sXG4gIHBhbnRoZW9uSWNvbixcbiAgbWljSWNvbixcbiAgZGlyZWN0aW9uc0ljb24sXG4gIGNhbGVuZGFySWNvbixcbiAgY2FsbG91dEljb24sXG4gIGluZm9JY29uLFxuICBicmllZmNhc2VJY29uLFxuICBrYWJvYkljb24sXG4gIHBlcnNvbkljb24sXG4gIG1hZ25pZnlpbmdHbGFzc0ljb24sXG4gIG9mZmljZUljb24sXG4gIGxpbmtJY29uLFxuICB3aW5kb3dJY29uLFxuICBwaG9uZUljb24sXG4gIHRhZ0ljb24sXG4gIGRvY3VtZW50SWNvbixcbiAgY2hldnJvbkljb24sXG4gIHN1cHBvcnRJY29uLFxuICB5ZXh0SWNvbixcbiAgcGluSWNvbixcbiAgZ2Vhckljb24sXG4gIGxpZ2h0QnVsYkljb24sXG4gIGVsZW1lbnRzLFxuICBjbG9zZSxcbiAgeWV4dEFuaW1hdGVkRm9yd2FyZCxcbiAgeWV4dEFuaW1hdGVkUmV2ZXJzZSxcbiAgZW1haWwsXG4gIHN0YXJJY29uXG5dO1xuXG5jb25zdCBJY29ucyA9IHt9O1xuXG5pY29uc0FycmF5LmZvckVhY2goaWNvbiA9PiB7XG4gIEljb25zW2ljb24ubmFtZV0gPSBpY29uLm1hcmt1cCgpO1xufSk7XG5cbkljb25zLmRlZmF1bHQgPSBzdGFySWNvbi5tYXJrdXAoKTtcblxuZXhwb3J0IGRlZmF1bHQgSWNvbnM7XG4iLCIvKiogQG1vZHVsZSBIYW5kbGViYXJzUmVuZGVyZXIgKi9cblxuaW1wb3J0IFJlbmRlcmVyIGZyb20gJy4vcmVuZGVyZXInO1xuaW1wb3J0IEljb25zIGZyb20gJy4uL2ljb25zJztcbmltcG9ydCBIaWdobGlnaHRlZFZhbHVlIGZyb20gJy4uLy4uL2NvcmUvbW9kZWxzL2hpZ2hsaWdodGVkdmFsdWUnO1xuXG4vKipcbiAqIEhhbmRsZWJhcnNSZW5kZXJlciBpcyBhIHdyYXBwZXIgYXJvdW5kIHRoZSBuYXRpdmF0ZSBoYW5kbGViYXJzIHJlbmRlcmVyLlxuICogQGV4dGVuZHMgUmVuZGVyZXJcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSGFuZGxlYmFyc1JlbmRlcmVyIGV4dGVuZHMgUmVuZGVyZXIge1xuICBjb25zdHJ1Y3RvciAodGVtcGxhdGVzID0ge30sIG9wdHMgPSB7fSkge1xuICAgIHN1cGVyKCk7XG5cbiAgICAvKipcbiAgICAgKiBBIGxvY2FsIHJlZmVyZW5jZSB0byB0aGUgaGFuZGxlYmFycyBjb21waWxlclxuICAgICAqIEB0eXBlIHtIYW5kbGViYXJzfVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5faGFuZGxlYmFycyA9IHRlbXBsYXRlcy5faGIgfHwgbnVsbDtcblxuICAgIC8qKlxuICAgICAqIEEgbG9jYWwgcmVmZXJlbmNlIHRvIHRoZSBwcmUtY29tcGlsZWQgaGFuZGxlYmFycyB0ZW1wbGF0ZXNcbiAgICAgKiBAdHlwZSB7SGFuZGxlYmFyc31cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuX3RlbXBsYXRlcyA9IHRlbXBsYXRlcyB8fCB7fTtcbiAgfVxuXG4gIGluaXQgKHRlbXBsYXRlcykge1xuICAgIC8vIEFzc2lnbiB0aGUgaGFuZGxlYmFycyBjb21waWxlciBhbmQgdGVtcGxhdGVzIGJhc2VkIG9uXG4gICAgLy8gaW5mb3JtYXRpb24gcHJvdmlkZWQgZnJvbSBleHRlcm5hbCBkZXAgKGluIGRlZmF1bHQgY2FzZSwgaXQgY29tZXMgZnJvbSBleHRlcm5hbCBzZXJ2ZXIgcmVxdWVzdClcbiAgICB0aGlzLl9oYW5kbGViYXJzID0gdGVtcGxhdGVzLl9oYjtcbiAgICB0aGlzLl90ZW1wbGF0ZXMgPSB0ZW1wbGF0ZXM7XG5cbiAgICAvLyBUT0RPKGJpbGx5KSBPbmNlIHdlIHJlLXdyaXRlIHRlbXBsYXRlcyB1c2luZyB0aGUgbmV3IGhlbHBlcnMgbGlicmFyeVxuICAgIC8vIHdlIHByb2JhYmx5IGRvbid0IG5lZWQgdGhlc2UgY3VzdG9tIGhlbHBlcnMgYW55bW9yZVxuICAgIHRoaXMuX3JlZ2lzdGVyQ3VzdG9tSGVscGVycygpO1xuICB9XG5cbiAgLyoqXG4gICAqIHJlZ2lzdGVySGVscGVyIGlzIGEgcHVibGljIGludGVyZmFjZSBmb3IgZXh0ZXJuYWwgZGVwZW5kZW5jaWVzIHRvXG4gICAqIHJlZ2lzdGVyIHRoZWlyIG93biBjdXN0b20gaGVscGVycyB0byBvdXIgaW50ZXJuYWwgSGFuZGxlYmFycyBDb21waWxlclxuICAgKi9cbiAgcmVnaXN0ZXJIZWxwZXIgKG5hbWUsIGNiKSB7XG4gICAgdGhpcy5faGFuZGxlYmFycy5yZWdpc3RlckhlbHBlcihuYW1lLCBjYik7XG4gIH1cblxuICAvKipcbiAgICogU2FmZVN0cmluZyBpcyBhIHB1YmxpYyBpbnRlcmZhY2UgZm9yIGV4dGVybmFsIGRlcGVuZGVuY2llcyB0b1xuICAgKiBtYXJrIGEgc3RyaW5nIGFzICdzYWZlJy4gSGFuZGxlYmFycyB3aWxsIG5vdCBlc2NhcGUgYSBTYWZlU3RyaW5nXG4gICAqL1xuICBTYWZlU3RyaW5nIChzdHJpbmcpIHtcbiAgICByZXR1cm4gbmV3IHRoaXMuX2hhbmRsZWJhcnMuU2FmZVN0cmluZyhzdHJpbmcpO1xuICB9XG5cbiAgLyoqXG4gICAqIEVzY2FwZUV4cHJlc3Npb24gaXMgYSBwdWJsaWMgaW50ZXJmYWNlIGZvciBleHRlcm5hbCBkZXBlbmRlbmNpZXMgdG9cbiAgICogZXNjYXBlIGEgc3RyaW5nXG4gICAqL1xuICBlc2NhcGVFeHByZXNzaW9uIChzdHJpbmcpIHtcbiAgICByZXR1cm4gdGhpcy5faGFuZGxlYmFycy5lc2NhcGVFeHByZXNzaW9uKHN0cmluZyk7XG4gIH1cblxuICAvKipcbiAgICogY29tcGlsZSBhIGhhbmRsZWJhcnMgdGVtcGxhdGUgc28gdGhhdCBpdCBjYW4gYmUgcmVuZGVyZWQsXG4gICAqIHVzaW5nIHRoZSB7SGFuZGxlYmFyc30gY29tcGlsZXJcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRlbXBsYXRlIFRoZSB0ZW1wbGF0ZSBzdHJpbmcgdG8gY29tcGlsZVxuICAgKi9cbiAgY29tcGlsZSAodGVtcGxhdGUpIHtcbiAgICBpZiAodHlwZW9mIHRlbXBsYXRlICE9PSAnc3RyaW5nJykge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5faGFuZGxlYmFycy5jb21waWxlKHRlbXBsYXRlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiByZW5kZXIgd2lsbCByZW5kZXIgYSB0ZW1wbGF0ZSB3aXRoIGRhdGFcbiAgICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBQcm92aWRlIGVpdGhlciBhIHRlbXBsYXRlTmFtZSBvciBhIHByZS1jb21waWxlZCB0ZW1wbGF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gZGF0YSBUaGUgZGF0YSB0byBwcm92aWRlIHRvIHRoZSB0ZW1wbGF0ZVxuICAgKi9cbiAgcmVuZGVyIChjb25maWcsIGRhdGEpIHtcbiAgICAvLyBJZiBhIGN1c3RvbSB0ZW1wbGF0ZSBpcyBwcm92aWRlZCwgdXNlIGl0LFxuICAgIC8vIG90aGVyd2lzZSBmYWxsIGJhY2sgdG8gdGhlIHRlbXBsYXRlIG5hbWVcbiAgICAvLyBUT0RPKGJpbGx5KSBUaGlzIGludGVyZmFjZSBzaG91bGQgcHJvYmFibHkgYmUgbGVzcyB1Z2x5XG4gICAgaWYgKGNvbmZpZy50ZW1wbGF0ZSAhPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGNvbmZpZy50ZW1wbGF0ZShkYXRhKTtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgcmV0dXJuIHRoaXMuX3RlbXBsYXRlc1tjb25maWcudGVtcGxhdGVOYW1lXShkYXRhKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NhbiBub3QgZmluZC9yZW5kZXIgdGVtcGxhdGU6ICcgKyBjb25maWcudGVtcGxhdGVOYW1lLCBlKTtcbiAgICB9XG4gIH1cblxuICBfcmVnaXN0ZXJDdXN0b21IZWxwZXJzICgpIHtcbiAgICB0aGlzLnJlZ2lzdGVySGVscGVyKCdpZmVxJywgZnVuY3Rpb24gKGFyZzEsIGFyZzIsIG9wdGlvbnMpIHtcbiAgICAgIHJldHVybiAoYXJnMSA9PT0gYXJnMikgPyBvcHRpb25zLmZuKHRoaXMpIDogb3B0aW9ucy5pbnZlcnNlKHRoaXMpO1xuICAgIH0pO1xuXG4gICAgdGhpcy5yZWdpc3RlckhlbHBlcignaWZub3RlcScsIGZ1bmN0aW9uIChhcmcxLCBhcmcyLCBvcHRpb25zKSB7XG4gICAgICByZXR1cm4gKGFyZzEgIT09IGFyZzIpID8gb3B0aW9ucy5mbih0aGlzKSA6IG9wdGlvbnMuaW52ZXJzZSh0aGlzKTtcbiAgICB9KTtcblxuICAgIHRoaXMucmVnaXN0ZXJIZWxwZXIoJ2Zvcm1hdFBob25lTnVtYmVyJywgZnVuY3Rpb24gKHBob25lTnVtYmVyU3RyaW5nKSB7XG4gICAgICB2YXIgY2xlYW5lZCA9ICgnJyArIHBob25lTnVtYmVyU3RyaW5nKS5yZXBsYWNlKC9cXEQvZywgJycpO1xuICAgICAgdmFyIG1hdGNoID0gY2xlYW5lZC5tYXRjaCgvXigxfCk/KFxcZHszfSkoXFxkezN9KShcXGR7NH0pJC8pO1xuICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgIHZhciBpbnRsQ29kZSA9IChtYXRjaFsxXSA/ICcrMSAnIDogJycpO1xuICAgICAgICByZXR1cm4gW2ludGxDb2RlLCAnKCcsIG1hdGNoWzJdLCAnKSAnLCBtYXRjaFszXSwgJy0nLCBtYXRjaFs0XV0uam9pbignJyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9KTtcblxuICAgIHRoaXMucmVnaXN0ZXJIZWxwZXIoJ2Fzc2lnbicsIGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSwgb3B0aW9ucykge1xuICAgICAgbGV0IGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICBvcHRpb25zID0gYXJnc1thcmdzLmxlbmd0aCAtIDFdO1xuXG4gICAgICBpZiAoIW9wdGlvbnMuZGF0YS5yb290KSB7XG4gICAgICAgIG9wdGlvbnMuZGF0YS5yb290ID0ge307XG4gICAgICB9XG5cbiAgICAgIGxldCB2ID0gJyc7XG4gICAgICBmb3IgKGxldCBpID0gMTsgaSA8IGFyZ3MubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgICAgIHYgPSB2ICsgYXJnc1tpXTtcbiAgICAgIH1cblxuICAgICAgb3B0aW9ucy5kYXRhLnJvb3RbbmFtZV0gPSB2O1xuICAgIH0pO1xuXG4gICAgdGhpcy5yZWdpc3RlckhlbHBlcignanNvbicsIGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSwgb3B0aW9ucykge1xuICAgICAgcmV0dXJuIG5hbWUgPT09IHVuZGVmaW5lZFxuICAgICAgICA/ICcnXG4gICAgICAgIDogSlNPTi5zdHJpbmdpZnkobmFtZSk7XG4gICAgfSk7XG5cbiAgICB0aGlzLnJlZ2lzdGVySGVscGVyKCdwbHVyYWwnLCBmdW5jdGlvbiAobnVtYmVyLCBzaW5ndWxhclRleHQsIHBsdXJhbFRleHQpIHtcbiAgICAgIHJldHVybiBudW1iZXIgPT09IDFcbiAgICAgICAgPyBzaW5ndWxhclRleHRcbiAgICAgICAgOiBwbHVyYWxUZXh0O1xuICAgIH0pO1xuXG4gICAgbGV0IHNlbGYgPSB0aGlzO1xuICAgIHNlbGYucmVnaXN0ZXJIZWxwZXIoJ2ljb24nLCBmdW5jdGlvbiAobmFtZSwgY29tcGxleENvbnRlbnRzUGFyYW1zLCBvcHRpb25zKSB7XG4gICAgICBsZXQgaWNvbiA9IEljb25zLmRlZmF1bHQ7XG4gICAgICBpZiAoIUljb25zW25hbWVdKSB7XG4gICAgICAgIHJldHVybiBzZWxmLlNhZmVTdHJpbmcoaWNvbik7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIEljb25zW25hbWVdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGljb24gPSBJY29uc1tuYW1lXShjb21wbGV4Q29udGVudHNQYXJhbXMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWNvbiA9IEljb25zW25hbWVdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHNlbGYuU2FmZVN0cmluZyhpY29uKTtcbiAgICB9KTtcblxuICAgIHNlbGYucmVnaXN0ZXJIZWxwZXIoJ2hpZ2hsaWdodFZhbHVlJywgZnVuY3Rpb24gKHZhbHVlLCBnZXRJbnZlcnRlZCkge1xuICAgICAgY29uc3QgZXNjYXBlZElucHV0ID0gc2VsZi5lc2NhcGVFeHByZXNzaW9uKHZhbHVlLnZhbHVlIHx8IHZhbHVlLnNob3J0VmFsdWUpO1xuXG4gICAgICBjb25zdCBoaWdobGlnaHRlZFZhbCA9IG5ldyBIaWdobGlnaHRlZFZhbHVlKHtcbiAgICAgICAgdmFsdWU6IGVzY2FwZWRJbnB1dCxcbiAgICAgICAgbWF0Y2hlZFN1YnN0cmluZ3M6IHZhbHVlLm1hdGNoZWRTdWJzdHJpbmdzXG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIGdldEludmVydGVkID8gc2VsZi5TYWZlU3RyaW5nKGhpZ2hsaWdodGVkVmFsLmdldEludmVydGVkKCkpXG4gICAgICAgIDogc2VsZi5TYWZlU3RyaW5nKGhpZ2hsaWdodGVkVmFsLmdldCgpKTtcbiAgICB9KTtcbiAgfVxufVxuIiwiLyoqIEBtb2R1bGUgKi9cblxuaW1wb3J0IFJlbmRlcmVyIGZyb20gJy4vcmVuZGVyZXInO1xuaW1wb3J0IEhhbmRsZWJhcnNSZW5kZXJlciBmcm9tICcuL2hhbmRsZWJhcnNyZW5kZXJlcic7XG5cbi8vIEluIHRoZSBmdXR1cmUsIHRoaXMgd2lsbCBjb250YWluIGFsbCBkaWZmZXJlbnQgdHlwZXMgb2YgcmVuZGVyZXJzXG4vLyBFLmcuIE11c3RhY2hlLCBTT1ksIEhhbmRsZUJhcnMsIFJlYWN0LCBldGMuXG5leHBvcnQgY29uc3QgUmVuZGVyZXJzID0ge1xuICBTT1k6IFJlbmRlcmVyLFxuICBIYW5kbGViYXJzOiBIYW5kbGViYXJzUmVuZGVyZXJcbn07XG4iLCIvKiogQG1vZHVsZSAqL1xuXG4vKiogVGhlIGN1cnJlbnQgbGliIHZlcnNpb24sIHJlcG9ydGVkIHdpdGggZXJyb3JzIGFuZCBhbmFseXRpY3MgKi9cbmV4cG9ydCBjb25zdCBMSUJfVkVSU0lPTiA9ICd2MS4zLjEnO1xuXG4vKiogVGhlIGlkZW50aWZpZXIgb2YgdGhlIHByb2R1Y3Rpb24gZW52aXJvbm1lbnQgKi9cbmV4cG9ydCBjb25zdCBQUk9EVUNUSU9OID0gJ3Byb2R1Y3Rpb24nO1xuXG4vKiogVGhlIGlkZW50aWZpZXIgb2YgdGhlIHNhbmRib3ggZW52aXJvbm1lbnQgKi9cbmV4cG9ydCBjb25zdCBTQU5EQk9YID0gJ3NhbmRib3gnO1xuXG4vKiogVGhlIGRlZmF1bHQgdXJsIGZvciBjb21waWxlZCBjb21wb25lbnQgdGVtcGxhdGVzICovXG5leHBvcnQgY29uc3QgQ09NUElMRURfVEVNUExBVEVTX1VSTCA9IGBodHRwczovL2Fzc2V0cy5zaXRlc2Nkbi5uZXQvYW5zd2Vycy8ke0xJQl9WRVJTSU9OfS9hbnN3ZXJzdGVtcGxhdGVzLmNvbXBpbGVkLm1pbi5qc2A7XG4iLCIvKiogQG1vZHVsZSBEZWZhdWx0VGVtcGxhdGVzTG9hZGVyICovXG5cbmltcG9ydCBET00gZnJvbSAnLi4vZG9tL2RvbSc7XG5pbXBvcnQgeyBDT01QSUxFRF9URU1QTEFURVNfVVJMIH0gZnJvbSAnLi4vLi4vY29yZS9jb25zdGFudHMnO1xuXG4vKipcbiAqIERlZmF1bHRUZW1wbGF0ZXNMb2FkZXIgZXhwb3NlcyBhbiBpbnRlcmZhY2UgZm9yIGxvYWRpbmcgdGhlIGRlZmF1bHQgc2V0IG9mIGNvbXBpbGVkIHRlbXBsYXRlc1xuICogYXN5bmNocm9ub3VzbHkgZnJvbSB0aGUgc2VydmVyLiBOb3RlIHRoYXQgdGhpcyBjbGFzcyBjYW5ub3QgYmUgcmVwdXJwb3NlZCB0byBmZXRjaCBjdXN0b21cbiAqIHRlbXBsYXRlcyBob3N0ZWQgYnkgYSBjbGllbnQuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIERlZmF1bHRUZW1wbGF0ZXNMb2FkZXIge1xuICBjb25zdHJ1Y3RvciAob25Mb2FkZWQpIHtcbiAgICBpZiAoIURlZmF1bHRUZW1wbGF0ZXNMb2FkZXIuc2V0SW5zdGFuY2UodGhpcykpIHtcbiAgICAgIHJldHVybiBEZWZhdWx0VGVtcGxhdGVzTG9hZGVyLmdldEluc3RhbmNlKCk7XG4gICAgfVxuICAgIHRoaXMuX3RlbXBsYXRlcyA9IHt9O1xuICAgIHRoaXMuX29uTG9hZGVkID0gb25Mb2FkZWQgfHwgZnVuY3Rpb24gKCkge307XG4gICAgdGhpcy5fZmV0Y2hUZW1wbGF0ZXMoKTtcbiAgfVxuXG4gIHN0YXRpYyBzZXRJbnN0YW5jZSAoaW5zdGFuY2UpIHtcbiAgICBpZiAoIXRoaXMuaW5zdGFuY2UpIHtcbiAgICAgIHRoaXMuaW5zdGFuY2UgPSBpbnN0YW5jZTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBzdGF0aWMgZ2V0SW5zdGFuY2UgKCkge1xuICAgIHJldHVybiB0aGlzLmluc3RhbmNlO1xuICB9XG5cbiAgX2ZldGNoVGVtcGxhdGVzICgpIHtcbiAgICAvLyBJZiB0ZW1wbGF0ZSBoYXZlIGFscmVhZHkgYmVlbiBsb2FkZWQsIGRvIG5vdGhpbmdcbiAgICBsZXQgbm9kZSA9IERPTS5xdWVyeSgnI3lleHQtYW5zd2Vycy10ZW1wbGF0ZXMnKTtcbiAgICBpZiAobm9kZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIEluamVjdCBhIHNjcmlwdCB0byBmZXRjaCB0aGUgY29tcGlsZWQgdGVtcGxhdGVzLFxuICAgIC8vIHdyYXBwaW5nIGl0IGEgUHJvbWlzZSBmb3IgY2xlYW5saW5lc3NcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgbGV0IHNjcmlwdCA9IERPTS5jcmVhdGVFbCgnc2NyaXB0Jywge1xuICAgICAgICBpZDogJ3lleHQtYW5zd2Vycy10ZW1wbGF0ZXMnLFxuICAgICAgICBvbmxvYWQ6IHJlc29sdmUsXG4gICAgICAgIG9uZXJyb3I6IHJlamVjdCxcbiAgICAgICAgYXN5bmM6IHRydWUsXG4gICAgICAgIHNyYzogQ09NUElMRURfVEVNUExBVEVTX1VSTFxuICAgICAgfSk7XG4gICAgICBET00uYXBwZW5kKCdib2R5Jywgc2NyaXB0KTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiByZWdpc3RlciB0aGUgdGVtcGxhdGVzIGludGVybmFsbHkgc28gdGhhdCB0aGV5IGNhbiBiZSBsYXRlciBjb25zdW1lZFxuICAgKiAoZS5nLiBieSBjb21wb25lbnRzIGFuZCByZW5kZXJlcnMpIHdpdGggY29udmllbmllbmNlLlxuICAgKlxuICAgKiBgZmV0Y2hUZW1wbGF0ZXNgIHdpbGwgYXV0b21hdGljYWxseSBjYWxsIHRoaXMsIHByb3ZpZGluZyB0aGUgY29tcGlsZWQgdGVtcGxhdGVzIGZyb20gdGhlIHNlcnZlci5cbiAgICovXG4gIHJlZ2lzdGVyICh0ZW1wbGF0ZXMpIHtcbiAgICB0aGlzLl90ZW1wbGF0ZXMgPSB0ZW1wbGF0ZXM7XG5cbiAgICAvLyBOb3RpZnkgb3VyIGNvbnN1bWVycyB0aGF0IHRoZSB0ZW1wbGF0ZXMgYXJlIGhlcmUgOilcbiAgICB0aGlzLl9vbkxvYWRlZCh0aGlzLl90ZW1wbGF0ZXMpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgZ2V0ICh0ZW1wbGF0ZU5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5fdGVtcGxhdGVzW3RlbXBsYXRlTmFtZV07XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiBUaGUgaW50ZXJuYWwgdGVtcGxhdGUgY29sbGVjdGlvblxuICAgKi9cbiAgZ2V0VGVtcGxhdGVzICgpIHtcbiAgICByZXR1cm4gdGhpcy5fdGVtcGxhdGVzO1xuICB9XG59XG4iLCIvKiogQG1vZHVsZSAqL1xuXG5leHBvcnQgeyBkZWZhdWx0IGFzIERPTSB9IGZyb20gJy4vZG9tL2RvbSc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIFNlYXJjaFBhcmFtcyB9IGZyb20gJy4vZG9tL3NlYXJjaHBhcmFtcyc7XG5cbmV4cG9ydCB7IFJlbmRlcmVycyB9IGZyb20gJy4vcmVuZGVyaW5nL2NvbnN0JztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgRGVmYXVsdFRlbXBsYXRlc0xvYWRlciB9IGZyb20gJy4vcmVuZGVyaW5nL2RlZmF1bHR0ZW1wbGF0ZXNsb2FkZXInO1xuIiwiLyoqIEBtb2R1bGUgRXZlbnRFbWl0dGVyICovXG5cbi8qKlxuICogRXZlbnRFbWl0dGVyIGlzIGEgYmFzZSBjbGFzcyBmb3IgYW55IG9iamVjdCB0aGF0IHdhbnRzIHRvIGV4cG9zZVxuICogYSBwdWIvc3ViIGludGVyZmFjZSwgZm9yIGVtaXR0aW5nIG1lc3NhZ2VzIGFuZCBwcm92aWRpbmcgbGlzdGVuZXJzLlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBFdmVudEVtaXR0ZXIge1xuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgLyoqXG4gICAgICogVGhlIHN1YnNjcmliZXJzIG9mIG1lc3NhZ2VzXG4gICAgICogQHR5cGUge29iamVjdFtdfVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5fbGlzdGVuZXJzID0ge307XG4gIH1cblxuICAvKipcbiAgICogb24gaXMgdGhlIHB1YmxpYyBpbnRlcmZhY2UgZm9yIHN1YnNjcmliaW5nIGV2ZW50cyB0aGF0IGFyZSBlbWl0dGVkLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZXZ0IHRoZSBldmVudCBuYW1lIHRvIGxpc3RlbiB0b1xuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYiBUaGUgY2FsbGJhY2sgdG8gaW52b2tlIHdoZW4gdGhlIHtldnR9IGlzIGVtaXR0ZWRcbiAgICogQHBhcmFtIHtib29sZWFufSBvbmNlIE9wdGlvbmFsIHZhbHVlIHdoaWNoIHdpbGwgb25seSBoYW5kbGUgdGhlIG1lc3NhZ2Ugb25jZVxuICAgKi9cbiAgb24gKGV2dCwgY2IsIG9uY2UpIHtcbiAgICBpZiAodHlwZW9mIGNiICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NhbGxiYWNrIGhhbmRsZXIgc2hvdWxkIGJlIG9mIHR5cGUge2Z1bmN0aW9ufScpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9saXN0ZW5lcnNbZXZ0XSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLl9saXN0ZW5lcnNbZXZ0XSA9IFtdO1xuICAgIH1cblxuICAgIHRoaXMuX2xpc3RlbmVyc1tldnRdLnB1c2goe1xuICAgICAgZXZlbnQ6IGV2dCxcbiAgICAgIGNiOiBjYixcbiAgICAgIG9uY2U6IG9uY2UgfHwgZmFsc2VcbiAgICB9KTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIG9uY2UgaXMgdGhlIHB1YmxpYyBpbnRlcmZhY2UgZm9yIHN1YnNjcmliaW5nIGV2ZW50cyB0aGF0IGFyZSBlbWl0dGVkLlxuICAgKiBUaGUgaGFuZGxlciB3aWxsIG9ubHkgYmUgdHJpZ2dlcmVkIG9uY2UuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBldnQgdGhlIGV2ZW50IG5hbWUgdG8gbGlzdGVuIHRvXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNiIFRoZSBjYWxsYmFjayB0byBpbnZva2Ugd2hlbiB0aGUge2V2dH0gaXMgZW1pdHRlZFxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IG9uY2UgT3B0aW9uYWwgdmFsdWUgd2hpY2ggd2lsbCBvbmx5IGhhbmRsZSB0aGUgbWVzc2FnZSBvbmNlXG4gICAqL1xuICBvbmNlIChldnQsIGNiKSB7XG4gICAgcmV0dXJuIHRoaXMub24oZXZ0LCBjYiwgdHJ1ZSk7XG4gIH1cblxuICAvKipcbiAgICogb2ZmIGlzIHRoZSBwdWJsaWMgaW50ZXJmYWNlIGZvciB1bnN1YnNjcmliaW5nIGZyb20gYW4gZXZlbnRcbiAgICogQHBhcmFtIHtzdHJpbmd9IGV2dCB0aGUgZXZlbnQgbmFtZSB0byB1bnN1YnNjcmliZSBmcm9tXG4gICAqL1xuICBvZmYgKGV2dCkge1xuICAgIGRlbGV0ZSB0aGlzLl9saXN0ZW5lcnNbZXZ0XTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBlbWl0IGlzIHRoZSBwdWJsaWMgaW50ZXJmYWNlIGZvciBicm9hZGNhc3RpbmcgbWVzc2FnZXMvZXZlbnRzXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBldnQgdGhlIGV2ZW50IG5hbWUgdG8gcHVibGlzaCBmcm9tXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhIHRoZSBkYXRhIHRvIHNlbmQgYWxvbmcgdG8gdGhlIHN1YnNjcmliZXJzXG4gICAqL1xuICBlbWl0IChldnQsIGRhdGEpIHtcbiAgICBsZXQgbGlzdGVuZXJzID0gdGhpcy5fbGlzdGVuZXJzW2V2dF07XG4gICAgaWYgKGxpc3RlbmVycyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gSW52b2tlIGVhY2ggb2YgYWxsIHRoZSBsaXN0ZW5lciBoYW5kbGVycyBhbmQgcmVtb3ZlIHRoZSBvbmVzIHRoYXQgc2hvdWxkIGZpcmUgb25seSBvbmNlLlxuICAgIGxldCBrZWVwID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaXN0ZW5lcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGxpc3RlbmVyc1tpXS5jYihkYXRhKTtcbiAgICAgIGlmIChsaXN0ZW5lcnNbaV0ub25jZSA9PT0gdHJ1ZSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgLy8gSW5zdGVhZCBvZiBoYXZpbmcgYSAnZGlydHknIGFycmF5IHdpdGggZGVsZXRlZCBvciAndW5kZWZpbmVkJyBlbnRyaWVzLFxuICAgICAgLy8gd2UganVzdCBjcmVhdGUgYSBicmFuZCBuZXcgYXJyYXkgd2l0aG91dCB0aGUgbGlzdGVuZXJzIHRoYXQgd2VyZSByZW1vdmVkXG4gICAgICBrZWVwLnB1c2gobGlzdGVuZXJzW2ldKTtcbiAgICB9XG5cbiAgICAvLyBVcGRhdGUgb3VyIG9sZCBsaXN0IG9mIGxpc3RlbmVycyB0byB0aGUgbmV3bHkgY3JlYXRlZCBhcnJheVxuICAgIHRoaXMuX2xpc3RlbmVyc1tldnRdID0ga2VlcDtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxufVxuIiwiLyoqIEBtb2R1bGUgU3RhdGUgKi9cblxuaW1wb3J0IEV2ZW50RW1pdHRlciBmcm9tICcuLi8uLi9jb3JlL2V2ZW50ZW1pdHRlci9ldmVudGVtaXR0ZXInO1xuXG4vKipcbiAqIFN0YXRlIGNvbnRhaW5zIHRoZSBkYXRhIGZvciB0aGUgY29tcG9uZW50XG4gKiBhbmQgZXhwb3NlcyBhbiB7RXZlbnRFbWl0dGVyfSBpbnRlcmZhY2Ugc28gdGhhdCBleHRlcm5hbFxuICogZGVwZW5kZW5jaWVzIGNhbiBsaXN0ZW4vaG9vayBzdWJzY3JpYmUgdG8gbWVzc2FnZXMvdXBkYXRlcy5cbiAqIEBleHRlbmRzIEV2ZW50RW1pdHRlclxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTdGF0ZSBleHRlbmRzIEV2ZW50RW1pdHRlciB7XG4gIGNvbnN0cnVjdG9yIChkYXRhKSB7XG4gICAgc3VwZXIoKTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBpbml0aWFsIHN0YXRlIG9mIHRoZSBjb21wb25lbnRcbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5fc3RhdGUgPSBkYXRhIHx8IHt9O1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCB0aGUgaW5pdGlhbCBzdGF0ZSBvZiB0aGUgY29tcG9uZW50LlxuICAgKiBOT1RFKGJpbGx5KTogRG9lcyBub3QgZmlyZSBhbiB1cGRhdGUgbWVzc2FnZVxuICAgKi9cbiAgaW5pdCAocHJvcCwgb3B0VmFsKSB7XG4gICAgdGhpcy5fc2V0KHByb3AsIG9wdFZhbCk7XG4gIH1cblxuICAvKipcbiAgICogc2V0dGVyIGZvciB0aGUgc3RhdGVcbiAgICogQHBhcmFtIHByb3Age3N0cmluZ3xPYmplY3R9IFRoZSBwcm9wZXJ0eSB0byBzZXRcbiAgICogQHBhcmFtIG9wdFZhbCBPcHRpb25hbCwgaWYgcHJvcCBpcyBhIHtzdHJpbmd9LCBpdCB3aWxsIGFzc2lnbiB0aGUgdmFsdWUgdG8gdGhhdCBwcm9wZXJ0eVxuICAgKi9cbiAgc2V0IChwcm9wLCBvcHRWYWwpIHtcbiAgICB0aGlzLl9zZXQocHJvcCwgb3B0VmFsKTtcbiAgICB0aGlzLmVtaXQoJ3VwZGF0ZScpO1xuICB9XG5cbiAgLyoqXG4gICAqIHNldHRlciBmb3IgdGhlIHN0YXRlIGVuYWJsZXMgeW91IHRvIHVwZGF0ZSBhIHNpbmdsZSBwcm9wZXJ0eSwgb3IgY29tcGxldGUgc3RhdGVcbiAgICogZGVwZW5kaW5nIG9uIHRoZSBhcmd1bWVudHMgcHJvdmlkZWQuXG4gICAqIEBwYXJhbSBwcm9wIHtzdHJpbmd8T2JqZWN0fSBUaGUgcHJvcGVydHkgdG8gc2V0XG4gICAqIEBwYXJhbSBvcHRWYWwgSWYgcHJvcCBpcyBhIHtzdHJpbmd9LCBwcm92aWRlIGl0cyB2YWx1ZVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3NldCAocHJvcCwgb3B0VmFsKSB7XG4gICAgaWYgKG9wdFZhbCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLl9zdGF0ZSA9IHByb3A7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX3N0YXRlW3Byb3BdID0gb3B0VmFsO1xuICAgIH1cbiAgfVxuXG4gIHVwZGF0ZSAoZGF0YSkge1xuICAgIHRoaXMuX3N0YXRlID0gZGF0YTtcbiAgICB0aGlzLmVtaXQoJ3VwZGF0ZScpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHJpZXZlIGEgcHJvcGVydGllcyB2YWx1ZSBmcm9tIHRoZSBzdGF0ZVxuICAgKiBJZiBubyBwcm9wZXJ0eSBwcm92aWRlZCwgcmV0dXJuIHRoZSBmdWxsIHN0YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRQcm9wIG9wdGlvbmFsIHByb3BlcnR5IHRvIHJldHJpZXZlXG4gICAqL1xuICBnZXQgKG9wdFByb3ApIHtcbiAgICBpZiAob3B0UHJvcCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gdGhpcy5fc3RhdGU7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9zdGF0ZVtvcHRQcm9wXTtcbiAgfVxuXG4gIGhhcyAocHJvcCkge1xuICAgIHJldHVybiB0aGlzLl9zdGF0ZVtwcm9wXSAhPT0gdW5kZWZpbmVkO1xuICB9XG5cbiAgYXNKU09OICgpIHtcbiAgICByZXR1cm4gdGhpcy5fc3RhdGU7XG4gIH1cbn1cbiIsInZhciBzdXBwb3J0ID0ge1xuICBzZWFyY2hQYXJhbXM6ICdVUkxTZWFyY2hQYXJhbXMnIGluIHNlbGYsXG4gIGl0ZXJhYmxlOiAnU3ltYm9sJyBpbiBzZWxmICYmICdpdGVyYXRvcicgaW4gU3ltYm9sLFxuICBibG9iOlxuICAgICdGaWxlUmVhZGVyJyBpbiBzZWxmICYmXG4gICAgJ0Jsb2InIGluIHNlbGYgJiZcbiAgICAoZnVuY3Rpb24oKSB7XG4gICAgICB0cnkge1xuICAgICAgICBuZXcgQmxvYigpXG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuICAgIH0pKCksXG4gIGZvcm1EYXRhOiAnRm9ybURhdGEnIGluIHNlbGYsXG4gIGFycmF5QnVmZmVyOiAnQXJyYXlCdWZmZXInIGluIHNlbGZcbn1cblxuZnVuY3Rpb24gaXNEYXRhVmlldyhvYmopIHtcbiAgcmV0dXJuIG9iaiAmJiBEYXRhVmlldy5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihvYmopXG59XG5cbmlmIChzdXBwb3J0LmFycmF5QnVmZmVyKSB7XG4gIHZhciB2aWV3Q2xhc3NlcyA9IFtcbiAgICAnW29iamVjdCBJbnQ4QXJyYXldJyxcbiAgICAnW29iamVjdCBVaW50OEFycmF5XScsXG4gICAgJ1tvYmplY3QgVWludDhDbGFtcGVkQXJyYXldJyxcbiAgICAnW29iamVjdCBJbnQxNkFycmF5XScsXG4gICAgJ1tvYmplY3QgVWludDE2QXJyYXldJyxcbiAgICAnW29iamVjdCBJbnQzMkFycmF5XScsXG4gICAgJ1tvYmplY3QgVWludDMyQXJyYXldJyxcbiAgICAnW29iamVjdCBGbG9hdDMyQXJyYXldJyxcbiAgICAnW29iamVjdCBGbG9hdDY0QXJyYXldJ1xuICBdXG5cbiAgdmFyIGlzQXJyYXlCdWZmZXJWaWV3ID1cbiAgICBBcnJheUJ1ZmZlci5pc1ZpZXcgfHxcbiAgICBmdW5jdGlvbihvYmopIHtcbiAgICAgIHJldHVybiBvYmogJiYgdmlld0NsYXNzZXMuaW5kZXhPZihPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqKSkgPiAtMVxuICAgIH1cbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplTmFtZShuYW1lKSB7XG4gIGlmICh0eXBlb2YgbmFtZSAhPT0gJ3N0cmluZycpIHtcbiAgICBuYW1lID0gU3RyaW5nKG5hbWUpXG4gIH1cbiAgaWYgKC9bXmEtejAtOVxcLSMkJSYnKisuXl9gfH5dL2kudGVzdChuYW1lKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgY2hhcmFjdGVyIGluIGhlYWRlciBmaWVsZCBuYW1lJylcbiAgfVxuICByZXR1cm4gbmFtZS50b0xvd2VyQ2FzZSgpXG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZVZhbHVlKHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnKSB7XG4gICAgdmFsdWUgPSBTdHJpbmcodmFsdWUpXG4gIH1cbiAgcmV0dXJuIHZhbHVlXG59XG5cbi8vIEJ1aWxkIGEgZGVzdHJ1Y3RpdmUgaXRlcmF0b3IgZm9yIHRoZSB2YWx1ZSBsaXN0XG5mdW5jdGlvbiBpdGVyYXRvckZvcihpdGVtcykge1xuICB2YXIgaXRlcmF0b3IgPSB7XG4gICAgbmV4dDogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgdmFsdWUgPSBpdGVtcy5zaGlmdCgpXG4gICAgICByZXR1cm4ge2RvbmU6IHZhbHVlID09PSB1bmRlZmluZWQsIHZhbHVlOiB2YWx1ZX1cbiAgICB9XG4gIH1cblxuICBpZiAoc3VwcG9ydC5pdGVyYWJsZSkge1xuICAgIGl0ZXJhdG9yW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBpdGVyYXRvclxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBpdGVyYXRvclxufVxuXG5leHBvcnQgZnVuY3Rpb24gSGVhZGVycyhoZWFkZXJzKSB7XG4gIHRoaXMubWFwID0ge31cblxuICBpZiAoaGVhZGVycyBpbnN0YW5jZW9mIEhlYWRlcnMpIHtcbiAgICBoZWFkZXJzLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIG5hbWUpIHtcbiAgICAgIHRoaXMuYXBwZW5kKG5hbWUsIHZhbHVlKVxuICAgIH0sIHRoaXMpXG4gIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShoZWFkZXJzKSkge1xuICAgIGhlYWRlcnMuZm9yRWFjaChmdW5jdGlvbihoZWFkZXIpIHtcbiAgICAgIHRoaXMuYXBwZW5kKGhlYWRlclswXSwgaGVhZGVyWzFdKVxuICAgIH0sIHRoaXMpXG4gIH0gZWxzZSBpZiAoaGVhZGVycykge1xuICAgIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGhlYWRlcnMpLmZvckVhY2goZnVuY3Rpb24obmFtZSkge1xuICAgICAgdGhpcy5hcHBlbmQobmFtZSwgaGVhZGVyc1tuYW1lXSlcbiAgICB9LCB0aGlzKVxuICB9XG59XG5cbkhlYWRlcnMucHJvdG90eXBlLmFwcGVuZCA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIG5hbWUgPSBub3JtYWxpemVOYW1lKG5hbWUpXG4gIHZhbHVlID0gbm9ybWFsaXplVmFsdWUodmFsdWUpXG4gIHZhciBvbGRWYWx1ZSA9IHRoaXMubWFwW25hbWVdXG4gIHRoaXMubWFwW25hbWVdID0gb2xkVmFsdWUgPyBvbGRWYWx1ZSArICcsICcgKyB2YWx1ZSA6IHZhbHVlXG59XG5cbkhlYWRlcnMucHJvdG90eXBlWydkZWxldGUnXSA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgZGVsZXRlIHRoaXMubWFwW25vcm1hbGl6ZU5hbWUobmFtZSldXG59XG5cbkhlYWRlcnMucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgbmFtZSA9IG5vcm1hbGl6ZU5hbWUobmFtZSlcbiAgcmV0dXJuIHRoaXMuaGFzKG5hbWUpID8gdGhpcy5tYXBbbmFtZV0gOiBudWxsXG59XG5cbkhlYWRlcnMucHJvdG90eXBlLmhhcyA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgcmV0dXJuIHRoaXMubWFwLmhhc093blByb3BlcnR5KG5vcm1hbGl6ZU5hbWUobmFtZSkpXG59XG5cbkhlYWRlcnMucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIHRoaXMubWFwW25vcm1hbGl6ZU5hbWUobmFtZSldID0gbm9ybWFsaXplVmFsdWUodmFsdWUpXG59XG5cbkhlYWRlcnMucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbihjYWxsYmFjaywgdGhpc0FyZykge1xuICBmb3IgKHZhciBuYW1lIGluIHRoaXMubWFwKSB7XG4gICAgaWYgKHRoaXMubWFwLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICBjYWxsYmFjay5jYWxsKHRoaXNBcmcsIHRoaXMubWFwW25hbWVdLCBuYW1lLCB0aGlzKVxuICAgIH1cbiAgfVxufVxuXG5IZWFkZXJzLnByb3RvdHlwZS5rZXlzID0gZnVuY3Rpb24oKSB7XG4gIHZhciBpdGVtcyA9IFtdXG4gIHRoaXMuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSwgbmFtZSkge1xuICAgIGl0ZW1zLnB1c2gobmFtZSlcbiAgfSlcbiAgcmV0dXJuIGl0ZXJhdG9yRm9yKGl0ZW1zKVxufVxuXG5IZWFkZXJzLnByb3RvdHlwZS52YWx1ZXMgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGl0ZW1zID0gW11cbiAgdGhpcy5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgaXRlbXMucHVzaCh2YWx1ZSlcbiAgfSlcbiAgcmV0dXJuIGl0ZXJhdG9yRm9yKGl0ZW1zKVxufVxuXG5IZWFkZXJzLnByb3RvdHlwZS5lbnRyaWVzID0gZnVuY3Rpb24oKSB7XG4gIHZhciBpdGVtcyA9IFtdXG4gIHRoaXMuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSwgbmFtZSkge1xuICAgIGl0ZW1zLnB1c2goW25hbWUsIHZhbHVlXSlcbiAgfSlcbiAgcmV0dXJuIGl0ZXJhdG9yRm9yKGl0ZW1zKVxufVxuXG5pZiAoc3VwcG9ydC5pdGVyYWJsZSkge1xuICBIZWFkZXJzLnByb3RvdHlwZVtTeW1ib2wuaXRlcmF0b3JdID0gSGVhZGVycy5wcm90b3R5cGUuZW50cmllc1xufVxuXG5mdW5jdGlvbiBjb25zdW1lZChib2R5KSB7XG4gIGlmIChib2R5LmJvZHlVc2VkKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBUeXBlRXJyb3IoJ0FscmVhZHkgcmVhZCcpKVxuICB9XG4gIGJvZHkuYm9keVVzZWQgPSB0cnVlXG59XG5cbmZ1bmN0aW9uIGZpbGVSZWFkZXJSZWFkeShyZWFkZXIpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgIHJlYWRlci5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJlc29sdmUocmVhZGVyLnJlc3VsdClcbiAgICB9XG4gICAgcmVhZGVyLm9uZXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJlamVjdChyZWFkZXIuZXJyb3IpXG4gICAgfVxuICB9KVxufVxuXG5mdW5jdGlvbiByZWFkQmxvYkFzQXJyYXlCdWZmZXIoYmxvYikge1xuICB2YXIgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKVxuICB2YXIgcHJvbWlzZSA9IGZpbGVSZWFkZXJSZWFkeShyZWFkZXIpXG4gIHJlYWRlci5yZWFkQXNBcnJheUJ1ZmZlcihibG9iKVxuICByZXR1cm4gcHJvbWlzZVxufVxuXG5mdW5jdGlvbiByZWFkQmxvYkFzVGV4dChibG9iKSB7XG4gIHZhciByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpXG4gIHZhciBwcm9taXNlID0gZmlsZVJlYWRlclJlYWR5KHJlYWRlcilcbiAgcmVhZGVyLnJlYWRBc1RleHQoYmxvYilcbiAgcmV0dXJuIHByb21pc2Vcbn1cblxuZnVuY3Rpb24gcmVhZEFycmF5QnVmZmVyQXNUZXh0KGJ1Zikge1xuICB2YXIgdmlldyA9IG5ldyBVaW50OEFycmF5KGJ1ZilcbiAgdmFyIGNoYXJzID0gbmV3IEFycmF5KHZpZXcubGVuZ3RoKVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdmlldy5sZW5ndGg7IGkrKykge1xuICAgIGNoYXJzW2ldID0gU3RyaW5nLmZyb21DaGFyQ29kZSh2aWV3W2ldKVxuICB9XG4gIHJldHVybiBjaGFycy5qb2luKCcnKVxufVxuXG5mdW5jdGlvbiBidWZmZXJDbG9uZShidWYpIHtcbiAgaWYgKGJ1Zi5zbGljZSkge1xuICAgIHJldHVybiBidWYuc2xpY2UoMClcbiAgfSBlbHNlIHtcbiAgICB2YXIgdmlldyA9IG5ldyBVaW50OEFycmF5KGJ1Zi5ieXRlTGVuZ3RoKVxuICAgIHZpZXcuc2V0KG5ldyBVaW50OEFycmF5KGJ1ZikpXG4gICAgcmV0dXJuIHZpZXcuYnVmZmVyXG4gIH1cbn1cblxuZnVuY3Rpb24gQm9keSgpIHtcbiAgdGhpcy5ib2R5VXNlZCA9IGZhbHNlXG5cbiAgdGhpcy5faW5pdEJvZHkgPSBmdW5jdGlvbihib2R5KSB7XG4gICAgdGhpcy5fYm9keUluaXQgPSBib2R5XG4gICAgaWYgKCFib2R5KSB7XG4gICAgICB0aGlzLl9ib2R5VGV4dCA9ICcnXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgYm9keSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRoaXMuX2JvZHlUZXh0ID0gYm9keVxuICAgIH0gZWxzZSBpZiAoc3VwcG9ydC5ibG9iICYmIEJsb2IucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoYm9keSkpIHtcbiAgICAgIHRoaXMuX2JvZHlCbG9iID0gYm9keVxuICAgIH0gZWxzZSBpZiAoc3VwcG9ydC5mb3JtRGF0YSAmJiBGb3JtRGF0YS5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihib2R5KSkge1xuICAgICAgdGhpcy5fYm9keUZvcm1EYXRhID0gYm9keVxuICAgIH0gZWxzZSBpZiAoc3VwcG9ydC5zZWFyY2hQYXJhbXMgJiYgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGJvZHkpKSB7XG4gICAgICB0aGlzLl9ib2R5VGV4dCA9IGJvZHkudG9TdHJpbmcoKVxuICAgIH0gZWxzZSBpZiAoc3VwcG9ydC5hcnJheUJ1ZmZlciAmJiBzdXBwb3J0LmJsb2IgJiYgaXNEYXRhVmlldyhib2R5KSkge1xuICAgICAgdGhpcy5fYm9keUFycmF5QnVmZmVyID0gYnVmZmVyQ2xvbmUoYm9keS5idWZmZXIpXG4gICAgICAvLyBJRSAxMC0xMSBjYW4ndCBoYW5kbGUgYSBEYXRhVmlldyBib2R5LlxuICAgICAgdGhpcy5fYm9keUluaXQgPSBuZXcgQmxvYihbdGhpcy5fYm9keUFycmF5QnVmZmVyXSlcbiAgICB9IGVsc2UgaWYgKHN1cHBvcnQuYXJyYXlCdWZmZXIgJiYgKEFycmF5QnVmZmVyLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGJvZHkpIHx8IGlzQXJyYXlCdWZmZXJWaWV3KGJvZHkpKSkge1xuICAgICAgdGhpcy5fYm9keUFycmF5QnVmZmVyID0gYnVmZmVyQ2xvbmUoYm9keSlcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fYm9keVRleHQgPSBib2R5ID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGJvZHkpXG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLmhlYWRlcnMuZ2V0KCdjb250ZW50LXR5cGUnKSkge1xuICAgICAgaWYgKHR5cGVvZiBib2R5ID09PSAnc3RyaW5nJykge1xuICAgICAgICB0aGlzLmhlYWRlcnMuc2V0KCdjb250ZW50LXR5cGUnLCAndGV4dC9wbGFpbjtjaGFyc2V0PVVURi04JylcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5fYm9keUJsb2IgJiYgdGhpcy5fYm9keUJsb2IudHlwZSkge1xuICAgICAgICB0aGlzLmhlYWRlcnMuc2V0KCdjb250ZW50LXR5cGUnLCB0aGlzLl9ib2R5QmxvYi50eXBlKVxuICAgICAgfSBlbHNlIGlmIChzdXBwb3J0LnNlYXJjaFBhcmFtcyAmJiBVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoYm9keSkpIHtcbiAgICAgICAgdGhpcy5oZWFkZXJzLnNldCgnY29udGVudC10eXBlJywgJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDtjaGFyc2V0PVVURi04JylcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoc3VwcG9ydC5ibG9iKSB7XG4gICAgdGhpcy5ibG9iID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgcmVqZWN0ZWQgPSBjb25zdW1lZCh0aGlzKVxuICAgICAgaWYgKHJlamVjdGVkKSB7XG4gICAgICAgIHJldHVybiByZWplY3RlZFxuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5fYm9keUJsb2IpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzLl9ib2R5QmxvYilcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5fYm9keUFycmF5QnVmZmVyKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobmV3IEJsb2IoW3RoaXMuX2JvZHlBcnJheUJ1ZmZlcl0pKVxuICAgICAgfSBlbHNlIGlmICh0aGlzLl9ib2R5Rm9ybURhdGEpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdjb3VsZCBub3QgcmVhZCBGb3JtRGF0YSBib2R5IGFzIGJsb2InKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShuZXcgQmxvYihbdGhpcy5fYm9keVRleHRdKSlcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmFycmF5QnVmZmVyID0gZnVuY3Rpb24oKSB7XG4gICAgICBpZiAodGhpcy5fYm9keUFycmF5QnVmZmVyKSB7XG4gICAgICAgIHJldHVybiBjb25zdW1lZCh0aGlzKSB8fCBQcm9taXNlLnJlc29sdmUodGhpcy5fYm9keUFycmF5QnVmZmVyKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYmxvYigpLnRoZW4ocmVhZEJsb2JBc0FycmF5QnVmZmVyKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHRoaXMudGV4dCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciByZWplY3RlZCA9IGNvbnN1bWVkKHRoaXMpXG4gICAgaWYgKHJlamVjdGVkKSB7XG4gICAgICByZXR1cm4gcmVqZWN0ZWRcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fYm9keUJsb2IpIHtcbiAgICAgIHJldHVybiByZWFkQmxvYkFzVGV4dCh0aGlzLl9ib2R5QmxvYilcbiAgICB9IGVsc2UgaWYgKHRoaXMuX2JvZHlBcnJheUJ1ZmZlcikge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShyZWFkQXJyYXlCdWZmZXJBc1RleHQodGhpcy5fYm9keUFycmF5QnVmZmVyKSlcbiAgICB9IGVsc2UgaWYgKHRoaXMuX2JvZHlGb3JtRGF0YSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdjb3VsZCBub3QgcmVhZCBGb3JtRGF0YSBib2R5IGFzIHRleHQnKVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMuX2JvZHlUZXh0KVxuICAgIH1cbiAgfVxuXG4gIGlmIChzdXBwb3J0LmZvcm1EYXRhKSB7XG4gICAgdGhpcy5mb3JtRGF0YSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMudGV4dCgpLnRoZW4oZGVjb2RlKVxuICAgIH1cbiAgfVxuXG4gIHRoaXMuanNvbiA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnRleHQoKS50aGVuKEpTT04ucGFyc2UpXG4gIH1cblxuICByZXR1cm4gdGhpc1xufVxuXG4vLyBIVFRQIG1ldGhvZHMgd2hvc2UgY2FwaXRhbGl6YXRpb24gc2hvdWxkIGJlIG5vcm1hbGl6ZWRcbnZhciBtZXRob2RzID0gWydERUxFVEUnLCAnR0VUJywgJ0hFQUQnLCAnT1BUSU9OUycsICdQT1NUJywgJ1BVVCddXG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZU1ldGhvZChtZXRob2QpIHtcbiAgdmFyIHVwY2FzZWQgPSBtZXRob2QudG9VcHBlckNhc2UoKVxuICByZXR1cm4gbWV0aG9kcy5pbmRleE9mKHVwY2FzZWQpID4gLTEgPyB1cGNhc2VkIDogbWV0aG9kXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBSZXF1ZXN0KGlucHV0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9XG4gIHZhciBib2R5ID0gb3B0aW9ucy5ib2R5XG5cbiAgaWYgKGlucHV0IGluc3RhbmNlb2YgUmVxdWVzdCkge1xuICAgIGlmIChpbnB1dC5ib2R5VXNlZCkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQWxyZWFkeSByZWFkJylcbiAgICB9XG4gICAgdGhpcy51cmwgPSBpbnB1dC51cmxcbiAgICB0aGlzLmNyZWRlbnRpYWxzID0gaW5wdXQuY3JlZGVudGlhbHNcbiAgICBpZiAoIW9wdGlvbnMuaGVhZGVycykge1xuICAgICAgdGhpcy5oZWFkZXJzID0gbmV3IEhlYWRlcnMoaW5wdXQuaGVhZGVycylcbiAgICB9XG4gICAgdGhpcy5tZXRob2QgPSBpbnB1dC5tZXRob2RcbiAgICB0aGlzLm1vZGUgPSBpbnB1dC5tb2RlXG4gICAgdGhpcy5zaWduYWwgPSBpbnB1dC5zaWduYWxcbiAgICBpZiAoIWJvZHkgJiYgaW5wdXQuX2JvZHlJbml0ICE9IG51bGwpIHtcbiAgICAgIGJvZHkgPSBpbnB1dC5fYm9keUluaXRcbiAgICAgIGlucHV0LmJvZHlVc2VkID0gdHJ1ZVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB0aGlzLnVybCA9IFN0cmluZyhpbnB1dClcbiAgfVxuXG4gIHRoaXMuY3JlZGVudGlhbHMgPSBvcHRpb25zLmNyZWRlbnRpYWxzIHx8IHRoaXMuY3JlZGVudGlhbHMgfHwgJ3NhbWUtb3JpZ2luJ1xuICBpZiAob3B0aW9ucy5oZWFkZXJzIHx8ICF0aGlzLmhlYWRlcnMpIHtcbiAgICB0aGlzLmhlYWRlcnMgPSBuZXcgSGVhZGVycyhvcHRpb25zLmhlYWRlcnMpXG4gIH1cbiAgdGhpcy5tZXRob2QgPSBub3JtYWxpemVNZXRob2Qob3B0aW9ucy5tZXRob2QgfHwgdGhpcy5tZXRob2QgfHwgJ0dFVCcpXG4gIHRoaXMubW9kZSA9IG9wdGlvbnMubW9kZSB8fCB0aGlzLm1vZGUgfHwgbnVsbFxuICB0aGlzLnNpZ25hbCA9IG9wdGlvbnMuc2lnbmFsIHx8IHRoaXMuc2lnbmFsXG4gIHRoaXMucmVmZXJyZXIgPSBudWxsXG5cbiAgaWYgKCh0aGlzLm1ldGhvZCA9PT0gJ0dFVCcgfHwgdGhpcy5tZXRob2QgPT09ICdIRUFEJykgJiYgYm9keSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0JvZHkgbm90IGFsbG93ZWQgZm9yIEdFVCBvciBIRUFEIHJlcXVlc3RzJylcbiAgfVxuICB0aGlzLl9pbml0Qm9keShib2R5KVxufVxuXG5SZXF1ZXN0LnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFJlcXVlc3QodGhpcywge2JvZHk6IHRoaXMuX2JvZHlJbml0fSlcbn1cblxuZnVuY3Rpb24gZGVjb2RlKGJvZHkpIHtcbiAgdmFyIGZvcm0gPSBuZXcgRm9ybURhdGEoKVxuICBib2R5XG4gICAgLnRyaW0oKVxuICAgIC5zcGxpdCgnJicpXG4gICAgLmZvckVhY2goZnVuY3Rpb24oYnl0ZXMpIHtcbiAgICAgIGlmIChieXRlcykge1xuICAgICAgICB2YXIgc3BsaXQgPSBieXRlcy5zcGxpdCgnPScpXG4gICAgICAgIHZhciBuYW1lID0gc3BsaXQuc2hpZnQoKS5yZXBsYWNlKC9cXCsvZywgJyAnKVxuICAgICAgICB2YXIgdmFsdWUgPSBzcGxpdC5qb2luKCc9JykucmVwbGFjZSgvXFwrL2csICcgJylcbiAgICAgICAgZm9ybS5hcHBlbmQoZGVjb2RlVVJJQ29tcG9uZW50KG5hbWUpLCBkZWNvZGVVUklDb21wb25lbnQodmFsdWUpKVxuICAgICAgfVxuICAgIH0pXG4gIHJldHVybiBmb3JtXG59XG5cbmZ1bmN0aW9uIHBhcnNlSGVhZGVycyhyYXdIZWFkZXJzKSB7XG4gIHZhciBoZWFkZXJzID0gbmV3IEhlYWRlcnMoKVxuICAvLyBSZXBsYWNlIGluc3RhbmNlcyBvZiBcXHJcXG4gYW5kIFxcbiBmb2xsb3dlZCBieSBhdCBsZWFzdCBvbmUgc3BhY2Ugb3IgaG9yaXpvbnRhbCB0YWIgd2l0aCBhIHNwYWNlXG4gIC8vIGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmM3MjMwI3NlY3Rpb24tMy4yXG4gIHZhciBwcmVQcm9jZXNzZWRIZWFkZXJzID0gcmF3SGVhZGVycy5yZXBsYWNlKC9cXHI/XFxuW1xcdCBdKy9nLCAnICcpXG4gIHByZVByb2Nlc3NlZEhlYWRlcnMuc3BsaXQoL1xccj9cXG4vKS5mb3JFYWNoKGZ1bmN0aW9uKGxpbmUpIHtcbiAgICB2YXIgcGFydHMgPSBsaW5lLnNwbGl0KCc6JylcbiAgICB2YXIga2V5ID0gcGFydHMuc2hpZnQoKS50cmltKClcbiAgICBpZiAoa2V5KSB7XG4gICAgICB2YXIgdmFsdWUgPSBwYXJ0cy5qb2luKCc6JykudHJpbSgpXG4gICAgICBoZWFkZXJzLmFwcGVuZChrZXksIHZhbHVlKVxuICAgIH1cbiAgfSlcbiAgcmV0dXJuIGhlYWRlcnNcbn1cblxuQm9keS5jYWxsKFJlcXVlc3QucHJvdG90eXBlKVxuXG5leHBvcnQgZnVuY3Rpb24gUmVzcG9uc2UoYm9keUluaXQsIG9wdGlvbnMpIHtcbiAgaWYgKCFvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IHt9XG4gIH1cblxuICB0aGlzLnR5cGUgPSAnZGVmYXVsdCdcbiAgdGhpcy5zdGF0dXMgPSBvcHRpb25zLnN0YXR1cyA9PT0gdW5kZWZpbmVkID8gMjAwIDogb3B0aW9ucy5zdGF0dXNcbiAgdGhpcy5vayA9IHRoaXMuc3RhdHVzID49IDIwMCAmJiB0aGlzLnN0YXR1cyA8IDMwMFxuICB0aGlzLnN0YXR1c1RleHQgPSAnc3RhdHVzVGV4dCcgaW4gb3B0aW9ucyA/IG9wdGlvbnMuc3RhdHVzVGV4dCA6ICdPSydcbiAgdGhpcy5oZWFkZXJzID0gbmV3IEhlYWRlcnMob3B0aW9ucy5oZWFkZXJzKVxuICB0aGlzLnVybCA9IG9wdGlvbnMudXJsIHx8ICcnXG4gIHRoaXMuX2luaXRCb2R5KGJvZHlJbml0KVxufVxuXG5Cb2R5LmNhbGwoUmVzcG9uc2UucHJvdG90eXBlKVxuXG5SZXNwb25zZS5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBSZXNwb25zZSh0aGlzLl9ib2R5SW5pdCwge1xuICAgIHN0YXR1czogdGhpcy5zdGF0dXMsXG4gICAgc3RhdHVzVGV4dDogdGhpcy5zdGF0dXNUZXh0LFxuICAgIGhlYWRlcnM6IG5ldyBIZWFkZXJzKHRoaXMuaGVhZGVycyksXG4gICAgdXJsOiB0aGlzLnVybFxuICB9KVxufVxuXG5SZXNwb25zZS5lcnJvciA9IGZ1bmN0aW9uKCkge1xuICB2YXIgcmVzcG9uc2UgPSBuZXcgUmVzcG9uc2UobnVsbCwge3N0YXR1czogMCwgc3RhdHVzVGV4dDogJyd9KVxuICByZXNwb25zZS50eXBlID0gJ2Vycm9yJ1xuICByZXR1cm4gcmVzcG9uc2Vcbn1cblxudmFyIHJlZGlyZWN0U3RhdHVzZXMgPSBbMzAxLCAzMDIsIDMwMywgMzA3LCAzMDhdXG5cblJlc3BvbnNlLnJlZGlyZWN0ID0gZnVuY3Rpb24odXJsLCBzdGF0dXMpIHtcbiAgaWYgKHJlZGlyZWN0U3RhdHVzZXMuaW5kZXhPZihzdGF0dXMpID09PSAtMSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbnZhbGlkIHN0YXR1cyBjb2RlJylcbiAgfVxuXG4gIHJldHVybiBuZXcgUmVzcG9uc2UobnVsbCwge3N0YXR1czogc3RhdHVzLCBoZWFkZXJzOiB7bG9jYXRpb246IHVybH19KVxufVxuXG5leHBvcnQgdmFyIERPTUV4Y2VwdGlvbiA9IHNlbGYuRE9NRXhjZXB0aW9uXG50cnkge1xuICBuZXcgRE9NRXhjZXB0aW9uKClcbn0gY2F0Y2ggKGVycikge1xuICBET01FeGNlcHRpb24gPSBmdW5jdGlvbihtZXNzYWdlLCBuYW1lKSB7XG4gICAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZVxuICAgIHRoaXMubmFtZSA9IG5hbWVcbiAgICB2YXIgZXJyb3IgPSBFcnJvcihtZXNzYWdlKVxuICAgIHRoaXMuc3RhY2sgPSBlcnJvci5zdGFja1xuICB9XG4gIERPTUV4Y2VwdGlvbi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEVycm9yLnByb3RvdHlwZSlcbiAgRE9NRXhjZXB0aW9uLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IERPTUV4Y2VwdGlvblxufVxuXG5leHBvcnQgZnVuY3Rpb24gZmV0Y2goaW5wdXQsIGluaXQpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgIHZhciByZXF1ZXN0ID0gbmV3IFJlcXVlc3QoaW5wdXQsIGluaXQpXG5cbiAgICBpZiAocmVxdWVzdC5zaWduYWwgJiYgcmVxdWVzdC5zaWduYWwuYWJvcnRlZCkge1xuICAgICAgcmV0dXJuIHJlamVjdChuZXcgRE9NRXhjZXB0aW9uKCdBYm9ydGVkJywgJ0Fib3J0RXJyb3InKSlcbiAgICB9XG5cbiAgICB2YXIgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KClcblxuICAgIGZ1bmN0aW9uIGFib3J0WGhyKCkge1xuICAgICAgeGhyLmFib3J0KClcbiAgICB9XG5cbiAgICB4aHIub25sb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgc3RhdHVzOiB4aHIuc3RhdHVzLFxuICAgICAgICBzdGF0dXNUZXh0OiB4aHIuc3RhdHVzVGV4dCxcbiAgICAgICAgaGVhZGVyczogcGFyc2VIZWFkZXJzKHhoci5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKSB8fCAnJylcbiAgICAgIH1cbiAgICAgIG9wdGlvbnMudXJsID0gJ3Jlc3BvbnNlVVJMJyBpbiB4aHIgPyB4aHIucmVzcG9uc2VVUkwgOiBvcHRpb25zLmhlYWRlcnMuZ2V0KCdYLVJlcXVlc3QtVVJMJylcbiAgICAgIHZhciBib2R5ID0gJ3Jlc3BvbnNlJyBpbiB4aHIgPyB4aHIucmVzcG9uc2UgOiB4aHIucmVzcG9uc2VUZXh0XG4gICAgICByZXNvbHZlKG5ldyBSZXNwb25zZShib2R5LCBvcHRpb25zKSlcbiAgICB9XG5cbiAgICB4aHIub25lcnJvciA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmVqZWN0KG5ldyBUeXBlRXJyb3IoJ05ldHdvcmsgcmVxdWVzdCBmYWlsZWQnKSlcbiAgICB9XG5cbiAgICB4aHIub250aW1lb3V0ID0gZnVuY3Rpb24oKSB7XG4gICAgICByZWplY3QobmV3IFR5cGVFcnJvcignTmV0d29yayByZXF1ZXN0IGZhaWxlZCcpKVxuICAgIH1cblxuICAgIHhoci5vbmFib3J0ID0gZnVuY3Rpb24oKSB7XG4gICAgICByZWplY3QobmV3IERPTUV4Y2VwdGlvbignQWJvcnRlZCcsICdBYm9ydEVycm9yJykpXG4gICAgfVxuXG4gICAgeGhyLm9wZW4ocmVxdWVzdC5tZXRob2QsIHJlcXVlc3QudXJsLCB0cnVlKVxuXG4gICAgaWYgKHJlcXVlc3QuY3JlZGVudGlhbHMgPT09ICdpbmNsdWRlJykge1xuICAgICAgeGhyLndpdGhDcmVkZW50aWFscyA9IHRydWVcbiAgICB9IGVsc2UgaWYgKHJlcXVlc3QuY3JlZGVudGlhbHMgPT09ICdvbWl0Jykge1xuICAgICAgeGhyLndpdGhDcmVkZW50aWFscyA9IGZhbHNlXG4gICAgfVxuXG4gICAgaWYgKCdyZXNwb25zZVR5cGUnIGluIHhociAmJiBzdXBwb3J0LmJsb2IpIHtcbiAgICAgIHhoci5yZXNwb25zZVR5cGUgPSAnYmxvYidcbiAgICB9XG5cbiAgICByZXF1ZXN0LmhlYWRlcnMuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSwgbmFtZSkge1xuICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIobmFtZSwgdmFsdWUpXG4gICAgfSlcblxuICAgIGlmIChyZXF1ZXN0LnNpZ25hbCkge1xuICAgICAgcmVxdWVzdC5zaWduYWwuYWRkRXZlbnRMaXN0ZW5lcignYWJvcnQnLCBhYm9ydFhocilcblxuICAgICAgeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAvLyBET05FIChzdWNjZXNzIG9yIGZhaWx1cmUpXG4gICAgICAgIGlmICh4aHIucmVhZHlTdGF0ZSA9PT0gNCkge1xuICAgICAgICAgIHJlcXVlc3Quc2lnbmFsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Fib3J0JywgYWJvcnRYaHIpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB4aHIuc2VuZCh0eXBlb2YgcmVxdWVzdC5fYm9keUluaXQgPT09ICd1bmRlZmluZWQnID8gbnVsbCA6IHJlcXVlc3QuX2JvZHlJbml0KVxuICB9KVxufVxuXG5mZXRjaC5wb2x5ZmlsbCA9IHRydWVcblxuaWYgKCFzZWxmLmZldGNoKSB7XG4gIHNlbGYuZmV0Y2ggPSBmZXRjaFxuICBzZWxmLkhlYWRlcnMgPSBIZWFkZXJzXG4gIHNlbGYuUmVxdWVzdCA9IFJlcXVlc3RcbiAgc2VsZi5SZXNwb25zZSA9IFJlc3BvbnNlXG59XG4iLCIvKiogQG1vZHVsZSBIdHRwUmVxdWVzdGVyICovXG5cbi8qIGdsb2JhbCBmZXRjaCwgWE1MSHR0cFJlcXVlc3QsIEFjdGl2ZVhPYmplY3QgKi9cblxuaW1wb3J0IHsgZmV0Y2ggYXMgZmV0Y2hQb2x5ZmlsbCB9IGZyb20gJ3doYXR3Zy1mZXRjaCc7XG5cbi8qKlxuICogVHlwZXMgb2YgSFRUUCByZXF1ZXN0c1xuICovXG5jb25zdCBNZXRob2RzID0ge1xuICBHRVQ6ICdnZXQnLFxuICBQT1NUOiAncG9zdCcsXG4gIFBVVDogJ3B1dCcsXG4gIERFTEVURTogJ2RlbGV0ZSdcbn07XG5cbi8qKlxuICogSHR0cFJlcXVlc3RlciBpcyBhIHdyYXBwZXIgYXJvdW5kIHRoZSBuYXRpdmUgaW1wbGVtZW50YXRpb24gb2YgQUpBWFxuICogcmVsYXRlZCBtYXR0ZXJzLiBJdCdzIHVzZWQgdG8gbWFrZSBhbGwgdHlwZXMgb2YgbmV0d29yayByZXF1ZXN0c1xuICogYW5kIGV4cG9zZXMgYSBwcm9taXNlIGludGVyZmFjZS5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSHR0cFJlcXVlc3RlciB7XG4gIC8qKlxuICAgKiBDcmVhdGUgYSBHRVQgSFRUUCByZXF1ZXN0XG4gICAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIHVybCB0byBtYWtlIGEgcmVxdWVzdCB0b1xuICAgKiBAcGFyYW0ge09iamVjdH0gZGF0YSBUaGUgZGF0YSB0byBwcm92aWRlIChnZXRzIGVuY29kZWQgaW50byB0aGUgVVJMKVxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyBDb25maWd1cmF0aW9uIG9wdGlvbnMgdG8gdXNlIGZvciB0aGUgcmVxdWVzdFxuICAgKi9cbiAgZ2V0ICh1cmwsIGRhdGEsIG9wdHMpIHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KE1ldGhvZHMuR0VULCB0aGlzLmVuY29kZVBhcmFtcyh1cmwsIGRhdGEpLCBvcHRzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBQT1NUIEhUVFAgcmVxdWVzdFxuICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSB1cmwgdG8gbWFrZSBhIHJlcXVlc3QgdG9cbiAgICogQHBhcmFtIHtPYmplY3R9IHVybFBhcmFtcyBUaGUgcGFyYW1zIHRvIGVuY29kZSBpbnRvIHRoZSBVUkxcbiAgICogQHBhcmFtIHtPYmplY3R9IGpzb25Cb2R5IFRoZSByZXF1ZXN0IGJvZHkgKGpzb24pIHRvIHByb3ZpZGUgd2l0aCB0aGUgUE9TVCByZXF1ZXN0XG4gICAqIEBwYXJhbSB7T2JqZWN0fSByZXF1ZXN0Q29uZmlnIENvbmZpZ3VyYXRpb24gb3B0aW9ucyB0byB1c2UgZm9yIHRoZSByZXF1ZXN0XG4gICAqL1xuICBwb3N0ICh1cmwsIHVybFBhcmFtcywganNvbkJvZHksIHJlcXVlc3RDb25maWcpIHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KFxuICAgICAgTWV0aG9kcy5QT1NULFxuICAgICAgdGhpcy5lbmNvZGVQYXJhbXModXJsLCB1cmxQYXJhbXMpLFxuICAgICAgT2JqZWN0LmFzc2lnbih7fSwge1xuICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShqc29uQm9keSksXG4gICAgICAgIGNyZWRlbnRpYWxzOiB1bmRlZmluZWRcbiAgICAgIH0sIHJlcXVlc3RDb25maWcpXG4gICAgKTtcbiAgfVxuXG4gIHJlcXVlc3QgKG1ldGhvZCwgdXJsLCBvcHRzKSB7XG4gICAgY29uc3QgcmVxQXJncyA9IE9iamVjdC5hc3NpZ24oe30sIHtcbiAgICAgICdtZXRob2QnOiBtZXRob2QsXG4gICAgICAnY3JlZGVudGlhbHMnOiAnaW5jbHVkZSdcbiAgICB9LCBvcHRzKTtcblxuICAgIHJldHVybiB0aGlzLl9mZXRjaCh1cmwsIHJlcUFyZ3MpO1xuICB9XG5cbiAgLy8gVE9ETyAoYWdyb3cpIGludmVzdGlnYXRlIHJlbW92aW5nIHRoaXNcbiAgLy8gVXNlIGltcG9ydGVkIGZldGNoUG9seWZpbGwgaWYgaXQgZG9lcyBub3QgYWxyZWFkeSBleGlzdCBvbiB3aW5kb3dcbiAgX2ZldGNoICh1cmwsIHJlcUFyZ3MpIHtcbiAgICBpZiAoIXdpbmRvdy5mZXRjaCkge1xuICAgICAgcmV0dXJuIGZldGNoUG9seWZpbGwodXJsLCByZXFBcmdzKTtcbiAgICB9XG4gICAgcmV0dXJuIGZldGNoKHVybCwgcmVxQXJncyk7XG4gIH1cblxuICAvKipcbiAgICogU2VuZCBhIGJlYWNvbiB0byB0aGUgcHJvdmlkZWQgdXJsIHdoaWNoIHdpbGwgc2VuZCBhIG5vbi1ibG9ja2luZyByZXF1ZXN0XG4gICAqIHRvIHRoZSBzZXJ2ZXIgdGhhdCBpcyBndWFyYW50ZWVkIHRvIHNlbmQgYmVmb3JlIHBhZ2UgbG9hZC4gTm8gcmVzcG9uc2UgaXMgcmV0dXJuZWQsXG4gICAqIHNvIGJlYWNvbnMgYXJlIHByaW1hcmlseSB1c2VkIGZvciBhbmFseXRpY3MgcmVwb3J0aW5nLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSB1cmwgdG8gc2VuZCB0aGUgYmVhY29uIHRvXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBkYXRhIFRoZSBkYXRhIHBheWxvYWQgdG8gc2VuZCBpbiB0aGUgYmVhY29uXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IHRydWUgaWYgdGhlIHJlcXVlc3QgaXMgc3VjY2Vzc2Z1bGx5IHF1ZXVlZFxuICAgKi9cbiAgYmVhY29uICh1cmwsIGRhdGEpIHtcbiAgICByZXR1cm4gdGhpcy5fc2VuZEJlYWNvbih1cmwsIEpTT04uc3RyaW5naWZ5KGRhdGEpKTtcbiAgfVxuXG4gIC8vIFRPRE8gKGFncm93KSBpbnZlc3RpZ2F0ZSByZW1vdmluZyB0aGlzXG4gIC8vIE5hdmlnYXRvci5zZW5kQmVhY29uIHBvbHlmaWxsXG4gIC8vIENvbWJpbmF0aW9uIG9mIHRoZSBjb21wYWN0IEZpbmFuY2lhbCBUaW1lcyBwb2x5ZmlsbDpcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL0ZpbmFuY2lhbC1UaW1lcy9wb2x5ZmlsbC1saWJyYXJ5L2Jsb2IvbWFzdGVyL3BvbHlmaWxscy9uYXZpZ2F0b3Ivc2VuZEJlYWNvbi9wb2x5ZmlsbC5qc1xuICAvLyB3aXRoIHRoZSBhc3luYy1ieS1kZWZhdWx0IGJlaGF2aW9yIG9mIE1pZ3VlbCBNb3RhJ3MgcG9seWZpbGw6XG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9taWd1ZWxtb3RhL05hdmlnYXRvci5zZW5kQmVhY29uL2Jsb2IvbWFzdGVyL3NlbmRiZWFjb24uanNcbiAgX3NlbmRCZWFjb24gKHVybCwgZGF0YSkge1xuICAgIGlmICh3aW5kb3cubmF2aWdhdG9yICYmIHdpbmRvdy5uYXZpZ2F0b3Iuc2VuZEJlYWNvbikge1xuICAgICAgcmV0dXJuIHdpbmRvdy5uYXZpZ2F0b3Iuc2VuZEJlYWNvbih1cmwsIGRhdGEpO1xuICAgIH1cblxuICAgIHZhciBldmVudCA9IHdpbmRvdy5ldmVudCAmJiB3aW5kb3cuZXZlbnQudHlwZTtcbiAgICB2YXIgc3luYyA9IGV2ZW50ID09PSAndW5sb2FkJyB8fCBldmVudCA9PT0gJ2JlZm9yZXVubG9hZCc7XG4gICAgdmFyIHhociA9ICgnWE1MSHR0cFJlcXVlc3QnIGluIHdpbmRvdykgPyBuZXcgWE1MSHR0cFJlcXVlc3QoKSA6IG5ldyBBY3RpdmVYT2JqZWN0KCdNaWNyb3NvZnQuWE1MSFRUUCcpO1xuICAgIHhoci5vcGVuKCdQT1NUJywgdXJsLCAhc3luYyk7XG4gICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoJ0FjY2VwdCcsICcqLyonKTtcbiAgICBpZiAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnKSB7XG4gICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcignQ29udGVudC1UeXBlJywgJ3RleHQvcGxhaW47Y2hhcnNldD1VVEYtOCcpO1xuICAgIH0gZWxzZSBpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGRhdGEpID09PSAnW29iamVjdCBCbG9iXScpIHtcbiAgICAgIGlmIChkYXRhLnR5cGUpIHtcbiAgICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoJ0NvbnRlbnQtVHlwZScsIGRhdGEudHlwZSk7XG4gICAgICB9XG4gICAgfVxuICAgIHhoci5zZW5kKGRhdGEpO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgZW5jb2RlUGFyYW1zICh1cmwsIHBhcmFtcykge1xuICAgIGlmICh0eXBlb2YgcGFyYW1zICE9PSAnb2JqZWN0Jykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGxldCBoYXNQYXJhbSA9IHVybC5pbmRleE9mKCc/JykgPiAtMTtcblxuICAgIGxldCBzZWFyY2hRdWVyeSA9ICcnO1xuICAgIGZvciAobGV0IGtleSBpbiBwYXJhbXMpIHtcbiAgICAgIGlmICghaGFzUGFyYW0pIHtcbiAgICAgICAgaGFzUGFyYW0gPSB0cnVlO1xuICAgICAgICBzZWFyY2hRdWVyeSArPSAnPyc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZWFyY2hRdWVyeSArPSAnJic7XG4gICAgICB9XG5cbiAgICAgIHNlYXJjaFF1ZXJ5ICs9IGtleSArICc9JyArIGVuY29kZVVSSUNvbXBvbmVudChwYXJhbXNba2V5XSk7XG4gICAgfVxuICAgIHJldHVybiB1cmwgKyBzZWFyY2hRdWVyeTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgUFJPRFVDVElPTiwgU0FOREJPWCB9IGZyb20gJy4uL2NvbnN0YW50cyc7XG5pbXBvcnQgU2VhcmNoUGFyYW1zIGZyb20gJy4uLy4uL3VpL2RvbS9zZWFyY2hwYXJhbXMnO1xuXG4vKipcbiAqIFJldHVybnMgdGhlIGJhc2UgdXJsIGZvciB0aGUgbGl2ZSBhcGkgYmFja2VuZCBpbiB0aGUgZGVzaXJlZCBlbnZpcm9ubWVudC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBlbnYgVGhlIGRlc2lyZWQgZW52aXJvbm1lbnQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRMaXZlQXBpVXJsIChlbnYgPSBQUk9EVUNUSU9OKSB7XG4gIHJldHVybiBlbnYgPT09IFNBTkRCT1ggPyAnaHR0cHM6Ly9saXZlYXBpLXNhbmRib3gueWV4dC5jb20nIDogJ2h0dHBzOi8vbGl2ZWFwaS55ZXh0LmNvbSc7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgYmFzZSB1cmwgZm9yIHRoZSBsaXZlIGFwaSBiYWNrZW5kIGluIHRoZSBkZXNpcmVkIGVudmlyb25tZW50LlxuICogQHBhcmFtIHtzdHJpbmd9IGVudiBUaGUgZGVzaXJlZCBlbnZpcm9ubWVudC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldENhY2hlZExpdmVBcGlVcmwgKGVudiA9IFBST0RVQ1RJT04pIHtcbiAgcmV0dXJuIGVudiA9PT0gU0FOREJPWCA/ICdodHRwczovL2xpdmVhcGktc2FuZGJveC55ZXh0LmNvbScgOiAnaHR0cHM6Ly9saXZlYXBpLWNhY2hlZC55ZXh0LmNvbSc7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgYmFzZSB1cmwgZm9yIHRoZSBrbm93bGVkZ2UgYXBpIGJhY2tlbmQgaW4gdGhlIGRlc2lyZWQgZW52aXJvbm1lbnQuXG4gKiBAcGFyYW0ge3N0cmluZ30gZW52IFRoZSBkZXNpcmVkIGVudmlyb25tZW50LlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0S25vd2xlZGdlQXBpVXJsIChlbnYgPSBQUk9EVUNUSU9OKSB7XG4gIHJldHVybiBlbnYgPT09IFNBTkRCT1ggPyAnaHR0cHM6Ly9hcGktc2FuZGJveC55ZXh0LmNvbScgOiAnaHR0cHM6Ly9hcGkueWV4dC5jb20nO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGJhc2UgdXJsIGZvciB0aGUgYW5hbHl0aWNzIGJhY2tlbmQgaW4gdGhlIGRlc2lyZWQgZW52aXJvbm1lbnQuXG4gKiBAcGFyYW0ge3N0cmluZ30gZW52IFRoZSBkZXNpcmVkIGVudmlyb25tZW50LlxuICogQHBhcmFtIHtib29sZWFufSBjb252ZXJzaW9uVHJhY2tpbmdFbmFibGVkIElmIGNvbnZlcnNpb24gdHJhY2tpbmcgaGFzIGJlZW4gb3B0ZWQgaW50by5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEFuYWx5dGljc1VybCAoZW52ID0gUFJPRFVDVElPTiwgY29udmVyc2lvblRyYWNraW5nRW5hYmxlZCA9IGZhbHNlKSB7XG4gIGlmIChjb252ZXJzaW9uVHJhY2tpbmdFbmFibGVkKSB7XG4gICAgcmV0dXJuIGVudiA9PT0gU0FOREJPWFxuICAgICAgPyAnaHR0cHM6Ly9zYW5kYm94LXJlYWx0aW1lYW5hbHl0aWNzLnlleHQuY29tJ1xuICAgICAgOiAnaHR0cHM6Ly9yZWFsdGltZWFuYWx5dGljcy55ZXh0LmNvbSc7XG4gIH1cbiAgcmV0dXJuIGVudiA9PT0gU0FOREJPWFxuICAgID8gJ2h0dHBzOi8vc2FuZGJveC1hbnN3ZXJzLnlleHQtcGl4ZWwuY29tJ1xuICAgIDogJ2h0dHBzOi8vYW5zd2Vycy55ZXh0LXBpeGVsLmNvbSc7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgcGFzc2VkIGluIHVybCB3aXRoIHRoZSBxdWVyeSBhcHBlbmRlZCB0byBpdC5cbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmxcbiAqIEBwYXJhbSB7cGFyYW1zfSBPYmplY3RcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhZGRQYXJhbXNUb1VybCAodXJsLCBwYXJhbXMgPSB7fSkge1xuICBjb25zdCB1cmxQYXJhbXMgPSBuZXcgU2VhcmNoUGFyYW1zKHdpbmRvdy5sb2NhdGlvbi5zZWFyY2guc3Vic3RyaW5nKDEpKTtcbiAgZm9yIChjb25zdCBwYXJhbUtleSBpbiBwYXJhbXMpIHtcbiAgICB1cmxQYXJhbXMuc2V0KHBhcmFtS2V5LCBwYXJhbXNbcGFyYW1LZXldKTtcbiAgfVxuICByZXR1cm4gdXJsLnNwbGl0KCc/JylbMF0gKyAnPycgKyB1cmxQYXJhbXM7XG59XG4iLCIvKiogQG1vZHVsZSBBcGlSZXF1ZXN0ICovXG5cbmltcG9ydCBIdHRwUmVxdWVzdGVyIGZyb20gJy4vaHR0cHJlcXVlc3Rlcic7XG5pbXBvcnQgeyBMSUJfVkVSU0lPTiwgUFJPRFVDVElPTiB9IGZyb20gJy4uL2NvbnN0YW50cyc7XG5pbXBvcnQgU2VhcmNoUGFyYW1zIGZyb20gJy4uLy4uL3VpL2RvbS9zZWFyY2hwYXJhbXMnOyAvLyBUT0RPIGlkZWFsbHkgdGhpcyB3b3VsZCBiZSBwYXNzZWQgaW4gYXMgYSBwYXJhbVxuaW1wb3J0IHsgQW5zd2Vyc0Jhc2ljRXJyb3IgfSBmcm9tICcuLi9lcnJvcnMvZXJyb3JzJztcbmltcG9ydCBTdG9yYWdlS2V5cyBmcm9tICcuLi9zdG9yYWdlL3N0b3JhZ2VrZXlzJztcbmltcG9ydCB7IGdldExpdmVBcGlVcmwgfSBmcm9tICcuLi91dGlscy91cmx1dGlscyc7XG5cbi8qKlxuICogQXBpUmVxdWVzdCBpcyB0aGUgYmFzZSBjbGFzcyBmb3IgYWxsIEFQSSByZXF1ZXN0cy5cbiAqIEl0IGRlZmluZXMgYWxsIG9mIHRoZSBjb3JlIHByb3BlcnRpZXMgcmVxdWlyZWQgdG8gbWFrZSBhIHJlcXVlc3RcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQXBpUmVxdWVzdCB7XG4gIC8vIFRPRE8gKHRtZXllcik6IENyZWF0ZSBhbiBBcGlTZXJ2aWNlIGludGVyZmFjZSBhbmQgcGFzcyBhbiBpbXBsZW1lbnRhdGlvbiB0byB0aGUgY3VycmVudFxuICAvLyBjb25zdW1lcnMgb2YgQXBpUmVxdWVzdCBhcyBhIGRlcGVuZGVuY3kuXG4gIGNvbnN0cnVjdG9yIChvcHRzID0ge30sIGdsb2JhbFN0b3JhZ2UpIHtcbiAgICAvKipcbiAgICAgKiBBbiBhYnN0cmFjdGlvbiB1c2VkIGZvciBtYWtpbmcgbmV0d29yayByZXF1ZXN0IGFuZCBoYW5kbGluZyBlcnJvcnNcbiAgICAgKiBAdHlwZSB7SHR0cFJlcXVlc3Rlcn1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuX3JlcXVlc3RlciA9IG5ldyBIdHRwUmVxdWVzdGVyKCk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgZW52aXJvbm1lbnQgdGhlIHJlcXVlc3Qgc2hvdWxkIGJlIG1hZGUgdG9cbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5fZW52aXJvbm1lbnQgPSBvcHRzLmVudmlyb25tZW50IHx8IFBST0RVQ1RJT047XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZVVybCB0byB1c2UgZm9yIG1ha2luZyBhIHJlcXVlc3RcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5fYmFzZVVybCA9IG9wdHMuYmFzZVVybCB8fCBnZXRMaXZlQXBpVXJsKHRoaXMuX2Vudmlyb25tZW50KTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBlbmRwb2ludCB0byB1c2UgaW4gdGhlIHVybCAoYXBwZW5kZWQgdG8gdGhlIHtiYXNlVXJsfSlcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5fZW5kcG9pbnQgPSBvcHRzLmVuZHBvaW50IHx8IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgQVBJIEtleSB0byB1c2UgZm9yIHRoZSByZXF1ZXN0XG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuX2FwaUtleSA9IG9wdHMuYXBpS2V5IHx8IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgdmVyc2lvbiBvZiB0aGUgQVBJIHRvIG1ha2UgYSByZXF1ZXN0IHRvXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuX3ZlcnNpb24gPSBvcHRzLnZlcnNpb24gfHwgMjAxOTAxMDE7XG5cbiAgICAvKipcbiAgICAgKiBBZGRpdGlvbmFsIGRhdGEgcGFyYW1zIHRoYXQgYXJlIHNlbnQgYWxvbmcgd2l0aCB0aGUgcmVxdWVzdFxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLl9wYXJhbXMgPSBvcHRzLnBhcmFtcyB8fCB7fTtcblxuICAgIGlmICghZ2xvYmFsU3RvcmFnZSkge1xuICAgICAgdGhyb3cgbmV3IEFuc3dlcnNCYXNpY0Vycm9yKCdNdXN0IGluY2x1ZGUgZ2xvYmFsIHN0b3JhZ2UnLCAnQXBpUmVxdWVzdCcpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAdHlwZSB7R2xvYmFsU3RvcmFnZX1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuX2dsb2JhbFN0b3JhZ2UgPSBnbG9iYWxTdG9yYWdlO1xuICB9XG5cbiAgLyoqXG4gICAqIGdldCBjcmVhdGVzIGEgbmV3IGBHRVRgIHJlcXVlc3QgdG8gdGhlIHNlcnZlciB1c2luZyB0aGUgY29uZmlndXJhdGlvbiBvZiB0aGUgcmVxdWVzdCBjbGFzc1xuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyBBbnkgY29uZmlndXJhdGlvbiBvcHRpb25zIHRvIHVzZSBmb3IgdGhlIEdFVCByZXF1ZXN0LlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxSZXNwb25zZT59XG4gICAqL1xuICBnZXQgKG9wdHMpIHtcbiAgICByZXR1cm4gdGhpcy5fcmVxdWVzdGVyLmdldChcbiAgICAgIHRoaXMuX2Jhc2VVcmwgKyB0aGlzLl9lbmRwb2ludCxcbiAgICAgIE9iamVjdC5hc3NpZ24oe30sIHRoaXMuYmFzZVBhcmFtcygpLCB0aGlzLnNhbml0aXplUGFyYW1zKHRoaXMuX3BhcmFtcykpLFxuICAgICAgb3B0c1xuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdHNcbiAgICogQHJldHVybnMge1Byb21pc2U8UmVzcG9uc2U+fVxuICAgKi9cbiAgcG9zdCAob3B0cykge1xuICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0ZXIucG9zdChcbiAgICAgIHRoaXMuX2Jhc2VVcmwgKyB0aGlzLl9lbmRwb2ludCxcbiAgICAgIHRoaXMuYmFzZVBhcmFtcygpIC8qIHVybFBhcmFtcyAqLyxcbiAgICAgIHRoaXMuc2FuaXRpemVQYXJhbXModGhpcy5fcGFyYW1zKSAvKiBqc29uQm9keSAqLyxcbiAgICAgIG9wdHMgLyogcmVxdWVzdENvbmZpZyAqLyk7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybnMge09iamVjdH1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIGJhc2VQYXJhbXMgKCkge1xuICAgIGxldCBiYXNlUGFyYW1zID0ge1xuICAgICAgJ3YnOiB0aGlzLl92ZXJzaW9uLFxuICAgICAgJ2FwaV9rZXknOiB0aGlzLl9hcGlLZXksXG4gICAgICAnanNMaWJWZXJzaW9uJzogTElCX1ZFUlNJT04sXG4gICAgICAnc2Vzc2lvblRyYWNraW5nRW5hYmxlZCc6IHRoaXMuX2dsb2JhbFN0b3JhZ2UuZ2V0U3RhdGUoU3RvcmFnZUtleXMuU0VTU0lPTlNfT1BUX0lOKVxuICAgIH07XG5cbiAgICBjb25zdCB1cmxQYXJhbXMgPSBuZXcgU2VhcmNoUGFyYW1zKHdpbmRvdy5sb2NhdGlvbi5zZWFyY2guc3Vic3RyaW5nKDEpKTtcbiAgICBpZiAodXJsUGFyYW1zLmhhcygnYmV0YScpKSB7XG4gICAgICBiYXNlUGFyYW1zWydiZXRhJ10gPSB1cmxQYXJhbXMuZ2V0KCdiZXRhJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGJhc2VQYXJhbXM7XG4gIH1cblxuICBzYW5pdGl6ZVBhcmFtcyAocGFyYW1zID0ge30pIHtcbiAgICAvLyBSZW1vdmUgYW55IHBhcmFtYXRlcnMgd2hvcyB2YWx1ZSBpcyBgdW5kZWZpbmVkYC5cbiAgICAvL1xuICAgIC8vIE5PVEUoYmlsbHkpIFByb2JhYmx5IGJldHRlciB0byBiZSBleHBsaWNpdCBhYm91dCBob3cgdG8gaGFuZGxlIHRoaXMgYXQgdGhlIHJlcXVlc3QgYnVpbGRpbmcgbGV2ZWwsXG4gICAgLy8gYnV0IEkgY2FuJ3Qgc2VlIGFueSBjYXNlcyB3aGVyZSB3ZSdkIGV2ZXIgd2FudCB0byBzZW5kICd1bmRlZmluZWQnIGFzIGEgdmFsdWUgdG8gdGhlIHNlcnZlci5cbiAgICAvLyBTbyBpdCdzIHByb2JhYmx5IGZpbmUgdG8gJ2NsZWFuJyB0aGUgcGFyYW1zIG9iamVjdCBoZXJlXG4gICAgT2JqZWN0LmtleXMocGFyYW1zKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICBpZiAocGFyYW1zW2tleV0gPT09IHVuZGVmaW5lZCB8fCBwYXJhbXNba2V5XSA9PT0gbnVsbCkge1xuICAgICAgICBkZWxldGUgcGFyYW1zW2tleV07XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gcGFyYW1zO1xuICB9XG59XG4iLCIvKiogQG1vZHVsZSBTZWFyY2hBcGkgKi9cblxuLyoqIEB0eXBlZGVmIHtpbXBvcnQoJy4vc2VhcmNoc2VydmljZScpLmRlZmF1bHR9IFNlYXJjaFNlcnZpY2UgKi9cblxuaW1wb3J0IEFwaVJlcXVlc3QgZnJvbSAnLi4vaHR0cC9hcGlyZXF1ZXN0JztcbmltcG9ydCB7IEFuc3dlcnNCYXNpY0Vycm9yLCBBbnN3ZXJzQ29yZUVycm9yIH0gZnJvbSAnLi4vZXJyb3JzL2Vycm9ycyc7XG5cbi8qKlxuICogU2VhcmNoQXBpIGlzIHRoZSBBUEkgZm9yIGRvaW5nIHZhcmlvdXMgdHlwZXMgb2Ygc2VhcmNoXG4gKiBvdmVyIHRoZSBuZXR3b3JrIChlLmcuIHZlcnRpY2FsIG9yIHVuaXZlcnNhbClcbiAqXG4gKiBAaW1wbGVtZW50cyB7U2VhcmNoU2VydmljZX1cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2VhcmNoQXBpIHtcbiAgY29uc3RydWN0b3IgKGNvbmZpZyA9IHt9KSB7XG4gICAgLyoqXG4gICAgICogQSBsb2NhbCByZWZlcmVuY2UgdG8gdGhlIEFQSSBLZXkgdG8gdXNlIGZvciB0aGUgcmVxdWVzdFxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBpZiAoIWNvbmZpZy5hcGlLZXkpIHtcbiAgICAgIHRocm93IG5ldyBBbnN3ZXJzQmFzaWNFcnJvcignQXBpIEtleSBpcyByZXF1aXJlZCcsICdTZWFyY2gnKTtcbiAgICB9XG4gICAgdGhpcy5fYXBpS2V5ID0gY29uZmlnLmFwaUtleTtcblxuICAgIC8qKlxuICAgICAqIEEgbG9jYWwgcmVmZXJlbmNlIHRvIHRoZSBBbnN3ZXJzIEtleSB0byB1c2UgZm9yIHRoZSByZXF1ZXN0XG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIGlmICghY29uZmlnLmV4cGVyaWVuY2VLZXkpIHtcbiAgICAgIHRocm93IG5ldyBBbnN3ZXJzQmFzaWNFcnJvcignQW5zd2VycyBLZXkgaXMgcmVxdWlyZWQnLCAnU2VhcmNoJyk7XG4gICAgfVxuICAgIHRoaXMuX2V4cGVyaWVuY2VLZXkgPSBjb25maWcuZXhwZXJpZW5jZUtleTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBhbnN3ZXJzIGNvbmZpZyB2ZXJzaW9uIHRvIHVzZSBmb3IgYWxsIHJlcXVlc3RzXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuX2V4cGVyaWVuY2VWZXJzaW9uID0gY29uZmlnLmV4cGVyaWVuY2VWZXJzaW9uO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHZlcnNpb24gb2YgdGhlIEFQSSB0byBtYWtlIGEgcmVxdWVzdCB0b1xuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLl92ZXJzaW9uID0gY29uZmlnLnZlcnNpb24gfHwgMjAxOTAxMDEgfHwgMjAxOTAzMDE7XG5cbiAgICAvKipcbiAgICAgKiBBIGxvY2FsIHJlZmVyZW5jZSB0byB0aGUgbG9jYWxlIHRvIHVzZSBmb3IgdGhlIHJlcXVlc3RcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgaWYgKCFjb25maWcubG9jYWxlKSB7XG4gICAgICB0aHJvdyBuZXcgQW5zd2Vyc0Jhc2ljRXJyb3IoJ0xvY2FsZSBpcyByZXF1aXJlZCcsICdTZWFyY2gnKTtcbiAgICB9XG4gICAgdGhpcy5fbG9jYWxlID0gY29uZmlnLmxvY2FsZTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBlbnZpcm9ubWVudCBvZiB0aGUgQW5zd2VycyBleHBlcmllbmNlXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuX2Vudmlyb25tZW50ID0gY29uZmlnLmVudmlyb25tZW50O1xuICB9XG5cbiAgLyoqIEBpbmhlcml0ZG9jICovXG4gIHZlcnRpY2FsU2VhcmNoICh2ZXJ0aWNhbEtleSwgeyBpbnB1dCwgZmlsdGVyLCBmYWNldEZpbHRlciwgbGltaXQsIG9mZnNldCwgaWQsIGdlb2xvY2F0aW9uLCBpc0R5bmFtaWNGaWx0ZXJzRW5hYmxlZCwgc2tpcFNwZWxsQ2hlY2ssIHF1ZXJ5VHJpZ2dlciwgc2Vzc2lvblRyYWNraW5nRW5hYmxlZCwgc29ydEJ5cyB9KSB7XG4gICAgaWYgKGxpbWl0ID4gNTApIHtcbiAgICAgIHRocm93IG5ldyBBbnN3ZXJzQ29yZUVycm9yKCdQcm92aWRlZCBzZWFyY2ggbGltaXQgdW5zdXBwb3J0ZWQnLCAnU2VhcmNoQXBpJyk7XG4gICAgfVxuICAgIGNvbnN0IHJlcXVlc3RDb25maWcgPSB7XG4gICAgICBlbmRwb2ludDogJy92Mi9hY2NvdW50cy9tZS9hbnN3ZXJzL3ZlcnRpY2FsL3F1ZXJ5JyxcbiAgICAgIGFwaUtleTogdGhpcy5fYXBpS2V5LFxuICAgICAgdmVyc2lvbjogdGhpcy5fdmVyc2lvbixcbiAgICAgIGVudmlyb25tZW50OiB0aGlzLl9lbnZpcm9ubWVudCxcbiAgICAgIHBhcmFtczoge1xuICAgICAgICAnaW5wdXQnOiBpbnB1dCxcbiAgICAgICAgJ2V4cGVyaWVuY2VLZXknOiB0aGlzLl9leHBlcmllbmNlS2V5LFxuICAgICAgICAndmVyc2lvbic6IHRoaXMuX2V4cGVyaWVuY2VWZXJzaW9uLFxuICAgICAgICAnZmlsdGVycyc6IGZpbHRlcixcbiAgICAgICAgJ2ZhY2V0RmlsdGVycyc6IGZhY2V0RmlsdGVyLFxuICAgICAgICAndmVydGljYWxLZXknOiB2ZXJ0aWNhbEtleSxcbiAgICAgICAgJ2xpbWl0JzogbGltaXQsXG4gICAgICAgICdvZmZzZXQnOiBvZmZzZXQsXG4gICAgICAgICdsb2NhdGlvbic6IGdlb2xvY2F0aW9uID8gYCR7Z2VvbG9jYXRpb24ubGF0fSwke2dlb2xvY2F0aW9uLmxuZ31gIDogbnVsbCxcbiAgICAgICAgJ3JhZGl1cyc6IGdlb2xvY2F0aW9uID8gZ2VvbG9jYXRpb24ucmFkaXVzIDogbnVsbCxcbiAgICAgICAgJ3F1ZXJ5SWQnOiBpZCxcbiAgICAgICAgJ3JldHJpZXZlRmFjZXRzJzogaXNEeW5hbWljRmlsdGVyc0VuYWJsZWQsXG4gICAgICAgICdsb2NhbGUnOiB0aGlzLl9sb2NhbGUsXG4gICAgICAgICdza2lwU3BlbGxDaGVjayc6IHNraXBTcGVsbENoZWNrLFxuICAgICAgICAncXVlcnlUcmlnZ2VyJzogcXVlcnlUcmlnZ2VyLFxuICAgICAgICAnc2Vzc2lvblRyYWNraW5nRW5hYmxlZCc6IHNlc3Npb25UcmFja2luZ0VuYWJsZWQsXG4gICAgICAgICdzb3J0QnlzJzogc29ydEJ5c1xuICAgICAgfVxuICAgIH07XG4gICAgbGV0IHJlcXVlc3QgPSBuZXcgQXBpUmVxdWVzdChyZXF1ZXN0Q29uZmlnLCB7IGdldFN0YXRlOiAoKSA9PiBzZXNzaW9uVHJhY2tpbmdFbmFibGVkIH0pO1xuXG4gICAgcmV0dXJuIHJlcXVlc3QuZ2V0KClcbiAgICAgIC50aGVuKHJlc3BvbnNlID0+IHJlc3BvbnNlLmpzb24oKSk7XG4gIH1cblxuICAvKiogQGluaGVyaXRkb2MgKi9cbiAgdW5pdmVyc2FsU2VhcmNoIChxdWVyeVN0cmluZywgcGFyYW1zKSB7XG4gICAgY29uc3QgcmVxdWVzdENvbmZpZyA9IHtcbiAgICAgIGVuZHBvaW50OiAnL3YyL2FjY291bnRzL21lL2Fuc3dlcnMvcXVlcnknLFxuICAgICAgYXBpS2V5OiB0aGlzLl9hcGlLZXksXG4gICAgICB2ZXJzaW9uOiB0aGlzLl92ZXJzaW9uLFxuICAgICAgZW52aXJvbm1lbnQ6IHRoaXMuX2Vudmlyb25tZW50LFxuICAgICAgcGFyYW1zOiB7XG4gICAgICAgICdpbnB1dCc6IHF1ZXJ5U3RyaW5nLFxuICAgICAgICAnZXhwZXJpZW5jZUtleSc6IHRoaXMuX2V4cGVyaWVuY2VLZXksXG4gICAgICAgICdsb2NhdGlvbic6IHBhcmFtcy5nZW9sb2NhdGlvbiA/IGAke3BhcmFtcy5nZW9sb2NhdGlvbi5sYXR9LCR7cGFyYW1zLmdlb2xvY2F0aW9uLmxuZ31gIDogbnVsbCxcbiAgICAgICAgJ3JhZGl1cyc6IHBhcmFtcy5nZW9sb2NhdGlvbiA/IHBhcmFtcy5nZW9sb2NhdGlvbi5yYWRpdXMgOiBudWxsLFxuICAgICAgICAndmVyc2lvbic6IHRoaXMuX2V4cGVyaWVuY2VWZXJzaW9uLFxuICAgICAgICAnbG9jYWxlJzogdGhpcy5fbG9jYWxlLFxuICAgICAgICAnc2tpcFNwZWxsQ2hlY2snOiBwYXJhbXMuc2tpcFNwZWxsQ2hlY2ssXG4gICAgICAgICdxdWVyeVRyaWdnZXInOiBwYXJhbXMucXVlcnlUcmlnZ2VyXG4gICAgICB9XG4gICAgfTtcbiAgICBsZXQgcmVxdWVzdCA9IG5ldyBBcGlSZXF1ZXN0KHJlcXVlc3RDb25maWcsIHsgZ2V0U3RhdGU6ICgpID0+IHBhcmFtcy5zZXNzaW9uVHJhY2tpbmdFbmFibGVkIH0pO1xuXG4gICAgcmV0dXJuIHJlcXVlc3QuZ2V0KClcbiAgICAgIC50aGVuKHJlc3BvbnNlID0+IHJlc3BvbnNlLmpzb24oKSk7XG4gIH1cbn1cbiIsIi8qKiBAbW9kdWxlIEFuYWx5dGljc1JlcG9ydGVyICovXG5cbmltcG9ydCBBbmFseXRpY3NFdmVudCBmcm9tICcuL2FuYWx5dGljc2V2ZW50JztcbmltcG9ydCB7IEFuc3dlcnNBbmFseXRpY3NFcnJvciB9IGZyb20gJy4uL2Vycm9ycy9lcnJvcnMnO1xuaW1wb3J0IHsgUFJPRFVDVElPTiB9IGZyb20gJy4uL2NvbnN0YW50cyc7XG5pbXBvcnQgSHR0cFJlcXVlc3RlciBmcm9tICcuLi9odHRwL2h0dHByZXF1ZXN0ZXInO1xuaW1wb3J0IHsgZ2V0QW5hbHl0aWNzVXJsIH0gZnJvbSAnLi4vdXRpbHMvdXJsdXRpbHMnO1xuXG4vKiogQHR5cGVkZWYge2ltcG9ydCgnLi4vc2VydmljZXMvYW5hbHl0aWNzcmVwb3J0ZXJzZXJ2aWNlJykuZGVmYXVsdH0gQW5hbHl0aWNzUmVwb3J0ZXJTZXJ2aWNlICovXG5cbi8qKlxuICogQ2xhc3MgZm9yIHJlcG9ydGluZyBhbmFseXRpY3MgZXZlbnRzIHRvIHRoZSBzZXJ2ZXIgdmlhIEhUVFBcbiAqXG4gKiBAaW1wbGVtZW50cyB7QW5hbHl0aWNzUmVwb3J0ZXJTZXJ2aWNlfVxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBbmFseXRpY3NSZXBvcnRlciB7XG4gIGNvbnN0cnVjdG9yIChcbiAgICBleHBlcmllbmNlS2V5LFxuICAgIGV4cGVyaWVuY2VWZXJzaW9uLFxuICAgIGJ1c2luZXNzSWQsXG4gICAgZ2xvYmFsT3B0aW9ucyA9IHt9LFxuICAgIGVudmlyb25tZW50ID0gUFJPRFVDVElPTikge1xuICAgIC8qKlxuICAgICAqIFRoZSBpbnRlcm5hbCBidXNpbmVzcyBpZGVudGlmaWVyIHVzZWQgZm9yIHJlcG9ydGluZ1xuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy5fYnVzaW5lc3NJZCA9IGJ1c2luZXNzSWQ7XG5cbiAgICAvKipcbiAgICAgKiBPcHRpb25zIHRvIGluY2x1ZGUgd2l0aCBldmVyeSBhbmFseXRpYyBldmVudCByZXBvcnRlZCB0byB0aGUgc2VydmVyXG4gICAgICogQHR5cGUge29iamVjdH1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuX2dsb2JhbE9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCBnbG9iYWxPcHRpb25zLCB7IGV4cGVyaWVuY2VLZXkgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgZW52aXJvbm1lbnQgb2YgdGhlIEFuc3dlcnMgZXhwZXJpZW5jZVxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLl9lbnZpcm9ubWVudCA9IGVudmlyb25tZW50O1xuXG4gICAgLyoqXG4gICAgICogQmFzZSBVUkwgZm9yIHRoZSBhbmFseXRpY3MgQVBJXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuX2Jhc2VVcmwgPSBnZXRBbmFseXRpY3NVcmwodGhpcy5fZW52aXJvbm1lbnQpO1xuXG4gICAgLyoqXG4gICAgICogQm9vbGVhbiBpbmRpY2F0aW5nIGlmIG9wdGVkIGluIG9yIG91dCBvZiBjb252ZXJzaW9uIHRyYWNraW5nXG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLl9jb252ZXJzaW9uVHJhY2tpbmdFbmFibGVkID0gZmFsc2U7XG5cbiAgICBpZiAoZXhwZXJpZW5jZVZlcnNpb24pIHtcbiAgICAgIHRoaXMuX2dsb2JhbE9wdGlvbnMuZXhwZXJpZW5jZVZlcnNpb24gPSBleHBlcmllbmNlVmVyc2lvbjtcbiAgICB9XG4gIH1cblxuICBnZXRRdWVyeUlkICgpIHtcbiAgICByZXR1cm4gdGhpcy5fZ2xvYmFsT3B0aW9ucy5xdWVyeUlkO1xuICB9XG5cbiAgc2V0UXVlcnlJZCAocXVlcnlJZCkge1xuICAgIHRoaXMuX2dsb2JhbE9wdGlvbnMucXVlcnlJZCA9IHF1ZXJ5SWQ7XG4gIH1cblxuICAvKiogQGluaGVyaXRkb2MgKi9cbiAgcmVwb3J0IChldmVudCkge1xuICAgIGxldCBjb29raWVEYXRhID0ge307XG4gICAgaWYgKHRoaXMuX2NvbnZlcnNpb25UcmFja2luZ0VuYWJsZWQgJiYgdHlwZW9mIHl0YWcgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHl0YWcoJ29wdGluJywgdHJ1ZSk7XG4gICAgICBjb29raWVEYXRhID0geXRhZygneWZwYycsIG51bGwpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5fY29udmVyc2lvblRyYWNraW5nRW5hYmxlZCkge1xuICAgICAgdGhyb3cgbmV3IEFuc3dlcnNBbmFseXRpY3NFcnJvcignVHJpZWQgdG8gZW5hYmxlIGNvbnZlcnNpb24gdHJhY2tpbmcgd2l0aG91dCBpbmNsdWRpbmcgeXRhZycpO1xuICAgIH1cblxuICAgIGlmICghKGV2ZW50IGluc3RhbmNlb2YgQW5hbHl0aWNzRXZlbnQpKSB7XG4gICAgICB0aHJvdyBuZXcgQW5zd2Vyc0FuYWx5dGljc0Vycm9yKCdUcmllZCB0byBzZW5kIGludmFsaWQgYW5hbHl0aWNzIGV2ZW50JywgZXZlbnQpO1xuICAgIH1cblxuICAgIGV2ZW50LmFkZE9wdGlvbnModGhpcy5fZ2xvYmFsT3B0aW9ucyk7XG5cbiAgICByZXR1cm4gbmV3IEh0dHBSZXF1ZXN0ZXIoKS5iZWFjb24oXG4gICAgICBgJHt0aGlzLl9iYXNlVXJsfS9yZWFsdGltZWFuYWx5dGljcy9kYXRhL2Fuc3dlcnMvJHt0aGlzLl9idXNpbmVzc0lkfWAsXG4gICAgICB7IGRhdGE6IGV2ZW50LnRvQXBpRXZlbnQoKSwgLi4uY29va2llRGF0YSB9XG4gICAgKTtcbiAgfVxuXG4gIC8qKiBAaW5oZXJpdGRvYyAqL1xuICBzZXRDb252ZXJzaW9uVHJhY2tpbmdFbmFibGVkIChpc0VuYWJsZWQpIHtcbiAgICB0aGlzLl9jb252ZXJzaW9uVHJhY2tpbmdFbmFibGVkID0gaXNFbmFibGVkO1xuICAgIHRoaXMuX2Jhc2VVcmwgPSBnZXRBbmFseXRpY3NVcmwodGhpcy5fZW52aXJvbm1lbnQsIGlzRW5hYmxlZCk7XG4gIH1cbn1cbiIsIi8qKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi9zZXJ2aWNlcy9hbmFseXRpY3NyZXBvcnRlcnNlcnZpY2UnKS5kZWZhdWx0fSBBbmFseXRpY3NSZXBvcnRlclNlcnZpY2UgKi9cblxuLyoqXG4gKiBAaW1wbGVtZW50cyB7QW5hbHl0aWNzUmVwb3J0ZXJTZXJ2aWNlfVxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBOb29wQW5hbHl0aWNzUmVwb3J0ZXIge1xuICAvKiogQGluaGVyaXRkb2MgKi9cbiAgcmVwb3J0IChldmVudCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLyoqIEBpbmhlcml0ZG9jICovXG4gIHNldENvbnZlcnNpb25UcmFja2luZ0VuYWJsZWQgKGlzRW5hYmxlZCkge31cbn1cbiIsIi8qKiBAbW9kdWxlIE1vZHVsZURhdGEgKi9cblxuaW1wb3J0IEV2ZW50RW1pdHRlciBmcm9tICcuLi9ldmVudGVtaXR0ZXIvZXZlbnRlbWl0dGVyJztcblxuLyoqXG4gKiBNb2R1bGVEYXRhIGlzIHVzZWQgYXMgYSBnZW5lcmljIG1vZGVsIGZvciBTdG9yYWdlLlxuICogVHlwaWNhbGx5IGFuIGluc3RhbmNlIG9mIE1vZHVsZURhdGEgcG93ZXJzIGEgc2luZ2xlIGNvbXBvbmVudC5cblxuICogQSBkYXRhIG1vZGVsIHRoYXQgZXhwb3NlcyBhbiBldmVudCBlbWl0dGVyIGludGVyZmFjZS5cbiAqIEBleHRlbmRzIEV2ZW50RW1pdHRlclxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNb2R1bGVEYXRhIGV4dGVuZHMgRXZlbnRFbWl0dGVyIHtcbiAgY29uc3RydWN0b3IgKGlkLCBkYXRhID0ge30pIHtcbiAgICBzdXBlcigpO1xuXG4gICAgdGhpcy5faWQgPSBpZDtcbiAgICB0aGlzLl9oaXN0b3J5ID0gW107XG4gICAgdGhpcy5fZGF0YSA9IGRhdGE7XG4gICAgdGhpcy5zZXQoZGF0YSk7XG4gIH1cblxuICAvKipcbiAgICogcmVwbGFjZXMgdGhlIGN1cnJlbnRseSBoZWxkIGRhdGEgd2l0aCB0aGUgZ2l2ZW4gZGF0YVxuICAgKiBAcGFyYW0geyp9IGRhdGEgdGhlIGRhdGEgdG8gcmVwbGFjZSB0aGUgY3VycmVudCBkYXRhXG4gICAqL1xuICBzZXQgKGRhdGEpIHtcbiAgICB0aGlzLmNhcHR1cmVQcmV2aW91cygpO1xuXG4gICAgaWYgKHR5cGVvZiBkYXRhICE9PSAnb2JqZWN0JyB8fCBBcnJheS5pc0FycmF5KGRhdGEpIHx8IE9iamVjdC5rZXlzKGRhdGEpLmxlbmd0aCAhPT0gT2JqZWN0LmtleXModGhpcy5fZGF0YSkubGVuZ3RoKSB7XG4gICAgICB0aGlzLl9kYXRhID0gZGF0YTtcbiAgICAgIHRoaXMuZW1pdCgndXBkYXRlJywgdGhpcy5fZGF0YSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gY2hlY2sgZm9yIHNoYWxsb3cgZXF1YWxpdHlcbiAgICBmb3IgKGNvbnN0IGtleSBvZiBPYmplY3Qua2V5cyhkYXRhKSkge1xuICAgICAgaWYgKHRoaXMuX2RhdGFba2V5XSAhPT0gZGF0YVtrZXldKSB7XG4gICAgICAgIHRoaXMuX2RhdGEgPSBkYXRhO1xuICAgICAgICB0aGlzLmVtaXQoJ3VwZGF0ZScsIHRoaXMuX2RhdGEpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgY2FwdHVyZVByZXZpb3VzICgpIHtcbiAgICBpZiAodGhpcy5faGlzdG9yeSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLl9oaXN0b3J5ID0gW107XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2hpc3RvcnkubGVuZ3RoICsgMSA+IDUpIHtcbiAgICAgIHRoaXMuX2hpc3Rvcnkuc2hpZnQoKTtcbiAgICB9XG5cbiAgICAvLyBJZiBkYXRhIGlzIGV2ZXIgdW5kZWZpbmVkLCB3ZSBkZWZhdWx0IHRvIGVtcHR5IG9iamVjdFxuICAgIHRoaXMuX2hpc3RvcnkucHVzaChKU09OLnN0cmluZ2lmeSh0aGlzLl9kYXRhIHx8IHt9KSk7XG4gIH1cblxuICB1bmRvICgpIHtcbiAgICBsZXQgcHJldmlvdXMgPSB7fTtcbiAgICBpZiAodGhpcy5fcHJldmlvdXMubGVuZ3RoID4gMCkge1xuICAgICAgcHJldmlvdXMgPSBKU09OLnBhcnNlKHRoaXMuX3ByZXZpb3VzLnBvcCgpKTtcbiAgICB9XG5cbiAgICB0aGlzLl9kYXRhLnNldChwcmV2aW91cyk7XG4gIH1cblxuICByYXcgKCkge1xuICAgIHJldHVybiB0aGlzLl9kYXRhO1xuICB9XG59XG4iLCIvKiogQG1vZHVsZSBHbG9iYWxTdG9yYWdlICovXG5cbmltcG9ydCBNb2R1bGVEYXRhIGZyb20gJy4vbW9kdWxlZGF0YSc7XG5pbXBvcnQgeyBBbnN3ZXJzU3RvcmFnZUVycm9yIH0gZnJvbSAnLi4vZXJyb3JzL2Vycm9ycyc7XG5pbXBvcnQgU3RvcmFnZUtleXMgZnJvbSAnLi9zdG9yYWdla2V5cyc7XG5cbi8qKlxuICogU3RvcmFnZSBpcyBhIGNvbnRhaW5lciBhcm91bmQgYXBwbGljYXRpb24gc3RhdGUuXG4gKiBJdCBleHBvc2VzIGFuIGludGVyZmFjZSBmb3IgQ1JVRCBvcGVyYXRpb25zIGFzIHdlbGwgYXMgbGlzdGVuaW5nXG4gKiBmb3Igc3RhdGVmdWwgY2hhbmdlcy5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgR2xvYmFsU3RvcmFnZSB7XG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICB0aGlzLl9tb2R1bGVEYXRhQ29udGFpbmVyID0ge307XG4gICAgdGhpcy5fZnV0dXJlTGlzdGVuZXJzID0ge307XG4gIH1cblxuICAvKipcbiAgICogU2V0IHRoZSBkYXRhIGluIHN0b3JhZ2Ugd2l0aCB0aGUgZ2l2ZW4ga2V5IHRvIHRoZSBwcm92aWRlZCBkYXRhLFxuICAgKiBjb21wbGV0ZWx5IG92ZXJ3cml0aW5nIGFueSBleGlzdGluZyBkYXRhLlxuICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IHRoZSBzdG9yYWdlIGtleSB0byBzZXRcbiAgICogQHBhcmFtIHsqfSBkYXRhIHRoZSBkYXRhIHRvIHNldFxuICAgKi9cbiAgc2V0IChrZXksIGRhdGEpIHtcbiAgICB0aGlzLl9pbml0RGF0YUNvbnRhaW5lcihrZXksIGRhdGEpO1xuICAgIHRoaXMuX21vZHVsZURhdGFDb250YWluZXJba2V5XS5zZXQoZGF0YSk7XG4gIH1cblxuICAvKipcbiAgICogQWRkIGFsbCBrZXkvdmFsdWUgcGFpcnMgaW4gdGhlIHByb3ZpZGVkIG1hcCB0byB0aGUgc3RvcmFnZVxuICAgKiBAcGFyYW0geyp9IGRhdGEgVGhlIGtleS92YWx1ZSBwYWlycyB0byBzZXQgaW4gdGhlIHN0b3JhZ2VcbiAgICovXG4gIHNldEFsbCAoZGF0YSkge1xuICAgIGZvciAoY29uc3QgW2tleSwgdmFsXSBvZiBPYmplY3QuZW50cmllcyhkYXRhKSkge1xuICAgICAgaWYgKGtleSA9PT0gU3RvcmFnZUtleXMuUVVFUlkpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICB0aGlzLnNldChrZXksIHZhbCk7XG4gICAgfVxuXG4gICAgLy8gVXBkYXRlIHF1ZXJ5IGxhc3Qgc2luY2UgaXQgdHJpZ2dlcnMgYSBzZWFyY2hcbiAgICAvLyBUT0RPOiBtb3ZlIGxpc3RlbmVycyB1cCBzbyBhbGwgb2Ygc3RvcmFnZSBjYW4gYmUgdXBkYXRlZCBhdCB0aGUgc2FtZSB0aW1lXG4gICAgaWYgKGRhdGFbU3RvcmFnZUtleXMuUVVFUlldKSB7XG4gICAgICB0aGlzLnNldChTdG9yYWdlS2V5cy5RVUVSWSwgZGF0YVtTdG9yYWdlS2V5cy5RVUVSWV0pO1xuICAgIH1cbiAgfVxuXG4gIF9pbml0RGF0YUNvbnRhaW5lciAoa2V5LCBkYXRhKSB7XG4gICAgaWYgKGtleSA9PT0gdW5kZWZpbmVkIHx8IGtleSA9PT0gbnVsbCB8fCB0eXBlb2Yga2V5ICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IEFuc3dlcnNTdG9yYWdlRXJyb3IoJ0ludmFsaWQgc3RvcmFnZSBrZXkgcHJvdmlkZWQnLCBrZXksIGRhdGEpO1xuICAgIH1cbiAgICBpZiAoZGF0YSA9PT0gdW5kZWZpbmVkIHx8IGRhdGEgPT09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBBbnN3ZXJzU3RvcmFnZUVycm9yKCdObyBkYXRhIHByb3ZpZGVkJywga2V5LCBkYXRhKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fbW9kdWxlRGF0YUNvbnRhaW5lcltrZXldID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMuX21vZHVsZURhdGFDb250YWluZXJba2V5XSA9IG5ldyBNb2R1bGVEYXRhKGtleSk7XG4gICAgICB0aGlzLl9hcHBseUZ1dHVyZUxpc3RlbmVycyhrZXkpO1xuICAgIH1cbiAgfVxuXG4gIGdldFN0YXRlIChtb2R1bGVJZCkge1xuICAgIGlmICh0aGlzLl9tb2R1bGVEYXRhQ29udGFpbmVyW21vZHVsZUlkXSkge1xuICAgICAgcmV0dXJuIHRoaXMuX21vZHVsZURhdGFDb250YWluZXJbbW9kdWxlSWRdLnJhdygpO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGdldEFsbCAoa2V5KSB7XG4gICAgY29uc3QgZGF0YSA9IFtdO1xuICAgIGZvciAoY29uc3QgZGF0YUtleSBvZiBPYmplY3Qua2V5cyh0aGlzLl9tb2R1bGVEYXRhQ29udGFpbmVyKSkge1xuICAgICAgaWYgKGRhdGFLZXkuc3RhcnRzV2l0aChrZXkpICYmIHRoaXMuX21vZHVsZURhdGFDb250YWluZXJbZGF0YUtleV0ucmF3KCkgIT09IG51bGwpIHtcbiAgICAgICAgZGF0YS5wdXNoKHRoaXMuX21vZHVsZURhdGFDb250YWluZXJbZGF0YUtleV0ucmF3KCkpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmUgdGhlIGRhdGEgaW4gc3RvcmFnZSB3aXRoIHRoZSBnaXZlbiBrZXkgdG8gdGhlIHByb3ZpZGVkIGRhdGEsXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgdGhlIHN0b3JhZ2Uga2V5IHRvIGRlbGV0ZVxuICAgKi9cbiAgZGVsZXRlIChrZXkpIHtcbiAgICAvLyBOb3RlOiBEbyB3ZSBuZWVkIHRvIGNsZWFuIHVwIGxpc3RlbmVycyBoZXJlP1xuICAgIGRlbGV0ZSB0aGlzLl9tb2R1bGVEYXRhQ29udGFpbmVyW2tleV07XG4gIH1cblxuICBvbiAoZXZ0LCBtb2R1bGVJZCwgY2IpIHtcbiAgICBsZXQgbW9kdWxlRGF0YSA9IHRoaXMuX21vZHVsZURhdGFDb250YWluZXJbbW9kdWxlSWRdO1xuICAgIGlmIChtb2R1bGVEYXRhID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmICh0aGlzLl9mdXR1cmVMaXN0ZW5lcnNbbW9kdWxlSWRdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhpcy5fZnV0dXJlTGlzdGVuZXJzW21vZHVsZUlkXSA9IFtdO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9mdXR1cmVMaXN0ZW5lcnNbbW9kdWxlSWRdLnB1c2goe1xuICAgICAgICBldmVudDogZXZ0LFxuICAgICAgICBjYjogY2JcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5fbW9kdWxlRGF0YUNvbnRhaW5lclttb2R1bGVJZF0ub24oZXZ0LCBjYik7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBvZmYgKGV2dCwgbW9kdWxlSWQsIGNiKSB7XG4gICAgbGV0IG1vZHVsZURhdGEgPSB0aGlzLl9tb2R1bGVEYXRhQ29udGFpbmVyW21vZHVsZUlkXTtcbiAgICBpZiAobW9kdWxlRGF0YSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAodGhpcy5fZnV0dXJlTGlzdGVuZXJzW21vZHVsZUlkXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRoaXMuX2Z1dHVyZUxpc3RlbmVyc1ttb2R1bGVJZF0ucG9wKCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHRoaXMuX21vZHVsZURhdGFDb250YWluZXJbbW9kdWxlSWRdLm9mZihldnQsIGNiKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIF9hcHBseUZ1dHVyZUxpc3RlbmVycyAobW9kdWxlSWQpIHtcbiAgICBsZXQgZnV0dXJlcyA9IHRoaXMuX2Z1dHVyZUxpc3RlbmVyc1ttb2R1bGVJZF07XG4gICAgaWYgKCFmdXR1cmVzKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmdXR1cmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBsZXQgZnV0dXJlID0gZnV0dXJlc1tpXTtcbiAgICAgIHRoaXMub24oZnV0dXJlLmV2ZW50LCBtb2R1bGVJZCwgZnV0dXJlLmNiKTtcbiAgICB9XG4gICAgZGVsZXRlIHRoaXMuX2Z1dHVyZUxpc3RlbmVyc1ttb2R1bGVJZF07XG4gIH1cbn1cbiIsIi8qKiBAbW9kdWxlICovXG5cbmV4cG9ydCB7IGRlZmF1bHQgYXMgU2VhcmNoQXBpIH0gZnJvbSAnLi9zZWFyY2gvc2VhcmNoYXBpJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgQW5hbHl0aWNzUmVwb3J0ZXIgfSBmcm9tICcuL2FuYWx5dGljcy9hbmFseXRpY3NyZXBvcnRlcic7XG5leHBvcnQgeyBkZWZhdWx0IGFzIE5vb3BBbmFseXRpY3NSZXBvcnRlciB9IGZyb20gJy4vYW5hbHl0aWNzL25vb3BhbmFseXRpY3NyZXBvcnRlcic7XG5leHBvcnQgeyBkZWZhdWx0IGFzIE1vZHVsZURhdGEgfSBmcm9tICcuL3N0b3JhZ2UvbW9kdWxlZGF0YSc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIFN0b3JhZ2UgfSBmcm9tICcuL3N0b3JhZ2UvZ2xvYmFsc3RvcmFnZSc7XG4iLCIvKiogQG1vZHVsZSBDb21wb25lbnQgKi9cblxuaW1wb3J0IHsgUmVuZGVyZXJzIH0gZnJvbSAnLi4vcmVuZGVyaW5nL2NvbnN0JztcblxuaW1wb3J0IERPTSBmcm9tICcuLi9kb20vZG9tJztcbmltcG9ydCBTdGF0ZSBmcm9tICcuL3N0YXRlJztcbmltcG9ydCB7IEFuYWx5dGljc1JlcG9ydGVyIH0gZnJvbSAnLi4vLi4vY29yZSc7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbmltcG9ydCBBbmFseXRpY3NFdmVudCBmcm9tICcuLi8uLi9jb3JlL2FuYWx5dGljcy9hbmFseXRpY3NldmVudCc7XG5pbXBvcnQgeyBBbnN3ZXJzQ29tcG9uZW50RXJyb3IgfSBmcm9tICcuLi8uLi9jb3JlL2Vycm9ycy9lcnJvcnMnO1xuXG4vKipcbiAqIENvbXBvbmVudCBpcyBhbiBhYnN0cmFjdGlvbiB0aGF0IGVuY2Fwc3VsYXRlcyBzdGF0ZSwgYmVoYXZpb3IsXG4gKiBhbmQgdmlldyBmb3IgYSBwYXJ0aWN1bGFyIGNodW5rIG9mIGZ1bmN0aW9uYWxpdHkgb24gdGhlIHBhZ2UuXG4gKlxuICogVGhlIEFQSSBleHBvc2VzIGV2ZW50IGxpZmUgY3ljbGUgaG9va3MgZm9yIHdoZW4gdGhpbmdzIGFyZSByZW5kZXJlZCxcbiAqIG1vdW50ZWQsIGNyZWF0ZWQsIGV0Yy5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IgKGNvbmZpZyA9IHt9LCBzeXN0ZW1Db25maWcgPSB7fSkge1xuICAgIHRoaXMubW9kdWxlSWQgPSBudWxsO1xuXG4gICAgLyoqXG4gICAgICogVW5pcXVlIG5hbWUgb2YgdGhpcyBjb21wb25lbnQgaW5zdGFuY2VcbiAgICAgKiBVc2VkIHRvIGRpc3Rpbmd1aXNoIGJldHdlZW4gb3RoZXIgY29tcG9uZW50cyBvZiB0aGUgc2FtZSB0eXBlXG4gICAgICogQHR5cGUge1N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLm5hbWUgPSBjb25maWcubmFtZSB8fCB0aGlzLmNvbnN0cnVjdG9yLnR5cGU7XG5cbiAgICAvKipcbiAgICAgKiBDYWNoZSB0aGUgb3B0aW9ucyBzbyB0aGF0IHdlIGNhbiBwcm9wb2dhdGUgcHJvcGVybHkgdG8gY2hpbGQgY29tcG9uZW50c1xuICAgICAqIEB0eXBlIHtPYmplY3R9XG4gICAgICovXG4gICAgdGhpcy5fY29uZmlnID0gY29uZmlnO1xuXG4gICAgLyoqXG4gICAgICogQW4gaWRlbnRpZmllciB1c2VkIHRvIGNsYXNzaWZ5IHRoZSB0eXBlIG9mIGNvbXBvbmVudC5cbiAgICAgKiBUaGUgY29tcG9uZW50IG1hbmFnZXIgdXNlcyB0aGlzIGluZm9ybWF0aW9uIGluIG9yZGVyIHRvIHBlcnNpc3QgYW5kIG9yZ2FuaXplIGNvbXBvbmVudHNcbiAgICAgKiBAdHlwZSB7c3RyaW5nfENvbXBvbmVudFR5cGV9XG4gICAgICovXG4gICAgdGhpcy5fdHlwZSA9IHRoaXMuY29uc3RydWN0b3IubmFtZTtcblxuICAgIC8qKlxuICAgICAqIEEgbG9jYWwgcmVmZXJlbmNlIHRvIHRoZSBwYXJlbnQgY29tcG9uZW50LCBpZiBleGlzdHNcbiAgICAgKiBAdHlwZSB7Q29tcG9uZW50fVxuICAgICAqL1xuICAgIHRoaXMuX3BhcmVudENvbnRhaW5lciA9IGNvbmZpZy5wYXJlbnRDb250YWluZXIgfHwgbnVsbDtcblxuICAgIC8qKlxuICAgICAqIEEgY29udGFpbmVyIGZvciBhbGwgdGhlIGNoaWxkIGNvbXBvbmVudHNcbiAgICAgKiBAdHlwZSB7Q29tcG9uZW50W119XG4gICAgICovXG4gICAgdGhpcy5fY2hpbGRyZW4gPSBbXTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBzdGF0ZSAoZGF0YSkgb2YgdGhlIGNvbXBvbmVudCB0byBiZSBwcm92aWRlZCB0byB0aGUgdGVtcGxhdGUgZm9yIHJlbmRlcmluZ1xuICAgICAqIEB0eXBlIHtvYmplY3R9XG4gICAgICovXG4gICAgdGhpcy5fc3RhdGUgPSBuZXcgU3RhdGUoY29uZmlnLnN0YXRlKTtcblxuICAgIC8qKlxuICAgICAqIFRPRE8oYmlsbHkpIFRoaXMgc2hvdWxkIGJlICdzZXJ2aWNlcydcbiAgICAgKi9cbiAgICB0aGlzLmNvcmUgPSBzeXN0ZW1Db25maWcuY29yZSB8fCBudWxsO1xuXG4gICAgLyoqXG4gICAgICogQSBsb2NhbCByZWZlcmVuY2UgdG8gdGhlIGNvbXBvbmVudCBtYW5hZ2VyLCB3aGljaCBjb250YWlucyBhbGwgb2YgdGhlIGNvbXBvbmVudCBjbGFzc2VzXG4gICAgICogZWxpZ2libGUgdG8gYmUgY3JlYXRlZFxuICAgICAqIEB0eXBlIHtDb21wb25lbnRNYW5hZ2VyfVxuICAgICAqL1xuICAgIHRoaXMuY29tcG9uZW50TWFuYWdlciA9IHN5c3RlbUNvbmZpZy5jb21wb25lbnRNYW5hZ2VyIHx8IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBBIGxvY2FsIHJlZmVyZW5jZSB0byB0aGUgYW5hbHl0aWNzIHJlcG9ydGVyLCB1c2VkIHRvIHJlcG9ydCBldmVudHMgZm9yIHRoaXMgY29tcG9uZW50XG4gICAgICogQHR5cGUge0FuYWx5dGljc1JlcG9ydGVyfVxuICAgICAqL1xuICAgIHRoaXMuYW5hbHl0aWNzUmVwb3J0ZXIgPSBzeXN0ZW1Db25maWcuYW5hbHl0aWNzUmVwb3J0ZXIgfHwgbnVsbDtcblxuICAgIC8qKlxuICAgICAqIE9wdGlvbnMgdG8gaW5jbHVkZSB3aXRoIGFsbCBhbmFseXRpYyBldmVudHMgc2VudCBieSB0aGlzIGNvbXBvbmVudFxuICAgICAqIEB0eXBlIHtvYmplY3R9XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLl9hbmFseXRpY3NPcHRpb25zID0gY29uZmlnLmFuYWx5dGljc09wdGlvbnMgfHwge307XG5cbiAgICAvKipcbiAgICAgKiBBIHJlZmVyZW5jZSB0byB0aGUgRE9NIG5vZGUgdGhhdCB0aGUgY29tcG9uZW50IHdpbGwgYmUgYXBwZW5kZWQgdG8gd2hlbiBtb3VudGVkL3JlbmRlcmVkLlxuICAgICAqIEB0eXBlIHtIVE1MRWxlbWVudH1cbiAgICAgKi9cbiAgICBpZiAodGhpcy5fcGFyZW50Q29udGFpbmVyID09PSBudWxsKSB7XG4gICAgICBpZiAodHlwZW9mIGNvbmZpZy5jb250YWluZXIgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRoaXMuX2NvbnRhaW5lciA9IERPTS5xdWVyeShjb25maWcuY29udGFpbmVyKSB8fCBudWxsO1xuICAgICAgICBpZiAodGhpcy5fY29udGFpbmVyID09PSBudWxsKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgZmluZCBjb250YWluZXIgRE9NIG5vZGU6ICcgKyBjb25maWcuY29udGFpbmVyKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9jb250YWluZXIgPSBET00ucXVlcnkodGhpcy5fcGFyZW50Q29udGFpbmVyLCBjb25maWcuY29udGFpbmVyKTtcblxuICAgICAgLy8gSWYgd2UgaGF2ZSBhIHBhcmVudCwgYW5kIHRoZSBjb250YWluZXIgaXMgbWlzc2luZyBmcm9tIHRoZSBET00sXG4gICAgICAvLyB3ZSBjb25zdHJ1Y3QgdGhlIGNvbnRhaW5lciBhbmQgYXBwZW5kIGl0IHRvIHRoZSBwYXJlbnRcbiAgICAgIGlmICh0aGlzLl9jb250YWluZXIgPT09IG51bGwpIHtcbiAgICAgICAgdGhpcy5fY29udGFpbmVyID0gRE9NLmNyZWF0ZUVsKCdkaXYnLCB7XG4gICAgICAgICAgY2xhc3M6IGNvbmZpZy5jb250YWluZXIuc3Vic3RyaW5nKDEsIGNvbmZpZy5jb250YWluZXIubGVuZ3RoKVxuICAgICAgICB9KTtcbiAgICAgICAgRE9NLmFwcGVuZCh0aGlzLl9wYXJlbnRDb250YWluZXIsIHRoaXMuX2NvbnRhaW5lcik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBjdXN0b20gY2xhc3MgdG8gYmUgYXBwbGllZCB0byB7dGhpcy5fY29udGFpbmVyfSBub2RlXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLl9jbGFzc05hbWUgPSBjb25maWcuY2xhc3MgfHwgJ2NvbXBvbmVudCc7XG5cbiAgICAvKipcbiAgICAgKiBBIGN1c3RvbSByZW5kZXIgZnVuY3Rpb24gdG8gYmUgdXNlZCBpbnN0ZWFkIG9mIHVzaW5nIHRoZSBkZWZhdWx0IHJlbmRlcmVyXG4gICAgICogQHR5cGUge1JlbmRlcmVyfVxuICAgICAqL1xuICAgIHRoaXMuX3JlbmRlciA9IGNvbmZpZy5yZW5kZXIgfHwgbnVsbDtcblxuICAgIC8qKlxuICAgICAqIEEgbG9jYWwgcmVmZXJlbmNlIHRvIHRoZSBkZWZhdWx0IHtSZW5kZXJlcn0gdGhhdCB3aWxsIGJlIHVzZWQgZm9yIHJlbmRlcmluZyB0aGUgdGVtcGxhdGVcbiAgICAgKiBAdHlwZSB7UmVuZGVyZXJ9XG4gICAgICovXG4gICAgdGhpcy5fcmVuZGVyZXIgPSBzeXN0ZW1Db25maWcucmVuZGVyZXIgfHwgUmVuZGVyZXJzLkhhbmRsZWJhcnM7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgdGVtcGxhdGUgc3RyaW5nIHRvIHVzZSBmb3IgcmVuZGVyaW5nIHRoZSBjb21wb25lbnRcbiAgICAgKiBJZiB0aGlzIGlzIGxlZnQgZW1wdHksIHdlIGxvb2t1cCB0aGUgdGVtcGxhdGUgdGhlIGJhc2UgdGVtcGxhdGVzIHVzaW5nIHRoZSB0ZW1wbGF0ZU5hbWVcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMuX3RlbXBsYXRlID0gY29uZmlnLnRlbXBsYXRlID8gdGhpcy5fcmVuZGVyZXIuY29tcGlsZShjb25maWcudGVtcGxhdGUpIDogbnVsbDtcblxuICAgIC8qKlxuICAgICAqIFRoZSB0ZW1wbGF0ZU5hbWUgdG8gdXNlIGZvciByZW5kZXJpbmcgdGhlIGNvbXBvbmVudC5cbiAgICAgKiBUaGlzIGlzIG9ubHkgdXNlZCBpZiBfdGVtcGxhdGUgaXMgZW1wdHkuXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLl90ZW1wbGF0ZU5hbWUgPSBjb25maWcudGVtcGxhdGVOYW1lIHx8IHRoaXMuY29uc3RydWN0b3IuZGVmYXVsdFRlbXBsYXRlTmFtZShjb25maWcpO1xuXG4gICAgLyoqXG4gICAgICogQW4gaW50ZXJuYWwgc3RhdGUgaW5kaWNhdGluZyB3aGV0aGVyIG9yIG5vdCB0aGUgY29tcG9uZW50IGhhcyBiZWVuIG1vdW50ZWQgdG8gdGhlIERPTVxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqL1xuICAgIHRoaXMuX2lzTW91bnRlZCA9IGZhbHNlO1xuXG4gICAgLyoqXG4gICAgICogQSBsb2NhbCByZWZlcmVuY2UgdG8gdGhlIGNhbGxiYWNrLCB0aGF0cyB1c2VkIHRvIHRyYW5zZm9ybSB0aGUgaW50ZXJuYWwgZGF0YVxuICAgICAqIG1vZGVscyBvZiB0aGUgY29tcG9uZW50cywgYmVmb3JlIGl0IGdldHMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50IHN0YXRlLlxuICAgICAqIEJ5IGRlZmF1bHQsIG5vIHRyYW5zZm9ybWF0aW9uIGhhcHBlbnMuXG4gICAgICogQHR5cGUge2Z1bmN0aW9ufVxuICAgICAqL1xuICAgIHRoaXMudHJhbnNmb3JtRGF0YSA9IGNvbmZpZy50cmFuc2Zvcm1EYXRhIHx8IHRoaXMudHJhbnNmb3JtRGF0YSB8fCBmdW5jdGlvbiAoKSB7fTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBhIGxvY2FsIHJlZmVyZW5jZSB0byB0aGUgY2FsbGJhY2sgdGhhdCB3aWxsIGJlIGludm9rZWQgd2hlbiBhIGNvbXBvbmVudCBpcyBjcmVhdGVkLlxuICAgICAqIEB0eXBlIHtmdW5jdGlvbn1cbiAgICAgKi9cbiAgICB0aGlzLm9uQ3JlYXRlID0gY29uZmlnLm9uQ3JlYXRlT3ZlcnJpZGUgfHwgdGhpcy5vbkNyZWF0ZSB8fCBmdW5jdGlvbiAoKSB7fTtcbiAgICB0aGlzLm9uQ3JlYXRlID0gdGhpcy5vbkNyZWF0ZS5iaW5kKHRoaXMpO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGEgbG9jYWwgcmVmZXJlbmNlIHRvIHRoZSBjYWxsYmFjayB0aGF0IHdpbGwgYmUgaW52b2tlZCB3aGVuIGEgY29tcG9uZW50IGlzIE1vdW50ZWQuXG4gICAgICogQHR5cGUge2Z1bmN0aW9ufVxuICAgICAqL1xuICAgIHRoaXMub25Nb3VudCA9IGNvbmZpZy5vbk1vdW50T3ZlcnJpZGUgfHwgdGhpcy5vbk1vdW50IHx8IGZ1bmN0aW9uICgpIHt9O1xuICAgIHRoaXMub25Nb3VudCA9IHRoaXMub25Nb3VudC5iaW5kKHRoaXMpO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGEgbG9jYWwgcmVmZXJlbmNlIHRvIHRoZSBjYWxsYmFjayB0aGF0IHdpbGwgYmUgaW52b2tlZCB3aGVuIGEgY29tcG9uZW50cyBzdGF0ZSBpcyB1cGRhdGVkLlxuICAgICAqIEB0eXBlIHtmdW5jdGlvbn1cbiAgICAgKi9cbiAgICB0aGlzLm9uVXBkYXRlID0gY29uZmlnLm9uVXBkYXRlT3ZlcnJpZGUgfHwgdGhpcy5vblVwZGF0ZSB8fCBmdW5jdGlvbiAoKSB7IH07XG4gICAgdGhpcy5vblVwZGF0ZSA9IHRoaXMub25VcGRhdGUuYmluZCh0aGlzKTtcblxuICAgIC8qKlxuICAgICAqIEEgdXNlciBwcm92aWRlZCBvbkNyZWF0ZSBjYWxsYmFja1xuICAgICAqIEB0eXBlIHtmdW5jdGlvbn1cbiAgICAgKi9cbiAgICB0aGlzLnVzZXJPbkNyZWF0ZSA9IGNvbmZpZy5vbkNyZWF0ZSB8fCBmdW5jdGlvbiAoKSB7fTtcblxuICAgIC8qKlxuICAgICAqIEEgdXNlciBwcm92aWRlZCBvbk1vdW50IGNhbGxiYWNrXG4gICAgICogQHR5cGUge2Z1bmN0aW9ufVxuICAgICAqL1xuICAgIHRoaXMudXNlck9uTW91bnQgPSBjb25maWcub25Nb3VudCB8fCBmdW5jdGlvbiAoKSB7fTtcblxuICAgIC8qKlxuICAgICAqIEEgdXNlciBwcm92aWRlZCBvblVwZGF0ZSBjYWxsYmFja1xuICAgICAqIEB0eXBlIHtmdW5jdGlvbn1cbiAgICAgKi9cbiAgICB0aGlzLnVzZXJPblVwZGF0ZSA9IGNvbmZpZy5vblVwZGF0ZSB8fCBmdW5jdGlvbiAoKSB7fTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgdGVtcGxhdGUgdG8gcmVuZGVyXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgc3RhdGljIGRlZmF1bHRUZW1wbGF0ZU5hbWUgKGNvbmZpZykge1xuICAgIHJldHVybiAnZGVmYXVsdCc7XG4gIH1cblxuICBzdGF0aWMgZ2V0IHR5cGUgKCkge1xuICAgIHJldHVybiAnQ29tcG9uZW50JztcbiAgfVxuXG4gIHN0YXRpYyBhcmVEdXBsaWNhdGVOYW1lc0FsbG93ZWQgKCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGluaXQgKG9wdHMpIHtcbiAgICB0cnkge1xuICAgICAgdGhpcy5zZXRTdGF0ZShvcHRzLmRhdGEgfHwgb3B0cy5zdGF0ZSB8fCB7fSk7XG4gICAgICB0aGlzLm9uQ3JlYXRlKCk7XG4gICAgICB0aGlzLnVzZXJPbkNyZWF0ZSgpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHRocm93IG5ldyBBbnN3ZXJzQ29tcG9uZW50RXJyb3IoXG4gICAgICAgICdFcnJvciBpbml0aWFsaXppbmcgY29tcG9uZW50JyxcbiAgICAgICAgdGhpcy5jb25zdHJ1Y3Rvci50eXBlLFxuICAgICAgICBlKTtcbiAgICB9XG5cbiAgICB0aGlzLl9zdGF0ZS5vbigndXBkYXRlJywgKCkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgdGhpcy5vblVwZGF0ZSgpO1xuICAgICAgICB0aGlzLnVzZXJPblVwZGF0ZSgpO1xuICAgICAgICB0aGlzLnVuTW91bnQoKTtcbiAgICAgICAgdGhpcy5tb3VudCgpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICB0aHJvdyBuZXcgQW5zd2Vyc0NvbXBvbmVudEVycm9yKFxuICAgICAgICAgICdFcnJvciB1cGRhdGluZyBjb21wb25lbnQnLFxuICAgICAgICAgIHRoaXMuY29uc3RydWN0b3IudHlwZSxcbiAgICAgICAgICBlKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIERPTS5hZGRDbGFzcyh0aGlzLl9jb250YWluZXIsIHRoaXMuX2NsYXNzTmFtZSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBzZXRTdGF0ZSAoZGF0YSkge1xuICAgIGNvbnN0IG5ld1N0YXRlID0gT2JqZWN0LmFzc2lnbih7fSwgeyBfY29uZmlnOiB0aGlzLl9jb25maWcgfSwgZGF0YSk7XG4gICAgdGhpcy5fc3RhdGUuc2V0KG5ld1N0YXRlKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGdldFN0YXRlIChwcm9wKSB7XG4gICAgcmV0dXJuIHRoaXMuX3N0YXRlLmdldChwcm9wKTtcbiAgfVxuXG4gIGhhc1N0YXRlIChwcm9wKSB7XG4gICAgcmV0dXJuIHRoaXMuX3N0YXRlLmhhcyhwcm9wKTtcbiAgfVxuXG4gIHRyYW5zZm9ybURhdGEgKGRhdGEpIHtcbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuXG4gIGFkZENoaWxkIChkYXRhLCB0eXBlLCBvcHRzKSB7XG4gICAgbGV0IGNoaWxkQ29tcG9uZW50ID0gdGhpcy5jb21wb25lbnRNYW5hZ2VyLmNyZWF0ZShcbiAgICAgIHR5cGUsXG4gICAgICBPYmplY3QuYXNzaWduKHtcbiAgICAgICAgbmFtZTogZGF0YS5uYW1lLFxuICAgICAgICBwYXJlbnRDb250YWluZXI6IHRoaXMuX2NvbnRhaW5lcixcbiAgICAgICAgZGF0YTogZGF0YVxuICAgICAgfSwgb3B0cyB8fCB7fSwge1xuICAgICAgICBfcGFyZW50T3B0czogdGhpcy5fY29uZmlnXG4gICAgICB9KVxuICAgICk7XG5cbiAgICB0aGlzLl9jaGlsZHJlbi5wdXNoKGNoaWxkQ29tcG9uZW50KTtcbiAgICByZXR1cm4gY2hpbGRDb21wb25lbnQ7XG4gIH1cblxuICAvKipcbiAgICogVW5tb3VudCBhbmQgcmVtb3ZlIHRoaXMgY29tcG9uZW50IGFuZCBpdHMgY2hpbGRyZW4gZnJvbSB0aGUgbGlzdFxuICAgKiBvZiBhY3RpdmUgY29tcG9uZW50c1xuICAgKi9cbiAgcmVtb3ZlICgpIHtcbiAgICB0aGlzLl9jaGlsZHJlbi5mb3JFYWNoKGMgPT4gYy5yZW1vdmUoKSk7XG4gICAgdGhpcy5jb21wb25lbnRNYW5hZ2VyLnJlbW92ZSh0aGlzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgdGhlIHJlbmRlciBtZXRob2QgdG8gYmUgdXNlZCBmb3IgcmVuZGVyaW5nIHRoZSBjb21wb25lbnRcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gcmVuZGVyXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIHNldFJlbmRlciAocmVuZGVyKSB7XG4gICAgdGhpcy5fcmVuZGVyID0gcmVuZGVyO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCB0aGUgcmVuZGVyZXIgZm9yIHRoZSBjb21wb25lbnRcbiAgICogQHBhcmFtIHtSZW5kZXJlclR5cGV9IHJlbmRlcmVyXG4gICAqL1xuICBzZXRSZW5kZXJlciAocmVuZGVyZXIpIHtcbiAgICB0aGlzLl9yZW5kZXJlciA9IFJlbmRlcmVyc1tyZW5kZXJlcl07XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgdGVtcGxhdGUgZm9yIHRoZSBjb21wb25lbnQgdG8gdXNlIHdoZW4gcmVuZGVyaW5nXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0ZW1wbGF0ZVxuICAgKi9cbiAgc2V0VGVtcGxhdGUgKHRlbXBsYXRlKSB7XG4gICAgdGhpcy5fdGVtcGxhdGUgPSB0aGlzLl9yZW5kZXJlci5jb21waWxlKHRlbXBsYXRlKTtcbiAgfVxuXG4gIHVuTW91bnQgKCkge1xuICAgIGlmICghdGhpcy5fY29udGFpbmVyKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICB0aGlzLl9jaGlsZHJlbi5mb3JFYWNoKGNoaWxkID0+IHtcbiAgICAgIGNoaWxkLnVuTW91bnQoKTtcbiAgICB9KTtcblxuICAgIERPTS5lbXB0eSh0aGlzLl9jb250YWluZXIpO1xuICAgIHRoaXMuX2NoaWxkcmVuLmZvckVhY2goYyA9PiBjLnJlbW92ZSgpKTtcbiAgICB0aGlzLl9jaGlsZHJlbiA9IFtdO1xuICAgIHRoaXMub25Vbk1vdW50KCk7XG4gIH1cblxuICBtb3VudCAoY29udGFpbmVyKSB7XG4gICAgaWYgKGNvbnRhaW5lcikge1xuICAgICAgdGhpcy5fY29udGFpbmVyID0gY29udGFpbmVyO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5fY29udGFpbmVyKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBpZiAodGhpcy5iZWZvcmVNb3VudCgpID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgRE9NLmFwcGVuZCh0aGlzLl9jb250YWluZXIsIHRoaXMucmVuZGVyKHRoaXMuX3N0YXRlLmFzSlNPTigpKSk7XG5cbiAgICAvLyBQcm9jZXNzIHRoZSBET00gdG8gZGV0ZXJtaW5lIGlmIHdlIHNob3VsZCBjcmVhdGVcbiAgICAvLyBpbi1tZW1vcnkgc3ViLWNvbXBvbmVudHMgZm9yIHJlbmRlcmluZ1xuICAgIGNvbnN0IGRvbUNvbXBvbmVudHMgPSBET00ucXVlcnlBbGwodGhpcy5fY29udGFpbmVyLCAnW2RhdGEtY29tcG9uZW50XTpub3QoW2RhdGEtaXMtY29tcG9uZW50LW1vdW50ZWRdKScpO1xuICAgIGNvbnN0IGRhdGEgPSB0aGlzLnRyYW5zZm9ybURhdGEoSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSh0aGlzLl9zdGF0ZS5nZXQoKSkpKTtcbiAgICBkb21Db21wb25lbnRzLmZvckVhY2goYyA9PiB0aGlzLl9jcmVhdGVTdWJjb21wb25lbnQoYywgZGF0YSkpO1xuXG4gICAgdGhpcy5fY2hpbGRyZW4uZm9yRWFjaChjaGlsZCA9PiB7XG4gICAgICBjaGlsZC5tb3VudCgpO1xuICAgIH0pO1xuXG4gICAgLy8gQXR0YWNoIGFuYWx5dGljcyBob29rcyBhcyBuZWNlc3NhcnlcbiAgICBpZiAodGhpcy5hbmFseXRpY3NSZXBvcnRlcikge1xuICAgICAgbGV0IGRvbUhvb2tzID0gRE9NLnF1ZXJ5QWxsKHRoaXMuX2NvbnRhaW5lciwgJ1tkYXRhLWV2ZW50dHlwZV06bm90KFtkYXRhLWlzLWFuYWx5dGljcy1hdHRhY2hlZF0pJyk7XG4gICAgICBkb21Ib29rcy5mb3JFYWNoKHRoaXMuX2NyZWF0ZUFuYWx5dGljc0hvb2suYmluZCh0aGlzKSk7XG4gICAgfVxuXG4gICAgdGhpcy5faXNNb3VudGVkID0gdHJ1ZTtcbiAgICB0aGlzLm9uTW91bnQodGhpcyk7XG4gICAgdGhpcy51c2VyT25Nb3VudCh0aGlzKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIHJlbmRlciB0aGUgdGVtcGxhdGUgdXNpbmcgdGhlIHtSZW5kZXJlcn0gd2l0aCB0aGUgY3VycmVudCBzdGF0ZSBhbmQgdGVtcGxhdGUgb2YgdGhlIGNvbXBvbmVudFxuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKi9cbiAgcmVuZGVyIChkYXRhID0gdGhpcy5fc3RhdGUuZ2V0KCkpIHtcbiAgICB0aGlzLmJlZm9yZVJlbmRlcigpO1xuICAgIC8vIFRlbXBvcmFyeSBmaXggZm9yIHBhc3NpbmcgaW1tdXRhYmxlIGRhdGEgdG8gdHJhbnNmb3JtRGF0YSgpLlxuICAgIGRhdGEgPSB0aGlzLnRyYW5zZm9ybURhdGEoSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShkYXRhKSkpO1xuXG4gICAgbGV0IGh0bWwgPSAnJztcbiAgICAvLyBVc2UgZWl0aGVyIHRoZSBjdXN0b20gcmVuZGVyIGZ1bmN0aW9uIG9yIHRoZSBpbnRlcm5hbCByZW5kZXJlclxuICAgIC8vIGRlcGVuZGFudCBvbiB0aGUgY29tcG9uZW50IGNvbmZpZ3VyYXRpb25cbiAgICBpZiAodHlwZW9mIHRoaXMuX3JlbmRlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgaHRtbCA9IHRoaXMuX3JlbmRlcihkYXRhKTtcbiAgICAgIGlmICh0eXBlb2YgaHRtbCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZW5kZXIgbWV0aG9kIG11c3QgcmV0dXJuIEhUTUwgYXMgdHlwZSB7c3RyaW5nfScpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBSZW5kZXIgdGhlIGV4aXN0aW5nIHRlbXBsYXRlcyBhcyBhIHN0cmluZ1xuICAgICAgaHRtbCA9IHRoaXMuX3JlbmRlcmVyLnJlbmRlcih7XG4gICAgICAgIHRlbXBsYXRlOiB0aGlzLl90ZW1wbGF0ZSxcbiAgICAgICAgdGVtcGxhdGVOYW1lOiB0aGlzLl90ZW1wbGF0ZU5hbWVcbiAgICAgIH0sIGRhdGEpO1xuICAgIH1cblxuICAgIC8vIFdlIGNyZWF0ZSBhbiBIVE1MIERvY3VtZW50IGZyYWdtZW50IHdpdGggdGhlIHJlbmRlcmVkIHN0cmluZ1xuICAgIC8vIFNvIHRoYXQgd2UgY2FuIHF1ZXJ5IGl0IGZvciBwcm9jZXNzaW5nIG9mIHN1YiBjb21wb25lbnRzXG4gICAgbGV0IGVsID0gRE9NLmNyZWF0ZShodG1sKTtcblxuICAgIHRoaXMuYWZ0ZXJSZW5kZXIoKTtcbiAgICByZXR1cm4gZWwuaW5uZXJIVE1MO1xuICB9XG5cbiAgX2NyZWF0ZVN1YmNvbXBvbmVudCAoZG9tQ29tcG9uZW50LCBkYXRhKSB7XG4gICAgZG9tQ29tcG9uZW50LmRhdGFzZXQuaXNDb21wb25lbnRNb3VudGVkID0gdHJ1ZTtcbiAgICBjb25zdCBkYXRhc2V0ID0gZG9tQ29tcG9uZW50LmRhdGFzZXQ7XG4gICAgY29uc3QgdHlwZSA9IGRhdGFzZXQuY29tcG9uZW50O1xuICAgIGNvbnN0IHByb3AgPSBkYXRhc2V0LnByb3A7XG4gICAgbGV0IG9wdHMgPSBkYXRhc2V0Lm9wdHMgPyBKU09OLnBhcnNlKGRhdGFzZXQub3B0cykgOiB7fTtcblxuICAgIGxldCBjaGlsZERhdGEgPSBkYXRhW3Byb3BdIHx8IHt9O1xuXG4gICAgb3B0cyA9IHtcbiAgICAgIC4uLm9wdHMsXG4gICAgICBjb250YWluZXI6IGRvbUNvbXBvbmVudFxuICAgIH07XG5cbiAgICAvLyBUT0RPKGJpbGx5KSBSaWdodCBub3csIGlmIHdlIHByb3ZpZGUgYW4gYXJyYXkgYXMgdGhlIGRhdGEgcHJvcCxcbiAgICAvLyB0aGUgYmVoYXZpb3IgaXMgdG8gY3JlYXRlIG1hbnkgY29tcG9uZW50cyBmb3IgZWFjaCBpdGVtIGluIHRoZSBhcnJheS5cbiAgICAvLyBUSEFUIGludGVyZmFjZSBTSE9VTEQgY2hhbmdlIHRvIHVzZSBhIGRpZmZlcmVudCBwcm9wZXJ0eSB0aGF0IGRlZmluZXNcbiAgICAvLyB3aGV0aGVyIHRvIGFycmF5IGRhdGEgc2hvdWxkIGJlIHVzZWQgZm9yIGEgc2luZ2xlIGNvbXBvbmVudCBvclxuICAgIC8vIHRvIGNyZWF0ZSBtYW55IGNvbXBvbmVudHMgZm9yIGVhY2ggaXRlbS5cbiAgICAvLyBPdmVybG9hZGluZyBhbmQgaGF2aW5nIHRoaXMgc2lkZSBlZmZlY3QgaXMgdW5pbnR1aXRpdmUgYW5kIFdST05HXG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGNoaWxkRGF0YSkpIHtcbiAgICAgIC8vIFJlbmRlcmluZyBhIHN1YiBjb21wb25lbnQgc2hvdWxkIGJlIHdpdGhpbiB0aGUgY29udGV4dCxcbiAgICAgIC8vIG9mIHRoZSBub2RlIHRoYXQgd2UgcHJvY2Vzc2VkIGl0IGZyb21cbiAgICAgIHRoaXMuYWRkQ2hpbGQoY2hpbGREYXRhLCB0eXBlLCBvcHRzKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjaGlsZERhdGEucmV2ZXJzZSgpO1xuICAgIGNoaWxkRGF0YS5mb3JFYWNoKGRhdGEgPT4ge1xuICAgICAgdGhpcy5hZGRDaGlsZChkYXRhLCB0eXBlLCBvcHRzKTtcbiAgICB9KTtcbiAgfVxuXG4gIF9jcmVhdGVBbmFseXRpY3NIb29rIChkb21Db21wb25lbnQpIHtcbiAgICBkb21Db21wb25lbnQuZGF0YXNldC5pc0FuYWx5dGljc0F0dGFjaGVkID0gdHJ1ZTtcbiAgICBjb25zdCBkYXRhc2V0ID0gZG9tQ29tcG9uZW50LmRhdGFzZXQ7XG4gICAgY29uc3QgdHlwZSA9IGRhdGFzZXQuZXZlbnR0eXBlO1xuICAgIGNvbnN0IGxhYmVsID0gZGF0YXNldC5ldmVudGxhYmVsO1xuICAgIGNvbnN0IG9wdGlvbnMgPSBkYXRhc2V0LmV2ZW50b3B0aW9ucyA/IEpTT04ucGFyc2UoZGF0YXNldC5ldmVudG9wdGlvbnMpIDoge307XG5cbiAgICBET00ub24oZG9tQ29tcG9uZW50LCAnY2xpY2snLCBlID0+IHtcbiAgICAgIGNvbnN0IGV2ZW50ID0gbmV3IEFuYWx5dGljc0V2ZW50KHR5cGUsIGxhYmVsKTtcbiAgICAgIGV2ZW50LmFkZE9wdGlvbnModGhpcy5fYW5hbHl0aWNzT3B0aW9ucyk7XG4gICAgICBldmVudC5hZGRPcHRpb25zKG9wdGlvbnMpO1xuICAgICAgdGhpcy5hbmFseXRpY3NSZXBvcnRlci5yZXBvcnQoZXZlbnQpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIG9uQ3JlYXRlIGlzIHRyaWdnZXJlZCB3aGVuIHRoZSBjb21wb25lbnQgaXMgY29uc3RydWN0ZWRcbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gdGhlIGNhbGxiYWNrIHRvIGludm9rZSB1cG9uIGVtaXRcbiAgICovXG4gIG9uQ3JlYXRlIChjYikge1xuXG4gIH1cblxuICAvKipcbiAgICogb25VcGRhdGUgaXMgdHJpZ2dlcmVkIHdoZW4gdGhlIHN0YXRlIG9mIHRoZSBjb21wb25lbnQgY2hhbmdlc1xuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSB0aGUgY2FsbGJhY2sgdG8gaW52b2tlIHVwb24gZW1pdFxuICAgKi9cbiAgb25VcGRhdGUgKGNiKSB7XG5cbiAgfVxuXG4gIC8qKlxuICAgKiBiZWZvcmVSZW5kZXIgZXZlbnQgaXMgdHJpZ2dlcmVkIGJlZm9yZSB0aGUgY29tcG9uZW50IGlzIHJlbmRlcmVkXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IHRoZSBjYWxsYmFjayB0byBpbnZva2UgdXBvbiBlbWl0XG4gICAqL1xuICBiZWZvcmVSZW5kZXIgKGNiKSB7XG5cbiAgfVxuXG4gIC8qKlxuICAgKiBhZnRlclJlbmRlciBldmVudCBpcyB0cmlnZ2VyZWQgYWZ0ZXIgdGhlIGNvbXBvbmVudCBpcyByZW5kZXJlZFxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSB0aGUgY2FsbGJhY2sgdG8gaW52b2tlIHVwb24gZW1pdFxuICAgKi9cbiAgYWZ0ZXJSZW5kZXIgKGNiKSB7XG5cbiAgfVxuXG4gIC8qKlxuICAgKiBvbk1vdW50IGlzIHRyaWdnZXJlZCB3aGVuIHRoZSBjb21wb25lbnQgaXMgYXBwZW5kZWQgdG8gdGhlIERPTVxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSB0aGUgY2FsbGJhY2sgdG8gaW52b2tlIHVwb24gZW1pdFxuICAgKi9cbiAgb25Nb3VudCAoY2IpIHtcblxuICB9XG5cbiAgLyoqXG4gICAqIG9uVW5Nb3VudCBpcyB0cmlnZ2VyZWQgd2hlbiB0aGUgY29tcG9uZW50IGlzIHJlbW92ZWQgZnJvbSB0aGUgRE9NXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IHRoZSBjYWxsYmFjayB0byBpbnZva2UgdXBvbiBlbWl0XG4gICAqL1xuICBvblVuTW91bnQgKGNiKSB7XG5cbiAgfVxuXG4gIC8qKlxuICAgKiBiZWZvcmVNb3VudCBpcyB0cmlnZ2VyZWQgYmVmb3JlIHRoZSBjb21wb25lbnQgaXMgbW91bnRlZCB0byB0aGUgRE9NXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IHRoZSBjYWxsYmFjayB0byBpbnZva2UgdXBvbiBlbWl0XG4gICAqL1xuICBiZWZvcmVNb3VudCAoY2IpIHtcblxuICB9XG5cbiAgLyoqXG4gICAqIG9uRGVzdHJveSBpcyB0cmlnZ2VyZWQgd2hlbiB0aGUgY29tcG9uZW50IGlzIGRlc3Ryb3llZFxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSB0aGUgY2FsbGJhY2sgdG8gaW52b2tlIHVwb24gZW1pdFxuICAgKi9cbiAgb25EZXN0cm95IChjYikge1xuXG4gIH1cbn1cbiIsIi8qKiBAbW9kdWxlIEVycm9yUmVwb3J0ZXIgKi9cblxuaW1wb3J0IHsgQW5zd2Vyc0Jhc2VFcnJvciwgQW5zd2Vyc0Jhc2ljRXJyb3IgfSBmcm9tICcuL2Vycm9ycyc7XG5cbmltcG9ydCBBcGlSZXF1ZXN0IGZyb20gJy4uL2h0dHAvYXBpcmVxdWVzdCc7XG5pbXBvcnQgeyBMSUJfVkVSU0lPTiB9IGZyb20gJy4uL2NvbnN0YW50cyc7XG5cbi8qKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi9zZXJ2aWNlcy9lcnJvcnJlcG9ydGVyc2VydmljZScpLmRlZmF1bHR9IEVycm9yUmVwb3J0ZXJTZXJ2aWNlICovXG5cbi8qKlxuICogRXJyb3JSZXBvcnRlciBpcyB1c2VkIGZvciByZXBvcnRpbmcgZXJyb3JzIHRvIHRoZSBjb25zb2xlIGFuZCBBUElcbiAqXG4gKiBAaW1wbGVtZW50cyB7RXJyb3JSZXBvcnRlclNlcnZpY2V9XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEVycm9yUmVwb3J0ZXIge1xuICBjb25zdHJ1Y3RvciAoY29uZmlnLCBnbG9iYWxTdG9yYWdlKSB7XG4gICAgLyoqXG4gICAgICogVGhlIGFwaUtleSB0byB1c2UgZm9yIHJlcG9ydGluZ1xuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgdGhpcy5hcGlLZXkgPSBjb25maWcuYXBpS2V5O1xuXG4gICAgLyoqXG4gICAgICogVGhlIGV4cGVyaWVuY2VLZXkgdG8gdXNlIHdoZW4gcmVwb3J0aW5nXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLmV4cGVyaWVuY2VLZXkgPSBjb25maWcuZXhwZXJpZW5jZUtleTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBhbnN3ZXJzIGNvbmZpZyB2ZXJzaW9uIHVzZWQgZm9yIGFwaSByZXF1ZXN0c1xuICAgICAqIEB0eXBlIHtzdHJpbmd8bnVtYmVyfVxuICAgICAqL1xuICAgIHRoaXMuZXhwZXJpZW5jZVZlcnNpb24gPSBjb25maWcuZXhwZXJpZW5jZVZlcnNpb24gfHwgJ2NvbmZpZzEuMCc7XG5cbiAgICAvKipcbiAgICAgKiBJZiB0cnVlLCBwcmludCBlbnRpcmUgZXJyb3Igb2JqZWN0cyB0byB0aGUgY29uc29sZSBmb3IgaW5zcGVjdGlvblxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqL1xuICAgIHRoaXMucHJpbnRWZXJib3NlID0gY29uZmlnLnByaW50VmVyYm9zZTtcblxuICAgIC8qKlxuICAgICAqIElmIHRydWUsIHJlcG9ydCB0aGUgZXJyb3IgdGhlIHNlcnZlciBmb3IgbG9nZ2luZyBhbmQgbW9uaXRvcmluZ1xuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqL1xuICAgIHRoaXMuc2VuZFRvU2VydmVyID0gY29uZmlnLnNlbmRUb1NlcnZlcjtcblxuICAgIC8qKlxuICAgICAqIFRoZSBnbG9iYWwgc3RvcmFnZSBpbnN0YW5jZSBvZiB0aGUgZXhwZXJpZW5jZVxuICAgICAqIEB0eXBlIHtHbG9iYWxTdG9yYWdlfVxuICAgICAqL1xuICAgIGlmICh0aGlzLnNlbmRUb1NlcnZlciAmJiAhZ2xvYmFsU3RvcmFnZSkge1xuICAgICAgdGhyb3cgbmV3IEFuc3dlcnNCYXNpY0Vycm9yKFxuICAgICAgICAnTXVzdCBpbmNsdWRlIGdsb2JhbFN0b3JhZ2UgdG8gc2VuZCBlcnJvcnMgdG8gc2VydmVyJyxcbiAgICAgICAgJ0Vycm9yUmVwb3J0ZXInKTtcbiAgICB9XG4gICAgdGhpcy5nbG9iYWxTdG9yYWdlID0gZ2xvYmFsU3RvcmFnZTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBlbnZpcm9ubWVudCBvZiB0aGUgQW5zd2VycyBleHBlcmllbmNlXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuZW52aXJvbm1lbnQgPSBjb25maWcuZW52aXJvbm1lbnQ7XG5cbiAgICAvLyBBdHRhY2ggcmVwb3J0aW5nIGxpc3RlbmVycyB0byB3aW5kb3dcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignZXJyb3InLCBlID0+IHRoaXMucmVwb3J0KGUuZXJyb3IpKTtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigndW5oYW5kbGVkcmVqZWN0aW9uJywgZSA9PiB0aGlzLnJlcG9ydChlLmVycm9yKSk7XG4gIH1cblxuICAvKipcbiAgICogcmVwb3J0IHByZXR0eSBwcmludHMgdGhlIGVycm9yIHRvIHRoZSBjb25zb2xlLCBvcHRpb25hbGx5XG4gICAqIHByaW50cyB0aGUgZW50aXJlIGVycm9yIGlmIGBwcmludFZlcmJvc2VgIGlzIHRydWUsIGFuZCBzZW5kcyB0aGVcbiAgICogZXJyb3IgdG8gdGhlIHNlcnZlciB0byBiZSBsb2dnZWQgaWYgYHNlbmRUb1NlcnZlcmAgaXMgdHJ1ZVxuICAgKiBAcGFyYW0ge0Fuc3dlcnNCYXNlRXJyb3J9IGVyciBUaGUgZXJyb3IgdG8gYmUgcmVwb3J0ZWRcbiAgICogQHJldHVybnMge0Fuc3dlcnNCYXNlRXJyb3J9IFRoZSByZXBvcnRlZCBlcnJvclxuICAgKi9cbiAgcmVwb3J0IChlcnIpIHtcbiAgICBpZiAoIShlcnIgaW5zdGFuY2VvZiBBbnN3ZXJzQmFzZUVycm9yKSB8fCBlcnIucmVwb3J0ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBlcnIucmVwb3J0ZWQgPSB0cnVlO1xuXG4gICAgdGhpcy5wcmludEVycm9yKGVycik7XG5cbiAgICBpZiAodGhpcy5zZW5kVG9TZXJ2ZXIpIHtcbiAgICAgIGNvbnN0IHJlcXVlc3RDb25maWcgPSB7XG4gICAgICAgIGVuZHBvaW50OiAnL3YyL2FjY291bnRzL21lL2Fuc3dlcnMvZXJyb3JzJyxcbiAgICAgICAgYXBpS2V5OiB0aGlzLmFwaUtleSxcbiAgICAgICAgdmVyc2lvbjogMjAxOTAzMDEsXG4gICAgICAgIGVudmlyb25tZW50OiB0aGlzLmVudmlyb25tZW50LFxuICAgICAgICBwYXJhbXM6IHtcbiAgICAgICAgICAnbGliVmVyc2lvbic6IExJQl9WRVJTSU9OLFxuICAgICAgICAgICdleHBlcmllbmNlVmVyc2lvbic6IHRoaXMuZXhwZXJpZW5jZVZlcnNpb24sXG4gICAgICAgICAgJ2V4cGVyaWVuY2VLZXknOiB0aGlzLmV4cGVyaWVuY2VLZXksXG4gICAgICAgICAgJ2Vycm9yJzogZXJyLnRvSnNvbigpXG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICBjb25zdCByZXF1ZXN0ID0gbmV3IEFwaVJlcXVlc3QocmVxdWVzdENvbmZpZywgdGhpcy5nbG9iYWxTdG9yYWdlKTtcblxuICAgICAgLy8gVE9ETyhhbXVsbGluZ3MpOiBXZSBzaG91bGQgcHJvYmFibHkgY2hhbmdlIHRoaXMgZW5kcG9pbnQgdG8gUE9TVCxcbiAgICAgIC8vIGlkZWFsbHkgdXNpbmcgdGhlIGJlYWNvbiBBUEkuIFN0YWNrIHRyYWNlcyB3aWxsIGxpa2VseSBlYXNpbHkgaGl0IFVSTFxuICAgICAgLy8gbGVuZ3RoIGxpbWl0cy5cbiAgICAgIHJlcXVlc3QuZ2V0KClcbiAgICAgICAgLmNhdGNoKGNvbnNvbGUuZXJyKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZXJyO1xuICB9XG5cbiAgLyoqXG4gICAqIHByaW50cyB0aGUgZ2l2ZW4gZXJyb3IgdG8gdGhlIGJyb3dzZXIgY29uc29sZVxuICAgKiBAcGFyYW0ge0Fuc3dlcnNCYXNlRXJyb3J9IGVyciBUaGUgZXJyb3IgdG8gYmUgcHJpbnRlZFxuICAgKi9cbiAgcHJpbnRFcnJvciAoZXJyKSB7XG4gICAgaWYgKHRoaXMucHJpbnRWZXJib3NlKSB7XG4gICAgICBjb25zb2xlLmVycm9yKGBlcnJvcjogJHtlcnIuZXJyb3JNZXNzYWdlfVxuY29kZTogJHtlcnIuZXJyb3JDb2RlfVxuYm91bmRhcnk6ICR7ZXJyLmJvdW5kYXJ5fVxuc3RhY2s6ICR7ZXJyLnN0YWNrfWApO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zb2xlLmVycm9yKGVyci50b1N0cmluZygpKTtcbiAgICB9XG4gIH1cbn1cbiIsIi8qKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi9zZXJ2aWNlcy9lcnJvcnJlcG9ydGVyc2VydmljZScpLmRlZmF1bHR9IEVycm9yUmVwb3J0ZXJTZXJ2aWNlICovXG5cbi8qKlxuICogQGltcGxlbWVudHMge0Vycm9yUmVwb3J0ZXJTZXJ2aWNlfVxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb25zb2xlRXJyb3JSZXBvcnRlciB7XG4gIC8qKiBAaW5oZXJpdGRvYyAqL1xuICByZXBvcnQgKGVycikge1xuICAgIGNvbnNvbGUuZXJyb3IoZXJyLnRvU3RyaW5nKCkpO1xuICB9XG59XG4iLCJpbXBvcnQgU2VhcmNoUGFyYW1zIGZyb20gJy4uL2RvbS9zZWFyY2hwYXJhbXMnO1xuaW1wb3J0IHsgQW5zd2Vyc1N0b3JhZ2VFcnJvciB9IGZyb20gJy4uLy4uL2NvcmUvZXJyb3JzL2Vycm9ycyc7XG5cbi8qKiBAbW9kdWxlIFBlcnNpc3RlbnRTdG9yYWdlICovXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBlcnNpc3RlbnRTdG9yYWdlIHtcbiAgY29uc3RydWN0b3IgKGNvbmZpZyA9IHt9KSB7XG4gICAgLyoqXG4gICAgICogVGhlIGN1cnJlbnQgcGFyYW1zIG1vZGVsXG4gICAgICogQHR5cGUge1NlYXJjaFBhcmFtc31cbiAgICAgKi9cbiAgICB0aGlzLl9wYXJhbXMgPSBuZXcgU2VhcmNoUGFyYW1zKHdpbmRvdy5sb2NhdGlvbi5zZWFyY2guc3Vic3RyaW5nKDEpKTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBjdXJyZW50IGhpc3RvcnkgZWRpdCB0aW1lciwgaWYgYW55XG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLl9oaXN0b3J5VGltZXIgPSBudWxsO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGxpc3Qgb2YgbGlzdGVuZXJzIHRvIGV2ZXJ5IHN0b3JhZ2UgdXBkYXRlXG4gICAgICogQHR5cGUge2Z1bmN0aW9uW119XG4gICAgICovXG4gICAgdGhpcy5fdXBkYXRlTGlzdGVuZXIgPSBjb25maWcudXBkYXRlTGlzdGVuZXIgfHwgZnVuY3Rpb24gKCkge307XG5cbiAgICAvKipcbiAgICAgKiBUaGUgbGlzdCBvZiBsaXN0ZW5lcnMgdG8gc3RvcmFnZSByZXNldHNcbiAgICAgKiBAdHlwZSB7ZnVuY3Rpb25bXX1cbiAgICAgKi9cbiAgICB0aGlzLl9yZXNldExpc3RlbmVyID0gY29uZmlnLnJlc2V0TGlzdGVuZXIgfHwgZnVuY3Rpb24gKCkge307XG5cbiAgICB3aW5kb3cub25wb3BzdGF0ZSA9ICgpID0+IHtcbiAgICAgIHRoaXMuX3BhcmFtcyA9IG5ldyBTZWFyY2hQYXJhbXMod2luZG93LmxvY2F0aW9uLnNlYXJjaC5zdWJzdHJpbmcoMSkpO1xuICAgICAgdGhpcy5fY2FsbExpc3RlbmVyKHRoaXMuX3VwZGF0ZUxpc3RlbmVyKTtcbiAgICAgIHRoaXMuX2NhbGxMaXN0ZW5lcih0aGlzLl9yZXNldExpc3RlbmVyKTtcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIEluc2VydCB0aGUgZ2l2ZW4ga2V5L3ZhbHVlIHBhaXIgaW50byBzdG9yYWdlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSB0byBpbnNlcnQgdGhlIGRhdGEgaW5cbiAgICogQHBhcmFtIHsqfSBkYXRhIFRoZSBkYXRhIHRvIGluc2VydFxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHJlcGxhY2UgaGlzdG9yeSBpbnN0ZWFkIG9mIHB1c2hpbmcgbmV3IHN0YXRlXG4gICAqL1xuICBzZXQgKGtleSwgZGF0YSwgcmVwbGFjZUhpc3RvcnkgPSBmYWxzZSkge1xuICAgIGlmICh0eXBlb2Yga2V5ICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IEFuc3dlcnNTdG9yYWdlRXJyb3IoJ1N0b3JhZ2UgZGF0YSBrZXkgbXVzdCBiZSBhIHN0cmluZycsIGtleSwgZGF0YSk7XG4gICAgfVxuXG4gICAgbGV0IG5ld0RhdGEgPSBkYXRhO1xuICAgIGlmICh0eXBlb2YgZGF0YSAhPT0gJ3N0cmluZycpIHtcbiAgICAgIG5ld0RhdGEgPSBKU09OLnN0cmluZ2lmeShkYXRhKTtcbiAgICB9XG4gICAgdGhpcy5fcGFyYW1zLnNldChrZXksIG5ld0RhdGEpO1xuICAgIHRoaXMuX3VwZGF0ZUhpc3RvcnkocmVwbGFjZUhpc3RvcnkpO1xuICB9XG5cbiAgLyoqXG4gICAqIERlbGV0ZSB0aGUgZ2l2ZW4ga2V5IGZyb20gc3RvcmFnZVxuICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgdG8gZGVsZXRlXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gcmVwbGFjZSBoaXN0b3J5IGluc3RlYWQgb2YgcHVzaGluZyBuZXcgc3RhdGVcbiAgICovXG4gIGRlbGV0ZSAoa2V5LCByZXBsYWNlSGlzdG9yeSA9IGZhbHNlKSB7XG4gICAgdGhpcy5fcGFyYW1zLmRlbGV0ZShrZXkpO1xuICAgIHRoaXMuX3VwZGF0ZUhpc3RvcnkocmVwbGFjZUhpc3RvcnkpO1xuICB9XG5cbiAgX3VwZGF0ZUhpc3RvcnkgKHJlcGxhY2VIaXN0b3J5ID0gZmFsc2UpIHtcbiAgICBpZiAodGhpcy5faGlzdG9yeVRpbWVyKSB7XG4gICAgICBjbGVhclRpbWVvdXQodGhpcy5faGlzdG9yeVRpbWVyKTtcbiAgICB9XG5cbiAgICAvLyBiYXRjaCB1cGRhdGUgY2FsbHMgYWNyb3NzIGNvbXBvbmVudHMgdG8gYXZvaWQgdXBkYXRpbmcgdGhlIHVybCB0b28gbXVjaFxuICAgIHRoaXMuX2hpc3RvcnlUaW1lciA9IHNldFRpbWVvdXQoXG4gICAgICAoKSA9PiB7XG4gICAgICAgIHRoaXMuX2hpc3RvcnlUaW1lciA9IG51bGw7XG4gICAgICAgIGlmIChyZXBsYWNlSGlzdG9yeSkge1xuICAgICAgICAgIHdpbmRvdy5oaXN0b3J5LnJlcGxhY2VTdGF0ZShudWxsLCBudWxsLCBgPyR7dGhpcy5fcGFyYW1zLnRvU3RyaW5nKCl9YCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgd2luZG93Lmhpc3RvcnkucHVzaFN0YXRlKG51bGwsIG51bGwsIGA/JHt0aGlzLl9wYXJhbXMudG9TdHJpbmcoKX1gKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9jYWxsTGlzdGVuZXIodGhpcy5fdXBkYXRlTGlzdGVuZXIpO1xuICAgICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogSW52b2tlIHRoZSBnaXZlbiBsaXN0IG9mIGNhbGxiYWNrcyB3aXRoIHRoZSBjdXJyZW50IHN0b3JhZ2UgZGF0YVxuICAgKiBAcGFyYW0ge2Z1bmN0aW9uW119IGxpc3RlbmVycyBUaGUgY2FsbGJhY2tzIHRvIGludm9rZVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2NhbGxMaXN0ZW5lciAobGlzdGVuZXIpIHtcbiAgICBsaXN0ZW5lcih0aGlzLmdldEFsbCgpLCB0aGlzLl9wYXJhbXMudG9TdHJpbmcoKSk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IGFsbCB0aGUga2V5L3ZhbHVlIHBhaXJzIGluIHN0b3JhZ2VcbiAgICovXG4gIGdldEFsbCAoKSB7XG4gICAgY29uc3QgYWxsUGFyYW1zID0ge307XG4gICAgZm9yIChjb25zdCBba2V5LCB2YWxdIG9mIHRoaXMuX3BhcmFtcy5lbnRyaWVzKCkpIHtcbiAgICAgIGFsbFBhcmFtc1trZXldID0gdmFsO1xuICAgIH1cbiAgICByZXR1cm4gYWxsUGFyYW1zO1xuICB9XG59XG4iLCJpbXBvcnQgeyBBbnN3ZXJzQ29uZmlnRXJyb3IgfSBmcm9tICcuLi9lcnJvcnMvZXJyb3JzJztcblxuLyoqIEBtb2R1bGUgU2VhcmNoQ29uZmlnICovXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNlYXJjaENvbmZpZyB7XG4gIGNvbnN0cnVjdG9yIChjb25maWcgPSB7fSkge1xuICAgIC8qKlxuICAgICAqIFRoZSBtYXggcmVzdWx0cyBwZXIgc2VhcmNoLlxuICAgICAqIEFsc28gZGVmaW5lcyB0aGUgbnVtYmVyIG9mIHJlc3VsdHMgcGVyIHBhZ2UsIGlmIHBhZ2luYXRpb24gaXMgZW5hYmxlZFxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy5saW1pdCA9IGNvbmZpZy5saW1pdCB8fCAyMDtcblxuICAgIC8qKlxuICAgICAqIFRoZSB2ZXJ0aWNhbCBrZXkgdG8gdXNlIGZvciBhbGwgc2VhcmNoZXNcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMudmVydGljYWxLZXkgPSBjb25maWcudmVydGljYWxLZXkgfHwgbnVsbDtcblxuICAgIC8qKlxuICAgICAqIEEgZGVmYXVsdCBzZWFyY2ggdG8gdXNlIG9uIGluaXRpYWxpemF0aW9uIGZvciB2ZXJ0aWNhbCBzZWFyY2hlcnMsIHdoZW4gdGhlIHVzZXIgaGFzJ3QgcHJvdmlkZWQgYSBxdWVyeVxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgdGhpcy5kZWZhdWx0SW5pdGlhbFNlYXJjaCA9IGNvbmZpZy5kZWZhdWx0SW5pdGlhbFNlYXJjaDtcblxuICAgIHRoaXMudmFsaWRhdGUoKTtcbiAgICBPYmplY3QuZnJlZXplKHRoaXMpO1xuICB9XG5cbiAgdmFsaWRhdGUgKCkge1xuICAgIGlmICh0eXBlb2YgdGhpcy5saW1pdCAhPT0gJ251bWJlcicgfHwgdGhpcy5saW1pdCA8IDEgfHwgdGhpcy5saW1pdCA+IDUwKSB7XG4gICAgICB0aHJvdyBuZXcgQW5zd2Vyc0NvbmZpZ0Vycm9yKCdTZWFyY2ggTGltaXQgbXVzdCBiZSBiZXR3ZWVuIDEgYW5kIDUwJywgJ1NlYXJjaENvbmZpZycpO1xuICAgIH1cbiAgfVxufVxuIiwiLyoqIEBtb2R1bGUgQXV0b0NvbXBsZXRlRGF0YSAqL1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBdXRvQ29tcGxldGVEYXRhIHtcbiAgY29uc3RydWN0b3IgKGRhdGEgPSB7fSkge1xuICAgIHRoaXMuc2VjdGlvbnMgPSBkYXRhLnNlY3Rpb25zIHx8IFtdO1xuICAgIHRoaXMucXVlcnlJZCA9IGRhdGEucXVlcnlJZCB8fCAnJztcbiAgICB0aGlzLmlucHV0SW50ZW50cyA9IGRhdGEuaW5wdXRJbnRlbnRzIHx8IFtdO1xuICAgIE9iamVjdC5mcmVlemUodGhpcyk7XG4gIH1cblxuICBzdGF0aWMgZnJvbSAocmVzcG9uc2UpIHtcbiAgICBsZXQgc2VjdGlvbnM7XG4gICAgaWYgKHJlc3BvbnNlLnNlY3Rpb25zKSB7XG4gICAgICBzZWN0aW9ucyA9IHJlc3BvbnNlLnNlY3Rpb25zLm1hcChzID0+ICh7XG4gICAgICAgIGxhYmVsOiBzLmxhYmVsLFxuICAgICAgICByZXN1bHRzOiBzLnJlc3VsdHMubWFwKHIgPT4gbmV3IEF1dG9Db21wbGV0ZVJlc3VsdChyKSlcbiAgICAgIH0pKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2VjdGlvbnMgPSBbeyByZXN1bHRzOiByZXNwb25zZS5yZXN1bHRzLm1hcChyID0+IG5ldyBBdXRvQ29tcGxldGVSZXN1bHQocikpIH1dO1xuICAgIH1cbiAgICBsZXQgaW5wdXRJbnRlbnRzID0gcmVzcG9uc2UuaW5wdXQgPyByZXNwb25zZS5pbnB1dC5xdWVyeUludGVudHMgOiBbXTtcbiAgICByZXR1cm4gbmV3IEF1dG9Db21wbGV0ZURhdGEoe1xuICAgICAgc2VjdGlvbnMsXG4gICAgICBxdWVyeUlkOiByZXNwb25zZS5xdWVyeUlkLFxuICAgICAgaW5wdXRJbnRlbnRzIH0pO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBBdXRvQ29tcGxldGVSZXN1bHQge1xuICBjb25zdHJ1Y3RvciAoZGF0YSA9IHt9KSB7XG4gICAgdGhpcy5maWx0ZXIgPSBkYXRhLmZpbHRlciB8fCB7fTtcbiAgICB0aGlzLmtleSA9IGRhdGEua2V5IHx8ICcnO1xuICAgIHRoaXMubWF0Y2hlZFN1YnN0cmluZ3MgPSBkYXRhLm1hdGNoZWRTdWJzdHJpbmdzIHx8IFtdO1xuICAgIHRoaXMudmFsdWUgPSBkYXRhLnZhbHVlIHx8ICcnO1xuICAgIHRoaXMuc2hvcnRWYWx1ZSA9IGRhdGEuc2hvcnRWYWx1ZSB8fCB0aGlzLnZhbHVlO1xuICAgIHRoaXMuaW50ZW50cyA9IGRhdGEucXVlcnlJbnRlbnRzIHx8IFtdO1xuICAgIE9iamVjdC5mcmVlemUodGhpcyk7XG4gIH1cbn1cbiIsIi8qKiBAbW9kdWxlIEF1dG9Db21wbGV0ZURhdGFUcmFuc2Zvcm1lciAqL1xuXG5pbXBvcnQgQXV0b0NvbXBsZXRlRGF0YSBmcm9tICcuLi9tb2RlbHMvYXV0b2NvbXBsZXRlZGF0YSc7XG5cbi8qKlxuICogQSBEYXRhIFRyYW5zZm9ybWVyIHRoYXQgdGFrZXMgdGhlIHJlc3BvbnNlIG9iamVjdCBmcm9tIGEgQXV0b0NvbXBsZXRlIHJlcXVlc3RcbiAqIEFuZCB0cmFuc2Zvcm1zIGluIHRvIGEgZnJvbnQtZW5kIG9yaWVudGVkIGRhdGEgc3RydWN0dXJlIHRoYXQgb3VyXG4gKiBjb21wb25lbnQgbGlicmFyeSBhbmQgY29yZSBzdG9yYWdlIHVuZGVyc3RhbmQuXG4gKlxuICogVE9ETyhiaWxseSkgQ3JlYXRlIG91ciBvd24gZnJvbnQtZW5kIGRhdGEgbW9kZWxzXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEF1dG9Db21wbGV0ZURhdGFUcmFuc2Zvcm1lciB7XG4gIHN0YXRpYyBjbGVhbiAobW9kdWxlSWQsIGRhdGEpIHtcbiAgICBpZiAoZGF0YS5zZWN0aW9ucyAmJiBkYXRhLnNlY3Rpb25zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgZGVsZXRlIGRhdGEuc2VjdGlvbnM7XG4gICAgfVxuXG4gICAgaWYgKGRhdGEuc2VjdGlvbnMgJiYgZGF0YS5zZWN0aW9ucy5sZW5ndGggPT09IDEgJiYgZGF0YS5zZWN0aW9uc1swXS5yZXN1bHRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgZGVsZXRlIGRhdGEuc2VjdGlvbnM7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIFttb2R1bGVJZF06IGRhdGFcbiAgICB9O1xuICB9XG5cbiAgc3RhdGljIHVuaXZlcnNhbCAocmVzcG9uc2UpIHtcbiAgICByZXR1cm4gQXV0b0NvbXBsZXRlRGF0YS5mcm9tKHJlc3BvbnNlKTtcbiAgfVxuXG4gIHN0YXRpYyBmaWx0ZXIgKHJlc3BvbnNlKSB7XG4gICAgcmV0dXJuIEF1dG9Db21wbGV0ZURhdGEuZnJvbShyZXNwb25zZSk7XG4gIH1cblxuICBzdGF0aWMgdmVydGljYWwgKHJlc3BvbnNlKSB7XG4gICAgcmV0dXJuIEF1dG9Db21wbGV0ZURhdGEuZnJvbShyZXNwb25zZSk7XG4gIH1cbn1cbiIsIi8qKiBAbW9kdWxlIEF1dG9Db21wbGV0ZUFwaSAqL1xuXG5pbXBvcnQgQXBpUmVxdWVzdCBmcm9tICcuLi9odHRwL2FwaXJlcXVlc3QnO1xuaW1wb3J0IEF1dG9Db21wbGV0ZURhdGFUcmFuc2Zvcm1lciBmcm9tICcuL2F1dG9jb21wbGV0ZWRhdGF0cmFuc2Zvcm1lcic7XG5pbXBvcnQgeyBBbnN3ZXJzQmFzaWNFcnJvciwgQW5zd2Vyc0VuZHBvaW50RXJyb3IgfSBmcm9tICcuLi9lcnJvcnMvZXJyb3JzJztcbmltcG9ydCB7IGdldENhY2hlZExpdmVBcGlVcmwgfSBmcm9tICcuLi91dGlscy91cmx1dGlscyc7XG5cbi8qKiBAdHlwZWRlZiB7aW1wb3J0KCcuL2F1dG9jb21wbGV0ZXNlcnZpY2UnKS5kZWZhdWx0fSBBdXRvQ29tcGxldGVTZXJ2aWNlICovXG5cbi8qKlxuICogQXV0b0NvbXBsZXRlQXBpIGV4cG9zZXMgYW4gaW50ZXJmYWNlIGZvciBuZXR3b3JrIHJlbGF0ZWQgbWF0dGVyc1xuICogZm9yIGFsbCB0aGUgYXV0b2NvbXBsZXRlIGVuZHBvaW50cy5cbiAqXG4gKiBAaW1wbGVtZW50cyB7QXV0b0NvbXBsZXRlU2VydmljZX1cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQXV0b0NvbXBsZXRlQXBpIHtcbiAgY29uc3RydWN0b3IgKGNvbmZpZyA9IHt9LCBnbG9iYWxTdG9yYWdlKSB7XG4gICAgLyoqXG4gICAgICogVGhlIEFQSSBLZXkgdG8gdXNlIGZvciB0aGUgcmVxdWVzdFxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBpZiAoIWNvbmZpZy5hcGlLZXkpIHtcbiAgICAgIHRocm93IG5ldyBBbnN3ZXJzQmFzaWNFcnJvcignQXBpIEtleSBpcyByZXF1aXJlZCcsICdBdXRvQ29tcGxldGUnKTtcbiAgICB9XG4gICAgdGhpcy5fYXBpS2V5ID0gY29uZmlnLmFwaUtleTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBBbnN3ZXJzIEtleSB0byB1c2UgZm9yIHRoZSByZXF1ZXN0XG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIGlmICghY29uZmlnLmV4cGVyaWVuY2VLZXkpIHtcbiAgICAgIHRocm93IG5ldyBBbnN3ZXJzQmFzaWNFcnJvcignQW5zd2VycyBLZXkgaXMgcmVxdWlyZWQnLCAnQXV0b0NvbXBsZXRlJyk7XG4gICAgfVxuICAgIHRoaXMuX2V4cGVyaWVuY2VLZXkgPSBjb25maWcuZXhwZXJpZW5jZUtleTtcblxuICAgIC8qKlxuICAgICAqIFRoZSB2ZXJzaW9uIG9mIHRoZSBBUEkgdG8gbWFrZSBhIHJlcXVlc3QgdG9cbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5fdmVyc2lvbiA9IGNvbmZpZy52ZXJzaW9uIHx8IDIwMTkwMTAxIHx8IDIwMTkwMzAxO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGFuc3dlcnMgY29uZmlnIHZlcnNpb24gdG8gdXNlIGZvciBhbGwgcmVxdWVzdHNcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5fZXhwZXJpZW5jZVZlcnNpb24gPSBjb25maWcuZXhwZXJpZW5jZVZlcnNpb247XG5cbiAgICAvKipcbiAgICAgKiBUaGUgbG9jYWxlIHRvIHVzZSBmb3IgdGhlIHJlcXVlc3RcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgaWYgKCFjb25maWcubG9jYWxlKSB7XG4gICAgICB0aHJvdyBuZXcgQW5zd2Vyc0Jhc2ljRXJyb3IoJ0xvY2FsZSBpcyByZXF1aXJlZCcsICdBdXRvQ29tcGxldGUnKTtcbiAgICB9XG4gICAgdGhpcy5fbG9jYWxlID0gY29uZmlnLmxvY2FsZTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBnbG9iYWwgc3RvcmFnZSBpbnN0YW5jZSBvZiB0aGUgZXhwZXJpZW5jZVxuICAgICAqIEB0eXBlIHtHbG9iYWxTdG9yYWdlfVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgaWYgKCFnbG9iYWxTdG9yYWdlKSB7XG4gICAgICB0aHJvdyBuZXcgQW5zd2Vyc0Jhc2ljRXJyb3IoJ0dsb2JhbCBzdG9yYWdlIGlzIHJlcXVpcmVkJywgJ0F1dG9Db21wbGV0ZScpO1xuICAgIH1cbiAgICB0aGlzLl9nbG9iYWxTdG9yYWdlID0gZ2xvYmFsU3RvcmFnZTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBlbnZpcm9ubWVudCBvZiB0aGUgQW5zd2VycyBleHBlcmllbmNlXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuX2Vudmlyb25tZW50ID0gY29uZmlnLmVudmlyb25tZW50O1xuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgdXJsIGZvciB0aGUgYXV0b2NvbXBsZXRlIEFQSSByZXF1ZXN0XG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuX2Jhc2VVcmwgPSBnZXRDYWNoZWRMaXZlQXBpVXJsKHRoaXMuX2Vudmlyb25tZW50KTtcbiAgfVxuXG4gIC8qKiBAaW5oZXJpdGRvYyAqL1xuICBxdWVyeUZpbHRlciAoaW5wdXQsIGNvbmZpZykge1xuICAgIGNvbnN0IHJlcXVlc3RDb25maWcgPSB7XG4gICAgICBlbmRwb2ludDogJy92Mi9hY2NvdW50cy9tZS9hbnN3ZXJzL2ZpbHRlcnNlYXJjaCcsXG4gICAgICBhcGlLZXk6IHRoaXMuX2FwaUtleSxcbiAgICAgIHZlcnNpb246IHRoaXMuX3ZlcnNpb24sXG4gICAgICBlbnZpcm9ubWVudDogdGhpcy5fZW52aXJvbm1lbnQsXG4gICAgICBwYXJhbXM6IHtcbiAgICAgICAgJ2lucHV0JzogaW5wdXQsXG4gICAgICAgICdleHBlcmllbmNlS2V5JzogdGhpcy5fZXhwZXJpZW5jZUtleSxcbiAgICAgICAgJ3ZlcnNpb24nOiB0aGlzLl9leHBlcmllbmNlVmVyc2lvbixcbiAgICAgICAgJ3ZlcnRpY2FsS2V5JzogY29uZmlnLnZlcnRpY2FsS2V5LFxuICAgICAgICAnbG9jYWxlJzogdGhpcy5fbG9jYWxlLFxuICAgICAgICAnc2VhcmNoX3BhcmFtZXRlcnMnOiBKU09OLnN0cmluZ2lmeShjb25maWcuc2VhcmNoUGFyYW1ldGVycylcbiAgICAgIH1cbiAgICB9O1xuICAgIGxldCByZXF1ZXN0ID0gbmV3IEFwaVJlcXVlc3QocmVxdWVzdENvbmZpZywgdGhpcy5fZ2xvYmFsU3RvcmFnZSk7XG5cbiAgICByZXR1cm4gcmVxdWVzdC5nZXQoKVxuICAgICAgLnRoZW4ocmVzcG9uc2UgPT4gcmVzcG9uc2UuanNvbigpKVxuICAgICAgLnRoZW4ocmVzcG9uc2UgPT4gQXV0b0NvbXBsZXRlRGF0YVRyYW5zZm9ybWVyLmZpbHRlcihyZXNwb25zZS5yZXNwb25zZSkpXG4gICAgICAuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgICB0aHJvdyBuZXcgQW5zd2Vyc0VuZHBvaW50RXJyb3IoJ0ZpbHRlciBzZWFyY2ggcmVxdWVzdCBmYWlsZWQnLCAnQXV0b0NvbXBsZXRlJywgZXJyb3IpO1xuICAgICAgfSk7XG4gIH1cblxuICAvKiogQGluaGVyaXRkb2MgKi9cbiAgcXVlcnlWZXJ0aWNhbCAoaW5wdXQsIHZlcnRpY2FsS2V5KSB7XG4gICAgY29uc3QgcmVxdWVzdENvbmZpZyA9IHtcbiAgICAgIGVuZHBvaW50OiAnL3YyL2FjY291bnRzL21lL2Fuc3dlcnMvdmVydGljYWwvYXV0b2NvbXBsZXRlJyxcbiAgICAgIGFwaUtleTogdGhpcy5fYXBpS2V5LFxuICAgICAgdmVyc2lvbjogdGhpcy5fdmVyc2lvbixcbiAgICAgIGVudmlyb25tZW50OiB0aGlzLl9lbnZpcm9ubWVudCxcbiAgICAgIGJhc2VVcmw6IHRoaXMuX2Jhc2VVcmwsXG4gICAgICBwYXJhbXM6IHtcbiAgICAgICAgJ2lucHV0JzogaW5wdXQsXG4gICAgICAgICdleHBlcmllbmNlS2V5JzogdGhpcy5fZXhwZXJpZW5jZUtleSxcbiAgICAgICAgJ3ZlcnNpb24nOiB0aGlzLl9leHBlcmllbmNlVmVyc2lvbixcbiAgICAgICAgJ3ZlcnRpY2FsS2V5JzogdmVydGljYWxLZXksXG4gICAgICAgICdsb2NhbGUnOiB0aGlzLl9sb2NhbGVcbiAgICAgIH1cbiAgICB9O1xuICAgIGxldCByZXF1ZXN0ID0gbmV3IEFwaVJlcXVlc3QocmVxdWVzdENvbmZpZywgdGhpcy5fZ2xvYmFsU3RvcmFnZSk7XG5cbiAgICByZXR1cm4gcmVxdWVzdC5nZXQoKVxuICAgICAgLnRoZW4ocmVzcG9uc2UgPT4gcmVzcG9uc2UuanNvbigpKVxuICAgICAgLnRoZW4ocmVzcG9uc2UgPT4gQXV0b0NvbXBsZXRlRGF0YVRyYW5zZm9ybWVyLnZlcnRpY2FsKHJlc3BvbnNlLnJlc3BvbnNlKSlcbiAgICAgIC5jYXRjaChlcnJvciA9PiB7XG4gICAgICAgIHRocm93IG5ldyBBbnN3ZXJzRW5kcG9pbnRFcnJvcignVmVydGljYWwgc2VhcmNoIHJlcXVlc3QgZmFpbGVkJywgJ0F1dG9Db21wbGV0ZScsIGVycm9yKTtcbiAgICAgIH0pO1xuICB9XG5cbiAgLyoqIEBpbmhlcml0ZG9jICovXG4gIHF1ZXJ5VW5pdmVyc2FsIChxdWVyeVN0cmluZykge1xuICAgIGNvbnN0IHJlcXVlc3RDb25maWcgPSB7XG4gICAgICBlbmRwb2ludDogJy92Mi9hY2NvdW50cy9tZS9hbnN3ZXJzL2F1dG9jb21wbGV0ZScsXG4gICAgICBhcGlLZXk6IHRoaXMuX2FwaUtleSxcbiAgICAgIHZlcnNpb246IHRoaXMuX3ZlcnNpb24sXG4gICAgICBlbnZpcm9ubWVudDogdGhpcy5fZW52aXJvbm1lbnQsXG4gICAgICBiYXNlVXJsOiB0aGlzLl9iYXNlVXJsLFxuICAgICAgcGFyYW1zOiB7XG4gICAgICAgICdpbnB1dCc6IHF1ZXJ5U3RyaW5nLFxuICAgICAgICAnZXhwZXJpZW5jZUtleSc6IHRoaXMuX2V4cGVyaWVuY2VLZXksXG4gICAgICAgICd2ZXJzaW9uJzogdGhpcy5fZXhwZXJpZW5jZVZlcnNpb24sXG4gICAgICAgICdsb2NhbGUnOiB0aGlzLl9sb2NhbGVcbiAgICAgIH1cbiAgICB9O1xuICAgIGxldCByZXF1ZXN0ID0gbmV3IEFwaVJlcXVlc3QocmVxdWVzdENvbmZpZywgdGhpcy5fZ2xvYmFsU3RvcmFnZSk7XG5cbiAgICByZXR1cm4gcmVxdWVzdC5nZXQoKVxuICAgICAgLnRoZW4ocmVzcG9uc2UgPT4gcmVzcG9uc2UuanNvbigpKVxuICAgICAgLnRoZW4ocmVzcG9uc2UgPT4gQXV0b0NvbXBsZXRlRGF0YVRyYW5zZm9ybWVyLnVuaXZlcnNhbChyZXNwb25zZS5yZXNwb25zZSkpXG4gICAgICAuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgICB0aHJvdyBuZXcgQW5zd2Vyc0VuZHBvaW50RXJyb3IoJ1VuaXZlcnNhbCBzZWFyY2ggcmVxdWVzdCBmYWlsZWQnLCAnQXV0b0NvbXBsZXRlJywgZXJyb3IpO1xuICAgICAgfSk7XG4gIH1cbn1cbiIsImltcG9ydCBBdXRvQ29tcGxldGVEYXRhLCB7IEF1dG9Db21wbGV0ZVJlc3VsdCB9IGZyb20gJy4uL21vZGVscy9hdXRvY29tcGxldGVkYXRhJztcblxuLyoqIEB0eXBlZGVmIHtpbXBvcnQoJy4uL3NlcnZpY2VzL2F1dG9jb21wbGV0ZXNlcnZpY2UnKS5kZWZhdWx0fSBBdXRvQ29tcGxldGVTZXJ2aWNlICovXG5cbmNvbnN0IHVuaXZlcnNhbE9wdGlvbnMgPSBbXG4gICd3aGF0IGlzIHlleHQnLFxuICAnd2hvIGlzIHRoZSBjZW8gb2YgeWV4dCdcbl07XG5cbmNvbnN0IHZlcnRpY2FsT3B0aW9ucyA9IFtcbiAgJ25lYXIgbWUnLFxuICAnaW4gbmV3IHlvcmsnLFxuICAnYXZhaWxhYmxlIG5vdydcbl07XG5cbi8qKlxuICogTW9ja0F1dG9Db21wbGV0ZVNlcnZpY2Ugc2VydmVzIGF1dG9jb21wbGV0ZSBxdWVyaWVzIHdpdGggbW9jayBkYXRhXG4gKlxuICogQGltcGxlbWVudHMge0F1dG9Db21wbGV0ZVNlcnZpY2V9XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1vY2tBdXRvQ29tcGxldGVTZXJ2aWNlIHtcbiAgLyoqIEBpbmhlcml0ZG9jICovXG4gIHF1ZXJ5RmlsdGVyIChpbnB1dCwgY29uZmlnKSB7XG4gICAgLy8gVE9ETyhhbXVsbGluZ3MpOiBTaW11bGF0ZSBmaWx0ZXIgc2VhcmNoLCB3aXRoIHNlY3Rpb25zXG4gICAgcmV0dXJuIGVtcHR5UmVzdWx0cygpO1xuICB9XG5cbiAgLyoqIEBpbmhlcml0ZG9jICovXG4gIHF1ZXJ5VmVydGljYWwgKGlucHV0LCB2ZXJ0aWNhbEtleSkge1xuICAgIHJldHVybiBmaWx0ZXJPcHRpb25zKGlucHV0LCB2ZXJ0aWNhbE9wdGlvbnNcbiAgICAgIC5tYXAob3B0ID0+IGAke3ZlcnRpY2FsS2V5fSAke29wdH1gKVxuICAgICAgLmNvbmNhdCh1bml2ZXJzYWxPcHRpb25zKVxuICAgICk7XG4gIH1cblxuICAvKiogQGluaGVyaXRkb2MgKi9cbiAgcXVlcnlVbml2ZXJzYWwgKGlucHV0KSB7XG4gICAgcmV0dXJuIGZpbHRlck9wdGlvbnMoaW5wdXQsIHVuaXZlcnNhbE9wdGlvbnMpO1xuICB9XG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IGlucHV0IFF1ZXJ5IHN0cmluZ1xuICogQHBhcmFtIHtzdHJpbmdbXX0gb3B0aW9ucyBIYXJkY29kZWQgYXV0b2NvbXBsZXRlIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtQcm9taXNlPEF1dG9Db21wbGV0ZURhdGE+fVxuICovXG5mdW5jdGlvbiBmaWx0ZXJPcHRpb25zIChpbnB1dCwgb3B0aW9ucykge1xuICBpZiAoaW5wdXQubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIGVtcHR5UmVzdWx0cygpO1xuICB9XG5cbiAgY29uc3QgbG93ZXJjYXNlID0gaW5wdXQudG9Mb3dlckNhc2UoKTtcbiAgY29uc3QgcmVzdWx0cyA9IG9wdGlvbnNcbiAgICAuZmlsdGVyKG9wdCA9PiBvcHQuaW5jbHVkZXMobG93ZXJjYXNlKSlcbiAgICAubWFwKG9wdCA9PiBuZXcgQXV0b0NvbXBsZXRlUmVzdWx0KHtcbiAgICAgIHZhbHVlOiBvcHQsXG4gICAgICBtYXRjaGVkU3Vic3RyaW5nczogW3tcbiAgICAgICAgb2Zmc2V0OiBvcHQuaW5kZXhPZihsb3dlcmNhc2UpLFxuICAgICAgICBsZW5ndGg6IGxvd2VyY2FzZS5sZW5ndGhcbiAgICAgIH1dXG4gICAgfSkpO1xuICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG5ldyBBdXRvQ29tcGxldGVEYXRhKHtcbiAgICBzZWN0aW9uczogW3sgcmVzdWx0cyB9XSxcbiAgICBxdWVyeUlkOiByYW5kb21TdHJpbmcoKVxuICB9KSk7XG59XG5cbi8qKlxuICogQHJldHVybnMge1Byb21pc2U8QXV0b0NvbXBsZXRlRGF0YT59XG4gKi9cbmZ1bmN0aW9uIGVtcHR5UmVzdWx0cyAoKSB7XG4gIHJldHVybiBQcm9taXNlLnJlc29sdmUobmV3IEF1dG9Db21wbGV0ZURhdGEoe1xuICAgIHNlY3Rpb25zOiBbe31dLFxuICAgIHF1ZXJ5SWQ6IHJhbmRvbVN0cmluZygpXG4gIH0pKTtcbn1cblxuLyoqXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiByYW5kb21TdHJpbmcgKCkge1xuICByZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyaW5nKDIpO1xufVxuIiwiLyoqIEBtb2R1bGUgUXVlc3Rpb25BbnN3ZXJBcGkgKi9cblxuaW1wb3J0IEFwaVJlcXVlc3QgZnJvbSAnLi4vaHR0cC9hcGlyZXF1ZXN0JztcbmltcG9ydCB7IFBST0RVQ1RJT04gfSBmcm9tICcuLi9jb25zdGFudHMnO1xuaW1wb3J0IHsgQW5zd2Vyc0Jhc2ljRXJyb3IsIEFuc3dlcnNFbmRwb2ludEVycm9yIH0gZnJvbSAnLi4vZXJyb3JzL2Vycm9ycyc7XG5pbXBvcnQgeyBnZXRLbm93bGVkZ2VBcGlVcmwgfSBmcm9tICcuLi91dGlscy91cmx1dGlscyc7XG5cbi8qKiBAdHlwZWRlZiB7aW1wb3J0KCcuL3F1ZXN0aW9uYW5zd2Vyc2VydmljZScpLmRlZmF1bHR9IFF1ZXN0aW9uQW5zd2VyU2VydmljZSAqL1xuXG4vKipcbiAqIFF1ZXN0aW9uQW5zd2VyQXBpIHN1Ym1pdHMgcXVlc3Rpb25zIHZpYSB0aGUgUSZBIFJFU1QgQVBJXG4gKlxuICogQGltcGxlbWVudHMge1F1ZXN0aW9uQW5zd2VyU2VydmljZX1cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUXVlc3Rpb25BbnN3ZXJBcGkge1xuICBjb25zdHJ1Y3RvciAoY29uZmlnID0ge30sIGdsb2JhbFN0b3JhZ2UpIHtcbiAgICAvKipcbiAgICAgKiBUaGUgQVBJIEtleSB0byB1c2UgZm9yIHRoZSByZXF1ZXN0XG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIGlmICghY29uZmlnLmFwaUtleSkge1xuICAgICAgdGhyb3cgbmV3IEFuc3dlcnNCYXNpY0Vycm9yKCdBcGkgS2V5IGlzIHJlcXVpcmVkJywgJ1F1ZXN0aW9uQW5zd2VyQXBpJyk7XG4gICAgfVxuICAgIHRoaXMuX2FwaUtleSA9IGNvbmZpZy5hcGlLZXk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgZ2xvYmFsIHN0b3JhZ2UgaW5zdGFuY2Ugb2YgdGhlIGV4cGVyaWVuY2VcbiAgICAgKiBAdHlwZSB7R2xvYmFsU3RvcmFnZX1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIGlmICghZ2xvYmFsU3RvcmFnZSkge1xuICAgICAgdGhyb3cgbmV3IEFuc3dlcnNCYXNpY0Vycm9yKCdHbG9iYWwgc3RvcmFnZSBpcyByZXF1aXJlZCcsICdRdWVzdGlvbkFuc3dlckFwaScpO1xuICAgIH1cbiAgICB0aGlzLl9nbG9iYWxTdG9yYWdlID0gZ2xvYmFsU3RvcmFnZTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBlbnZpcm9ubWVudCBvZiB0aGUgQW5zd2VycyBleHBlcmllbmNlXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuX2Vudmlyb25tZW50ID0gY29uZmlnLmVudmlyb25tZW50IHx8IFBST0RVQ1RJT047XG4gIH1cblxuICAvKiogQGluaGVyaXRkb2MgKi9cbiAgc3VibWl0UXVlc3Rpb24gKHF1ZXN0aW9uKSB7XG4gICAgY29uc3QgcmVxdWVzdENvbmZpZyA9IHtcbiAgICAgIGJhc2VVcmw6IGdldEtub3dsZWRnZUFwaVVybCh0aGlzLl9lbnZpcm9ubWVudCksXG4gICAgICBlbmRwb2ludDogJy92Mi9hY2NvdW50cy9tZS9jcmVhdGVRdWVzdGlvbicsXG4gICAgICBhcGlLZXk6IHRoaXMuX2FwaUtleSxcbiAgICAgIHBhcmFtczoge1xuICAgICAgICAnZW50aXR5SWQnOiBxdWVzdGlvbi5lbnRpdHlJZCxcbiAgICAgICAgJ3NpdGUnOiBxdWVzdGlvbi5zaXRlLFxuICAgICAgICAnbmFtZSc6IHF1ZXN0aW9uLm5hbWUsXG4gICAgICAgICdlbWFpbCc6IHF1ZXN0aW9uLmVtYWlsLFxuICAgICAgICAncXVlc3Rpb25UZXh0JzogcXVlc3Rpb24ucXVlc3Rpb25UZXh0LFxuICAgICAgICAncXVlc3Rpb25EZXNjcmlwdGlvbic6IHF1ZXN0aW9uLnF1ZXN0aW9uRGVzY3JpcHRpb24sXG4gICAgICAgICdxdWVzdGlvbkxhbmd1YWdlJzogcXVlc3Rpb24ucXVlc3Rpb25MYW5ndWFnZVxuICAgICAgfVxuICAgIH07XG4gICAgbGV0IHJlcXVlc3QgPSBuZXcgQXBpUmVxdWVzdChyZXF1ZXN0Q29uZmlnLCB0aGlzLl9nbG9iYWxTdG9yYWdlKTtcblxuICAgIHJldHVybiByZXF1ZXN0LnBvc3Qoe1xuICAgICAgbW9kZTogJ2NvcnMnLFxuICAgICAgaGVhZGVyczoge1xuICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgICB9XG4gICAgfSlcbiAgICAgIC50aGVuKHJlc3BvbnNlID0+IHJlc3BvbnNlLmpzb24oKSlcbiAgICAgIC5jYXRjaChlcnJvciA9PiB7XG4gICAgICAgIHRocm93IG5ldyBBbnN3ZXJzRW5kcG9pbnRFcnJvcihcbiAgICAgICAgICAnUXVlc3Rpb24gc3VibWl0IGZhaWxlZCcsXG4gICAgICAgICAgJ1F1ZXN0aW9uQW5zd2VyQXBpJyxcbiAgICAgICAgICBlcnJvcik7XG4gICAgICB9KTtcbiAgfVxufVxuIiwiLyoqIEBtb2R1bGUgTW9ja1F1ZXN0aW9uQW5zd2VyU2VydmljZSAqL1xuXG4vKiogQHR5cGVkZWYge2ltcG9ydCgnLi4vc2VydmljZXMvcXVlc3Rpb25hbnN3ZXJzZXJ2aWNlJykuZGVmYXVsdH0gUXVlc3Rpb25BbnN3ZXJTZXJ2aWNlICovXG5cbi8qKlxuICogQGltcGxlbWVudHMge1F1ZXN0aW9uQW5zd2VyU2VydmljZX1cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTW9ja1F1ZXN0aW9uQW5zd2VyU2VydmljZSB7XG4gIC8qKiBAaW5oZXJpdGRvYyAqL1xuICBzdWJtaXRRdWVzdGlvbiAocXVlc3Rpb24pIHtcbiAgICAvLyBUT0RPKGFtdWxsaW5ncyk6IE1ha2UgYWN0dWFsIHJlc3BvbnNlIG9iamVjdCBvbmNlIHdlJ3JlIHVzaW5nIGl0IGZvclxuICAgIC8vIHNvbWV0aGluZ1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoe30pO1xuICB9XG59XG4iLCIvKiBnbG9iYWwgZmV0Y2ggKi9cblxuLyoqIEB0eXBlZGVmIHtpbXBvcnQoJy4uL21vZGVscy9zZWN0aW9uJykuZGVmYXVsdH0gU2VjdGlvbiAqL1xuLyoqIEB0eXBlZGVmIHtpbXBvcnQoJy4uL3NlcnZpY2VzL3NlYXJjaHNlcnZpY2UnKS5kZWZhdWx0fSBTZWFyY2hTZXJ2aWNlICovXG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gUmVzdWx0RGF0YVxuICogQHByb3BlcnR5IHtPYmplY3R9IGRhdGFcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nIH0gaHRtbFRpdGxlXG4gKi9cblxuLyoqXG4gKiBAY2FsbGJhY2sgUmVzdWx0c01vZGlmaWVyXG4gKiBAcGFyYW0ge1Jlc3VsdERhdGFbXX0gcmVzdWx0c1xuICogQHJldHVybnMge1Jlc3VsdERhdGFbXX1cbiAqL1xuXG4vKipcbiAqIEBjYWxsYmFjayBNb2NrRGF0YUNvbnN1bWVyXG4gKiBAcGFyYW0ge1NlY3Rpb25bXX0gc2VjdGlvbnNcbiAqIEByZXR1cm5zIHtQcm9taXNlPE9iamVjdD59XG4gKi9cblxuY29uc3QgQVJCSVRSQVJZX0JVU0lORVNTX0lEID0gOTE5ODcxO1xuXG4vKipcbiAqIEBpbXBsZW1lbnRzIHtTZWFyY2hTZXJ2aWNlfVxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNb2NrU2VhcmNoU2VydmljZSB7XG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7UHJvbWlzZTxzdHJpbmc+fVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5fZ2V0TW9ja0RhdGFKc29uID0gZmV0Y2goJ2h0dHBzOi8vYXNzZXRzLnNpdGVzY2RuLm5ldC9hbnN3ZXJzL3Rlc3RkYXRhL3NlYXJjaC9tb2NrZGF0YV92MS5qc29uJylcbiAgICAgIC50aGVuKHJlc3AgPT4gcmVzcC50ZXh0KCkpXG4gICAgICAuY2F0Y2goY29uc29sZS5lcnJvcik7XG4gIH1cblxuICAvKiogQGluaGVyaXRkb2MgKi9cbiAgdmVydGljYWxTZWFyY2ggKHZlcnRpY2FsS2V5LCB7IGlucHV0LCBmaWx0ZXIsIGZhY2V0RmlsdGVyLCBsaW1pdCwgb2Zmc2V0LCBpZCwgZ2VvbG9jYXRpb24sIGlzRHluYW1pY0ZpbHRlcnNFbmFibGVkLCBza2lwU3BlbGxDaGVjaywgcXVlcnlUcmlnZ2VyIH0pIHtcbiAgICByZXR1cm4gdGhpcy51c2VNb2NrRGF0YShzZWN0aW9ucyA9PiB7XG4gICAgICBpZiAoaW5wdXQgPT09ICcnKSB7XG4gICAgICAgIHJldHVybiBkZWxheWVkUmVzcG9uc2UoY29uc3RydWN0VmVydGljYWxSZXNwb25zZSh7XG4gICAgICAgICAgcmVzdWx0czogW10sXG4gICAgICAgICAgYXBwbGllZFF1ZXJ5RmlsdGVyczogW11cbiAgICAgICAgfSkpO1xuICAgICAgfVxuXG4gICAgICAvLyBFaXRoZXIgZmluZCBhIHNlY3Rpb24gd2l0aCBtYXRjaGluZyBJRCwgb3IgcGljayBvbmUgYXQgcmFuZG9tXG4gICAgICBsZXQgc2VjdGlvbiA9IHNlY3Rpb25zLmZpbmQoXG4gICAgICAgIHZlcnRpY2FsTW9kdWxlID0+IHZlcnRpY2FsS2V5ID09PSB2ZXJ0aWNhbE1vZHVsZVsndmVydGljYWxDb25maWdJZCddXG4gICAgICApO1xuICAgICAgaWYgKHNlY3Rpb24gPT0gbnVsbCkge1xuICAgICAgICBzZWN0aW9uID0gc2VjdGlvbnNbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogc2VjdGlvbnMubGVuZ3RoKV07XG4gICAgICB9XG5cbiAgICAgIG1vZGlmeVJlc3VsdHMoc2VjdGlvbiwgZ2V0UmVzdWx0c0ZpbHRlcmVyKGlucHV0KSk7XG4gICAgICBpZiAob2Zmc2V0ICE9IG51bGwgJiYgbGltaXQgIT0gbnVsbCkge1xuICAgICAgICBtb2RpZnlSZXN1bHRzKHNlY3Rpb24sIGZ1bmN0aW9uIGxpbWl0IChyZXN1bHRzKSB7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdHMuc2xpY2Uob2Zmc2V0LCBvZmZzZXQgKyBsaW1pdCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBjb25zdCByZXNwID0gY29uc3RydWN0VmVydGljYWxSZXNwb25zZShzZWN0aW9uKTtcbiAgICAgIHJldHVybiBkZWxheWVkUmVzcG9uc2UocmVzcCk7XG4gICAgfSk7XG4gIH1cblxuICAvKiogQGluaGVyaXRkb2MgKi9cbiAgdW5pdmVyc2FsU2VhcmNoIChxdWVyeVN0cmluZywgcGFyYW1zKSB7XG4gICAgcmV0dXJuIHRoaXMudXNlTW9ja0RhdGEoc2VjdGlvbnMgPT4ge1xuICAgICAgaWYgKHF1ZXJ5U3RyaW5nID09PSAnJykge1xuICAgICAgICByZXR1cm4gZGVsYXllZFJlc3BvbnNlKGNvbnN0cnVjdFVuaXZlcnNhbFJlc3BvbnNlKFtdKSk7XG4gICAgICB9XG5cbiAgICAgIHNlY3Rpb25zLmZvckVhY2goc2VjdGlvbiA9PiB7XG4gICAgICAgIG1vZGlmeVJlc3VsdHMoc2VjdGlvbiwgZ2V0UmVzdWx0c0ZpbHRlcmVyKHF1ZXJ5U3RyaW5nKSk7XG4gICAgICB9KTtcblxuICAgICAgc2VjdGlvbnMgPSBzZWN0aW9ucy5maWx0ZXIoc2VjdGlvbiA9PiB7XG4gICAgICAgIHJldHVybiBzZWN0aW9uLnJlc3VsdHMubGVuZ3RoID4gMDtcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCByZXNwID0gY29uc3RydWN0VW5pdmVyc2FsUmVzcG9uc2Uoc2VjdGlvbnMpO1xuICAgICAgcmV0dXJuIGRlbGF5ZWRSZXNwb25zZShyZXNwKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge01vY2tEYXRhQ29uc3VtZXJ9IGNvbnN1bWVyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPE9iamVjdD59XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB1c2VNb2NrRGF0YSAoY29uc3VtZXIpIHtcbiAgICByZXR1cm4gdGhpcy5fZ2V0TW9ja0RhdGFKc29uLnRoZW4oSlNPTi5wYXJzZSkudGhlbihjb25zdW1lcik7XG4gIH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gcXVlcnlTdHJpbmdcbiAqIEByZXR1cm4ge1Jlc3VsdHNNb2RpZmllcn1cbiAqL1xuZnVuY3Rpb24gZ2V0UmVzdWx0c0ZpbHRlcmVyIChxdWVyeVN0cmluZykge1xuICByZXR1cm4gcmVzdWx0cyA9PiByZXN1bHRzLmZpbHRlcihyZXN1bHQgPT4ge1xuICAgIGlmIChyZXN1bHQuaHRtbFRpdGxlICYmIHJlc3VsdC5odG1sVGl0bGUudG9Mb3dlckNhc2UoKS5pbmNsdWRlcyhxdWVyeVN0cmluZykpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IHByb3AgaW4gcmVzdWx0LmRhdGEpIHtcbiAgICAgIGNvbnN0IHZhbCA9IHJlc3VsdC5kYXRhW3Byb3BdO1xuICAgICAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnICYmIHZhbC50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKHF1ZXJ5U3RyaW5nKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9KTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge1NlY3Rpb259IHNlY3Rpb25cbiAqIEBwYXJhbSB7UmVzdWx0c01vZGlmaWVyfSBtb2RpZnlGblxuICovXG5mdW5jdGlvbiBtb2RpZnlSZXN1bHRzIChzZWN0aW9uLCBtb2RpZnlGbikge1xuICBzZWN0aW9uLnJlc3VsdHMgPSBtb2RpZnlGbihzZWN0aW9uLnJlc3VsdHMpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7U2VjdGlvbltdfSBzZWN0aW9ucyBBIGxpc3Qgb2YgbW9jayBzZWN0aW9uIGRhdGFcbiAqIEByZXR1cm5zIHtPYmplY3R9IEEgbW9jayBBbnN3ZXJzQXBpIHJlc3BvbnNlXG4gKi9cbmZ1bmN0aW9uIGNvbnN0cnVjdFVuaXZlcnNhbFJlc3BvbnNlIChzZWN0aW9ucykge1xuICAvLyBUT0RPKGFtdWxsaW5ncyk6IHNwZWxsY2hlY2ssIGdlbywgZmlsdGVyc1xuICAvLyBUT0RPKGFtdWxsaW5ncyk6IEZha2UgZW5jb2RlZFN0YXRlIG9uY2UgdGhlIFNESyB1c2VzIGl0XG4gIHNlY3Rpb25zID0gc2VjdGlvbnMubWFwKGZpbGxTZWN0aW9uRmllbGRzKTtcbiAgcmV0dXJuIHtcbiAgICBtZXRhOiB7XG4gICAgICB1dWlkOiB1dWlkVjQoKSxcbiAgICAgIGVycm9yczogW11cbiAgICB9LFxuICAgIHJlc3BvbnNlOiB7XG4gICAgICBidXNpbmVzc0lkOiBBUkJJVFJBUllfQlVTSU5FU1NfSUQsXG4gICAgICBtb2R1bGVzOiBzZWN0aW9ucyxcbiAgICAgIGZhaWxlZFZlcnRpY2FsczogW10sXG4gICAgICBxdWVyeUlkOiB1dWlkVjQoKSxcbiAgICAgIHNlYXJjaEludGVudHM6IFtdXG4gICAgfVxuICB9O1xufVxuXG4vKipcbiAqIEBwYXJhbSB7U2VjdGlvbn0gc2VjdGlvbiBBIG1vY2sgc2VjdGlvbiBkYXRhXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBBIG1vY2sgQW5zd2Vyc0FwaSByZXNwb25zZVxuICovXG5mdW5jdGlvbiBjb25zdHJ1Y3RWZXJ0aWNhbFJlc3BvbnNlIChzZWN0aW9uKSB7XG4gIC8vIFRPRE8oYW11bGxpbmdzKTogc3BlbGxjaGVjaywgZ2VvLCBmaWx0ZXJzXG4gIC8vIFRPRE8oYW11bGxpbmdzKTogRmFrZSBlbmNvZGVkU3RhdGUgb25jZSB0aGUgU0RLIHVzZXMgaXRcbiAgc2VjdGlvbiA9IGZpbGxTZWN0aW9uRmllbGRzKHNlY3Rpb24pO1xuICByZXR1cm4ge1xuICAgIG1ldGE6IHtcbiAgICAgIHV1aWQ6IHV1aWRWNCgpLFxuICAgICAgZXJyb3JzOiBbXVxuICAgIH0sXG4gICAgcmVzcG9uc2U6IE9iamVjdC5hc3NpZ24oc2VjdGlvbiwge1xuICAgICAgYnVzaW5lc3NJZDogQVJCSVRSQVJZX0JVU0lORVNTX0lELFxuICAgICAgcXVlcnlJZDogdXVpZFY0KCksXG4gICAgICBzZWFyY2hJbnRlbnRzOiBbXVxuICAgIH0pXG4gIH07XG59XG5cbi8qKlxuICogQHBhcmFtIHtTZWN0aW9ufVxuICogQHJldHVybnMge1NlY3Rpb259XG4gKi9cbmZ1bmN0aW9uIGZpbGxTZWN0aW9uRmllbGRzIChzZWN0aW9uKSB7XG4gIHJldHVybiB7XG4gICAgdmVydGljYWxDb25maWdJZDogc2VjdGlvbi52ZXJ0aWNhbENvbmZpZ0lkLFxuICAgIHJlc3VsdHNDb3VudDogc2VjdGlvbi5yZXN1bHRzLmxlbmd0aCxcbiAgICBlbmNvZGVkU3RhdGU6ICcnLFxuICAgIHJlc3VsdHM6IHNlY3Rpb24ucmVzdWx0cyxcbiAgICBhcHBsaWVkUXVlcnlGaWx0ZXJzOiBzZWN0aW9uLmFwcGxpZWRRdWVyeUZpbHRlcnMsXG4gICAgcXVlcnlEdXJhdGlvbk1pbGxpczogcmFuZG9tSW50KDUwLCAxMDAwKSxcbiAgICBmYWNldHM6IHNlY3Rpb24uZmFjZXRzLFxuICAgIHNvdXJjZTogc2VjdGlvbi5zb3VyY2VcbiAgfTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge09iamVjdH0gcmVzcFxuICogQHJldHVybnMge1Byb21pc2U8T2JqZWN0Pn1cbiAqL1xuZnVuY3Rpb24gZGVsYXllZFJlc3BvbnNlIChyZXNwKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIHJlc29sdmUocmVzcCk7XG4gICAgfSwgcmFuZG9tSW50KDI1MCwgMTAwMCkpO1xuICB9KTtcbn1cblxuLyoqXG4gKiBDb2RlLWdvbGYteSBidXQgbGVnaXQgYmFzaWMgVVVJRCB2NCBpbXBsZW1lbnRhdGlvbi4gTm90IGNyeXB0b2dyYXBoaWNhbGx5IHNlY3VyZS5cbiAqIEZyb20gaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vamVkLzk4Mjg4M1xuICogQHJldHVybnMge3N0cmluZ30gQSB2NC1jb21wbGlhbnQgVVVJRFxuICovXG5mdW5jdGlvbiB1dWlkVjQgKCkge1xuICByZXR1cm4gKGZ1bmN0aW9uIGIgKGEpIHsgcmV0dXJuIGEgPyAoYSBeIE1hdGgucmFuZG9tKCkgKiAxNiA+PiBhIC8gNCkudG9TdHJpbmcoMTYpIDogKFsxZTddICsgLTFlMyArIC00ZTMgKyAtOGUzICsgLTFlMTEpLnJlcGxhY2UoL1swMThdL2csIGIpOyB9KSgpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSBtaW4gaW5jbHVzaXZlXG4gKiBAcGFyYW0ge251bWJlcn0gbWF4IGV4Y2x1c2l2ZVxuICogQHJldHVybnMge251bWJlcn0gQSByYW5kb20gaW50ZWdlciBpbiB0aGUgc3BlY2lmaWVkIHJhbmdlXG4gKi9cbmZ1bmN0aW9uIHJhbmRvbUludCAobWluLCBtYXgpIHtcbiAgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChtYXggLSBtaW4pICsgbWluKTtcbn1cbiIsIi8qKiBAbW9kdWxlIE5hdmlnYXRpb25Db21wb25lbnQgKi9cblxuLyogZ2xvYmFsIE5vZGUgKi9cblxuaW1wb3J0IENvbXBvbmVudCBmcm9tICcuLi9jb21wb25lbnQnO1xuaW1wb3J0IHsgQW5zd2Vyc0NvbXBvbmVudEVycm9yIH0gZnJvbSAnLi4vLi4vLi4vY29yZS9lcnJvcnMvZXJyb3JzJztcbmltcG9ydCBTdG9yYWdlS2V5cyBmcm9tICcuLi8uLi8uLi9jb3JlL3N0b3JhZ2Uvc3RvcmFnZWtleXMnO1xuaW1wb3J0IFNlYXJjaFBhcmFtcyBmcm9tICcuLi8uLi9kb20vc2VhcmNocGFyYW1zJztcbmltcG9ydCBET00gZnJvbSAnLi4vLi4vZG9tL2RvbSc7XG5cbi8qKlxuICogVGhlIGRlYm91bmNlIGR1cmF0aW9uIGZvciByZXNpemUgZXZlbnRzXG4gKiBAdHlwZSB7bnVtYmVyfVxuICovXG5jb25zdCBSRVNJWkVfREVCT1VOQ0UgPSAxMDA7XG5cbi8qKlxuICogVGhlIGJyZWFrcG9pbnQgZm9yIG1vYmlsZVxuICogQHR5cGUge251bWJlcn1cbiAqL1xuY29uc3QgTU9CSUxFX0JSRUFLUE9JTlQgPSA3Njc7XG5cbi8qKlxuICogRW51bSBvcHRpb25zIGZvciBtb2JpbGUgb3ZlcmZsb3cgYmVhaHZpb3JcbiAqIEB0eXBlIHtPYmplY3QuPHN0cmluZywgc3RyaW5nPn1cbiAqL1xuY29uc3QgTU9CSUxFX09WRVJGTE9XX0JFSEFWSU9SX09QVElPTiA9IHtcbiAgQ09MTEFQU0U6ICdDT0xMQVBTRScsXG4gIElOTkVSU0NST0xMOiAnSU5ORVJTQ1JPTEwnXG59O1xuXG4vKipcbiAqIFRoZSBUYWIgaXMgYSBtb2RlbCB0aGF0IGlzIHVzZWQgdG8gcG93ZXIgdGhlIE5hdmlnYXRpb24gdGFicyBpbiB0aGUgdmlldy5cbiAqIEl0J3MgaW5pdGlhbGl6ZWQgdGhyb3VnaCB0aGUgY29uZmlndXJhdGlvbiBwcm92aWRlZCB0byB0aGUgY29tcG9uZW50LlxuICovXG5leHBvcnQgY2xhc3MgVGFiIHtcbiAgY29uc3RydWN0b3IgKGNvbmZpZykge1xuICAgIC8qKlxuICAgICAqIFRoZSBuYW1lIG9mIHRoZSB0YWIgdGhhdCBpcyBleHBvc2VkIGZvciB0aGUgbGlua1xuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgdGhpcy5sYWJlbCA9IGNvbmZpZy5sYWJlbDtcbiAgICBpZiAodHlwZW9mIHRoaXMubGFiZWwgIT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgQW5zd2Vyc0NvbXBvbmVudEVycm9yKCdsYWJlbCBpcyBhIHJlcXVpcmVkIGNvbmZpZ3VyYXRpb24gb3B0aW9uIGZvciB0YWIuJywgJ05hdmlnYXRpb25Db21wb25lbnQnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgY29tcGxldGUgVVJMLCBpbmNsdWRpbmcgdGhlIHBhcmFtc1xuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgdGhpcy51cmwgPSBjb25maWcudXJsO1xuICAgIGlmICh0eXBlb2YgdGhpcy51cmwgIT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgQW5zd2Vyc0NvbXBvbmVudEVycm9yKCd1cmwgaXMgYSByZXF1aXJlZCBjb25maWd1cmF0aW9uIG9wdGlvbiBmb3IgdGFiLicsICdOYXZpZ2F0aW9uQ29tcG9uZW50Jyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIHNlcnZlcnNpZGUgdmVydGljYWwgY29uZmlnIGlkIHRoYXQgdGhpcyBpcyByZWZlcmVuY2VkIHRvLlxuICAgICAqIEJ5IHByb3ZpZGluZyB0aGlzLCBlbmFibGVzIGR5bmFtaWMgc29ydGluZyBiYXNlZCBvbiByZXN1bHRzLlxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgdGhpcy52ZXJ0aWNhbEtleSA9IGNvbmZpZy52ZXJ0aWNhbEtleSB8fCBudWxsO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgVVJMIHVzZWQgZm9yIGNvbnN0cnVjdGluZyB0aGUgVVJMIHdpdGggcGFyYW1zXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLmJhc2VVcmwgPSBjb25maWcudXJsO1xuXG4gICAgLyoqXG4gICAgICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRvIHNob3cgdGhpcyB0YWIgZmlyc3QgaW4gdGhlIG9yZGVyXG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICovXG4gICAgdGhpcy5pc0ZpcnN0ID0gY29uZmlnLmlzRmlyc3QgfHwgZmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiBEZXRlcm1pbmVzIHdoZXRoZXIgb3Igbm90IHRvIGFwcGx5IGEgc3BlY2lhbCBjbGFzcyB0byB0aGVcbiAgICAgKiBtYXJrdXAgdG8gZGV0ZXJtaW5lIGlmIGl0J3MgYW4gYWN0aXZlIHRhYlxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqL1xuICAgIHRoaXMuaXNBY3RpdmUgPSBjb25maWcuaXNBY3RpdmUgfHwgZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogZnJvbSB3aWxsIGNvbnN0cnVjdCBhIG1hcCBvZiB2ZXJ0aWNhbEtleSB0byB7VGFifSBmcm9tXG4gICAqIGEgY29uZmlndXJhdGlvbiBmaWxlXG4gICAqIEBwYXJhbSB7b2JqZWN0fSB0YWJzQ29uZmlnIHRoZSBjb25maWd1cmF0aW9uIHRvIHVzZVxuICAgKi9cbiAgc3RhdGljIGZyb20gKHRhYnNDb25maWcpIHtcbiAgICBsZXQgdGFicyA9IHt9O1xuICAgIC8vIFBhcnNlIHRoZSBvcHRpb25zIGFuZCBidWlsZCBvdXQgb3VyIHRhYnMgYW5kXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0YWJzQ29uZmlnLmxlbmd0aDsgaSsrKSB7XG4gICAgICBsZXQgdGFiID0geyAuLi50YWJzQ29uZmlnW2ldIH07XG5cbiAgICAgIC8vIElmIGEgdGFiIGlzIGNvbmZpZ3VyZWQgdG8gYmUgaGlkZGVuIGluIHRoaXMgY29tcG9uZW50LFxuICAgICAgLy8gZG8gbm90IHByb2Nlc3MgaXRcbiAgICAgIGlmICh0YWIuaGlkZUluTmF2aWdhdGlvbikge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgLy8gRm9yIHRhYnMgd2l0aG91dCBjb25maWcgaWRzLCBtYXAgdGhlaXIgVVJMIHRvIHRoZSBjb25maWdJRFxuICAgICAgLy8gdG8gYXZvaWQgZHVwbGljYXRpb24gb2YgcmVuZGVyc1xuICAgICAgaWYgKCF0YWIudmVydGljYWxLZXkgJiYgIXRhYnNbdGFiLnVybF0pIHtcbiAgICAgICAgdGFiLnZlcnRpY2FsS2V5ID0gdGFiLnVybDtcbiAgICAgIH1cblxuICAgICAgdGFic1t0YWIudmVydGljYWxLZXldID0gbmV3IFRhYih0YWIpO1xuICAgIH1cbiAgICByZXR1cm4gdGFicztcbiAgfVxufVxuXG4vKipcbiAqIE5hdmlnYXRpb25Db21wb25lbnQgZXhwb3NlcyBhbiBpbnRlcmZhY2UgZm9yIGJ1aWxkaW5nIGEgZHluYW1pY1xuICogbmF2aWdhdGlvbiB0aGF0IGlzIHBvd2VyZWQgYnkgdW5pdmVyc2FsIHNlYXJjaCB1cGRhdGVzLlxuICogQGV4dGVuZHMgQ29tcG9uZW50XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE5hdmlnYXRpb25Db21wb25lbnQgZXh0ZW5kcyBDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvciAoY29uZmlnID0ge30sIHN5c3RlbUNvbmZpZyA9IHt9KSB7XG4gICAgc3VwZXIoY29uZmlnLCBzeXN0ZW1Db25maWcpO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGxhYmVsIHRvIHNob3cgb24gdGhlIGRyb3Bkb3duIG1lbnUgYnV0dG9uIHdoZW4gb3ZlcmZsb3dcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMub3ZlcmZsb3dMYWJlbCA9IGNvbmZpZy5vdmVyZmxvd0xhYmVsIHx8ICdNb3JlJztcblxuICAgIC8qKlxuICAgICAqIFRoZSBvcHRpb25hbCBpY29uIHRvIHNob3cgb24gdGhlIGRyb3Bkb3duIG1lbnUgYnV0dG9uIHdoZW4gb3ZlcmZsb3dcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMub3ZlcmZsb3dJY29uID0gY29uZmlnLm92ZXJmbG93SWNvbiB8fCAna2Fib2InO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGRhdGEgc3RvcmFnZSBrZXlcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMubW9kdWxlSWQgPSBTdG9yYWdlS2V5cy5OQVZJR0FUSU9OO1xuXG4gICAgLyoqXG4gICAgICogVGFicyBjb25maWcgZnJvbSBnbG9iYWwgbmF2aWdhdGlvbiBjb25maWdcbiAgICAgKiBAdHlwZSB7QXJyYXkuPG9iamVjdD59XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLl90YWJzQ29uZmlnID0gY29uZmlnLnZlcnRpY2FsUGFnZXMgfHxcbiAgICAgIHRoaXMuY29yZS5nbG9iYWxTdG9yYWdlLmdldFN0YXRlKFN0b3JhZ2VLZXlzLlZFUlRJQ0FMX1BBR0VTX0NPTkZJRykuZ2V0KCk7XG5cbiAgICAvKipcbiAgICAgKiBVbm9yZGVyZWQgbWFwIG9mIGVhY2ggdGFiLCBrZXllZCBieSBWUyB2ZXJ0aWNhbEtleVxuICAgICAqIEB0eXBlIHtPYmplY3QuPFN0cmluZywgT2JqZWN0Pn1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuX3RhYnMgPSBUYWIuZnJvbSh0aGlzLl90YWJzQ29uZmlnKTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBvcmRlciBvZiB0aGUgdGFicywgcGFyc2VkIGZyb20gY29uZmlndXJhdGlvbiBvciBVUkwuXG4gICAgICogVGhpcyBnZXRzIHVwZGF0ZWQgYmFzZWQgb24gdGhlIHNlcnZlciByZXN1bHRzXG4gICAgICogQHR5cGUge0FycmF5LjxTdHJpbmc+fSBUaGUgbGlzdCBvZiBWUyB2ZXJ0aWNhbEtleXNcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuX3RhYk9yZGVyID0gdGhpcy5nZXREZWZhdWx0VGFiT3JkZXIodGhpcy5fdGFic0NvbmZpZywgdGhpcy5nZXRVcmxQYXJhbXMoKSk7XG5cbiAgICAvKipcbiAgICAgKiBCcmVha3BvaW50cyBhdCB3aGljaCBuYXZpZ2F0aW9uIGl0ZW1zIG1vdmUgdG8gdGhlIFwibW9yZVwiIGRyb3Bkb3duXG4gICAgICogQHR5cGUge251bWJlcltdfVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5fbmF2QnJlYWtwb2ludHMgPSBbXTtcblxuICAgIC8qKlxuICAgICAqICBUaGUgbW9iaWxlIG92ZXJmbG93IGJlaGF2aW9yIGNvbmZpZ1xuICAgICAqICBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMuX21vYmlsZU92ZXJmbG93QmVoYXZpb3IgPSBjb25maWcubW9iaWxlT3ZlcmZsb3dCZWhhdmlvciB8fCBNT0JJTEVfT1ZFUkZMT1dfQkVIQVZJT1JfT1BUSU9OLkNPTExBUFNFO1xuXG4gICAgLyoqXG4gICAgICogIFRoZSBBUklBIGxhYmVsXG4gICAgICogIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgdGhpcy5fYXJpYUxhYmVsID0gY29uZmlnLmFyaWFMYWJlbCB8fCAnU2VhcmNoIFBhZ2UgTmF2aWdhdGlvbic7XG5cbiAgICB0aGlzLmNoZWNrT3V0c2lkZUNsaWNrID0gdGhpcy5jaGVja091dHNpZGVDbGljay5iaW5kKHRoaXMpO1xuICAgIHRoaXMuY2hlY2tNb2JpbGVPdmVyZmxvd0JlaGF2aW9yID0gdGhpcy5jaGVja01vYmlsZU92ZXJmbG93QmVoYXZpb3IuYmluZCh0aGlzKTtcbiAgfVxuXG4gIHN0YXRpYyBnZXQgdHlwZSAoKSB7XG4gICAgcmV0dXJuICdOYXZpZ2F0aW9uJztcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgdGVtcGxhdGUgdG8gcmVuZGVyXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgc3RhdGljIGRlZmF1bHRUZW1wbGF0ZU5hbWUgKGNvbmZpZykge1xuICAgIHJldHVybiAnbmF2aWdhdGlvbi9uYXZpZ2F0aW9uJztcbiAgfVxuXG4gIG9uQ3JlYXRlICgpIHtcbiAgICAvLyBUT0RPOiBSZS1yZW5kZXJpbmcgYW5kIHJlLW1vdW50aW5nIHRoZSBjb21wb25lbnQgZXZlcnkgdGltIGUgdGhlIHdpbmRvdyBjaGFuZ2VzIHNpemVcbiAgICAvLyBpcyBub3QgZ3JlYXQuXG4gICAgRE9NLm9uKHdpbmRvdywgJ3Jlc2l6ZScsIHRoaXMuY2hlY2tNb2JpbGVPdmVyZmxvd0JlaGF2aW9yKTtcbiAgfVxuXG4gIG9uRGVzdHJveSAoKSB7XG4gICAgRE9NLm9mZih3aW5kb3csICdyZXNpemUnLCB0aGlzLmNoZWNrTW9iaWxlT3ZlcmZsb3dCZWhhdmlvcik7XG4gIH1cblxuICBvbk1vdW50ICgpIHtcbiAgICBpZiAodGhpcy5zaG91bGRDb2xsYXBzZSgpKSB7XG4gICAgICB0aGlzLl9uYXZCcmVha3BvaW50cyA9IFtdO1xuICAgICAgdGhpcy5iaW5kT3ZlcmZsb3dIYW5kbGVycygpO1xuICAgICAgdGhpcy5yZWZpdE5hdigpO1xuICAgICAgRE9NLm9uKERPTS5xdWVyeSh0aGlzLl9jb250YWluZXIsICcueXh0LU5hdi1tb3JlJyksICdjbGljaycsIHRoaXMudG9nZ2xlTW9yZURyb3Bkb3duLmJpbmQodGhpcykpO1xuICAgIH1cbiAgfVxuXG4gIG9uVW5Nb3VudCAoKSB7XG4gICAgdGhpcy51bmJpbmRPdmVyZmxvd0hhbmRsZXJzKCk7XG4gIH1cblxuICBiaW5kT3ZlcmZsb3dIYW5kbGVycyAoKSB7XG4gICAgRE9NLm9uKHdpbmRvdywgJ2NsaWNrJywgdGhpcy5jaGVja091dHNpZGVDbGljayk7XG4gIH1cblxuICB1bmJpbmRPdmVyZmxvd0hhbmRsZXJzICgpIHtcbiAgICBET00ub2ZmKHdpbmRvdywgJ2NsaWNrJywgdGhpcy5jaGVja091dHNpZGVDbGljayk7XG4gIH1cblxuICByZWZpdE5hdiAoKSB7XG4gICAgY29uc3QgY29udGFpbmVyID0gRE9NLnF1ZXJ5KHRoaXMuX2NvbnRhaW5lciwgJy55eHQtTmF2LWNvbnRhaW5lcicpO1xuICAgIGNvbnN0IG1vcmVCdXR0b24gPSBET00ucXVlcnkodGhpcy5fY29udGFpbmVyLCAnLnl4dC1OYXYtbW9yZScpO1xuICAgIGNvbnN0IG1haW5MaW5rcyA9IERPTS5xdWVyeSh0aGlzLl9jb250YWluZXIsICcueXh0LU5hdi1leHBhbmRlZCcpO1xuICAgIGNvbnN0IGNvbGxhcHNlZExpbmtzID0gRE9NLnF1ZXJ5KHRoaXMuX2NvbnRhaW5lciwgJy55eHQtTmF2LW1vZGFsJyk7XG5cbiAgICBjb25zdCBuYXZXaWR0aCA9IG1vcmVCdXR0b24uY2xhc3NMaXN0LmNvbnRhaW5zKCd5eHQtTmF2LWl0ZW0tLW1vcmUnKVxuICAgICAgPyBjb250YWluZXIub2Zmc2V0V2lkdGhcbiAgICAgIDogY29udGFpbmVyLm9mZnNldFdpZHRoIC0gbW9yZUJ1dHRvbi5vZmZzZXRXaWR0aDtcbiAgICBsZXQgbnVtQnJlYWtwb2ludHMgPSB0aGlzLl9uYXZCcmVha3BvaW50cy5sZW5ndGg7XG5cbiAgICAvLyBzdW0gY2hpbGQgd2lkdGhzIGluc3RlYWQgb2YgdXNpbmcgcGFyZW50J3Mgd2lkdGggdG8gYXZvaWRcbiAgICAvLyBicm93c2VyIGluY29uc2lzdGVuY2llc1xuICAgIGxldCBtYWluTGlua3NXaWR0aCA9IDA7XG4gICAgZm9yIChsZXQgZWwgb2YgbWFpbkxpbmtzLmNoaWxkcmVuKSB7XG4gICAgICBtYWluTGlua3NXaWR0aCArPSBlbC5vZmZzZXRXaWR0aDtcbiAgICB9XG5cbiAgICBpZiAobWFpbkxpbmtzV2lkdGggPiBuYXZXaWR0aCkge1xuICAgICAgdGhpcy5fbmF2QnJlYWtwb2ludHMucHVzaChtYWluTGlua3NXaWR0aCk7XG4gICAgICBjb25zdCBsYXN0TGluayA9IG1haW5MaW5rcy5jaGlsZHJlbi5pdGVtKG1haW5MaW5rcy5jaGlsZHJlbi5sZW5ndGggLSAxKTtcbiAgICAgIGlmIChsYXN0TGluayA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB0aGlzLl9wcmVwZW5kKGNvbGxhcHNlZExpbmtzLCBsYXN0TGluayk7XG5cbiAgICAgIGlmIChtb3JlQnV0dG9uLmNsYXNzTGlzdC5jb250YWlucygneXh0LU5hdi1pdGVtLS1tb3JlJykpIHtcbiAgICAgICAgbW9yZUJ1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKCd5eHQtTmF2LWl0ZW0tLW1vcmUnKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKG51bUJyZWFrcG9pbnRzICYmIG5hdldpZHRoID4gdGhpcy5fbmF2QnJlYWtwb2ludHNbbnVtQnJlYWtwb2ludHMgLSAxXSkge1xuICAgICAgICBjb25zdCBmaXJzdExpbmsgPSBjb2xsYXBzZWRMaW5rcy5jaGlsZHJlbi5pdGVtKDApO1xuICAgICAgICBpZiAoZmlyc3RMaW5rID09PSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIG1haW5MaW5rcy5hcHBlbmQoZmlyc3RMaW5rKTtcbiAgICAgICAgdGhpcy5fbmF2QnJlYWtwb2ludHMucG9wKCk7XG4gICAgICAgIG51bUJyZWFrcG9pbnRzLS07XG4gICAgICB9XG5cbiAgICAgIGlmIChjb2xsYXBzZWRMaW5rcy5jaGlsZHJlbi5sZW5ndGggPT09IDApIHtcbiAgICAgICAgbW9yZUJ1dHRvbi5jbGFzc0xpc3QuYWRkKCd5eHQtTmF2LWl0ZW0tLW1vcmUnKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmNsb3NlTW9yZURyb3Bkb3duKCk7XG4gICAgaWYgKG1haW5MaW5rc1dpZHRoID4gbmF2V2lkdGggfHxcbiAgICAgIChudW1CcmVha3BvaW50cyA+IDAgJiYgbmF2V2lkdGggPiB0aGlzLl9uYXZCcmVha3BvaW50c1tudW1CcmVha3BvaW50cyAtIDFdKSkge1xuICAgICAgdGhpcy5yZWZpdE5hdigpO1xuICAgIH1cbiAgfVxuXG4gIGNsb3NlTW9yZURyb3Bkb3duICgpIHtcbiAgICBjb25zdCBjb2xsYXBzZWQgPSBET00ucXVlcnkodGhpcy5fY29udGFpbmVyLCAnLnl4dC1OYXYtbW9kYWwnKTtcbiAgICBjb2xsYXBzZWQuY2xhc3NMaXN0LnJlbW92ZSgnaXMtYWN0aXZlJyk7XG4gICAgY29uc3QgbW9yZUJ1dHRvbiA9IERPTS5xdWVyeSh0aGlzLl9jb250YWluZXIsICcueXh0LU5hdi1tb3JlJyk7XG4gICAgbW9yZUJ1dHRvbi5zZXRBdHRyaWJ1dGUoJ2FyaWEtZXhwYW5kZWQnLCBmYWxzZSk7XG4gIH1cblxuICBvcGVuTW9yZURyb3Bkb3duICgpIHtcbiAgICBjb25zdCBjb2xsYXBzZWQgPSBET00ucXVlcnkodGhpcy5fY29udGFpbmVyLCAnLnl4dC1OYXYtbW9kYWwnKTtcbiAgICBjb2xsYXBzZWQuY2xhc3NMaXN0LmFkZCgnaXMtYWN0aXZlJyk7XG4gICAgY29uc3QgbW9yZUJ1dHRvbiA9IERPTS5xdWVyeSh0aGlzLl9jb250YWluZXIsICcueXh0LU5hdi1tb3JlJyk7XG4gICAgbW9yZUJ1dHRvbi5zZXRBdHRyaWJ1dGUoJ2FyaWEtZXhwYW5kZWQnLCB0cnVlKTtcbiAgfVxuXG4gIHRvZ2dsZU1vcmVEcm9wZG93biAoKSB7XG4gICAgY29uc3QgY29sbGFwc2VkID0gRE9NLnF1ZXJ5KHRoaXMuX2NvbnRhaW5lciwgJy55eHQtTmF2LW1vZGFsJyk7XG4gICAgY29sbGFwc2VkLmNsYXNzTGlzdC50b2dnbGUoJ2lzLWFjdGl2ZScpO1xuICAgIGNvbnN0IG1vcmVCdXR0b24gPSBET00ucXVlcnkodGhpcy5fY29udGFpbmVyLCAnLnl4dC1OYXYtbW9yZScpO1xuICAgIG1vcmVCdXR0b24uc2V0QXR0cmlidXRlKCdhcmlhLWV4cGFuZGVkJywgY29sbGFwc2VkLmNsYXNzTGlzdC5jb250YWlucygnaXMtYWN0aXZlJykpO1xuICB9XG5cbiAgY2hlY2tPdXRzaWRlQ2xpY2sgKGUpIHtcbiAgICBpZiAodGhpcy5fY2xvc2VzdChlLnRhcmdldCwgJy55eHQtTmF2LWNvbnRhaW5lcicpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5jbG9zZU1vcmVEcm9wZG93bigpO1xuICB9XG5cbiAgY2hlY2tNb2JpbGVPdmVyZmxvd0JlaGF2aW9yICgpIHtcbiAgICBpZiAodGhpcy5fY2hlY2tNb2JpbGVPdmVyZmxvd0JlaGF2aW9yVGltZXIpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLl9jaGVja01vYmlsZU92ZXJmbG93QmVoYXZpb3JUaW1lcik7XG4gICAgfVxuXG4gICAgdGhpcy5fY2hlY2tNb2JpbGVPdmVyZmxvd0JlaGF2aW9yVGltZXIgPSBzZXRUaW1lb3V0KHRoaXMuc2V0U3RhdGUuYmluZCh0aGlzKSwgUkVTSVpFX0RFQk9VTkNFKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTaW5jZSB0aGUgc2VydmVyIGRhdGEgb25seSBwcm92aWRlcyBhIGxpc3Qgb2ZcbiAgICogVlMgdmVydGljYWxLZXlzLCB3ZSBuZWVkIHRvIGNvbXB1dGUgYW5kIHRyYW5zZm9ybVxuICAgKiB0aGUgZGF0YSBpbnRvIHRoZSBwcm9wZXIgZm9ybWF0IGZvciByZW5kZXJpbmcuXG4gICAqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgc2V0U3RhdGUgKGRhdGEgPSB7fSkge1xuICAgIGlmIChkYXRhLnRhYk9yZGVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMuX3RhYk9yZGVyID0gdGhpcy5tZXJnZVRhYk9yZGVyKGRhdGEudGFiT3JkZXIsIHRoaXMuX3RhYk9yZGVyKTtcbiAgICB9XG5cbiAgICAvLyBTaW5jZSB0aGUgdGFiIG9yZGVyaW5nIGNhbiBjaGFuZ2UgYmFzZWQgb24gdGhlIHNlcnZlciBkYXRhXG4gICAgLy8gd2UgbmVlZCB0byB1cGRhdGUgZWFjaCB0YWJzIFVSTCB0byBpbmNsdWRlIHRoZSBvcmRlciBhcyBwYXJ0IG9mIHRoZWlyIHBhcmFtcy5cbiAgICAvLyBUaGlzIGhlbHBzIHdpdGggcGVyc2lzdGluZyBzdGF0ZSBhY3Jvc3MgdmVydGljYWxzLlxuICAgIGxldCB0YWJzID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl90YWJPcmRlci5sZW5ndGg7IGkrKykge1xuICAgICAgbGV0IHRhYiA9IHRoaXMuX3RhYnNbdGhpcy5fdGFiT3JkZXJbaV1dO1xuICAgICAgaWYgKHRhYiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRhYi51cmwgPSB0aGlzLmdlbmVyYXRlVGFiVXJsKHRhYi5iYXNlVXJsLCB0aGlzLmdldFVybFBhcmFtcygpKTtcbiAgICAgICAgdGFicy5wdXNoKHRhYik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHN1cGVyLnNldFN0YXRlKHtcbiAgICAgIHRhYnM6IHRhYnMsXG4gICAgICBvdmVyZmxvd0xhYmVsOiB0aGlzLm92ZXJmbG93TGFiZWwsXG4gICAgICBvdmVyZmxvd0ljb246IHRoaXMub3ZlcmZsb3dJY29uLFxuICAgICAgc2hvd0NvbGxhcHNlOiB0aGlzLnNob3VsZENvbGxhcHNlKCksXG4gICAgICBhcmlhTGFiZWw6IHRoaXMuX2FyaWFMYWJlbFxuICAgIH0pO1xuICB9XG5cbiAgLy8gVE9ETyAoYWdyb3cpIGludmVzdGlnYXRlIHJlbW92aW5nIHRoaXNcbiAgLy8gUGFyZW50Tm9kZS5wcmVwZW5kIHBvbHlmaWxsXG4gIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9QYXJlbnROb2RlL3ByZXBlbmQjUG9seWZpbGxcbiAgX3ByZXBlbmQgKGNvbGxhcHNlZExpbmtzLCBsYXN0TGluaykge1xuICAgIGlmICghY29sbGFwc2VkTGlua3MuaGFzT3duUHJvcGVydHkoJ3ByZXBlbmQnKSkge1xuICAgICAgbGV0IGRvY0ZyYWcgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XG4gICAgICBsZXQgaXNOb2RlID0gbGFzdExpbmsgaW5zdGFuY2VvZiBOb2RlO1xuICAgICAgZG9jRnJhZy5hcHBlbmRDaGlsZChpc05vZGUgPyBsYXN0TGluayA6IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKFN0cmluZyhsYXN0TGluaykpKTtcblxuICAgICAgY29sbGFwc2VkTGlua3MuaW5zZXJ0QmVmb3JlKGRvY0ZyYWcsIGNvbGxhcHNlZExpbmtzLmZpcnN0Q2hpbGQpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbGxhcHNlZExpbmtzLnByZXBlbmQobGFzdExpbmspO1xuICB9XG5cbiAgLy8gVE9ETyAoYWdyb3cpIGludmVzdGlnYXRlIHJlbW92aW5nIHRoaXNcbiAgLy8gQWRhcHRlZCBmcm9tIEVsZW1lbnQuY2xvc2VzdCBwb2x5ZmlsbFxuICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvRWxlbWVudC9jbG9zZXN0I1BvbHlmaWxsXG4gIF9jbG9zZXN0IChlbCwgY2xvc2VzdEVsU2VsZWN0b3IpIHtcbiAgICBpZiAoIWVsLmhhc093blByb3BlcnR5KCdjbG9zZXN0JykpIHtcbiAgICAgIGRvIHtcbiAgICAgICAgaWYgKERPTS5tYXRjaGVzKGVsLCBjbG9zZXN0RWxTZWxlY3RvcikpIHJldHVybiBlbDtcbiAgICAgICAgZWwgPSBlbC5wYXJlbnRFbGVtZW50IHx8IGVsLnBhcmVudE5vZGU7XG4gICAgICB9IHdoaWxlIChlbCAhPT0gbnVsbCAmJiBlbC5ub2RlVHlwZSA9PT0gMSk7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIGVsLmNsb3Nlc3QoY2xvc2VzdEVsU2VsZWN0b3IpO1xuICB9XG5cbiAgZ2V0VXJsUGFyYW1zICgpIHtcbiAgICByZXR1cm4gbmV3IFNlYXJjaFBhcmFtcyh3aW5kb3cubG9jYXRpb24uc2VhcmNoLnN1YnN0cmluZygxKSk7XG4gIH1cblxuICBzaG91bGRDb2xsYXBzZSAoKSB7XG4gICAgc3dpdGNoICh0aGlzLl9tb2JpbGVPdmVyZmxvd0JlaGF2aW9yKSB7XG4gICAgICBjYXNlIE1PQklMRV9PVkVSRkxPV19CRUhBVklPUl9PUFRJT04uQ09MTEFQU0U6XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgY2FzZSBNT0JJTEVfT1ZFUkZMT1dfQkVIQVZJT1JfT1BUSU9OLklOTkVSU0NST0xMOlxuICAgICAgICBjb25zdCBjb250YWluZXIgPSBET00ucXVlcnkodGhpcy5fY29udGFpbmVyLCAnLnl4dC1OYXYtY29udGFpbmVyJykgfHwgdGhpcy5fY29udGFpbmVyO1xuICAgICAgICBjb25zdCBuYXZXaWR0aCA9IGNvbnRhaW5lci5vZmZzZXRXaWR0aDtcbiAgICAgICAgcmV0dXJuIG5hdldpZHRoID4gTU9CSUxFX0JSRUFLUE9JTlQ7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIGdldERlZmF1bHRUYWJPcmRlciB3aWxsIGNvbXB1dGUgdGhlIGluaXRpYWwgdGFiIG9yZGVyaW5nIGJhc2VkXG4gICAqIG9uIGEgY29tYmluYXRpb24gb2YgdGhlIGNvbmZpZ3VyYXRpb24gcHJvdmlkZWQgZGlyZWN0bHkgdG8gdGhlIGNvbXBvbmVudFxuICAgKiBhbmQgdGhlIHVybCBwYXJhbXMuXG4gICAqIEBwYXJhbSB7T2JqZWN0W119IHRhYnNDb25maWdcbiAgICogQHBhcmFtIHtTZWFyY2hQYXJhbXN9XG4gICAqL1xuICBnZXREZWZhdWx0VGFiT3JkZXIgKHRhYnNDb25maWcsIHVybFBhcmFtcykge1xuICAgIGxldCB0YWJPcmRlciA9IFtdO1xuXG4gICAgLy8gVXNlIHRoZSBvcmRlcmluZyBmcm9tIHRoZSBVUkwgYXMgdGhlIHByaW1hcnkgY29uZmlndXJhdGlvblxuICAgIC8vIEFuZCB0aGVuIG1lcmdlIGl0IHdpdGggdGhlIGxvY2FsIGNvbmZpZ3VyYXRpb24sIGlmIHByb3ZpZGVkLlxuICAgIGlmICh1cmxQYXJhbXMgJiYgdXJsUGFyYW1zLmhhcygndGFiT3JkZXInKSkge1xuICAgICAgdGFiT3JkZXIgPSB1cmxQYXJhbXMuZ2V0KCd0YWJPcmRlcicpLnNwbGl0KCcsJyk7XG4gICAgfVxuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0YWJzQ29uZmlnLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCB0YWIgPSB0YWJzQ29uZmlnW2ldO1xuICAgICAgLy8gU29tZSB0YWJzIGRvbid0IGhhdmUgdmVydGljYWxLZXksIHNvIHdlIG1hcCBpdCBmcm9tIFVSTFxuICAgICAgaWYgKCF0YWIudmVydGljYWxLZXkpIHtcbiAgICAgICAgdGFiLnZlcnRpY2FsS2V5ID0gdGFiLnVybDtcbiAgICAgIH1cblxuICAgICAgLy8gQXZvaWQgZHVwbGljYXRlcyBpZiBjb25maWcgd2FzIHByb3ZpZGVkIGZyb20gVVJMXG4gICAgICBpZiAodGFiT3JkZXIuaW5jbHVkZXModGFiLnZlcnRpY2FsS2V5KSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgLy8gaXNGaXJzdCBzaG91bGQgYWx3YXlzIGJlIHRoZSBmaXJzdCBlbGVtZW50IGluIHRoZSBsaXN0XG4gICAgICBpZiAodGFiLmlzRmlyc3QpIHtcbiAgICAgICAgdGFiT3JkZXIudW5zaGlmdCh0YWIudmVydGljYWxLZXkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGFiT3JkZXIucHVzaCh0YWIudmVydGljYWxLZXkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0YWJPcmRlcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBtZXJnZVRhYk9yZGVyIG1lcmdlcyB0d28gYXJyYXlzIGludG8gb25lXG4gICAqIGJ5IGFwcGVuZGluZyBhZGRpdGlvbmFsIHRhYnMgdG8gdGhlIGVuZCBvZiB0aGUgb3JpZ2luYWwgYXJyYXlcbiAgICogQHBhcmFtIHtzdHJpbmdbXX0gdGFiT3JkZXIgVGFiIG9yZGVyIHByb3ZpZGVkIGJ5IHRoZSBzZXJ2ZXJcbiAgICogQHBhcmFtIHtzdHJpbmdbXX0gb3RoZXJUYWJPcmRlciBUYWIgb3JkZXIgcHJvdmlkZWQgYnkgY29uZmlndXJhdGlvblxuICAgKiBAcmV0dXJuIHtzdHJpbmdbXX1cbiAgICovXG4gIG1lcmdlVGFiT3JkZXIgKHRhYk9yZGVyLCBvdGhlclRhYk9yZGVyKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvdGhlclRhYk9yZGVyLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCB0YWJDb25maWcgPSBvdGhlclRhYk9yZGVyW2ldO1xuICAgICAgaWYgKHRhYk9yZGVyLmluY2x1ZGVzKHRhYkNvbmZpZykpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIC8vIGlzRmlyc3Qgc2hvdWxkIGJlIGFuIG92ZXJyaWRlIHRvIGR5bmFtaWMgdGFiIG9yZGVyaW5nLlxuICAgICAgaWYgKHRoaXMuX3RhYnNbdGFiQ29uZmlnXSAmJiB0aGlzLl90YWJzW3RhYkNvbmZpZ10uaXNGaXJzdCkge1xuICAgICAgICB0YWJPcmRlci51bnNoaWZ0KHRhYkNvbmZpZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0YWJPcmRlci5wdXNoKHRhYkNvbmZpZyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhYk9yZGVyO1xuICB9XG5cbiAgZ2VuZXJhdGVUYWJVcmwgKGJhc2VVcmwsIHBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMoKSkge1xuICAgIC8vIFdlIHdhbnQgdG8gcGVyc2lzdCB0aGUgcGFyYW1zIGZyb20gdGhlIGV4aXN0aW5nIFVSTCB0byB0aGUgbmV3XG4gICAgLy8gVVJMUyB3ZSBjcmVhdGUuXG4gICAgcGFyYW1zLnNldCgndGFiT3JkZXInLCB0aGlzLl90YWJPcmRlcik7XG4gICAgcmV0dXJuIGJhc2VVcmwgKyAnPycgKyBwYXJhbXMudG9TdHJpbmcoKTtcbiAgfVxufVxuIiwiLyoqIEBtb2R1bGUgU2VhcmNoQ29tcG9uZW50ICovXG5cbmltcG9ydCBDb21wb25lbnQgZnJvbSAnLi4vY29tcG9uZW50JztcbmltcG9ydCBET00gZnJvbSAnLi4vLi4vZG9tL2RvbSc7XG5pbXBvcnQgRmlsdGVyIGZyb20gJy4uLy4uLy4uL2NvcmUvbW9kZWxzL2ZpbHRlcic7XG5pbXBvcnQgU3RvcmFnZUtleXMgZnJvbSAnLi4vLi4vLi4vY29yZS9zdG9yYWdlL3N0b3JhZ2VrZXlzJztcbmltcG9ydCBTZWFyY2hQYXJhbXMgZnJvbSAnLi4vLi4vZG9tL3NlYXJjaHBhcmFtcyc7XG5cbmNvbnN0IEljb25TdGF0ZSA9IHtcbiAgJ1lFWFQnOiAwLFxuICAnTUFHTklGWUlOR19HTEFTUyc6IDFcbn07XG5cbi8qKlxuICogU2VhcmNoQ29tcG9uZW50IGV4cG9zZXMgYW4gaW50ZXJmYWNlIGluIG9yZGVyIHRvIGNyZWF0ZVxuICogYSBVSSBTZWFyY2ggZXhwZXJpZW5jZSBmb3IgdmVydGljYWwgYW5kIHVuaXZlcnNhbCBzZWFyY2guXG4gKlxuICogQGV4dGVuZHMgQ29tcG9uZW50XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNlYXJjaENvbXBvbmVudCBleHRlbmRzIENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yIChjb25maWcgPSB7fSwgc3lzdGVtQ29uZmlnID0ge30pIHtcbiAgICBzdXBlcihjb25maWcsIHN5c3RlbUNvbmZpZyk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgb3B0aW9uYWwgdmVydGljYWwga2V5IGZvciB2ZXJ0aWNhbCBzZWFyY2ggY29uZmlndXJhdGlvblxuICAgICAqIElmIG5vdCBwcm92aWRlZCwgYXV0by1jb21wbGV0ZSBhbmQgc2VhcmNoIHdpbGwgYmUgYmFzZWQgb24gdW5pdmVyc2FsXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLl92ZXJ0aWNhbEtleSA9IGNvbmZpZy52ZXJ0aWNhbEtleSB8fCBudWxsO1xuXG4gICAgLyoqXG4gICAgICogUXVlcnkgc3VibWlzc2lvbiBjYW4gb3B0aW9uYWxseSBiZSBiYXNlZCBvbiBhIGZvcm0gYXMgY29udGV4dC4gTm90ZSB0aGF0IGlmXG4gICAgICogYSBmb3JtIGlzIG5vdCB1c2VkLCB0aGUgY29tcG9uZW50IGhhcyBubyBndWFyYW50ZWUgb2YgV0NBRyBjb21wbGlhbmNlLlxuICAgICAqL1xuICAgIHRoaXMuX3VzZUZvcm0gPSBjb25maWcudXNlRm9ybSAhPT0gdW5kZWZpbmVkID8gY29uZmlnLnVzZUZvcm0gOiB0cnVlO1xuXG4gICAgLyoqXG4gICAgICogUXVlcnkgc3VibWlzc2lvbiBpcyBiYXNlZCBvbiBhIGZvcm0gYXMgY29udGV4dC5cbiAgICAgKiBPcHRpb25hbGx5IHByb3ZpZGVkLCBvdGhlcndpc2UgZGVmYXVsdHMgdG8gbmF0aXZlIGZvcm0gbm9kZSB3aXRoaW4gY29udGFpbmVyXG4gICAgICogQHR5cGUge3N0cmluZ30gQ1NTIHNlbGVjdG9yXG4gICAgICovXG4gICAgdGhpcy5fZm9ybUVsID0gY29uZmlnLmZvcm1TZWxlY3RvciB8fCAnZm9ybSc7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgaW5wdXQgZWxlbWVudCB1c2VkIGZvciBzZWFyY2hpbmcgYW5kIHdpcmVzIHVwIHRoZSBrZXlib2FyZCBpbnRlcmFjdGlvblxuICAgICAqIE9wdGlvbmFsbHkgcHJvdmlkZWQuXG4gICAgICogQHR5cGUge3N0cmluZ30gQ1NTIHNlbGVjdG9yXG4gICAgICovXG4gICAgdGhpcy5faW5wdXRFbCA9IGNvbmZpZy5pbnB1dEVsIHx8ICcuanMteWV4dC1xdWVyeSc7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgdGl0bGUgdXNlZCwgcHJvdmlkZWQgdG8gdGhlIHRlbXBsYXRlIGFzIGEgZGF0YSBwb2ludFxuICAgICAqIE9wdGlvbmFsbHkgcHJvdmlkZWQuIElmIG5vdCBwcm92aWRlZCwgbm8gdGl0bGUgd2lsbCBiZSBpbmNsdWRlZC5cbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMudGl0bGUgPSBjb25maWcudGl0bGU7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgbGFiZWwgdGV4dCBpcyB1c2VkIGZvciBsYWJlbGluZyB0aGUgaW5wdXQgYm94LCBhbHNvIHByb3ZpZGVkIHRvIHRlbXBsYXRlLlxuICAgICAqIE9wdGlvbmFsbHkgcHJvdmlkZWRcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMubGFiZWxUZXh0ID0gY29uZmlnLmxhYmVsVGV4dCB8fCAnQ29uZHVjdCBhIHNlYXJjaCc7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgc3VibWl0IHRleHQgaXMgdXNlZCBmb3IgbGFiZWxpbmcgdGhlIHN1Ym1pdCBidXR0b24sIGFsc28gcHJvdmlkZWQgdG8gdGhlIHRlbXBsYXRlLlxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgdGhpcy5zdWJtaXRUZXh0ID0gY29uZmlnLnN1Ym1pdFRleHQgfHwgJ1N1Ym1pdCc7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgY2xlYXIgdGV4dCBpcyB1c2VkIGZvciBsYWJlbGluZyB0aGUgY2xlYXIgYnV0dG9uLCBhbHNvIHByb3ZpZGVkIHRvIHRoZSB0ZW1wbGF0ZS5cbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMuY2xlYXJUZXh0ID0gY29uZmlnLmNsZWFyVGV4dCB8fCAnQ2xlYXInO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHN1Ym1pdCBpY29uIGlzIGFuIGljb24gZm9yIHRoZSBzdWJtaXQgYnV0dG9uLCBpZiBwcm92aWRlZCBpdCB3aWxsIGJlIGRpc3BsYXllZCBhbmQgdGhlXG4gICAgICogc3VibWl0IHRleHQgd2lsbCBiZSB1c2VkIGZvciBzY3JlZW4gcmVhZGVycy5cbiAgICAgKiBAdHlwZSB7c3RyaW5nfG51bGx9XG4gICAgICovXG4gICAgdGhpcy5zdWJtaXRJY29uID0gY29uZmlnLnN1Ym1pdEljb24gfHwgbnVsbDtcblxuICAgIC8qKlxuICAgICAqIFRoZSBxdWVyeSB0ZXh0IHRvIHNob3cgYXMgdGhlIGZpcnN0IGl0ZW0gZm9yIGF1dG8gY29tcGxldGUuXG4gICAgICogT3B0aW9uYWxseSBwcm92aWRlZFxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgdGhpcy5wcm9tcHRIZWFkZXIgPSBjb25maWcucHJvbXB0SGVhZGVyIHx8IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBBdXRvIGZvY3VzZXMgdGhlIGlucHV0IGJveCBpZiBzZXQgdG8gdHJ1ZS5cbiAgICAgKiBPcHRpb25hbGx5IHByb3ZpZGVkLCBkZWZhdWx0cyB0byBmYWxzZS5cbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICB0aGlzLmF1dG9Gb2N1cyA9IGNvbmZpZy5hdXRvRm9jdXMgPT09IHRydWU7XG5cbiAgICAvKipcbiAgICAgKiBJZiB0cnVlLCBzaG93IGFuIFwieFwiIHRoYXQgYWxsb3dzIHRoZSB1c2VyIHRvIGNsZWFyIHRoZSBjdXJyZW50XG4gICAgICogcXVlcnlcbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICB0aGlzLmNsZWFyQnV0dG9uID0gY29uZmlnLmNsZWFyQnV0dG9uID09PSB1bmRlZmluZWRcbiAgICAgID8gdHJ1ZVxuICAgICAgOiBjb25maWcuY2xlYXJCdXR0b247XG5cbiAgICAvKipcbiAgICAgKiBXaGVuIGF1dG9mb2N1c2luZyBvbiBsb2FkLCBvcHRpb25hbGx5IG9wZW4gdGhlIGF1dG9jb21wbGV0ZVxuICAgICAqIChwcmVzZXQgcHJvbXB0cylcbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICB0aGlzLmF1dG9jb21wbGV0ZU9uTG9hZCA9IGNvbmZpZy5hdXRvY29tcGxldGVPbkxvYWQgfHwgZmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiBzdWJtaXRVUkwgd2lsbCBmb3JjZSB0aGUgc2VhcmNoIHF1ZXJ5IHN1Ym1pc3Npb24gdG8gZ2V0XG4gICAgICogcmVkaXJlY3RlZCB0byB0aGUgVVJMIHByb3ZpZGVkLlxuICAgICAqIE9wdGlvbmFsLCBkZWZhdWx0cyB0byBudWxsLlxuICAgICAqXG4gICAgICogSWYgbm8gcmVkaXJlY3RVcmwgcHJvdmlkZWQsIHdlIGtlZXAgdGhlIHBhZ2UgYXMgYSBzaW5nbGUgcGFnZSBhcHAuXG4gICAgICpcbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICB0aGlzLnJlZGlyZWN0VXJsID0gY29uZmlnLnJlZGlyZWN0VXJsIHx8IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiB0cnVlIGlmIHRoZXJlIGlzIGFub3RoZXIgc2VhcmNoIGJhciBwcmVzZW50IG9uIHRoZSBwYWdlLlxuICAgICAqIFR3aW5zIG9ubHkgdXBkYXRlIHRoZSBxdWVyeSwgYW5kIGRvIG5vdCBzZWFyY2hcbiAgICAgKi9cbiAgICB0aGlzLl9pc1R3aW4gPSBjb25maWcuaXNUd2luO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHF1ZXJ5IHN0cmluZyB0byB1c2UgZm9yIHRoZSBpbnB1dCBib3gsIHByb3ZpZGVkIHRvIHRlbXBsYXRlIGZvciByZW5kZXJpbmcuXG4gICAgICogT3B0aW9uYWxseSBwcm92aWRlZFxuICAgICAqIEB0eXBlIHtzdHJpbmd8bnVsbH1cbiAgICAgKi9cbiAgICB0aGlzLnF1ZXJ5ID0gY29uZmlnLnF1ZXJ5IHx8IHRoaXMuY29yZS5nbG9iYWxTdG9yYWdlLmdldFN0YXRlKFN0b3JhZ2VLZXlzLlFVRVJZKTtcbiAgICB0aGlzLmNvcmUuZ2xvYmFsU3RvcmFnZS5vbigndXBkYXRlJywgU3RvcmFnZUtleXMuUVVFUlksIHEgPT4ge1xuICAgICAgdGhpcy5xdWVyeSA9IHE7XG4gICAgICBpZiAodGhpcy5xdWVyeUVsKSB7XG4gICAgICAgIHRoaXMucXVlcnlFbC52YWx1ZSA9IHE7XG4gICAgICB9XG4gICAgICB0aGlzLmRlYm91bmNlZFNlYXJjaChxKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBtaW5pbXVtIHRpbWUgYWxsb3dlZCBpbiBtaWxsaXNlY29uZHMgYmV0d2VlbiBzZWFyY2hlcyB0byBwcmV2ZW50XG4gICAgICogbWFueSBkdXBsaWNhdGUgc2VhcmNoZXMgYmFjay10by1iYWNrXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuX3NlYXJjaENvb2xkb3duID0gY29uZmlnLnNlYXJjaENvb2xkb3duIHx8IDMwMDtcblxuICAgIC8qKlxuICAgICAqIFdoZW4gdHJ1ZSBhbmQgXCJuZWFyIG1lXCIgaW50ZW50IGlzIGV4cHJlc3NlZCwgcHJvbXB0IHRoZSB1c2VyIGZvciB0aGVpciBnZW9sb2NhdGlvblxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5fcHJvbXB0Rm9yTG9jYXRpb24gPSBjb25maWcucHJvbXB0Rm9yTG9jYXRpb24gPT09IHVuZGVmaW5lZFxuICAgICAgPyB0cnVlXG4gICAgICA6IEJvb2xlYW4oY29uZmlnLnByb21wdEZvckxvY2F0aW9uKTtcblxuICAgIC8qKlxuICAgICAqIENvbnRyb2xzIHNob3dpbmcgYW5kIGhpZGluZyB0aGUgc2VhcmNoIGNsZWFyIGJ1dHRvblxuICAgICAqL1xuICAgIHRoaXMuX3Nob3dDbGVhckJ1dHRvbiA9IHRoaXMuY2xlYXJCdXR0b24gJiYgdGhpcy5xdWVyeTtcblxuICAgIC8qKlxuICAgICAqIEZvciB2ZXJ0aWNhbCBzZWFyY2ggYmFycywgd2hldGhlciBvciBub3QgdG8gYWxsb3cgZW1wdHkgc2VhcmNoZXMuXG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLl9hbGxvd0VtcHR5U2VhcmNoID0gISFjb25maWcuYWxsb3dFbXB0eVNlYXJjaDtcblxuICAgIC8qKlxuICAgICAqIFRoZSBuYW1lIG9mIHRoZSBjaGlsZCBBdXRvQ29tcGxldGUgY29tcG9uZW50LlxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLl9hdXRvQ29tcGxldGVOYW1lID0gYCR7dGhpcy5uYW1lfS5hdXRvY29tcGxldGVgO1xuXG4gICAgLyoqXG4gICAgICogT3B0aW9ucyB0byBwYXNzIHRvIHRoZSBnZW9sb2NhdGlvbiBhcGkuXG4gICAgICogQHR5cGUge09iamVjdH1cbiAgICAgKi9cbiAgICB0aGlzLl9nZW9sb2NhdGlvbk9wdGlvbnMgPSB7XG4gICAgICBlbmFibGVIaWdoQWNjdXJhY3k6IGZhbHNlLFxuICAgICAgdGltZW91dDogMTAwMCxcbiAgICAgIG1heGltdW1BZ2U6IDMwMDAwMCxcbiAgICAgIC4uLmNvbmZpZy5nZW9sb2NhdGlvbk9wdGlvbnNcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogT3B0aW9ucyBmb3IgdGhlIGdlb2xvY2F0aW9uIHRpbWVvdXQgYWxlcnQuXG4gICAgICogQHR5cGUge09iamVjdH1cbiAgICAgKi9cbiAgICB0aGlzLl9nZW9sb2NhdGlvblRpbWVvdXRBbGVydCA9IHtcbiAgICAgIGVuYWJsZWQ6IGZhbHNlLFxuICAgICAgbWVzc2FnZTogJ1dlIGFyZSB1bmFibGUgdG8gZGV0ZXJtaW5lIHlvdXIgbG9jYXRpb24nLFxuICAgICAgLi4uY29uZmlnLmdlb2xvY2F0aW9uVGltZW91dEFsZXJ0XG4gICAgfTtcbiAgfVxuXG4gIHN0YXRpYyBnZXQgdHlwZSAoKSB7XG4gICAgcmV0dXJuICdTZWFyY2hCYXInO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSB0ZW1wbGF0ZSB0byByZW5kZXJcbiAgICogQHJldHVybnMge3N0cmluZ31cbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBzdGF0aWMgZGVmYXVsdFRlbXBsYXRlTmFtZSAoKSB7XG4gICAgcmV0dXJuICdzZWFyY2gvc2VhcmNoJztcbiAgfVxuXG4gIG9uQ3JlYXRlICgpIHtcbiAgICBpZiAodGhpcy5xdWVyeSAhPSBudWxsICYmICF0aGlzLnJlZGlyZWN0VXJsKSB7XG4gICAgICB0aGlzLmNvcmUuc2V0UXVlcnkodGhpcy5xdWVyeSk7XG4gICAgfVxuICB9XG5cbiAgb25Nb3VudCAoKSB7XG4gICAgdGhpcy5xdWVyeUVsID0gRE9NLnF1ZXJ5KHRoaXMuX2NvbnRhaW5lciwgdGhpcy5faW5wdXRFbCk7XG4gICAgaWYgKHRoaXMuYXV0b0ZvY3VzICYmICF0aGlzLnF1ZXJ5ICYmICF0aGlzLmF1dG9jb21wbGV0ZU9uTG9hZCkge1xuICAgICAgdGhpcy5mb2N1c0lucHV0RWxlbWVudCgpO1xuICAgIH1cblxuICAgIHRoaXMuaXNVc2luZ1lleHRBbmltYXRlZEljb24gPSAhdGhpcy5fY29uZmlnLmN1c3RvbUljb25VcmwgJiYgIXRoaXMuc3VibWl0SWNvbjtcbiAgICBpZiAodGhpcy5pc1VzaW5nWWV4dEFuaW1hdGVkSWNvbikge1xuICAgICAgdGhpcy5pbml0QW5pbWF0ZWRJY29uKCk7XG4gICAgfVxuXG4gICAgLy8gV2lyZSB1cCBvdXIgc2VhcmNoIGhhbmRsaW5nIGFuZCBhdXRvIGNvbXBsZXRlXG4gICAgdGhpcy5pbml0U2VhcmNoKHRoaXMuX2Zvcm1FbCk7XG4gICAgdGhpcy5pbml0QXV0b0NvbXBsZXRlKHRoaXMuX2lucHV0RWwpO1xuXG4gICAgaWYgKHRoaXMuY2xlYXJCdXR0b24pIHtcbiAgICAgIHRoaXMuaW5pdENsZWFyQnV0dG9uKCk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuYXV0b0ZvY3VzICYmICF0aGlzLnF1ZXJ5ICYmIHRoaXMuYXV0b2NvbXBsZXRlT25Mb2FkKSB7XG4gICAgICB0aGlzLmZvY3VzSW5wdXRFbGVtZW50KCk7XG4gICAgfVxuICB9XG5cbiAgcmVxdWVzdEljb25BbmltYXRpb25GcmFtZSAoaWNvblN0YXRlKSB7XG4gICAgaWYgKHRoaXMuaWNvblN0YXRlID09PSBpY29uU3RhdGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5pY29uU3RhdGUgPSBpY29uU3RhdGU7XG4gICAgaWYgKCF0aGlzLmlzUmVxdWVzdGluZ0FuaW1hdGlvbkZyYW1lKSB7XG4gICAgICB0aGlzLmlzUmVxdWVzdGluZ0FuaW1hdGlvbkZyYW1lID0gdHJ1ZTtcbiAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICB0aGlzLmZvcndhcmRJY29uLmNsYXNzTGlzdC5yZW1vdmUoJ3l4dC1TZWFyY2hCYXItQW5pbWF0ZWRJY29uLS1wYXVzZWQnKTtcbiAgICAgICAgdGhpcy5yZXZlcnNlSWNvbi5jbGFzc0xpc3QucmVtb3ZlKCd5eHQtU2VhcmNoQmFyLUFuaW1hdGVkSWNvbi0tcGF1c2VkJyk7XG4gICAgICAgIGlmICh0aGlzLmljb25TdGF0ZSA9PT0gSWNvblN0YXRlLk1BR05JRllJTkdfR0xBU1MpIHtcbiAgICAgICAgICB0aGlzLmZvcndhcmRJY29uLmNsYXNzTGlzdC5yZW1vdmUoJ3l4dC1TZWFyY2hCYXItQW5pbWF0ZWRJY29uLS1pbmFjdGl2ZScpO1xuICAgICAgICAgIHRoaXMucmV2ZXJzZUljb24uY2xhc3NMaXN0LmFkZCgneXh0LVNlYXJjaEJhci1BbmltYXRlZEljb24tLWluYWN0aXZlJyk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5pY29uU3RhdGUgPT09IEljb25TdGF0ZS5ZRVhUKSB7XG4gICAgICAgICAgdGhpcy5mb3J3YXJkSWNvbi5jbGFzc0xpc3QuYWRkKCd5eHQtU2VhcmNoQmFyLUFuaW1hdGVkSWNvbi0taW5hY3RpdmUnKTtcbiAgICAgICAgICB0aGlzLnJldmVyc2VJY29uLmNsYXNzTGlzdC5yZW1vdmUoJ3l4dC1TZWFyY2hCYXItQW5pbWF0ZWRJY29uLS1pbmFjdGl2ZScpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaXNSZXF1ZXN0aW5nQW5pbWF0aW9uRnJhbWUgPSBmYWxzZTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGFuaW1hdGVJY29uVG9NYWduaWZ5aW5nR2xhc3MgKCkge1xuICAgIGlmICh0aGlzLmljb25Jc0Zyb3plbikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLnJlcXVlc3RJY29uQW5pbWF0aW9uRnJhbWUoSWNvblN0YXRlLk1BR05JRllJTkdfR0xBU1MpO1xuICB9XG5cbiAgYW5pbWF0ZUljb25Ub1lleHQgKGUpIHtcbiAgICBsZXQgZm9jdXNTdGlsbEluU2VhcmNoYmFyID0gZmFsc2U7XG4gICAgaWYgKGUgJiYgZS5yZWxhdGVkVGFyZ2V0KSB7XG4gICAgICBmb2N1c1N0aWxsSW5TZWFyY2hiYXIgPSB0aGlzLl9jb250YWluZXIuY29udGFpbnMoZS5yZWxhdGVkVGFyZ2V0KTtcbiAgICB9XG4gICAgaWYgKHRoaXMuaWNvbklzRnJvemVuIHx8IGZvY3VzU3RpbGxJblNlYXJjaGJhcikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLnJlcXVlc3RJY29uQW5pbWF0aW9uRnJhbWUoSWNvblN0YXRlLllFWFQpO1xuICB9XG5cbiAgaW5pdEFuaW1hdGVkSWNvbiAoKSB7XG4gICAgdGhpcy5pY29uU3RhdGUgPSAodGhpcy5hdXRvRm9jdXMgJiYgIXRoaXMucXVlcnkpID8gSWNvblN0YXRlLk1BR05JRllJTkdfR0xBU1MgOiBJY29uU3RhdGUuWUVYVDtcbiAgICB0aGlzLmZvcndhcmRJY29uID0gRE9NLnF1ZXJ5KHRoaXMuX2NvbnRhaW5lciwgJy5qcy15eHQtQW5pbWF0ZWRGb3J3YXJkJyk7XG4gICAgdGhpcy5yZXZlcnNlSWNvbiA9IERPTS5xdWVyeSh0aGlzLl9jb250YWluZXIsICcuanMteXh0LUFuaW1hdGVkUmV2ZXJzZScpO1xuICAgIGNvbnN0IGNsaWNrYWJsZUVsZW1lbnRTZWxlY3RvcnMgPSBbJy5qcy15ZXh0LXN1Ym1pdCcsICcuanMteXh0LVNlYXJjaEJhci1jbGVhciddO1xuICAgIGZvciAoY29uc3Qgc2VsZWN0b3Igb2YgY2xpY2thYmxlRWxlbWVudFNlbGVjdG9ycykge1xuICAgICAgY29uc3QgY2xpY2thYmxlRWwgPSBET00ucXVlcnkodGhpcy5fY29udGFpbmVyLCBzZWxlY3Rvcik7XG4gICAgICBpZiAoY2xpY2thYmxlRWwpIHtcbiAgICAgICAgRE9NLm9uKGNsaWNrYWJsZUVsLCAnbW91c2Vkb3duJywgKCkgPT4ge1xuICAgICAgICAgIHRoaXMuaWNvbklzRnJvemVuID0gdHJ1ZTtcbiAgICAgICAgfSk7XG4gICAgICAgIERPTS5vbihjbGlja2FibGVFbCwgJ21vdXNldXAnLCAoKSA9PiB7XG4gICAgICAgICAgdGhpcy5pY29uSXNGcm96ZW4gPSBmYWxzZTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICAgIERPTS5vbih0aGlzLnF1ZXJ5RWwsICdmb2N1cycsICgpID0+IHtcbiAgICAgIHRoaXMuYW5pbWF0ZUljb25Ub01hZ25pZnlpbmdHbGFzcygpO1xuICAgIH0pO1xuICAgIERPTS5vbih0aGlzLl9jb250YWluZXIsICdmb2N1c291dCcsIGUgPT4ge1xuICAgICAgdGhpcy5hbmltYXRlSWNvblRvWWV4dChlKTtcbiAgICB9KTtcbiAgfVxuXG4gIHJlbW92ZSAoKSB7XG4gICAgdGhpcy5fYXV0b2NvbXBsZXRlLnJlbW92ZSgpO1xuICAgIHN1cGVyLnJlbW92ZSgpO1xuICB9XG5cbiAgaW5pdENsZWFyQnV0dG9uICgpIHtcbiAgICBjb25zdCBidXR0b24gPSBET00ucXVlcnkodGhpcy5fY29udGFpbmVyLCAnLmpzLXl4dC1TZWFyY2hCYXItY2xlYXInKTtcbiAgICB0aGlzLl9zaG93Q2xlYXJCdXR0b24gPSB0aGlzLl9zaG93Q2xlYXJCdXR0b24gfHwgdGhpcy5xdWVyeTtcbiAgICBidXR0b24uY2xhc3NMaXN0LnRvZ2dsZSgneXh0LVNlYXJjaEJhci0taGlkZGVuJywgIXRoaXMuX3Nob3dDbGVhckJ1dHRvbik7XG5cbiAgICBET00ub24oYnV0dG9uLCAnY2xpY2snLCAoKSA9PiB7XG4gICAgICB0aGlzLnF1ZXJ5ID0gJyc7XG4gICAgICB0aGlzLl9zaG93Q2xlYXJCdXR0b24gPSBmYWxzZTtcbiAgICAgIGJ1dHRvbi5jbGFzc0xpc3QuYWRkKCd5eHQtU2VhcmNoQmFyLS1oaWRkZW4nKTtcbiAgICAgIHRoaXMucXVlcnlFbC52YWx1ZSA9IHRoaXMucXVlcnk7XG5cbiAgICAgIHRoaXMuY29yZS5wZXJzaXN0ZW50U3RvcmFnZS5zZXQoU3RvcmFnZUtleXMuUVVFUlksIHRoaXMucXVlcnkpO1xuICAgICAgdGhpcy5jb3JlLnBlcnNpc3RlbnRTdG9yYWdlLmRlbGV0ZShTdG9yYWdlS2V5cy5TRUFSQ0hfT0ZGU0VUKTtcbiAgICAgIHRoaXMuY29yZS5nbG9iYWxTdG9yYWdlLmRlbGV0ZShTdG9yYWdlS2V5cy5TRUFSQ0hfT0ZGU0VUKTtcbiAgICAgIHRoaXMuY29yZS5zZXRRdWVyeSh0aGlzLnF1ZXJ5KTtcblxuICAgICAgLy8gRm9jdXMgdGhlIGlucHV0IGVsZW1lbnQgYWZ0ZXIgY2xlYXJpbmcgdGhlIHF1ZXJ5LCByZWdhcmRsZXNzIG9mIHdoZXRoZXJcbiAgICAgIC8vIG9yIG5vdCB0aGUgYXV0b0ZvY3VzIG9wdGlvbiBpcyBlbmFibGVkLlxuICAgICAgLy8gTk9URShhbXVsbGluZ3MpOiBUaGlzIGRlcGVuZHMgaGVhdmlseSBvbiB0aGUgZmFjdCB0aGF0IHRoZSByZS1yZW5kZXJzXG4gICAgICAvLyB0cmlnZ2VyZWQgYnkgc2V0U3RhdGUgYW5kIGNvcmUuc2V0UXVlcnkgaGFwcGVuIHN5bmNocm9ub3VzbHk7IGlmIHRoaXNcbiAgICAgIC8vIHN0b3BzIGJlaW5nIHRoZSBjYXNlIGF0IHNvbWUgcG9pbnQsIHdlJ2xsIG5lZWQgYW4gYWx0ZXJuYXRpdmUgc29sdXRpb25cbiAgICAgIHRoaXMuZm9jdXNJbnB1dEVsZW1lbnQoKTtcbiAgICB9KTtcblxuICAgIERPTS5vbih0aGlzLnF1ZXJ5RWwsICdpbnB1dCcsIGUgPT4ge1xuICAgICAgY29uc3QgaW5wdXQgPSBlLnRhcmdldC52YWx1ZTtcbiAgICAgIHRoaXMucXVlcnkgPSBpbnB1dDtcbiAgICAgIGlmICghdGhpcy5fc2hvd0NsZWFyQnV0dG9uICYmIGlucHV0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgdGhpcy5fc2hvd0NsZWFyQnV0dG9uID0gdHJ1ZTtcbiAgICAgICAgYnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoJ3l4dC1TZWFyY2hCYXItLWhpZGRlbicpO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLl9zaG93Q2xlYXJCdXR0b24gJiYgaW5wdXQubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHRoaXMuX3Nob3dDbGVhckJ1dHRvbiA9IGZhbHNlO1xuICAgICAgICBidXR0b24uY2xhc3NMaXN0LmFkZCgneXh0LVNlYXJjaEJhci0taGlkZGVuJyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogUmVnaXN0ZXJzIHRoZSBkaWZmZXJlbnQgZXZlbnQgaGFuZGxlcnMgdGhhdCBjYW4gaXNzdWUgYSBzZWFyY2guIE5vdGUgdGhhdFxuICAgKiBkaWZmZXJlbnQgaGFuZGxlcnMgYXJlIHVzZWQgZGVwZW5kaW5nIG9uIHdoZXRoZXIgb3Igbm90IGEgZm9ybSBpcyB1c2VkIGFzXG4gICAqIGNvbnRleHQuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBmb3JtU2VsZWN0b3IgQ1NTIHNlbGVjdG9yIHRvIGJpbmQgb3VyIGZvcm0gc3VibWl0IGhhbmRsaW5nIHRvXG4gICAqL1xuICBpbml0U2VhcmNoIChmb3JtU2VsZWN0b3IpIHtcbiAgICB0aGlzLl9mb3JtRWwgPSBmb3JtU2VsZWN0b3I7XG5cbiAgICB0aGlzLl9jb250YWluZXIuY2xhc3NMaXN0LmFkZCgneXh0LVNlYXJjaEJhci13cmFwcGVyJyk7XG5cbiAgICBpZiAodGhpcy5fdXNlRm9ybSkge1xuICAgICAgbGV0IGZvcm0gPSBET00ucXVlcnkodGhpcy5fY29udGFpbmVyLCBmb3JtU2VsZWN0b3IpO1xuICAgICAgaWYgKCFmb3JtKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAnQ291bGQgbm90IGluaXRpYWxpemUgU2VhcmNoQmFyOyBDYW4gbm90IGZpbmQge0hUTUxFbGVtZW50fSBgJyxcbiAgICAgICAgICB0aGlzLl9mb3JtRWwsICdgLicpO1xuICAgICAgfVxuXG4gICAgICBET00ub24oZm9ybSwgJ3N1Ym1pdCcsIChlKSA9PiB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgLy8gVE9ETyhvc2hpKSB3ZSBzaG91bGQgbm90IHVzZSB0aGUgc2FtZSBjc3Mgc2VsZWN0b3IgKHRoaXMuX2lucHV0RWwpXG4gICAgICAgIC8vIEZvciBib3RoIHRoZSBhdXRvY29tcGxldGUgQU5EIHRoZSBzZWFyY2ggYmFyIGlucHV0XG4gICAgICAgIC8vIFRoaXMgaXMgaW5jcmVkaWJseSBjb25mdXNpbmcsIGFuZCBhbHNvIG1ha2VzIHRoZSBmaXJzdCBET00ucXVlcnlcbiAgICAgICAgLy8gUmVseSBvbiB0aGUgb3JkZXIgb2YgdGhlIGlucHV0IGVsIGFuZCBhdXRvY29tcGxldGUgaW4gdGhlIHRlbXBsYXRlXG4gICAgICAgIGNvbnN0IGlucHV0RWwgPSBmb3JtLnF1ZXJ5U2VsZWN0b3IodGhpcy5faW5wdXRFbCk7XG4gICAgICAgIHRoaXMub25RdWVyeVN1Ym1pdChpbnB1dEVsKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBpbnB1dEVsID0gRE9NLnF1ZXJ5KHRoaXMuX2NvbnRhaW5lciwgdGhpcy5faW5wdXRFbCk7XG4gICAgICBpZiAoIWlucHV0RWwpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICdDb3VsZCBub3QgaW5pdGlhbGl6ZSBTZWFyY2hCYXI7IENhbiBub3QgZmluZCB7SFRNTEVsZW1lbnR9IGAnLFxuICAgICAgICAgIHRoaXMuX2lucHV0RWwsICdgLicpO1xuICAgICAgfVxuICAgICAgRE9NLm9uKGlucHV0RWwsICdrZXlkb3duJywgKGUpID0+IHtcbiAgICAgICAgaWYgKGUua2V5ID09PSAnRW50ZXInKSB7XG4gICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIHRoaXMub25RdWVyeVN1Ym1pdChpbnB1dEVsKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IHN1Ym1pdEJ1dHRvbiA9IERPTS5xdWVyeSh0aGlzLl9jb250YWluZXIsICcuanMteWV4dC1zdWJtaXQnKTtcbiAgICAgIERPTS5vbihzdWJtaXRCdXR0b24sICdjbGljaycsIChlKSA9PiB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgdGhpcy5vblF1ZXJ5U3VibWl0KGlucHV0RWwpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBoYW5kbGVyIGZvciBhIHF1ZXJ5IHN1Ym1pc3Npb24uIFRoaXMgbWV0aG9kIGZpcnN0IHNldHMgdGhlIG5ldyBxdWVyeSBpblxuICAgKiBwZXJzaXN0ZW50IGFuZCBnbG9iYWwgc3RvcmFnZSwgdGhhbiBwZXJmb3JtcyBhIGRlYm91bmNlZCBzZWFyY2guXG4gICAqXG4gICAqIEBwYXJhbSB7Tm9kZX0gaW5wdXRFbCBUaGUgaW5wdXQgZWxlbWVudCBjb250YWluaW5nIHRoZSBxdWVyeS5cbiAgICovXG4gIG9uUXVlcnlTdWJtaXQgKGlucHV0RWwpIHtcbiAgICBjb25zdCBxdWVyeSA9IGlucHV0RWwudmFsdWU7XG4gICAgdGhpcy5xdWVyeSA9IHF1ZXJ5O1xuICAgIGNvbnN0IHBhcmFtcyA9IG5ldyBTZWFyY2hQYXJhbXMod2luZG93LmxvY2F0aW9uLnNlYXJjaC5zdWJzdHJpbmcoMSkpO1xuICAgIHBhcmFtcy5zZXQoJ3F1ZXJ5JywgcXVlcnkpO1xuXG4gICAgLy8gSWYgd2UgaGF2ZSBhIHJlZGlyZWN0VXJsLCB3ZSB3YW50IHRoZSBmb3JtIHRvIGJlXG4gICAgLy8gc2VyaWFsaXplZCBhbmQgc3VibWl0dGVkLlxuICAgIGlmICh0eXBlb2YgdGhpcy5yZWRpcmVjdFVybCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gdGhpcy5yZWRpcmVjdFVybCArICc/JyArIHBhcmFtcy50b1N0cmluZygpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlucHV0RWwuYmx1cigpO1xuICAgIERPTS5xdWVyeSh0aGlzLl9jb250YWluZXIsICcuanMteWV4dC1zdWJtaXQnKS5ibHVyKCk7XG4gICAgLy8gVE9ETzogbW92ZSB0aGlzIGludG8gaW5pdENsZWFyQnV0dG9uXG4gICAgaWYgKHRoaXMuY2xlYXJCdXR0b24pIHtcbiAgICAgIGNvbnN0IGJ1dHRvbiA9IERPTS5xdWVyeSh0aGlzLl9jb250YWluZXIsICcuanMteXh0LVNlYXJjaEJhci1jbGVhcicpO1xuICAgICAgaWYgKHRoaXMucXVlcnkpIHtcbiAgICAgICAgdGhpcy5fc2hvd0NsZWFyQnV0dG9uID0gdHJ1ZTtcbiAgICAgICAgYnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoJ3l4dC1TZWFyY2hCYXItLWhpZGRlbicpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fc2hvd0NsZWFyQnV0dG9uID0gZmFsc2U7XG4gICAgICAgIGJ1dHRvbi5jbGFzc0xpc3QuYWRkKCd5eHQtU2VhcmNoQmFyLS1oaWRkZW4nKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHRoaXMuaXNVc2luZ1lleHRBbmltYXRlZEljb24pIHtcbiAgICAgIHRoaXMuYW5pbWF0ZUljb25Ub1lleHQoKTtcbiAgICB9XG5cbiAgICB0aGlzLmNvcmUucGVyc2lzdGVudFN0b3JhZ2Uuc2V0KFN0b3JhZ2VLZXlzLlFVRVJZLCBxdWVyeSk7XG4gICAgdGhpcy5jb3JlLnBlcnNpc3RlbnRTdG9yYWdlLmRlbGV0ZShTdG9yYWdlS2V5cy5TRUFSQ0hfT0ZGU0VUKTtcbiAgICB0aGlzLmNvcmUuZ2xvYmFsU3RvcmFnZS5kZWxldGUoU3RvcmFnZUtleXMuU0VBUkNIX09GRlNFVCk7XG4gICAgdGhpcy5jb3JlLnNldFF1ZXJ5KHF1ZXJ5KTtcbiAgICB0aGlzLmRlYm91bmNlZFNlYXJjaChxdWVyeSk7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgaGVscGVyIG1ldGhvZCB0byB3aXJlIHVwIG91ciBhdXRvIGNvbXBsZXRlIG9uIGFuIGlucHV0IHNlbGVjdG9yXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpbnB1dFNlbGVjdG9yIENTUyBzZWxlY3RvciB0byBiaW5kIG91ciBhdXRvIGNvbXBsZXRlIGNvbXBvbmVudCB0b1xuICAgKi9cbiAgaW5pdEF1dG9Db21wbGV0ZSAoaW5wdXRTZWxlY3Rvcikge1xuICAgIHRoaXMuX2lucHV0RWwgPSBpbnB1dFNlbGVjdG9yO1xuXG4gICAgaWYgKHRoaXMuX2F1dG9jb21wbGV0ZSkge1xuICAgICAgdGhpcy5fYXV0b2NvbXBsZXRlLnJlbW92ZSgpO1xuICAgIH1cblxuICAgIHRoaXMuX2F1dG9jb21wbGV0ZSA9IHRoaXMuY29tcG9uZW50TWFuYWdlci5jcmVhdGUoJ0F1dG9Db21wbGV0ZScsIHtcbiAgICAgIHBhcmVudENvbnRhaW5lcjogdGhpcy5fY29udGFpbmVyLFxuICAgICAgbmFtZTogdGhpcy5fYXV0b0NvbXBsZXRlTmFtZSxcbiAgICAgIGNvbnRhaW5lcjogJy55eHQtU2VhcmNoQmFyLWF1dG9jb21wbGV0ZScsXG4gICAgICBhdXRvRm9jdXM6IHRoaXMuYXV0b0ZvY3VzICYmICF0aGlzLmF1dG9jb21wbGV0ZU9uTG9hZCxcbiAgICAgIHZlcnRpY2FsS2V5OiB0aGlzLl92ZXJ0aWNhbEtleSxcbiAgICAgIHByb21wdEhlYWRlcjogdGhpcy5wcm9tcHRIZWFkZXIsXG4gICAgICBvcmlnaW5hbFF1ZXJ5OiB0aGlzLnF1ZXJ5LFxuICAgICAgaW5wdXRFbDogaW5wdXRTZWxlY3RvcixcbiAgICAgIG9uU3VibWl0OiAoKSA9PiB7XG4gICAgICAgIGlmICh0aGlzLl91c2VGb3JtKSB7XG4gICAgICAgICAgRE9NLnRyaWdnZXIoRE9NLnF1ZXJ5KHRoaXMuX2NvbnRhaW5lciwgdGhpcy5fZm9ybUVsKSwgJ3N1Ym1pdCcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnN0IGlucHV0RWwgPSBET00ucXVlcnkodGhpcy5fY29udGFpbmVyLCBpbnB1dFNlbGVjdG9yKTtcbiAgICAgICAgICB0aGlzLm9uUXVlcnlTdWJtaXQoaW5wdXRFbCk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBvbkNoYW5nZTogKCkgPT4ge1xuICAgICAgICBET00udHJpZ2dlcihET00ucXVlcnkodGhpcy5fY29udGFpbmVyLCBpbnB1dFNlbGVjdG9yKSwgJ2lucHV0Jyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogUGVyZm9ybXMgYSBkZWJvdW5jZWQgcXVlcnkgdXNpbmcgdGhlIHByb3ZpZGVkIHN0cmluZyBpbnB1dC4gU3BlY2lmaWNhbGx5LCBhIG5ldyBzZWFyY2ggaXMgbm90XG4gICAqIHBlcmZvcm1lZCBpZiB3ZSByZWNlbnRseSBzZWFyY2hlZCwgaWYgdGhlcmUncyBubyBxdWVyeSBmb3IgdW5pdmVyc2FsIHNlYXJjaCwgb3IgaWYgdGhpc1xuICAgKiBpcyBhIHR3aW4gc2VhcmNoYmFyLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcXVlcnkgVGhlIHN0cmluZyB0byBxdWVyeSBhZ2FpbnN0LlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZX0gQSBwcm9taXNlIHRoYXQgd2lsbCBwZXJmb3JtIHRoZSBxdWVyeSBhbmQgdXBkYXRlIGdsb2JhbFN0b3JhZ2UgYWNjb3JkaW5nbHkuXG4gICAqL1xuICBkZWJvdW5jZWRTZWFyY2ggKHF1ZXJ5KSB7XG4gICAgaWYgKHRoaXMuX3Rocm90dGxlZCB8fFxuICAgICAgKCFxdWVyeSAmJiAhdGhpcy5fdmVydGljYWxLZXkpIHx8XG4gICAgICAoIXF1ZXJ5ICYmIHRoaXMuX3ZlcnRpY2FsS2V5ICYmICF0aGlzLl9hbGxvd0VtcHR5U2VhcmNoKSB8fFxuICAgICAgdGhpcy5faXNUd2luKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5fdGhyb3R0bGVkID0gdHJ1ZTtcbiAgICBzZXRUaW1lb3V0KCgpID0+IHsgdGhpcy5fdGhyb3R0bGVkID0gZmFsc2U7IH0sIHRoaXMuX3NlYXJjaENvb2xkb3duKTtcblxuICAgIC8vIElmIF9wcm9tcHRGb3JMb2NhdGlvbiBpcyBlbmFibGVkLCB3ZSB3aWxsIGNvbXB1dGUgdGhlIHF1ZXJ5J3MgaW50ZW50IGFuZCwgZnJvbSB0aGVyZSxcbiAgICAvLyBkZXRlcm1pbmUgaWYgaXQncyBuZWNlc3NhcnkgdG8gcHJvbXB0IHRoZSB1c2VyIGZvciB0aGVpciBsb2NhdGlvbiBpbmZvcm1hdGlvbi4gSXQgd2lsbFxuICAgIC8vIGJlIHVubmVjZXNzYXJ5IGlmIHRoZSBxdWVyeSBkb2VzIG5vdCBoYXZlIG5lYXIgbWUgaW50ZW50IG9yIHdlIGFscmVhZHkgaGF2ZSB0aGVpciBsb2NhdGlvblxuICAgIC8vIHN0b3JlZC5cbiAgICBpZiAodGhpcy5fcHJvbXB0Rm9yTG9jYXRpb24pIHtcbiAgICAgIHRoaXMuZmV0Y2hRdWVyeUludGVudHMocXVlcnkpXG4gICAgICAgIC50aGVuKHF1ZXJ5SW50ZW50cyA9PiBxdWVyeUludGVudHMuaW5jbHVkZXMoJ05FQVJfTUUnKSlcbiAgICAgICAgLnRoZW4ocXVlcnlIYXNOZWFyTWVJbnRlbnQgPT4ge1xuICAgICAgICAgIGlmIChxdWVyeUhhc05lYXJNZUludGVudCAmJiAhdGhpcy5jb3JlLmdsb2JhbFN0b3JhZ2UuZ2V0U3RhdGUoU3RvcmFnZUtleXMuR0VPTE9DQVRJT04pKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT5cbiAgICAgICAgICAgICAgbmF2aWdhdG9yLmdlb2xvY2F0aW9uLmdldEN1cnJlbnRQb3NpdGlvbihcbiAgICAgICAgICAgICAgICBwb3NpdGlvbiA9PiB7XG4gICAgICAgICAgICAgICAgICB0aGlzLmNvcmUuZ2xvYmFsU3RvcmFnZS5zZXQoU3RvcmFnZUtleXMuR0VPTE9DQVRJT04sIHtcbiAgICAgICAgICAgICAgICAgICAgbGF0OiBwb3NpdGlvbi5jb29yZHMubGF0aXR1ZGUsXG4gICAgICAgICAgICAgICAgICAgIGxuZzogcG9zaXRpb24uY29vcmRzLmxvbmdpdHVkZSxcbiAgICAgICAgICAgICAgICAgICAgcmFkaXVzOiBwb3NpdGlvbi5jb29yZHMuYWNjdXJhY3lcbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgcmVzb2x2ZSh0aGlzLnNlYXJjaChxdWVyeSkpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgcmVzb2x2ZSh0aGlzLnNlYXJjaChxdWVyeSkpO1xuICAgICAgICAgICAgICAgICAgY29uc3QgeyBlbmFibGVkLCBtZXNzYWdlIH0gPSB0aGlzLl9nZW9sb2NhdGlvblRpbWVvdXRBbGVydDtcbiAgICAgICAgICAgICAgICAgIGlmIChlbmFibGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5hbGVydChtZXNzYWdlKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHRoaXMuX2dlb2xvY2F0aW9uT3B0aW9ucylcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNlYXJjaChxdWVyeSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMuc2VhcmNoKHF1ZXJ5KTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUGVyZm9ybXMgYSBxdWVyeSB1c2luZyB0aGUgcHJvdmlkZWQgc3RyaW5nIGlucHV0LlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcXVlcnkgVGhlIHN0cmluZyB0byBxdWVyeSBhZ2FpbnN0LlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZX0gQSBwcm9taXNlIHRoYXQgd2lsbCBwZXJmb3JtIHRoZSBxdWVyeSBhbmQgdXBkYXRlIGdsb2JhbFN0b3JhZ2UgYWNjb3JkaW5nbHkuXG4gICAqL1xuICBzZWFyY2ggKHF1ZXJ5KSB7XG4gICAgaWYgKHRoaXMuX3ZlcnRpY2FsS2V5KSB7XG4gICAgICBjb25zdCBhbGxGaWx0ZXJzID0gdGhpcy5jb3JlLmdsb2JhbFN0b3JhZ2UuZ2V0QWxsKFN0b3JhZ2VLZXlzLkZJTFRFUik7XG4gICAgICBjb25zdCB0b3RhbEZpbHRlciA9IGFsbEZpbHRlcnMubGVuZ3RoID4gMVxuICAgICAgICA/IEZpbHRlci5hbmQoLi4uYWxsRmlsdGVycylcbiAgICAgICAgOiBhbGxGaWx0ZXJzWzBdO1xuICAgICAgcmV0dXJuIHRoaXMuY29yZS52ZXJ0aWNhbFNlYXJjaCh0aGlzLl92ZXJ0aWNhbEtleSwge1xuICAgICAgICBpbnB1dDogcXVlcnksXG4gICAgICAgIGZpbHRlcjogSlNPTi5zdHJpbmdpZnkodG90YWxGaWx0ZXIpLFxuICAgICAgICBvZmZzZXQ6IHRoaXMuY29yZS5nbG9iYWxTdG9yYWdlLmdldFN0YXRlKFN0b3JhZ2VLZXlzLlNFQVJDSF9PRkZTRVQpIHx8IDBcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBOT1RFKGJpbGx5KSBUZW1wb3JhcnkgaGFjayBmb3IgREVNT1xuICAgICAgLy8gUmVtb3ZlIG1lIGFmdGVyIHRoZSBkZW1vXG4gICAgICBsZXQgbmF2ID0gdGhpcy5jb21wb25lbnRNYW5hZ2VyXG4gICAgICAgIC5nZXRBY3RpdmVDb21wb25lbnQoJ05hdmlnYXRpb24nKTtcblxuICAgICAgaWYgKG5hdikge1xuICAgICAgICBsZXQgdGFicyA9IG5hdi5nZXRTdGF0ZSgndGFicycpO1xuICAgICAgICBsZXQgdXJscyA9IHt9O1xuXG4gICAgICAgIGlmICh0YWJzICYmIEFycmF5LmlzQXJyYXkodGFicykpIHtcbiAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRhYnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxldCBwYXJhbXMgPSBuZXcgU2VhcmNoUGFyYW1zKHRhYnNbaV0udXJsLnNwbGl0KCc/JylbMV0pO1xuICAgICAgICAgICAgcGFyYW1zLnNldCgncXVlcnknLCBxdWVyeSk7XG5cbiAgICAgICAgICAgIGxldCB1cmwgPSB0YWJzW2ldLmJhc2VVcmw7XG4gICAgICAgICAgICBpZiAocGFyYW1zLnRvU3RyaW5nKCkubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICB1cmwgKz0gJz8nICsgcGFyYW1zLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB1cmxzW3RhYnNbaV0uY29uZmlnSWRdID0gdXJsO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5jb3JlLnNlYXJjaChxdWVyeSwgdXJscyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLmNvcmUuc2VhcmNoKHF1ZXJ5KTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQSBoZWxwZXIgbWV0aG9kIHRoYXQgY29tcHV0ZXMgdGhlIGludGVudHMgb2YgdGhlIHByb3ZpZGVkIHF1ZXJ5LiBJZiB0aGUgcXVlcnkgd2FzIGVudGVyZWRcbiAgICogbWFudWFsbHkgaW50byB0aGUgc2VhcmNoIGJhciBvciBzZWxlY3RlZCB2aWEgYXV0b2NvbXBsZXRlLCBpdHMgaW50ZW50cyB3aWxsIGhhdmUgYmVlbiBzdG9yZWRcbiAgICogYWxyZWFkeSBpbiBnbG9iYWxTdG9yYWdlLiBPdGhlcndpc2UsIGEgbmV3IEFQSSBjYWxsIHdpbGwgaGF2ZSB0byBiZSBpc3N1ZWQgdG8gZGV0ZXJtaW5lXG4gICAqIGludGVudC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHF1ZXJ5IFRoZSBxdWVyeSB3aG9zZSBpbnRlbnQgaXMgbmVlZGVkLlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZX0gQSBwcm9taXNlIGNvbnRhaW5pbmcgdGhlIGludGVudHMgb2YgdGhlIHF1ZXJ5LlxuICAgKi9cbiAgZmV0Y2hRdWVyeUludGVudHMgKHF1ZXJ5KSB7XG4gICAgY29uc3QgYXV0b2NvbXBsZXRlRGF0YSA9XG4gICAgICB0aGlzLmNvcmUuZ2xvYmFsU3RvcmFnZS5nZXRTdGF0ZShgJHtTdG9yYWdlS2V5cy5BVVRPQ09NUExFVEV9LiR7dGhpcy5fYXV0b0NvbXBsZXRlTmFtZX1gKTtcbiAgICBpZiAoIWF1dG9jb21wbGV0ZURhdGEpIHtcbiAgICAgIGNvbnN0IGF1dG9jb21wbGV0ZVJlcXVlc3QgPSB0aGlzLl92ZXJ0aWNhbEtleVxuICAgICAgICA/IHRoaXMuY29yZS5hdXRvQ29tcGxldGVWZXJ0aWNhbChcbiAgICAgICAgICBxdWVyeSxcbiAgICAgICAgICB0aGlzLl9hdXRvQ29tcGxldGVOYW1lLFxuICAgICAgICAgIHRoaXMuX3ZlcnRpY2FsS2V5KVxuICAgICAgICA6IHRoaXMuY29yZS5hdXRvQ29tcGxldGVVbml2ZXJzYWwocXVlcnksIHRoaXMuX2F1dG9Db21wbGV0ZU5hbWUpO1xuICAgICAgcmV0dXJuIGF1dG9jb21wbGV0ZVJlcXVlc3QudGhlbihkYXRhID0+IGRhdGEuaW5wdXRJbnRlbnRzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gVGhlcmUgYXJlIHR3byBhbHRlcm5hdGl2ZXMgdG8gY29uc2lkZXIgaGVyZS4gVGhlIHVzZXIgY291bGQgaGF2ZSBzZWxlY3RlZCB0aGUgcXVlcnlcbiAgICAgIC8vIGFzIGFuIGF1dG9jb21wbGV0ZSBvcHRpb24gb3IgbWFudWFsbHkgaW5wdXQgaXQgdGhlbXNlbHZlcy4gSWYgdGhlIGZvcm1lciwgdXNlIHRoZSBpbnRlbnRzXG4gICAgICAvLyBvZiB0aGUgY29ycmVzcG9uZGluZyBhdXRvY29tcGxldGUgb3B0aW9uLiBJZiB0aGUgbGF0dGVyLCB1c2UgdGhlIGlucHV0SW50ZW50cyBvZiB0aGVcbiAgICAgIC8vIGF1dG9jb21wbGV0ZURhdGEuXG4gICAgICBjb25zdCByZXN1bHRzID0gYXV0b2NvbXBsZXRlRGF0YS5zZWN0aW9ucy5mbGF0TWFwKHNlY3Rpb24gPT4gc2VjdGlvbi5yZXN1bHRzKTtcbiAgICAgIGNvbnN0IG1hdGNoaW5nUmVzdWx0ID0gcmVzdWx0cy5maW5kKHJlc3VsdCA9PiByZXN1bHQudmFsdWUgPT09IHF1ZXJ5KTtcbiAgICAgIGNvbnN0IHF1ZXJ5SW50ZW50cyA9IG1hdGNoaW5nUmVzdWx0ID8gbWF0Y2hpbmdSZXN1bHQuaW50ZW50cyA6IGF1dG9jb21wbGV0ZURhdGEuaW5wdXRJbnRlbnRzO1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShxdWVyeUludGVudHMpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBBIGhlbHBlciBtZXRob2QgdGhhdCBjb25zdHJ1Y3RzIHRoZSBtZXRhIGluZm9ybWF0aW9uIG5lZWRlZCBieSB0aGUgU0VBUkNIX0NMRUFSX0JVVFRPTlxuICAgKiBhbmFseXRpY3MgZXZlbnQuXG4gICAqL1xuICBldmVudE9wdGlvbnMgKCkge1xuICAgIGNvbnN0IHF1ZXJ5SWQgPSB0aGlzLmNvcmUuZ2xvYmFsU3RvcmFnZS5nZXRTdGF0ZShTdG9yYWdlS2V5cy5RVUVSWV9JRCk7XG4gICAgY29uc3Qgb3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oXG4gICAgICB7fSxcbiAgICAgIHF1ZXJ5SWQgJiYgeyBxdWVyeUlkIH0sXG4gICAgICB0aGlzLl92ZXJ0aWNhbEtleSAmJiB7IHZlcnRpY2FsS2V5OiB0aGlzLl92ZXJ0aWNhbEtleSB9XG4gICAgKTtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkob3B0aW9ucyk7XG4gIH1cblxuICBzZXRTdGF0ZSAoZGF0YSkge1xuICAgIGNvbnN0IGZvcndhcmRJY29uT3B0cyA9IHtcbiAgICAgIGljb25OYW1lOiAneWV4dF9hbmltYXRlZF9mb3J3YXJkJyxcbiAgICAgIGNsYXNzTmFtZXM6ICdJY29uLS1sZycsXG4gICAgICBjb21wbGV4Q29udGVudHNQYXJhbXM6IHtcbiAgICAgICAgaWNvblByZWZpeDogdGhpcy5uYW1lXG4gICAgICB9XG4gICAgfTtcbiAgICBjb25zdCByZXZlcnNlSWNvbk9wdHMgPSB7XG4gICAgICBpY29uTmFtZTogJ3lleHRfYW5pbWF0ZWRfcmV2ZXJzZScsXG4gICAgICBjbGFzc05hbWVzOiAnSWNvbi0tbGcnLFxuICAgICAgY29tcGxleENvbnRlbnRzUGFyYW1zOiB7XG4gICAgICAgIGljb25QcmVmaXg6IHRoaXMubmFtZVxuICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIHN1cGVyLnNldFN0YXRlKE9iamVjdC5hc3NpZ24oe1xuICAgICAgdGl0bGU6IHRoaXMudGl0bGUsXG4gICAgICBsYWJlbFRleHQ6IHRoaXMubGFiZWxUZXh0LFxuICAgICAgc3VibWl0SWNvbjogdGhpcy5zdWJtaXRJY29uLFxuICAgICAgc3VibWl0VGV4dDogdGhpcy5zdWJtaXRUZXh0LFxuICAgICAgY2xlYXJUZXh0OiB0aGlzLmNsZWFyVGV4dCxcbiAgICAgIHNob3dDbGVhckJ1dHRvbjogdGhpcy5fc2hvd0NsZWFyQnV0dG9uLFxuICAgICAgcXVlcnk6IHRoaXMucXVlcnkgfHwgJycsXG4gICAgICBldmVudE9wdGlvbnM6IHRoaXMuZXZlbnRPcHRpb25zKCksXG4gICAgICBpY29uSWQ6IHRoaXMubmFtZSxcbiAgICAgIGZvcndhcmRJY29uT3B0czogZm9yd2FyZEljb25PcHRzLFxuICAgICAgcmV2ZXJzZUljb25PcHRzOiByZXZlcnNlSWNvbk9wdHMsXG4gICAgICBhdXRvRm9jdXM6IHRoaXMuYXV0b0ZvY3VzICYmICF0aGlzLnF1ZXJ5LFxuICAgICAgdXNlRm9ybTogdGhpcy5fdXNlRm9ybVxuICAgIH0sIGRhdGEpKTtcbiAgfVxuXG4gIGZvY3VzSW5wdXRFbGVtZW50ICgpIHtcbiAgICBET00ucXVlcnkodGhpcy5fY29udGFpbmVyLCB0aGlzLl9pbnB1dEVsKS5mb2N1cygpO1xuICB9XG59XG4iLCIvKiogQG1vZHVsZSBTZWFyY2hQYXJhbXNQYXJzZXIgKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYnVpbGRTZWFyY2hQYXJhbWV0ZXJzIChzZWFyY2hQYXJhbWV0ZXJDb25maWdzKSB7XG4gIGxldCBzZWFyY2hQYXJhbWV0ZXJzID0ge1xuICAgIHNlY3Rpb25lZDogZmFsc2UsXG4gICAgZmllbGRzOiBbXVxuICB9O1xuICBpZiAoc2VhcmNoUGFyYW1ldGVyQ29uZmlncyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIHNlYXJjaFBhcmFtZXRlcnM7XG4gIH1cbiAgaWYgKHNlYXJjaFBhcmFtZXRlckNvbmZpZ3Muc2VjdGlvbmVkKSB7XG4gICAgc2VhcmNoUGFyYW1ldGVycy5zZWN0aW9uZWQgPSBzZWFyY2hQYXJhbWV0ZXJDb25maWdzLnNlY3Rpb25lZDtcbiAgfVxuICBzZWFyY2hQYXJhbWV0ZXJzLmZpZWxkcyA9IGJ1aWxkRmllbGRzKHNlYXJjaFBhcmFtZXRlckNvbmZpZ3MuZmllbGRzKTtcbiAgcmV0dXJuIHNlYXJjaFBhcmFtZXRlcnM7XG59XG5cbmZ1bmN0aW9uIGJ1aWxkRmllbGRzIChmaWVsZENvbmZpZ3MpIHtcbiAgaWYgKGZpZWxkQ29uZmlncyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG5cbiAgcmV0dXJuIGZpZWxkQ29uZmlncy5tYXAoZmMgPT4gKHsgZmV0Y2hFbnRpdGllczogZmFsc2UsIC4uLmZjIH0pKTtcbn1cbiIsIi8qKiBAbW9kdWxlIEZpbHRlclNlYXJjaENvbXBvbmVudCAqL1xuXG5pbXBvcnQgQ29tcG9uZW50IGZyb20gJy4uL2NvbXBvbmVudCc7XG5pbXBvcnQgRE9NIGZyb20gJy4uLy4uL2RvbS9kb20nO1xuaW1wb3J0IFN0b3JhZ2VLZXlzIGZyb20gJy4uLy4uLy4uL2NvcmUvc3RvcmFnZS9zdG9yYWdla2V5cyc7XG5pbXBvcnQgRmlsdGVyIGZyb20gJy4uLy4uLy4uL2NvcmUvbW9kZWxzL2ZpbHRlcic7XG5pbXBvcnQgU2VhcmNoUGFyYW1zIGZyb20gJy4uLy4uL2RvbS9zZWFyY2hwYXJhbXMnO1xuaW1wb3J0IGJ1aWxkU2VhcmNoUGFyYW1ldGVycyBmcm9tICcuLi8uLi90b29scy9zZWFyY2hwYXJhbXNwYXJzZXInO1xuXG4vKipcbiAqIEZpbHRlclNlYXJjaENvbXBvbmVudCBpcyB1c2VkIGZvciBhdXRvY29tcGxldGUgdXNpbmcgdGhlIEZpbHRlclNlYXJjaCBiYWNrZW5kLlxuICogSXQnbGwgYWxsb3cgeW91IHRvIHBpY2sgcHJlLXNldCBmaWx0ZXJzIHRoYXQgYXJlIHNldHVwIG9uIHRoZSBiYWNrZW5kIHdpdGhpblxuICogYSB2ZXJ0aWNhbCBzZWFyY2ggY29udGV4dC5cbiAqXG4gKiBAZXh0ZW5kcyBDb21wb25lbnRcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRmlsdGVyU2VhcmNoQ29tcG9uZW50IGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IgKGNvbmZpZyA9IHt9LCBzeXN0ZW1Db25maWcgPSB7fSkge1xuICAgIHN1cGVyKGNvbmZpZywgc3lzdGVtQ29uZmlnKTtcblxuICAgIC8qKlxuICAgICAqIFRoZSB2ZXJ0aWNhbCBrZXkgZm9yIHZlcnRpY2FsIHNlYXJjaCBjb25maWd1cmF0aW9uXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLl92ZXJ0aWNhbEtleSA9IGNvbmZpZy52ZXJ0aWNhbEtleSB8fCBudWxsO1xuXG4gICAgLyoqXG4gICAgICogSWYgdHJ1ZSwgc3RvcmUgdGhlIGZpbHRlciB2YWx1ZSBidXQgZG8gbm90IHNlYXJjaCBvbiBjaGFuZ2VcbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuX3N0b3JlT25DaGFuZ2UgPSBjb25maWcuc3RvcmVPbkNoYW5nZSB8fCBmYWxzZTtcblxuICAgIC8qKlxuICAgICAqIFF1ZXJ5IHN1Ym1pc3Npb24gaXMgYmFzZWQgb24gYSBmb3JtIGFzIGNvbnRleHQuXG4gICAgICogT3B0aW9uYWxseSBwcm92aWRlZCwgb3RoZXJ3aXNlIGRlZmF1bHRzIHRvIG5hdGl2ZSBmb3JtIG5vZGUgd2l0aGluIGNvbnRhaW5lclxuICAgICAqIEB0eXBlIHtzdHJpbmd9IENTUyBzZWxlY3RvclxuICAgICAqL1xuICAgIHRoaXMuX2Zvcm1FbCA9IGNvbmZpZy5mb3JtU2VsZWN0b3IgfHwgJ2Zvcm0nO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGlucHV0IGVsZW1lbnQgdXNlZCBmb3Igc2VhcmNoaW5nIGFuZCB3aXJlcyB1cCB0aGUga2V5Ym9hcmQgaW50ZXJhY3Rpb25cbiAgICAgKiBPcHRpb25hbGx5IHByb3ZpZGVkLlxuICAgICAqIEB0eXBlIHtzdHJpbmd9IENTUyBzZWxlY3RvclxuICAgICAqL1xuICAgIHRoaXMuX2lucHV0RWwgPSBjb25maWcuaW5wdXRFbCB8fCAnLmpzLXlleHQtcXVlcnknO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHRpdGxlIHVzZWQsIHByb3ZpZGVkIHRvIHRoZSB0ZW1wbGF0ZSBhcyBhIGRhdGEgcG9pbnRcbiAgICAgKiBPcHRpb25hbGx5IHByb3ZpZGVkLlxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgdGhpcy50aXRsZSA9IGNvbmZpZy50aXRsZTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBzZWFyY2ggdGV4dCB1c2VkIGZvciBsYWJlbGluZyB0aGUgaW5wdXQgYm94LCBhbHNvIHByb3ZpZGVkIHRvIHRlbXBsYXRlLlxuICAgICAqIE9wdGlvbmFsbHkgcHJvdmlkZWRcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMuc2VhcmNoVGV4dCA9IGNvbmZpZy5zZWFyY2hUZXh0IHx8ICdXaGF0IGFyZSB5b3UgaW50ZXJlc3RlZCBpbj8nO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHF1ZXJ5IHRleHQgdG8gc2hvdyBhcyB0aGUgZmlyc3QgaXRlbSBmb3IgYXV0byBjb21wbGV0ZS5cbiAgICAgKiBPcHRpb25hbGx5IHByb3ZpZGVkXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLnByb21wdEhlYWRlciA9IGNvbmZpZy5wcm9tcHRIZWFkZXIgfHwgbnVsbDtcblxuICAgIC8qKlxuICAgICAqIEF1dG8gZm9jdXNlcyB0aGUgaW5wdXQgYm94IGlmIHNldCB0byB0cnVlLlxuICAgICAqIE9wdGlvbmFsbHkgcHJvdmlkZWQsIGRlZmF1bHRzIHRvIGZhbHNlLlxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqL1xuICAgIHRoaXMuYXV0b0ZvY3VzID0gY29uZmlnLmF1dG9Gb2N1cyA9PT0gdHJ1ZTtcblxuICAgIC8qKlxuICAgICAqIHN1Ym1pdFVSTCB3aWxsIGZvcmNlIHRoZSBzZWFyY2ggcXVlcnkgc3VibWlzc2lvbiB0byBnZXRcbiAgICAgKiByZWRpcmVjdGVkIHRvIHRoZSBVUkwgcHJvdmlkZWQuXG4gICAgICogT3B0aW9uYWwsIGRlZmF1bHRzIHRvIG51bGwuXG4gICAgICpcbiAgICAgKiBJZiBubyByZWRpcmVjdFVybCBwcm92aWRlZCwgd2Uga2VlcCB0aGUgcGFnZSBhcyBhIHNpbmdsZSBwYWdlIGFwcC5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqL1xuICAgIHRoaXMucmVkaXJlY3RVcmwgPSBjb25maWcucmVkaXJlY3RVcmwgfHwgbnVsbDtcblxuICAgIC8qKlxuICAgICAqIFRoZSBxdWVyeSBzdHJpbmcgdG8gdXNlIGZvciB0aGUgaW5wdXQgYm94LCBwcm92aWRlZCB0byB0ZW1wbGF0ZSBmb3IgcmVuZGVyaW5nLlxuICAgICAqIE9wdGlvbmFsbHkgcHJvdmlkZWRcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMucXVlcnkgPSBjb25maWcucXVlcnkgfHwgdGhpcy5jb3JlLmdsb2JhbFN0b3JhZ2UuZ2V0U3RhdGUoYCR7U3RvcmFnZUtleXMuUVVFUll9LiR7dGhpcy5uYW1lfWApIHx8ICcnO1xuICAgIHRoaXMuY29yZS5nbG9iYWxTdG9yYWdlLm9uKCd1cGRhdGUnLCBgJHtTdG9yYWdlS2V5cy5RVUVSWX0uJHt0aGlzLm5hbWV9YCwgcSA9PiB7XG4gICAgICB0aGlzLnF1ZXJ5ID0gcTtcbiAgICAgIHRoaXMuc2VhcmNoKCk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgZmlsdGVyIHN0cmluZyB0byB1c2UgZm9yIHRoZSBwcm92aWRlZCBxdWVyeVxuICAgICAqIE9wdGlvbmFsbHkgcHJvdmlkZWRcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMuZmlsdGVyID0gY29uZmlnLmZpbHRlciB8fCB0aGlzLmNvcmUuZ2xvYmFsU3RvcmFnZS5nZXRTdGF0ZShgJHtTdG9yYWdlS2V5cy5GSUxURVJ9LiR7dGhpcy5uYW1lfWApIHx8ICcnO1xuICAgIGlmICh0eXBlb2YgdGhpcy5maWx0ZXIgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0cnkge1xuICAgICAgICB0aGlzLmZpbHRlciA9IEpTT04ucGFyc2UodGhpcy5maWx0ZXIpO1xuICAgICAgfSBjYXRjaCAoZSkge31cbiAgICB9XG5cbiAgICB0aGlzLnNlYXJjaFBhcmFtZXRlcnMgPSBidWlsZFNlYXJjaFBhcmFtZXRlcnMoY29uZmlnLnNlYXJjaFBhcmFtZXRlcnMpO1xuXG4gICAgdGhpcy5jb3JlLmdsb2JhbFN0b3JhZ2Uub24oJ3VwZGF0ZScsIGAke1N0b3JhZ2VLZXlzLkZJTFRFUn0uJHt0aGlzLm5hbWV9YCwgZiA9PiB7IHRoaXMuZmlsdGVyID0gZjsgfSk7XG4gIH1cblxuICBzdGF0aWMgZ2V0IHR5cGUgKCkge1xuICAgIHJldHVybiAnRmlsdGVyU2VhcmNoJztcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgdGVtcGxhdGUgdG8gcmVuZGVyXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgc3RhdGljIGRlZmF1bHRUZW1wbGF0ZU5hbWUgKCkge1xuICAgIHJldHVybiAnc2VhcmNoL2ZpbHRlcnNlYXJjaCc7XG4gIH1cblxuICAvLyBUT0RPKG9zaGkpOiBTUFItMTkyNSBjaGVjayB0aGF0IGl0IGlzIHNhZmUgdG8gcmVtb3ZlIHRoaXMsIGl0IHJ1bnMgYW4gZXh0cmEgc2VhcmNoXG4gIC8vIEZvciBubyBvYnZpb3VzIHJlYXNvbnNcbiAgb25DcmVhdGUgKCkge1xuICAgIGlmICh0aGlzLnF1ZXJ5ICYmIHRoaXMuZmlsdGVyKSB7XG4gICAgICB0aGlzLnNlYXJjaCgpO1xuICAgIH1cbiAgfVxuXG4gIG9uTW91bnQgKCkge1xuICAgIC8vIFdpcmUgdXAgb3VyIHNlYXJjaCBoYW5kbGluZyBhbmQgYXV0byBjb21wbGV0ZVxuICAgIHRoaXMuaW5pdEF1dG9Db21wbGV0ZSh0aGlzLl9pbnB1dEVsKTtcblxuICAgIGlmICh0aGlzLmF1dG9Gb2N1cyA9PT0gdHJ1ZSAmJiB0aGlzLnF1ZXJ5Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgRE9NLnF1ZXJ5KHRoaXMuX2NvbnRhaW5lciwgdGhpcy5faW5wdXRFbCkuZm9jdXMoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQSBoZWxwZXIgbWV0aG9kIHRvIHdpcmUgdXAgb3VyIGF1dG8gY29tcGxldGUgb24gYW4gaW5wdXQgc2VsZWN0b3JcbiAgICogQHBhcmFtIHtzdHJpbmd9IGlucHV0U2VsZWN0b3IgQ1NTIHNlbGVjdG9yIHRvIGJpbmQgb3VyIGF1dG8gY29tcGxldGUgY29tcG9uZW50IHRvXG4gICAqL1xuICBpbml0QXV0b0NvbXBsZXRlIChpbnB1dFNlbGVjdG9yKSB7XG4gICAgdGhpcy5faW5wdXRFbCA9IGlucHV0U2VsZWN0b3I7XG5cbiAgICB0aGlzLmNvbXBvbmVudE1hbmFnZXIuY3JlYXRlKCdBdXRvQ29tcGxldGUnLCB7XG4gICAgICBwYXJlbnRDb250YWluZXI6IHRoaXMuX2NvbnRhaW5lcixcbiAgICAgIG5hbWU6IGAke3RoaXMubmFtZX0uYXV0b2NvbXBsZXRlYCxcbiAgICAgIGlzRmlsdGVyU2VhcmNoOiB0cnVlLFxuICAgICAgY29udGFpbmVyOiAnLnl4dC1TZWFyY2hCYXItYXV0b2NvbXBsZXRlJyxcbiAgICAgIHByb21wdEhlYWRlcjogdGhpcy5wcm9tcHRIZWFkZXIsXG4gICAgICBvcmlnaW5hbFF1ZXJ5OiB0aGlzLnF1ZXJ5LFxuICAgICAgb3JpZ2luYWxGaWx0ZXI6IHRoaXMuZmlsdGVyLFxuICAgICAgaW5wdXRFbDogaW5wdXRTZWxlY3RvcixcbiAgICAgIHZlcnRpY2FsS2V5OiB0aGlzLl92ZXJ0aWNhbEtleSxcbiAgICAgIHNlYXJjaFBhcmFtZXRlcnM6IHRoaXMuc2VhcmNoUGFyYW1ldGVycyxcbiAgICAgIG9uU3VibWl0OiAocXVlcnksIGZpbHRlcikgPT4ge1xuICAgICAgICBjb25zdCBwYXJhbXMgPSBuZXcgU2VhcmNoUGFyYW1zKHdpbmRvdy5sb2NhdGlvbi5zZWFyY2guc3Vic3RyaW5nKDEpKTtcbiAgICAgICAgcGFyYW1zLnNldChgJHt0aGlzLm5hbWV9LnF1ZXJ5YCwgcXVlcnkpO1xuICAgICAgICBwYXJhbXMuc2V0KGAke3RoaXMubmFtZX0uZmlsdGVyYCwgZmlsdGVyKTtcblxuICAgICAgICAvLyBJZiB3ZSBoYXZlIGEgcmVkaXJlY3RVcmwsIHdlIHdhbnQgdGhlIHBhcmFtcyB0byBiZVxuICAgICAgICAvLyBzZXJpYWxpemVkIGFuZCBzdWJtaXR0ZWQuXG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5yZWRpcmVjdFVybCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IHRoaXMucmVkaXJlY3RVcmwgKyAnPycgKyBwYXJhbXMudG9TdHJpbmcoKTtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBzYXZlIHRoZSBmaWx0ZXIgdG8gc3RvcmFnZSBmb3IgdGhlIG5leHQgc2VhcmNoXG4gICAgICAgIHRoaXMucXVlcnkgPSBxdWVyeTtcbiAgICAgICAgdGhpcy5maWx0ZXIgPSBGaWx0ZXIuZnJvbVJlc3BvbnNlKGZpbHRlcik7XG4gICAgICAgIHRoaXMuY29yZS5wZXJzaXN0ZW50U3RvcmFnZS5zZXQoYCR7U3RvcmFnZUtleXMuUVVFUll9LiR7dGhpcy5uYW1lfWAsIHRoaXMucXVlcnkpO1xuICAgICAgICB0aGlzLmNvcmUucGVyc2lzdGVudFN0b3JhZ2Uuc2V0KGAke1N0b3JhZ2VLZXlzLkZJTFRFUn0uJHt0aGlzLm5hbWV9YCwgdGhpcy5maWx0ZXIpO1xuICAgICAgICB0aGlzLmNvcmUuc2V0RmlsdGVyKHRoaXMubmFtZSwgdGhpcy5maWx0ZXIpO1xuICAgICAgICB0aGlzLnNlYXJjaCgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFBlcmZvcm0gdGhlIHZlcnRpY2FsIHNlYXJjaCB3aXRoIGFsbCBzYXZlZCBmaWx0ZXJzIGFuZCBxdWVyeSxcbiAgICogb3B0aW9uYWxseSByZWRpcmVjdGluZyBiYXNlZCBvbiBjb25maWdcbiAgICovXG4gIHNlYXJjaCAoKSB7XG4gICAgaWYgKHRoaXMuX3N0b3JlT25DaGFuZ2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBmaWx0ZXJzID0gdGhpcy5jb3JlLmdsb2JhbFN0b3JhZ2UuZ2V0QWxsKFN0b3JhZ2VLZXlzLkZJTFRFUik7XG4gICAgbGV0IHRvdGFsRmlsdGVyID0gZmlsdGVyc1swXTtcbiAgICBpZiAoZmlsdGVycy5sZW5ndGggPiAxKSB7XG4gICAgICB0b3RhbEZpbHRlciA9IEZpbHRlci5hbmQoLi4uZmlsdGVycyk7XG4gICAgfVxuICAgIGNvbnN0IHNlYXJjaFF1ZXJ5ID0gdGhpcy5jb3JlLmdsb2JhbFN0b3JhZ2UuZ2V0U3RhdGUoU3RvcmFnZUtleXMuUVVFUlkpIHx8ICcnO1xuICAgIGNvbnN0IGZhY2V0RmlsdGVyID0gdGhpcy5jb3JlLmdsb2JhbFN0b3JhZ2UuZ2V0QWxsKFN0b3JhZ2VLZXlzLkZBQ0VUX0ZJTFRFUilbMF07XG5cbiAgICB0aGlzLmNvcmUucGVyc2lzdGVudFN0b3JhZ2UuZGVsZXRlKFN0b3JhZ2VLZXlzLlNFQVJDSF9PRkZTRVQpO1xuICAgIHRoaXMuY29yZS5nbG9iYWxTdG9yYWdlLmRlbGV0ZShTdG9yYWdlS2V5cy5TRUFSQ0hfT0ZGU0VUKTtcbiAgICB0aGlzLmNvcmUudmVydGljYWxTZWFyY2godGhpcy5fdmVydGljYWxLZXksIHtcbiAgICAgIGlucHV0OiBzZWFyY2hRdWVyeSxcbiAgICAgIGZpbHRlcjogSlNPTi5zdHJpbmdpZnkodG90YWxGaWx0ZXIpLFxuICAgICAgZmFjZXRGaWx0ZXI6IEpTT04uc3RyaW5naWZ5KGZhY2V0RmlsdGVyKVxuICAgIH0pO1xuICB9XG5cbiAgc2V0U3RhdGUgKGRhdGEpIHtcbiAgICByZXR1cm4gc3VwZXIuc2V0U3RhdGUoT2JqZWN0LmFzc2lnbih7XG4gICAgICB0aXRsZTogdGhpcy50aXRsZSxcbiAgICAgIHNlYXJjaFRleHQ6IHRoaXMuc2VhcmNoVGV4dCxcbiAgICAgIHF1ZXJ5OiB0aGlzLnF1ZXJ5LFxuICAgICAgZmlsdGVyOiB0aGlzLmZpbHRlclxuICAgIH0sIGRhdGEpKTtcbiAgfVxufVxuIiwiLyoqIEBtb2R1bGUgQXV0b0NvbXBsZXRlQ29tcG9uZW50ICovXG5cbmltcG9ydCBDb21wb25lbnQgZnJvbSAnLi4vY29tcG9uZW50JztcbmltcG9ydCBET00gZnJvbSAnLi4vLi4vZG9tL2RvbSc7XG5pbXBvcnQgU3RvcmFnZUtleXMgZnJvbSAnLi4vLi4vLi4vY29yZS9zdG9yYWdlL3N0b3JhZ2VrZXlzJztcblxuY29uc3QgS2V5cyA9IHtcbiAgQkFDS1NQQUNFOiA4LFxuICBUQUI6IDksXG4gIEVOVEVSOiAxMyxcbiAgU0hJRlQ6IDE2LFxuICBDVFJMOiAxNyxcbiAgQUxUOiAxOCxcbiAgRVNDQVBFOiAyNyxcblxuICBMRUZUOiAzNyxcbiAgUklHSFQ6IDM5LFxuICBVUDogMzgsXG5cbiAgREVMRVRFOiA0NixcbiAgRE9XTjogNDAsXG4gIExFRlRfT1NfS0VZOiA5MSxcbiAgUklHSFRfT1NfS0VZOiA5MixcbiAgU0VMRUNUX0tFWTogOTNcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEF1dG9Db21wbGV0ZUNvbXBvbmVudCBleHRlbmRzIENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yIChvcHRzID0ge30sIHN5c3RlbU9wdHMgPSB7fSkge1xuICAgIHN1cGVyKG9wdHMsIHN5c3RlbU9wdHMpO1xuXG4gICAgLyoqXG4gICAgICogV2hldGhlciBhdXRvY29tcGxldGUgaXMgc2ltcGxlIG9yIGZpbHRlclxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqL1xuICAgIHRoaXMuaXNGaWx0ZXJTZWFyY2ggPSBvcHRzLmlzRmlsdGVyU2VhcmNoIHx8IGZhbHNlO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGB2ZXJ0aWNhbEtleWAgb2YgdGhlIHZlcnRpY2FsIHNlYXJjaCB0byB1c2UgZm9yIGF1dG8tY29tcGxldGVcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMuX3ZlcnRpY2FsS2V5ID0gb3B0cy52ZXJ0aWNhbEtleSB8fCBudWxsO1xuXG4gICAgLyoqXG4gICAgICogQSByZWZlcmVuY2UgdG8gdGhlIGlucHV0IGVsIHNlbGVjdG9yIGZvciBhdXRvIGNvbXBsZXRlXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLl9pbnB1dEVsID0gb3B0cy5pbnB1dEVsIHx8ICcuanMteWV4dC1xdWVyeSc7XG5cbiAgICAvKipcbiAgICAgKiBBIHNlbGVjdG9yIGZvciB0aGUgYXV0b2NvbXBsZXRlIGVsZW1lbnRlc1xuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgdGhpcy5fYXV0b2NvbXBsZXRlRWxzID0gb3B0cy5hdXRvQ29tcGxldGVFbHMgfHwgJy5qcy15ZXh0LWF1dG9jb21wbGV0ZS1vcHRpb24nO1xuXG4gICAgLyoqXG4gICAgICogQW4gaW50ZXJuYWwgcmVmZXJlbmNlIGZvciB0aGUgZGF0YS1zdG9yYWdlIHRvIGxpc3RlbiBmb3IgdXBkYXRlcyBmcm9tIHRoZSBzZXJ2ZXJcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMubW9kdWxlSWQgPSBgJHtTdG9yYWdlS2V5cy5BVVRPQ09NUExFVEV9LiR7dGhpcy5uYW1lfWA7XG5cbiAgICAvKipcbiAgICAgKiBBbiBpbnRlcm5hbCByZWZlcmVuY2UgdG8gdGhlIGlucHV0IHZhbHVlIHdoZW4gdHlwaW5nLlxuICAgICAqIFdlIHVzZSB0aGlzIGZvciByZXNldHRpbmcgdGhlIHN0YXRlIG9mIHRoZSBpbnB1dCB2YWx1ZSB3aGVuIG90aGVyIGludGVyYWN0aW9ucyAoZS5nLiByZXN1bHQgbmF2aWdhdGlvbilcbiAgICAgKiBjaGFuZ2UgYmFzZWQgb24gaW50ZXJhY3Rpb25zLiBGb3IgaW5zdGFuY2UsIGhpdHRpbmcgZXNjYXBlIHNob3VsZCByZXNldCB0aGUgdmFsdWUgdG8gdGhlIG9yaWdpbmFsIHR5cGVkIHF1ZXJ5LlxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgdGhpcy5fb3JpZ2luYWxRdWVyeSA9IG9wdHMub3JpZ2luYWxRdWVyeSB8fCAnJztcblxuICAgIC8qKlxuICAgICAqIFVzZWQgZm9yIGtleWJvYXJkIG5hdmlnYXRpb24gdGhyb3VnaCByZXN1bHRzLlxuICAgICAqIEFuIGludGVybmFsIHJlZmVyZW5jZSB0byB0aGUgY3VycmVudCBzZWN0aW9uIHdlJ3JlIG5hdmlnYXRpbmcgaW4uXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLl9zZWN0aW9uSW5kZXggPSAwO1xuXG4gICAgLyoqXG4gICAgICogVXNlZCBmb3Iga2V5Ym9hcmQgbmF2aWdhdGlvbiB0aHJvdWdoIHJlc3VsdHMuXG4gICAgICogQW4gaW50ZXJuYWwgcmVmZXJlbmNlIHRvIHRoZSBjdXJyZW50IHJlc3VsdCBpbmRleCB3ZSdyZSBuYXZpZ2F0aW5nIG9uLlxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy5fcmVzdWx0SW5kZXggPSAtMTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBxdWVyeSB0ZXh0IHRvIHNob3cgYXMgdGhlIGZpcnN0IGl0ZW0gZm9yIGF1dG8gY29tcGxldGUuXG4gICAgICogT3B0aW9uYWxseSBwcm92aWRlZFxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgdGhpcy5wcm9tcHRIZWFkZXIgPSBvcHRzLnByb21wdEhlYWRlciB8fCBudWxsO1xuXG4gICAgLyoqXG4gICAgICogV2hldGhlciB0aGUgaW5wdXQgaXMgYXV0b2NvbWF0aWNhbGx5IGZvY3VzZWQgb3Igbm90XG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICovXG4gICAgdGhpcy5fYXV0b0ZvY3VzID0gb3B0cy5hdXRvRm9jdXMgfHwgZmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiBDYWxsYmFjayBpbnZva2VkIHdoZW4gdGhlIGBFbnRlcmAga2V5IGlzIHByZXNzZWQgb24gYXV0byBjb21wbGV0ZS5cbiAgICAgKi9cbiAgICB0aGlzLl9vblN1Ym1pdCA9IG9wdHMub25TdWJtaXQgfHwgZnVuY3Rpb24gKCkge307XG5cbiAgICAvKipcbiAgICAgKiBDYWxsYmFjayBpbnZva2VkIHdoZW4ga2V5cyBhcmUgdXNlZCB0byBuYXZpZ2F0ZSB0aHJvdWdoIHRoZSBhdXRvIGNvbXBsZXRlLiBOb3RlIHRoYXQgdGhpcyBpc1xuICAgICAqIG5vdCBjYWxsZWQgd2hlbiBlaXRoZXIgdGhlIGBFbnRlcmAga2V5IGlzIHByZXNzZWQgb3IgdGhlIG1vdXNlIGlzIHVzZWQgdG8gc2VsZWN0IGFuXG4gICAgICogYXV0b2NvbXBsZXRlIG9wdGlvbi5cbiAgICAgKi9cbiAgICB0aGlzLl9vbkNoYW5nZSA9IG9wdHMub25DaGFuZ2UgfHwgZnVuY3Rpb24gKCkge307XG5cbiAgICB0aGlzLl9zZWFyY2hQYXJhbWV0ZXJzID0gb3B0cy5zZWFyY2hQYXJhbWV0ZXJzIHx8IG51bGw7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGFsaWFzZWQgdXNlZCBieSB0aGUgY29tcG9uZW50IG1hbmFnZXIgZm9yIGNyZWF0aW9uLlxuICAgKi9cbiAgc3RhdGljIGdldCB0eXBlICgpIHtcbiAgICByZXR1cm4gJ0F1dG9Db21wbGV0ZSc7XG4gIH1cblxuICAvKipcbiAgICogVGhlIHRlbXBsYXRlIHRvIHJlbmRlclxuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHN0YXRpYyBkZWZhdWx0VGVtcGxhdGVOYW1lIChjb25maWcpIHtcbiAgICByZXR1cm4gJ3NlYXJjaC9hdXRvY29tcGxldGUnO1xuICB9XG5cbiAgLyoqXG4gICAqIHNldFN0YXRlIGlzIG92ZXJyaWRkZW4gc28gdGhhdCB3ZSBjYW4gcHJvdmlkZSBhZGRpdGlvbmFsIG1ldGEgZGF0YVxuICAgKiB0byB0aGUgdGVtcGxhdGUgKGUuZy4gdGhlIHNlY3Rpb25JbmRleCBhbmQgcmVzdWx0SW5kZXgpLCBzaW5jZVxuICAgKiB0aG9zZSBhcmUgY2xpZW50LWludGVyYWN0aW9uIHNwZWNpZmljIHZhbHVlcyBhbmQgYXJlbid0IHJldHVybmVkIGZyb20gdGhlIHNlcnZlci5cbiAgICovXG4gIHNldFN0YXRlIChkYXRhKSB7XG4gICAgaWYgKCF0aGlzLmlzUXVlcnlJbnB1dEZvY3VzZWQoKSkge1xuICAgICAgdGhpcy5fc2VjdGlvbkluZGV4ID0gMDtcbiAgICAgIHRoaXMuX3Jlc3VsdEluZGV4ID0gLTE7XG4gICAgICBkYXRhID0ge307XG4gICAgfVxuICAgIHN1cGVyLnNldFN0YXRlKE9iamVjdC5hc3NpZ24oe30sIGRhdGEsIHtcbiAgICAgIGhhc1Jlc3VsdHM6IHRoaXMuaGFzUmVzdWx0cyhkYXRhKSxcbiAgICAgIHNlY3Rpb25JbmRleDogdGhpcy5fc2VjdGlvbkluZGV4LFxuICAgICAgcmVzdWx0SW5kZXg6IHRoaXMuX3Jlc3VsdEluZGV4LFxuICAgICAgcHJvbXB0SGVhZGVyOiB0aGlzLl9vcmlnaW5hbFF1ZXJ5Lmxlbmd0aCA9PT0gMCA/IHRoaXMucHJvbXB0SGVhZGVyIDogbnVsbFxuICAgIH0pKTtcbiAgfVxuXG4gIGlzUXVlcnlJbnB1dEZvY3VzZWQgKCkge1xuICAgIHJldHVybiBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICYmXG4gICAgICBkb2N1bWVudC5hY3RpdmVFbGVtZW50LmNsYXNzTmFtZS5pbmNsdWRlcyh0aGlzLl9pbnB1dEVsLnN1YnN0cmluZygxKSk7XG4gIH1cblxuICAvKipcbiAgICogdXBkYXRlU3RhdGUgaXMgYSBoZWxwZXIgdG8gYXBwbHkgdGhlIGN1cnJlbnQgc3RhdGUgd2l0aCBuZXcgY2xpZW50LXN0YXRlLlxuICAgKi9cbiAgdXBkYXRlU3RhdGUgKCkge1xuICAgIHRoaXMuc2V0U3RhdGUodGhpcy5fc3RhdGUuZ2V0KCkpO1xuICB9XG5cbiAgLyoqXG4gICAqIG9uQ3JlYXRlIGlzIHRyaWdnZXJlZCB3aGVuIHRoZSBjb21wb25lbnQgaXMgY29uc3RydWN0ZWQgZnJvbSB0aGUgZnJhbWV3b3JrLlxuICAgKiBPbmNlIHdlJ3JlIGluaXRhbGl6ZWQsIHdlIHdpcmUgdXAgYWxsIG9mIG91ciB1c2VyIGludGVyYWN0aW9uc1xuICAgKi9cbiAgb25DcmVhdGUgKCkge1xuICAgIC8vIFVzZSB0aGUgY29udGV4dCBvZiB0aGUgcGFyZW50IGNvbXBvbmVudCB0byBmaW5kIHRoZSBpbnB1dCBub2RlLlxuICAgIGxldCBxdWVyeUlucHV0ID0gRE9NLnF1ZXJ5KHRoaXMuX3BhcmVudENvbnRhaW5lciwgdGhpcy5faW5wdXRFbCk7XG4gICAgaWYgKCFxdWVyeUlucHV0KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NvdWxkIG5vdCBpbml0aWFsaXplIEF1dG9Db21wbGV0ZS4gQ2FuIG5vdCBmaW5kIHtIVE1MRWxlbWVudH0gYCcsIHRoaXMuX2lucHV0RWwsICdgLicpO1xuICAgIH1cblxuICAgIC8vIERpc2FibGUgdGhlIG5hdGl2ZSBhdXRvY29tcGxldGUsIGF1dG9jb3JyZWN0ICYgc3BlbGxjaGVja1xuICAgIERPTS5hdHRyaWJ1dGVzKHF1ZXJ5SW5wdXQsIHtcbiAgICAgIGF1dG9jb21wbGV0ZTogJ29mZicsXG4gICAgICBhdXRvY29ycmVjdDogJ29mZicsXG4gICAgICBzcGVsbGNoZWNrOiAnZmFsc2UnXG4gICAgfSk7XG5cbiAgICAvLyBUaGUgdXNlciBleGl0cyB0aGUgaW5wdXQsIHNvIHdlIHdhbnQgdG8gcmVzZXQgdGhlIHN0YXRlIGFuZCBjbG9zZVxuICAgIC8vIHRoZSBhdXRvIGNvbXBsZXRlXG4gICAgLy8gVE9ETyhqZGVsZXJtZSk6IENsb3NlIGxvZ2ljIHRvIGJlIG1vdmVkIHRvIHBhcmVudFxuICAgIERPTS5vbihkb2N1bWVudCwgJ2NsaWNrJywgZSA9PiB7XG4gICAgICBpZiAoRE9NLm1hdGNoZXMoZS50YXJnZXQsICcuanMteXh0LUF1dG9Db21wbGV0ZS13cmFwcGVyIConKSB8fCBET00ubWF0Y2hlcyhlLnRhcmdldCwgdGhpcy5faW5wdXRFbCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdGhpcy5jbG9zZSgpO1xuICAgIH0pO1xuXG4gICAgLy8gV2hlbiBhIHVzZXIgZm9jdXNlcyB0aGUgaW5wdXQsIHdlIHNob3VsZCBwb3B1bGF0ZSB0aGUgYXV0b2NvbXBsZXRlIGJhc2VkXG4gICAgLy8gb24gdGhlIGN1cnJlbnQgdmFsdWVcbiAgICBET00ub24ocXVlcnlJbnB1dCwgJ2ZvY3VzJywgKCkgPT4ge1xuICAgICAgdGhpcy5yZXNldCgpO1xuICAgICAgdGhpcy5hdXRvQ29tcGxldGUocXVlcnlJbnB1dC52YWx1ZSk7XG4gICAgfSk7XG5cbiAgICAvLyBBbGxvdyB0aGUgdXNlciB0byBuYXZpZ2F0ZSBiZXR3ZWVuIHRoZSByZXN1bHRzIHVzaW5nIHRoZSBrZXlib2FyZFxuICAgIERPTS5vbihxdWVyeUlucHV0LCAna2V5ZG93bicsIChlKSA9PiB7XG4gICAgICB0aGlzLmhhbmRsZU5hdmlnYXRlUmVzdWx0cyhlLmtleUNvZGUsIGUpO1xuICAgICAgdGhpcy5oYW5kbGVTdWJtaXRSZXN1bHQoZS5rZXlDb2RlLCBxdWVyeUlucHV0LnZhbHVlLCBlKTtcbiAgICB9KTtcblxuICAgIGlmICh0aGlzLl9hdXRvRm9jdXMpIHtcbiAgICAgIERPTS5vbmNlKHF1ZXJ5SW5wdXQsICdjbGljaycsICgpID0+IHtcbiAgICAgICAgdGhpcy5hdXRvQ29tcGxldGUocXVlcnlJbnB1dC52YWx1ZSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBBbGxvdyB0aGUgdXNlciB0byBzZWxlY3QgYSByZXN1bHQgd2l0aCB0aGUgbW91c2VcbiAgICBET00uZGVsZWdhdGUodGhpcy5fY29udGFpbmVyLCAnLmpzLXlleHQtYXV0b2NvbXBsZXRlLW9wdGlvbicsICdjbGljaycsIChldnQsIHRhcmdldCkgPT4ge1xuICAgICAgbGV0IGRhdGEgPSB0YXJnZXQuZGF0YXNldDtcbiAgICAgIGxldCB2YWwgPSBkYXRhLnNob3J0O1xuXG4gICAgICB0aGlzLnVwZGF0ZVF1ZXJ5KHZhbCk7XG4gICAgICB0aGlzLl9vblN1Ym1pdCh2YWwsIGRhdGEuZmlsdGVyKTtcbiAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICB9KTtcblxuICAgIC8vIFdoZW4gdGhlIHVzZXIgaXMgdHlwaW5nIGluIHRoZSBpbnB1dCwgcHJvY2VzcyB0aGUgYXV0byBjb21wbGV0ZS5cbiAgICBET00ub24ocXVlcnlJbnB1dCwgJ2tleXVwJywgKGUpID0+IHtcbiAgICAgIHRoaXMuaGFuZGxlVHlwaW5nKGUua2V5Q29kZSwgcXVlcnlJbnB1dC52YWx1ZSwgZSk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogY2xvc2Ugd2lsbCBoaWRlIHRoZSBhdXRvIGNvbXBsZXRlIHJlc3VsdHMgYW5kIHJlc2V0IHRoZSBzdGF0ZS5cbiAgICovXG4gIGNsb3NlICgpIHtcbiAgICB0aGlzLnNldFN0YXRlKHt9KTtcbiAgICB0aGlzLnJlc2V0KCk7XG4gIH1cblxuICAvKipcbiAgICogcmVzZXRzIHRoZSBjbGllbnQgc3RhdGUgdG8gdGhlaXIgb3JpZ2luYWwgdmFsdWVzIGFuZCB0cmlnZ2Vyc1xuICAgKiBhIHRlbXBsYXRlLXJlcmVuZGVyIHZpYSB1cGRhdGVTdGF0ZVxuICAgKi9cbiAgcmVzZXQgKCkge1xuICAgIHRoaXMuX3NlY3Rpb25JbmRleCA9IDA7XG4gICAgdGhpcy5fcmVzdWx0SW5kZXggPSAtMTtcbiAgICB0aGlzLnVwZGF0ZVN0YXRlKCk7XG4gIH1cblxuICAvKipcbiAgICogSGVscGVyIG1ldGhvZCB0byB1cGRhdGUgdGhlIGlucHV0IHRleHRcbiAgICogQHBhcmFtIHtzdHJpbmd9IG9wdFZhbHVlIE9wdGlvbiB2YWx1ZSBwcm92aWRlZC5cbiAgICogSWYgbm8gdmFsdWUgcHJvdmlkZWQsIHdlJ2xsIHRyeSB0byBmaW5kIGl0IGJhc2VkIG9uIHRoZSBzZWxlY3Rpb24gaW5kZXhlcy5cbiAgICovXG4gIHVwZGF0ZVF1ZXJ5IChvcHRWYWx1ZSkge1xuICAgIC8vIE9ubHkgd2FudCB0byB1cGRhdGUgdGhlIHF1ZXJ5IHN0cmluZyBpZiB0aGVyZXMgYSB2YWx1ZS5cbiAgICAvLyBJZiBvbmUgaXMgcHJvdmlkZWQsIGdyZWF0LlxuICAgIC8vIE90aGVyd2lzZSwgbGV0cyB0cnkgdG8gZmluZCBpdCBmcm9tIHRoZSBjdXJyZW50IHNlbGVjdGlvbiBpbiB0aGUgcmVzdWx0cy5cbiAgICBpZiAob3B0VmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgbGV0IHNlY3Rpb25zID0gdGhpcy5fc3RhdGUuZ2V0KCdzZWN0aW9ucycpO1xuXG4gICAgICBsZXQgcmVzdWx0cyA9IHNlY3Rpb25zW3RoaXMuX3NlY3Rpb25JbmRleF0ucmVzdWx0cztcbiAgICAgIG9wdFZhbHVlID0gcmVzdWx0c1t0aGlzLl9yZXN1bHRJbmRleF0uc2hvcnRWYWx1ZTtcbiAgICB9XG5cbiAgICBsZXQgcXVlcnlFbCA9IERPTS5xdWVyeSh0aGlzLl9wYXJlbnRDb250YWluZXIsIHRoaXMuX2lucHV0RWwpO1xuICAgIHF1ZXJ5RWwudmFsdWUgPSBvcHRWYWx1ZTtcbiAgfVxuXG4gIGhhbmRsZVR5cGluZyAoa2V5LCB2YWx1ZSwgZSkge1xuICAgIGxldCBpZ25vcmVkS2V5cyA9IFtcbiAgICAgIEtleXMuRE9XTixcbiAgICAgIEtleXMuVVAsXG4gICAgICBLZXlzLkNUUkwsXG4gICAgICBLZXlzLkFMVCxcbiAgICAgIEtleXMuU0hJRlQsXG4gICAgICBLZXlzLkxFRlQsXG4gICAgICBLZXlzLlJJR0hULFxuICAgICAgS2V5cy5MRUZUX09TX0tFWSxcbiAgICAgIEtleXMuUklHSFRfT1NfS0VZLFxuICAgICAgS2V5cy5FTlRFUixcbiAgICAgIEtleXMuVEFCLFxuICAgICAgS2V5cy5TRUxFQ1RfS0VZXG4gICAgXTtcblxuICAgIGlmIChpZ25vcmVkS2V5cy5pbmRleE9mKGtleSkgPiAtMSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIFVzZXIgZXNjYXBlcyBvdXQgb2YgYXV0byBjb21wbGV0ZSwgc28gd2UgcmVzZXQgaXQgdG8gdGhlIG9yaWdpbmFsIGlucHV0XG4gICAgaWYgKGtleSA9PT0gS2V5cy5FU0NBUEUpIHtcbiAgICAgIHRoaXMudXBkYXRlUXVlcnkodGhpcy5fb3JpZ2luYWxRdWVyeSk7XG4gICAgICB0aGlzLmNsb3NlKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gVXBkYXRlIHRoZSBvcmlnaW5hbCB2YWx1ZSBiYXNlZCBvbiB0aGUgdXNlciBpbnB1dFxuICAgIHRoaXMuX29yaWdpbmFsUXVlcnkgPSB2YWx1ZTtcblxuICAgIHRoaXMucmVzZXQoKTtcbiAgICB0aGlzLmF1dG9Db21wbGV0ZSh2YWx1ZSk7XG4gIH1cblxuICBhdXRvQ29tcGxldGUgKGlucHV0KSB7XG4gICAgaWYgKHRoaXMuaXNGaWx0ZXJTZWFyY2gpIHtcbiAgICAgIHRoaXMuY29yZS5hdXRvQ29tcGxldGVGaWx0ZXIoaW5wdXQsIHtcbiAgICAgICAgbmFtZXNwYWNlOiB0aGlzLm5hbWUsXG4gICAgICAgIHZlcnRpY2FsS2V5OiB0aGlzLl92ZXJ0aWNhbEtleSxcbiAgICAgICAgc2VhcmNoUGFyYW1ldGVyczogdGhpcy5fc2VhcmNoUGFyYW1ldGVyc1xuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmICh0aGlzLl92ZXJ0aWNhbEtleSkge1xuICAgICAgdGhpcy5jb3JlLmF1dG9Db21wbGV0ZVZlcnRpY2FsKGlucHV0LCB0aGlzLm5hbWUsIHRoaXMuX3ZlcnRpY2FsS2V5KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5jb3JlLmF1dG9Db21wbGV0ZVVuaXZlcnNhbChpbnB1dCwgdGhpcy5uYW1lKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogcmV0dXJucyB0cnVlIGlmIHdlIGhhdmUgcmVzdWx0cyBpbiBhbnkgc2VjdGlvblxuICAgKiBAcmV0dXJucyBib29sZWFuXG4gICAqL1xuICBoYXNSZXN1bHRzIChkYXRhKSB7XG4gICAgaWYgKCFkYXRhKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGxldCBzZWN0aW9ucyA9IGRhdGFbJ3NlY3Rpb25zJ107XG4gICAgaWYgKCFzZWN0aW9ucykge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2VjdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGRhdGEgPSBzZWN0aW9uc1tpXTtcbiAgICAgIGlmICghZGF0YSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHJlc3VsdHMgPSBkYXRhLnJlc3VsdHM7XG4gICAgICBpZiAoIXJlc3VsdHMpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZXN1bHRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaGFuZGxlTmF2aWdhdGVSZXN1bHRzIChrZXksIGUpIHtcbiAgICBsZXQgc2VjdGlvbnMgPSB0aGlzLl9zdGF0ZS5nZXQoJ3NlY3Rpb25zJyk7XG4gICAgaWYgKHNlY3Rpb25zID09PSB1bmRlZmluZWQgfHwgc2VjdGlvbnMubGVuZ3RoIDw9IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBUYWJiaW5nIG91dCBvciBlbnRlciBzaG91bGQgY2xvc2UgdGhlIGF1dG8gY29tcGxldGUuXG4gICAgaWYgKGtleSA9PT0gS2V5cy5UQUIpIHtcbiAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBsZXQgcmVzdWx0cyA9IHNlY3Rpb25zW3RoaXMuX3NlY3Rpb25JbmRleF0ucmVzdWx0cztcbiAgICBpZiAoa2V5ID09PSBLZXlzLlVQKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBpZiAodGhpcy5fcmVzdWx0SW5kZXggPD0gMCkge1xuICAgICAgICBpZiAodGhpcy5fc2VjdGlvbkluZGV4ID4gMCkge1xuICAgICAgICAgIHRoaXMuX3NlY3Rpb25JbmRleC0tO1xuICAgICAgICAgIHRoaXMuX3Jlc3VsdEluZGV4ID0gc2VjdGlvbnNbdGhpcy5fc2VjdGlvbkluZGV4XS5yZXN1bHRzLmxlbmd0aCAtIDE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy51cGRhdGVRdWVyeSh0aGlzLl9vcmlnaW5hbFF1ZXJ5KTtcbiAgICAgICAgICB0aGlzLnJlc2V0KCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudXBkYXRlUXVlcnkoKTtcbiAgICAgICAgdGhpcy51cGRhdGVTdGF0ZSgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3Jlc3VsdEluZGV4LS07XG4gICAgICB0aGlzLnVwZGF0ZVN0YXRlKCk7XG4gICAgICB0aGlzLnVwZGF0ZVF1ZXJ5KCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGtleSA9PT0gS2V5cy5ET1dOKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBpZiAodGhpcy5fcmVzdWx0SW5kZXggPj0gcmVzdWx0cy5sZW5ndGggLSAxKSB7XG4gICAgICAgIGlmICh0aGlzLl9zZWN0aW9uSW5kZXggPCBzZWN0aW9ucy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgdGhpcy5fc2VjdGlvbkluZGV4Kys7XG4gICAgICAgICAgdGhpcy5fcmVzdWx0SW5kZXggPSAwO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudXBkYXRlUXVlcnkoKTtcbiAgICAgICAgdGhpcy51cGRhdGVTdGF0ZSgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3Jlc3VsdEluZGV4Kys7XG4gICAgICB0aGlzLnVwZGF0ZVF1ZXJ5KCk7XG4gICAgICB0aGlzLnVwZGF0ZVN0YXRlKCk7XG4gICAgfVxuICB9XG5cbiAgaGFuZGxlU3VibWl0UmVzdWx0IChrZXksIHZhbHVlLCBlKSB7XG4gICAgbGV0IHNlY3Rpb25zID0gdGhpcy5fc3RhdGUuZ2V0KCdzZWN0aW9ucycpO1xuICAgIGlmIChzZWN0aW9ucyA9PT0gdW5kZWZpbmVkIHx8IHNlY3Rpb25zLmxlbmd0aCA8PSAwKSB7XG4gICAgICBpZiAodGhpcy5pc0ZpbHRlclNlYXJjaCkge1xuICAgICAgICB0aGlzLmF1dG9Db21wbGV0ZSh2YWx1ZSk7XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gc3VibWl0IHRoZSBzZWFyY2ggb24gZW50ZXJcbiAgICBpZiAoa2V5ID09PSBLZXlzLkVOVEVSKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgIGlmICh0aGlzLmlzRmlsdGVyU2VhcmNoICYmIHRoaXMuX3Jlc3VsdEluZGV4ID09PSAtMSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGxldCBmaWx0ZXIgPSAnJztcbiAgICAgIGlmICh0aGlzLl9zZWN0aW9uSW5kZXggPj0gMCAmJiB0aGlzLl9yZXN1bHRJbmRleCA+PSAwKSB7XG4gICAgICAgIGZpbHRlciA9IEpTT04uc3RyaW5naWZ5KHNlY3Rpb25zW3RoaXMuX3NlY3Rpb25JbmRleF0ucmVzdWx0c1t0aGlzLl9yZXN1bHRJbmRleF0uZmlsdGVyKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy51cGRhdGVRdWVyeSh2YWx1ZSk7XG4gICAgICB0aGlzLl9vcmlnaW5hbFF1ZXJ5ID0gdmFsdWU7XG4gICAgICB0aGlzLl9vblN1Ym1pdCh2YWx1ZSwgZmlsdGVyKTtcbiAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fb25DaGFuZ2UoKTtcbiAgICB9XG4gIH1cbn1cbiIsIi8qKiBAbW9kdWxlIFNwZWxsQ2hlY2tDb21wb25lbnQgKi9cblxuaW1wb3J0IENvbXBvbmVudCBmcm9tICcuLi9jb21wb25lbnQnO1xuaW1wb3J0IFNlYXJjaFBhcmFtcyBmcm9tICcuLi8uLi9kb20vc2VhcmNocGFyYW1zJztcbmltcG9ydCBTdG9yYWdlS2V5cyBmcm9tICcuLi8uLi8uLi9jb3JlL3N0b3JhZ2Uvc3RvcmFnZWtleXMnO1xuXG5jb25zdCBERUZBVUxUX0NPTkZJRyA9IHtcbiAgc3VnZ2VzdGlvbkhlbHBUZXh0OiAnRGlkIHlvdSBtZWFuOidcbn07XG5cbi8qKlxuICogU3BlbGxDaGVja0NvbXBvbmVudCB3aWxsIHN1cHBvcnQgZGlzcGxheWluZyBzdWdnZXN0aW9uLCBhdXRvY29ycmVjdCBhbmQgY29tYmluZWQobWF5YmUgaW4gdGhlIGZ1dHVyZSlcbiAqIHByb3ZpZGVkIGZyb20gc3BlbGxpbmcgY29ycmVjdGlvbi5cbiAqXG4gKiBAZXh0ZW5kcyBDb21wb25lbnRcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU3BlbGxDaGVja0NvbXBvbmVudCBleHRlbmRzIENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yIChjb25maWcgPSB7fSwgc3lzdGVtQ29uZmlnID0ge30pIHtcbiAgICBzdXBlcih7IC4uLkRFRkFVTFRfQ09ORklHLCAuLi5jb25maWcgfSwgc3lzdGVtQ29uZmlnKTtcblxuICAgIHRoaXMubW9kdWxlSWQgPSBTdG9yYWdlS2V5cy5TUEVMTF9DSEVDSztcbiAgfVxuXG4gIHN0YXRpYyBnZXQgdHlwZSAoKSB7XG4gICAgcmV0dXJuICdTcGVsbENoZWNrJztcbiAgfVxuXG4gIHN0YXRpYyBkZWZhdWx0VGVtcGxhdGVOYW1lICgpIHtcbiAgICByZXR1cm4gJ3NlYXJjaC9zcGVsbGNoZWNrJztcbiAgfVxuXG4gIG9uQ3JlYXRlICgpIHtcbiAgICB0aGlzLmNvcmUucGVyc2lzdGVudFN0b3JhZ2UuZGVsZXRlKCdza2lwU3BlbGxDaGVjaycsIHRydWUpO1xuICAgIHRoaXMuY29yZS5wZXJzaXN0ZW50U3RvcmFnZS5kZWxldGUoJ3F1ZXJ5VHJpZ2dlcicsIHRydWUpO1xuICB9XG5cbiAgc2V0U3RhdGUgKGRhdGEsIHZhbCkge1xuICAgIHJldHVybiBzdXBlci5zZXRTdGF0ZShPYmplY3QuYXNzaWduKHt9LCBkYXRhLCB7XG4gICAgICBzaG91bGRTaG93OiBkYXRhLmNvcnJlY3RlZFF1ZXJ5ICE9PSB1bmRlZmluZWQsXG4gICAgICBjb3JyZWN0ZWRRdWVyeVVybDogdGhpcy5fYnVpbGRSZWRpcmVjdFF1ZXJ5VXJsKGRhdGEuY29ycmVjdGVkUXVlcnksIGRhdGEudHlwZSksXG4gICAgICBoZWxwVGV4dDogdGhpcy5fZ2V0SGVscFRleHQoZGF0YS50eXBlKVxuICAgIH0sIHZhbCkpO1xuICB9XG5cbiAgX2J1aWxkUmVkaXJlY3RRdWVyeVVybCAocXVlcnksIHR5cGUpIHtcbiAgICBpZiAocXVlcnkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgICBsZXQgcGFyYW1zID0gbmV3IFNlYXJjaFBhcmFtcyh3aW5kb3cubG9jYXRpb24uc2VhcmNoLnN1YnN0cmluZygxKSk7XG4gICAgcGFyYW1zLnNldCgncXVlcnknLCBxdWVyeS52YWx1ZSk7XG4gICAgcGFyYW1zLnNldCgnc2tpcFNwZWxsQ2hlY2snLCB0cnVlKTtcbiAgICBwYXJhbXMuc2V0KCdxdWVyeVRyaWdnZXInLCB0eXBlLnRvTG93ZXJDYXNlKCkpO1xuICAgIHJldHVybiAnPycgKyBwYXJhbXMudG9TdHJpbmcoKTtcbiAgfVxuXG4gIF9nZXRIZWxwVGV4dCAodHlwZSkge1xuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgY2FzZSAnU1VHR0VTVCc6XG4gICAgICAgIHJldHVybiB0aGlzLl9jb25maWcuc3VnZ2VzdGlvbkhlbHBUZXh0O1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IENvbXBvbmVudCBmcm9tICcuLi9jb21wb25lbnQnO1xuaW1wb3J0IEZpbHRlciBmcm9tICcuLi8uLi8uLi9jb3JlL21vZGVscy9maWx0ZXInO1xuaW1wb3J0IFN0b3JhZ2VLZXlzIGZyb20gJy4uLy4uLy4uL2NvcmUvc3RvcmFnZS9zdG9yYWdla2V5cyc7XG5pbXBvcnQgRE9NIGZyb20gJy4uLy4uL2RvbS9kb20nO1xuXG5jb25zdCBERUZBVUxUX0NPTkZJRyA9IHtcbiAgaXBBY2N1cmFjeUhlbHBUZXh0OiAnYmFzZWQgb24geW91ciBpbnRlcm5ldCBhZGRyZXNzJyxcbiAgZGV2aWNlQWNjdXJhY3lIZWxwVGV4dDogJ2Jhc2VkIG9uIHlvdXIgZGV2aWNlJyxcbiAgdXBkYXRlTG9jYXRpb25CdXR0b25UZXh0OiAnVXBkYXRlIHlvdXIgbG9jYXRpb24nXG59O1xuXG4vKipcbiAqIExvY2F0aW9uQmlhc0NvbXBvbmVudCB3aWxsIHNob3cgdGhlIHVzZXIgd2hlcmUgaXMgdXNlZCBmb3IgbG9jYXRpb24gYmlhcyBhbmQgYWxsb3cgdXNlciB0b1xuICogaW1wcm92ZSBhY2N1cmFjeSB3aXRoIEhUTUw1IGdlb2xvY2F0aW9uLlxuICpcbiAqIEBleHRlbmRzIENvbXBvbmVudFxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBMb2NhdGlvbkJpYXNDb21wb25lbnQgZXh0ZW5kcyBDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvciAoY29uZmlnID0ge30sIHN5c3RlbUNvbmZpZyA9IHt9KSB7XG4gICAgc3VwZXIoeyAuLi5ERUZBVUxUX0NPTkZJRywgLi4uY29uZmlnIH0sIHN5c3RlbUNvbmZpZyk7XG5cbiAgICAvKipcbiAgICAgKiBSZWNpZXZlIHVwZGF0ZXMgZnJvbSBzdG9yYWdlIGJhc2VkIG9uIHRoaXMgaW5kZXhcbiAgICAgKiBAdHlwZSB7U3RvcmFnZUtleX1cbiAgICAgKi9cbiAgICB0aGlzLm1vZHVsZUlkID0gU3RvcmFnZUtleXMuTE9DQVRJT05fQklBUztcblxuICAgIC8qKlxuICAgICAqIFRoZSBvcHRpb25hbCB2ZXJ0aWNhbCBrZXkgZm9yIHZlcnRpY2FsIHNlYXJjaCBjb25maWd1cmF0aW9uXG4gICAgICogSWYgbm90IHByb3ZpZGVkLCB3aGVuIGxvY2F0aW9uIHVwZGF0ZWQsXG4gICAgICogYSB1bml2ZXJzYWwgc2VhcmNoIHdpbGwgYmUgdHJpZ2dlcmVkLlxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgLy8gVE9ETzogUmVtb3ZlIGNvbmZpZy52ZXJ0aWNhbEtleVxuICAgIHRoaXMuX3ZlcnRpY2FsS2V5ID0gY29uZmlnLnZlcnRpY2FsS2V5IHx8IHRoaXMuY29yZS5nbG9iYWxTdG9yYWdlLmdldFN0YXRlKFN0b3JhZ2VLZXlzLlNFQVJDSF9DT05GSUcpLnZlcnRpY2FsS2V5IHx8IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgZWxlbWVudCB1c2VkIGZvciB1cGRhdGluZyBsb2NhdGlvblxuICAgICAqIE9wdGlvbmFsbHkgcHJvdmlkZWQuXG4gICAgICogQHR5cGUge3N0cmluZ30gQ1NTIHNlbGVjdG9yXG4gICAgICovXG4gICAgdGhpcy5fdXBkYXRlTG9jYXRpb25FbCA9IGNvbmZpZy51cGRhdGVMb2NhdGlvbkVsIHx8ICcuanMtbG9jYXRpb25CaWFzLXVwZGF0ZS1sb2NhdGlvbic7XG5cbiAgICB0aGlzLl9sb2NhdGlvbkRpc3BsYXlOYW1lID0gJyc7XG5cbiAgICB0aGlzLl9hY2N1cmFjeSA9ICcnO1xuXG4gICAgdGhpcy5fYWxsb3dVcGRhdGUgPSB0cnVlO1xuXG4gICAgLyoqXG4gICAgICogT3B0aW9ucyB0byBwYXNzIHRvIHRoZSBnZW9sb2NhdGlvbiBhcGkuXG4gICAgICogQHR5cGUge09iamVjdH1cbiAgICAgKi9cbiAgICB0aGlzLl9nZW9sb2NhdGlvbk9wdGlvbnMgPSB7XG4gICAgICBlbmFibGVIaWdoQWNjdXJhY3k6IGZhbHNlLFxuICAgICAgdGltZW91dDogNjAwMCxcbiAgICAgIG1heGltdW1BZ2U6IDMwMDAwMCxcbiAgICAgIC4uLmNvbmZpZy5nZW9sb2NhdGlvbk9wdGlvbnNcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogT3B0aW9ucyBmb3IgdGhlIGdlb2xvY2F0aW9uIHRpbWVvdXQgYWxlcnQuXG4gICAgICogQHR5cGUge09iamVjdH1cbiAgICAgKi9cbiAgICB0aGlzLl9nZW9sb2NhdGlvblRpbWVvdXRBbGVydCA9IHtcbiAgICAgIGVuYWJsZWQ6IGZhbHNlLFxuICAgICAgbWVzc2FnZTogJ1dlIGFyZSB1bmFibGUgdG8gZGV0ZXJtaW5lIHlvdXIgbG9jYXRpb24nLFxuICAgICAgLi4uY29uZmlnLmdlb2xvY2F0aW9uVGltZW91dEFsZXJ0XG4gICAgfTtcbiAgfVxuXG4gIHN0YXRpYyBnZXQgdHlwZSAoKSB7XG4gICAgcmV0dXJuICdMb2NhdGlvbkJpYXMnO1xuICB9XG5cbiAgc3RhdGljIGRlZmF1bHRUZW1wbGF0ZU5hbWUgKCkge1xuICAgIHJldHVybiAnc2VhcmNoL2xvY2F0aW9uYmlhcyc7XG4gIH1cblxuICBvbk1vdW50ICgpIHtcbiAgICBpZiAoIXRoaXMuX2FsbG93VXBkYXRlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuX2Rpc2FibGVMb2NhdGlvblVwZGF0ZUlmR2VvbG9jYXRpb25EZW5pZWQoKTtcbiAgICBET00ub24odGhpcy5fdXBkYXRlTG9jYXRpb25FbCwgJ2NsaWNrJywgKGUpID0+IHtcbiAgICAgIGlmICgnZ2VvbG9jYXRpb24nIGluIG5hdmlnYXRvcikge1xuICAgICAgICBuYXZpZ2F0b3IuZ2VvbG9jYXRpb24uZ2V0Q3VycmVudFBvc2l0aW9uKChwb3NpdGlvbikgPT4ge1xuICAgICAgICAgIHRoaXMuY29yZS5nbG9iYWxTdG9yYWdlLnNldChTdG9yYWdlS2V5cy5HRU9MT0NBVElPTiwge1xuICAgICAgICAgICAgbGF0OiBwb3NpdGlvbi5jb29yZHMubGF0aXR1ZGUsXG4gICAgICAgICAgICBsbmc6IHBvc2l0aW9uLmNvb3Jkcy5sb25naXR1ZGUsXG4gICAgICAgICAgICByYWRpdXM6IHBvc2l0aW9uLmNvb3Jkcy5hY2N1cmFjeVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHRoaXMuX2RvU2VhcmNoKCk7XG4gICAgICAgIH0sXG4gICAgICAgIChlcnIpID0+IHRoaXMuX2hhbmRsZUdlb2xvY2F0aW9uRXJyb3IoZXJyKSxcbiAgICAgICAgdGhpcy5fZ2VvbG9jYXRpb25PcHRpb25zKTtcbiAgICAgIH1cbiAgICAgIC8vIFRPRE86IFNob3VsZCB3ZSB0aHJvdyBlcnJvciBvciB3YXJuaW5nIGhlcmUgaWYgbm8gZ2VvbG9jYXRpb24/XG4gICAgfSk7XG4gIH1cblxuICBfaGFuZGxlR2VvbG9jYXRpb25FcnJvciAoZXJyKSB7XG4gICAgaWYgKGVyci5jb2RlID09PSAxKSB7XG4gICAgICB0aGlzLl9kaXNhYmxlTG9jYXRpb25VcGRhdGUoKTtcbiAgICB9XG4gICAgY29uc3QgeyBlbmFibGVkLCBtZXNzYWdlIH0gPSB0aGlzLl9nZW9sb2NhdGlvblRpbWVvdXRBbGVydDtcbiAgICBpZiAoZW5hYmxlZCkge1xuICAgICAgd2luZG93LmFsZXJ0KG1lc3NhZ2UpO1xuICAgIH1cbiAgfVxuXG4gIHNldFN0YXRlIChkYXRhLCB2YWwpIHtcbiAgICB0aGlzLl9sb2NhdGlvbkRpc3BsYXlOYW1lID0gZGF0YS5sb2NhdGlvbkRpc3BsYXlOYW1lO1xuICAgIHRoaXMuX2FjY3VyYWN5ID0gZGF0YS5hY2N1cmFjeTtcbiAgICByZXR1cm4gc3VwZXIuc2V0U3RhdGUoT2JqZWN0LmFzc2lnbih7fSwgZGF0YSwge1xuICAgICAgbG9jYXRpb25EaXNwbGF5TmFtZTogdGhpcy5fZ2V0TG9jYXRpb25EaXNwbGF5TmFtZShkYXRhKSxcbiAgICAgIGFjY3VyYWN5VGV4dDogdGhpcy5fZ2V0QWNjdXJhY3lIZWxwVGV4dChkYXRhLmFjY3VyYWN5KSxcbiAgICAgIGlzUHJlY2lzZUxvY2F0aW9uOiBkYXRhLmFjY3VyYWN5ID09PSAnREVWSUNFJyAmJiB0aGlzLl9hbGxvd1VwZGF0ZSxcbiAgICAgIGlzVW5rbm93bkxvY2F0aW9uOiBkYXRhLmFjY3VyYWN5ID09PSAnVU5LTk9XTicsXG4gICAgICBzaG91bGRTaG93OiBkYXRhLmFjY3VyYWN5ICE9PSB1bmRlZmluZWQsXG4gICAgICBhbGxvd1VwZGF0ZTogdGhpcy5fYWxsb3dVcGRhdGVcbiAgICB9LCB2YWwpKTtcbiAgfVxuXG4gIF9nZXRMb2NhdGlvbkRpc3BsYXlOYW1lIChkYXRhKSB7XG4gICAgaWYgKGRhdGEuYWNjdXJhY3kgPT09ICdVTktOT1dOJykge1xuICAgICAgcmV0dXJuICdVbmtub3duIExvY2F0aW9uJztcbiAgICB9XG4gICAgcmV0dXJuIGRhdGEubG9jYXRpb25EaXNwbGF5TmFtZTtcbiAgfVxuXG4gIF9nZXRBY2N1cmFjeUhlbHBUZXh0IChhY2N1cmFjeSkge1xuICAgIHN3aXRjaCAoYWNjdXJhY3kpIHtcbiAgICAgIGNhc2UgJ0lQJzpcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbmZpZy5pcEFjY3VyYWN5SGVscFRleHQ7XG4gICAgICBjYXNlICdERVZJQ0UnOlxuICAgICAgICByZXR1cm4gdGhpcy5fY29uZmlnLmRldmljZUFjY3VyYWN5SGVscFRleHQ7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gJyc7XG4gICAgfVxuICB9XG5cbiAgX2RvU2VhcmNoICgpIHtcbiAgICBsZXQgcXVlcnkgPSB0aGlzLmNvcmUuZ2xvYmFsU3RvcmFnZS5nZXRTdGF0ZShTdG9yYWdlS2V5cy5RVUVSWSk7XG4gICAgaWYgKHRoaXMuX3ZlcnRpY2FsS2V5KSB7XG4gICAgICBjb25zdCBhbGxGaWx0ZXJzID0gdGhpcy5jb3JlLmdsb2JhbFN0b3JhZ2UuZ2V0QWxsKFN0b3JhZ2VLZXlzLkZJTFRFUik7XG4gICAgICBjb25zdCB0b3RhbEZpbHRlciA9IGFsbEZpbHRlcnMubGVuZ3RoID4gMVxuICAgICAgICA/IEZpbHRlci5hbmQoLi4uYWxsRmlsdGVycylcbiAgICAgICAgOiBhbGxGaWx0ZXJzWzBdO1xuICAgICAgY29uc3QgZmFjZXRGaWx0ZXIgPSB0aGlzLmNvcmUuZ2xvYmFsU3RvcmFnZS5nZXRBbGwoU3RvcmFnZUtleXMuRkFDRVRfRklMVEVSKVswXTtcbiAgICAgIHRoaXMuY29yZS52ZXJ0aWNhbFNlYXJjaCh0aGlzLl92ZXJ0aWNhbEtleSwge1xuICAgICAgICBpbnB1dDogcXVlcnksXG4gICAgICAgIGZpbHRlcjogSlNPTi5zdHJpbmdpZnkodG90YWxGaWx0ZXIpLFxuICAgICAgICBvZmZzZXQ6IHRoaXMuY29yZS5nbG9iYWxTdG9yYWdlLmdldFN0YXRlKFN0b3JhZ2VLZXlzLlNFQVJDSF9PRkZTRVQpIHx8IDAsXG4gICAgICAgIGZhY2V0RmlsdGVyOiBKU09OLnN0cmluZ2lmeShmYWNldEZpbHRlcilcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmNvcmUuc2VhcmNoKHF1ZXJ5KTtcbiAgICB9XG4gIH1cblxuICBfZGlzYWJsZUxvY2F0aW9uVXBkYXRlSWZHZW9sb2NhdGlvbkRlbmllZCAoKSB7XG4gICAgaWYgKCdwZXJtaXNzaW9ucycgaW4gbmF2aWdhdG9yKSB7XG4gICAgICBuYXZpZ2F0b3IucGVybWlzc2lvbnMucXVlcnkoeyBuYW1lOiAnZ2VvbG9jYXRpb24nIH0pXG4gICAgICAgIC50aGVuKChyZXN1bHQpID0+IHtcbiAgICAgICAgICBpZiAocmVzdWx0LnN0YXRlID09PSAnZGVuaWVkJykge1xuICAgICAgICAgICAgdGhpcy5fZGlzYWJsZUxvY2F0aW9uVXBkYXRlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBfZGlzYWJsZUxvY2F0aW9uVXBkYXRlICgpIHtcbiAgICB0aGlzLmNvcmUuZ2xvYmFsU3RvcmFnZS5kZWxldGUoU3RvcmFnZUtleXMuR0VPTE9DQVRJT04pO1xuICAgIHRoaXMuX2FsbG93VXBkYXRlID0gZmFsc2U7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBsb2NhdGlvbkRpc3BsYXlOYW1lOiB0aGlzLl9sb2NhdGlvbkRpc3BsYXlOYW1lLFxuICAgICAgYWNjdXJhY3k6IHRoaXMuX2FjY3VyYWN5XG4gICAgfSk7XG4gIH1cbn1cbiIsIi8qKiBAbW9kdWxlIEZhY2V0ICovXG5cbi8qKlxuICogTW9kZWwgcmVwcmVzZW50aW5nIGEgZmFjZXQgZmlsdGVyIHdpdGggdGhlIGZvcm1hdCBvZlxuICoge1xuICogICBcImZpZWxkX25hbWVcIjogWyBGaWx0ZXJzLi4uIF0sXG4gKiAgIC4uLlxuICogfVxuICpcbiAqIEBzZWUge0BsaW5rIEZpbHRlcn1cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRmFjZXQge1xuICBjb25zdHJ1Y3RvciAoZGF0YSA9IHt9KSB7XG4gICAgT2JqZWN0LmFzc2lnbih0aGlzLCBkYXRhKTtcbiAgICBPYmplY3QuZnJlZXplKHRoaXMpO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIGZhY2V0IGZpbHRlciBmcm9tIGEgbGlzdCBvZiBGaWx0ZXJzXG4gICAqIEBwYXJhbSAgey4uLkZpbHRlcn0gZmlsdGVycyBUaGUgZmlsdGVycyB0byB1c2UgaW4gdGhpcyBmYWNldFxuICAgKiBAcmV0dXJucyB7RmFjZXR9XG4gICAqL1xuICBzdGF0aWMgZnJvbUZpbHRlcnMgKGF2YWlsYWJsZUZpZWxkSWRzLCAuLi5maWx0ZXJzKSB7XG4gICAgY29uc3QgZ3JvdXBzID0ge307XG4gICAgYXZhaWxhYmxlRmllbGRJZHMuZm9yRWFjaChmaWVsZElkID0+IHtcbiAgICAgIGdyb3Vwc1tmaWVsZElkXSA9IFtdO1xuICAgIH0pO1xuICAgIGNvbnN0IGZsYXRGaWx0ZXJzID0gZmlsdGVycy5mbGF0TWFwKGYgPT4gZi4kb3IgfHwgZik7XG4gICAgZmxhdEZpbHRlcnMuZm9yRWFjaChmID0+IHtcbiAgICAgIGNvbnN0IGtleSA9IE9iamVjdC5rZXlzKGYpWzBdO1xuICAgICAgaWYgKCFncm91cHNba2V5XSkge1xuICAgICAgICBncm91cHNba2V5XSA9IFtdO1xuICAgICAgfVxuICAgICAgZ3JvdXBzW2tleV0ucHVzaChmKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBuZXcgRmFjZXQoZ3JvdXBzKTtcbiAgfVxufVxuIiwiLyoqIEBtb2R1bGUgRmlsdGVyQm94Q29tcG9uZW50ICovXG5cbmltcG9ydCBDb21wb25lbnQgZnJvbSAnLi4vY29tcG9uZW50JztcbmltcG9ydCB7IEFuc3dlcnNDb21wb25lbnRFcnJvciB9IGZyb20gJy4uLy4uLy4uL2NvcmUvZXJyb3JzL2Vycm9ycyc7XG5pbXBvcnQgRE9NIGZyb20gJy4uLy4uL2RvbS9kb20nO1xuaW1wb3J0IFN0b3JhZ2VLZXlzIGZyb20gJy4uLy4uLy4uL2NvcmUvc3RvcmFnZS9zdG9yYWdla2V5cyc7XG5pbXBvcnQgRmlsdGVyIGZyb20gJy4uLy4uLy4uL2NvcmUvbW9kZWxzL2ZpbHRlcic7XG5pbXBvcnQgRmFjZXQgZnJvbSAnLi4vLi4vLi4vY29yZS9tb2RlbHMvZmFjZXQnO1xuXG5jbGFzcyBGaWx0ZXJCb3hDb25maWcge1xuICBjb25zdHJ1Y3RvciAoY29uZmlnKSB7XG4gICAgLyoqXG4gICAgICogVGhlIHRpdGxlIHRvIGRpc3BsYXkgYWJvdmUgdGhlIGNvbnRyb2xzXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLnRpdGxlID0gY29uZmlnLnRpdGxlIHx8ICdGaWx0ZXJzJztcblxuICAgIC8qKlxuICAgICAqIElmIHRydWUsIGRpc3BsYXkgdGhlIG51bWJlciBvZiByZXN1bHRzIG5leHQgdG8gZWFjaCBmYWNldFxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqL1xuICAgIHRoaXMuc2hvd0NvdW50ID0gY29uZmlnLnNob3dDb3VudCA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IGNvbmZpZy5zaG93Q291bnQ7XG5cbiAgICAvKipcbiAgICAgKiBJZiB0cnVlLCB0cmlnZ2VyIGEgc2VhcmNoIG9uIGVhY2ggY2hhbmdlIHRvIGEgZmlsdGVyXG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICovXG4gICAgdGhpcy5zZWFyY2hPbkNoYW5nZSA9IGNvbmZpZy5zZWFyY2hPbkNoYW5nZSB8fCBmYWxzZTtcblxuICAgIC8qKlxuICAgICAqIElmIHRydWUsIHNob3cgYSBidXR0b24gdG8gcmVzZXQgZm9yIGVhY2ggZmFjZXQgZ3JvdXBcbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICB0aGlzLnJlc2V0RmlsdGVyID0gY29uZmlnLnJlc2V0RmFjZXQgfHwgZmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgbGFiZWwgdG8gc2hvdyBmb3IgdGhlIHJlc2V0IGJ1dHRvblxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgdGhpcy5yZXNldEZpbHRlckxhYmVsID0gY29uZmlnLnJlc2V0RmFjZXRMYWJlbCB8fCAncmVzZXQnO1xuXG4gICAgLyoqXG4gICAgICogSWYgdHJ1ZSwgc2hvdyBhIFwicmVzZXQgYWxsXCIgYnV0dG9uIHRvIHJlc2V0IGFsbCBmYWNldHNcbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICB0aGlzLnJlc2V0RmlsdGVycyA9IGNvbmZpZy5yZXNldEZhY2V0cyA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IGNvbmZpZy5yZXNldEZhY2V0cztcblxuICAgIC8qKlxuICAgICAqIFRoZSBsYWJlbCB0byBzaG93IGZvciB0aGUgXCJyZXNldCBhbGxcIiBidXR0b25cbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMucmVzZXRGaWx0ZXJzTGFiZWwgPSBjb25maWcucmVzZXRGYWNldHNMYWJlbCB8fCAncmVzZXQgYWxsJztcblxuICAgIC8qKlxuICAgICAqIFRoZSBtYXggbnVtYmVyIG9mIGZhY2V0cyB0byBzaG93IGJlZm9yZSBkaXNwbGF5aW5nIFwic2hvdyBtb3JlXCIvXCJzaG93IGxlc3NcIlxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy5zaG93TW9yZUxpbWl0ID0gY29uZmlnLnNob3dNb3JlTGltaXQgfHwgNTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBsYWJlbCB0byBzaG93IGZvciBkaXNwbGF5aW5nIG1vcmUgZmFjZXRzXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLnNob3dNb3JlTGFiZWwgPSBjb25maWcuc2hvd01vcmVMYWJlbCB8fCAnc2hvdyBtb3JlJztcblxuICAgIC8qKlxuICAgICAqIFRoZSBsYWJlbCB0byBzaG93IGZvciBkaXNwbGF5aW5nIGxlc3MgZmFjZXRzXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLnNob3dMZXNzTGFiZWwgPSBjb25maWcuc2hvd0xlc3NMYWJlbCB8fCAnc2hvdyBsZXNzJztcblxuICAgIC8qKlxuICAgICAqIElmIHRydWUsIGVuYWJsZSBoaWRpbmcgZXhjZXNzIGZhY2V0cyBpbiBlYWNoIGdyb3VwIHdpdGggYSBcInNob3cgbW9yZVwiL1wic2hvdyBsZXNzXCIgYnV0dG9uXG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICovXG4gICAgdGhpcy5zaG93TW9yZSA9IGNvbmZpZy5zaG93TW9yZSA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IGNvbmZpZy5zaG93TW9yZTtcblxuICAgIC8qKlxuICAgICAqIElmIHRydWUsIGFsbG93IGV4cGFuZGluZyBhbmQgY29sbGFwc2luZyBlYWNoIGdyb3VwIG9mIGZhY2V0c1xuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqL1xuICAgIHRoaXMuZXhwYW5kID0gY29uZmlnLmV4cGFuZCA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IGNvbmZpZy5leHBhbmQ7XG5cbiAgICAvKipcbiAgICAgKiBJZiB0cnVlLCBkaXNwbGF5IHRoZSBudW1iZXIgb2YgY3VycmVudGx5IGFwcGxpZWQgZmlsdGVycyB3aGVuIGNvbGxhcHNlZFxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqL1xuICAgIHRoaXMuc2hvd051bWJlckFwcGxpZWQgPSBjb25maWcuc2hvd051bWJlckFwcGxpZWQgPT09IHVuZGVmaW5lZCA/IHRydWUgOiBjb25maWcuc2hvd051bWJlckFwcGxpZWQ7XG5cbiAgICAvKipcbiAgICAgKiBUZXh0IHRvIGRpc3BsYXkgb24gdGhlIGFwcGx5IGJ1dHRvblxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgdGhpcy5hcHBseUxhYmVsID0gY29uZmlnLmFwcGx5TGFiZWwgfHwgJ2FwcGx5JztcblxuICAgIC8qKlxuICAgICAqIFRoZSBzZWxlY3RvciBvZiB0aGUgYXBwbHkgYnV0dG9uXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLmFwcGx5QnV0dG9uU2VsZWN0b3IgPSBjb25maWcuYXBwbHlCdXR0b25TZWxlY3RvciB8fCAnLmpzLXlleHQtZmlsdGVyYm94LWFwcGx5JztcblxuICAgIC8qKlxuICAgICAqIFRoZSBsaXN0IG9mIGZpbHRlcnMgdG8gZGlzcGxheSBhbmQgY29udHJvbCwgaWdub3JpbmcgZW1wdHkgc2VjdGlvbnNcbiAgICAgKiBAdHlwZSB7b2JqZWN0W119XG4gICAgICovXG4gICAgdGhpcy5maWx0ZXJDb25maWdzID0gY29uZmlnLmZpbHRlcnMuZmlsdGVyKGYgPT4gZi5vcHRpb25zLmxlbmd0aCAhPT0gMCk7XG5cbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIG9yIG5vdCB0aGlzIGZpbHRlcmJveCBjb250YWlucyBmYWNldHMuIFRoaXMgYWZmZWN0cyB0aGVcbiAgICAgKiB0aGUgd2F5IHRoZSBmaWx0ZXJzIGFyZSB1c2VkIGluIHRoZSBzZWFyY2hcbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICB0aGlzLmlzRHluYW1pYyA9IGNvbmZpZy5pc0R5bmFtaWMgfHwgZmFsc2U7XG5cbiAgICB0aGlzLnZhbGlkYXRlKCk7XG4gIH1cblxuICB2YWxpZGF0ZSAoKSB7XG4gIH1cbn1cblxuLyoqXG4gKiBSZW5kZXJzIGEgc2V0IG9mIGZpbHRlcnMsIGFuZCBzZWFyY2hlcyB3aXRoIHRoZW0gd2hlbiBhcHBsaWVkLlxuICogTXVsdGlwbGUgRmlsdGVyQm94IGNvbXBvbmVudHMgd2lsbCBBTkQgdG9nZXRoZXIgYnV0IHdpbGwgbm90IHNoYXJlIHN0YXRlLlxuICogQGV4dGVuZHMgQ29tcG9uZW50XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEZpbHRlckJveENvbXBvbmVudCBleHRlbmRzIENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yIChjb25maWcgPSB7fSwgc3lzdGVtQ29uZmlnID0ge30pIHtcbiAgICBzdXBlcihjb25maWcsIHN5c3RlbUNvbmZpZyk7XG5cbiAgICB0aGlzLmNvbmZpZyA9IG5ldyBGaWx0ZXJCb3hDb25maWcoY29uZmlnKTtcblxuICAgIGlmICghY29uZmlnLmZpbHRlcnMgfHwgIShjb25maWcuZmlsdGVycyBpbnN0YW5jZW9mIEFycmF5KSkge1xuICAgICAgdGhyb3cgbmV3IEFuc3dlcnNDb21wb25lbnRFcnJvcihcbiAgICAgICAgJ0ZpbHRlckJveCByZXF1aXJlcyBmaWx0ZXJzIHRvIGJlIHByb3ZpZGVkIGFzIGFuIGFycmF5JyxcbiAgICAgICAgJ0ZpbHRlckJveCcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSB2ZXJ0aWNhbCBrZXkgZm9yIHRoZSBzZWFyY2hcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5fdmVydGljYWxLZXkgPSBjb25maWcudmVydGljYWxLZXkgfHwgbnVsbDtcblxuICAgIC8qKlxuICAgICAqIFRoZSBjb21wb25lbnRzIGNyZWF0ZWQgZm9yIGVhY2ggZmlsdGVyIGNvbmZpZ1xuICAgICAqIEB0eXBlIHtDb21wb25lbnRbXX1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuX2ZpbHRlckNvbXBvbmVudHMgPSBbXTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBjdXJyZW50IHN0YXRlIG9mIHRoZSBmaWx0ZXIgY29tcG9uZW50cyBpbiB0aGUgYm94XG4gICAgICogQHR5cGUge0ZpbHRlcn1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuX2ZpbHRlcnMgPSBbXTtcblxuICAgIGlmICghdGhpcy5jb25maWcuc2hvd0NvdW50KSB7XG4gICAgICB0aGlzLmNvbmZpZy5maWx0ZXJDb25maWdzLmZvckVhY2goY29uZmlnID0+IHtcbiAgICAgICAgY29uZmlnLm9wdGlvbnMuZm9yRWFjaChvcHRpb24gPT4ge1xuICAgICAgICAgIG9wdGlvbi5jb3VudExhYmVsID0gbnVsbDtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgZ2V0IHR5cGUgKCkge1xuICAgIHJldHVybiAnRmlsdGVyQm94JztcbiAgfVxuXG4gIHN0YXRpYyBkZWZhdWx0VGVtcGxhdGVOYW1lICgpIHtcbiAgICByZXR1cm4gJ2ZpbHRlcnMvZmlsdGVyYm94JztcbiAgfVxuXG4gIHNldFN0YXRlIChkYXRhKSB7XG4gICAgc3VwZXIuc2V0U3RhdGUoT2JqZWN0LmFzc2lnbih7fSwgZGF0YSwgdGhpcy5jb25maWcsIHtcbiAgICAgIHNob3dSZXNldDogdGhpcy5jb25maWcucmVzZXRGaWx0ZXJzLFxuICAgICAgcmVzZXRMYWJlbDogdGhpcy5jb25maWcucmVzZXRGaWx0ZXJzTGFiZWwsXG4gICAgICBzaG93QXBwbHlCdXR0b246ICF0aGlzLmNvbmZpZy5zZWFyY2hPbkNoYW5nZVxuICAgIH0pKTtcbiAgfVxuXG4gIG9uTW91bnQgKCkge1xuICAgIGlmICh0aGlzLl9maWx0ZXJDb21wb25lbnRzLmxlbmd0aCkge1xuICAgICAgdGhpcy5fZmlsdGVyQ29tcG9uZW50cy5mb3JFYWNoKGMgPT4gYy5yZW1vdmUoKSk7XG4gICAgICB0aGlzLl9maWx0ZXJDb21wb25lbnRzID0gW107XG4gICAgICB0aGlzLl9maWx0ZXJzID0gW107XG4gICAgfVxuXG4gICAgLy8gSW5pdGlhbGl6ZSBmaWx0ZXJzIGZyb20gY29uZmlnc1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5jb25maWcuZmlsdGVyQ29uZmlncy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgY29uZmlnID0gdGhpcy5jb25maWcuZmlsdGVyQ29uZmlnc1tpXTtcbiAgICAgIGNvbnN0IGNvbXBvbmVudCA9IHRoaXMuY29tcG9uZW50TWFuYWdlci5jcmVhdGUoY29uZmlnLnR5cGUsIE9iamVjdC5hc3NpZ24oe30sXG4gICAgICAgIGNvbmZpZyxcbiAgICAgICAgdGhpcy5jb25maWcsXG4gICAgICAgIHtcbiAgICAgICAgICBwYXJlbnRDb250YWluZXI6IHRoaXMuX2NvbnRhaW5lcixcbiAgICAgICAgICBuYW1lOiBgJHt0aGlzLm5hbWV9LmZpbHRlciR7aX1gLFxuICAgICAgICAgIHN0b3JlT25DaGFuZ2U6IGZhbHNlLFxuICAgICAgICAgIGNvbnRhaW5lcjogYC5qcy15ZXh0LWZpbHRlcmJveC1maWx0ZXIke2l9YCxcbiAgICAgICAgICBzaG93UmVzZXQ6IHRoaXMuY29uZmlnLnJlc2V0RmlsdGVyLFxuICAgICAgICAgIHJlc2V0TGFiZWw6IHRoaXMuY29uZmlnLnJlc2V0RmlsdGVyTGFiZWwsXG4gICAgICAgICAgc2hvd0V4cGFuZDogdGhpcy5jb25maWcuZXhwYW5kLFxuICAgICAgICAgIG9uQ2hhbmdlOiAoZmlsdGVyKSA9PiB7XG4gICAgICAgICAgICB0aGlzLm9uRmlsdGVyQ2hhbmdlKGksIGZpbHRlcik7XG4gICAgICAgICAgfVxuICAgICAgICB9KSk7XG4gICAgICBjb21wb25lbnQubW91bnQoKTtcbiAgICAgIHRoaXMuX2ZpbHRlckNvbXBvbmVudHMucHVzaChjb21wb25lbnQpO1xuICAgICAgdGhpcy5fZmlsdGVyc1tpXSA9IGNvbXBvbmVudC5nZXRGaWx0ZXIoKTtcbiAgICAgIHRoaXMuX3NhdmVGaWx0ZXJzVG9TdG9yYWdlKCk7XG4gICAgfVxuXG4gICAgLy8gSW5pdGlhbGl6ZSBhcHBseSBidXR0b25cbiAgICBpZiAoIXRoaXMuY29uZmlnLnNlYXJjaE9uQ2hhbmdlKSB7XG4gICAgICBjb25zdCBidXR0b24gPSBET00ucXVlcnkodGhpcy5fY29udGFpbmVyLCB0aGlzLmNvbmZpZy5hcHBseUJ1dHRvblNlbGVjdG9yKTtcblxuICAgICAgaWYgKGJ1dHRvbikge1xuICAgICAgICBET00ub24oYnV0dG9uLCAnY2xpY2snLCAoKSA9PiB7XG4gICAgICAgICAgdGhpcy5fc2F2ZUZpbHRlcnNUb1N0b3JhZ2UoKTtcbiAgICAgICAgICB0aGlzLl9zZWFyY2goKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gSW5pdGlhbGl6ZSByZXNldCBidXR0b25cbiAgICBsZXQgcmVzZXRFbCA9IERPTS5xdWVyeSh0aGlzLl9jb250YWluZXIsICcuanMteXh0LUZpbHRlckJveC1yZXNldCcpO1xuXG4gICAgaWYgKHJlc2V0RWwpIHtcbiAgICAgIERPTS5vbihyZXNldEVsLCAnY2xpY2snLCB0aGlzLnJlc2V0RmlsdGVycy5iaW5kKHRoaXMpKTtcbiAgICB9XG4gIH1cblxuICByZXNldEZpbHRlcnMgKCkge1xuICAgIHRoaXMuX2ZpbHRlckNvbXBvbmVudHMuZm9yRWFjaChmaWx0ZXIgPT4gZmlsdGVyLmNsZWFyT3B0aW9ucygpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBIYW5kbGUgY2hhbmdlcyB0byBjaGlsZCBmaWx0ZXIgY29tcG9uZW50c1xuICAgKiBAcGFyYW0ge251bWJlcn0gaW5kZXggVGhlIGluZGV4IG9mIHRoZSBjaGFuZ2VkIGZpbHRlclxuICAgKiBAcGFyYW0ge0ZpbHRlcn0gZmlsdGVyIFRoZSBuZXcgZmlsdGVyXG4gICAqL1xuICBvbkZpbHRlckNoYW5nZSAoaW5kZXgsIGZpbHRlcikge1xuICAgIHRoaXMuX2ZpbHRlcnNbaW5kZXhdID0gZmlsdGVyO1xuICAgIGlmICh0aGlzLmNvbmZpZy5zZWFyY2hPbkNoYW5nZSkge1xuICAgICAgdGhpcy5fc2F2ZUZpbHRlcnNUb1N0b3JhZ2UoKTtcbiAgICAgIHRoaXMuX3NlYXJjaCgpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmUgYWxsIGZpbHRlciBjb21wb25lbnRzIGFsb25nIHdpdGggdGhpcyBjb21wb25lbnRcbiAgICovXG4gIHJlbW92ZSAoKSB7XG4gICAgdGhpcy5fZmlsdGVyQ29tcG9uZW50cy5mb3JFYWNoKGMgPT4gYy5yZW1vdmUoKSk7XG4gICAgc3VwZXIucmVtb3ZlKCk7XG4gIH1cblxuICAvKipcbiAgICogU2F2ZSBjdXJyZW50IGZpbHRlcnMgdG8gc3RvcmFnZSB0byBiZSB1c2VkIGluIHRoZSBuZXh0IHNlYXJjaFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3NhdmVGaWx0ZXJzVG9TdG9yYWdlICgpIHtcbiAgICBjb25zdCB2YWxpZEZpbHRlcnMgPSB0aGlzLl9maWx0ZXJzLmZpbHRlcihmID0+XG4gICAgICBmICE9PSB1bmRlZmluZWQgJiZcbiAgICAgIGYgIT09IG51bGwgJiZcbiAgICAgIE9iamVjdC5rZXlzKGYpLmxlbmd0aCA+IDApO1xuXG4gICAgaWYgKHRoaXMuY29uZmlnLmlzRHluYW1pYykge1xuICAgICAgY29uc3QgYXZhaWxhYmxlRmllbGRJZHMgPSB0aGlzLmNvbmZpZy5maWx0ZXJDb25maWdzLm1hcChjb25maWcgPT4gY29uZmlnLmZpZWxkSWQpO1xuICAgICAgY29uc3QgY29tYmluZWRGaWx0ZXIgPSBGYWNldC5mcm9tRmlsdGVycyhhdmFpbGFibGVGaWVsZElkcywgLi4udmFsaWRGaWx0ZXJzKTtcbiAgICAgIHRoaXMuY29yZS5zZXRGYWNldEZpbHRlcih0aGlzLm5hbWUsIGNvbWJpbmVkRmlsdGVyIHx8IHt9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgY29tYmluZWRGaWx0ZXIgPSB2YWxpZEZpbHRlcnMubGVuZ3RoID4gMVxuICAgICAgICA/IEZpbHRlci5hbmQoLi4udmFsaWRGaWx0ZXJzKVxuICAgICAgICA6IHZhbGlkRmlsdGVyc1swXTtcbiAgICAgIHRoaXMuY29yZS5zZXRGaWx0ZXIodGhpcy5uYW1lLCBjb21iaW5lZEZpbHRlciB8fCB7fSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFRyaWdnZXIgYSBzZWFyY2ggd2l0aCBhbGwgZmlsdGVycyBpbiBzdG9yYWdlXG4gICAqL1xuICBfc2VhcmNoICgpIHtcbiAgICBjb25zdCBhbGxGaWx0ZXJzID0gdGhpcy5jb3JlLmdsb2JhbFN0b3JhZ2UuZ2V0QWxsKFN0b3JhZ2VLZXlzLkZJTFRFUik7XG4gICAgY29uc3QgdG90YWxGaWx0ZXIgPSBhbGxGaWx0ZXJzLmxlbmd0aCA+IDFcbiAgICAgID8gRmlsdGVyLmFuZCguLi5hbGxGaWx0ZXJzKVxuICAgICAgOiBhbGxGaWx0ZXJzWzBdO1xuXG4gICAgY29uc3QgcXVlcnkgPSB0aGlzLmNvcmUuZ2xvYmFsU3RvcmFnZS5nZXRTdGF0ZShTdG9yYWdlS2V5cy5RVUVSWSk7XG5cbiAgICBjb25zdCBmYWNldEZpbHRlciA9IHRoaXMuY29yZS5nbG9iYWxTdG9yYWdlLmdldEFsbChTdG9yYWdlS2V5cy5GQUNFVF9GSUxURVIpWzBdO1xuXG4gICAgdGhpcy5jb3JlLnBlcnNpc3RlbnRTdG9yYWdlLmRlbGV0ZShTdG9yYWdlS2V5cy5TRUFSQ0hfT0ZGU0VUKTtcbiAgICB0aGlzLmNvcmUuZ2xvYmFsU3RvcmFnZS5kZWxldGUoU3RvcmFnZUtleXMuU0VBUkNIX09GRlNFVCk7XG4gICAgdGhpcy5jb3JlLnZlcnRpY2FsU2VhcmNoKHRoaXMuX3ZlcnRpY2FsS2V5LCB7XG4gICAgICBpbnB1dDogcXVlcnksXG4gICAgICBmaWx0ZXI6IEpTT04uc3RyaW5naWZ5KHRvdGFsRmlsdGVyKSxcbiAgICAgIGZhY2V0RmlsdGVyOiBKU09OLnN0cmluZ2lmeShmYWNldEZpbHRlcilcbiAgICB9KTtcbiAgfVxufVxuIiwiLyoqIEBtb2R1bGUgRmlsdGVyT3B0aW9uc0NvbXBvbmVudCAqL1xuXG5pbXBvcnQgQ29tcG9uZW50IGZyb20gJy4uL2NvbXBvbmVudCc7XG5pbXBvcnQgeyBBbnN3ZXJzQ29tcG9uZW50RXJyb3IgfSBmcm9tICcuLi8uLi8uLi9jb3JlL2Vycm9ycy9lcnJvcnMnO1xuaW1wb3J0IEZpbHRlciBmcm9tICcuLi8uLi8uLi9jb3JlL21vZGVscy9maWx0ZXInO1xuaW1wb3J0IERPTSBmcm9tICcuLi8uLi9kb20vZG9tJztcblxuLyoqXG4gKiBUaGUgY3VycmVudGx5IHN1cHBvcnRlZCBjb250cm9sc1xuICogQHR5cGUge3N0cmluZ1tdfVxuICovXG5jb25zdCBTVVBQT1JURURfQ09OVFJPTFMgPSBbXG4gICdzaW5nbGVvcHRpb24nLFxuICAnbXVsdGlvcHRpb24nXG5dO1xuXG5jbGFzcyBGaWx0ZXJPcHRpb25zQ29uZmlnIHtcbiAgY29uc3RydWN0b3IgKGNvbmZpZykge1xuICAgIC8qKlxuICAgICAqIFRoZSB0eXBlIG9mIGNvbnRyb2wgdG8gZGlzcGxheVxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgdGhpcy5jb250cm9sID0gY29uZmlnLmNvbnRyb2w7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgbGlzdCBvZiBmaWx0ZXIgb3B0aW9ucyB0byBkaXNwbGF5IHdpdGggY2hlY2tlZCBzdGF0dXNcbiAgICAgKiBAdHlwZSB7b2JqZWN0W119XG4gICAgICovXG4gICAgdGhpcy5vcHRpb25zID0gY29uZmlnLm9wdGlvbnM7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgbGFiZWwgdG8gYmUgdXNlZCBpbiB0aGUgbGVnZW5kXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLmxhYmVsID0gY29uZmlnLmxhYmVsIHx8ICdGaWx0ZXJzJztcblxuICAgIC8qKlxuICAgICAqIFRoZSBjYWxsYmFjayBmdW5jdGlvbiB0byBjYWxsIHdoZW4gY2hhbmdlZFxuICAgICAqIEB0eXBlIHtmdW5jdGlvbn1cbiAgICAgKi9cbiAgICB0aGlzLm9uQ2hhbmdlID0gY29uZmlnLm9uQ2hhbmdlIHx8IGZ1bmN0aW9uICgpIHt9O1xuXG4gICAgLyoqXG4gICAgICogSWYgdHJ1ZSwgc3RvcmVzIHRoZSBmaWx0ZXIgdG8gc3RvcmFnZSBvbiBlYWNoIGNoYW5nZVxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqL1xuICAgIHRoaXMuc3RvcmVPbkNoYW5nZSA9IGNvbmZpZy5zdG9yZU9uQ2hhbmdlID09PSB1bmRlZmluZWQgPyB0cnVlIDogY29uZmlnLnN0b3JlT25DaGFuZ2U7XG5cbiAgICAvKipcbiAgICAgKiBJZiB0cnVlLCBzaG93IGEgYnV0dG9uIHRvIHJlc2V0IHRoZSBjdXJyZW50IGZpbHRlciBzZWxlY3Rpb25cbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICB0aGlzLnNob3dSZXNldCA9IGNvbmZpZy5zaG93UmVzZXQgJiYgdGhpcy5vcHRpb25zLmxlbmd0aCA+IDA7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgbGFiZWwgdG8gc2hvdyBmb3IgdGhlIHJlc2V0IGJ1dHRvblxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgdGhpcy5yZXNldExhYmVsID0gY29uZmlnLnJlc2V0TGFiZWwgfHwgJ3Jlc2V0JztcblxuICAgIC8qKlxuICAgICAqIFRoZSBtYXggbnVtYmVyIG9mIGZhY2V0cyB0byBzaG93IGJlZm9yZSBkaXNwbGF5aW5nIFwic2hvdyBtb3JlXCIvXCJzaG93IGxlc3NcIlxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy5zaG93TW9yZUxpbWl0ID0gY29uZmlnLnNob3dNb3JlTGltaXQgfHwgNTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBsYWJlbCB0byBzaG93IGZvciBkaXNwbGF5aW5nIG1vcmUgZmFjZXRzXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLnNob3dNb3JlTGFiZWwgPSBjb25maWcuc2hvd01vcmVMYWJlbCB8fCAnc2hvdyBtb3JlJztcblxuICAgIC8qKlxuICAgICAqIFRoZSBsYWJlbCB0byBzaG93IGZvciBkaXNwbGF5aW5nIGxlc3MgZmFjZXRzXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLnNob3dMZXNzTGFiZWwgPSBjb25maWcuc2hvd0xlc3NMYWJlbCB8fCAnc2hvdyBsZXNzJztcblxuICAgIC8qKlxuICAgICAqIElmIHRydWUsIGVuYWJsZSBoaWRpbmcgZXhjZXNzIGZhY2V0cyB3aXRoIGEgXCJzaG93IG1vcmVcIi9cInNob3cgbGVzc1wiIGJ1dHRvblxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqL1xuICAgIHRoaXMuc2hvd01vcmUgPSBjb25maWcuc2hvd01vcmUgPT09IHVuZGVmaW5lZCA/IHRydWUgOiBjb25maWcuc2hvd01vcmU7XG4gICAgdGhpcy5zaG93TW9yZSA9IHRoaXMuc2hvd01vcmUgJiYgdGhpcy5vcHRpb25zLmxlbmd0aCA+IHRoaXMuc2hvd01vcmVMaW1pdDtcblxuICAgIC8qKlxuICAgICAqIElmIHRydWUsIGFsbG93IGV4cGFuZGluZyBhbmQgY29sbGFwc2luZyB0aGUgZ3JvdXAgb2YgZmFjZXRzXG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICovXG4gICAgdGhpcy5zaG93RXhwYW5kID0gY29uZmlnLnNob3dFeHBhbmQgPT09IHVuZGVmaW5lZCA/IHRydWUgOiBjb25maWcuc2hvd0V4cGFuZDtcblxuICAgIC8qKlxuICAgICAqIElmIHRydWUsIGRpc3BsYXkgdGhlIG51bWJlciBvZiBjdXJyZW50bHkgYXBwbGllZCBmaWx0ZXJzIHdoZW4gY29sbGFwc2VkXG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICovXG4gICAgdGhpcy5zaG93TnVtYmVyQXBwbGllZCA9IGNvbmZpZy5zaG93TnVtYmVyQXBwbGllZCA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IGNvbmZpZy5zaG93TnVtYmVyQXBwbGllZDtcblxuICAgIC8qKlxuICAgICAqIFRoZSBzZWxlY3RvciB1c2VkIGZvciBvcHRpb25zIGluIHRoZSB0ZW1wbGF0ZVxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgdGhpcy5vcHRpb25TZWxlY3RvciA9IGNvbmZpZy5vcHRpb25TZWxlY3RvciB8fCAnLmpzLXlleHQtZmlsdGVyLW9wdGlvbic7XG5cbiAgICB0aGlzLnZhbGlkYXRlKCk7XG5cbiAgICBpZiAodHlwZW9mIGNvbmZpZy5wcmV2aW91c09wdGlvbnMgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25maWcucHJldmlvdXNPcHRpb25zID0gSlNPTi5wYXJzZShjb25maWcucHJldmlvdXNPcHRpb25zKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY29uZmlnLnByZXZpb3VzT3B0aW9ucyA9IFtdO1xuICAgICAgfVxuICAgIH1cbiAgICBsZXQgc2VsZWN0ZWRPcHRpb25zID0gY29uZmlnLnByZXZpb3VzT3B0aW9ucyB8fCBbXTtcbiAgICB0aGlzLm9wdGlvbnMgPSB0aGlzLnNldERlZmF1bHRTZWxlY3RlZFZhbHVlcyh0aGlzLm9wdGlvbnMsIHNlbGVjdGVkT3B0aW9ucyk7XG4gIH1cblxuICBzZXREZWZhdWx0U2VsZWN0ZWRWYWx1ZXMgKG9wdGlvbnMsIHNlbGVjdGVkT3B0aW9ucykge1xuICAgIHJldHVybiBvcHRpb25zLm1hcChvID0+ICh7XG4gICAgICAuLi5vLFxuICAgICAgc2VsZWN0ZWQ6IHNlbGVjdGVkT3B0aW9ucy5sZW5ndGhcbiAgICAgICAgPyBzZWxlY3RlZE9wdGlvbnMuaW5jbHVkZXMoby5sYWJlbClcbiAgICAgICAgOiBvLnNlbGVjdGVkXG4gICAgfSkpO1xuICB9XG5cbiAgZ2V0U2VsZWN0ZWRDb3VudCAoKSB7XG4gICAgcmV0dXJuIHRoaXMub3B0aW9ucy5yZWR1Y2UoXG4gICAgICAobnVtU2VsZWN0ZWQsIG9wdGlvbikgPT4gb3B0aW9uLnNlbGVjdGVkID8gbnVtU2VsZWN0ZWQgKyAxIDogbnVtU2VsZWN0ZWQsXG4gICAgICAwKTtcbiAgfVxuXG4gIHZhbGlkYXRlICgpIHtcbiAgICBpZiAoIXRoaXMuY29udHJvbCB8fCAhU1VQUE9SVEVEX0NPTlRST0xTLmluY2x1ZGVzKHRoaXMuY29udHJvbCkpIHtcbiAgICAgIHRocm93IG5ldyBBbnN3ZXJzQ29tcG9uZW50RXJyb3IoXG4gICAgICAgICdGaWx0ZXJPcHRpb25zIHJlcXVpcmVzIGEgdmFsaWQgXCJjb250cm9sXCIgdG8gYmUgcHJvdmlkZWQnLFxuICAgICAgICAnRmlsdGVyT3B0aW9ucycpO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5vcHRpb25zKSB7XG4gICAgICB0aHJvdyBuZXcgQW5zd2Vyc0NvbXBvbmVudEVycm9yKFxuICAgICAgICAnRmlsdGVyT3B0aW9ucyBjb21wb25lbnQgcmVxdWlyZXMgb3B0aW9ucyB0byBiZSBwcm92aWRlZCcsXG4gICAgICAgICdGaWx0ZXJPcHRpb25zJyk7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogUmVuZGVycyBhIHNldCBvZiBvcHRpb25zLCBlYWNoIG9uZSByZXByZXNlbnRpbmcgYSBmaWx0ZXIgaW4gYSBzZWFyY2guXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEZpbHRlck9wdGlvbnNDb21wb25lbnQgZXh0ZW5kcyBDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvciAoY29uZmlnID0ge30sIHN5c3RlbUNvbmZpZyA9IHt9KSB7XG4gICAgc3VwZXIoY29uZmlnLCBzeXN0ZW1Db25maWcpO1xuXG4gICAgbGV0IHByZXZpb3VzT3B0aW9ucyA9IHRoaXMuY29yZS5nbG9iYWxTdG9yYWdlLmdldFN0YXRlKHRoaXMubmFtZSk7XG4gICAgdGhpcy5jb3JlLmdsb2JhbFN0b3JhZ2UuZGVsZXRlKHRoaXMubmFtZSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgY29tcG9uZW50IGNvbmZpZ1xuICAgICAqIEB0eXBlIHtGaWx0ZXJPcHRpb25zQ29uZmlnfVxuICAgICAqL1xuICAgIHRoaXMuY29uZmlnID0gbmV3IEZpbHRlck9wdGlvbnNDb25maWcoe1xuICAgICAgcHJldmlvdXNPcHRpb25zLFxuICAgICAgLi4uY29uZmlnXG4gICAgfSk7XG5cbiAgICBjb25zdCBzZWxlY3RlZENvdW50ID0gdGhpcy5jb25maWcuZ2V0U2VsZWN0ZWRDb3VudCgpO1xuXG4gICAgLyoqXG4gICAgICogVHJ1ZSBpZiB0aGUgb3B0aW9uIGxpc3QgaXMgZXhwYW5kZWQgYW5kIHZpc2libGVcbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICB0aGlzLmV4cGFuZGVkID0gdGhpcy5jb25maWcuc2hvd0V4cGFuZCA/IHNlbGVjdGVkQ291bnQgPiAwIDogdHJ1ZTtcblxuICAgIC8qKlxuICAgICAqIFRydWUgaWYgYWxsIG9wdGlvbnMgYXJlIHNob3duLCBmYWxzZSBpZiBzb21lIGFyZSBoaWRkZW4gYmFzZWQgb24gY29uZmlnXG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICovXG4gICAgdGhpcy5hbGxTaG93biA9IGZhbHNlO1xuICB9XG5cbiAgc3RhdGljIGdldCB0eXBlICgpIHtcbiAgICByZXR1cm4gJ0ZpbHRlck9wdGlvbnMnO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSB0ZW1wbGF0ZSB0byByZW5kZXIsIGJhc2VkIG9uIHRoZSBjb250cm9sXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgc3RhdGljIGRlZmF1bHRUZW1wbGF0ZU5hbWUgKGNvbmZpZykge1xuICAgIHJldHVybiBgY29udHJvbHMvZmlsdGVyb3B0aW9uc2A7XG4gIH1cblxuICBzZXRTdGF0ZSAoZGF0YSkge1xuICAgIGxldCBvcHRpb25zID0gdGhpcy5jb25maWcub3B0aW9ucztcbiAgICBpZiAodGhpcy5jb25maWcuc2hvd01vcmUgJiYgIXRoaXMuYWxsU2hvd24pIHtcbiAgICAgIG9wdGlvbnMgPSB0aGlzLmNvbmZpZy5vcHRpb25zLnNsaWNlKDAsIHRoaXMuY29uZmlnLnNob3dNb3JlTGltaXQpO1xuICAgIH1cbiAgICBjb25zdCBzZWxlY3RlZENvdW50ID0gdGhpcy5jb25maWcuZ2V0U2VsZWN0ZWRDb3VudCgpO1xuICAgIHN1cGVyLnNldFN0YXRlKE9iamVjdC5hc3NpZ24oe30sIGRhdGEsIHtcbiAgICAgIG5hbWU6IHRoaXMubmFtZS50b0xvd2VyQ2FzZSgpLFxuICAgICAgLi4udGhpcy5jb25maWcsXG4gICAgICBzaG93UmVzZXQ6IHRoaXMuY29uZmlnLnNob3dSZXNldCAmJiBzZWxlY3RlZENvdW50ID4gMCxcbiAgICAgIGV4cGFuZGVkOiB0aGlzLmV4cGFuZGVkLFxuICAgICAgYWxsU2hvd246IHRoaXMuYWxsU2hvd24sXG4gICAgICBzZWxlY3RlZENvdW50LFxuICAgICAgaXNTaW5nbGVPcHRpb246IHRoaXMuY29uZmlnLmNvbnRyb2wgPT09ICdzaW5nbGVvcHRpb24nLFxuICAgICAgb3B0aW9uc1xuICAgIH0pKTtcbiAgfVxuXG4gIG9uTW91bnQgKCkge1xuICAgIERPTS5kZWxlZ2F0ZShcbiAgICAgIERPTS5xdWVyeSh0aGlzLl9jb250YWluZXIsIGAueXh0LUZpbHRlck9wdGlvbnMtb3B0aW9uc2ApLFxuICAgICAgdGhpcy5jb25maWcub3B0aW9uU2VsZWN0b3IsXG4gICAgICAnY2xpY2snLFxuICAgICAgZXZlbnQgPT4ge1xuICAgICAgICB0aGlzLl91cGRhdGVPcHRpb24ocGFyc2VJbnQoZXZlbnQudGFyZ2V0LmRhdGFzZXQuaW5kZXgpLCBldmVudC50YXJnZXQuY2hlY2tlZCk7XG4gICAgICB9KTtcblxuICAgIGNvbnN0IHNlbGVjdGVkQ291bnQgPSB0aGlzLmNvbmZpZy5nZXRTZWxlY3RlZENvdW50KCk7XG5cbiAgICAvLyByZXNldCBidXR0b25cbiAgICBpZiAodGhpcy5jb25maWcuc2hvd1Jlc2V0ICYmIHNlbGVjdGVkQ291bnQgPiAwKSB7XG4gICAgICBET00ub24oXG4gICAgICAgIERPTS5xdWVyeSh0aGlzLl9jb250YWluZXIsICcueXh0LUZpbHRlck9wdGlvbnMtcmVzZXQnKSxcbiAgICAgICAgJ2NsaWNrJyxcbiAgICAgICAgdGhpcy5jbGVhck9wdGlvbnMuYmluZCh0aGlzKSk7XG4gICAgfVxuXG4gICAgLy8gc2hvdyBtb3JlL2xlc3MgYnV0dG9uXG4gICAgaWYgKHRoaXMuY29uZmlnLnNob3dNb3JlKSB7XG4gICAgICBET00ub24oXG4gICAgICAgIERPTS5xdWVyeSh0aGlzLl9jb250YWluZXIsICcueXh0LUZpbHRlck9wdGlvbnMtc2hvd1RvZ2dsZScpLFxuICAgICAgICAnY2xpY2snLFxuICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgdGhpcy5hbGxTaG93biA9ICF0aGlzLmFsbFNob3duO1xuICAgICAgICAgIHRoaXMuc2V0U3RhdGUoKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gZXhwYW5kIGJ1dHRvblxuICAgIGlmICh0aGlzLmNvbmZpZy5zaG93RXhwYW5kKSB7XG4gICAgICBjb25zdCBsZWdlbmQgPSBET00ucXVlcnkodGhpcy5fY29udGFpbmVyLCAnLnl4dC1GaWx0ZXJPcHRpb25zLWNsaWNrYWJsZUxlZ2VuZCcpO1xuICAgICAgRE9NLm9uKFxuICAgICAgICBsZWdlbmQsXG4gICAgICAgICdtb3VzZWRvd24nLFxuICAgICAgICBjbGljayA9PiB7XG4gICAgICAgICAgaWYgKGNsaWNrLmJ1dHRvbiA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy5leHBhbmRlZCA9ICF0aGlzLmV4cGFuZGVkO1xuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgIERPTS5vbihcbiAgICAgICAgbGVnZW5kLFxuICAgICAgICAna2V5ZG93bicsXG4gICAgICAgIGtleSA9PiB7XG4gICAgICAgICAgaWYgKGtleS5rZXkgPT09ICcgJyB8fCBrZXkua2V5ID09PSAnRW50ZXInKSB7XG4gICAgICAgICAgICBrZXkucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIHRoaXMuZXhwYW5kZWQgPSAhdGhpcy5leHBhbmRlZDtcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGNsZWFyT3B0aW9ucyAoKSB7XG4gICAgdGhpcy5jb25maWcub3B0aW9ucyA9IHRoaXMuY29uZmlnLm9wdGlvbnMubWFwKG8gPT4gT2JqZWN0LmFzc2lnbih7fSwgbywgeyBzZWxlY3RlZDogZmFsc2UgfSkpO1xuICAgIHRoaXMudXBkYXRlTGlzdGVuZXJzKCk7XG4gICAgdGhpcy5zZXRTdGF0ZSgpO1xuICB9XG5cbiAgdXBkYXRlTGlzdGVuZXJzICgpIHtcbiAgICBjb25zdCBmaWx0ZXIgPSB0aGlzLl9idWlsZEZpbHRlcigpO1xuICAgIGlmICh0aGlzLmNvbmZpZy5zdG9yZU9uQ2hhbmdlKSB7XG4gICAgICB0aGlzLmNvcmUuc2V0RmlsdGVyKHRoaXMubmFtZSwgZmlsdGVyKTtcbiAgICB9XG5cbiAgICB0aGlzLmNvbmZpZy5vbkNoYW5nZShmaWx0ZXIpO1xuICB9XG5cbiAgX3VwZGF0ZU9wdGlvbiAoaW5kZXgsIHNlbGVjdGVkKSB7XG4gICAgaWYgKHRoaXMuY29uZmlnLmNvbnRyb2wgPT09ICdzaW5nbGVvcHRpb24nKSB7XG4gICAgICB0aGlzLmNvbmZpZy5vcHRpb25zID0gdGhpcy5jb25maWcub3B0aW9ucy5tYXAobyA9PiBPYmplY3QuYXNzaWduKHt9LCBvLCB7IHNlbGVjdGVkOiBmYWxzZSB9KSk7XG4gICAgfVxuXG4gICAgdGhpcy5jb25maWcub3B0aW9uc1tpbmRleF0gPSBPYmplY3QuYXNzaWduKHt9LCB0aGlzLmNvbmZpZy5vcHRpb25zW2luZGV4XSwgeyBzZWxlY3RlZCB9KTtcbiAgICB0aGlzLnVwZGF0ZUxpc3RlbmVycygpO1xuICAgIHRoaXMuc2V0U3RhdGUoKTtcbiAgfVxuXG4gIGdldEZpbHRlciAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2J1aWxkRmlsdGVyKCk7XG4gIH1cblxuICAvKipcbiAgICogQ2xlYXIgYWxsIG9wdGlvbnNcbiAgICovXG4gIGNsZWFyICgpIHtcbiAgICBjb25zdCBlbGVtZW50cyA9IERPTS5xdWVyeUFsbCh0aGlzLl9jb250YWluZXIsIHRoaXMuY29uZmlnLm9wdGlvblNlbGVjdG9yKTtcbiAgICBlbGVtZW50cy5mb3JFYWNoKGUgPT4gZS5zZXRBdHRyaWJ1dGUoJ2NoZWNrZWQnLCAnZmFsc2UnKSk7XG4gICAgdGhpcy5fYXBwbHlGaWx0ZXIoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBCdWlsZCBhbmQgcmV0dXJuIHRoZSBGaWx0ZXIgdGhhdCByZXByZXNlbnRzIHRoZSBjdXJyZW50IHN0YXRlXG4gICAqIEByZXR1cm5zIHtGaWx0ZXJ9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfYnVpbGRGaWx0ZXIgKCkge1xuICAgIGNvbnN0IGZpbHRlcnMgPSB0aGlzLmNvbmZpZy5vcHRpb25zXG4gICAgICAuZmlsdGVyKG8gPT4gby5zZWxlY3RlZClcbiAgICAgIC5tYXAobyA9PiBvLmZpbHRlclxuICAgICAgICA/IG8uZmlsdGVyXG4gICAgICAgIDogRmlsdGVyLmVxdWFsKG8uZmllbGQsIG8udmFsdWUpKTtcblxuICAgIHRoaXMuY29yZS5wZXJzaXN0ZW50U3RvcmFnZS5zZXQodGhpcy5uYW1lLCB0aGlzLmNvbmZpZy5vcHRpb25zLmZpbHRlcihvID0+IG8uc2VsZWN0ZWQpLm1hcChvID0+IG8ubGFiZWwpKTtcbiAgICByZXR1cm4gZmlsdGVycy5sZW5ndGggPiAwXG4gICAgICA/IEZpbHRlci5ncm91cCguLi5maWx0ZXJzKVxuICAgICAgOiB7fTtcbiAgfVxufVxuIiwiLyoqIEBtb2R1bGUgUmFuZ2VGaWx0ZXJDb21wb25lbnQgKi9cblxuaW1wb3J0IENvbXBvbmVudCBmcm9tICcuLi9jb21wb25lbnQnO1xuaW1wb3J0IEZpbHRlciBmcm9tICcuLi8uLi8uLi9jb3JlL21vZGVscy9maWx0ZXInO1xuaW1wb3J0IERPTSBmcm9tICcuLi8uLi9kb20vZG9tJztcblxuY29uc3QgREVGQVVMVF9DT05GSUcgPSB7XG4gIG1pblBsYWNlaG9sZGVyVGV4dDogJ01pbicsXG4gIG1heFBsYWNlaG9sZGVyVGV4dDogJ01heCdcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJhbmdlRmlsdGVyQ29tcG9uZW50IGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IgKGNvbmZpZyA9IHt9LCBzeXN0ZW1Db25maWcgPSB7fSkge1xuICAgIHN1cGVyKHsgLi4uREVGQVVMVF9DT05GSUcsIC4uLmNvbmZpZyB9LCBzeXN0ZW1Db25maWcpO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGZpZWxkIHRvIGZpbHRlciBvblxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLl9maWVsZCA9IGNvbmZpZy5maWVsZDtcblxuICAgIC8qKlxuICAgICAqIFRoZSBjYWxsYmFjayBmdW5jdGlvbiB0byBjYWxsIHdoZW4gdGhlIGZpbHRlciB2YWx1ZSBjaGFuZ2VzXG4gICAgICogQHR5cGUge2Z1bmN0aW9ufVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5fb25DaGFuZ2UgPSBjb25maWcub25DaGFuZ2UgfHwgZnVuY3Rpb24gKCkge307XG5cbiAgICAvKipcbiAgICAgKiBJZiB0cnVlLCBzdG9yZXMgdGhlIGZpbHRlciB0byBzdG9yYWdlIG9uIGVhY2ggY2hhbmdlXG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLl9zdG9yZU9uQ2hhbmdlID0gY29uZmlnLnN0b3JlT25DaGFuZ2UgPT09IHVuZGVmaW5lZCA/IHRydWUgOiBjb25maWcuc3RvcmVPbkNoYW5nZTtcblxuICAgIGxldCBtaW5WYWwgPSB0aGlzLmNvcmUuZ2xvYmFsU3RvcmFnZS5nZXRTdGF0ZShgJHt0aGlzLm5hbWV9Lm1pbmApO1xuICAgIGlmICh0eXBlb2YgbWluVmFsID09PSAnc3RyaW5nJykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgbWluVmFsID0gTnVtYmVyLnBhcnNlSW50KG1pblZhbCk7XG4gICAgICB9IGNhdGNoIChlKSB7fVxuICAgIH1cbiAgICBsZXQgbWF4VmFsID0gdGhpcy5jb3JlLmdsb2JhbFN0b3JhZ2UuZ2V0U3RhdGUoYCR7dGhpcy5uYW1lfS5tYXhgKTtcbiAgICBpZiAodHlwZW9mIG1pblZhbCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIG1heFZhbCA9IE51bWJlci5wYXJzZUludChtYXhWYWwpO1xuICAgICAgfSBjYXRjaCAoZSkge31cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgY3VycmVudCByYW5nZSByZXByZXNlbnRlZFxuICAgICAqIEB0eXBlIHtvYmplY3R9XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLl9yYW5nZSA9IHtcbiAgICAgIG1pbjogbWluVmFsIHx8IGNvbmZpZy5pbml0aWFsTWluIHx8IDAsXG4gICAgICBtYXg6IG1heFZhbCB8fCBjb25maWcuaW5pdGlhbE1heCB8fCAxMFxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBUaGUgdGl0bGUgdG8gZGlzcGxheSBmb3IgdGhlIHJhbmdlIGNvbnRyb2xcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5fdGl0bGUgPSBjb25maWcudGl0bGU7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgb3B0aW9uYWwgbGFiZWwgdG8gZGlzcGxheSBmb3IgdGhlIG1pbiBpbnB1dFxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLl9taW5MYWJlbCA9IGNvbmZpZy5taW5MYWJlbCB8fCBudWxsO1xuXG4gICAgLyoqXG4gICAgICogVGhlIG9wdGlvbmFsIGxhYmVsIHRvIGRpc3BsYXkgZm9yIHRoZSBtYXggaW5wdXRcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5fbWF4TGFiZWwgPSBjb25maWcubWF4TGFiZWwgfHwgbnVsbDtcblxuICAgIC8qKlxuICAgICAqIFRoZSB0ZW1wbGF0ZSB0byByZW5kZXJcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5fdGVtcGxhdGVOYW1lID0gYGNvbnRyb2xzL3JhbmdlYDtcbiAgfVxuXG4gIHN0YXRpYyBnZXQgdHlwZSAoKSB7XG4gICAgcmV0dXJuICdSYW5nZUZpbHRlcic7XG4gIH1cblxuICBzZXRTdGF0ZSAoZGF0YSkge1xuICAgIHN1cGVyLnNldFN0YXRlKE9iamVjdC5hc3NpZ24oe30sIGRhdGEsIHtcbiAgICAgIG5hbWU6IHRoaXMubmFtZSxcbiAgICAgIHRpdGxlOiB0aGlzLl90aXRsZSxcbiAgICAgIG1pbkxhYmVsOiB0aGlzLl9taW5MYWJlbCxcbiAgICAgIG1heExhYmVsOiB0aGlzLl9tYXhMYWJlbCxcbiAgICAgIG1pblZhbHVlOiB0aGlzLl9yYW5nZS5taW4sXG4gICAgICBtYXhWYWx1ZTogdGhpcy5fcmFuZ2UubWF4XG4gICAgfSkpO1xuICB9XG5cbiAgb25DcmVhdGUgKCkge1xuICAgIERPTS5kZWxlZ2F0ZSh0aGlzLl9jb250YWluZXIsICcuanMteWV4dC1yYW5nZScsICdjaGFuZ2UnLCAoZXZlbnQpID0+IHtcbiAgICAgIHRoaXMuX3VwZGF0ZVJhbmdlKGV2ZW50LnRhcmdldC5kYXRhc2V0LmtleSwgTnVtYmVyLnBhcnNlSW50KGV2ZW50LnRhcmdldC52YWx1ZSkpO1xuICAgIH0pO1xuICB9XG5cbiAgc2V0TWluICh2YWx1ZSkge1xuICAgIHRoaXMuX3VwZGF0ZVJhbmdlKCdtaW4nLCB2YWx1ZSk7XG4gIH1cblxuICBzZXRNYXggKHZhbHVlKSB7XG4gICAgdGhpcy5fdXBkYXRlUmFuZ2UoJ21heCcsIHZhbHVlKTtcbiAgfVxuXG4gIGdldEZpbHRlciAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2J1aWxkRmlsdGVyKCk7XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlIHRoZSBjdXJyZW50IHJhbmdlIHN0YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIHJhbmdlIGtleSB0byB1cGRhdGVcbiAgICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIFRoZSBuZXcgdmFsdWUgZm9yIHRoZSBrZXlcbiAgICovXG4gIF91cGRhdGVSYW5nZSAoa2V5LCB2YWx1ZSkge1xuICAgIHRoaXMuX3JhbmdlID0gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5fcmFuZ2UsIHsgW2tleV06IHZhbHVlIH0pO1xuICAgIHRoaXMuc2V0U3RhdGUoKTtcblxuICAgIGNvbnN0IGZpbHRlciA9IHRoaXMuX2J1aWxkRmlsdGVyKCk7XG4gICAgaWYgKHRoaXMuX3N0b3JlT25DaGFuZ2UpIHtcbiAgICAgIHRoaXMuY29yZS5zZXRGaWx0ZXIodGhpcy5uYW1lLCBmaWx0ZXIpO1xuICAgIH1cbiAgICB0aGlzLmNvcmUucGVyc2lzdGVudFN0b3JhZ2Uuc2V0KGAke3RoaXMubmFtZX0ubWluYCwgdGhpcy5fcmFuZ2UubWluKTtcbiAgICB0aGlzLmNvcmUucGVyc2lzdGVudFN0b3JhZ2Uuc2V0KGAke3RoaXMubmFtZX0ubWF4YCwgdGhpcy5fcmFuZ2UubWF4KTtcblxuICAgIHRoaXMuX29uQ2hhbmdlKGZpbHRlcik7XG4gIH1cblxuICAvKipcbiAgICogQnVpbGQgdGhlIGZpbHRlciByZXByZXNlbnRhdGlvbiBvZiB0aGUgY3VycmVudCBzdGF0ZVxuICAgKiBAcmV0dXJucyB7RmlsdGVyfVxuICAgKi9cbiAgX2J1aWxkRmlsdGVyICgpIHtcbiAgICByZXR1cm4gRmlsdGVyLmluY2x1c2l2ZVJhbmdlKHRoaXMuX2ZpZWxkLCB0aGlzLl9yYW5nZS5taW4sIHRoaXMuX3JhbmdlLm1heCk7XG4gIH1cbn1cbiIsIi8qKiBAbW9kdWxlIERhdGVGaWx0ZXJDb21wb25lbnQgKi9cblxuaW1wb3J0IENvbXBvbmVudCBmcm9tICcuLi9jb21wb25lbnQnO1xuaW1wb3J0IEZpbHRlciBmcm9tICcuLi8uLi8uLi9jb3JlL21vZGVscy9maWx0ZXInO1xuaW1wb3J0IERPTSBmcm9tICcuLi8uLi9kb20vZG9tJztcblxuLyoqXG4gKiBBIGZpbHRlciBmb3IgYSByYW5nZSBvZiBkYXRlc1xuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBEYXRlUmFuZ2VGaWx0ZXJDb21wb25lbnQgZXh0ZW5kcyBDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvciAoY29uZmlnID0ge30sIHN5c3RlbUNvbmZpZyA9IHt9KSB7XG4gICAgc3VwZXIoY29uZmlnLCBzeXN0ZW1Db25maWcpO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGFwaSBmaWVsZCB0aGlzIGZpbHRlciBjb250cm9sc1xuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLl9maWVsZCA9IGNvbmZpZy5maWVsZDtcblxuICAgIC8qKlxuICAgICAqIFRoZSB0aXRsZSB0byBkaXNwbGF5IGZvciB0aGUgZGF0ZSByYW5nZVxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLl90aXRsZSA9IGNvbmZpZy50aXRsZTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBvcHRpb25hbCBsYWJlbCB0byBzaG93IGZvciB0aGUgbWluIGRhdGUgaW5wdXRcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5fbWluTGFiZWwgPSBjb25maWcubWluTGFiZWwgfHwgbnVsbDtcblxuICAgIC8qKlxuICAgICAqIFRoZSBvcHRpb25hbCBsYWJlbCB0byBzaG93IGZvciB0aGUgbWF4IGRhdGUgaW5wdXRcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5fbWF4TGFiZWwgPSBjb25maWcubWF4TGFiZWwgfHwgbnVsbDtcblxuICAgIC8qKlxuICAgICAqIFRoZSBjYWxsYmFjayB1c2VkIHdoZW4gYSBkYXRlIGlzIGNoYW5nZWRcbiAgICAgKiBAdHlwZSB7ZnVuY3Rpb259XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLl9vbkNoYW5nZSA9IGNvbmZpZy5vbkNoYW5nZSB8fCBmdW5jdGlvbiAoKSB7fTtcblxuICAgIC8qKlxuICAgICAqIElmIHRydWUsIHN0b3JlcyB0aGUgZmlsdGVyIHRvIHN0b3JhZ2Ugb24gZWFjaCBjaGFuZ2VcbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuX3N0b3JlT25DaGFuZ2UgPSBjb25maWcuc3RvcmVPbkNoYW5nZSA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IGNvbmZpZy5zdG9yZU9uQ2hhbmdlO1xuXG4gICAgLyoqXG4gICAgICogSWYgdHJ1ZSwgdGhpcyBmaWx0ZXIgcmVwcmVzZW50cyBhbiBleGNsdXNpdmUgcmFuZ2UsIHJhdGhlciB0aGFuIGFuIGluY2x1c2l2ZSBvbmVcbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuX2lzRXhjbHVzaXZlID0gY29uZmlnLmlzRXhjbHVzaXZlO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHRlbXBsYXRlIGZvciB0aGlzIGNvbXBvbmVudFxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5fdGVtcGxhdGVOYW1lID0gYGNvbnRyb2xzL2RhdGVgO1xuXG4gICAgY29uc3QgdG9kYXkgPSBuZXcgRGF0ZSgpO1xuICAgIGNvbnN0IHRvZGF5U3RyaW5nID0gYCR7dG9kYXkuZ2V0RnVsbFllYXIoKX0tJHtgJHt0b2RheS5nZXRNb250aCgpICsgMX1gLnBhZFN0YXJ0KDIsICcwJyl9LSR7YCR7dG9kYXkuZ2V0RGF0ZSgpfWAucGFkU3RhcnQoMiwgJzAnKX1gO1xuICAgIGNvbnN0IG1pbkRhdGUgPSB0aGlzLmNvcmUuZ2xvYmFsU3RvcmFnZS5nZXRTdGF0ZShgJHt0aGlzLm5hbWV9Lm1pbmApO1xuICAgIGNvbnN0IG1heERhdGUgPSB0aGlzLmNvcmUuZ2xvYmFsU3RvcmFnZS5nZXRTdGF0ZShgJHt0aGlzLm5hbWV9Lm1heGApO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGN1cnJlbnQgZGF0ZSByYW5nZVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5fZGF0ZSA9IHtcbiAgICAgIG1pbjogbWluRGF0ZSB8fCBjb25maWcuaW5pdGlhbE1pbiB8fCB0b2RheVN0cmluZyxcbiAgICAgIG1heDogbWF4RGF0ZSB8fCBjb25maWcuaW5pdGlhbE1heCB8fCB0b2RheVN0cmluZ1xuICAgIH07XG4gIH1cblxuICBzdGF0aWMgZ2V0IHR5cGUgKCkge1xuICAgIHJldHVybiAnRGF0ZVJhbmdlRmlsdGVyJztcbiAgfVxuXG4gIHNldFN0YXRlIChkYXRhKSB7XG4gICAgc3VwZXIuc2V0U3RhdGUoT2JqZWN0LmFzc2lnbih7fSwgZGF0YSwge1xuICAgICAgbmFtZTogdGhpcy5uYW1lLFxuICAgICAgdGl0bGU6IHRoaXMuX3RpdGxlLFxuICAgICAgbWluTGFiZWw6IHRoaXMuX21pbkxhYmVsLFxuICAgICAgbWF4TGFiZWw6IHRoaXMuX21heExhYmVsLFxuICAgICAgZGF0ZU1pbjogdGhpcy5fZGF0ZS5taW4sXG4gICAgICBkYXRlTWF4OiB0aGlzLl9kYXRlLm1heFxuICAgIH0pKTtcbiAgfVxuXG4gIG9uQ3JlYXRlICgpIHtcbiAgICBET00uZGVsZWdhdGUodGhpcy5fY29udGFpbmVyLCAnLmpzLXlleHQtZGF0ZScsICdjaGFuZ2UnLCAoZXZlbnQpID0+IHtcbiAgICAgIHRoaXMuX3VwZGF0ZVJhbmdlKGV2ZW50LnRhcmdldC5kYXRhc2V0LmtleSwgZXZlbnQudGFyZ2V0LnZhbHVlKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgdGhlIG1pbiBkYXRlIHRvIHRoZSBvbmUgcHJvdmlkZWRcbiAgICogQHBhcmFtIHtzdHJpbmd9IGRhdGUgRGF0ZSB0byBzZXQgaW4geXl5eS1tbS1kZCBzdHJpbmcgZm9ybWF0XG4gICAqL1xuICBzZXRNaW4gKGRhdGUpIHtcbiAgICB0aGlzLl91cGRhdGVSYW5nZSgnbWluJywgZGF0ZSk7XG4gIH1cblxuICAvKipcbiAgICogU2V0IHRoZSBtYXggZGF0ZSB0byB0aGUgb25lIHByb3ZpZGVkXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBkYXRlIERhdGUgdG8gc2V0IGluIHl5eXktbW0tZGQgc3RyaW5nIGZvcm1hdFxuICAgKi9cbiAgc2V0TWF4IChkYXRlKSB7XG4gICAgdGhpcy5fdXBkYXRlUmFuZ2UoJ21heCcsIGRhdGUpO1xuICB9XG5cbiAgZ2V0RmlsdGVyICgpIHtcbiAgICByZXR1cm4gdGhpcy5fYnVpbGRGaWx0ZXIoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGVzIHRoZSBjdXJyZW50IHN0YXRlIG9mIHRoZSBkYXRlIHJhbmdlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBmb3IgdGhlIGRhdGUgdmFsdWVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlIFRoZSBzdHJpbmcgZGF0ZSB2YWx1ZVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3VwZGF0ZVJhbmdlIChrZXksIHZhbHVlKSB7XG4gICAgdGhpcy5fZGF0ZSA9IE9iamVjdC5hc3NpZ24oe30sIHRoaXMuX2RhdGUsIHsgW2tleV06IHZhbHVlIH0pO1xuICAgIHRoaXMuc2V0U3RhdGUoKTtcblxuICAgIGNvbnN0IGZpbHRlciA9IHRoaXMuX2J1aWxkRmlsdGVyKCk7XG4gICAgaWYgKHRoaXMuX3N0b3JlT25DaGFuZ2UpIHtcbiAgICAgIHRoaXMuY29yZS5zZXRGaWx0ZXIodGhpcy5uYW1lLCBmaWx0ZXIpO1xuICAgIH1cbiAgICB0aGlzLmNvcmUucGVyc2lzdGVudFN0b3JhZ2Uuc2V0KGAke3RoaXMubmFtZX0ubWluYCwgdGhpcy5fZGF0ZS5taW4pO1xuICAgIHRoaXMuY29yZS5wZXJzaXN0ZW50U3RvcmFnZS5zZXQoYCR7dGhpcy5uYW1lfS5tYXhgLCB0aGlzLl9kYXRlLm1heCk7XG5cbiAgICB0aGlzLl9vbkNoYW5nZShmaWx0ZXIpO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdCBhbiBhcGkgZmlsdGVyIHdpdGggdGhlIGN1cnJlbnQgZGF0ZSBzdGF0ZVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2J1aWxkRmlsdGVyICgpIHtcbiAgICBpZiAodGhpcy5fZGF0ZS5taW4gPT09ICcnIHx8IHRoaXMuX2RhdGUubWF4ID09PSAnJykge1xuICAgICAgcmV0dXJuIHt9O1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5faXNFeGNsdXNpdmVcbiAgICAgID8gRmlsdGVyLmV4Y2x1c2l2ZVJhbmdlKHRoaXMuX2ZpZWxkLCB0aGlzLl9kYXRlLm1pbiwgdGhpcy5fZGF0ZS5tYXgpXG4gICAgICA6IEZpbHRlci5pbmNsdXNpdmVSYW5nZSh0aGlzLl9maWVsZCwgdGhpcy5fZGF0ZS5taW4sIHRoaXMuX2RhdGUubWF4KTtcbiAgfVxufVxuIiwiLyoqIEBtb2R1bGUgRmFjZXRzQ29tcG9uZW50ICovXG5cbmltcG9ydCBDb21wb25lbnQgZnJvbSAnLi4vY29tcG9uZW50JztcbmltcG9ydCBTdG9yYWdlS2V5cyBmcm9tICcuLi8uLi8uLi9jb3JlL3N0b3JhZ2Uvc3RvcmFnZWtleXMnO1xuaW1wb3J0IFJlc3VsdHNDb250ZXh0IGZyb20gJy4uLy4uLy4uL2NvcmUvc3RvcmFnZS9yZXN1bHRzY29udGV4dCc7XG5cbmNsYXNzIEZhY2V0c0NvbmZpZyB7XG4gIGNvbnN0cnVjdG9yIChjb25maWcpIHtcbiAgICAvKipcbiAgICAgKiBUaGUgdGl0bGUgdG8gZGlzcGxheSBhYm92ZSB0aGUgY29udHJvbHNcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMudGl0bGUgPSBjb25maWcudGl0bGUgfHwgJ0ZpbHRlcnMnO1xuXG4gICAgLyoqXG4gICAgICogSWYgdHJ1ZSwgZGlzcGxheSB0aGUgbnVtYmVyIG9mIHJlc3VsdHMgbmV4dCB0byBlYWNoIGZhY2V0XG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICovXG4gICAgdGhpcy5zaG93Q291bnQgPSBjb25maWcuc2hvd0NvdW50ID09PSB1bmRlZmluZWQgPyB0cnVlIDogY29uZmlnLnNob3dDb3VudDtcblxuICAgIC8qKlxuICAgICAqIElmIHRydWUsIHRyaWdnZXIgYSBzZWFyY2ggb24gZWFjaCBjaGFuZ2UgdG8gYSBmaWx0ZXJcbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICB0aGlzLnNlYXJjaE9uQ2hhbmdlID0gY29uZmlnLnNlYXJjaE9uQ2hhbmdlIHx8IGZhbHNlO1xuXG4gICAgLyoqXG4gICAgICogSWYgdHJ1ZSwgc2hvdyBhIGJ1dHRvbiB0byByZXNldCBmb3IgZWFjaCBmYWNldCBncm91cFxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqL1xuICAgIHRoaXMucmVzZXRGYWNldCA9IGNvbmZpZy5yZXNldEZhY2V0IHx8IGZhbHNlO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGxhYmVsIHRvIHNob3cgZm9yIHRoZSByZXNldCBidXR0b25cbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMucmVzZXRGYWNldExhYmVsID0gY29uZmlnLnJlc2V0RmFjZXRMYWJlbCB8fCAncmVzZXQnO1xuXG4gICAgLyoqXG4gICAgICogSWYgdHJ1ZSwgc2hvdyBhIFwicmVzZXQgYWxsXCIgYnV0dG9uIHRvIHJlc2V0IGFsbCBmYWNldHNcbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICB0aGlzLnJlc2V0RmFjZXRzID0gY29uZmlnLnJlc2V0RmFjZXRzID09PSB1bmRlZmluZWQgPyB0cnVlIDogY29uZmlnLnJlc2V0RmFjZXRzO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGxhYmVsIHRvIHNob3cgZm9yIHRoZSBcInJlc2V0IGFsbFwiIGJ1dHRvblxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgdGhpcy5yZXNldEZhY2V0c0xhYmVsID0gY29uZmlnLnJlc2V0RmFjZXRzTGFiZWwgfHwgJ3Jlc2V0IGFsbCc7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgbWF4IG51bWJlciBvZiBmYWNldHMgdG8gc2hvdyBiZWZvcmUgZGlzcGxheWluZyBcInNob3cgbW9yZVwiL1wic2hvdyBsZXNzXCJcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIHRoaXMuc2hvd01vcmVMaW1pdCA9IGNvbmZpZy5zaG93TW9yZUxpbWl0IHx8IDU7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgbGFiZWwgdG8gc2hvdyBmb3IgZGlzcGxheWluZyBtb3JlIGZhY2V0c1xuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgdGhpcy5zaG93TW9yZUxhYmVsID0gY29uZmlnLnNob3dNb3JlTGFiZWwgfHwgJ3Nob3cgbW9yZSc7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgbGFiZWwgdG8gc2hvdyBmb3IgZGlzcGxheWluZyBsZXNzIGZhY2V0c1xuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgdGhpcy5zaG93TGVzc0xhYmVsID0gY29uZmlnLnNob3dMZXNzTGFiZWwgfHwgJ3Nob3cgbGVzcyc7XG5cbiAgICAvKipcbiAgICAgKiBJZiB0cnVlLCBlbmFibGUgaGlkaW5nIGV4Y2VzcyBmYWNldHMgaW4gZWFjaCBncm91cCB3aXRoIGEgXCJzaG93IG1vcmVcIi9cInNob3cgbGVzc1wiIGJ1dHRvblxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqL1xuICAgIHRoaXMuc2hvd01vcmUgPSBjb25maWcuc2hvd01vcmUgPT09IHVuZGVmaW5lZCA/IHRydWUgOiBjb25maWcuc2hvd01vcmU7XG5cbiAgICAvKipcbiAgICAgKiBJZiB0cnVlLCBhbGxvdyBleHBhbmRpbmcgYW5kIGNvbGxhcHNpbmcgZWFjaCBncm91cCBvZiBmYWNldHNcbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICB0aGlzLmV4cGFuZCA9IGNvbmZpZy5leHBhbmQgPT09IHVuZGVmaW5lZCA/IHRydWUgOiBjb25maWcuZXhwYW5kO1xuXG4gICAgLyoqXG4gICAgICogSWYgdHJ1ZSwgZGlzcGxheSB0aGUgbnVtYmVyIG9mIGN1cnJlbnRseSBhcHBsaWVkIGZpbHRlcnMgd2hlbiBjb2xsYXBzZWRcbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICB0aGlzLnNob3dOdW1iZXJBcHBsaWVkID0gY29uZmlnLnNob3dOdW1iZXJBcHBsaWVkID09PSB1bmRlZmluZWQgPyB0cnVlIDogY29uZmlnLnNob3dOdW1iZXJBcHBsaWVkO1xuXG4gICAgLyoqXG4gICAgICogVGV4dCB0byBkaXNwbGF5IG9uIHRoZSBhcHBseSBidXR0b25cbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMuYXBwbHlMYWJlbCA9IGNvbmZpZy5hcHBseUxhYmVsIHx8ICdhcHBseSc7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgY29udHJvbHMgdG8gdXNlIGZvciBlYWNoIGZpZWxkLiBFYWNoIHR5cGUgb2YgZmlsdGVyIGhhcyBhIGRlZmF1bHRcbiAgICAgKiAkZXEgOiBtdWx0aW9wdGlvbiAoY2hlY2tib3gpXG4gICAgICogQHR5cGUge09iamVjdH1cbiAgICAgKi9cbiAgICB0aGlzLmZpZWxkQ29udHJvbHMgPSBjb25maWcuZmllbGRDb250cm9scyB8fCB7fTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBzZWxlY3RvciBvZiB0aGUgYXBwbHkgYnV0dG9uXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuYXBwbHlCdXR0b25TZWxlY3RvciA9IGNvbmZpZy5hcHBseUJ1dHRvblNlbGVjdG9yIHx8IG51bGw7XG5cbiAgICB0aGlzLnZhbGlkYXRlKCk7XG4gIH1cblxuICB2YWxpZGF0ZSAoKSB7XG4gIH1cbn1cblxuLyoqXG4gKiBEaXNwbGF5cyBhIHNldCBvZiBkeW5hbWljIGZpbHRlcnMgcmV0dXJuZWQgZnJvbSB0aGUgYmFja2VuZFxuICogQGV4dGVuZHMgQ29tcG9uZW50XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEZhY2V0c0NvbXBvbmVudCBleHRlbmRzIENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yIChjb25maWcgPSB7fSwgc3lzdGVtQ29uZmlnID0ge30pIHtcbiAgICBzdXBlcihjb25maWcsIHN5c3RlbUNvbmZpZyk7XG5cbiAgICB0aGlzLmNvbmZpZyA9IG5ldyBGYWNldHNDb25maWcoY29uZmlnKTtcblxuICAgIC8qKlxuICAgICAqIFRoZSB2ZXJ0aWNhbCBrZXkgZm9yIHRoZSBzZWFyY2hcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5fdmVydGljYWxLZXkgPSBjb25maWcudmVydGljYWxLZXk7XG5cbiAgICAvLyBjb25maWcudmVydGljYWxLZXkgfHwgbnVsbDtcblxuICAgIC8qKlxuICAgICAqIFRoZSBzZWxlY3RvciBvZiB0aGUgYXBwbHkgYnV0dG9uXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuX2FwcGx5QnV0dG9uU2VsZWN0b3IgPSBjb25maWcuYXBwbHlCdXR0b25TZWxlY3RvciB8fCBudWxsO1xuXG4gICAgLyoqXG4gICAgICogQW4gaW50ZXJuYWwgcmVmZXJlbmNlIGZvciB0aGUgZGF0YSBzdG9yYWdlIHRvIGxpc3RlbiBmb3IgdXBkYXRlcyBmcm9tIHRoZSBzZXJ2ZXJcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMubW9kdWxlSWQgPSBTdG9yYWdlS2V5cy5EWU5BTUlDX0ZJTFRFUlM7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgZmlsdGVyIGJveCB0aGF0IGRpc3BsYXlzIHRoZSBkeW5hbWljIGZpbHRlcnNcbiAgICAgKiBAdHlwZSB7RmlsdGVyQm94Q29tcG9uZW50fVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5fZmlsdGVyYm94ID0gbnVsbDtcbiAgfVxuXG4gIHN0YXRpYyBnZXQgdHlwZSAoKSB7XG4gICAgcmV0dXJuICdGYWNldHMnO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSB0ZW1wbGF0ZSB0byByZW5kZXJcbiAgICogQHJldHVybnMge3N0cmluZ31cbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBzdGF0aWMgZGVmYXVsdFRlbXBsYXRlTmFtZSAoKSB7XG4gICAgcmV0dXJuICdmaWx0ZXJzL2ZhY2V0cyc7XG4gIH1cblxuICBzZXRTdGF0ZSAoZGF0YSkge1xuICAgIHJldHVybiBzdXBlci5zZXRTdGF0ZSh7XG4gICAgICAuLi5kYXRhLFxuICAgICAgaXNOb1Jlc3VsdHM6IGRhdGEucmVzdWx0c0NvbnRleHQgPT09IFJlc3VsdHNDb250ZXh0Lk5PX1JFU1VMVFNcbiAgICB9KTtcbiAgfVxuXG4gIHJlbW92ZSAoKSB7XG4gICAgaWYgKHRoaXMuX2ZpbHRlcmJveCkge1xuICAgICAgdGhpcy5fZmlsdGVyYm94LnJlbW92ZSgpO1xuICAgIH1cbiAgICBzdXBlci5yZW1vdmUoKTtcbiAgfVxuXG4gIG9uTW91bnQgKCkge1xuICAgIHRoaXMuY29yZS5lbmFibGVEeW5hbWljRmlsdGVycygpO1xuXG4gICAgaWYgKHRoaXMuX2ZpbHRlcmJveCkge1xuICAgICAgdGhpcy5fZmlsdGVyYm94LnJlbW92ZSgpO1xuICAgIH1cblxuICAgIGxldCB7IGZpbHRlcnMsIHJlc3VsdHNDb250ZXh0IH0gPSB0aGlzLl9zdGF0ZS5nZXQoKTtcblxuICAgIGlmICghZmlsdGVycyB8fCByZXN1bHRzQ29udGV4dCA9PT0gUmVzdWx0c0NvbnRleHQuTk9fUkVTVUxUUykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGZpbHRlcnMgPSBmaWx0ZXJzLm1hcChmID0+IHtcbiAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBmLCB7XG4gICAgICAgIHR5cGU6ICdGaWx0ZXJPcHRpb25zJyxcbiAgICAgICAgY29udHJvbDogdGhpcy5jb25maWcuZmllbGRDb250cm9sc1tmLmZpZWxkSWRdIHx8ICdtdWx0aW9wdGlvbidcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgdGhpcy5fZmlsdGVyYm94ID0gdGhpcy5jb21wb25lbnRNYW5hZ2VyLmNyZWF0ZShcbiAgICAgICdGaWx0ZXJCb3gnLFxuICAgICAgT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5jb25maWcsIHtcbiAgICAgICAgcGFyZW50Q29udGFpbmVyOiB0aGlzLl9jb250YWluZXIsXG4gICAgICAgIG5hbWU6IGAke3RoaXMubmFtZX0uZmlsdGVyYm94YCxcbiAgICAgICAgY29udGFpbmVyOiAnLmpzLXl4dC1GYWNldHMnLFxuICAgICAgICB2ZXJ0aWNhbEtleTogdGhpcy5fdmVydGljYWxLZXksXG4gICAgICAgIHJlc2V0RmlsdGVyOiB0aGlzLmNvbmZpZy5yZXNldEZhY2V0LFxuICAgICAgICByZXNldEZpbHRlcnM6IHRoaXMuY29uZmlnLnJlc2V0RmFjZXRzLFxuICAgICAgICByZXNldEZpbHRlckxhYmVsOiB0aGlzLmNvbmZpZy5yZXNldEZhY2V0TGFiZWwsXG4gICAgICAgIHJlc2V0RmlsdGVyc0xhYmVsOiB0aGlzLmNvbmZpZy5yZXNldEZhY2V0c0xhYmVsLFxuICAgICAgICBpc0R5bmFtaWM6IHRydWUsXG4gICAgICAgIGZpbHRlcnNcbiAgICAgIH0pXG4gICAgKTtcblxuICAgIHRoaXMuX2ZpbHRlcmJveC5tb3VudCgpO1xuICB9XG59XG4iLCIvKiogQG1vZHVsZSBHZW9Mb2NhdGlvbkNvbXBvbmVudCAqL1xuXG5pbXBvcnQgQ29tcG9uZW50IGZyb20gJy4uL2NvbXBvbmVudCc7XG5pbXBvcnQgRE9NIGZyb20gJy4uLy4uL2RvbS9kb20nO1xuaW1wb3J0IEZpbHRlciBmcm9tICcuLi8uLi8uLi9jb3JlL21vZGVscy9maWx0ZXInO1xuaW1wb3J0IFN0b3JhZ2VLZXlzIGZyb20gJy4uLy4uLy4uL2NvcmUvc3RvcmFnZS9zdG9yYWdla2V5cyc7XG5pbXBvcnQgYnVpbGRTZWFyY2hQYXJhbWV0ZXJzIGZyb20gJy4uLy4uL3Rvb2xzL3NlYXJjaHBhcmFtc3BhcnNlcic7XG5cbmNvbnN0IE1FVEVSU19QRVJfTUlMRSA9IDE2MDkuMzQ0O1xuXG5jb25zdCBERUZBVUxUX0NPTkZJRyA9IHtcbiAgLyoqXG4gICAqIFRoZSByYWRpdXMsIGluIG1pbGVzLCBhcm91bmQgdGhlIHVzZXIncyBsb2NhdGlvbiB0byBmaW5kIHJlc3VsdHMuXG4gICAqIElmIGxvY2F0aW9uIGFjY3VyYWN5IGlzIGxvdywgYSBsYXJnZXIgcmFkaXVzIG1heSBiZSB1c2VkIGF1dG9tYXRpY2FsbHlcbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG4gIHJhZGl1czogNTAsXG5cbiAgLyoqXG4gICAqIFRoZSB2ZXJ0aWNhbCBrZXkgdG8gdXNlXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuICB2ZXJ0aWNhbEtleTogbnVsbCxcblxuICAvKipcbiAgICogSWYgdHJ1ZSwgc3VibWl0cyBhIHNlYXJjaCB3aGVuIHRoZSB2YWx1ZSBpcyBjaGFuZ2VkXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKi9cbiAgc2VhcmNoT25DaGFuZ2U6IGZhbHNlLFxuXG4gIC8qKlxuICAgKiBUaGUgdGl0bGUgdG8gZGlzcGxheVxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKi9cbiAgdGl0bGU6ICdMb2NhdGlvbicsXG5cbiAgLyoqXG4gICAqIFRoZSBsYWJlbCB0byBkaXNwbGF5XG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuICBsYWJlbDogJ0xvY2F0aW9uJyxcblxuICAvKipcbiAgICogVGhlIGljb24gdXJsIHRvIHNob3cgaW4gdGhlIGdlbyBidXR0b25cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gIGdlb0J1dHRvbkljb246ICcnLFxuXG4gIC8qKlxuICAgKiBUaGUgYWx0IHRleHQgdG8gaW5jbHVkZSB3aXRoIHRoZSBnZW8gYnV0dG9uIGljb25cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gIGdlb0J1dHRvbkljb25BbHRUZXh0OiAnVXNlIE15IExvY2F0aW9uJyxcblxuICAvKipcbiAgICogVGhlIHRleHQgdG8gc2hvdyBpbiB0aGUgZ2VvIGJ1dHRvblxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKi9cbiAgZ2VvQnV0dG9uVGV4dDogJ1VzZSBNeSBMb2NhdGlvbicsXG5cbiAgLyoqXG4gICAqIFRoZSB0ZXh0IHRvIHNob3cgd2hlbiBnZW9sb2NhdGlvbiBpcyBlbmFibGVkXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuICBlbmFibGVkVGV4dDogJ0N1cnJlbnQgTG9jYXRpb24nLFxuXG4gIC8qKlxuICAgKiBUaGUgdGV4dCB0byBzaG93IHdoZW4gbG9hZGluZyB0aGUgdXNlcidzIGxvY2F0aW9uXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuICBsb2FkaW5nVGV4dDogJ0ZpbmRpbmcgWW91ciBMb2NhdGlvbi4uLicsXG5cbiAgLyoqXG4gICAqIFRoZSB0ZXh0IHRvIHNob3cgaWYgdGhlIHVzZXIncyBsb2NhdGlvbiBjYW5ub3QgYmUgZm91bmRcbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gIGVycm9yVGV4dDogJ0NvdWxkIE5vdCBGaW5kIFlvdXIgTG9jYXRpb24nLFxuXG4gIC8qKlxuICAgKiBUaGUgQ1NTIHNlbGVjdG9yIG9mIHRoZSB0b2dnbGUgYnV0dG9uXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuICBidXR0b25TZWxlY3RvcjogJy5qcy15eHQtR2VvTG9jYXRpb25GaWx0ZXItYnV0dG9uJyxcblxuICAvKipcbiAgICogVGhlIENTUyBzZWxlY3RvciBvZiB0aGUgcXVlcnkgaW5wdXRcbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gIGlucHV0U2VsZWN0b3I6ICcuanMteXh0LUdlb0xvY2F0aW9uRmlsdGVyLWlucHV0J1xufTtcblxuLyoqXG4gKiBSZW5kZXJzIGEgYnV0dG9uIHRoYXQgd2hlbiBjbGlja2VkIGFkZHMgYSBzdGF0aWMgZmlsdGVyIHJlcHJlc2VudGluZyB0aGUgdXNlcidzIGxvY2F0aW9uXG4gKiBAZXh0ZW5kcyBDb21wb25lbnRcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgR2VvTG9jYXRpb25Db21wb25lbnQgZXh0ZW5kcyBDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvciAoY29uZmlnID0ge30sIHN5c3RlbUNvbmZpZyA9IHt9KSB7XG4gICAgc3VwZXIoeyAuLi5ERUZBVUxUX0NPTkZJRywgLi4uY29uZmlnIH0sIHN5c3RlbUNvbmZpZyk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgcXVlcnkgc3RyaW5nIHRvIHVzZSBmb3IgdGhlIGlucHV0IGJveCwgcHJvdmlkZWQgdG8gdGVtcGxhdGUgZm9yIHJlbmRlcmluZy5cbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMucXVlcnkgPSB0aGlzLmNvcmUuZ2xvYmFsU3RvcmFnZS5nZXRTdGF0ZShgJHtTdG9yYWdlS2V5cy5RVUVSWX0uJHt0aGlzLm5hbWV9YCkgfHwgJyc7XG4gICAgdGhpcy5jb3JlLmdsb2JhbFN0b3JhZ2Uub24oJ3VwZGF0ZScsIGAke1N0b3JhZ2VLZXlzLlFVRVJZfS4ke3RoaXMubmFtZX1gLCBxID0+IHtcbiAgICAgIHRoaXMucXVlcnkgPSBxO1xuICAgICAgdGhpcy5zZXRTdGF0ZSgpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGZpbHRlciB0byB1c2UgZm9yIHRoZSBjdXJyZW50IHF1ZXJ5XG4gICAgICogQHR5cGUge0ZpbHRlcn1cbiAgICAgKi9cbiAgICB0aGlzLmZpbHRlciA9IHRoaXMuY29yZS5nbG9iYWxTdG9yYWdlLmdldFN0YXRlKGAke1N0b3JhZ2VLZXlzLkZJTFRFUn0uJHt0aGlzLm5hbWV9YCkgfHwge307XG4gICAgaWYgKHR5cGVvZiB0aGlzLmZpbHRlciA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHRoaXMuZmlsdGVyID0gSlNPTi5wYXJzZSh0aGlzLmZpbHRlcik7XG4gICAgICB9IGNhdGNoIChlKSB7fVxuICAgIH1cblxuICAgIHRoaXMuY29yZS5nbG9iYWxTdG9yYWdlLm9uKCd1cGRhdGUnLCBgJHtTdG9yYWdlS2V5cy5GSUxURVJ9LiR7dGhpcy5uYW1lfWAsIGYgPT4geyB0aGlzLmZpbHRlciA9IGY7IH0pO1xuXG4gICAgdGhpcy5zZWFyY2hQYXJhbWV0ZXJzID0gYnVpbGRTZWFyY2hQYXJhbWV0ZXJzKGNvbmZpZy5zZWFyY2hQYXJhbWV0ZXJzKTtcblxuICAgIC8qKlxuICAgICAqIE9wdGlvbnMgdG8gcGFzcyB0byB0aGUgZ2VvbG9jYXRpb24gYXBpLlxuICAgICAqIEB0eXBlIHtPYmplY3R9XG4gICAgICovXG4gICAgdGhpcy5fZ2VvbG9jYXRpb25PcHRpb25zID0ge1xuICAgICAgZW5hYmxlSGlnaEFjY3VyYWN5OiBmYWxzZSxcbiAgICAgIHRpbWVvdXQ6IDYwMDAsXG4gICAgICBtYXhpbXVtQWdlOiAzMDAwMDAsXG4gICAgICAuLi5jb25maWcuZ2VvbG9jYXRpb25PcHRpb25zXG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIE9wdGlvbnMgZm9yIHRoZSBnZW9sb2NhdGlvbiB0aW1lb3V0IGFsZXJ0LlxuICAgICAqIEB0eXBlIHtPYmplY3R9XG4gICAgICovXG4gICAgdGhpcy5fZ2VvbG9jYXRpb25UaW1lb3V0QWxlcnQgPSB7XG4gICAgICBlbmFibGVkOiBmYWxzZSxcbiAgICAgIG1lc3NhZ2U6ICdXZSBhcmUgdW5hYmxlIHRvIGRldGVybWluZSB5b3VyIGxvY2F0aW9uJyxcbiAgICAgIC4uLmNvbmZpZy5nZW9sb2NhdGlvblRpbWVvdXRBbGVydFxuICAgIH07XG4gIH1cblxuICBzdGF0aWMgZ2V0IHR5cGUgKCkge1xuICAgIHJldHVybiAnR2VvTG9jYXRpb25GaWx0ZXInO1xuICB9XG5cbiAgc3RhdGljIGRlZmF1bHRUZW1wbGF0ZU5hbWUgKCkge1xuICAgIHJldHVybiAnY29udHJvbHMvZ2VvbG9jYXRpb24nO1xuICB9XG5cbiAgc2V0U3RhdGUgKGRhdGEpIHtcbiAgICBsZXQgcGxhY2Vob2xkZXIgPSAnJztcbiAgICBpZiAodGhpcy5fZW5hYmxlZCkge1xuICAgICAgcGxhY2Vob2xkZXIgPSB0aGlzLl9jb25maWcuZW5hYmxlZFRleHQ7XG4gICAgfVxuICAgIGlmIChkYXRhLmdlb0xvYWRpbmcpIHtcbiAgICAgIHBsYWNlaG9sZGVyID0gdGhpcy5fY29uZmlnLmxvYWRpbmdUZXh0O1xuICAgIH1cbiAgICBpZiAoZGF0YS5nZW9FcnJvcikge1xuICAgICAgcGxhY2Vob2xkZXIgPSB0aGlzLl9jb25maWcuZXJyb3JUZXh0O1xuICAgIH1cbiAgICBzdXBlci5zZXRTdGF0ZSh7XG4gICAgICAuLi5kYXRhLFxuICAgICAgdGl0bGU6IHRoaXMuX2NvbmZpZy50aXRsZSxcbiAgICAgIGdlb0VuYWJsZWQ6IHRoaXMuX2VuYWJsZWQsXG4gICAgICBxdWVyeTogdGhpcy5xdWVyeSxcbiAgICAgIGxhYmVsVGV4dDogdGhpcy5fY29uZmlnLmxhYmVsLFxuICAgICAgZW5hYmxlZFRleHQ6IHRoaXMuX2NvbmZpZy5lbmFibGVkVGV4dCxcbiAgICAgIGxvYWRpbmdUZXh0OiB0aGlzLl9jb25maWcubG9hZGluZ1RleHQsXG4gICAgICBlcnJvclRleHQ6IHRoaXMuX2NvbmZpZy5lcnJvclRleHQsXG4gICAgICBnZW9CdXR0b25JY29uOiB0aGlzLl9jb25maWcuZ2VvQnV0dG9uSWNvbixcbiAgICAgIGdlb1ZhbHVlOiB0aGlzLl9lbmFibGVkIHx8IGRhdGEuZ2VvTG9hZGluZyB8fCBkYXRhLmdlb0Vycm9yID8gJycgOiB0aGlzLnF1ZXJ5LFxuICAgICAgZ2VvUGxhY2Vob2xkZXI6IHBsYWNlaG9sZGVyLFxuICAgICAgZ2VvQnV0dG9uVGV4dDogdGhpcy5fY29uZmlnLmdlb0J1dHRvblRleHRcbiAgICB9KTtcbiAgfVxuXG4gIG9uTW91bnQgKCkge1xuICAgIGlmICh0aGlzLl9hdXRvY29tcGxldGUpIHtcbiAgICAgIHRoaXMuX2F1dG9jb21wbGV0ZS5yZW1vdmUoKTtcbiAgICB9XG5cbiAgICB0aGlzLl9pbml0QXV0b0NvbXBsZXRlKHRoaXMuX2NvbmZpZy5pbnB1dFNlbGVjdG9yKTtcbiAgICBET00ub24odGhpcy5fY29uZmlnLmJ1dHRvblNlbGVjdG9yLCAnY2xpY2snLCAoKSA9PiB0aGlzLl90b2dnbGVHZW9GaWx0ZXIoKSk7XG4gIH1cblxuICAvKipcbiAgICogQSBoZWxwZXIgbWV0aG9kIHRvIHdpcmUgdXAgb3VyIGF1dG8gY29tcGxldGUgb24gYW4gaW5wdXQgc2VsZWN0b3JcbiAgICogQHBhcmFtIHtzdHJpbmd9IGlucHV0U2VsZWN0b3IgQ1NTIHNlbGVjdG9yIHRvIGJpbmQgb3VyIGF1dG8gY29tcGxldGUgY29tcG9uZW50IHRvXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfaW5pdEF1dG9Db21wbGV0ZSAoaW5wdXRTZWxlY3Rvcikge1xuICAgIGlmICh0aGlzLl9hdXRvY29tcGxldGUpIHtcbiAgICAgIHRoaXMuX2F1dG9jb21wbGV0ZS5yZW1vdmUoKTtcbiAgICB9XG5cbiAgICB0aGlzLl9hdXRvY29tcGxldGUgPSB0aGlzLmNvbXBvbmVudE1hbmFnZXIuY3JlYXRlKCdBdXRvQ29tcGxldGUnLCB7XG4gICAgICBwYXJlbnRDb250YWluZXI6IHRoaXMuX2NvbnRhaW5lcixcbiAgICAgIG5hbWU6IGAke3RoaXMubmFtZX0uYXV0b2NvbXBsZXRlYCxcbiAgICAgIGlzRmlsdGVyU2VhcmNoOiB0cnVlLFxuICAgICAgY29udGFpbmVyOiAnLmpzLXl4dC1HZW9Mb2NhdGlvbkZpbHRlci1hdXRvY29tcGxldGUnLFxuICAgICAgb3JpZ2luYWxRdWVyeTogdGhpcy5xdWVyeSxcbiAgICAgIG9yaWdpbmFsRmlsdGVyOiB0aGlzLmZpbHRlcixcbiAgICAgIGlucHV0RWw6IGlucHV0U2VsZWN0b3IsXG4gICAgICB2ZXJ0aWNhbEtleTogdGhpcy5fY29uZmlnLnZlcnRpY2FsS2V5LFxuICAgICAgc2VhcmNoUGFyYW1ldGVyczogdGhpcy5zZWFyY2hQYXJhbWV0ZXJzLFxuICAgICAgb25TdWJtaXQ6IChxdWVyeSwgZmlsdGVyKSA9PiB7XG4gICAgICAgIHRoaXMucXVlcnkgPSBxdWVyeTtcbiAgICAgICAgdGhpcy5maWx0ZXIgPSBGaWx0ZXIuZnJvbVJlc3BvbnNlKGZpbHRlcik7XG4gICAgICAgIHRoaXMuX3NhdmVEYXRhVG9TdG9yYWdlKHF1ZXJ5LCB0aGlzLmZpbHRlcik7XG4gICAgICAgIHRoaXMuX2VuYWJsZWQgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUb2dnbGVzIHRoZSBzdGF0aWMgZmlsdGVyIHJlcHJlc2VudGluZyB0aGUgdXNlcidzIGxvY2F0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfdG9nZ2xlR2VvRmlsdGVyICgpIHtcbiAgICBpZiAoIW5hdmlnYXRvci5nZW9sb2NhdGlvbikge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7IGdlb0Vycm9yOiB0cnVlIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5fZW5hYmxlZCkge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7IGdlb0xvYWRpbmc6IHRydWUgfSk7XG4gICAgICBuYXZpZ2F0b3IuZ2VvbG9jYXRpb24uZ2V0Q3VycmVudFBvc2l0aW9uKFxuICAgICAgICBwb3NpdGlvbiA9PiB7XG4gICAgICAgICAgY29uc3QgZmlsdGVyID0gdGhpcy5fYnVpbGRGaWx0ZXIocG9zaXRpb24pO1xuICAgICAgICAgIHRoaXMuX3NhdmVEYXRhVG9TdG9yYWdlKCcnLCBmaWx0ZXIsIHBvc2l0aW9uKTtcbiAgICAgICAgICB0aGlzLl9lbmFibGVkID0gdHJ1ZTtcbiAgICAgICAgICB0aGlzLnNldFN0YXRlKHt9KTtcbiAgICAgICAgICB0aGlzLmNvcmUucGVyc2lzdGVudFN0b3JhZ2UuZGVsZXRlKGAke1N0b3JhZ2VLZXlzLlFVRVJZfS4ke3RoaXMubmFtZX1gKTtcbiAgICAgICAgICB0aGlzLmNvcmUucGVyc2lzdGVudFN0b3JhZ2UuZGVsZXRlKGAke1N0b3JhZ2VLZXlzLkZJTFRFUn0uJHt0aGlzLm5hbWV9YCk7XG4gICAgICAgIH0sXG4gICAgICAgICgpID0+IHRoaXMuX2hhbmRsZUdlb2xvY2F0aW9uRXJyb3IoKSxcbiAgICAgICAgdGhpcy5fZ2VvbG9jYXRpb25PcHRpb25zXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIF9oYW5kbGVHZW9sb2NhdGlvbkVycm9yICgpIHtcbiAgICB0aGlzLnNldFN0YXRlKHsgZ2VvRXJyb3I6IHRydWUgfSk7XG4gICAgY29uc3QgeyBlbmFibGVkLCBtZXNzYWdlIH0gPSB0aGlzLl9nZW9sb2NhdGlvblRpbWVvdXRBbGVydDtcbiAgICBpZiAoZW5hYmxlZCkge1xuICAgICAgd2luZG93LmFsZXJ0KG1lc3NhZ2UpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBTYXZlcyB0aGUgcHJvdmlkZWQgZmlsdGVyIHVuZGVyIHRoaXMgY29tcG9uZW50J3MgbmFtZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gcXVlcnkgVGhlIHF1ZXJ5IHRvIHNhdmVcbiAgICogQHBhcmFtIHtGaWx0ZXJ9IGZpbHRlciBUaGUgZmlsdGVyIHRvIHNhdmVcbiAgICogQHBhcmFtIHtPYmplY3R9IHBvc2l0aW9uIFRoZSBwb3NpdGlvbiB0byBzYXZlXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfc2F2ZURhdGFUb1N0b3JhZ2UgKHF1ZXJ5LCBmaWx0ZXIsIHBvc2l0aW9uKSB7XG4gICAgdGhpcy5jb3JlLnBlcnNpc3RlbnRTdG9yYWdlLnNldChgJHtTdG9yYWdlS2V5cy5RVUVSWX0uJHt0aGlzLm5hbWV9YCwgcXVlcnkpO1xuICAgIHRoaXMuY29yZS5wZXJzaXN0ZW50U3RvcmFnZS5zZXQoYCR7U3RvcmFnZUtleXMuRklMVEVSfS4ke3RoaXMubmFtZX1gLCBmaWx0ZXIpO1xuICAgIHRoaXMuY29yZS5zZXRGaWx0ZXIodGhpcy5uYW1lLCBmaWx0ZXIpO1xuXG4gICAgaWYgKHBvc2l0aW9uKSB7XG4gICAgICB0aGlzLmNvcmUuZ2xvYmFsU3RvcmFnZS5zZXQoU3RvcmFnZUtleXMuR0VPTE9DQVRJT04sIHtcbiAgICAgICAgbGF0OiBwb3NpdGlvbi5jb29yZHMubGF0aXR1ZGUsXG4gICAgICAgIGxuZzogcG9zaXRpb24uY29vcmRzLmxvbmdpdHVkZSxcbiAgICAgICAgcmFkaXVzOiBwb3NpdGlvbi5jb29yZHMuYWNjdXJhY3lcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9jb25maWcuc2VhcmNoT25DaGFuZ2UpIHtcbiAgICAgIGNvbnN0IGZpbHRlcnMgPSB0aGlzLmNvcmUuZ2xvYmFsU3RvcmFnZS5nZXRBbGwoU3RvcmFnZUtleXMuRklMVEVSKTtcbiAgICAgIGxldCB0b3RhbEZpbHRlciA9IGZpbHRlcnNbMF07XG4gICAgICBpZiAoZmlsdGVycy5sZW5ndGggPiAxKSB7XG4gICAgICAgIHRvdGFsRmlsdGVyID0gRmlsdGVyLmFuZCguLi5maWx0ZXJzKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHNlYXJjaFF1ZXJ5ID0gdGhpcy5jb3JlLmdsb2JhbFN0b3JhZ2UuZ2V0U3RhdGUoU3RvcmFnZUtleXMuUVVFUlkpIHx8ICcnO1xuICAgICAgY29uc3QgZmFjZXRGaWx0ZXIgPSB0aGlzLmNvcmUuZ2xvYmFsU3RvcmFnZS5nZXRBbGwoU3RvcmFnZUtleXMuRkFDRVRfRklMVEVSKVswXTtcblxuICAgICAgdGhpcy5jb3JlLnBlcnNpc3RlbnRTdG9yYWdlLmRlbGV0ZShTdG9yYWdlS2V5cy5TRUFSQ0hfT0ZGU0VUKTtcbiAgICAgIHRoaXMuY29yZS5nbG9iYWxTdG9yYWdlLmRlbGV0ZShTdG9yYWdlS2V5cy5TRUFSQ0hfT0ZGU0VUKTtcbiAgICAgIHRoaXMuY29yZS52ZXJ0aWNhbFNlYXJjaCh0aGlzLl9jb25maWcudmVydGljYWxLZXksIHtcbiAgICAgICAgaW5wdXQ6IHNlYXJjaFF1ZXJ5LFxuICAgICAgICBmaWx0ZXI6IEpTT04uc3RyaW5naWZ5KHRvdGFsRmlsdGVyKSxcbiAgICAgICAgZmFjZXRGaWx0ZXI6IEpTT04uc3RyaW5naWZ5KGZhY2V0RmlsdGVyKVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEdpdmVuIGEgcG9zaXRpb24sIGNvbnN0cnVjdCBhIEZpbHRlciBvYmplY3RcbiAgICogQHBhcmFtIHtQb3N0aXRpb259IHBvc2l0aW9uIFRoZSBwb3NpdGlvblxuICAgKiBAcmV0dXJucyB7RmlsdGVyfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2J1aWxkRmlsdGVyIChwb3NpdGlvbikge1xuICAgIGNvbnN0IHsgbGF0aXR1ZGUsIGxvbmdpdHVkZSwgYWNjdXJhY3kgfSA9IHBvc2l0aW9uLmNvb3JkcztcbiAgICBjb25zdCByYWRpdXMgPSBNYXRoLm1heChhY2N1cmFjeSwgdGhpcy5fY29uZmlnLnJhZGl1cyAqIE1FVEVSU19QRVJfTUlMRSk7XG4gICAgcmV0dXJuIEZpbHRlci5wb3NpdGlvbihsYXRpdHVkZSwgbG9uZ2l0dWRlLCByYWRpdXMpO1xuICB9XG59XG4iLCIvKiogQG1vZHVsZSBTb3J0T3B0aW9uc0NvbXBvbmVudCAqL1xuXG5pbXBvcnQgQ29tcG9uZW50IGZyb20gJy4uL2NvbXBvbmVudCc7XG5pbXBvcnQgeyBBbnN3ZXJzQmFzaWNFcnJvciB9IGZyb20gJy4uLy4uLy4uL2NvcmUvZXJyb3JzL2Vycm9ycyc7XG5pbXBvcnQgRE9NIGZyb20gJy4uLy4uL2RvbS9kb20nO1xuaW1wb3J0IFN0b3JhZ2VLZXlzIGZyb20gJy4uLy4uLy4uL2NvcmUvc3RvcmFnZS9zdG9yYWdla2V5cyc7XG5pbXBvcnQgRmlsdGVyIGZyb20gJy4uLy4uLy4uL2NvcmUvbW9kZWxzL2ZpbHRlcic7XG5pbXBvcnQgUmVzdWx0c0NvbnRleHQgZnJvbSAnLi4vLi4vLi4vY29yZS9zdG9yYWdlL3Jlc3VsdHNjb250ZXh0JztcbmltcG9ydCBTZWFyY2hTdGF0ZXMgZnJvbSAnLi4vLi4vLi4vY29yZS9zdG9yYWdlL3NlYXJjaHN0YXRlcyc7XG5cbi8qKlxuICogUmVuZGVycyBjb25maWd1cmF0aW9uIG9wdGlvbnMgZm9yIHNvcnRpbmcgVmVydGljYWwgUmVzdWx0cy5cbiAqIFRPRE86IGhvdyB0byBkZWFsIHdpdGggbXVsdGlwbGUgaW5zdGFuY2VzIG9mIHRoaXMgY29tcG9uZW50IChhbmQgZmlsdGVycyBpbiBnZW5lcmFsKSxcbiAqIGlkZWFsbHkgXCJpZGVudGljYWxcIiBmaWx0ZXJzL3NvcnRzIHdvdWxkIGJlIHN5bmNlZCB1cC5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU29ydE9wdGlvbnNDb21wb25lbnQgZXh0ZW5kcyBDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvciAoY29uZmlnID0ge30sIHN5c3RlbUNvbmZpZyA9IHt9KSB7XG4gICAgc3VwZXIoYXNzaWduRGVmYXVsdHMoY29uZmlnKSwgc3lzdGVtQ29uZmlnKTtcbiAgICAvLyBUT0RPIFNQUi0xOTI5IGNlbnRyYWxpemUgdGhpcyBsb2dpY1xuICAgIHRoaXMuX2NvbmZpZy52ZXJ0aWNhbEtleSA9IGNvbmZpZy52ZXJ0aWNhbEtleSB8fCB0aGlzLmNvcmUuZ2xvYmFsU3RvcmFnZS5nZXRTdGF0ZShTdG9yYWdlS2V5cy5TRUFSQ0hfQ09ORklHKS52ZXJ0aWNhbEtleTtcbiAgICB0aGlzLm9wdGlvbnMgPSB0aGlzLl9jb25maWcub3B0aW9ucztcbiAgICB0aGlzLnNlbGVjdGVkT3B0aW9uSW5kZXggPSBwYXJzZUludCh0aGlzLmNvcmUuZ2xvYmFsU3RvcmFnZS5nZXRTdGF0ZSh0aGlzLm5hbWUpKSB8fCAwO1xuICAgIHRoaXMub3B0aW9uc1t0aGlzLnNlbGVjdGVkT3B0aW9uSW5kZXhdLmlzU2VsZWN0ZWQgPSB0cnVlO1xuICAgIHRoaXMuaGlkZUV4Y2Vzc09wdGlvbnMgPSB0aGlzLl9jb25maWcuc2hvd01vcmUgJiYgdGhpcy5zZWxlY3RlZE9wdGlvbkluZGV4IDwgdGhpcy5fY29uZmlnLnNob3dNb3JlTGltaXQ7XG4gICAgdGhpcy5zaG93UmVzZXQgPSB0aGlzLl9jb25maWcuc2hvd1Jlc2V0ICYmIHRoaXMuc2VsZWN0ZWRPcHRpb25JbmRleCAhPT0gMDtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgY29tcG9uZW50IGxpc3RlbnMgdG8gdXBkYXRlcyB0byB2ZXJ0aWNhbCByZXN1bHRzLCBhbmQgc2V0cyBpdHMgc3RhdGUgdG8gaXQgd2hlblxuICAgICAqIGFuIHVwZGF0ZSBvY2N1cnMuXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLmNvcmUuZ2xvYmFsU3RvcmFnZS5vbigndXBkYXRlJywgU3RvcmFnZUtleXMuVkVSVElDQUxfUkVTVUxUUywgdmVydGljYWxSZXN1bHRzID0+IHtcbiAgICAgIGlmICh2ZXJ0aWNhbFJlc3VsdHMuc2VhcmNoU3RhdGUgPT09IFNlYXJjaFN0YXRlcy5TRUFSQ0hfQ09NUExFVEUpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh2ZXJ0aWNhbFJlc3VsdHMpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgc2V0U3RhdGUgKGRhdGEgPSB7fSkge1xuICAgIGxldCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgIGlmICh0aGlzLmhpZGVFeGNlc3NPcHRpb25zKSB7XG4gICAgICBvcHRpb25zID0gdGhpcy5vcHRpb25zLnNsaWNlKDAsIHRoaXMuX2NvbmZpZy5zaG93TW9yZUxpbWl0KTtcbiAgICB9XG4gICAgc3VwZXIuc2V0U3RhdGUoT2JqZWN0LmFzc2lnbih7fSwgZGF0YSwge1xuICAgICAgb3B0aW9ucyxcbiAgICAgIGhpZGVFeGNlc3NPcHRpb25zOiB0aGlzLmhpZGVFeGNlc3NPcHRpb25zLFxuICAgICAgbmFtZTogdGhpcy5uYW1lLFxuICAgICAgc2hvd1Jlc2V0OiB0aGlzLnNob3dSZXNldCxcbiAgICAgIGlzTm9SZXN1bHRzOiBkYXRhLnJlc3VsdHNDb250ZXh0ID09PSBSZXN1bHRzQ29udGV4dC5OT19SRVNVTFRTXG4gICAgfSkpO1xuICB9XG5cbiAgb25Nb3VudCAoKSB7XG4gICAgLy8gSGFuZGxlIHJhZGlvIGJ1dHRvbiBzZWxlY3Rpb25zXG4gICAgY29uc3QgY29udGFpbmVyRWwgPSBET00ucXVlcnkodGhpcy5fY29udGFpbmVyLCAnLnl4dC1Tb3J0T3B0aW9ucy1maWVsZFNldCcpO1xuICAgIGNvbnRhaW5lckVsICYmIERPTS5vbihcbiAgICAgIGNvbnRhaW5lckVsLFxuICAgICAgJ2NoYW5nZScsXG4gICAgICBldnQgPT4gdGhpcy5oYW5kbGVPcHRpb25TZWxlY3Rpb24ocGFyc2VJbnQoZXZ0LnRhcmdldC52YWx1ZSkpXG4gICAgKTtcblxuICAgIC8vIFJlZ2lzdGVyIG1vcmUvbGVzcyBidXR0b25cbiAgICBpZiAodGhpcy5fY29uZmlnLnNob3dNb3JlKSB7XG4gICAgICBjb25zdCB0b2dnbGVFbCA9IERPTS5xdWVyeSh0aGlzLl9jb250YWluZXIsICcueXh0LVNvcnRPcHRpb25zLXNob3dUb2dnbGUnKTtcbiAgICAgIHRvZ2dsZUVsICYmIERPTS5vbihcbiAgICAgICAgdG9nZ2xlRWwsXG4gICAgICAgICdjbGljaycsICgpID0+IHtcbiAgICAgICAgICB0aGlzLmhpZGVFeGNlc3NPcHRpb25zID0gIXRoaXMuaGlkZUV4Y2Vzc09wdGlvbnM7XG4gICAgICAgICAgdGhpcy5zZXRTdGF0ZSgpO1xuICAgICAgICB9XG4gICAgICApO1xuICAgIH1cblxuICAgIC8vIFJlZ2lzdGVyIHNob3cgcmVzZXQgYnV0dG9uXG4gICAgaWYgKHRoaXMuc2hvd1Jlc2V0KSB7XG4gICAgICBjb25zdCByZXNldEVsID0gRE9NLnF1ZXJ5KHRoaXMuX2NvbnRhaW5lciwgJy55eHQtU29ydE9wdGlvbnMtcmVzZXQnKTtcbiAgICAgIHJlc2V0RWwgJiYgRE9NLm9uKFxuICAgICAgICByZXNldEVsLFxuICAgICAgICAnY2xpY2snLFxuICAgICAgICAoKSA9PiB0aGlzLmhhbmRsZU9wdGlvblNlbGVjdGlvbigwKVxuICAgICAgKTtcbiAgICB9XG5cbiAgICAvLyBSZWdpc3RlciBhcHBseSBidXR0b25cbiAgICBpZiAoIXRoaXMuX2NvbmZpZy5zZWFyY2hPbkNoYW5nZSkge1xuICAgICAgY29uc3QgYXBwbHlFbCA9IERPTS5xdWVyeSh0aGlzLl9jb250YWluZXIsICcueXh0LVNvcnRPcHRpb25zLWFwcGx5Jyk7XG4gICAgICBhcHBseUVsICYmIERPTS5vbihcbiAgICAgICAgYXBwbHlFbCxcbiAgICAgICAgJ2NsaWNrJyxcbiAgICAgICAgKCkgPT4gdGhpcy5fc29ydFJlc3VsdHMoKVxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICBoYW5kbGVPcHRpb25TZWxlY3Rpb24gKG9wdGlvbkluZGV4KSB7XG4gICAgdGhpcy5fdXBkYXRlU2VsZWN0ZWRPcHRpb24ob3B0aW9uSW5kZXgpO1xuICAgIGlmICh0aGlzLl9jb25maWcuc2VhcmNoT25DaGFuZ2UpIHtcbiAgICAgIHRoaXMuX3NvcnRSZXN1bHRzKCk7XG4gICAgfVxuICB9XG5cbiAgX3VwZGF0ZVNlbGVjdGVkT3B0aW9uIChvcHRpb25JbmRleCkge1xuICAgIHRoaXMub3B0aW9uc1t0aGlzLnNlbGVjdGVkT3B0aW9uSW5kZXhdLmlzU2VsZWN0ZWQgPSBmYWxzZTtcbiAgICB0aGlzLm9wdGlvbnNbb3B0aW9uSW5kZXhdLmlzU2VsZWN0ZWQgPSB0cnVlO1xuICAgIHRoaXMuc2VsZWN0ZWRPcHRpb25JbmRleCA9IG9wdGlvbkluZGV4O1xuICAgIHRoaXMuc2hvd1Jlc2V0ID0gdGhpcy5fY29uZmlnLnNob3dSZXNldCAmJiBvcHRpb25JbmRleCAhPT0gMDtcbiAgICB0aGlzLnNldFN0YXRlKCk7XG4gIH1cblxuICBfc29ydFJlc3VsdHMgKCkge1xuICAgIGNvbnN0IG9wdGlvbkluZGV4ID0gdGhpcy5zZWxlY3RlZE9wdGlvbkluZGV4O1xuICAgIGNvbnN0IG9wdGlvbiA9IHRoaXMub3B0aW9uc1tvcHRpb25JbmRleF07XG5cbiAgICAvLyBzZWFyY2hPbkNoYW5nZSByZWFsbHkgbWVhbnMgc29ydCBvbiBjaGFuZ2UgaGVyZSwganVzdCB0aGF0IHRoZSBzb3J0IGlzIGRvbmUgdGhyb3VnaCBhIHNlYXJjaCxcbiAgICAvLyBUaGlzIHdhcyBkb25lIHRvIGhhdmUgYSBjb25zaXN0ZW50IG9wdGlvbiBuYW1lIGJldHdlZW4gZmlsdGVycy5cbiAgICB0aGlzLmNvcmUucGVyc2lzdGVudFN0b3JhZ2Uuc2V0KHRoaXMubmFtZSwgb3B0aW9uSW5kZXgpO1xuICAgIGlmICh0aGlzLl9jb25maWcuc3RvcmVPbkNoYW5nZSAmJiBvcHRpb25JbmRleCA9PT0gMCkge1xuICAgICAgdGhpcy5jb3JlLmNsZWFyU29ydEJ5cygpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5fY29uZmlnLnN0b3JlT25DaGFuZ2UpIHtcbiAgICAgIHRoaXMuY29yZS5zZXRTb3J0QnlzKG9wdGlvbik7XG4gICAgfVxuICAgIHRoaXMuX3NlYXJjaCgpO1xuICAgIHRoaXMuX2NvbmZpZy5vbkNoYW5nZShvcHRpb24pO1xuICAgIHRoaXMuc2V0U3RhdGUoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUcmlnZ2VyIGEgc2VhcmNoIHdpdGggYWxsIGZpbHRlcnMgaW4gc3RvcmFnZVxuICAgKi9cbiAgX3NlYXJjaCAoKSB7XG4gICAgY29uc3QgYWxsRmlsdGVycyA9IHRoaXMuY29yZS5nbG9iYWxTdG9yYWdlLmdldEFsbChTdG9yYWdlS2V5cy5GSUxURVIpO1xuICAgIGNvbnN0IHRvdGFsRmlsdGVyID0gYWxsRmlsdGVycy5sZW5ndGggPiAxXG4gICAgICA/IEZpbHRlci5hbmQoLi4uYWxsRmlsdGVycylcbiAgICAgIDogYWxsRmlsdGVyc1swXTtcbiAgICBjb25zdCBpbnB1dCA9IHRoaXMuY29yZS5nbG9iYWxTdG9yYWdlLmdldFN0YXRlKFN0b3JhZ2VLZXlzLlFVRVJZKSB8fCAnJztcbiAgICBjb25zdCBmYWNldEZpbHRlciA9IHRoaXMuY29yZS5nbG9iYWxTdG9yYWdlLmdldEFsbChTdG9yYWdlS2V5cy5GQUNFVF9GSUxURVIpWzBdO1xuICAgIHRoaXMuY29yZS5wZXJzaXN0ZW50U3RvcmFnZS5kZWxldGUoU3RvcmFnZUtleXMuU0VBUkNIX09GRlNFVCk7XG4gICAgdGhpcy5jb3JlLmdsb2JhbFN0b3JhZ2UuZGVsZXRlKFN0b3JhZ2VLZXlzLlNFQVJDSF9PRkZTRVQpO1xuICAgIHRoaXMuY29yZS52ZXJ0aWNhbFNlYXJjaCh0aGlzLl9jb25maWcudmVydGljYWxLZXksIHtcbiAgICAgIGlucHV0LFxuICAgICAgZmlsdGVyOiBKU09OLnN0cmluZ2lmeSh0b3RhbEZpbHRlciksXG4gICAgICBmYWNldEZpbHRlcjogSlNPTi5zdHJpbmdpZnkoZmFjZXRGaWx0ZXIpXG4gICAgfSk7XG4gIH1cblxuICBzdGF0aWMgZ2V0IHR5cGUgKCkge1xuICAgIHJldHVybiAnU29ydE9wdGlvbnMnO1xuICB9XG5cbiAgc3RhdGljIGRlZmF1bHRUZW1wbGF0ZU5hbWUgKCkge1xuICAgIHJldHVybiAnY29udHJvbHMvc29ydG9wdGlvbnMnO1xuICB9XG59XG5cbmZ1bmN0aW9uIGFzc2lnbkRlZmF1bHRzIChjb25maWcpIHtcbiAgY29uc3QgdXBkYXRlZENvbmZpZyA9IE9iamVjdC5hc3NpZ24oe30sIGNvbmZpZyk7XG5cbiAgLy8gT3B0aW9uYWwsIFRoZSBsYWJlbCB1c2VkIGZvciB0aGUg4oCcZGVmYXVsdOKAnSBzb3J0IChha2EgdGhlIHNvcnQgc3BlY2lmaWVkIGJ5IHRoZSBleHBlcmllbmNlIGNvbmZpZ1wiKS5cbiAgdXBkYXRlZENvbmZpZy5kZWZhdWx0U29ydExhYmVsID0gY29uZmlnLmRlZmF1bHRTb3J0TGFiZWwgfHwgJ0Jlc3QgTWF0Y2gnO1xuXG4gIC8vIEFycmF5IG9mIHNlYXJjaCBvcHRpb25zLCB3aGVyZSBhbiBvcHRpb24gaGFzIHR5cGUsIGxhYmVsLCBhbmQgaWYgaXMgdHlwZSBGSUVMRCBhbHNvIGEgbGFiZWwgYW5kIGRpcmVjdGlvblxuICBpZiAoIWNvbmZpZy5vcHRpb25zKSB7XG4gICAgdGhyb3cgbmV3IEFuc3dlcnNCYXNpY0Vycm9yKCdjb25maWcub3B0aW9ucyBhcmUgcmVxdWlyZWQnLCAnU29ydE9wdGlvbnMnKTtcbiAgfVxuICBjb25zdCBPUFRJT05fVFlQRVMgPSBbJ0ZJRUxEJywgJ1JFTEVWQU5DRScsICdFTlRJVFlfRElTVEFOQ0UnXTtcbiAgaWYgKCFBcnJheS5pc0FycmF5KGNvbmZpZy5vcHRpb25zKSkge1xuICAgIHRocm93IG5ldyBBbnN3ZXJzQmFzaWNFcnJvcignb3B0aW9ucyBtdXN0IGJlIGFuIGFycmF5IG9mIG9iamVjdHMnLCAnU29ydE9wdGlvbnMnKTtcbiAgfVxuICB1cGRhdGVkQ29uZmlnLm9wdGlvbnMgPSBjb25maWcub3B0aW9ucy5tYXAob3B0aW9uID0+IHtcbiAgICBpZiAoIW9wdGlvbi5sYWJlbCB8fCAhb3B0aW9uLnR5cGUpIHtcbiAgICAgIHRocm93IG5ldyBBbnN3ZXJzQmFzaWNFcnJvcihgb3B0aW9uLmxhYmVsIGFuZCBvcHRpb24udHlwZSBhcmUgcmVxdWlyZWQgb3B0aW9uICR7b3B0aW9ufWAsICdTb3J0T3B0aW9ucycpO1xuICAgIH1cbiAgICBjb25zdCBuZXdPcHRpb24gPSB7IGlzU2VsZWN0ZWQ6IGZhbHNlIH07XG4gICAgbmV3T3B0aW9uLmxhYmVsID0gb3B0aW9uLmxhYmVsO1xuICAgIG5ld09wdGlvbi50eXBlID0gb3B0aW9uLnR5cGU7XG4gICAgY29uc3QgaXNGaWVsZCA9IE9QVElPTl9UWVBFUy5pbmRleE9mKG5ld09wdGlvbi50eXBlKSA9PT0gMDtcbiAgICBpZiAoaXNGaWVsZCAmJiBvcHRpb24uZmllbGQgJiYgb3B0aW9uLmRpcmVjdGlvbikge1xuICAgICAgbmV3T3B0aW9uLmZpZWxkID0gb3B0aW9uLmZpZWxkO1xuICAgICAgbmV3T3B0aW9uLmRpcmVjdGlvbiA9IG9wdGlvbi5kaXJlY3Rpb247XG4gICAgfSBlbHNlIGlmIChpc0ZpZWxkKSB7XG4gICAgICB0aHJvdyBuZXcgQW5zd2Vyc0Jhc2ljRXJyb3IoYG9wdGlvbi5maWVsZCBhbmQgb3B0aW9uLmRpcmVjdGlvbiBhcmUgcmVxdWlyZWQgZm9yIG9wdGlvbjogJHtvcHRpb259YCwgJ1NvcnRPcHRpb25zJyk7XG4gICAgfVxuICAgIHJldHVybiBuZXdPcHRpb247XG4gIH0pO1xuICAvLyBBZGQgZGVmYXVsdCBvcHRpb24gdG8gdGhlIGZyb250IG9mIHRoZSBvcHRpb25zIGFycmF5XG4gIHVwZGF0ZWRDb25maWcub3B0aW9ucy51bnNoaWZ0KHtcbiAgICBsYWJlbDogdXBkYXRlZENvbmZpZy5kZWZhdWx0U29ydExhYmVsLFxuICAgIGlzU2VsZWN0ZWQ6IGZhbHNlXG4gIH0pO1xuXG4gIC8vIE9wdGlvbmFsLCB0aGUgc2VsZWN0b3IgdXNlZCBmb3Igb3B0aW9ucyBpbiB0aGUgdGVtcGxhdGVcbiAgdXBkYXRlZENvbmZpZy5vcHRpb25TZWxlY3RvciA9IGNvbmZpZy5vcHRpb25TZWxlY3RvciB8fCAneXh0LVNvcnRPcHRpb25zLW9wdGlvblNlbGVjdG9yJztcblxuICAvLyBPcHRpb25hbCwgaWYgdHJ1ZSwgdHJpZ2dlcnMgYSBzZWFyY2ggb24gZWFjaCBjaGFuZ2UgdG8gYSBmaWx0ZXIsXG4gIC8vIGlmIGZhbHNlIHRoZSBjb21wb25lbnQgYWxzbyByZW5kZXJzIGFuIGFwcGx5IGJ1dHRvbiwgZGVmYXVsdHMgdG8gZmFsc2VcbiAgdXBkYXRlZENvbmZpZy5zZWFyY2hPbkNoYW5nZSA9IGNvbmZpZy5zZWFyY2hPbkNoYW5nZSA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IGNvbmZpZy5zZWFyY2hPbkNoYW5nZTtcblxuICAvLyBPcHRpb25hbCwgc2hvdyBhIHJlc2V0IGJ1dHRvbi4gQ2xpY2tpbmcgaXQgd2lsbCBhbHdheXMgcmV0dXJuIHRoZSB1c2VyIHRvIHRoZSBkZWZhdWx0IHNvcnRpbmcgb3B0aW9uLlxuICB1cGRhdGVkQ29uZmlnLnNob3dSZXNldCA9IGNvbmZpZy5zaG93UmVzZXQgfHwgZmFsc2U7XG5cbiAgLy8gT3B0aW9uYWwsIHRoZSBsYWJlbCB0byB1c2UgZm9yIHRoZSByZXNldCBidXR0b25cbiAgdXBkYXRlZENvbmZpZy5yZXNldExhYmVsID0gY29uZmlnLnJlc2V0TGFiZWwgfHwgJ3Jlc2V0JztcblxuICAvLyBPcHRpb25hbCwgdGhlIG1heCBudW1iZXIgb2YgZmlsdGVyIG9wdGlvbnMgdG8gc2hvdyBiZWZvcmUgY29sbGFwc2luZyBleHRyYXNcbiAgdXBkYXRlZENvbmZpZy5zaG93TW9yZUxpbWl0ID0gY29uZmlnLnNob3dNb3JlTGltaXQgfHwgNTtcblxuICAvLyBPcHRpb25hbCwgYWxsb3cgY29sbGFwc2luZyBleGNlc3Mgc29ydCBvcHRpb25zIGFmdGVyIGEgbGltaXRcbiAgdXBkYXRlZENvbmZpZy5zaG93TW9yZSA9IGNvbmZpZy5zaG93TW9yZSA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IGNvbmZpZy5zaG93TW9yZTtcbiAgdXBkYXRlZENvbmZpZy5zaG93TW9yZSA9IHVwZGF0ZWRDb25maWcuc2hvd01vcmUgJiYgKHVwZGF0ZWRDb25maWcub3B0aW9ucy5sZW5ndGggPiB1cGRhdGVkQ29uZmlnLnNob3dNb3JlTGltaXQpO1xuXG4gIC8vIE9wdGlvbmFsLCB0aGUgbGFiZWwgdG8gc2hvdyBmb3IgZGlzcGxheWluZyBtb3JlIG9wdGlvbnNcbiAgdXBkYXRlZENvbmZpZy5zaG93TW9yZUxhYmVsID0gY29uZmlnLnNob3dNb3JlTGFiZWwgfHwgJ1Nob3cgbW9yZSc7XG5cbiAgLy8gT3B0aW9uYWwsIHRoZSBsYWJlbCB0byBzaG93IGZvciBkaXNwbGF5aW5nIGxlc3Mgb3B0aW9uc1xuICB1cGRhdGVkQ29uZmlnLnNob3dMZXNzTGFiZWwgPSBjb25maWcuc2hvd0xlc3NMYWJlbCB8fCAnU2hvdyBsZXNzJztcblxuICAvLyBPcHRpb25hbCwgdGhlIGNhbGxiYWNrIGZ1bmN0aW9uIHRvIGNhbGwgd2hlbiBjaGFuZ2VkXG4gIHVwZGF0ZWRDb25maWcub25DaGFuZ2UgPSBjb25maWcub25DaGFuZ2UgfHwgZnVuY3Rpb24gKCkge307XG5cbiAgLy8gT3B0aW9uYWwsIFRvcCB0aXRsZSBmb3IgdGhlIHNvcnRpbmcgY29tcG9uZW50XG4gIHVwZGF0ZWRDb25maWcubGFiZWwgPSBjb25maWcubGFiZWwgfHwgJ1NvcnRpbmcnO1xuXG4gIC8vIE9wdGlvbmFsLCB3aGVuIHRydWUgY29tcG9uZW50IGRvZXMgbm90IHVwZGF0ZSBnbG9iYWxTdG9yYWdlXG4gIC8vIHBvc3NpYmx5IGRlbGVnYXRpbmcgdGhhdCB0byBhIGhpZ2hlci1vcmRlci9jb21wb3NpdGUgY29tcG9uZW50XG4gIHVwZGF0ZWRDb25maWcuc3RvcmVPbkNoYW5nZSA9IGNvbmZpZy5zdG9yZU9uQ2hhbmdlID09PSB1bmRlZmluZWQgPyB0cnVlIDogY29uZmlnLnN0b3JlT25DaGFuZ2U7XG5cbiAgdXBkYXRlZENvbmZpZy5hcHBseUxhYmVsID0gY29uZmlnLmFwcGx5TGFiZWwgfHwgJ0FwcGx5JztcblxuICB1cGRhdGVkQ29uZmlnLnZlcnRpY2FsS2V5ID0gY29uZmlnLnZlcnRpY2FsS2V5O1xuICBpZiAoIXVwZGF0ZWRDb25maWcudmVydGljYWxLZXkpIHtcbiAgICB0aHJvdyBuZXcgQW5zd2Vyc0Jhc2ljRXJyb3IoJ3ZlcnRpY2FsIGtleSBpcyByZXF1aXJlZCcsICdTb3J0T3B0aW9ucycpO1xuICB9XG5cbiAgLy8gbm90ZTogc2hvd0V4cGFuZCBhbmQgc2hvd051bWJlckFwcGxpZWQgZXhwbGljaXRseSBub3QgaW5jbHVkZWQsIG9uIHRoZSBncm91bmRzIHRoYXRcbiAgLy8gc29ydGluZyBzaG91bGQgYWx3YXlzIGJlIGV4cG9zZWQgdG8gdGhlIHVzZXIgaWYgYWRkZWQuXG5cbiAgcmV0dXJuIHVwZGF0ZWRDb25maWc7XG59XG4iLCIvKiogQG1vZHVsZSBEaXJlY3RBbnN3ZXJDb21wb25lbnQgKi9cblxuaW1wb3J0IENvbXBvbmVudCBmcm9tICcuLi9jb21wb25lbnQnO1xuaW1wb3J0IEFuYWx5dGljc0V2ZW50IGZyb20gJy4uLy4uLy4uL2NvcmUvYW5hbHl0aWNzL2FuYWx5dGljc2V2ZW50JztcbmltcG9ydCBTdG9yYWdlS2V5cyBmcm9tICcuLi8uLi8uLi9jb3JlL3N0b3JhZ2Uvc3RvcmFnZWtleXMnO1xuaW1wb3J0IERPTSBmcm9tICcuLi8uLi9kb20vZG9tJztcblxuLyoqXG4gKiBFdmVudFR5cGVzIGFyZSBleHBsaWNpdCBzdHJpbmdzIGRlZmluZWRcbiAqIGZvciB3aGF0IHRoZSBzZXJ2ZXIgZXhwZWN0cyBmb3IgYW5hbHl0aWNzLlxuICpcbiAqIEBlbnVtXG4gKi9cbmNvbnN0IEV2ZW50VHlwZXMgPSB7XG4gIFRIVU1CU19VUDogJ1RIVU1CU19VUCcsXG4gIFRIVU1CU19ET1dOOiAnVEhVTUJTX0RPV04nXG59O1xuXG5jb25zdCBERUZBVUxUX0NPTkZJRyA9IHtcbiAgcG9zaXRpdmVGZWVkYmFja1NyVGV4dDogJ1RoaXMgYW5zd2VyZWQgbXkgcXVlc3Rpb24nLFxuICBuZWdhdGl2ZUZlZWRiYWNrU3JUZXh0OiAnVGhpcyBkaWQgbm90IGFuc3dlciBteSBxdWVzdGlvbicsXG4gIGZvb3RlclRleHRPblN1Ym1pc3Npb246ICdUaGFuayB5b3UgZm9yIHlvdXIgZmVlZGJhY2shJ1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRGlyZWN0QW5zd2VyQ29tcG9uZW50IGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IgKGNvbmZpZyA9IHt9LCBzeXN0ZW1Db25maWcgPSB7fSkge1xuICAgIHN1cGVyKHsgLi4uREVGQVVMVF9DT05GSUcsIC4uLmNvbmZpZyB9LCBzeXN0ZW1Db25maWcpO1xuXG4gICAgLyoqXG4gICAgICogUmVjaWV2ZSB1cGRhdGVzIGZyb20gc3RvcmFnZSBiYXNlZCBvbiB0aGlzIGluZGV4XG4gICAgICogQHR5cGUge1N0b3JhZ2VLZXl9XG4gICAgICovXG4gICAgdGhpcy5tb2R1bGVJZCA9IFN0b3JhZ2VLZXlzLkRJUkVDVF9BTlNXRVI7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgZm9ybSB1c2VkIGZvciBzdWJtaXR0aW5nIHRoZSBmZWVkYmFja1xuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgdGhpcy5fZm9ybUVsID0gY29uZmlnLmZvcm1FbCB8fCAnLmpzLWRpcmVjdEFuc3dlci1mZWVkYmFjay1mb3JtJztcblxuICAgIC8qKlxuICAgICAqIFRoZSBgdGh1bWJzIHVwYCBjc3Mgc2VsZWN0b3IgdG8gYmluZCB1aSBpbnRlcmFjdGlvbiB0byBmb3IgcmVwb3J0aW5nXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLl90aHVtYnNVcFNlbGVjdG9yID0gY29uZmlnLnRodW1ic1VwU2VsZWN0b3IgfHwgJy5qcy1kaXJlY3RBbnN3ZXItdGh1bWJVcCc7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYHRodW1icyBkb3duYCBjc3Mgc2VsZWN0b3IgdG8gYmluZCB1aSBpbnRlcmFjdGlvbiB0byBmb3IgcmVwb3J0aW5nXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLl90aHVtYnNEb3duU2VsZWN0b3IgPSBjb25maWcudGh1bWJzRG93blNlbGVjdG9yIHx8ICcuanMtZGlyZWN0QW5zd2VyLXRodW1iRG93bic7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgZGlzcGxheSB0ZXh0IGZvciB0aGUgVmlldyBEZXRhaWxzIGNsaWNrIHRvIGFjdGlvbiBsaW5rXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLl92aWV3RGV0YWlsc1RleHQgPSBjb25maWcudmlld0RldGFpbHNUZXh0IHx8ICdWaWV3IERldGFpbHMnO1xuICB9XG5cbiAgc3RhdGljIGdldCB0eXBlICgpIHtcbiAgICByZXR1cm4gJ0RpcmVjdEFuc3dlcic7XG4gIH1cblxuICAvKipcbiAgICogVGhlIHRlbXBsYXRlIHRvIHJlbmRlclxuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHN0YXRpYyBkZWZhdWx0VGVtcGxhdGVOYW1lIChjb25maWcpIHtcbiAgICByZXR1cm4gJ3Jlc3VsdHMvZGlyZWN0YW5zd2VyJztcbiAgfVxuXG4gIC8qKlxuICAgKiBiZWZvcmVNb3VudCwgb25seSBkaXNwbGF5IHRoZSBkaXJlY3QgYW5zd2VyIGNvbXBvbmVudCBpZiBpdCBoYXMgZGF0YVxuICAgKi9cbiAgYmVmb3JlTW91bnQgKCkge1xuICAgIGlmICghdGhpcy5oYXNTdGF0ZSgnYW5zd2VyJykpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBXaGVuIHRoZSBET00gaXMgY29uc3RydWN0ZWQsXG4gICAqIHdlIHdhbnQgdG8gd2lyZSB1cCB0aGUgYmVoYXZpb3IgZm9yIGludGVyYWN0aW5nIHdpdGggdGhlIHF1YWxpdHkgZmVlZGJhY2sgcmVwb3J0aW5nICh0aHVtYnN1cC9kb3duKVxuICAgKi9cbiAgb25Nb3VudCAoKSB7XG4gICAgLy8gQXZvaWQgYmluZGluZ3MgaWYgdGhlIGZlZWRiYWNrIGhhcyBwcmV2aW91c2x5IGJlZW4gc3VibWl0dGVkXG4gICAgaWYgKHRoaXMuZ2V0U3RhdGUoJ2ZlZWRiYWNrU3VibWl0dGVkJykgPT09IHRydWUpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vIEZvciBXQ0FHIGNvbXBsaWFuY2UsIHRoZSBmZWVkYmFjayBzaG91bGQgYmUgYSBzdWJtaXR0YWJsZSBmb3JtXG4gICAgRE9NLm9uKHRoaXMuX2Zvcm1FbCwgJ3N1Ym1pdCcsIChlKSA9PiB7XG4gICAgICBsZXQgZm9ybUVsID0gZS50YXJnZXQ7XG4gICAgICBsZXQgY2hlY2tlZFZhbHVlID0gRE9NLnF1ZXJ5KGZvcm1FbCwgJ2lucHV0OmNoZWNrZWQnKS52YWx1ZSA9PT0gJ3RydWUnO1xuXG4gICAgICB0aGlzLnJlcG9ydFF1YWxpdHkoY2hlY2tlZFZhbHVlKTtcbiAgICAgIHRoaXMudXBkYXRlU3RhdGUoe1xuICAgICAgICAnZmVlZGJhY2tTdWJtaXR0ZWQnOiB0cnVlXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIC8vIElzIHRoaXMgYWN0dWFsbHkgbmVjZXNzYXJ5PyBJIGd1ZXNzIGl0J3Mgb25seSBuZWNlc3NhcnkgaWYgdGhlXG4gICAgLy8gc3VibWl0IGJ1dHRvbiBpcyBoaWRkZW4uXG4gICAgRE9NLm9uKHRoaXMuX3RodW1ic1VwU2VsZWN0b3IsICdjbGljaycsICgpID0+IHsgRE9NLnRyaWdnZXIodGhpcy5fZm9ybUVsLCAnc3VibWl0Jyk7IH0pO1xuICAgIERPTS5vbih0aGlzLl90aHVtYnNEb3duU2VsZWN0b3IsICdjbGljaycsICgpID0+IHsgRE9NLnRyaWdnZXIodGhpcy5fZm9ybUVsLCAnc3VibWl0Jyk7IH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIHVwZGF0ZVN0YXRlIGVuYWJsZXMgZm9yIHBhcnRpYWwgdXBkYXRlcyAodGhlIGRlbHRhIGJldHdlZW4gdGhlIG9sZCBhbmQgbmV3KVxuICAgKiBAdHlwZSB7b2JqZWN0fSBUaGUgbmV3IHN0YXRlIHRvIGFwcGx5IHRvIHRoZSBvbGRcbiAgICovXG4gIHVwZGF0ZVN0YXRlIChzdGF0ZSA9IHt9KSB7XG4gICAgY29uc3QgbmV3U3RhdGUgPSBPYmplY3QuYXNzaWduKHt9LCB0aGlzLmdldFN0YXRlKCksIHN0YXRlKTtcbiAgICB0aGlzLnNldFN0YXRlKG5ld1N0YXRlKTtcbiAgfVxuXG4gIHNldFN0YXRlIChkYXRhKSB7XG4gICAgcmV0dXJuIHN1cGVyLnNldFN0YXRlKE9iamVjdC5hc3NpZ24oe30sIGRhdGEsIHtcbiAgICAgIGV2ZW50T3B0aW9uczogdGhpcy5ldmVudE9wdGlvbnMoZGF0YSksXG4gICAgICB2aWV3RGV0YWlsc1RleHQ6IHRoaXMuX3ZpZXdEZXRhaWxzVGV4dFxuICAgIH0pKTtcbiAgfVxuXG4gIGV2ZW50T3B0aW9ucyAoZGF0YSkge1xuICAgIGlmICghZGF0YSB8fCBPYmplY3Qua2V5cyhkYXRhKS5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgdmVydGljYWxDb25maWdJZDogZGF0YS5yZWxhdGVkSXRlbS52ZXJ0aWNhbENvbmZpZ0lkLFxuICAgICAgc2VhcmNoZXI6ICdVTklWRVJTQUwnLFxuICAgICAgZW50aXR5SWQ6IGRhdGEucmVsYXRlZEl0ZW0uZGF0YS5pZCxcbiAgICAgIGN0YUxhYmVsOiB0aGlzLl92aWV3RGV0YWlsc1RleHQudG9VcHBlckNhc2UoKS5yZXBsYWNlKCcgJywgJ18nKVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIHJlcG9ydFF1YWxpdHkgd2lsbCBzZW5kIHRoZSBxdWFsaXR5IGZlZWRiYWNrIHRvIGFuYWx5dGljc1xuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGlzR29vZCB0cnVlIGlmIHRoZSBhbnN3ZXIgaXMgd2hhdCB5b3Ugd2VyZSBsb29raW5nIGZvclxuICAgKi9cbiAgcmVwb3J0UXVhbGl0eSAoaXNHb29kKSB7XG4gICAgY29uc3QgZXZlbnRUeXBlID0gaXNHb29kID09PSB0cnVlID8gRXZlbnRUeXBlcy5USFVNQlNfVVAgOiBFdmVudFR5cGVzLlRIVU1CU19ET1dOO1xuICAgIGNvbnN0IGV2ZW50ID0gbmV3IEFuYWx5dGljc0V2ZW50KGV2ZW50VHlwZSlcbiAgICAgIC5hZGRPcHRpb25zKHtcbiAgICAgICAgJ2RpcmVjdEFuc3dlcic6IHRydWVcbiAgICAgIH0pO1xuXG4gICAgdGhpcy5hbmFseXRpY3NSZXBvcnRlci5yZXBvcnQoZXZlbnQpO1xuICB9XG59XG4iLCJpbXBvcnQgeyBBbnN3ZXJzQ29uZmlnRXJyb3IgfSBmcm9tICcuLi9lcnJvcnMvZXJyb3JzJztcblxuLyoqXG4gKiBUaGUgQWx0ZXJuYXRpdmVWZXJ0aWNhbCBpcyBhIG1vZGVsIHRoYXQgaXMgdXNlZCB0byBwb3dlciB0aGUgc2VhcmNoXG4gKiBzdWdnZXN0aW9ucyBpbmZvIGJveC4gSXQncyBpbml0aWFsaXplZCB0aHJvdWdoIHRoZSBjb25maWd1cmF0aW9uIHByb3ZpZGVkXG4gKiB0byB0aGUgY29tcG9uZW50LlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBbHRlcm5hdGl2ZVZlcnRpY2FsIHtcbiAgY29uc3RydWN0b3IgKGNvbmZpZykge1xuICAgIC8qKlxuICAgICAqIFRoZSBuYW1lIG9mIHRoZSB2ZXJ0aWNhbCB0aGF0IGlzIGV4cG9zZWQgZm9yIHRoZSBsaW5rXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLmxhYmVsID0gY29uZmlnLmxhYmVsO1xuICAgIGlmICh0eXBlb2YgdGhpcy5sYWJlbCAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBBbnN3ZXJzQ29uZmlnRXJyb3IoXG4gICAgICAgICdsYWJlbCBpcyBhIHJlcXVpcmVkIGNvbmZpZ3VyYXRpb24gb3B0aW9uIGZvciB2ZXJ0aWNhbFBhZ2UuJyxcbiAgICAgICAgJ0FsdGVybmF0aXZlVmVydGljYWwnXG4gICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBjb21wbGV0ZSBVUkwsIGluY2x1ZGluZyB0aGUgcGFyYW1zXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLnVybCA9IGNvbmZpZy51cmw7XG4gICAgaWYgKHR5cGVvZiB0aGlzLnVybCAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBBbnN3ZXJzQ29uZmlnRXJyb3IoXG4gICAgICAgICd1cmwgaXMgYSByZXF1aXJlZCBjb25maWd1cmF0aW9uIG9wdGlvbiBmb3IgdmVydGljYWxQYWdlLicsXG4gICAgICAgICdBbHRlcm5hdGl2ZVZlcnRpY2FsJ1xuICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBuYW1lIG9mIGFuIGljb24gZnJvbSB0aGUgZGVmYXVsdCBpY29uIHNldFxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgdGhpcy5pY29uTmFtZSA9IGNvbmZpZy5pY29uTmFtZTtcblxuICAgIC8qKlxuICAgICAqIFVSTCBvZiBhbiBpY29uXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLmljb25VcmwgPSBjb25maWcuaWNvblVybDtcblxuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgdGhlIHZlcnRpY2FsIGhhcyBhbiBpY29uXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLmhhc0ljb24gPSB0aGlzLmljb25OYW1lIHx8IHRoaXMuaWNvblVybDtcblxuICAgIC8qKlxuICAgICAqIFRoZSBudW1iZXIgb2YgcmVzdWx0cyB0byBkaXNwbGF5IG5leHQgdG8gZWFjaCBhbHRlcm5hdGl2ZVxuICAgICAqIHZlcnRpY2FsXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLnJlc3VsdHNDb3VudCA9IGNvbmZpZy5yZXN1bHRzQ291bnQ7XG4gIH1cbn1cbiIsIi8qKiBAbW9kdWxlIEFsdGVybmF0aXZlVmVydGljYWxzQ29tcG9uZW50ICovXG5cbmltcG9ydCBBbHRlcm5hdGl2ZVZlcnRpY2FsIGZyb20gJy4uLy4uLy4uL2NvcmUvbW9kZWxzL2FsdGVybmF0aXZldmVydGljYWwnO1xuaW1wb3J0IENvbXBvbmVudCBmcm9tICcuLi9jb21wb25lbnQnO1xuaW1wb3J0IFN0b3JhZ2VLZXlzIGZyb20gJy4uLy4uLy4uL2NvcmUvc3RvcmFnZS9zdG9yYWdla2V5cyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFsdGVybmF0aXZlVmVydGljYWxzQ29tcG9uZW50IGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IgKG9wdHMgPSB7fSwgc3lzdGVtT3B0cyA9IHt9KSB7XG4gICAgc3VwZXIob3B0cywgc3lzdGVtT3B0cyk7XG5cbiAgICB0aGlzLm1vZHVsZUlkID0gU3RvcmFnZUtleXMuQUxURVJOQVRJVkVfVkVSVElDQUxTO1xuXG4gICAgLyoqXG4gICAgICogQWx0ZXJuYXRpdmUgdmVydGljYWxzIHRoYXQgaGF2ZSByZXN1bHRzIGZvciB0aGUgY3VycmVudCBxdWVyeVxuICAgICAqIFRoaXMgZ2V0cyB1cGRhdGVkIGJhc2VkIG9uIHRoZSBzZXJ2ZXIgcmVzdWx0c1xuICAgICAqIEB0eXBlIHtBbHRlcm5hdGl2ZVZlcnRpY2Fsc31cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuX2FsdGVybmF0aXZlVmVydGljYWxzID0gKG9wdHMuZGF0YSAmJiBvcHRzLmRhdGEuYWx0ZXJuYXRpdmVWZXJ0aWNhbHMpIHx8IFtdO1xuXG4gICAgLyoqXG4gICAgICogVmVydGljYWwgcGFnZXMgY29uZmlnIGZyb20gZ2xvYmFsIHZlcnRpY2FscyBjb25maWdcbiAgICAgKiBAdHlwZSB7VmVydGljYWxQYWdlc0NvbmZpZ31cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuX3ZlcnRpY2Fsc0NvbmZpZyA9IG9wdHMudmVydGljYWxzQ29uZmlnIHx8IFtdO1xuXG4gICAgLyoqXG4gICAgICogVGhlIG5hbWUgb2YgdGhlIHZlcnRpY2FsIHRoYXQgaXMgZXhwb3NlZCBmb3IgdGhlIGxpbmtcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMuX2N1cnJlbnRWZXJ0aWNhbExhYmVsID0gdGhpcy5nZXRDdXJyZW50VmVydGljYWxMYWJlbChvcHRzLnZlcnRpY2Fsc0NvbmZpZykgfHwgJyc7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYWx0ZXJuYXRpdmUgdmVydGljYWwgc2VhcmNoIHN1Z2dlc3Rpb25zLCBwYXJzZWQgZnJvbSBhbHRlcm5hdGl2ZSB2ZXJ0aWNhbHMgYW5kXG4gICAgICogdGhlIGdsb2JhbCB2ZXJ0aWNhbHMgY29uZmlnLlxuICAgICAqIFRoaXMgZ2V0cyB1cGRhdGVkIGJhc2VkIG9uIHRoZSBzZXJ2ZXIgcmVzdWx0c1xuICAgICAqIEB0eXBlIHtBbHRlcm5hdGl2ZVZlcnRpY2FsW119XG4gICAgICovXG4gICAgdGhpcy52ZXJ0aWNhbFN1Z2dlc3Rpb25zID0gQWx0ZXJuYXRpdmVWZXJ0aWNhbHNDb21wb25lbnQuX2J1aWxkVmVydGljYWxTdWdnZXN0aW9ucyhcbiAgICAgIHRoaXMuX2FsdGVybmF0aXZlVmVydGljYWxzLFxuICAgICAgdGhpcy5fdmVydGljYWxzQ29uZmlnXG4gICAgKTtcblxuICAgIC8qKlxuICAgICAqIFRoZSB1cmwgdG8gdGhlIHVuaXZlcnNhbCBwYWdlIHRvIGxpbmsgYmFjayB0byB3aXRoIGN1cnJlbnQgcXVlcnlcbiAgICAgKiBAdHlwZSB7c3RyaW5nfG51bGx9XG4gICAgICovXG4gICAgdGhpcy5fdW5pdmVyc2FsVXJsID0gb3B0cy51bml2ZXJzYWxVcmwgfHwgJyc7XG5cbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIG9yIG5vdCByZXN1bHRzIGFyZSBkaXNwbGF5aW5nLCB1c2VkIHRvIGNvbnRyb2wgbGFuZ3VhZ2UgaW4gdGhlIGluZm8gYm94XG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICovXG4gICAgdGhpcy5faXNTaG93aW5nUmVzdWx0cyA9IG9wdHMuaXNTaG93aW5nUmVzdWx0cyB8fCBmYWxzZTtcbiAgfVxuXG4gIHN0YXRpYyBnZXQgdHlwZSAoKSB7XG4gICAgcmV0dXJuICdBbHRlcm5hdGl2ZVZlcnRpY2Fscyc7XG4gIH1cblxuICAvKipcbiAgICogVGhlIHRlbXBsYXRlIHRvIHJlbmRlclxuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHN0YXRpYyBkZWZhdWx0VGVtcGxhdGVOYW1lIChjb25maWcpIHtcbiAgICByZXR1cm4gJ3Jlc3VsdHMvYWx0ZXJuYXRpdmV2ZXJ0aWNhbHMnO1xuICB9XG5cbiAgc3RhdGljIGFyZUR1cGxpY2F0ZU5hbWVzQWxsb3dlZCAoKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBzZXRTdGF0ZSAoZGF0YSkge1xuICAgIHJldHVybiBzdXBlci5zZXRTdGF0ZShPYmplY3QuYXNzaWduKHsgdmVydGljYWxTdWdnZXN0aW9uczogW10gfSwgZGF0YSwge1xuICAgICAgdW5pdmVyc2FsVXJsOiB0aGlzLl91bml2ZXJzYWxVcmwsXG4gICAgICB2ZXJ0aWNhbFN1Z2dlc3Rpb25zOiB0aGlzLnZlcnRpY2FsU3VnZ2VzdGlvbnMsXG4gICAgICBjdXJyZW50VmVydGljYWxMYWJlbDogdGhpcy5fY3VycmVudFZlcnRpY2FsTGFiZWwsXG4gICAgICBpc1Nob3dpbmdSZXN1bHRzOiB0aGlzLl9pc1Nob3dpbmdSZXN1bHRzLFxuICAgICAgcXVlcnk6IHRoaXMuY29yZS5nbG9iYWxTdG9yYWdlLmdldFN0YXRlKFN0b3JhZ2VLZXlzLlFVRVJZKVxuICAgIH0pKTtcbiAgfVxuXG4gIGdldEN1cnJlbnRWZXJ0aWNhbExhYmVsICh2ZXJ0aWNhbHNDb25maWcpIHtcbiAgICBjb25zdCB0aGlzVmVydGljYWwgPSB2ZXJ0aWNhbHNDb25maWcuZmluZChjb25maWcgPT4ge1xuICAgICAgcmV0dXJuIGNvbmZpZy5pc0FjdGl2ZSB8fCBmYWxzZTtcbiAgICB9KTtcblxuICAgIHJldHVybiB0aGlzVmVydGljYWwgPyB0aGlzVmVydGljYWwubGFiZWwgOiAnJztcbiAgfVxuXG4gIC8qKlxuICAgKiBfYnVpbGRWZXJ0aWNhbFN1Z2dlc3Rpb25zIHdpbGwgY29uc3RydWN0IGFuIGFycmF5IG9mIHtBbHRlcm5hdGl2ZVZlcnRpY2FsfVxuICAgKiBmcm9tIGFsdGVybmF0aXZlIHZlcnRpY2FscyBhbmQgdmVydGljYWxQYWdlcyBjb25maWd1cmF0aW9uXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBhbHRlcm5hdGl2ZVZlcnRpY2FscyBhbHRlcm5hdGl2ZVZlcnRpY2FscyBzZXJ2ZXIgcmVzcG9uc2VcbiAgICogQHBhcmFtIHtvYmplY3R9IHZlcnRpY2Fsc0NvbmZpZyB0aGUgY29uZmlndXJhdGlvbiB0byB1c2VcbiAgICovXG4gIHN0YXRpYyBfYnVpbGRWZXJ0aWNhbFN1Z2dlc3Rpb25zIChhbHRlcm5hdGl2ZVZlcnRpY2FscywgdmVydGljYWxzQ29uZmlnKSB7XG4gICAgbGV0IHZlcnRpY2FscyA9IFtdO1xuICAgIGxldCBxdWVyeVBhcmFtcyA9IHdpbmRvdy5sb2NhdGlvbi5zZWFyY2g7XG5cbiAgICBmb3IgKGxldCBhbHRlcm5hdGl2ZVZlcnRpY2FsIG9mIGFsdGVybmF0aXZlVmVydGljYWxzKSB7XG4gICAgICBjb25zdCB2ZXJ0aWNhbEtleSA9IGFsdGVybmF0aXZlVmVydGljYWwudmVydGljYWxDb25maWdJZDtcblxuICAgICAgY29uc3QgbWF0Y2hpbmdWZXJ0aWNhbENvbmZpZyA9IHZlcnRpY2Fsc0NvbmZpZy5maW5kKGNvbmZpZyA9PiB7XG4gICAgICAgIHJldHVybiBjb25maWcudmVydGljYWxLZXkgPT09IHZlcnRpY2FsS2V5O1xuICAgICAgfSk7XG5cbiAgICAgIGlmICghbWF0Y2hpbmdWZXJ0aWNhbENvbmZpZyB8fCBhbHRlcm5hdGl2ZVZlcnRpY2FsLnJlc3VsdHNDb3VudCA8IDEpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIHZlcnRpY2Fscy5wdXNoKG5ldyBBbHRlcm5hdGl2ZVZlcnRpY2FsKHtcbiAgICAgICAgbGFiZWw6IG1hdGNoaW5nVmVydGljYWxDb25maWcubGFiZWwsXG4gICAgICAgIHVybDogbWF0Y2hpbmdWZXJ0aWNhbENvbmZpZy51cmwgKyBxdWVyeVBhcmFtcyxcbiAgICAgICAgaWNvbk5hbWU6IG1hdGNoaW5nVmVydGljYWxDb25maWcuaWNvbixcbiAgICAgICAgaWNvblVybDogbWF0Y2hpbmdWZXJ0aWNhbENvbmZpZy5pY29uVXJsLFxuICAgICAgICByZXN1bHRzQ291bnQ6IGFsdGVybmF0aXZlVmVydGljYWwucmVzdWx0c0NvdW50XG4gICAgICB9KSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZlcnRpY2FscztcbiAgfVxufVxuIiwiLyoqIEBtb2R1bGUgTWFwUHJvdmlkZXIgKi9cblxuaW1wb3J0IFJlc3VsdHNDb250ZXh0IGZyb20gJy4uLy4uLy4uLy4uL2NvcmUvc3RvcmFnZS9yZXN1bHRzY29udGV4dCc7XG5cbi8qKlxuICogQSBNYXBQcm92aWRlciBpcyBhbiBpbnRlcmZhY2UgdGhhdCByZXByZXNlbnRzIHRoYXQgc2hvdWxkIGJlIGltcGxlbWVudGVkXG4gKiBpbiBvcmRlciB0byBpbnRlZ3JhdGUgd2l0aCBhIFRoaXJkIFBhcnR5IE1hcCBwcm92aWRlciBmb3JcbiAqIGludGVyYWN0aXZlIG1hcHMuIE1hcFByb3ZpZGVycyBhcmUgdXNlZCBieSB0aGUgTWFwQ29tcG9uZW50LlxuICpcbiAqIEltcGxlbWVudGF0aW9ucyBzaG91bGQgZXh0ZW5kIHRoaXMgaW50ZXJmYWNlLlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNYXBQcm92aWRlciB7XG4gIGNvbnN0cnVjdG9yIChjb25maWcgPSB7fSkge1xuICAgIC8qKlxuICAgICAqIFRoZSBBUEkgS2V5IHVzZWQgZm9yIGludGVyYWN0aW5nIHdpdGggdGhlIG1hcCBwcm92aWRlclxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgdGhpcy5fYXBpS2V5ID0gY29uZmlnLmFwaUtleTtcblxuICAgIC8qKlxuICAgICAqIFRoZSB6b29tIGxldmVsIG9mIHRoZSBtYXAsIGRlZmF1bHRzIHRvIDE0XG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLl96b29tID0gY29uZmlnLnpvb20gfHwgMTQ7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgZGVmYXVsdCBjb29yZGluYXRlcyB0byBkaXNwbGF5IGlmIHRoZXJlIGFyZSBubyByZXN1bHRzIHJldHVybmVkXG4gICAgICogT25seSB1c2VkIGlmIHNob3dFbXB0eU1hcCBpcyBzZXQgdG8gdHJ1ZVxuICAgICAqIEB0eXBlIHtPYmplY3R9XG4gICAgICovXG4gICAgdGhpcy5fZGVmYXVsdFBvc2l0aW9uID0gY29uZmlnLmRlZmF1bHRQb3NpdGlvbiB8fCB7IGxhdDogMzcuMDkwMiwgbG5nOiAtOTUuNzEyOSB9O1xuXG4gICAgLyoqXG4gICAgICogQ29uZmlndXJhdGlvbiBmb3IgdGhlIGJlaGF2aW9yIHdoZW4gdGhlcmUgYXJlIG5vIHZlcnRpY2FsIHJlc3VsdHMuXG4gICAgICogQHR5cGUge09iamVjdH1cbiAgICAgKi9cbiAgICB0aGlzLl9ub1Jlc3VsdHMgPSBjb25maWcubm9SZXN1bHRzIHx8IHt9O1xuXG4gICAgLyoqXG4gICAgICogRGV0ZXJtaW5lcyBpZiBhbiBlbXB0eSBtYXAgc2hvdWxkIGJlIHNob3duIHdoZW4gdGhlcmUgYXJlIG5vIHJlc3VsdHNcbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICB0aGlzLl9zaG93RW1wdHlNYXAgPSBjb25maWcuc2hvd0VtcHR5TWFwIHx8IGZhbHNlO1xuXG4gICAgLyoqXG4gICAgICogQSByZWZlcmVuY2UgdG8gdGhlIHVuZGVybHlpbmcgbWFwIGluc3RhbmNlLCBjcmVhdGVkIGJ5IHRoZSBleHRlcm5hbCBsaWIuXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLl9tYXAgPSBudWxsO1xuXG4gICAgLyoqXG4gICAgICogVGVtcG9yYXJ5IGJvb2xlYW4gdHJhY2tpbmcgd2hldGhlciBvciBub3QgdGhlIGV4dGVybmFsIEpTIGxpYnJhcnkgaXMgbG9hZGVkIChzZWUgVE9ETyBiZWxvdylcbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICB0aGlzLl9pc0xvYWRlZCA9IGZhbHNlO1xuXG4gICAgLyoqXG4gICAgICogQ2FsbGJhY2sgdG8gaW52b2tlIHdoZW4gYSBwaW4gaXMgY2xpY2tlZC4gVGhlIGNsaWNrZWQgaXRlbShzKSBhcmUgcGFzc2VkIHRvIHRoZSBjYWxsYmFja1xuICAgICAqIEB0eXBlIHtmdW5jdGlvbn1cbiAgICAgKi9cbiAgICB0aGlzLl9vblBpbkNsaWNrID0gY29uZmlnLm9uUGluQ2xpY2sgfHwgbnVsbDtcblxuICAgIC8qKlxuICAgICAqIENhbGxiYWNrIHRvIGludm9rZSBvbmNlIHRoZSBKYXZhc2NyaXB0IGlzIGxvYWRlZFxuICAgICAqIEB0eXBlIHtmdW5jdGlvbn1cbiAgICAgKi9cbiAgICB0aGlzLl9vbkxvYWRlZCA9IGNvbmZpZy5vbkxvYWRlZCB8fCBmdW5jdGlvbiAoKSB7fTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBjdXN0b20gY29uZmlndXJhdGlvbiBvdmVycmlkZSB0byB1c2UgZm9yIHRoZSBtYXAgbWFya2Vyc1xuICAgICAqIEB0eXBlIHtPYmplY3R8RnVuY3Rpb259XG4gICAgICovXG4gICAgdGhpcy5fcGluQ29uZmlnID0gdHlwZW9mIGNvbmZpZy5waW4gPT09ICdmdW5jdGlvbicgPyBjb25maWcucGluIDogT2JqZWN0LmFzc2lnbihNYXBQcm92aWRlci5ERUZBVUxUX1BJTl9DT05GSUcsIGNvbmZpZy5waW4pO1xuXG4gICAgLyoqXG4gICAgICogRGV0ZXJtaW5lcyB3aGV0aGVyIG9yIG5vdCB0byBjb2xsYXBzZSBwaW5zIGF0IHRoZSBzYW1lIGxhdC9sbmdcbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICB0aGlzLl9jb2xsYXBzZVBpbnMgPSBjb25maWcuY29sbGFwc2VQaW5zIHx8IGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBkZWZhdWx0IGNvbmZpZ3VyYXRpb24gdG8gdXNlIGZvciB0aGUgbWFwIG1hcmtlcnNcbiAgICogQHR5cGUge09iamVjdH1cbiAgICogVE9ETyhiaWxseSkgQ3JlYXRlIGEgY29uZmlndXJhdGlvbiBtb2RlbFxuICAgKi9cbiAgc3RhdGljIGdldCBERUZBVUxUX1BJTl9DT05GSUcgKCkge1xuICAgIHJldHVybiB7XG4gICAgICBpY29uOiB7XG4gICAgICAgIGFuY2hvcjogbnVsbCwgLy8gZS5nLiB7IHg6IDEsIHk6IDEgfVxuICAgICAgICBzdmc6IG51bGwsXG4gICAgICAgIHVybDogbnVsbCxcbiAgICAgICAgc2NhbGVkU2l6ZTogbnVsbCAvLyBlLmcuIHsgdzogMjAsIGg6IDIwIH1cbiAgICAgIH0sXG4gICAgICBsYWJlbFR5cGU6ICdudW1lcmljJ1xuICAgIH07XG4gIH1cblxuICBzdGF0aWMgc2hvdWxkSGlkZU1hcCAobWFwRGF0YSwgcmVzdWx0c0NvbnRleHQsIHNob3dFbXB0eU1hcCwgdmlzaWJsZUZvck5vUmVzdWx0cykge1xuICAgIGlmIChyZXN1bHRzQ29udGV4dCA9PT0gUmVzdWx0c0NvbnRleHQuTk9fUkVTVUxUUyAmJiB2aXNpYmxlRm9yTm9SZXN1bHRzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiAhdmlzaWJsZUZvck5vUmVzdWx0cztcbiAgICB9XG4gICAgY29uc3QgaGFzRW1wdHlNYXAgPSAhbWFwRGF0YSB8fCBtYXBEYXRhLm1hcE1hcmtlcnMubGVuZ3RoIDw9IDA7XG4gICAgcmV0dXJuIGhhc0VtcHR5TWFwICYmICFzaG93RW1wdHlNYXA7XG4gIH1cblxuICBvbkxvYWRlZCAoY2IpIHtcbiAgICBpZiAodHlwZW9mIGNiICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5fb25Mb2FkZWQgPSBjYjtcbiAgICBpZiAodGhpcy5pc0xvYWRlZCgpKSB7XG4gICAgICB0aGlzLl9vbkxvYWRlZCgpO1xuICAgIH1cbiAgfVxuXG4gIGlzTG9hZGVkICgpIHtcbiAgICByZXR1cm4gdGhpcy5faXNMb2FkZWQ7XG4gIH1cblxuICBsb2FkSlMgKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignVW5pbXBsZW1lbnRlZCBNZXRob2Q6IGxvYWRKUycpO1xuICB9XG5cbiAgaW5pdCAobWFwRGF0YSkge1xuICAgIC8vIFRPRE8oYmlsbHkpIFRoaXMgc2hvdWxkIGJlIGJhc2VkIG9mZiBhIHByb21pc2UgdGhhdCBnZXRzIGNyZWF0ZWQgZnJvbSBsb2FkSlNcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1VuaW1wbGVtZW50ZWQgTWV0aG9kOiBpbml0Jyk7XG4gIH1cblxuICAvKipcbiAgICogR2l2ZW4gYSBsaXN0IG9mIG1hcmtlcnMsIGNvbWJpbmUgbWFya2VycyB3aXRoIHRoZSBzYW1lIGxhdC9sbmcgaW50byBhIHNpbmdsZSBtYXJrZXJcbiAgICogQHBhcmFtIHtvYmplY3RbXX0gbWFya2VycyBUaGUgbWFya2VycyB0byBjb2xsYXBzZVxuICAgKi9cbiAgX2NvbGxhcHNlTWFya2VycyAobWFya2Vycykge1xuICAgIGNvbnN0IGxvY2F0aW9uVG9JdGVtID0ge307XG4gICAgbWFya2Vycy5mb3JFYWNoKG0gPT4ge1xuICAgICAgbG9jYXRpb25Ub0l0ZW1bYCR7bS5sYXRpdHVkZX0ke20ubG9uZ2l0dWRlfWBdXG4gICAgICAgID8gbG9jYXRpb25Ub0l0ZW1bYCR7bS5sYXRpdHVkZX0ke20ubG9uZ2l0dWRlfWBdLnB1c2gobSlcbiAgICAgICAgOiBsb2NhdGlvblRvSXRlbVtgJHttLmxhdGl0dWRlfSR7bS5sb25naXR1ZGV9YF0gPSBbbV07XG4gICAgfSk7XG5cbiAgICBjb25zdCBjb2xsYXBzZWRNYXJrZXJzID0gW107XG4gICAgZm9yIChsZXQgWywgbWFya2Vyc10gb2YgT2JqZWN0LmVudHJpZXMobG9jYXRpb25Ub0l0ZW0pKSB7XG4gICAgICBpZiAobWFya2Vycy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGNvbnN0IGNvbGxhcHNlZE1hcmtlciA9IHtcbiAgICAgICAgICBpdGVtOiBtYXJrZXJzLm1hcChtID0+IG0uaXRlbSksXG4gICAgICAgICAgbGFiZWw6IG1hcmtlcnMubGVuZ3RoLFxuICAgICAgICAgIGxhdGl0dWRlOiBtYXJrZXJzWzBdLmxhdGl0dWRlLFxuICAgICAgICAgIGxvbmdpdHVkZTogbWFya2Vyc1swXS5sb25naXR1ZGVcbiAgICAgICAgfTtcbiAgICAgICAgY29sbGFwc2VkTWFya2Vycy5wdXNoKGNvbGxhcHNlZE1hcmtlcik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb2xsYXBzZWRNYXJrZXJzLnB1c2gobWFya2Vyc1swXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbGxhcHNlZE1hcmtlcnM7XG4gIH1cbn1cbiIsIi8qKiBAbW9kdWxlIEdvb2dsZU1hcFByb3ZpZGVyICovXG5cbmltcG9ydCBNYXBQcm92aWRlciBmcm9tICcuL21hcHByb3ZpZGVyJztcbmltcG9ydCBET00gZnJvbSAnLi4vLi4vLi4vZG9tL2RvbSc7XG5cbi8qIGdsb2JhbCBnb29nbGUgKi9cblxuLyoqXG4gKiBHb29nbGVNYXBQcm92aWRlciBpcyBhbiBpbXBsZW1lbnRhdGlvbiBvZiBhIE1hcFByb3ZpZGVyXG4gKiB0aGF0IGhhbmRsZXMgdGhlIGludGVncmF0aW9uIHdpdGggdGhlIHRoaXJkIHBhcnR5IEFQSSB0byBleHBvc2UgbWFwcy5cbiAqIEBleHRlbmRzIE1hcFByb3ZpZGVyXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEdvb2dsZU1hcFByb3ZpZGVyIGV4dGVuZHMgTWFwUHJvdmlkZXIge1xuICBjb25zdHJ1Y3RvciAob3B0cykge1xuICAgIHN1cGVyKG9wdHMpO1xuXG4gICAgLy8gbm9ybWFsaXplIGJlY2F1c2UgZ29vZ2xlJ3Mgem9vbSBpcyBlZmZlY3RpdmVseSAxIHVuaXQgb2YgZGlmZmVyZW5jZSBhd2F5IGZyb20gbWFwYm94IHpvb21cbiAgICB0aGlzLl96b29tT2Zmc2V0ID0gMTtcbiAgICB0aGlzLl96b29tICs9IHRoaXMuX3pvb21PZmZzZXQ7XG4gICAgdGhpcy5fY2xpZW50SWQgPSBvcHRzLmNsaWVudElkO1xuICAgIHRoaXMuX3NpZ25hdHVyZSA9IG9wdHMuc2lnbmF0dXJlO1xuXG4gICAgaWYgKCF0aGlzLmhhc1ZhbGlkQ2xpZW50Q3JlZGVudGlhbHMoKSAmJiAhdGhpcy5fYXBpS2V5KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0dvb2dsZU1hcHNQcm92aWRlcjogTWlzc2luZyBgYXBpS2V5YCBvciB7YGNsaWVudElkYCwgYHNpZ25hdHVyZWB9Jyk7XG4gICAgfVxuICB9XG5cbiAgbG9hZEpTICgpIHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICBjb25zdCBvbkxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAodHlwZW9mIHNlbGYuX29uTG9hZGVkID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHNlbGYuX29uTG9hZGVkKCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGlmICh0eXBlb2YgZ29vZ2xlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgc2VsZi5faXNMb2FkZWQgPSB0cnVlO1xuICAgICAgb25Mb2FkKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbGV0IHNjcmlwdCA9IERPTS5xdWVyeSgnI3lleHQtbWFwLWpzJyk7XG4gICAgaWYgKHNjcmlwdCkge1xuICAgICAgY29uc3Qgb25Mb2FkRnVuYyA9IHNjcmlwdC5vbmxvYWQ7XG4gICAgICBzY3JpcHQub25sb2FkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBvbkxvYWRGdW5jKCk7XG4gICAgICAgIG9uTG9hZCgpO1xuICAgICAgfTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBzY3JpcHQgPSBET00uY3JlYXRlRWwoJ3NjcmlwdCcsIHtcbiAgICAgIGlkOiAneWV4dC1tYXAtanMnLFxuICAgICAgb25sb2FkOiAoKSA9PiB7XG4gICAgICAgIHNlbGYuX2lzTG9hZGVkID0gdHJ1ZTtcbiAgICAgICAgb25Mb2FkKCk7XG4gICAgICB9LFxuICAgICAgYXN5bmM6IHRydWUsXG4gICAgICBzcmM6IGBodHRwczovL21hcHMuZ29vZ2xlYXBpcy5jb20vbWFwcy9hcGkvanM/JHtzZWxmLmdlbmVyYXRlQ3JlZGVudGlhbHMoKX1gXG4gICAgfSk7XG5cbiAgICBET00uYXBwZW5kKCdib2R5Jywgc2NyaXB0KTtcbiAgfVxuXG4gIGdlbmVyYXRlQ3JlZGVudGlhbHMgKCkge1xuICAgIGlmICh0aGlzLmhhc1ZhbGlkQ2xpZW50Q3JlZGVudGlhbHMoKSkge1xuICAgICAgcmV0dXJuIGBjbGllbnQ9JHt0aGlzLl9jbGllbnRJZH1gO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gYGtleT0ke3RoaXMuX2FwaUtleX1gO1xuICAgIH1cbiAgfVxuXG4gIGhhc1ZhbGlkQ2xpZW50Q3JlZGVudGlhbHMgKCkge1xuICAgIHJldHVybiB0aGlzLl9jbGllbnRJZDtcbiAgfVxuXG4gIGluaXQgKGVsLCBtYXBEYXRhLCByZXN1bHRzQ29udGV4dCkge1xuICAgIGlmIChNYXBQcm92aWRlci5zaG91bGRIaWRlTWFwKG1hcERhdGEsIHJlc3VsdHNDb250ZXh0LCB0aGlzLl9zaG93RW1wdHlNYXAsIHRoaXMuX25vUmVzdWx0cy52aXNpYmxlKSkge1xuICAgICAgdGhpcy5fbWFwID0gbnVsbDtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vIE5PVEUoYmlsbHkpIFRoaXMgdGltZW91dCBpcyBhIGhhY2sgZm9yIGRlYWxpbmcgd2l0aCBhc3luYyBuYXR1cmUuXG4gICAgLy8gT25seSBoZXJlIGZvciBkZW1vIHB1cnBvc2VzLCBzbyB3ZSdsbCBmaXggbGF0ZXIuXG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBsZXQgY29udGFpbmVyID0gRE9NLnF1ZXJ5KGVsKTtcbiAgICAgIHRoaXMubWFwID0gbmV3IGdvb2dsZS5tYXBzLk1hcChjb250YWluZXIsIHtcbiAgICAgICAgem9vbTogdGhpcy5fem9vbSxcbiAgICAgICAgY2VudGVyOiB0aGlzLmdldENlbnRlck1hcmtlcihtYXBEYXRhKVxuICAgICAgfSk7XG5cbiAgICAgIC8vIEFwcGx5IG91ciBzZWFyY2ggZGF0YSB0byBvdXIgR29vZ2xlTWFwXG4gICAgICBpZiAobWFwRGF0YSAmJiBtYXBEYXRhLm1hcE1hcmtlcnMubGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IGNvbGxhcHNlZE1hcmtlcnMgPSB0aGlzLl9jb2xsYXBzZVBpbnNcbiAgICAgICAgICA/IHRoaXMuX2NvbGxhcHNlTWFya2VycyhtYXBEYXRhLm1hcE1hcmtlcnMpXG4gICAgICAgICAgOiBtYXBEYXRhLm1hcE1hcmtlcnM7XG4gICAgICAgIGxldCBnb29nbGVNYXBNYXJrZXJDb25maWdzID0gR29vZ2xlTWFwTWFya2VyQ29uZmlnLmZyb20oXG4gICAgICAgICAgY29sbGFwc2VkTWFya2VycyxcbiAgICAgICAgICB0aGlzLl9waW5Db25maWcsXG4gICAgICAgICAgdGhpcy5tYXApO1xuXG4gICAgICAgIGxldCBib3VuZHMgPSBuZXcgZ29vZ2xlLm1hcHMuTGF0TG5nQm91bmRzKCk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZ29vZ2xlTWFwTWFya2VyQ29uZmlncy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGxldCBtYXJrZXIgPSBuZXcgZ29vZ2xlLm1hcHMuTWFya2VyKGdvb2dsZU1hcE1hcmtlckNvbmZpZ3NbaV0pO1xuICAgICAgICAgIGlmICh0aGlzLl9vblBpbkNsaWNrKSB7XG4gICAgICAgICAgICBtYXJrZXIuYWRkTGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gdGhpcy5fb25QaW5DbGljayhjb2xsYXBzZWRNYXJrZXJzW2ldLml0ZW0pKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYm91bmRzLmV4dGVuZChtYXJrZXIucG9zaXRpb24pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGdvb2dsZU1hcE1hcmtlckNvbmZpZ3MubGVuZ3RoID49IDIpIHtcbiAgICAgICAgICB0aGlzLm1hcC5maXRCb3VuZHMoYm91bmRzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIDEwMCk7XG4gIH1cblxuICBnZXRDZW50ZXJNYXJrZXIgKG1hcERhdGEpIHtcbiAgICByZXR1cm4gbWFwRGF0YSAmJiBtYXBEYXRhLm1hcENlbnRlciAmJiBtYXBEYXRhLm1hcENlbnRlci5sb25naXR1ZGUgJiYgbWFwRGF0YS5tYXBDZW50ZXIubGF0aXR1ZGVcbiAgICAgID8geyBsbmc6IG1hcERhdGEubWFwQ2VudGVyLmxvbmdpdHVkZSwgbGF0OiBtYXBEYXRhLm1hcENlbnRlci5sYXRpdHVkZSB9XG4gICAgICA6IHsgbG5nOiB0aGlzLl9kZWZhdWx0UG9zaXRpb24ubG5nLCBsYXQ6IHRoaXMuX2RlZmF1bHRQb3NpdGlvbi5sYXQgfTtcbiAgfVxufVxuXG4vLyBUT0RPKGJpbGx5KSBNb3ZlIHRvIG93biBjbGFzc1xuZXhwb3J0IGNsYXNzIEdvb2dsZU1hcE1hcmtlckNvbmZpZyB7XG4gIGNvbnN0cnVjdG9yIChvcHRzKSB7XG4gICAgLyoqXG4gICAgICogQSByZWZlcmVuY2UgdG8gdGhlIGdvb2dsZSBtYXAsIHRoYXQgdGhlIG1hcmtlciBpcyBhcHBlbmRlZCB0b1xuICAgICAqIEB0eXBlIHtHb29nbGVNYXB9XG4gICAgICovXG4gICAgdGhpcy5tYXAgPSBvcHRzLm1hcCB8fCB1bmRlZmluZWQ7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgY29vcmRpbmF0ZXMgb2YgdGhlIG1hcmtlciAobGF0L2xuZylcbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAqL1xuICAgIHRoaXMucG9zaXRpb24gPSBvcHRzLnBvc2l0aW9uIHx8IHtcbiAgICAgIGxhdDogdW5kZWZpbmVkLFxuICAgICAgbG5nOiB1bmRlZmluZWRcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVGhlIHByb3BlcnRpZXMvc2V0dGluZ3Mgb2YgdGhlIGljb24gdXNlZCBmb3IgdGhlIG1hcmtlclxuICAgICAqIGUuZy4ge1xuICAgICAqICAgICAgICBhbmNob3I6IHsgeDogMCwgeTogMCB9XG4gICAgICogICAgICAgIHVybDogJ3BhdGgvdG8vdXJsLmpwZydcbiAgICAgKiAgICAgICAgc2NhbGVkU2l6ZTogeyB3OiAwLCBoOiAwIH1cbiAgICAgKiAgICAgICB9XG4gICAgICpcbiAgICAgKiBAdHlwZSB7b2JqZWN0fVxuICAgICAqL1xuICAgIHRoaXMuaWNvbiA9IG9wdHMuaWNvbiB8fCB1bmRlZmluZWQ7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgbGFiZWwgb2YgdGhlIG1hcmtlciB0byB1c2VcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMubGFiZWwgPSBvcHRzLmxhYmVsIHx8IHVuZGVmaW5lZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXJpYWxpemVzIGFuIGFycmF5IG9mIG1hcmtlciBjb25maWdzXG4gICAqIEBwYXJhbSB7R29vZ2xlTWFwTWFya2VyQ29uZmlnW119IGdvb2dsZU1hcE1hcmtlckNvbmZpZ3NcbiAgICogQHJldHVybnMge3N0cmluZ1tdfVxuICAgKi9cbiAgc3RhdGljIHNlcmlhbGl6ZSAoZ29vZ2xlTWFwTWFya2VyQ29uZmlncykge1xuICAgIGxldCBzZXJpYWxpemVkTWFya2VycyA9IFtdO1xuICAgIGdvb2dsZU1hcE1hcmtlckNvbmZpZ3MuZm9yRWFjaCgobWFya2VyKSA9PiB7XG4gICAgICBzZXJpYWxpemVkTWFya2Vycy5wdXNoKGBtYXJrZXJzPWxhYmVsOiR7bWFya2VyLmxhYmVsfXwke21hcmtlci5wb3NpdGlvbi5sYXR9LCR7bWFya2VyLnBvc2l0aW9uLmxuZ31gKTtcbiAgICB9KTtcbiAgICByZXR1cm4gc2VyaWFsaXplZE1hcmtlcnMuam9pbignJicpO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIHRoZSBzdG9yYWdlIGRhdGEgbW9kZWwgb2YgbWFya2VycyBpbnRvIEdvb2dsZUFQSU1hcmtlclxuICAgKiBAcGFyYW0ge29iamVjdFtdfSBtYXJrZXJzIFRoZSBkYXRhIG9mIHRoZSBtYXJrZXJcbiAgICogQHBhcmFtIHsoT2JqZWN0fGZ1bmN0aW9uKX0gcGluQ29uZmlnIFRoZSBjb25maWd1cmF0aW9uIHRvIGFwcGx5IHRvIHRoZSBtYXJrZXJcbiAgICogQHBhcmFtIHtHb29nbGVNYXB9IG1hcCByZWZlcmVuY2UgdG8gdGhlIGdvb2dsZSBtYXAgdG8gYXBwbHkgdGhlIG1hcmtlciB0b1xuICAgKiBAcmV0dXJucyB7R29vZ2xlTWFwTWFya2VyQ29uZmlnW119XG4gICAqL1xuICBzdGF0aWMgZnJvbSAobWFya2VycywgcGluQ29uZmlnLCBtYXApIHtcbiAgICBsZXQgZ29vZ2xlTWFwTWFya2VyQ29uZmlncyA9IFtdO1xuICAgIGlmICghQXJyYXkuaXNBcnJheShtYXJrZXJzKSkge1xuICAgICAgbWFya2VycyA9IFttYXJrZXJzXTtcbiAgICB9XG5cbiAgICBtYXJrZXJzLmZvckVhY2goKG1hcmtlcikgPT4ge1xuICAgICAgLy8gU3VwcG9ydCBjb25maWd1cmF0aW9uIGFzIGEgZnVuY3Rpb25cbiAgICAgIGxldCBwaW5Db25maWdPYmogPSBwaW5Db25maWc7XG4gICAgICBpZiAodHlwZW9mIHBpbkNvbmZpZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBwaW5Db25maWdPYmogPSBwaW5Db25maWcoXG4gICAgICAgICAgbWFya2VyLml0ZW0sXG4gICAgICAgICAgTWFwUHJvdmlkZXIuREVGQVVMVF9QSU5fQ09ORklHLFxuICAgICAgICAgIG1hcmtlcik7XG4gICAgICB9XG5cbiAgICAgIC8vIFRyYW5zZm9ybSBvdXIgQ29uZmlndXJhdGlvbiBPYmplY3QgaW50byB0aGUgZXhwZWN0ZWRcbiAgICAgIC8vIEdvb2dsZSBBUEkgZm9ybWF0LlxuICAgICAgbGV0IGljb24gPSB7fTtcbiAgICAgIGlmIChwaW5Db25maWdPYmouYW5jaG9yKSB7XG4gICAgICAgIGljb24uYW5jaG9yID0gZ29vZ2xlLm1hcHMuUG9pbnQocGluQ29uZmlnT2JqLmFuY2hvci54LCBwaW5Db25maWdPYmouYW5jaG9yLnkpO1xuICAgICAgfVxuXG4gICAgICBpZiAocGluQ29uZmlnT2JqLnNjYWxlZFNpemUpIHtcbiAgICAgICAgaWNvbi5zY2FsZWRTaXplID0gbmV3IGdvb2dsZS5tYXBzLlNpemUocGluQ29uZmlnT2JqLnNjYWxlZFNpemUudywgcGluQ29uZmlnT2JqLnNjYWxlZFNpemUuaCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChwaW5Db25maWdPYmoudXJsKSB7XG4gICAgICAgIGljb24udXJsID0gcGluQ29uZmlnT2JqLnVybDtcbiAgICAgIH1cblxuICAgICAgaWYgKHBpbkNvbmZpZ09iai5zdmcpIHtcbiAgICAgICAgaWNvbi51cmwgPSBgZGF0YTppbWFnZS9zdmcreG1sO2NoYXJzZXQ9dXRmLTgsICR7ZW5jb2RlVVJJQ29tcG9uZW50KHBpbkNvbmZpZ09iai5zdmcpfWA7XG4gICAgICB9XG5cbiAgICAgIGxldCBsYWJlbDtcbiAgICAgIGlmIChwaW5Db25maWdPYmoubGFiZWwpIHtcbiAgICAgICAgbGFiZWwgPSBwaW5Db25maWdPYmoubGFiZWw7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsYWJlbCA9IG1hcmtlci5sYWJlbC50b1N0cmluZygpO1xuICAgICAgfVxuXG4gICAgICAvLyBOT1RFKGJpbGx5KSBHb29nbGUgbWFwcyBkb2Vzbid0IGhhbmRsZSBlbXB0eSBpY29uIG9iamVjdHMgbmljZWx5XG4gICAgICAvLyBNYWtlIGdvb2dsZSBtYXBzIGhhcHB5IGlmIG5vIHNldHRpbmdzIGZvciBpY29uIGFyZSBwcm92aWRlZDtcbiAgICAgIGlmIChPYmplY3Qua2V5cyhpY29uKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgaWNvbiA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgICAgZ29vZ2xlTWFwTWFya2VyQ29uZmlncy5wdXNoKFxuICAgICAgICBuZXcgR29vZ2xlTWFwTWFya2VyQ29uZmlnKHtcbiAgICAgICAgICBtYXA6IG1hcCxcbiAgICAgICAgICBwb3NpdGlvbjoge1xuICAgICAgICAgICAgbGF0OiBtYXJrZXIubGF0aXR1ZGUsXG4gICAgICAgICAgICBsbmc6IG1hcmtlci5sb25naXR1ZGVcbiAgICAgICAgICB9LFxuICAgICAgICAgIGljb246IGljb24sXG4gICAgICAgICAgbGFiZWw6IGxhYmVsXG4gICAgICAgIH0pXG4gICAgICApO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIGdvb2dsZU1hcE1hcmtlckNvbmZpZ3M7XG4gIH1cbn1cbiIsIi8qKiBAbW9kdWxlIE1hcEJveE1hcFByb3ZpZGVyICovXG5cbmltcG9ydCBNYXBQcm92aWRlciBmcm9tICcuL21hcHByb3ZpZGVyJztcbmltcG9ydCBET00gZnJvbSAnLi4vLi4vLi4vZG9tL2RvbSc7XG5cbi8qIGdsb2JhbCBtYXBib3hnbCAqL1xuXG4vKipcbiAqIE1hcEJveE1hcFByb3ZpZGVyIGlzIGFuIGltcGxlbWVudGF0aW9uIG9mIGEgTWFwUHJvdmlkZXJcbiAqIHRoYXQgaGFuZGxlcyB0aGUgaW50ZWdyYXRpb24gd2l0aCB0aGUgdGhpcmQgcGFydHkgQVBJIHRvIGV4cG9zZSBtYXBzLlxuICogQGV4dGVuZHMgTWFwUHJvdmlkZXJcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTWFwQm94TWFwUHJvdmlkZXIgZXh0ZW5kcyBNYXBQcm92aWRlciB7XG4gIC8qKlxuICAgKiBMb2FkIHRoZSBleHRlcm5hbCBKUyBMaWJyYXJ5XG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IG9uTG9hZCBBbiBvcHRpb25hbCBjYWxsYmFjayB0byBpbnZva2Ugb25jZSB0aGUgSlMgaXMgbG9hZGVkLlxuICAgKi9cbiAgbG9hZEpTIChvbkxvYWQpIHtcbiAgICBsZXQgc2NyaXB0ID0gRE9NLmNyZWF0ZUVsKCdzY3JpcHQnLCB7XG4gICAgICBpZDogJ3lleHQtbWFwLWpzJyxcbiAgICAgIG9ubG9hZDogKCkgPT4ge1xuICAgICAgICB0aGlzLl9pc0xvYWRlZCA9IHRydWU7XG4gICAgICAgIG1hcGJveGdsLmFjY2Vzc1Rva2VuID0gdGhpcy5fYXBpS2V5O1xuXG4gICAgICAgIGlmICh0eXBlb2Ygb25Mb2FkID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgb25Mb2FkKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIHRoaXMuX29uTG9hZGVkID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgdGhpcy5fb25Mb2FkZWQoKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGFzeW5jOiB0cnVlLFxuICAgICAgc3JjOiAnaHR0cHM6Ly9hcGkubWFwYm94LmNvbS9tYXBib3gtZ2wtanMvdjAuNDQuMS9tYXBib3gtZ2wuanMnXG4gICAgfSk7XG5cbiAgICBsZXQgY3NzID0gRE9NLmNyZWF0ZUVsKCdsaW5rJywge1xuICAgICAgaWQ6ICd5ZXh0LW1hcC1jc3MnLFxuICAgICAgcmVsOiAnc3R5bGVzaGVldCcsXG4gICAgICBocmVmOiAnaHR0cHM6Ly9hcGkubWFwYm94LmNvbS9tYXBib3gtZ2wtanMvdjAuNDQuMS9tYXBib3gtZ2wuY3NzJ1xuICAgIH0pO1xuXG4gICAgRE9NLmFwcGVuZCgnYm9keScsIGNzcyk7XG4gICAgRE9NLmFwcGVuZCgnYm9keScsIHNjcmlwdCk7XG4gIH1cblxuICBpbml0IChlbCwgbWFwRGF0YSwgcmVzdWx0c0NvbnRleHQpIHtcbiAgICBpZiAoTWFwUHJvdmlkZXIuc2hvdWxkSGlkZU1hcChtYXBEYXRhLCByZXN1bHRzQ29udGV4dCwgdGhpcy5fc2hvd0VtcHR5TWFwLCB0aGlzLl9ub1Jlc3VsdHMudmlzaWJsZSkpIHtcbiAgICAgIHRoaXMuX21hcCA9IG51bGw7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBsZXQgY29udGFpbmVyID0gRE9NLnF1ZXJ5KGVsKTtcbiAgICB0aGlzLl9tYXAgPSBuZXcgbWFwYm94Z2wuTWFwKHtcbiAgICAgIGNvbnRhaW5lcjogY29udGFpbmVyLFxuICAgICAgem9vbTogdGhpcy5fem9vbSxcbiAgICAgIHN0eWxlOiAnbWFwYm94Oi8vc3R5bGVzL21hcGJveC9zdHJlZXRzLXY5JyxcbiAgICAgIGNlbnRlcjogdGhpcy5nZXRDZW50ZXJNYXJrZXIobWFwRGF0YSlcbiAgICB9KTtcblxuICAgIGlmIChtYXBEYXRhICYmIG1hcERhdGEubWFwTWFya2Vycy5sZW5ndGgpIHtcbiAgICAgIGNvbnN0IGNvbGxhcHNlZE1hcmtlcnMgPSB0aGlzLl9jb2xsYXBzZVBpbnNcbiAgICAgICAgPyB0aGlzLl9jb2xsYXBzZU1hcmtlcnMobWFwRGF0YS5tYXBNYXJrZXJzKVxuICAgICAgICA6IG1hcERhdGEubWFwTWFya2VycztcbiAgICAgIGNvbnN0IG1hcGJveE1hcE1hcmtlckNvbmZpZ3MgPSBNYXBCb3hNYXJrZXJDb25maWcuZnJvbShcbiAgICAgICAgY29sbGFwc2VkTWFya2VycyxcbiAgICAgICAgdGhpcy5fcGluQ29uZmlnLFxuICAgICAgICB0aGlzLl9tYXApO1xuXG4gICAgICBjb25zdCBib3VuZHMgPSBuZXcgbWFwYm94Z2wuTG5nTGF0Qm91bmRzKCk7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1hcGJveE1hcE1hcmtlckNvbmZpZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbGV0IHdyYXBwZXIgPSBtYXBib3hNYXBNYXJrZXJDb25maWdzW2ldLndyYXBwZXI7XG4gICAgICAgIGxldCBjb29yZHMgPSBuZXcgbWFwYm94Z2wuTG5nTGF0KFxuICAgICAgICAgIG1hcGJveE1hcE1hcmtlckNvbmZpZ3NbaV0ucG9zaXRpb24ubG9uZ2l0dWRlLFxuICAgICAgICAgIG1hcGJveE1hcE1hcmtlckNvbmZpZ3NbaV0ucG9zaXRpb24ubGF0aXR1ZGUpO1xuICAgICAgICBsZXQgbWFya2VyID0gbmV3IG1hcGJveGdsLk1hcmtlcih3cmFwcGVyKS5zZXRMbmdMYXQoY29vcmRzKTtcbiAgICAgICAgYm91bmRzLmV4dGVuZChtYXJrZXIuZ2V0TG5nTGF0KCkpO1xuICAgICAgICBtYXJrZXIuYWRkVG8odGhpcy5fbWFwKTtcbiAgICAgICAgaWYgKHRoaXMuX29uUGluQ2xpY2spIHtcbiAgICAgICAgICBtYXJrZXIuZ2V0RWxlbWVudCgpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gdGhpcy5fb25QaW5DbGljayhjb2xsYXBzZWRNYXJrZXJzW2ldLml0ZW0pKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKG1hcGJveE1hcE1hcmtlckNvbmZpZ3MubGVuZ3RoID49IDIpIHtcbiAgICAgICAgdGhpcy5fbWFwLmZpdEJvdW5kcyhib3VuZHMsIHsgcGFkZGluZzogNTAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZ2V0Q2VudGVyTWFya2VyIChtYXBEYXRhKSB7XG4gICAgcmV0dXJuIG1hcERhdGEgJiYgbWFwRGF0YS5tYXBDZW50ZXIgJiYgbWFwRGF0YS5tYXBDZW50ZXIubG9uZ2l0dWRlICYmIG1hcERhdGEubWFwQ2VudGVyLmxhdGl0dWRlXG4gICAgICA/IFttYXBEYXRhLm1hcENlbnRlci5sb25naXR1ZGUsIG1hcERhdGEubWFwQ2VudGVyLmxhdGl0dWRlXVxuICAgICAgOiB7IGxuZzogdGhpcy5fZGVmYXVsdFBvc2l0aW9uLmxuZywgbGF0OiB0aGlzLl9kZWZhdWx0UG9zaXRpb24ubGF0IH07XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIE1hcEJveE1hcmtlckNvbmZpZyB7XG4gIGNvbnN0cnVjdG9yIChvcHRzKSB7XG4gICAgLyoqXG4gICAgICogQSByZWZlcmVuY2UgdG8gdGhlIG1hcGJveCBtYXAsIHRoYXQgdGhlIG1hcmtlciBpcyBhcHBlbmRlZCB0b1xuICAgICAqIEB0eXBlIHtNYXBCb3h9XG4gICAgICovXG4gICAgdGhpcy5tYXAgPSBvcHRzLm1hcCB8fCB1bmRlZmluZWQ7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgY29vcmRpbmF0ZXMgb2YgdGhlIG1hcmtlciAobGF0L2xuZylcbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAqL1xuICAgIHRoaXMucG9zaXRpb24gPSBvcHRzLnBvc2l0aW9uIHx8IHtcbiAgICAgIGxhdGl0dWRlOiB1bmRlZmluZWQsXG4gICAgICBsb25naXR1ZGU6IHVuZGVmaW5lZFxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBUaGUgaHRtbCBlbGVtZW50IHRvIGJlIHVzZWQgYXMgdGhlIG1hcCBtYXJrZXJcbiAgICAgKiBAdHlwZSB7b2JqZWN0fVxuICAgICAqL1xuICAgIHRoaXMud3JhcHBlciA9IG9wdHMud3JhcHBlciB8fCB1bmRlZmluZWQ7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgbGFiZWwgb2YgdGhlIG1hcmtlciB0byB1c2VcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMubGFiZWwgPSBvcHRzLmxhYmVsIHx8IHVuZGVmaW5lZDtcblxuICAgIC8qKlxuICAgICAqIFRoZSB1cmwgb2YgdGhlIHBpbiBmb3IgdGhlIHN0YXRpYyBtYXBcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMuc3RhdGljTWFwUGluID0gb3B0cy5zdGF0aWNNYXBQaW4gfHwgdW5kZWZpbmVkO1xuICB9XG5cbiAgLyoqXG4gICAqIFNlcmlhbGl6ZXMgYW4gYXJyYXkgb2YgbWFya2VyIGNvbmZpZ3NcbiAgICogQHBhcmFtIHtNYXBCb3hNYXJrZXJDb25maWdbXX0gbWFwYm94TWFwTWFya2VyQ29uZmlnc1xuICAgKiBAcmV0dXJucyB7c3RyaW5nW119XG4gICAqL1xuICBzdGF0aWMgc2VyaWFsaXplIChtYXBib3hNYXBNYXJrZXJDb25maWdzKSB7XG4gICAgbGV0IHNlcmlhbGl6ZWRNYXJrZXJzID0gW107XG4gICAgbWFwYm94TWFwTWFya2VyQ29uZmlncy5mb3JFYWNoKChtYXJrZXIpID0+IHtcbiAgICAgIGlmIChtYXJrZXIuc3RhdGljTWFwUGluKSB7XG4gICAgICAgIHNlcmlhbGl6ZWRNYXJrZXJzLnB1c2goYHVybC0ke21hcmtlci5zdGF0aWNNYXBQaW59KCR7bWFya2VyLnBvc2l0aW9uLmxvbmdpdHVkZX0sJHttYXJrZXIucG9zaXRpb24ubGF0aXR1ZGV9KWApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2VyaWFsaXplZE1hcmtlcnMucHVzaChgcGluLXMtJHttYXJrZXIubGFiZWx9KCR7bWFya2VyLnBvc2l0aW9uLmxvbmdpdHVkZX0sJHttYXJrZXIucG9zaXRpb24ubGF0aXR1ZGV9KWApO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBzZXJpYWxpemVkTWFya2Vycy5qb2luKCcsJyk7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgdGhlIHN0b3JhZ2UgZGF0YSBtb2RlbCBvZiBtYXJrZXJzIGludG8gTWFwQm94TWFya2VyQ29uZmlnXG4gICAqIEBwYXJhbSB7TWFwQm94fSBBIHJlZmVyZW5jZSB0byB0aGUgbWFwYm94IG1hcCB0byBhcHBseSB0aGUgbWFya2VyIHRvXG4gICAqIEBwYXJhbSB7b2JqZWN0W119IG1hcmtlcnMgVGhlIGRhdGEgb2YgdGhlIG1hcmtlclxuICAgKiBAcGFyYW0ge09iamVjdH0gcGluQ29uZmlnIFRoZSBjb25maWd1cmF0aW9uIHRvIGFwcGx5IHRvIHRoZSBtYXJrZXJcbiAgICogQHJldHVybnMge01hcEJveE1hcmtlckNvbmZpZ1tdfVxuICAgKi9cbiAgc3RhdGljIGZyb20gKG1hcmtlcnMsIHBpbkNvbmZpZywgbWFwKSB7XG4gICAgbGV0IG1hcGJveE1hcE1hcmtlckNvbmZpZ3MgPSBbXTtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkobWFya2VycykpIHtcbiAgICAgIG1hcmtlcnMgPSBbbWFya2Vyc107XG4gICAgfVxuXG4gICAgbWFya2Vycy5mb3JFYWNoKChtYXJrZXIpID0+IHtcbiAgICAgIC8vIFN1cHBvcnQgY29uZmlndXJhdGlvbiBhcyBhIGZ1bmN0aW9uXG4gICAgICBsZXQgcGluQ29uZmlnT2JqID0gcGluQ29uZmlnO1xuICAgICAgaWYgKHR5cGVvZiBwaW5Db25maWcgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcGluQ29uZmlnT2JqID0gcGluQ29uZmlnKFxuICAgICAgICAgIG1hcmtlci5pdGVtLFxuICAgICAgICAgIE1hcFByb3ZpZGVyLkRFRkFVTFRfUElOX0NPTkZJRyxcbiAgICAgICAgICBtYXJrZXIpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCB3cmFwcGVyID0gcGluQ29uZmlnT2JqLndyYXBwZXIgPyBwaW5Db25maWdPYmoud3JhcHBlciA6IG51bGw7XG4gICAgICBjb25zdCBzdGF0aWNNYXBQaW4gPSBwaW5Db25maWdPYmouc3RhdGljTWFwUGluID8gcGluQ29uZmlnT2JqLnN0YXRpY01hcFBpbiA6IG51bGw7XG5cbiAgICAgIG1hcGJveE1hcE1hcmtlckNvbmZpZ3MucHVzaChcbiAgICAgICAgbmV3IE1hcEJveE1hcmtlckNvbmZpZyh7XG4gICAgICAgICAgbWFwOiBtYXAsXG4gICAgICAgICAgcG9zaXRpb246IHtcbiAgICAgICAgICAgIGxhdGl0dWRlOiBtYXJrZXIubGF0aXR1ZGUsXG4gICAgICAgICAgICBsb25naXR1ZGU6IG1hcmtlci5sb25naXR1ZGVcbiAgICAgICAgICB9LFxuICAgICAgICAgIHdyYXBwZXI6IHdyYXBwZXIsXG4gICAgICAgICAgbGFiZWw6IG1hcmtlci5sYWJlbCxcbiAgICAgICAgICBzdGF0aWNNYXBQaW46IHN0YXRpY01hcFBpblxuICAgICAgICB9KVxuICAgICAgKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBtYXBib3hNYXBNYXJrZXJDb25maWdzO1xuICB9XG59XG4iLCIvKiogQG1vZHVsZSBNYXBDb21wb25lbnQgKi9cblxuaW1wb3J0IENvbXBvbmVudCBmcm9tICcuLi9jb21wb25lbnQnO1xuXG5pbXBvcnQgR29vZ2xlTWFwUHJvdmlkZXIgZnJvbSAnLi9wcm92aWRlcnMvZ29vZ2xlbWFwcHJvdmlkZXInO1xuaW1wb3J0IE1hcEJveE1hcFByb3ZpZGVyIGZyb20gJy4vcHJvdmlkZXJzL21hcGJveG1hcHByb3ZpZGVyJztcblxuaW1wb3J0IFN0b3JhZ2VLZXlzIGZyb20gJy4uLy4uLy4uL2NvcmUvc3RvcmFnZS9zdG9yYWdla2V5cyc7XG5pbXBvcnQgUmVzdWx0c0NvbnRleHQgZnJvbSAnLi4vLi4vLi4vY29yZS9zdG9yYWdlL3Jlc3VsdHNjb250ZXh0JztcblxuY29uc3QgUHJvdmlkZXJUeXBlcyA9IHtcbiAgJ2dvb2dsZSc6IEdvb2dsZU1hcFByb3ZpZGVyLFxuICAnbWFwYm94JzogTWFwQm94TWFwUHJvdmlkZXJcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1hcENvbXBvbmVudCBleHRlbmRzIENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yIChvcHRzID0ge30sIHN5c3RlbU9wdHMgPSB7fSkge1xuICAgIHN1cGVyKG9wdHMsIHN5c3RlbU9wdHMpO1xuXG4gICAgLyoqXG4gICAgICogQmluZCB0aGlzIGNvbXBvbmVudCB0byBsaXN0ZW4gdG8gdGhlIHN0b3JhZ2UgYmFzZWQgb24gdGhpcyBrZXlcbiAgICAgKi9cbiAgICB0aGlzLm1vZHVsZUlkID0gU3RvcmFnZUtleXMuVkVSVElDQUxfUkVTVUxUUztcblxuICAgIC8qKlxuICAgICAqIENvbmZpZ3VyYXRpb24gZm9yIHRoZSBiZWhhdmlvciB3aGVuIHRoZXJlIGFyZSBubyB2ZXJ0aWNhbCByZXN1bHRzLlxuICAgICAqL1xuICAgIHRoaXMuX25vUmVzdWx0cyA9IHtcbiAgICAgIGRpc3BsYXlBbGxSZXN1bHRzOiBmYWxzZSxcbiAgICAgIHZpc2libGU6IHVuZGVmaW5lZCxcbiAgICAgIHRlbXBsYXRlOiAnJyxcbiAgICAgIC4uLihvcHRzLm5vUmVzdWx0cyB8fCB0aGlzLmNvcmUuZ2xvYmFsU3RvcmFnZS5nZXRTdGF0ZShTdG9yYWdlS2V5cy5OT19SRVNVTFRTX0NPTkZJRykpXG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEFuIGFsaWFzZWQgdXNlZCB0byBkZXRlcm1pbmUgdGhlIHR5cGUgb2YgbWFwIHByb3ZpZGVyIHRvIHVzZVxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgdGhpcy5fbWFwUHJvdmlkZXIgPSBvcHRzLm1hcFByb3ZpZGVyO1xuICAgIGlmICghdGhpcy5fbWFwUHJvdmlkZXIgfHwgISh0aGlzLl9tYXBQcm92aWRlci50b0xvd2VyQ2FzZSgpIGluIFByb3ZpZGVyVHlwZXMpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ01hcENvbXBvbmVudDogSW52YWxpZCBNYXAgUHJvdmlkZXI7IG11c3QgYmUgYGdvb2dsZWAgb3IgYG1hcEJveGAnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHJlZmVyZW5jZSB0byBhbiBpbnN0YW5jZSBvZiB0aGUge01hcFByb3ZpZGVyfSB0aGF0J3MgY29uc3RydWN0ZWRcbiAgICAgKiBAdHlwZSB7TWFwUHJvdmlkZXJ9XG4gICAgICovXG4gICAgdGhpcy5fbWFwID0gbnVsbDtcbiAgfVxuXG4gIHN0YXRpYyBnZXQgdHlwZSAoKSB7XG4gICAgcmV0dXJuICdNYXAnO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSB0ZW1wbGF0ZSB0byByZW5kZXJcbiAgICogQHJldHVybnMge3N0cmluZ31cbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBzdGF0aWMgZGVmYXVsdFRlbXBsYXRlTmFtZSAoY29uZmlnKSB7XG4gICAgcmV0dXJuICdyZXN1bHRzL21hcCc7XG4gIH1cblxuICAvLyBUT0RPKGJpbGx5KSBNYWtlIFByb3ZpZGVyVHlwZXMgYSBmYWN0b3J5IGNsYXNzXG4gIGdldFByb3ZpZGVySW5zdGFuY2UgKHR5cGUpIHtcbiAgICBjb25zdCBfY29uZmlnID0ge1xuICAgICAgLi4udGhpcy5fY29uZmlnLFxuICAgICAgbm9SZXN1bHRzOiB0aGlzLl9ub1Jlc3VsdHNcbiAgICB9O1xuICAgIHJldHVybiBuZXcgUHJvdmlkZXJUeXBlc1t0eXBlLnRvTG93ZXJDYXNlKCldKF9jb25maWcpO1xuICB9XG5cbiAgb25DcmVhdGUgKCkge1xuICAgIHRoaXMuX21hcCA9IHRoaXMuZ2V0UHJvdmlkZXJJbnN0YW5jZSh0aGlzLl9tYXBQcm92aWRlcik7XG4gICAgdGhpcy5fbWFwLmxvYWRKUygpO1xuICB9XG5cbiAgb25Nb3VudCAoKSB7XG4gICAgdGhpcy5fbWFwLm9uTG9hZGVkKCgpID0+IHtcbiAgICAgIHRoaXMuX21hcC5pbml0KHRoaXMuX2NvbnRhaW5lciwgdGhpcy5nZXRTdGF0ZSgnbWFwJyksIHRoaXMuZ2V0U3RhdGUoJ3Jlc3VsdHNDb250ZXh0JykpO1xuICAgIH0pO1xuICB9XG5cbiAgc2V0U3RhdGUgKGRhdGEsIHZhbCkge1xuICAgIGlmIChPYmplY3Qua2V5cyhkYXRhKS5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGlmIChkYXRhLnJlc3VsdHNDb250ZXh0ID09PSBSZXN1bHRzQ29udGV4dC5OT19SRVNVTFRTICYmICF0aGlzLl9ub1Jlc3VsdHMuZGlzcGxheUFsbFJlc3VsdHMpIHtcbiAgICAgIGRhdGEgPSB7XG4gICAgICAgIHJlc3VsdHNDb250ZXh0OiBkYXRhLnJlc3VsdHNDb250ZXh0XG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiBzdXBlci5zZXRTdGF0ZShkYXRhLCB2YWwpO1xuICB9XG59XG4iLCJleHBvcnQgY29uc3QgY2FyZFRlbXBsYXRlcyA9IHtcbiAgJ1N0YW5kYXJkJzogJ2NhcmRzL3N0YW5kYXJkJyxcbiAgJ0FjY29yZGlvbic6ICdjYXJkcy9hY2NvcmRpb24nLFxuICAnTGVnYWN5JzogJ2NhcmRzL2xlZ2FjeSdcbn07XG5cbmV4cG9ydCBjb25zdCBjYXJkVHlwZXMgPSB7XG4gICdTdGFuZGFyZCc6ICdTdGFuZGFyZENhcmQnLFxuICAnQWNjb3JkaW9uJzogJ0FjY29yZGlvbkNhcmQnLFxuICAnTGVnYWN5JzogJ0xlZ2FjeUNhcmQnXG59O1xuIiwiLyoqIEBtb2R1bGUgQ2FyZENvbXBvbmVudCAqL1xuXG5pbXBvcnQgQ29tcG9uZW50IGZyb20gJy4uL2NvbXBvbmVudCc7XG5pbXBvcnQgeyBjYXJkVHlwZXMgfSBmcm9tICcuL2NvbnN0cyc7XG5cbmNsYXNzIENhcmRDb25maWcge1xuICBjb25zdHJ1Y3RvciAoY29uZmlnID0ge30pIHtcbiAgICBPYmplY3QuYXNzaWduKHRoaXMsIGNvbmZpZyk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgY2FyZCB0eXBlIHRvIHVzZVxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgdGhpcy5jYXJkVHlwZSA9IGNvbmZpZy5jYXJkVHlwZSB8fCAnU3RhbmRhcmQnO1xuXG4gICAgLyoqXG4gICAgICogRGF0YSBtYXBwaW5ncyBpcyBhIGZ1bmN0aW9uIHNwZWNpZmllZCBpbiB0aGUgY29uZmlnXG4gICAgICogdGhhdCByZXR1cm5zIGNvbmZpZyBiYXNlZCBvbiB0aGUgZGF0YSBwYXNzZWQgaW50byBjYXJkXG4gICAgICogQHR5cGUge0Z1bmN0aW9ufVxuICAgICAqL1xuICAgIHRoaXMuZGF0YU1hcHBpbmdzID0gY29uZmlnLmRhdGFNYXBwaW5ncyB8fCAoKCkgPT4ge30pO1xuXG4gICAgLyoqXG4gICAgICogRWl0aGVyIGEgZnVuY3Rpb24gdGhhdCBzcGl0cyBvdXQgYW4gYXJyYXkgb2YgQ1RBIGNvbmZpZyBvYmplY3RzIG9yIGFuIGFycmF5IG9mIENUQSBjb25maWcgb2JqZWN0c1xuICAgICAqIG9yIGFwaSBmaWVsZG5hbWVzXG4gICAgICogQHR5cGUge0Z1bmN0aW9ufEFycmF5PE9iamVjdHxzdHJpbmc+fVxuICAgICAqL1xuICAgIHRoaXMuY2FsbHNUb0FjdGlvbiA9IGNvbmZpZy5jYWxsc1RvQWN0aW9uIHx8IFtdO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGluZGV4IG9mIHRoZSBjYXJkLlxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy5faW5kZXggPSBjb25maWcuX2luZGV4IHx8IDA7XG5cbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIHRoaXMgY2FyZCBpcyBwYXJ0IG9mIGEgdW5pdmVyc2FsIHNlYXJjaFxuICAgICAqL1xuICAgIHRoaXMuaXNVbml2ZXJzYWwgPSBjb25maWcuaXNVbml2ZXJzYWwgfHwgZmFsc2U7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2FyZENvbXBvbmVudCBleHRlbmRzIENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yIChjb25maWcgPSB7fSwgc3lzdGVtQ29uZmlnID0ge30pIHtcbiAgICBzdXBlcihuZXcgQ2FyZENvbmZpZyhjb25maWcpLCBzeXN0ZW1Db25maWcpO1xuXG4gICAgLyoqXG4gICAgICogY29uZmlnLmRhdGEgY29tZXMgZnJvbSB0aGUgZGF0YS1wcm9wIGF0dHJpYnV0ZSBwYXNzZWQgaW5cbiAgICAgKiBmcm9tIHRoZSBwYXJlbnQgY29tcG9uZW50LlxuICAgICAqIEB0eXBlIHtPYmplY3R9XG4gICAgICovXG4gICAgY29uc3QgZGF0YSA9IGNvbmZpZy5kYXRhIHx8IHt9O1xuXG4gICAgLyoqXG4gICAgICogVGhlIHJlc3VsdCBkYXRhIGZvciB0aGlzIGNhcmQuXG4gICAgICogQHR5cGUge1Jlc3VsdH1cbiAgICAgKi9cbiAgICB0aGlzLnJlc3VsdCA9IGRhdGEucmVzdWx0IHx8IHt9O1xuXG4gICAgLyoqXG4gICAgICogVmVydGljYWwga2V5IGZvciB0aGUgc2VhcmNoLlxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgdGhpcy52ZXJ0aWNhbEtleSA9IGRhdGEudmVydGljYWxLZXk7XG4gIH1cblxuICBzZXRTdGF0ZSAoZGF0YSkge1xuICAgIGNvbnN0IGNhcmRUeXBlID0gdGhpcy5fY29uZmlnLmNhcmRUeXBlO1xuXG4gICAgLy8gVXNlIHRoZSBjYXJkVHlwZSBhcyBjb21wb25lbnQgbmFtZSBpZiBpdCBpcyBub3QgYSBidWlsdC1pbiB0eXBlXG4gICAgbGV0IGNhcmRDb21wb25lbnROYW1lID0gY2FyZFR5cGVzW2NhcmRUeXBlXSB8fCBjYXJkVHlwZTtcbiAgICByZXR1cm4gc3VwZXIuc2V0U3RhdGUoe1xuICAgICAgLi4uZGF0YSxcbiAgICAgIHJlc3VsdDogdGhpcy5yZXN1bHQsXG4gICAgICBjYXJkVHlwZTogY2FyZENvbXBvbmVudE5hbWVcbiAgICB9KTtcbiAgfVxuXG4gIGFkZENoaWxkIChkYXRhLCB0eXBlLCBvcHRzKSB7XG4gICAgY29uc3QgdXBkYXRlZERhdGEgPSB7XG4gICAgICB2ZXJ0aWNhbEtleTogdGhpcy52ZXJ0aWNhbEtleSxcbiAgICAgIHJlc3VsdDogZGF0YVxuICAgIH07XG4gICAgY29uc3QgbmV3T3B0cyA9IHtcbiAgICAgIHNob3dPcmRpbmFsOiB0aGlzLl9jb25maWcuc2hvd09yZGluYWwsXG4gICAgICBkYXRhTWFwcGluZ3M6IHRoaXMuX2NvbmZpZy5kYXRhTWFwcGluZ3MsXG4gICAgICBjYWxsc1RvQWN0aW9uOiB0aGlzLl9jb25maWcuY2FsbHNUb0FjdGlvbixcbiAgICAgIHZlcnRpY2FsS2V5OiB0aGlzLl9jb25maWcudmVydGljYWxLZXksXG4gICAgICBfaW5kZXg6IHRoaXMuX2NvbmZpZy5faW5kZXgsXG4gICAgICBpc1VuaXZlcnNhbDogdGhpcy5fY29uZmlnLmlzVW5pdmVyc2FsLFxuICAgICAgbW9kaWZpZXI6IHRoaXMuX2NvbmZpZy5tb2RpZmllcixcbiAgICAgIC4uLm9wdHNcbiAgICB9O1xuICAgIHJldHVybiBzdXBlci5hZGRDaGlsZCh1cGRhdGVkRGF0YSwgdHlwZSwgbmV3T3B0cyk7XG4gIH1cblxuICAvKipcbiAgICogVXNlZCBieSBjaGlsZHJlbiBjYXJkIGNvbXBvbmVudHMgbGlrZSBTdGFuZGFyZENhcmRDb21wb25lbnQgdG9cbiAgICogYXBwbHkgZ2l2ZW4gdGVtcGxhdGUgbWFwcGluZ3MgYXMgY29uZmlnLlxuICAgKiBAcGFyYW0ge1Jlc3VsdH0gcmVzdWx0XG4gICAqIEBwYXJhbSB7T2JqZWN0fEZ1bmN0aW9ufSBkYXRhTWFwcGluZ3NcbiAgICovXG4gIHN0YXRpYyBhcHBseURhdGFNYXBwaW5ncyAocmVzdWx0LCBkYXRhTWFwcGluZ3MpIHtcbiAgICBjb25zdCBjb25maWcgPSB7fTtcbiAgICBpZiAodHlwZW9mIGRhdGFNYXBwaW5ncyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgZGF0YU1hcHBpbmdzID0gZGF0YU1hcHBpbmdzKHJlc3VsdCk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgZGF0YU1hcHBpbmdzID09PSAnb2JqZWN0Jykge1xuICAgICAgT2JqZWN0LmVudHJpZXMoZGF0YU1hcHBpbmdzKS5mb3JFYWNoKChbYXR0cmlidXRlLCB2YWx1ZV0pID0+IHtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGNvbmZpZ1thdHRyaWJ1dGVdID0gdmFsdWUocmVzdWx0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25maWdbYXR0cmlidXRlXSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbmZpZztcbiAgfVxuXG4gIHN0YXRpYyBnZXQgdHlwZSAoKSB7XG4gICAgcmV0dXJuICdDYXJkJztcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgdGVtcGxhdGUgdG8gcmVuZGVyXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgc3RhdGljIGRlZmF1bHRUZW1wbGF0ZU5hbWUgKGNvbmZpZykge1xuICAgIHJldHVybiAnY2FyZHMvY2FyZCc7XG4gIH1cblxuICBzdGF0aWMgYXJlRHVwbGljYXRlTmFtZXNBbGxvd2VkICgpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufVxuIiwiLyoqIEBtb2R1bGUgQXBwbGllZEZpbHRlcnNDb21wb25lbnQgKi9cblxuaW1wb3J0IENvbXBvbmVudCBmcm9tICcuLi9jb21wb25lbnQnO1xuaW1wb3J0IFN0b3JhZ2VLZXlzIGZyb20gJy4uLy4uLy4uL2NvcmUvc3RvcmFnZS9zdG9yYWdla2V5cyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJlc3VsdHNIZWFkZXJDb21wb25lbnQgZXh0ZW5kcyBDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvciAoY29uZmlnID0ge30sIHN5c3RlbUNvbmZpZyA9IHt9KSB7XG4gICAgc3VwZXIoY29uZmlnLCBzeXN0ZW1Db25maWcpO1xuXG4gICAgLyoqXG4gICAgICogV2hldGhlciB0byBkaXNwbGF5IHRoZSBudW1iZXIgb2YgcmVzdWx0cy5cbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICB0aGlzLl9jb25maWcuc2hvd1Jlc3VsdENvdW50ID0gY29uZmlnLnNob3dSZXN1bHRDb3VudCA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IGNvbmZpZy5zaG93UmVzdWx0Q291bnQ7XG5cbiAgICAvKipcbiAgICAgKiBJZiBwcmVzZW50LCBzaG93IHRoZSBmaWx0ZXJzIHRoYXQgd2VyZSB1bHRpbWF0ZWx5IGFwcGxpZWQgdG8gdGhpcyBxdWVyeVxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqL1xuICAgIHRoaXMuX2NvbmZpZy5zaG93QXBwbGllZEZpbHRlcnMgPSBjb25maWcuc2hvd0FwcGxpZWRGaWx0ZXJzID09PSB1bmRlZmluZWQgPyB0cnVlIDogY29uZmlnLnNob3dBcHBsaWVkRmlsdGVycztcblxuICAgIC8qKlxuICAgICAqIElmIHNob3dBcHBsaWVkRmlsdGVycyBpcyB0cnVlLCBzaG93IHRoZSBmaWVsZCBuYW1lIGluIHRoZSBzdHJpbmcgZm9sbG93ZWQgYnkgYSBjb2xvbi5cbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICB0aGlzLl9jb25maWcuc2hvd0ZpZWxkTmFtZXMgPSBjb25maWcuc2hvd0ZpZWxkTmFtZXMgfHwgZmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiBJZiBzaG93UmVzdWx0Q291bnQgYW5kIHNob3dBcHBsaWVkRmlsdGVycyBhcmUgdHJ1ZSxcbiAgICAgKiBkaXNwbGF5IHRoaXMgc2VwYXJhdG9yIGJldHdlZW4gdGhlIHJlc3VsdCBjb3VudCBhbmQgdGhlIGFwcGxpZWQgcXVlcnkgZmlsdGVyc1xuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgdGhpcy5fY29uZmlnLnJlc3VsdHNDb3VudFNlcGFyYXRvciA9IGNvbmZpZy5yZXN1bHRzQ291bnRTZXBhcmF0b3IgfHwgJ3wnO1xuXG4gICAgY29uc3QgZGF0YSA9IGNvbmZpZy5kYXRhIHx8IHt9O1xuXG4gICAgLyoqXG4gICAgICogVG90YWwgbnVtYmVyIG9mIHJlc3VsdHMuXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLnJlc3VsdHNDb3VudCA9IGRhdGEucmVzdWx0c0NvdW50IHx8IDA7XG5cbiAgICAvKipcbiAgICAgKiBOdW1iZXIgb2YgcmVzdWx0cyBkaXNwbGF5ZWQgb24gdGhlIHBhZ2UuXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLnJlc3VsdHNMZW5ndGggPSBkYXRhLnJlc3VsdHNMZW5ndGggfHwgMDtcblxuICAgIC8qKlxuICAgICAqIEB0eXBlIHtBcnJheTxBcHBsaWVkUXVlcnlGaWx0ZXI+fVxuICAgICAqL1xuICAgIHRoaXMuYXBwbGllZFF1ZXJ5RmlsdGVycyA9IGRhdGEuYXBwbGllZFF1ZXJ5RmlsdGVycyB8fCBbXTtcbiAgfVxuXG4gIHN0YXRpYyBnZXQgZHVwbGljYXRlc0FsbG93ZWQgKCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgZ2V0QXBwbGllZEZpbHRlcnNBcnJheSAoKSB7XG4gICAgY29uc3QgZ3JvdXBlZEZpbHRlcnMgPSB7fTtcbiAgICB0aGlzLmFwcGxpZWRRdWVyeUZpbHRlcnMuZm9yRWFjaChmaWx0ZXIgPT4ge1xuICAgICAgaWYgKCFncm91cGVkRmlsdGVyc1tmaWx0ZXIua2V5XSkge1xuICAgICAgICBncm91cGVkRmlsdGVyc1tmaWx0ZXIua2V5XSA9IFtdO1xuICAgICAgfVxuICAgICAgZ3JvdXBlZEZpbHRlcnNbZmlsdGVyLmtleV0ucHVzaChmaWx0ZXIudmFsdWUpO1xuICAgIH0pO1xuICAgIC8vIEhhcyB0byBiZSBwYXJzZWQgaW50byBhbiBhcnJheSBiZWNhdXNlIG91ciBoYW5kbGViYXJzIGNhbiBvbmx5IGxvb3AgdGhyb3VnaCBhcnJheXMsIG5vdCBvYmplY3RzLlxuICAgIHJldHVybiBPYmplY3Qua2V5cyhncm91cGVkRmlsdGVycykubWFwKGxhYmVsID0+ICh7XG4gICAgICBsYWJlbDogbGFiZWwsIGRpc3BsYXlWYWx1ZXM6IGdyb3VwZWRGaWx0ZXJzW2xhYmVsXVxuICAgIH0pKTtcbiAgfVxuXG4gIHNldFN0YXRlIChkYXRhKSB7XG4gICAgY29uc3Qgb2Zmc2V0ID0gdGhpcy5jb3JlLmdsb2JhbFN0b3JhZ2UuZ2V0U3RhdGUoU3RvcmFnZUtleXMuU0VBUkNIX09GRlNFVCk7XG4gICAgY29uc3QgaGFzRmlsdGVycyA9IHRoaXMuYXBwbGllZFF1ZXJ5RmlsdGVycy5sZW5ndGggPiAwO1xuICAgIGNvbnN0IHNob3VsZFNob3dGaWx0ZXJzID0gaGFzRmlsdGVycyAmJiB0aGlzLl9jb25maWcuc2hvd0FwcGxpZWRGaWx0ZXJzO1xuICAgIHJldHVybiBzdXBlci5zZXRTdGF0ZSh7XG4gICAgICAuLi5kYXRhLFxuICAgICAgcmVzdWx0c0NvdW50OiB0aGlzLnJlc3VsdHNDb3VudCxcbiAgICAgIHJlc3VsdHNDb3VudFN0YXJ0OiBvZmZzZXQgKyAxLFxuICAgICAgcmVzdWx0c0NvdW50RW5kOiBvZmZzZXQgKyB0aGlzLnJlc3VsdHNMZW5ndGgsXG4gICAgICBzaG93UmVzdWx0U2VwYXJhdG9yOiB0aGlzLl9jb25maWcuc2hvd1Jlc3VsdENvdW50ICYmIHNob3VsZFNob3dGaWx0ZXJzLFxuICAgICAgc2hvdWxkU2hvd0ZpbHRlcnM6IHNob3VsZFNob3dGaWx0ZXJzLFxuICAgICAgYXBwbGllZEZpbHRlcnNBcnJheTogdGhpcy5nZXRBcHBsaWVkRmlsdGVyc0FycmF5KClcbiAgICB9KTtcbiAgfVxuXG4gIHN0YXRpYyBnZXQgdHlwZSAoKSB7XG4gICAgcmV0dXJuICdSZXN1bHRzSGVhZGVyJztcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgdGVtcGxhdGUgdG8gcmVuZGVyXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgc3RhdGljIGRlZmF1bHRUZW1wbGF0ZU5hbWUgKGNvbmZpZykge1xuICAgIHJldHVybiAncmVzdWx0cy9yZXN1bHRzaGVhZGVyJztcbiAgfVxufVxuIiwiLyoqIEBtb2R1bGUgVmVydGljYWxSZXN1bHRzQ29tcG9uZW50ICovXG5cbmltcG9ydCBDb21wb25lbnQgZnJvbSAnLi4vY29tcG9uZW50JztcblxuaW1wb3J0IEFsdGVybmF0aXZlVmVydGljYWxzQ29tcG9uZW50IGZyb20gJy4vYWx0ZXJuYXRpdmV2ZXJ0aWNhbHNjb21wb25lbnQnO1xuaW1wb3J0IE1hcENvbXBvbmVudCBmcm9tICcuLi9tYXAvbWFwY29tcG9uZW50JztcbmltcG9ydCBSZXN1bHRzQ29udGV4dCBmcm9tICcuLi8uLi8uLi9jb3JlL3N0b3JhZ2UvcmVzdWx0c2NvbnRleHQnO1xuaW1wb3J0IFN0b3JhZ2VLZXlzIGZyb20gJy4uLy4uLy4uL2NvcmUvc3RvcmFnZS9zdG9yYWdla2V5cyc7XG5pbXBvcnQgU2VhcmNoU3RhdGVzIGZyb20gJy4uLy4uLy4uL2NvcmUvc3RvcmFnZS9zZWFyY2hzdGF0ZXMnO1xuaW1wb3J0IENhcmRDb21wb25lbnQgZnJvbSAnLi4vY2FyZHMvY2FyZGNvbXBvbmVudCc7XG5pbXBvcnQgUmVzdWx0c0hlYWRlckNvbXBvbmVudCBmcm9tICcuL3Jlc3VsdHNoZWFkZXJjb21wb25lbnQnO1xuaW1wb3J0IHsgYWRkUGFyYW1zVG9VcmwgfSBmcm9tICcuLi8uLi8uLi9jb3JlL3V0aWxzL3VybHV0aWxzJztcblxuY2xhc3MgVmVydGljYWxSZXN1bHRzQ29uZmlnIHtcbiAgY29uc3RydWN0b3IgKGNvbmZpZyA9IHt9KSB7XG4gICAgT2JqZWN0LmFzc2lnbih0aGlzLCBjb25maWcpO1xuXG4gICAgLyoqXG4gICAgICogaXNVbml2ZXJzYWwgaXMgc2V0IHRvIHRydWUgaWYgdGhpcyBjb21wb25lbnQgaXMgYWRkZWQgYnkgdGhlIFVuaXZlcnNhbFJlc3VsdHNDb21wb25lbnRcbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuaXNVbml2ZXJzYWwgPSBjb25maWcuaXNVbml2ZXJzYWwgfHwgZmFsc2U7XG5cbiAgICBjb25zdCBwYXJlbnRPcHRzID0gY29uZmlnLl9wYXJlbnRPcHRzIHx8IHt9O1xuXG4gICAgLyoqXG4gICAgICogQ3VzdG9tIHJlbmRlciBmdW5jdGlvblxuICAgICAqIEB0eXBlIHtmdW5jdGlvbn1cbiAgICAgKi9cbiAgICB0aGlzLnJlbmRlckl0ZW0gPSBjb25maWcucmVuZGVySXRlbSB8fCBwYXJlbnRPcHRzLnJlbmRlckl0ZW07XG5cbiAgICAvKipcbiAgICAgKiBDdXN0b20gaXRlbSB0ZW1wbGF0ZVxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgdGhpcy5pdGVtVGVtcGxhdGUgPSBjb25maWcuaXRlbVRlbXBsYXRlIHx8IHBhcmVudE9wdHMuaXRlbVRlbXBsYXRlO1xuXG4gICAgLyoqXG4gICAgICogVGhlIG1heGltdW0gbnVtYmVyIG9mIGNvbHVtbnMgdG8gZGlzcGxheSwgc3VwcG9ydHMgMSwgMiwgMywgb3IgNC5cbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIHRoaXMubWF4TnVtYmVyT2ZDb2x1bW5zID0gY29uZmlnLm1heE51bWJlck9mQ29sdW1ucyB8fCAxO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGNvbmZpZyB0byBwYXNzIHRvIHRoZSBjYXJkXG4gICAgICogQHR5cGUge09iamVjdH1cbiAgICAgKi9cbiAgICB0aGlzLmNhcmQgPSBjb25maWcuY2FyZCB8fCB7fTtcblxuICAgIC8qKlxuICAgICAqIENvbmZpZyBvcHRpb25zIHVzZWQgaW4gdGhlIHtAbGluayBSZXN1bHRzSGVhZGVyQ29tcG9uZW50fVxuICAgICAqL1xuICAgIHRoaXMucmVzdWx0c0hlYWRlck9wdHMgPSB7XG4gICAgICAvKipcbiAgICAgICAqIFdoZXRoZXIgdG8gZGlzcGxheSB0aGUgbnVtYmVyIG9mIHJlc3VsdHMuXG4gICAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgICAqL1xuICAgICAgc2hvd1Jlc3VsdENvdW50OiBjb25maWcuc2hvd1Jlc3VsdENvdW50ID09PSB1bmRlZmluZWQgPyB0cnVlIDogY29uZmlnLnNob3dSZXN1bHRDb3VudCxcblxuICAgICAgLyoqXG4gICAgICAgKiBJZiBwcmVzZW50LCBzaG93IHRoZSBmaWx0ZXJzIHRoYXQgd2VyZSB1bHRpbWF0ZWx5IGFwcGxpZWQgdG8gdGhpcyBxdWVyeVxuICAgICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICAgKi9cbiAgICAgIHNob3dBcHBsaWVkRmlsdGVyczogY29uZmlnLnNob3dBcHBsaWVkRmlsdGVycyA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IGNvbmZpZy5zaG93QXBwbGllZEZpbHRlcnMsXG5cbiAgICAgIC8qKlxuICAgICAgICogSWYgc2hvd1Jlc3VsdENvdW50IGFuZCBzaG93QXBwbGllZEZpbHRlcnMgYXJlIHRydWUsXG4gICAgICAgKiBkaXNwbGF5IHRoaXMgc2VwYXJhdG9yIGJldHdlZW4gdGhlIHJlc3VsdCBjb3VudCBhbmQgdGhlIGFwcGxpZWQgcXVlcnkgZmlsdGVyc1xuICAgICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgICAqL1xuICAgICAgcmVzdWx0c0NvdW50U2VwYXJhdG9yOiBjb25maWcucmVzdWx0c0NvdW50U2VwYXJhdG9yIHx8ICd8JyxcblxuICAgICAgLyoqXG4gICAgICAgKiBJZiBzaG93QXBwbGllZEZpbHRlcnMgaXMgdHJ1ZSwgc2hvdyB0aGUgZmllbGQgbmFtZSBpbiB0aGUgc3RyaW5nIGZvbGxvd2VkIGJ5IGEgY29sb24uXG4gICAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgICAqL1xuICAgICAgc2hvd0ZpZWxkTmFtZXM6IGNvbmZpZy5zaG93RmllbGROYW1lcyB8fCBmYWxzZVxuICAgIH07XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVmVydGljYWxSZXN1bHRzQ29tcG9uZW50IGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IgKGNvbmZpZyA9IHt9LCBzeXN0ZW1Db25maWcgPSB7fSkge1xuICAgIHN1cGVyKG5ldyBWZXJ0aWNhbFJlc3VsdHNDb25maWcoY29uZmlnKSwgc3lzdGVtQ29uZmlnKTtcblxuICAgIGNvbnN0IG5vUmVzdWx0c0NvbmZpZyA9IHRoaXMuX2NvbmZpZy5ub1Jlc3VsdHMgfHxcbiAgICAgIHRoaXMuY29yZS5nbG9iYWxTdG9yYWdlLmdldFN0YXRlKFN0b3JhZ2VLZXlzLk5PX1JFU1VMVFNfQ09ORklHKTtcbiAgICAvKipcbiAgICAgKiBBIHBhcnNlZCB2ZXJzaW9uIG9mIHRoZSBub1Jlc3VsdHMgY29uZmlnIHByb3ZpZGVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAgICogQXBwbGllcyBzZW5zaWJsZSBkZWZhdWx0cyBpZiBjZXJ0YWluIHZhbHVlcyBhcmUgbm90IHNldC5cbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5fbm9SZXN1bHRzQ29uZmlnID0gT2JqZWN0LmFzc2lnbihcbiAgICAgIHsgZGlzcGxheUFsbFJlc3VsdHM6IGZhbHNlLCB0ZW1wbGF0ZTogJycgfSwgbm9SZXN1bHRzQ29uZmlnKTtcblxuICAgIC8qKlxuICAgICAqIEJvb2xlYW4gaW5kaWNhdGluZyBpZiBsZWdhY3kgbm8gcmVzdWx0cyBkaXNwbGF5IHNob3VsZCBiZSB1c2VkLlxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5fdXNlTGVnYWN5Tm9SZXN1bHRzID0gdGhpcy5fY29uZmlnLmlzVW5pdmVyc2FsIHx8ICFub1Jlc3VsdHNDb25maWc7XG5cbiAgICAvKipcbiAgICAgKiBfZGlzcGxheUFsbFJlc3VsdHMgY29udHJvbHMgaWYgYWxsIHJlc3VsdHMgZm9yIHRoZSB2ZXJ0aWNhbCB3aWxsIGRpc3BsYXlcbiAgICAgKiB3aGVuIHRoZXJlIGFyZSBubyByZXN1bHRzIGZvciBhIHF1ZXJ5LlxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5fZGlzcGxheUFsbFJlc3VsdHMgPSB0aGlzLl9ub1Jlc3VsdHNDb25maWcuZGlzcGxheUFsbFJlc3VsdHM7XG5cbiAgICAvKipcbiAgICAgKiBTcGVjaWZpZXMgYSBjdXN0b20gbm8gcmVzdWx0cyB0ZW1wbGF0ZS5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLl9ub1Jlc3VsdHNUZW1wbGF0ZSA9IHRoaXMuX25vUmVzdWx0c0NvbmZpZy50ZW1wbGF0ZTtcblxuICAgIHRoaXMubW9kdWxlSWQgPSBTdG9yYWdlS2V5cy5WRVJUSUNBTF9SRVNVTFRTO1xuICAgIC8qKlxuICAgICAqIFZlcnRpY2FsIGNvbmZpZyBmcm9tIGNvbmZpZywgaWYgbm90IHByZXNlbnQsIGZhbGwgYmFjayB0byBnbG9iYWwgdmVydGljYWxQYWdlc0NvbmZpZ1xuICAgICAqIEB0eXBlIHtBcnJheS48b2JqZWN0Pn1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuX3ZlcnRpY2Fsc0NvbmZpZyA9IGNvbmZpZy52ZXJ0aWNhbFBhZ2VzIHx8IHRoaXMuY29yZS5nbG9iYWxTdG9yYWdlXG4gICAgICAuZ2V0U3RhdGUoU3RvcmFnZUtleXMuVkVSVElDQUxfUEFHRVNfQ09ORklHKVxuICAgICAgLmdldCgpIHx8IFtdO1xuICAgIC8qKlxuICAgICAqIEB0eXBlIHtBcnJheTxSZXN1bHQ+fVxuICAgICAqL1xuICAgIHRoaXMucmVzdWx0cyA9IFtdO1xuICAgIHRoaXMubnVtQ29sdW1ucyA9IHRoaXMuX2NvbmZpZy5tYXhOdW1iZXJPZkNvbHVtbnM7XG4gIH1cblxuICBtb3VudCAoKSB7XG4gICAgaWYgKE9iamVjdC5rZXlzKHRoaXMuZ2V0U3RhdGUoKSkubGVuZ3RoID4gMCkge1xuICAgICAgc3VwZXIubW91bnQoKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBzdGF0aWMgZ2V0IGR1cGxpY2F0ZXNBbGxvd2VkICgpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGdldFVuaXZlcnNhbFVybCAoKSB7XG4gICAgY29uc3QgdW5pdmVyc2FsQ29uZmlnID0gdGhpcy5fdmVydGljYWxzQ29uZmlnLmZpbmQoY29uZmlnID0+ICFjb25maWcudmVydGljYWxLZXkpIHx8IHt9O1xuICAgIGlmICh1bml2ZXJzYWxDb25maWcudXJsKSB7XG4gICAgICByZXR1cm4gYWRkUGFyYW1zVG9VcmwodW5pdmVyc2FsQ29uZmlnLnVybCwgeyBxdWVyeTogdGhpcy5xdWVyeSB9KTtcbiAgICB9XG4gIH1cblxuICBnZXRWZXJ0aWNhbFVSTCAoZGF0YSkge1xuICAgIGNvbnN0IHZlcnRpY2FsQ29uZmlnID0gdGhpcy5fdmVydGljYWxzQ29uZmlnLmZpbmQoY29uZmlnID0+IGNvbmZpZy52ZXJ0aWNhbEtleSA9PT0gdGhpcy52ZXJ0aWNhbEtleSkgfHwge307XG4gICAgY29uc3QgdmVydGljYWxVUkwgPSB2ZXJ0aWNhbENvbmZpZy51cmwgfHwgZGF0YS52ZXJ0aWNhbFVSTCB8fCB0aGlzLnZlcnRpY2FsS2V5ICsgJy5odG1sJztcbiAgICByZXR1cm4gYWRkUGFyYW1zVG9VcmwodmVydGljYWxVUkwsIHsgcXVlcnk6IHRoaXMucXVlcnkgfSk7XG4gIH1cblxuICBzZXRTdGF0ZSAoZGF0YSA9IHt9LCB2YWwpIHtcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7QXJyYXk8UmVzdWx0Pn1cbiAgICAgKi9cbiAgICB0aGlzLnJlc3VsdHMgPSBkYXRhLnJlc3VsdHMgfHwgW107XG4gICAgdGhpcy5yZXN1bHRzQ291bnQgPSBkYXRhLnJlc3VsdHNDb3VudDtcbiAgICB0aGlzLnZlcnRpY2FsS2V5ID0gZGF0YS52ZXJ0aWNhbENvbmZpZ0lkO1xuICAgIHRoaXMucmVzdWx0c0NvbnRleHQgPSBkYXRhLnJlc3VsdHNDb250ZXh0O1xuICAgIHRoaXMuYXBwbGllZFF1ZXJ5RmlsdGVycyA9IGRhdGEuYXBwbGllZFF1ZXJ5RmlsdGVycztcbiAgICBjb25zdCBzZWFyY2hTdGF0ZSA9IGRhdGEuc2VhcmNoU3RhdGUgfHwgU2VhcmNoU3RhdGVzLlBSRV9TRUFSQ0g7XG4gICAgY29uc3QgZGlzcGxheVJlc3VsdHNJZkV4aXN0ID0gdGhpcy5fY29uZmlnLmlzVW5pdmVyc2FsIHx8XG4gICAgICB0aGlzLl9kaXNwbGF5QWxsUmVzdWx0cyB8fFxuICAgICAgZGF0YS5yZXN1bHRzQ29udGV4dCA9PT0gUmVzdWx0c0NvbnRleHQuTk9STUFMO1xuICAgIGNvbnN0IHNob3dSZXN1bHRzSGVhZGVyID0gdGhpcy5fY29uZmlnLnJlc3VsdHNIZWFkZXJPcHRzLnNob3dSZXN1bHRDb3VudCB8fFxuICAgICAgdGhpcy5fY29uZmlnLnJlc3VsdHNIZWFkZXJPcHRzLnNob3dBcHBsaWVkRmlsdGVycztcbiAgICB0aGlzLnF1ZXJ5ID0gdGhpcy5jb3JlLmdsb2JhbFN0b3JhZ2UuZ2V0U3RhdGUoU3RvcmFnZUtleXMuUVVFUlkpO1xuXG4gICAgcmV0dXJuIHN1cGVyLnNldFN0YXRlKE9iamVjdC5hc3NpZ24oeyByZXN1bHRzOiBbXSB9LCBkYXRhLCB7XG4gICAgICBpc1ByZVNlYXJjaDogc2VhcmNoU3RhdGUgPT09IFNlYXJjaFN0YXRlcy5QUkVfU0VBUkNILFxuICAgICAgaXNTZWFyY2hMb2FkaW5nOiBzZWFyY2hTdGF0ZSA9PT0gU2VhcmNoU3RhdGVzLlNFQVJDSF9MT0FESU5HLFxuICAgICAgaXNTZWFyY2hDb21wbGV0ZTogc2VhcmNoU3RhdGUgPT09IFNlYXJjaFN0YXRlcy5TRUFSQ0hfQ09NUExFVEUsXG4gICAgICBldmVudE9wdGlvbnM6IHRoaXMuZXZlbnRPcHRpb25zKCksXG4gICAgICB1bml2ZXJzYWxVcmw6IHRoaXMuZ2V0VW5pdmVyc2FsVXJsKCksXG4gICAgICB2ZXJ0aWNhbFVSTDogdGhpcy5nZXRWZXJ0aWNhbFVSTChkYXRhKSxcbiAgICAgIHF1ZXJ5OiB0aGlzLnF1ZXJ5LFxuICAgICAgY3VycmVudFZlcnRpY2FsTGFiZWw6IHRoaXMuX2N1cnJlbnRWZXJ0aWNhbExhYmVsLFxuICAgICAgcmVzdWx0c1ByZXNlbnQ6IGRpc3BsYXlSZXN1bHRzSWZFeGlzdCAmJiB0aGlzLnJlc3VsdHMubGVuZ3RoICE9PSAwLFxuICAgICAgc2hvd05vUmVzdWx0czogdGhpcy5yZXN1bHRzQ29udGV4dCA9PT0gUmVzdWx0c0NvbnRleHQuTk9fUkVTVUxUUyxcbiAgICAgIHBsYWNlaG9sZGVyczogbmV3IEFycmF5KHRoaXMuX2NvbmZpZy5tYXhOdW1iZXJPZkNvbHVtbnMgLSAxKSxcbiAgICAgIG51bUNvbHVtbnM6IE1hdGgubWluKHRoaXMuX2NvbmZpZy5tYXhOdW1iZXJPZkNvbHVtbnMsIHRoaXMucmVzdWx0cy5sZW5ndGgpLFxuICAgICAgc2hvd1Jlc3VsdHNIZWFkZXI6IHNob3dSZXN1bHRzSGVhZGVyLFxuICAgICAgdXNlTGVnYWN5Tm9SZXN1bHRzOiB0aGlzLl91c2VMZWdhY3lOb1Jlc3VsdHNcbiAgICB9KSwgdmFsKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBoZWxwZXIgdG8gY29uc3RydWN0IHRoZSBldmVudE9wdGlvbnMgb2JqZWN0IGZvciB0aGUgdmlldyBhbGwgbGlua1xuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKi9cbiAgZXZlbnRPcHRpb25zICgpIHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgdmVydGljYWxDb25maWdJZDogdGhpcy52ZXJ0aWNhbEtleVxuICAgIH0pO1xuICB9XG5cbiAgc3RhdGljIGdldCB0eXBlICgpIHtcbiAgICByZXR1cm4gJ1ZlcnRpY2FsUmVzdWx0cyc7XG4gIH1cblxuICAvKipcbiAgICogVGhlIHRlbXBsYXRlIHRvIHJlbmRlclxuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHN0YXRpYyBkZWZhdWx0VGVtcGxhdGVOYW1lIChjb25maWcpIHtcbiAgICByZXR1cm4gJ3Jlc3VsdHMvdmVydGljYWxyZXN1bHRzJztcbiAgfVxuXG4gIGFkZENoaWxkIChkYXRhLCB0eXBlLCBvcHRzKSB7XG4gICAgaWYgKHR5cGUgPT09IE1hcENvbXBvbmVudC50eXBlKSB7XG4gICAgICBjb25zdCBfb3B0cyA9IHtcbiAgICAgICAgbm9SZXN1bHRzOiB0aGlzLl9ub1Jlc3VsdHNDb25maWcsXG4gICAgICAgIC4uLnRoaXMuX2NvbmZpZy5tYXBDb25maWcsXG4gICAgICAgIC4uLm9wdHNcbiAgICAgIH07XG4gICAgICBjb25zdCBfZGF0YSA9IHtcbiAgICAgICAgcmVzdWx0c0NvbnRleHQ6IHRoaXMuZ2V0U3RhdGUoJ3Jlc3VsdHNDb250ZXh0JyksXG4gICAgICAgIG1hcDogZGF0YVxuICAgICAgfTtcbiAgICAgIHJldHVybiBzdXBlci5hZGRDaGlsZChfZGF0YSwgdHlwZSwgX29wdHMpO1xuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gQ2FyZENvbXBvbmVudC50eXBlKSB7XG4gICAgICBjb25zdCB1cGRhdGVkRGF0YSA9IHtcbiAgICAgICAgcmVzdWx0OiB0aGlzLnJlc3VsdHNbb3B0cy5faW5kZXhdLFxuICAgICAgICB2ZXJ0aWNhbEtleTogdGhpcy52ZXJ0aWNhbEtleVxuICAgICAgfTtcbiAgICAgIGNvbnN0IG5ld09wdHMgPSB7XG4gICAgICAgIHRhcmdldDogdGhpcy5fY29uZmlnLnRhcmdldCxcbiAgICAgICAgLi4udGhpcy5fY29uZmlnLmNhcmQsXG4gICAgICAgIGlzVW5pdmVyc2FsOiB0aGlzLl9jb25maWcuaXNVbml2ZXJzYWwsXG4gICAgICAgIHRlbXBsYXRlOiB0aGlzLl9jb25maWcuaXRlbVRlbXBsYXRlLFxuICAgICAgICByZW5kZXI6IHRoaXMuX2NvbmZpZy5yZW5kZXJJdGVtLFxuICAgICAgICBtb2RpZmllcjogdGhpcy5fY29uZmlnLm1vZGlmaWVyLFxuICAgICAgICAuLi5vcHRzXG4gICAgICB9O1xuICAgICAgcmV0dXJuIHN1cGVyLmFkZENoaWxkKHVwZGF0ZWREYXRhLCB0eXBlLCBuZXdPcHRzKTtcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09IEFsdGVybmF0aXZlVmVydGljYWxzQ29tcG9uZW50LnR5cGUpIHtcbiAgICAgIGNvbnN0IGhhc1Jlc3VsdHMgPSB0aGlzLnJlc3VsdHMgJiYgdGhpcy5yZXN1bHRzLmxlbmd0aCA+IDA7XG4gICAgICBkYXRhID0gdGhpcy5jb3JlLmdsb2JhbFN0b3JhZ2UuZ2V0U3RhdGUoU3RvcmFnZUtleXMuQUxURVJOQVRJVkVfVkVSVElDQUxTKTtcbiAgICAgIGNvbnN0IG5ld09wdHMgPSB7XG4gICAgICAgIHRlbXBsYXRlOiB0aGlzLl9ub1Jlc3VsdHNUZW1wbGF0ZSxcbiAgICAgICAgdW5pdmVyc2FsVXJsOiB0aGlzLmdldFVuaXZlcnNhbFVybCgpLFxuICAgICAgICB2ZXJ0aWNhbHNDb25maWc6IHRoaXMuX3ZlcnRpY2Fsc0NvbmZpZyxcbiAgICAgICAgaXNTaG93aW5nUmVzdWx0czogdGhpcy5fZGlzcGxheUFsbFJlc3VsdHMgJiYgaGFzUmVzdWx0cyxcbiAgICAgICAgLi4ub3B0c1xuICAgICAgfTtcbiAgICAgIHJldHVybiBzdXBlci5hZGRDaGlsZChkYXRhLCB0eXBlLCBuZXdPcHRzKTtcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09IFJlc3VsdHNIZWFkZXJDb21wb25lbnQudHlwZSkge1xuICAgICAgY29uc3QgcmVzdWx0c0hlYWRlckRhdGEgPSB7XG4gICAgICAgIHJlc3VsdHNMZW5ndGg6IHRoaXMucmVzdWx0cy5sZW5ndGgsXG4gICAgICAgIHJlc3VsdHNDb3VudDogdGhpcy5yZXN1bHRzQ291bnQsXG4gICAgICAgIGFwcGxpZWRRdWVyeUZpbHRlcnM6IHRoaXMuYXBwbGllZFF1ZXJ5RmlsdGVycyxcbiAgICAgICAgLi4uZGF0YVxuICAgICAgfTtcbiAgICAgIGNvbnN0IF9vcHRzID0geyAuLi5vcHRzIH07XG4gICAgICBpZiAodGhpcy5yZXN1bHRzQ29udGV4dCA9PT0gUmVzdWx0c0NvbnRleHQuTk9fUkVTVUxUUykge1xuICAgICAgICBfb3B0cy5zaG93QXBwbGllZEZpbHRlcnMgPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzdXBlci5hZGRDaGlsZChyZXN1bHRzSGVhZGVyRGF0YSwgdHlwZSwgX29wdHMpO1xuICAgIH1cbiAgICByZXR1cm4gc3VwZXIuYWRkQ2hpbGQoZGF0YSwgdHlwZSwgb3B0cyk7XG4gIH1cbn1cbiIsIi8qKiBAbW9kdWxlIEFjY29yZGlvblJlc3VsdHNDb21wb25lbnQgKi9cbmltcG9ydCBWZXJ0aWNhbFJlc3VsdHNDb21wb25lbnQgZnJvbSAnLi92ZXJ0aWNhbHJlc3VsdHNjb21wb25lbnQnO1xuaW1wb3J0IERPTSBmcm9tICcuLi8uLi9kb20vZG9tJztcbmltcG9ydCBBbmFseXRpY3NFdmVudCBmcm9tICcuLi8uLi8uLi9jb3JlL2FuYWx5dGljcy9hbmFseXRpY3NldmVudCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFjY29yZGlvblJlc3VsdHNDb21wb25lbnQgZXh0ZW5kcyBWZXJ0aWNhbFJlc3VsdHNDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvciAoY29uZmlnID0ge30sIHN5c3RlbUNvbmZpZyA9IHt9KSB7XG4gICAgc3VwZXIoY29uZmlnLCBzeXN0ZW1Db25maWcpO1xuXG4gICAgLyoqXG4gICAgICogYmFzZSBzZWxlY3RvciB0byB1c2Ugd2hlbiBmaW5kaW5nIERPTSB0YXJnZXRzXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLl9zZWxlY3RvckJhc2UgPSBjb25maWcuc2VsZWN0b3JCYXNlIHx8ICcuanMteXh0LUFjY29yZGlvblJlc3VsdCc7XG5cbiAgICAvKipcbiAgICAgKiBjb2xsYXBzZWQgc3RhdGUgY2xhc3NcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMuY29sbGFwc2VkQ2xhc3MgPSBjb25maWcuY29sbGFwc2VkQ2xhc3MgfHwgJ2lzLWNvbGxhcHNlZCc7XG5cbiAgICAvKipcbiAgICAgKiB2ZXJ0aWNhbCBjb25maWcgaWQgaXMgcmVxdWlyZWQgZm9yIGFuYWx5dGljc1xuICAgICAqIEB0eXBlIHtzdHJpbmd8bnVsbH1cbiAgICAgKi9cbiAgICB0aGlzLnZlcnRpY2FsQ29uZmlnSWQgPSBjb25maWcudmVydGljYWxDb25maWdJZCB8fCBjb25maWcuX3BhcmVudE9wdHMudmVydGljYWxDb25maWdJZCB8fCBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIHRoZSBjb21wb25lbnQgdHlwZVxuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHN0YXRpYyBnZXQgdHlwZSAoKSB7XG4gICAgcmV0dXJuICdBY2NvcmRpb25SZXN1bHRzJztcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgdGVtcGxhdGUgdG8gcmVuZGVyXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgc3RhdGljIGRlZmF1bHRUZW1wbGF0ZU5hbWUgKGNvbmZpZykge1xuICAgIHJldHVybiAncmVzdWx0cy9yZXN1bHRzYWNjb3JkaW9uJztcbiAgfVxuXG4gIC8qKlxuICAgKiBvdmVycmlkZXMgb25Nb3VudCB0byBhZGQgYmluZGluZ3MgdG8gY2hhbmdlIHRoZSBoZWlnaHQgb24gY2xpY2tcbiAgICogQHJldHVybnMge0FjY29yZGlvblJlc3VsdHNDb21wb25lbnR9XG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgb25Nb3VudCAoKSB7XG4gICAgc3VwZXIub25Nb3VudCgpO1xuXG4gICAgLy8gTk9URShhbXVsbGluZ3MpOiBUaGlzIGlzIGEgaGFjaywgc2luY2UgY3VycmVudGx5IGNvbXBvbmVudHMgd2l0aCBzaWJsaW5nc1xuICAgIC8vIGhhdmUgbm8gd2F5IG9mIHJlZmVycmluZyB0byB0aGVpciBvd24gZWxlbWVudC4gV2UgaGF2ZSB0byBncmFiIHRoZSBmaXJzdFxuICAgIC8vIGVsZW1lbnQgc2luY2Ugc2VjdGlvbnMgZ2V0IGFkZGVkIGluIHJldmVyc2UuXG4gICAgY29uc3Qgc2VsZkVsID0gdGhpcy5fY29udGFpbmVyLmZpcnN0RWxlbWVudENoaWxkO1xuXG4gICAgY29uc3QgYWNjb3JkaW9uRWxzID0gRE9NLnF1ZXJ5QWxsKHNlbGZFbCwgdGhpcy5fc2VsZWN0b3JCYXNlKTtcbiAgICBhY2NvcmRpb25FbHMuZm9yRWFjaCgoYWNjb3JkaW9uRWwpID0+IHtcbiAgICAgIGNvbnN0IHRvZ2dsZUVsID0gRE9NLnF1ZXJ5KGFjY29yZGlvbkVsLCB0aGlzLnRvZ2dsZVNlbGVjdG9yKCkpO1xuICAgICAgY29uc3QgY29udGVudEVsID0gRE9NLnF1ZXJ5KGFjY29yZGlvbkVsLCB0aGlzLmJvZHlTZWxlY3RvcigpKTtcbiAgICAgIHRoaXMuY2hhbmdlSGVpZ2h0KGNvbnRlbnRFbCwgYWNjb3JkaW9uRWwpO1xuICAgICAgdG9nZ2xlRWwuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgIHRoaXMuaGFuZGxlQ2xpY2soYWNjb3JkaW9uRWwsIHRvZ2dsZUVsLCBjb250ZW50RWwpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHNldFN0YXRlIChkYXRhKSB7XG4gICAgcmV0dXJuIHN1cGVyLnNldFN0YXRlKE9iamVjdC5hc3NpZ24oe30sIGRhdGEsIHtcbiAgICAgIG1vZGlmaWVyOiB0aGlzLnZlcnRpY2FsQ29uZmlnSWRcbiAgICB9KSk7XG4gIH1cblxuICAvKipcbiAgICogY2xpY2sgaGFuZGxlciBmb3IgdGhlIGFjY29yZGlvbiB0b2dnbGUgYnV0dG9uXG4gICAqIEBwYXJhbSB3cmFwcGVyRWwge0hUTUxFbGVtZW50fSB0aGUgdG9nZ2xlIGNvbnRhaW5lclxuICAgKiBAcGFyYW0gdG9nZ2xlRWwge0hUTUxFbGVtZW50fSB0aGUgYnV0dG9uXG4gICAqIEBwYXJhbSBjb250ZW50RWwge0hUTUxFbGVtZW50fSB0aGUgdG9nZ2xlIHRhcmdldFxuICAgKi9cbiAgaGFuZGxlQ2xpY2sgKHdyYXBwZXJFbCwgdG9nZ2xlRWwsIGNvbnRlbnRFbCkge1xuICAgIGNvbnN0IGV2ZW50ID0gbmV3IEFuYWx5dGljc0V2ZW50KHRoaXMuaXNDb2xsYXBzZWQod3JhcHBlckVsKSA/ICdST1dfRVhQQU5EJyA6ICdST1dfQ09MTEFQU0UnKVxuICAgICAgLmFkZE9wdGlvbnMoe1xuICAgICAgICB2ZXJ0aWNhbENvbmZpZ0lkOiB0aGlzLnZlcnRpY2FsQ29uZmlnSWQsXG4gICAgICAgIGVudGl0eUlkOiB0b2dnbGVFbC5kYXRhc2V0LmVudGl0eUlkXG4gICAgICB9KTtcbiAgICB3cmFwcGVyRWwuY2xhc3NMaXN0LnRvZ2dsZSh0aGlzLmNvbGxhcHNlZENsYXNzKTtcbiAgICB0aGlzLmNoYW5nZUhlaWdodChjb250ZW50RWwsIHdyYXBwZXJFbCk7XG4gICAgdG9nZ2xlRWwuc2V0QXR0cmlidXRlKCdhcmlhLWV4cGFuZGVkJywgdGhpcy5pc0NvbGxhcHNlZCh3cmFwcGVyRWwpID8gJ2ZhbHNlJyA6ICd0cnVlJyk7XG4gICAgdGhpcy5hbmFseXRpY3NSZXBvcnRlci5yZXBvcnQoZXZlbnQpO1xuICB9XG5cbiAgLyoqXG4gICAqIHJldHVybnMgdHJ1ZSBpZiB0aGUgZWxlbWVudCBpcyBjdXJyZW50bHkgY29sbGFwc2VkXG4gICAqIEBwYXJhbSB3cmFwcGVyRWwge0hUTUxFbGVtZW50fSB0aGUgdG9nZ2xlIGNvbnRhaW5lclxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICovXG4gIGlzQ29sbGFwc2VkICh3cmFwcGVyRWwpIHtcbiAgICBpZiAoIXdyYXBwZXJFbCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiB3cmFwcGVyRWwuY2xhc3NMaXN0LmNvbnRhaW5zKHRoaXMuY29sbGFwc2VkQ2xhc3MpO1xuICB9XG5cbiAgLyoqXG4gICAqIHRvZ2dsZXMgdGhlIGhlaWdodCBiZXR3ZWVuIDAgYW5kIHRoZSBjb250ZW50IGhlaWdodCBmb3Igc21vb3RoIGFuaW1hdGlvblxuICAgKiBAcGFyYW0gdGFyZ2V0RWwge0hUTUxFbGVtZW50fVxuICAgKiBAcGFyYW0gd3JhcHBlckVsIHtIVE1MRWxlbWVudH1cbiAgICovXG4gIGNoYW5nZUhlaWdodCAodGFyZ2V0RWwsIHdyYXBwZXJFbCkge1xuICAgIHRhcmdldEVsLnN0eWxlLmhlaWdodCA9IGAke3RoaXMuaXNDb2xsYXBzZWQod3JhcHBlckVsKSA/IDAgOiB0YXJnZXRFbC5zY3JvbGxIZWlnaHR9cHhgO1xuICB9XG5cbiAgLyoqXG4gICAqIGhlbHBlciBmb3IgY29tcG9zaW5nIGNoaWxkIGVsZW1lbnQgc2VsZWN0b3JzXG4gICAqIEBwYXJhbSBjaGlsZCB7c3RyaW5nfVxuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKi9cbiAgYnVpbGRTZWxlY3RvciAoY2hpbGQpIHtcbiAgICByZXR1cm4gYCR7dGhpcy5fc2VsZWN0b3JCYXNlfSR7Y2hpbGR9YDtcbiAgfVxuXG4gIC8qKlxuICAgKiBoZWxwZXIgZm9yIHRoZSB0b2dnbGUgYnV0dG9uIHNlbGVjdG9yXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAqL1xuICB0b2dnbGVTZWxlY3RvciAoKSB7XG4gICAgcmV0dXJuIHRoaXMuYnVpbGRTZWxlY3RvcignLXRvZ2dsZScpO1xuICB9XG5cbiAgLyoqXG4gICAqIGhlbHBlciBmb3IgdGhlIGNvbnRlbnQgZWxlbWVudCBzZWxlY3RvclxuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKi9cbiAgYm9keVNlbGVjdG9yICgpIHtcbiAgICByZXR1cm4gdGhpcy5idWlsZFNlbGVjdG9yKCctYm9keScpO1xuICB9XG59XG4iLCIvKiogQG1vZHVsZSBVbml2ZXJzYWxSZXN1bHRzQ29tcG9uZW50ICovXG5cbmltcG9ydCBDb21wb25lbnQgZnJvbSAnLi4vY29tcG9uZW50JztcbmltcG9ydCBTdG9yYWdlS2V5cyBmcm9tICcuLi8uLi8uLi9jb3JlL3N0b3JhZ2Uvc3RvcmFnZWtleXMnO1xuaW1wb3J0IFNlYXJjaFN0YXRlcyBmcm9tICcuLi8uLi8uLi9jb3JlL3N0b3JhZ2Uvc2VhcmNoc3RhdGVzJztcbmltcG9ydCBBY2NvcmRpb25SZXN1bHRzQ29tcG9uZW50IGZyb20gJy4vYWNjb3JkaW9ucmVzdWx0c2NvbXBvbmVudC5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFVuaXZlcnNhbFJlc3VsdHNDb21wb25lbnQgZXh0ZW5kcyBDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvciAob3B0cyA9IHt9LCBzeXN0ZW1PcHRzID0ge30pIHtcbiAgICBzdXBlcihvcHRzLCBzeXN0ZW1PcHRzKTtcblxuICAgIHRoaXMubW9kdWxlSWQgPSBTdG9yYWdlS2V5cy5VTklWRVJTQUxfUkVTVUxUUztcbiAgfVxuXG4gIHN0YXRpYyBnZXQgdHlwZSAoKSB7XG4gICAgcmV0dXJuICdVbml2ZXJzYWxSZXN1bHRzJztcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgdGVtcGxhdGUgdG8gcmVuZGVyXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgc3RhdGljIGRlZmF1bHRUZW1wbGF0ZU5hbWUgKGNvbmZpZykge1xuICAgIHJldHVybiAncmVzdWx0cy91bml2ZXJzYWxyZXN1bHRzJztcbiAgfVxuXG4gIHN0YXRpYyBhcmVEdXBsaWNhdGVOYW1lc0FsbG93ZWQgKCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaW5pdCAob3B0cykge1xuICAgIHN1cGVyLmluaXQob3B0cyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBzZXRTdGF0ZSAoZGF0YSwgdmFsKSB7XG4gICAgY29uc3Qgc2VjdGlvbnMgPSBkYXRhLnNlY3Rpb25zIHx8IFtdO1xuICAgIGNvbnN0IHNlYXJjaFN0YXRlID0gZGF0YS5zZWFyY2hTdGF0ZSB8fCBTZWFyY2hTdGF0ZXMuUFJFX1NFQVJDSDtcbiAgICByZXR1cm4gc3VwZXIuc2V0U3RhdGUoT2JqZWN0LmFzc2lnbih7IHNlY3Rpb25zOiBbXSB9LCBkYXRhLCB7XG4gICAgICBpc1ByZVNlYXJjaDogc2VhcmNoU3RhdGUgPT09IFNlYXJjaFN0YXRlcy5QUkVfU0VBUkNILFxuICAgICAgaXNTZWFyY2hMb2FkaW5nOiBzZWFyY2hTdGF0ZSA9PT0gU2VhcmNoU3RhdGVzLlNFQVJDSF9MT0FESU5HLFxuICAgICAgaXNTZWFyY2hDb21wbGV0ZTogc2VhcmNoU3RhdGUgPT09IFNlYXJjaFN0YXRlcy5TRUFSQ0hfQ09NUExFVEUsXG4gICAgICBzaG93Tm9SZXN1bHRzOiBzZWN0aW9ucy5sZW5ndGggPT09IDAsXG4gICAgICBxdWVyeTogdGhpcy5jb3JlLmdsb2JhbFN0b3JhZ2UuZ2V0U3RhdGUoU3RvcmFnZUtleXMuUVVFUlkpXG4gICAgfSksIHZhbCk7XG4gIH1cblxuICBhZGRDaGlsZCAoZGF0YSA9IHt9LCB0eXBlLCBvcHRzKSB7XG4gICAgY29uc3QgY2hpbGRPcHRzID0geyAuLi5vcHRzLCAuLi50aGlzLmdldENoaWxkQ29uZmlnKFtkYXRhWyd2ZXJ0aWNhbENvbmZpZ0lkJ11dKSB9O1xuICAgIGlmIChjaGlsZE9wdHMudXNlQWNjb3JkaW9uID09PSB0cnVlKSB7XG4gICAgICByZXR1cm4gc3VwZXIuYWRkQ2hpbGQoZGF0YSwgQWNjb3JkaW9uUmVzdWx0c0NvbXBvbmVudC50eXBlLCBjaGlsZE9wdHMpO1xuICAgIH1cbiAgICByZXR1cm4gc3VwZXIuYWRkQ2hpbGQoZGF0YSwgdHlwZSwgY2hpbGRPcHRzKTtcbiAgfVxuXG4gIGdldENoaWxkQ29uZmlnIChjb25maWdJZCkge1xuICAgIGNvbnN0IGRlZmF1bHRDb25maWcgPSB7XG4gICAgICB2ZXJ0aWNhbENvbmZpZ0lkOiBjb25maWdJZCxcbiAgICAgIGlzVW5pdmVyc2FsOiB0cnVlXG4gICAgfTtcbiAgICBsZXQgY29uZmlnID0gdGhpcy5fY29uZmlnLmNvbmZpZztcbiAgICBpZiAoY29uZmlnID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBkZWZhdWx0Q29uZmlnO1xuICAgIH1cbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihkZWZhdWx0Q29uZmlnLCB0aGlzLl9jb25maWdbJ2NvbmZpZyddW2NvbmZpZ0lkXSB8fCB0aGlzLl9jb25maWdbJ2NvbmZpZyddKTtcbiAgfVxufVxuIiwiLyoqIEBtb2R1bGUgUGFnaW5hdGlvbkNvbXBvbmVudCAqL1xuXG5pbXBvcnQgQ29tcG9uZW50IGZyb20gJy4uL2NvbXBvbmVudCc7XG5pbXBvcnQgU3RvcmFnZUtleXMgZnJvbSAnLi4vLi4vLi4vY29yZS9zdG9yYWdlL3N0b3JhZ2VrZXlzJztcbmltcG9ydCBET00gZnJvbSAnLi4vLi4vZG9tL2RvbSc7XG5pbXBvcnQgeyBBbnN3ZXJzQ29tcG9uZW50RXJyb3IgfSBmcm9tICcuLi8uLi8uLi9jb3JlL2Vycm9ycy9lcnJvcnMnO1xuaW1wb3J0IFNlYXJjaFN0YXRlcyBmcm9tICcuLi8uLi8uLi9jb3JlL3N0b3JhZ2Uvc2VhcmNoc3RhdGVzJztcbmltcG9ydCBSZXN1bHRzQ29udGV4dCBmcm9tICcuLi8uLi8uLi9jb3JlL3N0b3JhZ2UvcmVzdWx0c2NvbnRleHQnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQYWdpbmF0aW9uQ29tcG9uZW50IGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IgKGNvbmZpZyA9IHt9LCBzeXN0ZW1Db25maWcgPSB7fSkge1xuICAgIHN1cGVyKGNvbmZpZywgc3lzdGVtQ29uZmlnKTtcblxuICAgIC8qKlxuICAgICAqIFRoZSB2ZXJ0aWNhbCBrZXkgdG8gdXNlIGZvciBzZWFyY2hlc1xuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLl92ZXJ0aWNhbEtleSA9IGNvbmZpZy52ZXJ0aWNhbEtleSB8fCB0aGlzLmNvcmUuZ2xvYmFsU3RvcmFnZS5nZXRTdGF0ZShTdG9yYWdlS2V5cy5TRUFSQ0hfQ09ORklHKS52ZXJ0aWNhbEtleTtcbiAgICBpZiAodHlwZW9mIHRoaXMuX3ZlcnRpY2FsS2V5ICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IEFuc3dlcnNDb21wb25lbnRFcnJvcihcbiAgICAgICAgJ3ZlcnRpY2FsS2V5IG5vdCBwcm92aWRlZCwgYnV0IG5lY2Vzc2FyeSBmb3IgcGFnaW5hdGlvbicsXG4gICAgICAgICdQYWdpbmF0aW9uQ29tcG9uZW50Jyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSWYgdHJ1ZSwgZGlzcGxheXMgdGhlIGZpcnN0IHBhZ2UgYnV0dG9uXG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLl9maXJzdFBhZ2VCdXR0b25FbmFibGVkID0gY29uZmlnLnNob3dGaXJzdCA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IGNvbmZpZy5zaG93Rmlyc3Q7XG5cbiAgICAvKipcbiAgICAgKiBJZiB0cnVlLCBkaXNwbGF5cyB0aGUgbGFzdCBwYWdlIGJ1dHRvblxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5fbGFzdFBhZ2VCdXR0b25FbmFibGVkID0gY29uZmlnLnNob3dMYXN0ID09PSB1bmRlZmluZWQgPyB0cnVlIDogY29uZmlnLnNob3dMYXN0O1xuXG4gICAgLyoqXG4gICAgICogT3B0aW9ucyB0byBpbmNsdWRlIHdpdGggYWxsIGFuYWx5dGljIGV2ZW50cyBzZW50IGJ5IHRoaXMgY29tcG9uZW50XG4gICAgICogQHR5cGUge29iamVjdH1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuX2FuYWx5dGljc09wdGlvbnMgPSB7XG4gICAgICB2ZXJ0aWNhbEtleTogdGhpcy5fdmVydGljYWxLZXlcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogTGFiZWwgZm9yIGEgcGFnZSBvZiByZXN1bHRzLlxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLl9wYWdlTGFiZWwgPSBjb25maWcucGFnZUxhYmVsIHx8ICdQYWdlJztcblxuICAgIGNvbnN0IG9mZnNldCA9IHRoaXMuY29yZS5nbG9iYWxTdG9yYWdlLmdldFN0YXRlKFN0b3JhZ2VLZXlzLlNFQVJDSF9PRkZTRVQpIHx8IDA7XG4gICAgdGhpcy5jb3JlLmdsb2JhbFN0b3JhZ2Uuc2V0KFN0b3JhZ2VLZXlzLlNFQVJDSF9PRkZTRVQsIE51bWJlcihvZmZzZXQpKTtcbiAgICB0aGlzLmNvcmUuZ2xvYmFsU3RvcmFnZS5vbigndXBkYXRlJywgU3RvcmFnZUtleXMuU0VBUkNIX09GRlNFVCwgb2Zmc2V0ID0+IHtcbiAgICAgIGlmICh0eXBlb2Ygb2Zmc2V0ID09PSAnbnVtYmVyJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB0aGlzLmNvcmUuZ2xvYmFsU3RvcmFnZS5zZXQoU3RvcmFnZUtleXMuU0VBUkNIX09GRlNFVCwgTnVtYmVyKG9mZnNldCkpO1xuICAgIH0pO1xuXG4gICAgdGhpcy5jb3JlLmdsb2JhbFN0b3JhZ2Uub24oJ3VwZGF0ZScsIFN0b3JhZ2VLZXlzLlZFUlRJQ0FMX1JFU1VMVFMsIHJlc3VsdHMgPT4ge1xuICAgICAgaWYgKHJlc3VsdHMuc2VhcmNoU3RhdGUgPT09IFNlYXJjaFN0YXRlcy5TRUFSQ0hfQ09NUExFVEUpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSgpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ29uZmlndXJhdGlvbiBmb3IgdGhlIGJlaGF2aW9yIHdoZW4gdGhlcmUgYXJlIG5vIHZlcnRpY2FsIHJlc3VsdHMuXG4gICAgICovXG4gICAgdGhpcy5fbm9SZXN1bHRzID0gY29uZmlnLm5vUmVzdWx0cyB8fFxuICAgICAgdGhpcy5jb3JlLmdsb2JhbFN0b3JhZ2UuZ2V0U3RhdGUoU3RvcmFnZUtleXMuTk9fUkVTVUxUU19DT05GSUcpIHx8XG4gICAgICB7fTtcbiAgfVxuXG4gIHN0YXRpYyBnZXQgdHlwZSAoKSB7XG4gICAgcmV0dXJuICdQYWdpbmF0aW9uJztcbiAgfVxuXG4gIHN0YXRpYyBkZWZhdWx0VGVtcGxhdGVOYW1lICgpIHtcbiAgICByZXR1cm4gJ3Jlc3VsdHMvcGFnaW5hdGlvbic7XG4gIH1cblxuICBzaG91bGRTaG93Q29udHJvbHMgKHJlc3VsdHMsIGxpbWl0KSB7XG4gICAgY29uc3QgaGFzUmVzdWx0cyA9IHJlc3VsdHMuc2VhcmNoU3RhdGUgPT09ICdzZWFyY2gtY29tcGxldGUnICYmIHJlc3VsdHMucmVzdWx0c0NvdW50ID4gbGltaXQ7XG4gICAgY29uc3QgaXNOb3JtYWxSZXN1bHRzID0gcmVzdWx0cy5yZXN1bHRzQ29udGV4dCA9PT0gUmVzdWx0c0NvbnRleHQuTk9STUFMO1xuICAgIGNvbnN0IGlzVmlzaWJsZUZvck5vUmVzdWx0cyA9ICd2aXNpYmxlJyBpbiB0aGlzLl9ub1Jlc3VsdHNcbiAgICAgID8gdGhpcy5fbm9SZXN1bHRzLnZpc2libGVcbiAgICAgIDogdGhpcy5fbm9SZXN1bHRzLmRpc3BsYXlBbGxSZXN1bHRzO1xuICAgIHJldHVybiBoYXNSZXN1bHRzICYmIChpc05vcm1hbFJlc3VsdHMgfHwgaXNWaXNpYmxlRm9yTm9SZXN1bHRzKTtcbiAgfVxuXG4gIG9uTW91bnQgKCkge1xuICAgIGNvbnN0IHJlc3VsdHMgPSB0aGlzLmNvcmUuZ2xvYmFsU3RvcmFnZS5nZXRTdGF0ZShTdG9yYWdlS2V5cy5WRVJUSUNBTF9SRVNVTFRTKSB8fCB7fTtcbiAgICBjb25zdCBsaW1pdCA9IHRoaXMuY29yZS5nbG9iYWxTdG9yYWdlLmdldFN0YXRlKFN0b3JhZ2VLZXlzLlNFQVJDSF9DT05GSUcpLmxpbWl0O1xuICAgIGNvbnN0IHNob3dDb250cm9scyA9IHRoaXMuc2hvdWxkU2hvd0NvbnRyb2xzKHJlc3VsdHMsIGxpbWl0KTtcbiAgICBjb25zdCBvZmZzZXQgPSB0aGlzLmNvcmUuZ2xvYmFsU3RvcmFnZS5nZXRTdGF0ZShTdG9yYWdlS2V5cy5TRUFSQ0hfT0ZGU0VUKSB8fCAwO1xuICAgIGlmICghc2hvd0NvbnRyb2xzKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgcHJldmlvdXNQYWdlQnV0dG9uID0gRE9NLnF1ZXJ5KHRoaXMuX2NvbnRhaW5lciwgJy5qcy15eHQtUGFnaW5hdGlvbi1wcmV2aW91cycpO1xuICAgIGNvbnN0IG5leHRQYWdlQnV0dG9uID0gRE9NLnF1ZXJ5KHRoaXMuX2NvbnRhaW5lciwgJy5qcy15eHQtUGFnaW5hdGlvbi1uZXh0Jyk7XG4gICAgY29uc3QgbWF4UGFnZSA9IE1hdGgudHJ1bmMoKHJlc3VsdHMucmVzdWx0c0NvdW50IC0gMSkgLyBsaW1pdCk7XG5cbiAgICBET00ub24ocHJldmlvdXNQYWdlQnV0dG9uLCAnY2xpY2snLCAoKSA9PiB0aGlzLnVwZGF0ZVBhZ2Uob2Zmc2V0IC0gbGltaXQpKTtcbiAgICBET00ub24obmV4dFBhZ2VCdXR0b24sICdjbGljaycsICgpID0+IHRoaXMudXBkYXRlUGFnZShvZmZzZXQgKyBsaW1pdCkpO1xuXG4gICAgaWYgKHRoaXMuX2ZpcnN0UGFnZUJ1dHRvbkVuYWJsZWQpIHtcbiAgICAgIGNvbnN0IGZpcnN0UGFnZUJ1dHRvbiA9IERPTS5xdWVyeSh0aGlzLl9jb250YWluZXIsICcuanMteXh0LVBhZ2luYXRpb24tZmlyc3QnKTtcbiAgICAgIERPTS5vbihmaXJzdFBhZ2VCdXR0b24sICdjbGljaycsICgpID0+IHRoaXMudXBkYXRlUGFnZSgwKSk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2xhc3RQYWdlQnV0dG9uRW5hYmxlZCkge1xuICAgICAgY29uc3QgbGFzdFBhZ2VCdXR0b24gPSBET00ucXVlcnkodGhpcy5fY29udGFpbmVyLCAnLmpzLXl4dC1QYWdpbmF0aW9uLWxhc3QnKTtcbiAgICAgIERPTS5vbihsYXN0UGFnZUJ1dHRvbiwgJ2NsaWNrJywgKCkgPT4gdGhpcy51cGRhdGVQYWdlKG1heFBhZ2UgKiBsaW1pdCkpO1xuICAgIH1cbiAgfVxuXG4gIHVwZGF0ZVBhZ2UgKG9mZnNldCkge1xuICAgIHRoaXMuc2Nyb2xsVG9Ub3AoKTtcbiAgICB0aGlzLmNvcmUuZ2xvYmFsU3RvcmFnZS5zZXQoU3RvcmFnZUtleXMuU0VBUkNIX09GRlNFVCwgb2Zmc2V0KTtcbiAgICB0aGlzLmNvcmUucGVyc2lzdGVudFN0b3JhZ2Uuc2V0KFN0b3JhZ2VLZXlzLlNFQVJDSF9PRkZTRVQsIG9mZnNldCk7XG4gICAgdGhpcy5jb3JlLnZlcnRpY2FsUGFnZSh0aGlzLl92ZXJ0aWNhbEtleSwgb2Zmc2V0KTtcbiAgfVxuXG4gIHNjcm9sbFRvVG9wICgpIHtcbiAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wID0gMDtcbiAgICAvLyBTYWZhcmlcbiAgICBkb2N1bWVudC5ib2R5LnNjcm9sbFRvcCA9IDA7XG4gIH1cblxuICBzZXRTdGF0ZSAoZGF0YSkge1xuICAgIGNvbnN0IHJlc3VsdHMgPSB0aGlzLmNvcmUuZ2xvYmFsU3RvcmFnZS5nZXRTdGF0ZShTdG9yYWdlS2V5cy5WRVJUSUNBTF9SRVNVTFRTKSB8fCB7fTtcbiAgICBsZXQgb2Zmc2V0ID0gdGhpcy5jb3JlLmdsb2JhbFN0b3JhZ2UuZ2V0U3RhdGUoU3RvcmFnZUtleXMuU0VBUkNIX09GRlNFVCkgfHwgMDtcbiAgICBjb25zdCBsaW1pdCA9IHRoaXMuY29yZS5nbG9iYWxTdG9yYWdlLmdldFN0YXRlKFN0b3JhZ2VLZXlzLlNFQVJDSF9DT05GSUcpLmxpbWl0O1xuICAgIGNvbnN0IHBhZ2VOdW1iZXIgPSBvZmZzZXQgLyBsaW1pdDtcbiAgICBjb25zdCBpc01vcmVSZXN1bHRzID0gcmVzdWx0cy5yZXN1bHRzQ291bnQgPiBvZmZzZXQgKyBsaW1pdDtcbiAgICBjb25zdCBtYXhQYWdlID0gTWF0aC50cnVuYygocmVzdWx0cy5yZXN1bHRzQ291bnQgLSAxKSAvIGxpbWl0KTtcbiAgICByZXR1cm4gc3VwZXIuc2V0U3RhdGUoe1xuICAgICAgc2hvd0NvbnRyb2xzOiB0aGlzLnNob3VsZFNob3dDb250cm9scyhyZXN1bHRzLCBsaW1pdCksXG4gICAgICBmaXJzdFBhZ2VCdXR0b25FbmFibGVkOiB0aGlzLl9maXJzdFBhZ2VCdXR0b25FbmFibGVkLFxuICAgICAgbGFzdFBhZ2VCdXR0b25FbmFibGVkOiB0aGlzLl9sYXN0UGFnZUJ1dHRvbkVuYWJsZWQsXG4gICAgICBwYWdlTnVtYmVyOiBwYWdlTnVtYmVyICsgMSxcbiAgICAgIHBhZ2VMYWJlbDogdGhpcy5fcGFnZUxhYmVsLFxuICAgICAgc2hvd0ZpcnN0UGFnZUJ1dHRvbjogcGFnZU51bWJlciA+IDEsXG4gICAgICBzaG93UHJldmlvdXNQYWdlQnV0dG9uOiBwYWdlTnVtYmVyID4gMCxcbiAgICAgIHNob3dOZXh0UGFnZUJ1dHRvbjogaXNNb3JlUmVzdWx0cyxcbiAgICAgIHNob3dMYXN0UGFnZUJ1dHRvbjogcGFnZU51bWJlciA8IG1heFBhZ2UgLSAxLFxuICAgICAgLi4uZGF0YVxuICAgIH0pO1xuICB9XG59XG4iLCIvKiogQG1vZHVsZSBDVEFDb2xsZWN0aW9uQ29tcG9uZW50ICovXG5cbmltcG9ydCBDb21wb25lbnQgZnJvbSAnLi4vY29tcG9uZW50JztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ1RBQ29sbGVjdGlvbkNvbXBvbmVudCBleHRlbmRzIENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yIChjb25maWcgPSB7fSwgc3lzdGVtQ29uZmlnID0ge30pIHtcbiAgICBzdXBlcihjb25maWcsIHN5c3RlbUNvbmZpZyk7XG5cbiAgICBjb25zdCBkYXRhID0gdGhpcy5fY29uZmlnLmRhdGEgfHwge307XG5cbiAgICAvKipcbiAgICAgKiBSZXN1bHQgZGF0YVxuICAgICAqIEB0eXBlIHtSZXN1bHR9XG4gICAgICovXG4gICAgdGhpcy5yZXN1bHQgPSBkYXRhLnJlc3VsdCB8fCB7fTtcblxuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgdGhlIERPTSBzaG91bGQgaW5jbHVkZSBsZWdhY3kgY2xhc3MgbmFtZXNcbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICB0aGlzLmluY2x1ZGVMZWdhY3lDbGFzc2VzID0gdGhpcy5fY29uZmlnLmluY2x1ZGVMZWdhY3lDbGFzc2VzIHx8IGZhbHNlO1xuXG4gICAgLyoqXG4gICAgICogVmVydGljYWwga2V5IGZvciB0aGUgc2VhcmNoLlxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgdGhpcy52ZXJ0aWNhbEtleSA9IGRhdGEudmVydGljYWxLZXk7XG5cbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIHRoaXMgY3RhIGlzIHBhcnQgb2YgYSB1bml2ZXJzYWwgc2VhcmNoLlxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqL1xuICAgIHRoaXMuaXNVbml2ZXJzYWwgPSB0aGlzLl9jb25maWcuaXNVbml2ZXJzYWwgfHwgZmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiBFaXRoZXIgYSBmdW5jdGlvbiB0aGF0IHNwaXRzIG91dCBhbiBhcnJheSBvZiBDVEEgY29uZmlnIG9iamVjdHMgb3IgYW4gYXJyYXkgb2YgQ1RBIGNvbmZpZyBvYmplY3RzXG4gICAgICogb3IgYXBpIGZpZWxkbmFtZXNcbiAgICAgKiBAdHlwZSB7RnVuY3Rpb258QXJyYXk8T2JqZWN0fHN0cmluZz59XG4gICAgICovXG4gICAgY29uc3QgY2FsbHNUb0FjdGlvbiA9IHRoaXMuX2NvbmZpZy5jYWxsc1RvQWN0aW9uIHx8IFtdO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGNvbmZpZyBmb3IgZWFjaCBjYWxscyB0byBhY3Rpb24gY29tcG9uZW50IHRvIHJlbmRlci5cbiAgICAgKiBAdHlwZSB7QXJyYXk8T2JqZWN0Pn1cbiAgICAgKi9cbiAgICB0aGlzLmNhbGxzVG9BY3Rpb24gPSBDVEFDb2xsZWN0aW9uQ29tcG9uZW50LnJlc29sdmVDVEFNYXBwaW5nKHRoaXMucmVzdWx0Ll9yYXcsIC4uLmNhbGxzVG9BY3Rpb24pO1xuXG4gICAgLy8gQXNzaWduIGFueSBleHRyYSBjdGEgY29uZmlnIHRoYXQgZG9lcyBub3QgY29tZSBmcm9tIHRoZSBjdGEgbWFwcGluZ3MuXG4gICAgY29uc3QgX2N0YU1vZGlmaWVycyA9IHRoaXMuX2NvbmZpZy5fY3RhTW9kaWZpZXJzIHx8IFtdO1xuICAgIGlmICh0aGlzLmNhbGxzVG9BY3Rpb24ubGVuZ3RoID09PSAxKSB7XG4gICAgICBfY3RhTW9kaWZpZXJzLnB1c2goJ3NvbG8nKTtcbiAgICB9XG4gICAgdGhpcy5jYWxsc1RvQWN0aW9uID0gdGhpcy5jYWxsc1RvQWN0aW9uLm1hcChjdGEgPT4gKHtcbiAgICAgIGV2ZW50T3B0aW9uczogdGhpcy5kZWZhdWx0RXZlbnRPcHRpb25zKHRoaXMucmVzdWx0KSxcbiAgICAgIF9jdGFNb2RpZmllcnM6IF9jdGFNb2RpZmllcnMsXG4gICAgICBpbmNsdWRlTGVnYWN5Q2xhc3NlczogdGhpcy5pbmNsdWRlTGVnYWN5Q2xhc3NlcyxcbiAgICAgIC4uLmN0YVxuICAgIH0pKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBIYW5kbGVzIHJlc29sdmluZyBjdGFzIGZyb20gYSBjdGEgbWFwcGluZyB3aGljaCBhcmUgZWl0aGVyXG4gICAqIDEuIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGEgY3RhJ3MgY29uZmlnXG4gICAqIDIuIGFuIG9iamVjdCB0aGF0IGhhcyBhIHBlci1hdHRyaWJ1dGUgbWFwcGluZyBvZiBlaXRoZXIgYVxuICAgKiAgICBhKSBzdGF0aWMgdmFsdWVcbiAgICogICAgYikgZnVuY3Rpb24gdGhhdCB0YWtlcyBpbiByZXN1dCBkYXRhIGFuZCByZXR1cm5zIHRoZSBnaXZlbiBhdHRyaWJ1dGVzIHZhbHVlXG4gICAqIE5vdGU6IEludGVudGlvbmFsbHkgZG9lcyBub3QgYWxsb3cgbmVzdGluZyBmdW5jdGlvbnMuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSByZXN1bHRcbiAgICogQHBhcmFtIHtGdW5jdGlvbnwuLi4oT2JqZWN0fHN0cmluZyl9IGN0YXNcbiAgICogQHJldHVybnMge0FycmF5PE9iamVjdD59XG4gICAqL1xuICBzdGF0aWMgcmVzb2x2ZUNUQU1hcHBpbmcgKHJlc3VsdCwgLi4uY3Rhcykge1xuICAgIGxldCBwYXJzZWRDVEFzID0gW107XG4gICAgY3Rhcy5tYXAoY3RhTWFwcGluZyA9PiB7XG4gICAgICBpZiAodHlwZW9mIGN0YU1hcHBpbmcgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcGFyc2VkQ1RBcyA9IHBhcnNlZENUQXMuY29uY2F0KGN0YU1hcHBpbmcocmVzdWx0KSk7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBjdGFNYXBwaW5nID09PSAnb2JqZWN0Jykge1xuICAgICAgICBjb25zdCBjdGFPYmplY3QgPSB7IC4uLmN0YU1hcHBpbmcgfTtcbiAgICAgICAgZm9yIChsZXQgW2N0YUF0dHJpYnV0ZSwgYXR0cmlidXRlTWFwcGluZ10gb2YgT2JqZWN0LmVudHJpZXMoY3RhTWFwcGluZykpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIGF0dHJpYnV0ZU1hcHBpbmcgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGN0YU9iamVjdFtjdGFBdHRyaWJ1dGVdID0gYXR0cmlidXRlTWFwcGluZyhyZXN1bHQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBwYXJzZWRDVEFzLnB1c2goY3RhT2JqZWN0KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBwYXJzZWRDVEFzID0gcGFyc2VkQ1RBcy5maWx0ZXIoY3RhID0+IGN0YSk7XG5cbiAgICBwYXJzZWRDVEFzLmZvckVhY2goY3RhID0+IHtcbiAgICAgIGlmICghY3RhLmxhYmVsICYmICFjdGEudXJsKSB7XG4gICAgICAgIGNvbnNvbGUud2FybignQ2FsbCB0byBBY3Rpb246JywgY3RhLCAnaXMgbWlzc2luZyBib3RoIGEgbGFiZWwgYW5kIHVybCBhdHRyaWJ1dGUgYW5kIGlzIGJlaW5nIGF1dG9tYXRpY2FsbHkgaGlkZGVuJyk7XG4gICAgICB9IGVsc2UgaWYgKCFjdGEubGFiZWwpIHtcbiAgICAgICAgY29uc29sZS53YXJuKCdDYWxsIHRvIEFjdGlvbjonLCBjdGEsICdpcyBtaXNzaW5nIGEgbGFiZWwgYXR0cmlidXRlIGFuZCBpcyBiZWluZyBhdXRvbWF0aWNhbGx5IGhpZGRlbicpO1xuICAgICAgfSBlbHNlIGlmICghY3RhLnVybCkge1xuICAgICAgICBjb25zb2xlLndhcm4oJ0NhbGwgdG8gQWN0aW9uOicsIGN0YSwgJ2lzIG1pc3NpbmcgYSB1cmwgYXR0cmlidXRlIGFuZCBpcyBiZWluZyBhdXRvbWF0aWNhbGx5IGhpZGRlbicpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHBhcnNlZENUQXMuZmlsdGVyKGN0YSA9PiBjdGEudXJsICYmIGN0YS51cmwudHJpbSgpICYmIGN0YS5sYWJlbCAmJiBjdGEubGFiZWwudHJpbSgpKTtcbiAgfVxuXG4gIHN0YXRpYyBoYXNDVEFzIChyZXN1bHQsIGN0YXMpIHtcbiAgICByZXR1cm4gQ1RBQ29sbGVjdGlvbkNvbXBvbmVudC5yZXNvbHZlQ1RBTWFwcGluZyhyZXN1bHQsIC4uLmN0YXMpLmxlbmd0aCA+IDA7XG4gIH1cblxuICBkZWZhdWx0RXZlbnRPcHRpb25zIChyZXN1bHQpIHtcbiAgICBjb25zdCBldmVudE9wdGlvbnMgPSB7XG4gICAgICB2ZXJ0aWNhbEtleTogdGhpcy52ZXJ0aWNhbEtleSxcbiAgICAgIHNlYXJjaGVyOiB0aGlzLl9jb25maWcuaXNVbml2ZXJzYWwgPyAnVU5JVkVSU0FMJyA6ICdWRVJUSUNBTCdcbiAgICB9O1xuICAgIGlmIChyZXN1bHQuX3Jhdy5pZCkge1xuICAgICAgZXZlbnRPcHRpb25zLmVudGl0eUlkID0gcmVzdWx0Ll9yYXcuaWQ7XG4gICAgfVxuICAgIHJldHVybiBldmVudE9wdGlvbnM7XG4gIH1cblxuICBzZXRTdGF0ZSAoZGF0YSkge1xuICAgIHJldHVybiBzdXBlci5zZXRTdGF0ZSh7XG4gICAgICAuLi5kYXRhLFxuICAgICAgaW5jbHVkZUxlZ2FjeUNsYXNzZXM6IHRoaXMuaW5jbHVkZUxlZ2FjeUNsYXNzZXMsXG4gICAgICBjYWxsc1RvQWN0aW9uOiB0aGlzLmNhbGxzVG9BY3Rpb25cbiAgICB9KTtcbiAgfVxuXG4gIHN0YXRpYyBnZXQgdHlwZSAoKSB7XG4gICAgcmV0dXJuICdDVEFDb2xsZWN0aW9uJztcbiAgfVxuXG4gIHN0YXRpYyBkZWZhdWx0VGVtcGxhdGVOYW1lICgpIHtcbiAgICByZXR1cm4gJ2N0YXMvY3RhY29sbGVjdGlvbic7XG4gIH1cbn1cbiIsIi8qKiBAbW9kdWxlIFN0YW5kYXJkQ2FyZENvbXBvbmVudCAqL1xuXG5pbXBvcnQgQ29tcG9uZW50IGZyb20gJy4uL2NvbXBvbmVudCc7XG5pbXBvcnQgQ2FyZENvbXBvbmVudCBmcm9tICcuL2NhcmRjb21wb25lbnQnO1xuaW1wb3J0IHsgY2FyZFRlbXBsYXRlcywgY2FyZFR5cGVzIH0gZnJvbSAnLi9jb25zdHMnO1xuaW1wb3J0IERPTSBmcm9tICcuLi8uLi9kb20vZG9tJztcbmltcG9ydCBDVEFDb2xsZWN0aW9uQ29tcG9uZW50IGZyb20gJy4uL2N0YXMvY3RhY29sbGVjdGlvbmNvbXBvbmVudCc7XG5cbmNsYXNzIFN0YW5kYXJkQ2FyZENvbmZpZyB7XG4gIGNvbnN0cnVjdG9yIChjb25maWcgPSB7fSkge1xuICAgIE9iamVjdC5hc3NpZ24odGhpcywgY29uZmlnKTtcblxuICAgIGNvbnN0IGRhdGEgPSBjb25maWcuZGF0YSB8fCB7fTtcblxuICAgIC8qKlxuICAgICAqIFRoZSByZXN1bHQgZGF0YVxuICAgICAqIEB0eXBlIHtSZXN1bHR9XG4gICAgICovXG4gICAgY29uc3QgcmVzdWx0ID0gZGF0YS5yZXN1bHQgfHwge307XG5cbiAgICAvKipcbiAgICAgKiBUaGUgcmF3IHByb2ZpbGUgZGF0YVxuICAgICAqIEB0eXBlIHtPYmplY3R9XG4gICAgICovXG4gICAgY29uc3QgcmF3UmVzdWx0ID0gcmVzdWx0Ll9yYXcgfHwge307XG5cbiAgICAvKipcbiAgICAgKiBUaGUgZGF0YU1hcHBpbmdzIGF0dHJpYnV0ZSBvZiB0aGUgY29uZmlnXG4gICAgICogaXMgZWl0aGVyIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGFkZGl0aW9uYWwgY29uZmlnIGZvclxuICAgICAqIGEgY2FyZCBvciBhbiBvYmplY3QgdGhhdCBpcyB0aGUgYWRkaXRpb25hbCBjb25maWcuXG4gICAgICovXG4gICAgT2JqZWN0LmFzc2lnbih0aGlzLCBDYXJkQ29tcG9uZW50LmFwcGx5RGF0YU1hcHBpbmdzKHJhd1Jlc3VsdCwgY29uZmlnLmRhdGFNYXBwaW5ncyB8fCB7fSkpO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHJlc3VsdCBkYXRhXG4gICAgICogQHR5cGUge1Jlc3VsdH1cbiAgICAgKi9cbiAgICB0aGlzLnJlc3VsdCA9IGNvbmZpZy5kYXRhIHx8IHt9O1xuXG4gICAgLyoqXG4gICAgICogVGl0bGUgZm9yIHRoZSBjYXJkXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLnRpdGxlID0gdGhpcy50aXRsZSB8fCByZXN1bHQudGl0bGUgfHwgcmF3UmVzdWx0Lm5hbWUgfHwgJyc7XG5cbiAgICAvKipcbiAgICAgKiBEZXRhaWxzIGZvciB0aGUgY2FyZFxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgdGhpcy5kZXRhaWxzID0gdGhpcy5kZXRhaWxzID09PSBudWxsID8gbnVsbCA6ICh0aGlzLmRldGFpbHMgfHwgcmVzdWx0LmRldGFpbHMgfHwgcmF3UmVzdWx0LmRlc2NyaXB0aW9uIHx8ICcnKTtcblxuICAgIC8qKlxuICAgICAqIFVybCB3aGVuIHlvdSBjbGljayB0aGUgdGl0bGVcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMudXJsID0gdGhpcy51cmwgPT09IG51bGwgPyAnJyA6ICh0aGlzLnVybCB8fCByZXN1bHQubGluayB8fCByYXdSZXN1bHQud2Vic2l0ZSk7XG5cbiAgICAvKipcbiAgICAgKiBJZiBzaG93TW9yZUxpbWl0IGlzIHNldCwgdGhlIHRleHQgdGhhdCBkaXNwbGF5cyBiZW5lYXRoIGl0XG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLnNob3dNb3JlVGV4dCA9IHRoaXMuc2hvd01vcmVUZXh0IHx8ICdTaG93IE1vcmUnO1xuXG4gICAgLyoqXG4gICAgICogSWYgc2hvd01vcmVMaW1pdCBpcyBzZXQsIHRoZSB0ZXh0IHRoYXQgZGlzcGxheXMgYmVuZWF0aCBpdCB3aGVuIGFsbCB0ZXh0IGlzIHNob3duXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLnNob3dMZXNzVGV4dCA9IHRoaXMuc2hvd0xlc3NUZXh0IHx8ICdTaG93IExlc3MnO1xuXG4gICAgLyoqXG4gICAgICogQWRkIGEgc2hvdyBtb3JlIGxpbmsgaWYgdGhpcyBudW1iZXIgb2YgY2hhcmFjdGVycyBpcyBzaG93bixcbiAgICAgKiBhbmQgdHJ1bmNhdGUgdGhlIGxhc3QgMyBjaGFyYWN0ZXJzIHdpdGggYW4gZWxsaXBzZXMuXG4gICAgICogQ2xpY2tpbmcgc2hvdyBtb3JlIHNob3VsZCBleHBhbmQgdGhlIHJlc3VsdHMgKGJ1dCBubyDigJxzaG93IGxlc3PigJ0gbGluaykuXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLnNob3dNb3JlTGltaXQgPSB0aGlzLnNob3dNb3JlTGltaXQ7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgdGFyZ2V0IGF0dHJpYnV0ZSBmb3IgdGhlIHRpdGxlIGxpbmsuXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLnRhcmdldCA9IHRoaXMudGFyZ2V0O1xuXG4gICAgLyoqXG4gICAgICogSW1hZ2UgdXJsIHRvIGRpc3BsYXlcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMuaW1hZ2UgPSB0aGlzLmltYWdlO1xuXG4gICAgLyoqXG4gICAgICogU3VidGl0bGVcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMuc3VidGl0bGUgPSB0aGlzLnN1YnRpdGxlO1xuXG4gICAgLyoqXG4gICAgICogV2hldGhlciBhICdzaG93IG1vcmUnIHRvZ2dsZSBidXR0b24gbmVlZHMgdG8gYmUgcmVuZGVyZWQgYXQgYWxsXG4gICAgICovXG4gICAgY29uc3QgZGV0YWlsc092ZXJMaW1pdCA9IHRoaXMuZGV0YWlscy5sZW5ndGggPiB0aGlzLnNob3dNb3JlTGltaXQ7XG4gICAgdGhpcy5zaG93VG9nZ2xlID0gdGhpcy5zaG93TW9yZUxpbWl0ICYmIGRldGFpbHNPdmVyTGltaXQ7XG5cbiAgICAvKipcbiAgICAgKiBFaXRoZXIgYSBmdW5jdGlvbiB0aGF0IHNwaXRzIG91dCBhbiBhcnJheSBvZiBDVEEgY29uZmlnIG9iamVjdHMgb3IgYW4gYXJyYXkgb2YgQ1RBIGNvbmZpZyBvYmplY3RzXG4gICAgICogb3IgYXBpIGZpZWxkbmFtZXNcbiAgICAgKiBAdHlwZSB7RnVuY3Rpb258QXJyYXk8T2JqZWN0fHN0cmluZz59XG4gICAgICovXG4gICAgdGhpcy5jYWxsc1RvQWN0aW9uID0gdGhpcy5jYWxsc1RvQWN0aW9uIHx8IFtdO1xuXG4gICAgLyoqXG4gICAgICogV2hldGhlciB0byBzaG93IHRoZSBvcmRpbmFsIG9mIHRoZSBjYXJkIGluIHRoZSByZXN1bHRzLlxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqL1xuICAgIHRoaXMuc2hvd09yZGluYWwgPSB0aGlzLnNob3dPcmRpbmFsIHx8IGZhbHNlO1xuXG4gICAgLyoqXG4gICAgICogV2hldGhlciB0aGlzIGNhcmQgaXMgcGFydCBvZiBhIHVuaXZlcnNhbCBzZWFyY2guXG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICovXG4gICAgdGhpcy5pc1VuaXZlcnNhbCA9IHRoaXMuaXNVbml2ZXJzYWwgfHwgZmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgaW5kZXggb2YgdGhlIGNhcmQuXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLl9pbmRleCA9IGNvbmZpZy5faW5kZXggfHwgMDtcbiAgfVxufVxuXG4vKipcbiAqIENhcmQgY29tcG9uZW50cyBleHBlY3QgdG8gcmVjZWl2ZSBhIGRhdGEgY29uZmlnIG9wdGlvbiwgY29udGFpbmluZyBkYXRhIHJlZ2FyZGluZyBlbnRpdHkgcmVzdWx0XG4gKiBlYWNoIGNhcmQgaXMgYXNzaWduZWQgdG8sIGluY2x1ZGluZyBhbGwgZmllbGQgZGF0YSBpbiBkYXRhLl9yYXcuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFN0YW5kYXJkQ2FyZENvbXBvbmVudCBleHRlbmRzIENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yIChjb25maWcgPSB7fSwgc3lzdGVtQ29uZmlnID0ge30pIHtcbiAgICBzdXBlcihuZXcgU3RhbmRhcmRDYXJkQ29uZmlnKGNvbmZpZyksIHN5c3RlbUNvbmZpZyk7XG4gICAgdGhpcy5oaWRlRXhjZXNzRGV0YWlscyA9IHRoaXMuX2NvbmZpZy5zaG93VG9nZ2xlO1xuXG4gICAgLyoqXG4gICAgICogQHR5cGUge09iamVjdH1cbiAgICAgKi9cbiAgICBjb25zdCBkYXRhID0gY29uZmlnLmRhdGEgfHwge307XG5cbiAgICAvKipcbiAgICAgKiBWZXJ0aWNhbCBrZXkgZm9yIHRoZSBzZWFyY2guXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLnZlcnRpY2FsS2V5ID0gZGF0YS52ZXJ0aWNhbEtleTtcblxuICAgIC8qKlxuICAgICAqIFRoZSByZXN1bHQgZGF0YVxuICAgICAqIEB0eXBlIHtSZXN1bHR9XG4gICAgICovXG4gICAgdGhpcy5yZXN1bHQgPSBkYXRhLnJlc3VsdCB8fCB7fTtcbiAgfVxuXG4gIHNldFN0YXRlIChkYXRhKSB7XG4gICAgbGV0IGRldGFpbHMgPSB0aGlzLl9jb25maWcuZGV0YWlscztcbiAgICBpZiAodGhpcy5fY29uZmlnLnNob3dNb3JlTGltaXQpIHtcbiAgICAgIGRldGFpbHMgPSB0aGlzLmhpZGVFeGNlc3NEZXRhaWxzXG4gICAgICAgID8gYCR7dGhpcy5fY29uZmlnLmRldGFpbHMuc3Vic3RyaW5nKDAsIHRoaXMuX2NvbmZpZy5zaG93TW9yZUxpbWl0KX0uLi5gXG4gICAgICAgIDogdGhpcy5fY29uZmlnLmRldGFpbHM7XG4gICAgfVxuICAgIHJldHVybiBzdXBlci5zZXRTdGF0ZSh7XG4gICAgICAuLi5kYXRhLFxuICAgICAgaGlkZUV4Y2Vzc0RldGFpbHM6IHRoaXMuaGlkZUV4Y2Vzc0RldGFpbHMsXG4gICAgICByZXN1bHQ6IHRoaXMucmVzdWx0LFxuICAgICAgaGFzQ1RBczogQ1RBQ29sbGVjdGlvbkNvbXBvbmVudC5oYXNDVEFzKHRoaXMucmVzdWx0Ll9yYXcsIHRoaXMuX2NvbmZpZy5jYWxsc1RvQWN0aW9uKSxcbiAgICAgIGVudGl0eUlkOiB0aGlzLnJlc3VsdC5fcmF3LmlkLFxuICAgICAgdmVydGljYWxLZXk6IHRoaXMudmVydGljYWxLZXksXG4gICAgICBkZXRhaWxzXG4gICAgfSk7XG4gIH1cblxuICBvbk1vdW50ICgpIHtcbiAgICBpZiAodGhpcy5fY29uZmlnLnNob3dUb2dnbGUpIHtcbiAgICAgIGNvbnN0IGVsID0gRE9NLnF1ZXJ5KHRoaXMuX2NvbnRhaW5lciwgJy5qcy15eHQtU3RhbmRhcmRDYXJkLXRvZ2dsZScpO1xuICAgICAgRE9NLm9uKGVsLCAnY2xpY2snLCAoKSA9PiB7XG4gICAgICAgIHRoaXMuaGlkZUV4Y2Vzc0RldGFpbHMgPSAhdGhpcy5oaWRlRXhjZXNzRGV0YWlscztcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSgpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgYWRkQ2hpbGQgKGRhdGEsIHR5cGUsIG9wdHMpIHtcbiAgICBpZiAodHlwZSA9PT0gQ1RBQ29sbGVjdGlvbkNvbXBvbmVudC50eXBlKSB7XG4gICAgICBjb25zdCB1cGRhdGVkRGF0YSA9IHtcbiAgICAgICAgdmVydGljYWxLZXk6IHRoaXMudmVydGljYWxLZXksXG4gICAgICAgIHJlc3VsdDogZGF0YVxuICAgICAgfTtcbiAgICAgIHJldHVybiBzdXBlci5hZGRDaGlsZCh1cGRhdGVkRGF0YSwgdHlwZSwge1xuICAgICAgICBjYWxsc1RvQWN0aW9uOiB0aGlzLl9jb25maWcuY2FsbHNUb0FjdGlvbixcbiAgICAgICAgaXNVbml2ZXJzYWw6IHRoaXMuX2NvbmZpZy5pc1VuaXZlcnNhbCxcbiAgICAgICAgX2N0YU1vZGlmaWVyczogWydTdGFuZGFyZENhcmQnXSxcbiAgICAgICAgLi4ub3B0c1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBzdXBlci5hZGRDaGlsZChkYXRhLCB0eXBlLCBvcHRzKTtcbiAgfVxuXG4gIHN0YXRpYyBnZXQgdHlwZSAoKSB7XG4gICAgcmV0dXJuIGNhcmRUeXBlcy5TdGFuZGFyZDtcbiAgfVxuXG4gIHN0YXRpYyBkZWZhdWx0VGVtcGxhdGVOYW1lICgpIHtcbiAgICByZXR1cm4gY2FyZFRlbXBsYXRlcy5TdGFuZGFyZDtcbiAgfVxuXG4gIHN0YXRpYyBhcmVEdXBsaWNhdGVOYW1lc0FsbG93ZWQgKCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59XG4iLCIvKiogQG1vZHVsZSBBY2NvcmRpb25DYXJkQ29tcG9uZW50ICovXG5cbmltcG9ydCBDb21wb25lbnQgZnJvbSAnLi4vY29tcG9uZW50JztcbmltcG9ydCBDYXJkQ29tcG9uZW50IGZyb20gJy4vY2FyZGNvbXBvbmVudCc7XG5pbXBvcnQgeyBjYXJkVGVtcGxhdGVzLCBjYXJkVHlwZXMgfSBmcm9tICcuL2NvbnN0cyc7XG5pbXBvcnQgRE9NIGZyb20gJy4uLy4uL2RvbS9kb20nO1xuaW1wb3J0IEFuYWx5dGljc0V2ZW50IGZyb20gJy4uLy4uLy4uL2NvcmUvYW5hbHl0aWNzL2FuYWx5dGljc2V2ZW50JztcbmltcG9ydCBDVEFDb2xsZWN0aW9uQ29tcG9uZW50IGZyb20gJy4uL2N0YXMvY3RhY29sbGVjdGlvbmNvbXBvbmVudCc7XG5cbmNsYXNzIEFjY29yZGlvbkNhcmRDb25maWcge1xuICBjb25zdHJ1Y3RvciAoY29uZmlnID0ge30pIHtcbiAgICBPYmplY3QuYXNzaWduKHRoaXMsIGNvbmZpZyk7XG5cbiAgICBjb25zdCBkYXRhID0gY29uZmlnLmRhdGEgfHwge307XG5cbiAgICAvKipcbiAgICAgKiBUaGUgcmVzdWx0IGRhdGFcbiAgICAgKiBAdHlwZSB7UmVzdWx0fVxuICAgICAqL1xuICAgIGNvbnN0IHJlc3VsdCA9IGRhdGEucmVzdWx0IHx8IHt9O1xuXG4gICAgLyoqXG4gICAgICogVGhlIHJhdyBwcm9maWxlIGRhdGFcbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAqL1xuICAgIGNvbnN0IHJhd1Jlc3VsdCA9IHJlc3VsdC5fcmF3IHx8IHt9O1xuXG4gICAgLyoqXG4gICAgICogVGhlIGRhdGFNYXBwaW5ncyBhdHRyaWJ1dGUgb2YgdGhlIGNvbmZpZ1xuICAgICAqIGlzIGVpdGhlciBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhZGRpdGlvbmFsIGNvbmZpZyBmb3JcbiAgICAgKiBhIGNhcmQgb3IgYW4gb2JqZWN0IHRoYXQgaXMgdGhlIGFkZGl0aW9uYWwgY29uZmlnLlxuICAgICAqL1xuICAgIGNvbnN0IGRhdGFNYXBwaW5ncyA9IGNvbmZpZy5kYXRhTWFwcGluZ3MgfHwge307XG4gICAgT2JqZWN0LmFzc2lnbih0aGlzLCBDYXJkQ29tcG9uZW50LmFwcGx5RGF0YU1hcHBpbmdzKHJhd1Jlc3VsdCwgZGF0YU1hcHBpbmdzKSk7XG5cbiAgICAvKipcbiAgICAgKiBWZXJ0aWNhbCBrZXkgZm9yIHRoZSBjYXJkLCBhZGRlZCB0byBhbmFseXRpY3MgZXZlbnRzIHNlbnQgYnkgdGhpcyBjb21wb25lbnQuXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLnZlcnRpY2FsS2V5ID0gY29uZmlnLnZlcnRpY2FsS2V5O1xuXG4gICAgLyoqXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLnRpdGxlID0gdGhpcy50aXRsZSB8fCByZXN1bHQudGl0bGUgfHwgcmF3UmVzdWx0Lm5hbWUgfHwgJyc7XG5cbiAgICAvKipcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMuc3VidGl0bGUgPSB0aGlzLnN1YnRpdGxlO1xuXG4gICAgLyoqXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLmRldGFpbHMgPSB0aGlzLmRldGFpbHMgPT09IG51bGwgPyBudWxsIDogKHRoaXMuZGV0YWlscyB8fCByZXN1bHQuZGV0YWlscyB8fCByYXdSZXN1bHQuZGVzY3JpcHRpb24gfHwgJycpO1xuXG4gICAgLyoqXG4gICAgICogSWYgZXhwYW5kZWQgaXMgdHJ1ZSB0aGUgZmlyc3QgYWNjb3JkaW9uIGluIHZlcnRpY2FsL3VuaXZlcnNhbCByZXN1bHRzIHJlbmRlcnMgb24gcGFnZSBsb2FkIGV4cGFuZGVkLlxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqL1xuICAgIHRoaXMuZXhwYW5kZWQgPSB0aGlzLmV4cGFuZGVkIHx8IGZhbHNlO1xuXG4gICAgLyoqXG4gICAgICogRWl0aGVyIGEgZnVuY3Rpb24gdGhhdCBzcGl0cyBvdXQgYW4gYXJyYXkgb2YgQ1RBIGNvbmZpZyBvYmplY3RzIG9yIGFuIGFycmF5IG9mIENUQSBjb25maWcgb2JqZWN0c1xuICAgICAqIG9yIGFwaSBmaWVsZG5hbWVzXG4gICAgICogQHR5cGUge0Z1bmN0aW9ufEFycmF5PE9iamVjdHxzdHJpbmc+fVxuICAgICAqL1xuICAgIHRoaXMuY2FsbHNUb0FjdGlvbiA9IHRoaXMuY2FsbHNUb0FjdGlvbiB8fCBbXTtcblxuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgdGhpcyBjYXJkIGlzIHBhcnQgb2YgYSB1bml2ZXJzYWwgc2VhcmNoLiBVc2VkIGluIGFuYWx5dGljcy5cbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICB0aGlzLmlzVW5pdmVyc2FsID0gY29uZmlnLmlzVW5pdmVyc2FsIHx8IGZhbHNlO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFjY29yZGlvbkNhcmRDb21wb25lbnQgZXh0ZW5kcyBDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvciAoY29uZmlnID0ge30sIHN5c3RlbUNvbmZpZyA9IHt9KSB7XG4gICAgc3VwZXIobmV3IEFjY29yZGlvbkNhcmRDb25maWcoY29uZmlnKSwgc3lzdGVtQ29uZmlnKTtcblxuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgdGhlIGFjY29yZGlvbiBpcyBjb2xsYXBzZWQgb3Igbm90LlxuICAgICAqIERlZmF1bHRzIHRvIHRydWUgb25seSBpZiB0aGUgZXhwYW5kZWQgb3B0aW9uIGlzIHRydWVcbiAgICAgKiBhbmQgdGhpcyBpcyB0aGUgZmlyc3QgY2FyZCBpbiB0aGUgcmVzdWx0cy5cbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICB0aGlzLmlzRXhwYW5kZWQgPSB0aGlzLl9jb25maWcuZXhwYW5kZWQgJiYgY29uZmlnLl9pbmRleCA9PT0gMDtcblxuICAgIC8qKlxuICAgICAqIEB0eXBlIHtPYmplY3R9XG4gICAgICovXG4gICAgY29uc3QgZGF0YSA9IGNvbmZpZy5kYXRhIHx8IHt9O1xuXG4gICAgLyoqXG4gICAgICogVmVydGljYWwga2V5IGZvciB0aGUgY2FyZCwgYWRkZWQgdG8gYW5hbHl0aWNzIGV2ZW50cyBzZW50IGJ5IHRoaXMgY29tcG9uZW50LlxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgdGhpcy52ZXJ0aWNhbEtleSA9IGRhdGEudmVydGljYWxLZXk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgcmVzdWx0IGRhdGEsIHNlbnQgdG8gY2hpbGRyZW4gQ1RBIENvbXBvbmVudHMgdGhhdCBuZWVkIHRoaXMuXG4gICAgICogQHR5cGUge1Jlc3VsdH1cbiAgICAgKi9cbiAgICB0aGlzLnJlc3VsdCA9IGRhdGEucmVzdWx0IHx8IHt9O1xuICB9XG5cbiAgc2V0U3RhdGUgKGRhdGEpIHtcbiAgICBjb25zdCBpZCA9IHRoaXMucmVzdWx0LmlkIHx8IHRoaXMucmVzdWx0Lm9yZGluYWw7XG4gICAgcmV0dXJuIHN1cGVyLnNldFN0YXRlKHtcbiAgICAgIC4uLmRhdGEsXG4gICAgICByZXN1bHQ6IHRoaXMucmVzdWx0LFxuICAgICAgaXNFeHBhbmRlZDogdGhpcy5pc0V4cGFuZGVkLFxuICAgICAgaWQ6IGAke3RoaXMubmFtZX0tJHtpZH0tJHt0aGlzLnZlcnRpY2FsS2V5fWAsXG4gICAgICBoYXNDVEFzOiBDVEFDb2xsZWN0aW9uQ29tcG9uZW50Lmhhc0NUQXModGhpcy5yZXN1bHQuX3JhdywgdGhpcy5fY29uZmlnLmNhbGxzVG9BY3Rpb24pXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQ2xpY2sgaGFuZGxlciBmb3IgdGhlIGFjY29yZGlvbiB0b2dnbGUgYnV0dG9uXG4gICAqIFRoaXMgaXMgdXNlZCBvdmVyIHNldCBzdGF0ZSBiZWNhdXNlIGl0J3MgYSBsb3Qgc21vb3RoZXIsIHNpbmNlXG4gICAqIGl0IGRvZXNuJ3QgcmlwIHRoZSB3aG9sZSBjb21wb25lbnQgb2ZmIG9mIHRoZSBwYWdlIGFuZCByZW1vdW50IGl0LlxuICAgKiBBbHNvIHJlcG9ydHMgYW4gYW5hbHl0aWNzIGV2ZW50LlxuICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSB0b2dnbGVFbCB0aGUgdG9nZ2xlIGVsZW1lbnRcbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gYWNjb3JkaW9uQm9keUVsIHRoZSAuanMteXh0LUFjY29yZGlvbkNhcmQtYm9keSBlbGVtZW50XG4gICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGFjY29yZGlvbkVsIHRoZSByb290IGFjY29yZGlvbiBlbGVtZW50XG4gICAqL1xuICBoYW5kbGVDbGljayAodG9nZ2xlRWwsIGFjY29yZGlvbkJvZHlFbCwgYWNjb3JkaW9uRWwpIHtcbiAgICB0aGlzLmlzRXhwYW5kZWQgPSAhdGhpcy5pc0V4cGFuZGVkO1xuICAgIGFjY29yZGlvbkVsLmNsYXNzTGlzdC50b2dnbGUoJ3l4dC1BY2NvcmRpb25DYXJkLS1leHBhbmRlZCcpO1xuXG4gICAgYWNjb3JkaW9uQm9keUVsLnN0eWxlLmhlaWdodCA9IGAke3RoaXMuaXNFeHBhbmRlZCA/IGFjY29yZGlvbkJvZHlFbC5zY3JvbGxIZWlnaHQgOiAwfXB4YDtcblxuICAgIHRvZ2dsZUVsLnNldEF0dHJpYnV0ZSgnYXJpYS1leHBhbmRlZCcsIHRoaXMuaXNFeHBhbmRlZCA/ICd0cnVlJyA6ICdmYWxzZScpO1xuICAgIGFjY29yZGlvbkJvZHlFbC5zZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJywgdGhpcy5pc0V4cGFuZGVkID8gJ2ZhbHNlJyA6ICd0cnVlJyk7XG4gICAgY29uc3QgZXZlbnQgPSBuZXcgQW5hbHl0aWNzRXZlbnQodGhpcy5pc0V4cGFuZGVkID8gJ1JPV19FWFBBTkQnIDogJ1JPV19DT0xMQVBTRScpXG4gICAgICAuYWRkT3B0aW9ucyh7XG4gICAgICAgIHZlcnRpY2FsS2V5OiB0aGlzLnZlcnRpY2FsS2V5LFxuICAgICAgICBlbnRpdHlJZDogdGhpcy5yZXN1bHQuX3Jhdy5pZCxcbiAgICAgICAgc2VhcmNoZXI6IHRoaXMuX2NvbmZpZy5pc1VuaXZlcnNhbCA/ICdVTklWRVJTQUwnIDogJ1ZFUlRJQ0FMJ1xuICAgICAgfSk7XG4gICAgdGhpcy5hbmFseXRpY3NSZXBvcnRlci5yZXBvcnQoZXZlbnQpO1xuICB9XG5cbiAgb25Nb3VudCAoKSB7XG4gICAgY29uc3QgdG9nZ2xlRWwgPSBET00ucXVlcnkodGhpcy5fY29udGFpbmVyLCAnLmpzLXl4dC1BY2NvcmRpb25DYXJkLXRvZ2dsZScpO1xuICAgIGNvbnN0IGFjY29yZGlvbkJvZHlFbCA9IERPTS5xdWVyeSh0aGlzLl9jb250YWluZXIsICcuanMteXh0LUFjY29yZGlvbkNhcmQtYm9keScpO1xuICAgIGNvbnN0IGFjY29yZGlvbkVsID0gRE9NLnF1ZXJ5KHRoaXMuX2NvbnRhaW5lciwgJy5qcy15eHQtQWNjb3JkaW9uQ2FyZCcpO1xuXG4gICAgYWNjb3JkaW9uQm9keUVsLnN0eWxlLmhlaWdodCA9IGAke3RoaXMuaXNFeHBhbmRlZCA/IGFjY29yZGlvbkJvZHlFbC5zY3JvbGxIZWlnaHQgOiAwfXB4YDtcblxuICAgIERPTS5vbih0b2dnbGVFbCwgJ2NsaWNrJywgKCkgPT4gdGhpcy5oYW5kbGVDbGljayh0b2dnbGVFbCwgYWNjb3JkaW9uQm9keUVsLCBhY2NvcmRpb25FbCkpO1xuICB9XG5cbiAgLyoqXG4gICAqIEZvciBwYXNzaW5nIGZ1bmN0aW9ucyB0byB0aGUgY29uZmlnIG9mIGNoaWxkcmVuIHtAbGluayBDVEFDb2xsZWN0aW9uQ29tcG9uZW50fVxuICAgKi9cbiAgYWRkQ2hpbGQgKGRhdGEsIHR5cGUsIG9wdHMpIHtcbiAgICBpZiAodHlwZSA9PT0gQ1RBQ29sbGVjdGlvbkNvbXBvbmVudC50eXBlKSB7XG4gICAgICBjb25zdCB1cGRhdGVkRGF0YSA9IHtcbiAgICAgICAgdmVydGljYWxLZXk6IHRoaXMudmVydGljYWxLZXksXG4gICAgICAgIHJlc3VsdDogZGF0YVxuICAgICAgfTtcbiAgICAgIHJldHVybiBzdXBlci5hZGRDaGlsZCh1cGRhdGVkRGF0YSwgdHlwZSwge1xuICAgICAgICBjYWxsc1RvQWN0aW9uOiB0aGlzLl9jb25maWcuY2FsbHNUb0FjdGlvbixcbiAgICAgICAgX2N0YU1vZGlmaWVyczogWydBY2NvcmRpb25DYXJkJ10sXG4gICAgICAgIGlzVW5pdmVyc2FsOiB0aGlzLl9jb25maWcuaXNVbml2ZXJzYWwsXG4gICAgICAgIC4uLm9wdHNcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gc3VwZXIuYWRkQ2hpbGQoZGF0YSwgdHlwZSwgb3B0cyk7XG4gIH1cblxuICBzdGF0aWMgZ2V0IHR5cGUgKCkge1xuICAgIHJldHVybiBjYXJkVHlwZXMuQWNjb3JkaW9uO1xuICB9XG5cbiAgc3RhdGljIGRlZmF1bHRUZW1wbGF0ZU5hbWUgKCkge1xuICAgIHJldHVybiBjYXJkVGVtcGxhdGVzLkFjY29yZGlvbjtcbiAgfVxuXG4gIHN0YXRpYyBhcmVEdXBsaWNhdGVOYW1lc0FsbG93ZWQgKCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59XG4iLCIvKiogQG1vZHVsZSBMZWdhY3lDYXJkQ29tcG9uZW50ICovXG5cbmltcG9ydCBDb21wb25lbnQgZnJvbSAnLi4vY29tcG9uZW50JztcbmltcG9ydCBDYXJkQ29tcG9uZW50IGZyb20gJy4vY2FyZGNvbXBvbmVudCc7XG5pbXBvcnQgeyBjYXJkVGVtcGxhdGVzLCBjYXJkVHlwZXMgfSBmcm9tICcuL2NvbnN0cyc7XG5pbXBvcnQgQ1RBQ29sbGVjdGlvbkNvbXBvbmVudCBmcm9tICcuLi9jdGFzL2N0YWNvbGxlY3Rpb25jb21wb25lbnQnO1xuXG5jbGFzcyBMZWdhY3lDYXJkQ29uZmlnIHtcbiAgY29uc3RydWN0b3IgKGNvbmZpZyA9IHt9KSB7XG4gICAgT2JqZWN0LmFzc2lnbih0aGlzLCBjb25maWcpO1xuXG4gICAgY29uc3QgZGF0YSA9IGNvbmZpZy5kYXRhIHx8IHt9O1xuXG4gICAgLyoqXG4gICAgICogVGhlIHJlc3VsdCBkYXRhXG4gICAgICogQHR5cGUge1Jlc3VsdH1cbiAgICAgKi9cbiAgICBjb25zdCByZXN1bHQgPSBkYXRhLnJlc3VsdCB8fCB7fTtcblxuICAgIC8qKlxuICAgICAqIFRoZSByYXcgcHJvZmlsZSBkYXRhXG4gICAgICogQHR5cGUge09iamVjdH1cbiAgICAgKi9cbiAgICBjb25zdCByYXdSZXN1bHQgPSByZXN1bHQuX3JhdyB8fCB7fTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBkYXRhTWFwcGluZ3MgYXR0cmlidXRlIG9mIHRoZSBjb25maWdcbiAgICAgKiBpcyBlaXRoZXIgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYWRkaXRpb25hbCBjb25maWcgZm9yXG4gICAgICogYSBjYXJkIG9yIGFuIG9iamVjdCB0aGF0IGlzIHRoZSBhZGRpdGlvbmFsIGNvbmZpZy5cbiAgICAgKi9cbiAgICBPYmplY3QuYXNzaWduKHRoaXMsIENhcmRDb21wb25lbnQuYXBwbHlEYXRhTWFwcGluZ3MocmF3UmVzdWx0LCBjb25maWcuZGF0YU1hcHBpbmdzIHx8IHt9KSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgcmVzdWx0IGRhdGFcbiAgICAgKiBAdHlwZSB7UmVzdWx0fVxuICAgICAqL1xuICAgIHRoaXMucmVzdWx0ID0gY29uZmlnLmRhdGEgfHwge307XG5cbiAgICAvKipcbiAgICAgKiBUaXRsZSBmb3IgdGhlIGNhcmRcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMudGl0bGUgPSB0aGlzLnRpdGxlIHx8IHJlc3VsdC50aXRsZSB8fCByYXdSZXN1bHQubmFtZSB8fCAnJztcblxuICAgIC8qKlxuICAgICAqIERldGFpbHMgZm9yIHRoZSBjYXJkXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLmRldGFpbHMgPSB0aGlzLmRldGFpbHMgPT09IG51bGwgPyBudWxsIDogKHRoaXMuZGV0YWlscyB8fCByZXN1bHQuZGV0YWlscyB8fCByYXdSZXN1bHQuZGVzY3JpcHRpb24gfHwgJycpO1xuXG4gICAgLyoqXG4gICAgICogVXJsIHdoZW4geW91IGNsaWNrIHRoZSB0aXRsZVxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgdGhpcy51cmwgPSB0aGlzLnVybCA9PT0gbnVsbCA/ICcnIDogKHRoaXMudXJsIHx8IHJlc3VsdC5saW5rIHx8IHJhd1Jlc3VsdC53ZWJzaXRlKTtcblxuICAgIC8qKlxuICAgICAqIFRoZSB0YXJnZXQgYXR0cmlidXRlIGZvciB0aGUgdGl0bGUgbGluay5cbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMudGFyZ2V0ID0gdGhpcy50YXJnZXQ7XG5cbiAgICAvKipcbiAgICAgKiBJbWFnZSB1cmwgdG8gZGlzcGxheVxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgdGhpcy5pbWFnZSA9IHRoaXMuaW1hZ2U7XG5cbiAgICAvKipcbiAgICAgKiBTdWJ0aXRsZVxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgdGhpcy5zdWJ0aXRsZSA9IHRoaXMuc3VidGl0bGU7XG5cbiAgICAvKipcbiAgICAgKiBFaXRoZXIgYSBmdW5jdGlvbiB0aGF0IHNwaXRzIG91dCBhbiBhcnJheSBvZiBDVEEgY29uZmlnIG9iamVjdHMgb3IgYW4gYXJyYXkgb2YgQ1RBIGNvbmZpZyBvYmplY3RzXG4gICAgICogb3IgYXBpIGZpZWxkbmFtZXNcbiAgICAgKiBAdHlwZSB7RnVuY3Rpb258QXJyYXk8T2JqZWN0fHN0cmluZz59XG4gICAgICovXG4gICAgdGhpcy5jYWxsc1RvQWN0aW9uID0gdGhpcy5jYWxsc1RvQWN0aW9uIHx8IFtdO1xuXG4gICAgLyoqXG4gICAgICogV2hldGhlciB0byBzaG93IHRoZSBvcmRpbmFsIG9mIHRoZSBjYXJkIGluIHRoZSByZXN1bHRzLlxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqL1xuICAgIHRoaXMuc2hvd09yZGluYWwgPSB0aGlzLnNob3dPcmRpbmFsIHx8IGZhbHNlO1xuXG4gICAgLyoqXG4gICAgICogV2hldGhlciB0aGlzIGNhcmQgaXMgcGFydCBvZiBhIHVuaXZlcnNhbCBzZWFyY2guXG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICovXG4gICAgdGhpcy5pc1VuaXZlcnNhbCA9IHRoaXMuaXNVbml2ZXJzYWwgfHwgZmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgaW5kZXggb2YgdGhlIGNhcmQuXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLl9pbmRleCA9IGNvbmZpZy5faW5kZXggfHwgMDtcbiAgfVxufVxuXG4vKipcbiAqIENhcmQgY29tcG9uZW50cyBleHBlY3QgdG8gcmVjZWl2ZSBhIGRhdGEgY29uZmlnIG9wdGlvbiwgY29udGFpbmluZyBkYXRhIHJlZ2FyZGluZyBlbnRpdHkgcmVzdWx0XG4gKiBlYWNoIGNhcmQgaXMgYXNzaWduZWQgdG8sIGluY2x1ZGluZyBhbGwgZmllbGQgZGF0YSBpbiBkYXRhLl9yYXcuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExlZ2FjeUNhcmRDb21wb25lbnQgZXh0ZW5kcyBDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvciAoY29uZmlnID0ge30sIHN5c3RlbUNvbmZpZyA9IHt9KSB7XG4gICAgc3VwZXIobmV3IExlZ2FjeUNhcmRDb25maWcoY29uZmlnKSwgc3lzdGVtQ29uZmlnKTtcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAqL1xuICAgIGNvbnN0IGRhdGEgPSBjb25maWcuZGF0YSB8fCB7fTtcblxuICAgIC8qKlxuICAgICAqIFZlcnRpY2FsIGtleSBmb3IgdGhlIHNlYXJjaC5cbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMudmVydGljYWxLZXkgPSBkYXRhLnZlcnRpY2FsS2V5O1xuXG4gICAgLyoqXG4gICAgICogVGhlIHJlc3VsdCBkYXRhXG4gICAgICogQHR5cGUge1Jlc3VsdH1cbiAgICAgKi9cbiAgICB0aGlzLnJlc3VsdCA9IGRhdGEucmVzdWx0IHx8IHt9O1xuICB9XG5cbiAgc2V0U3RhdGUgKGRhdGEpIHtcbiAgICByZXR1cm4gc3VwZXIuc2V0U3RhdGUoe1xuICAgICAgLi4uZGF0YSxcbiAgICAgIGV2ZW50T3B0aW9uczogdGhpcy5fbGVnYWN5RXZlbnRPcHRpb25zKHRoaXMucmVzdWx0Ll9yYXcuaWQsIHRoaXMucmVzdWx0LmxpbmspLFxuICAgICAgcmVzdWx0OiB0aGlzLnJlc3VsdCxcbiAgICAgIGhhc0NUQXM6IENUQUNvbGxlY3Rpb25Db21wb25lbnQuaGFzQ1RBcyh0aGlzLnJlc3VsdC5fcmF3LCB0aGlzLl9jb25maWcuY2FsbHNUb0FjdGlvbiksXG4gICAgICBlbnRpdHlJZDogdGhpcy5yZXN1bHQuX3Jhdy5pZCxcbiAgICAgIHZlcnRpY2FsS2V5OiB0aGlzLnZlcnRpY2FsS2V5XG4gICAgfSk7XG4gIH1cblxuICBfbGVnYWN5RXZlbnRPcHRpb25zIChlbnRpdHlJZCwgdXJsKSB7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgIHZlcnRpY2FsQ29uZmlnSWQ6IHRoaXMudmVydGljYWxLZXksXG4gICAgICBzZWFyY2hlcjogdGhpcy5fY29uZmlnLmlzVW5pdmVyc2FsID8gJ1VOSVZFUlNBTCcgOiAnVkVSVElDQUwnXG4gICAgfTtcblxuICAgIGlmIChlbnRpdHlJZCkge1xuICAgICAgb3B0aW9ucy5lbnRpdHlJZCA9IGVudGl0eUlkO1xuICAgIH0gZWxzZSB7XG4gICAgICBvcHRpb25zLnVybCA9IHVybDtcbiAgICB9XG5cbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkob3B0aW9ucyk7XG4gIH1cblxuICBhZGRDaGlsZCAoZGF0YSwgdHlwZSwgb3B0cykge1xuICAgIGlmICh0eXBlID09PSBDVEFDb2xsZWN0aW9uQ29tcG9uZW50LnR5cGUpIHtcbiAgICAgIGNvbnN0IHVwZGF0ZWREYXRhID0ge1xuICAgICAgICB2ZXJ0aWNhbEtleTogdGhpcy52ZXJ0aWNhbEtleSxcbiAgICAgICAgcmVzdWx0OiBkYXRhXG4gICAgICB9O1xuICAgICAgcmV0dXJuIHN1cGVyLmFkZENoaWxkKHVwZGF0ZWREYXRhLCB0eXBlLCB7XG4gICAgICAgIGNhbGxzVG9BY3Rpb246IHRoaXMuX2NvbmZpZy5jYWxsc1RvQWN0aW9uLFxuICAgICAgICBpc1VuaXZlcnNhbDogdGhpcy5fY29uZmlnLmlzVW5pdmVyc2FsLFxuICAgICAgICBfY3RhTW9kaWZpZXJzOiBbJ0xlZ2FjeUNhcmQnXSxcbiAgICAgICAgaW5jbHVkZUxlZ2FjeUNsYXNzZXM6IHRydWUsXG4gICAgICAgIC4uLm9wdHNcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gc3VwZXIuYWRkQ2hpbGQoZGF0YSwgdHlwZSwgb3B0cyk7XG4gIH1cblxuICBzdGF0aWMgZ2V0IHR5cGUgKCkge1xuICAgIHJldHVybiBjYXJkVHlwZXMuTGVnYWN5O1xuICB9XG5cbiAgc3RhdGljIGRlZmF1bHRUZW1wbGF0ZU5hbWUgKCkge1xuICAgIHJldHVybiBjYXJkVGVtcGxhdGVzLkxlZ2FjeTtcbiAgfVxuXG4gIHN0YXRpYyBhcmVEdXBsaWNhdGVOYW1lc0FsbG93ZWQgKCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59XG4iLCIvKiogQG1vZHVsZSBRdWVzdGlvblN1Ym1pc3Npb25Db21wb25lbnQgKi9cblxuaW1wb3J0IENvbXBvbmVudCBmcm9tICcuLi9jb21wb25lbnQnO1xuaW1wb3J0IERPTSBmcm9tICcuLi8uLi9kb20vZG9tJztcbmltcG9ydCBTdG9yYWdlS2V5cyBmcm9tICcuLi8uLi8uLi9jb3JlL3N0b3JhZ2Uvc3RvcmFnZWtleXMnO1xuaW1wb3J0IFF1ZXN0aW9uU3VibWlzc2lvbiBmcm9tICcuLi8uLi8uLi9jb3JlL21vZGVscy9xdWVzdGlvbnN1Ym1pc3Npb24nO1xuaW1wb3J0IHsgQW5zd2Vyc0NvbXBvbmVudEVycm9yIH0gZnJvbSAnLi4vLi4vLi4vY29yZS9lcnJvcnMvZXJyb3JzJztcbmltcG9ydCBBbmFseXRpY3NFdmVudCBmcm9tICcuLi8uLi8uLi9jb3JlL2FuYWx5dGljcy9hbmFseXRpY3NldmVudCc7XG5pbXBvcnQgU2VhcmNoU3RhdGVzIGZyb20gJy4uLy4uLy4uL2NvcmUvc3RvcmFnZS9zZWFyY2hzdGF0ZXMnO1xuXG4vKipcbiAqIENvbmZpZ3VyYWJsZSBvcHRpb25zIGZvciB0aGUgY29tcG9uZW50XG4gKiBAdHlwZSB7T2JqZWN0fVxuICovXG5jb25zdCBERUZBVUxUX0NPTkZJRyA9IHtcbiAgLyoqXG4gICAqIFRoZSBlbnRpdHkgaWRlbnRpZmllciB0aGF0IHRoZSBxdWVzdGlvbiBpcyBhc3NvY2lhdGVkIHdpdGguXG4gICAqIFRoaXMgaXMgdHlwaWNhbGx5IGFuIG9yZ2FuaXphdGlvbiBvYmplY3RcbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG4gICdlbnRpdHlJZCc6IG51bGwsXG5cbiAgLyoqXG4gICAqIFRoZSBtYWluIENTUyBzZWxlY3RvciB1c2VkIHRvIHJlZmVyZW5jZSB0aGUgZm9ybSBmb3IgdGhlIGNvbXBvbmVudC5cbiAgICogQHR5cGUge3N0cmluZ30gQ1NTIHNlbGVjdG9yXG4gICAqL1xuICAnZm9ybVNlbGVjdG9yJzogJ2Zvcm0nLFxuXG4gIC8qKlxuICAgKiBBbiBvcHRpb25hbCBsYWJlbCB0byB1c2UgZm9yIHRoZSBlLW1haWwgYWRkcmVzcyBpbnB1dFxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKi9cbiAgJ2VtYWlsTGFiZWwnOiAnRW1haWwnLFxuXG4gIC8qKlxuICAgKiBBbiBvcHRpb25hbCBsYWJlbCB0byB1c2UgZm9yIHRoZSBuYW1lIGlucHV0XG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuICAnbmFtZUxhYmVsJzogJ05hbWUnLFxuXG4gIC8qKlxuICAgKiBBbiBvcHRpb25hbCBsYWJlbCB0byB1c2UgZm9yIHRoZSBxdWVzdGlvblxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKi9cbiAgJ3F1ZXN0aW9uTGFiZWwnOiAnUXVlc3Rpb24nLFxuXG4gIC8qKlxuICAgKiBBbiBvcHRpb25hbCBsYWJlbCB0byB1c2UgZm9yIHRoZSBQcml2YWN5IFBvbGljeVxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKi9cbiAgJ3ByaXZhY3lQb2xpY3lUZXh0JzogJ0J5IHN1Ym1pdHRpbmcgbXkgZW1haWwgYWRkcmVzcywgSSBjb25zZW50IHRvIGJlaW5nIGNvbnRhY3RlZCB2aWEgZW1haWwgYXQgdGhlIGFkZHJlc3MgcHJvdmlkZWQuJyxcblxuICAvKipcbiAgICogVGhlIGxhYmVsIHRvIHVzZSBmb3IgdGhlIFN1Ym1pdCBidXR0b25cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gICdidXR0b25MYWJlbCc6ICdTdWJtaXQnLFxuXG4gIC8qKlxuICAgKiBUaGUgdGl0bGUgdG8gZGlzcGxheSBpbiB0aGUgdGl0bGUgYmFyXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuICAnc2VjdGlvblRpdGxlJzogJ0FzayBhIFF1ZXN0aW9uJyxcblxuICAvKipcbiAgICogVGhlIGRlc2NyaXB0aW9uIHRvIGRpc3BsYXkgaW4gdGhlIHRpdGxlIGJhclxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKi9cbiAgJ3RlYXNlcic6ICdDYW7igJl0IGZpbmQgd2hhdCB5b3VcXCdyZSBsb29raW5nIGZvcj8gQXNrIGEgcXVlc3Rpb24gYmVsb3cuJyxcblxuICAvKipcbiAgICogVGhlIG5hbWUgb2YgdGhlIGljb24gdG8gdXNlIGluIHRoZSB0aXRsZSBiYXJcbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gICdzZWN0aW9uVGl0bGVJY29uTmFtZSc6ICdzdXBwb3J0JyxcblxuICAvKipcbiAgICogVGhlIHRleHQgdG8gZGlzcGxheSBpbiB0aGUgZmVlZGJhY2sgZm9ybSBhaGVhZCBvZiB0aGUgUXVlc3Rpb24gaW5wdXRcbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gICdkZXNjcmlwdGlvbic6ICdFbnRlciB5b3VyIHF1ZXN0aW9uIGFuZCBjb250YWN0IGluZm9ybWF0aW9uLCBhbmQgd2VcXCdsbCBnZXQgYmFjayB0byB5b3Ugd2l0aCBhIHJlc3BvbnNlIHNob3J0bHkuJyxcblxuICAvKipcbiAgICogVGhlIHBsYWNlaG9sZGVyIHRleHQgZm9yIHJlcXVpcmVkIGlucHV0c1xuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKi9cbiAgJ3JlcXVpcmVkSW5wdXRQbGFjZWhvbGRlcic6ICcocmVxdWlyZWQpJyxcblxuICAvKipcbiAgICogVGhlIHBsYWNlaG9sZGVyIHRleHQgZm9yIHRoZSBxdWVzdGlvbiB0ZXh0IGFyZWFcbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gICdxdWVzdGlvbklucHV0UGxhY2Vob2xkZXInOiAnRW50ZXIgeW91ciBxdWVzdGlvbiBoZXJlJyxcblxuICAvKipcbiAgICogVGhlIGNvbmZpcm1hdGlvbiB0ZXh0IHRvIGRpc3BsYXkgYWZ0ZXIgc3VjY2Vzc2Z1bGx5IHN1Ym1pdHRpbmcgZmVlZGJhY2tcbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gICdxdWVzdGlvblN1Ym1pc3Npb25Db25maXJtYXRpb25UZXh0JzogJ1RoYW5rIHlvdSBmb3IgeW91ciBxdWVzdGlvbiEnLFxuXG4gIC8qKlxuICAgKiBUaGUgZGVmYXVsdCBwcml2YWN5IHBvbGljeSB1cmwgbGFiZWxcbiAgICogQHR5cGUge3N0cmluZ31cbiAgKi9cbiAgJ3ByaXZhY3lQb2xpY3lVcmxMYWJlbCc6ICdMZWFybiBtb3JlIGhlcmUuJyxcblxuICAvKipcbiAgICogVGhlIGRlZmF1bHQgcHJpdmFjeSBwb2xpY3kgdXJsXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuICAncHJpdmFjeVBvbGljeVVybCc6ICcnLFxuXG4gIC8qKlxuICAgKiBUaGUgZGVmYXVsdCBwcml2YWN5IHBvbGljeSBlcnJvciB0ZXh0LCBzaG93biB3aGVuIHRoZSB1c2VyIGRvZXMgbm90IGFncmVlXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuICAncHJpdmFjeVBvbGljeUVycm9yVGV4dCc6ICcqIFlvdSBtdXN0IGFncmVlIHRvIHRoZSBwcml2YWN5IHBvbGljeSB0byBzdWJtaXQgYSBxdWVzdGlvbi4nLFxuXG4gIC8qKlxuICAgKiBUaGUgZGVmYXVsdCBlbWFpbCBmb3JtYXQgZXJyb3IgdGV4dCwgc2hvd24gd2hlbiB0aGUgdXNlciBzdWJtaXRzIGFuIGludmFsaWQgZW1haWxcbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gICdlbWFpbEZvcm1hdEVycm9yVGV4dCc6ICcqIFBsZWFzZSBlbnRlciBhIHZhbGlkIGVtYWlsIGFkZHJlc3MuJyxcblxuICAvKipcbiAgICogVGhlIGRlZmF1bHQgbmV0d29yayBlcnJvciB0ZXh0LCBzaG93biB3aGVuIHRoZXJlIGlzIGFuIGlzc3VlIHdpdGggdGhlIFFBIFN1Ym1pc3Npb25cbiAgICogcmVxdWVzdC5cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gICduZXR3b3JrRXJyb3JUZXh0JzogJ1dlXFwncmUgc29ycnksIGFuIGVycm9yIG9jY3VycmVkLicsXG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgb3Igbm90IHRoaXMgY29tcG9uZW50IGlzIGV4cGFuZGVkIGJ5IGRlZmF1bHQuXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKi9cbiAgJ2V4cGFuZGVkJzogdHJ1ZVxufTtcblxuLyoqXG4gKiBRdWVzdGlvblN1Ym1pc3Npb25Db21wb25lbnQgaXMgYSBjb21wb25lbnQgdGhhdCBjcmVhdGVzIGEgZm9ybVxuICogdGhhdHMgZGlzcGxheWVkIHdoZW5ldmVyIGEgcXVlcnkgaXMgcnVuLiBJdCBlbmFibGVzIHRoZSB1c2VyXG4gKiB0byBzdWJtaXQgcXVlc3Rpb25zIHRoYXQgdGhleSBjYW50IGZpbmQgdGhlIGFuc3dlciBmb3IuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFF1ZXN0aW9uU3VibWlzc2lvbkNvbXBvbmVudCBleHRlbmRzIENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yIChjb25maWcgPSB7fSwgc3lzdGVtQ29uZmlnID0ge30pIHtcbiAgICBzdXBlcihPYmplY3QuYXNzaWduKHt9LCBERUZBVUxUX0NPTkZJRywgY29uZmlnKSwgc3lzdGVtQ29uZmlnKTtcblxuICAgIC8qKlxuICAgICAqIFJlZmVyZW5jZSB0byB0aGUgc3RvcmFnZSBtb2RlbFxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgdGhpcy5tb2R1bGVJZCA9IFN0b3JhZ2VLZXlzLlFVRVNUSU9OX1NVQk1JU1NJT047XG5cbiAgICAvKipcbiAgICAgKiBSZWZlcmVuY2UgdG8gdGhlIGxvY2FsZSBhcyBzZXQgaW4gdGhlIGdsb2JhbCBjb25maWdcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMubG9jYWxlID0gdGhpcy5jb3JlLmdsb2JhbFN0b3JhZ2UuZ2V0U3RhdGUoU3RvcmFnZUtleXMuTE9DQUxFKTtcblxuICAgIC8qKlxuICAgICAqIE5PVEUoYmlsbHkpIGlmIHRoaXMgaXMgYSBwYXR0ZXJuIHdlIHdhbnQgdG8gZm9sbG93IGZvciBjb25maWd1cmF0aW9uXG4gICAgICogd2Ugc2hvdWxkIGJha2UgaXQgaW50byB0aGUgY29yZSBjbGFzcy5cbiAgICAgKi9cbiAgICB0aGlzLnZhbGlkYXRlQ29uZmlnKCk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgUXVlc3Rpb25TdWJtaXNzaW9uIGNvbXBvbmVudCBzaG91bGQgYmUgcmVuZGVyZWQgb25seSBvbmNlIGEgc2VhcmNoIGhhcyBjb21wbGV0ZWQuIElmIHRoZVxuICAgICAqIHNlYXJjaCByZXN1bHRzIGFyZSBzdGlsbCBsb2FkaW5nLCB0aGUgY29tcG9uZW50IHNob3VsZCBub3QgYmUgZGlzcGxheWVkLlxuICAgICAqL1xuICAgIGNvbnN0IG9uUmVzdWx0c1VwZGF0ZSA9IHJlc3VsdHMgPT4ge1xuICAgICAgaWYgKHJlc3VsdHMuc2VhcmNoU3RhdGUgIT09IFNlYXJjaFN0YXRlcy5TRUFSQ0hfTE9BRElORykge1xuICAgICAgICBjb25zdCBxdWVzdGlvblRleHQgPSB0aGlzLmNvcmUuZ2xvYmFsU3RvcmFnZS5nZXRTdGF0ZShTdG9yYWdlS2V5cy5RVUVSWSk7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUobmV3IFF1ZXN0aW9uU3VibWlzc2lvbih7XG4gICAgICAgICAgcXVlc3Rpb25UZXh0OiBxdWVzdGlvblRleHQsXG4gICAgICAgICAgZXhwYW5kZWQ6IHRoaXMuX2NvbmZpZy5leHBhbmRlZFxuICAgICAgICB9KSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnVuTW91bnQoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdGhpcy5jb3JlLmdsb2JhbFN0b3JhZ2Uub24oJ3VwZGF0ZScsIFN0b3JhZ2VLZXlzLlZFUlRJQ0FMX1JFU1VMVFMsIG9uUmVzdWx0c1VwZGF0ZSk7XG4gICAgdGhpcy5jb3JlLmdsb2JhbFN0b3JhZ2Uub24oJ3VwZGF0ZScsIFN0b3JhZ2VLZXlzLlVOSVZFUlNBTF9SRVNVTFRTLCBvblJlc3VsdHNVcGRhdGUpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSB0ZW1wbGF0ZSB0byByZW5kZXJcbiAgICogQHJldHVybnMge3N0cmluZ31cbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBzdGF0aWMgZGVmYXVsdFRlbXBsYXRlTmFtZSAoY29uZmlnKSB7XG4gICAgcmV0dXJuICdxdWVzdGlvbnMvcXVlc3Rpb25zdWJtaXNzaW9uJztcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgcHVibGljIGludGVyZmFjZSBhbGlhcyBmb3IgdGhlIGNvbXBvbmVudFxuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHN0YXRpYyBnZXQgdHlwZSAoKSB7XG4gICAgcmV0dXJuICdRQVN1Ym1pc3Npb24nO1xuICB9XG5cbiAgLyoqXG4gICAqIHZhbGlkYXRpb25Db25maWcgY29udGFpbnMgYSBidW5jaCBvZiBydWxlc1xuICAgKiB0aGF0IGFyZSB1c2VkIHRvIHZhbGlkYXRlIGFnaW5zdCBjb25maWd1cmF0aW9uIHByb3ZpZGVkIGJ5IHRoZSB1c2VyXG4gICAqL1xuICB2YWxpZGF0ZUNvbmZpZyAoKSB7XG4gICAgaWYgKHRoaXMuX2NvbmZpZy5lbnRpdHlJZCA9PT0gbnVsbCB8fCB0aGlzLl9jb25maWcuZW50aXR5SWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEFuc3dlcnNDb21wb25lbnRFcnJvcihcbiAgICAgICAgJ2BlbnRpdHlJZGAgaXMgYSByZXF1aXJlZCBjb25maWd1cmF0aW9uIG9wdGlvbiBmb3IgUXVlc3Rpb24gU3VibWlzc2lvbicsXG4gICAgICAgICdRdWVzdGlvblN1Ym1pc3Npb24nKTtcbiAgICB9XG4gIH1cblxuICBiZWZvcmVNb3VudCAoKSB7XG4gICAgLy8gQXZvaWQgbW91bnRpbmcgdGhlIGNvbXBvbmVudCBpZiB0aGVyZXMgbm8gZGF0YVxuICAgIC8vIE5vdGUsIDEgYmVjYXVzZSBgY29uZmlnYCBpcyBhbHdheXMgcGFydCBvZiB0aGUgc3RhdGUuXG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKHRoaXMuZ2V0U3RhdGUoKSkubGVuZ3RoID4gMTtcbiAgfVxuXG4gIG9uTW91bnQgKCkge1xuICAgIGxldCB0cmlnZ2VyRWwgPSBET00ucXVlcnkodGhpcy5fY29udGFpbmVyLCAnLmpzLWNvbnRlbnQtdmlzaWJpbGl0eS10b2dnbGUnKTtcbiAgICBpZiAodHJpZ2dlckVsICE9PSBudWxsKSB7XG4gICAgICB0aGlzLmJpbmRGb3JtVG9nZ2xlKHRyaWdnZXJFbCk7XG4gICAgfVxuXG4gICAgbGV0IGZvcm1FbCA9IERPTS5xdWVyeSh0aGlzLl9jb250YWluZXIsIHRoaXMuX2NvbmZpZy5mb3JtU2VsZWN0b3IpO1xuICAgIGlmIChmb3JtRWwgPT09IG51bGwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLmJpbmRGb3JtRm9jdXMoZm9ybUVsKTtcbiAgICB0aGlzLmJpbmRGb3JtU3VibWl0KGZvcm1FbCk7XG4gIH1cblxuICAvKipcbiAgICogYmluZEZvcm1Gb2N1cyB3aWxsIHdpcmUgdXAgdGhlIERPTSBmb2N1cyBldmVudCB0byBzZXJ2ZXJzaWRlIHJlcG9ydGluZ1xuICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBmb3JtRWxcbiAgICovXG4gIGJpbmRGb3JtRm9jdXMgKGZvcm1FbCkge1xuICAgIGlmICh0aGlzLmFuYWx5dGljc1JlcG9ydGVyID09PSBudWxsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgcXVlc3Rpb25UZXh0ID0gRE9NLnF1ZXJ5KGZvcm1FbCwgJy5qcy1xdWVzdGlvbi10ZXh0Jyk7XG4gICAgRE9NLm9uKHF1ZXN0aW9uVGV4dCwgJ2ZvY3VzJywgKCkgPT4ge1xuICAgICAgdGhpcy5hbmFseXRpY3NSZXBvcnRlci5yZXBvcnQodGhpcy5nZXRBbmFseXRpY3NFdmVudCgnUVVFU1RJT05fRk9DVVMnKSk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogYmluZEZvcm1TdWJtaXQgaGFuZGxlcyBzdWJtaXR0aW5nIHRoZSBxdWVzdGlvbiB0byB0aGUgc2VydmVyLFxuICAgKiBhbmQgc3VibWl0cyBhbiBldmVudCB0byBzZXJ2ZXJzaWRlIHJlcG9ydGluZ1xuICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBmb3JtRWxcbiAgICovXG4gIGJpbmRGb3JtU3VibWl0IChmb3JtRWwpIHtcbiAgICBET00ub24oZm9ybUVsLCAnc3VibWl0JywgKGUpID0+IHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHRoaXMuYW5hbHl0aWNzUmVwb3J0ZXIucmVwb3J0KHRoaXMuZ2V0QW5hbHl0aWNzRXZlbnQoJ1FVRVNUSU9OX1NVQk1JVCcpKTtcblxuICAgICAgLy8gVE9ETyhiaWxseSkgd2UgcHJvYmFibHkgd2FudCB0byBkaXNhYmxlIHRoZSBmb3JtIGZyb20gYmVpbmcgc3VibWl0dGVkIHR3aWNlXG4gICAgICBjb25zdCBlcnJvcnMgPSB0aGlzLnZhbGlkYXRlKGZvcm1FbCk7XG4gICAgICBjb25zdCBmb3JtRGF0YSA9IHRoaXMucGFyc2UoZm9ybUVsKTtcbiAgICAgIGlmIChPYmplY3Qua2V5cyhlcnJvcnMpLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zZXRTdGF0ZShuZXcgUXVlc3Rpb25TdWJtaXNzaW9uKGZvcm1EYXRhLCBlcnJvcnMpKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5jb3JlLnN1Ym1pdFF1ZXN0aW9uKHtcbiAgICAgICAgJ2VudGl0eUlkJzogdGhpcy5fY29uZmlnLmVudGl0eUlkLFxuICAgICAgICAncXVlc3Rpb25MYW5ndWFnZSc6IHRoaXMubG9jYWxlLFxuICAgICAgICAnc2l0ZSc6ICdGSVJTVFBBUlRZJyxcbiAgICAgICAgJ25hbWUnOiBmb3JtRGF0YS5uYW1lLFxuICAgICAgICAnZW1haWwnOiBmb3JtRGF0YS5lbWFpbCxcbiAgICAgICAgJ3F1ZXN0aW9uVGV4dCc6IGZvcm1EYXRhLnF1ZXN0aW9uVGV4dCxcbiAgICAgICAgJ3F1ZXN0aW9uRGVzY3JpcHRpb24nOiBmb3JtRGF0YS5xdWVzdGlvbkRlc2NyaXB0aW9uXG4gICAgICB9KVxuICAgICAgICAuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgICAgIHRoaXMuc2V0U3RhdGUoXG4gICAgICAgICAgICBuZXcgUXVlc3Rpb25TdWJtaXNzaW9uKGZvcm1EYXRhLCB7XG4gICAgICAgICAgICAgICduZXR3b3JrJzogJ1dlXFwncmUgc29ycnksIGFuIGVycm9yIG9jY3VycmVkLidcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgKTtcbiAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogYmluZEZvcm1Ub2dnbGUgaGFuZGxlcyBleHBhbmRpbmcgYW5kIG1pbWltaXppbmcgdGhlIGNvbXBvbmVudCdzIGZvcm0uXG4gICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHRyaWdnZXJFbFxuICAgKi9cbiAgYmluZEZvcm1Ub2dnbGUgKHRyaWdnZXJFbCkge1xuICAgIERPTS5vbih0cmlnZ2VyRWwsICdjbGljaycsIChlKSA9PiB7XG4gICAgICBjb25zdCBmb3JtRGF0YSA9IHRoaXMuZ2V0U3RhdGUoKTtcbiAgICAgIHRoaXMuc2V0U3RhdGUoXG4gICAgICAgIG5ldyBRdWVzdGlvblN1Ym1pc3Npb24oe1xuICAgICAgICAgIC4uLmZvcm1EYXRhLFxuICAgICAgICAgICdleHBhbmRlZCc6ICFmb3JtRGF0YS5xdWVzdGlvbkV4cGFuZGVkLFxuICAgICAgICAgICdzdWJtaXR0ZWQnOiBmb3JtRGF0YS5xdWVzdGlvblN1Ym1pdHRlZCB9LFxuICAgICAgICBmb3JtRGF0YS5lcnJvcnMpKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUYWtlcyB0aGUgZm9ybSwgYW5kIGJ1aWxkcyBhIG9iamVjdCB0aGF0IHJlcHJlc2VudHMgdGhlIGlucHV0IG5hbWVzXG4gICAqIGFuZCB0ZXh0IGZpZWxkcy5cbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZm9ybUVsXG4gICAqIEByZXR1cm5zIHtvYmplY3R9XG4gICAqL1xuICBwYXJzZSAoZm9ybUVsKSB7XG4gICAgY29uc3QgaW5wdXRGaWVsZHMgPSBET00ucXVlcnlBbGwoZm9ybUVsLCAnLmpzLXF1ZXN0aW9uLWZpZWxkJyk7XG4gICAgaWYgKCFpbnB1dEZpZWxkcyB8fCBpbnB1dEZpZWxkcy5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiB7fTtcbiAgICB9XG5cbiAgICBsZXQgb2JqID0ge307XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbnB1dEZpZWxkcy5sZW5ndGg7IGkrKykge1xuICAgICAgbGV0IHZhbCA9IGlucHV0RmllbGRzW2ldLnZhbHVlO1xuICAgICAgaWYgKGlucHV0RmllbGRzW2ldLnR5cGUgPT09ICdjaGVja2JveCcpIHtcbiAgICAgICAgdmFsID0gaW5wdXRGaWVsZHNbaV0uY2hlY2tlZDtcbiAgICAgIH1cbiAgICAgIG9ialtpbnB1dEZpZWxkc1tpXS5uYW1lXSA9IHZhbDtcbiAgICB9XG5cbiAgICByZXR1cm4gb2JqO1xuICB9XG5cbiAgLyoqXG4gICAqIFZhbGlkYXRlcyB0aGUgZmllbGRzIGZvciBjb3JyZWN0IGZvcm1hdHRpbmdcbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZm9ybUVsXG4gICAqIEByZXR1cm5zIHtPYmplY3R9IGVycm9ycyBvYmplY3QgaWYgYW55IGVycm9ycyBmb3VuZFxuICAgKi9cbiAgdmFsaWRhdGUgKGZvcm1FbCkge1xuICAgIGxldCBlcnJvcnMgPSB7fTtcbiAgICBjb25zdCBmaWVsZHMgPSBET00ucXVlcnlBbGwoZm9ybUVsLCAnLmpzLXF1ZXN0aW9uLWZpZWxkJyk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmaWVsZHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICghZmllbGRzW2ldLmNoZWNrVmFsaWRpdHkoKSkge1xuICAgICAgICBpZiAoaSA9PT0gMCkge1xuICAgICAgICAgIC8vIHNldCBmb2N1cyBzdGF0ZSBvbiBmaXJzdCBlcnJvclxuICAgICAgICAgIGZpZWxkc1tpXS5mb2N1cygpO1xuICAgICAgICB9XG4gICAgICAgIHN3aXRjaCAoZmllbGRzW2ldLm5hbWUpIHtcbiAgICAgICAgICBjYXNlICdlbWFpbCc6XG4gICAgICAgICAgICBlcnJvcnNbJ2VtYWlsRXJyb3InXSA9IHRydWU7XG4gICAgICAgICAgICBpZiAoIWZpZWxkc1tpXS52YWxpZGl0eS52YWx1ZU1pc3NpbmcpIHtcbiAgICAgICAgICAgICAgZXJyb3JzWydlbWFpbEVycm9yVGV4dCddID0gdGhpcy5fY29uZmlnLmVtYWlsRm9ybWF0RXJyb3JUZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnbmFtZSc6XG4gICAgICAgICAgICBlcnJvcnNbJ25hbWVFcnJvciddID0gdHJ1ZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ3ByaXZhY3lQb2xpY3knOlxuICAgICAgICAgICAgZXJyb3JzWydwcml2YWN5UG9saWN5RXJyb3JUZXh0J10gPSB0aGlzLl9jb25maWcucHJpdmFjeVBvbGljeUVycm9yVGV4dDtcbiAgICAgICAgICAgIGVycm9yc1sncHJpdmFjeVBvbGljeUVycm9yJ10gPSB0cnVlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAncXVlc3Rpb25UZXh0JzpcbiAgICAgICAgICAgIGVycm9yc1sncXVlc3Rpb25UZXh0RXJyb3InXSA9IHRydWU7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZXJyb3JzO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gb3B0aW9ucyBvYmplY3QgZGVzY3JpYmluZyB0aGUgY29udGV4dCBvZiBhIHJlcG9ydGFibGUgZXZlbnRcbiAgICovXG4gIGdldEFuYWx5dGljc0V2ZW50IChldmVudFR5cGUpIHtcbiAgICBjb25zdCBhbmFseXRpY3NFdmVudCA9IG5ldyBBbmFseXRpY3NFdmVudChldmVudFR5cGUpO1xuICAgIGFuYWx5dGljc0V2ZW50LmFkZE9wdGlvbnMoe1xuICAgICAgdmVydGljYWxDb25maWdJZDogdGhpcy5fdmVydGljYWxLZXksXG4gICAgICBzZWFyY2hlcjogdGhpcy5fdmVydGljYWxLZXkgPyAnVkVSVElDQUwnIDogJ1VOSVZFUlNBTCdcbiAgICB9KTtcbiAgICByZXR1cm4gYW5hbHl0aWNzRXZlbnQ7XG4gIH1cbn1cbiIsIi8qKiBAbW9kdWxlIEljb25Db21wb25lbnQgKi9cblxuaW1wb3J0IENvbXBvbmVudCBmcm9tICcuLi9jb21wb25lbnQnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBJY29uQ29tcG9uZW50IGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgLyoqXG4gICAqIEljb25Db21wb25lbnRcbiAgICogQHBhcmFtIG9wdHNcbiAgICogQHBhcmFtIG9wdHMuaWNvbk5hbWUge3N0cmluZ31cbiAgICogQHBhcmFtIG9wdHMuaWNvblVybCB7c3RyaW5nfVxuICAgKi9cbiAgY29uc3RydWN0b3IgKG9wdHMgPSB7fSwgc3lzdGVtT3B0cyA9IHt9KSB7XG4gICAgc3VwZXIob3B0cywgc3lzdGVtT3B0cyk7XG5cbiAgICAvKipcbiAgICAgKiBuYW1lIG9mIGFuIGljb24gZnJvbSB0aGUgZGVmYXVsdCBpY29uIHNldFxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgdGhpcy5pY29uTmFtZSA9IG9wdHMuaWNvbk5hbWUgfHwgJ2RlZmF1bHQnO1xuXG4gICAgLyoqXG4gICAgICogdGhlIHVybCB0byBhIGN1c3RvbSBpbWFnZSBpY29uXG4gICAgICogQHR5cGUge251bGx9XG4gICAgICovXG4gICAgdGhpcy5pY29uVXJsID0gb3B0cy5pY29uVXJsIHx8IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBBbiBhZGRpdGlvbmFsIHN0cmluZyB0byBhcHBlbmQgdG8gdGhlIGljb24ncyBjc3MgY2xhc3MuIE11bHRpcGxlXG4gICAgICogY2xhc3NlcyBzaG91bGQgYmUgc3BhY2UgZGVsaW1pdGVkLlxuICAgICAqL1xuICAgIHRoaXMuY2xhc3NOYW1lcyA9IG9wdHMuY2xhc3NOYW1lcyB8fCBudWxsO1xuXG4gICAgLyoqXG4gICAgICogQSB1bmlxdWUgaWQgdG8gcGFzcyB0byB0aGUgaWNvbi5cbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAqL1xuICAgIHRoaXMuY29tcGxleENvbnRlbnRzUGFyYW1zID0gb3B0cy5jb21wbGV4Q29udGVudHNQYXJhbXMgfHwge307XG4gIH1cblxuICBzdGF0aWMgZ2V0IHR5cGUgKCkge1xuICAgIHJldHVybiAnSWNvbkNvbXBvbmVudCc7XG4gIH1cblxuICAvKipcbiAgICogVGhlIHRlbXBsYXRlIHRvIHJlbmRlclxuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHN0YXRpYyBkZWZhdWx0VGVtcGxhdGVOYW1lIChjb25maWcpIHtcbiAgICByZXR1cm4gJ2ljb25zL2ljb24nO1xuICB9XG5cbiAgLyoqXG4gICAqIGFsbG93aW5nIGR1cGxpY2F0ZXNcbiAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgc3RhdGljIGFyZUR1cGxpY2F0ZU5hbWVzQWxsb3dlZCAoKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvKipcbiAgICogb3ZlcnJpZGVzIGRlZmF1bHQgZnVuY3Rpb25hbGl0eSB0byBwcm92aWRlIG5hbWUgYW5kIG1hcmt1cFxuICAgKiBAcGFyYW0gZGF0YVxuICAgKiBAcmV0dXJucyB7SWNvbkNvbXBvbmVudH1cbiAgICovXG4gIHNldFN0YXRlIChkYXRhKSB7XG4gICAgcmV0dXJuIHN1cGVyLnNldFN0YXRlKE9iamVjdC5hc3NpZ24oZGF0YSwge1xuICAgICAgaWNvblVybDogdGhpcy5pY29uVXJsLFxuICAgICAgaWNvbk5hbWU6IHRoaXMuaWNvbk5hbWUsXG4gICAgICBuYW1lOiB0aGlzLmljb25OYW1lID8gdGhpcy5pY29uTmFtZSA6ICdjdXN0b20nLFxuICAgICAgY2xhc3NOYW1lczogdGhpcy5jbGFzc05hbWVzLFxuICAgICAgY29tcGxleENvbnRlbnRzUGFyYW1zOiB0aGlzLmNvbXBsZXhDb250ZW50c1BhcmFtc1xuICAgIH0pKTtcbiAgfVxufVxuIiwiLyoqIEBtb2R1bGUgQ1RBQ29tcG9uZW50ICovXG5cbmltcG9ydCBDb21wb25lbnQgZnJvbSAnLi4vY29tcG9uZW50JztcbmltcG9ydCBBbmFseXRpY3NFdmVudCBmcm9tICcuLi8uLi8uLi9jb3JlL2FuYWx5dGljcy9hbmFseXRpY3NldmVudCc7XG5pbXBvcnQgRE9NIGZyb20gJy4uLy4uL2RvbS9kb20nO1xuXG5jbGFzcyBDVEFDb25maWcge1xuICBjb25zdHJ1Y3RvciAoY29uZmlnID0ge30pIHtcbiAgICBPYmplY3QuYXNzaWduKHRoaXMsIGNvbmZpZyk7XG5cbiAgICAvKipcbiAgICAgKiBMYWJlbCBiZWxvdyB0aGUgQ1RBIGljb25cbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMubGFiZWwgPSBjb25maWcubGFiZWw7XG5cbiAgICAvKipcbiAgICAgKiBDVEEgaWNvbiwgbWFwcyB0byBhIHNldCBvZiBpY29ucy5cbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMuaWNvbiA9IGNvbmZpZy5pY29uO1xuXG4gICAgLyoqXG4gICAgICogVXJsIHRvIGN1c3RvbSBpY29uLCBoYXMgcHJpb3JpdHkgb3ZlciBpY29uLlxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgdGhpcy5pY29uVXJsID0gY29uZmlnLmljb25Vcmw7XG5cbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIHRoZSBET00gc2hvdWxkIGluY2x1ZGUgbGVnYWN5IGNsYXNzIG5hbWVzXG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICovXG4gICAgdGhpcy5pbmNsdWRlTGVnYWN5Q2xhc3NlcyA9IGNvbmZpZy5pbmNsdWRlTGVnYWN5Q2xhc3NlcyB8fCBmYWxzZTtcblxuICAgIC8qKlxuICAgICAqIENsaWNrIHRocm91Z2ggdXJsIGZvciB0aGUgaWNvbiBhbmQgbGFiZWxcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMudXJsID0gY29uZmlnLnVybDtcblxuICAgIC8qKlxuICAgICAqIEFuYWx5dGljcyBldmVudCB0aGF0IHNob3VsZCBmaXJlOlxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgdGhpcy5hbmFseXRpY3NFdmVudFR5cGUgPSBjb25maWcuYW5hbHl0aWNzIHx8IGNvbmZpZy5ldmVudFR5cGUgfHwgJ0NUQV9DTElDSyc7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgdGFyZ2V0IGF0dHJpYnV0ZSBmb3IgdGhlIENUQSBsaW5rLlxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqL1xuICAgIHRoaXMudGFyZ2V0ID0gY29uZmlnLnRhcmdldCB8fCAnX2JsYW5rJztcblxuICAgIC8qKlxuICAgICAqIFRoZSBldmVudE9wdGlvbnMgbmVlZGVkIGZvciB0aGUgZXZlbnQgdG8gZmlyZSwgcGFzc2VkIGFzIGEgc3RyaW5nIG9yIE9iamVjdFxuICAgICAqIGZyb20gY29uZmlnLmRhdGFNYXBwaW5ncyB8fCB7fS5cbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAqL1xuICAgIGlmICh0eXBlb2YgY29uZmlnLmV2ZW50T3B0aW9ucyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRoaXMuZXZlbnRPcHRpb25zID0gSlNPTi5wYXJzZShjb25maWcuZXZlbnRPcHRpb25zKTtcbiAgICB9XG4gICAgdGhpcy5ldmVudE9wdGlvbnMgPSB0aGlzLmV2ZW50T3B0aW9ucztcblxuICAgIC8qKlxuICAgICAqIEFkZGl0aW9uYWwgY3NzIGNsYXNzTmFtZSBtb2RpZmllcnMgZm9yIHRoZSBjdGFcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMuX2N0YU1vZGlmaWVycyA9IGNvbmZpZy5fY3RhTW9kaWZpZXJzO1xuXG4gICAgLyoqXG4gICAgICogV2hldGhlciB0aGUgY3RhIGlzIHRoZSBvbmx5IG9uZSBpbiBpdHMgQ1RBQ29sbGVjdGlvbkNvbXBvbmVudFxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqL1xuICAgIHRoaXMuX2lzU29sbyA9IGNvbmZpZy5faXNTb2xvIHx8IGZhbHNlO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENUQUNvbXBvbmVudCBleHRlbmRzIENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yIChjb25maWcgPSB7fSwgc3lzdGVtQ29uZmlnID0ge30pIHtcbiAgICBzdXBlcihuZXcgQ1RBQ29uZmlnKGNvbmZpZyksIHN5c3RlbUNvbmZpZyk7XG4gIH1cblxuICBvbk1vdW50ICgpIHtcbiAgICBjb25zdCBlbCA9IERPTS5xdWVyeSh0aGlzLl9jb250YWluZXIsIGAuanMteXh0LUNUQWApO1xuICAgIGlmIChlbCAmJiB0aGlzLl9jb25maWcuZXZlbnRPcHRpb25zKSB7XG4gICAgICBET00ub24oZWwsICdjbGljaycsICgpID0+IHRoaXMucmVwb3J0QW5hbHl0aWNzRXZlbnQoKSk7XG4gICAgfVxuICB9XG5cbiAgc2V0U3RhdGUgKGRhdGEpIHtcbiAgICByZXR1cm4gc3VwZXIuc2V0U3RhdGUoe1xuICAgICAgLi4uZGF0YSxcbiAgICAgIGhhc0ljb246IHRoaXMuX2NvbmZpZy5pY29uIHx8IHRoaXMuX2NvbmZpZy5pY29uVXJsXG4gICAgfSk7XG4gIH1cblxuICByZXBvcnRBbmFseXRpY3NFdmVudCAoKSB7XG4gICAgY29uc3QgYW5hbHl0aWNzRXZlbnQgPSBuZXcgQW5hbHl0aWNzRXZlbnQodGhpcy5fY29uZmlnLmFuYWx5dGljc0V2ZW50VHlwZSk7XG4gICAgYW5hbHl0aWNzRXZlbnQuYWRkT3B0aW9ucyh0aGlzLl9jb25maWcuZXZlbnRPcHRpb25zKTtcbiAgICB0aGlzLmFuYWx5dGljc1JlcG9ydGVyLnJlcG9ydChhbmFseXRpY3NFdmVudCk7XG4gIH1cblxuICBzdGF0aWMgZ2V0IHR5cGUgKCkge1xuICAgIHJldHVybiAnQ1RBJztcbiAgfVxuXG4gIHN0YXRpYyBkZWZhdWx0VGVtcGxhdGVOYW1lIChjb25maWcpIHtcbiAgICByZXR1cm4gJ2N0YXMvY3RhJztcbiAgfVxufVxuIiwiLyoqIEBtb2R1bGUgKi9cblxuaW1wb3J0IENvbXBvbmVudCBmcm9tICcuL2NvbXBvbmVudCc7XG5cbmltcG9ydCBOYXZpZ2F0aW9uQ29tcG9uZW50IGZyb20gJy4vbmF2aWdhdGlvbi9uYXZpZ2F0aW9uY29tcG9uZW50JztcblxuaW1wb3J0IFNlYXJjaENvbXBvbmVudCBmcm9tICcuL3NlYXJjaC9zZWFyY2hjb21wb25lbnQnO1xuaW1wb3J0IEZpbHRlclNlYXJjaENvbXBvbmVudCBmcm9tICcuL3NlYXJjaC9maWx0ZXJzZWFyY2hjb21wb25lbnQnO1xuaW1wb3J0IEF1dG9Db21wbGV0ZUNvbXBvbmVudCBmcm9tICcuL3NlYXJjaC9hdXRvY29tcGxldGVjb21wb25lbnQnO1xuaW1wb3J0IFNwZWxsQ2hlY2tDb21wb25lbnQgZnJvbSAnLi9zZWFyY2gvc3BlbGxjaGVja2NvbXBvbmVudCc7XG5pbXBvcnQgTG9jYXRpb25CaWFzQ29tcG9uZW50IGZyb20gJy4vc2VhcmNoL2xvY2F0aW9uYmlhc2NvbXBvbmVudCc7XG5cbmltcG9ydCBGaWx0ZXJCb3hDb21wb25lbnQgZnJvbSAnLi9maWx0ZXJzL2ZpbHRlcmJveGNvbXBvbmVudCc7XG5pbXBvcnQgRmlsdGVyT3B0aW9uc0NvbXBvbmVudCBmcm9tICcuL2ZpbHRlcnMvZmlsdGVyb3B0aW9uc2NvbXBvbmVudCc7XG5pbXBvcnQgUmFuZ2VGaWx0ZXJDb21wb25lbnQgZnJvbSAnLi9maWx0ZXJzL3JhbmdlZmlsdGVyY29tcG9uZW50JztcbmltcG9ydCBEYXRlUmFuZ2VGaWx0ZXJDb21wb25lbnQgZnJvbSAnLi9maWx0ZXJzL2RhdGVyYW5nZWZpbHRlcmNvbXBvbmVudCc7XG5pbXBvcnQgRmFjZXRzQ29tcG9uZW50IGZyb20gJy4vZmlsdGVycy9mYWNldHNjb21wb25lbnQnO1xuaW1wb3J0IEdlb0xvY2F0aW9uQ29tcG9uZW50IGZyb20gJy4vZmlsdGVycy9nZW9sb2NhdGlvbmNvbXBvbmVudCc7XG5pbXBvcnQgU29ydE9wdGlvbnNDb21wb25lbnQgZnJvbSAnLi9maWx0ZXJzL3NvcnRvcHRpb25zY29tcG9uZW50JztcblxuaW1wb3J0IERpcmVjdEFuc3dlckNvbXBvbmVudCBmcm9tICcuL3Jlc3VsdHMvZGlyZWN0YW5zd2VyY29tcG9uZW50JztcbmltcG9ydCBBY2NvcmRpb25SZXN1bHRzQ29tcG9uZW50IGZyb20gJy4vcmVzdWx0cy9hY2NvcmRpb25yZXN1bHRzY29tcG9uZW50LmpzJztcbmltcG9ydCBWZXJ0aWNhbFJlc3VsdHNDb21wb25lbnQgZnJvbSAnLi9yZXN1bHRzL3ZlcnRpY2FscmVzdWx0c2NvbXBvbmVudCc7XG5pbXBvcnQgVW5pdmVyc2FsUmVzdWx0c0NvbXBvbmVudCBmcm9tICcuL3Jlc3VsdHMvdW5pdmVyc2FscmVzdWx0c2NvbXBvbmVudCc7XG5pbXBvcnQgUGFnaW5hdGlvbkNvbXBvbmVudCBmcm9tICcuL3Jlc3VsdHMvcGFnaW5hdGlvbmNvbXBvbmVudCc7XG5cbmltcG9ydCBDYXJkQ29tcG9uZW50IGZyb20gJy4vY2FyZHMvY2FyZGNvbXBvbmVudCc7XG5pbXBvcnQgU3RhbmRhcmRDYXJkQ29tcG9uZW50IGZyb20gJy4vY2FyZHMvc3RhbmRhcmRjYXJkY29tcG9uZW50JztcbmltcG9ydCBBY2NvcmRpb25DYXJkQ29tcG9uZW50IGZyb20gJy4vY2FyZHMvYWNjb3JkaW9uY2FyZGNvbXBvbmVudCc7XG5pbXBvcnQgTGVnYWN5Q2FyZENvbXBvbmVudCBmcm9tICcuL2NhcmRzL2xlZ2FjeWNhcmRjb21wb25lbnQnO1xuXG5pbXBvcnQgQWx0ZXJuYXRpdmVWZXJ0aWNhbHNDb21wb25lbnQgZnJvbSAnLi9yZXN1bHRzL2FsdGVybmF0aXZldmVydGljYWxzY29tcG9uZW50JztcbmltcG9ydCBNYXBDb21wb25lbnQgZnJvbSAnLi9tYXAvbWFwY29tcG9uZW50JztcbmltcG9ydCBRdWVzdGlvblN1Ym1pc3Npb25Db21wb25lbnQgZnJvbSAnLi9xdWVzdGlvbnMvcXVlc3Rpb25zdWJtaXNzaW9uY29tcG9uZW50JztcblxuaW1wb3J0IEljb25Db21wb25lbnQgZnJvbSAnLi9pY29ucy9pY29uY29tcG9uZW50LmpzJztcbmltcG9ydCBDVEFDb21wb25lbnQgZnJvbSAnLi9jdGFzL2N0YWNvbXBvbmVudCc7XG5pbXBvcnQgQ1RBQ29sbGVjdGlvbkNvbXBvbmVudCBmcm9tICcuL2N0YXMvY3RhY29sbGVjdGlvbmNvbXBvbmVudCc7XG5pbXBvcnQgUmVzdWx0c0hlYWRlckNvbXBvbmVudCBmcm9tICcuL3Jlc3VsdHMvcmVzdWx0c2hlYWRlcmNvbXBvbmVudCc7XG5cbmNvbnN0IENPTVBPTkVOVF9DTEFTU19MSVNUID0gW1xuICAvLyBDb3JlIENvbXBvbmVudFxuICBDb21wb25lbnQsXG5cbiAgLy8gTmF2aWdhdGlvbiBDb21wb25lbnRzXG4gIE5hdmlnYXRpb25Db21wb25lbnQsXG5cbiAgLy8gU2VhcmNoIENvbXBvbmVudHNcbiAgU2VhcmNoQ29tcG9uZW50LFxuICBGaWx0ZXJTZWFyY2hDb21wb25lbnQsXG4gIEF1dG9Db21wbGV0ZUNvbXBvbmVudCxcbiAgU3BlbGxDaGVja0NvbXBvbmVudCxcbiAgTG9jYXRpb25CaWFzQ29tcG9uZW50LFxuXG4gIC8vIEZpbHRlciBDb21wb25lbnRzXG4gIEZpbHRlckJveENvbXBvbmVudCxcbiAgRmlsdGVyT3B0aW9uc0NvbXBvbmVudCxcbiAgUmFuZ2VGaWx0ZXJDb21wb25lbnQsXG4gIERhdGVSYW5nZUZpbHRlckNvbXBvbmVudCxcbiAgRmFjZXRzQ29tcG9uZW50LFxuICBHZW9Mb2NhdGlvbkNvbXBvbmVudCxcbiAgU29ydE9wdGlvbnNDb21wb25lbnQsXG5cbiAgLy8gUmVzdWx0cyBDb21wb25lbnRzXG4gIERpcmVjdEFuc3dlckNvbXBvbmVudCxcbiAgVW5pdmVyc2FsUmVzdWx0c0NvbXBvbmVudCxcbiAgVmVydGljYWxSZXN1bHRzQ29tcG9uZW50LFxuICBQYWdpbmF0aW9uQ29tcG9uZW50LFxuICBBY2NvcmRpb25SZXN1bHRzQ29tcG9uZW50LFxuICBNYXBDb21wb25lbnQsXG4gIEFsdGVybmF0aXZlVmVydGljYWxzQ29tcG9uZW50LFxuICBSZXN1bHRzSGVhZGVyQ29tcG9uZW50LFxuXG4gIC8vIENhcmQgQ29tcG9uZW50c1xuICBDYXJkQ29tcG9uZW50LFxuICBTdGFuZGFyZENhcmRDb21wb25lbnQsXG4gIEFjY29yZGlvbkNhcmRDb21wb25lbnQsXG4gIExlZ2FjeUNhcmRDb21wb25lbnQsXG5cbiAgLy8gUXVlc3Rpb25zIENvbXBvbmVudHNcbiAgUXVlc3Rpb25TdWJtaXNzaW9uQ29tcG9uZW50LFxuXG4gIC8vIEhlbHBlciBDb21wb25lbnRzXG4gIEljb25Db21wb25lbnQsXG4gIENUQUNvbXBvbmVudCxcbiAgQ1RBQ29sbGVjdGlvbkNvbXBvbmVudFxuXTtcblxuLyoqXG4gKiBUaGUgY29tcG9uZW50IHJlZ2lzdHJ5IGlzIGEgbWFwIHRoYXQgY29udGFpbnNcbiAqIGFsbCBhdmFpbGFibGUgY29tcG9uZW50IGNsYXNzZXMgdXNlZCBmb3IgY3JlYXRpb24gb3IgZXh0ZW5zaW9uLlxuICogRWFjaCBjb21wb25lbnQgY2xhc3MgaGFzIGEgdW5pcXVlIHR5cGUsIHdoaWNoIGlzIHVzZWQgYXMgdGhlIGtleSBmb3IgdGhlIHJlZ2lzdHJ5XG4gKiBAdHlwZSB7T2JqZWN0LjxzdHJpbmcsIENvbXBvbmVudD59XG4gKi9cbmV4cG9ydCBjb25zdCBDT01QT05FTlRfUkVHSVNUUlkgPSBDT01QT05FTlRfQ0xBU1NfTElTVC5yZWR1Y2UoKHJlZ2lzdHJ5LCBjbGF6eikgPT4ge1xuICByZWdpc3RyeVtjbGF6ei50eXBlXSA9IGNsYXp6O1xuICByZXR1cm4gcmVnaXN0cnk7XG59LCB7fSk7XG4iLCIvKiogQG1vZHVsZSBDb21wb25lbnRNYW5hZ2VyICovXG5cbmltcG9ydCB7IEFuc3dlcnNDb21wb25lbnRFcnJvciB9IGZyb20gJy4uLy4uL2NvcmUvZXJyb3JzL2Vycm9ycyc7XG5pbXBvcnQgRE9NIGZyb20gJy4uL2RvbS9kb20nO1xuaW1wb3J0IHsgQ09NUE9ORU5UX1JFR0lTVFJZIH0gZnJvbSAnLi9yZWdpc3RyeSc7XG5cbi8qKlxuICogQ29tcG9uZW50TWFuYWdlciBpcyBhIFNpbmdsZXRvbmUgdGhhdCBjb250YWlucyBib3RoIGFuIGludGVybmFsIHJlZ2lzdHJ5IG9mXG4gKiBlbGlnaWJsZSBjb21wb25lbnRzIHRvIGJlIGNyZWF0ZWQsIGFzIHdlbGwgYXMga2VlcHMgdHJhY2sgb2YgdGhlIGN1cnJlbnRcbiAqIGluc3RhbnRpYXRlZCBhbmQgYWN0aXZlIGNvbXBvbmVudHMuXG4gKlxuICogQUxMIGNvbXBvbmVudHMgc2hvdWxkIGJlIGNvbnN0cnVjdGVkIHVzaW5nIHRoZSB7Q29tcG9uZW50TWFuYWdlcn0gdmlhIGl0cyBgY3JlYXRlYCBtZXRob2QuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvbXBvbmVudE1hbmFnZXIge1xuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgLyoqXG4gICAgICogVGhlIGFjdGl2ZSBjb21wb25lbnRzIGlzIGFuIGludGVybmFsIGNvbnRhaW5lciB0byBrZWVwIHRyYWNrXG4gICAgICogb2YgYWxsIG9mIHRoZSBjb21wb25lbnRzIHRoYXQgaGF2ZSBiZWVuIGNvbnN0cnVjdGVkXG4gICAgICovXG4gICAgdGhpcy5fYWN0aXZlQ29tcG9uZW50cyA9IFtdO1xuXG4gICAgLyoqXG4gICAgICogQSBsb2NhbCByZWZlcmVuY2UgdG8gdGhlIGNvcmUgbGlicmFyeSBkZXBlbmRlbmN5XG4gICAgICpcbiAgICAgKiBUaGUgQ29yZSBjb250YWlucyBib3RoIHRoZSBzdG9yYWdlIEFORCBzZXJ2aWNlcyB0aGF0IGFyZSBuZWVkZWQgZm9yIHBlcmZvcm1pbmcgb3BlcmF0aW9uc1xuICAgICAqIGxpa2Ugc2VhcmNoIGFuZCBhdXRvIGNvbXBsZXRlLlxuICAgICAqXG4gICAgICogVGhlIHN0b3JhZ2UgaXMgdGhlIHNvdXJjZSBvZiB0cnV0aCBmb3IgdGhlIHN0YXRlIG9mIEFMTCBjb21wb25lbnRzLlxuICAgICAqIFdoZW5ldmVyIHRoZSBzdG9yYWdlIGlzIHVwZGF0ZWQsIHRoZSBzdGF0ZSBnZXRzIHB1c2hlZCBkb3duIHRvIHRoZSBuZWNlc3NhcnkgY29tcG9uZW50cy5cbiAgICAgKiBAdHlwZSB7Q29yZX1cbiAgICAgKi9cbiAgICB0aGlzLl9jb3JlID0gbnVsbDtcblxuICAgIC8qKlxuICAgICAqIFRoZSBwcmltYXJ5IHJlbmRlcmVyIHRvIHVzZSBmb3IgYWxsIGNvbXBvbmVudHNcbiAgICAgKiBAdHlwZSB7SGFuZGxlYmFyc1JlbmRlcmVyfVxuICAgICAqL1xuICAgIHRoaXMuX3JlbmRlcmVyID0gbnVsbDtcblxuICAgIC8qKlxuICAgICAqIEEgbG9jYWwgcmVmZXJlbmNlIHRvIHRoZSBhbmFseXRpY3MgcmVwb3J0ZXIgZGVwZW5kZW5jeVxuICAgICAqL1xuICAgIHRoaXMuX2FuYWx5dGljc1JlcG9ydGVyID0gbnVsbDtcbiAgfVxuXG4gIHN0YXRpYyBnZXRJbnN0YW5jZSAoKSB7XG4gICAgaWYgKCF0aGlzLmluc3RhbmNlKSB7XG4gICAgICB0aGlzLmluc3RhbmNlID0gbmV3IENvbXBvbmVudE1hbmFnZXIoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5pbnN0YW5jZTtcbiAgfVxuXG4gIHNldFJlbmRlcmVyIChyZW5kZXJlcikge1xuICAgIHRoaXMuX3JlbmRlcmVyID0gcmVuZGVyZXI7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBzZXRDb3JlIChjb3JlKSB7XG4gICAgdGhpcy5fY29yZSA9IGNvcmU7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBzZXRBbmFseXRpY3NSZXBvcnRlciAocmVwb3J0ZXIpIHtcbiAgICB0aGlzLl9hbmFseXRpY3NSZXBvcnRlciA9IHJlcG9ydGVyO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIHJlZ2lzdGVycyBhIGNvbXBvbmVudCB0byBiZSBlbGlnaWJsZSBmb3IgY3JlYXRpb24gYW5kIG92ZXJyaWRlLlxuICAgKiBAcGFyYW0ge0NvbXBvbmVudH0gVGhlIENvbXBvbmVudCBDbGFzcyB0byByZWdpc3RlclxuICAgKi9cbiAgcmVnaXN0ZXIgKGNvbXBvbmVudENsYXp6KSB7XG4gICAgQ09NUE9ORU5UX1JFR0lTVFJZW2NvbXBvbmVudENsYXp6LnR5cGVdID0gY29tcG9uZW50Q2xheno7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBjb21wb25lbnRzIHdpdGggbmFtZXMgc2ltaWxhciB0byB0aGUgcGFzc2VkIGluIGNvbXBvbmVudCBjbGFzcy5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGNvbXBvbmVudFR5cGVcbiAgICovXG4gIGdldFNpbWlsYXJDb21wb25lbnRzIChjb21wb25lbnRUeXBlKSB7XG4gICAgbGV0IHNpbWlsYXJDb21wb25lbnRzID0gT2JqZWN0LmtleXMoQ09NUE9ORU5UX1JFR0lTVFJZKS5maWx0ZXIodHlwZSA9PlxuICAgICAgdHlwZS5zdGFydHNXaXRoKGNvbXBvbmVudFR5cGUuc3Vic3RyaW5nKDAsIDIpKVxuICAgICk7XG4gICAgaWYgKHNpbWlsYXJDb21wb25lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgc2ltaWxhckNvbXBvbmVudHMgPSBPYmplY3Qua2V5cyhDT01QT05FTlRfUkVHSVNUUlkpO1xuICAgIH1cbiAgICByZXR1cm4gc2ltaWxhckNvbXBvbmVudHM7XG4gIH1cblxuICAvKipcbiAgICogY3JlYXRlIGlzIHRoZSBlbnRyeSBwb2ludCBmb3IgY29uc3RydWN0aW5nIGFueSBhbmQgYWxsIGNvbXBvbmVudHMuXG4gICAqIEl0IHdpbGwgaW5zdGFudGlhdGUgYSBuZXcgaW5zdGFuY2Ugb2YgdGhlIGNvbXBvbmVudCwgYW5kIGJvdGggYXBwbHlcbiAgICogaW5pdGlhbCBzdGF0ZSBmcm9tIHRoZSBzdG9yYWdlIGFuZCBiaW5kIGl0IHRvIHRoZSBzdG9yYWdlIGZvciB1cGRhdGVzLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gY29tcG9uZW50VHlwZSBUaGUgY29tcG9uZW50IHR5cGUgdG8gY3JlYXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIFRoZSBvcHRpb25zIHRvIHBpcGUgdG8gdGhlIGNvbnN0cnVjdGlvbiBvZiB0aGUgY29tcG9uZW50XG4gICAqL1xuICBjcmVhdGUgKGNvbXBvbmVudFR5cGUsIG9wdHMpIHtcbiAgICAvLyBFdmVyeSBjb21wb25lbnQgbmVlZHMgbG9jYWwgYWNjZXNzIHRvIHRoZSBjb21wb25lbnQgbWFuYWdlclxuICAgIC8vIGJlY2F1c2Ugc29tZXRpbWVzIGNvbXBvbmVudHMgaGF2ZSBzdWJjb21wb25lbnRzIHRoYXQgbmVlZCB0byBiZVxuICAgIC8vIGNvbnN0cnVjdGVkIGR1cmluZyBjcmVhdGlvblxuICAgIGxldCBzeXN0ZW1PcHRzID0ge1xuICAgICAgY29yZTogdGhpcy5fY29yZSxcbiAgICAgIHJlbmRlcmVyOiB0aGlzLl9yZW5kZXJlcixcbiAgICAgIGFuYWx5dGljc1JlcG9ydGVyOiB0aGlzLl9hbmFseXRpY3NSZXBvcnRlcixcbiAgICAgIGNvbXBvbmVudE1hbmFnZXI6IHRoaXNcbiAgICB9O1xuXG4gICAgbGV0IGNvbXBvbmVudENsYXNzID0gQ09NUE9ORU5UX1JFR0lTVFJZW2NvbXBvbmVudFR5cGVdO1xuICAgIGlmICghY29tcG9uZW50Q2xhc3MpIHtcbiAgICAgIHRocm93IG5ldyBBbnN3ZXJzQ29tcG9uZW50RXJyb3IoXG4gICAgICAgIGBDb21wb25lbnQgdHlwZSAke2NvbXBvbmVudFR5cGV9IGlzIG5vdCByZWNvZ25pemVkIGFzIGEgdmFsaWQgY29tcG9uZW50LmAgK1xuICAgICAgICBgIFlvdSBtaWdodCBoYXZlIG1lYW50ICR7dGhpcy5nZXRTaW1pbGFyQ29tcG9uZW50cyhjb21wb25lbnRUeXBlKS5qb2luKCcsICcpfT9gKTtcbiAgICB9XG5cbiAgICBpZiAoXG4gICAgICAhY29tcG9uZW50Q2xhc3MuYXJlRHVwbGljYXRlTmFtZXNBbGxvd2VkKCkgJiZcbiAgICAgIHRoaXMuX2FjdGl2ZUNvbXBvbmVudHMuc29tZShjID0+IGMubmFtZSA9PT0gb3B0cy5uYW1lKVxuICAgICkge1xuICAgICAgdGhyb3cgbmV3IEFuc3dlcnNDb21wb25lbnRFcnJvcihcbiAgICAgICAgYEFub3RoZXIgY29tcG9uZW50IHdpdGggbmFtZSAke29wdHMubmFtZX0gYWxyZWFkeSBleGlzdHNgLFxuICAgICAgICBjb21wb25lbnRUeXBlKTtcbiAgICB9XG5cbiAgICBjb25zdCBjb25maWcgPSB7XG4gICAgICBpc1R3aW46IHRoaXMuX2FjdGl2ZUNvbXBvbmVudHMuc29tZShjb21wb25lbnQgPT4gY29tcG9uZW50LmNvbnN0cnVjdG9yLnR5cGUgPT09IGNvbXBvbmVudFR5cGUpLFxuICAgICAgLi4ub3B0c1xuICAgIH07XG5cbiAgICAvLyBJbnN0YW50aWF0ZSBvdXIgbmV3IGNvbXBvbmVudCBhbmQga2VlcCB0cmFjayBvZiBpdFxuICAgIGxldCBjb21wb25lbnQgPVxuICAgICAgbmV3IENPTVBPTkVOVF9SRUdJU1RSWVtjb21wb25lbnRUeXBlXShjb25maWcsIHN5c3RlbU9wdHMpXG4gICAgICAgIC5pbml0KGNvbmZpZyk7XG5cbiAgICB0aGlzLl9hY3RpdmVDb21wb25lbnRzLnB1c2goY29tcG9uZW50KTtcblxuICAgIC8vIElmIHRoZXJlIGlzIGEgZ2xvYmFsIHN0b3JhZ2UgdG8gcG93ZXIgc3RhdGUsIGFwcGx5IHRoZSBzdGF0ZVxuICAgIC8vIGZyb20gdGhlIHN0b3JhZ2UgdG8gdGhlIGNvbXBvbmVudCwgYW5kIHRoZW4gYmluZCB0aGUgY29tcG9uZW50XG4gICAgLy8gc3RhdGUgdG8gdGhlIHN0b3JhZ2UgdmlhIGl0cyB1cGRhdGVzXG4gICAgaWYgKHRoaXMuX2NvcmUgJiYgdGhpcy5fY29yZS5nbG9iYWxTdG9yYWdlICE9PSBudWxsKSB7XG4gICAgICBpZiAoY29tcG9uZW50Lm1vZHVsZUlkID09PSB1bmRlZmluZWQgfHwgY29tcG9uZW50Lm1vZHVsZUlkID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBjb21wb25lbnQ7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2NvcmUuZ2xvYmFsU3RvcmFnZVxuICAgICAgICAub24oJ3VwZGF0ZScsIGNvbXBvbmVudC5tb2R1bGVJZCwgKGRhdGEpID0+IHtcbiAgICAgICAgICBjb21wb25lbnQuc2V0U3RhdGUoZGF0YSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBjb21wb25lbnQ7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlIHRoZSBwcm92aWRlZCBjb21wb25lbnQgZnJvbSB0aGUgbGlzdCBvZiBhY3RpdmUgY29tcG9uZW50cyBhbmQgcmVtb3ZlXG4gICAqIHRoZSBhc3NvY2lhdGVkIHN0b3JhZ2UgZXZlbnQgbGlzdGVuZXJcbiAgICogQHBhcmFtIHtDb21wb25lbnR9IGNvbXBvbmVudCBUaGUgY29tcG9uZW50IHRvIHJlbW92ZVxuICAgKi9cbiAgcmVtb3ZlIChjb21wb25lbnQpIHtcbiAgICB0aGlzLl9jb3JlLmdsb2JhbFN0b3JhZ2Uub2ZmKCd1cGRhdGUnLCBjb21wb25lbnQubW9kdWxlSWQpO1xuXG4gICAgY29uc3QgaW5kZXggPSB0aGlzLl9hY3RpdmVDb21wb25lbnRzLmZpbmRJbmRleChjID0+IGMubmFtZSA9PT0gY29tcG9uZW50Lm5hbWUpO1xuICAgIHRoaXMuX2FjdGl2ZUNvbXBvbmVudHMuc3BsaWNlKGluZGV4LCAxKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmUgdGhlIGNvbXBvbmVudCB3aXRoIHRoZSBnaXZlbiBuYW1lXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFRoZSBuYW1lIG9mIHRoZSBjb21wbmVudCB0byByZW1vdmVcbiAgICovXG4gIHJlbW92ZUJ5TmFtZSAobmFtZSkge1xuICAgIGNvbnN0IGNvbXBvbmVudCA9IHRoaXMuX2FjdGl2ZUNvbXBvbmVudHMuZmluZChjID0+IGMubmFtZSA9PT0gbmFtZSk7XG4gICAgY29tcG9uZW50LnJlbW92ZSgpO1xuICAgIERPTS5lbXB0eShjb21wb25lbnQuX2NvbnRhaW5lcik7XG4gIH1cblxuICBnZXRBY3RpdmVDb21wb25lbnQgKHR5cGUpIHtcbiAgICByZXR1cm4gdGhpcy5fYWN0aXZlQ29tcG9uZW50cy5maW5kKGMgPT4gYy5jb25zdHJ1Y3Rvci50eXBlID09PSB0eXBlKTtcbiAgfVxufVxuIiwiLyoqIEBtb2R1bGUgVmVydGljYWxQYWdlc0NvbmZpZyAqL1xuXG5leHBvcnQgY2xhc3MgVmVydGljYWxQYWdlQ29uZmlnIHtcbiAgY29uc3RydWN0b3IgKGNvbmZpZyA9IHt9KSB7XG4gICAgLyoqXG4gICAgICogVGhlIG5hbWUgb2YgdGhlIHRhYiB0aGF0IGlzIGV4cG9zZWQgZm9yIHRoZSBsaW5rXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLmxhYmVsID0gY29uZmlnLmxhYmVsIHx8IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgY29tcGxldGUgVVJMLCBpbmNsdWRpbmcgdGhlIHBhcmFtc1xuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgdGhpcy51cmwgPSBjb25maWcudXJsIHx8IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgc2VydmVyc2lkZSB2ZXJ0aWNhbCBjb25maWcgaWQgdGhhdCB0aGlzIGlzIHJlZmVyZW5jZWQgdG8uXG4gICAgICogQnkgcHJvdmlkaW5nIHRoaXMsIGVuYWJsZXMgZHluYW1pYyBzb3J0aW5nIGJhc2VkIG9uIHJlc3VsdHMuXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLnZlcnRpY2FsS2V5ID0gY29uZmlnLnZlcnRpY2FsS2V5IHx8IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBEZXRlcm1pbmVzIHdoZXRoZXIgdG8gc2hvdyB0aGlzIHRhYiBpbiB0aGUgbmF2aWdhdGlvbiBjb21wb25lbnRcbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICB0aGlzLmhpZGVJbk5hdmlnYXRpb24gPSBjb25maWcuaGlkZUluTmF2aWdhdGlvbiB8fCBmYWxzZTtcblxuICAgIC8qKlxuICAgICAqIERldGVybWluZXMgd2hldGhlciB0byBzaG93IHRoaXMgdGFiIGZpcnN0IGluIHRoZSBvcmRlclxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqL1xuICAgIHRoaXMuaXNGaXJzdCA9IGNvbmZpZy5pc0ZpcnN0IHx8IGZhbHNlO1xuXG4gICAgLyoqXG4gICAgICogRGV0ZXJtaW5lcyB3aGV0aGVyIG9yIG5vdCB0byBhcHBseSBhIHNwZWNpYWwgY2xhc3MgdG8gdGhlXG4gICAgICogbWFya3VwIHRvIGRldGVybWluZSBpZiBpdCdzIGFuIGFjdGl2ZSB0YWJcbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICB0aGlzLmlzQWN0aXZlID0gY29uZmlnLmlzQWN0aXZlIHx8IGZhbHNlO1xuXG4gICAgLyoqXG4gICAgICogVVJMIG9mIGFuIGljb25cbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMuaWNvblVybCA9IGNvbmZpZy5pY29uVXJsO1xuXG4gICAgLyoqXG4gICAgICogbmFtZSBvZiBhbiBpY29uIGZyb20gdGhlIGRlZmF1bHQgaWNvbiBzZXRcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMuaWNvbiA9IGNvbmZpZy5pY29uO1xuICAgIE9iamVjdC5mcmVlemUodGhpcyk7XG4gIH1cblxuICB2YWxpZGF0ZSAoKSB7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVmVydGljYWxQYWdlc0NvbmZpZyB7XG4gIGNvbnN0cnVjdG9yIChwYWdlcyA9IFtdKSB7XG4gICAgdGhpcy52ZXJ0aWNhbFBhZ2VzQ29uZmlnID0gVmVydGljYWxQYWdlc0NvbmZpZy5mcm9tKHBhZ2VzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVc2luZyBhIGdldHRlciB0aGF0IGNvcGllcyB0aGUgZGF0YSBpbnN0ZWFkIG9mIHByb3ZpZGluZyBhIHJlZmVyZW5jZSBwcmV2ZW50cyBpdCBmcm9tIGJlaW5nIG11dGF0ZWQuXG4gICAqIFRoaXMgaXMgaW1wb3J0YW50IGZvciBnbG9iYWwgY29uZmlndXJhdGlvbi5cbiAgICogQHJldHVybnMge0FycmF5PFZlcnRpY2FsUGFnZUNvbmZpZz59XG4gICAqL1xuICBnZXQgKCkge1xuICAgIHJldHVybiB0aGlzLnZlcnRpY2FsUGFnZXNDb25maWcubWFwKHBhZ2UgPT4gKHsgLi4ucGFnZSB9KSk7XG4gIH1cblxuICBzdGF0aWMgZnJvbSAocGFnZXMpIHtcbiAgICByZXR1cm4gcGFnZXMubWFwKHBhZ2UgPT4gbmV3IFZlcnRpY2FsUGFnZUNvbmZpZyhwYWdlKSk7XG4gIH1cbn1cbiIsImltcG9ydCBBcGlSZXF1ZXN0IGZyb20gJy4uL2h0dHAvYXBpcmVxdWVzdCc7XG5cbi8qKlxuICogVGhpcyBjbGFzcyBwcm92aWRlcyBhY2Nlc3MgdG8gdGhlIEFuc3dlcnMgU3RhdHVzIHBhZ2UuIFRoaXMgcGFnZSBpbmRpY2F0ZXNcbiAqIGlmIHRoZSBmcm9udC1lbmQgZm9yIGEgcGFydGljdWxhciBleHBlcmllbmNlIHNob3VsZCBiZSB0ZW1wb3JhcmlseSBkaXNhYmxlZFxuICogZHVlIHRvIGJhY2stZW5kIGlzc3Vlcy5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTWFzdGVyU3dpdGNoQXBpIHtcbiAgY29uc3RydWN0b3IgKHJlcXVlc3RDb25maWcsIGdsb2JhbFN0b3JhZ2UpIHtcbiAgICB0aGlzLl9yZXF1ZXN0ID0gbmV3IEFwaVJlcXVlc3QocmVxdWVzdENvbmZpZywgZ2xvYmFsU3RvcmFnZSk7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIHRoZSBmcm9udC1lbmQgZm9yIHRoZSBnaXZlbiBleHBlcmllbmNlIHNob3VsZCBiZSB0ZW1wb3JhcmlseSBkaXNhYmxlZC5cbiAgICogTm90ZSB0aGF0IHRoaXMgY2hlY2sgZXJycyBvbiB0aGUgc2lkZSBvZiBlbmFibGluZyB0aGUgZnJvbnQtZW5kLiBJZiB0aGVyZSBhcmUgYW55XG4gICAqIGlzc3VlcyB3aXRoIHRoZSByZXN1bHRhbnQgbmV0d29yayBjYWxsLCB0aG9zZSBmYWlsdXJlcyBhcmUgY2F1Z2h0LiBJbiB0aGlzIGZhaWx1cmVcbiAgICogY2FzZSwgdGhlIGFzc3VtcHRpb24gaXMgdGhhdCB0aGluZ3MgYXJlIGVuYWJsZWQuXG4gICAqXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGJvb2xlYW4+fSBBIFByb21pc2UgY29udGFpbmluZyBhIGJvb2xlYW4gaW5kaWNhdGluZyBpZiB0aGUgZnJvbnQtZW5kXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG91bGQgYmUgZGlzYWJsZWQuXG4gICAqL1xuICBpc0Rpc2FibGVkICgpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgdGhpcy5fcmVxdWVzdC5nZXQoeyBjcmVkZW50aWFsczogJ29taXQnIH0pXG4gICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHJlc3BvbnNlLmpzb24oKSlcbiAgICAgICAgLnRoZW4oc3RhdHVzID0+IHN0YXR1cyAmJiBzdGF0dXMuZGlzYWJsZWQpXG4gICAgICAgIC50aGVuKGlzRGlzYWJsZWQgPT4gcmVzb2x2ZSghIWlzRGlzYWJsZWQpKVxuICAgICAgICAuY2F0Y2goKCkgPT4gcmVzb2x2ZShmYWxzZSkpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcge0BsaW5rIE1hc3RlclN3aXRjaEFwaX0gZnJvbSB0aGUgcHJvdmlkZWQgcGFyYW1ldGVycy5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGFwaUtleSBUaGUgYXBpS2V5IG9mIHRoZSBleHBlcmllbmNlLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZXhwZXJpZW5jZUtleSBUaGUgaWRlbnRpZmllciBvZiB0aGUgZXhwZXJpZW5jZS5cbiAgICogQHBhcmFtIHtHbG9iYWxTdG9yYWdlfSBnbG9iYWxTdG9yYWdlIFRoZSB7QGxpbmsgR2xvYmFsU3RvcmFnZX0gaW5zdGFuY2UuXG4gICAqIEByZXR1cm5zIHtNYXN0ZXJTd2l0Y2hBcGl9IFRoZSBuZXcge0BsaW5rIE1hc3RlclN3aXRjaEFwaX0gaW5zdGFuY2UuXG4gICAqL1xuICBzdGF0aWMgZnJvbSAoYXBpS2V5LCBleHBlcmllbmNlS2V5LCBnbG9iYWxTdG9yYWdlKSB7XG4gICAgY29uc3QgcmVxdWVzdENvbmZpZyA9IHtcbiAgICAgIGFwaUtleSxcbiAgICAgIGJhc2VVcmw6ICdodHRwczovL2Fuc3dlcnNzdGF0dXMucGFnZXNjZG4uY29tLycsXG4gICAgICBlbmRwb2ludDogYCR7YXBpS2V5fS8ke2V4cGVyaWVuY2VLZXl9L3N0YXR1cy5qc29uYFxuICAgIH07XG4gICAgcmV0dXJuIG5ldyBNYXN0ZXJTd2l0Y2hBcGkocmVxdWVzdENvbmZpZywgZ2xvYmFsU3RvcmFnZSk7XG4gIH1cbn1cbiIsIi8qKiBAbW9kdWxlICovXG5cbmltcG9ydCBDb3JlIGZyb20gJy4vY29yZS9jb3JlJztcbmltcG9ydCBSdGZDb252ZXJ0ZXIgZnJvbSAnQHlleHQvcnRmLWNvbnZlcnRlcic7XG5pbXBvcnQgY3NzVmFycyBmcm9tICdjc3MtdmFycy1wb255ZmlsbCc7XG5cbmltcG9ydCB7XG4gIERlZmF1bHRUZW1wbGF0ZXNMb2FkZXIsXG4gIFJlbmRlcmVycyxcbiAgRE9NXG59IGZyb20gJy4vdWkvaW5kZXgnO1xuaW1wb3J0IENvbXBvbmVudCBmcm9tICcuL3VpL2NvbXBvbmVudHMvY29tcG9uZW50JztcblxuaW1wb3J0IEVycm9yUmVwb3J0ZXIgZnJvbSAnLi9jb3JlL2Vycm9ycy9lcnJvcnJlcG9ydGVyJztcbmltcG9ydCBDb25zb2xlRXJyb3JSZXBvcnRlciBmcm9tICcuL2NvcmUvZXJyb3JzL2NvbnNvbGVlcnJvcnJlcG9ydGVyJztcbmltcG9ydCB7IEFuYWx5dGljc1JlcG9ydGVyLCBOb29wQW5hbHl0aWNzUmVwb3J0ZXIgfSBmcm9tICcuL2NvcmUnO1xuaW1wb3J0IFBlcnNpc3RlbnRTdG9yYWdlIGZyb20gJy4vdWkvc3RvcmFnZS9wZXJzaXN0ZW50c3RvcmFnZSc7XG5pbXBvcnQgR2xvYmFsU3RvcmFnZSBmcm9tICcuL2NvcmUvc3RvcmFnZS9nbG9iYWxzdG9yYWdlJztcbmltcG9ydCB7IEFuc3dlcnNDb21wb25lbnRFcnJvciwgQW5zd2Vyc0NvcmVFcnJvciB9IGZyb20gJy4vY29yZS9lcnJvcnMvZXJyb3JzJztcbmltcG9ydCBBbmFseXRpY3NFdmVudCBmcm9tICcuL2NvcmUvYW5hbHl0aWNzL2FuYWx5dGljc2V2ZW50JztcbmltcG9ydCBTdG9yYWdlS2V5cyBmcm9tICcuL2NvcmUvc3RvcmFnZS9zdG9yYWdla2V5cyc7XG5pbXBvcnQgU2VhcmNoQ29uZmlnIGZyb20gJy4vY29yZS9tb2RlbHMvc2VhcmNoY29uZmlnJztcbmltcG9ydCBBdXRvQ29tcGxldGVBcGkgZnJvbSAnLi9jb3JlL3NlYXJjaC9hdXRvY29tcGxldGVhcGknO1xuaW1wb3J0IE1vY2tBdXRvQ29tcGxldGVTZXJ2aWNlIGZyb20gJy4vY29yZS9zZWFyY2gvbW9ja2F1dG9jb21wbGV0ZXNlcnZpY2UnO1xuaW1wb3J0IFF1ZXN0aW9uQW5zd2VyQXBpIGZyb20gJy4vY29yZS9zZWFyY2gvcXVlc3Rpb25hbnN3ZXJhcGknO1xuaW1wb3J0IE1vY2tRdWVzdGlvbkFuc3dlclNlcnZpY2UgZnJvbSAnLi9jb3JlL3NlYXJjaC9tb2NrcXVlc3Rpb25hbnN3ZXJzZXJ2aWNlJztcbmltcG9ydCBTZWFyY2hBcGkgZnJvbSAnLi9jb3JlL3NlYXJjaC9zZWFyY2hhcGknO1xuaW1wb3J0IE1vY2tTZWFyY2hTZXJ2aWNlIGZyb20gJy4vY29yZS9zZWFyY2gvbW9ja3NlYXJjaHNlcnZpY2UnO1xuaW1wb3J0IENvbXBvbmVudE1hbmFnZXIgZnJvbSAnLi91aS9jb21wb25lbnRzL2NvbXBvbmVudG1hbmFnZXInO1xuaW1wb3J0IFZlcnRpY2FsUGFnZXNDb25maWcgZnJvbSAnLi9jb3JlL21vZGVscy92ZXJ0aWNhbHBhZ2VzY29uZmlnJztcbmltcG9ydCB7IFNBTkRCT1gsIFBST0RVQ1RJT04gfSBmcm9tICcuL2NvcmUvY29uc3RhbnRzJztcbmltcG9ydCBNYXN0ZXJTd2l0Y2hBcGkgZnJvbSAnLi9jb3JlL3V0aWxzL21hc3RlcnN3aXRjaGFwaSc7XG5cbi8qKiBAdHlwZWRlZiB7aW1wb3J0KCcuL2NvcmUvc2VydmljZXMvc2VhcmNoc2VydmljZScpLmRlZmF1bHR9IFNlYXJjaFNlcnZpY2UgKi9cbi8qKiBAdHlwZWRlZiB7aW1wb3J0KCcuL2NvcmUvc2VydmljZXMvYXV0b2NvbXBsZXRlc2VydmljZScpLmRlZmF1bHR9IEF1dG9Db21wbGV0ZVNlcnZpY2UgKi9cbi8qKiBAdHlwZWRlZiB7aW1wb3J0KCcuL2NvcmUvc2VydmljZXMvcXVlc3Rpb25hbnN3ZXJzZXJ2aWNlJykuZGVmYXVsdH0gUXVlc3Rpb25BbnN3ZXJTZXJ2aWNlICovXG4vKiogQHR5cGVkZWYge2ltcG9ydCgnLi9jb3JlL3NlcnZpY2VzL2Vycm9ycmVwb3J0ZXJzZXJ2aWNlJykuZGVmYXVsdH0gRXJyb3JSZXBvcnRlclNlcnZpY2UgKi9cbi8qKiBAdHlwZWRlZiB7aW1wb3J0KCcuL2NvcmUvc2VydmljZXMvYW5hbHl0aWNzcmVwb3J0ZXJzZXJ2aWNlJykuZGVmYXVsdH0gQW5hbHl0aWNzUmVwb3J0ZXJTZXJ2aWNlICovXG5cbi8qKlxuICogQHR5cGVkZWYgU2VydmljZXNcbiAqIEBwcm9wZXJ0eSB7U2VhcmNoU2VydmljZX0gc2VhcmNoU2VydmljZVxuICogQHByb3BlcnR5IHtBdXRvQ29tcGxldGVTZXJ2aWNlfSBhdXRvQ29tcGxldGVTZXJ2aWNlXG4gKiBAcHJvcGVydHkge1F1ZXN0aW9uQW5zd2VyU2VydmljZX0gcXVlc3Rpb25BbnN3ZXJTZXJ2aWNlXG4gKiBAcHJvcGVydHkge0Vycm9yUmVwb3J0ZXJTZXJ2aWNlfSBlcnJvclJlcG9ydGVyU2VydmljZVxuICovXG5cbmNvbnN0IERFRkFVTFRTID0ge1xuICBsb2NhbGU6ICdlbidcbn07XG5cbi8qKlxuICogVGhlIG1haW4gQW5zd2VycyBpbnRlcmZhY2VcbiAqL1xuY2xhc3MgQW5zd2VycyB7XG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICBpZiAoIUFuc3dlcnMuc2V0SW5zdGFuY2UodGhpcykpIHtcbiAgICAgIHJldHVybiBBbnN3ZXJzLmdldEluc3RhbmNlKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSByZWZlcmVuY2UgdG8gdGhlIENvbXBvbmVudCBiYXNlIGNsYXNzIGZvciBjdXN0b21cbiAgICAgKiBjb21wb25lbnRzIHRvIGV4dGVuZFxuICAgICAqL1xuICAgIHRoaXMuQ29tcG9uZW50ID0gQ29tcG9uZW50O1xuXG4gICAgLyoqXG4gICAgICogQSByZWZlcmVuY2UgdG8gdGhlIEFuYWx5dGljc0V2ZW50IGJhc2UgY2xhc3MgZm9yIHJlcG9ydGluZ1xuICAgICAqIGN1c3RvbSBhbmFseXRpY3NcbiAgICAgKi9cbiAgICB0aGlzLkFuYWx5dGljc0V2ZW50ID0gQW5hbHl0aWNzRXZlbnQ7XG5cbiAgICAvKipcbiAgICAgKiBBIHJlZmVyZW5jZSBvZiB0aGUgcmVuZGVyZXIgdG8gdXNlIGZvciB0aGUgY29tcG9uZW50c1xuICAgICAqIFRoaXMgaXMgcHJvdmlkZWQgZHVyaW5nIGluaXRpYWxpemF0aW9uLlxuICAgICAqIEB0eXBlIHtSZW5kZXJlcn1cbiAgICAgKi9cbiAgICB0aGlzLnJlbmRlcmVyID0gbmV3IFJlbmRlcmVycy5IYW5kbGViYXJzKCk7XG5cbiAgICAvKipcbiAgICAgKiBBIHJlZmVyZW5jZSB0byB0aGUgZm9ybWF0UmljaFRleHQgZnVuY3Rpb24uXG4gICAgICogQHR5cGUge0Z1bmN0aW9ufVxuICAgICAqL1xuICAgIHRoaXMuZm9ybWF0UmljaFRleHQgPSAobWFya2Rvd24pID0+IHtcbiAgICAgIGlmICh0eXBlb2YgbWFya2Rvd24gIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRocm93IG5ldyBBbnN3ZXJzQ29yZUVycm9yKFxuICAgICAgICAgIGBSaWNoIHRleHQgXCIke21hcmtkb3dufVwiIG5lZWRzIHRvIGJlIGEgc3RyaW5nLiBDdXJyZW50bHkgaXMgYSAke3R5cGVvZiBtYXJrZG93bn1gXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICByZXR1cm4gUnRmQ29udmVydGVyLnRvSFRNTChtYXJrZG93bik7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEEgbG9jYWwgcmVmZXJlbmNlIHRvIHRoZSBjb21wb25lbnQgbWFuYWdlclxuICAgICAqIEB0eXBlIHtDb21wb25lbnRNYW5hZ2VyfVxuICAgICAqL1xuICAgIHRoaXMuY29tcG9uZW50cyA9IENvbXBvbmVudE1hbmFnZXIuZ2V0SW5zdGFuY2UoKTtcblxuICAgIC8qKlxuICAgICAqIEEgbG9jYWwgcmVmZXJlbmNlIHRvIHRoZSBjb3JlIGFwaVxuICAgICAqIEB0eXBlIHtDb3JlfVxuICAgICAqL1xuICAgIHRoaXMuY29yZSA9IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBBIGNhbGxiYWNrIGZ1bmN0aW9uIHRvIGludm9rZSBvbmNlIHRoZSBsaWJyYXJ5IGlzIHJlYWR5LlxuICAgICAqIFR5cGljYWxseSBmaXJlZCBhZnRlciB0ZW1wbGF0ZXMgYXJlIGZldGNoZWQgZnJvbSBzZXJ2ZXIgZm9yIHJlbmRlcmluZy5cbiAgICAgKi9cbiAgICB0aGlzLl9vblJlYWR5ID0gZnVuY3Rpb24gKCkge307XG5cbiAgICAvKipcbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuX2VsaWdpYmxlRm9yQW5hbHl0aWNzID0gZmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiBAdHlwZSB7U2VydmljZXN9XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLl9zZXJ2aWNlcyA9IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBAdHlwZSB7QW5hbHl0aWNzUmVwb3J0ZXJTZXJ2aWNlfVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5fYW5hbHl0aWNzUmVwb3J0ZXJTZXJ2aWNlID0gbnVsbDtcbiAgfVxuXG4gIHN0YXRpYyBzZXRJbnN0YW5jZSAoaW5zdGFuY2UpIHtcbiAgICBpZiAoIXRoaXMuaW5zdGFuY2UpIHtcbiAgICAgIHRoaXMuaW5zdGFuY2UgPSBpbnN0YW5jZTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBzdGF0aWMgZ2V0SW5zdGFuY2UgKCkge1xuICAgIHJldHVybiB0aGlzLmluc3RhbmNlO1xuICB9XG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIHRoZSBTREsgd2l0aCB0aGUgcHJvdmlkZWQgY29uZmlndXJhdGlvbi4gTm90ZSB0aGF0IGJlZm9yZSBvblJlYWR5XG4gICAqIGlzIGV2ZXIgY2FsbGVkLCBhIGNoZWNrIHRvIHRoZSByZWxldmFudCBBbnN3ZXJzIFN0YXR1cyBwYWdlIGlzIG1hZGUuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIEFuc3dlcnMgY29uZmlndXJhdGlvbi5cbiAgICogQHBhcmFtIHtPYmplY3R9IHN0YXR1c1BhZ2UgQW4gb3ZlcnJpZGUgZm9yIHRoZSBiYXNlVXJsIGFuZCBlbmRwb2ludCBvZiB0aGVcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwZXJpZW5jZSdzIEFuc3dlcnMgU3RhdHVzIHBhZ2UuXG4gICAqL1xuICBpbml0IChjb25maWcsIHN0YXR1c1BhZ2UpIHtcbiAgICBjb25zdCBwYXJzZWRDb25maWcgPSB0aGlzLnBhcnNlQ29uZmlnKGNvbmZpZyk7XG4gICAgdGhpcy52YWxpZGF0ZUNvbmZpZyhwYXJzZWRDb25maWcpO1xuXG4gICAgcGFyc2VkQ29uZmlnLnNlYXJjaCA9IG5ldyBTZWFyY2hDb25maWcocGFyc2VkQ29uZmlnLnNlYXJjaCk7XG4gICAgcGFyc2VkQ29uZmlnLnZlcnRpY2FsUGFnZXMgPSBuZXcgVmVydGljYWxQYWdlc0NvbmZpZyhwYXJzZWRDb25maWcudmVydGljYWxQYWdlcyk7XG5cbiAgICBjb25zdCBnbG9iYWxTdG9yYWdlID0gbmV3IEdsb2JhbFN0b3JhZ2UoKTtcbiAgICBjb25zdCBwZXJzaXN0ZW50U3RvcmFnZSA9IG5ldyBQZXJzaXN0ZW50U3RvcmFnZSh7XG4gICAgICB1cGRhdGVMaXN0ZW5lcjogcGFyc2VkQ29uZmlnLm9uU3RhdGVDaGFuZ2UsXG4gICAgICByZXNldExpc3RlbmVyOiBkYXRhID0+IGdsb2JhbFN0b3JhZ2Uuc2V0QWxsKGRhdGEpXG4gICAgfSk7XG4gICAgZ2xvYmFsU3RvcmFnZS5zZXRBbGwocGVyc2lzdGVudFN0b3JhZ2UuZ2V0QWxsKCkpO1xuICAgIGdsb2JhbFN0b3JhZ2Uuc2V0KFN0b3JhZ2VLZXlzLlNFQVJDSF9DT05GSUcsIHBhcnNlZENvbmZpZy5zZWFyY2gpO1xuICAgIGdsb2JhbFN0b3JhZ2Uuc2V0KFN0b3JhZ2VLZXlzLlZFUlRJQ0FMX1BBR0VTX0NPTkZJRywgcGFyc2VkQ29uZmlnLnZlcnRpY2FsUGFnZXMpO1xuICAgIGdsb2JhbFN0b3JhZ2Uuc2V0KFN0b3JhZ2VLZXlzLkxPQ0FMRSwgcGFyc2VkQ29uZmlnLmxvY2FsZSk7XG4gICAgZ2xvYmFsU3RvcmFnZS5zZXQoU3RvcmFnZUtleXMuU0VTU0lPTlNfT1BUX0lOLCBwYXJzZWRDb25maWcuc2Vzc2lvblRyYWNraW5nRW5hYmxlZCk7XG4gICAgcGFyc2VkQ29uZmlnLm5vUmVzdWx0cyAmJiBnbG9iYWxTdG9yYWdlLnNldChTdG9yYWdlS2V5cy5OT19SRVNVTFRTX0NPTkZJRywgcGFyc2VkQ29uZmlnLm5vUmVzdWx0cyk7XG5cbiAgICBjb25zdCBtYXN0ZXJTd2l0Y2hBcGkgPSBzdGF0dXNQYWdlXG4gICAgICA/IG5ldyBNYXN0ZXJTd2l0Y2hBcGkoeyBhcGlLZXk6IHBhcnNlZENvbmZpZy5hcGlLZXksIC4uLnN0YXR1c1BhZ2UgfSwgZ2xvYmFsU3RvcmFnZSlcbiAgICAgIDogTWFzdGVyU3dpdGNoQXBpLmZyb20ocGFyc2VkQ29uZmlnLmFwaUtleSwgcGFyc2VkQ29uZmlnLmV4cGVyaWVuY2VLZXksIGdsb2JhbFN0b3JhZ2UpO1xuXG4gICAgbWFzdGVyU3dpdGNoQXBpLmlzRGlzYWJsZWQocGFyc2VkQ29uZmlnLmFwaUtleSwgcGFyc2VkQ29uZmlnLmV4cGVyaWVuY2VLZXkpXG4gICAgICAudGhlbihpc0Rpc2FibGVkID0+ICFpc0Rpc2FibGVkICYmIHRoaXMuX2luaXRJbnRlcm5hbChwYXJzZWRDb25maWcsIGdsb2JhbFN0b3JhZ2UsIHBlcnNpc3RlbnRTdG9yYWdlKSlcbiAgICAgIC5jYXRjaCgoKSA9PiB0aGlzLl9pbml0SW50ZXJuYWwocGFyc2VkQ29uZmlnLCBnbG9iYWxTdG9yYWdlLCBwZXJzaXN0ZW50U3RvcmFnZSkpO1xuICB9XG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIHRoZSBBbmFseXRpY3NSZXBvcnRlciBhbmQgQ29yZS4gQWxzbyBpbnZva2VzIHRoZSBvblJlYWR5IGZ1bmN0aW9uXG4gICAqIHByb3ZpZGVkIGluIHRoZSBwYXJzZWQgY29uZmlndXJhdGlvbi5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IHBhcnNlZENvbmZpZyBUaGUgcGFyc2VkIEFuc3dlcnMgY29uZmlndXJhdGlvbi5cbiAgICogQHBhcmFtIHtHbG9iYWxTdG9yYWdlfSBnbG9iYWxTdG9yYWdlIFRoZSB7QGxpbmsgR2xvYmFsU3RvcmFnZX0gaW5zdGFuY2UuXG4gICAqIEBwYXJhbSB7UGVyc2lzdGVudFN0b3JhZ2V9IHBlcnNpc3RlbnRTdG9yYWdlIFRoZSB7QGxpbmsgUGVyc2lzdGVudFN0b3JhZ2V9IGluc3RhbmNlLlxuICAgKi9cbiAgX2luaXRJbnRlcm5hbCAocGFyc2VkQ29uZmlnLCBnbG9iYWxTdG9yYWdlLCBwZXJzaXN0ZW50U3RvcmFnZSkge1xuICAgIHRoaXMuX3NlcnZpY2VzID0gcGFyc2VkQ29uZmlnLm1vY2tcbiAgICAgID8gZ2V0TW9ja1NlcnZpY2VzKClcbiAgICAgIDogZ2V0U2VydmljZXMocGFyc2VkQ29uZmlnLCBnbG9iYWxTdG9yYWdlKTtcblxuICAgIHRoaXMuX2VsaWdpYmxlRm9yQW5hbHl0aWNzID0gcGFyc2VkQ29uZmlnLmJ1c2luZXNzSWQgIT0gbnVsbDtcbiAgICAvLyBUT0RPKGFtdWxsaW5ncyk6IEluaXRpYWxpemUgd2l0aCBvdGhlciBzZXJ2aWNlc1xuICAgIGlmICh0aGlzLl9lbGlnaWJsZUZvckFuYWx5dGljcyAmJiBwYXJzZWRDb25maWcubW9jaykge1xuICAgICAgdGhpcy5fYW5hbHl0aWNzUmVwb3J0ZXJTZXJ2aWNlID0gbmV3IE5vb3BBbmFseXRpY3NSZXBvcnRlcigpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5fZWxpZ2libGVGb3JBbmFseXRpY3MpIHtcbiAgICAgIHRoaXMuX2FuYWx5dGljc1JlcG9ydGVyU2VydmljZSA9IG5ldyBBbmFseXRpY3NSZXBvcnRlcihcbiAgICAgICAgcGFyc2VkQ29uZmlnLmV4cGVyaWVuY2VLZXksXG4gICAgICAgIHBhcnNlZENvbmZpZy5leHBlcmllbmNlVmVyc2lvbixcbiAgICAgICAgcGFyc2VkQ29uZmlnLmJ1c2luZXNzSWQsXG4gICAgICAgIHBhcnNlZENvbmZpZy5hbmFseXRpY3NPcHRpb25zLFxuICAgICAgICBwYXJzZWRDb25maWcuZW52aXJvbm1lbnQpO1xuXG4gICAgICAvLyBsaXN0ZW4gdG8gcXVlcnkgaWQgdXBkYXRlc1xuICAgICAgZ2xvYmFsU3RvcmFnZS5vbigndXBkYXRlJywgU3RvcmFnZUtleXMuUVVFUllfSUQsIGlkID0+XG4gICAgICAgIHRoaXMuX2FuYWx5dGljc1JlcG9ydGVyU2VydmljZS5zZXRRdWVyeUlkKGlkKVxuICAgICAgKTtcblxuICAgICAgdGhpcy5jb21wb25lbnRzLnNldEFuYWx5dGljc1JlcG9ydGVyKHRoaXMuX2FuYWx5dGljc1JlcG9ydGVyU2VydmljZSk7XG4gICAgICBpbml0U2Nyb2xsTGlzdGVuZXIodGhpcy5fYW5hbHl0aWNzUmVwb3J0ZXJTZXJ2aWNlKTtcbiAgICB9XG5cbiAgICB0aGlzLmNvcmUgPSBuZXcgQ29yZSh7XG4gICAgICBhcGlLZXk6IHBhcnNlZENvbmZpZy5hcGlLZXksXG4gICAgICBnbG9iYWxTdG9yYWdlOiBnbG9iYWxTdG9yYWdlLFxuICAgICAgcGVyc2lzdGVudFN0b3JhZ2U6IHBlcnNpc3RlbnRTdG9yYWdlLFxuICAgICAgZXhwZXJpZW5jZUtleTogcGFyc2VkQ29uZmlnLmV4cGVyaWVuY2VLZXksXG4gICAgICBmaWVsZEZvcm1hdHRlcnM6IHBhcnNlZENvbmZpZy5maWVsZEZvcm1hdHRlcnMsXG4gICAgICBleHBlcmllbmNlVmVyc2lvbjogcGFyc2VkQ29uZmlnLmV4cGVyaWVuY2VWZXJzaW9uLFxuICAgICAgbG9jYWxlOiBwYXJzZWRDb25maWcubG9jYWxlLFxuICAgICAgc2VhcmNoU2VydmljZTogdGhpcy5fc2VydmljZXMuc2VhcmNoU2VydmljZSxcbiAgICAgIGF1dG9Db21wbGV0ZVNlcnZpY2U6IHRoaXMuX3NlcnZpY2VzLmF1dG9Db21wbGV0ZVNlcnZpY2UsXG4gICAgICBxdWVzdGlvbkFuc3dlclNlcnZpY2U6IHRoaXMuX3NlcnZpY2VzLnF1ZXN0aW9uQW5zd2VyU2VydmljZSxcbiAgICAgIGFuYWx5dGljc1JlcG9ydGVyOiB0aGlzLl9hbmFseXRpY3NSZXBvcnRlclNlcnZpY2UsXG4gICAgICBvblZlcnRpY2FsU2VhcmNoOiBwYXJzZWRDb25maWcub25WZXJ0aWNhbFNlYXJjaCxcbiAgICAgIG9uVW5pdmVyc2FsU2VhcmNoOiBwYXJzZWRDb25maWcub25Vbml2ZXJzYWxTZWFyY2hcbiAgICB9KTtcblxuICAgIGlmIChwYXJzZWRDb25maWcub25TdGF0ZUNoYW5nZSAmJiB0eXBlb2YgcGFyc2VkQ29uZmlnLm9uU3RhdGVDaGFuZ2UgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHBhcnNlZENvbmZpZy5vblN0YXRlQ2hhbmdlKHBlcnNpc3RlbnRTdG9yYWdlLmdldEFsbCgpLCB3aW5kb3cubG9jYXRpb24uc2VhcmNoLnN1YnN0cigxKSk7XG4gICAgfVxuXG4gICAgdGhpcy5jb21wb25lbnRzXG4gICAgICAuc2V0Q29yZSh0aGlzLmNvcmUpXG4gICAgICAuc2V0UmVuZGVyZXIodGhpcy5yZW5kZXJlcik7XG5cbiAgICB0aGlzLl9zZXREZWZhdWx0SW5pdGlhbFNlYXJjaChwYXJzZWRDb25maWcuc2VhcmNoKTtcblxuICAgIHRoaXMuX29uUmVhZHkgPSBwYXJzZWRDb25maWcub25SZWFkeSB8fCBmdW5jdGlvbiAoKSB7fTtcblxuICAgIGlmIChwYXJzZWRDb25maWcudXNlVGVtcGxhdGVzID09PSBmYWxzZSB8fCBwYXJzZWRDb25maWcudGVtcGxhdGVCdW5kbGUpIHtcbiAgICAgIGlmIChwYXJzZWRDb25maWcudGVtcGxhdGVCdW5kbGUpIHtcbiAgICAgICAgdGhpcy5yZW5kZXJlci5pbml0KHBhcnNlZENvbmZpZy50ZW1wbGF0ZUJ1bmRsZSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2hhbmRsZVBvbnlmaWxsQ3NzVmFyaWFibGVzKHBhcnNlZENvbmZpZy5kaXNhYmxlQ3NzVmFyaWFibGVzUG9ueWZpbGwsIHRoaXMuX29uUmVhZHkuYmluZCh0aGlzKSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBUZW1wbGF0ZXMgYXJlIGN1cnJlbnRseSBkb3dubG9hZGVkIHNlcGFyYXRlbHkgZnJvbSB0aGUgQ09SRSBhbmQgVUkgYnVuZGxlLlxuICAgIC8vIEZ1dHVyZSBlbmhhbmNlbWVudCBpcyB0byBzaGlwIHRoZSBjb21wb25lbnRzIHdpdGggdGVtcGxhdGVzIGluIGEgc2VwYXJhdGUgYnVuZGxlLlxuICAgIHRoaXMudGVtcGxhdGVzID0gbmV3IERlZmF1bHRUZW1wbGF0ZXNMb2FkZXIodGVtcGxhdGVzID0+IHtcbiAgICAgIHRoaXMucmVuZGVyZXIuaW5pdCh0ZW1wbGF0ZXMpO1xuICAgICAgdGhpcy5faGFuZGxlUG9ueWZpbGxDc3NWYXJpYWJsZXMocGFyc2VkQ29uZmlnLmRpc2FibGVDc3NWYXJpYWJsZXNQb255ZmlsbCwgdGhpcy5fb25SZWFkeS5iaW5kKHRoaXMpKTtcbiAgICB9KTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGxzIHRoZSBDU1MgdmFycyBwb255ZmlsbCwgaWYgb3B0ZWQtaW4sIGFuZCBpbnZva2VzIHRoZSBjYWxsYmFja1xuICAgKiByZWdhcmRsZXNzIG9mIGlmIHRoZXJlIHdhcyBhbiBlcnJvci9zdWNjZXNzLiBJZiBvcHRlZC1vdXQsIG9ubHkgaW52b2tlcyB0aGUgY2FsbGJhY2suXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gb3B0aW9uIHRvIG9wdCBvdXQgb2YgdGhlIGNzcyB2YXJpYWJsZXMgcG9ueWZpbGxcbiAgICogQHBhcmFtIGNhbGxiYWNrIHtGdW5jdGlvbn0gYWx3YXlzIGNhbGxlZCBhZnRlciBmdW5jdGlvblxuICAgKi9cbiAgX2hhbmRsZVBvbnlmaWxsQ3NzVmFyaWFibGVzIChwb255ZmlsbERpc2FibGVkLCBjYWxsYmFjaykge1xuICAgIGlmICghcG9ueWZpbGxEaXNhYmxlZCkge1xuICAgICAgdGhpcy5wb255ZmlsbENzc1ZhcmlhYmxlcyh7XG4gICAgICAgIG9uRmluYWxseTogKCkgPT4ge1xuICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBjYWxsYmFjaygpO1xuICAgIH1cbiAgfVxuXG4gIGRvbVJlYWR5IChjYikge1xuICAgIERPTS5vblJlYWR5KGNiKTtcbiAgfVxuXG4gIG9uUmVhZHkgKGNiKSB7XG4gICAgdGhpcy5fb25SZWFkeSA9IGNiO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIFBhcnNlcyB0aGUgY29uZmlnIHByb3ZpZGVkIGJ5IHRoZSB1c2VyLiBJbiB0aGUgcGFyc2VkIGNvbmZpZywgYW55IG9wdGlvbnMgbm90IHN1cHBsaWVkIGJ5IHRoZVxuICAgKiB1c2VyIGFyZSBnaXZlbiBkZWZhdWx0IHZhbHVlcy5cbiAgICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgdXNlciBzdXBwbGllZCBjb25maWcuXG4gICAqL1xuICBwYXJzZUNvbmZpZyAoY29uZmlnKSB7XG4gICAgY29uc3QgcGFyc2VkQ29uZmlnID0gT2JqZWN0LmFzc2lnbih7fSwgREVGQVVMVFMsIGNvbmZpZyk7XG4gICAgbGV0IHNlc3Npb25UcmFja2luZ0VuYWJsZWQgPSB0cnVlO1xuICAgIGlmICh0eXBlb2YgY29uZmlnLnNlc3Npb25UcmFja2luZ0VuYWJsZWQgPT09ICdib29sZWFuJykge1xuICAgICAgc2Vzc2lvblRyYWNraW5nRW5hYmxlZCA9IGNvbmZpZy5zZXNzaW9uVHJhY2tpbmdFbmFibGVkO1xuICAgIH1cbiAgICBwYXJzZWRDb25maWcuc2Vzc2lvblRyYWNraW5nRW5hYmxlZCA9IHNlc3Npb25UcmFja2luZ0VuYWJsZWQ7XG5cbiAgICBjb25zdCBzYW5kYm94UHJlZml4ID0gYCR7U0FOREJPWH0tYDtcbiAgICBwYXJzZWRDb25maWcuYXBpS2V5LmluY2x1ZGVzKHNhbmRib3hQcmVmaXgpXG4gICAgICA/IHBhcnNlZENvbmZpZy5lbnZpcm9ubWVudCA9IFNBTkRCT1hcbiAgICAgIDogcGFyc2VkQ29uZmlnLmVudmlyb25tZW50ID0gUFJPRFVDVElPTjtcbiAgICBwYXJzZWRDb25maWcuYXBpS2V5ID0gcGFyc2VkQ29uZmlnLmFwaUtleS5yZXBsYWNlKHNhbmRib3hQcmVmaXgsICcnKTtcblxuICAgIHJldHVybiBwYXJzZWRDb25maWc7XG4gIH1cblxuICAvKipcbiAgICogVmFsaWRhdGVzIHRoZSBBbnN3ZXJzIGNvbmZpZyBvYmplY3QgdG8gZW5zdXJlIHRoaW5ncyBsaWtlIGFwaSBrZXkgYW5kIGV4cGVyaWVuY2Uga2V5IGFyZVxuICAgKiBwcm9wZXJseSBzZXQuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIEFuc3dlcnMgY29uZmlnLlxuICAgKi9cbiAgdmFsaWRhdGVDb25maWcgKGNvbmZpZykge1xuICAgIC8vIFRPRE8gKHRtZXllcik6IEV4dHJhY3QgdGhpcyBtZXRob2QgaW50byBpdCdzIG93biBjbGFzcy4gSW52ZXN0aWdhdGUgdGhlIHVzZSBvZiBKU09OIHNjaGVtYVxuICAgIC8vIHRvIHZhbGlkYXRlIHRoZXNlIGNvbmZpZ3MuXG4gICAgaWYgKHR5cGVvZiBjb25maWcuYXBpS2V5ICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdNaXNzaW5nIHJlcXVpcmVkIGBhcGlLZXlgLiBUeXBlIG11c3QgYmUge3N0cmluZ30nKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGNvbmZpZy5leHBlcmllbmNlS2V5ICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdNaXNzaW5nIHJlcXVpcmVkIGBleHBlcmllbmNlS2V5YC4gVHlwZSBtdXN0IGJlIHtzdHJpbmd9Jyk7XG4gICAgfVxuXG4gICAgaWYgKGNvbmZpZy5vblZlcnRpY2FsU2VhcmNoICYmIHR5cGVvZiBjb25maWcub25WZXJ0aWNhbFNlYXJjaCAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdvblZlcnRpY2FsU2VhcmNoIG11c3QgYmUgYSBmdW5jdGlvbi4gQ3VycmVudCB0eXBlIGlzOiAnICsgdHlwZW9mIGNvbmZpZy5vblZlcnRpY2FsU2VhcmNoKTtcbiAgICB9XG5cbiAgICBpZiAoY29uZmlnLm9uVW5pdmVyc2FsU2VhcmNoICYmIHR5cGVvZiBjb25maWcub25Vbml2ZXJzYWxTZWFyY2ggIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignb25Vbml2ZXJzYWxTZWFyY2ggbXVzdCBiZSBhIGZ1bmN0aW9uLiBDdXJyZW50IHR5cGUgaXM6ICcgKyB0eXBlb2YgY29uZmlnLm9uVW5pdmVyc2FsU2VhcmNoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmVnaXN0ZXIgYSBjdXN0b20gY29tcG9uZW50IHR5cGUgc28gaXQgY2FuIGJlIGNyZWF0ZWQgdmlhXG4gICAqIGFkZENvbXBvbmVudCBhbmQgdXNlZCBhcyBhIGNoaWxkIGNvbXBvbmVudFxuICAgKiBAcGFyYW0ge0NvbXBvbmVudH0gY29tcG9uZW50Q2xhc3NcbiAgICovXG4gIHJlZ2lzdGVyQ29tcG9uZW50VHlwZSAoY29tcG9uZW50Q2xhc3MpIHtcbiAgICB0aGlzLmNvbXBvbmVudHMucmVnaXN0ZXIoY29tcG9uZW50Q2xhc3MpO1xuICB9XG5cbiAgYWRkQ29tcG9uZW50ICh0eXBlLCBvcHRzKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSAnc3RyaW5nJykge1xuICAgICAgb3B0cyA9IHtcbiAgICAgICAgY29udGFpbmVyOiBvcHRzXG4gICAgICB9O1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICB0aGlzLmNvbXBvbmVudHMuY3JlYXRlKHR5cGUsIG9wdHMpLm1vdW50KCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgdGhyb3cgbmV3IEFuc3dlcnNDb21wb25lbnRFcnJvcignRmFpbGVkIHRvIGFkZCBjb21wb25lbnQnLCB0eXBlLCBlKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlIHRoZSBjb21wb25lbnQgLSBhbmQgYWxsIG9mIGl0cyBjaGlsZHJlbiAtIHdpdGggdGhlIGdpdmVuIG5hbWVcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgVGhlIG5hbWUgb2YgdGhlIGNvbXBvbmVudCB0byByZW1vdmVcbiAgICovXG4gIHJlbW92ZUNvbXBvbmVudCAobmFtZSkge1xuICAgIHRoaXMuY29tcG9uZW50cy5yZW1vdmVCeU5hbWUobmFtZSk7XG4gIH1cblxuICBjcmVhdGVDb21wb25lbnQgKG9wdHMpIHtcbiAgICByZXR1cm4gdGhpcy5jb21wb25lbnRzLmNyZWF0ZSgnQ29tcG9uZW50Jywgb3B0cykubW91bnQoKTtcbiAgfVxuXG4gIHJlZ2lzdGVySGVscGVyIChuYW1lLCBjYikge1xuICAgIHRoaXMucmVuZGVyZXIucmVnaXN0ZXJIZWxwZXIobmFtZSwgY2IpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIE9wdCBpbiBvciBvdXQgb2YgY29udmVydGlvbiB0cmFja2luZyBhbmFseXRpY3NcbiAgICogQHBhcmFtIHtib29sZWFufSBvcHRJblxuICAgKi9cbiAgc2V0Q29udmVyc2lvbnNPcHRJbiAob3B0SW4pIHtcbiAgICBpZiAodGhpcy5fZWxpZ2libGVGb3JBbmFseXRpY3MpIHtcbiAgICAgIHRoaXMuX2FuYWx5dGljc1JlcG9ydGVyU2VydmljZS5zZXRDb252ZXJzaW9uVHJhY2tpbmdFbmFibGVkKG9wdEluKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogT3B0IGluIG9yIG91dCBvZiBzZXNzaW9uIGNvb2tpZXNcbiAgICogQHBhcmFtIHtib29sZWFufSBvcHRJblxuICAgKi9cbiAgc2V0U2Vzc2lvbnNPcHRJbiAob3B0SW4pIHtcbiAgICB0aGlzLmNvcmUuZ2xvYmFsU3RvcmFnZS5zZXQoU3RvcmFnZUtleXMuU0VTU0lPTlNfT1BUX0lOLCBvcHRJbik7XG4gIH1cblxuICAvKipcbiAgICogU2V0cyBhIHNlYXJjaCBxdWVyeSBvbiBpbml0aWFsaXphdGlvbiBmb3IgdmVydGljYWwgc2VhcmNoZXJzIHRoYXQgaGF2ZSBhXG4gICAqIGRlZmF1bHRJbml0aWFsU2VhcmNoIHByb3ZpZGVkLCBpZiB0aGUgdXNlciBoYXNuJ3QgYWxyZWFkeSBwcm92aWRlZCB0aGVpclxuICAgKiBvd24gdmlhIFVSTCBwYXJhbS5cbiAgICogQHBhcmFtIHtTZWFyY2hDb25maWd9IHNlYXJjaENvbmZpZ1xuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3NldERlZmF1bHRJbml0aWFsU2VhcmNoIChzZWFyY2hDb25maWcpIHtcbiAgICBpZiAoc2VhcmNoQ29uZmlnLmRlZmF1bHRJbml0aWFsU2VhcmNoID09IG51bGwgfHwgIXNlYXJjaENvbmZpZy52ZXJ0aWNhbEtleSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBwcmVwb3B1bGF0ZWRRdWVyeSA9IHRoaXMuY29yZS5nbG9iYWxTdG9yYWdlLmdldFN0YXRlKFN0b3JhZ2VLZXlzLlFVRVJZKTtcbiAgICBpZiAocHJlcG9wdWxhdGVkUXVlcnkgIT0gbnVsbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLmNvcmUuZ2xvYmFsU3RvcmFnZS5zZXQoJ3F1ZXJ5VHJpZ2dlcicsICdpbml0aWFsaXplJyk7XG4gICAgdGhpcy5jb3JlLnNldFF1ZXJ5KHNlYXJjaENvbmZpZy5kZWZhdWx0SW5pdGlhbFNlYXJjaCk7XG4gIH1cblxuICAvKlxuICAgKiBVcGRhdGVzIHRoZSBjc3Mgc3R5bGVzIHdpdGggbmV3IGN1cnJlbnQgdmFyaWFibGVzLiBUaGlzIGlzIHVzZWZ1bCB3aGVuIHRoZSBjc3NcbiAgICogdmFyaWFibGVzIGFyZSB1cGRhdGVkIGR5bmFtaWNhbGx5IChlLmcuIHRocm91Z2gganMpIG9yIGlmIHRoZSBjc3MgdmFyaWFibGVzIGFyZVxuICAgKiBhZGRlZCBhZnRlciB0aGUgQU5TV0VSUy5pbml0XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgQWRkaXRpb25hbCBjb25maWcgdG8gcGFzcyB0byB0aGUgcG9ueWZpbGxcbiAgICovXG4gIHBvbnlmaWxsQ3NzVmFyaWFibGVzIChjb25maWcgPSB7fSkge1xuICAgIGNzc1ZhcnMoe1xuICAgICAgb25seUxlZ2FjeTogdHJ1ZSxcbiAgICAgIG9uRXJyb3I6IGNvbmZpZy5vbkVycm9yIHx8IGZ1bmN0aW9uICgpIHt9LFxuICAgICAgb25TdWNjZXNzOiBjb25maWcub25TdWNjZXNzIHx8IGZ1bmN0aW9uICgpIHt9LFxuICAgICAgb25GaW5hbGx5OiBjb25maWcub25GaW5hbGx5IHx8IGZ1bmN0aW9uICgpIHt9XG4gICAgfSk7XG4gIH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnXG4gKiBAcGFyYW0ge0dsb2JhbFN0b3JhZ2V9IGdsb2JhbFN0b3JhZ2VcbiAqIEByZXR1cm5zIHtTZXJ2aWNlc31cbiAqL1xuZnVuY3Rpb24gZ2V0U2VydmljZXMgKGNvbmZpZywgZ2xvYmFsU3RvcmFnZSkge1xuICByZXR1cm4ge1xuICAgIHNlYXJjaFNlcnZpY2U6IG5ldyBTZWFyY2hBcGkoe1xuICAgICAgYXBpS2V5OiBjb25maWcuYXBpS2V5LFxuICAgICAgZXhwZXJpZW5jZUtleTogY29uZmlnLmV4cGVyaWVuY2VLZXksXG4gICAgICBleHBlcmllbmNlVmVyc2lvbjogY29uZmlnLmV4cGVyaWVuY2VWZXJzaW9uLFxuICAgICAgbG9jYWxlOiBjb25maWcubG9jYWxlLFxuICAgICAgZW52aXJvbm1lbnQ6IGNvbmZpZy5lbnZpcm9ubWVudFxuICAgIH0pLFxuICAgIGF1dG9Db21wbGV0ZVNlcnZpY2U6IG5ldyBBdXRvQ29tcGxldGVBcGkoXG4gICAgICB7XG4gICAgICAgIGFwaUtleTogY29uZmlnLmFwaUtleSxcbiAgICAgICAgZXhwZXJpZW5jZUtleTogY29uZmlnLmV4cGVyaWVuY2VLZXksXG4gICAgICAgIGV4cGVyaWVuY2VWZXJzaW9uOiBjb25maWcuZXhwZXJpZW5jZVZlcnNpb24sXG4gICAgICAgIGxvY2FsZTogY29uZmlnLmxvY2FsZSxcbiAgICAgICAgZW52aXJvbm1lbnQ6IGNvbmZpZy5lbnZpcm9ubWVudFxuICAgICAgfSxcbiAgICAgIGdsb2JhbFN0b3JhZ2UpLFxuICAgIHF1ZXN0aW9uQW5zd2VyU2VydmljZTogbmV3IFF1ZXN0aW9uQW5zd2VyQXBpKFxuICAgICAgeyBhcGlLZXk6IGNvbmZpZy5hcGlLZXksIGVudmlyb25tZW50OiBjb25maWcuZW52aXJvbm1lbnQgfSxcbiAgICAgIGdsb2JhbFN0b3JhZ2UpLFxuICAgIGVycm9yUmVwb3J0ZXJTZXJ2aWNlOiBuZXcgRXJyb3JSZXBvcnRlcihcbiAgICAgIHtcbiAgICAgICAgYXBpS2V5OiBjb25maWcuYXBpS2V5LFxuICAgICAgICBleHBlcmllbmNlS2V5OiBjb25maWcuZXhwZXJpZW5jZUtleSxcbiAgICAgICAgZXhwZXJpZW5jZVZlcnNpb246IGNvbmZpZy5leHBlcmllbmNlVmVyc2lvbixcbiAgICAgICAgcHJpbnRWZXJib3NlOiBjb25maWcuZGVidWcsXG4gICAgICAgIHNlbmRUb1NlcnZlcjogIWNvbmZpZy5zdXBwcmVzc0Vycm9yUmVwb3J0cyxcbiAgICAgICAgZW52aXJvbm1lbnQ6IGNvbmZpZy5lbnZpcm9ubWVudFxuICAgICAgfSxcbiAgICAgIGdsb2JhbFN0b3JhZ2UpXG4gIH07XG59XG5cbi8qKlxuICogQHJldHVybnMge1NlcnZpY2VzfVxuICovXG5mdW5jdGlvbiBnZXRNb2NrU2VydmljZXMgKCkge1xuICByZXR1cm4ge1xuICAgIHNlYXJjaFNlcnZpY2U6IG5ldyBNb2NrU2VhcmNoU2VydmljZSgpLFxuICAgIGF1dG9Db21wbGV0ZVNlcnZpY2U6IG5ldyBNb2NrQXV0b0NvbXBsZXRlU2VydmljZSgpLFxuICAgIHF1ZXN0aW9uQW5zd2VyU2VydmljZTogbmV3IE1vY2tRdWVzdGlvbkFuc3dlclNlcnZpY2UoKSxcbiAgICBlcnJvclJlcG9ydGVyU2VydmljZTogbmV3IENvbnNvbGVFcnJvclJlcG9ydGVyKClcbiAgfTtcbn1cblxuLyoqXG4gKiBJbml0aWFsaXplIHRoZSBzY3JvbGwgZXZlbnQgbGlzdGVuZXIgdG8gc2VuZCBhbmFseXRpY3MgZXZlbnRzXG4gKiB3aGVuIHRoZSB1c2VyIHNjcm9sbHMgdG8gdGhlIGJvdHRvbS4gRGVib3VuY2VzIHNjcm9sbCBldmVudHMgc29cbiAqIHRoZXkgYXJlIHByb2Nlc3NlZCBhZnRlciB0aGUgdXNlciBzdG9wcyBzY3JvbGxpbmdcbiAqL1xuZnVuY3Rpb24gaW5pdFNjcm9sbExpc3RlbmVyIChyZXBvcnRlcikge1xuICBjb25zdCBERUJPVU5DRV9USU1FID0gMTAwO1xuICBsZXQgdGltZW91dCA9IG51bGw7XG5cbiAgY29uc3Qgc2VuZEV2ZW50ID0gKCkgPT4ge1xuICAgIGlmICgod2luZG93LmlubmVySGVpZ2h0ICsgd2luZG93LnBhZ2VZT2Zmc2V0KSA+PSBkb2N1bWVudC5ib2R5LnNjcm9sbEhlaWdodCkge1xuICAgICAgY29uc3QgZXZlbnQgPSBuZXcgQW5hbHl0aWNzRXZlbnQoJ1NDUk9MTF9UT19CT1RUT01fT0ZfUEFHRScpO1xuICAgICAgaWYgKHJlcG9ydGVyLmdldFF1ZXJ5SWQoKSkge1xuICAgICAgICByZXBvcnRlci5yZXBvcnQoZXZlbnQpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCAoKSA9PiB7XG4gICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KHNlbmRFdmVudCwgREVCT1VOQ0VfVElNRSk7XG4gIH0pO1xufVxuXG5jb25zdCBBTlNXRVJTID0gbmV3IEFuc3dlcnMoKTtcbmV4cG9ydCBkZWZhdWx0IEFOU1dFUlM7XG4iXSwibmFtZXMiOlsiUFJFX1NFQVJDSCIsIlNFQVJDSF9MT0FESU5HIiwiU0VBUkNIX0NPTVBMRVRFIiwiUmVzdWx0IiwiZGF0YSIsIl9yYXciLCJyYXciLCJfZm9ybWF0dGVkIiwiZm9ybWF0dGVkIiwiX2hpZ2hsaWdodGVkIiwiaGlnaGxpZ2h0ZWQiLCJvcmRpbmFsIiwidGl0bGUiLCJkZXRhaWxzIiwibGluayIsImlkIiwic3VidGl0bGUiLCJtb2RpZmllciIsImJpZ0RhdGUiLCJpbWFnZSIsImNhbGxzVG9BY3Rpb24iLCJjb2xsYXBzZWQiLCJ1bmRlZmluZWQiLCJkaXN0YW5jZSIsIkhpZ2hsaWdodGVkVmFsdWUiLCJ2YWx1ZSIsInNob3J0VmFsdWUiLCJtYXRjaGVkU3Vic3RyaW5ncyIsIl9zb3J0TWF0Y2hlZFN1YnN0cmluZ3MiLCJidWlsZEhpZ2hsaWdodGVkVmFsdWUiLCJpbnZlcnRlZFN1YnN0cmluZ3MiLCJfZ2V0SW52ZXJ0ZWRTdWJzdHJpbmdzIiwibGVuZ3RoIiwidmFsIiwiaGlnaGxpZ2h0ZWRTdWJzdHJpbmdzIiwiaGlnaGxpZ2h0ZWRWYWx1ZSIsIm5leHRTdGFydCIsImoiLCJzdGFydCIsIk51bWJlciIsIm9mZnNldCIsImVuZCIsInNsaWNlIiwiam9pbiIsInNvcnQiLCJhIiwiYiIsInZhbHVlTGVuZ3RoIiwiaSIsInN1YnN0cmluZyIsIm5leHRPZmZzZXQiLCJwdXNoIiwiQW5zd2Vyc0Jhc2VFcnJvciIsImVycm9yQ29kZSIsIm1lc3NhZ2UiLCJib3VuZGFyeSIsImNhdXNlZEJ5IiwiZXJyb3JNZXNzYWdlIiwicmVwb3J0ZWQiLCJmcm9tIiwic3RhY2siLCJKU09OIiwic3RyaW5naWZ5Iiwic3RyaW5nIiwidG9TdHJpbmciLCJidWlsdGluRXJyb3IiLCJlcnJvciIsIkFuc3dlcnNCYXNpY0Vycm9yIiwiRXJyb3IiLCJBbnN3ZXJzQ29uZmlnRXJyb3IiLCJBbnN3ZXJzQ29tcG9uZW50RXJyb3IiLCJjb21wb25lbnQiLCJBbnN3ZXJzRW5kcG9pbnRFcnJvciIsIkFuc3dlcnNDb3JlRXJyb3IiLCJBbnN3ZXJzU3RvcmFnZUVycm9yIiwic3RvcmFnZUtleSIsIkFuc3dlcnNBbmFseXRpY3NFcnJvciIsImV2ZW50IiwiUmVzdWx0RmFjdG9yeSIsInJlc3VsdHNEYXRhIiwiZm9ybWF0dGVycyIsInZlcnRpY2FsSWQiLCJzb3VyY2UiLCJyZXN1bHRzIiwiZnJvbUdvb2dsZUN1c3RvbVNlYXJjaEVuZ2luZSIsImZyb21CaW5nQ3VzdG9tU2VhcmNoRW5naW5lIiwiZnJvbVplbmRlc2tTZWFyY2hFbmdpbmUiLCJmcm9tQWxnb2xpYVNlYXJjaEVuZ2luZSIsImhpZ2hsaWdodGVkRmllbGRzIiwiZnJvbUtub3dsZWRnZU1hbmFnZXIiLCJmcm9tR2VuZXJpYyIsImVudGl0eVByb2ZpbGVEYXRhIiwiaGlnaGxpZ2h0ZWRFbnRpdHlQcm9maWxlRGF0YSIsIk9iamVjdCIsImtleXMiLCJmb3JtYXR0ZWREYXRhIiwiZW50cmllcyIsImZvckVhY2giLCJmaWVsZE5hbWUiLCJmaWVsZFZhbCIsImhpZ2hsaWdodGVkRmllbGRWYWwiLCJlbnRpdHlGaWVsZFZhbHVlIiwiaGlnaGxpZ2h0ZWRFbnRpdHlGaWVsZFZhbHVlIiwiaXNEaXJlY3RBbnN3ZXIiLCJoaWdobGlnaHRlZERhdGEiLCJoaWdobGlnaHRlZEZpZWxkTmFtZSIsImhpZ2hsaWdodGVkRmllbGQiLCJjb21wdXRlSGlnaGxpZ2h0ZWREYXRhIiwiaGlnaGxpZ2h0ZWREYXRhVmFsdWUiLCJpbmRleCIsIm5hbWUiLCJ0cnVuY2F0ZSIsImRlc2NyaXB0aW9uIiwid2Vic2l0ZSIsImZvcm1hdHRlZEVudGl0eVByb2ZpbGVEYXRhIiwiY29tcHV0ZUZvcm1hdHRlZERhdGEiLCJyZXN1bHREZXRhaWxzIiwiaHRtbFRpdGxlIiwicmVwbGFjZSIsImh0bWxTbmlwcGV0Iiwic25pcHBldCIsInVybCIsImh0bWxfdXJsIiwib2JqZWN0SUQiLCJzdHIiLCJsaW1pdCIsInRyYWlsaW5nIiwic2VwIiwid29yZHMiLCJzcGxpdCIsIm1heCIsInRydW5jYXRlZCIsIndvcmQiLCJTZWN0aW9uIiwic2VhcmNoU3RhdGUiLCJTZWFyY2hTdGF0ZXMiLCJ2ZXJ0aWNhbENvbmZpZ0lkIiwicmVzdWx0c0NvdW50IiwiZW5jb2RlZFN0YXRlIiwiYXBwbGllZFF1ZXJ5RmlsdGVycyIsIkFwcGxpZWRRdWVyeUZpbHRlciIsImZhY2V0cyIsIm1hcCIsInBhcnNlTWFwIiwidmVydGljYWxVUkwiLCJyZXN1bHRzQ29udGV4dCIsIm1hcE1hcmtlcnMiLCJjZW50ZXJDb29yZGluYXRlcyIsInJlc3VsdCIsInlleHREaXNwbGF5Q29vcmRpbmF0ZSIsImxhdGl0dWRlIiwibG9uZ2l0dWRlIiwiaXRlbSIsImxhYmVsIiwibW9kdWxlcyIsInVybHMiLCJzZWN0aW9ucyIsIkFycmF5IiwiaXNBcnJheSIsImFwcGxpZWRRdWVyeUZpbHRlciIsImtleSIsImRpc3BsYXlLZXkiLCJkaXNwbGF5VmFsdWUiLCJmaWx0ZXJzIiwiVW5pdmVyc2FsUmVzdWx0cyIsInF1ZXJ5SWQiLCJyZXNwb25zZSIsIkRpcmVjdEFuc3dlciIsImRpcmVjdEFuc3dlciIsImFzc2lnbiIsImZyZWV6ZSIsImFuc3dlciIsInJlbGF0ZWRJdGVtIiwiZmllbGRBcGlOYW1lIiwiZmllbGRWYWx1ZXMiLCJOYXZpZ2F0aW9uIiwidGFiT3JkZXIiLCJuYXYiLCJWZXJ0aWNhbFJlc3VsdHMiLCJtZXJnZWQiLCJjb25jYXQiLCJ2ZXJ0aWNhbEtleSIsIlNwZWxsQ2hlY2siLCJxdWVyeSIsImNvcnJlY3RlZFF1ZXJ5IiwidHlwZSIsInNob3VsZFNob3ciLCJvcmlnaW5hbFF1ZXJ5IiwiTkFWSUdBVElPTiIsIlVOSVZFUlNBTF9SRVNVTFRTIiwiVkVSVElDQUxfUkVTVUxUUyIsIkFMVEVSTkFUSVZFX1ZFUlRJQ0FMUyIsIkFVVE9DT01QTEVURSIsIkRJUkVDVF9BTlNXRVIiLCJGSUxURVIiLCJRVUVSWSIsIlFVRVJZX0lEIiwiRkFDRVRfRklMVEVSIiwiRFlOQU1JQ19GSUxURVJTIiwiUEFSQU1TIiwiR0VPTE9DQVRJT04iLCJJTlRFTlRTIiwiUVVFU1RJT05fU1VCTUlTU0lPTiIsIlNFQVJDSF9DT05GSUciLCJTRUFSQ0hfT0ZGU0VUIiwiU1BFTExfQ0hFQ0siLCJMT0NBVElPTl9CSUFTIiwiU0VTU0lPTlNfT1BUX0lOIiwiVkVSVElDQUxfUEFHRVNfQ09ORklHIiwiTE9DQUxFIiwiU09SVF9CWVMiLCJOT19SRVNVTFRTX0NPTkZJRyIsIkR5bmFtaWNGaWx0ZXJzIiwiZHluYW1pY0ZpbHRlcnMiLCJmIiwiZmllbGRJZCIsIm9wdGlvbnMiLCJvIiwiY291bnRMYWJlbCIsInNlbGVjdGVkIiwiZmlsdGVyIiwiU2VhcmNoSW50ZW50cyIsImludGVudHMiLCJuZWFyTWUiLCJpbmNsdWRlcyIsIkxvY2F0aW9uQmlhcyIsImFjY3VyYWN5IiwibG9jYXRpb25EaXNwbGF5TmFtZSIsIkFsdGVybmF0aXZlVmVydGljYWxzIiwiYWx0ZXJuYXRpdmVWZXJ0aWNhbHMiLCJOT1JNQUwiLCJOT19SRVNVTFRTIiwiU2VhcmNoRGF0YVRyYW5zZm9ybWVyIiwiU3RvcmFnZUtleXMiLCJzZWFyY2hJbnRlbnRzIiwic3BlbGxDaGVjayIsImxvY2F0aW9uQmlhcyIsIl9wYXJzZVZlcnRpY2FsUmVzcG9uc2UiLCJoYXNSZXN1bHRzIiwiUmVzdWx0c0NvbnRleHQiLCJhbGxSZXN1bHRzRm9yVmVydGljYWwiLCJRdWVzdGlvblN1Ym1pc3Npb24iLCJxdWVzdGlvbiIsImVycm9ycyIsImVtYWlsIiwicHJpdmFjeVBvbGljeSIsInF1ZXN0aW9uVGV4dCIsInF1ZXN0aW9uRGVzY3JpcHRpb24iLCJxdWVzdGlvbkV4cGFuZGVkIiwiZXhwYW5kZWQiLCJxdWVzdGlvblN1Ym1pdHRlZCIsInN1Ym1pdHRlZCIsIkZpbHRlciIsInJlc3BvbnNlRmlsdGVyIiwicGFyc2UiLCJncm91cHMiLCJncm91cEZpbHRlcnMiLCJmaWVsZCIsIm9yIiwiYW5kIiwiX2Zyb21NYXRjaGVyIiwibWluIiwibGF0IiwibG5nIiwicmFkaXVzIiwibWF0Y2hlciIsIkFuYWx5dGljc0V2ZW50IiwiZXZlbnRUeXBlIiwidG9VcHBlckNhc2UiLCJldmVudE9wdGlvbnMiLCJhbmFseXRpY3NFdmVudCIsImFkZE9wdGlvbnMiLCJDb3JlIiwiY29uZmlnIiwiX2FwaUtleSIsImFwaUtleSIsIl9leHBlcmllbmNlS2V5IiwiZXhwZXJpZW5jZUtleSIsIl9leHBlcmllbmNlVmVyc2lvbiIsImV4cGVyaWVuY2VWZXJzaW9uIiwiX2xvY2FsZSIsImxvY2FsZSIsIl9maWVsZEZvcm1hdHRlcnMiLCJmaWVsZEZvcm1hdHRlcnMiLCJnbG9iYWxTdG9yYWdlIiwicGVyc2lzdGVudFN0b3JhZ2UiLCJfc2VhcmNoZXIiLCJzZWFyY2hTZXJ2aWNlIiwiX2F1dG9Db21wbGV0ZSIsImF1dG9Db21wbGV0ZVNlcnZpY2UiLCJfcXVlc3Rpb25BbnN3ZXIiLCJxdWVzdGlvbkFuc3dlclNlcnZpY2UiLCJfYW5hbHl0aWNzUmVwb3J0ZXIiLCJhbmFseXRpY3NSZXBvcnRlciIsIm9uVW5pdmVyc2FsU2VhcmNoIiwib25WZXJ0aWNhbFNlYXJjaCIsImFwcGVuZCIsInNldCIsInNlYXJjaExvYWRpbmciLCJ2ZXJ0aWNhbFNlYXJjaCIsImdldFN0YXRlIiwiZ2VvbG9jYXRpb24iLCJpc0R5bmFtaWNGaWx0ZXJzRW5hYmxlZCIsIl9pc0R5bmFtaWNGaWx0ZXJzRW5hYmxlZCIsInNraXBTcGVsbENoZWNrIiwicXVlcnlUcmlnZ2VyIiwic2Vzc2lvblRyYWNraW5nRW5hYmxlZCIsInNvcnRCeXMiLCJ0aGVuIiwidHJhbnNmb3JtVmVydGljYWwiLCJtZXJnZWRSZXN1bHRzIiwiZXhwb3NlZFBhcmFtcyIsInF1ZXJ5U3RyaW5nIiwiaW5wdXQiLCJyZXBvcnQiLCJmcm9tRGF0YSIsImFsbEZpbHRlcnMiLCJnZXRBbGwiLCJ0b3RhbEZpbHRlciIsImZhY2V0RmlsdGVyIiwidW5pdmVyc2FsU2VhcmNoIiwidHJhbnNmb3JtIiwic2VjdGlvbnNDb3VudCIsIm5hbWVzcGFjZSIsInF1ZXJ5VW5pdmVyc2FsIiwicXVlcnlWZXJ0aWNhbCIsInF1ZXJ5RmlsdGVyIiwic3VibWl0UXVlc3Rpb24iLCJzb3J0QnlPcHRpb25zIiwib3B0aW9uIiwiZGlyZWN0aW9uIiwiZXZ0IiwibW9kdWxlSWQiLCJjYiIsIm9uIiwidGhpcyIsImdsb2JhbCIsImRvY3VtZW50Iiwid2luZG93IiwiRE9NIiwiZCIsInAiLCJodG1sIiwiY29udGFpbmVyIiwiY3JlYXRlRWxlbWVudCIsImZyYWciLCJjcmVhdGVSYW5nZSIsImNyZWF0ZUNvbnRleHR1YWxGcmFnbWVudCIsImFwcGVuZENoaWxkIiwiRE9NUGFyc2VyIiwicGFyc2VGcm9tU3RyaW5nIiwiYm9keSIsInBhcmVudCIsInNlbGVjdG9yIiwiSFRNTEVsZW1lbnQiLCJXaW5kb3ciLCJIVE1MRG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwicXVlcnlTZWxlY3RvckFsbCIsInJlYWR5U3RhdGUiLCJlbCIsIm9wdHNfZGF0YSIsIm5vZGUiLCJwcm9wcyIsImFkZENsYXNzIiwiaW5zZXJ0QWRqYWNlbnRIVE1MIiwiY2xhc3NOYW1lIiwiY2xhc3NlcyIsImxlbiIsImNsYXNzTGlzdCIsImFkZCIsImlubmVySFRNTCIsInN0eWxlcyIsInByb3AiLCJzdHlsZSIsImF0dHIiLCJzZXRBdHRyaWJ1dGUiLCJhdHRycyIsInNldHRpbmdzIiwiZSIsIl9jdXN0b21FdmVudCIsImRpc3BhdGNoRXZlbnQiLCJfc2V0dGluZ3MiLCJidWJibGVzIiwiY2FuY2VsYWJsZSIsImRldGFpbCIsImNyZWF0ZUV2ZW50IiwiaW5pdEN1c3RvbUV2ZW50IiwiaGFuZGxlciIsImFkZEV2ZW50TGlzdGVuZXIiLCJvbmNlIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImN0eHQiLCJ0YXJnZXQiLCJpc0VxdWFsTm9kZSIsIm1hdGNoZXMiLCJwYXJlbnROb2RlIiwiZWxlbWVudCIsInBvdGVudGlhbE1hdGNoIiwiRWxlbWVudCIsInByb3RvdHlwZSIsIm1zTWF0Y2hlc1NlbGVjdG9yIiwid2Via2l0TWF0Y2hlc1NlbGVjdG9yIiwiU2VhcmNoUGFyYW1zIiwiX3BhcmFtcyIsIlVSTFNlYXJjaFBhcmFtcyIsInBhcmFtcyIsInNlYXJjaCIsImluZGV4T2YiLCJlbmNvZGVkUGFyYW1zIiwia2V5VmFsIiwiZGVjb2RlIiwiU3RyaW5nIiwiZW5jb2RlIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwiZW5jb2RlVVJJQ29tcG9uZW50IiwibWF0Y2giLCJSZW5kZXJlciIsInRlbXBsYXRlIiwiU1ZHSWNvbiIsInBhdGgiLCJjb21wbGV4Q29udGVudHMiLCJ2aWV3Qm94IiwiY29udGVudHMiLCJwYXRoRGVmaW5pdGlvbiIsImNvbXBsZXhDb250ZW50c1BhcmFtcyIsInBhcnNlQ29udGVudHMiLCJpY29uUHJlZml4IiwiaWNvbnNBcnJheSIsInRodW1iSWNvbiIsInJlY2VpcHRJY29uIiwicGFudGhlb25JY29uIiwibWljSWNvbiIsImRpcmVjdGlvbnNJY29uIiwiY2FsZW5kYXJJY29uIiwiY2FsbG91dEljb24iLCJpbmZvSWNvbiIsImJyaWVmY2FzZUljb24iLCJrYWJvYkljb24iLCJwZXJzb25JY29uIiwibWFnbmlmeWluZ0dsYXNzSWNvbiIsIm9mZmljZUljb24iLCJsaW5rSWNvbiIsIndpbmRvd0ljb24iLCJwaG9uZUljb24iLCJ0YWdJY29uIiwiZG9jdW1lbnRJY29uIiwiY2hldnJvbkljb24iLCJzdXBwb3J0SWNvbiIsInlleHRJY29uIiwicGluSWNvbiIsImdlYXJJY29uIiwibGlnaHRCdWxiSWNvbiIsImVsZW1lbnRzIiwiY2xvc2UiLCJ5ZXh0QW5pbWF0ZWRGb3J3YXJkIiwieWV4dEFuaW1hdGVkUmV2ZXJzZSIsInN0YXJJY29uIiwiSWNvbnMiLCJpY29uIiwibWFya3VwIiwiSGFuZGxlYmFyc1JlbmRlcmVyIiwidGVtcGxhdGVzIiwiX2hhbmRsZWJhcnMiLCJfaGIiLCJfdGVtcGxhdGVzIiwiX3JlZ2lzdGVyQ3VzdG9tSGVscGVycyIsInJlZ2lzdGVySGVscGVyIiwiU2FmZVN0cmluZyIsImVzY2FwZUV4cHJlc3Npb24iLCJjb21waWxlIiwidGVtcGxhdGVOYW1lIiwiYXJnMSIsImFyZzIiLCJmbiIsImludmVyc2UiLCJwaG9uZU51bWJlclN0cmluZyIsImNsZWFuZWQiLCJpbnRsQ29kZSIsImFyZ3MiLCJhcmd1bWVudHMiLCJyb290IiwidiIsIm51bWJlciIsInNpbmd1bGFyVGV4dCIsInBsdXJhbFRleHQiLCJzZWxmIiwiZ2V0SW52ZXJ0ZWQiLCJlc2NhcGVkSW5wdXQiLCJoaWdobGlnaHRlZFZhbCIsImdldCIsIlJlbmRlcmVycyIsIlNPWSIsIkhhbmRsZWJhcnMiLCJMSUJfVkVSU0lPTiIsIlBST0RVQ1RJT04iLCJTQU5EQk9YIiwiQ09NUElMRURfVEVNUExBVEVTX1VSTCIsIkRlZmF1bHRUZW1wbGF0ZXNMb2FkZXIiLCJvbkxvYWRlZCIsInNldEluc3RhbmNlIiwiZ2V0SW5zdGFuY2UiLCJfb25Mb2FkZWQiLCJfZmV0Y2hUZW1wbGF0ZXMiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsInNjcmlwdCIsImNyZWF0ZUVsIiwib25sb2FkIiwib25lcnJvciIsImFzeW5jIiwic3JjIiwiaW5zdGFuY2UiLCJFdmVudEVtaXR0ZXIiLCJfbGlzdGVuZXJzIiwibGlzdGVuZXJzIiwia2VlcCIsIlN0YXRlIiwiX3N0YXRlIiwib3B0VmFsIiwiX3NldCIsImVtaXQiLCJvcHRQcm9wIiwiZmV0Y2giLCJNZXRob2RzIiwiR0VUIiwiUE9TVCIsIlBVVCIsIkRFTEVURSIsIkh0dHBSZXF1ZXN0ZXIiLCJvcHRzIiwicmVxdWVzdCIsImVuY29kZVBhcmFtcyIsInVybFBhcmFtcyIsImpzb25Cb2R5IiwicmVxdWVzdENvbmZpZyIsImNyZWRlbnRpYWxzIiwibWV0aG9kIiwicmVxQXJncyIsIl9mZXRjaCIsImZldGNoUG9seWZpbGwiLCJfc2VuZEJlYWNvbiIsIm5hdmlnYXRvciIsInNlbmRCZWFjb24iLCJzeW5jIiwieGhyIiwiWE1MSHR0cFJlcXVlc3QiLCJBY3RpdmVYT2JqZWN0Iiwib3BlbiIsInNldFJlcXVlc3RIZWFkZXIiLCJjYWxsIiwic2VuZCIsImhhc1BhcmFtIiwic2VhcmNoUXVlcnkiLCJnZXRMaXZlQXBpVXJsIiwiZW52IiwiZ2V0Q2FjaGVkTGl2ZUFwaVVybCIsImdldEtub3dsZWRnZUFwaVVybCIsImdldEFuYWx5dGljc1VybCIsImNvbnZlcnNpb25UcmFja2luZ0VuYWJsZWQiLCJhZGRQYXJhbXNUb1VybCIsImxvY2F0aW9uIiwicGFyYW1LZXkiLCJBcGlSZXF1ZXN0IiwiX3JlcXVlc3RlciIsIl9lbnZpcm9ubWVudCIsImVudmlyb25tZW50IiwiX2Jhc2VVcmwiLCJiYXNlVXJsIiwiX2VuZHBvaW50IiwiZW5kcG9pbnQiLCJfdmVyc2lvbiIsInZlcnNpb24iLCJfZ2xvYmFsU3RvcmFnZSIsImJhc2VQYXJhbXMiLCJzYW5pdGl6ZVBhcmFtcyIsInBvc3QiLCJoYXMiLCJTZWFyY2hBcGkiLCJqc29uIiwiQW5hbHl0aWNzUmVwb3J0ZXIiLCJidXNpbmVzc0lkIiwiZ2xvYmFsT3B0aW9ucyIsIl9idXNpbmVzc0lkIiwiX2dsb2JhbE9wdGlvbnMiLCJfY29udmVyc2lvblRyYWNraW5nRW5hYmxlZCIsImNvb2tpZURhdGEiLCJ5dGFnIiwiYmVhY29uIiwidG9BcGlFdmVudCIsImlzRW5hYmxlZCIsIk5vb3BBbmFseXRpY3NSZXBvcnRlciIsIk1vZHVsZURhdGEiLCJfaWQiLCJfaGlzdG9yeSIsIl9kYXRhIiwiY2FwdHVyZVByZXZpb3VzIiwic2hpZnQiLCJwcmV2aW91cyIsIl9wcmV2aW91cyIsInBvcCIsIkdsb2JhbFN0b3JhZ2UiLCJfbW9kdWxlRGF0YUNvbnRhaW5lciIsIl9mdXR1cmVMaXN0ZW5lcnMiLCJfaW5pdERhdGFDb250YWluZXIiLCJfYXBwbHlGdXR1cmVMaXN0ZW5lcnMiLCJkYXRhS2V5Iiwic3RhcnRzV2l0aCIsIm1vZHVsZURhdGEiLCJvZmYiLCJmdXR1cmVzIiwiZnV0dXJlIiwiQ29tcG9uZW50Iiwic3lzdGVtQ29uZmlnIiwiY29uc3RydWN0b3IiLCJfY29uZmlnIiwiX3R5cGUiLCJfcGFyZW50Q29udGFpbmVyIiwicGFyZW50Q29udGFpbmVyIiwiX2NoaWxkcmVuIiwic3RhdGUiLCJjb3JlIiwiY29tcG9uZW50TWFuYWdlciIsIl9hbmFseXRpY3NPcHRpb25zIiwiYW5hbHl0aWNzT3B0aW9ucyIsIl9jb250YWluZXIiLCJfY2xhc3NOYW1lIiwiX3JlbmRlciIsInJlbmRlciIsIl9yZW5kZXJlciIsInJlbmRlcmVyIiwiX3RlbXBsYXRlIiwiX3RlbXBsYXRlTmFtZSIsImRlZmF1bHRUZW1wbGF0ZU5hbWUiLCJfaXNNb3VudGVkIiwidHJhbnNmb3JtRGF0YSIsIm9uQ3JlYXRlIiwib25DcmVhdGVPdmVycmlkZSIsImJpbmQiLCJvbk1vdW50Iiwib25Nb3VudE92ZXJyaWRlIiwib25VcGRhdGUiLCJvblVwZGF0ZU92ZXJyaWRlIiwidXNlck9uQ3JlYXRlIiwidXNlck9uTW91bnQiLCJ1c2VyT25VcGRhdGUiLCJzZXRTdGF0ZSIsInVuTW91bnQiLCJtb3VudCIsIm5ld1N0YXRlIiwiY2hpbGRDb21wb25lbnQiLCJjcmVhdGUiLCJfcGFyZW50T3B0cyIsImMiLCJyZW1vdmUiLCJjaGlsZCIsImVtcHR5Iiwib25Vbk1vdW50IiwiYmVmb3JlTW91bnQiLCJhc0pTT04iLCJkb21Db21wb25lbnRzIiwicXVlcnlBbGwiLCJfY3JlYXRlU3ViY29tcG9uZW50IiwiZG9tSG9va3MiLCJfY3JlYXRlQW5hbHl0aWNzSG9vayIsImJlZm9yZVJlbmRlciIsImFmdGVyUmVuZGVyIiwiZG9tQ29tcG9uZW50IiwiZGF0YXNldCIsImlzQ29tcG9uZW50TW91bnRlZCIsImNoaWxkRGF0YSIsImFkZENoaWxkIiwicmV2ZXJzZSIsImlzQW5hbHl0aWNzQXR0YWNoZWQiLCJldmVudHR5cGUiLCJldmVudGxhYmVsIiwiZXZlbnRvcHRpb25zIiwiRXJyb3JSZXBvcnRlciIsInByaW50VmVyYm9zZSIsInNlbmRUb1NlcnZlciIsImVyciIsInByaW50RXJyb3IiLCJ0b0pzb24iLCJjb25zb2xlIiwiQ29uc29sZUVycm9yUmVwb3J0ZXIiLCJQZXJzaXN0ZW50U3RvcmFnZSIsIl9oaXN0b3J5VGltZXIiLCJfdXBkYXRlTGlzdGVuZXIiLCJ1cGRhdGVMaXN0ZW5lciIsIl9yZXNldExpc3RlbmVyIiwicmVzZXRMaXN0ZW5lciIsIm9ucG9wc3RhdGUiLCJfY2FsbExpc3RlbmVyIiwicmVwbGFjZUhpc3RvcnkiLCJuZXdEYXRhIiwiX3VwZGF0ZUhpc3RvcnkiLCJjbGVhclRpbWVvdXQiLCJzZXRUaW1lb3V0IiwiaGlzdG9yeSIsInJlcGxhY2VTdGF0ZSIsInB1c2hTdGF0ZSIsImxpc3RlbmVyIiwiYWxsUGFyYW1zIiwiU2VhcmNoQ29uZmlnIiwiZGVmYXVsdEluaXRpYWxTZWFyY2giLCJ2YWxpZGF0ZSIsIkF1dG9Db21wbGV0ZURhdGEiLCJpbnB1dEludGVudHMiLCJzIiwiciIsIkF1dG9Db21wbGV0ZVJlc3VsdCIsInF1ZXJ5SW50ZW50cyIsIkF1dG9Db21wbGV0ZURhdGFUcmFuc2Zvcm1lciIsIkF1dG9Db21wbGV0ZUFwaSIsInNlYXJjaFBhcmFtZXRlcnMiLCJ2ZXJ0aWNhbCIsInVuaXZlcnNhbCIsInVuaXZlcnNhbE9wdGlvbnMiLCJ2ZXJ0aWNhbE9wdGlvbnMiLCJNb2NrQXV0b0NvbXBsZXRlU2VydmljZSIsImVtcHR5UmVzdWx0cyIsImZpbHRlck9wdGlvbnMiLCJvcHQiLCJsb3dlcmNhc2UiLCJ0b0xvd2VyQ2FzZSIsInJhbmRvbVN0cmluZyIsIk1hdGgiLCJyYW5kb20iLCJRdWVzdGlvbkFuc3dlckFwaSIsImVudGl0eUlkIiwic2l0ZSIsInF1ZXN0aW9uTGFuZ3VhZ2UiLCJtb2RlIiwiaGVhZGVycyIsIk1vY2tRdWVzdGlvbkFuc3dlclNlcnZpY2UiLCJBUkJJVFJBUllfQlVTSU5FU1NfSUQiLCJNb2NrU2VhcmNoU2VydmljZSIsIl9nZXRNb2NrRGF0YUpzb24iLCJyZXNwIiwidGV4dCIsInVzZU1vY2tEYXRhIiwiZGVsYXllZFJlc3BvbnNlIiwiY29uc3RydWN0VmVydGljYWxSZXNwb25zZSIsInNlY3Rpb24iLCJmaW5kIiwidmVydGljYWxNb2R1bGUiLCJmbG9vciIsIm1vZGlmeVJlc3VsdHMiLCJnZXRSZXN1bHRzRmlsdGVyZXIiLCJjb25zdHJ1Y3RVbml2ZXJzYWxSZXNwb25zZSIsImNvbnN1bWVyIiwibW9kaWZ5Rm4iLCJmaWxsU2VjdGlvbkZpZWxkcyIsIm1ldGEiLCJ1dWlkIiwidXVpZFY0IiwiZmFpbGVkVmVydGljYWxzIiwicXVlcnlEdXJhdGlvbk1pbGxpcyIsInJhbmRvbUludCIsIlJFU0laRV9ERUJPVU5DRSIsIk1PQklMRV9CUkVBS1BPSU5UIiwiTU9CSUxFX09WRVJGTE9XX0JFSEFWSU9SX09QVElPTiIsIkNPTExBUFNFIiwiSU5ORVJTQ1JPTEwiLCJUYWIiLCJpc0ZpcnN0IiwiaXNBY3RpdmUiLCJ0YWJzQ29uZmlnIiwidGFicyIsInRhYiIsImhpZGVJbk5hdmlnYXRpb24iLCJOYXZpZ2F0aW9uQ29tcG9uZW50Iiwib3ZlcmZsb3dMYWJlbCIsIm92ZXJmbG93SWNvbiIsIl90YWJzQ29uZmlnIiwidmVydGljYWxQYWdlcyIsIl90YWJzIiwiX3RhYk9yZGVyIiwiZ2V0RGVmYXVsdFRhYk9yZGVyIiwiZ2V0VXJsUGFyYW1zIiwiX25hdkJyZWFrcG9pbnRzIiwiX21vYmlsZU92ZXJmbG93QmVoYXZpb3IiLCJtb2JpbGVPdmVyZmxvd0JlaGF2aW9yIiwiX2FyaWFMYWJlbCIsImFyaWFMYWJlbCIsImNoZWNrT3V0c2lkZUNsaWNrIiwiY2hlY2tNb2JpbGVPdmVyZmxvd0JlaGF2aW9yIiwic2hvdWxkQ29sbGFwc2UiLCJiaW5kT3ZlcmZsb3dIYW5kbGVycyIsInJlZml0TmF2IiwidG9nZ2xlTW9yZURyb3Bkb3duIiwidW5iaW5kT3ZlcmZsb3dIYW5kbGVycyIsIm1vcmVCdXR0b24iLCJtYWluTGlua3MiLCJjb2xsYXBzZWRMaW5rcyIsIm5hdldpZHRoIiwiY29udGFpbnMiLCJvZmZzZXRXaWR0aCIsIm51bUJyZWFrcG9pbnRzIiwibWFpbkxpbmtzV2lkdGgiLCJjaGlsZHJlbiIsImxhc3RMaW5rIiwiX3ByZXBlbmQiLCJmaXJzdExpbmsiLCJjbG9zZU1vcmVEcm9wZG93biIsInRvZ2dsZSIsIl9jbG9zZXN0IiwiX2NoZWNrTW9iaWxlT3ZlcmZsb3dCZWhhdmlvclRpbWVyIiwibWVyZ2VUYWJPcmRlciIsImdlbmVyYXRlVGFiVXJsIiwic2hvd0NvbGxhcHNlIiwiaGFzT3duUHJvcGVydHkiLCJkb2NGcmFnIiwiY3JlYXRlRG9jdW1lbnRGcmFnbWVudCIsImlzTm9kZSIsIk5vZGUiLCJjcmVhdGVUZXh0Tm9kZSIsImluc2VydEJlZm9yZSIsImZpcnN0Q2hpbGQiLCJwcmVwZW5kIiwiY2xvc2VzdEVsU2VsZWN0b3IiLCJwYXJlbnRFbGVtZW50Iiwibm9kZVR5cGUiLCJjbG9zZXN0IiwidW5zaGlmdCIsIm90aGVyVGFiT3JkZXIiLCJ0YWJDb25maWciLCJJY29uU3RhdGUiLCJTZWFyY2hDb21wb25lbnQiLCJfdmVydGljYWxLZXkiLCJfdXNlRm9ybSIsInVzZUZvcm0iLCJfZm9ybUVsIiwiZm9ybVNlbGVjdG9yIiwiX2lucHV0RWwiLCJpbnB1dEVsIiwibGFiZWxUZXh0Iiwic3VibWl0VGV4dCIsImNsZWFyVGV4dCIsInN1Ym1pdEljb24iLCJwcm9tcHRIZWFkZXIiLCJhdXRvRm9jdXMiLCJjbGVhckJ1dHRvbiIsImF1dG9jb21wbGV0ZU9uTG9hZCIsInJlZGlyZWN0VXJsIiwiX2lzVHdpbiIsImlzVHdpbiIsInEiLCJxdWVyeUVsIiwiZGVib3VuY2VkU2VhcmNoIiwiX3NlYXJjaENvb2xkb3duIiwic2VhcmNoQ29vbGRvd24iLCJfcHJvbXB0Rm9yTG9jYXRpb24iLCJwcm9tcHRGb3JMb2NhdGlvbiIsIkJvb2xlYW4iLCJfc2hvd0NsZWFyQnV0dG9uIiwiX2FsbG93RW1wdHlTZWFyY2giLCJhbGxvd0VtcHR5U2VhcmNoIiwiX2F1dG9Db21wbGV0ZU5hbWUiLCJfZ2VvbG9jYXRpb25PcHRpb25zIiwiZW5hYmxlSGlnaEFjY3VyYWN5IiwidGltZW91dCIsIm1heGltdW1BZ2UiLCJnZW9sb2NhdGlvbk9wdGlvbnMiLCJfZ2VvbG9jYXRpb25UaW1lb3V0QWxlcnQiLCJlbmFibGVkIiwiZ2VvbG9jYXRpb25UaW1lb3V0QWxlcnQiLCJzZXRRdWVyeSIsImZvY3VzSW5wdXRFbGVtZW50IiwiaXNVc2luZ1lleHRBbmltYXRlZEljb24iLCJjdXN0b21JY29uVXJsIiwiaW5pdEFuaW1hdGVkSWNvbiIsImluaXRTZWFyY2giLCJpbml0QXV0b0NvbXBsZXRlIiwiaW5pdENsZWFyQnV0dG9uIiwiaWNvblN0YXRlIiwiaXNSZXF1ZXN0aW5nQW5pbWF0aW9uRnJhbWUiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJmb3J3YXJkSWNvbiIsInJldmVyc2VJY29uIiwiTUFHTklGWUlOR19HTEFTUyIsIllFWFQiLCJpY29uSXNGcm96ZW4iLCJyZXF1ZXN0SWNvbkFuaW1hdGlvbkZyYW1lIiwiZm9jdXNTdGlsbEluU2VhcmNoYmFyIiwicmVsYXRlZFRhcmdldCIsImNsaWNrYWJsZUVsZW1lbnRTZWxlY3RvcnMiLCJjbGlja2FibGVFbCIsImFuaW1hdGVJY29uVG9NYWduaWZ5aW5nR2xhc3MiLCJhbmltYXRlSWNvblRvWWV4dCIsIl9hdXRvY29tcGxldGUiLCJidXR0b24iLCJmb3JtIiwicHJldmVudERlZmF1bHQiLCJvblF1ZXJ5U3VibWl0Iiwic3VibWl0QnV0dG9uIiwiaHJlZiIsImJsdXIiLCJpbnB1dFNlbGVjdG9yIiwib25TdWJtaXQiLCJ0cmlnZ2VyIiwib25DaGFuZ2UiLCJfdGhyb3R0bGVkIiwiZmV0Y2hRdWVyeUludGVudHMiLCJxdWVyeUhhc05lYXJNZUludGVudCIsImdldEN1cnJlbnRQb3NpdGlvbiIsInBvc2l0aW9uIiwiY29vcmRzIiwiYWxlcnQiLCJnZXRBY3RpdmVDb21wb25lbnQiLCJjb25maWdJZCIsImF1dG9jb21wbGV0ZURhdGEiLCJhdXRvY29tcGxldGVSZXF1ZXN0IiwiYXV0b0NvbXBsZXRlVmVydGljYWwiLCJhdXRvQ29tcGxldGVVbml2ZXJzYWwiLCJmbGF0TWFwIiwibWF0Y2hpbmdSZXN1bHQiLCJmb3J3YXJkSWNvbk9wdHMiLCJpY29uTmFtZSIsImNsYXNzTmFtZXMiLCJyZXZlcnNlSWNvbk9wdHMiLCJzaG93Q2xlYXJCdXR0b24iLCJpY29uSWQiLCJmb2N1cyIsImJ1aWxkU2VhcmNoUGFyYW1ldGVycyIsInNlYXJjaFBhcmFtZXRlckNvbmZpZ3MiLCJzZWN0aW9uZWQiLCJmaWVsZHMiLCJidWlsZEZpZWxkcyIsImZpZWxkQ29uZmlncyIsImZjIiwiZmV0Y2hFbnRpdGllcyIsIkZpbHRlclNlYXJjaENvbXBvbmVudCIsIl9zdG9yZU9uQ2hhbmdlIiwic3RvcmVPbkNoYW5nZSIsInNlYXJjaFRleHQiLCJpc0ZpbHRlclNlYXJjaCIsIm9yaWdpbmFsRmlsdGVyIiwiZnJvbVJlc3BvbnNlIiwic2V0RmlsdGVyIiwiS2V5cyIsIkJBQ0tTUEFDRSIsIlRBQiIsIkVOVEVSIiwiU0hJRlQiLCJDVFJMIiwiQUxUIiwiRVNDQVBFIiwiTEVGVCIsIlJJR0hUIiwiVVAiLCJET1dOIiwiTEVGVF9PU19LRVkiLCJSSUdIVF9PU19LRVkiLCJTRUxFQ1RfS0VZIiwiQXV0b0NvbXBsZXRlQ29tcG9uZW50Iiwic3lzdGVtT3B0cyIsIl9hdXRvY29tcGxldGVFbHMiLCJhdXRvQ29tcGxldGVFbHMiLCJfb3JpZ2luYWxRdWVyeSIsIl9zZWN0aW9uSW5kZXgiLCJfcmVzdWx0SW5kZXgiLCJfYXV0b0ZvY3VzIiwiX29uU3VibWl0IiwiX29uQ2hhbmdlIiwiX3NlYXJjaFBhcmFtZXRlcnMiLCJpc1F1ZXJ5SW5wdXRGb2N1c2VkIiwic2VjdGlvbkluZGV4IiwicmVzdWx0SW5kZXgiLCJhY3RpdmVFbGVtZW50IiwicXVlcnlJbnB1dCIsImF0dHJpYnV0ZXMiLCJhdXRvY29tcGxldGUiLCJhdXRvY29ycmVjdCIsInNwZWxsY2hlY2siLCJyZXNldCIsImF1dG9Db21wbGV0ZSIsImhhbmRsZU5hdmlnYXRlUmVzdWx0cyIsImtleUNvZGUiLCJoYW5kbGVTdWJtaXRSZXN1bHQiLCJkZWxlZ2F0ZSIsInVwZGF0ZVF1ZXJ5IiwiaGFuZGxlVHlwaW5nIiwidXBkYXRlU3RhdGUiLCJvcHRWYWx1ZSIsImlnbm9yZWRLZXlzIiwiYXV0b0NvbXBsZXRlRmlsdGVyIiwiREVGQVVMVF9DT05GSUciLCJzdWdnZXN0aW9uSGVscFRleHQiLCJTcGVsbENoZWNrQ29tcG9uZW50IiwiY29ycmVjdGVkUXVlcnlVcmwiLCJfYnVpbGRSZWRpcmVjdFF1ZXJ5VXJsIiwiaGVscFRleHQiLCJfZ2V0SGVscFRleHQiLCJpcEFjY3VyYWN5SGVscFRleHQiLCJkZXZpY2VBY2N1cmFjeUhlbHBUZXh0IiwidXBkYXRlTG9jYXRpb25CdXR0b25UZXh0IiwiTG9jYXRpb25CaWFzQ29tcG9uZW50IiwiX3VwZGF0ZUxvY2F0aW9uRWwiLCJ1cGRhdGVMb2NhdGlvbkVsIiwiX2xvY2F0aW9uRGlzcGxheU5hbWUiLCJfYWNjdXJhY3kiLCJfYWxsb3dVcGRhdGUiLCJfZGlzYWJsZUxvY2F0aW9uVXBkYXRlSWZHZW9sb2NhdGlvbkRlbmllZCIsIl9kb1NlYXJjaCIsIl9oYW5kbGVHZW9sb2NhdGlvbkVycm9yIiwiY29kZSIsIl9kaXNhYmxlTG9jYXRpb25VcGRhdGUiLCJfZ2V0TG9jYXRpb25EaXNwbGF5TmFtZSIsImFjY3VyYWN5VGV4dCIsIl9nZXRBY2N1cmFjeUhlbHBUZXh0IiwiaXNQcmVjaXNlTG9jYXRpb24iLCJpc1Vua25vd25Mb2NhdGlvbiIsImFsbG93VXBkYXRlIiwicGVybWlzc2lvbnMiLCJGYWNldCIsImF2YWlsYWJsZUZpZWxkSWRzIiwiZmxhdEZpbHRlcnMiLCIkb3IiLCJGaWx0ZXJCb3hDb25maWciLCJzaG93Q291bnQiLCJzZWFyY2hPbkNoYW5nZSIsInJlc2V0RmlsdGVyIiwicmVzZXRGYWNldCIsInJlc2V0RmlsdGVyTGFiZWwiLCJyZXNldEZhY2V0TGFiZWwiLCJyZXNldEZpbHRlcnMiLCJyZXNldEZhY2V0cyIsInJlc2V0RmlsdGVyc0xhYmVsIiwicmVzZXRGYWNldHNMYWJlbCIsInNob3dNb3JlTGltaXQiLCJzaG93TW9yZUxhYmVsIiwic2hvd0xlc3NMYWJlbCIsInNob3dNb3JlIiwiZXhwYW5kIiwic2hvd051bWJlckFwcGxpZWQiLCJhcHBseUxhYmVsIiwiYXBwbHlCdXR0b25TZWxlY3RvciIsImZpbHRlckNvbmZpZ3MiLCJpc0R5bmFtaWMiLCJGaWx0ZXJCb3hDb21wb25lbnQiLCJfZmlsdGVyQ29tcG9uZW50cyIsIl9maWx0ZXJzIiwic2hvd1Jlc2V0IiwicmVzZXRMYWJlbCIsInNob3dBcHBseUJ1dHRvbiIsInNob3dFeHBhbmQiLCJvbkZpbHRlckNoYW5nZSIsImdldEZpbHRlciIsIl9zYXZlRmlsdGVyc1RvU3RvcmFnZSIsIl9zZWFyY2giLCJyZXNldEVsIiwiY2xlYXJPcHRpb25zIiwidmFsaWRGaWx0ZXJzIiwiY29tYmluZWRGaWx0ZXIiLCJmcm9tRmlsdGVycyIsInNldEZhY2V0RmlsdGVyIiwiU1VQUE9SVEVEX0NPTlRST0xTIiwiRmlsdGVyT3B0aW9uc0NvbmZpZyIsImNvbnRyb2wiLCJvcHRpb25TZWxlY3RvciIsInByZXZpb3VzT3B0aW9ucyIsInNlbGVjdGVkT3B0aW9ucyIsInNldERlZmF1bHRTZWxlY3RlZFZhbHVlcyIsInJlZHVjZSIsIm51bVNlbGVjdGVkIiwiRmlsdGVyT3B0aW9uc0NvbXBvbmVudCIsInNlbGVjdGVkQ291bnQiLCJnZXRTZWxlY3RlZENvdW50IiwiYWxsU2hvd24iLCJpc1NpbmdsZU9wdGlvbiIsIl91cGRhdGVPcHRpb24iLCJwYXJzZUludCIsImNoZWNrZWQiLCJsZWdlbmQiLCJjbGljayIsInVwZGF0ZUxpc3RlbmVycyIsIl9idWlsZEZpbHRlciIsIl9hcHBseUZpbHRlciIsImVxdWFsIiwiZ3JvdXAiLCJtaW5QbGFjZWhvbGRlclRleHQiLCJtYXhQbGFjZWhvbGRlclRleHQiLCJSYW5nZUZpbHRlckNvbXBvbmVudCIsIl9maWVsZCIsIm1pblZhbCIsIm1heFZhbCIsIl9yYW5nZSIsImluaXRpYWxNaW4iLCJpbml0aWFsTWF4IiwiX3RpdGxlIiwiX21pbkxhYmVsIiwibWluTGFiZWwiLCJfbWF4TGFiZWwiLCJtYXhMYWJlbCIsIm1pblZhbHVlIiwibWF4VmFsdWUiLCJfdXBkYXRlUmFuZ2UiLCJpbmNsdXNpdmVSYW5nZSIsIkRhdGVSYW5nZUZpbHRlckNvbXBvbmVudCIsIl9pc0V4Y2x1c2l2ZSIsImlzRXhjbHVzaXZlIiwidG9kYXkiLCJEYXRlIiwidG9kYXlTdHJpbmciLCJnZXRGdWxsWWVhciIsImdldE1vbnRoIiwicGFkU3RhcnQiLCJnZXREYXRlIiwibWluRGF0ZSIsIm1heERhdGUiLCJfZGF0ZSIsImRhdGVNaW4iLCJkYXRlTWF4IiwiZGF0ZSIsImV4Y2x1c2l2ZVJhbmdlIiwiRmFjZXRzQ29uZmlnIiwiZmllbGRDb250cm9scyIsIkZhY2V0c0NvbXBvbmVudCIsIl9hcHBseUJ1dHRvblNlbGVjdG9yIiwiX2ZpbHRlcmJveCIsImlzTm9SZXN1bHRzIiwiZW5hYmxlRHluYW1pY0ZpbHRlcnMiLCJNRVRFUlNfUEVSX01JTEUiLCJnZW9CdXR0b25JY29uIiwiZ2VvQnV0dG9uSWNvbkFsdFRleHQiLCJnZW9CdXR0b25UZXh0IiwiZW5hYmxlZFRleHQiLCJsb2FkaW5nVGV4dCIsImVycm9yVGV4dCIsImJ1dHRvblNlbGVjdG9yIiwiR2VvTG9jYXRpb25Db21wb25lbnQiLCJwbGFjZWhvbGRlciIsIl9lbmFibGVkIiwiZ2VvTG9hZGluZyIsImdlb0Vycm9yIiwiZ2VvRW5hYmxlZCIsImdlb1ZhbHVlIiwiZ2VvUGxhY2Vob2xkZXIiLCJfaW5pdEF1dG9Db21wbGV0ZSIsIl90b2dnbGVHZW9GaWx0ZXIiLCJfc2F2ZURhdGFUb1N0b3JhZ2UiLCJTb3J0T3B0aW9uc0NvbXBvbmVudCIsImFzc2lnbkRlZmF1bHRzIiwic2VsZWN0ZWRPcHRpb25JbmRleCIsImlzU2VsZWN0ZWQiLCJoaWRlRXhjZXNzT3B0aW9ucyIsInZlcnRpY2FsUmVzdWx0cyIsImNvbnRhaW5lckVsIiwiaGFuZGxlT3B0aW9uU2VsZWN0aW9uIiwidG9nZ2xlRWwiLCJhcHBseUVsIiwiX3NvcnRSZXN1bHRzIiwib3B0aW9uSW5kZXgiLCJfdXBkYXRlU2VsZWN0ZWRPcHRpb24iLCJjbGVhclNvcnRCeXMiLCJzZXRTb3J0QnlzIiwidXBkYXRlZENvbmZpZyIsImRlZmF1bHRTb3J0TGFiZWwiLCJPUFRJT05fVFlQRVMiLCJuZXdPcHRpb24iLCJpc0ZpZWxkIiwiRXZlbnRUeXBlcyIsIlRIVU1CU19VUCIsIlRIVU1CU19ET1dOIiwicG9zaXRpdmVGZWVkYmFja1NyVGV4dCIsIm5lZ2F0aXZlRmVlZGJhY2tTclRleHQiLCJmb290ZXJUZXh0T25TdWJtaXNzaW9uIiwiRGlyZWN0QW5zd2VyQ29tcG9uZW50IiwiZm9ybUVsIiwiX3RodW1ic1VwU2VsZWN0b3IiLCJ0aHVtYnNVcFNlbGVjdG9yIiwiX3RodW1ic0Rvd25TZWxlY3RvciIsInRodW1ic0Rvd25TZWxlY3RvciIsIl92aWV3RGV0YWlsc1RleHQiLCJ2aWV3RGV0YWlsc1RleHQiLCJoYXNTdGF0ZSIsImNoZWNrZWRWYWx1ZSIsInJlcG9ydFF1YWxpdHkiLCJzZWFyY2hlciIsImN0YUxhYmVsIiwiaXNHb29kIiwiQWx0ZXJuYXRpdmVWZXJ0aWNhbCIsImljb25VcmwiLCJoYXNJY29uIiwiQWx0ZXJuYXRpdmVWZXJ0aWNhbHNDb21wb25lbnQiLCJfYWx0ZXJuYXRpdmVWZXJ0aWNhbHMiLCJfdmVydGljYWxzQ29uZmlnIiwidmVydGljYWxzQ29uZmlnIiwiX2N1cnJlbnRWZXJ0aWNhbExhYmVsIiwiZ2V0Q3VycmVudFZlcnRpY2FsTGFiZWwiLCJ2ZXJ0aWNhbFN1Z2dlc3Rpb25zIiwiX2J1aWxkVmVydGljYWxTdWdnZXN0aW9ucyIsIl91bml2ZXJzYWxVcmwiLCJ1bml2ZXJzYWxVcmwiLCJfaXNTaG93aW5nUmVzdWx0cyIsImlzU2hvd2luZ1Jlc3VsdHMiLCJjdXJyZW50VmVydGljYWxMYWJlbCIsInRoaXNWZXJ0aWNhbCIsInZlcnRpY2FscyIsInF1ZXJ5UGFyYW1zIiwiYWx0ZXJuYXRpdmVWZXJ0aWNhbCIsIm1hdGNoaW5nVmVydGljYWxDb25maWciLCJNYXBQcm92aWRlciIsIl96b29tIiwiem9vbSIsIl9kZWZhdWx0UG9zaXRpb24iLCJkZWZhdWx0UG9zaXRpb24iLCJfbm9SZXN1bHRzIiwibm9SZXN1bHRzIiwiX3Nob3dFbXB0eU1hcCIsInNob3dFbXB0eU1hcCIsIl9tYXAiLCJfaXNMb2FkZWQiLCJfb25QaW5DbGljayIsIm9uUGluQ2xpY2siLCJfcGluQ29uZmlnIiwicGluIiwiREVGQVVMVF9QSU5fQ09ORklHIiwiX2NvbGxhcHNlUGlucyIsImNvbGxhcHNlUGlucyIsImlzTG9hZGVkIiwibWFwRGF0YSIsIm1hcmtlcnMiLCJsb2NhdGlvblRvSXRlbSIsIm0iLCJjb2xsYXBzZWRNYXJrZXJzIiwiY29sbGFwc2VkTWFya2VyIiwidmlzaWJsZUZvck5vUmVzdWx0cyIsImhhc0VtcHR5TWFwIiwiYW5jaG9yIiwic3ZnIiwic2NhbGVkU2l6ZSIsImxhYmVsVHlwZSIsIkdvb2dsZU1hcFByb3ZpZGVyIiwiX3pvb21PZmZzZXQiLCJfY2xpZW50SWQiLCJjbGllbnRJZCIsIl9zaWduYXR1cmUiLCJzaWduYXR1cmUiLCJoYXNWYWxpZENsaWVudENyZWRlbnRpYWxzIiwib25Mb2FkIiwiZ29vZ2xlIiwib25Mb2FkRnVuYyIsImdlbmVyYXRlQ3JlZGVudGlhbHMiLCJzaG91bGRIaWRlTWFwIiwidmlzaWJsZSIsIm1hcHMiLCJNYXAiLCJjZW50ZXIiLCJnZXRDZW50ZXJNYXJrZXIiLCJfY29sbGFwc2VNYXJrZXJzIiwiZ29vZ2xlTWFwTWFya2VyQ29uZmlncyIsIkdvb2dsZU1hcE1hcmtlckNvbmZpZyIsImJvdW5kcyIsIkxhdExuZ0JvdW5kcyIsIm1hcmtlciIsIk1hcmtlciIsImFkZExpc3RlbmVyIiwiZXh0ZW5kIiwiZml0Qm91bmRzIiwibWFwQ2VudGVyIiwic2VyaWFsaXplZE1hcmtlcnMiLCJwaW5Db25maWciLCJwaW5Db25maWdPYmoiLCJQb2ludCIsIngiLCJ5IiwiU2l6ZSIsInciLCJoIiwiTWFwQm94TWFwUHJvdmlkZXIiLCJtYXBib3hnbCIsImFjY2Vzc1Rva2VuIiwiY3NzIiwicmVsIiwibWFwYm94TWFwTWFya2VyQ29uZmlncyIsIk1hcEJveE1hcmtlckNvbmZpZyIsIkxuZ0xhdEJvdW5kcyIsIndyYXBwZXIiLCJMbmdMYXQiLCJzZXRMbmdMYXQiLCJnZXRMbmdMYXQiLCJhZGRUbyIsImdldEVsZW1lbnQiLCJwYWRkaW5nIiwic3RhdGljTWFwUGluIiwiUHJvdmlkZXJUeXBlcyIsIk1hcENvbXBvbmVudCIsImRpc3BsYXlBbGxSZXN1bHRzIiwiX21hcFByb3ZpZGVyIiwibWFwUHJvdmlkZXIiLCJnZXRQcm92aWRlckluc3RhbmNlIiwibG9hZEpTIiwiaW5pdCIsImNhcmRUZW1wbGF0ZXMiLCJjYXJkVHlwZXMiLCJDYXJkQ29uZmlnIiwiY2FyZFR5cGUiLCJkYXRhTWFwcGluZ3MiLCJfaW5kZXgiLCJpc1VuaXZlcnNhbCIsIkNhcmRDb21wb25lbnQiLCJjYXJkQ29tcG9uZW50TmFtZSIsInVwZGF0ZWREYXRhIiwibmV3T3B0cyIsInNob3dPcmRpbmFsIiwiYXR0cmlidXRlIiwiUmVzdWx0c0hlYWRlckNvbXBvbmVudCIsInNob3dSZXN1bHRDb3VudCIsInNob3dBcHBsaWVkRmlsdGVycyIsInNob3dGaWVsZE5hbWVzIiwicmVzdWx0c0NvdW50U2VwYXJhdG9yIiwicmVzdWx0c0xlbmd0aCIsImdyb3VwZWRGaWx0ZXJzIiwiZGlzcGxheVZhbHVlcyIsImhhc0ZpbHRlcnMiLCJzaG91bGRTaG93RmlsdGVycyIsInJlc3VsdHNDb3VudFN0YXJ0IiwicmVzdWx0c0NvdW50RW5kIiwic2hvd1Jlc3VsdFNlcGFyYXRvciIsImFwcGxpZWRGaWx0ZXJzQXJyYXkiLCJnZXRBcHBsaWVkRmlsdGVyc0FycmF5IiwiVmVydGljYWxSZXN1bHRzQ29uZmlnIiwicGFyZW50T3B0cyIsInJlbmRlckl0ZW0iLCJpdGVtVGVtcGxhdGUiLCJtYXhOdW1iZXJPZkNvbHVtbnMiLCJjYXJkIiwicmVzdWx0c0hlYWRlck9wdHMiLCJWZXJ0aWNhbFJlc3VsdHNDb21wb25lbnQiLCJub1Jlc3VsdHNDb25maWciLCJfbm9SZXN1bHRzQ29uZmlnIiwiX3VzZUxlZ2FjeU5vUmVzdWx0cyIsIl9kaXNwbGF5QWxsUmVzdWx0cyIsIl9ub1Jlc3VsdHNUZW1wbGF0ZSIsIm51bUNvbHVtbnMiLCJ1bml2ZXJzYWxDb25maWciLCJ2ZXJ0aWNhbENvbmZpZyIsImRpc3BsYXlSZXN1bHRzSWZFeGlzdCIsInNob3dSZXN1bHRzSGVhZGVyIiwiaXNQcmVTZWFyY2giLCJpc1NlYXJjaExvYWRpbmciLCJpc1NlYXJjaENvbXBsZXRlIiwiZ2V0VW5pdmVyc2FsVXJsIiwiZ2V0VmVydGljYWxVUkwiLCJyZXN1bHRzUHJlc2VudCIsInNob3dOb1Jlc3VsdHMiLCJwbGFjZWhvbGRlcnMiLCJ1c2VMZWdhY3lOb1Jlc3VsdHMiLCJfb3B0cyIsIm1hcENvbmZpZyIsInJlc3VsdHNIZWFkZXJEYXRhIiwiQWNjb3JkaW9uUmVzdWx0c0NvbXBvbmVudCIsIl9zZWxlY3RvckJhc2UiLCJzZWxlY3RvckJhc2UiLCJjb2xsYXBzZWRDbGFzcyIsInNlbGZFbCIsImZpcnN0RWxlbWVudENoaWxkIiwiYWNjb3JkaW9uRWxzIiwiYWNjb3JkaW9uRWwiLCJ0b2dnbGVTZWxlY3RvciIsImNvbnRlbnRFbCIsImJvZHlTZWxlY3RvciIsImNoYW5nZUhlaWdodCIsImhhbmRsZUNsaWNrIiwid3JhcHBlckVsIiwiaXNDb2xsYXBzZWQiLCJ0YXJnZXRFbCIsImhlaWdodCIsInNjcm9sbEhlaWdodCIsImJ1aWxkU2VsZWN0b3IiLCJVbml2ZXJzYWxSZXN1bHRzQ29tcG9uZW50IiwiY2hpbGRPcHRzIiwiZ2V0Q2hpbGRDb25maWciLCJ1c2VBY2NvcmRpb24iLCJkZWZhdWx0Q29uZmlnIiwiUGFnaW5hdGlvbkNvbXBvbmVudCIsIl9maXJzdFBhZ2VCdXR0b25FbmFibGVkIiwic2hvd0ZpcnN0IiwiX2xhc3RQYWdlQnV0dG9uRW5hYmxlZCIsInNob3dMYXN0IiwiX3BhZ2VMYWJlbCIsInBhZ2VMYWJlbCIsImlzTm9ybWFsUmVzdWx0cyIsImlzVmlzaWJsZUZvck5vUmVzdWx0cyIsInNob3dDb250cm9scyIsInNob3VsZFNob3dDb250cm9scyIsInByZXZpb3VzUGFnZUJ1dHRvbiIsIm5leHRQYWdlQnV0dG9uIiwibWF4UGFnZSIsInRydW5jIiwidXBkYXRlUGFnZSIsImZpcnN0UGFnZUJ1dHRvbiIsImxhc3RQYWdlQnV0dG9uIiwic2Nyb2xsVG9Ub3AiLCJ2ZXJ0aWNhbFBhZ2UiLCJkb2N1bWVudEVsZW1lbnQiLCJzY3JvbGxUb3AiLCJwYWdlTnVtYmVyIiwiaXNNb3JlUmVzdWx0cyIsImZpcnN0UGFnZUJ1dHRvbkVuYWJsZWQiLCJsYXN0UGFnZUJ1dHRvbkVuYWJsZWQiLCJzaG93Rmlyc3RQYWdlQnV0dG9uIiwic2hvd1ByZXZpb3VzUGFnZUJ1dHRvbiIsInNob3dOZXh0UGFnZUJ1dHRvbiIsInNob3dMYXN0UGFnZUJ1dHRvbiIsIkNUQUNvbGxlY3Rpb25Db21wb25lbnQiLCJpbmNsdWRlTGVnYWN5Q2xhc3NlcyIsInJlc29sdmVDVEFNYXBwaW5nIiwiX2N0YU1vZGlmaWVycyIsImN0YSIsImRlZmF1bHRFdmVudE9wdGlvbnMiLCJwYXJzZWRDVEFzIiwiY3RhcyIsImN0YU1hcHBpbmciLCJjdGFPYmplY3QiLCJjdGFBdHRyaWJ1dGUiLCJhdHRyaWJ1dGVNYXBwaW5nIiwid2FybiIsInRyaW0iLCJTdGFuZGFyZENhcmRDb25maWciLCJyYXdSZXN1bHQiLCJhcHBseURhdGFNYXBwaW5ncyIsInNob3dNb3JlVGV4dCIsInNob3dMZXNzVGV4dCIsImRldGFpbHNPdmVyTGltaXQiLCJzaG93VG9nZ2xlIiwiU3RhbmRhcmRDYXJkQ29tcG9uZW50IiwiaGlkZUV4Y2Vzc0RldGFpbHMiLCJoYXNDVEFzIiwiU3RhbmRhcmQiLCJBY2NvcmRpb25DYXJkQ29uZmlnIiwiQWNjb3JkaW9uQ2FyZENvbXBvbmVudCIsImlzRXhwYW5kZWQiLCJhY2NvcmRpb25Cb2R5RWwiLCJBY2NvcmRpb24iLCJMZWdhY3lDYXJkQ29uZmlnIiwiTGVnYWN5Q2FyZENvbXBvbmVudCIsIl9sZWdhY3lFdmVudE9wdGlvbnMiLCJMZWdhY3kiLCJRdWVzdGlvblN1Ym1pc3Npb25Db21wb25lbnQiLCJ2YWxpZGF0ZUNvbmZpZyIsIm9uUmVzdWx0c1VwZGF0ZSIsInRyaWdnZXJFbCIsImJpbmRGb3JtVG9nZ2xlIiwiYmluZEZvcm1Gb2N1cyIsImJpbmRGb3JtU3VibWl0IiwiZ2V0QW5hbHl0aWNzRXZlbnQiLCJmb3JtRGF0YSIsImlucHV0RmllbGRzIiwib2JqIiwiY2hlY2tWYWxpZGl0eSIsInZhbGlkaXR5IiwidmFsdWVNaXNzaW5nIiwiZW1haWxGb3JtYXRFcnJvclRleHQiLCJwcml2YWN5UG9saWN5RXJyb3JUZXh0IiwiSWNvbkNvbXBvbmVudCIsIkNUQUNvbmZpZyIsImFuYWx5dGljc0V2ZW50VHlwZSIsImFuYWx5dGljcyIsIl9pc1NvbG8iLCJDVEFDb21wb25lbnQiLCJyZXBvcnRBbmFseXRpY3NFdmVudCIsIkNPTVBPTkVOVF9DTEFTU19MSVNUIiwiQ09NUE9ORU5UX1JFR0lTVFJZIiwicmVnaXN0cnkiLCJjbGF6eiIsIkNvbXBvbmVudE1hbmFnZXIiLCJfYWN0aXZlQ29tcG9uZW50cyIsIl9jb3JlIiwicmVwb3J0ZXIiLCJjb21wb25lbnRDbGF6eiIsImNvbXBvbmVudFR5cGUiLCJzaW1pbGFyQ29tcG9uZW50cyIsImNvbXBvbmVudENsYXNzIiwiZ2V0U2ltaWxhckNvbXBvbmVudHMiLCJhcmVEdXBsaWNhdGVOYW1lc0FsbG93ZWQiLCJzb21lIiwiZmluZEluZGV4Iiwic3BsaWNlIiwiVmVydGljYWxQYWdlQ29uZmlnIiwiVmVydGljYWxQYWdlc0NvbmZpZyIsInBhZ2VzIiwidmVydGljYWxQYWdlc0NvbmZpZyIsInBhZ2UiLCJNYXN0ZXJTd2l0Y2hBcGkiLCJfcmVxdWVzdCIsInN0YXR1cyIsImRpc2FibGVkIiwiaXNEaXNhYmxlZCIsIkRFRkFVTFRTIiwiQW5zd2VycyIsImZvcm1hdFJpY2hUZXh0IiwibWFya2Rvd24iLCJSdGZDb252ZXJ0ZXIiLCJ0b0hUTUwiLCJjb21wb25lbnRzIiwiX29uUmVhZHkiLCJfZWxpZ2libGVGb3JBbmFseXRpY3MiLCJfc2VydmljZXMiLCJfYW5hbHl0aWNzUmVwb3J0ZXJTZXJ2aWNlIiwic3RhdHVzUGFnZSIsInBhcnNlZENvbmZpZyIsInBhcnNlQ29uZmlnIiwib25TdGF0ZUNoYW5nZSIsInNldEFsbCIsIm1hc3RlclN3aXRjaEFwaSIsIl9pbml0SW50ZXJuYWwiLCJtb2NrIiwiZ2V0TW9ja1NlcnZpY2VzIiwiZ2V0U2VydmljZXMiLCJzZXRRdWVyeUlkIiwic2V0QW5hbHl0aWNzUmVwb3J0ZXIiLCJpbml0U2Nyb2xsTGlzdGVuZXIiLCJzdWJzdHIiLCJzZXRDb3JlIiwic2V0UmVuZGVyZXIiLCJfc2V0RGVmYXVsdEluaXRpYWxTZWFyY2giLCJvblJlYWR5IiwidXNlVGVtcGxhdGVzIiwidGVtcGxhdGVCdW5kbGUiLCJfaGFuZGxlUG9ueWZpbGxDc3NWYXJpYWJsZXMiLCJkaXNhYmxlQ3NzVmFyaWFibGVzUG9ueWZpbGwiLCJwb255ZmlsbERpc2FibGVkIiwiY2FsbGJhY2siLCJwb255ZmlsbENzc1ZhcmlhYmxlcyIsIm9uRmluYWxseSIsInNhbmRib3hQcmVmaXgiLCJyZWdpc3RlciIsInJlbW92ZUJ5TmFtZSIsIm9wdEluIiwic2V0Q29udmVyc2lvblRyYWNraW5nRW5hYmxlZCIsInNlYXJjaENvbmZpZyIsInByZXBvcHVsYXRlZFF1ZXJ5IiwiY3NzVmFycyIsIm9ubHlMZWdhY3kiLCJvbkVycm9yIiwib25TdWNjZXNzIiwiZXJyb3JSZXBvcnRlclNlcnZpY2UiLCJkZWJ1ZyIsInN1cHByZXNzRXJyb3JSZXBvcnRzIiwiREVCT1VOQ0VfVElNRSIsInNlbmRFdmVudCIsImlubmVySGVpZ2h0IiwicGFnZVlPZmZzZXQiLCJnZXRRdWVyeUlkIiwiQU5TV0VSUyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7RUFBQTs7RUFFQTs7Ozs7QUFLQSxxQkFBZTtFQUNiQSxFQUFBQSxVQUFVLEVBQUUsWUFEQztFQUViQyxFQUFBQSxjQUFjLEVBQUUsZ0JBRkg7RUFHYkMsRUFBQUEsZUFBZSxFQUFFO0VBSEosQ0FBZjs7RUNQQTtNQUVxQkMsU0FDbkIsa0JBQXdCO0VBQUEsTUFBWEMsSUFBVyx1RUFBSixFQUFJOztFQUFBOztFQUN0Qjs7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QyxDQUFDLENBQUMsQUFBcUQsY0FBYyxDQUFDLENBQUMsRUFBRSxDQUE2RSxDQUFDLENBQUNFLGNBQUksQ0FBQyxVQUFVLENBQUMsQUFBYSxJQUFJLENBQUMsQ0FBQyxXQUFXLEVBQUUsT0FBTyxVQUFVLENBQUMsVUFBVSxDQUFDLFdBQVcsRUFBRSxPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUMsV0FBVyxFQUFFLE9BQU9DLGNBQU0sQ0FBQ0EsY0FBTSxDQUFDLFdBQVcsRUFBRSxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsTUFBTSxJQUFJLEtBQUssQ0FBQyx3RUFBd0UsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksS0FBSyxDQUFDLHNCQUFzQixDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsaUNBQWlDLEVBQUMsQ0FBQyxDQUFDLENBQUMsaUNBQWlDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsaUlBQWlJLENBQUMsQ0FBQyxDQUFDLGtDQUFrQyxDQUFDLENBQUMsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsbUhBQW1ILENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLHNCQUFzQixDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFNLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxLQUFLLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxFQUFFLEtBQUssR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyw2Q0FBNkMsQ0FBQyxDQUFDLENBQUMsSUFBSSxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsNEJBQTRCLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxvQ0FBb0MsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsc0JBQXNCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLE9BQU8sS0FBSyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsUUFBUSxFQUFFLE9BQU8sQ0FBQyxDQUFDLE1BQU0sSUFBSSxTQUFTLENBQUMsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsT0FBTSxpQkFBaUIsR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDLE9BQU8sTUFBTSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTSxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDLE9BQU0sQ0FBQyxDQUFDLENBQUMsT0FBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxPQUFNLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLEtBQUssR0FBRyxDQUFDLEtBQUssSUFBSSxDQUFDLEtBQUssSUFBSSxDQUFDLEtBQUssSUFBSSxDQUFDLEtBQUssS0FBSyxDQUFDLE9BQU0sQ0FBQyxDQUFDLENBQUMsT0FBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxjQUFjLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxPQUFNLENBQUMsQ0FBQyxDQUFDLFFBQVEsT0FBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLGtCQUFrQixDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxXQUFXLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUMsV0FBVyxFQUFFLEVBQUMsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsNkJBQTZCLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxDQUFDLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxDQUFDLDBCQUEwQixDQUFDLENBQUMsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsb0JBQW9CLEVBQUMsQ0FBQyxDQUFDLENBQUMsMEJBQTBCLENBQUMsQ0FBQyxDQUFDLG9CQUFvQixDQUFDLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsR0FBRyxHQUFHLENBQUMsQ0FBQyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsR0FBRSxDQUFDLENBQUMsR0FBRSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLEdBQUcsQ0FBQyxFQUFFLEVBQUUsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUUsQ0FBQyxPQUFPLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLG1DQUFtQyxDQUFDLENBQUMsQ0FBQyxtQ0FBbUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUMsT0FBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLElBQUksWUFBWSxDQUFDLENBQUMsQ0FBQyxPQUFPLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxJQUFJLEtBQUssQ0FBQyw4QkFBOEIsQ0FBQyxDQUFDLENBQUMsZUFBZSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxNQUFNLElBQUksS0FBSyxDQUFDLDRDQUE0QyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQyxNQUFNLElBQUksS0FBSyxDQUFDLGdEQUFnRCxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTSxJQUFJLEtBQUssQ0FBQyxpREFBaUQsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxRQUFRLEVBQUUsT0FBTyxDQUFDLENBQUMsTUFBTSxJQUFJLEtBQUssQ0FBQywrQkFBK0IsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxDQUFDLGVBQWUsQ0FBQyxFQUFFLENBQUMsaUJBQWlCLENBQUMsRUFBRSxDQUFDLHNCQUFzQixDQUFDLEVBQUUsQ0FBQyxtQkFBbUIsQ0FBQyxFQUFFLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLHFCQUFxQixDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsMEJBQTBCLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLGtCQUFrQixDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLHVCQUF1QixDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLHdCQUF3QixDQUFDLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsMEJBQTBCLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMseUJBQXlCLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLDJCQUEyQixDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsMEJBQTBCLENBQUMsRUFBRSxDQUFDLG9CQUFvQixDQUFDLEVBQUUsQ0FBQyxxQkFBcUIsQ0FBQyxFQUFFLENBQUMsdUJBQXVCLENBQUMsRUFBRSxDQUFDLGtCQUFrQixDQUFDLEVBQUUsQ0FBQywwQkFBMEIsQ0FBQyxFQUFFLENBQUMsd0JBQXdCLENBQUMsRUFBRSxDQUFDLG9CQUFvQixDQUFDLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxFQUFFLENBQUMseUJBQXlCLENBQUMsRUFBRSxDQUFDLDJCQUEyQixDQUFDLEVBQUUsQ0FBQyxxQkFBcUIsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLHdCQUF3QixDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLHNCQUFzQixDQUFDLENBQUMsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsMkJBQTJCLENBQUMsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQywwQkFBMEIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLHlCQUF5QixDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsb0JBQW9CLENBQUMsRUFBRSxDQUFDLHFCQUFxQixDQUFDLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxFQUFFLENBQUMsd0JBQXdCLENBQUMsRUFBRSxDQUFDLDJCQUEyQixDQUFDLEVBQUUsQ0FBQywwQkFBMEIsQ0FBQyxFQUFFLENBQUMseUJBQXlCLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLHdCQUF3QixDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsdUJBQXVCLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQywwQkFBMEIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLDhCQUE4QixDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLHlCQUF5QixDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLHFCQUFxQixDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsc0JBQXNCLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLDRCQUE0QixDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsdUJBQXVCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLDhCQUE4QixDQUFDLENBQUMsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsOEJBQThCLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMseUJBQXlCLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsOEJBQThCLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxXQUFXLEdBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLHlCQUF5QixDQUFDLEVBQUUsQ0FBQywwQkFBMEIsQ0FBQyxFQUFFLENBQUMsOEJBQThCLENBQUMsRUFBRSxDQUFDLHlCQUF5QixDQUFDLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxFQUFFLENBQUMsdUJBQXVCLENBQUMsRUFBRSxDQUFDLDRCQUE0QixDQUFDLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxFQUFFLENBQUMscUJBQXFCLENBQUMsRUFBRSxDQUFDLHdCQUF3QixDQUFDLEVBQUUsQ0FBQyw2QkFBNkIsQ0FBQyxFQUFFLENBQUMsOEJBQThCLENBQUMsRUFBRSxDQUFDLHFCQUFxQixDQUFDLEVBQUUsQ0FBQyw4QkFBOEIsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsZUFBZSxDQUFDLFVBQVUsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxlQUFlLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU0sT0FBTyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTSxNQUFNLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUUsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxpQkFBaUIsRUFBRSxZQUFZLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsUUFBUSxHQUFHLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEdBQUcsUUFBUSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxrQkFBa0IsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sSUFBSSxLQUFLLENBQUMseUJBQXlCLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sSUFBSSxLQUFLLENBQUMseUJBQXlCLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLElBQUksS0FBSyxDQUFDLHlCQUF5QixDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxNQUFNLElBQUksS0FBSyxDQUFDLG1DQUFtQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLE1BQU0sSUFBSSxLQUFLLENBQUMsbUNBQW1DLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsT0FBTyxJQUFJLEdBQUcsSUFBSSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQyxPQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsT0FBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLE9BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxFQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQyxPQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLEdBQUcsQ0FBQyxDQUFDLE9BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxPQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLE9BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDLE9BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxPQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDLE9BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLEdBQUcsQ0FBQyxFQUFFLEVBQUUsR0FBRyxDQUFDLENBQUMsT0FBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRSxDQUFDLE9BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLG1DQUFtQyxDQUFDLHlCQUF5QixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUMsT0FBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLE9BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLHVCQUF1QixDQUFDLENBQUMsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUMsT0FBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsR0FBRyxDQUFDLEVBQUUsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsT0FBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLE9BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsRUFBRSxFQUFFLEdBQUcsQ0FBQyxDQUFDLE1BQU0sT0FBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLE9BQU0sQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUMsT0FBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLE9BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsV0FBVyxHQUFHLENBQUMsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsT0FBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLEdBQUUsQ0FBQyxDQUFDLEdBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDLE1BQU0sSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLENBQUMsRUFBRSxnQkFBZ0IsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLGtCQUFrQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUMsT0FBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLEdBQUcsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxHQUFHLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLG9CQUFvQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLE9BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsR0FBRyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsT0FBTSxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxHQUFHLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQVUsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixDQUFDLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxPQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFFLENBQUMsQ0FBQyxHQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixDQUFDLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLE9BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDLE9BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxHQUFHLENBQUMsRUFBRSxFQUFFLEdBQUcsQ0FBQyxDQUFDLE9BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsR0FBRyxDQUFDLEVBQUUsRUFBRSxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLFNBQVMsT0FBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUMsT0FBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsTUFBTSxFQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBQyxFQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixDQUFDLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU0sWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFFBQVEsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsWUFBWSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxHQUFHLGFBQWEsR0FBRyxDQUFDLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsTUFBTSxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUUsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsaUJBQWlCLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsS0FBSyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLEtBQUssRUFBRSxXQUFXLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLEdBQUUsRUFBQyxDQUFDLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBQyxFQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsOEJBQThCLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsTUFBTSxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLENBQUMsWUFBWSxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsTUFBTSxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxHQUFFLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsdUJBQXVCLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQywwQkFBMEIsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLFdBQVcsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLE1BQU0sR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFDLFlBQVksR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLE1BQU0sR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsR0FBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsRUFBQyxFQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsV0FBVyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsV0FBVyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxFQUFFLFdBQVcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLFdBQVcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsMElBQTBJLENBQUMsQ0FBQyxDQUFDLHNEQUFzRCxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxPQUFNLEVBQUUsRUFBRSxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQyxPQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLE1BQU0sR0FBRyxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsRUFBQyxFQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsTUFBTSxFQUFFLEVBQUUsR0FBRyxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsY0FBYyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsRUFBRSxFQUFFLEdBQUcsQ0FBQyxDQUFDLE9BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLEVBQUMsRUFBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLHNDQUFzQyxDQUFDLENBQUMsQ0FBQywyQkFBMkIsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsb0NBQW9DLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLG1CQUFtQixDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxPQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxHQUFHLENBQUMsRUFBRSxFQUFFLEdBQUcsQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLG1CQUFtQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLGtCQUFrQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLE9BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsT0FBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFFLENBQUMsSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsT0FBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLGtCQUFrQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxPQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxPQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLE9BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsR0FBRSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLEdBQUcsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsU0FBUyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQyxPQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLEVBQUMsRUFBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLEtBQUssR0FBRyxDQUFDLEtBQUssR0FBRyxDQUFDLEtBQUssR0FBRyxDQUFDLE9BQU0sQ0FBQyxDQUFDLENBQUMsUUFBUSxPQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLENBQUMsa0JBQWtCLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLHdCQUF3QixDQUFDLEdBQUcsQ0FBQyxxQkFBcUIsQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsK0JBQStCLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxzQkFBc0IsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxxQkFBcUIsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsb0JBQW9CLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsbUJBQW1CLENBQUMsR0FBRyxDQUFDLHdCQUF3QixDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLENBQUMsaUJBQWlCLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxHQUFHLENBQUMsaUJBQWlCLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLG9CQUFvQixDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLENBQUMscUJBQXFCLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLENBQUMsaUJBQWlCLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsa0JBQWtCLENBQUMsR0FBRyxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsR0FBRyxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLENBQUMscUJBQXFCLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLG9CQUFvQixDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLG9CQUFvQixDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLG9CQUFvQixDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLHVCQUF1QixDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxHQUFHLENBQUMsaUJBQWlCLENBQUMsR0FBRyxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMscUJBQXFCLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsb0JBQW9CLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLHFCQUFxQixDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsb0JBQW9CLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLG1CQUFtQixDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsa0JBQWtCLENBQUMsR0FBRyxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsaUJBQWlCLENBQUMsR0FBRyxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsa0JBQWtCLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsa0JBQWtCLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsaUJBQWlCLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsbUJBQW1CLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsaUJBQWlCLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sTUFBTSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU0sbUJBQW1CLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMscUJBQXFCLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLG1CQUFtQixDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyx5VkFBeVYsQ0FBQyxDQUFDLENBQUMsNkVBQTZFLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsZUFBZSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxjQUFjLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLG1CQUFtQixDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLElBQUksS0FBSyxDQUFDLDhCQUE4QixDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLFNBQVMsQ0FBQyxDQUFDLENBQUMsT0FBTSxpQkFBaUIsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsT0FBTSxpQkFBaUIsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxHQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLElBQUksWUFBWSxDQUFDLENBQUMsQ0FBQyxPQUFPLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLE9BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGdCQUFnQixDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsV0FBVyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLGNBQWMsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLE9BQU8sSUFBSSxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLGNBQWMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsTUFBTSxFQUFFLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLCtCQUErQixDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLDhCQUE4QixDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLDZCQUE2QixDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLDZCQUE2QixDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMs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QUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUMsV0FBVyxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLG1CQUFtQixDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsS0FBSyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsWUFBWSxDQUFDLEtBQUssRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsY0FBYyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLFFBQVEsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLFdBQVcsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxFQUFFLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsa0JBQWtCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLFlBQVcsQ0FBQyxLQUFLLENBQUMsRUFBRSxrQkFBa0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLHNCQUFzQixDQUFDLENBQUMsQ0FBQyxjQUFjLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsU0FBUyxFQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSSxDQUFDLElBQUksQ0FBQyxDQUFDLG1CQUFtQixDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLG9DQUFvQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsd0JBQXdCLENBQUMsQ0FBQyxDQUFDLDhCQUE4QixDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLFFBQVEsRUFBRSxPQUFPLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLE9BQU8sQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQywyQkFBMkIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsaURBQWlELENBQUMsV0FBVyxDQUFDLGdEQUFnRCxDQUFDLGVBQWUsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLElBQUksVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEtBQUssSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLFFBQVEsQ0FBQyxFQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxxQkFBb0IsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLHdOQUF1TixDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMscTJEQUFvMkQsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLDJEQUEwRCxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLHdCQUF3QixDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsdUJBQXVCLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLHNCQUFzQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsc0JBQXNCLEVBQUMsQ0FBQyxDQUFDLENBQUMsdUJBQXVCLENBQUMsRUFBRSxDQUFDLHVCQUF1QixDQUFDLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxFQUFFLENBQUMsc0JBQXNCLENBQUMsRUFBRSxDQUFDLHdCQUF3QixDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsbUlBQWtJLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsT0FBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsR0FBRyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsU0FBUyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FB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